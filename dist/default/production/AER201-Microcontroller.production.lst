

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Fri Feb 24 19:45:18 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    63                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	text75,global,reloc=2,class=CODE,delta=1
    95                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    96                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    97                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    98  0000                     
    99                           ; Version 1.40
   100                           ; Generated 01/12/2016 GMT
   101                           ; 
   102                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   103                           ; All rights reserved.
   104                           ; 
   105                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   106                           ; 
   107                           ; Redistribution and use in source and binary forms, with or without modification, are
   108                           ; permitted provided that the following conditions are met:
   109                           ; 
   110                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   111                           ;        conditions and the following disclaimer.
   112                           ; 
   113                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   114                           ;        of conditions and the following disclaimer in the documentation and/or other
   115                           ;        materials provided with the distribution.
   116                           ; 
   117                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   118                           ;        software without specific prior written permission.
   119                           ; 
   120                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   121                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   122                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   123                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   124                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   125                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   126                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   127                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   128                           ; 
   129                           ; 
   130                           ; Code-generator required, PIC18F4620 Definitions
   131                           ; 
   132                           ; SFR Addresses
   133  0000                     
   134                           	psect	idataCOMRAM
   135  002B58                     __pidataCOMRAM:
   136                           	opt stack 0
   137                           
   138                           ;initializer for _timer1_20ms_high
   139  002B58  00B7               	dw	183
   140                           
   141                           ;initializer for _timer1_20ms_low
   142  002B5A  00BC               	dw	188
   143                           
   144                           	psect	idataBANK0
   145  002B30                     __pidataBANK0:
   146                           	opt stack 0
   147                           
   148                           ;initializer for _THIR
   149  002B30  00FF               	dw	255
   150                           
   151                           ;initializer for _THMAG
   152  002B32  00FF               	dw	255
   153                           
   154                           ;initializer for _f_ID_receive
   155  002B34  0001               	dw	1
   156                           
   157                           ;initializer for _first
   158  002B36  0001               	dw	1
   159                           
   160                           	psect	idataBANK1
   161  002B5C                     __pidataBANK1:
   162                           	opt stack 0
   163                           
   164                           ;initializer for printRTC@F3207
   165  002B5C  4D                 	db	77
   166  002B5D  4D                 	db	77
   167  002B5E  4D                 	db	77
   168  002B5F  00                 	db	0
   169                           
   170                           	psect	mediumconst
   171  00FDB4                     __pmediumconst:
   172                           	opt stack 0
   173  00FDB4  00                 	db	0
   174  00FDB5                     _keys:
   175                           	opt stack 0
   176  00FDB5  31                 	db	49
   177  00FDB6  32                 	db	50
   178  00FDB7  33                 	db	51
   179  00FDB8  41                 	db	65
   180  00FDB9  34                 	db	52
   181  00FDBA  35                 	db	53
   182  00FDBB  36                 	db	54
   183  00FDBC  42                 	db	66
   184  00FDBD  37                 	db	55
   185  00FDBE  38                 	db	56
   186  00FDBF  39                 	db	57
   187  00FDC0  43                 	db	67
   188  00FDC1  2A                 	db	42
   189  00FDC2  30                 	db	48
   190  00FDC3  23                 	db	35
   191  00FDC4  44                 	db	68
   192  00FDC5  00                 	db	0
   193  00FDC6                     __end_of_keys:
   194                           	opt stack 0
   195  00FDC6                     _dpowers:
   196                           	opt stack 0
   197  00FDC6  0001               	dw	1
   198  00FDC8  000A               	dw	10
   199  00FDCA  0064               	dw	100
   200  00FDCC  03E8               	dw	1000
   201  00FDCE  2710               	dw	10000
   202  00FDD0                     __end_of_dpowers:
   203                           	opt stack 0
   204  0000                     _ADCON0	set	4034
   205  0000                     _ADCON0bits	set	4034
   206  0000                     _ADCON1	set	4033
   207  0000                     _ADRESH	set	4036
   208  0000                     _ADRESL	set	4035
   209  0000                     _CMCONbits	set	4020
   210  0000                     _CVRCON	set	4021
   211  0000                     _INTCONbits	set	4082
   212  0000                     _LATA	set	3977
   213  0000                     _LATAbits	set	3977
   214  0000                     _LATB	set	3978
   215  0000                     _LATC	set	3979
   216  0000                     _LATCbits	set	3979
   217  0000                     _LATD	set	3980
   218  0000                     _LATDbits	set	3980
   219  0000                     _LATE	set	3981
   220  0000                     _OSCCON	set	4051
   221  0000                     _OSCTUNEbits	set	3995
   222  0000                     _PORTAbits	set	3968
   223  0000                     _PORTB	set	3969
   224  0000                     _PORTBbits	set	3969
   225  0000                     _SSPADD	set	4040
   226  0000                     _SSPBUF	set	4041
   227  0000                     _SSPCON1	set	4038
   228  0000                     _SSPCON2	set	4037
   229  0000                     _SSPSTAT	set	4039
   230  0000                     _T0CON	set	4053
   231  0000                     _T1CON	set	4045
   232  0000                     _T3CON	set	4017
   233  0000                     _TMR0H	set	4055
   234  0000                     _TMR0L	set	4054
   235  0000                     _TMR1H	set	4047
   236  0000                     _TMR1L	set	4046
   237  0000                     _TMR3H	set	4019
   238  0000                     _TMR3L	set	4018
   239  0000                     _TRISA	set	3986
   240  0000                     _TRISB	set	3987
   241  0000                     _TRISC	set	3988
   242  0000                     _TRISD	set	3989
   243  0000                     _TRISE	set	3990
   244  0000                     _ACKDT	set	32301
   245  0000                     _ACKEN	set	32300
   246  0000                     _ADFM	set	32263
   247  0000                     _ADIE	set	31982
   248  0000                     _ADON	set	32272
   249  0000                     _INT1IE	set	32643
   250  0000                     _INT1IF	set	32640
   251  0000                     _PEIE	set	32662
   252  0000                     _PEN	set	32298
   253  0000                     _RCEN	set	32299
   254  0000                     _RSEN	set	32297
   255  0000                     _SEN	set	32296
   256  0000                     _TMR0IE	set	32661
   257  0000                     _TMR0IF	set	32658
   258  0000                     _TMR0ON	set	32431
   259  0000                     _TMR1IE	set	31976
   260  0000                     _TMR1IF	set	31984
   261  0000                     _TMR1ON	set	32360
   262  0000                     _TMR2IE	set	31977
   263  0000                     _TMR3IE	set	32001
   264  0000                     _TMR3IF	set	32009
   265  0000                     _TMR3ON	set	32136
   266  0000                     _TRISC3	set	31907
   267  0000                     _TRISC4	set	31908
   268  0000                     _VCFG0	set	32268
   269  0000                     _VCFG1	set	32269
   270  0000                     _nRBPU	set	32655
   271  00FDD0                     STR_48:
   272  00FDD0  25                 	db	37
   273  00FDD1  30                 	db	48	;'0'
   274  00FDD2  32                 	db	50	;'2'
   275  00FDD3  64                 	db	100	;'d'
   276  00FDD4  25                 	db	37
   277  00FDD5  73                 	db	115	;'s'
   278  00FDD6  20                 	db	32
   279  00FDD7  7C                 	db	124
   280  00FDD8  20                 	db	32
   281  00FDD9  25                 	db	37
   282  00FDDA  30                 	db	48	;'0'
   283  00FDDB  32                 	db	50	;'2'
   284  00FDDC  64                 	db	100	;'d'
   285  00FDDD  3A                 	db	58	;':'
   286  00FDDE  25                 	db	37
   287  00FDDF  30                 	db	48	;'0'
   288  00FDE0  32                 	db	50	;'2'
   289  00FDE1  64                 	db	100	;'d'
   290  00FDE2  3A                 	db	58	;':'
   291  00FDE3  25                 	db	37
   292  00FDE4  30                 	db	48	;'0'
   293  00FDE5  32                 	db	50	;'2'
   294  00FDE6  64                 	db	100	;'d'
   295  00FDE7  00                 	db	0
   296  00FDE8                     STR_2:
   297  00FDE8  54                 	db	84	;'T'
   298  00FDE9  69                 	db	105	;'i'
   299  00FDEA  6D                 	db	109	;'m'
   300  00FDEB  65                 	db	101	;'e'
   301  00FDEC  3A                 	db	58	;':'
   302  00FDED  20                 	db	32
   303  00FDEE  25                 	db	37
   304  00FDEF  30                 	db	48	;'0'
   305  00FDF0  32                 	db	50	;'2'
   306  00FDF1  64                 	db	100	;'d'
   307  00FDF2  3A                 	db	58	;':'
   308  00FDF3  25                 	db	37
   309  00FDF4  30                 	db	48	;'0'
   310  00FDF5  32                 	db	50	;'2'
   311  00FDF6  64                 	db	100	;'d'
   312  00FDF7  3A                 	db	58	;':'
   313  00FDF8  25                 	db	37
   314  00FDF9  30                 	db	48	;'0'
   315  00FDFA  32                 	db	50	;'2'
   316  00FDFB  64                 	db	100	;'d'
   317  00FDFC  00                 	db	0
   318  00FDFD                     STR_3:
   319  00FDFD  2D                 	db	45
   320  00FDFE  2D                 	db	45
   321  00FDFF  20                 	db	32
   322  00FE00  4C                 	db	76	;'L'
   323  00FE01  6F                 	db	111	;'o'
   324  00FE02  67                 	db	103	;'g'
   325  00FE03  20                 	db	32
   326  00FE04  25                 	db	37
   327  00FE05  32                 	db	50	;'2'
   328  00FE06  64                 	db	100	;'d'
   329  00FE07  20                 	db	32
   330  00FE08  68                 	db	104	;'h'
   331  00FE09  65                 	db	101	;'e'
   332  00FE0A  72                 	db	114	;'r'
   333  00FE0B  65                 	db	101	;'e'
   334  00FE0C  2D                 	db	45
   335  00FE0D  2D                 	db	45
   336  00FE0E  00                 	db	0
   337  00FE0F                     STR_8:
   338  00FE0F  25                 	db	37
   339  00FE10  64                 	db	100	;'d'
   340  00FE11  20                 	db	32
   341  00FE12  6D                 	db	109	;'m'
   342  00FE13  69                 	db	105	;'i'
   343  00FE14  6E                 	db	110	;'n'
   344  00FE15  28                 	db	40
   345  00FE16  73                 	db	115	;'s'
   346  00FE17  29                 	db	41
   347  00FE18  20                 	db	32
   348  00FE19  25                 	db	37
   349  00FE1A  64                 	db	100	;'d'
   350  00FE1B  20                 	db	32
   351  00FE1C  73                 	db	115	;'s'
   352  00FE1D  65                 	db	101	;'e'
   353  00FE1E  63                 	db	99	;'c'
   354  00FE1F  73                 	db	115	;'s'
   355  00FE20  00                 	db	0
   356  00FE21                     STR_26:
   357  00FE21  4C                 	db	76	;'L'
   358  00FE22  4F                 	db	79	;'O'
   359  00FE23  47                 	db	71	;'G'
   360  00FE24  20                 	db	32
   361  00FE25  31                 	db	49	;'1'
   362  00FE26  20                 	db	32
   363  00FE27  20                 	db	32
   364  00FE28  20                 	db	32
   365  00FE29  20                 	db	32
   366  00FE2A  20                 	db	32
   367  00FE2B  20                 	db	32
   368  00FE2C  20                 	db	32
   369  00FE2D  20                 	db	32
   370  00FE2E  20                 	db	32
   371  00FE2F  20                 	db	32
   372  00FE30  20                 	db	32
   373  00FE31  00                 	db	0
   374  00FE32                     STR_25:
   375  00FE32  4C                 	db	76	;'L'
   376  00FE33  4F                 	db	79	;'O'
   377  00FE34  47                 	db	71	;'G'
   378  00FE35  20                 	db	32
   379  00FE36  32                 	db	50	;'2'
   380  00FE37  20                 	db	32
   381  00FE38  20                 	db	32
   382  00FE39  20                 	db	32
   383  00FE3A  20                 	db	32
   384  00FE3B  20                 	db	32
   385  00FE3C  20                 	db	32
   386  00FE3D  20                 	db	32
   387  00FE3E  20                 	db	32
   388  00FE3F  20                 	db	32
   389  00FE40  20                 	db	32
   390  00FE41  20                 	db	32
   391  00FE42  00                 	db	0
   392  00FE43                     STR_29:
   393  00FE43  4C                 	db	76	;'L'
   394  00FE44  4F                 	db	79	;'O'
   395  00FE45  47                 	db	71	;'G'
   396  00FE46  20                 	db	32
   397  00FE47  33                 	db	51	;'3'
   398  00FE48  20                 	db	32
   399  00FE49  20                 	db	32
   400  00FE4A  20                 	db	32
   401  00FE4B  20                 	db	32
   402  00FE4C  20                 	db	32
   403  00FE4D  20                 	db	32
   404  00FE4E  20                 	db	32
   405  00FE4F  20                 	db	32
   406  00FE50  20                 	db	32
   407  00FE51  20                 	db	32
   408  00FE52  20                 	db	32
   409  00FE53  00                 	db	0
   410  00FE54                     STR_33:
   411  00FE54  4C                 	db	76	;'L'
   412  00FE55  4F                 	db	79	;'O'
   413  00FE56  47                 	db	71	;'G'
   414  00FE57  20                 	db	32
   415  00FE58  34                 	db	52	;'4'
   416  00FE59  20                 	db	32
   417  00FE5A  20                 	db	32
   418  00FE5B  20                 	db	32
   419  00FE5C  20                 	db	32
   420  00FE5D  20                 	db	32
   421  00FE5E  20                 	db	32
   422  00FE5F  20                 	db	32
   423  00FE60  20                 	db	32
   424  00FE61  20                 	db	32
   425  00FE62  20                 	db	32
   426  00FE63  20                 	db	32
   427  00FE64  00                 	db	0
   428  00FE65                     STR_21:
   429  00FE65  33                 	db	51	;'3'
   430  00FE66  2E                 	db	46
   431  00FE67  20                 	db	32
   432  00FE68  4C                 	db	76	;'L'
   433  00FE69  4F                 	db	79	;'O'
   434  00FE6A  47                 	db	71	;'G'
   435  00FE6B  53                 	db	83	;'S'
   436  00FE6C  20                 	db	32
   437  00FE6D  20                 	db	32
   438  00FE6E  20                 	db	32
   439  00FE6F  20                 	db	32
   440  00FE70  20                 	db	32
   441  00FE71  20                 	db	32
   442  00FE72  20                 	db	32
   443  00FE73  20                 	db	32
   444  00FE74  20                 	db	32
   445  00FE75  00                 	db	0
   446  00FE76                     STR_17:
   447  00FE76  32                 	db	50	;'2'
   448  00FE77  2E                 	db	46
   449  00FE78  20                 	db	32
   450  00FE79  53                 	db	83	;'S'
   451  00FE7A  4F                 	db	79	;'O'
   452  00FE7B  52                 	db	82	;'R'
   453  00FE7C  54                 	db	84	;'T'
   454  00FE7D  20                 	db	32
   455  00FE7E  20                 	db	32
   456  00FE7F  20                 	db	32
   457  00FE80  20                 	db	32
   458  00FE81  20                 	db	32
   459  00FE82  20                 	db	32
   460  00FE83  20                 	db	32
   461  00FE84  20                 	db	32
   462  00FE85  20                 	db	32
   463  00FE86  00                 	db	0
   464  00FE87                     STR_18:
   465  00FE87  31                 	db	49	;'1'
   466  00FE88  2E                 	db	46
   467  00FE89  20                 	db	32
   468  00FE8A  44                 	db	68	;'D'
   469  00FE8B  41                 	db	65	;'A'
   470  00FE8C  54                 	db	84	;'T'
   471  00FE8D  45                 	db	69	;'E'
   472  00FE8E  2F                 	db	47
   473  00FE8F  54                 	db	84	;'T'
   474  00FE90  49                 	db	73	;'I'
   475  00FE91  4D                 	db	77	;'M'
   476  00FE92  45                 	db	69	;'E'
   477  00FE93  20                 	db	32
   478  00FE94  20                 	db	32
   479  00FE95  20                 	db	32
   480  00FE96  20                 	db	32
   481  00FE97  00                 	db	0
   482  00FE98                     STR_9:
   483  00FE98  20                 	db	32
   484  00FE99  2D                 	db	45
   485  00FE9A  2D                 	db	45
   486  00FE9B  20                 	db	32
   487  00FE9C  50                 	db	80	;'P'
   488  00FE9D  6F                 	db	111	;'o'
   489  00FE9E  70                 	db	112	;'p'
   490  00FE9F  20                 	db	32
   491  00FEA0  20                 	db	32
   492  00FEA1  63                 	db	99	;'c'
   493  00FEA2  61                 	db	97	;'a'
   494  00FEA3  6E                 	db	110	;'n'
   495  00FEA4  20                 	db	32
   496  00FEA5  2D                 	db	45
   497  00FEA6  2D                 	db	45
   498  00FEA7  20                 	db	32
   499  00FEA8  00                 	db	0
   500  00FEA9                     STR_11:
   501  00FEA9  20                 	db	32
   502  00FEAA  2D                 	db	45
   503  00FEAB  2D                 	db	45
   504  00FEAC  20                 	db	32
   505  00FEAD  53                 	db	83	;'S'
   506  00FEAE  6F                 	db	111	;'o'
   507  00FEAF  75                 	db	117	;'u'
   508  00FEB0  70                 	db	112	;'p'
   509  00FEB1  20                 	db	32
   510  00FEB2  63                 	db	99	;'c'
   511  00FEB3  61                 	db	97	;'a'
   512  00FEB4  6E                 	db	110	;'n'
   513  00FEB5  20                 	db	32
   514  00FEB6  2D                 	db	45
   515  00FEB7  2D                 	db	45
   516  00FEB8  20                 	db	32
   517  00FEB9  00                 	db	0
   518  00FEBA                     STR_1:
   519  00FEBA  21                 	db	33
   520  00FEBB  53                 	db	83	;'S'
   521  00FEBC  4F                 	db	79	;'O'
   522  00FEBD  52                 	db	82	;'R'
   523  00FEBE  54                 	db	84	;'T'
   524  00FEBF  20                 	db	32
   525  00FEC0  43                 	db	67	;'C'
   526  00FEC1  4F                 	db	79	;'O'
   527  00FEC2  4E                 	db	78	;'N'
   528  00FEC3  43                 	db	67	;'C'
   529  00FEC4  4C                 	db	76	;'L'
   530  00FEC5  55                 	db	85	;'U'
   531  00FEC6  44                 	db	68	;'D'
   532  00FEC7  45                 	db	69	;'E'
   533  00FEC8  44                 	db	68	;'D'
   534  00FEC9  21                 	db	33
   535  00FECA  00                 	db	0
   536  00FECB                     STR_13:
   537  00FECB  2D                 	db	45
   538  00FECC  2D                 	db	45
   539  00FECD  20                 	db	32
   540  00FECE  54                 	db	84	;'T'
   541  00FECF  6F                 	db	111	;'o'
   542  00FED0  74                 	db	116	;'t'
   543  00FED1  61                 	db	97	;'a'
   544  00FED2  6C                 	db	108	;'l'
   545  00FED3  20                 	db	32
   546  00FED4  63                 	db	99	;'c'
   547  00FED5  61                 	db	97	;'a'
   548  00FED6  6E                 	db	110	;'n'
   549  00FED7  73                 	db	115	;'s'
   550  00FED8  20                 	db	32
   551  00FED9  2D                 	db	45
   552  00FEDA  2D                 	db	45
   553  00FEDB  00                 	db	0
   554  00FEDC                     STR_10:
   555  00FEDC  4E                 	db	78	;'N'
   556  00FEDD  6F                 	db	111	;'o'
   557  00FEDE  20                 	db	32
   558  00FEDF  74                 	db	116	;'t'
   559  00FEE0  61                 	db	97	;'a'
   560  00FEE1  62                 	db	98	;'b'
   561  00FEE2  3A                 	db	58	;':'
   562  00FEE3  20                 	db	32
   563  00FEE4  39                 	db	57	;'9'
   564  00FEE5  7C                 	db	124
   565  00FEE6  54                 	db	84	;'T'
   566  00FEE7  61                 	db	97	;'a'
   567  00FEE8  62                 	db	98	;'b'
   568  00FEE9  3A                 	db	58	;':'
   569  00FEEA  20                 	db	32
   570  00FEEB  31                 	db	49	;'1'
   571  00FEEC  00                 	db	0
   572  00FEED                     STR_12:
   573  00FEED  4E                 	db	78	;'N'
   574  00FEEE  6F                 	db	111	;'o'
   575  00FEEF  20                 	db	32
   576  00FEF0  6C                 	db	108	;'l'
   577  00FEF1  62                 	db	98	;'b'
   578  00FEF2  6C                 	db	108	;'l'
   579  00FEF3  3A                 	db	58	;':'
   580  00FEF4  20                 	db	32
   581  00FEF5  31                 	db	49	;'1'
   582  00FEF6  7C                 	db	124
   583  00FEF7  6C                 	db	108	;'l'
   584  00FEF8  62                 	db	98	;'b'
   585  00FEF9  6C                 	db	108	;'l'
   586  00FEFA  3A                 	db	58	;':'
   587  00FEFB  20                 	db	32
   588  00FEFC  31                 	db	49	;'1'
   589  00FEFD  00                 	db	0
   590  00FEFE                     STR_6:
   591  00FEFE  30                 	db	48	;'0'
   592  00FEFF  36                 	db	54	;'6'
   593  00FF00  46                 	db	70	;'F'
   594  00FF01  65                 	db	101	;'e'
   595  00FF02  62                 	db	98	;'b'
   596  00FF03  20                 	db	32
   597  00FF04  7C                 	db	124
   598  00FF05  20                 	db	32
   599  00FF06  30                 	db	48	;'0'
   600  00FF07  31                 	db	49	;'1'
   601  00FF08  3A                 	db	58	;':'
   602  00FF09  30                 	db	48	;'0'
   603  00FF0A  38                 	db	56	;'8'
   604  00FF0B  3A                 	db	58	;':'
   605  00FF0C  35                 	db	53	;'5'
   606  00FF0D  36                 	db	54	;'6'
   607  00FF0E  00                 	db	0
   608  00FF0F                     STR_24:
   609  00FF0F  4C                 	db	76	;'L'
   610  00FF10  4F                 	db	79	;'O'
   611  00FF11  47                 	db	71	;'G'
   612  00FF12  20                 	db	32
   613  00FF13  31                 	db	49	;'1'
   614  00FF14  20                 	db	32
   615  00FF15  20                 	db	32
   616  00FF16  20                 	db	32
   617  00FF17  20                 	db	32
   618  00FF18  20                 	db	32
   619  00FF19  20                 	db	32
   620  00FF1A  20                 	db	32
   621  00FF1B  20                 	db	32
   622  00FF1C  20                 	db	32
   623  00FF1D  20                 	db	32
   624  00FF1E  3C                 	db	60	;'<'
   625  00FF1F  00                 	db	0
   626  00FF20                     STR_27:
   627  00FF20  4C                 	db	76	;'L'
   628  00FF21  4F                 	db	79	;'O'
   629  00FF22  47                 	db	71	;'G'
   630  00FF23  20                 	db	32
   631  00FF24  32                 	db	50	;'2'
   632  00FF25  20                 	db	32
   633  00FF26  20                 	db	32
   634  00FF27  20                 	db	32
   635  00FF28  20                 	db	32
   636  00FF29  20                 	db	32
   637  00FF2A  20                 	db	32
   638  00FF2B  20                 	db	32
   639  00FF2C  20                 	db	32
   640  00FF2D  20                 	db	32
   641  00FF2E  20                 	db	32
   642  00FF2F  3C                 	db	60	;'<'
   643  00FF30  00                 	db	0
   644  00FF31                     STR_31:
   645  00FF31  4C                 	db	76	;'L'
   646  00FF32  4F                 	db	79	;'O'
   647  00FF33  47                 	db	71	;'G'
   648  00FF34  20                 	db	32
   649  00FF35  33                 	db	51	;'3'
   650  00FF36  20                 	db	32
   651  00FF37  20                 	db	32
   652  00FF38  20                 	db	32
   653  00FF39  20                 	db	32
   654  00FF3A  20                 	db	32
   655  00FF3B  20                 	db	32
   656  00FF3C  20                 	db	32
   657  00FF3D  20                 	db	32
   658  00FF3E  20                 	db	32
   659  00FF3F  20                 	db	32
   660  00FF40  3C                 	db	60	;'<'
   661  00FF41  00                 	db	0
   662  00FF42                     STR_35:
   663  00FF42  4C                 	db	76	;'L'
   664  00FF43  4F                 	db	79	;'O'
   665  00FF44  47                 	db	71	;'G'
   666  00FF45  20                 	db	32
   667  00FF46  34                 	db	52	;'4'
   668  00FF47  20                 	db	32
   669  00FF48  20                 	db	32
   670  00FF49  20                 	db	32
   671  00FF4A  20                 	db	32
   672  00FF4B  20                 	db	32
   673  00FF4C  20                 	db	32
   674  00FF4D  20                 	db	32
   675  00FF4E  20                 	db	32
   676  00FF4F  20                 	db	32
   677  00FF50  20                 	db	32
   678  00FF51  3C                 	db	60	;'<'
   679  00FF52  00                 	db	0
   680  00FF53                     STR_23:
   681  00FF53  33                 	db	51	;'3'
   682  00FF54  2E                 	db	46
   683  00FF55  20                 	db	32
   684  00FF56  4C                 	db	76	;'L'
   685  00FF57  4F                 	db	79	;'O'
   686  00FF58  47                 	db	71	;'G'
   687  00FF59  53                 	db	83	;'S'
   688  00FF5A  20                 	db	32
   689  00FF5B  20                 	db	32
   690  00FF5C  20                 	db	32
   691  00FF5D  20                 	db	32
   692  00FF5E  20                 	db	32
   693  00FF5F  20                 	db	32
   694  00FF60  20                 	db	32
   695  00FF61  20                 	db	32
   696  00FF62  3C                 	db	60	;'<'
   697  00FF63  00                 	db	0
   698  00FF64                     STR_19:
   699  00FF64  32                 	db	50	;'2'
   700  00FF65  2E                 	db	46
   701  00FF66  20                 	db	32
   702  00FF67  53                 	db	83	;'S'
   703  00FF68  4F                 	db	79	;'O'
   704  00FF69  52                 	db	82	;'R'
   705  00FF6A  54                 	db	84	;'T'
   706  00FF6B  20                 	db	32
   707  00FF6C  20                 	db	32
   708  00FF6D  20                 	db	32
   709  00FF6E  20                 	db	32
   710  00FF6F  20                 	db	32
   711  00FF70  20                 	db	32
   712  00FF71  20                 	db	32
   713  00FF72  20                 	db	32
   714  00FF73  3C                 	db	60	;'<'
   715  00FF74  00                 	db	0
   716  00FF75                     STR_16:
   717  00FF75  31                 	db	49	;'1'
   718  00FF76  2E                 	db	46
   719  00FF77  20                 	db	32
   720  00FF78  44                 	db	68	;'D'
   721  00FF79  41                 	db	65	;'A'
   722  00FF7A  54                 	db	84	;'T'
   723  00FF7B  45                 	db	69	;'E'
   724  00FF7C  2F                 	db	47
   725  00FF7D  54                 	db	84	;'T'
   726  00FF7E  49                 	db	73	;'I'
   727  00FF7F  4D                 	db	77	;'M'
   728  00FF80  45                 	db	69	;'E'
   729  00FF81  20                 	db	32
   730  00FF82  20                 	db	32
   731  00FF83  20                 	db	32
   732  00FF84  3C                 	db	60	;'<'
   733  00FF85  00                 	db	0
   734  00FF86                     STR_4:
   735  00FF86  50                 	db	80	;'P'
   736  00FF87  61                 	db	97	;'a'
   737  00FF88  75                 	db	117	;'u'
   738  00FF89  73                 	db	115	;'s'
   739  00FF8A  65                 	db	101	;'e'
   740  00FF8B  3A                 	db	58	;':'
   741  00FF8C  3C                 	db	60	;'<'
   742  00FF8D  20                 	db	32
   743  00FF8E  7C                 	db	124
   744  00FF8F  20                 	db	32
   745  00FF90  42                 	db	66	;'B'
   746  00FF91  61                 	db	97	;'a'
   747  00FF92  63                 	db	99	;'c'
   748  00FF93  6B                 	db	107	;'k'
   749  00FF94  3A                 	db	58	;':'
   750  00FF95  3E                 	db	62	;'>'
   751  00FF96  00                 	db	0
   752  00FF97                     STR_15:
   753  00FF97  50                 	db	80	;'P'
   754  00FF98  55                 	db	85	;'U'
   755  00FF99  53                 	db	83	;'S'
   756  00FF9A  48                 	db	72	;'H'
   757  00FF9B  20                 	db	32
   758  00FF9C  54                 	db	84	;'T'
   759  00FF9D  4F                 	db	79	;'O'
   760  00FF9E  20                 	db	32
   761  00FF9F  43                 	db	67	;'C'
   762  00FFA0  4F                 	db	79	;'O'
   763  00FFA1  4E                 	db	78	;'N'
   764  00FFA2  54                 	db	84	;'T'
   765  00FFA3  49                 	db	73	;'I'
   766  00FFA4  4E                 	db	78	;'N'
   767  00FFA5  55                 	db	85	;'U'
   768  00FFA6  45                 	db	69	;'E'
   769  00FFA7  00                 	db	0
   770  00FFA8                     STR_49:
   771  00FFA8  53                 	db	83	;'S'
   772  00FFA9  6F                 	db	111	;'o'
   773  00FFAA  72                 	db	114	;'r'
   774  00FFAB  74                 	db	116	;'t'
   775  00FFAC  69                 	db	105	;'i'
   776  00FFAD  6E                 	db	110	;'n'
   777  00FFAE  67                 	db	103	;'g'
   778  00FFAF  2E                 	db	46
   779  00FFB0  2E                 	db	46
   780  00FFB1  2E                 	db	46
   781  00FFB2  00                 	db	0
   782  00FFB3                     STR_7:
   783  00FFB3  44                 	db	68	;'D'
   784  00FFB4  75                 	db	117	;'u'
   785  00FFB5  72                 	db	114	;'r'
   786  00FFB6  61                 	db	97	;'a'
   787  00FFB7  74                 	db	116	;'t'
   788  00FFB8  69                 	db	105	;'i'
   789  00FFB9  6F                 	db	111	;'o'
   790  00FFBA  6E                 	db	110	;'n'
   791  00FFBB  3A                 	db	58	;':'
   792  00FFBC  00                 	db	0
   793  00FFBD                     STR_51:
   794  00FFBD  28                 	db	40
   795  00FFBE  6E                 	db	110	;'n'
   796  00FFBF  75                 	db	117	;'u'
   797  00FFC0  6C                 	db	108	;'l'
   798  00FFC1  6C                 	db	108	;'l'
   799  00FFC2  29                 	db	41
   800  00FFC3  00                 	db	0
   801  00FFC4                     STR_5:
   802  00FFC4  53                 	db	83	;'S'
   803  00FFC5  74                 	db	116	;'t'
   804  00FFC6  61                 	db	97	;'a'
   805  00FFC7  72                 	db	114	;'r'
   806  00FFC8  74                 	db	116	;'t'
   807  00FFC9  3A                 	db	58	;':'
   808  00FFCA  00                 	db	0
   809  00FFCB                     STR_37:
   810  00FFCB  46                 	db	70	;'F'
   811  00FFCC  65                 	db	101	;'e'
   812  00FFCD  62                 	db	98	;'b'
   813  00FFCE  00                 	db	0
   814  00FFCF                     STR_47:
   815  00FFCF  44                 	db	68	;'D'
   816  00FFD0  65                 	db	101	;'e'
   817  00FFD1  63                 	db	99	;'c'
   818  00FFD2  00                 	db	0
   819  00FFD3                     STR_43:
   820  00FFD3  41                 	db	65	;'A'
   821  00FFD4  75                 	db	117	;'u'
   822  00FFD5  67                 	db	103	;'g'
   823  00FFD6  00                 	db	0
   824  00FFD7                     STR_42:
   825  00FFD7  4A                 	db	74	;'J'
   826  00FFD8  75                 	db	117	;'u'
   827  00FFD9  6C                 	db	108	;'l'
   828  00FFDA  00                 	db	0
   829  00FFDB                     STR_36:
   830  00FFDB  4A                 	db	74	;'J'
   831  00FFDC  61                 	db	97	;'a'
   832  00FFDD  6E                 	db	110	;'n'
   833  00FFDE  00                 	db	0
   834  00FFDF                     STR_41:
   835  00FFDF  4A                 	db	74	;'J'
   836  00FFE0  75                 	db	117	;'u'
   837  00FFE1  6E                 	db	110	;'n'
   838  00FFE2  00                 	db	0
   839  00FFE3                     STR_44:
   840  00FFE3  53                 	db	83	;'S'
   841  00FFE4  65                 	db	101	;'e'
   842  00FFE5  70                 	db	112	;'p'
   843  00FFE6  00                 	db	0
   844  00FFE7                     STR_38:
   845  00FFE7  4D                 	db	77	;'M'
   846  00FFE8  61                 	db	97	;'a'
   847  00FFE9  72                 	db	114	;'r'
   848  00FFEA  00                 	db	0
   849  00FFEB                     STR_39:
   850  00FFEB  41                 	db	65	;'A'
   851  00FFEC  70                 	db	112	;'p'
   852  00FFED  72                 	db	114	;'r'
   853  00FFEE  00                 	db	0
   854  00FFEF                     STR_45:
   855  00FFEF  4F                 	db	79	;'O'
   856  00FFF0  63                 	db	99	;'c'
   857  00FFF1  74                 	db	116	;'t'
   858  00FFF2  00                 	db	0
   859  00FFF3                     STR_46:
   860  00FFF3  4E                 	db	78	;'N'
   861  00FFF4  6F                 	db	111	;'o'
   862  00FFF5  76                 	db	118	;'v'
   863  00FFF6  00                 	db	0
   864  00FFF7                     STR_40:
   865  00FFF7  4D                 	db	77	;'M'
   866  00FFF8  61                 	db	97	;'a'
   867  00FFF9  79                 	db	121	;'y'
   868  00FFFA  00                 	db	0
   869  00FFFB                     STR_14:
   870  00FFFB  31                 	db	49	;'1'
   871  00FFFC  32                 	db	50	;'2'
   872  00FFFD  00                 	db	0
   873  0000                     
   874                           ; #config settings
   875  00FFFE  00                 	db	0	; dummy byte at the end
   876  0000                     
   877                           	psect	cinit
   878  001E78                     __pcinit:
   879                           	opt stack 0
   880  001E78                     start_initialization:
   881                           	opt stack 0
   882  001E78                     __initialization:
   883                           	opt stack 0
   884                           
   885                           ; Initialize objects allocated to BANK1 (4 bytes)
   886                           ; load TBLPTR registers with __pidataBANK1
   887  001E78  0E5C               	movlw	low __pidataBANK1
   888  001E7A  6EF6               	movwf	tblptrl,c
   889  001E7C  0E2B               	movlw	high __pidataBANK1
   890  001E7E  6EF7               	movwf	tblptrh,c
   891  001E80  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   892  001E82  6EF8               	movwf	tblptru,c
   893  001E84  EE01  F010         	lfsr	0,__pdataBANK1
   894  001E88  EE10 F004          	lfsr	1,4
   895  001E8C                     copy_data0:
   896  001E8C  0009               	tblrd		*+
   897  001E8E  CFF5 FFEE          	movff	tablat,postinc0
   898  001E92  50E5               	movf	postdec1,w,c
   899  001E94  50E1               	movf	fsr1l,w,c
   900  001E96  E1FA               	bnz	copy_data0
   901                           
   902                           ; Initialize objects allocated to BANK0 (8 bytes)
   903                           ; load TBLPTR registers with __pidataBANK0
   904  001E98  0E30               	movlw	low __pidataBANK0
   905  001E9A  6EF6               	movwf	tblptrl,c
   906  001E9C  0E2B               	movlw	high __pidataBANK0
   907  001E9E  6EF7               	movwf	tblptrh,c
   908  001EA0  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   909  001EA2  6EF8               	movwf	tblptru,c
   910  001EA4  EE00  F0F8         	lfsr	0,__pdataBANK0
   911  001EA8  EE10 F008          	lfsr	1,8
   912  001EAC                     copy_data1:
   913  001EAC  0009               	tblrd		*+
   914  001EAE  CFF5 FFEE          	movff	tablat,postinc0
   915  001EB2  50E5               	movf	postdec1,w,c
   916  001EB4  50E1               	movf	fsr1l,w,c
   917  001EB6  E1FA               	bnz	copy_data1
   918                           
   919                           ; Initialize objects allocated to COMRAM (4 bytes)
   920                           ; load TBLPTR registers with __pidataCOMRAM
   921  001EB8  0E58               	movlw	low __pidataCOMRAM
   922  001EBA  6EF6               	movwf	tblptrl,c
   923  001EBC  0E2B               	movlw	high __pidataCOMRAM
   924  001EBE  6EF7               	movwf	tblptrh,c
   925  001EC0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   926  001EC2  6EF8               	movwf	tblptru,c
   927  001EC4  EE00  F07A         	lfsr	0,__pdataCOMRAM
   928  001EC8  EE10 F004          	lfsr	1,4
   929  001ECC                     copy_data2:
   930  001ECC  0009               	tblrd		*+
   931  001ECE  CFF5 FFEE          	movff	tablat,postinc0
   932  001ED2  50E5               	movf	postdec1,w,c
   933  001ED4  50E1               	movf	fsr1l,w,c
   934  001ED6  E1FA               	bnz	copy_data2
   935                           
   936                           ; Clear objects allocated to BANK1 (16 bytes)
   937  001ED8  EE01  F000         	lfsr	0,__pbssBANK1
   938  001EDC  0E10               	movlw	16
   939  001EDE                     clear_0:
   940  001EDE  6AEE               	clrf	postinc0,c
   941  001EE0  06E8               	decf	wreg,f,c
   942  001EE2  E1FD               	bnz	clear_0
   943                           
   944                           ; Clear objects allocated to BANK0 (36 bytes)
   945  001EE4  EE00  F0D4         	lfsr	0,__pbssBANK0
   946  001EE8  0E24               	movlw	36
   947  001EEA                     clear_1:
   948  001EEA  6AEE               	clrf	postinc0,c
   949  001EEC  06E8               	decf	wreg,f,c
   950  001EEE  E1FD               	bnz	clear_1
   951                           
   952                           ; Clear objects allocated to COMRAM (31 bytes)
   953  001EF0  EE00  F05B         	lfsr	0,__pbssCOMRAM
   954  001EF4  0E1F               	movlw	31
   955  001EF6                     clear_2:
   956  001EF6  6AEE               	clrf	postinc0,c
   957  001EF8  06E8               	decf	wreg,f,c
   958  001EFA  E1FD               	bnz	clear_2
   959  001EFC                     end_of_initialization:
   960                           	opt stack 0
   961  001EFC                     __end_of__initialization:
   962                           	opt stack 0
   963  001EFC  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   964  001EFE  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   965  001F00  0100               	movlb	0
   966  001F02  EFC9  F00F         	goto	_main	;jump to C main() function
   967                           tblptru	equ	0xFF8
   968                           tblptrh	equ	0xFF7
   969                           tblptrl	equ	0xFF6
   970                           tablat	equ	0xFF5
   971                           postinc0	equ	0xFEE
   972                           wreg	equ	0xFE8
   973                           postdec1	equ	0xFE5
   974                           fsr1l	equ	0xFE1
   975                           
   976                           	psect	bssCOMRAM
   977  00005B                     __pbssCOMRAM:
   978                           	opt stack 0
   979  00005B                     _TMR3counter:
   980                           	opt stack 0
   981  00005B                     	ds	2
   982  00005D                     _UIenabled:
   983                           	opt stack 0
   984  00005D                     	ds	2
   985  00005F                     _back:
   986                           	opt stack 0
   987  00005F                     	ds	2
   988  000061                     _count_pop_no_tab:
   989                           	opt stack 0
   990  000061                     	ds	2
   991  000063                     _count_pop_w_tab:
   992                           	opt stack 0
   993  000063                     	ds	2
   994  000065                     _down:
   995                           	opt stack 0
   996  000065                     	ds	2
   997  000067                     _enter:
   998                           	opt stack 0
   999  000067                     	ds	2
  1000  000069                     _firstboot:
  1001                           	opt stack 0
  1002  000069                     	ds	2
  1003  00006B                     _timer1highbits:
  1004                           	opt stack 0
  1005  00006B                     	ds	2
  1006  00006D                     _timer1lowbits:
  1007                           	opt stack 0
  1008  00006D                     	ds	2
  1009  00006F                     _timer3highbits:
  1010                           	opt stack 0
  1011  00006F                     	ds	2
  1012  000071                     _timer3lowbits:
  1013                           	opt stack 0
  1014  000071                     	ds	2
  1015  000073                     _up:
  1016                           	opt stack 0
  1017  000073                     	ds	2
  1018  000075                     _was_low:
  1019                           	opt stack 0
  1020  000075                     	ds	2
  1021  000077                     _block:
  1022                           	opt stack 0
  1023  000077                     	ds	1
  1024  000078                     _canType:
  1025                           	opt stack 0
  1026  000078                     	ds	1
  1027  000079                     _input:
  1028                           	opt stack 0
  1029  000079                     	ds	1
  1030                           tblptru	equ	0xFF8
  1031                           tblptrh	equ	0xFF7
  1032                           tblptrl	equ	0xFF6
  1033                           tablat	equ	0xFF5
  1034                           postinc0	equ	0xFEE
  1035                           wreg	equ	0xFE8
  1036                           postdec1	equ	0xFE5
  1037                           fsr1l	equ	0xFE1
  1038                           
  1039                           	psect	dataCOMRAM
  1040  00007A                     __pdataCOMRAM:
  1041                           	opt stack 0
  1042  00007A                     _timer1_20ms_high:
  1043                           	opt stack 0
  1044  00007A                     	ds	2
  1045  00007C                     _timer1_20ms_low:
  1046                           	opt stack 0
  1047  00007C                     	ds	2
  1048                           tblptru	equ	0xFF8
  1049                           tblptrh	equ	0xFF7
  1050                           tblptrl	equ	0xFF6
  1051                           tablat	equ	0xFF5
  1052                           postinc0	equ	0xFEE
  1053                           wreg	equ	0xFE8
  1054                           postdec1	equ	0xFE5
  1055                           fsr1l	equ	0xFE1
  1056                           
  1057                           	psect	bssBANK0
  1058  0000D4                     __pbssBANK0:
  1059                           	opt stack 0
  1060  0000D4                     _time:
  1061                           	opt stack 0
  1062  0000D4                     	ds	7
  1063  0000DB                     _IR_signal:
  1064                           	opt stack 0
  1065  0000DB                     	ds	2
  1066  0000DD                     _MAG_signal:
  1067                           	opt stack 0
  1068  0000DD                     	ds	2
  1069  0000DF                     _TMR3CF:
  1070                           	opt stack 0
  1071  0000DF                     	ds	2
  1072  0000E1                     _count_can_no_lab:
  1073                           	opt stack 0
  1074  0000E1                     	ds	2
  1075  0000E3                     _count_can_w_lab:
  1076                           	opt stack 0
  1077  0000E3                     	ds	2
  1078  0000E5                     _count_total:
  1079                           	opt stack 0
  1080  0000E5                     	ds	2
  1081  0000E7                     _cur_state:
  1082                           	opt stack 0
  1083  0000E7                     	ds	2
  1084  0000E9                     _f_can_coming_to_ID:
  1085                           	opt stack 0
  1086  0000E9                     	ds	2
  1087  0000EB                     _f_can_coming_to_distribution:
  1088                           	opt stack 0
  1089  0000EB                     	ds	2
  1090  0000ED                     _f_lastCan:
  1091                           	opt stack 0
  1092  0000ED                     	ds	2
  1093  0000EF                     _f_loadingNewCan:
  1094                           	opt stack 0
  1095  0000EF                     	ds	2
  1096  0000F1                     _log:
  1097                           	opt stack 0
  1098  0000F1                     	ds	2
  1099  0000F3                     _logstate:
  1100                           	opt stack 0
  1101  0000F3                     	ds	2
  1102  0000F5                     _total_time:
  1103                           	opt stack 0
  1104  0000F5                     	ds	2
  1105  0000F7                     _machine_state:
  1106                           	opt stack 0
  1107  0000F7                     	ds	1
  1108                           tblptru	equ	0xFF8
  1109                           tblptrh	equ	0xFF7
  1110                           tblptrl	equ	0xFF6
  1111                           tablat	equ	0xFF5
  1112                           postinc0	equ	0xFEE
  1113                           wreg	equ	0xFE8
  1114                           postdec1	equ	0xFE5
  1115                           fsr1l	equ	0xFE1
  1116                           
  1117                           	psect	dataBANK0
  1118  0000F8                     __pdataBANK0:
  1119                           	opt stack 0
  1120  0000F8                     _THIR:
  1121                           	opt stack 0
  1122  0000F8                     	ds	2
  1123  0000FA                     _THMAG:
  1124                           	opt stack 0
  1125  0000FA                     	ds	2
  1126  0000FC                     _f_ID_receive:
  1127                           	opt stack 0
  1128  0000FC                     	ds	2
  1129  0000FE                     _first:
  1130                           	opt stack 0
  1131  0000FE                     	ds	2
  1132                           tblptru	equ	0xFF8
  1133                           tblptrh	equ	0xFF7
  1134                           tblptrl	equ	0xFF6
  1135                           tablat	equ	0xFF5
  1136                           postinc0	equ	0xFEE
  1137                           wreg	equ	0xFE8
  1138                           postdec1	equ	0xFE5
  1139                           fsr1l	equ	0xFE1
  1140                           
  1141                           	psect	bssBANK1
  1142  000100                     __pbssBANK1:
  1143                           	opt stack 0
  1144  000100                     _startTime:
  1145                           	opt stack 0
  1146  000100                     	ds	14
  1147  00010E                     _f_can_distributed:
  1148                           	opt stack 0
  1149  00010E                     	ds	2
  1150                           tblptru	equ	0xFF8
  1151                           tblptrh	equ	0xFF7
  1152                           tblptrl	equ	0xFF6
  1153                           tablat	equ	0xFF5
  1154                           postinc0	equ	0xFEE
  1155                           wreg	equ	0xFE8
  1156                           postdec1	equ	0xFE5
  1157                           fsr1l	equ	0xFE1
  1158                           
  1159                           	psect	dataBANK1
  1160  000110                     __pdataBANK1:
  1161                           	opt stack 0
  1162  000110                     printRTC@F3207:
  1163                           	opt stack 0
  1164  000110                     	ds	4
  1165                           tblptru	equ	0xFF8
  1166                           tblptrh	equ	0xFF7
  1167                           tblptrl	equ	0xFF6
  1168                           tablat	equ	0xFF5
  1169                           postinc0	equ	0xFEE
  1170                           wreg	equ	0xFE8
  1171                           postdec1	equ	0xFE5
  1172                           fsr1l	equ	0xFE1
  1173                           
  1174                           	psect	cstackBANK0
  1175  000080                     __pcstackBANK0:
  1176                           	opt stack 0
  1177  000080                     ??_isdigit:
  1178  000080                     ??_readADC:
  1179  000080                     ??_I2C_Master_Wait:
  1180  000080                     ?___wmul:
  1181                           	opt stack 0
  1182  000080                     ?___awmod:
  1183                           	opt stack 0
  1184  000080                     ?___lwdiv:
  1185                           	opt stack 0
  1186  000080                     ?___lldiv:
  1187                           	opt stack 0
  1188  000080                     lcdNibble@temp:
  1189                           	opt stack 0
  1190  000080                     initTime@m:
  1191                           	opt stack 0
  1192  000080                     moveServoBlock@myPosition:
  1193                           	opt stack 0
  1194  000080                     moveServoCup@myPosition:
  1195                           	opt stack 0
  1196  000080                     ___wmul@multiplier:
  1197                           	opt stack 0
  1198  000080                     ___awmod@dividend:
  1199                           	opt stack 0
  1200  000080                     ___lwdiv@dividend:
  1201                           	opt stack 0
  1202  000080                     strcpy@to:
  1203                           	opt stack 0
  1204  000080                     ___lldiv@dividend:
  1205                           	opt stack 0
  1206                           
  1207                           ; 4 bytes @ 0x0
  1208  000080                     	ds	1
  1209  000081                     readADC@channel:
  1210                           	opt stack 0
  1211  000081                     I2C_Master_Read@a:
  1212                           	opt stack 0
  1213  000081                     lcdNibble@data:
  1214                           	opt stack 0
  1215  000081                     initTime@h:
  1216                           	opt stack 0
  1217  000081                     _isdigit$1809:
  1218                           	opt stack 0
  1219  000081                     I2C_Master_Write@d:
  1220                           	opt stack 0
  1221                           
  1222                           ; 2 bytes @ 0x1
  1223  000081                     	ds	1
  1224  000082                     ??_readIR:
  1225  000082                     ??_readMAG:
  1226  000082                     I2C_Master_Read@temp:
  1227                           	opt stack 0
  1228  000082                     lcdInst@data:
  1229                           	opt stack 0
  1230  000082                     putch@data:
  1231                           	opt stack 0
  1232  000082                     initTime@w:
  1233                           	opt stack 0
  1234  000082                     isdigit@c:
  1235                           	opt stack 0
  1236  000082                     ___wmul@multiplicand:
  1237                           	opt stack 0
  1238  000082                     ___awmod@divisor:
  1239                           	opt stack 0
  1240  000082                     ___lwdiv@divisor:
  1241                           	opt stack 0
  1242  000082                     strcpy@from:
  1243                           	opt stack 0
  1244                           
  1245                           ; 2 bytes @ 0x2
  1246  000082                     	ds	1
  1247  000083                     ??_initLCD:
  1248  000083                     initTime@DD:
  1249                           	opt stack 0
  1250  000083                     getRTC@i:
  1251                           	opt stack 0
  1252                           
  1253                           ; 2 bytes @ 0x3
  1254  000083                     	ds	1
  1255  000084                     initTime@MM:
  1256                           	opt stack 0
  1257  000084                     ___awmod@counter:
  1258                           	opt stack 0
  1259  000084                     readIR@res:
  1260                           	opt stack 0
  1261  000084                     readMAG@res:
  1262                           	opt stack 0
  1263  000084                     ___wmul@product:
  1264                           	opt stack 0
  1265  000084                     ___lwdiv@quotient:
  1266                           	opt stack 0
  1267  000084                     strcpy@cp:
  1268                           	opt stack 0
  1269  000084                     ___lldiv@divisor:
  1270                           	opt stack 0
  1271                           
  1272                           ; 4 bytes @ 0x4
  1273  000084                     	ds	1
  1274  000085                     ??_initSortTimer:
  1275  000085                     initTime@YY:
  1276                           	opt stack 0
  1277  000085                     ___awmod@sign:
  1278                           	opt stack 0
  1279                           
  1280                           ; 1 bytes @ 0x5
  1281  000085                     	ds	1
  1282  000086                     ??_ID:
  1283  000086                     ?___awdiv:
  1284                           	opt stack 0
  1285  000086                     initTime@s:
  1286                           	opt stack 0
  1287  000086                     ___lwdiv@counter:
  1288                           	opt stack 0
  1289  000086                     ___awdiv@dividend:
  1290                           	opt stack 0
  1291                           
  1292                           ; 2 bytes @ 0x6
  1293  000086                     	ds	1
  1294  000087                     ?___lwmod:
  1295                           	opt stack 0
  1296  000087                     ___lwmod@dividend:
  1297                           	opt stack 0
  1298                           
  1299                           ; 2 bytes @ 0x7
  1300  000087                     	ds	1
  1301  000088                     ID@top_bottom_conductivity:
  1302                           	opt stack 0
  1303  000088                     initSortTimer@i:
  1304                           	opt stack 0
  1305  000088                     ___awdiv@divisor:
  1306                           	opt stack 0
  1307  000088                     ___lldiv@quotient:
  1308                           	opt stack 0
  1309                           
  1310                           ; 4 bytes @ 0x8
  1311  000088                     	ds	1
  1312  000089                     ___lwmod@divisor:
  1313                           	opt stack 0
  1314                           
  1315                           ; 2 bytes @ 0x9
  1316  000089                     	ds	1
  1317  00008A                     ??_Loading:
  1318  00008A                     ___awdiv@counter:
  1319                           	opt stack 0
  1320  00008A                     ID@side_conductivity:
  1321                           	opt stack 0
  1322                           
  1323                           ; 2 bytes @ 0xA
  1324  00008A                     	ds	1
  1325  00008B                     ___awdiv@sign:
  1326                           	opt stack 0
  1327  00008B                     ___lwmod@counter:
  1328                           	opt stack 0
  1329                           
  1330                           ; 1 bytes @ 0xB
  1331  00008B                     	ds	1
  1332  00008C                     ___lldiv@counter:
  1333                           	opt stack 0
  1334  00008C                     ID@magnetic:
  1335                           	opt stack 0
  1336  00008C                     ___awdiv@quotient:
  1337                           	opt stack 0
  1338                           
  1339                           ; 2 bytes @ 0xC
  1340  00008C                     	ds	1
  1341  00008D                     I2C_Master_Init@c:
  1342                           	opt stack 0
  1343                           
  1344                           ; 4 bytes @ 0xD
  1345  00008D                     	ds	1
  1346  00008E                     ?_printf:
  1347                           	opt stack 0
  1348  00008E                     printf@f:
  1349                           	opt stack 0
  1350                           
  1351                           ; 2 bytes @ 0xE
  1352  00008E                     	ds	3
  1353  000091                     ??_I2C_Master_Init:
  1354                           
  1355                           ; 1 bytes @ 0x11
  1356  000091                     	ds	4
  1357  000095                     ??_loadRTC:
  1358                           
  1359                           ; 1 bytes @ 0x15
  1360  000095                     	ds	1
  1361  000096                     loadRTC@i:
  1362                           	opt stack 0
  1363                           
  1364                           ; 2 bytes @ 0x16
  1365  000096                     	ds	4
  1366  00009A                     ??_printf:
  1367                           
  1368                           ; 1 bytes @ 0x1A
  1369  00009A                     	ds	4
  1370  00009E                     printf@prec:
  1371                           	opt stack 0
  1372                           
  1373                           ; 1 bytes @ 0x1E
  1374  00009E                     	ds	1
  1375  00009F                     printf@ap:
  1376                           	opt stack 0
  1377                           
  1378                           ; 2 bytes @ 0x1F
  1379  00009F                     	ds	2
  1380  0000A1                     printf@cp:
  1381                           	opt stack 0
  1382                           
  1383                           ; 2 bytes @ 0x21
  1384  0000A1                     	ds	2
  1385  0000A3                     printf@val:
  1386                           	opt stack 0
  1387                           
  1388                           ; 2 bytes @ 0x23
  1389  0000A3                     	ds	2
  1390  0000A5                     printf@len:
  1391                           	opt stack 0
  1392                           
  1393                           ; 2 bytes @ 0x25
  1394  0000A5                     	ds	2
  1395  0000A7                     printf@flag:
  1396                           	opt stack 0
  1397                           
  1398                           ; 1 bytes @ 0x27
  1399  0000A7                     	ds	1
  1400  0000A8                     printf@c:
  1401                           	opt stack 0
  1402                           
  1403                           ; 1 bytes @ 0x28
  1404  0000A8                     	ds	1
  1405  0000A9                     printf@width:
  1406                           	opt stack 0
  1407                           
  1408                           ; 2 bytes @ 0x29
  1409  0000A9                     	ds	2
  1410  0000AB                     ??_printRTC:
  1411                           
  1412                           ; 1 bytes @ 0x2B
  1413  0000AB                     	ds	3
  1414  0000AE                     printRTC@INT_time:
  1415                           	opt stack 0
  1416                           
  1417                           ; 14 bytes @ 0x2E
  1418  0000AE                     	ds	14
  1419  0000BC                     printRTC@RTC_month:
  1420                           	opt stack 0
  1421                           
  1422                           ; 2 bytes @ 0x3C
  1423  0000BC                     	ds	2
  1424  0000BE                     printRTC@month:
  1425                           	opt stack 0
  1426                           
  1427                           ; 4 bytes @ 0x3E
  1428  0000BE                     	ds	4
  1429  0000C2                     printRTC@i:
  1430                           	opt stack 0
  1431                           
  1432                           ; 2 bytes @ 0x42
  1433  0000C2                     	ds	2
  1434  0000C4                     ??_UI:
  1435                           
  1436                           ; 1 bytes @ 0x44
  1437  0000C4                     	ds	1
  1438  0000C5                     _UI$2164:
  1439                           	opt stack 0
  1440                           
  1441                           ; 2 bytes @ 0x45
  1442  0000C5                     	ds	2
  1443  0000C7                     UI@i:
  1444                           	opt stack 0
  1445                           
  1446                           ; 1 bytes @ 0x47
  1447  0000C7                     	ds	1
  1448  0000C8                     UI@i_646:
  1449                           	opt stack 0
  1450                           
  1451                           ; 1 bytes @ 0x48
  1452  0000C8                     	ds	1
  1453  0000C9                     UI@i_647:
  1454                           	opt stack 0
  1455                           
  1456                           ; 1 bytes @ 0x49
  1457  0000C9                     	ds	1
  1458  0000CA                     UI@i_650:
  1459                           	opt stack 0
  1460                           
  1461                           ; 1 bytes @ 0x4A
  1462  0000CA                     	ds	1
  1463  0000CB                     UI@i_651:
  1464                           	opt stack 0
  1465                           
  1466                           ; 1 bytes @ 0x4B
  1467  0000CB                     	ds	1
  1468  0000CC                     UI@i_654:
  1469                           	opt stack 0
  1470                           
  1471                           ; 1 bytes @ 0x4C
  1472  0000CC                     	ds	1
  1473  0000CD                     UI@i_655:
  1474                           	opt stack 0
  1475                           
  1476                           ; 1 bytes @ 0x4D
  1477  0000CD                     	ds	1
  1478  0000CE                     UI@i_658:
  1479                           	opt stack 0
  1480                           
  1481                           ; 1 bytes @ 0x4E
  1482  0000CE                     	ds	1
  1483  0000CF                     UI@i_659:
  1484                           	opt stack 0
  1485                           
  1486                           ; 1 bytes @ 0x4F
  1487  0000CF                     	ds	1
  1488  0000D0                     UI@i_662:
  1489                           	opt stack 0
  1490                           
  1491                           ; 1 bytes @ 0x50
  1492  0000D0                     	ds	1
  1493  0000D1                     UI@i_663:
  1494                           	opt stack 0
  1495                           
  1496                           ; 1 bytes @ 0x51
  1497  0000D1                     	ds	1
  1498  0000D2                     UI@i_666:
  1499                           	opt stack 0
  1500                           
  1501                           ; 1 bytes @ 0x52
  1502  0000D2                     	ds	1
  1503  0000D3                     UI@i_667:
  1504                           	opt stack 0
  1505                           
  1506                           ; 1 bytes @ 0x53
  1507  0000D3                     	ds	1
  1508  0000D4                     tblptru	equ	0xFF8
  1509                           tblptrh	equ	0xFF7
  1510                           tblptrl	equ	0xFF6
  1511                           tablat	equ	0xFF5
  1512                           postinc0	equ	0xFEE
  1513                           wreg	equ	0xFE8
  1514                           postdec1	equ	0xFE5
  1515                           fsr1l	equ	0xFE1
  1516                           
  1517                           ; 1 bytes @ 0x54
  1518                           
  1519                           	psect	cstackCOMRAM
  1520  000001                     __pcstackCOMRAM:
  1521                           	opt stack 0
  1522  000001                     ??i2_I2C_Master_Wait:
  1523  000001                     ??i2_isdigit:
  1524  000001                     ?i2___wmul:
  1525                           	opt stack 0
  1526  000001                     ?i2___lwmod:
  1527                           	opt stack 0
  1528  000001                     i2lcdNibble@temp:
  1529                           	opt stack 0
  1530  000001                     dispLogs@myLog:
  1531                           	opt stack 0
  1532  000001                     i2___wmul@multiplier:
  1533                           	opt stack 0
  1534  000001                     i2___lwmod@dividend:
  1535                           	opt stack 0
  1536  000001                     i2strcpy@to:
  1537                           	opt stack 0
  1538                           
  1539                           ; 2 bytes @ 0x0
  1540  000001                     	ds	1
  1541  000002                     i2I2C_Master_Read@a:
  1542                           	opt stack 0
  1543  000002                     i2lcdNibble@data:
  1544                           	opt stack 0
  1545  000002                     i2_isdigit$1809:
  1546                           	opt stack 0
  1547  000002                     i2I2C_Master_Write@d:
  1548                           	opt stack 0
  1549                           
  1550                           ; 2 bytes @ 0x1
  1551  000002                     	ds	1
  1552  000003                     i2I2C_Master_Read@temp:
  1553                           	opt stack 0
  1554  000003                     i2lcdInst@data:
  1555                           	opt stack 0
  1556  000003                     i2putch@data:
  1557                           	opt stack 0
  1558  000003                     i2isdigit@c:
  1559                           	opt stack 0
  1560  000003                     i2___wmul@multiplicand:
  1561                           	opt stack 0
  1562  000003                     i2___lwmod@divisor:
  1563                           	opt stack 0
  1564  000003                     i2strcpy@from:
  1565                           	opt stack 0
  1566                           
  1567                           ; 2 bytes @ 0x2
  1568  000003                     	ds	1
  1569  000004                     i2getRTC@i:
  1570                           	opt stack 0
  1571                           
  1572                           ; 2 bytes @ 0x3
  1573  000004                     	ds	1
  1574  000005                     i2___lwmod@counter:
  1575                           	opt stack 0
  1576  000005                     i2___wmul@product:
  1577                           	opt stack 0
  1578  000005                     i2strcpy@cp:
  1579                           	opt stack 0
  1580                           
  1581                           ; 2 bytes @ 0x4
  1582  000005                     	ds	1
  1583  000006                     ?i2___lwdiv:
  1584                           	opt stack 0
  1585  000006                     i2___lwdiv@dividend:
  1586                           	opt stack 0
  1587                           
  1588                           ; 2 bytes @ 0x5
  1589  000006                     	ds	2
  1590  000008                     i2___lwdiv@divisor:
  1591                           	opt stack 0
  1592                           
  1593                           ; 2 bytes @ 0x7
  1594  000008                     	ds	2
  1595  00000A                     i2___lwdiv@quotient:
  1596                           	opt stack 0
  1597                           
  1598                           ; 2 bytes @ 0x9
  1599  00000A                     	ds	2
  1600  00000C                     i2___lwdiv@counter:
  1601                           	opt stack 0
  1602                           
  1603                           ; 1 bytes @ 0xB
  1604  00000C                     	ds	1
  1605  00000D                     ?i2_printf:
  1606                           	opt stack 0
  1607  00000D                     i2printf@f:
  1608                           	opt stack 0
  1609                           
  1610                           ; 2 bytes @ 0xC
  1611  00000D                     	ds	12
  1612  000019                     ??i2_printf:
  1613                           
  1614                           ; 1 bytes @ 0x18
  1615  000019                     	ds	4
  1616  00001D                     i2printf@prec:
  1617                           	opt stack 0
  1618                           
  1619                           ; 1 bytes @ 0x1C
  1620  00001D                     	ds	1
  1621  00001E                     i2printf@ap:
  1622                           	opt stack 0
  1623                           
  1624                           ; 2 bytes @ 0x1D
  1625  00001E                     	ds	2
  1626  000020                     i2printf@cp:
  1627                           	opt stack 0
  1628                           
  1629                           ; 2 bytes @ 0x1F
  1630  000020                     	ds	2
  1631  000022                     i2printf@val:
  1632                           	opt stack 0
  1633                           
  1634                           ; 2 bytes @ 0x21
  1635  000022                     	ds	2
  1636  000024                     i2printf@len:
  1637                           	opt stack 0
  1638                           
  1639                           ; 2 bytes @ 0x23
  1640  000024                     	ds	2
  1641  000026                     i2printf@flag:
  1642                           	opt stack 0
  1643                           
  1644                           ; 1 bytes @ 0x25
  1645  000026                     	ds	1
  1646  000027                     i2printf@c:
  1647                           	opt stack 0
  1648                           
  1649                           ; 1 bytes @ 0x26
  1650  000027                     	ds	1
  1651  000028                     i2printf@width:
  1652                           	opt stack 0
  1653                           
  1654                           ; 2 bytes @ 0x27
  1655  000028                     	ds	2
  1656  00002A                     ??_printSortTimer:
  1657  00002A                     ??i2_printRTC:
  1658  00002A                     ?_inputHandler:
  1659                           	opt stack 0
  1660                           
  1661                           ; 2 bytes @ 0x29
  1662  00002A                     	ds	2
  1663  00002C                     ??_inputHandler:
  1664                           
  1665                           ; 1 bytes @ 0x2B
  1666  00002C                     	ds	1
  1667  00002D                     printSortTimer@curTime:
  1668                           	opt stack 0
  1669  00002D                     i2printRTC@INT_time:
  1670                           	opt stack 0
  1671                           
  1672                           ; 14 bytes @ 0x2C
  1673  00002D                     	ds	14
  1674  00003B                     printSortTimer@start_sec:
  1675                           	opt stack 0
  1676  00003B                     i2printRTC@RTC_month:
  1677                           	opt stack 0
  1678                           
  1679                           ; 2 bytes @ 0x3A
  1680  00003B                     	ds	2
  1681  00003D                     printSortTimer@cur_sec:
  1682                           	opt stack 0
  1683  00003D                     i2printRTC@month:
  1684                           	opt stack 0
  1685                           
  1686                           ; 4 bytes @ 0x3C
  1687  00003D                     	ds	2
  1688  00003F                     printSortTimer@hour:
  1689                           	opt stack 0
  1690                           
  1691                           ; 2 bytes @ 0x3E
  1692  00003F                     	ds	2
  1693  000041                     printSortTimer@min:
  1694                           	opt stack 0
  1695  000041                     i2printRTC@i:
  1696                           	opt stack 0
  1697                           
  1698                           ; 2 bytes @ 0x40
  1699  000041                     	ds	2
  1700  000043                     ??_updateMenu:
  1701  000043                     printSortTimer@sec:
  1702                           	opt stack 0
  1703                           
  1704                           ; 2 bytes @ 0x42
  1705  000043                     	ds	2
  1706  000045                     _printSortTimer$2279:
  1707                           	opt stack 0
  1708                           
  1709                           ; 2 bytes @ 0x44
  1710  000045                     	ds	2
  1711  000047                     printSortTimer@timeDiff:
  1712                           	opt stack 0
  1713                           
  1714                           ; 2 bytes @ 0x46
  1715  000047                     	ds	2
  1716  000049                     printSortTimer@i:
  1717                           	opt stack 0
  1718                           
  1719                           ; 2 bytes @ 0x48
  1720  000049                     	ds	2
  1721  00004B                     ??_handler:
  1722                           
  1723                           ; 1 bytes @ 0x4A
  1724  00004B                     	ds	16
  1725                           tblptru	equ	0xFF8
  1726                           tblptrh	equ	0xFF7
  1727                           tblptrl	equ	0xFF6
  1728                           tablat	equ	0xFF5
  1729                           postinc0	equ	0xFEE
  1730                           wreg	equ	0xFE8
  1731                           postdec1	equ	0xFE5
  1732                           fsr1l	equ	0xFE1
  1733                           
  1734 ;;
  1735 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1736 ;;
  1737 ;; *************** function _main *****************
  1738 ;; Defined at:
  1739 ;;		line 16 in file "main.c"
  1740 ;; Parameters:    Size  Location     Type
  1741 ;;		None
  1742 ;; Auto vars:     Size  Location     Type
  1743 ;;		None
  1744 ;; Return value:  Size  Location     Type
  1745 ;;                  1    wreg      void 
  1746 ;; Registers used:
  1747 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1748 ;; Tracked objects:
  1749 ;;		On entry : 0/0
  1750 ;;		On exit  : 0/0
  1751 ;;		Unchanged: 0/0
  1752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1756 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1757 ;;Total ram usage:        0 bytes
  1758 ;; Hardware stack levels required when called:   13
  1759 ;; This function calls:
  1760 ;;		_PortTestA5
  1761 ;;		_UI
  1762 ;;		_initLCD
  1763 ;;		_initTime
  1764 ;;		_initUI
  1765 ;;		_machineConfig
  1766 ;;		_sort
  1767 ;;		_stopSignals
  1768 ;; This function is called by:
  1769 ;;		Startup code after reset
  1770 ;; This function uses a non-reentrant model
  1771 ;;
  1772                           
  1773                           	psect	text0
  1774  001F92                     __ptext0:
  1775                           	opt stack 0
  1776  001F92                     _main:
  1777                           	opt stack 18
  1778                           
  1779                           ;main.c: 17: machineConfig();
  1780                           
  1781                           ;incstack = 0
  1782  001F92  ECE1  F011         	call	_machineConfig	;wreg free
  1783                           
  1784                           ;main.c: 18: initLCD();
  1785  001F96  EC60  F012         	call	_initLCD	;wreg free
  1786                           
  1787                           ;main.c: 19: initTime(0x42, 0x44, 0x19, 0x06, 0x24, 0x02, 0x17);
  1788  001F9A  0E44               	movlw	68
  1789  001F9C  0100               	movlb	0	; () banked
  1790  001F9E  6F80               	movwf	initTime@m& (0+255),b
  1791  001FA0  0E19               	movlw	25
  1792  001FA2  0100               	movlb	0	; () banked
  1793  001FA4  6F81               	movwf	initTime@h& (0+255),b
  1794  001FA6  0E06               	movlw	6
  1795  001FA8  0100               	movlb	0	; () banked
  1796  001FAA  6F82               	movwf	initTime@w& (0+255),b
  1797  001FAC  0E24               	movlw	36
  1798  001FAE  0100               	movlb	0	; () banked
  1799  001FB0  6F83               	movwf	initTime@DD& (0+255),b
  1800  001FB2  0E02               	movlw	2
  1801  001FB4  0100               	movlb	0	; () banked
  1802  001FB6  6F84               	movwf	initTime@MM& (0+255),b
  1803  001FB8  0E17               	movlw	23
  1804  001FBA  0100               	movlb	0	; () banked
  1805  001FBC  6F85               	movwf	initTime@YY& (0+255),b
  1806  001FBE  0E42               	movlw	66
  1807  001FC0  EC14  F015         	call	_initTime
  1808                           
  1809                           ;main.c: 20: initUI();
  1810  001FC4  EC34  F015         	call	_initUI	;wreg free
  1811                           
  1812                           ;main.c: 24: switch(machine_state){
  1813                           
  1814                           ;main.c: 23: while(1){
  1815  001FC8  D016               	goto	l5948
  1816  001FCA                     l5932:
  1817                           
  1818                           ;main.c: 26: UI();
  1819  001FCA  EC09  F000         	call	_UI	;wreg free
  1820                           
  1821                           ;main.c: 27: break;
  1822  001FCE  D013               	goto	l5948
  1823  001FD0                     l5934:
  1824                           
  1825                           ;main.c: 29: sort();
  1826  001FD0  EC03  F015         	call	_sort	;wreg free
  1827                           
  1828                           ;main.c: 30: break;
  1829  001FD4  D010               	goto	l5948
  1830  001FD6                     l5936:
  1831                           
  1832                           ;main.c: 32: stopSignals();
  1833  001FD6  EC41  F015         	call	_stopSignals	;wreg free
  1834                           
  1835                           ;main.c: 33: first = 1;
  1836  001FDA  0E00               	movlw	0
  1837  001FDC  0100               	movlb	0	; () banked
  1838  001FDE  6FFF               	movwf	(_first+1)& (0+255),b
  1839  001FE0  0E01               	movlw	1
  1840  001FE2  6FFE               	movwf	_first& (0+255),b
  1841                           
  1842                           ; BSR set to: 0
  1843                           ;main.c: 34: UI();
  1844  001FE4  EC09  F000         	call	_UI	;wreg free
  1845                           
  1846                           ;main.c: 35: break;
  1847  001FE8  D006               	goto	l5948
  1848  001FEA                     l5942:
  1849                           
  1850                           ;main.c: 37: PortTestA5();
  1851  001FEA  EC60  F015         	call	_PortTestA5	;wreg free
  1852                           
  1853                           ;main.c: 38: break;
  1854  001FEE  D003               	goto	l5948
  1855  001FF0                     l5944:
  1856                           
  1857                           ;main.c: 40: stopSignals();
  1858  001FF0  EC41  F015         	call	_stopSignals	;wreg free
  1859  001FF4                     l832:
  1860  001FF4  D7FF               	goto	l832
  1861  001FF6                     l5948:
  1862  001FF6  0100               	movlb	0	; () banked
  1863  001FF8  51F7               	movf	_machine_state& (0+255),w,b
  1864                           
  1865                           ; Switch size 1, requested type "space"
  1866                           ; Number of cases is 5, Range of values is 0 to 4
  1867                           ; switch strategies available:
  1868                           ; Name         Instructions Cycles
  1869                           ; simple_byte           16     9 (average)
  1870                           ;	Chosen strategy is simple_byte
  1871  001FFA  0A00               	xorlw	0	; case 0
  1872  001FFC  B4D8               	btfsc	status,2,c
  1873  001FFE  D7E5               	goto	l5932
  1874  002000  0A01               	xorlw	1	; case 1
  1875  002002  B4D8               	btfsc	status,2,c
  1876  002004  D7E5               	goto	l5934
  1877  002006  0A03               	xorlw	3	; case 2
  1878  002008  B4D8               	btfsc	status,2,c
  1879  00200A  D7E5               	goto	l5936
  1880  00200C  0A01               	xorlw	1	; case 3
  1881  00200E  B4D8               	btfsc	status,2,c
  1882  002010  D7EC               	goto	l5942
  1883  002012  0A07               	xorlw	7	; case 4
  1884  002014  B4D8               	btfsc	status,2,c
  1885  002016  D7EC               	goto	l5944
  1886                           
  1887                           ; BSR set to: 0
  1888                           
  1889                           ; BSR set to: 0
  1890  002018  D7EE               	goto	l5948
  1891  00201A                     __end_of_main:
  1892                           	opt stack 0
  1893                           tblptru	equ	0xFF8
  1894                           tblptrh	equ	0xFF7
  1895                           tblptrl	equ	0xFF6
  1896                           tablat	equ	0xFF5
  1897                           postinc0	equ	0xFEE
  1898                           wreg	equ	0xFE8
  1899                           postdec1	equ	0xFE5
  1900                           fsr1l	equ	0xFE1
  1901                           status	equ	0xFD8
  1902                           
  1903 ;; *************** function _stopSignals *****************
  1904 ;; Defined at:
  1905 ;;		line 49 in file "main.c"
  1906 ;; Parameters:    Size  Location     Type
  1907 ;;		None
  1908 ;; Auto vars:     Size  Location     Type
  1909 ;;		None
  1910 ;; Return value:  Size  Location     Type
  1911 ;;                  1    wreg      void 
  1912 ;; Registers used:
  1913 ;;		wreg, status,2
  1914 ;; Tracked objects:
  1915 ;;		On entry : 0/0
  1916 ;;		On exit  : 0/0
  1917 ;;		Unchanged: 0/0
  1918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1920 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1922 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1923 ;;Total ram usage:        0 bytes
  1924 ;; Hardware stack levels used:    1
  1925 ;; Hardware stack levels required when called:    7
  1926 ;; This function calls:
  1927 ;;		Nothing
  1928 ;; This function is called by:
  1929 ;;		_main
  1930 ;; This function uses a non-reentrant model
  1931 ;;
  1932                           
  1933                           	psect	text1
  1934  002A82                     __ptext1:
  1935                           	opt stack 0
  1936  002A82                     _stopSignals:
  1937                           	opt stack 23
  1938                           
  1939                           ;main.c: 50: LATA = 0x00;
  1940                           
  1941                           ; BSR set to: 0
  1942                           ;incstack = 0
  1943  002A82  0E00               	movlw	0
  1944  002A84  6E89               	movwf	3977,c	;volatile
  1945                           
  1946                           ;main.c: 51: LATB = 0x00;
  1947  002A86  0E00               	movlw	0
  1948  002A88  6E8A               	movwf	3978,c	;volatile
  1949                           
  1950                           ;main.c: 52: LATC = 0x00;
  1951  002A8A  0E00               	movlw	0
  1952  002A8C  6E8B               	movwf	3979,c	;volatile
  1953                           
  1954                           ;main.c: 53: LATD = 0x00;
  1955  002A8E  0E00               	movlw	0
  1956  002A90  6E8C               	movwf	3980,c	;volatile
  1957                           
  1958                           ;main.c: 54: LATE = 0x00;
  1959  002A92  0E00               	movlw	0
  1960  002A94  6E8D               	movwf	3981,c	;volatile
  1961  002A96  0012               	return		;funcret
  1962  002A98                     __end_of_stopSignals:
  1963                           	opt stack 0
  1964                           tblptru	equ	0xFF8
  1965                           tblptrh	equ	0xFF7
  1966                           tblptrl	equ	0xFF6
  1967                           tablat	equ	0xFF5
  1968                           postinc0	equ	0xFEE
  1969                           wreg	equ	0xFE8
  1970                           postdec1	equ	0xFE5
  1971                           fsr1l	equ	0xFE1
  1972                           status	equ	0xFD8
  1973                           
  1974 ;; *************** function _sort *****************
  1975 ;; Defined at:
  1976 ;;		line 14 in file "sort.c"
  1977 ;; Parameters:    Size  Location     Type
  1978 ;;		None
  1979 ;; Auto vars:     Size  Location     Type
  1980 ;;		None
  1981 ;; Return value:  Size  Location     Type
  1982 ;;                  1    wreg      void 
  1983 ;; Registers used:
  1984 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1985 ;; Tracked objects:
  1986 ;;		On entry : 0/0
  1987 ;;		On exit  : 0/0
  1988 ;;		Unchanged: 0/0
  1989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1993 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1994 ;;Total ram usage:        0 bytes
  1995 ;; Hardware stack levels used:    1
  1996 ;; Hardware stack levels required when called:   12
  1997 ;; This function calls:
  1998 ;;		_Distribution
  1999 ;;		_ID
  2000 ;;		_Loading
  2001 ;; This function is called by:
  2002 ;;		_main
  2003 ;; This function uses a non-reentrant model
  2004 ;;
  2005                           
  2006                           	psect	text2
  2007  002A06                     __ptext2:
  2008                           	opt stack 0
  2009  002A06                     _sort:
  2010                           	opt stack 18
  2011                           
  2012                           ;sort.c: 15: if(machine_state == Sorting_state){
  2013                           
  2014                           ;incstack = 0
  2015  002A06  0100               	movlb	0	; () banked
  2016  002A08  05F7               	decf	_machine_state& (0+255),w,b
  2017  002A0A  B4D8               	btfsc	status,2,c
  2018                           
  2019                           ; BSR set to: 0
  2020                           ;sort.c: 16: Loading();
  2021  002A0C  EC51  F00E         	call	_Loading	;wreg free
  2022                           
  2023                           ;sort.c: 17: }
  2024                           ;sort.c: 18: if(machine_state == Sorting_state){
  2025  002A10  0100               	movlb	0	; () banked
  2026  002A12  05F7               	decf	_machine_state& (0+255),w,b
  2027  002A14  B4D8               	btfsc	status,2,c
  2028                           
  2029                           ; BSR set to: 0
  2030                           ;sort.c: 19: ID();
  2031  002A16  ECD0  F00C         	call	_ID	;wreg free
  2032                           
  2033                           ;sort.c: 20: }
  2034                           ;sort.c: 21: if(machine_state == Sorting_state){
  2035  002A1A  0100               	movlb	0	; () banked
  2036  002A1C  05F7               	decf	_machine_state& (0+255),w,b
  2037  002A1E  A4D8               	btfss	status,2,c
  2038  002A20  0012               	return	
  2039                           
  2040                           ; BSR set to: 0
  2041                           ;sort.c: 22: Distribution();
  2042  002A22  EC43  F014         	call	_Distribution	;wreg free
  2043  002A26  0012               	return	
  2044  002A28                     __end_of_sort:
  2045                           	opt stack 0
  2046                           tblptru	equ	0xFF8
  2047                           tblptrh	equ	0xFF7
  2048                           tblptrl	equ	0xFF6
  2049                           tablat	equ	0xFF5
  2050                           postinc0	equ	0xFEE
  2051                           wreg	equ	0xFE8
  2052                           postdec1	equ	0xFE5
  2053                           fsr1l	equ	0xFE1
  2054                           status	equ	0xFD8
  2055                           
  2056 ;; *************** function _Loading *****************
  2057 ;; Defined at:
  2058 ;;		line 26 in file "sort.c"
  2059 ;; Parameters:    Size  Location     Type
  2060 ;;		None
  2061 ;; Auto vars:     Size  Location     Type
  2062 ;;		None
  2063 ;; Return value:  Size  Location     Type
  2064 ;;                  1    wreg      void 
  2065 ;; Registers used:
  2066 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2067 ;; Tracked objects:
  2068 ;;		On entry : 0/0
  2069 ;;		On exit  : 0/0
  2070 ;;		Unchanged: 0/0
  2071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2073 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2074 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2075 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2076 ;;Total ram usage:        1 bytes
  2077 ;; Hardware stack levels used:    1
  2078 ;; Hardware stack levels required when called:   11
  2079 ;; This function calls:
  2080 ;;		_getIR
  2081 ;;		_initFlags
  2082 ;;		_initSortTimer
  2083 ;;		_lcdInst
  2084 ;;		_moveServoCup
  2085 ;; This function is called by:
  2086 ;;		_sort
  2087 ;; This function uses a non-reentrant model
  2088 ;;
  2089                           
  2090                           	psect	text3
  2091  001CA2                     __ptext3:
  2092                           	opt stack 0
  2093  001CA2                     _Loading:
  2094                           	opt stack 18
  2095                           
  2096                           ;sort.c: 27: if(first){
  2097                           
  2098                           ;incstack = 0
  2099  001CA2  0100               	movlb	0	; () banked
  2100  001CA4  51FE               	movf	_first& (0+255),w,b
  2101  001CA6  0100               	movlb	0	; () banked
  2102  001CA8  11FF               	iorwf	(_first+1)& (0+255),w,b
  2103  001CAA  B4D8               	btfsc	status,2,c
  2104  001CAC  D01A               	goto	l5186
  2105                           
  2106                           ; BSR set to: 0
  2107                           ;sort.c: 28: first = 0;
  2108  001CAE  0E00               	movlw	0
  2109  001CB0  0100               	movlb	0	; () banked
  2110  001CB2  6FFF               	movwf	(_first+1)& (0+255),b
  2111  001CB4  0E00               	movlw	0
  2112  001CB6  6FFE               	movwf	_first& (0+255),b
  2113                           
  2114                           ; BSR set to: 0
  2115                           ;sort.c: 29: initFlags();
  2116  001CB8  ECC5  F012         	call	_initFlags	;wreg free
  2117                           
  2118                           ;sort.c: 30: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  2119  001CBC  0E01               	movlw	1
  2120  001CBE  EC7A  F015         	call	_lcdInst
  2121  001CC2  0E68               	movlw	104
  2122  001CC4  0100               	movlb	0	; () banked
  2123  001CC6  6F8A               	movwf	??_Loading& (0+255),b
  2124  001CC8  0EE4               	movlw	228
  2125  001CCA                     u4717:
  2126  001CCA  2EE8               	decfsz	wreg,f,c
  2127  001CCC  D7FE               	bra	u4717
  2128  001CCE  2F8A               	decfsz	??_Loading& (0+255),f,b
  2129  001CD0  D7FC               	bra	u4717
  2130  001CD2  F000               	nop	
  2131                           
  2132                           ;sort.c: 31: initSortTimer();
  2133  001CD4  ECFC  F00D         	call	_initSortTimer	;wreg free
  2134                           
  2135                           ;sort.c: 34: LATAbits.LATA5 = 1;
  2136  001CD8  8A89               	bsf	3977,5,c	;volatile
  2137                           
  2138                           ;sort.c: 37: moveServoCup(Home);
  2139  001CDA  0E00               	movlw	0
  2140  001CDC  ECF3  F00E         	call	_moveServoCup
  2141                           
  2142                           ;sort.c: 39: }
  2143  001CE0  0012               	return	
  2144  001CE2                     l5186:
  2145                           
  2146                           ;sort.c: 40: else{
  2147                           ;sort.c: 43: if(!f_loadingNewCan){
  2148  001CE2  0100               	movlb	0	; () banked
  2149  001CE4  51EF               	movf	_f_loadingNewCan& (0+255),w,b
  2150  001CE6  0100               	movlb	0	; () banked
  2151  001CE8  11F0               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  2152  001CEA  A4D8               	btfss	status,2,c
  2153  001CEC  D018               	goto	l5202
  2154                           
  2155                           ; BSR set to: 0
  2156                           ;sort.c: 45: getIR();
  2157  001CEE  ECF9  F010         	call	_getIR	;wreg free
  2158                           
  2159                           ;sort.c: 47: if(!f_loadingNewCan){
  2160  001CF2  0100               	movlb	0	; () banked
  2161  001CF4  51EF               	movf	_f_loadingNewCan& (0+255),w,b
  2162  001CF6  0100               	movlb	0	; () banked
  2163  001CF8  11F0               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  2164  001CFA  B4D8               	btfsc	status,2,c
  2165  001CFC  0012               	return	
  2166                           
  2167                           ; BSR set to: 0
  2168                           ;sort.c: 51: else{
  2169                           ;sort.c: 52: count_total++;
  2170                           
  2171                           ; BSR set to: 0
  2172                           
  2173                           ; BSR set to: 0
  2174                           ;sort.c: 49: }
  2175                           
  2176                           ; BSR set to: 0
  2177                           ;sort.c: 48: return;
  2178  001CFE  0100               	movlb	0	; () banked
  2179  001D00  4BE5               	infsnz	_count_total& (0+255),f,b
  2180  001D02  2BE6               	incf	(_count_total+1)& (0+255),f,b
  2181                           
  2182                           ; BSR set to: 0
  2183                           ;sort.c: 53: if(count_total == 12){
  2184  001D04  0E0C               	movlw	12
  2185  001D06  0100               	movlb	0	; () banked
  2186  001D08  19E5               	xorwf	_count_total& (0+255),w,b
  2187  001D0A  0100               	movlb	0	; () banked
  2188  001D0C  11E6               	iorwf	(_count_total+1)& (0+255),w,b
  2189  001D0E  A4D8               	btfss	status,2,c
  2190  001D10  0012               	return	
  2191                           
  2192                           ; BSR set to: 0
  2193                           ;sort.c: 54: f_lastCan = 1;
  2194  001D12  0E00               	movlw	0
  2195  001D14  0100               	movlb	0	; () banked
  2196  001D16  6FEE               	movwf	(_f_lastCan+1)& (0+255),b
  2197  001D18  0E01               	movlw	1
  2198  001D1A  6FED               	movwf	_f_lastCan& (0+255),b
  2199                           
  2200                           ; BSR set to: 0
  2201                           ;sort.c: 55: }
  2202                           ;sort.c: 56: }
  2203                           ;sort.c: 57: }
  2204                           
  2205                           ; BSR set to: 0
  2206  001D1C  0012               	return	
  2207  001D1E                     l5202:
  2208                           
  2209                           ; BSR set to: 0
  2210                           ;sort.c: 60: else if(f_ID_receive){
  2211  001D1E  0100               	movlb	0	; () banked
  2212  001D20  51FC               	movf	_f_ID_receive& (0+255),w,b
  2213  001D22  0100               	movlb	0	; () banked
  2214  001D24  11FD               	iorwf	(_f_ID_receive+1)& (0+255),w,b
  2215  001D26  B4D8               	btfsc	status,2,c
  2216  001D28  0012               	return	
  2217                           
  2218                           ; BSR set to: 0
  2219                           ;sort.c: 61: f_loadingNewCan = 0;
  2220  001D2A  0E00               	movlw	0
  2221  001D2C  0100               	movlb	0	; () banked
  2222  001D2E  6FF0               	movwf	(_f_loadingNewCan+1)& (0+255),b
  2223  001D30  0E00               	movlw	0
  2224  001D32  6FEF               	movwf	_f_loadingNewCan& (0+255),b
  2225                           
  2226                           ; BSR set to: 0
  2227                           ;sort.c: 62: LATAbits.LATA4 = 1;
  2228  001D34  8889               	bsf	3977,4,c	;volatile
  2229                           
  2230                           ;sort.c: 63: f_can_coming_to_ID = 1;
  2231  001D36  0E00               	movlw	0
  2232  001D38  0100               	movlb	0	; () banked
  2233  001D3A  6FEA               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  2234  001D3C  0E01               	movlw	1
  2235  001D3E  6FE9               	movwf	_f_can_coming_to_ID& (0+255),b
  2236                           
  2237                           ; BSR set to: 0
  2238                           ;sort.c: 66: LATAbits.LATA4 = 0;
  2239  001D40  9889               	bcf	3977,4,c	;volatile
  2240                           
  2241                           ; BSR set to: 0
  2242                           
  2243                           ; BSR set to: 0
  2244  001D42  0012               	return	
  2245  001D44                     __end_of_Loading:
  2246                           	opt stack 0
  2247                           tblptru	equ	0xFF8
  2248                           tblptrh	equ	0xFF7
  2249                           tblptrl	equ	0xFF6
  2250                           tablat	equ	0xFF5
  2251                           postinc0	equ	0xFEE
  2252                           wreg	equ	0xFE8
  2253                           postdec1	equ	0xFE5
  2254                           fsr1l	equ	0xFE1
  2255                           status	equ	0xFD8
  2256                           
  2257 ;; *************** function _initSortTimer *****************
  2258 ;; Defined at:
  2259 ;;		line 119 in file "sort.c"
  2260 ;; Parameters:    Size  Location     Type
  2261 ;;		None
  2262 ;; Auto vars:     Size  Location     Type
  2263 ;;  i               2    8[BANK0 ] int 
  2264 ;; Return value:  Size  Location     Type
  2265 ;;                  1    wreg      void 
  2266 ;; Registers used:
  2267 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2268 ;; Tracked objects:
  2269 ;;		On entry : 0/0
  2270 ;;		On exit  : 0/0
  2271 ;;		Unchanged: 0/0
  2272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2274 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2275 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2276 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2277 ;;Total ram usage:        5 bytes
  2278 ;; Hardware stack levels used:    1
  2279 ;; Hardware stack levels required when called:   10
  2280 ;; This function calls:
  2281 ;;		_getRTC
  2282 ;; This function is called by:
  2283 ;;		_Loading
  2284 ;; This function uses a non-reentrant model
  2285 ;;
  2286                           
  2287                           	psect	text4
  2288  001BF8                     __ptext4:
  2289                           	opt stack 0
  2290  001BF8                     _initSortTimer:
  2291                           	opt stack 18
  2292                           
  2293                           ;sort.c: 121: getRTC();
  2294                           
  2295                           ;incstack = 0
  2296  001BF8  EC0D  F010         	call	_getRTC	;wreg free
  2297                           
  2298                           ;sort.c: 122: for(int i = 0; i < 7; i++){
  2299  001BFC  0E00               	movlw	0
  2300  001BFE  0100               	movlb	0	; () banked
  2301  001C00  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  2302  001C02  0E00               	movlw	0
  2303  001C04  6F88               	movwf	initSortTimer@i& (0+255),b
  2304  001C06                     l4840:
  2305                           
  2306                           ; BSR set to: 0
  2307  001C06  0100               	movlb	0	; () banked
  2308  001C08  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  2309  001C0A  D008               	goto	l4844
  2310  001C0C  0100               	movlb	0	; () banked
  2311  001C0E  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  2312  001C10  E140               	bnz	l4850
  2313  001C12  0E07               	movlw	7
  2314  001C14  0100               	movlb	0	; () banked
  2315  001C16  5D88               	subwf	initSortTimer@i& (0+255),w,b
  2316  001C18  B0D8               	btfsc	status,0,c
  2317  001C1A  D03B               	goto	l4850
  2318  001C1C                     l4844:
  2319                           
  2320                           ; BSR set to: 0
  2321                           ;sort.c: 123: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  2322  001C1C  0ED4               	movlw	low _time
  2323  001C1E  0100               	movlb	0	; () banked
  2324  001C20  2588               	addwf	initSortTimer@i& (0+255),w,b
  2325  001C22  6ED9               	movwf	fsr2l,c
  2326  001C24  0E00               	movlw	high _time
  2327  001C26  0100               	movlb	0	; () banked
  2328  001C28  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  2329  001C2A  6EDA               	movwf	fsr2h,c
  2330  001C2C  50DF               	movf	indf2,w,c
  2331  001C2E  0100               	movlb	0	; () banked
  2332  001C30  6F85               	movwf	??_initSortTimer& (0+255),b
  2333  001C32  0100               	movlb	0	; () banked
  2334  001C34  3B85               	swapf	??_initSortTimer& (0+255),f,b
  2335  001C36  0E0F               	movlw	15
  2336  001C38  1785               	andwf	??_initSortTimer& (0+255),f,b
  2337  001C3A  0E0F               	movlw	15
  2338  001C3C  0100               	movlb	0	; () banked
  2339  001C3E  1785               	andwf	??_initSortTimer& (0+255),f,b
  2340  001C40  0100               	movlb	0	; () banked
  2341  001C42  5185               	movf	??_initSortTimer& (0+255),w,b
  2342  001C44  0D0A               	mullw	10
  2343  001C46  0ED4               	movlw	low _time
  2344  001C48  0100               	movlb	0	; () banked
  2345  001C4A  2588               	addwf	initSortTimer@i& (0+255),w,b
  2346  001C4C  6ED9               	movwf	fsr2l,c
  2347  001C4E  0E00               	movlw	high _time
  2348  001C50  0100               	movlb	0	; () banked
  2349  001C52  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  2350  001C54  6EDA               	movwf	fsr2h,c
  2351  001C56  50DF               	movf	indf2,w,c
  2352  001C58  0B0F               	andlw	15
  2353  001C5A  0100               	movlb	0	; () banked
  2354  001C5C  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  2355  001C5E  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  2356  001C60  50F3               	movf	prodl,w,c
  2357  001C62  0100               	movlb	0	; () banked
  2358  001C64  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  2359  001C66  50F4               	movf	prodh,w,c
  2360  001C68  0100               	movlb	0	; () banked
  2361  001C6A  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  2362  001C6C  90D8               	bcf	status,0,c
  2363  001C6E  0100               	movlb	0	; () banked
  2364  001C70  3588               	rlcf	initSortTimer@i& (0+255),w,b
  2365  001C72  6ED9               	movwf	fsr2l,c
  2366  001C74  0100               	movlb	0	; () banked
  2367  001C76  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  2368  001C78  6EDA               	movwf	fsr2h,c
  2369  001C7A  0E00               	movlw	low _startTime
  2370  001C7C  26D9               	addwf	fsr2l,f,c
  2371  001C7E  0E01               	movlw	high _startTime
  2372  001C80  22DA               	addwfc	fsr2h,f,c
  2373  001C82  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  2374  001C86  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  2375                           
  2376                           ; BSR set to: 0
  2377  001C8A  0100               	movlb	0	; () banked
  2378  001C8C  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  2379  001C8E  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  2380  001C90  D7BA               	goto	l4840
  2381  001C92                     l4850:
  2382                           
  2383                           ; BSR set to: 0
  2384                           ;sort.c: 124: }
  2385                           ;sort.c: 126: T0CON = 0b00010111;
  2386  001C92  0E17               	movlw	23
  2387  001C94  6ED5               	movwf	4053,c	;volatile
  2388                           
  2389                           ;sort.c: 135: TMR0H = 0b10000101;
  2390  001C96  0E85               	movlw	133
  2391  001C98  6ED7               	movwf	4055,c	;volatile
  2392                           
  2393                           ;sort.c: 136: TMR0L = 0b11101110;
  2394  001C9A  0EEE               	movlw	238
  2395  001C9C  6ED6               	movwf	4054,c	;volatile
  2396                           
  2397                           ; BSR set to: 0
  2398                           ;sort.c: 137: TMR0ON = 1;
  2399  001C9E  8ED5               	bsf	4053,7,c	;volatile
  2400                           
  2401                           ; BSR set to: 0
  2402  001CA0  0012               	return		;funcret
  2403  001CA2                     __end_of_initSortTimer:
  2404                           	opt stack 0
  2405                           tblptru	equ	0xFF8
  2406                           tblptrh	equ	0xFF7
  2407                           tblptrl	equ	0xFF6
  2408                           tablat	equ	0xFF5
  2409                           prodh	equ	0xFF4
  2410                           prodl	equ	0xFF3
  2411                           postinc0	equ	0xFEE
  2412                           wreg	equ	0xFE8
  2413                           postdec1	equ	0xFE5
  2414                           fsr1l	equ	0xFE1
  2415                           indf2	equ	0xFDF
  2416                           postinc2	equ	0xFDE
  2417                           postdec2	equ	0xFDD
  2418                           fsr2h	equ	0xFDA
  2419                           fsr2l	equ	0xFD9
  2420                           status	equ	0xFD8
  2421                           
  2422 ;; *************** function _initFlags *****************
  2423 ;; Defined at:
  2424 ;;		line 111 in file "sort.c"
  2425 ;; Parameters:    Size  Location     Type
  2426 ;;		None
  2427 ;; Auto vars:     Size  Location     Type
  2428 ;;		None
  2429 ;; Return value:  Size  Location     Type
  2430 ;;                  1    wreg      void 
  2431 ;; Registers used:
  2432 ;;		wreg, status,2
  2433 ;; Tracked objects:
  2434 ;;		On entry : 0/0
  2435 ;;		On exit  : 0/0
  2436 ;;		Unchanged: 0/0
  2437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2441 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2442 ;;Total ram usage:        0 bytes
  2443 ;; Hardware stack levels used:    1
  2444 ;; Hardware stack levels required when called:    7
  2445 ;; This function calls:
  2446 ;;		Nothing
  2447 ;; This function is called by:
  2448 ;;		_Loading
  2449 ;; This function uses a non-reentrant model
  2450 ;;
  2451                           
  2452                           	psect	text5
  2453  00258A                     __ptext5:
  2454                           	opt stack 0
  2455  00258A                     _initFlags:
  2456                           	opt stack 21
  2457                           
  2458                           ;sort.c: 112: f_loadingNewCan = 0;
  2459                           
  2460                           ; BSR set to: 0
  2461                           ;incstack = 0
  2462  00258A  0E00               	movlw	0
  2463  00258C  0100               	movlb	0	; () banked
  2464  00258E  6FF0               	movwf	(_f_loadingNewCan+1)& (0+255),b
  2465  002590  0E00               	movlw	0
  2466  002592  6FEF               	movwf	_f_loadingNewCan& (0+255),b
  2467                           
  2468                           ;sort.c: 113: f_lastCan = 0;
  2469  002594  0E00               	movlw	0
  2470  002596  0100               	movlb	0	; () banked
  2471  002598  6FEE               	movwf	(_f_lastCan+1)& (0+255),b
  2472  00259A  0E00               	movlw	0
  2473  00259C  6FED               	movwf	_f_lastCan& (0+255),b
  2474                           
  2475                           ;sort.c: 114: f_ID_receive = 1;
  2476  00259E  0E00               	movlw	0
  2477  0025A0  0100               	movlb	0	; () banked
  2478  0025A2  6FFD               	movwf	(_f_ID_receive+1)& (0+255),b
  2479  0025A4  0E01               	movlw	1
  2480  0025A6  6FFC               	movwf	_f_ID_receive& (0+255),b
  2481                           
  2482                           ;sort.c: 115: f_can_coming_to_ID = 0;
  2483  0025A8  0E00               	movlw	0
  2484  0025AA  0100               	movlb	0	; () banked
  2485  0025AC  6FEA               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  2486  0025AE  0E00               	movlw	0
  2487  0025B0  6FE9               	movwf	_f_can_coming_to_ID& (0+255),b
  2488                           
  2489                           ;sort.c: 116: f_can_coming_to_distribution = 0;
  2490  0025B2  0E00               	movlw	0
  2491  0025B4  0100               	movlb	0	; () banked
  2492  0025B6  6FEC               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  2493  0025B8  0E00               	movlw	0
  2494  0025BA  6FEB               	movwf	_f_can_coming_to_distribution& (0+255),b
  2495                           
  2496                           ;sort.c: 117: f_can_distributed = 0;
  2497  0025BC  0E00               	movlw	0
  2498  0025BE  0101               	movlb	1	; () banked
  2499  0025C0  6F0F               	movwf	(_f_can_distributed+1)& (0+255),b
  2500  0025C2  0E00               	movlw	0
  2501  0025C4  6F0E               	movwf	_f_can_distributed& (0+255),b
  2502                           
  2503                           ; BSR set to: 1
  2504  0025C6  0012               	return		;funcret
  2505  0025C8                     __end_of_initFlags:
  2506                           	opt stack 0
  2507                           tblptru	equ	0xFF8
  2508                           tblptrh	equ	0xFF7
  2509                           tblptrl	equ	0xFF6
  2510                           tablat	equ	0xFF5
  2511                           prodh	equ	0xFF4
  2512                           prodl	equ	0xFF3
  2513                           postinc0	equ	0xFEE
  2514                           wreg	equ	0xFE8
  2515                           postdec1	equ	0xFE5
  2516                           fsr1l	equ	0xFE1
  2517                           indf2	equ	0xFDF
  2518                           postinc2	equ	0xFDE
  2519                           postdec2	equ	0xFDD
  2520                           fsr2h	equ	0xFDA
  2521                           fsr2l	equ	0xFD9
  2522                           status	equ	0xFD8
  2523                           
  2524 ;; *************** function _getIR *****************
  2525 ;; Defined at:
  2526 ;;		line 166 in file "sort.c"
  2527 ;; Parameters:    Size  Location     Type
  2528 ;;		None
  2529 ;; Auto vars:     Size  Location     Type
  2530 ;;		None
  2531 ;; Return value:  Size  Location     Type
  2532 ;;                  1    wreg      void 
  2533 ;; Registers used:
  2534 ;;		wreg, status,2, status,0, cstack
  2535 ;; Tracked objects:
  2536 ;;		On entry : 0/0
  2537 ;;		On exit  : 0/0
  2538 ;;		Unchanged: 0/0
  2539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2541 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2543 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2544 ;;Total ram usage:        0 bytes
  2545 ;; Hardware stack levels used:    1
  2546 ;; Hardware stack levels required when called:    9
  2547 ;; This function calls:
  2548 ;;		_readIR
  2549 ;; This function is called by:
  2550 ;;		_Loading
  2551 ;; This function uses a non-reentrant model
  2552 ;;
  2553                           
  2554                           	psect	text6
  2555  0021F2                     __ptext6:
  2556                           	opt stack 0
  2557  0021F2                     _getIR:
  2558                           	opt stack 19
  2559                           
  2560                           ;sort.c: 167: readIR();
  2561                           
  2562                           ; BSR set to: 1
  2563                           ;incstack = 0
  2564  0021F2  EC8B  F011         	call	_readIR	;wreg free
  2565                           
  2566                           ;sort.c: 168: if(IR_signal==1){
  2567  0021F6  0100               	movlb	0	; () banked
  2568  0021F8  05DB               	decf	_IR_signal& (0+255),w,b
  2569  0021FA  0100               	movlb	0	; () banked
  2570  0021FC  11DC               	iorwf	(_IR_signal+1)& (0+255),w,b
  2571  0021FE  A4D8               	btfss	status,2,c
  2572  002200  D00A               	goto	l4882
  2573                           
  2574                           ; BSR set to: 0
  2575                           ;sort.c: 170: T3CON = 0b10110000;
  2576  002202  0EB0               	movlw	176
  2577  002204  6EB1               	movwf	4017,c	;volatile
  2578                           
  2579                           ;sort.c: 171: TMR3H = 0b00111100;
  2580  002206  0E3C               	movlw	60
  2581  002208  6EB3               	movwf	4019,c	;volatile
  2582                           
  2583                           ;sort.c: 172: TMR3L = 0b10110000;
  2584  00220A  0EB0               	movlw	176
  2585  00220C  6EB2               	movwf	4018,c	;volatile
  2586                           
  2587                           ; BSR set to: 0
  2588                           ;sort.c: 173: TMR3ON = 1;
  2589  00220E  80B1               	bsf	4017,0,c	;volatile
  2590                           
  2591                           ; BSR set to: 0
  2592                           ;sort.c: 174: }
  2593                           ;sort.c: 175: while(IR_signal && !TMR3CF){
  2594  002210  D002               	goto	l4882
  2595  002212                     l4880:
  2596                           
  2597                           ; BSR set to: 0
  2598                           ;sort.c: 177: readIR();
  2599  002212  EC8B  F011         	call	_readIR	;wreg free
  2600  002216                     l4882:
  2601  002216  0100               	movlb	0	; () banked
  2602  002218  51DB               	movf	_IR_signal& (0+255),w,b
  2603  00221A  0100               	movlb	0	; () banked
  2604  00221C  11DC               	iorwf	(_IR_signal+1)& (0+255),w,b
  2605  00221E  B4D8               	btfsc	status,2,c
  2606  002220  D006               	goto	l4886
  2607                           
  2608                           ; BSR set to: 0
  2609  002222  0100               	movlb	0	; () banked
  2610  002224  51DF               	movf	_TMR3CF& (0+255),w,b
  2611  002226  0100               	movlb	0	; () banked
  2612  002228  11E0               	iorwf	(_TMR3CF+1)& (0+255),w,b
  2613  00222A  B4D8               	btfsc	status,2,c
  2614  00222C  D7F2               	goto	l4880
  2615  00222E                     l4886:
  2616                           
  2617                           ; BSR set to: 0
  2618                           ;sort.c: 178: }
  2619                           ;sort.c: 180: TMR3CF = 0;
  2620  00222E  0E00               	movlw	0
  2621  002230  0100               	movlb	0	; () banked
  2622  002232  6FE0               	movwf	(_TMR3CF+1)& (0+255),b
  2623  002234  0E00               	movlw	0
  2624  002236  6FDF               	movwf	_TMR3CF& (0+255),b
  2625                           
  2626                           ; BSR set to: 0
  2627                           ;sort.c: 181: if(TMR3IF==1){
  2628  002238  A2A1               	btfss	4001,1,c	;volatile
  2629  00223A  D006               	goto	l4892
  2630                           
  2631                           ; BSR set to: 0
  2632                           ;sort.c: 182: f_loadingNewCan = 1;
  2633  00223C  0E00               	movlw	0
  2634  00223E  0100               	movlb	0	; () banked
  2635  002240  6FF0               	movwf	(_f_loadingNewCan+1)& (0+255),b
  2636  002242  0E01               	movlw	1
  2637  002244  6FEF               	movwf	_f_loadingNewCan& (0+255),b
  2638                           
  2639                           ;sort.c: 183: }
  2640  002246  0012               	return	
  2641  002248                     l4892:
  2642                           
  2643                           ; BSR set to: 0
  2644                           ;sort.c: 184: else{
  2645                           ;sort.c: 185: f_loadingNewCan = 0;
  2646  002248  0E00               	movlw	0
  2647  00224A  0100               	movlb	0	; () banked
  2648  00224C  6FF0               	movwf	(_f_loadingNewCan+1)& (0+255),b
  2649  00224E  0E00               	movlw	0
  2650  002250  6FEF               	movwf	_f_loadingNewCan& (0+255),b
  2651  002252  0012               	return	
  2652  002254                     __end_of_getIR:
  2653                           	opt stack 0
  2654                           tblptru	equ	0xFF8
  2655                           tblptrh	equ	0xFF7
  2656                           tblptrl	equ	0xFF6
  2657                           tablat	equ	0xFF5
  2658                           prodh	equ	0xFF4
  2659                           prodl	equ	0xFF3
  2660                           postinc0	equ	0xFEE
  2661                           wreg	equ	0xFE8
  2662                           postdec1	equ	0xFE5
  2663                           fsr1l	equ	0xFE1
  2664                           indf2	equ	0xFDF
  2665                           postinc2	equ	0xFDE
  2666                           postdec2	equ	0xFDD
  2667                           fsr2h	equ	0xFDA
  2668                           fsr2l	equ	0xFD9
  2669                           status	equ	0xFD8
  2670                           
  2671 ;; *************** function _readIR *****************
  2672 ;; Defined at:
  2673 ;;		line 22 in file "ADCFunctionality.c"
  2674 ;; Parameters:    Size  Location     Type
  2675 ;;		None
  2676 ;; Auto vars:     Size  Location     Type
  2677 ;;  res             2    4[BANK0 ] int 
  2678 ;; Return value:  Size  Location     Type
  2679 ;;                  1    wreg      void 
  2680 ;; Registers used:
  2681 ;;		wreg, status,2, status,0, cstack
  2682 ;; Tracked objects:
  2683 ;;		On entry : 0/0
  2684 ;;		On exit  : 0/0
  2685 ;;		Unchanged: 0/0
  2686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2688 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2689 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2690 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2691 ;;Total ram usage:        4 bytes
  2692 ;; Hardware stack levels used:    1
  2693 ;; Hardware stack levels required when called:    8
  2694 ;; This function calls:
  2695 ;;		_readADC
  2696 ;; This function is called by:
  2697 ;;		_getIR
  2698 ;; This function uses a non-reentrant model
  2699 ;;
  2700                           
  2701                           	psect	text7
  2702  002316                     __ptext7:
  2703                           	opt stack 0
  2704  002316                     _readIR:
  2705                           	opt stack 19
  2706                           
  2707                           ;ADCFunctionality.c: 23: readADC(0);
  2708                           
  2709                           ; BSR set to: 0
  2710                           ;incstack = 0
  2711  002316  0E00               	movlw	0
  2712  002318  EC88  F014         	call	_readADC
  2713                           
  2714                           ;ADCFunctionality.c: 24: int res = ADRESH<<8 | ADRESL;
  2715  00231C  50C3               	movf	4035,w,c	;volatile
  2716  00231E  CFC4 F082          	movff	4036,??_readIR	;volatile
  2717  002322  0100               	movlb	0	; () banked
  2718  002324  6B83               	clrf	(??_readIR+1)& (0+255),b
  2719  002326  C082  F083         	movff	??_readIR,??_readIR+1
  2720  00232A  0100               	movlb	0	; () banked
  2721  00232C  6B82               	clrf	??_readIR& (0+255),b
  2722  00232E  0100               	movlb	0	; () banked
  2723  002330  1182               	iorwf	??_readIR& (0+255),w,b
  2724  002332  0100               	movlb	0	; () banked
  2725  002334  6F84               	movwf	readIR@res& (0+255),b
  2726  002336  0100               	movlb	0	; () banked
  2727  002338  5183               	movf	(??_readIR+1)& (0+255),w,b
  2728  00233A  0100               	movlb	0	; () banked
  2729  00233C  6F85               	movwf	(readIR@res+1)& (0+255),b
  2730                           
  2731                           ; BSR set to: 0
  2732                           ;ADCFunctionality.c: 25: IR_signal = (res < THIR) ? 1 : 0;
  2733  00233E  0100               	movlb	0	; () banked
  2734  002340  51F8               	movf	_THIR& (0+255),w,b
  2735  002342  0100               	movlb	0	; () banked
  2736  002344  5D84               	subwf	readIR@res& (0+255),w,b
  2737  002346  0100               	movlb	0	; () banked
  2738  002348  5185               	movf	(readIR@res+1)& (0+255),w,b
  2739  00234A  0A80               	xorlw	128
  2740  00234C  0100               	movlb	0	; () banked
  2741  00234E  6F82               	movwf	??_readIR& (0+255),b
  2742  002350  0100               	movlb	0	; () banked
  2743  002352  51F9               	movf	(_THIR+1)& (0+255),w,b
  2744  002354  0A80               	xorlw	128
  2745  002356  0100               	movlb	0	; () banked
  2746  002358  5982               	subwfb	??_readIR& (0+255),w,b
  2747  00235A  B0D8               	btfsc	status,0,c
  2748  00235C  D002               	goto	u2610
  2749  00235E  0E01               	movlw	1
  2750  002360  D001               	goto	u2620
  2751  002362                     u2610:
  2752  002362  0E00               	movlw	0
  2753  002364                     u2620:
  2754  002364  0100               	movlb	0	; () banked
  2755  002366  6FDB               	movwf	_IR_signal& (0+255),b
  2756  002368  6BDC               	clrf	(_IR_signal+1)& (0+255),b
  2757                           
  2758                           ; BSR set to: 0
  2759  00236A  0012               	return		;funcret
  2760  00236C                     __end_of_readIR:
  2761                           	opt stack 0
  2762                           tblptru	equ	0xFF8
  2763                           tblptrh	equ	0xFF7
  2764                           tblptrl	equ	0xFF6
  2765                           tablat	equ	0xFF5
  2766                           prodh	equ	0xFF4
  2767                           prodl	equ	0xFF3
  2768                           postinc0	equ	0xFEE
  2769                           wreg	equ	0xFE8
  2770                           postdec1	equ	0xFE5
  2771                           fsr1l	equ	0xFE1
  2772                           indf2	equ	0xFDF
  2773                           postinc2	equ	0xFDE
  2774                           postdec2	equ	0xFDD
  2775                           fsr2h	equ	0xFDA
  2776                           fsr2l	equ	0xFD9
  2777                           status	equ	0xFD8
  2778                           
  2779 ;; *************** function _ID *****************
  2780 ;; Defined at:
  2781 ;;		line 70 in file "sort.c"
  2782 ;; Parameters:    Size  Location     Type
  2783 ;;		None
  2784 ;; Auto vars:     Size  Location     Type
  2785 ;;  magnetic        2   12[BANK0 ] int 
  2786 ;;  side_conduct    2   10[BANK0 ] int 
  2787 ;;  top_bottom_c    2    8[BANK0 ] int 
  2788 ;; Return value:  Size  Location     Type
  2789 ;;                  1    wreg      void 
  2790 ;; Registers used:
  2791 ;;		wreg, status,2, status,0, cstack
  2792 ;; Tracked objects:
  2793 ;;		On entry : 0/0
  2794 ;;		On exit  : 0/0
  2795 ;;		Unchanged: 0/0
  2796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2798 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2799 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2800 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2801 ;;Total ram usage:        8 bytes
  2802 ;; Hardware stack levels used:    1
  2803 ;; Hardware stack levels required when called:    9
  2804 ;; This function calls:
  2805 ;;		_moveServoBlock
  2806 ;;		_readMAG
  2807 ;; This function is called by:
  2808 ;;		_sort
  2809 ;; This function uses a non-reentrant model
  2810 ;;
  2811                           
  2812                           	psect	text8
  2813  0019A0                     __ptext8:
  2814                           	opt stack 0
  2815  0019A0                     _ID:
  2816                           	opt stack 20
  2817                           
  2818                           ;sort.c: 71: if(f_can_coming_to_ID){
  2819                           
  2820                           ; BSR set to: 0
  2821                           ;incstack = 0
  2822  0019A0  0100               	movlb	0	; () banked
  2823  0019A2  51E9               	movf	_f_can_coming_to_ID& (0+255),w,b
  2824  0019A4  0100               	movlb	0	; () banked
  2825  0019A6  11EA               	iorwf	(_f_can_coming_to_ID+1)& (0+255),w,b
  2826  0019A8  B4D8               	btfsc	status,2,c
  2827  0019AA  0012               	return	
  2828                           
  2829                           ; BSR set to: 0
  2830                           ;sort.c: 73: _delay((unsigned long)((500)*(32000000/4000.0)));
  2831  0019AC  0E15               	movlw	21
  2832  0019AE  0100               	movlb	0	; () banked
  2833  0019B0  6F87               	movwf	(??_ID+1)& (0+255),b
  2834  0019B2  0E4B               	movlw	75
  2835  0019B4  0100               	movlb	0	; () banked
  2836  0019B6  6F86               	movwf	??_ID& (0+255),b
  2837  0019B8  0EBE               	movlw	190
  2838  0019BA                     u4727:
  2839  0019BA  2EE8               	decfsz	wreg,f,c
  2840  0019BC  D7FE               	bra	u4727
  2841  0019BE  2F86               	decfsz	??_ID& (0+255),f,b
  2842  0019C0  D7FC               	bra	u4727
  2843  0019C2  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  2844  0019C4  D7FA               	bra	u4727
  2845  0019C6  F000               	nop	
  2846                           
  2847                           ;sort.c: 75: int side_conductivity = 0;
  2848  0019C8  0E00               	movlw	0
  2849  0019CA  0100               	movlb	0	; () banked
  2850  0019CC  6F8B               	movwf	(ID@side_conductivity+1)& (0+255),b
  2851  0019CE  0E00               	movlw	0
  2852  0019D0  6F8A               	movwf	ID@side_conductivity& (0+255),b
  2853                           
  2854                           ; BSR set to: 0
  2855                           ;sort.c: 76: int magnetic = 0;
  2856  0019D2  0E00               	movlw	0
  2857  0019D4  0100               	movlb	0	; () banked
  2858  0019D6  6F8D               	movwf	(ID@magnetic+1)& (0+255),b
  2859  0019D8  0E00               	movlw	0
  2860  0019DA  6F8C               	movwf	ID@magnetic& (0+255),b
  2861                           
  2862                           ; BSR set to: 0
  2863                           ;sort.c: 77: int top_bottom_conductivity = 0;
  2864  0019DC  0E00               	movlw	0
  2865  0019DE  0100               	movlb	0	; () banked
  2866  0019E0  6F89               	movwf	(ID@top_bottom_conductivity+1)& (0+255),b
  2867  0019E2  0E00               	movlw	0
  2868  0019E4  6F88               	movwf	ID@top_bottom_conductivity& (0+255),b
  2869                           
  2870                           ; BSR set to: 0
  2871                           ;sort.c: 79: side_conductivity = PORTAbits.RA2;
  2872  0019E6  A480               	btfss	3968,2,c	;volatile
  2873  0019E8  D004               	goto	u3560
  2874  0019EA  0100               	movlb	0	; () banked
  2875  0019EC  6B86               	clrf	??_ID& (0+255),b
  2876  0019EE  2B86               	incf	??_ID& (0+255),f,b
  2877  0019F0  D002               	goto	u3568
  2878  0019F2                     u3560:
  2879  0019F2  0100               	movlb	0	; () banked
  2880  0019F4  6B86               	clrf	??_ID& (0+255),b
  2881  0019F6                     u3568:
  2882  0019F6  0100               	movlb	0	; () banked
  2883  0019F8  5186               	movf	??_ID& (0+255),w,b
  2884  0019FA  0100               	movlb	0	; () banked
  2885  0019FC  6F8A               	movwf	ID@side_conductivity& (0+255),b
  2886  0019FE  6B8B               	clrf	(ID@side_conductivity+1)& (0+255),b
  2887                           
  2888                           ; BSR set to: 0
  2889                           ;sort.c: 80: if(!side_conductivity){
  2890  001A00  0100               	movlb	0	; () banked
  2891  001A02  518A               	movf	ID@side_conductivity& (0+255),w,b
  2892  001A04  0100               	movlb	0	; () banked
  2893  001A06  118B               	iorwf	(ID@side_conductivity+1)& (0+255),w,b
  2894  001A08  A4D8               	btfss	status,2,c
  2895  001A0A  D028               	goto	l5238
  2896                           
  2897                           ; BSR set to: 0
  2898                           ;sort.c: 81: readMAG();
  2899  001A0C  ECB6  F011         	call	_readMAG	;wreg free
  2900                           
  2901                           ;sort.c: 82: magnetic = MAG_signal;
  2902  001A10  C0DD  F08C         	movff	_MAG_signal,ID@magnetic
  2903  001A14  C0DE  F08D         	movff	_MAG_signal+1,ID@magnetic+1
  2904                           
  2905                           ;sort.c: 83: if(!magnetic){
  2906  001A18  0100               	movlb	0	; () banked
  2907  001A1A  518C               	movf	ID@magnetic& (0+255),w,b
  2908  001A1C  0100               	movlb	0	; () banked
  2909  001A1E  118D               	iorwf	(ID@magnetic+1)& (0+255),w,b
  2910  001A20  A4D8               	btfss	status,2,c
  2911  001A22  D01C               	goto	l5238
  2912                           
  2913                           ; BSR set to: 0
  2914                           ;sort.c: 84: LATAbits.LATA3 = 1;
  2915  001A24  8689               	bsf	3977,3,c	;volatile
  2916                           
  2917                           ; BSR set to: 0
  2918                           ;sort.c: 86: _delay((unsigned long)((100)*(32000000/4000.0)));
  2919  001A26  0E05               	movlw	5
  2920  001A28  0100               	movlb	0	; () banked
  2921  001A2A  6F87               	movwf	(??_ID+1)& (0+255),b
  2922  001A2C  0E0F               	movlw	15
  2923  001A2E  0100               	movlb	0	; () banked
  2924  001A30  6F86               	movwf	??_ID& (0+255),b
  2925  001A32  0EF1               	movlw	241
  2926  001A34                     u4737:
  2927  001A34  2EE8               	decfsz	wreg,f,c
  2928  001A36  D7FE               	bra	u4737
  2929  001A38  2F86               	decfsz	??_ID& (0+255),f,b
  2930  001A3A  D7FC               	bra	u4737
  2931  001A3C  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  2932  001A3E  D7FA               	bra	u4737
  2933                           
  2934                           ;sort.c: 87: top_bottom_conductivity = PORTAbits.RA2;
  2935  001A40  A480               	btfss	3968,2,c	;volatile
  2936  001A42  D004               	goto	u3590
  2937  001A44  0100               	movlb	0	; () banked
  2938  001A46  6B86               	clrf	??_ID& (0+255),b
  2939  001A48  2B86               	incf	??_ID& (0+255),f,b
  2940  001A4A  D002               	goto	u3598
  2941  001A4C                     u3590:
  2942  001A4C  0100               	movlb	0	; () banked
  2943  001A4E  6B86               	clrf	??_ID& (0+255),b
  2944  001A50                     u3598:
  2945  001A50  0100               	movlb	0	; () banked
  2946  001A52  5186               	movf	??_ID& (0+255),w,b
  2947  001A54  0100               	movlb	0	; () banked
  2948  001A56  6F88               	movwf	ID@top_bottom_conductivity& (0+255),b
  2949  001A58  6B89               	clrf	(ID@top_bottom_conductivity+1)& (0+255),b
  2950                           
  2951                           ; BSR set to: 0
  2952                           ;sort.c: 88: LATAbits.LATA3 = 0;
  2953  001A5A  9689               	bcf	3977,3,c	;volatile
  2954  001A5C                     l5238:
  2955                           
  2956                           ; BSR set to: 0
  2957                           ;sort.c: 89: }
  2958                           ;sort.c: 90: }
  2959                           ;sort.c: 93: moveServoBlock(Lower);
  2960  001A5C  0E01               	movlw	1
  2961  001A5E  EC83  F012         	call	_moveServoBlock
  2962                           
  2963                           ;sort.c: 95: f_can_coming_to_distribution = 1;
  2964  001A62  0E00               	movlw	0
  2965  001A64  0100               	movlb	0	; () banked
  2966  001A66  6FEC               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  2967  001A68  0E01               	movlw	1
  2968  001A6A  6FEB               	movwf	_f_can_coming_to_distribution& (0+255),b
  2969                           
  2970                           ; BSR set to: 0
  2971                           ;sort.c: 96: moveServoBlock(Raise);
  2972  001A6C  0E00               	movlw	0
  2973  001A6E  EC83  F012         	call	_moveServoBlock
  2974                           
  2975                           ;sort.c: 97: f_can_coming_to_ID = 0;
  2976  001A72  0E00               	movlw	0
  2977  001A74  0100               	movlb	0	; () banked
  2978  001A76  6FEA               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  2979  001A78  0E00               	movlw	0
  2980  001A7A  6FE9               	movwf	_f_can_coming_to_ID& (0+255),b
  2981  001A7C  0012               	return	
  2982  001A7E                     __end_of_ID:
  2983                           	opt stack 0
  2984                           tblptru	equ	0xFF8
  2985                           tblptrh	equ	0xFF7
  2986                           tblptrl	equ	0xFF6
  2987                           tablat	equ	0xFF5
  2988                           prodh	equ	0xFF4
  2989                           prodl	equ	0xFF3
  2990                           postinc0	equ	0xFEE
  2991                           wreg	equ	0xFE8
  2992                           postdec1	equ	0xFE5
  2993                           fsr1l	equ	0xFE1
  2994                           indf2	equ	0xFDF
  2995                           postinc2	equ	0xFDE
  2996                           postdec2	equ	0xFDD
  2997                           fsr2h	equ	0xFDA
  2998                           fsr2l	equ	0xFD9
  2999                           status	equ	0xFD8
  3000                           
  3001 ;; *************** function _readMAG *****************
  3002 ;; Defined at:
  3003 ;;		line 28 in file "ADCFunctionality.c"
  3004 ;; Parameters:    Size  Location     Type
  3005 ;;		None
  3006 ;; Auto vars:     Size  Location     Type
  3007 ;;  res             2    4[BANK0 ] int 
  3008 ;; Return value:  Size  Location     Type
  3009 ;;                  1    wreg      void 
  3010 ;; Registers used:
  3011 ;;		wreg, status,2, status,0, cstack
  3012 ;; Tracked objects:
  3013 ;;		On entry : 0/0
  3014 ;;		On exit  : 0/0
  3015 ;;		Unchanged: 0/0
  3016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3018 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3019 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3020 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3021 ;;Total ram usage:        4 bytes
  3022 ;; Hardware stack levels used:    1
  3023 ;; Hardware stack levels required when called:    8
  3024 ;; This function calls:
  3025 ;;		_readADC
  3026 ;; This function is called by:
  3027 ;;		_ID
  3028 ;; This function uses a non-reentrant model
  3029 ;;
  3030                           
  3031                           	psect	text9
  3032  00236C                     __ptext9:
  3033                           	opt stack 0
  3034  00236C                     _readMAG:
  3035                           	opt stack 20
  3036                           
  3037                           ;ADCFunctionality.c: 29: readADC(1);
  3038                           
  3039                           ; BSR set to: 0
  3040                           ;incstack = 0
  3041  00236C  0E01               	movlw	1
  3042  00236E  EC88  F014         	call	_readADC
  3043                           
  3044                           ;ADCFunctionality.c: 30: int res = ADRESH<<8 | ADRESL;
  3045  002372  50C3               	movf	4035,w,c	;volatile
  3046  002374  CFC4 F082          	movff	4036,??_readMAG	;volatile
  3047  002378  0100               	movlb	0	; () banked
  3048  00237A  6B83               	clrf	(??_readMAG+1)& (0+255),b
  3049  00237C  C082  F083         	movff	??_readMAG,??_readMAG+1
  3050  002380  0100               	movlb	0	; () banked
  3051  002382  6B82               	clrf	??_readMAG& (0+255),b
  3052  002384  0100               	movlb	0	; () banked
  3053  002386  1182               	iorwf	??_readMAG& (0+255),w,b
  3054  002388  0100               	movlb	0	; () banked
  3055  00238A  6F84               	movwf	readMAG@res& (0+255),b
  3056  00238C  0100               	movlb	0	; () banked
  3057  00238E  5183               	movf	(??_readMAG+1)& (0+255),w,b
  3058  002390  0100               	movlb	0	; () banked
  3059  002392  6F85               	movwf	(readMAG@res+1)& (0+255),b
  3060                           
  3061                           ; BSR set to: 0
  3062                           ;ADCFunctionality.c: 31: MAG_signal = (res < THMAG) ? 1 : 0;
  3063  002394  0100               	movlb	0	; () banked
  3064  002396  51FA               	movf	_THMAG& (0+255),w,b
  3065  002398  0100               	movlb	0	; () banked
  3066  00239A  5D84               	subwf	readMAG@res& (0+255),w,b
  3067  00239C  0100               	movlb	0	; () banked
  3068  00239E  5185               	movf	(readMAG@res+1)& (0+255),w,b
  3069  0023A0  0A80               	xorlw	128
  3070  0023A2  0100               	movlb	0	; () banked
  3071  0023A4  6F82               	movwf	??_readMAG& (0+255),b
  3072  0023A6  0100               	movlb	0	; () banked
  3073  0023A8  51FB               	movf	(_THMAG+1)& (0+255),w,b
  3074  0023AA  0A80               	xorlw	128
  3075  0023AC  0100               	movlb	0	; () banked
  3076  0023AE  5982               	subwfb	??_readMAG& (0+255),w,b
  3077  0023B0  B0D8               	btfsc	status,0,c
  3078  0023B2  D002               	goto	u3240
  3079  0023B4  0E01               	movlw	1
  3080  0023B6  D001               	goto	u3250
  3081  0023B8                     u3240:
  3082  0023B8  0E00               	movlw	0
  3083  0023BA                     u3250:
  3084  0023BA  0100               	movlb	0	; () banked
  3085  0023BC  6FDD               	movwf	_MAG_signal& (0+255),b
  3086  0023BE  6BDE               	clrf	(_MAG_signal+1)& (0+255),b
  3087                           
  3088                           ; BSR set to: 0
  3089  0023C0  0012               	return		;funcret
  3090  0023C2                     __end_of_readMAG:
  3091                           	opt stack 0
  3092                           tblptru	equ	0xFF8
  3093                           tblptrh	equ	0xFF7
  3094                           tblptrl	equ	0xFF6
  3095                           tablat	equ	0xFF5
  3096                           prodh	equ	0xFF4
  3097                           prodl	equ	0xFF3
  3098                           postinc0	equ	0xFEE
  3099                           wreg	equ	0xFE8
  3100                           postdec1	equ	0xFE5
  3101                           fsr1l	equ	0xFE1
  3102                           indf2	equ	0xFDF
  3103                           postinc2	equ	0xFDE
  3104                           postdec2	equ	0xFDD
  3105                           fsr2h	equ	0xFDA
  3106                           fsr2l	equ	0xFD9
  3107                           status	equ	0xFD8
  3108                           
  3109 ;; *************** function _readADC *****************
  3110 ;; Defined at:
  3111 ;;		line 14 in file "ADCFunctionality.c"
  3112 ;; Parameters:    Size  Location     Type
  3113 ;;  channel         1    wreg     unsigned char 
  3114 ;; Auto vars:     Size  Location     Type
  3115 ;;  channel         1    1[BANK0 ] unsigned char 
  3116 ;; Return value:  Size  Location     Type
  3117 ;;                  1    wreg      void 
  3118 ;; Registers used:
  3119 ;;		wreg, status,2, status,0, cstack
  3120 ;; Tracked objects:
  3121 ;;		On entry : 0/0
  3122 ;;		On exit  : 0/0
  3123 ;;		Unchanged: 0/0
  3124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3126 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3127 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3128 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3129 ;;Total ram usage:        2 bytes
  3130 ;; Hardware stack levels used:    1
  3131 ;; Hardware stack levels required when called:    7
  3132 ;; This function calls:
  3133 ;;		Nothing
  3134 ;; This function is called by:
  3135 ;;		_readIR
  3136 ;;		_readMAG
  3137 ;; This function uses a non-reentrant model
  3138 ;;
  3139                           
  3140                           	psect	text10
  3141  002910                     __ptext10:
  3142                           	opt stack 0
  3143  002910                     _readADC:
  3144                           	opt stack 19
  3145                           
  3146                           ; BSR set to: 0
  3147                           ;incstack = 0
  3148                           ;readADC@channel stored from wreg
  3149  002910  0100               	movlb	0	; () banked
  3150  002912  6F81               	movwf	readADC@channel& (0+255),b
  3151                           
  3152                           ;ADCFunctionality.c: 16: ADCON0 = ((channel <<2));
  3153  002914  0100               	movlb	0	; () banked
  3154  002916  4581               	rlncf	readADC@channel& (0+255),w,b
  3155  002918  46E8               	rlncf	wreg,f,c
  3156  00291A  0BFC               	andlw	252
  3157  00291C  6EC2               	movwf	4034,c	;volatile
  3158                           
  3159                           ; BSR set to: 0
  3160                           ;ADCFunctionality.c: 17: ADON = 1;
  3161  00291E  80C2               	bsf	4034,0,c	;volatile
  3162                           
  3163                           ; BSR set to: 0
  3164                           ;ADCFunctionality.c: 18: ADCON0bits.GO = 1;
  3165  002920  82C2               	bsf	4034,1,c	;volatile
  3166                           
  3167                           ;ADCFunctionality.c: 19: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
  3168  002922  D009               	goto	l4178
  3169  002924                     l4176:
  3170  002924  0E34               	movlw	52
  3171  002926  0100               	movlb	0	; () banked
  3172  002928  6F80               	movwf	??_readADC& (0+255),b
  3173  00292A  0EF1               	movlw	241
  3174  00292C                     u4747:
  3175  00292C  2EE8               	decfsz	wreg,f,c
  3176  00292E  D7FE               	bra	u4747
  3177  002930  2F80               	decfsz	??_readADC& (0+255),f,b
  3178  002932  D7FC               	bra	u4747
  3179  002934  D000               	nop2	
  3180  002936                     l4178:
  3181  002936  A2C2               	btfss	4034,1,c	;volatile
  3182  002938  0012               	return	
  3183  00293A  D7F4               	goto	l4176
  3184  00293C                     __end_of_readADC:
  3185                           	opt stack 0
  3186                           tblptru	equ	0xFF8
  3187                           tblptrh	equ	0xFF7
  3188                           tblptrl	equ	0xFF6
  3189                           tablat	equ	0xFF5
  3190                           prodh	equ	0xFF4
  3191                           prodl	equ	0xFF3
  3192                           postinc0	equ	0xFEE
  3193                           wreg	equ	0xFE8
  3194                           postdec1	equ	0xFE5
  3195                           fsr1l	equ	0xFE1
  3196                           indf2	equ	0xFDF
  3197                           postinc2	equ	0xFDE
  3198                           postdec2	equ	0xFDD
  3199                           fsr2h	equ	0xFDA
  3200                           fsr2l	equ	0xFD9
  3201                           status	equ	0xFD8
  3202                           
  3203 ;; *************** function _moveServoBlock *****************
  3204 ;; Defined at:
  3205 ;;		line 189 in file "sort.c"
  3206 ;; Parameters:    Size  Location     Type
  3207 ;;  myPosition      1    wreg     enum E3138
  3208 ;; Auto vars:     Size  Location     Type
  3209 ;;  myPosition      1    0[BANK0 ] enum E3138
  3210 ;; Return value:  Size  Location     Type
  3211 ;;                  1    wreg      void 
  3212 ;; Registers used:
  3213 ;;		wreg, status,2, status,0
  3214 ;; Tracked objects:
  3215 ;;		On entry : 0/0
  3216 ;;		On exit  : 0/0
  3217 ;;		Unchanged: 0/0
  3218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3220 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3222 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3223 ;;Total ram usage:        1 bytes
  3224 ;; Hardware stack levels used:    1
  3225 ;; Hardware stack levels required when called:    7
  3226 ;; This function calls:
  3227 ;;		Nothing
  3228 ;; This function is called by:
  3229 ;;		_ID
  3230 ;; This function uses a non-reentrant model
  3231 ;;
  3232                           
  3233                           	psect	text11
  3234  002506                     __ptext11:
  3235                           	opt stack 0
  3236  002506                     _moveServoBlock:
  3237                           	opt stack 21
  3238                           
  3239                           ;incstack = 0
  3240                           ;moveServoBlock@myPosition stored from wreg
  3241  002506  0100               	movlb	0	; () banked
  3242  002508  6F80               	movwf	moveServoBlock@myPosition& (0+255),b
  3243                           
  3244                           ;sort.c: 191: switch(myPosition){
  3245  00250A  D011               	goto	l4902
  3246  00250C                     l4896:
  3247                           
  3248                           ;sort.c: 194: timer3highbits = 0b11111000;
  3249  00250C  0E00               	movlw	0
  3250  00250E  6E70               	movwf	_timer3highbits+1,c
  3251  002510  0EF8               	movlw	248
  3252  002512  6E6F               	movwf	_timer3highbits,c
  3253                           
  3254                           ;sort.c: 195: timer3lowbits = 0b00110000;
  3255  002514  0E00               	movlw	0
  3256  002516  6E72               	movwf	_timer3lowbits+1,c
  3257  002518  0E30               	movlw	48
  3258  00251A  D007               	goto	L1
  3259  00251C                     l4898:
  3260                           
  3261                           ;sort.c: 199: timer3highbits = 0b11111100;
  3262  00251C  0E00               	movlw	0
  3263  00251E  6E70               	movwf	_timer3highbits+1,c
  3264  002520  0EFC               	movlw	252
  3265  002522  6E6F               	movwf	_timer3highbits,c
  3266                           
  3267                           ;sort.c: 200: timer3lowbits = 0b00011000;
  3268  002524  0E00               	movlw	0
  3269  002526  6E72               	movwf	_timer3lowbits+1,c
  3270  002528  0E18               	movlw	24
  3271  00252A                     L1:
  3272  00252A  6E71               	movwf	_timer3lowbits,c
  3273                           
  3274                           ;sort.c: 204: }
  3275                           
  3276                           ;sort.c: 203: break;
  3277                           
  3278                           ;sort.c: 202: default:
  3279                           
  3280                           ;sort.c: 201: break;
  3281  00252C  D008               	goto	l4904
  3282  00252E                     l4902:
  3283  00252E  0100               	movlb	0	; () banked
  3284  002530  5180               	movf	moveServoBlock@myPosition& (0+255),w,b
  3285                           
  3286                           ; Switch size 1, requested type "space"
  3287                           ; Number of cases is 2, Range of values is 0 to 1
  3288                           ; switch strategies available:
  3289                           ; Name         Instructions Cycles
  3290                           ; simple_byte            7     4 (average)
  3291                           ;	Chosen strategy is simple_byte
  3292  002532  0A00               	xorlw	0	; case 0
  3293  002534  B4D8               	btfsc	status,2,c
  3294  002536  D7EA               	goto	l4896
  3295  002538  0A01               	xorlw	1	; case 1
  3296  00253A  B4D8               	btfsc	status,2,c
  3297  00253C  D7EF               	goto	l4898
  3298  00253E                     l4904:
  3299                           
  3300                           ;sort.c: 206: was_low = 0;
  3301  00253E  0E00               	movlw	0
  3302  002540  6E76               	movwf	_was_low+1,c
  3303  002542  0E00               	movlw	0
  3304  002544  6E75               	movwf	_was_low,c
  3305  002546  0012               	return		;funcret
  3306  002548                     __end_of_moveServoBlock:
  3307                           	opt stack 0
  3308                           tblptru	equ	0xFF8
  3309                           tblptrh	equ	0xFF7
  3310                           tblptrl	equ	0xFF6
  3311                           tablat	equ	0xFF5
  3312                           prodh	equ	0xFF4
  3313                           prodl	equ	0xFF3
  3314                           postinc0	equ	0xFEE
  3315                           wreg	equ	0xFE8
  3316                           postdec1	equ	0xFE5
  3317                           fsr1l	equ	0xFE1
  3318                           indf2	equ	0xFDF
  3319                           postinc2	equ	0xFDE
  3320                           postdec2	equ	0xFDD
  3321                           fsr2h	equ	0xFDA
  3322                           fsr2l	equ	0xFD9
  3323                           status	equ	0xFD8
  3324                           
  3325 ;; *************** function _Distribution *****************
  3326 ;; Defined at:
  3327 ;;		line 100 in file "sort.c"
  3328 ;; Parameters:    Size  Location     Type
  3329 ;;		None
  3330 ;; Auto vars:     Size  Location     Type
  3331 ;;		None
  3332 ;; Return value:  Size  Location     Type
  3333 ;;                  1    wreg      void 
  3334 ;; Registers used:
  3335 ;;		wreg, status,2, status,0, cstack
  3336 ;; Tracked objects:
  3337 ;;		On entry : 0/0
  3338 ;;		On exit  : 0/0
  3339 ;;		Unchanged: 0/0
  3340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3342 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3344 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3345 ;;Total ram usage:        0 bytes
  3346 ;; Hardware stack levels used:    1
  3347 ;; Hardware stack levels required when called:    8
  3348 ;; This function calls:
  3349 ;;		_moveServoCup
  3350 ;; This function is called by:
  3351 ;;		_sort
  3352 ;; This function uses a non-reentrant model
  3353 ;;
  3354                           
  3355                           	psect	text12
  3356  002886                     __ptext12:
  3357                           	opt stack 0
  3358  002886                     _Distribution:
  3359                           	opt stack 21
  3360                           
  3361                           ;sort.c: 101: if(f_can_coming_to_distribution){
  3362                           
  3363                           ;incstack = 0
  3364  002886  0100               	movlb	0	; () banked
  3365  002888  51EB               	movf	_f_can_coming_to_distribution& (0+255),w,b
  3366  00288A  0100               	movlb	0	; () banked
  3367  00288C  11EC               	iorwf	(_f_can_coming_to_distribution+1)& (0+255),w,b
  3368  00288E  B4D8               	btfsc	status,2,c
  3369  002890  0012               	return	
  3370                           
  3371                           ; BSR set to: 0
  3372                           ;sort.c: 103: moveServoCup(canType);
  3373  002892  5078               	movf	_canType,w,c
  3374  002894  ECF3  F00E         	call	_moveServoCup
  3375                           
  3376                           ;sort.c: 105: moveServoCup(Home);
  3377  002898  0E00               	movlw	0
  3378  00289A  ECF3  F00E         	call	_moveServoCup
  3379                           
  3380                           ;sort.c: 106: f_can_coming_to_distribution = 0;
  3381  00289E  0E00               	movlw	0
  3382  0028A0  0100               	movlb	0	; () banked
  3383  0028A2  6FEC               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  3384  0028A4  0E00               	movlw	0
  3385  0028A6  6FEB               	movwf	_f_can_coming_to_distribution& (0+255),b
  3386                           
  3387                           ; BSR set to: 0
  3388                           ;sort.c: 107: f_can_distributed = 1;
  3389  0028A8  0E00               	movlw	0
  3390  0028AA  0101               	movlb	1	; () banked
  3391  0028AC  6F0F               	movwf	(_f_can_distributed+1)& (0+255),b
  3392  0028AE  0E01               	movlw	1
  3393  0028B0  6F0E               	movwf	_f_can_distributed& (0+255),b
  3394  0028B2  0012               	return	
  3395  0028B4                     __end_of_Distribution:
  3396                           	opt stack 0
  3397                           tblptru	equ	0xFF8
  3398                           tblptrh	equ	0xFF7
  3399                           tblptrl	equ	0xFF6
  3400                           tablat	equ	0xFF5
  3401                           prodh	equ	0xFF4
  3402                           prodl	equ	0xFF3
  3403                           postinc0	equ	0xFEE
  3404                           wreg	equ	0xFE8
  3405                           postdec1	equ	0xFE5
  3406                           fsr1l	equ	0xFE1
  3407                           indf2	equ	0xFDF
  3408                           postinc2	equ	0xFDE
  3409                           postdec2	equ	0xFDD
  3410                           fsr2h	equ	0xFDA
  3411                           fsr2l	equ	0xFD9
  3412                           status	equ	0xFD8
  3413                           
  3414 ;; *************** function _moveServoCup *****************
  3415 ;; Defined at:
  3416 ;;		line 208 in file "sort.c"
  3417 ;; Parameters:    Size  Location     Type
  3418 ;;  myPosition      1    wreg     enum E3131
  3419 ;; Auto vars:     Size  Location     Type
  3420 ;;  myPosition      1    0[BANK0 ] enum E3131
  3421 ;; Return value:  Size  Location     Type
  3422 ;;                  1    wreg      void 
  3423 ;; Registers used:
  3424 ;;		wreg, status,2, status,0
  3425 ;; Tracked objects:
  3426 ;;		On entry : 0/0
  3427 ;;		On exit  : 0/0
  3428 ;;		Unchanged: 0/0
  3429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3431 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3433 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3434 ;;Total ram usage:        1 bytes
  3435 ;; Hardware stack levels used:    1
  3436 ;; Hardware stack levels required when called:    7
  3437 ;; This function calls:
  3438 ;;		Nothing
  3439 ;; This function is called by:
  3440 ;;		_Loading
  3441 ;;		_Distribution
  3442 ;; This function uses a non-reentrant model
  3443 ;;
  3444                           
  3445                           	psect	text13
  3446  001DE6                     __ptext13:
  3447                           	opt stack 0
  3448  001DE6                     _moveServoCup:
  3449                           	opt stack 21
  3450                           
  3451                           ;incstack = 0
  3452                           ;moveServoCup@myPosition stored from wreg
  3453  001DE6  0100               	movlb	0	; () banked
  3454  001DE8  6F80               	movwf	moveServoCup@myPosition& (0+255),b
  3455                           
  3456                           ;sort.c: 210: T1CON = 0b10110000;
  3457  001DEA  0EB0               	movlw	176
  3458  001DEC  6ECD               	movwf	4045,c	;volatile
  3459                           
  3460                           ;sort.c: 211: switch(myPosition){
  3461  001DEE  D029               	goto	l4868
  3462  001DF0                     l4856:
  3463                           
  3464                           ;sort.c: 214: timer1highbits = 0b11111010;
  3465  001DF0  0E00               	movlw	0
  3466  001DF2  6E6C               	movwf	_timer1highbits+1,c
  3467  001DF4  0EFA               	movlw	250
  3468  001DF6  6E6B               	movwf	_timer1highbits,c
  3469                           
  3470                           ;sort.c: 215: timer1lowbits = 0b00100100;
  3471  001DF8  0E00               	movlw	0
  3472  001DFA  6E6E               	movwf	_timer1lowbits+1,c
  3473  001DFC  0E24               	movlw	36
  3474  001DFE  D01F               	goto	L5
  3475  001E00                     l4858:
  3476                           
  3477                           ;sort.c: 219: timer1highbits = 0b11111100;
  3478  001E00  0E00               	movlw	0
  3479  001E02  6E6C               	movwf	_timer1highbits+1,c
  3480  001E04  0EFC               	movlw	252
  3481  001E06  6E6B               	movwf	_timer1highbits,c
  3482                           
  3483                           ;sort.c: 220: timer1lowbits = 0b00011000;
  3484  001E08  0E00               	movlw	0
  3485  001E0A  6E6E               	movwf	_timer1lowbits+1,c
  3486  001E0C  0E18               	movlw	24
  3487  001E0E  D017               	goto	L5
  3488  001E10                     l4860:
  3489                           
  3490                           ;sort.c: 224: timer1highbits = 0b11111010;
  3491  001E10  0E00               	movlw	0
  3492  001E12  6E6C               	movwf	_timer1highbits+1,c
  3493  001E14  0EFA               	movlw	250
  3494  001E16  6E6B               	movwf	_timer1highbits,c
  3495                           
  3496                           ;sort.c: 225: timer1lowbits = 0b11001011;
  3497  001E18  0E00               	movlw	0
  3498  001E1A  6E6E               	movwf	_timer1lowbits+1,c
  3499  001E1C  0ECB               	movlw	203
  3500  001E1E  D00F               	goto	L5
  3501  001E20                     l4862:
  3502                           
  3503                           ;sort.c: 229: timer1highbits = 0b11111001;
  3504  001E20  0E00               	movlw	0
  3505  001E22  6E6C               	movwf	_timer1highbits+1,c
  3506  001E24  0EF9               	movlw	249
  3507  001E26  6E6B               	movwf	_timer1highbits,c
  3508                           
  3509                           ;sort.c: 230: timer1lowbits = 0b01111101;
  3510  001E28  0E00               	movlw	0
  3511  001E2A  6E6E               	movwf	_timer1lowbits+1,c
  3512  001E2C  0E7D               	movlw	125
  3513  001E2E  D007               	goto	L5
  3514  001E30                     l4864:
  3515                           
  3516                           ;sort.c: 234: timer1highbits = 0b11111000;
  3517  001E30  0E00               	movlw	0
  3518  001E32  6E6C               	movwf	_timer1highbits+1,c
  3519  001E34  0EF8               	movlw	248
  3520  001E36  6E6B               	movwf	_timer1highbits,c
  3521                           
  3522                           ;sort.c: 235: timer1lowbits = 0b00110000;
  3523  001E38  0E00               	movlw	0
  3524  001E3A  6E6E               	movwf	_timer1lowbits+1,c
  3525  001E3C  0E30               	movlw	48
  3526  001E3E                     L5:
  3527  001E3E  6E6D               	movwf	_timer1lowbits,c
  3528                           
  3529                           ;sort.c: 239: }
  3530                           
  3531                           ;sort.c: 238: break;
  3532                           
  3533                           ;sort.c: 237: default:
  3534                           
  3535                           ;sort.c: 236: break;
  3536  001E40  D011               	goto	l1285
  3537  001E42                     l4868:
  3538  001E42  0100               	movlb	0	; () banked
  3539  001E44  5180               	movf	moveServoCup@myPosition& (0+255),w,b
  3540                           
  3541                           ; Switch size 1, requested type "space"
  3542                           ; Number of cases is 5, Range of values is 0 to 4
  3543                           ; switch strategies available:
  3544                           ; Name         Instructions Cycles
  3545                           ; simple_byte           16     9 (average)
  3546                           ;	Chosen strategy is simple_byte
  3547  001E46  0A00               	xorlw	0	; case 0
  3548  001E48  B4D8               	btfsc	status,2,c
  3549  001E4A  D7D2               	goto	l4856
  3550  001E4C  0A01               	xorlw	1	; case 1
  3551  001E4E  B4D8               	btfsc	status,2,c
  3552  001E50  D7D7               	goto	l4858
  3553  001E52  0A03               	xorlw	3	; case 2
  3554  001E54  B4D8               	btfsc	status,2,c
  3555  001E56  D7DC               	goto	l4860
  3556  001E58  0A01               	xorlw	1	; case 3
  3557  001E5A  B4D8               	btfsc	status,2,c
  3558  001E5C  D7E1               	goto	l4862
  3559  001E5E  0A07               	xorlw	7	; case 4
  3560  001E60  B4D8               	btfsc	status,2,c
  3561  001E62  D7E6               	goto	l4864
  3562  001E64                     l1285:
  3563                           
  3564                           ;sort.c: 241: TMR1H = timer1highbits;
  3565  001E64  C06B  FFCF         	movff	_timer1highbits,4047	;volatile
  3566                           
  3567                           ;sort.c: 242: TMR1L = timer1lowbits;
  3568  001E68  C06D  FFCE         	movff	_timer1lowbits,4046	;volatile
  3569                           
  3570                           ;sort.c: 243: TMR1ON = 1;
  3571  001E6C  80CD               	bsf	4045,0,c	;volatile
  3572                           
  3573                           ;sort.c: 244: was_low = 0;
  3574  001E6E  0E00               	movlw	0
  3575  001E70  6E76               	movwf	_was_low+1,c
  3576  001E72  0E00               	movlw	0
  3577  001E74  6E75               	movwf	_was_low,c
  3578  001E76  0012               	return		;funcret
  3579  001E78                     __end_of_moveServoCup:
  3580                           	opt stack 0
  3581                           tblptru	equ	0xFF8
  3582                           tblptrh	equ	0xFF7
  3583                           tblptrl	equ	0xFF6
  3584                           tablat	equ	0xFF5
  3585                           prodh	equ	0xFF4
  3586                           prodl	equ	0xFF3
  3587                           postinc0	equ	0xFEE
  3588                           wreg	equ	0xFE8
  3589                           postdec1	equ	0xFE5
  3590                           fsr1l	equ	0xFE1
  3591                           indf2	equ	0xFDF
  3592                           postinc2	equ	0xFDE
  3593                           postdec2	equ	0xFDD
  3594                           fsr2h	equ	0xFDA
  3595                           fsr2l	equ	0xFD9
  3596                           status	equ	0xFD8
  3597                           
  3598 ;; *************** function _machineConfig *****************
  3599 ;; Defined at:
  3600 ;;		line 14 in file "MachineConfig.c"
  3601 ;; Parameters:    Size  Location     Type
  3602 ;;		None
  3603 ;; Auto vars:     Size  Location     Type
  3604 ;;		None
  3605 ;; Return value:  Size  Location     Type
  3606 ;;                  1    wreg      void 
  3607 ;; Registers used:
  3608 ;;		wreg, status,2
  3609 ;; Tracked objects:
  3610 ;;		On entry : 0/0
  3611 ;;		On exit  : 0/0
  3612 ;;		Unchanged: 0/0
  3613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3617 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3618 ;;Total ram usage:        0 bytes
  3619 ;; Hardware stack levels used:    1
  3620 ;; Hardware stack levels required when called:    7
  3621 ;; This function calls:
  3622 ;;		Nothing
  3623 ;; This function is called by:
  3624 ;;		_main
  3625 ;; This function uses a non-reentrant model
  3626 ;;
  3627                           
  3628                           	psect	text14
  3629  0023C2                     __ptext14:
  3630                           	opt stack 0
  3631  0023C2                     _machineConfig:
  3632                           	opt stack 23
  3633                           
  3634                           ;MachineConfig.c: 16: OSCCON = 0b11110000;
  3635                           
  3636                           ;incstack = 0
  3637  0023C2  0EF0               	movlw	240
  3638  0023C4  6ED3               	movwf	4051,c	;volatile
  3639                           
  3640                           ;MachineConfig.c: 17: OSCTUNEbits.PLLEN = 1;
  3641  0023C6  8C9B               	bsf	3995,6,c	;volatile
  3642                           
  3643                           ;MachineConfig.c: 21: TRISA = 0b01000111;
  3644  0023C8  0E47               	movlw	71
  3645  0023CA  6E92               	movwf	3986,c	;volatile
  3646                           
  3647                           ;MachineConfig.c: 23: TRISB = 0b11110010;
  3648  0023CC  0EF2               	movlw	242
  3649  0023CE  6E93               	movwf	3987,c	;volatile
  3650                           
  3651                           ;MachineConfig.c: 26: TRISC = 0x00;
  3652  0023D0  0E00               	movlw	0
  3653  0023D2  6E94               	movwf	3988,c	;volatile
  3654                           
  3655                           ;MachineConfig.c: 30: TRISD = 0x00;
  3656  0023D4  0E00               	movlw	0
  3657  0023D6  6E95               	movwf	3989,c	;volatile
  3658                           
  3659                           ;MachineConfig.c: 33: TRISE = 0x00;
  3660  0023D8  0E00               	movlw	0
  3661  0023DA  6E96               	movwf	3990,c	;volatile
  3662                           
  3663                           ;MachineConfig.c: 36: LATA = 0x00;
  3664  0023DC  0E00               	movlw	0
  3665  0023DE  6E89               	movwf	3977,c	;volatile
  3666                           
  3667                           ;MachineConfig.c: 37: LATB = 0x00;
  3668  0023E0  0E00               	movlw	0
  3669  0023E2  6E8A               	movwf	3978,c	;volatile
  3670                           
  3671                           ;MachineConfig.c: 38: LATC = 0x00;
  3672  0023E4  0E00               	movlw	0
  3673  0023E6  6E8B               	movwf	3979,c	;volatile
  3674                           
  3675                           ;MachineConfig.c: 39: LATD = 0x00;
  3676  0023E8  0E00               	movlw	0
  3677  0023EA  6E8C               	movwf	3980,c	;volatile
  3678                           
  3679                           ;MachineConfig.c: 40: LATE = 0x00;
  3680  0023EC  0E00               	movlw	0
  3681  0023EE  6E8D               	movwf	3981,c	;volatile
  3682                           
  3683                           ;MachineConfig.c: 43: ADCON0 = 0x00;
  3684  0023F0  0E00               	movlw	0
  3685  0023F2  6EC2               	movwf	4034,c	;volatile
  3686                           
  3687                           ;MachineConfig.c: 44: ADCON1 = 0x0D;
  3688  0023F4  0E0D               	movlw	13
  3689  0023F6  6EC1               	movwf	4033,c	;volatile
  3690                           
  3691                           ;MachineConfig.c: 47: VCFG1 = 0;
  3692  0023F8  9AC1               	bcf	4033,5,c	;volatile
  3693                           
  3694                           ;MachineConfig.c: 48: VCFG0 = 0;
  3695  0023FA  98C1               	bcf	4033,4,c	;volatile
  3696                           
  3697                           ;MachineConfig.c: 49: CVRCON = 0x00;
  3698  0023FC  0E00               	movlw	0
  3699  0023FE  6EB5               	movwf	4021,c	;volatile
  3700                           
  3701                           ;MachineConfig.c: 50: CMCONbits.CIS = 0;
  3702  002400  96B4               	bcf	4020,3,c	;volatile
  3703                           
  3704                           ;MachineConfig.c: 51: ADFM = 1;
  3705  002402  8EC0               	bsf	4032,7,c	;volatile
  3706                           
  3707                           ;MachineConfig.c: 52: nRBPU = 0;
  3708  002404  9EF1               	bcf	intcon2,7,c	;volatile
  3709                           
  3710                           ;MachineConfig.c: 55: INT1IE = 1;
  3711  002406  86F0               	bsf	intcon3,3,c	;volatile
  3712                           
  3713                           ;MachineConfig.c: 57: TMR0IE = 1;
  3714  002408  8AF2               	bsf	intcon,5,c	;volatile
  3715                           
  3716                           ;MachineConfig.c: 58: TMR1IE = 1;
  3717  00240A  809D               	bsf	3997,0,c	;volatile
  3718                           
  3719                           ;MachineConfig.c: 59: TMR2IE = 1;
  3720  00240C  829D               	bsf	3997,1,c	;volatile
  3721                           
  3722                           ;MachineConfig.c: 60: TMR3IE = 1;
  3723  00240E  82A0               	bsf	4000,1,c	;volatile
  3724                           
  3725                           ;MachineConfig.c: 61: PEIE = 1;
  3726  002410  8CF2               	bsf	intcon,6,c	;volatile
  3727                           
  3728                           ;MachineConfig.c: 63: ADIE = 1;
  3729  002412  8C9D               	bsf	3997,6,c	;volatile
  3730                           
  3731                           ;MachineConfig.c: 64: (INTCONbits.GIE = 0);
  3732  002414  9EF2               	bcf	intcon,7,c	;volatile
  3733  002416  0012               	return		;funcret
  3734  002418                     __end_of_machineConfig:
  3735                           	opt stack 0
  3736                           tblptru	equ	0xFF8
  3737                           tblptrh	equ	0xFF7
  3738                           tblptrl	equ	0xFF6
  3739                           tablat	equ	0xFF5
  3740                           prodh	equ	0xFF4
  3741                           prodl	equ	0xFF3
  3742                           intcon	equ	0xFF2
  3743                           intcon2	equ	0xFF1
  3744                           intcon3	equ	0xFF0
  3745                           postinc0	equ	0xFEE
  3746                           wreg	equ	0xFE8
  3747                           postdec1	equ	0xFE5
  3748                           fsr1l	equ	0xFE1
  3749                           indf2	equ	0xFDF
  3750                           postinc2	equ	0xFDE
  3751                           postdec2	equ	0xFDD
  3752                           fsr2h	equ	0xFDA
  3753                           fsr2l	equ	0xFD9
  3754                           status	equ	0xFD8
  3755                           
  3756 ;; *************** function _initUI *****************
  3757 ;; Defined at:
  3758 ;;		line 61 in file "UI.c"
  3759 ;; Parameters:    Size  Location     Type
  3760 ;;		None
  3761 ;; Auto vars:     Size  Location     Type
  3762 ;;		None
  3763 ;; Return value:  Size  Location     Type
  3764 ;;                  1    wreg      void 
  3765 ;; Registers used:
  3766 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3767 ;; Tracked objects:
  3768 ;;		On entry : 0/0
  3769 ;;		On exit  : 0/0
  3770 ;;		Unchanged: 0/0
  3771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3775 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3776 ;;Total ram usage:        0 bytes
  3777 ;; Hardware stack levels used:    1
  3778 ;; Hardware stack levels required when called:   12
  3779 ;; This function calls:
  3780 ;;		_change_state_to_menu_start
  3781 ;;		_loadRTC
  3782 ;; This function is called by:
  3783 ;;		_main
  3784 ;; This function uses a non-reentrant model
  3785 ;;
  3786                           
  3787                           	psect	text15
  3788  002A68                     __ptext15:
  3789                           	opt stack 0
  3790  002A68                     _initUI:
  3791                           	opt stack 18
  3792                           
  3793                           ;UI.c: 62: (INTCONbits.GIE = 1);
  3794                           
  3795                           ;incstack = 0
  3796  002A68  8EF2               	bsf	intcon,7,c	;volatile
  3797                           
  3798                           ;UI.c: 63: machine_state = UI_state;
  3799  002A6A  0E00               	movlw	0
  3800  002A6C  0100               	movlb	0	; () banked
  3801  002A6E  6FF7               	movwf	_machine_state& (0+255),b
  3802                           
  3803                           ; BSR set to: 0
  3804                           ;UI.c: 65: loadRTC();
  3805  002A70  EC83  F00F         	call	_loadRTC	;wreg free
  3806                           
  3807                           ;UI.c: 67: change_state_to_menu_start();
  3808  002A74  EC9E  F014         	call	_change_state_to_menu_start	;wreg free
  3809                           
  3810                           ;UI.c: 68: firstboot = 1;
  3811  002A78  0E00               	movlw	0
  3812  002A7A  6E6A               	movwf	_firstboot+1,c
  3813  002A7C  0E01               	movlw	1
  3814  002A7E  6E69               	movwf	_firstboot,c
  3815  002A80  0012               	return		;funcret
  3816  002A82                     __end_of_initUI:
  3817                           	opt stack 0
  3818                           tblptru	equ	0xFF8
  3819                           tblptrh	equ	0xFF7
  3820                           tblptrl	equ	0xFF6
  3821                           tablat	equ	0xFF5
  3822                           prodh	equ	0xFF4
  3823                           prodl	equ	0xFF3
  3824                           intcon	equ	0xFF2
  3825                           intcon2	equ	0xFF1
  3826                           intcon3	equ	0xFF0
  3827                           postinc0	equ	0xFEE
  3828                           wreg	equ	0xFE8
  3829                           postdec1	equ	0xFE5
  3830                           fsr1l	equ	0xFE1
  3831                           indf2	equ	0xFDF
  3832                           postinc2	equ	0xFDE
  3833                           postdec2	equ	0xFDD
  3834                           fsr2h	equ	0xFDA
  3835                           fsr2l	equ	0xFD9
  3836                           status	equ	0xFD8
  3837                           
  3838 ;; *************** function _loadRTC *****************
  3839 ;; Defined at:
  3840 ;;		line 27 in file "RTC.c"
  3841 ;; Parameters:    Size  Location     Type
  3842 ;;		None
  3843 ;; Auto vars:     Size  Location     Type
  3844 ;;  i               2   22[BANK0 ] int 
  3845 ;; Return value:  Size  Location     Type
  3846 ;;                  1    wreg      void 
  3847 ;; Registers used:
  3848 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3849 ;; Tracked objects:
  3850 ;;		On entry : 0/0
  3851 ;;		On exit  : 0/0
  3852 ;;		Unchanged: 0/0
  3853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3855 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3856 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3857 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3858 ;;Total ram usage:        3 bytes
  3859 ;; Hardware stack levels used:    1
  3860 ;; Hardware stack levels required when called:    9
  3861 ;; This function calls:
  3862 ;;		_I2C_Master_Init
  3863 ;;		_I2C_Master_Start
  3864 ;;		_I2C_Master_Stop
  3865 ;;		_I2C_Master_Write
  3866 ;; This function is called by:
  3867 ;;		_initUI
  3868 ;; This function uses a non-reentrant model
  3869 ;;
  3870                           
  3871                           	psect	text16
  3872  001F06                     __ptext16:
  3873                           	opt stack 0
  3874  001F06                     _loadRTC:
  3875                           	opt stack 20
  3876                           
  3877                           ;RTC.c: 29: I2C_Master_Init(10000);
  3878                           
  3879                           ;incstack = 0
  3880  001F06  0E10               	movlw	16
  3881  001F08  0100               	movlb	0	; () banked
  3882  001F0A  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  3883  001F0C  0E27               	movlw	39
  3884  001F0E  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  3885  001F10  0E00               	movlw	0
  3886  001F12  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  3887  001F14  0E00               	movlw	0
  3888  001F16  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  3889  001F18  EC5B  F011         	call	_I2C_Master_Init	;wreg free
  3890                           
  3891                           ;RTC.c: 31: (INTCONbits.GIE = 0);
  3892  001F1C  9EF2               	bcf	intcon,7,c	;volatile
  3893                           
  3894                           ;RTC.c: 33: I2C_Master_Start();
  3895  001F1E  ECA0  F015         	call	_I2C_Master_Start	;wreg free
  3896                           
  3897                           ;RTC.c: 34: I2C_Master_Write(0b11010000);
  3898  001F22  0E00               	movlw	0
  3899  001F24  0100               	movlb	0	; () banked
  3900  001F26  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3901  001F28  0ED0               	movlw	208
  3902  001F2A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3903  001F2C  EC8E  F015         	call	_I2C_Master_Write	;wreg free
  3904                           
  3905                           ;RTC.c: 35: I2C_Master_Write(0x00);
  3906  001F30  0E00               	movlw	0
  3907  001F32  0100               	movlb	0	; () banked
  3908  001F34  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3909  001F36  0E00               	movlw	0
  3910  001F38  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3911  001F3A  EC8E  F015         	call	_I2C_Master_Write	;wreg free
  3912                           
  3913                           ;RTC.c: 36: for(int i = 0; i<7; i++){
  3914  001F3E  0E00               	movlw	0
  3915  001F40  0100               	movlb	0	; () banked
  3916  001F42  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  3917  001F44  0E00               	movlw	0
  3918  001F46  6F96               	movwf	loadRTC@i& (0+255),b
  3919  001F48                     l4984:
  3920                           
  3921                           ; BSR set to: 0
  3922  001F48  0100               	movlb	0	; () banked
  3923  001F4A  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  3924  001F4C  D008               	goto	l4988
  3925  001F4E  0100               	movlb	0	; () banked
  3926  001F50  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  3927  001F52  E11B               	bnz	l4994
  3928  001F54  0E07               	movlw	7
  3929  001F56  0100               	movlb	0	; () banked
  3930  001F58  5D96               	subwf	loadRTC@i& (0+255),w,b
  3931  001F5A  B0D8               	btfsc	status,0,c
  3932  001F5C  D016               	goto	l4994
  3933  001F5E                     l4988:
  3934                           
  3935                           ; BSR set to: 0
  3936                           ;RTC.c: 37: I2C_Master_Write(time[i]);
  3937  001F5E  0ED4               	movlw	low _time
  3938  001F60  0100               	movlb	0	; () banked
  3939  001F62  2596               	addwf	loadRTC@i& (0+255),w,b
  3940  001F64  6ED9               	movwf	fsr2l,c
  3941  001F66  0E00               	movlw	high _time
  3942  001F68  0100               	movlb	0	; () banked
  3943  001F6A  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  3944  001F6C  6EDA               	movwf	fsr2h,c
  3945  001F6E  50DF               	movf	indf2,w,c
  3946  001F70  0100               	movlb	0	; () banked
  3947  001F72  6F95               	movwf	??_loadRTC& (0+255),b
  3948  001F74  0100               	movlb	0	; () banked
  3949  001F76  5195               	movf	??_loadRTC& (0+255),w,b
  3950  001F78  0100               	movlb	0	; () banked
  3951  001F7A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3952  001F7C  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  3953  001F7E  EC8E  F015         	call	_I2C_Master_Write	;wreg free
  3954  001F82  0100               	movlb	0	; () banked
  3955  001F84  4B96               	infsnz	loadRTC@i& (0+255),f,b
  3956  001F86  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  3957  001F88  D7DF               	goto	l4984
  3958  001F8A                     l4994:
  3959                           
  3960                           ; BSR set to: 0
  3961                           ;RTC.c: 38: }
  3962                           ;RTC.c: 39: I2C_Master_Stop();
  3963  001F8A  EC9C  F015         	call	_I2C_Master_Stop	;wreg free
  3964                           
  3965                           ;RTC.c: 40: (INTCONbits.GIE = 1);
  3966  001F8E  8EF2               	bsf	intcon,7,c	;volatile
  3967  001F90  0012               	return		;funcret
  3968  001F92                     __end_of_loadRTC:
  3969                           	opt stack 0
  3970                           tblptru	equ	0xFF8
  3971                           tblptrh	equ	0xFF7
  3972                           tblptrl	equ	0xFF6
  3973                           tablat	equ	0xFF5
  3974                           prodh	equ	0xFF4
  3975                           prodl	equ	0xFF3
  3976                           intcon	equ	0xFF2
  3977                           intcon2	equ	0xFF1
  3978                           intcon3	equ	0xFF0
  3979                           postinc0	equ	0xFEE
  3980                           wreg	equ	0xFE8
  3981                           postdec1	equ	0xFE5
  3982                           fsr1l	equ	0xFE1
  3983                           indf2	equ	0xFDF
  3984                           postinc2	equ	0xFDE
  3985                           postdec2	equ	0xFDD
  3986                           fsr2h	equ	0xFDA
  3987                           fsr2l	equ	0xFD9
  3988                           status	equ	0xFD8
  3989                           
  3990 ;; *************** function _I2C_Master_Init *****************
  3991 ;; Defined at:
  3992 ;;		line 14 in file "I2C.c"
  3993 ;; Parameters:    Size  Location     Type
  3994 ;;  c               4   13[BANK0 ] const unsigned long 
  3995 ;; Auto vars:     Size  Location     Type
  3996 ;;		None
  3997 ;; Return value:  Size  Location     Type
  3998 ;;                  1    wreg      void 
  3999 ;; Registers used:
  4000 ;;		wreg, status,2, status,0, cstack
  4001 ;; Tracked objects:
  4002 ;;		On entry : 0/0
  4003 ;;		On exit  : 0/0
  4004 ;;		Unchanged: 0/0
  4005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4006 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4007 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4008 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4009 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4010 ;;Total ram usage:        8 bytes
  4011 ;; Hardware stack levels used:    1
  4012 ;; Hardware stack levels required when called:    8
  4013 ;; This function calls:
  4014 ;;		___lldiv
  4015 ;; This function is called by:
  4016 ;;		_loadRTC
  4017 ;; This function uses a non-reentrant model
  4018 ;;
  4019                           
  4020                           	psect	text17
  4021  0022B6                     __ptext17:
  4022                           	opt stack 0
  4023  0022B6                     _I2C_Master_Init:
  4024                           	opt stack 20
  4025                           
  4026                           ;I2C.c: 17: SSPSTAT = 0b00000000;
  4027                           
  4028                           ;incstack = 0
  4029  0022B6  0E00               	movlw	0
  4030  0022B8  6EC7               	movwf	4039,c	;volatile
  4031                           
  4032                           ;I2C.c: 18: SSPCON1 = 0b00101000;
  4033  0022BA  0E28               	movlw	40
  4034  0022BC  6EC6               	movwf	4038,c	;volatile
  4035                           
  4036                           ;I2C.c: 19: SSPCON2 = 0b00000000;
  4037  0022BE  0E00               	movlw	0
  4038  0022C0  6EC5               	movwf	4037,c	;volatile
  4039                           
  4040                           ;I2C.c: 20: SSPADD = (32000000/(4*c))-1;
  4041  0022C2  0E00               	movlw	0
  4042  0022C4  0100               	movlb	0	; () banked
  4043  0022C6  6F80               	movwf	___lldiv@dividend& (0+255),b
  4044  0022C8  0E48               	movlw	72
  4045  0022CA  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  4046  0022CC  0EE8               	movlw	232
  4047  0022CE  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  4048  0022D0  0E01               	movlw	1
  4049  0022D2  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  4050  0022D4  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  4051  0022D8  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  4052  0022DC  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  4053  0022E0  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  4054  0022E4  0E02               	movlw	2
  4055  0022E6                     u3265:
  4056  0022E6  90D8               	bcf	status,0,c
  4057  0022E8  0100               	movlb	0	; () banked
  4058  0022EA  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  4059  0022EC  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  4060  0022EE  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  4061  0022F0  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  4062  0022F2  2EE8               	decfsz	wreg,f,c
  4063  0022F4  D7F8               	goto	u3265
  4064  0022F6  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  4065  0022FA  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  4066  0022FE  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  4067  002302  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  4068  002306  EC9E  F00D         	call	___lldiv	;wreg free
  4069  00230A  0100               	movlb	0	; () banked
  4070  00230C  0580               	decf	?___lldiv& (0+255),w,b
  4071  00230E  6EC8               	movwf	4040,c	;volatile
  4072                           
  4073                           ; BSR set to: 0
  4074                           ;I2C.c: 21: TRISC3 = 1;
  4075  002310  8694               	bsf	3988,3,c	;volatile
  4076                           
  4077                           ; BSR set to: 0
  4078                           ;I2C.c: 22: TRISC4 = 1;
  4079  002312  8894               	bsf	3988,4,c	;volatile
  4080                           
  4081                           ; BSR set to: 0
  4082  002314  0012               	return		;funcret
  4083  002316                     __end_of_I2C_Master_Init:
  4084                           	opt stack 0
  4085                           tblptru	equ	0xFF8
  4086                           tblptrh	equ	0xFF7
  4087                           tblptrl	equ	0xFF6
  4088                           tablat	equ	0xFF5
  4089                           prodh	equ	0xFF4
  4090                           prodl	equ	0xFF3
  4091                           intcon	equ	0xFF2
  4092                           intcon2	equ	0xFF1
  4093                           intcon3	equ	0xFF0
  4094                           postinc0	equ	0xFEE
  4095                           wreg	equ	0xFE8
  4096                           postdec1	equ	0xFE5
  4097                           fsr1l	equ	0xFE1
  4098                           indf2	equ	0xFDF
  4099                           postinc2	equ	0xFDE
  4100                           postdec2	equ	0xFDD
  4101                           fsr2h	equ	0xFDA
  4102                           fsr2l	equ	0xFD9
  4103                           status	equ	0xFD8
  4104                           
  4105 ;; *************** function ___lldiv *****************
  4106 ;; Defined at:
  4107 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  4108 ;; Parameters:    Size  Location     Type
  4109 ;;  dividend        4    0[BANK0 ] unsigned long 
  4110 ;;  divisor         4    4[BANK0 ] unsigned long 
  4111 ;; Auto vars:     Size  Location     Type
  4112 ;;  quotient        4    8[BANK0 ] unsigned long 
  4113 ;;  counter         1   12[BANK0 ] unsigned char 
  4114 ;; Return value:  Size  Location     Type
  4115 ;;                  4    0[BANK0 ] unsigned long 
  4116 ;; Registers used:
  4117 ;;		wreg, status,2, status,0
  4118 ;; Tracked objects:
  4119 ;;		On entry : 0/0
  4120 ;;		On exit  : 0/0
  4121 ;;		Unchanged: 0/0
  4122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4123 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4124 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4126 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4127 ;;Total ram usage:       13 bytes
  4128 ;; Hardware stack levels used:    1
  4129 ;; Hardware stack levels required when called:    7
  4130 ;; This function calls:
  4131 ;;		Nothing
  4132 ;; This function is called by:
  4133 ;;		_I2C_Master_Init
  4134 ;; This function uses a non-reentrant model
  4135 ;;
  4136                           
  4137                           	psect	text18
  4138  001B3C                     __ptext18:
  4139                           	opt stack 0
  4140  001B3C                     ___lldiv:
  4141                           	opt stack 20
  4142                           
  4143                           ; BSR set to: 0
  4144                           ;incstack = 0
  4145  001B3C  0E00               	movlw	0
  4146  001B3E  0100               	movlb	0	; () banked
  4147  001B40  6F88               	movwf	___lldiv@quotient& (0+255),b
  4148  001B42  0E00               	movlw	0
  4149  001B44  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  4150  001B46  0E00               	movlw	0
  4151  001B48  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  4152  001B4A  0E00               	movlw	0
  4153  001B4C  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  4154                           
  4155                           ; BSR set to: 0
  4156  001B4E  0100               	movlb	0	; () banked
  4157  001B50  5184               	movf	___lldiv@divisor& (0+255),w,b
  4158  001B52  0100               	movlb	0	; () banked
  4159  001B54  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  4160  001B56  0100               	movlb	0	; () banked
  4161  001B58  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  4162  001B5A  0100               	movlb	0	; () banked
  4163  001B5C  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  4164  001B5E  B4D8               	btfsc	status,2,c
  4165  001B60  D042               	goto	l1830
  4166                           
  4167                           ; BSR set to: 0
  4168  001B62  0E01               	movlw	1
  4169  001B64  0100               	movlb	0	; () banked
  4170  001B66  6F8C               	movwf	___lldiv@counter& (0+255),b
  4171  001B68  D008               	goto	l4520
  4172  001B6A                     l4518:
  4173                           
  4174                           ; BSR set to: 0
  4175  001B6A  0100               	movlb	0	; () banked
  4176  001B6C  90D8               	bcf	status,0,c
  4177  001B6E  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  4178  001B70  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  4179  001B72  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  4180  001B74  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  4181  001B76  0100               	movlb	0	; () banked
  4182  001B78  2B8C               	incf	___lldiv@counter& (0+255),f,b
  4183  001B7A                     l4520:
  4184                           
  4185                           ; BSR set to: 0
  4186  001B7A  0100               	movlb	0	; () banked
  4187  001B7C  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  4188  001B7E  D7F5               	goto	l4518
  4189  001B80                     l4522:
  4190                           
  4191                           ; BSR set to: 0
  4192  001B80  0100               	movlb	0	; () banked
  4193  001B82  90D8               	bcf	status,0,c
  4194  001B84  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  4195  001B86  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  4196  001B88  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  4197  001B8A  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  4198                           
  4199                           ; BSR set to: 0
  4200  001B8C  0100               	movlb	0	; () banked
  4201  001B8E  5184               	movf	___lldiv@divisor& (0+255),w,b
  4202  001B90  0100               	movlb	0	; () banked
  4203  001B92  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  4204  001B94  0100               	movlb	0	; () banked
  4205  001B96  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  4206  001B98  0100               	movlb	0	; () banked
  4207  001B9A  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  4208  001B9C  0100               	movlb	0	; () banked
  4209  001B9E  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  4210  001BA0  0100               	movlb	0	; () banked
  4211  001BA2  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  4212  001BA4  0100               	movlb	0	; () banked
  4213  001BA6  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  4214  001BA8  0100               	movlb	0	; () banked
  4215  001BAA  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  4216  001BAC  A0D8               	btfss	status,0,c
  4217  001BAE  D012               	goto	l4530
  4218                           
  4219                           ; BSR set to: 0
  4220  001BB0  0100               	movlb	0	; () banked
  4221  001BB2  5184               	movf	___lldiv@divisor& (0+255),w,b
  4222  001BB4  0100               	movlb	0	; () banked
  4223  001BB6  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  4224  001BB8  0100               	movlb	0	; () banked
  4225  001BBA  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  4226  001BBC  0100               	movlb	0	; () banked
  4227  001BBE  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  4228  001BC0  0100               	movlb	0	; () banked
  4229  001BC2  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  4230  001BC4  0100               	movlb	0	; () banked
  4231  001BC6  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  4232  001BC8  0100               	movlb	0	; () banked
  4233  001BCA  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  4234  001BCC  0100               	movlb	0	; () banked
  4235  001BCE  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  4236                           
  4237                           ; BSR set to: 0
  4238  001BD0  0100               	movlb	0	; () banked
  4239  001BD2  8188               	bsf	___lldiv@quotient& (0+255),0,b
  4240  001BD4                     l4530:
  4241                           
  4242                           ; BSR set to: 0
  4243  001BD4  0100               	movlb	0	; () banked
  4244  001BD6  90D8               	bcf	status,0,c
  4245  001BD8  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  4246  001BDA  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  4247  001BDC  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  4248  001BDE  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  4249                           
  4250                           ; BSR set to: 0
  4251  001BE0  0100               	movlb	0	; () banked
  4252  001BE2  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  4253  001BE4  D7CD               	goto	l4522
  4254  001BE6                     l1830:
  4255                           
  4256                           ; BSR set to: 0
  4257  001BE6  C088  F080         	movff	___lldiv@quotient,?___lldiv
  4258  001BEA  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  4259  001BEE  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  4260  001BF2  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  4261                           
  4262                           ; BSR set to: 0
  4263  001BF6  0012               	return		;funcret
  4264  001BF8                     __end_of___lldiv:
  4265                           	opt stack 0
  4266                           tblptru	equ	0xFF8
  4267                           tblptrh	equ	0xFF7
  4268                           tblptrl	equ	0xFF6
  4269                           tablat	equ	0xFF5
  4270                           prodh	equ	0xFF4
  4271                           prodl	equ	0xFF3
  4272                           intcon	equ	0xFF2
  4273                           intcon2	equ	0xFF1
  4274                           intcon3	equ	0xFF0
  4275                           postinc0	equ	0xFEE
  4276                           wreg	equ	0xFE8
  4277                           postdec1	equ	0xFE5
  4278                           fsr1l	equ	0xFE1
  4279                           indf2	equ	0xFDF
  4280                           postinc2	equ	0xFDE
  4281                           postdec2	equ	0xFDD
  4282                           fsr2h	equ	0xFDA
  4283                           fsr2l	equ	0xFD9
  4284                           status	equ	0xFD8
  4285                           
  4286 ;; *************** function _change_state_to_menu_start *****************
  4287 ;; Defined at:
  4288 ;;		line 416 in file "UI.c"
  4289 ;; Parameters:    Size  Location     Type
  4290 ;;		None
  4291 ;; Auto vars:     Size  Location     Type
  4292 ;;		None
  4293 ;; Return value:  Size  Location     Type
  4294 ;;                  1    wreg      void 
  4295 ;; Registers used:
  4296 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4297 ;; Tracked objects:
  4298 ;;		On entry : 0/0
  4299 ;;		On exit  : 0/0
  4300 ;;		Unchanged: 0/0
  4301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4305 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4306 ;;Total ram usage:        0 bytes
  4307 ;; Hardware stack levels used:    1
  4308 ;; Hardware stack levels required when called:   11
  4309 ;; This function calls:
  4310 ;;		_lcdInst
  4311 ;;		_printRTC
  4312 ;;		_printf
  4313 ;; This function is called by:
  4314 ;;		_initUI
  4315 ;; This function uses a non-reentrant model
  4316 ;;
  4317                           
  4318                           	psect	text19
  4319  00293C                     __ptext19:
  4320                           	opt stack 0
  4321  00293C                     _change_state_to_menu_start:
  4322                           	opt stack 18
  4323                           
  4324                           ;UI.c: 417: cur_state = 0;
  4325                           
  4326                           ; BSR set to: 0
  4327                           ;incstack = 0
  4328  00293C  0E00               	movlw	0
  4329  00293E  0100               	movlb	0	; () banked
  4330  002940  6FE8               	movwf	(_cur_state+1)& (0+255),b
  4331  002942  0E00               	movlw	0
  4332  002944  6FE7               	movwf	_cur_state& (0+255),b
  4333                           
  4334                           ; BSR set to: 0
  4335                           ;UI.c: 419: lcdInst(0b10000000);;
  4336  002946  0E80               	movlw	128
  4337  002948  EC7A  F015         	call	_lcdInst
  4338                           
  4339                           ;UI.c: 420: printRTC();
  4340  00294C  EC63  F006         	call	_printRTC	;wreg free
  4341                           
  4342                           ;UI.c: 421: lcdInst(0b11000000);;
  4343  002950  0EC0               	movlw	192
  4344  002952  EC7A  F015         	call	_lcdInst
  4345                           
  4346                           ;UI.c: 422: printf("PUSH TO CONTINUE");
  4347  002956  0E97               	movlw	low STR_15
  4348  002958  0100               	movlb	0	; () banked
  4349  00295A  6F8E               	movwf	printf@f& (0+255),b
  4350  00295C  0EFF               	movlw	high STR_15
  4351  00295E  0100               	movlb	0	; () banked
  4352  002960  6F8F               	movwf	(printf@f+1)& (0+255),b
  4353  002962  ECBB  F002         	call	_printf	;wreg free
  4354  002966  0012               	return		;funcret
  4355  002968                     __end_of_change_state_to_menu_start:
  4356                           	opt stack 0
  4357                           tblptru	equ	0xFF8
  4358                           tblptrh	equ	0xFF7
  4359                           tblptrl	equ	0xFF6
  4360                           tablat	equ	0xFF5
  4361                           prodh	equ	0xFF4
  4362                           prodl	equ	0xFF3
  4363                           intcon	equ	0xFF2
  4364                           intcon2	equ	0xFF1
  4365                           intcon3	equ	0xFF0
  4366                           postinc0	equ	0xFEE
  4367                           wreg	equ	0xFE8
  4368                           postdec1	equ	0xFE5
  4369                           fsr1l	equ	0xFE1
  4370                           indf2	equ	0xFDF
  4371                           postinc2	equ	0xFDE
  4372                           postdec2	equ	0xFDD
  4373                           fsr2h	equ	0xFDA
  4374                           fsr2l	equ	0xFD9
  4375                           status	equ	0xFD8
  4376                           
  4377 ;; *************** function _initTime *****************
  4378 ;; Defined at:
  4379 ;;		line 16 in file "RTC.c"
  4380 ;; Parameters:    Size  Location     Type
  4381 ;;  s               1    wreg     unsigned char 
  4382 ;;  m               1    0[BANK0 ] unsigned char 
  4383 ;;  h               1    1[BANK0 ] unsigned char 
  4384 ;;  w               1    2[BANK0 ] unsigned char 
  4385 ;;  DD              1    3[BANK0 ] unsigned char 
  4386 ;;  MM              1    4[BANK0 ] unsigned char 
  4387 ;;  YY              1    5[BANK0 ] unsigned char 
  4388 ;; Auto vars:     Size  Location     Type
  4389 ;;  s               1    6[BANK0 ] unsigned char 
  4390 ;; Return value:  Size  Location     Type
  4391 ;;                  1    wreg      void 
  4392 ;; Registers used:
  4393 ;;		wreg
  4394 ;; Tracked objects:
  4395 ;;		On entry : 0/0
  4396 ;;		On exit  : 0/0
  4397 ;;		Unchanged: 0/0
  4398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4399 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4400 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4402 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4403 ;;Total ram usage:        7 bytes
  4404 ;; Hardware stack levels used:    1
  4405 ;; Hardware stack levels required when called:    7
  4406 ;; This function calls:
  4407 ;;		Nothing
  4408 ;; This function is called by:
  4409 ;;		_main
  4410 ;; This function uses a non-reentrant model
  4411 ;;
  4412                           
  4413                           	psect	text20
  4414  002A28                     __ptext20:
  4415                           	opt stack 0
  4416  002A28                     _initTime:
  4417                           	opt stack 23
  4418                           
  4419                           ;incstack = 0
  4420                           ;initTime@s stored from wreg
  4421  002A28  0100               	movlb	0	; () banked
  4422  002A2A  6F86               	movwf	initTime@s& (0+255),b
  4423                           
  4424                           ;RTC.c: 18: time[0] = s;
  4425  002A2C  C086  F0D4         	movff	initTime@s,_time
  4426                           
  4427                           ;RTC.c: 19: time[1] = m;
  4428  002A30  C080  F0D5         	movff	initTime@m,_time+1
  4429                           
  4430                           ;RTC.c: 20: time[2] = h;
  4431  002A34  C081  F0D6         	movff	initTime@h,_time+2
  4432                           
  4433                           ;RTC.c: 21: time[3] = w;
  4434  002A38  C082  F0D7         	movff	initTime@w,_time+3
  4435                           
  4436                           ;RTC.c: 22: time[4] = DD;
  4437  002A3C  C083  F0D8         	movff	initTime@DD,_time+4
  4438                           
  4439                           ;RTC.c: 23: time[5] = MM;
  4440  002A40  C084  F0D9         	movff	initTime@MM,_time+5
  4441                           
  4442                           ;RTC.c: 24: time[6] = YY;
  4443  002A44  C085  F0DA         	movff	initTime@YY,_time+6
  4444  002A48  0012               	return		;funcret
  4445  002A4A                     __end_of_initTime:
  4446                           	opt stack 0
  4447                           tblptru	equ	0xFF8
  4448                           tblptrh	equ	0xFF7
  4449                           tblptrl	equ	0xFF6
  4450                           tablat	equ	0xFF5
  4451                           prodh	equ	0xFF4
  4452                           prodl	equ	0xFF3
  4453                           intcon	equ	0xFF2
  4454                           intcon2	equ	0xFF1
  4455                           intcon3	equ	0xFF0
  4456                           postinc0	equ	0xFEE
  4457                           wreg	equ	0xFE8
  4458                           postdec1	equ	0xFE5
  4459                           fsr1l	equ	0xFE1
  4460                           indf2	equ	0xFDF
  4461                           postinc2	equ	0xFDE
  4462                           postdec2	equ	0xFDD
  4463                           fsr2h	equ	0xFDA
  4464                           fsr2l	equ	0xFD9
  4465                           status	equ	0xFD8
  4466                           
  4467 ;; *************** function _initLCD *****************
  4468 ;; Defined at:
  4469 ;;		line 47 in file "lcd.c"
  4470 ;; Parameters:    Size  Location     Type
  4471 ;;		None
  4472 ;; Auto vars:     Size  Location     Type
  4473 ;;		None
  4474 ;; Return value:  Size  Location     Type
  4475 ;;                  1    wreg      void 
  4476 ;; Registers used:
  4477 ;;		wreg, status,2, status,0, cstack
  4478 ;; Tracked objects:
  4479 ;;		On entry : 0/0
  4480 ;;		On exit  : 0/0
  4481 ;;		Unchanged: 0/0
  4482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4485 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4486 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4487 ;;Total ram usage:        1 bytes
  4488 ;; Hardware stack levels used:    1
  4489 ;; Hardware stack levels required when called:    9
  4490 ;; This function calls:
  4491 ;;		_lcdInst
  4492 ;; This function is called by:
  4493 ;;		_main
  4494 ;; This function uses a non-reentrant model
  4495 ;;
  4496                           
  4497                           	psect	text21
  4498  0024C0                     __ptext21:
  4499                           	opt stack 0
  4500  0024C0                     _initLCD:
  4501                           	opt stack 21
  4502                           
  4503                           ;lcd.c: 48: _delay((unsigned long)((15)*(32000000/4000.0)));
  4504                           
  4505                           ;incstack = 0
  4506  0024C0  0E9C               	movlw	156
  4507  0024C2  0100               	movlb	0	; () banked
  4508  0024C4  6F83               	movwf	??_initLCD& (0+255),b
  4509  0024C6  0ED7               	movlw	215
  4510  0024C8                     u4757:
  4511  0024C8  2EE8               	decfsz	wreg,f,c
  4512  0024CA  D7FE               	bra	u4757
  4513  0024CC  2F83               	decfsz	??_initLCD& (0+255),f,b
  4514  0024CE  D7FC               	bra	u4757
  4515                           
  4516                           ;lcd.c: 49: lcdInst(0b00110011);
  4517  0024D0  0E33               	movlw	51
  4518  0024D2  EC7A  F015         	call	_lcdInst
  4519                           
  4520                           ;lcd.c: 50: lcdInst(0b00110010);
  4521  0024D6  0E32               	movlw	50
  4522  0024D8  EC7A  F015         	call	_lcdInst
  4523                           
  4524                           ;lcd.c: 52: lcdInst(0b00101000);
  4525  0024DC  0E28               	movlw	40
  4526  0024DE  EC7A  F015         	call	_lcdInst
  4527                           
  4528                           ;lcd.c: 53: lcdInst(0b00001100);
  4529  0024E2  0E0C               	movlw	12
  4530  0024E4  EC7A  F015         	call	_lcdInst
  4531                           
  4532                           ;lcd.c: 54: lcdInst(0b00000110);
  4533  0024E8  0E06               	movlw	6
  4534  0024EA  EC7A  F015         	call	_lcdInst
  4535                           
  4536                           ;lcd.c: 55: lcdInst(0b00000001);
  4537  0024EE  0E01               	movlw	1
  4538  0024F0  EC7A  F015         	call	_lcdInst
  4539                           
  4540                           ;lcd.c: 56: _delay((unsigned long)((15)*(32000000/4000.0)));
  4541  0024F4  0E9C               	movlw	156
  4542  0024F6  0100               	movlb	0	; () banked
  4543  0024F8  6F83               	movwf	??_initLCD& (0+255),b
  4544  0024FA  0ED7               	movlw	215
  4545  0024FC                     u4767:
  4546  0024FC  2EE8               	decfsz	wreg,f,c
  4547  0024FE  D7FE               	bra	u4767
  4548  002500  2F83               	decfsz	??_initLCD& (0+255),f,b
  4549  002502  D7FC               	bra	u4767
  4550  002504  0012               	return		;funcret
  4551  002506                     __end_of_initLCD:
  4552                           	opt stack 0
  4553                           tblptru	equ	0xFF8
  4554                           tblptrh	equ	0xFF7
  4555                           tblptrl	equ	0xFF6
  4556                           tablat	equ	0xFF5
  4557                           prodh	equ	0xFF4
  4558                           prodl	equ	0xFF3
  4559                           intcon	equ	0xFF2
  4560                           intcon2	equ	0xFF1
  4561                           intcon3	equ	0xFF0
  4562                           postinc0	equ	0xFEE
  4563                           wreg	equ	0xFE8
  4564                           postdec1	equ	0xFE5
  4565                           fsr1l	equ	0xFE1
  4566                           indf2	equ	0xFDF
  4567                           postinc2	equ	0xFDE
  4568                           postdec2	equ	0xFDD
  4569                           fsr2h	equ	0xFDA
  4570                           fsr2l	equ	0xFD9
  4571                           status	equ	0xFD8
  4572                           
  4573 ;; *************** function _UI *****************
  4574 ;; Defined at:
  4575 ;;		line 72 in file "UI.c"
  4576 ;; Parameters:    Size  Location     Type
  4577 ;;		None
  4578 ;; Auto vars:     Size  Location     Type
  4579 ;;  i               1   83[BANK0 ] unsigned char 
  4580 ;;  i               1   82[BANK0 ] unsigned char 
  4581 ;;  i               1   81[BANK0 ] unsigned char 
  4582 ;;  i               1   80[BANK0 ] unsigned char 
  4583 ;;  i               1   79[BANK0 ] unsigned char 
  4584 ;;  i               1   78[BANK0 ] unsigned char 
  4585 ;;  i               1   77[BANK0 ] unsigned char 
  4586 ;;  i               1   76[BANK0 ] unsigned char 
  4587 ;;  i               1   75[BANK0 ] unsigned char 
  4588 ;;  i               1   74[BANK0 ] unsigned char 
  4589 ;;  i               1   73[BANK0 ] unsigned char 
  4590 ;;  i               1   72[BANK0 ] unsigned char 
  4591 ;;  i               1   71[BANK0 ] unsigned char 
  4592 ;; Return value:  Size  Location     Type
  4593 ;;                  1    wreg      void 
  4594 ;; Registers used:
  4595 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4596 ;; Tracked objects:
  4597 ;;		On entry : 0/0
  4598 ;;		On exit  : 0/0
  4599 ;;		Unchanged: 0/0
  4600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4602 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4603 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4604 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4605 ;;Total ram usage:       16 bytes
  4606 ;; Hardware stack levels used:    1
  4607 ;; Hardware stack levels required when called:   11
  4608 ;; This function calls:
  4609 ;;		___awdiv
  4610 ;;		___awmod
  4611 ;;		_change_state_to_menu_12
  4612 ;;		_change_state_to_menu_22
  4613 ;;		_lcdInst
  4614 ;;		_printRTC
  4615 ;;		_printf
  4616 ;; This function is called by:
  4617 ;;		_main
  4618 ;; This function uses a non-reentrant model
  4619 ;;
  4620                           
  4621                           	psect	text22
  4622  000012                     __ptext22:
  4623                           	opt stack 0
  4624  000012                     _UI:
  4625                           	opt stack 19
  4626                           
  4627                           ;UI.c: 73: if(machine_state == DoneSorting_state){
  4628                           
  4629                           ;incstack = 0
  4630  000012  0E02               	movlw	2
  4631  000014  0100               	movlb	0	; () banked
  4632  000016  19F7               	xorwf	_machine_state& (0+255),w,b
  4633  000018  A4D8               	btfss	status,2,c
  4634  00001A  D071               	goto	l5380
  4635                           
  4636                           ; BSR set to: 0
  4637                           ;UI.c: 74: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4638  00001C  0E01               	movlw	1
  4639  00001E  EC7A  F015         	call	_lcdInst
  4640  000022  0E68               	movlw	104
  4641  000024  0100               	movlb	0	; () banked
  4642  000026  6FC4               	movwf	??_UI& (0+255),b
  4643  000028  0EE4               	movlw	228
  4644  00002A                     u4777:
  4645  00002A  2EE8               	decfsz	wreg,f,c
  4646  00002C  D7FE               	bra	u4777
  4647  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  4648  000030  D7FC               	bra	u4777
  4649  000032  F000               	nop	
  4650                           
  4651                           ;UI.c: 75: lcdInst(0b10000000);;
  4652  000034  0E80               	movlw	128
  4653  000036  EC7A  F015         	call	_lcdInst
  4654                           
  4655                           ;UI.c: 76: printf("!SORT CONCLUDED!");
  4656  00003A  0EBA               	movlw	low STR_1
  4657  00003C  0100               	movlb	0	; () banked
  4658  00003E  6F8E               	movwf	printf@f& (0+255),b
  4659  000040  0EFE               	movlw	high STR_1
  4660  000042  0100               	movlb	0	; () banked
  4661  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  4662  000046  ECBB  F002         	call	_printf	;wreg free
  4663                           
  4664                           ;UI.c: 77: lcdInst(0b11000000);;
  4665  00004A  0EC0               	movlw	192
  4666  00004C  EC7A  F015         	call	_lcdInst
  4667                           
  4668                           ;UI.c: 78: printf("Time: %02d:%02d:%02d", 0, (total_time % 3600) / 60, (total_time % 360
      +                          0) % 60);
  4669  000050  0E0E               	movlw	14
  4670  000052  0100               	movlb	0	; () banked
  4671  000054  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  4672  000056  0E10               	movlw	16
  4673  000058  6F82               	movwf	___awmod@divisor& (0+255),b
  4674  00005A  C0F5  F080         	movff	_total_time,___awmod@dividend
  4675  00005E  C0F6  F081         	movff	_total_time+1,___awmod@dividend+1
  4676  000062  ECA2  F00E         	call	___awmod	;wreg free
  4677  000066  C080  F0C5         	movff	?___awmod,_UI$2164
  4678  00006A  C081  F0C6         	movff	?___awmod+1,_UI$2164+1
  4679                           
  4680                           ;UI.c: 78: printf("Time: %02d:%02d:%02d", 0, (total_time % 3600) / 60, (total_time % 360
      +                          0) % 60);
  4681  00006E  0EE8               	movlw	low STR_2
  4682  000070  0100               	movlb	0	; () banked
  4683  000072  6F8E               	movwf	printf@f& (0+255),b
  4684  000074  0EFD               	movlw	high STR_2
  4685  000076  0100               	movlb	0	; () banked
  4686  000078  6F8F               	movwf	(printf@f+1)& (0+255),b
  4687  00007A  0E00               	movlw	0
  4688  00007C  0100               	movlb	0	; () banked
  4689  00007E  6F91               	movwf	(?_printf+3)& (0+255),b
  4690  000080  0E00               	movlw	0
  4691  000082  6F90               	movwf	(?_printf+2)& (0+255),b
  4692  000084  0E0E               	movlw	14
  4693  000086  0100               	movlb	0	; () banked
  4694  000088  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  4695  00008A  0E10               	movlw	16
  4696  00008C  6F82               	movwf	___awmod@divisor& (0+255),b
  4697  00008E  C0F5  F080         	movff	_total_time,___awmod@dividend
  4698  000092  C0F6  F081         	movff	_total_time+1,___awmod@dividend+1
  4699  000096  ECA2  F00E         	call	___awmod	;wreg free
  4700  00009A  C080  F086         	movff	?___awmod,___awdiv@dividend
  4701  00009E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  4702  0000A2  0E00               	movlw	0
  4703  0000A4  0100               	movlb	0	; () banked
  4704  0000A6  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  4705  0000A8  0E3C               	movlw	60
  4706  0000AA  6F88               	movwf	___awdiv@divisor& (0+255),b
  4707  0000AC  EC3F  F00D         	call	___awdiv	;wreg free
  4708  0000B0  C086  F092         	movff	?___awdiv,?_printf+4
  4709  0000B4  C087  F093         	movff	?___awdiv+1,?_printf+5
  4710  0000B8  C0C5  F080         	movff	_UI$2164,___awmod@dividend
  4711  0000BC  C0C6  F081         	movff	_UI$2164+1,___awmod@dividend+1
  4712  0000C0  0E00               	movlw	0
  4713  0000C2  0100               	movlb	0	; () banked
  4714  0000C4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  4715  0000C6  0E3C               	movlw	60
  4716  0000C8  6F82               	movwf	___awmod@divisor& (0+255),b
  4717  0000CA  ECA2  F00E         	call	___awmod	;wreg free
  4718  0000CE  C080  F094         	movff	?___awmod,?_printf+6
  4719  0000D2  C081  F095         	movff	?___awmod+1,?_printf+7
  4720  0000D6  ECBB  F002         	call	_printf	;wreg free
  4721                           
  4722                           ;UI.c: 79: machine_state = UI_state;
  4723  0000DA  0E00               	movlw	0
  4724  0000DC  0100               	movlb	0	; () banked
  4725  0000DE  6FF7               	movwf	_machine_state& (0+255),b
  4726  0000E0                     l430:
  4727  0000E0  A281               	btfss	3969,1,c	;volatile
  4728  0000E2  D7FE               	goto	l430
  4729                           
  4730                           ;UI.c: 82: }
  4731                           ;UI.c: 83: if(cur_state==12){
  4732  0000E4  0E0C               	movlw	12
  4733  0000E6  0100               	movlb	0	; () banked
  4734  0000E8  19E7               	xorwf	_cur_state& (0+255),w,b
  4735  0000EA  0100               	movlb	0	; () banked
  4736  0000EC  11E8               	iorwf	(_cur_state+1)& (0+255),w,b
  4737  0000EE  A4D8               	btfss	status,2,c
  4738  0000F0  D003               	goto	l5378
  4739                           
  4740                           ; BSR set to: 0
  4741                           ;UI.c: 84: change_state_to_menu_12();
  4742  0000F2  EC00  F013         	call	_change_state_to_menu_12	;wreg free
  4743                           
  4744                           ;UI.c: 85: }
  4745  0000F6  D238               	goto	l5636
  4746  0000F8                     l5378:
  4747                           
  4748                           ;UI.c: 86: else{
  4749                           ;UI.c: 87: change_state_to_menu_22();
  4750  0000F8  ECE4  F012         	call	_change_state_to_menu_22	;wreg free
  4751                           
  4752                           ;UI.c: 88: }
  4753                           ;UI.c: 89: }
  4754  0000FC  D235               	goto	l5636
  4755  0000FE                     l5380:
  4756                           
  4757                           ;UI.c: 90: else if(cur_state == 0){
  4758  0000FE  0100               	movlb	0	; () banked
  4759  000100  51E7               	movf	_cur_state& (0+255),w,b
  4760  000102  0100               	movlb	0	; () banked
  4761  000104  11E8               	iorwf	(_cur_state+1)& (0+255),w,b
  4762  000106  A4D8               	btfss	status,2,c
  4763  000108  D22F               	goto	l5636
  4764                           
  4765                           ; BSR set to: 0
  4766                           ;UI.c: 91: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  4767  00010A  0E00               	movlw	0
  4768  00010C  0100               	movlb	0	; () banked
  4769  00010E  6FC7               	movwf	UI@i& (0+255),b
  4770  000110                     l5384:
  4771                           
  4772                           ; BSR set to: 0
  4773  000110  0E63               	movlw	99
  4774  000112  0100               	movlb	0	; () banked
  4775  000114  65C7               	cpfsgt	UI@i& (0+255),b
  4776  000116  D001               	goto	l5388
  4777  000118  D00C               	goto	l5392
  4778  00011A                     l5388:
  4779                           
  4780                           ; BSR set to: 0
  4781  00011A  0E68               	movlw	104
  4782  00011C  0100               	movlb	0	; () banked
  4783  00011E  6FC4               	movwf	??_UI& (0+255),b
  4784  000120  0EE4               	movlw	228
  4785  000122                     u4787:
  4786  000122  2EE8               	decfsz	wreg,f,c
  4787  000124  D7FE               	bra	u4787
  4788  000126  2FC4               	decfsz	??_UI& (0+255),f,b
  4789  000128  D7FC               	bra	u4787
  4790  00012A  F000               	nop	
  4791  00012C  0100               	movlb	0	; () banked
  4792  00012E  2BC7               	incf	UI@i& (0+255),f,b
  4793  000130  D7EF               	goto	l5384
  4794  000132                     l5392:
  4795                           
  4796                           ; BSR set to: 0
  4797                           ;UI.c: 92: if(cur_state == 0){
  4798  000132  0100               	movlb	0	; () banked
  4799  000134  51E7               	movf	_cur_state& (0+255),w,b
  4800  000136  0100               	movlb	0	; () banked
  4801  000138  11E8               	iorwf	(_cur_state+1)& (0+255),w,b
  4802  00013A  A4D8               	btfss	status,2,c
  4803  00013C  D215               	goto	l5636
  4804                           
  4805                           ; BSR set to: 0
  4806                           ;UI.c: 93: printRTC();
  4807  00013E  EC63  F006         	call	_printRTC	;wreg free
  4808                           
  4809                           ;UI.c: 94: }
  4810                           ;UI.c: 95: }
  4811                           ;UI.c: 96: while(logstate){
  4812  000142  D212               	goto	l5636
  4813  000144                     l5396:
  4814                           
  4815                           ;UI.c: 98: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4816  000144  0E01               	movlw	1
  4817  000146  EC7A  F015         	call	_lcdInst
  4818  00014A  0E68               	movlw	104
  4819  00014C  0100               	movlb	0	; () banked
  4820  00014E  6FC4               	movwf	??_UI& (0+255),b
  4821  000150  0EE4               	movlw	228
  4822  000152                     u4797:
  4823  000152  2EE8               	decfsz	wreg,f,c
  4824  000154  D7FE               	bra	u4797
  4825  000156  2FC4               	decfsz	??_UI& (0+255),f,b
  4826  000158  D7FC               	bra	u4797
  4827  00015A  F000               	nop	
  4828                           
  4829                           ;UI.c: 99: lcdInst(0b10000000);;
  4830  00015C  0E80               	movlw	128
  4831  00015E  EC7A  F015         	call	_lcdInst
  4832                           
  4833                           ;UI.c: 100: printf("-- Log %2d here--", log);
  4834  000162  0EFD               	movlw	low STR_3
  4835  000164  0100               	movlb	0	; () banked
  4836  000166  6F8E               	movwf	printf@f& (0+255),b
  4837  000168  0EFD               	movlw	high STR_3
  4838  00016A  0100               	movlb	0	; () banked
  4839  00016C  6F8F               	movwf	(printf@f+1)& (0+255),b
  4840  00016E  C0F1  F090         	movff	_log,?_printf+2
  4841  000172  C0F2  F091         	movff	_log+1,?_printf+3
  4842  000176  ECBB  F002         	call	_printf	;wreg free
  4843                           
  4844                           ;UI.c: 101: lcdInst(0b11000000);;
  4845  00017A  0EC0               	movlw	192
  4846  00017C  EC7A  F015         	call	_lcdInst
  4847                           
  4848                           ;UI.c: 102: printf("Pause:< | Back:>");
  4849  000180  0E86               	movlw	low STR_4
  4850  000182  0100               	movlb	0	; () banked
  4851  000184  6F8E               	movwf	printf@f& (0+255),b
  4852  000186  0EFF               	movlw	high STR_4
  4853  000188  0100               	movlb	0	; () banked
  4854  00018A  6F8F               	movwf	(printf@f+1)& (0+255),b
  4855  00018C  ECBB  F002         	call	_printf	;wreg free
  4856                           
  4857                           ;UI.c: 104: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4858  000190  0E00               	movlw	0
  4859  000192  0100               	movlb	0	; () banked
  4860  000194  6FC8               	movwf	UI@i_646& (0+255),b
  4861  000196                     l5410:
  4862                           
  4863                           ; BSR set to: 0
  4864  000196  0E63               	movlw	99
  4865  000198  0100               	movlb	0	; () banked
  4866  00019A  65C8               	cpfsgt	UI@i_646& (0+255),b
  4867  00019C  D001               	goto	l5414
  4868  00019E  D00C               	goto	l5418
  4869  0001A0                     l5414:
  4870                           
  4871                           ; BSR set to: 0
  4872  0001A0  0E68               	movlw	104
  4873  0001A2  0100               	movlb	0	; () banked
  4874  0001A4  6FC4               	movwf	??_UI& (0+255),b
  4875  0001A6  0EE4               	movlw	228
  4876  0001A8                     u4807:
  4877  0001A8  2EE8               	decfsz	wreg,f,c
  4878  0001AA  D7FE               	bra	u4807
  4879  0001AC  2FC4               	decfsz	??_UI& (0+255),f,b
  4880  0001AE  D7FC               	bra	u4807
  4881  0001B0  F000               	nop	
  4882  0001B2  0100               	movlb	0	; () banked
  4883  0001B4  2BC8               	incf	UI@i_646& (0+255),f,b
  4884  0001B6  D7EF               	goto	l5410
  4885  0001B8                     l5418:
  4886                           
  4887                           ; BSR set to: 0
  4888  0001B8  0100               	movlb	0	; () banked
  4889  0001BA  51F3               	movf	_logstate& (0+255),w,b
  4890  0001BC  0100               	movlb	0	; () banked
  4891  0001BE  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  4892  0001C0  B4D8               	btfsc	status,2,c
  4893  0001C2  0012               	return	
  4894                           
  4895                           ; BSR set to: 0
  4896                           ;UI.c: 105: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4897                           
  4898                           ; BSR set to: 0
  4899                           
  4900                           ; BSR set to: 0
  4901  0001C4  0E00               	movlw	0
  4902  0001C6  0100               	movlb	0	; () banked
  4903  0001C8  6FC9               	movwf	UI@i_647& (0+255),b
  4904  0001CA                     l5424:
  4905                           
  4906                           ; BSR set to: 0
  4907  0001CA  0E63               	movlw	99
  4908  0001CC  0100               	movlb	0	; () banked
  4909  0001CE  65C9               	cpfsgt	UI@i_647& (0+255),b
  4910  0001D0  D001               	goto	l5428
  4911  0001D2  D00C               	goto	l5432
  4912  0001D4                     l5428:
  4913                           
  4914                           ; BSR set to: 0
  4915  0001D4  0E68               	movlw	104
  4916  0001D6  0100               	movlb	0	; () banked
  4917  0001D8  6FC4               	movwf	??_UI& (0+255),b
  4918  0001DA  0EE4               	movlw	228
  4919  0001DC                     u4817:
  4920  0001DC  2EE8               	decfsz	wreg,f,c
  4921  0001DE  D7FE               	bra	u4817
  4922  0001E0  2FC4               	decfsz	??_UI& (0+255),f,b
  4923  0001E2  D7FC               	bra	u4817
  4924  0001E4  F000               	nop	
  4925  0001E6  0100               	movlb	0	; () banked
  4926  0001E8  2BC9               	incf	UI@i_647& (0+255),f,b
  4927  0001EA  D7EF               	goto	l5424
  4928  0001EC                     l5432:
  4929                           
  4930                           ; BSR set to: 0
  4931  0001EC  0100               	movlb	0	; () banked
  4932  0001EE  51F3               	movf	_logstate& (0+255),w,b
  4933  0001F0  0100               	movlb	0	; () banked
  4934  0001F2  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  4935  0001F4  B4D8               	btfsc	status,2,c
  4936  0001F6  0012               	return	
  4937                           
  4938                           ; BSR set to: 0
  4939                           ;UI.c: 107: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4940                           
  4941                           ; BSR set to: 0
  4942                           
  4943                           ; BSR set to: 0
  4944  0001F8  0E01               	movlw	1
  4945  0001FA  EC7A  F015         	call	_lcdInst
  4946  0001FE  0E68               	movlw	104
  4947  000200  0100               	movlb	0	; () banked
  4948  000202  6FC4               	movwf	??_UI& (0+255),b
  4949  000204  0EE4               	movlw	228
  4950  000206                     u4827:
  4951  000206  2EE8               	decfsz	wreg,f,c
  4952  000208  D7FE               	bra	u4827
  4953  00020A  2FC4               	decfsz	??_UI& (0+255),f,b
  4954  00020C  D7FC               	bra	u4827
  4955  00020E  F000               	nop	
  4956                           
  4957                           ;UI.c: 108: lcdInst(0b10000000);;
  4958  000210  0E80               	movlw	128
  4959  000212  EC7A  F015         	call	_lcdInst
  4960                           
  4961                           ;UI.c: 109: printf("Start:");
  4962  000216  0EC4               	movlw	low STR_5
  4963  000218  0100               	movlb	0	; () banked
  4964  00021A  6F8E               	movwf	printf@f& (0+255),b
  4965  00021C  0EFF               	movlw	high STR_5
  4966  00021E  0100               	movlb	0	; () banked
  4967  000220  6F8F               	movwf	(printf@f+1)& (0+255),b
  4968  000222  ECBB  F002         	call	_printf	;wreg free
  4969                           
  4970                           ;UI.c: 110: lcdInst(0b11000000);;
  4971  000226  0EC0               	movlw	192
  4972  000228  EC7A  F015         	call	_lcdInst
  4973                           
  4974                           ;UI.c: 111: printf("06Feb | 01:08:56");
  4975  00022C  0EFE               	movlw	low STR_6
  4976  00022E  0100               	movlb	0	; () banked
  4977  000230  6F8E               	movwf	printf@f& (0+255),b
  4978  000232  0EFE               	movlw	high STR_6
  4979  000234  0100               	movlb	0	; () banked
  4980  000236  6F8F               	movwf	(printf@f+1)& (0+255),b
  4981  000238  ECBB  F002         	call	_printf	;wreg free
  4982                           
  4983                           ;UI.c: 113: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4984  00023C  0E00               	movlw	0
  4985  00023E  0100               	movlb	0	; () banked
  4986  000240  6FCA               	movwf	UI@i_650& (0+255),b
  4987  000242                     l5450:
  4988                           
  4989                           ; BSR set to: 0
  4990  000242  0E63               	movlw	99
  4991  000244  0100               	movlb	0	; () banked
  4992  000246  65CA               	cpfsgt	UI@i_650& (0+255),b
  4993  000248  D001               	goto	l5454
  4994  00024A  D00C               	goto	l5458
  4995  00024C                     l5454:
  4996                           
  4997                           ; BSR set to: 0
  4998  00024C  0E68               	movlw	104
  4999  00024E  0100               	movlb	0	; () banked
  5000  000250  6FC4               	movwf	??_UI& (0+255),b
  5001  000252  0EE4               	movlw	228
  5002  000254                     u4837:
  5003  000254  2EE8               	decfsz	wreg,f,c
  5004  000256  D7FE               	bra	u4837
  5005  000258  2FC4               	decfsz	??_UI& (0+255),f,b
  5006  00025A  D7FC               	bra	u4837
  5007  00025C  F000               	nop	
  5008  00025E  0100               	movlb	0	; () banked
  5009  000260  2BCA               	incf	UI@i_650& (0+255),f,b
  5010  000262  D7EF               	goto	l5450
  5011  000264                     l5458:
  5012                           
  5013                           ; BSR set to: 0
  5014  000264  0100               	movlb	0	; () banked
  5015  000266  51F3               	movf	_logstate& (0+255),w,b
  5016  000268  0100               	movlb	0	; () banked
  5017  00026A  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  5018  00026C  B4D8               	btfsc	status,2,c
  5019  00026E  0012               	return	
  5020                           
  5021                           ; BSR set to: 0
  5022                           ;UI.c: 114: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5023                           
  5024                           ; BSR set to: 0
  5025                           
  5026                           ; BSR set to: 0
  5027  000270  0E00               	movlw	0
  5028  000272  0100               	movlb	0	; () banked
  5029  000274  6FCB               	movwf	UI@i_651& (0+255),b
  5030  000276                     l5464:
  5031                           
  5032                           ; BSR set to: 0
  5033  000276  0E63               	movlw	99
  5034  000278  0100               	movlb	0	; () banked
  5035  00027A  65CB               	cpfsgt	UI@i_651& (0+255),b
  5036  00027C  D001               	goto	l5468
  5037  00027E  D00C               	goto	l5472
  5038  000280                     l5468:
  5039                           
  5040                           ; BSR set to: 0
  5041  000280  0E68               	movlw	104
  5042  000282  0100               	movlb	0	; () banked
  5043  000284  6FC4               	movwf	??_UI& (0+255),b
  5044  000286  0EE4               	movlw	228
  5045  000288                     u4847:
  5046  000288  2EE8               	decfsz	wreg,f,c
  5047  00028A  D7FE               	bra	u4847
  5048  00028C  2FC4               	decfsz	??_UI& (0+255),f,b
  5049  00028E  D7FC               	bra	u4847
  5050  000290  F000               	nop	
  5051  000292  0100               	movlb	0	; () banked
  5052  000294  2BCB               	incf	UI@i_651& (0+255),f,b
  5053  000296  D7EF               	goto	l5464
  5054  000298                     l5472:
  5055                           
  5056                           ; BSR set to: 0
  5057  000298  0100               	movlb	0	; () banked
  5058  00029A  51F3               	movf	_logstate& (0+255),w,b
  5059  00029C  0100               	movlb	0	; () banked
  5060  00029E  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  5061  0002A0  B4D8               	btfsc	status,2,c
  5062  0002A2  0012               	return	
  5063                           
  5064                           ; BSR set to: 0
  5065                           ;UI.c: 116: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5066                           
  5067                           ; BSR set to: 0
  5068                           
  5069                           ; BSR set to: 0
  5070  0002A4  0E01               	movlw	1
  5071  0002A6  EC7A  F015         	call	_lcdInst
  5072  0002AA  0E68               	movlw	104
  5073  0002AC  0100               	movlb	0	; () banked
  5074  0002AE  6FC4               	movwf	??_UI& (0+255),b
  5075  0002B0  0EE4               	movlw	228
  5076  0002B2                     u4857:
  5077  0002B2  2EE8               	decfsz	wreg,f,c
  5078  0002B4  D7FE               	bra	u4857
  5079  0002B6  2FC4               	decfsz	??_UI& (0+255),f,b
  5080  0002B8  D7FC               	bra	u4857
  5081  0002BA  F000               	nop	
  5082                           
  5083                           ;UI.c: 117: lcdInst(0b10000000);;
  5084  0002BC  0E80               	movlw	128
  5085  0002BE  EC7A  F015         	call	_lcdInst
  5086                           
  5087                           ;UI.c: 118: printf("Duration:");
  5088  0002C2  0EB3               	movlw	low STR_7
  5089  0002C4  0100               	movlb	0	; () banked
  5090  0002C6  6F8E               	movwf	printf@f& (0+255),b
  5091  0002C8  0EFF               	movlw	high STR_7
  5092  0002CA  0100               	movlb	0	; () banked
  5093  0002CC  6F8F               	movwf	(printf@f+1)& (0+255),b
  5094  0002CE  ECBB  F002         	call	_printf	;wreg free
  5095                           
  5096                           ;UI.c: 119: lcdInst(0b11000000);;
  5097  0002D2  0EC0               	movlw	192
  5098  0002D4  EC7A  F015         	call	_lcdInst
  5099                           
  5100                           ;UI.c: 120: printf("%d min(s) %d secs", 2, 42);
  5101  0002D8  0E0F               	movlw	low STR_8
  5102  0002DA  0100               	movlb	0	; () banked
  5103  0002DC  6F8E               	movwf	printf@f& (0+255),b
  5104  0002DE  0EFE               	movlw	high STR_8
  5105  0002E0  0100               	movlb	0	; () banked
  5106  0002E2  6F8F               	movwf	(printf@f+1)& (0+255),b
  5107  0002E4  0E00               	movlw	0
  5108  0002E6  0100               	movlb	0	; () banked
  5109  0002E8  6F91               	movwf	(?_printf+3)& (0+255),b
  5110  0002EA  0E02               	movlw	2
  5111  0002EC  6F90               	movwf	(?_printf+2)& (0+255),b
  5112  0002EE  0E00               	movlw	0
  5113  0002F0  0100               	movlb	0	; () banked
  5114  0002F2  6F93               	movwf	(?_printf+5)& (0+255),b
  5115  0002F4  0E2A               	movlw	42
  5116  0002F6  6F92               	movwf	(?_printf+4)& (0+255),b
  5117  0002F8  ECBB  F002         	call	_printf	;wreg free
  5118                           
  5119                           ;UI.c: 122: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5120  0002FC  0E00               	movlw	0
  5121  0002FE  0100               	movlb	0	; () banked
  5122  000300  6FCC               	movwf	UI@i_654& (0+255),b
  5123  000302                     l5490:
  5124                           
  5125                           ; BSR set to: 0
  5126  000302  0E63               	movlw	99
  5127  000304  0100               	movlb	0	; () banked
  5128  000306  65CC               	cpfsgt	UI@i_654& (0+255),b
  5129  000308  D001               	goto	l5494
  5130  00030A  D00C               	goto	l5498
  5131  00030C                     l5494:
  5132                           
  5133                           ; BSR set to: 0
  5134  00030C  0E68               	movlw	104
  5135  00030E  0100               	movlb	0	; () banked
  5136  000310  6FC4               	movwf	??_UI& (0+255),b
  5137  000312  0EE4               	movlw	228
  5138  000314                     u4867:
  5139  000314  2EE8               	decfsz	wreg,f,c
  5140  000316  D7FE               	bra	u4867
  5141  000318  2FC4               	decfsz	??_UI& (0+255),f,b
  5142  00031A  D7FC               	bra	u4867
  5143  00031C  F000               	nop	
  5144  00031E  0100               	movlb	0	; () banked
  5145  000320  2BCC               	incf	UI@i_654& (0+255),f,b
  5146  000322  D7EF               	goto	l5490
  5147  000324                     l5498:
  5148                           
  5149                           ; BSR set to: 0
  5150  000324  0100               	movlb	0	; () banked
  5151  000326  51F3               	movf	_logstate& (0+255),w,b
  5152  000328  0100               	movlb	0	; () banked
  5153  00032A  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  5154  00032C  B4D8               	btfsc	status,2,c
  5155  00032E  0012               	return	
  5156                           
  5157                           ; BSR set to: 0
  5158                           ;UI.c: 123: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5159                           
  5160                           ; BSR set to: 0
  5161                           
  5162                           ; BSR set to: 0
  5163  000330  0E00               	movlw	0
  5164  000332  0100               	movlb	0	; () banked
  5165  000334  6FCD               	movwf	UI@i_655& (0+255),b
  5166  000336                     l5504:
  5167                           
  5168                           ; BSR set to: 0
  5169  000336  0E63               	movlw	99
  5170  000338  0100               	movlb	0	; () banked
  5171  00033A  65CD               	cpfsgt	UI@i_655& (0+255),b
  5172  00033C  D001               	goto	l5508
  5173  00033E  D00C               	goto	l5512
  5174  000340                     l5508:
  5175                           
  5176                           ; BSR set to: 0
  5177  000340  0E68               	movlw	104
  5178  000342  0100               	movlb	0	; () banked
  5179  000344  6FC4               	movwf	??_UI& (0+255),b
  5180  000346  0EE4               	movlw	228
  5181  000348                     u4877:
  5182  000348  2EE8               	decfsz	wreg,f,c
  5183  00034A  D7FE               	bra	u4877
  5184  00034C  2FC4               	decfsz	??_UI& (0+255),f,b
  5185  00034E  D7FC               	bra	u4877
  5186  000350  F000               	nop	
  5187  000352  0100               	movlb	0	; () banked
  5188  000354  2BCD               	incf	UI@i_655& (0+255),f,b
  5189  000356  D7EF               	goto	l5504
  5190  000358                     l5512:
  5191                           
  5192                           ; BSR set to: 0
  5193  000358  0100               	movlb	0	; () banked
  5194  00035A  51F3               	movf	_logstate& (0+255),w,b
  5195  00035C  0100               	movlb	0	; () banked
  5196  00035E  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  5197  000360  B4D8               	btfsc	status,2,c
  5198  000362  0012               	return	
  5199                           
  5200                           ; BSR set to: 0
  5201                           ;UI.c: 125: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5202                           
  5203                           ; BSR set to: 0
  5204                           
  5205                           ; BSR set to: 0
  5206  000364  0E01               	movlw	1
  5207  000366  EC7A  F015         	call	_lcdInst
  5208  00036A  0E68               	movlw	104
  5209  00036C  0100               	movlb	0	; () banked
  5210  00036E  6FC4               	movwf	??_UI& (0+255),b
  5211  000370  0EE4               	movlw	228
  5212  000372                     u4887:
  5213  000372  2EE8               	decfsz	wreg,f,c
  5214  000374  D7FE               	bra	u4887
  5215  000376  2FC4               	decfsz	??_UI& (0+255),f,b
  5216  000378  D7FC               	bra	u4887
  5217  00037A  F000               	nop	
  5218                           
  5219                           ;UI.c: 126: lcdInst(0b10000000);;
  5220  00037C  0E80               	movlw	128
  5221  00037E  EC7A  F015         	call	_lcdInst
  5222                           
  5223                           ;UI.c: 127: printf(" -- Pop  can -- ");
  5224  000382  0E98               	movlw	low STR_9
  5225  000384  0100               	movlb	0	; () banked
  5226  000386  6F8E               	movwf	printf@f& (0+255),b
  5227  000388  0EFE               	movlw	high STR_9
  5228  00038A  0100               	movlb	0	; () banked
  5229  00038C  6F8F               	movwf	(printf@f+1)& (0+255),b
  5230  00038E  ECBB  F002         	call	_printf	;wreg free
  5231                           
  5232                           ;UI.c: 128: lcdInst(0b11000000);;
  5233  000392  0EC0               	movlw	192
  5234  000394  EC7A  F015         	call	_lcdInst
  5235                           
  5236                           ;UI.c: 129: printf("No tab: 9|Tab: 1");
  5237  000398  0EDC               	movlw	low STR_10
  5238  00039A  0100               	movlb	0	; () banked
  5239  00039C  6F8E               	movwf	printf@f& (0+255),b
  5240  00039E  0EFE               	movlw	high STR_10
  5241  0003A0  0100               	movlb	0	; () banked
  5242  0003A2  6F8F               	movwf	(printf@f+1)& (0+255),b
  5243  0003A4  ECBB  F002         	call	_printf	;wreg free
  5244                           
  5245                           ;UI.c: 131: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5246  0003A8  0E00               	movlw	0
  5247  0003AA  0100               	movlb	0	; () banked
  5248  0003AC  6FCE               	movwf	UI@i_658& (0+255),b
  5249  0003AE                     l5530:
  5250                           
  5251                           ; BSR set to: 0
  5252  0003AE  0E63               	movlw	99
  5253  0003B0  0100               	movlb	0	; () banked
  5254  0003B2  65CE               	cpfsgt	UI@i_658& (0+255),b
  5255  0003B4  D001               	goto	l5534
  5256  0003B6  D00C               	goto	l5538
  5257  0003B8                     l5534:
  5258                           
  5259                           ; BSR set to: 0
  5260  0003B8  0E68               	movlw	104
  5261  0003BA  0100               	movlb	0	; () banked
  5262  0003BC  6FC4               	movwf	??_UI& (0+255),b
  5263  0003BE  0EE4               	movlw	228
  5264  0003C0                     u4897:
  5265  0003C0  2EE8               	decfsz	wreg,f,c
  5266  0003C2  D7FE               	bra	u4897
  5267  0003C4  2FC4               	decfsz	??_UI& (0+255),f,b
  5268  0003C6  D7FC               	bra	u4897
  5269  0003C8  F000               	nop	
  5270  0003CA  0100               	movlb	0	; () banked
  5271  0003CC  2BCE               	incf	UI@i_658& (0+255),f,b
  5272  0003CE  D7EF               	goto	l5530
  5273  0003D0                     l5538:
  5274                           
  5275                           ; BSR set to: 0
  5276  0003D0  0100               	movlb	0	; () banked
  5277  0003D2  51F3               	movf	_logstate& (0+255),w,b
  5278  0003D4  0100               	movlb	0	; () banked
  5279  0003D6  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  5280  0003D8  B4D8               	btfsc	status,2,c
  5281  0003DA  0012               	return	
  5282                           
  5283                           ; BSR set to: 0
  5284                           ;UI.c: 132: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5285                           
  5286                           ; BSR set to: 0
  5287                           
  5288                           ; BSR set to: 0
  5289  0003DC  0E00               	movlw	0
  5290  0003DE  0100               	movlb	0	; () banked
  5291  0003E0  6FCF               	movwf	UI@i_659& (0+255),b
  5292  0003E2                     l5544:
  5293                           
  5294                           ; BSR set to: 0
  5295  0003E2  0E63               	movlw	99
  5296  0003E4  0100               	movlb	0	; () banked
  5297  0003E6  65CF               	cpfsgt	UI@i_659& (0+255),b
  5298  0003E8  D001               	goto	l5548
  5299  0003EA  D00C               	goto	l5552
  5300  0003EC                     l5548:
  5301                           
  5302                           ; BSR set to: 0
  5303  0003EC  0E68               	movlw	104
  5304  0003EE  0100               	movlb	0	; () banked
  5305  0003F0  6FC4               	movwf	??_UI& (0+255),b
  5306  0003F2  0EE4               	movlw	228
  5307  0003F4                     u4907:
  5308  0003F4  2EE8               	decfsz	wreg,f,c
  5309  0003F6  D7FE               	bra	u4907
  5310  0003F8  2FC4               	decfsz	??_UI& (0+255),f,b
  5311  0003FA  D7FC               	bra	u4907
  5312  0003FC  F000               	nop	
  5313  0003FE  0100               	movlb	0	; () banked
  5314  000400  2BCF               	incf	UI@i_659& (0+255),f,b
  5315  000402  D7EF               	goto	l5544
  5316  000404                     l5552:
  5317                           
  5318                           ; BSR set to: 0
  5319  000404  0100               	movlb	0	; () banked
  5320  000406  51F3               	movf	_logstate& (0+255),w,b
  5321  000408  0100               	movlb	0	; () banked
  5322  00040A  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  5323  00040C  B4D8               	btfsc	status,2,c
  5324  00040E  0012               	return	
  5325                           
  5326                           ; BSR set to: 0
  5327                           ;UI.c: 134: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5328                           
  5329                           ; BSR set to: 0
  5330                           
  5331                           ; BSR set to: 0
  5332  000410  0E01               	movlw	1
  5333  000412  EC7A  F015         	call	_lcdInst
  5334  000416  0E68               	movlw	104
  5335  000418  0100               	movlb	0	; () banked
  5336  00041A  6FC4               	movwf	??_UI& (0+255),b
  5337  00041C  0EE4               	movlw	228
  5338  00041E                     u4917:
  5339  00041E  2EE8               	decfsz	wreg,f,c
  5340  000420  D7FE               	bra	u4917
  5341  000422  2FC4               	decfsz	??_UI& (0+255),f,b
  5342  000424  D7FC               	bra	u4917
  5343  000426  F000               	nop	
  5344                           
  5345                           ;UI.c: 135: lcdInst(0b10000000);;
  5346  000428  0E80               	movlw	128
  5347  00042A  EC7A  F015         	call	_lcdInst
  5348                           
  5349                           ;UI.c: 136: printf(" -- Soup can -- ");
  5350  00042E  0EA9               	movlw	low STR_11
  5351  000430  0100               	movlb	0	; () banked
  5352  000432  6F8E               	movwf	printf@f& (0+255),b
  5353  000434  0EFE               	movlw	high STR_11
  5354  000436  0100               	movlb	0	; () banked
  5355  000438  6F8F               	movwf	(printf@f+1)& (0+255),b
  5356  00043A  ECBB  F002         	call	_printf	;wreg free
  5357                           
  5358                           ;UI.c: 137: lcdInst(0b11000000);;
  5359  00043E  0EC0               	movlw	192
  5360  000440  EC7A  F015         	call	_lcdInst
  5361                           
  5362                           ;UI.c: 138: printf("No lbl: 1|lbl: 1");
  5363  000444  0EED               	movlw	low STR_12
  5364  000446  0100               	movlb	0	; () banked
  5365  000448  6F8E               	movwf	printf@f& (0+255),b
  5366  00044A  0EFE               	movlw	high STR_12
  5367  00044C  0100               	movlb	0	; () banked
  5368  00044E  6F8F               	movwf	(printf@f+1)& (0+255),b
  5369  000450  ECBB  F002         	call	_printf	;wreg free
  5370                           
  5371                           ;UI.c: 140: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5372  000454  0E00               	movlw	0
  5373  000456  0100               	movlb	0	; () banked
  5374  000458  6FD0               	movwf	UI@i_662& (0+255),b
  5375  00045A                     l5570:
  5376                           
  5377                           ; BSR set to: 0
  5378  00045A  0E63               	movlw	99
  5379  00045C  0100               	movlb	0	; () banked
  5380  00045E  65D0               	cpfsgt	UI@i_662& (0+255),b
  5381  000460  D001               	goto	l5574
  5382  000462  D00C               	goto	l5578
  5383  000464                     l5574:
  5384                           
  5385                           ; BSR set to: 0
  5386  000464  0E68               	movlw	104
  5387  000466  0100               	movlb	0	; () banked
  5388  000468  6FC4               	movwf	??_UI& (0+255),b
  5389  00046A  0EE4               	movlw	228
  5390  00046C                     u4927:
  5391  00046C  2EE8               	decfsz	wreg,f,c
  5392  00046E  D7FE               	bra	u4927
  5393  000470  2FC4               	decfsz	??_UI& (0+255),f,b
  5394  000472  D7FC               	bra	u4927
  5395  000474  F000               	nop	
  5396  000476  0100               	movlb	0	; () banked
  5397  000478  2BD0               	incf	UI@i_662& (0+255),f,b
  5398  00047A  D7EF               	goto	l5570
  5399  00047C                     l5578:
  5400                           
  5401                           ; BSR set to: 0
  5402  00047C  0100               	movlb	0	; () banked
  5403  00047E  51F3               	movf	_logstate& (0+255),w,b
  5404  000480  0100               	movlb	0	; () banked
  5405  000482  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  5406  000484  B4D8               	btfsc	status,2,c
  5407  000486  0012               	return	
  5408                           
  5409                           ; BSR set to: 0
  5410                           ;UI.c: 141: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5411                           
  5412                           ; BSR set to: 0
  5413                           
  5414                           ; BSR set to: 0
  5415  000488  0E00               	movlw	0
  5416  00048A  0100               	movlb	0	; () banked
  5417  00048C  6FD1               	movwf	UI@i_663& (0+255),b
  5418  00048E                     l5584:
  5419                           
  5420                           ; BSR set to: 0
  5421  00048E  0E63               	movlw	99
  5422  000490  0100               	movlb	0	; () banked
  5423  000492  65D1               	cpfsgt	UI@i_663& (0+255),b
  5424  000494  D001               	goto	l5588
  5425  000496  D00C               	goto	l5592
  5426  000498                     l5588:
  5427                           
  5428                           ; BSR set to: 0
  5429  000498  0E68               	movlw	104
  5430  00049A  0100               	movlb	0	; () banked
  5431  00049C  6FC4               	movwf	??_UI& (0+255),b
  5432  00049E  0EE4               	movlw	228
  5433  0004A0                     u4937:
  5434  0004A0  2EE8               	decfsz	wreg,f,c
  5435  0004A2  D7FE               	bra	u4937
  5436  0004A4  2FC4               	decfsz	??_UI& (0+255),f,b
  5437  0004A6  D7FC               	bra	u4937
  5438  0004A8  F000               	nop	
  5439  0004AA  0100               	movlb	0	; () banked
  5440  0004AC  2BD1               	incf	UI@i_663& (0+255),f,b
  5441  0004AE  D7EF               	goto	l5584
  5442  0004B0                     l5592:
  5443                           
  5444                           ; BSR set to: 0
  5445  0004B0  0100               	movlb	0	; () banked
  5446  0004B2  51F3               	movf	_logstate& (0+255),w,b
  5447  0004B4  0100               	movlb	0	; () banked
  5448  0004B6  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  5449  0004B8  B4D8               	btfsc	status,2,c
  5450  0004BA  0012               	return	
  5451                           
  5452                           ; BSR set to: 0
  5453                           ;UI.c: 143: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5454                           
  5455                           ; BSR set to: 0
  5456                           
  5457                           ; BSR set to: 0
  5458  0004BC  0E01               	movlw	1
  5459  0004BE  EC7A  F015         	call	_lcdInst
  5460  0004C2  0E68               	movlw	104
  5461  0004C4  0100               	movlb	0	; () banked
  5462  0004C6  6FC4               	movwf	??_UI& (0+255),b
  5463  0004C8  0EE4               	movlw	228
  5464  0004CA                     u4947:
  5465  0004CA  2EE8               	decfsz	wreg,f,c
  5466  0004CC  D7FE               	bra	u4947
  5467  0004CE  2FC4               	decfsz	??_UI& (0+255),f,b
  5468  0004D0  D7FC               	bra	u4947
  5469  0004D2  F000               	nop	
  5470                           
  5471                           ;UI.c: 144: lcdInst(0b10000000);;
  5472  0004D4  0E80               	movlw	128
  5473  0004D6  EC7A  F015         	call	_lcdInst
  5474                           
  5475                           ;UI.c: 145: printf("-- Total cans --");
  5476  0004DA  0ECB               	movlw	low STR_13
  5477  0004DC  0100               	movlb	0	; () banked
  5478  0004DE  6F8E               	movwf	printf@f& (0+255),b
  5479  0004E0  0EFE               	movlw	high STR_13
  5480  0004E2  0100               	movlb	0	; () banked
  5481  0004E4  6F8F               	movwf	(printf@f+1)& (0+255),b
  5482  0004E6  ECBB  F002         	call	_printf	;wreg free
  5483                           
  5484                           ;UI.c: 146: lcdInst(0b11000000);;
  5485  0004EA  0EC0               	movlw	192
  5486  0004EC  EC7A  F015         	call	_lcdInst
  5487                           
  5488                           ;UI.c: 147: printf("12");
  5489  0004F0  0EFB               	movlw	low STR_14
  5490  0004F2  0100               	movlb	0	; () banked
  5491  0004F4  6F8E               	movwf	printf@f& (0+255),b
  5492  0004F6  0EFF               	movlw	high STR_14
  5493  0004F8  0100               	movlb	0	; () banked
  5494  0004FA  6F8F               	movwf	(printf@f+1)& (0+255),b
  5495  0004FC  ECBB  F002         	call	_printf	;wreg free
  5496                           
  5497                           ;UI.c: 149: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5498  000500  0E00               	movlw	0
  5499  000502  0100               	movlb	0	; () banked
  5500  000504  6FD2               	movwf	UI@i_666& (0+255),b
  5501  000506                     l5610:
  5502                           
  5503                           ; BSR set to: 0
  5504  000506  0E63               	movlw	99
  5505  000508  0100               	movlb	0	; () banked
  5506  00050A  65D2               	cpfsgt	UI@i_666& (0+255),b
  5507  00050C  D001               	goto	l5614
  5508  00050E  D00C               	goto	l5618
  5509  000510                     l5614:
  5510                           
  5511                           ; BSR set to: 0
  5512  000510  0E68               	movlw	104
  5513  000512  0100               	movlb	0	; () banked
  5514  000514  6FC4               	movwf	??_UI& (0+255),b
  5515  000516  0EE4               	movlw	228
  5516  000518                     u4957:
  5517  000518  2EE8               	decfsz	wreg,f,c
  5518  00051A  D7FE               	bra	u4957
  5519  00051C  2FC4               	decfsz	??_UI& (0+255),f,b
  5520  00051E  D7FC               	bra	u4957
  5521  000520  F000               	nop	
  5522  000522  0100               	movlb	0	; () banked
  5523  000524  2BD2               	incf	UI@i_666& (0+255),f,b
  5524  000526  D7EF               	goto	l5610
  5525  000528                     l5618:
  5526                           
  5527                           ; BSR set to: 0
  5528  000528  0100               	movlb	0	; () banked
  5529  00052A  51F3               	movf	_logstate& (0+255),w,b
  5530  00052C  0100               	movlb	0	; () banked
  5531  00052E  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  5532  000530  B4D8               	btfsc	status,2,c
  5533  000532  0012               	return	
  5534                           
  5535                           ; BSR set to: 0
  5536                           ;UI.c: 150: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5537                           
  5538                           ; BSR set to: 0
  5539                           
  5540                           ; BSR set to: 0
  5541  000534  0E00               	movlw	0
  5542  000536  0100               	movlb	0	; () banked
  5543  000538  6FD3               	movwf	UI@i_667& (0+255),b
  5544  00053A                     l5624:
  5545                           
  5546                           ; BSR set to: 0
  5547  00053A  0E63               	movlw	99
  5548  00053C  0100               	movlb	0	; () banked
  5549  00053E  65D3               	cpfsgt	UI@i_667& (0+255),b
  5550  000540  D001               	goto	l5628
  5551  000542  D00C               	goto	l5632
  5552  000544                     l5628:
  5553                           
  5554                           ; BSR set to: 0
  5555  000544  0E68               	movlw	104
  5556  000546  0100               	movlb	0	; () banked
  5557  000548  6FC4               	movwf	??_UI& (0+255),b
  5558  00054A  0EE4               	movlw	228
  5559  00054C                     u4967:
  5560  00054C  2EE8               	decfsz	wreg,f,c
  5561  00054E  D7FE               	bra	u4967
  5562  000550  2FC4               	decfsz	??_UI& (0+255),f,b
  5563  000552  D7FC               	bra	u4967
  5564  000554  F000               	nop	
  5565  000556  0100               	movlb	0	; () banked
  5566  000558  2BD3               	incf	UI@i_667& (0+255),f,b
  5567  00055A  D7EF               	goto	l5624
  5568  00055C                     l5632:
  5569                           
  5570                           ; BSR set to: 0
  5571  00055C  0100               	movlb	0	; () banked
  5572  00055E  51F3               	movf	_logstate& (0+255),w,b
  5573  000560  0100               	movlb	0	; () banked
  5574  000562  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  5575  000564  B4D8               	btfsc	status,2,c
  5576  000566  0012               	return	
  5577  000568                     l5636:
  5578  000568  0100               	movlb	0	; () banked
  5579  00056A  51F3               	movf	_logstate& (0+255),w,b
  5580  00056C  0100               	movlb	0	; () banked
  5581  00056E  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  5582  000570  B4D8               	btfsc	status,2,c
  5583  000572  0012               	return	
  5584  000574  D5E7               	goto	l5396
  5585  000576                     __end_of_UI:
  5586                           	opt stack 0
  5587                           tblptru	equ	0xFF8
  5588                           tblptrh	equ	0xFF7
  5589                           tblptrl	equ	0xFF6
  5590                           tablat	equ	0xFF5
  5591                           prodh	equ	0xFF4
  5592                           prodl	equ	0xFF3
  5593                           intcon	equ	0xFF2
  5594                           intcon2	equ	0xFF1
  5595                           intcon3	equ	0xFF0
  5596                           postinc0	equ	0xFEE
  5597                           wreg	equ	0xFE8
  5598                           postdec1	equ	0xFE5
  5599                           fsr1l	equ	0xFE1
  5600                           indf2	equ	0xFDF
  5601                           postinc2	equ	0xFDE
  5602                           postdec2	equ	0xFDD
  5603                           fsr2h	equ	0xFDA
  5604                           fsr2l	equ	0xFD9
  5605                           status	equ	0xFD8
  5606                           
  5607 ;; *************** function _printRTC *****************
  5608 ;; Defined at:
  5609 ;;		line 62 in file "RTC.c"
  5610 ;; Parameters:    Size  Location     Type
  5611 ;;		None
  5612 ;; Auto vars:     Size  Location     Type
  5613 ;;  i               2   66[BANK0 ] int 
  5614 ;;  INT_time       14   46[BANK0 ] int [7]
  5615 ;;  month           4   62[BANK0 ] unsigned char [4]
  5616 ;;  RTC_month       2   60[BANK0 ] int 
  5617 ;; Return value:  Size  Location     Type
  5618 ;;                  1    wreg      void 
  5619 ;; Registers used:
  5620 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5621 ;; Tracked objects:
  5622 ;;		On entry : 0/0
  5623 ;;		On exit  : 0/0
  5624 ;;		Unchanged: 0/0
  5625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5627 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5628 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5629 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5630 ;;Total ram usage:       25 bytes
  5631 ;; Hardware stack levels used:    1
  5632 ;; Hardware stack levels required when called:   10
  5633 ;; This function calls:
  5634 ;;		_getRTC
  5635 ;;		_lcdInst
  5636 ;;		_printf
  5637 ;;		_strcpy
  5638 ;; This function is called by:
  5639 ;;		_UI
  5640 ;;		_change_state_to_menu_start
  5641 ;; This function uses a non-reentrant model
  5642 ;;
  5643                           
  5644                           	psect	text23
  5645  000CC6                     __ptext23:
  5646                           	opt stack 0
  5647  000CC6                     _printRTC:
  5648                           	opt stack 18
  5649                           
  5650                           ;RTC.c: 63: getRTC();
  5651                           
  5652                           ; BSR set to: 0
  5653                           ;incstack = 0
  5654  000CC6  EC0D  F010         	call	_getRTC	;wreg free
  5655                           
  5656                           ;RTC.c: 64: char month[] = "MMM";
  5657  000CCA  C110  F0BE         	movff	printRTC@F3207,printRTC@month
  5658  000CCE  C111  F0BF         	movff	printRTC@F3207+1,printRTC@month+1
  5659  000CD2  C112  F0C0         	movff	printRTC@F3207+2,printRTC@month+2
  5660  000CD6  C113  F0C1         	movff	printRTC@F3207+3,printRTC@month+3
  5661                           
  5662                           ;RTC.c: 65: int INT_time[7];
  5663                           ;RTC.c: 66: for(int i = 0; i < 7; i++){
  5664  000CDA  0E00               	movlw	0
  5665  000CDC  0100               	movlb	0	; () banked
  5666  000CDE  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  5667  000CE0  0E00               	movlw	0
  5668  000CE2  6FC2               	movwf	printRTC@i& (0+255),b
  5669                           
  5670                           ; BSR set to: 0
  5671  000CE4  0100               	movlb	0	; () banked
  5672  000CE6  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  5673  000CE8  D008               	goto	l4712
  5674  000CEA  0100               	movlb	0	; () banked
  5675  000CEC  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  5676  000CEE  E146               	bnz	l1077
  5677  000CF0  0E07               	movlw	7
  5678  000CF2  0100               	movlb	0	; () banked
  5679  000CF4  5DC2               	subwf	printRTC@i& (0+255),w,b
  5680  000CF6  B0D8               	btfsc	status,0,c
  5681  000CF8  D041               	goto	l1077
  5682  000CFA                     l4712:
  5683                           
  5684                           ; BSR set to: 0
  5685                           ;RTC.c: 67: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  5686  000CFA  0ED4               	movlw	low _time
  5687  000CFC  0100               	movlb	0	; () banked
  5688  000CFE  25C2               	addwf	printRTC@i& (0+255),w,b
  5689  000D00  6ED9               	movwf	fsr2l,c
  5690  000D02  0E00               	movlw	high _time
  5691  000D04  0100               	movlb	0	; () banked
  5692  000D06  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  5693  000D08  6EDA               	movwf	fsr2h,c
  5694  000D0A  50DF               	movf	indf2,w,c
  5695  000D0C  0100               	movlb	0	; () banked
  5696  000D0E  6FAB               	movwf	??_printRTC& (0+255),b
  5697  000D10  0100               	movlb	0	; () banked
  5698  000D12  3BAB               	swapf	??_printRTC& (0+255),f,b
  5699  000D14  0E0F               	movlw	15
  5700  000D16  17AB               	andwf	??_printRTC& (0+255),f,b
  5701  000D18  0E0F               	movlw	15
  5702  000D1A  0100               	movlb	0	; () banked
  5703  000D1C  17AB               	andwf	??_printRTC& (0+255),f,b
  5704  000D1E  0100               	movlb	0	; () banked
  5705  000D20  51AB               	movf	??_printRTC& (0+255),w,b
  5706  000D22  0D0A               	mullw	10
  5707  000D24  0ED4               	movlw	low _time
  5708  000D26  0100               	movlb	0	; () banked
  5709  000D28  25C2               	addwf	printRTC@i& (0+255),w,b
  5710  000D2A  6ED9               	movwf	fsr2l,c
  5711  000D2C  0E00               	movlw	high _time
  5712  000D2E  0100               	movlb	0	; () banked
  5713  000D30  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  5714  000D32  6EDA               	movwf	fsr2h,c
  5715  000D34  50DF               	movf	indf2,w,c
  5716  000D36  0B0F               	andlw	15
  5717  000D38  0100               	movlb	0	; () banked
  5718  000D3A  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  5719  000D3C  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  5720  000D3E  50F3               	movf	prodl,w,c
  5721  000D40  0100               	movlb	0	; () banked
  5722  000D42  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  5723  000D44  50F4               	movf	prodh,w,c
  5724  000D46  0100               	movlb	0	; () banked
  5725  000D48  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  5726  000D4A  90D8               	bcf	status,0,c
  5727  000D4C  0100               	movlb	0	; () banked
  5728  000D4E  35C2               	rlcf	printRTC@i& (0+255),w,b
  5729  000D50  6ED9               	movwf	fsr2l,c
  5730  000D52  0100               	movlb	0	; () banked
  5731  000D54  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  5732  000D56  6EDA               	movwf	fsr2h,c
  5733  000D58  0EAE               	movlw	low printRTC@INT_time
  5734  000D5A  26D9               	addwf	fsr2l,f,c
  5735  000D5C  0E00               	movlw	high printRTC@INT_time
  5736  000D5E  22DA               	addwfc	fsr2h,f,c
  5737  000D60  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  5738  000D64  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  5739                           
  5740                           ; BSR set to: 0
  5741  000D68  0100               	movlb	0	; () banked
  5742  000D6A  4BC2               	infsnz	printRTC@i& (0+255),f,b
  5743  000D6C  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  5744                           
  5745                           ; BSR set to: 0
  5746  000D6E  0100               	movlb	0	; () banked
  5747  000D70  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  5748  000D72  D7C3               	goto	l4712
  5749  000D74  0100               	movlb	0	; () banked
  5750  000D76  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  5751  000D78  E101               	bnz	u3280
  5752  000D7A  D7BA               	goto	L6
  5753  000D7C                     u3280:
  5754  000D7C                     l1077:
  5755                           
  5756                           ; BSR set to: 0
  5757                           ;RTC.c: 68: }
  5758                           ;RTC.c: 69: int RTC_month = INT_time[5];
  5759  000D7C  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  5760  000D80  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  5761                           
  5762                           ;RTC.c: 70: switch(RTC_month){
  5763  000D84  D0B4               	goto	l4744
  5764  000D86                     l4718:
  5765                           
  5766                           ; BSR set to: 0
  5767                           ;RTC.c: 72: strcpy(month, "Jan");
  5768  000D86  0EBE               	movlw	low printRTC@month
  5769  000D88  0100               	movlb	0	; () banked
  5770  000D8A  6F80               	movwf	strcpy@to& (0+255),b
  5771  000D8C  0E00               	movlw	high printRTC@month
  5772  000D8E  0100               	movlb	0	; () banked
  5773  000D90  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5774  000D92  0EDB               	movlw	low STR_36
  5775  000D94  0100               	movlb	0	; () banked
  5776  000D96  6F82               	movwf	strcpy@from& (0+255),b
  5777  000D98  0EFF               	movlw	high STR_36
  5778  000D9A  0100               	movlb	0	; () banked
  5779  000D9C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5780  000D9E  EC1C  F013         	call	_strcpy	;wreg free
  5781                           
  5782                           ;RTC.c: 73: break;
  5783  000DA2  D0D4               	goto	l4746
  5784  000DA4                     l4720:
  5785                           
  5786                           ;RTC.c: 75: strcpy(month, "Feb");
  5787  000DA4  0EBE               	movlw	low printRTC@month
  5788  000DA6  0100               	movlb	0	; () banked
  5789  000DA8  6F80               	movwf	strcpy@to& (0+255),b
  5790  000DAA  0E00               	movlw	high printRTC@month
  5791  000DAC  0100               	movlb	0	; () banked
  5792  000DAE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5793  000DB0  0ECB               	movlw	low STR_37
  5794  000DB2  0100               	movlb	0	; () banked
  5795  000DB4  6F82               	movwf	strcpy@from& (0+255),b
  5796  000DB6  0EFF               	movlw	high STR_37
  5797  000DB8  0100               	movlb	0	; () banked
  5798  000DBA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5799  000DBC  EC1C  F013         	call	_strcpy	;wreg free
  5800                           
  5801                           ;RTC.c: 76: break;
  5802  000DC0  D0C5               	goto	l4746
  5803  000DC2                     l4722:
  5804                           
  5805                           ;RTC.c: 78: strcpy(month, "Mar");
  5806  000DC2  0EBE               	movlw	low printRTC@month
  5807  000DC4  0100               	movlb	0	; () banked
  5808  000DC6  6F80               	movwf	strcpy@to& (0+255),b
  5809  000DC8  0E00               	movlw	high printRTC@month
  5810  000DCA  0100               	movlb	0	; () banked
  5811  000DCC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5812  000DCE  0EE7               	movlw	low STR_38
  5813  000DD0  0100               	movlb	0	; () banked
  5814  000DD2  6F82               	movwf	strcpy@from& (0+255),b
  5815  000DD4  0EFF               	movlw	high STR_38
  5816  000DD6  0100               	movlb	0	; () banked
  5817  000DD8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5818  000DDA  EC1C  F013         	call	_strcpy	;wreg free
  5819                           
  5820                           ;RTC.c: 79: break;
  5821  000DDE  D0B6               	goto	l4746
  5822  000DE0                     l4724:
  5823                           
  5824                           ;RTC.c: 81: strcpy(month, "Apr");
  5825  000DE0  0EBE               	movlw	low printRTC@month
  5826  000DE2  0100               	movlb	0	; () banked
  5827  000DE4  6F80               	movwf	strcpy@to& (0+255),b
  5828  000DE6  0E00               	movlw	high printRTC@month
  5829  000DE8  0100               	movlb	0	; () banked
  5830  000DEA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5831  000DEC  0EEB               	movlw	low STR_39
  5832  000DEE  0100               	movlb	0	; () banked
  5833  000DF0  6F82               	movwf	strcpy@from& (0+255),b
  5834  000DF2  0EFF               	movlw	high STR_39
  5835  000DF4  0100               	movlb	0	; () banked
  5836  000DF6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5837  000DF8  EC1C  F013         	call	_strcpy	;wreg free
  5838                           
  5839                           ;RTC.c: 82: break;
  5840  000DFC  D0A7               	goto	l4746
  5841  000DFE                     l4726:
  5842                           
  5843                           ;RTC.c: 84: strcpy(month, "May");
  5844  000DFE  0EBE               	movlw	low printRTC@month
  5845  000E00  0100               	movlb	0	; () banked
  5846  000E02  6F80               	movwf	strcpy@to& (0+255),b
  5847  000E04  0E00               	movlw	high printRTC@month
  5848  000E06  0100               	movlb	0	; () banked
  5849  000E08  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5850  000E0A  0EF7               	movlw	low STR_40
  5851  000E0C  0100               	movlb	0	; () banked
  5852  000E0E  6F82               	movwf	strcpy@from& (0+255),b
  5853  000E10  0EFF               	movlw	high STR_40
  5854  000E12  0100               	movlb	0	; () banked
  5855  000E14  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5856  000E16  EC1C  F013         	call	_strcpy	;wreg free
  5857                           
  5858                           ;RTC.c: 85: break;
  5859  000E1A  D098               	goto	l4746
  5860  000E1C                     l4728:
  5861                           
  5862                           ;RTC.c: 87: strcpy(month, "Jun");
  5863  000E1C  0EBE               	movlw	low printRTC@month
  5864  000E1E  0100               	movlb	0	; () banked
  5865  000E20  6F80               	movwf	strcpy@to& (0+255),b
  5866  000E22  0E00               	movlw	high printRTC@month
  5867  000E24  0100               	movlb	0	; () banked
  5868  000E26  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5869  000E28  0EDF               	movlw	low STR_41
  5870  000E2A  0100               	movlb	0	; () banked
  5871  000E2C  6F82               	movwf	strcpy@from& (0+255),b
  5872  000E2E  0EFF               	movlw	high STR_41
  5873  000E30  0100               	movlb	0	; () banked
  5874  000E32  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5875  000E34  EC1C  F013         	call	_strcpy	;wreg free
  5876                           
  5877                           ;RTC.c: 88: break;
  5878  000E38  D089               	goto	l4746
  5879  000E3A                     l4730:
  5880                           
  5881                           ;RTC.c: 90: strcpy(month, "Jul");
  5882  000E3A  0EBE               	movlw	low printRTC@month
  5883  000E3C  0100               	movlb	0	; () banked
  5884  000E3E  6F80               	movwf	strcpy@to& (0+255),b
  5885  000E40  0E00               	movlw	high printRTC@month
  5886  000E42  0100               	movlb	0	; () banked
  5887  000E44  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5888  000E46  0ED7               	movlw	low STR_42
  5889  000E48  0100               	movlb	0	; () banked
  5890  000E4A  6F82               	movwf	strcpy@from& (0+255),b
  5891  000E4C  0EFF               	movlw	high STR_42
  5892  000E4E  0100               	movlb	0	; () banked
  5893  000E50  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5894  000E52  EC1C  F013         	call	_strcpy	;wreg free
  5895                           
  5896                           ;RTC.c: 91: break;
  5897  000E56  D07A               	goto	l4746
  5898  000E58                     l4732:
  5899                           
  5900                           ;RTC.c: 93: strcpy(month, "Aug");
  5901  000E58  0EBE               	movlw	low printRTC@month
  5902  000E5A  0100               	movlb	0	; () banked
  5903  000E5C  6F80               	movwf	strcpy@to& (0+255),b
  5904  000E5E  0E00               	movlw	high printRTC@month
  5905  000E60  0100               	movlb	0	; () banked
  5906  000E62  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5907  000E64  0ED3               	movlw	low STR_43
  5908  000E66  0100               	movlb	0	; () banked
  5909  000E68  6F82               	movwf	strcpy@from& (0+255),b
  5910  000E6A  0EFF               	movlw	high STR_43
  5911  000E6C  0100               	movlb	0	; () banked
  5912  000E6E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5913  000E70  EC1C  F013         	call	_strcpy	;wreg free
  5914                           
  5915                           ;RTC.c: 94: break;
  5916  000E74  D06B               	goto	l4746
  5917  000E76                     l4734:
  5918                           
  5919                           ;RTC.c: 96: strcpy(month, "Sep");
  5920  000E76  0EBE               	movlw	low printRTC@month
  5921  000E78  0100               	movlb	0	; () banked
  5922  000E7A  6F80               	movwf	strcpy@to& (0+255),b
  5923  000E7C  0E00               	movlw	high printRTC@month
  5924  000E7E  0100               	movlb	0	; () banked
  5925  000E80  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5926  000E82  0EE3               	movlw	low STR_44
  5927  000E84  0100               	movlb	0	; () banked
  5928  000E86  6F82               	movwf	strcpy@from& (0+255),b
  5929  000E88  0EFF               	movlw	high STR_44
  5930  000E8A  0100               	movlb	0	; () banked
  5931  000E8C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5932  000E8E  EC1C  F013         	call	_strcpy	;wreg free
  5933                           
  5934                           ;RTC.c: 97: break;
  5935  000E92  D05C               	goto	l4746
  5936  000E94                     l4736:
  5937                           
  5938                           ;RTC.c: 99: strcpy(month, "Oct");
  5939  000E94  0EBE               	movlw	low printRTC@month
  5940  000E96  0100               	movlb	0	; () banked
  5941  000E98  6F80               	movwf	strcpy@to& (0+255),b
  5942  000E9A  0E00               	movlw	high printRTC@month
  5943  000E9C  0100               	movlb	0	; () banked
  5944  000E9E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5945  000EA0  0EEF               	movlw	low STR_45
  5946  000EA2  0100               	movlb	0	; () banked
  5947  000EA4  6F82               	movwf	strcpy@from& (0+255),b
  5948  000EA6  0EFF               	movlw	high STR_45
  5949  000EA8  0100               	movlb	0	; () banked
  5950  000EAA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5951  000EAC  EC1C  F013         	call	_strcpy	;wreg free
  5952                           
  5953                           ;RTC.c: 100: break;
  5954  000EB0  D04D               	goto	l4746
  5955  000EB2                     l4738:
  5956                           
  5957                           ;RTC.c: 102: strcpy(month, "Nov");
  5958  000EB2  0EBE               	movlw	low printRTC@month
  5959  000EB4  0100               	movlb	0	; () banked
  5960  000EB6  6F80               	movwf	strcpy@to& (0+255),b
  5961  000EB8  0E00               	movlw	high printRTC@month
  5962  000EBA  0100               	movlb	0	; () banked
  5963  000EBC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5964  000EBE  0EF3               	movlw	low STR_46
  5965  000EC0  0100               	movlb	0	; () banked
  5966  000EC2  6F82               	movwf	strcpy@from& (0+255),b
  5967  000EC4  0EFF               	movlw	high STR_46
  5968  000EC6  0100               	movlb	0	; () banked
  5969  000EC8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5970  000ECA  EC1C  F013         	call	_strcpy	;wreg free
  5971                           
  5972                           ;RTC.c: 103: break;
  5973  000ECE  D03E               	goto	l4746
  5974  000ED0                     l4740:
  5975                           
  5976                           ;RTC.c: 105: strcpy(month, "Dec");
  5977  000ED0  0EBE               	movlw	low printRTC@month
  5978  000ED2  0100               	movlb	0	; () banked
  5979  000ED4  6F80               	movwf	strcpy@to& (0+255),b
  5980  000ED6  0E00               	movlw	high printRTC@month
  5981  000ED8  0100               	movlb	0	; () banked
  5982  000EDA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5983  000EDC  0ECF               	movlw	low STR_47
  5984  000EDE  0100               	movlb	0	; () banked
  5985  000EE0  6F82               	movwf	strcpy@from& (0+255),b
  5986  000EE2  0EFF               	movlw	high STR_47
  5987  000EE4  0100               	movlb	0	; () banked
  5988  000EE6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5989  000EE8  EC1C  F013         	call	_strcpy	;wreg free
  5990                           
  5991                           ;RTC.c: 107: }
  5992                           
  5993                           ;RTC.c: 106: break;
  5994  000EEC  D02F               	goto	l4746
  5995  000EEE                     l4744:
  5996  000EEE  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  5997  000EF2  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  5998                           
  5999                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6000                           ; Switch size 1, requested type "space"
  6001                           ; Number of cases is 1, Range of values is 0 to 0
  6002                           ; switch strategies available:
  6003                           ; Name         Instructions Cycles
  6004                           ; simple_byte            4     3 (average)
  6005                           ;	Chosen strategy is simple_byte
  6006  000EF6  0100               	movlb	0	; () banked
  6007  000EF8  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  6008  000EFA  0A00               	xorlw	0	; case 0
  6009  000EFC  A4D8               	btfss	status,2,c
  6010  000EFE  D026               	goto	l4746
  6011                           
  6012                           ; BSR set to: 0
  6013                           ; Switch size 1, requested type "space"
  6014                           ; Number of cases is 12, Range of values is 1 to 12
  6015                           ; switch strategies available:
  6016                           ; Name         Instructions Cycles
  6017                           ; simple_byte           37    19 (average)
  6018                           ;	Chosen strategy is simple_byte
  6019  000F00  0100               	movlb	0	; () banked
  6020  000F02  51AB               	movf	??_printRTC& (0+255),w,b
  6021  000F04  0A01               	xorlw	1	; case 1
  6022  000F06  B4D8               	btfsc	status,2,c
  6023  000F08  D73E               	goto	l4718
  6024  000F0A  0A03               	xorlw	3	; case 2
  6025  000F0C  B4D8               	btfsc	status,2,c
  6026  000F0E  D74A               	goto	l4720
  6027  000F10  0A01               	xorlw	1	; case 3
  6028  000F12  B4D8               	btfsc	status,2,c
  6029  000F14  D756               	goto	l4722
  6030  000F16  0A07               	xorlw	7	; case 4
  6031  000F18  B4D8               	btfsc	status,2,c
  6032  000F1A  D762               	goto	l4724
  6033  000F1C  0A01               	xorlw	1	; case 5
  6034  000F1E  B4D8               	btfsc	status,2,c
  6035  000F20  D76E               	goto	l4726
  6036  000F22  0A03               	xorlw	3	; case 6
  6037  000F24  B4D8               	btfsc	status,2,c
  6038  000F26  D77A               	goto	l4728
  6039  000F28  0A01               	xorlw	1	; case 7
  6040  000F2A  B4D8               	btfsc	status,2,c
  6041  000F2C  D786               	goto	l4730
  6042  000F2E  0A0F               	xorlw	15	; case 8
  6043  000F30  B4D8               	btfsc	status,2,c
  6044  000F32  D792               	goto	l4732
  6045  000F34  0A01               	xorlw	1	; case 9
  6046  000F36  B4D8               	btfsc	status,2,c
  6047  000F38  D79E               	goto	l4734
  6048  000F3A  0A03               	xorlw	3	; case 10
  6049  000F3C  B4D8               	btfsc	status,2,c
  6050  000F3E  D7AA               	goto	l4736
  6051  000F40  0A01               	xorlw	1	; case 11
  6052  000F42  B4D8               	btfsc	status,2,c
  6053  000F44  D7B6               	goto	l4738
  6054  000F46  0A07               	xorlw	7	; case 12
  6055  000F48  B4D8               	btfsc	status,2,c
  6056  000F4A  D7C2               	goto	l4740
  6057  000F4C                     l4746:
  6058                           
  6059                           ;RTC.c: 108: lcdInst(0b10000000);;
  6060  000F4C  0E80               	movlw	128
  6061  000F4E  EC7A  F015         	call	_lcdInst
  6062                           
  6063                           ;RTC.c: 109: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  6064  000F52  0ED0               	movlw	low STR_48
  6065  000F54  0100               	movlb	0	; () banked
  6066  000F56  6F8E               	movwf	printf@f& (0+255),b
  6067  000F58  0EFD               	movlw	high STR_48
  6068  000F5A  0100               	movlb	0	; () banked
  6069  000F5C  6F8F               	movwf	(printf@f+1)& (0+255),b
  6070  000F5E  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  6071  000F62  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  6072  000F66  0EBE               	movlw	low printRTC@month
  6073  000F68  0100               	movlb	0	; () banked
  6074  000F6A  6F92               	movwf	(?_printf+4)& (0+255),b
  6075  000F6C  0E00               	movlw	high printRTC@month
  6076  000F6E  0100               	movlb	0	; () banked
  6077  000F70  6F93               	movwf	(?_printf+5)& (0+255),b
  6078  000F72  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  6079  000F76  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  6080  000F7A  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  6081  000F7E  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  6082  000F82  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  6083  000F86  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  6084  000F8A  ECBB  F002         	call	_printf	;wreg free
  6085  000F8E  0012               	return		;funcret
  6086  000F90                     __end_of_printRTC:
  6087                           	opt stack 0
  6088                           tblptru	equ	0xFF8
  6089                           tblptrh	equ	0xFF7
  6090                           tblptrl	equ	0xFF6
  6091                           tablat	equ	0xFF5
  6092                           prodh	equ	0xFF4
  6093                           prodl	equ	0xFF3
  6094                           intcon	equ	0xFF2
  6095                           intcon2	equ	0xFF1
  6096                           intcon3	equ	0xFF0
  6097                           postinc0	equ	0xFEE
  6098                           wreg	equ	0xFE8
  6099                           postdec1	equ	0xFE5
  6100                           fsr1l	equ	0xFE1
  6101                           indf2	equ	0xFDF
  6102                           postinc2	equ	0xFDE
  6103                           postdec2	equ	0xFDD
  6104                           fsr2h	equ	0xFDA
  6105                           fsr2l	equ	0xFD9
  6106                           status	equ	0xFD8
  6107                           
  6108 ;; *************** function _strcpy *****************
  6109 ;; Defined at:
  6110 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  6111 ;; Parameters:    Size  Location     Type
  6112 ;;  to              2    0[BANK0 ] PTR unsigned char 
  6113 ;;		 -> printRTC@month(4), 
  6114 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  6115 ;;		 -> STR_47(4), STR_46(4), STR_45(4), STR_44(4), 
  6116 ;;		 -> STR_43(4), STR_42(4), STR_41(4), STR_40(4), 
  6117 ;;		 -> STR_39(4), STR_38(4), STR_37(4), STR_36(4), 
  6118 ;; Auto vars:     Size  Location     Type
  6119 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  6120 ;;		 -> printRTC@month(4), 
  6121 ;; Return value:  Size  Location     Type
  6122 ;;                  2    0[BANK0 ] PTR unsigned char 
  6123 ;; Registers used:
  6124 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  6125 ;; Tracked objects:
  6126 ;;		On entry : 0/0
  6127 ;;		On exit  : 0/0
  6128 ;;		Unchanged: 0/0
  6129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6130 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6131 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6133 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6134 ;;Total ram usage:        6 bytes
  6135 ;; Hardware stack levels used:    1
  6136 ;; Hardware stack levels required when called:    7
  6137 ;; This function calls:
  6138 ;;		Nothing
  6139 ;; This function is called by:
  6140 ;;		_printRTC
  6141 ;; This function uses a non-reentrant model
  6142 ;;
  6143                           
  6144                           	psect	text24
  6145  002638                     __ptext24:
  6146                           	opt stack 0
  6147  002638                     _strcpy:
  6148                           	opt stack 20
  6149                           
  6150                           ;incstack = 0
  6151  002638  C080  F084         	movff	strcpy@to,strcpy@cp
  6152  00263C  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  6153  002640  D006               	goto	l4510
  6154  002642                     l4508:
  6155  002642  0100               	movlb	0	; () banked
  6156  002644  4B84               	infsnz	strcpy@cp& (0+255),f,b
  6157  002646  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  6158  002648  0100               	movlb	0	; () banked
  6159  00264A  4B82               	infsnz	strcpy@from& (0+255),f,b
  6160  00264C  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  6161  00264E                     l4510:
  6162  00264E  C082  FFF6         	movff	strcpy@from,tblptrl
  6163  002652  C083  FFF7         	movff	strcpy@from+1,tblptrh
  6164  002656                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6165  002656  6AF8               	clrf	tblptru,c
  6166  002658                     	endif
  6167  002658                     	if	0	;tblptru may be non-zero
  6168  002658                     	endif
  6169  002658  C084  FFD9         	movff	strcpy@cp,fsr2l
  6170  00265C  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  6171  002660  0008               	tblrd		*
  6172  002662  CFF5 FFDF          	movff	tablat,indf2
  6173  002666  50DF               	movf	indf2,w,c
  6174  002668  B4D8               	btfsc	status,2,c
  6175  00266A  0012               	return	
  6176  00266C  D7EA               	goto	l4508
  6177  00266E                     __end_of_strcpy:
  6178                           	opt stack 0
  6179                           tblptru	equ	0xFF8
  6180                           tblptrh	equ	0xFF7
  6181                           tblptrl	equ	0xFF6
  6182                           tablat	equ	0xFF5
  6183                           prodh	equ	0xFF4
  6184                           prodl	equ	0xFF3
  6185                           intcon	equ	0xFF2
  6186                           intcon2	equ	0xFF1
  6187                           intcon3	equ	0xFF0
  6188                           postinc0	equ	0xFEE
  6189                           wreg	equ	0xFE8
  6190                           postdec1	equ	0xFE5
  6191                           fsr1l	equ	0xFE1
  6192                           indf2	equ	0xFDF
  6193                           postinc2	equ	0xFDE
  6194                           postdec2	equ	0xFDD
  6195                           fsr2h	equ	0xFDA
  6196                           fsr2l	equ	0xFD9
  6197                           status	equ	0xFD8
  6198                           
  6199 ;; *************** function _getRTC *****************
  6200 ;; Defined at:
  6201 ;;		line 43 in file "RTC.c"
  6202 ;; Parameters:    Size  Location     Type
  6203 ;;		None
  6204 ;; Auto vars:     Size  Location     Type
  6205 ;;  i               2    3[BANK0 ] int 
  6206 ;; Return value:  Size  Location     Type
  6207 ;;                  1    wreg      void 
  6208 ;; Registers used:
  6209 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6210 ;; Tracked objects:
  6211 ;;		On entry : 0/0
  6212 ;;		On exit  : 0/0
  6213 ;;		Unchanged: 0/0
  6214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6216 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6218 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6219 ;;Total ram usage:        2 bytes
  6220 ;; Hardware stack levels used:    1
  6221 ;; Hardware stack levels required when called:    9
  6222 ;; This function calls:
  6223 ;;		_I2C_Master_Read
  6224 ;;		_I2C_Master_Start
  6225 ;;		_I2C_Master_Stop
  6226 ;;		_I2C_Master_Write
  6227 ;; This function is called by:
  6228 ;;		_printRTC
  6229 ;;		_initSortTimer
  6230 ;; This function uses a non-reentrant model
  6231 ;;
  6232                           
  6233                           	psect	text25
  6234  00201A                     __ptext25:
  6235                           	opt stack 0
  6236  00201A                     _getRTC:
  6237                           	opt stack 18
  6238                           
  6239                           ;RTC.c: 47: I2C_Master_Start();
  6240                           
  6241                           ;incstack = 0
  6242  00201A  ECA0  F015         	call	_I2C_Master_Start	;wreg free
  6243                           
  6244                           ;RTC.c: 48: I2C_Master_Write(0b11010000);
  6245  00201E  0E00               	movlw	0
  6246  002020  0100               	movlb	0	; () banked
  6247  002022  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6248  002024  0ED0               	movlw	208
  6249  002026  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6250  002028  EC8E  F015         	call	_I2C_Master_Write	;wreg free
  6251                           
  6252                           ;RTC.c: 49: I2C_Master_Write(0x00);
  6253  00202C  0E00               	movlw	0
  6254  00202E  0100               	movlb	0	; () banked
  6255  002030  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6256  002032  0E00               	movlw	0
  6257  002034  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6258  002036  EC8E  F015         	call	_I2C_Master_Write	;wreg free
  6259                           
  6260                           ;RTC.c: 50: I2C_Master_Stop();
  6261  00203A  EC9C  F015         	call	_I2C_Master_Stop	;wreg free
  6262                           
  6263                           ;RTC.c: 53: I2C_Master_Start();
  6264  00203E  ECA0  F015         	call	_I2C_Master_Start	;wreg free
  6265                           
  6266                           ;RTC.c: 54: I2C_Master_Write(0b11010001);
  6267  002042  0E00               	movlw	0
  6268  002044  0100               	movlb	0	; () banked
  6269  002046  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6270  002048  0ED1               	movlw	209
  6271  00204A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6272  00204C  EC8E  F015         	call	_I2C_Master_Write	;wreg free
  6273                           
  6274                           ;RTC.c: 55: for(int i = 0; i < 6; i++){
  6275  002050  0E00               	movlw	0
  6276  002052  0100               	movlb	0	; () banked
  6277  002054  6F84               	movwf	(getRTC@i+1)& (0+255),b
  6278  002056  0E00               	movlw	0
  6279  002058  6F83               	movwf	getRTC@i& (0+255),b
  6280  00205A                     l4494:
  6281                           
  6282                           ; BSR set to: 0
  6283  00205A  0100               	movlb	0	; () banked
  6284  00205C  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  6285  00205E  D008               	goto	l4498
  6286  002060  0100               	movlb	0	; () banked
  6287  002062  5184               	movf	(getRTC@i+1)& (0+255),w,b
  6288  002064  E115               	bnz	l4504
  6289  002066  0E06               	movlw	6
  6290  002068  0100               	movlb	0	; () banked
  6291  00206A  5D83               	subwf	getRTC@i& (0+255),w,b
  6292  00206C  B0D8               	btfsc	status,0,c
  6293  00206E  D010               	goto	l4504
  6294  002070                     l4498:
  6295                           
  6296                           ; BSR set to: 0
  6297                           ;RTC.c: 56: time[i] = I2C_Master_Read(1);
  6298  002070  0ED4               	movlw	low _time
  6299  002072  0100               	movlb	0	; () banked
  6300  002074  2583               	addwf	getRTC@i& (0+255),w,b
  6301  002076  6ED9               	movwf	fsr2l,c
  6302  002078  0E00               	movlw	high _time
  6303  00207A  0100               	movlb	0	; () banked
  6304  00207C  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  6305  00207E  6EDA               	movwf	fsr2h,c
  6306  002080  0E01               	movlw	1
  6307  002082  EC5A  F014         	call	_I2C_Master_Read
  6308  002086  6EDF               	movwf	indf2,c
  6309  002088  0100               	movlb	0	; () banked
  6310  00208A  4B83               	infsnz	getRTC@i& (0+255),f,b
  6311  00208C  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  6312  00208E  D7E5               	goto	l4494
  6313  002090                     l4504:
  6314                           
  6315                           ; BSR set to: 0
  6316                           ;RTC.c: 57: }
  6317                           ;RTC.c: 58: time[6] = I2C_Master_Read(0);
  6318  002090  0E00               	movlw	0
  6319  002092  EC5A  F014         	call	_I2C_Master_Read
  6320  002096  0100               	movlb	0	; () banked
  6321  002098  6FDA               	movwf	(_time+6)& (0+255),b
  6322                           
  6323                           ;RTC.c: 59: I2C_Master_Stop();
  6324  00209A  EC9C  F015         	call	_I2C_Master_Stop	;wreg free
  6325  00209E  0012               	return		;funcret
  6326  0020A0                     __end_of_getRTC:
  6327                           	opt stack 0
  6328                           tblptru	equ	0xFF8
  6329                           tblptrh	equ	0xFF7
  6330                           tblptrl	equ	0xFF6
  6331                           tablat	equ	0xFF5
  6332                           prodh	equ	0xFF4
  6333                           prodl	equ	0xFF3
  6334                           intcon	equ	0xFF2
  6335                           intcon2	equ	0xFF1
  6336                           intcon3	equ	0xFF0
  6337                           postinc0	equ	0xFEE
  6338                           wreg	equ	0xFE8
  6339                           postdec1	equ	0xFE5
  6340                           fsr1l	equ	0xFE1
  6341                           indf2	equ	0xFDF
  6342                           postinc2	equ	0xFDE
  6343                           postdec2	equ	0xFDD
  6344                           fsr2h	equ	0xFDA
  6345                           fsr2l	equ	0xFD9
  6346                           status	equ	0xFD8
  6347                           
  6348 ;; *************** function _I2C_Master_Write *****************
  6349 ;; Defined at:
  6350 ;;		line 48 in file "I2C.c"
  6351 ;; Parameters:    Size  Location     Type
  6352 ;;  d               2    1[BANK0 ] unsigned int 
  6353 ;; Auto vars:     Size  Location     Type
  6354 ;;		None
  6355 ;; Return value:  Size  Location     Type
  6356 ;;                  1    wreg      void 
  6357 ;; Registers used:
  6358 ;;		wreg, status,2, status,0, cstack
  6359 ;; Tracked objects:
  6360 ;;		On entry : 0/0
  6361 ;;		On exit  : 0/0
  6362 ;;		Unchanged: 0/0
  6363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6364 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6365 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6367 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6368 ;;Total ram usage:        2 bytes
  6369 ;; Hardware stack levels used:    1
  6370 ;; Hardware stack levels required when called:    8
  6371 ;; This function calls:
  6372 ;;		_I2C_Master_Wait
  6373 ;; This function is called by:
  6374 ;;		_loadRTC
  6375 ;;		_getRTC
  6376 ;; This function uses a non-reentrant model
  6377 ;;
  6378                           
  6379                           	psect	text26
  6380  002B1C                     __ptext26:
  6381                           	opt stack 0
  6382  002B1C                     _I2C_Master_Write:
  6383                           	opt stack 18
  6384                           
  6385                           ;I2C.c: 50: I2C_Master_Wait();
  6386                           
  6387                           ;incstack = 0
  6388  002B1C  EC4C  F015         	call	_I2C_Master_Wait	;wreg free
  6389                           
  6390                           ;I2C.c: 51: SSPBUF = d;
  6391  002B20  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  6392  002B24  0012               	return		;funcret
  6393  002B26                     __end_of_I2C_Master_Write:
  6394                           	opt stack 0
  6395                           tblptru	equ	0xFF8
  6396                           tblptrh	equ	0xFF7
  6397                           tblptrl	equ	0xFF6
  6398                           tablat	equ	0xFF5
  6399                           prodh	equ	0xFF4
  6400                           prodl	equ	0xFF3
  6401                           intcon	equ	0xFF2
  6402                           intcon2	equ	0xFF1
  6403                           intcon3	equ	0xFF0
  6404                           postinc0	equ	0xFEE
  6405                           wreg	equ	0xFE8
  6406                           postdec1	equ	0xFE5
  6407                           fsr1l	equ	0xFE1
  6408                           indf2	equ	0xFDF
  6409                           postinc2	equ	0xFDE
  6410                           postdec2	equ	0xFDD
  6411                           fsr2h	equ	0xFDA
  6412                           fsr2l	equ	0xFD9
  6413                           status	equ	0xFD8
  6414                           
  6415 ;; *************** function _I2C_Master_Stop *****************
  6416 ;; Defined at:
  6417 ;;		line 42 in file "I2C.c"
  6418 ;; Parameters:    Size  Location     Type
  6419 ;;		None
  6420 ;; Auto vars:     Size  Location     Type
  6421 ;;		None
  6422 ;; Return value:  Size  Location     Type
  6423 ;;                  1    wreg      void 
  6424 ;; Registers used:
  6425 ;;		wreg, status,2, status,0, cstack
  6426 ;; Tracked objects:
  6427 ;;		On entry : 0/0
  6428 ;;		On exit  : 0/0
  6429 ;;		Unchanged: 0/0
  6430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6434 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6435 ;;Total ram usage:        0 bytes
  6436 ;; Hardware stack levels used:    1
  6437 ;; Hardware stack levels required when called:    8
  6438 ;; This function calls:
  6439 ;;		_I2C_Master_Wait
  6440 ;; This function is called by:
  6441 ;;		_loadRTC
  6442 ;;		_getRTC
  6443 ;; This function uses a non-reentrant model
  6444 ;;
  6445                           
  6446                           	psect	text27
  6447  002B38                     __ptext27:
  6448                           	opt stack 0
  6449  002B38                     _I2C_Master_Stop:
  6450                           	opt stack 18
  6451                           
  6452                           ;I2C.c: 44: I2C_Master_Wait();
  6453                           
  6454                           ;incstack = 0
  6455  002B38  EC4C  F015         	call	_I2C_Master_Wait	;wreg free
  6456                           
  6457                           ;I2C.c: 45: PEN = 1;
  6458  002B3C  84C5               	bsf	4037,2,c	;volatile
  6459  002B3E  0012               	return		;funcret
  6460  002B40                     __end_of_I2C_Master_Stop:
  6461                           	opt stack 0
  6462                           tblptru	equ	0xFF8
  6463                           tblptrh	equ	0xFF7
  6464                           tblptrl	equ	0xFF6
  6465                           tablat	equ	0xFF5
  6466                           prodh	equ	0xFF4
  6467                           prodl	equ	0xFF3
  6468                           intcon	equ	0xFF2
  6469                           intcon2	equ	0xFF1
  6470                           intcon3	equ	0xFF0
  6471                           postinc0	equ	0xFEE
  6472                           wreg	equ	0xFE8
  6473                           postdec1	equ	0xFE5
  6474                           fsr1l	equ	0xFE1
  6475                           indf2	equ	0xFDF
  6476                           postinc2	equ	0xFDE
  6477                           postdec2	equ	0xFDD
  6478                           fsr2h	equ	0xFDA
  6479                           fsr2l	equ	0xFD9
  6480                           status	equ	0xFD8
  6481                           
  6482 ;; *************** function _I2C_Master_Start *****************
  6483 ;; Defined at:
  6484 ;;		line 30 in file "I2C.c"
  6485 ;; Parameters:    Size  Location     Type
  6486 ;;		None
  6487 ;; Auto vars:     Size  Location     Type
  6488 ;;		None
  6489 ;; Return value:  Size  Location     Type
  6490 ;;                  1    wreg      void 
  6491 ;; Registers used:
  6492 ;;		wreg, status,2, status,0, cstack
  6493 ;; Tracked objects:
  6494 ;;		On entry : 0/0
  6495 ;;		On exit  : 0/0
  6496 ;;		Unchanged: 0/0
  6497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6501 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6502 ;;Total ram usage:        0 bytes
  6503 ;; Hardware stack levels used:    1
  6504 ;; Hardware stack levels required when called:    8
  6505 ;; This function calls:
  6506 ;;		_I2C_Master_Wait
  6507 ;; This function is called by:
  6508 ;;		_loadRTC
  6509 ;;		_getRTC
  6510 ;; This function uses a non-reentrant model
  6511 ;;
  6512                           
  6513                           	psect	text28
  6514  002B40                     __ptext28:
  6515                           	opt stack 0
  6516  002B40                     _I2C_Master_Start:
  6517                           	opt stack 18
  6518                           
  6519                           ;I2C.c: 32: I2C_Master_Wait();
  6520                           
  6521                           ;incstack = 0
  6522  002B40  EC4C  F015         	call	_I2C_Master_Wait	;wreg free
  6523                           
  6524                           ;I2C.c: 33: SEN = 1;
  6525  002B44  80C5               	bsf	4037,0,c	;volatile
  6526  002B46  0012               	return		;funcret
  6527  002B48                     __end_of_I2C_Master_Start:
  6528                           	opt stack 0
  6529                           tblptru	equ	0xFF8
  6530                           tblptrh	equ	0xFF7
  6531                           tblptrl	equ	0xFF6
  6532                           tablat	equ	0xFF5
  6533                           prodh	equ	0xFF4
  6534                           prodl	equ	0xFF3
  6535                           intcon	equ	0xFF2
  6536                           intcon2	equ	0xFF1
  6537                           intcon3	equ	0xFF0
  6538                           postinc0	equ	0xFEE
  6539                           wreg	equ	0xFE8
  6540                           postdec1	equ	0xFE5
  6541                           fsr1l	equ	0xFE1
  6542                           indf2	equ	0xFDF
  6543                           postinc2	equ	0xFDE
  6544                           postdec2	equ	0xFDD
  6545                           fsr2h	equ	0xFDA
  6546                           fsr2l	equ	0xFD9
  6547                           status	equ	0xFD8
  6548                           
  6549 ;; *************** function _I2C_Master_Read *****************
  6550 ;; Defined at:
  6551 ;;		line 54 in file "I2C.c"
  6552 ;; Parameters:    Size  Location     Type
  6553 ;;  a               1    wreg     unsigned char 
  6554 ;; Auto vars:     Size  Location     Type
  6555 ;;  a               1    1[BANK0 ] unsigned char 
  6556 ;;  temp            1    2[BANK0 ] unsigned char 
  6557 ;; Return value:  Size  Location     Type
  6558 ;;                  1    wreg      unsigned char 
  6559 ;; Registers used:
  6560 ;;		wreg, status,2, status,0, cstack
  6561 ;; Tracked objects:
  6562 ;;		On entry : 0/0
  6563 ;;		On exit  : 0/0
  6564 ;;		Unchanged: 0/0
  6565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6567 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6569 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6570 ;;Total ram usage:        2 bytes
  6571 ;; Hardware stack levels used:    1
  6572 ;; Hardware stack levels required when called:    8
  6573 ;; This function calls:
  6574 ;;		_I2C_Master_Wait
  6575 ;; This function is called by:
  6576 ;;		_getRTC
  6577 ;; This function uses a non-reentrant model
  6578 ;;
  6579                           
  6580                           	psect	text29
  6581  0028B4                     __ptext29:
  6582                           	opt stack 0
  6583  0028B4                     _I2C_Master_Read:
  6584                           	opt stack 18
  6585                           
  6586                           ;incstack = 0
  6587                           ;I2C_Master_Read@a stored from wreg
  6588  0028B4  0100               	movlb	0	; () banked
  6589  0028B6  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  6590                           
  6591                           ;I2C.c: 56: unsigned char temp;
  6592                           ;I2C.c: 57: I2C_Master_Wait();
  6593  0028B8  EC4C  F015         	call	_I2C_Master_Wait	;wreg free
  6594                           
  6595                           ;I2C.c: 58: RCEN = 1;
  6596  0028BC  86C5               	bsf	4037,3,c	;volatile
  6597                           
  6598                           ;I2C.c: 59: I2C_Master_Wait();
  6599  0028BE  EC4C  F015         	call	_I2C_Master_Wait	;wreg free
  6600                           
  6601                           ;I2C.c: 60: temp = SSPBUF;
  6602  0028C2  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  6603                           
  6604                           ;I2C.c: 61: I2C_Master_Wait();
  6605  0028C6  EC4C  F015         	call	_I2C_Master_Wait	;wreg free
  6606                           
  6607                           ;I2C.c: 62: ACKDT = (a)?0:1;
  6608  0028CA  0100               	movlb	0	; () banked
  6609  0028CC  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  6610  0028CE  0100               	movlb	0	; () banked
  6611  0028D0  A4D8               	btfss	status,2,c
  6612  0028D2  D002               	goto	u2410
  6613  0028D4  8AC5               	bsf	4037,5,c	;volatile
  6614  0028D6  D001               	goto	l4200
  6615  0028D8                     u2410:
  6616  0028D8  9AC5               	bcf	4037,5,c	;volatile
  6617  0028DA                     l4200:
  6618                           
  6619                           ;I2C.c: 63: ACKEN = 1;
  6620  0028DA  88C5               	bsf	4037,4,c	;volatile
  6621                           
  6622                           ;I2C.c: 64: return temp;
  6623  0028DC  0100               	movlb	0	; () banked
  6624  0028DE  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  6625  0028E0  0012               	return	
  6626  0028E2                     __end_of_I2C_Master_Read:
  6627                           	opt stack 0
  6628                           tblptru	equ	0xFF8
  6629                           tblptrh	equ	0xFF7
  6630                           tblptrl	equ	0xFF6
  6631                           tablat	equ	0xFF5
  6632                           prodh	equ	0xFF4
  6633                           prodl	equ	0xFF3
  6634                           intcon	equ	0xFF2
  6635                           intcon2	equ	0xFF1
  6636                           intcon3	equ	0xFF0
  6637                           postinc0	equ	0xFEE
  6638                           wreg	equ	0xFE8
  6639                           postdec1	equ	0xFE5
  6640                           fsr1l	equ	0xFE1
  6641                           indf2	equ	0xFDF
  6642                           postinc2	equ	0xFDE
  6643                           postdec2	equ	0xFDD
  6644                           fsr2h	equ	0xFDA
  6645                           fsr2l	equ	0xFD9
  6646                           status	equ	0xFD8
  6647                           
  6648 ;; *************** function _I2C_Master_Wait *****************
  6649 ;; Defined at:
  6650 ;;		line 25 in file "I2C.c"
  6651 ;; Parameters:    Size  Location     Type
  6652 ;;		None
  6653 ;; Auto vars:     Size  Location     Type
  6654 ;;		None
  6655 ;; Return value:  Size  Location     Type
  6656 ;;                  1    wreg      void 
  6657 ;; Registers used:
  6658 ;;		wreg, status,2, status,0
  6659 ;; Tracked objects:
  6660 ;;		On entry : 0/0
  6661 ;;		On exit  : 0/0
  6662 ;;		Unchanged: 0/0
  6663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6666 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6667 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6668 ;;Total ram usage:        1 bytes
  6669 ;; Hardware stack levels used:    1
  6670 ;; Hardware stack levels required when called:    7
  6671 ;; This function calls:
  6672 ;;		Nothing
  6673 ;; This function is called by:
  6674 ;;		_I2C_Master_Start
  6675 ;;		_I2C_Master_Stop
  6676 ;;		_I2C_Master_Write
  6677 ;;		_I2C_Master_Read
  6678 ;;		_I2C_Master_RepeatedStart
  6679 ;; This function uses a non-reentrant model
  6680 ;;
  6681                           
  6682                           	psect	text30
  6683  002A98                     __ptext30:
  6684                           	opt stack 0
  6685  002A98                     _I2C_Master_Wait:
  6686                           	opt stack 18
  6687  002A98                     l196:
  6688  002A98  B4C7               	btfsc	4039,2,c	;volatile
  6689  002A9A  D7FE               	goto	l196
  6690  002A9C  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  6691  002AA0  0E1F               	movlw	31
  6692  002AA2  0100               	movlb	0	; () banked
  6693  002AA4  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  6694  002AA6  B4D8               	btfsc	status,2,c
  6695  002AA8  0012               	return	
  6696  002AAA  D7F6               	goto	l196
  6697  002AAC                     __end_of_I2C_Master_Wait:
  6698                           	opt stack 0
  6699                           tblptru	equ	0xFF8
  6700                           tblptrh	equ	0xFF7
  6701                           tblptrl	equ	0xFF6
  6702                           tablat	equ	0xFF5
  6703                           prodh	equ	0xFF4
  6704                           prodl	equ	0xFF3
  6705                           intcon	equ	0xFF2
  6706                           intcon2	equ	0xFF1
  6707                           intcon3	equ	0xFF0
  6708                           postinc0	equ	0xFEE
  6709                           wreg	equ	0xFE8
  6710                           postdec1	equ	0xFE5
  6711                           fsr1l	equ	0xFE1
  6712                           indf2	equ	0xFDF
  6713                           postinc2	equ	0xFDE
  6714                           postdec2	equ	0xFDD
  6715                           fsr2h	equ	0xFDA
  6716                           fsr2l	equ	0xFD9
  6717                           status	equ	0xFD8
  6718                           
  6719 ;; *************** function _change_state_to_menu_22 *****************
  6720 ;; Defined at:
  6721 ;;		line 440 in file "UI.c"
  6722 ;; Parameters:    Size  Location     Type
  6723 ;;		None
  6724 ;; Auto vars:     Size  Location     Type
  6725 ;;		None
  6726 ;; Return value:  Size  Location     Type
  6727 ;;                  1    wreg      void 
  6728 ;; Registers used:
  6729 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6730 ;; Tracked objects:
  6731 ;;		On entry : 0/0
  6732 ;;		On exit  : 0/0
  6733 ;;		Unchanged: 0/0
  6734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6736 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6738 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6739 ;;Total ram usage:        0 bytes
  6740 ;; Hardware stack levels used:    1
  6741 ;; Hardware stack levels required when called:   10
  6742 ;; This function calls:
  6743 ;;		_lcdInst
  6744 ;;		_printf
  6745 ;; This function is called by:
  6746 ;;		_UI
  6747 ;; This function uses a non-reentrant model
  6748 ;;
  6749                           
  6750                           	psect	text31
  6751  0025C8                     __ptext31:
  6752                           	opt stack 0
  6753  0025C8                     _change_state_to_menu_22:
  6754                           	opt stack 19
  6755                           
  6756                           ;UI.c: 441: cur_state = 22;
  6757                           
  6758                           ; BSR set to: 0
  6759                           ;incstack = 0
  6760  0025C8  0E00               	movlw	0
  6761  0025CA  0100               	movlb	0	; () banked
  6762  0025CC  6FE8               	movwf	(_cur_state+1)& (0+255),b
  6763  0025CE  0E16               	movlw	22
  6764  0025D0  6FE7               	movwf	_cur_state& (0+255),b
  6765                           
  6766                           ; BSR set to: 0
  6767                           ;UI.c: 443: lcdInst(0b10000000);;
  6768  0025D2  0E80               	movlw	128
  6769  0025D4  EC7A  F015         	call	_lcdInst
  6770                           
  6771                           ;UI.c: 444: printf("2. SORT        <");
  6772  0025D8  0E64               	movlw	low STR_19
  6773  0025DA  0100               	movlb	0	; () banked
  6774  0025DC  6F8E               	movwf	printf@f& (0+255),b
  6775  0025DE  0EFF               	movlw	high STR_19
  6776  0025E0  0100               	movlb	0	; () banked
  6777  0025E2  6F8F               	movwf	(printf@f+1)& (0+255),b
  6778  0025E4  ECBB  F002         	call	_printf	;wreg free
  6779                           
  6780                           ;UI.c: 445: lcdInst(0b11000000);;
  6781  0025E8  0EC0               	movlw	192
  6782  0025EA  EC7A  F015         	call	_lcdInst
  6783                           
  6784                           ;UI.c: 446: printf("3. LOGS         ");
  6785  0025EE  0E65               	movlw	low STR_21
  6786  0025F0  0100               	movlb	0	; () banked
  6787  0025F2  6F8E               	movwf	printf@f& (0+255),b
  6788  0025F4  0EFE               	movlw	high STR_21
  6789  0025F6  0100               	movlb	0	; () banked
  6790  0025F8  6F8F               	movwf	(printf@f+1)& (0+255),b
  6791  0025FA  ECBB  F002         	call	_printf	;wreg free
  6792  0025FE  0012               	return		;funcret
  6793  002600                     __end_of_change_state_to_menu_22:
  6794                           	opt stack 0
  6795                           tblptru	equ	0xFF8
  6796                           tblptrh	equ	0xFF7
  6797                           tblptrl	equ	0xFF6
  6798                           tablat	equ	0xFF5
  6799                           prodh	equ	0xFF4
  6800                           prodl	equ	0xFF3
  6801                           intcon	equ	0xFF2
  6802                           intcon2	equ	0xFF1
  6803                           intcon3	equ	0xFF0
  6804                           postinc0	equ	0xFEE
  6805                           wreg	equ	0xFE8
  6806                           postdec1	equ	0xFE5
  6807                           fsr1l	equ	0xFE1
  6808                           indf2	equ	0xFDF
  6809                           postinc2	equ	0xFDE
  6810                           postdec2	equ	0xFDD
  6811                           fsr2h	equ	0xFDA
  6812                           fsr2l	equ	0xFD9
  6813                           status	equ	0xFD8
  6814                           
  6815 ;; *************** function _change_state_to_menu_12 *****************
  6816 ;; Defined at:
  6817 ;;		line 432 in file "UI.c"
  6818 ;; Parameters:    Size  Location     Type
  6819 ;;		None
  6820 ;; Auto vars:     Size  Location     Type
  6821 ;;		None
  6822 ;; Return value:  Size  Location     Type
  6823 ;;                  1    wreg      void 
  6824 ;; Registers used:
  6825 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6826 ;; Tracked objects:
  6827 ;;		On entry : 0/0
  6828 ;;		On exit  : 0/0
  6829 ;;		Unchanged: 0/0
  6830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6834 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6835 ;;Total ram usage:        0 bytes
  6836 ;; Hardware stack levels used:    1
  6837 ;; Hardware stack levels required when called:   10
  6838 ;; This function calls:
  6839 ;;		_lcdInst
  6840 ;;		_printf
  6841 ;; This function is called by:
  6842 ;;		_UI
  6843 ;; This function uses a non-reentrant model
  6844 ;;
  6845                           
  6846                           	psect	text32
  6847  002600                     __ptext32:
  6848                           	opt stack 0
  6849  002600                     _change_state_to_menu_12:
  6850                           	opt stack 19
  6851                           
  6852                           ;UI.c: 433: cur_state = 12;
  6853                           
  6854                           ;incstack = 0
  6855  002600  0E00               	movlw	0
  6856  002602  0100               	movlb	0	; () banked
  6857  002604  6FE8               	movwf	(_cur_state+1)& (0+255),b
  6858  002606  0E0C               	movlw	12
  6859  002608  6FE7               	movwf	_cur_state& (0+255),b
  6860                           
  6861                           ; BSR set to: 0
  6862                           ;UI.c: 435: lcdInst(0b10000000);;
  6863  00260A  0E80               	movlw	128
  6864  00260C  EC7A  F015         	call	_lcdInst
  6865                           
  6866                           ;UI.c: 436: printf("1. DATE/TIME    ");
  6867  002610  0E87               	movlw	low STR_18
  6868  002612  0100               	movlb	0	; () banked
  6869  002614  6F8E               	movwf	printf@f& (0+255),b
  6870  002616  0EFE               	movlw	high STR_18
  6871  002618  0100               	movlb	0	; () banked
  6872  00261A  6F8F               	movwf	(printf@f+1)& (0+255),b
  6873  00261C  ECBB  F002         	call	_printf	;wreg free
  6874                           
  6875                           ;UI.c: 437: lcdInst(0b11000000);;
  6876  002620  0EC0               	movlw	192
  6877  002622  EC7A  F015         	call	_lcdInst
  6878                           
  6879                           ;UI.c: 438: printf("2. SORT        <");
  6880  002626  0E64               	movlw	low STR_19
  6881  002628  0100               	movlb	0	; () banked
  6882  00262A  6F8E               	movwf	printf@f& (0+255),b
  6883  00262C  0EFF               	movlw	high STR_19
  6884  00262E  0100               	movlb	0	; () banked
  6885  002630  6F8F               	movwf	(printf@f+1)& (0+255),b
  6886  002632  ECBB  F002         	call	_printf	;wreg free
  6887  002636  0012               	return		;funcret
  6888  002638                     __end_of_change_state_to_menu_12:
  6889                           	opt stack 0
  6890                           tblptru	equ	0xFF8
  6891                           tblptrh	equ	0xFF7
  6892                           tblptrl	equ	0xFF6
  6893                           tablat	equ	0xFF5
  6894                           prodh	equ	0xFF4
  6895                           prodl	equ	0xFF3
  6896                           intcon	equ	0xFF2
  6897                           intcon2	equ	0xFF1
  6898                           intcon3	equ	0xFF0
  6899                           postinc0	equ	0xFEE
  6900                           wreg	equ	0xFE8
  6901                           postdec1	equ	0xFE5
  6902                           fsr1l	equ	0xFE1
  6903                           indf2	equ	0xFDF
  6904                           postinc2	equ	0xFDE
  6905                           postdec2	equ	0xFDD
  6906                           fsr2h	equ	0xFDA
  6907                           fsr2l	equ	0xFD9
  6908                           status	equ	0xFD8
  6909                           
  6910 ;; *************** function _printf *****************
  6911 ;; Defined at:
  6912 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  6913 ;; Parameters:    Size  Location     Type
  6914 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  6915 ;;		 -> STR_50(21), STR_49(11), STR_48(24), STR_35(17), 
  6916 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
  6917 ;;		 -> STR_30(17), STR_29(17), STR_28(17), STR_27(17), 
  6918 ;;		 -> STR_26(17), STR_25(17), STR_24(17), STR_23(17), 
  6919 ;;		 -> STR_22(17), STR_21(17), STR_20(17), STR_19(17), 
  6920 ;;		 -> STR_18(17), STR_17(17), STR_16(17), STR_15(17), 
  6921 ;;		 -> STR_14(3), STR_13(17), STR_12(17), STR_11(17), 
  6922 ;;		 -> STR_10(17), STR_9(17), STR_8(18), STR_7(10), 
  6923 ;;		 -> STR_6(17), STR_5(7), STR_4(17), STR_3(18), 
  6924 ;;		 -> STR_2(21), STR_1(17), 
  6925 ;; Auto vars:     Size  Location     Type
  6926 ;;  tmpval          4    0        struct .
  6927 ;;  width           2   41[BANK0 ] int 
  6928 ;;  len             2   37[BANK0 ] unsigned int 
  6929 ;;  val             2   35[BANK0 ] unsigned int 
  6930 ;;  cp              2   33[BANK0 ] PTR const unsigned char 
  6931 ;;		 -> STR_51(7), printRTC@month(4), 
  6932 ;;  ap              2   31[BANK0 ] PTR void [1]
  6933 ;;		 -> ?i2_printf(2), ?_printf(2), 
  6934 ;;  c               1   40[BANK0 ] char 
  6935 ;;  flag            1   39[BANK0 ] unsigned char 
  6936 ;;  prec            1   30[BANK0 ] char 
  6937 ;; Return value:  Size  Location     Type
  6938 ;;                  2   14[BANK0 ] int 
  6939 ;; Registers used:
  6940 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6941 ;; Tracked objects:
  6942 ;;		On entry : 0/0
  6943 ;;		On exit  : 0/0
  6944 ;;		Unchanged: 0/0
  6945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6946 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6947 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6948 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6949 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6950 ;;Total ram usage:       29 bytes
  6951 ;; Hardware stack levels used:    1
  6952 ;; Hardware stack levels required when called:    9
  6953 ;; This function calls:
  6954 ;;		___lwdiv
  6955 ;;		___lwmod
  6956 ;;		___wmul
  6957 ;;		_isdigit
  6958 ;;		_putch
  6959 ;; This function is called by:
  6960 ;;		_UI
  6961 ;;		_change_state_to_menu_start
  6962 ;;		_change_state_to_menu_12
  6963 ;;		_change_state_to_menu_22
  6964 ;;		_printRTC
  6965 ;; This function uses a non-reentrant model
  6966 ;;
  6967                           
  6968                           	psect	text33
  6969  000576                     __ptext33:
  6970                           	opt stack 0
  6971  000576                     _printf:
  6972                           	opt stack 19
  6973                           
  6974                           ;doprnt.c: 466: va_list ap;
  6975                           ;doprnt.c: 499: signed char c;
  6976                           ;doprnt.c: 501: int width;
  6977                           ;doprnt.c: 506: signed char prec;
  6978                           ;doprnt.c: 508: unsigned char flag;
  6979                           ;doprnt.c: 523: union {
  6980                           ;doprnt.c: 524: unsigned long vd;
  6981                           ;doprnt.c: 525: double integ;
  6982                           ;doprnt.c: 526: } tmpval;
  6983                           ;doprnt.c: 528: unsigned int val;
  6984                           ;doprnt.c: 529: unsigned len;
  6985                           ;doprnt.c: 530: const char * cp;
  6986                           ;doprnt.c: 533: *ap = __va_start();
  6987                           
  6988                           ;incstack = 0
  6989  000576  0E90               	movlw	low (?_printf+2)
  6990  000578  0100               	movlb	0	; () banked
  6991  00057A  6F9F               	movwf	printf@ap& (0+255),b
  6992  00057C  0E00               	movlw	high (?_printf+2)
  6993  00057E  0100               	movlb	0	; () banked
  6994  000580  6FA0               	movwf	(printf@ap+1)& (0+255),b
  6995                           
  6996                           ;doprnt.c: 536: while(c = *f++) {
  6997  000582  D1EE               	goto	l4488
  6998  000584                     l4364:
  6999                           
  7000                           ; BSR set to: 0
  7001                           ;doprnt.c: 538: if(c != '%')
  7002  000584  0E25               	movlw	37
  7003  000586  0100               	movlb	0	; () banked
  7004  000588  19A8               	xorwf	printf@c& (0+255),w,b
  7005  00058A  B4D8               	btfsc	status,2,c
  7006  00058C  D005               	goto	l4368
  7007                           
  7008                           ; BSR set to: 0
  7009                           ;doprnt.c: 540: {
  7010                           ;doprnt.c: 541: (putch(c) );
  7011  00058E  0100               	movlb	0	; () banked
  7012  000590  51A8               	movf	printf@c& (0+255),w,b
  7013  000592  EC72  F015         	call	_putch
  7014                           
  7015                           ;doprnt.c: 542: continue;
  7016  000596  D1E4               	goto	l4488
  7017  000598                     l4368:
  7018                           
  7019                           ;doprnt.c: 543: }
  7020                           ;doprnt.c: 546: width = 0;
  7021  000598  0E00               	movlw	0
  7022  00059A  0100               	movlb	0	; () banked
  7023  00059C  6FAA               	movwf	(printf@width+1)& (0+255),b
  7024  00059E  0E00               	movlw	0
  7025  0005A0  6FA9               	movwf	printf@width& (0+255),b
  7026                           
  7027                           ;doprnt.c: 548: flag = 0;
  7028  0005A2  0E00               	movlw	0
  7029  0005A4  0100               	movlb	0	; () banked
  7030  0005A6  6FA7               	movwf	printf@flag& (0+255),b
  7031                           
  7032                           ; BSR set to: 0
  7033                           ;doprnt.c: 551: switch(*f) {
  7034                           
  7035                           ;doprnt.c: 550: for(;;) {
  7036  0005A8  D005               	goto	l4374
  7037  0005AA                     l4370:
  7038                           
  7039                           ;doprnt.c: 580: flag |= 0x04;
  7040  0005AA  0100               	movlb	0	; () banked
  7041  0005AC  85A7               	bsf	printf@flag& (0+255),2,b
  7042                           
  7043                           ;doprnt.c: 581: f++;
  7044  0005AE  0100               	movlb	0	; () banked
  7045  0005B0  4B8E               	infsnz	printf@f& (0+255),f,b
  7046  0005B2  2B8F               	incf	(printf@f+1)& (0+255),f,b
  7047  0005B4                     l4374:
  7048  0005B4  C08E  FFF6         	movff	printf@f,tblptrl
  7049  0005B8  C08F  FFF7         	movff	printf@f+1,tblptrh
  7050  0005BC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7051  0005BC  6AF8               	clrf	tblptru,c
  7052  0005BE                     	endif
  7053  0005BE                     	if	0	;tblptru may be non-zero
  7054  0005BE                     	endif
  7055  0005BE  0008               	tblrd		*
  7056  0005C0  50F5               	movf	tablat,w,c
  7057                           
  7058                           ; Switch size 1, requested type "space"
  7059                           ; Number of cases is 1, Range of values is 48 to 48
  7060                           ; switch strategies available:
  7061                           ; Name         Instructions Cycles
  7062                           ; simple_byte            4     3 (average)
  7063                           ;	Chosen strategy is simple_byte
  7064  0005C2  0A30               	xorlw	48	; case 48
  7065  0005C4  B4D8               	btfsc	status,2,c
  7066  0005C6  D7F1               	goto	l4370
  7067                           
  7068                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  7069                           
  7070                           ;doprnt.c: 586: }
  7071                           
  7072                           ;doprnt.c: 585: break;
  7073  0005C8  C08E  FFF6         	movff	printf@f,tblptrl
  7074  0005CC  C08F  FFF7         	movff	printf@f+1,tblptrh
  7075  0005D0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7076  0005D0  6AF8               	clrf	tblptru,c
  7077  0005D2                     	endif
  7078  0005D2                     	if	0	;tblptru may be non-zero
  7079  0005D2                     	endif
  7080  0005D2  0008               	tblrd		*
  7081  0005D4  50F5               	movf	tablat,w,c
  7082  0005D6  ECB4  F014         	call	_isdigit
  7083  0005DA  A0D8               	btfss	status,0,c
  7084  0005DC  D0CF               	goto	l4420
  7085                           
  7086                           ;doprnt.c: 598: width = 0;
  7087  0005DE  0E00               	movlw	0
  7088  0005E0  0100               	movlb	0	; () banked
  7089  0005E2  6FAA               	movwf	(printf@width+1)& (0+255),b
  7090  0005E4  0E00               	movlw	0
  7091  0005E6  6FA9               	movwf	printf@width& (0+255),b
  7092  0005E8                     l4380:
  7093                           
  7094                           ;doprnt.c: 600: width *= 10;
  7095  0005E8  C0A9  F080         	movff	printf@width,___wmul@multiplier
  7096  0005EC  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
  7097  0005F0  0E00               	movlw	0
  7098  0005F2  0100               	movlb	0	; () banked
  7099  0005F4  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7100  0005F6  0E0A               	movlw	10
  7101  0005F8  6F82               	movwf	___wmul@multiplicand& (0+255),b
  7102  0005FA  EC37  F013         	call	___wmul	;wreg free
  7103  0005FE  C080  F0A9         	movff	?___wmul,printf@width
  7104  000602  C081  F0AA         	movff	?___wmul+1,printf@width+1
  7105                           
  7106                           ;doprnt.c: 601: width += *f++ - '0';
  7107  000606  0ED0               	movlw	208
  7108  000608  0100               	movlb	0	; () banked
  7109  00060A  6F9A               	movwf	??_printf& (0+255),b
  7110  00060C  0EFF               	movlw	255
  7111  00060E  0100               	movlb	0	; () banked
  7112  000610  6F9B               	movwf	(??_printf+1)& (0+255),b
  7113  000612  C08E  FFF6         	movff	printf@f,tblptrl
  7114  000616  C08F  FFF7         	movff	printf@f+1,tblptrh
  7115  00061A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7116  00061A  6AF8               	clrf	tblptru,c
  7117  00061C                     	endif
  7118  00061C                     	if	0	;tblptru may be non-zero
  7119  00061C                     	endif
  7120  00061C  0008               	tblrd		*
  7121  00061E  50F5               	movf	tablat,w,c
  7122  000620  0100               	movlb	0	; () banked
  7123  000622  6F9C               	movwf	(??_printf+2)& (0+255),b
  7124  000624  6B9D               	clrf	(??_printf+3)& (0+255),b
  7125  000626  0100               	movlb	0	; () banked
  7126  000628  519A               	movf	??_printf& (0+255),w,b
  7127  00062A  0100               	movlb	0	; () banked
  7128  00062C  279C               	addwf	(??_printf+2)& (0+255),f,b
  7129  00062E  0100               	movlb	0	; () banked
  7130  000630  519B               	movf	(??_printf+1)& (0+255),w,b
  7131  000632  0100               	movlb	0	; () banked
  7132  000634  239D               	addwfc	(??_printf+3)& (0+255),f,b
  7133  000636  0100               	movlb	0	; () banked
  7134  000638  519C               	movf	(??_printf+2)& (0+255),w,b
  7135  00063A  0100               	movlb	0	; () banked
  7136  00063C  27A9               	addwf	printf@width& (0+255),f,b
  7137  00063E  0100               	movlb	0	; () banked
  7138  000640  519D               	movf	(??_printf+3)& (0+255),w,b
  7139  000642  0100               	movlb	0	; () banked
  7140  000644  23AA               	addwfc	(printf@width+1)& (0+255),f,b
  7141                           
  7142                           ; BSR set to: 0
  7143  000646  0100               	movlb	0	; () banked
  7144  000648  4B8E               	infsnz	printf@f& (0+255),f,b
  7145  00064A  2B8F               	incf	(printf@f+1)& (0+255),f,b
  7146                           
  7147                           ; BSR set to: 0
  7148                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  7149  00064C  C08E  FFF6         	movff	printf@f,tblptrl
  7150  000650  C08F  FFF7         	movff	printf@f+1,tblptrh
  7151  000654                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7152  000654  6AF8               	clrf	tblptru,c
  7153  000656                     	endif
  7154  000656                     	if	0	;tblptru may be non-zero
  7155  000656                     	endif
  7156  000656  0008               	tblrd		*
  7157  000658  50F5               	movf	tablat,w,c
  7158  00065A  ECB4  F014         	call	_isdigit
  7159  00065E  A0D8               	btfss	status,0,c
  7160  000660  D08D               	goto	l4420
  7161  000662  D7C2               	goto	l4380
  7162  000664                     l4388:
  7163                           
  7164                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  7165  000664  C09F  FFD9         	movff	printf@ap,fsr2l
  7166  000668  C0A0  FFDA         	movff	printf@ap+1,fsr2h
  7167  00066C  CFDE F0A1          	movff	postinc2,printf@cp
  7168  000670  CFDD F0A2          	movff	postdec2,printf@cp+1
  7169  000674  0E02               	movlw	2
  7170  000676  0100               	movlb	0	; () banked
  7171  000678  279F               	addwf	printf@ap& (0+255),f,b
  7172  00067A  0E00               	movlw	0
  7173  00067C  23A0               	addwfc	(printf@ap+1)& (0+255),f,b
  7174                           
  7175                           ; BSR set to: 0
  7176                           ;doprnt.c: 740: if(!cp)
  7177  00067E  0100               	movlb	0	; () banked
  7178  000680  51A1               	movf	printf@cp& (0+255),w,b
  7179  000682  0100               	movlb	0	; () banked
  7180  000684  11A2               	iorwf	(printf@cp+1)& (0+255),w,b
  7181  000686  A4D8               	btfss	status,2,c
  7182  000688  D006               	goto	l4396
  7183                           
  7184                           ; BSR set to: 0
  7185                           ;doprnt.c: 741: cp = "(null)";
  7186  00068A  0EBD               	movlw	low STR_51
  7187  00068C  0100               	movlb	0	; () banked
  7188  00068E  6FA1               	movwf	printf@cp& (0+255),b
  7189  000690  0EFF               	movlw	high STR_51
  7190  000692  0100               	movlb	0	; () banked
  7191  000694  6FA2               	movwf	(printf@cp+1)& (0+255),b
  7192  000696                     l4396:
  7193                           
  7194                           ; BSR set to: 0
  7195                           ;doprnt.c: 745: len = 0;
  7196  000696  0E00               	movlw	0
  7197  000698  0100               	movlb	0	; () banked
  7198  00069A  6FA6               	movwf	(printf@len+1)& (0+255),b
  7199  00069C  0E00               	movlw	0
  7200  00069E  6FA5               	movwf	printf@len& (0+255),b
  7201                           
  7202                           ;doprnt.c: 746: while(cp[len])
  7203  0006A0  D003               	goto	l4400
  7204  0006A2                     l4398:
  7205                           
  7206                           ;doprnt.c: 747: len++;
  7207  0006A2  0100               	movlb	0	; () banked
  7208  0006A4  4BA5               	infsnz	printf@len& (0+255),f,b
  7209  0006A6  2BA6               	incf	(printf@len+1)& (0+255),f,b
  7210  0006A8                     l4400:
  7211                           
  7212                           ; BSR set to: 0
  7213  0006A8  0100               	movlb	0	; () banked
  7214  0006AA  51A5               	movf	printf@len& (0+255),w,b
  7215  0006AC  0100               	movlb	0	; () banked
  7216  0006AE  25A1               	addwf	printf@cp& (0+255),w,b
  7217  0006B0  0100               	movlb	0	; () banked
  7218  0006B2  6F9A               	movwf	??_printf& (0+255),b
  7219  0006B4  0100               	movlb	0	; () banked
  7220  0006B6  51A6               	movf	(printf@len+1)& (0+255),w,b
  7221  0006B8  0100               	movlb	0	; () banked
  7222  0006BA  21A2               	addwfc	(printf@cp+1)& (0+255),w,b
  7223  0006BC  0100               	movlb	0	; () banked
  7224  0006BE  6F9B               	movwf	(??_printf+1)& (0+255),b
  7225  0006C0  C09A  FFF6         	movff	??_printf,tblptrl
  7226  0006C4  C09B  FFF7         	movff	??_printf+1,tblptrh
  7227  0006C8  0E00               	movlw	low (__mediumconst shr (0+16))
  7228  0006CA  6EF8               	movwf	tblptru,c
  7229  0006CC  0E0F               	movlw	(high __ramtop+-1)
  7230  0006CE  64F7               	cpfsgt	tblptrh,c
  7231  0006D0  D003               	bra	u2677
  7232  0006D2  0008               	tblrd		*
  7233  0006D4  50F5               	movf	tablat,w,c
  7234  0006D6  D005               	bra	u2670
  7235  0006D8                     u2677:
  7236  0006D8  CFF6 FFE9          	movff	tblptrl,fsr0l
  7237  0006DC  CFF7 FFEA          	movff	tblptrh,fsr0h
  7238  0006E0  50EF               	movf	indf0,w,c
  7239  0006E2                     u2670:
  7240  0006E2  0900               	iorlw	0
  7241  0006E4  A4D8               	btfss	status,2,c
  7242  0006E6  D7DD               	goto	l4398
  7243                           
  7244                           ;doprnt.c: 757: if(width > len)
  7245  0006E8  0100               	movlb	0	; () banked
  7246  0006EA  51A9               	movf	printf@width& (0+255),w,b
  7247  0006EC  0100               	movlb	0	; () banked
  7248  0006EE  5DA5               	subwf	printf@len& (0+255),w,b
  7249  0006F0  0100               	movlb	0	; () banked
  7250  0006F2  51AA               	movf	(printf@width+1)& (0+255),w,b
  7251  0006F4  0100               	movlb	0	; () banked
  7252  0006F6  59A6               	subwfb	(printf@len+1)& (0+255),w,b
  7253  0006F8  B0D8               	btfsc	status,0,c
  7254  0006FA  D009               	goto	l4406
  7255                           
  7256                           ; BSR set to: 0
  7257                           ;doprnt.c: 758: width -= len;
  7258  0006FC  0100               	movlb	0	; () banked
  7259  0006FE  51A5               	movf	printf@len& (0+255),w,b
  7260  000700  0100               	movlb	0	; () banked
  7261  000702  5FA9               	subwf	printf@width& (0+255),f,b
  7262  000704  0100               	movlb	0	; () banked
  7263  000706  51A6               	movf	(printf@len+1)& (0+255),w,b
  7264  000708  0100               	movlb	0	; () banked
  7265  00070A  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
  7266  00070C  D009               	goto	l4410
  7267  00070E                     l4406:
  7268                           
  7269                           ; BSR set to: 0
  7270                           ;doprnt.c: 759: else
  7271                           ;doprnt.c: 760: width = 0;
  7272  00070E  0E00               	movlw	0
  7273  000710  0100               	movlb	0	; () banked
  7274  000712  6FAA               	movwf	(printf@width+1)& (0+255),b
  7275  000714  0E00               	movlw	0
  7276  000716  6FA9               	movwf	printf@width& (0+255),b
  7277                           
  7278                           ; BSR set to: 0
  7279                           ;doprnt.c: 764: while(width--)
  7280  000718  D003               	goto	l4410
  7281  00071A                     l4408:
  7282                           
  7283                           ; BSR set to: 0
  7284                           ;doprnt.c: 765: (putch(' ') );
  7285  00071A  0E20               	movlw	32
  7286  00071C  EC72  F015         	call	_putch
  7287  000720                     l4410:
  7288  000720  0100               	movlb	0	; () banked
  7289  000722  07A9               	decf	printf@width& (0+255),f,b
  7290  000724  A0D8               	btfss	status,0,c
  7291  000726  07AA               	decf	(printf@width+1)& (0+255),f,b
  7292  000728  0100               	movlb	0	; () banked
  7293  00072A  29A9               	incf	printf@width& (0+255),w,b
  7294  00072C  E1F6               	bnz	l4408
  7295  00072E  0100               	movlb	0	; () banked
  7296  000730  29AA               	incf	(printf@width+1)& (0+255),w,b
  7297  000732  B4D8               	btfsc	status,2,c
  7298  000734  D017               	goto	l4416
  7299  000736  D7F1               	goto	l4408
  7300  000738                     l4412:
  7301                           
  7302                           ; BSR set to: 0
  7303                           ;doprnt.c: 768: (putch(*cp++) );
  7304  000738  C0A1  FFF6         	movff	printf@cp,tblptrl
  7305  00073C  C0A2  FFF7         	movff	printf@cp+1,tblptrh
  7306  000740  0E00               	movlw	low (__mediumconst shr (0+16))
  7307  000742  6EF8               	movwf	tblptru,c
  7308  000744  0E0F               	movlw	(high __ramtop+-1)
  7309  000746  64F7               	cpfsgt	tblptrh,c
  7310  000748  D003               	bra	u2717
  7311  00074A  0008               	tblrd		*
  7312  00074C  50F5               	movf	tablat,w,c
  7313  00074E  D005               	bra	u2710
  7314  000750                     u2717:
  7315  000750  CFF6 FFE9          	movff	tblptrl,fsr0l
  7316  000754  CFF7 FFEA          	movff	tblptrh,fsr0h
  7317  000758  50EF               	movf	indf0,w,c
  7318  00075A                     u2710:
  7319  00075A  EC72  F015         	call	_putch
  7320  00075E  0100               	movlb	0	; () banked
  7321  000760  4BA1               	infsnz	printf@cp& (0+255),f,b
  7322  000762  2BA2               	incf	(printf@cp+1)& (0+255),f,b
  7323  000764                     l4416:
  7324                           
  7325                           ; BSR set to: 0
  7326  000764  0100               	movlb	0	; () banked
  7327  000766  07A5               	decf	printf@len& (0+255),f,b
  7328  000768  A0D8               	btfss	status,0,c
  7329  00076A  07A6               	decf	(printf@len+1)& (0+255),f,b
  7330  00076C  0100               	movlb	0	; () banked
  7331  00076E  29A5               	incf	printf@len& (0+255),w,b
  7332  000770  E1E3               	bnz	l4412
  7333  000772  0100               	movlb	0	; () banked
  7334  000774  29A6               	incf	(printf@len+1)& (0+255),w,b
  7335  000776  B4D8               	btfsc	status,2,c
  7336  000778  D0F3               	goto	l4488
  7337  00077A  D7DE               	goto	l4412
  7338  00077C                     l4420:
  7339  00077C  C08E  FFF6         	movff	printf@f,tblptrl
  7340  000780  C08F  FFF7         	movff	printf@f+1,tblptrh
  7341  000784  0100               	movlb	0	; () banked
  7342  000786  4B8E               	infsnz	printf@f& (0+255),f,b
  7343  000788  2B8F               	incf	(printf@f+1)& (0+255),f,b
  7344  00078A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7345  00078A  6AF8               	clrf	tblptru,c
  7346  00078C                     	endif
  7347  00078C                     	if	0	;tblptru may be non-zero
  7348  00078C                     	endif
  7349  00078C  0008               	tblrd		*
  7350  00078E  CFF5 F0A8          	movff	tablat,printf@c
  7351  000792  0100               	movlb	0	; () banked
  7352  000794  51A8               	movf	printf@c& (0+255),w,b
  7353                           
  7354                           ; Switch size 1, requested type "space"
  7355                           ; Number of cases is 4, Range of values is 0 to 115
  7356                           ; switch strategies available:
  7357                           ; Name         Instructions Cycles
  7358                           ; simple_byte           13     7 (average)
  7359                           ;	Chosen strategy is simple_byte
  7360  000796  0A00               	xorlw	0	; case 0
  7361  000798  B4D8               	btfsc	status,2,c
  7362  00079A  0012               	return	
  7363  00079C  0A64               	xorlw	100	; case 100
  7364  00079E  B4D8               	btfsc	status,2,c
  7365  0007A0  D007               	goto	l4422
  7366  0007A2  0A0D               	xorlw	13	; case 105
  7367  0007A4  B4D8               	btfsc	status,2,c
  7368  0007A6  D004               	goto	l4422
  7369  0007A8  0A1A               	xorlw	26	; case 115
  7370  0007AA  B4D8               	btfsc	status,2,c
  7371  0007AC  D75B               	goto	l4388
  7372  0007AE  D0D8               	goto	l4488
  7373  0007B0                     l4422:
  7374                           
  7375                           ;doprnt.c: 1253: {
  7376                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7377  0007B0  C09F  FFD9         	movff	printf@ap,fsr2l
  7378  0007B4  C0A0  FFDA         	movff	printf@ap+1,fsr2h
  7379  0007B8  CFDE F0A3          	movff	postinc2,printf@val
  7380  0007BC  CFDD F0A4          	movff	postdec2,printf@val+1
  7381  0007C0  0E02               	movlw	2
  7382  0007C2  0100               	movlb	0	; () banked
  7383  0007C4  279F               	addwf	printf@ap& (0+255),f,b
  7384  0007C6  0E00               	movlw	0
  7385  0007C8  23A0               	addwfc	(printf@ap+1)& (0+255),f,b
  7386                           
  7387                           ; BSR set to: 0
  7388                           ;doprnt.c: 1261: if((int)val < 0) {
  7389  0007CA  0100               	movlb	0	; () banked
  7390  0007CC  AFA4               	btfss	(printf@val+1)& (0+255),7,b
  7391  0007CE  D008               	goto	l4432
  7392                           
  7393                           ; BSR set to: 0
  7394                           ;doprnt.c: 1262: flag |= 0x03;
  7395  0007D0  0E03               	movlw	3
  7396  0007D2  0100               	movlb	0	; () banked
  7397  0007D4  13A7               	iorwf	printf@flag& (0+255),f,b
  7398                           
  7399                           ; BSR set to: 0
  7400                           ;doprnt.c: 1263: val = -val;
  7401  0007D6  0100               	movlb	0	; () banked
  7402  0007D8  6DA3               	negf	printf@val& (0+255),b
  7403  0007DA  1FA4               	comf	(printf@val+1)& (0+255),f,b
  7404  0007DC  B0D8               	btfsc	status,0,c
  7405  0007DE  2BA4               	incf	(printf@val+1)& (0+255),f,b
  7406  0007E0                     l4432:
  7407                           
  7408                           ; BSR set to: 0
  7409                           ;doprnt.c: 1264: }
  7410                           ;doprnt.c: 1266: }
  7411                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7412  0007E0  0E01               	movlw	1
  7413  0007E2  0100               	movlb	0	; () banked
  7414  0007E4  6FA8               	movwf	printf@c& (0+255),b
  7415  0007E6                     l4434:
  7416                           
  7417                           ; BSR set to: 0
  7418  0007E6  0E05               	movlw	5
  7419  0007E8  0100               	movlb	0	; () banked
  7420  0007EA  19A8               	xorwf	printf@c& (0+255),w,b
  7421  0007EC  B4D8               	btfsc	status,2,c
  7422  0007EE  D019               	goto	l4446
  7423                           
  7424                           ; BSR set to: 0
  7425                           ;doprnt.c: 1306: if(val < dpowers[c])
  7426                           
  7427                           ; BSR set to: 0
  7428                           
  7429                           ; BSR set to: 0
  7430  0007F0  0100               	movlb	0	; () banked
  7431  0007F2  51A8               	movf	printf@c& (0+255),w,b
  7432  0007F4  0D02               	mullw	2
  7433  0007F6  0EC6               	movlw	low _dpowers
  7434  0007F8  24F3               	addwf	prodl,w,c
  7435  0007FA  6EF6               	movwf	tblptrl,c
  7436  0007FC  0EFD               	movlw	high _dpowers
  7437  0007FE  20F4               	addwfc	prodh,w,c
  7438  000800  6EF7               	movwf	tblptrh,c
  7439  000802                     	if	1	;There are 3 active tblptr bytes
  7440  000802  6AF8               	clrf	tblptru,c
  7441  000804  0E00               	movlw	low (__mediumconst shr (0+16))
  7442  000806  22F8               	addwfc	tblptru,f,c
  7443  000808                     	endif
  7444  000808  0009               	tblrd		*+
  7445  00080A  50F5               	movf	tablat,w,c
  7446  00080C  0100               	movlb	0	; () banked
  7447  00080E  5DA3               	subwf	printf@val& (0+255),w,b
  7448  000810  0009               	tblrd		*+
  7449  000812  50F5               	movf	tablat,w,c
  7450  000814  0100               	movlb	0	; () banked
  7451  000816  59A4               	subwfb	(printf@val+1)& (0+255),w,b
  7452  000818  A0D8               	btfss	status,0,c
  7453  00081A  D003               	goto	l4446
  7454                           
  7455                           ; BSR set to: 0
  7456                           
  7457                           ; BSR set to: 0
  7458                           
  7459                           ; BSR set to: 0
  7460                           ;doprnt.c: 1307: break;
  7461  00081C  0100               	movlb	0	; () banked
  7462  00081E  2BA8               	incf	printf@c& (0+255),f,b
  7463  000820  D7E2               	goto	l4434
  7464  000822                     l4446:
  7465                           
  7466                           ; BSR set to: 0
  7467                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7468  000822  0100               	movlb	0	; () banked
  7469  000824  51A9               	movf	printf@width& (0+255),w,b
  7470  000826  0100               	movlb	0	; () banked
  7471  000828  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  7472  00082A  B4D8               	btfsc	status,2,c
  7473  00082C  D00B               	goto	l4452
  7474                           
  7475                           ; BSR set to: 0
  7476  00082E  C0A7  F09A         	movff	printf@flag,??_printf
  7477  000832  0E03               	movlw	3
  7478  000834  0100               	movlb	0	; () banked
  7479  000836  179A               	andwf	??_printf& (0+255),f,b
  7480  000838  B4D8               	btfsc	status,2,c
  7481  00083A  D004               	goto	l4452
  7482                           
  7483                           ; BSR set to: 0
  7484                           ;doprnt.c: 1346: width--;
  7485  00083C  0100               	movlb	0	; () banked
  7486  00083E  07A9               	decf	printf@width& (0+255),f,b
  7487  000840  A0D8               	btfss	status,0,c
  7488  000842  07AA               	decf	(printf@width+1)& (0+255),f,b
  7489  000844                     l4452:
  7490                           
  7491                           ; BSR set to: 0
  7492                           ;doprnt.c: 1381: if(width > c)
  7493  000844  0E80               	movlw	128
  7494  000846  0100               	movlb	0	; () banked
  7495  000848  BFA8               	btfsc	printf@c& (0+255),7,b
  7496  00084A  0E7F               	movlw	127
  7497  00084C  0100               	movlb	0	; () banked
  7498  00084E  6F9A               	movwf	??_printf& (0+255),b
  7499  000850  0100               	movlb	0	; () banked
  7500  000852  51A9               	movf	printf@width& (0+255),w,b
  7501  000854  0100               	movlb	0	; () banked
  7502  000856  5DA8               	subwf	printf@c& (0+255),w,b
  7503  000858  0100               	movlb	0	; () banked
  7504  00085A  51AA               	movf	(printf@width+1)& (0+255),w,b
  7505  00085C  0A80               	xorlw	128
  7506  00085E  0100               	movlb	0	; () banked
  7507  000860  599A               	subwfb	??_printf& (0+255),w,b
  7508  000862  B0D8               	btfsc	status,0,c
  7509  000864  D00B               	goto	l4456
  7510                           
  7511                           ; BSR set to: 0
  7512                           ;doprnt.c: 1382: width -= c;
  7513  000866  0100               	movlb	0	; () banked
  7514  000868  51A8               	movf	printf@c& (0+255),w,b
  7515  00086A  0100               	movlb	0	; () banked
  7516  00086C  5FA9               	subwf	printf@width& (0+255),f,b
  7517  00086E  0E00               	movlw	0
  7518  000870  0100               	movlb	0	; () banked
  7519  000872  BFA8               	btfsc	printf@c& (0+255),7,b
  7520  000874  0EFF               	movlw	255
  7521  000876  0100               	movlb	0	; () banked
  7522  000878  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
  7523  00087A  D005               	goto	l4458
  7524  00087C                     l4456:
  7525                           
  7526                           ; BSR set to: 0
  7527                           ;doprnt.c: 1383: else
  7528                           ;doprnt.c: 1384: width = 0;
  7529  00087C  0E00               	movlw	0
  7530  00087E  0100               	movlb	0	; () banked
  7531  000880  6FAA               	movwf	(printf@width+1)& (0+255),b
  7532  000882  0E00               	movlw	0
  7533  000884  6FA9               	movwf	printf@width& (0+255),b
  7534  000886                     l4458:
  7535                           
  7536                           ; BSR set to: 0
  7537                           ;doprnt.c: 1387: if(flag & 0x04) {
  7538  000886  0100               	movlb	0	; () banked
  7539  000888  A5A7               	btfss	printf@flag& (0+255),2,b
  7540  00088A  D018               	goto	l4470
  7541                           
  7542                           ; BSR set to: 0
  7543                           ;doprnt.c: 1392: if(flag & 0x03)
  7544  00088C  C0A7  F09A         	movff	printf@flag,??_printf
  7545  000890  0E03               	movlw	3
  7546  000892  0100               	movlb	0	; () banked
  7547  000894  179A               	andwf	??_printf& (0+255),f,b
  7548  000896  B4D8               	btfsc	status,2,c
  7549  000898  D003               	goto	l4464
  7550                           
  7551                           ; BSR set to: 0
  7552                           ;doprnt.c: 1393: (putch('-') );
  7553  00089A  0E2D               	movlw	45
  7554  00089C  EC72  F015         	call	_putch
  7555  0008A0                     l4464:
  7556                           
  7557                           ;doprnt.c: 1415: if(width)
  7558  0008A0  0100               	movlb	0	; () banked
  7559  0008A2  51A9               	movf	printf@width& (0+255),w,b
  7560  0008A4  0100               	movlb	0	; () banked
  7561  0008A6  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  7562  0008A8  B4D8               	btfsc	status,2,c
  7563  0008AA  D025               	goto	l4480
  7564                           
  7565                           ; BSR set to: 0
  7566                           ;doprnt.c: 1417: (putch('0') );
  7567                           
  7568                           ; BSR set to: 0
  7569                           
  7570                           ;doprnt.c: 1416: do
  7571  0008AC  0E30               	movlw	48
  7572  0008AE  EC72  F015         	call	_putch
  7573                           
  7574                           ;doprnt.c: 1418: while(--width);
  7575  0008B2  0100               	movlb	0	; () banked
  7576  0008B4  07A9               	decf	printf@width& (0+255),f,b
  7577  0008B6  A0D8               	btfss	status,0,c
  7578  0008B8  07AA               	decf	(printf@width+1)& (0+255),f,b
  7579  0008BA  D7F2               	goto	l4464
  7580  0008BC                     l4470:
  7581                           
  7582                           ; BSR set to: 0
  7583                           ;doprnt.c: 1422: {
  7584                           ;doprnt.c: 1424: if(width
  7585                           ;doprnt.c: 1428: )
  7586  0008BC  0100               	movlb	0	; () banked
  7587  0008BE  51A9               	movf	printf@width& (0+255),w,b
  7588  0008C0  0100               	movlb	0	; () banked
  7589  0008C2  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  7590  0008C4  B4D8               	btfsc	status,2,c
  7591  0008C6  D00D               	goto	l4476
  7592  0008C8                     l4472:
  7593                           
  7594                           ; BSR set to: 0
  7595                           ;doprnt.c: 1430: (putch(' ') );
  7596  0008C8  0E20               	movlw	32
  7597  0008CA  EC72  F015         	call	_putch
  7598                           
  7599                           ;doprnt.c: 1431: while(--width);
  7600  0008CE  0100               	movlb	0	; () banked
  7601  0008D0  07A9               	decf	printf@width& (0+255),f,b
  7602  0008D2  A0D8               	btfss	status,0,c
  7603  0008D4  07AA               	decf	(printf@width+1)& (0+255),f,b
  7604  0008D6  0100               	movlb	0	; () banked
  7605  0008D8  51A9               	movf	printf@width& (0+255),w,b
  7606  0008DA  0100               	movlb	0	; () banked
  7607  0008DC  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  7608  0008DE  A4D8               	btfss	status,2,c
  7609  0008E0  D7F3               	goto	l4472
  7610  0008E2                     l4476:
  7611                           
  7612                           ; BSR set to: 0
  7613                           ;doprnt.c: 1438: if(flag & 0x03)
  7614  0008E2  C0A7  F09A         	movff	printf@flag,??_printf
  7615  0008E6  0E03               	movlw	3
  7616  0008E8  0100               	movlb	0	; () banked
  7617  0008EA  179A               	andwf	??_printf& (0+255),f,b
  7618  0008EC  B4D8               	btfsc	status,2,c
  7619  0008EE  D003               	goto	l4480
  7620                           
  7621                           ; BSR set to: 0
  7622                           ;doprnt.c: 1439: (putch('-') );
  7623  0008F0  0E2D               	movlw	45
  7624  0008F2  EC72  F015         	call	_putch
  7625  0008F6                     l4480:
  7626                           
  7627                           ;doprnt.c: 1469: }
  7628                           ;doprnt.c: 1472: prec = c;
  7629  0008F6  C0A8  F09E         	movff	printf@c,printf@prec
  7630                           
  7631                           ;doprnt.c: 1474: while(prec--) {
  7632  0008FA  D02C               	goto	l4486
  7633  0008FC                     l4482:
  7634                           
  7635                           ;doprnt.c: 1478: {
  7636                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7637  0008FC  0100               	movlb	0	; () banked
  7638  0008FE  519E               	movf	printf@prec& (0+255),w,b
  7639  000900  0D02               	mullw	2
  7640  000902  0EC6               	movlw	low _dpowers
  7641  000904  24F3               	addwf	prodl,w,c
  7642  000906  6EF6               	movwf	tblptrl,c
  7643  000908  0EFD               	movlw	high _dpowers
  7644  00090A  20F4               	addwfc	prodh,w,c
  7645  00090C  6EF7               	movwf	tblptrh,c
  7646  00090E                     	if	1	;There are 3 active tblptr bytes
  7647  00090E  6AF8               	clrf	tblptru,c
  7648  000910  0E00               	movlw	low (__mediumconst shr (0+16))
  7649  000912  22F8               	addwfc	tblptru,f,c
  7650  000914                     	endif
  7651  000914  0009               	tblrd		*+
  7652  000916  CFF5 F082          	movff	tablat,___lwdiv@divisor
  7653  00091A  000A               	tblrd		*-
  7654  00091C  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  7655  000920  C0A3  F080         	movff	printf@val,___lwdiv@dividend
  7656  000924  C0A4  F081         	movff	printf@val+1,___lwdiv@dividend+1
  7657  000928  EC50  F010         	call	___lwdiv	;wreg free
  7658  00092C  C080  F087         	movff	?___lwdiv,___lwmod@dividend
  7659  000930  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
  7660  000934  0E00               	movlw	0
  7661  000936  0100               	movlb	0	; () banked
  7662  000938  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  7663  00093A  0E0A               	movlw	10
  7664  00093C  6F89               	movwf	___lwmod@divisor& (0+255),b
  7665  00093E  EC2A  F011         	call	___lwmod	;wreg free
  7666  000942  0100               	movlb	0	; () banked
  7667  000944  5187               	movf	?___lwmod& (0+255),w,b
  7668  000946  0F30               	addlw	48
  7669  000948  0100               	movlb	0	; () banked
  7670  00094A  6FA8               	movwf	printf@c& (0+255),b
  7671                           
  7672                           ; BSR set to: 0
  7673                           ;doprnt.c: 1523: }
  7674                           ;doprnt.c: 1524: (putch(c) );
  7675  00094C  0100               	movlb	0	; () banked
  7676  00094E  51A8               	movf	printf@c& (0+255),w,b
  7677  000950  EC72  F015         	call	_putch
  7678  000954                     l4486:
  7679  000954  0100               	movlb	0	; () banked
  7680  000956  079E               	decf	printf@prec& (0+255),f,b
  7681  000958  0100               	movlb	0	; () banked
  7682  00095A  299E               	incf	printf@prec& (0+255),w,b
  7683  00095C  A4D8               	btfss	status,2,c
  7684  00095E  D7CE               	goto	l4482
  7685  000960                     l4488:
  7686  000960  C08E  FFF6         	movff	printf@f,tblptrl
  7687  000964  C08F  FFF7         	movff	printf@f+1,tblptrh
  7688  000968  0100               	movlb	0	; () banked
  7689  00096A  4B8E               	infsnz	printf@f& (0+255),f,b
  7690  00096C  2B8F               	incf	(printf@f+1)& (0+255),f,b
  7691  00096E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7692  00096E  6AF8               	clrf	tblptru,c
  7693  000970                     	endif
  7694  000970                     	if	0	;tblptru may be non-zero
  7695  000970                     	endif
  7696  000970  0008               	tblrd		*
  7697  000972  CFF5 F0A8          	movff	tablat,printf@c
  7698  000976  0100               	movlb	0	; () banked
  7699  000978  51A8               	movf	printf@c& (0+255),w,b
  7700  00097A  B4D8               	btfsc	status,2,c
  7701  00097C  0012               	return	
  7702  00097E  D602               	goto	l4364
  7703  000980                     __end_of_printf:
  7704                           	opt stack 0
  7705                           tblptru	equ	0xFF8
  7706                           tblptrh	equ	0xFF7
  7707                           tblptrl	equ	0xFF6
  7708                           tablat	equ	0xFF5
  7709                           prodh	equ	0xFF4
  7710                           prodl	equ	0xFF3
  7711                           intcon	equ	0xFF2
  7712                           intcon2	equ	0xFF1
  7713                           intcon3	equ	0xFF0
  7714                           indf0	equ	0xFEF
  7715                           postinc0	equ	0xFEE
  7716                           fsr0h	equ	0xFEA
  7717                           fsr0l	equ	0xFE9
  7718                           wreg	equ	0xFE8
  7719                           postdec1	equ	0xFE5
  7720                           fsr1l	equ	0xFE1
  7721                           indf2	equ	0xFDF
  7722                           postinc2	equ	0xFDE
  7723                           postdec2	equ	0xFDD
  7724                           fsr2h	equ	0xFDA
  7725                           fsr2l	equ	0xFD9
  7726                           status	equ	0xFD8
  7727                           
  7728 ;; *************** function _putch *****************
  7729 ;; Defined at:
  7730 ;;		line 19 in file "lcd.c"
  7731 ;; Parameters:    Size  Location     Type
  7732 ;;  data            1    wreg     unsigned char 
  7733 ;; Auto vars:     Size  Location     Type
  7734 ;;  data            1    2[BANK0 ] unsigned char 
  7735 ;; Return value:  Size  Location     Type
  7736 ;;                  1    wreg      void 
  7737 ;; Registers used:
  7738 ;;		wreg, status,2, status,0, cstack
  7739 ;; Tracked objects:
  7740 ;;		On entry : 0/0
  7741 ;;		On exit  : 0/0
  7742 ;;		Unchanged: 0/0
  7743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7745 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7747 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7748 ;;Total ram usage:        1 bytes
  7749 ;; Hardware stack levels used:    1
  7750 ;; Hardware stack levels required when called:    8
  7751 ;; This function calls:
  7752 ;;		_lcdNibble
  7753 ;; This function is called by:
  7754 ;;		_printf
  7755 ;; This function uses a non-reentrant model
  7756 ;;
  7757                           
  7758                           	psect	text34
  7759  002AE4                     __ptext34:
  7760                           	opt stack 0
  7761  002AE4                     _putch:
  7762                           	opt stack 19
  7763                           
  7764                           ;incstack = 0
  7765                           ;putch@data stored from wreg
  7766  002AE4  0100               	movlb	0	; () banked
  7767  002AE6  6F82               	movwf	putch@data& (0+255),b
  7768                           
  7769                           ;lcd.c: 20: LATDbits.LATD2 = 1;
  7770  002AE8  848C               	bsf	3980,2,c	;volatile
  7771                           
  7772                           ;lcd.c: 21: lcdNibble(data);
  7773  002AEA  0100               	movlb	0	; () banked
  7774  002AEC  5182               	movf	putch@data& (0+255),w,b
  7775  002AEE  ECC5  F010         	call	_lcdNibble
  7776  002AF2  0012               	return		;funcret
  7777  002AF4                     __end_of_putch:
  7778                           	opt stack 0
  7779                           tblptru	equ	0xFF8
  7780                           tblptrh	equ	0xFF7
  7781                           tblptrl	equ	0xFF6
  7782                           tablat	equ	0xFF5
  7783                           prodh	equ	0xFF4
  7784                           prodl	equ	0xFF3
  7785                           intcon	equ	0xFF2
  7786                           intcon2	equ	0xFF1
  7787                           intcon3	equ	0xFF0
  7788                           indf0	equ	0xFEF
  7789                           postinc0	equ	0xFEE
  7790                           fsr0h	equ	0xFEA
  7791                           fsr0l	equ	0xFE9
  7792                           wreg	equ	0xFE8
  7793                           postdec1	equ	0xFE5
  7794                           fsr1l	equ	0xFE1
  7795                           indf2	equ	0xFDF
  7796                           postinc2	equ	0xFDE
  7797                           postdec2	equ	0xFDD
  7798                           fsr2h	equ	0xFDA
  7799                           fsr2l	equ	0xFD9
  7800                           status	equ	0xFD8
  7801                           
  7802 ;; *************** function _isdigit *****************
  7803 ;; Defined at:
  7804 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  7805 ;; Parameters:    Size  Location     Type
  7806 ;;  c               1    wreg     unsigned char 
  7807 ;; Auto vars:     Size  Location     Type
  7808 ;;  c               1    2[BANK0 ] unsigned char 
  7809 ;; Return value:  Size  Location     Type
  7810 ;;		None               void
  7811 ;; Registers used:
  7812 ;;		wreg, status,2, status,0
  7813 ;; Tracked objects:
  7814 ;;		On entry : 0/0
  7815 ;;		On exit  : 0/0
  7816 ;;		Unchanged: 0/0
  7817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7819 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7820 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7821 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7822 ;;Total ram usage:        3 bytes
  7823 ;; Hardware stack levels used:    1
  7824 ;; Hardware stack levels required when called:    7
  7825 ;; This function calls:
  7826 ;;		Nothing
  7827 ;; This function is called by:
  7828 ;;		_printf
  7829 ;; This function uses a non-reentrant model
  7830 ;;
  7831                           
  7832                           	psect	text35
  7833  002968                     __ptext35:
  7834                           	opt stack 0
  7835  002968                     _isdigit:
  7836                           	opt stack 20
  7837                           
  7838                           ;incstack = 0
  7839                           ;isdigit@c stored from wreg
  7840  002968  0100               	movlb	0	; () banked
  7841  00296A  6F82               	movwf	isdigit@c& (0+255),b
  7842  00296C  0E00               	movlw	0
  7843  00296E  0100               	movlb	0	; () banked
  7844  002970  6F81               	movwf	_isdigit$1809& (0+255),b
  7845                           
  7846                           ; BSR set to: 0
  7847  002972  0E3A               	movlw	58
  7848  002974  0100               	movlb	0	; () banked
  7849  002976  6182               	cpfslt	isdigit@c& (0+255),b
  7850  002978  D007               	goto	l4218
  7851                           
  7852                           ; BSR set to: 0
  7853  00297A  0E2F               	movlw	47
  7854  00297C  0100               	movlb	0	; () banked
  7855  00297E  6582               	cpfsgt	isdigit@c& (0+255),b
  7856  002980  D003               	goto	l4218
  7857                           
  7858                           ; BSR set to: 0
  7859  002982  0E01               	movlw	1
  7860  002984  0100               	movlb	0	; () banked
  7861  002986  6F81               	movwf	_isdigit$1809& (0+255),b
  7862  002988                     l4218:
  7863                           
  7864                           ; BSR set to: 0
  7865  002988  C081  F080         	movff	_isdigit$1809,??_isdigit
  7866  00298C  0100               	movlb	0	; () banked
  7867  00298E  3180               	rrcf	??_isdigit& (0+255),w,b
  7868  002990  0012               	return	
  7869  002992                     __end_of_isdigit:
  7870                           	opt stack 0
  7871                           tblptru	equ	0xFF8
  7872                           tblptrh	equ	0xFF7
  7873                           tblptrl	equ	0xFF6
  7874                           tablat	equ	0xFF5
  7875                           prodh	equ	0xFF4
  7876                           prodl	equ	0xFF3
  7877                           intcon	equ	0xFF2
  7878                           intcon2	equ	0xFF1
  7879                           intcon3	equ	0xFF0
  7880                           indf0	equ	0xFEF
  7881                           postinc0	equ	0xFEE
  7882                           fsr0h	equ	0xFEA
  7883                           fsr0l	equ	0xFE9
  7884                           wreg	equ	0xFE8
  7885                           postdec1	equ	0xFE5
  7886                           fsr1l	equ	0xFE1
  7887                           indf2	equ	0xFDF
  7888                           postinc2	equ	0xFDE
  7889                           postdec2	equ	0xFDD
  7890                           fsr2h	equ	0xFDA
  7891                           fsr2l	equ	0xFD9
  7892                           status	equ	0xFD8
  7893                           
  7894 ;; *************** function ___wmul *****************
  7895 ;; Defined at:
  7896 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  7897 ;; Parameters:    Size  Location     Type
  7898 ;;  multiplier      2    0[BANK0 ] unsigned int 
  7899 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  7900 ;; Auto vars:     Size  Location     Type
  7901 ;;  product         2    4[BANK0 ] unsigned int 
  7902 ;; Return value:  Size  Location     Type
  7903 ;;                  2    0[BANK0 ] unsigned int 
  7904 ;; Registers used:
  7905 ;;		wreg, status,2, status,0, prodl, prodh
  7906 ;; Tracked objects:
  7907 ;;		On entry : 0/0
  7908 ;;		On exit  : 0/0
  7909 ;;		Unchanged: 0/0
  7910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7911 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7912 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7914 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7915 ;;Total ram usage:        6 bytes
  7916 ;; Hardware stack levels used:    1
  7917 ;; Hardware stack levels required when called:    7
  7918 ;; This function calls:
  7919 ;;		Nothing
  7920 ;; This function is called by:
  7921 ;;		_printf
  7922 ;; This function uses a non-reentrant model
  7923 ;;
  7924                           
  7925                           	psect	text36
  7926  00266E                     __ptext36:
  7927                           	opt stack 0
  7928  00266E                     ___wmul:
  7929                           	opt stack 20
  7930                           
  7931                           ; BSR set to: 0
  7932                           ;incstack = 0
  7933  00266E  0100               	movlb	0	; () banked
  7934  002670  5180               	movf	___wmul@multiplier& (0+255),w,b
  7935  002672  0100               	movlb	0	; () banked
  7936  002674  0382               	mulwf	___wmul@multiplicand& (0+255),b
  7937  002676  CFF3 F084          	movff	prodl,___wmul@product
  7938  00267A  CFF4 F085          	movff	prodh,___wmul@product+1
  7939  00267E  0100               	movlb	0	; () banked
  7940  002680  5180               	movf	___wmul@multiplier& (0+255),w,b
  7941  002682  0100               	movlb	0	; () banked
  7942  002684  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  7943  002686  50F3               	movf	prodl,w,c
  7944  002688  0100               	movlb	0	; () banked
  7945  00268A  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  7946  00268C  0100               	movlb	0	; () banked
  7947  00268E  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  7948  002690  0100               	movlb	0	; () banked
  7949  002692  0382               	mulwf	___wmul@multiplicand& (0+255),b
  7950  002694  50F3               	movf	prodl,w,c
  7951  002696  0100               	movlb	0	; () banked
  7952  002698  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  7953                           
  7954                           ; BSR set to: 0
  7955  00269A  C084  F080         	movff	___wmul@product,?___wmul
  7956  00269E  C085  F081         	movff	___wmul@product+1,?___wmul+1
  7957  0026A2  0012               	return	
  7958  0026A4                     __end_of___wmul:
  7959                           	opt stack 0
  7960                           tblptru	equ	0xFF8
  7961                           tblptrh	equ	0xFF7
  7962                           tblptrl	equ	0xFF6
  7963                           tablat	equ	0xFF5
  7964                           prodh	equ	0xFF4
  7965                           prodl	equ	0xFF3
  7966                           intcon	equ	0xFF2
  7967                           intcon2	equ	0xFF1
  7968                           intcon3	equ	0xFF0
  7969                           indf0	equ	0xFEF
  7970                           postinc0	equ	0xFEE
  7971                           fsr0h	equ	0xFEA
  7972                           fsr0l	equ	0xFE9
  7973                           wreg	equ	0xFE8
  7974                           postdec1	equ	0xFE5
  7975                           fsr1l	equ	0xFE1
  7976                           indf2	equ	0xFDF
  7977                           postinc2	equ	0xFDE
  7978                           postdec2	equ	0xFDD
  7979                           fsr2h	equ	0xFDA
  7980                           fsr2l	equ	0xFD9
  7981                           status	equ	0xFD8
  7982                           
  7983 ;; *************** function ___lwmod *****************
  7984 ;; Defined at:
  7985 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  7986 ;; Parameters:    Size  Location     Type
  7987 ;;  dividend        2    7[BANK0 ] unsigned int 
  7988 ;;  divisor         2    9[BANK0 ] unsigned int 
  7989 ;; Auto vars:     Size  Location     Type
  7990 ;;  counter         1   11[BANK0 ] unsigned char 
  7991 ;; Return value:  Size  Location     Type
  7992 ;;                  2    7[BANK0 ] unsigned int 
  7993 ;; Registers used:
  7994 ;;		wreg, status,2, status,0
  7995 ;; Tracked objects:
  7996 ;;		On entry : 0/0
  7997 ;;		On exit  : 0/0
  7998 ;;		Unchanged: 0/0
  7999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8000 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8001 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8003 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8004 ;;Total ram usage:        5 bytes
  8005 ;; Hardware stack levels used:    1
  8006 ;; Hardware stack levels required when called:    7
  8007 ;; This function calls:
  8008 ;;		Nothing
  8009 ;; This function is called by:
  8010 ;;		_printf
  8011 ;; This function uses a non-reentrant model
  8012 ;;
  8013                           
  8014                           	psect	text37
  8015  002254                     __ptext37:
  8016                           	opt stack 0
  8017  002254                     ___lwmod:
  8018                           	opt stack 20
  8019                           
  8020                           ; BSR set to: 0
  8021                           ;incstack = 0
  8022  002254  0100               	movlb	0	; () banked
  8023  002256  5189               	movf	___lwmod@divisor& (0+255),w,b
  8024  002258  0100               	movlb	0	; () banked
  8025  00225A  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  8026  00225C  B4D8               	btfsc	status,2,c
  8027  00225E  D026               	goto	l1893
  8028                           
  8029                           ; BSR set to: 0
  8030  002260  0E01               	movlw	1
  8031  002262  0100               	movlb	0	; () banked
  8032  002264  6F8B               	movwf	___lwmod@counter& (0+255),b
  8033  002266  D006               	goto	l4256
  8034  002268                     l4254:
  8035                           
  8036                           ; BSR set to: 0
  8037  002268  0100               	movlb	0	; () banked
  8038  00226A  90D8               	bcf	status,0,c
  8039  00226C  3789               	rlcf	___lwmod@divisor& (0+255),f,b
  8040  00226E  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  8041  002270  0100               	movlb	0	; () banked
  8042  002272  2B8B               	incf	___lwmod@counter& (0+255),f,b
  8043  002274                     l4256:
  8044                           
  8045                           ; BSR set to: 0
  8046  002274  0100               	movlb	0	; () banked
  8047  002276  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  8048  002278  D7F7               	goto	l4254
  8049  00227A                     l4258:
  8050                           
  8051                           ; BSR set to: 0
  8052  00227A  0100               	movlb	0	; () banked
  8053  00227C  5189               	movf	___lwmod@divisor& (0+255),w,b
  8054  00227E  0100               	movlb	0	; () banked
  8055  002280  5D87               	subwf	___lwmod@dividend& (0+255),w,b
  8056  002282  0100               	movlb	0	; () banked
  8057  002284  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  8058  002286  0100               	movlb	0	; () banked
  8059  002288  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  8060  00228A  A0D8               	btfss	status,0,c
  8061  00228C  D008               	goto	l4262
  8062                           
  8063                           ; BSR set to: 0
  8064  00228E  0100               	movlb	0	; () banked
  8065  002290  5189               	movf	___lwmod@divisor& (0+255),w,b
  8066  002292  0100               	movlb	0	; () banked
  8067  002294  5F87               	subwf	___lwmod@dividend& (0+255),f,b
  8068  002296  0100               	movlb	0	; () banked
  8069  002298  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  8070  00229A  0100               	movlb	0	; () banked
  8071  00229C  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  8072  00229E                     l4262:
  8073                           
  8074                           ; BSR set to: 0
  8075  00229E  0100               	movlb	0	; () banked
  8076  0022A0  90D8               	bcf	status,0,c
  8077  0022A2  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  8078  0022A4  3389               	rrcf	___lwmod@divisor& (0+255),f,b
  8079                           
  8080                           ; BSR set to: 0
  8081  0022A6  0100               	movlb	0	; () banked
  8082  0022A8  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
  8083  0022AA  D7E7               	goto	l4258
  8084  0022AC                     l1893:
  8085                           
  8086                           ; BSR set to: 0
  8087  0022AC  C087  F087         	movff	___lwmod@dividend,?___lwmod
  8088  0022B0  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
  8089                           
  8090                           ; BSR set to: 0
  8091  0022B4  0012               	return		;funcret
  8092  0022B6                     __end_of___lwmod:
  8093                           	opt stack 0
  8094                           tblptru	equ	0xFF8
  8095                           tblptrh	equ	0xFF7
  8096                           tblptrl	equ	0xFF6
  8097                           tablat	equ	0xFF5
  8098                           prodh	equ	0xFF4
  8099                           prodl	equ	0xFF3
  8100                           intcon	equ	0xFF2
  8101                           intcon2	equ	0xFF1
  8102                           intcon3	equ	0xFF0
  8103                           indf0	equ	0xFEF
  8104                           postinc0	equ	0xFEE
  8105                           fsr0h	equ	0xFEA
  8106                           fsr0l	equ	0xFE9
  8107                           wreg	equ	0xFE8
  8108                           postdec1	equ	0xFE5
  8109                           fsr1l	equ	0xFE1
  8110                           indf2	equ	0xFDF
  8111                           postinc2	equ	0xFDE
  8112                           postdec2	equ	0xFDD
  8113                           fsr2h	equ	0xFDA
  8114                           fsr2l	equ	0xFD9
  8115                           status	equ	0xFD8
  8116                           
  8117 ;; *************** function ___lwdiv *****************
  8118 ;; Defined at:
  8119 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  8120 ;; Parameters:    Size  Location     Type
  8121 ;;  dividend        2    0[BANK0 ] unsigned int 
  8122 ;;  divisor         2    2[BANK0 ] unsigned int 
  8123 ;; Auto vars:     Size  Location     Type
  8124 ;;  quotient        2    4[BANK0 ] unsigned int 
  8125 ;;  counter         1    6[BANK0 ] unsigned char 
  8126 ;; Return value:  Size  Location     Type
  8127 ;;                  2    0[BANK0 ] unsigned int 
  8128 ;; Registers used:
  8129 ;;		wreg, status,2, status,0
  8130 ;; Tracked objects:
  8131 ;;		On entry : 0/0
  8132 ;;		On exit  : 0/0
  8133 ;;		Unchanged: 0/0
  8134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8135 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8136 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8138 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8139 ;;Total ram usage:        7 bytes
  8140 ;; Hardware stack levels used:    1
  8141 ;; Hardware stack levels required when called:    7
  8142 ;; This function calls:
  8143 ;;		Nothing
  8144 ;; This function is called by:
  8145 ;;		_printf
  8146 ;; This function uses a non-reentrant model
  8147 ;;
  8148                           
  8149                           	psect	text38
  8150  0020A0                     __ptext38:
  8151                           	opt stack 0
  8152  0020A0                     ___lwdiv:
  8153                           	opt stack 20
  8154                           
  8155                           ; BSR set to: 0
  8156                           ;incstack = 0
  8157  0020A0  0E00               	movlw	0
  8158  0020A2  0100               	movlb	0	; () banked
  8159  0020A4  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
  8160  0020A6  0E00               	movlw	0
  8161  0020A8  6F84               	movwf	___lwdiv@quotient& (0+255),b
  8162                           
  8163                           ; BSR set to: 0
  8164  0020AA  0100               	movlb	0	; () banked
  8165  0020AC  5182               	movf	___lwdiv@divisor& (0+255),w,b
  8166  0020AE  0100               	movlb	0	; () banked
  8167  0020B0  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  8168  0020B2  B4D8               	btfsc	status,2,c
  8169  0020B4  D02C               	goto	l1883
  8170                           
  8171                           ; BSR set to: 0
  8172  0020B6  0E01               	movlw	1
  8173  0020B8  0100               	movlb	0	; () banked
  8174  0020BA  6F86               	movwf	___lwdiv@counter& (0+255),b
  8175  0020BC  D006               	goto	l4236
  8176  0020BE                     l4234:
  8177                           
  8178                           ; BSR set to: 0
  8179  0020BE  0100               	movlb	0	; () banked
  8180  0020C0  90D8               	bcf	status,0,c
  8181  0020C2  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
  8182  0020C4  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  8183  0020C6  0100               	movlb	0	; () banked
  8184  0020C8  2B86               	incf	___lwdiv@counter& (0+255),f,b
  8185  0020CA                     l4236:
  8186                           
  8187                           ; BSR set to: 0
  8188  0020CA  0100               	movlb	0	; () banked
  8189  0020CC  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  8190  0020CE  D7F7               	goto	l4234
  8191  0020D0                     l4238:
  8192                           
  8193                           ; BSR set to: 0
  8194  0020D0  0100               	movlb	0	; () banked
  8195  0020D2  90D8               	bcf	status,0,c
  8196  0020D4  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
  8197  0020D6  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  8198                           
  8199                           ; BSR set to: 0
  8200  0020D8  0100               	movlb	0	; () banked
  8201  0020DA  5182               	movf	___lwdiv@divisor& (0+255),w,b
  8202  0020DC  0100               	movlb	0	; () banked
  8203  0020DE  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
  8204  0020E0  0100               	movlb	0	; () banked
  8205  0020E2  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  8206  0020E4  0100               	movlb	0	; () banked
  8207  0020E6  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  8208  0020E8  A0D8               	btfss	status,0,c
  8209  0020EA  D00A               	goto	l4246
  8210                           
  8211                           ; BSR set to: 0
  8212  0020EC  0100               	movlb	0	; () banked
  8213  0020EE  5182               	movf	___lwdiv@divisor& (0+255),w,b
  8214  0020F0  0100               	movlb	0	; () banked
  8215  0020F2  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
  8216  0020F4  0100               	movlb	0	; () banked
  8217  0020F6  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  8218  0020F8  0100               	movlb	0	; () banked
  8219  0020FA  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  8220                           
  8221                           ; BSR set to: 0
  8222  0020FC  0100               	movlb	0	; () banked
  8223  0020FE  8184               	bsf	___lwdiv@quotient& (0+255),0,b
  8224  002100                     l4246:
  8225                           
  8226                           ; BSR set to: 0
  8227  002100  0100               	movlb	0	; () banked
  8228  002102  90D8               	bcf	status,0,c
  8229  002104  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  8230  002106  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
  8231                           
  8232                           ; BSR set to: 0
  8233  002108  0100               	movlb	0	; () banked
  8234  00210A  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
  8235  00210C  D7E1               	goto	l4238
  8236  00210E                     l1883:
  8237                           
  8238                           ; BSR set to: 0
  8239  00210E  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
  8240  002112  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8241                           
  8242                           ; BSR set to: 0
  8243  002116  0012               	return		;funcret
  8244  002118                     __end_of___lwdiv:
  8245                           	opt stack 0
  8246                           tblptru	equ	0xFF8
  8247                           tblptrh	equ	0xFF7
  8248                           tblptrl	equ	0xFF6
  8249                           tablat	equ	0xFF5
  8250                           prodh	equ	0xFF4
  8251                           prodl	equ	0xFF3
  8252                           intcon	equ	0xFF2
  8253                           intcon2	equ	0xFF1
  8254                           intcon3	equ	0xFF0
  8255                           indf0	equ	0xFEF
  8256                           postinc0	equ	0xFEE
  8257                           fsr0h	equ	0xFEA
  8258                           fsr0l	equ	0xFE9
  8259                           wreg	equ	0xFE8
  8260                           postdec1	equ	0xFE5
  8261                           fsr1l	equ	0xFE1
  8262                           indf2	equ	0xFDF
  8263                           postinc2	equ	0xFDE
  8264                           postdec2	equ	0xFDD
  8265                           fsr2h	equ	0xFDA
  8266                           fsr2l	equ	0xFD9
  8267                           status	equ	0xFD8
  8268                           
  8269 ;; *************** function _lcdInst *****************
  8270 ;; Defined at:
  8271 ;;		line 14 in file "lcd.c"
  8272 ;; Parameters:    Size  Location     Type
  8273 ;;  data            1    wreg     unsigned char 
  8274 ;; Auto vars:     Size  Location     Type
  8275 ;;  data            1    2[BANK0 ] unsigned char 
  8276 ;; Return value:  Size  Location     Type
  8277 ;;                  1    wreg      void 
  8278 ;; Registers used:
  8279 ;;		wreg, status,2, status,0, cstack
  8280 ;; Tracked objects:
  8281 ;;		On entry : 0/0
  8282 ;;		On exit  : 0/0
  8283 ;;		Unchanged: 0/0
  8284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8286 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8288 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8289 ;;Total ram usage:        1 bytes
  8290 ;; Hardware stack levels used:    1
  8291 ;; Hardware stack levels required when called:    8
  8292 ;; This function calls:
  8293 ;;		_lcdNibble
  8294 ;; This function is called by:
  8295 ;;		_UI
  8296 ;;		_change_state_to_menu_start
  8297 ;;		_change_state_to_menu_12
  8298 ;;		_change_state_to_menu_22
  8299 ;;		_initLCD
  8300 ;;		_printRTC
  8301 ;;		_Loading
  8302 ;; This function uses a non-reentrant model
  8303 ;;
  8304                           
  8305                           	psect	text39
  8306  002AF4                     __ptext39:
  8307                           	opt stack 0
  8308  002AF4                     _lcdInst:
  8309                           	opt stack 20
  8310                           
  8311                           ; BSR set to: 0
  8312                           ;incstack = 0
  8313                           ;lcdInst@data stored from wreg
  8314  002AF4  0100               	movlb	0	; () banked
  8315  002AF6  6F82               	movwf	lcdInst@data& (0+255),b
  8316                           
  8317                           ;lcd.c: 15: LATDbits.LATD2 = 0;
  8318  002AF8  948C               	bcf	3980,2,c	;volatile
  8319                           
  8320                           ;lcd.c: 16: lcdNibble(data);
  8321  002AFA  0100               	movlb	0	; () banked
  8322  002AFC  5182               	movf	lcdInst@data& (0+255),w,b
  8323  002AFE  ECC5  F010         	call	_lcdNibble
  8324  002B02  0012               	return		;funcret
  8325  002B04                     __end_of_lcdInst:
  8326                           	opt stack 0
  8327                           tblptru	equ	0xFF8
  8328                           tblptrh	equ	0xFF7
  8329                           tblptrl	equ	0xFF6
  8330                           tablat	equ	0xFF5
  8331                           prodh	equ	0xFF4
  8332                           prodl	equ	0xFF3
  8333                           intcon	equ	0xFF2
  8334                           intcon2	equ	0xFF1
  8335                           intcon3	equ	0xFF0
  8336                           indf0	equ	0xFEF
  8337                           postinc0	equ	0xFEE
  8338                           fsr0h	equ	0xFEA
  8339                           fsr0l	equ	0xFE9
  8340                           wreg	equ	0xFE8
  8341                           postdec1	equ	0xFE5
  8342                           fsr1l	equ	0xFE1
  8343                           indf2	equ	0xFDF
  8344                           postinc2	equ	0xFDE
  8345                           postdec2	equ	0xFDD
  8346                           fsr2h	equ	0xFDA
  8347                           fsr2l	equ	0xFD9
  8348                           status	equ	0xFD8
  8349                           
  8350 ;; *************** function _lcdNibble *****************
  8351 ;; Defined at:
  8352 ;;		line 24 in file "lcd.c"
  8353 ;; Parameters:    Size  Location     Type
  8354 ;;  data            1    wreg     unsigned char 
  8355 ;; Auto vars:     Size  Location     Type
  8356 ;;  data            1    1[BANK0 ] unsigned char 
  8357 ;;  temp            1    0[BANK0 ] unsigned char 
  8358 ;; Return value:  Size  Location     Type
  8359 ;;                  1    wreg      void 
  8360 ;; Registers used:
  8361 ;;		wreg, status,2, status,0
  8362 ;; Tracked objects:
  8363 ;;		On entry : 0/0
  8364 ;;		On exit  : 0/0
  8365 ;;		Unchanged: 0/0
  8366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8368 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8370 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8371 ;;Total ram usage:        2 bytes
  8372 ;; Hardware stack levels used:    1
  8373 ;; Hardware stack levels required when called:    7
  8374 ;; This function calls:
  8375 ;;		Nothing
  8376 ;; This function is called by:
  8377 ;;		_lcdInst
  8378 ;;		_putch
  8379 ;; This function uses a non-reentrant model
  8380 ;;
  8381                           
  8382                           	psect	text40
  8383  00218A                     __ptext40:
  8384                           	opt stack 0
  8385  00218A                     _lcdNibble:
  8386                           	opt stack 20
  8387                           
  8388                           ;incstack = 0
  8389                           ;lcdNibble@data stored from wreg
  8390  00218A  0100               	movlb	0	; () banked
  8391  00218C  6F81               	movwf	lcdNibble@data& (0+255),b
  8392                           
  8393                           ;lcd.c: 26: char temp = data & 0xF0;
  8394  00218E  0100               	movlb	0	; () banked
  8395  002190  5181               	movf	lcdNibble@data& (0+255),w,b
  8396  002192  0BF0               	andlw	240
  8397  002194  0100               	movlb	0	; () banked
  8398  002196  6F80               	movwf	lcdNibble@temp& (0+255),b
  8399                           
  8400                           ;lcd.c: 27: LATD = LATD & 0x0F;
  8401  002198  508C               	movf	3980,w,c	;volatile
  8402  00219A  0B0F               	andlw	15
  8403  00219C  6E8C               	movwf	3980,c	;volatile
  8404                           
  8405                           ;lcd.c: 28: LATD = temp | LATD;
  8406  00219E  0100               	movlb	0	; () banked
  8407  0021A0  5180               	movf	lcdNibble@temp& (0+255),w,b
  8408  0021A2  108C               	iorwf	3980,w,c	;volatile
  8409  0021A4  6E8C               	movwf	3980,c	;volatile
  8410                           
  8411                           ; BSR set to: 0
  8412                           ;lcd.c: 30: LATDbits.LATD3 = 1;
  8413  0021A6  868C               	bsf	3980,3,c	;volatile
  8414                           
  8415                           ; BSR set to: 0
  8416                           ;lcd.c: 31: _delay((unsigned long)((25)*(32000000/4000000.0)));
  8417  0021A8  0E42               	movlw	66
  8418  0021AA                     u4977:
  8419  0021AA  2EE8               	decfsz	wreg,f,c
  8420  0021AC  D7FE               	bra	u4977
  8421  0021AE  D000               	nop2	
  8422                           
  8423                           ;lcd.c: 32: LATDbits.LATD3 = 0;
  8424  0021B0  968C               	bcf	3980,3,c	;volatile
  8425                           
  8426                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
  8427  0021B2  0E42               	movlw	66
  8428  0021B4                     u4987:
  8429  0021B4  2EE8               	decfsz	wreg,f,c
  8430  0021B6  D7FE               	bra	u4987
  8431  0021B8  D000               	nop2	
  8432                           
  8433                           ;lcd.c: 35: data = data << 4;
  8434  0021BA  0100               	movlb	0	; () banked
  8435  0021BC  3981               	swapf	lcdNibble@data& (0+255),w,b
  8436  0021BE  0BF0               	andlw	240
  8437  0021C0  0100               	movlb	0	; () banked
  8438  0021C2  6F81               	movwf	lcdNibble@data& (0+255),b
  8439                           
  8440                           ;lcd.c: 37: temp = data & 0xF0;
  8441  0021C4  0100               	movlb	0	; () banked
  8442  0021C6  5181               	movf	lcdNibble@data& (0+255),w,b
  8443  0021C8  0BF0               	andlw	240
  8444  0021CA  0100               	movlb	0	; () banked
  8445  0021CC  6F80               	movwf	lcdNibble@temp& (0+255),b
  8446                           
  8447                           ;lcd.c: 38: LATD = LATD & 0x0F;
  8448  0021CE  508C               	movf	3980,w,c	;volatile
  8449  0021D0  0B0F               	andlw	15
  8450  0021D2  6E8C               	movwf	3980,c	;volatile
  8451                           
  8452                           ;lcd.c: 39: LATD = temp | LATD;
  8453  0021D4  0100               	movlb	0	; () banked
  8454  0021D6  5180               	movf	lcdNibble@temp& (0+255),w,b
  8455  0021D8  108C               	iorwf	3980,w,c	;volatile
  8456  0021DA  6E8C               	movwf	3980,c	;volatile
  8457                           
  8458                           ; BSR set to: 0
  8459                           ;lcd.c: 41: LATDbits.LATD3 = 1;
  8460  0021DC  868C               	bsf	3980,3,c	;volatile
  8461                           
  8462                           ; BSR set to: 0
  8463                           ;lcd.c: 42: _delay((unsigned long)((25)*(32000000/4000000.0)));
  8464  0021DE  0E42               	movlw	66
  8465  0021E0                     u4997:
  8466  0021E0  2EE8               	decfsz	wreg,f,c
  8467  0021E2  D7FE               	bra	u4997
  8468  0021E4  D000               	nop2	
  8469                           
  8470                           ;lcd.c: 43: LATDbits.LATD3 = 0;
  8471  0021E6  968C               	bcf	3980,3,c	;volatile
  8472                           
  8473                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
  8474  0021E8  0E42               	movlw	66
  8475  0021EA                     u5007:
  8476  0021EA  2EE8               	decfsz	wreg,f,c
  8477  0021EC  D7FE               	bra	u5007
  8478  0021EE  D000               	nop2	
  8479  0021F0  0012               	return		;funcret
  8480  0021F2                     __end_of_lcdNibble:
  8481                           	opt stack 0
  8482                           tblptru	equ	0xFF8
  8483                           tblptrh	equ	0xFF7
  8484                           tblptrl	equ	0xFF6
  8485                           tablat	equ	0xFF5
  8486                           prodh	equ	0xFF4
  8487                           prodl	equ	0xFF3
  8488                           intcon	equ	0xFF2
  8489                           intcon2	equ	0xFF1
  8490                           intcon3	equ	0xFF0
  8491                           indf0	equ	0xFEF
  8492                           postinc0	equ	0xFEE
  8493                           fsr0h	equ	0xFEA
  8494                           fsr0l	equ	0xFE9
  8495                           wreg	equ	0xFE8
  8496                           postdec1	equ	0xFE5
  8497                           fsr1l	equ	0xFE1
  8498                           indf2	equ	0xFDF
  8499                           postinc2	equ	0xFDE
  8500                           postdec2	equ	0xFDD
  8501                           fsr2h	equ	0xFDA
  8502                           fsr2l	equ	0xFD9
  8503                           status	equ	0xFD8
  8504                           
  8505 ;; *************** function ___awmod *****************
  8506 ;; Defined at:
  8507 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  8508 ;; Parameters:    Size  Location     Type
  8509 ;;  dividend        2    0[BANK0 ] int 
  8510 ;;  divisor         2    2[BANK0 ] int 
  8511 ;; Auto vars:     Size  Location     Type
  8512 ;;  sign            1    5[BANK0 ] unsigned char 
  8513 ;;  counter         1    4[BANK0 ] unsigned char 
  8514 ;; Return value:  Size  Location     Type
  8515 ;;                  2    0[BANK0 ] int 
  8516 ;; Registers used:
  8517 ;;		wreg, status,2, status,0
  8518 ;; Tracked objects:
  8519 ;;		On entry : 0/0
  8520 ;;		On exit  : 0/0
  8521 ;;		Unchanged: 0/0
  8522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8523 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8524 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8526 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8527 ;;Total ram usage:        6 bytes
  8528 ;; Hardware stack levels used:    1
  8529 ;; Hardware stack levels required when called:    7
  8530 ;; This function calls:
  8531 ;;		Nothing
  8532 ;; This function is called by:
  8533 ;;		_UI
  8534 ;; This function uses a non-reentrant model
  8535 ;;
  8536                           
  8537                           	psect	text41
  8538  001D44                     __ptext41:
  8539                           	opt stack 0
  8540  001D44                     ___awmod:
  8541                           	opt stack 22
  8542                           
  8543                           ;incstack = 0
  8544  001D44  0E00               	movlw	0
  8545  001D46  0100               	movlb	0	; () banked
  8546  001D48  6F85               	movwf	___awmod@sign& (0+255),b
  8547                           
  8548                           ; BSR set to: 0
  8549  001D4A  0100               	movlb	0	; () banked
  8550  001D4C  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  8551  001D4E  D008               	goto	l5306
  8552                           
  8553                           ; BSR set to: 0
  8554  001D50  0100               	movlb	0	; () banked
  8555  001D52  6D80               	negf	___awmod@dividend& (0+255),b
  8556  001D54  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8557  001D56  B0D8               	btfsc	status,0,c
  8558  001D58  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8559                           
  8560                           ; BSR set to: 0
  8561  001D5A  0E01               	movlw	1
  8562  001D5C  0100               	movlb	0	; () banked
  8563  001D5E  6F85               	movwf	___awmod@sign& (0+255),b
  8564  001D60                     l5306:
  8565                           
  8566                           ; BSR set to: 0
  8567  001D60  0100               	movlb	0	; () banked
  8568  001D62  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8569  001D64  D005               	goto	l5310
  8570                           
  8571                           ; BSR set to: 0
  8572  001D66  0100               	movlb	0	; () banked
  8573  001D68  6D82               	negf	___awmod@divisor& (0+255),b
  8574  001D6A  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  8575  001D6C  B0D8               	btfsc	status,0,c
  8576  001D6E  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  8577  001D70                     l5310:
  8578                           
  8579                           ; BSR set to: 0
  8580  001D70  0100               	movlb	0	; () banked
  8581  001D72  5182               	movf	___awmod@divisor& (0+255),w,b
  8582  001D74  0100               	movlb	0	; () banked
  8583  001D76  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  8584  001D78  B4D8               	btfsc	status,2,c
  8585  001D7A  D026               	goto	l5326
  8586                           
  8587                           ; BSR set to: 0
  8588  001D7C  0E01               	movlw	1
  8589  001D7E  0100               	movlb	0	; () banked
  8590  001D80  6F84               	movwf	___awmod@counter& (0+255),b
  8591  001D82  D006               	goto	l5316
  8592  001D84                     l5314:
  8593                           
  8594                           ; BSR set to: 0
  8595  001D84  0100               	movlb	0	; () banked
  8596  001D86  90D8               	bcf	status,0,c
  8597  001D88  3782               	rlcf	___awmod@divisor& (0+255),f,b
  8598  001D8A  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  8599  001D8C  0100               	movlb	0	; () banked
  8600  001D8E  2B84               	incf	___awmod@counter& (0+255),f,b
  8601  001D90                     l5316:
  8602                           
  8603                           ; BSR set to: 0
  8604  001D90  0100               	movlb	0	; () banked
  8605  001D92  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8606  001D94  D7F7               	goto	l5314
  8607  001D96                     l5318:
  8608                           
  8609                           ; BSR set to: 0
  8610  001D96  0100               	movlb	0	; () banked
  8611  001D98  5182               	movf	___awmod@divisor& (0+255),w,b
  8612  001D9A  0100               	movlb	0	; () banked
  8613  001D9C  5D80               	subwf	___awmod@dividend& (0+255),w,b
  8614  001D9E  0100               	movlb	0	; () banked
  8615  001DA0  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  8616  001DA2  0100               	movlb	0	; () banked
  8617  001DA4  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  8618  001DA6  A0D8               	btfss	status,0,c
  8619  001DA8  D008               	goto	l5322
  8620                           
  8621                           ; BSR set to: 0
  8622  001DAA  0100               	movlb	0	; () banked
  8623  001DAC  5182               	movf	___awmod@divisor& (0+255),w,b
  8624  001DAE  0100               	movlb	0	; () banked
  8625  001DB0  5F80               	subwf	___awmod@dividend& (0+255),f,b
  8626  001DB2  0100               	movlb	0	; () banked
  8627  001DB4  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  8628  001DB6  0100               	movlb	0	; () banked
  8629  001DB8  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  8630  001DBA                     l5322:
  8631                           
  8632                           ; BSR set to: 0
  8633  001DBA  0100               	movlb	0	; () banked
  8634  001DBC  90D8               	bcf	status,0,c
  8635  001DBE  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  8636  001DC0  3382               	rrcf	___awmod@divisor& (0+255),f,b
  8637                           
  8638                           ; BSR set to: 0
  8639  001DC2  0100               	movlb	0	; () banked
  8640  001DC4  2F84               	decfsz	___awmod@counter& (0+255),f,b
  8641  001DC6  D7E7               	goto	l5318
  8642  001DC8                     l5326:
  8643                           
  8644                           ; BSR set to: 0
  8645  001DC8  0100               	movlb	0	; () banked
  8646  001DCA  5185               	movf	___awmod@sign& (0+255),w,b
  8647  001DCC  0100               	movlb	0	; () banked
  8648  001DCE  B4D8               	btfsc	status,2,c
  8649  001DD0  D005               	goto	l5330
  8650                           
  8651                           ; BSR set to: 0
  8652  001DD2  0100               	movlb	0	; () banked
  8653  001DD4  6D80               	negf	___awmod@dividend& (0+255),b
  8654  001DD6  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8655  001DD8  B0D8               	btfsc	status,0,c
  8656  001DDA  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8657  001DDC                     l5330:
  8658                           
  8659                           ; BSR set to: 0
  8660  001DDC  C080  F080         	movff	___awmod@dividend,?___awmod
  8661  001DE0  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  8662  001DE4  0012               	return	
  8663  001DE6                     __end_of___awmod:
  8664                           	opt stack 0
  8665                           tblptru	equ	0xFF8
  8666                           tblptrh	equ	0xFF7
  8667                           tblptrl	equ	0xFF6
  8668                           tablat	equ	0xFF5
  8669                           prodh	equ	0xFF4
  8670                           prodl	equ	0xFF3
  8671                           intcon	equ	0xFF2
  8672                           intcon2	equ	0xFF1
  8673                           intcon3	equ	0xFF0
  8674                           indf0	equ	0xFEF
  8675                           postinc0	equ	0xFEE
  8676                           fsr0h	equ	0xFEA
  8677                           fsr0l	equ	0xFE9
  8678                           wreg	equ	0xFE8
  8679                           postdec1	equ	0xFE5
  8680                           fsr1l	equ	0xFE1
  8681                           indf2	equ	0xFDF
  8682                           postinc2	equ	0xFDE
  8683                           postdec2	equ	0xFDD
  8684                           fsr2h	equ	0xFDA
  8685                           fsr2l	equ	0xFD9
  8686                           status	equ	0xFD8
  8687                           
  8688 ;; *************** function ___awdiv *****************
  8689 ;; Defined at:
  8690 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  8691 ;; Parameters:    Size  Location     Type
  8692 ;;  dividend        2    6[BANK0 ] int 
  8693 ;;  divisor         2    8[BANK0 ] int 
  8694 ;; Auto vars:     Size  Location     Type
  8695 ;;  quotient        2   12[BANK0 ] int 
  8696 ;;  sign            1   11[BANK0 ] unsigned char 
  8697 ;;  counter         1   10[BANK0 ] unsigned char 
  8698 ;; Return value:  Size  Location     Type
  8699 ;;                  2    6[BANK0 ] int 
  8700 ;; Registers used:
  8701 ;;		wreg, status,2, status,0
  8702 ;; Tracked objects:
  8703 ;;		On entry : 0/0
  8704 ;;		On exit  : 0/0
  8705 ;;		Unchanged: 0/0
  8706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8707 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8708 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8710 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8711 ;;Total ram usage:        8 bytes
  8712 ;; Hardware stack levels used:    1
  8713 ;; Hardware stack levels required when called:    7
  8714 ;; This function calls:
  8715 ;;		Nothing
  8716 ;; This function is called by:
  8717 ;;		_UI
  8718 ;; This function uses a non-reentrant model
  8719 ;;
  8720                           
  8721                           	psect	text42
  8722  001A7E                     __ptext42:
  8723                           	opt stack 0
  8724  001A7E                     ___awdiv:
  8725                           	opt stack 22
  8726                           
  8727                           ; BSR set to: 0
  8728                           ;incstack = 0
  8729  001A7E  0E00               	movlw	0
  8730  001A80  0100               	movlb	0	; () banked
  8731  001A82  6F8B               	movwf	___awdiv@sign& (0+255),b
  8732                           
  8733                           ; BSR set to: 0
  8734  001A84  0100               	movlb	0	; () banked
  8735  001A86  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8736  001A88  D008               	goto	l5262
  8737                           
  8738                           ; BSR set to: 0
  8739  001A8A  0100               	movlb	0	; () banked
  8740  001A8C  6D88               	negf	___awdiv@divisor& (0+255),b
  8741  001A8E  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  8742  001A90  B0D8               	btfsc	status,0,c
  8743  001A92  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  8744                           
  8745                           ; BSR set to: 0
  8746  001A94  0E01               	movlw	1
  8747  001A96  0100               	movlb	0	; () banked
  8748  001A98  6F8B               	movwf	___awdiv@sign& (0+255),b
  8749  001A9A                     l5262:
  8750                           
  8751                           ; BSR set to: 0
  8752  001A9A  0100               	movlb	0	; () banked
  8753  001A9C  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  8754  001A9E  D008               	goto	l5268
  8755                           
  8756                           ; BSR set to: 0
  8757  001AA0  0100               	movlb	0	; () banked
  8758  001AA2  6D86               	negf	___awdiv@dividend& (0+255),b
  8759  001AA4  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  8760  001AA6  B0D8               	btfsc	status,0,c
  8761  001AA8  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  8762                           
  8763                           ; BSR set to: 0
  8764  001AAA  0E01               	movlw	1
  8765  001AAC  0100               	movlb	0	; () banked
  8766  001AAE  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  8767  001AB0                     l5268:
  8768                           
  8769                           ; BSR set to: 0
  8770  001AB0  0E00               	movlw	0
  8771  001AB2  0100               	movlb	0	; () banked
  8772  001AB4  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  8773  001AB6  0E00               	movlw	0
  8774  001AB8  6F8C               	movwf	___awdiv@quotient& (0+255),b
  8775                           
  8776                           ; BSR set to: 0
  8777  001ABA  0100               	movlb	0	; () banked
  8778  001ABC  5188               	movf	___awdiv@divisor& (0+255),w,b
  8779  001ABE  0100               	movlb	0	; () banked
  8780  001AC0  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  8781  001AC2  B4D8               	btfsc	status,2,c
  8782  001AC4  D02C               	goto	l5290
  8783                           
  8784                           ; BSR set to: 0
  8785  001AC6  0E01               	movlw	1
  8786  001AC8  0100               	movlb	0	; () banked
  8787  001ACA  6F8A               	movwf	___awdiv@counter& (0+255),b
  8788  001ACC  D006               	goto	l5276
  8789  001ACE                     l5274:
  8790                           
  8791                           ; BSR set to: 0
  8792  001ACE  0100               	movlb	0	; () banked
  8793  001AD0  90D8               	bcf	status,0,c
  8794  001AD2  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  8795  001AD4  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  8796  001AD6  0100               	movlb	0	; () banked
  8797  001AD8  2B8A               	incf	___awdiv@counter& (0+255),f,b
  8798  001ADA                     l5276:
  8799                           
  8800                           ; BSR set to: 0
  8801  001ADA  0100               	movlb	0	; () banked
  8802  001ADC  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8803  001ADE  D7F7               	goto	l5274
  8804  001AE0                     l5278:
  8805                           
  8806                           ; BSR set to: 0
  8807  001AE0  0100               	movlb	0	; () banked
  8808  001AE2  90D8               	bcf	status,0,c
  8809  001AE4  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  8810  001AE6  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  8811                           
  8812                           ; BSR set to: 0
  8813  001AE8  0100               	movlb	0	; () banked
  8814  001AEA  5188               	movf	___awdiv@divisor& (0+255),w,b
  8815  001AEC  0100               	movlb	0	; () banked
  8816  001AEE  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  8817  001AF0  0100               	movlb	0	; () banked
  8818  001AF2  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8819  001AF4  0100               	movlb	0	; () banked
  8820  001AF6  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  8821  001AF8  A0D8               	btfss	status,0,c
  8822  001AFA  D00A               	goto	l5286
  8823                           
  8824                           ; BSR set to: 0
  8825  001AFC  0100               	movlb	0	; () banked
  8826  001AFE  5188               	movf	___awdiv@divisor& (0+255),w,b
  8827  001B00  0100               	movlb	0	; () banked
  8828  001B02  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  8829  001B04  0100               	movlb	0	; () banked
  8830  001B06  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8831  001B08  0100               	movlb	0	; () banked
  8832  001B0A  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  8833                           
  8834                           ; BSR set to: 0
  8835  001B0C  0100               	movlb	0	; () banked
  8836  001B0E  818C               	bsf	___awdiv@quotient& (0+255),0,b
  8837  001B10                     l5286:
  8838                           
  8839                           ; BSR set to: 0
  8840  001B10  0100               	movlb	0	; () banked
  8841  001B12  90D8               	bcf	status,0,c
  8842  001B14  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  8843  001B16  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  8844                           
  8845                           ; BSR set to: 0
  8846  001B18  0100               	movlb	0	; () banked
  8847  001B1A  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  8848  001B1C  D7E1               	goto	l5278
  8849  001B1E                     l5290:
  8850                           
  8851                           ; BSR set to: 0
  8852  001B1E  0100               	movlb	0	; () banked
  8853  001B20  518B               	movf	___awdiv@sign& (0+255),w,b
  8854  001B22  0100               	movlb	0	; () banked
  8855  001B24  B4D8               	btfsc	status,2,c
  8856  001B26  D005               	goto	l5294
  8857                           
  8858                           ; BSR set to: 0
  8859  001B28  0100               	movlb	0	; () banked
  8860  001B2A  6D8C               	negf	___awdiv@quotient& (0+255),b
  8861  001B2C  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  8862  001B2E  B0D8               	btfsc	status,0,c
  8863  001B30  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  8864  001B32                     l5294:
  8865                           
  8866                           ; BSR set to: 0
  8867  001B32  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  8868  001B36  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  8869  001B3A  0012               	return	
  8870  001B3C                     __end_of___awdiv:
  8871                           	opt stack 0
  8872                           tblptru	equ	0xFF8
  8873                           tblptrh	equ	0xFF7
  8874                           tblptrl	equ	0xFF6
  8875                           tablat	equ	0xFF5
  8876                           prodh	equ	0xFF4
  8877                           prodl	equ	0xFF3
  8878                           intcon	equ	0xFF2
  8879                           intcon2	equ	0xFF1
  8880                           intcon3	equ	0xFF0
  8881                           indf0	equ	0xFEF
  8882                           postinc0	equ	0xFEE
  8883                           fsr0h	equ	0xFEA
  8884                           fsr0l	equ	0xFE9
  8885                           wreg	equ	0xFE8
  8886                           postdec1	equ	0xFE5
  8887                           fsr1l	equ	0xFE1
  8888                           indf2	equ	0xFDF
  8889                           postinc2	equ	0xFDE
  8890                           postdec2	equ	0xFDD
  8891                           fsr2h	equ	0xFDA
  8892                           fsr2l	equ	0xFD9
  8893                           status	equ	0xFD8
  8894                           
  8895 ;; *************** function _PortTestA5 *****************
  8896 ;; Defined at:
  8897 ;;		line 14 in file "PortHigh.c"
  8898 ;; Parameters:    Size  Location     Type
  8899 ;;		None
  8900 ;; Auto vars:     Size  Location     Type
  8901 ;;		None
  8902 ;; Return value:  Size  Location     Type
  8903 ;;                  1    wreg      void 
  8904 ;; Registers used:
  8905 ;;		None
  8906 ;; Tracked objects:
  8907 ;;		On entry : 0/0
  8908 ;;		On exit  : 0/0
  8909 ;;		Unchanged: 0/0
  8910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8912 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8914 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8915 ;;Total ram usage:        0 bytes
  8916 ;; Hardware stack levels used:    1
  8917 ;; Hardware stack levels required when called:    7
  8918 ;; This function calls:
  8919 ;;		Nothing
  8920 ;; This function is called by:
  8921 ;;		_main
  8922 ;; This function uses a non-reentrant model
  8923 ;;
  8924                           
  8925                           	psect	text43
  8926  002AC0                     __ptext43:
  8927                           	opt stack 0
  8928  002AC0                     _PortTestA5:
  8929                           	opt stack 23
  8930  002AC0                     l293:
  8931  002AC0  A281               	btfss	3969,1,c	;volatile
  8932  002AC2  D7FE               	goto	l293
  8933                           
  8934                           ;PortHigh.c: 18: }
  8935                           ;PortHigh.c: 19: LATAbits.LATA5 = 1;
  8936  002AC4  8A89               	bsf	3977,5,c	;volatile
  8937  002AC6                     l296:
  8938  002AC6  B281               	btfsc	3969,1,c	;volatile
  8939  002AC8  D7FE               	goto	l296
  8940                           
  8941                           ;PortHigh.c: 22: }
  8942                           ;PortHigh.c: 23: __nop();
  8943  002ACA  F000               	nop	
  8944                           
  8945                           ;PortHigh.c: 24: __nop();
  8946  002ACC  F000               	nop	
  8947                           
  8948                           ;PortHigh.c: 25: LATAbits.LATA5 = 0;
  8949  002ACE  9A89               	bcf	3977,5,c	;volatile
  8950  002AD0  0012               	return		;funcret
  8951  002AD2                     __end_of_PortTestA5:
  8952                           	opt stack 0
  8953                           tblptru	equ	0xFF8
  8954                           tblptrh	equ	0xFF7
  8955                           tblptrl	equ	0xFF6
  8956                           tablat	equ	0xFF5
  8957                           prodh	equ	0xFF4
  8958                           prodl	equ	0xFF3
  8959                           intcon	equ	0xFF2
  8960                           intcon2	equ	0xFF1
  8961                           intcon3	equ	0xFF0
  8962                           indf0	equ	0xFEF
  8963                           postinc0	equ	0xFEE
  8964                           fsr0h	equ	0xFEA
  8965                           fsr0l	equ	0xFE9
  8966                           wreg	equ	0xFE8
  8967                           postdec1	equ	0xFE5
  8968                           fsr1l	equ	0xFE1
  8969                           indf2	equ	0xFDF
  8970                           postinc2	equ	0xFDE
  8971                           postdec2	equ	0xFDD
  8972                           fsr2h	equ	0xFDA
  8973                           fsr2l	equ	0xFD9
  8974                           status	equ	0xFD8
  8975                           
  8976 ;; *************** function _handler *****************
  8977 ;; Defined at:
  8978 ;;		line 15 in file "interruptHandler.c"
  8979 ;; Parameters:    Size  Location     Type
  8980 ;;		None
  8981 ;; Auto vars:     Size  Location     Type
  8982 ;;		None
  8983 ;; Return value:  Size  Location     Type
  8984 ;;                  1    wreg      void 
  8985 ;; Registers used:
  8986 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8987 ;; Tracked objects:
  8988 ;;		On entry : 0/0
  8989 ;;		On exit  : 0/0
  8990 ;;		Unchanged: 0/0
  8991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8994 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8995 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8996 ;;Total ram usage:       16 bytes
  8997 ;; Hardware stack levels used:    1
  8998 ;; Hardware stack levels required when called:    6
  8999 ;; This function calls:
  9000 ;;		_printSortTimer
  9001 ;;		_updateMenu
  9002 ;; This function is called by:
  9003 ;;		Interrupt level 2
  9004 ;; This function uses a non-reentrant model
  9005 ;;
  9006                           
  9007                           	psect	intcode
  9008  000008                     __pintcode:
  9009                           	opt stack 0
  9010  000008                     _handler:
  9011                           	opt stack 18
  9012                           
  9013                           ;incstack = 0
  9014  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9015  00000A  ED33  F00C         	call	int_func,f	;refresh shadow registers
  9016                           tblptru	equ	0xFF8
  9017                           tblptrh	equ	0xFF7
  9018                           tblptrl	equ	0xFF6
  9019                           tablat	equ	0xFF5
  9020                           prodh	equ	0xFF4
  9021                           prodl	equ	0xFF3
  9022                           intcon	equ	0xFF2
  9023                           intcon2	equ	0xFF1
  9024                           intcon3	equ	0xFF0
  9025                           indf0	equ	0xFEF
  9026                           postinc0	equ	0xFEE
  9027                           fsr0h	equ	0xFEA
  9028                           fsr0l	equ	0xFE9
  9029                           wreg	equ	0xFE8
  9030                           postdec1	equ	0xFE5
  9031                           fsr1l	equ	0xFE1
  9032                           indf2	equ	0xFDF
  9033                           postinc2	equ	0xFDE
  9034                           postdec2	equ	0xFDD
  9035                           fsr2h	equ	0xFDA
  9036                           fsr2l	equ	0xFD9
  9037                           status	equ	0xFD8
  9038                           
  9039                           	psect	intcode_body
  9040  001866                     __pintcode_body:
  9041                           	opt stack 18
  9042  001866                     int_func:
  9043                           	opt stack 18
  9044  001866  0006               	pop		; remove dummy address from shadow register refresh
  9045  001868  CFFA F04D          	movff	pclath,??_handler+2
  9046  00186C  CFFB F04E          	movff	pclatu,??_handler+3
  9047  001870  CFE9 F04F          	movff	fsr0l,??_handler+4
  9048  001874  CFEA F050          	movff	fsr0h,??_handler+5
  9049  001878  CFE1 F051          	movff	fsr1l,??_handler+6
  9050  00187C  CFE2 F052          	movff	fsr1h,??_handler+7
  9051  001880  CFD9 F053          	movff	fsr2l,??_handler+8
  9052  001884  CFDA F054          	movff	fsr2h,??_handler+9
  9053  001888  CFF3 F055          	movff	prodl,??_handler+10
  9054  00188C  CFF4 F056          	movff	prodh,??_handler+11
  9055  001890  CFF6 F057          	movff	tblptrl,??_handler+12
  9056  001894  CFF7 F058          	movff	tblptrh,??_handler+13
  9057  001898  CFF8 F059          	movff	tblptru,??_handler+14
  9058  00189C  CFF5 F05A          	movff	tablat,??_handler+15
  9059                           
  9060                           ;interruptHandler.c: 17: if(INT1IF){
  9061  0018A0  A0F0               	btfss	intcon3,0,c	;volatile
  9062  0018A2  D018               	goto	i2l5960
  9063                           
  9064                           ;interruptHandler.c: 18: INT1IF = 0;
  9065  0018A4  90F0               	bcf	intcon3,0,c	;volatile
  9066                           
  9067                           ;interruptHandler.c: 19: if(machine_state == UI_state) {
  9068  0018A6  0100               	movlb	0	; () banked
  9069  0018A8  51F7               	movf	_machine_state& (0+255),w,b
  9070  0018AA  A4D8               	btfss	status,2,c
  9071  0018AC  D013               	goto	i2l5960
  9072                           
  9073                           ; BSR set to: 0
  9074                           ;interruptHandler.c: 20: input = keys[(PORTB & 0xF0) >> 4];
  9075  0018AE  3881               	swapf	3969,w,c	;volatile
  9076  0018B0  0B0F               	andlw	15
  9077  0018B2  0B0F               	andlw	15
  9078  0018B4  6E4B               	movwf	??_handler& (0+255),c
  9079  0018B6  6A4C               	clrf	(??_handler+1)& (0+255),c
  9080  0018B8  0EB5               	movlw	low _keys
  9081  0018BA  244B               	addwf	??_handler,w,c
  9082  0018BC  6EF6               	movwf	tblptrl,c
  9083  0018BE  0EFD               	movlw	high _keys
  9084  0018C0  204C               	addwfc	??_handler+1,w,c
  9085  0018C2  6EF7               	movwf	tblptrh,c
  9086  0018C4                     	if	1	;There are 3 active tblptr bytes
  9087  0018C4  6AF8               	clrf	tblptru,c
  9088  0018C6  0E00               	movlw	low (__mediumconst shr (0+16))
  9089  0018C8  22F8               	addwfc	tblptru,f,c
  9090  0018CA                     	endif
  9091  0018CA  0008               	tblrd		*
  9092  0018CC  CFF5 F079          	movff	tablat,_input
  9093                           
  9094                           ; BSR set to: 0
  9095                           ;interruptHandler.c: 21: updateMenu();
  9096  0018D0  ECC8  F007         	call	_updateMenu	;wreg free
  9097  0018D4                     i2l5960:
  9098                           
  9099                           ;interruptHandler.c: 22: }
  9100                           ;interruptHandler.c: 23: }
  9101                           ;interruptHandler.c: 26: if(TMR0IF){
  9102  0018D4  A4F2               	btfss	intcon,2,c	;volatile
  9103  0018D6  D00C               	goto	i2l5974
  9104                           
  9105                           ;interruptHandler.c: 27: TMR0IF = 0;
  9106  0018D8  94F2               	bcf	intcon,2,c	;volatile
  9107                           
  9108                           ;interruptHandler.c: 28: if(machine_state == Sorting_state){
  9109  0018DA  0100               	movlb	0	; () banked
  9110  0018DC  05F7               	decf	_machine_state& (0+255),w,b
  9111  0018DE  A4D8               	btfss	status,2,c
  9112  0018E0  D007               	goto	i2l5974
  9113                           
  9114                           ; BSR set to: 0
  9115                           ;interruptHandler.c: 29: printSortTimer();
  9116  0018E2  EC43  F00A         	call	_printSortTimer	;wreg free
  9117                           
  9118                           ;interruptHandler.c: 31: TMR0H = 0b10000101;
  9119  0018E6  0E85               	movlw	133
  9120  0018E8  6ED7               	movwf	4055,c	;volatile
  9121                           
  9122                           ;interruptHandler.c: 32: TMR0L = 0b11101110;
  9123  0018EA  0EEE               	movlw	238
  9124  0018EC  6ED6               	movwf	4054,c	;volatile
  9125                           
  9126                           ;interruptHandler.c: 33: TMR0ON = 1;
  9127  0018EE  8ED5               	bsf	4053,7,c	;volatile
  9128  0018F0                     i2l5974:
  9129                           
  9130                           ;interruptHandler.c: 34: }
  9131                           ;interruptHandler.c: 35: }
  9132                           ;interruptHandler.c: 38: if(TMR1IF){
  9133  0018F0  A09E               	btfss	3998,0,c	;volatile
  9134  0018F2  D01E               	goto	i2l5998
  9135                           
  9136                           ;interruptHandler.c: 39: TMR1IF = 0;
  9137  0018F4  909E               	bcf	3998,0,c	;volatile
  9138                           
  9139                           ;interruptHandler.c: 40: TMR1ON = 0;
  9140  0018F6  90CD               	bcf	4045,0,c	;volatile
  9141                           
  9142                           ;interruptHandler.c: 41: if(machine_state == Sorting_state){
  9143  0018F8  0100               	movlb	0	; () banked
  9144  0018FA  05F7               	decf	_machine_state& (0+255),w,b
  9145  0018FC  A4D8               	btfss	status,2,c
  9146  0018FE  D018               	goto	i2l5998
  9147                           
  9148                           ; BSR set to: 0
  9149                           ;interruptHandler.c: 42: if(was_low){
  9150  001900  5075               	movf	_was_low,w,c
  9151  001902  1076               	iorwf	_was_low+1,w,c
  9152  001904  B4D8               	btfsc	status,2,c
  9153  001906  D00A               	goto	i2l1404
  9154                           
  9155                           ; BSR set to: 0
  9156                           ;interruptHandler.c: 44: LATCbits.LATC2 = 1;
  9157  001908  848B               	bsf	3979,2,c	;volatile
  9158                           
  9159                           ; BSR set to: 0
  9160                           ;interruptHandler.c: 45: was_low = 0;
  9161  00190A  0E00               	movlw	0
  9162  00190C  6E76               	movwf	_was_low+1,c
  9163  00190E  0E00               	movlw	0
  9164  001910  6E75               	movwf	_was_low,c
  9165                           
  9166                           ; BSR set to: 0
  9167                           ;interruptHandler.c: 47: TMR1H = timer1highbits;
  9168  001912  C06B  FFCF         	movff	_timer1highbits,4047	;volatile
  9169                           
  9170                           ; BSR set to: 0
  9171                           ;interruptHandler.c: 48: TMR1L = timer1lowbits;
  9172  001916  C06D  FFCE         	movff	_timer1lowbits,4046	;volatile
  9173                           
  9174                           ;interruptHandler.c: 49: }
  9175  00191A  D009               	goto	i2l5996
  9176  00191C                     i2l1404:
  9177                           
  9178                           ; BSR set to: 0
  9179                           ;interruptHandler.c: 50: else{
  9180                           ;interruptHandler.c: 52: LATCbits.LATC2 = 0;
  9181  00191C  948B               	bcf	3979,2,c	;volatile
  9182                           
  9183                           ; BSR set to: 0
  9184                           ;interruptHandler.c: 53: was_low = 1;
  9185  00191E  0E00               	movlw	0
  9186  001920  6E76               	movwf	_was_low+1,c
  9187  001922  0E01               	movlw	1
  9188  001924  6E75               	movwf	_was_low,c
  9189                           
  9190                           ; BSR set to: 0
  9191                           ;interruptHandler.c: 55: TMR1H = timer1_20ms_high;
  9192  001926  C07A  FFCF         	movff	_timer1_20ms_high,4047	;volatile
  9193                           
  9194                           ; BSR set to: 0
  9195                           ;interruptHandler.c: 56: TMR1L = timer1_20ms_low;
  9196  00192A  C07C  FFCE         	movff	_timer1_20ms_low,4046	;volatile
  9197  00192E                     i2l5996:
  9198                           
  9199                           ; BSR set to: 0
  9200                           ;interruptHandler.c: 57: }
  9201                           ;interruptHandler.c: 58: TMR1ON = 1;
  9202  00192E  80CD               	bsf	4045,0,c	;volatile
  9203  001930                     i2l5998:
  9204                           
  9205                           ;interruptHandler.c: 59: }
  9206                           ;interruptHandler.c: 60: }
  9207                           ;interruptHandler.c: 63: if(TMR3IF){
  9208  001930  A2A1               	btfss	4001,1,c	;volatile
  9209  001932  D018               	goto	i2l1409
  9210                           
  9211                           ;interruptHandler.c: 64: TMR3IF = 0;
  9212  001934  92A1               	bcf	4001,1,c	;volatile
  9213                           
  9214                           ;interruptHandler.c: 65: TMR3ON = 0;
  9215  001936  90B1               	bcf	4017,0,c	;volatile
  9216                           
  9217                           ;interruptHandler.c: 66: TMR3counter++;
  9218  001938  4A5B               	infsnz	_TMR3counter,f,c
  9219  00193A  2A5C               	incf	_TMR3counter+1,f,c
  9220                           
  9221                           ;interruptHandler.c: 67: if(TMR3counter==10){
  9222  00193C  0E0A               	movlw	10
  9223  00193E  185B               	xorwf	_TMR3counter,w,c
  9224  001940  105C               	iorwf	_TMR3counter+1,w,c
  9225  001942  A4D8               	btfss	status,2,c
  9226  001944  D00A               	goto	i2l6008
  9227                           
  9228                           ;interruptHandler.c: 68: TMR3counter=0;
  9229  001946  0E00               	movlw	0
  9230  001948  6E5C               	movwf	_TMR3counter+1,c
  9231  00194A  0E00               	movlw	0
  9232  00194C  6E5B               	movwf	_TMR3counter,c
  9233                           
  9234                           ;interruptHandler.c: 69: TMR3CF = 1;
  9235  00194E  0E00               	movlw	0
  9236  001950  0100               	movlb	0	; () banked
  9237  001952  6FE0               	movwf	(_TMR3CF+1)& (0+255),b
  9238  001954  0E01               	movlw	1
  9239  001956  6FDF               	movwf	_TMR3CF& (0+255),b
  9240                           
  9241                           ;interruptHandler.c: 70: }
  9242  001958  D005               	goto	i2l1409
  9243  00195A                     i2l6008:
  9244                           
  9245                           ;interruptHandler.c: 71: else{
  9246                           ;interruptHandler.c: 72: TMR3H = 0b00111100;
  9247  00195A  0E3C               	movlw	60
  9248  00195C  6EB3               	movwf	4019,c	;volatile
  9249                           
  9250                           ;interruptHandler.c: 73: TMR3L = 0b10110000;
  9251  00195E  0EB0               	movlw	176
  9252  001960  6EB2               	movwf	4018,c	;volatile
  9253                           
  9254                           ;interruptHandler.c: 74: TMR3ON = 1;
  9255  001962  80B1               	bsf	4017,0,c	;volatile
  9256  001964                     i2l1409:
  9257  001964  C05A  FFF5         	movff	??_handler+15,tablat
  9258  001968  C059  FFF8         	movff	??_handler+14,tblptru
  9259  00196C  C058  FFF7         	movff	??_handler+13,tblptrh
  9260  001970  C057  FFF6         	movff	??_handler+12,tblptrl
  9261  001974  C056  FFF4         	movff	??_handler+11,prodh
  9262  001978  C055  FFF3         	movff	??_handler+10,prodl
  9263  00197C  C054  FFDA         	movff	??_handler+9,fsr2h
  9264  001980  C053  FFD9         	movff	??_handler+8,fsr2l
  9265  001984  C052  FFE2         	movff	??_handler+7,fsr1h
  9266  001988  C051  FFE1         	movff	??_handler+6,fsr1l
  9267  00198C  C050  FFEA         	movff	??_handler+5,fsr0h
  9268  001990  C04F  FFE9         	movff	??_handler+4,fsr0l
  9269  001994  C04E  FFFB         	movff	??_handler+3,pclatu
  9270  001998  C04D  FFFA         	movff	??_handler+2,pclath
  9271  00199C  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9272  00199E  0011               	retfie		f
  9273  0019A0                     __end_of_handler:
  9274                           	opt stack 0
  9275                           pclatu	equ	0xFFB
  9276                           pclath	equ	0xFFA
  9277                           tblptru	equ	0xFF8
  9278                           tblptrh	equ	0xFF7
  9279                           tblptrl	equ	0xFF6
  9280                           tablat	equ	0xFF5
  9281                           prodh	equ	0xFF4
  9282                           prodl	equ	0xFF3
  9283                           intcon	equ	0xFF2
  9284                           intcon2	equ	0xFF1
  9285                           intcon3	equ	0xFF0
  9286                           indf0	equ	0xFEF
  9287                           postinc0	equ	0xFEE
  9288                           fsr0h	equ	0xFEA
  9289                           fsr0l	equ	0xFE9
  9290                           wreg	equ	0xFE8
  9291                           postdec1	equ	0xFE5
  9292                           fsr1h	equ	0xFE2
  9293                           fsr1l	equ	0xFE1
  9294                           indf2	equ	0xFDF
  9295                           postinc2	equ	0xFDE
  9296                           postdec2	equ	0xFDD
  9297                           fsr2h	equ	0xFDA
  9298                           fsr2l	equ	0xFD9
  9299                           status	equ	0xFD8
  9300                           
  9301 ;; *************** function _updateMenu *****************
  9302 ;; Defined at:
  9303 ;;		line 156 in file "UI.c"
  9304 ;; Parameters:    Size  Location     Type
  9305 ;;		None
  9306 ;; Auto vars:     Size  Location     Type
  9307 ;;		None
  9308 ;; Return value:  Size  Location     Type
  9309 ;;                  1    wreg      void 
  9310 ;; Registers used:
  9311 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9312 ;; Tracked objects:
  9313 ;;		On entry : 0/0
  9314 ;;		On exit  : 0/0
  9315 ;;		Unchanged: 0/0
  9316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9319 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9320 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9321 ;;Total ram usage:        2 bytes
  9322 ;; Hardware stack levels used:    1
  9323 ;; Hardware stack levels required when called:    5
  9324 ;; This function calls:
  9325 ;;		_change_state_to_logs_11
  9326 ;;		_change_state_to_logs_12
  9327 ;;		_change_state_to_logs_22
  9328 ;;		_change_state_to_logs_23
  9329 ;;		_change_state_to_logs_33
  9330 ;;		_change_state_to_logs_34
  9331 ;;		_change_state_to_menu_11
  9332 ;;		_change_state_to_menu_23
  9333 ;;		_dispLogs
  9334 ;;		_inputHandler
  9335 ;;		i2_change_state_to_menu_12
  9336 ;;		i2_change_state_to_menu_22
  9337 ;;		i2_change_state_to_menu_start
  9338 ;; This function is called by:
  9339 ;;		_handler
  9340 ;; This function uses a non-reentrant model
  9341 ;;
  9342                           
  9343                           	psect	text45
  9344  000F90                     __ptext45:
  9345                           	opt stack 0
  9346  000F90                     _updateMenu:
  9347                           	opt stack 18
  9348                           
  9349                           ;UI.c: 157: up = 0; down = 0; enter = 0; back = 0;
  9350                           
  9351                           ;incstack = 0
  9352  000F90  0E00               	movlw	0
  9353  000F92  6E74               	movwf	_up+1,c
  9354  000F94  0E00               	movlw	0
  9355  000F96  6E73               	movwf	_up,c
  9356  000F98  0E00               	movlw	0
  9357  000F9A  6E66               	movwf	_down+1,c
  9358  000F9C  0E00               	movlw	0
  9359  000F9E  6E65               	movwf	_down,c
  9360  000FA0  0E00               	movlw	0
  9361  000FA2  6E68               	movwf	_enter+1,c
  9362  000FA4  0E00               	movlw	0
  9363  000FA6  6E67               	movwf	_enter,c
  9364  000FA8  0E00               	movlw	0
  9365  000FAA  6E60               	movwf	_back+1,c
  9366  000FAC  0E00               	movlw	0
  9367  000FAE  6E5F               	movwf	_back,c
  9368                           
  9369                           ;UI.c: 158: (INTCONbits.GIE = 0);
  9370  000FB0  9EF2               	bcf	intcon,7,c	;volatile
  9371                           
  9372                           ;UI.c: 160: if (inputHandler()
  9373                           ;UI.c: 163: ){
  9374  000FB2  EC40  F00B         	call	_inputHandler	;wreg free
  9375  000FB6  502A               	movf	?_inputHandler,w,c
  9376  000FB8  102B               	iorwf	?_inputHandler+1,w,c
  9377  000FBA  A4D8               	btfss	status,2,c
  9378  000FBC  D112               	goto	i2l5794
  9379  000FBE  D146               	goto	i2l482
  9380  000FC0                     i2l5646:
  9381                           
  9382                           ;UI.c: 167: change_state_to_menu_11();
  9383  000FC0  ECB3  F013         	call	_change_state_to_menu_11	;wreg free
  9384                           
  9385                           ;UI.c: 168: break;
  9386  000FC4  D143               	goto	i2l482
  9387  000FC6                     i2l5648:
  9388                           
  9389                           ;UI.c: 171: if(up){
  9390  000FC6  5073               	movf	_up,w,c
  9391  000FC8  1074               	iorwf	_up+1,w,c
  9392  000FCA  B4D8               	btfsc	status,2,c
  9393  000FCC  D003               	goto	i2l5652
  9394                           
  9395                           ;UI.c: 172: change_state_to_menu_23();
  9396  000FCE  EC9B  F013         	call	_change_state_to_menu_23	;wreg free
  9397                           
  9398                           ;UI.c: 173: }
  9399  000FD2  D13C               	goto	i2l482
  9400  000FD4                     i2l5652:
  9401                           
  9402                           ;UI.c: 174: else if(down){
  9403  000FD4  5065               	movf	_down,w,c
  9404  000FD6  1066               	iorwf	_down+1,w,c
  9405  000FD8  B4D8               	btfsc	status,2,c
  9406  000FDA  D003               	goto	i2l5656
  9407                           
  9408                           ;UI.c: 175: change_state_to_menu_12();
  9409  000FDC  EC83  F013         	call	i2_change_state_to_menu_12	;wreg free
  9410                           
  9411                           ;UI.c: 176: }
  9412  000FE0  D135               	goto	i2l482
  9413  000FE2                     i2l5656:
  9414                           
  9415                           ;UI.c: 177: else if(enter){
  9416  000FE2  5067               	movf	_enter,w,c
  9417  000FE4  1068               	iorwf	_enter+1,w,c
  9418  000FE6  B4D8               	btfsc	status,2,c
  9419  000FE8  D131               	goto	i2l482
  9420                           
  9421                           ;UI.c: 178: change_state_to_menu_start();
  9422  000FEA  ECC9  F014         	call	i2_change_state_to_menu_start	;wreg free
  9423                           
  9424                           ;UI.c: 179: }
  9425                           ;UI.c: 180: break;
  9426  000FEE  D12E               	goto	i2l482
  9427  000FF0                     i2l5660:
  9428                           
  9429                           ;UI.c: 183: if(up){
  9430  000FF0  5073               	movf	_up,w,c
  9431  000FF2  1074               	iorwf	_up+1,w,c
  9432  000FF4  B4D8               	btfsc	status,2,c
  9433  000FF6  D003               	goto	i2l5664
  9434                           
  9435                           ;UI.c: 184: change_state_to_menu_11();
  9436  000FF8  ECB3  F013         	call	_change_state_to_menu_11	;wreg free
  9437                           
  9438                           ;UI.c: 185: }
  9439  000FFC  D127               	goto	i2l482
  9440  000FFE                     i2l5664:
  9441                           
  9442                           ;UI.c: 186: else if(down){
  9443  000FFE  5065               	movf	_down,w,c
  9444  001000  1066               	iorwf	_down+1,w,c
  9445  001002  B4D8               	btfsc	status,2,c
  9446  001004  D011               	goto	i2l5680
  9447                           
  9448                           ;UI.c: 187: change_state_to_menu_23();
  9449  001006  EC9B  F013         	call	_change_state_to_menu_23	;wreg free
  9450                           
  9451                           ;UI.c: 188: }
  9452  00100A  D120               	goto	i2l482
  9453  00100C                     i2l5672:
  9454                           
  9455                           ;UI.c: 195: if(up){
  9456  00100C  5073               	movf	_up,w,c
  9457  00100E  1074               	iorwf	_up+1,w,c
  9458  001010  B4D8               	btfsc	status,2,c
  9459  001012  D003               	goto	i2l5676
  9460                           
  9461                           ;UI.c: 196: change_state_to_menu_11();
  9462  001014  ECB3  F013         	call	_change_state_to_menu_11	;wreg free
  9463                           
  9464                           ;UI.c: 197: }
  9465  001018  D119               	goto	i2l482
  9466  00101A                     i2l5676:
  9467                           
  9468                           ;UI.c: 198: else if(down){
  9469  00101A  5065               	movf	_down,w,c
  9470  00101C  1066               	iorwf	_down+1,w,c
  9471  00101E  B4D8               	btfsc	status,2,c
  9472  001020  D003               	goto	i2l5680
  9473                           
  9474                           ;UI.c: 199: change_state_to_menu_23();
  9475  001022  EC9B  F013         	call	_change_state_to_menu_23	;wreg free
  9476                           
  9477                           ;UI.c: 200: }
  9478  001026  D112               	goto	i2l482
  9479  001028                     i2l5680:
  9480                           
  9481                           ;UI.c: 201: else if(enter){
  9482  001028  5067               	movf	_enter,w,c
  9483  00102A  1068               	iorwf	_enter+1,w,c
  9484  00102C  B4D8               	btfsc	status,2,c
  9485  00102E  D10E               	goto	i2l482
  9486                           
  9487                           ;UI.c: 202: machine_state = Sorting_state;
  9488  001030  0E01               	movlw	1
  9489  001032  0100               	movlb	0	; () banked
  9490  001034  6FF7               	movwf	_machine_state& (0+255),b
  9491                           
  9492                           ; BSR set to: 0
  9493                           ;UI.c: 203: }
  9494                           ;UI.c: 204: break;
  9495                           
  9496                           ; BSR set to: 0
  9497                           
  9498                           ; BSR set to: 0
  9499  001036  D10A               	goto	i2l482
  9500  001038                     i2l5684:
  9501                           
  9502                           ;UI.c: 207: if(up){
  9503  001038  5073               	movf	_up,w,c
  9504  00103A  1074               	iorwf	_up+1,w,c
  9505  00103C  B4D8               	btfsc	status,2,c
  9506  00103E  D003               	goto	i2l5688
  9507                           
  9508                           ;UI.c: 208: change_state_to_menu_22();
  9509  001040  EC6B  F013         	call	i2_change_state_to_menu_22	;wreg free
  9510                           
  9511                           ;UI.c: 209: }
  9512  001044  D103               	goto	i2l482
  9513  001046                     i2l5688:
  9514                           
  9515                           ;UI.c: 210: else if(down){
  9516  001046  5065               	movf	_down,w,c
  9517  001048  1066               	iorwf	_down+1,w,c
  9518  00104A  B4D8               	btfsc	status,2,c
  9519  00104C  D003               	goto	i2l5692
  9520                           
  9521                           ;UI.c: 211: change_state_to_menu_11();
  9522  00104E  ECB3  F013         	call	_change_state_to_menu_11	;wreg free
  9523                           
  9524                           ;UI.c: 212: }
  9525  001052  D0FC               	goto	i2l482
  9526  001054                     i2l5692:
  9527                           
  9528                           ;UI.c: 213: else if(enter){
  9529  001054  5067               	movf	_enter,w,c
  9530  001056  1068               	iorwf	_enter+1,w,c
  9531  001058  B4D8               	btfsc	status,2,c
  9532  00105A  D0F8               	goto	i2l482
  9533                           
  9534                           ;UI.c: 214: change_state_to_logs_11();
  9535  00105C  EC2B  F014         	call	_change_state_to_logs_11	;wreg free
  9536                           
  9537                           ;UI.c: 215: }
  9538                           ;UI.c: 216: break;
  9539  001060  D0F5               	goto	i2l482
  9540  001062                     i2l5696:
  9541                           
  9542                           ;UI.c: 219: if(up){
  9543  001062  5073               	movf	_up,w,c
  9544  001064  1074               	iorwf	_up+1,w,c
  9545  001066  B4D8               	btfsc	status,2,c
  9546  001068  D003               	goto	i2l5700
  9547                           
  9548                           ;UI.c: 220: change_state_to_logs_34();
  9549  00106A  ECCB  F013         	call	_change_state_to_logs_34	;wreg free
  9550                           
  9551                           ;UI.c: 221: }
  9552  00106E  D0EE               	goto	i2l482
  9553  001070                     i2l5700:
  9554                           
  9555                           ;UI.c: 222: else if(down){
  9556  001070  5065               	movf	_down,w,c
  9557  001072  1066               	iorwf	_down+1,w,c
  9558  001074  B4D8               	btfsc	status,2,c
  9559  001076  D003               	goto	i2l5704
  9560                           
  9561                           ;UI.c: 223: change_state_to_logs_12();
  9562  001078  EC13  F014         	call	_change_state_to_logs_12	;wreg free
  9563                           
  9564                           ;UI.c: 224: }
  9565  00107C  D0E7               	goto	i2l482
  9566  00107E                     i2l5704:
  9567                           
  9568                           ;UI.c: 225: else if(enter){
  9569  00107E  5067               	movf	_enter,w,c
  9570  001080  1068               	iorwf	_enter+1,w,c
  9571  001082  B4D8               	btfsc	status,2,c
  9572  001084  D007               	goto	i2l5708
  9573                           
  9574                           ;UI.c: 226: dispLogs(1);
  9575  001086  0E00               	movlw	0
  9576  001088  6E02               	movwf	dispLogs@myLog+1,c
  9577  00108A  0E01               	movlw	1
  9578  00108C  6E01               	movwf	dispLogs@myLog,c
  9579  00108E  EC56  F015         	call	_dispLogs	;wreg free
  9580                           
  9581                           ;UI.c: 227: }
  9582  001092  D0DC               	goto	i2l482
  9583  001094                     i2l5708:
  9584                           
  9585                           ;UI.c: 228: else if(back){
  9586  001094  505F               	movf	_back,w,c
  9587  001096  1060               	iorwf	_back+1,w,c
  9588  001098  B4D8               	btfsc	status,2,c
  9589  00109A  D0D8               	goto	i2l482
  9590                           
  9591                           ;UI.c: 229: change_state_to_menu_23();
  9592  00109C  EC9B  F013         	call	_change_state_to_menu_23	;wreg free
  9593                           
  9594                           ;UI.c: 230: }
  9595                           ;UI.c: 231: break;
  9596  0010A0  D0D5               	goto	i2l482
  9597  0010A2                     i2l5712:
  9598                           
  9599                           ;UI.c: 234: if(up){
  9600  0010A2  5073               	movf	_up,w,c
  9601  0010A4  1074               	iorwf	_up+1,w,c
  9602  0010A6  B4D8               	btfsc	status,2,c
  9603  0010A8  D003               	goto	i2l5716
  9604                           
  9605                           ;UI.c: 235: change_state_to_logs_11();
  9606  0010AA  EC2B  F014         	call	_change_state_to_logs_11	;wreg free
  9607                           
  9608                           ;UI.c: 236: }
  9609  0010AE  D0CE               	goto	i2l482
  9610  0010B0                     i2l5716:
  9611                           
  9612                           ;UI.c: 237: else if(down){
  9613  0010B0  5065               	movf	_down,w,c
  9614  0010B2  1066               	iorwf	_down+1,w,c
  9615  0010B4  B4D8               	btfsc	status,2,c
  9616  0010B6  D003               	goto	i2l5720
  9617                           
  9618                           ;UI.c: 238: change_state_to_logs_23();
  9619  0010B8  EC71  F014         	call	_change_state_to_logs_23	;wreg free
  9620                           
  9621                           ;UI.c: 239: }
  9622  0010BC  D0C7               	goto	i2l482
  9623  0010BE                     i2l5720:
  9624                           
  9625                           ;UI.c: 240: else if(enter){
  9626  0010BE  5067               	movf	_enter,w,c
  9627  0010C0  1068               	iorwf	_enter+1,w,c
  9628  0010C2  B4D8               	btfsc	status,2,c
  9629  0010C4  D007               	goto	i2l5724
  9630                           
  9631                           ;UI.c: 241: dispLogs(2);
  9632  0010C6  0E00               	movlw	0
  9633  0010C8  6E02               	movwf	dispLogs@myLog+1,c
  9634  0010CA  0E02               	movlw	2
  9635  0010CC  6E01               	movwf	dispLogs@myLog,c
  9636  0010CE  EC56  F015         	call	_dispLogs	;wreg free
  9637                           
  9638                           ;UI.c: 242: }
  9639  0010D2  D0BC               	goto	i2l482
  9640  0010D4                     i2l5724:
  9641                           
  9642                           ;UI.c: 243: else if(back){
  9643  0010D4  505F               	movf	_back,w,c
  9644  0010D6  1060               	iorwf	_back+1,w,c
  9645  0010D8  B4D8               	btfsc	status,2,c
  9646  0010DA  D0B8               	goto	i2l482
  9647                           
  9648                           ;UI.c: 244: change_state_to_menu_23();
  9649  0010DC  EC9B  F013         	call	_change_state_to_menu_23	;wreg free
  9650                           
  9651                           ;UI.c: 245: }
  9652                           ;UI.c: 246: break;
  9653  0010E0  D0B5               	goto	i2l482
  9654  0010E2                     i2l5728:
  9655                           
  9656                           ;UI.c: 249: if(up){
  9657  0010E2  5073               	movf	_up,w,c
  9658  0010E4  1074               	iorwf	_up+1,w,c
  9659  0010E6  B4D8               	btfsc	status,2,c
  9660  0010E8  D003               	goto	i2l5732
  9661                           
  9662                           ;UI.c: 250: change_state_to_logs_11();
  9663  0010EA  EC2B  F014         	call	_change_state_to_logs_11	;wreg free
  9664                           
  9665                           ;UI.c: 251: }
  9666  0010EE  D0AE               	goto	i2l482
  9667  0010F0                     i2l5732:
  9668                           
  9669                           ;UI.c: 252: else if(down){
  9670  0010F0  5065               	movf	_down,w,c
  9671  0010F2  1066               	iorwf	_down+1,w,c
  9672  0010F4  B4D8               	btfsc	status,2,c
  9673  0010F6  D003               	goto	i2l5736
  9674                           
  9675                           ;UI.c: 253: change_state_to_logs_23();
  9676  0010F8  EC71  F014         	call	_change_state_to_logs_23	;wreg free
  9677                           
  9678                           ;UI.c: 254: }
  9679  0010FC  D0A7               	goto	i2l482
  9680  0010FE                     i2l5736:
  9681                           
  9682                           ;UI.c: 255: else if(enter){
  9683  0010FE  5067               	movf	_enter,w,c
  9684  001100  1068               	iorwf	_enter+1,w,c
  9685  001102  B4D8               	btfsc	status,2,c
  9686  001104  D007               	goto	i2l5740
  9687                           
  9688                           ;UI.c: 256: dispLogs(2);
  9689  001106  0E00               	movlw	0
  9690  001108  6E02               	movwf	dispLogs@myLog+1,c
  9691  00110A  0E02               	movlw	2
  9692  00110C  6E01               	movwf	dispLogs@myLog,c
  9693  00110E  EC56  F015         	call	_dispLogs	;wreg free
  9694                           
  9695                           ;UI.c: 257: }
  9696  001112  D09C               	goto	i2l482
  9697  001114                     i2l5740:
  9698                           
  9699                           ;UI.c: 258: else if(back){
  9700  001114  505F               	movf	_back,w,c
  9701  001116  1060               	iorwf	_back+1,w,c
  9702  001118  B4D8               	btfsc	status,2,c
  9703  00111A  D098               	goto	i2l482
  9704                           
  9705                           ;UI.c: 259: change_state_to_menu_23();
  9706  00111C  EC9B  F013         	call	_change_state_to_menu_23	;wreg free
  9707                           
  9708                           ;UI.c: 260: }
  9709                           ;UI.c: 261: break;
  9710  001120  D095               	goto	i2l482
  9711  001122                     i2l5744:
  9712                           
  9713                           ;UI.c: 264: if(up){
  9714  001122  5073               	movf	_up,w,c
  9715  001124  1074               	iorwf	_up+1,w,c
  9716  001126  B4D8               	btfsc	status,2,c
  9717  001128  D003               	goto	i2l5748
  9718                           
  9719                           ;UI.c: 265: change_state_to_logs_22();
  9720  00112A  ECFB  F013         	call	_change_state_to_logs_22	;wreg free
  9721                           
  9722                           ;UI.c: 266: }
  9723  00112E  D08E               	goto	i2l482
  9724  001130                     i2l5748:
  9725                           
  9726                           ;UI.c: 267: else if(down){
  9727  001130  5065               	movf	_down,w,c
  9728  001132  1066               	iorwf	_down+1,w,c
  9729  001134  B4D8               	btfsc	status,2,c
  9730  001136  D003               	goto	i2l5752
  9731                           
  9732                           ;UI.c: 268: change_state_to_logs_34();
  9733  001138  ECCB  F013         	call	_change_state_to_logs_34	;wreg free
  9734                           
  9735                           ;UI.c: 269: }
  9736  00113C  D087               	goto	i2l482
  9737  00113E                     i2l5752:
  9738                           
  9739                           ;UI.c: 270: else if(enter){
  9740  00113E  5067               	movf	_enter,w,c
  9741  001140  1068               	iorwf	_enter+1,w,c
  9742  001142  B4D8               	btfsc	status,2,c
  9743  001144  D007               	goto	i2l5756
  9744                           
  9745                           ;UI.c: 271: dispLogs(3);
  9746  001146  0E00               	movlw	0
  9747  001148  6E02               	movwf	dispLogs@myLog+1,c
  9748  00114A  0E03               	movlw	3
  9749  00114C  6E01               	movwf	dispLogs@myLog,c
  9750  00114E  EC56  F015         	call	_dispLogs	;wreg free
  9751                           
  9752                           ;UI.c: 272: }
  9753  001152  D07C               	goto	i2l482
  9754  001154                     i2l5756:
  9755                           
  9756                           ;UI.c: 273: else if(back){
  9757  001154  505F               	movf	_back,w,c
  9758  001156  1060               	iorwf	_back+1,w,c
  9759  001158  B4D8               	btfsc	status,2,c
  9760  00115A  D078               	goto	i2l482
  9761                           
  9762                           ;UI.c: 274: change_state_to_menu_23();
  9763  00115C  EC9B  F013         	call	_change_state_to_menu_23	;wreg free
  9764                           
  9765                           ;UI.c: 275: }
  9766                           ;UI.c: 276: break;
  9767  001160  D075               	goto	i2l482
  9768  001162                     i2l5760:
  9769                           
  9770                           ;UI.c: 279: if(up){
  9771  001162  5073               	movf	_up,w,c
  9772  001164  1074               	iorwf	_up+1,w,c
  9773  001166  B4D8               	btfsc	status,2,c
  9774  001168  D003               	goto	i2l5764
  9775                           
  9776                           ;UI.c: 280: change_state_to_logs_22();
  9777  00116A  ECFB  F013         	call	_change_state_to_logs_22	;wreg free
  9778                           
  9779                           ;UI.c: 281: }
  9780  00116E  D06E               	goto	i2l482
  9781  001170                     i2l5764:
  9782                           
  9783                           ;UI.c: 282: else if(down){
  9784  001170  5065               	movf	_down,w,c
  9785  001172  1066               	iorwf	_down+1,w,c
  9786  001174  B4D8               	btfsc	status,2,c
  9787  001176  D003               	goto	i2l5768
  9788                           
  9789                           ;UI.c: 283: change_state_to_logs_34();
  9790  001178  ECCB  F013         	call	_change_state_to_logs_34	;wreg free
  9791                           
  9792                           ;UI.c: 284: }
  9793  00117C  D067               	goto	i2l482
  9794  00117E                     i2l5768:
  9795                           
  9796                           ;UI.c: 285: else if(enter){
  9797  00117E  5067               	movf	_enter,w,c
  9798  001180  1068               	iorwf	_enter+1,w,c
  9799  001182  B4D8               	btfsc	status,2,c
  9800  001184  D007               	goto	i2l5772
  9801                           
  9802                           ;UI.c: 286: dispLogs(3);
  9803  001186  0E00               	movlw	0
  9804  001188  6E02               	movwf	dispLogs@myLog+1,c
  9805  00118A  0E03               	movlw	3
  9806  00118C  6E01               	movwf	dispLogs@myLog,c
  9807  00118E  EC56  F015         	call	_dispLogs	;wreg free
  9808                           
  9809                           ;UI.c: 287: }
  9810  001192  D05C               	goto	i2l482
  9811  001194                     i2l5772:
  9812                           
  9813                           ;UI.c: 288: else if(back){
  9814  001194  505F               	movf	_back,w,c
  9815  001196  1060               	iorwf	_back+1,w,c
  9816  001198  B4D8               	btfsc	status,2,c
  9817  00119A  D058               	goto	i2l482
  9818                           
  9819                           ;UI.c: 289: change_state_to_menu_23();
  9820  00119C  EC9B  F013         	call	_change_state_to_menu_23	;wreg free
  9821                           
  9822                           ;UI.c: 290: }
  9823                           ;UI.c: 291: break;
  9824  0011A0  D055               	goto	i2l482
  9825  0011A2                     i2l5776:
  9826                           
  9827                           ;UI.c: 294: if(up){
  9828  0011A2  5073               	movf	_up,w,c
  9829  0011A4  1074               	iorwf	_up+1,w,c
  9830  0011A6  B4D8               	btfsc	status,2,c
  9831  0011A8  D003               	goto	i2l5780
  9832                           
  9833                           ;UI.c: 295: change_state_to_logs_33();
  9834  0011AA  ECE3  F013         	call	_change_state_to_logs_33	;wreg free
  9835                           
  9836                           ;UI.c: 296: }
  9837  0011AE  D04E               	goto	i2l482
  9838  0011B0                     i2l5780:
  9839                           
  9840                           ;UI.c: 297: else if(down){
  9841  0011B0  5065               	movf	_down,w,c
  9842  0011B2  1066               	iorwf	_down+1,w,c
  9843  0011B4  B4D8               	btfsc	status,2,c
  9844  0011B6  D003               	goto	i2l5784
  9845                           
  9846                           ;UI.c: 298: change_state_to_logs_11();
  9847  0011B8  EC2B  F014         	call	_change_state_to_logs_11	;wreg free
  9848                           
  9849                           ;UI.c: 299: }
  9850  0011BC  D047               	goto	i2l482
  9851  0011BE                     i2l5784:
  9852                           
  9853                           ;UI.c: 300: else if(enter){
  9854  0011BE  5067               	movf	_enter,w,c
  9855  0011C0  1068               	iorwf	_enter+1,w,c
  9856  0011C2  B4D8               	btfsc	status,2,c
  9857  0011C4  D007               	goto	i2l5788
  9858                           
  9859                           ;UI.c: 301: dispLogs(4);
  9860  0011C6  0E00               	movlw	0
  9861  0011C8  6E02               	movwf	dispLogs@myLog+1,c
  9862  0011CA  0E04               	movlw	4
  9863  0011CC  6E01               	movwf	dispLogs@myLog,c
  9864  0011CE  EC56  F015         	call	_dispLogs	;wreg free
  9865                           
  9866                           ;UI.c: 302: }
  9867  0011D2  D03C               	goto	i2l482
  9868  0011D4                     i2l5788:
  9869                           
  9870                           ;UI.c: 303: else if(back){
  9871  0011D4  505F               	movf	_back,w,c
  9872  0011D6  1060               	iorwf	_back+1,w,c
  9873  0011D8  B4D8               	btfsc	status,2,c
  9874  0011DA  D038               	goto	i2l482
  9875                           
  9876                           ;UI.c: 304: change_state_to_menu_23();
  9877  0011DC  EC9B  F013         	call	_change_state_to_menu_23	;wreg free
  9878                           
  9879                           ;UI.c: 310: }
  9880                           
  9881                           ;UI.c: 309: break;
  9882                           
  9883                           ;UI.c: 308: default:
  9884                           
  9885                           ;UI.c: 305: }
  9886                           ;UI.c: 306: break;
  9887  0011E0  D035               	goto	i2l482
  9888  0011E2                     i2l5794:
  9889  0011E2  C0E7  F043         	movff	_cur_state,??_updateMenu
  9890  0011E6  C0E8  F044         	movff	_cur_state+1,??_updateMenu+1
  9891                           
  9892                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
  9893                           ; Switch size 1, requested type "space"
  9894                           ; Number of cases is 3, Range of values is 0 to 4
  9895                           ; switch strategies available:
  9896                           ; Name         Instructions Cycles
  9897                           ; simple_byte           10     6 (average)
  9898                           ;	Chosen strategy is simple_byte
  9899  0011EA  5044               	movf	??_updateMenu+1,w,c
  9900  0011EC  0A00               	xorlw	0	; case 0
  9901  0011EE  B4D8               	btfsc	status,2,c
  9902  0011F0  D007               	goto	i2l6154
  9903  0011F2  0A03               	xorlw	3	; case 3
  9904  0011F4  B4D8               	btfsc	status,2,c
  9905  0011F6  D015               	goto	i2l6156
  9906  0011F8  0A07               	xorlw	7	; case 4
  9907  0011FA  B4D8               	btfsc	status,2,c
  9908  0011FC  D020               	goto	i2l6158
  9909  0011FE  D026               	goto	i2l482
  9910  001200                     i2l6154:
  9911                           
  9912                           ; Switch size 1, requested type "space"
  9913                           ; Number of cases is 5, Range of values is 0 to 23
  9914                           ; switch strategies available:
  9915                           ; Name         Instructions Cycles
  9916                           ; simple_byte           16     9 (average)
  9917                           ;	Chosen strategy is simple_byte
  9918  001200  5043               	movf	??_updateMenu,w,c
  9919  001202  0A00               	xorlw	0	; case 0
  9920  001204  B4D8               	btfsc	status,2,c
  9921  001206  D6DC               	goto	i2l5646
  9922  001208  0A0B               	xorlw	11	; case 11
  9923  00120A  B4D8               	btfsc	status,2,c
  9924  00120C  D6DC               	goto	i2l5648
  9925  00120E  0A07               	xorlw	7	; case 12
  9926  001210  B4D8               	btfsc	status,2,c
  9927  001212  D6EE               	goto	i2l5660
  9928  001214  0A1A               	xorlw	26	; case 22
  9929  001216  B4D8               	btfsc	status,2,c
  9930  001218  D6F9               	goto	i2l5672
  9931  00121A  0A01               	xorlw	1	; case 23
  9932  00121C  B4D8               	btfsc	status,2,c
  9933  00121E  D70C               	goto	i2l5684
  9934  001220  D015               	goto	i2l482
  9935  001222                     i2l6156:
  9936                           
  9937                           ; Switch size 1, requested type "space"
  9938                           ; Number of cases is 4, Range of values is 243 to 255
  9939                           ; switch strategies available:
  9940                           ; Name         Instructions Cycles
  9941                           ; simple_byte           13     7 (average)
  9942                           ;	Chosen strategy is simple_byte
  9943  001222  5043               	movf	??_updateMenu,w,c
  9944  001224  0AF3               	xorlw	243	; case 243
  9945  001226  B4D8               	btfsc	status,2,c
  9946  001228  D71C               	goto	i2l5696
  9947  00122A  0A07               	xorlw	7	; case 244
  9948  00122C  B4D8               	btfsc	status,2,c
  9949  00122E  D739               	goto	i2l5712
  9950  001230  0A0A               	xorlw	10	; case 254
  9951  001232  B4D8               	btfsc	status,2,c
  9952  001234  D756               	goto	i2l5728
  9953  001236  0A01               	xorlw	1	; case 255
  9954  001238  B4D8               	btfsc	status,2,c
  9955  00123A  D773               	goto	i2l5744
  9956  00123C  D007               	goto	i2l482
  9957  00123E                     i2l6158:
  9958                           
  9959                           ; Switch size 1, requested type "space"
  9960                           ; Number of cases is 2, Range of values is 9 to 10
  9961                           ; switch strategies available:
  9962                           ; Name         Instructions Cycles
  9963                           ; simple_byte            7     4 (average)
  9964                           ;	Chosen strategy is simple_byte
  9965  00123E  5043               	movf	??_updateMenu,w,c
  9966  001240  0A09               	xorlw	9	; case 9
  9967  001242  B4D8               	btfsc	status,2,c
  9968  001244  D78E               	goto	i2l5760
  9969  001246  0A03               	xorlw	3	; case 10
  9970  001248  B4D8               	btfsc	status,2,c
  9971  00124A  D7AB               	goto	i2l5776
  9972  00124C                     i2l482:
  9973                           
  9974                           ;UI.c: 311: }
  9975                           ;UI.c: 312: (INTCONbits.GIE = 1);
  9976  00124C  8EF2               	bsf	intcon,7,c	;volatile
  9977  00124E  0012               	return		;funcret
  9978  001250                     __end_of_updateMenu:
  9979                           	opt stack 0
  9980                           pclatu	equ	0xFFB
  9981                           pclath	equ	0xFFA
  9982                           tblptru	equ	0xFF8
  9983                           tblptrh	equ	0xFF7
  9984                           tblptrl	equ	0xFF6
  9985                           tablat	equ	0xFF5
  9986                           prodh	equ	0xFF4
  9987                           prodl	equ	0xFF3
  9988                           intcon	equ	0xFF2
  9989                           intcon2	equ	0xFF1
  9990                           intcon3	equ	0xFF0
  9991                           indf0	equ	0xFEF
  9992                           postinc0	equ	0xFEE
  9993                           fsr0h	equ	0xFEA
  9994                           fsr0l	equ	0xFE9
  9995                           wreg	equ	0xFE8
  9996                           postdec1	equ	0xFE5
  9997                           fsr1h	equ	0xFE2
  9998                           fsr1l	equ	0xFE1
  9999                           indf2	equ	0xFDF
 10000                           postinc2	equ	0xFDE
 10001                           postdec2	equ	0xFDD
 10002                           fsr2h	equ	0xFDA
 10003                           fsr2l	equ	0xFD9
 10004                           status	equ	0xFD8
 10005                           
 10006 ;; *************** function i2_change_state_to_menu_start *****************
 10007 ;; Defined at:
 10008 ;;		line 416 in file "UI.c"
 10009 ;; Parameters:    Size  Location     Type
 10010 ;;		None
 10011 ;; Auto vars:     Size  Location     Type
 10012 ;;		None
 10013 ;; Return value:  Size  Location     Type
 10014 ;;                  1    wreg      void 
 10015 ;; Registers used:
 10016 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10017 ;; Tracked objects:
 10018 ;;		On entry : 0/0
 10019 ;;		On exit  : 0/0
 10020 ;;		Unchanged: 0/0
 10021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10023 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10025 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10026 ;;Total ram usage:        0 bytes
 10027 ;; Hardware stack levels used:    1
 10028 ;; Hardware stack levels required when called:    4
 10029 ;; This function calls:
 10030 ;;		i2_lcdInst
 10031 ;;		i2_printRTC
 10032 ;;		i2_printf
 10033 ;; This function is called by:
 10034 ;;		_updateMenu
 10035 ;; This function uses a non-reentrant model
 10036 ;;
 10037                           
 10038                           	psect	text46
 10039  002992                     __ptext46:
 10040                           	opt stack 0
 10041  002992                     i2_change_state_to_menu_start:
 10042                           	opt stack 18
 10043                           
 10044                           ;UI.c: 417: cur_state = 0;
 10045                           
 10046                           ;incstack = 0
 10047  002992  0E00               	movlw	0
 10048  002994  0100               	movlb	0	; () banked
 10049  002996  6FE8               	movwf	(_cur_state+1)& (0+255),b
 10050  002998  0E00               	movlw	0
 10051  00299A  6FE7               	movwf	_cur_state& (0+255),b
 10052                           
 10053                           ; BSR set to: 0
 10054                           ;UI.c: 419: lcdInst(0b10000000);;
 10055  00299C  0E80               	movlw	128
 10056  00299E  EC88  F015         	call	i2_lcdInst
 10057                           
 10058                           ;UI.c: 420: printRTC();
 10059  0029A2  EC28  F009         	call	i2_printRTC	;wreg free
 10060                           
 10061                           ;UI.c: 421: lcdInst(0b11000000);;
 10062  0029A6  0EC0               	movlw	192
 10063  0029A8  EC88  F015         	call	i2_lcdInst
 10064                           
 10065                           ;UI.c: 422: printf("PUSH TO CONTINUE");
 10066  0029AC  0E97               	movlw	low STR_15
 10067  0029AE  6E0D               	movwf	i2printf@f,c
 10068  0029B0  0EFF               	movlw	high STR_15
 10069  0029B2  6E0E               	movwf	i2printf@f+1,c
 10070  0029B4  ECC0  F004         	call	i2_printf	;wreg free
 10071  0029B8  0012               	return		;funcret
 10072  0029BA                     __end_ofi2_change_state_to_menu_start:
 10073                           	opt stack 0
 10074                           pclatu	equ	0xFFB
 10075                           pclath	equ	0xFFA
 10076                           tblptru	equ	0xFF8
 10077                           tblptrh	equ	0xFF7
 10078                           tblptrl	equ	0xFF6
 10079                           tablat	equ	0xFF5
 10080                           prodh	equ	0xFF4
 10081                           prodl	equ	0xFF3
 10082                           intcon	equ	0xFF2
 10083                           intcon2	equ	0xFF1
 10084                           intcon3	equ	0xFF0
 10085                           indf0	equ	0xFEF
 10086                           postinc0	equ	0xFEE
 10087                           fsr0h	equ	0xFEA
 10088                           fsr0l	equ	0xFE9
 10089                           wreg	equ	0xFE8
 10090                           postdec1	equ	0xFE5
 10091                           fsr1h	equ	0xFE2
 10092                           fsr1l	equ	0xFE1
 10093                           indf2	equ	0xFDF
 10094                           postinc2	equ	0xFDE
 10095                           postdec2	equ	0xFDD
 10096                           fsr2h	equ	0xFDA
 10097                           fsr2l	equ	0xFD9
 10098                           status	equ	0xFD8
 10099                           
 10100 ;; *************** function i2_printRTC *****************
 10101 ;; Defined at:
 10102 ;;		line 62 in file "RTC.c"
 10103 ;; Parameters:    Size  Location     Type
 10104 ;;		None
 10105 ;; Auto vars:     Size  Location     Type
 10106 ;;  printRTC       14   44[COMRAM] int [7]
 10107 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 10108 ;;  printRTC        2   64[COMRAM] int 
 10109 ;;  printRTC        2   58[COMRAM] int 
 10110 ;; Return value:  Size  Location     Type
 10111 ;;                  1    wreg      void 
 10112 ;; Registers used:
 10113 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10114 ;; Tracked objects:
 10115 ;;		On entry : 0/0
 10116 ;;		On exit  : 0/0
 10117 ;;		Unchanged: 0/0
 10118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10120 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10121 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10122 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10123 ;;Total ram usage:       25 bytes
 10124 ;; Hardware stack levels used:    1
 10125 ;; Hardware stack levels required when called:    3
 10126 ;; This function calls:
 10127 ;;		i2_getRTC
 10128 ;;		i2_lcdInst
 10129 ;;		i2_printf
 10130 ;;		i2_strcpy
 10131 ;; This function is called by:
 10132 ;;		i2_change_state_to_menu_start
 10133 ;; This function uses a non-reentrant model
 10134 ;;
 10135                           
 10136                           	psect	text47
 10137  001250                     __ptext47:
 10138                           	opt stack 0
 10139  001250                     i2_printRTC:
 10140                           	opt stack 18
 10141                           
 10142                           ;RTC.c: 63: getRTC();
 10143                           
 10144                           ;incstack = 0
 10145  001250  EC8C  F010         	call	i2_getRTC	;wreg free
 10146                           
 10147                           ;RTC.c: 64: char month[] = "MMM";
 10148  001254  C110  F03D         	movff	printRTC@F3207,i2printRTC@month
 10149  001258  C111  F03E         	movff	printRTC@F3207+1,i2printRTC@month+1
 10150  00125C  C112  F03F         	movff	printRTC@F3207+2,i2printRTC@month+2
 10151  001260  C113  F040         	movff	printRTC@F3207+3,i2printRTC@month+3
 10152                           
 10153                           ;RTC.c: 65: int INT_time[7];
 10154                           ;RTC.c: 66: for(int i = 0; i < 7; i++){
 10155  001264  0E00               	movlw	0
 10156  001266  6E42               	movwf	i2printRTC@i+1,c
 10157  001268  0E00               	movlw	0
 10158  00126A  6E41               	movwf	i2printRTC@i,c
 10159  00126C  BE42               	btfsc	i2printRTC@i+1,7,c
 10160  00126E  D006               	goto	i2l4936
 10161  001270  5042               	movf	i2printRTC@i+1,w,c
 10162  001272  E135               	bnz	i2l1077
 10163  001274  0E07               	movlw	7
 10164  001276  5C41               	subwf	i2printRTC@i,w,c
 10165  001278  B0D8               	btfsc	status,0,c
 10166  00127A  D031               	goto	i2l1077
 10167  00127C                     i2l4936:
 10168                           
 10169                           ;RTC.c: 67: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 10170  00127C  0ED4               	movlw	low _time
 10171  00127E  2441               	addwf	i2printRTC@i,w,c
 10172  001280  6ED9               	movwf	fsr2l,c
 10173  001282  0E00               	movlw	high _time
 10174  001284  2042               	addwfc	i2printRTC@i+1,w,c
 10175  001286  6EDA               	movwf	fsr2h,c
 10176  001288  50DF               	movf	indf2,w,c
 10177  00128A  6E2A               	movwf	??i2_printRTC& (0+255),c
 10178  00128C  3A2A               	swapf	??i2_printRTC,f,c
 10179  00128E  0E0F               	movlw	15
 10180  001290  162A               	andwf	??i2_printRTC,f,c
 10181  001292  0E0F               	movlw	15
 10182  001294  162A               	andwf	??i2_printRTC,f,c
 10183  001296  502A               	movf	??i2_printRTC,w,c
 10184  001298  0D0A               	mullw	10
 10185  00129A  0ED4               	movlw	low _time
 10186  00129C  2441               	addwf	i2printRTC@i,w,c
 10187  00129E  6ED9               	movwf	fsr2l,c
 10188  0012A0  0E00               	movlw	high _time
 10189  0012A2  2042               	addwfc	i2printRTC@i+1,w,c
 10190  0012A4  6EDA               	movwf	fsr2h,c
 10191  0012A6  50DF               	movf	indf2,w,c
 10192  0012A8  0B0F               	andlw	15
 10193  0012AA  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 10194  0012AC  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 10195  0012AE  50F3               	movf	prodl,w,c
 10196  0012B0  262B               	addwf	??i2_printRTC+1,f,c
 10197  0012B2  50F4               	movf	prodh,w,c
 10198  0012B4  222C               	addwfc	??i2_printRTC+2,f,c
 10199  0012B6  90D8               	bcf	status,0,c
 10200  0012B8  3441               	rlcf	i2printRTC@i,w,c
 10201  0012BA  6ED9               	movwf	fsr2l,c
 10202  0012BC  3442               	rlcf	i2printRTC@i+1,w,c
 10203  0012BE  6EDA               	movwf	fsr2h,c
 10204  0012C0  0E2D               	movlw	low i2printRTC@INT_time
 10205  0012C2  26D9               	addwf	fsr2l,f,c
 10206  0012C4  0E00               	movlw	high i2printRTC@INT_time
 10207  0012C6  22DA               	addwfc	fsr2h,f,c
 10208  0012C8  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 10209  0012CC  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 10210  0012D0  4A41               	infsnz	i2printRTC@i,f,c
 10211  0012D2  2A42               	incf	i2printRTC@i+1,f,c
 10212  0012D4  BE42               	btfsc	i2printRTC@i+1,7,c
 10213  0012D6  D7D2               	goto	i2l4936
 10214  0012D8  5042               	movf	i2printRTC@i+1,w,c
 10215  0012DA  E101               	bnz	i2u336_40
 10216  0012DC  D7CB               	goto	L7
 10217  0012DE                     i2u336_40:
 10218  0012DE                     i2l1077:
 10219                           
 10220                           ;RTC.c: 68: }
 10221                           ;RTC.c: 69: int RTC_month = INT_time[5];
 10222  0012DE  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 10223  0012E2  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 10224                           
 10225                           ;RTC.c: 70: switch(RTC_month){
 10226  0012E6  D084               	goto	i2l4968
 10227  0012E8                     i2l4942:
 10228                           
 10229                           ;RTC.c: 72: strcpy(month, "Jan");
 10230  0012E8  0E3D               	movlw	low i2printRTC@month
 10231  0012EA  6E01               	movwf	i2strcpy@to,c
 10232  0012EC  0E00               	movlw	high i2printRTC@month
 10233  0012EE  6E02               	movwf	i2strcpy@to+1,c
 10234  0012F0  0EDB               	movlw	low STR_36
 10235  0012F2  6E03               	movwf	i2strcpy@from,c
 10236  0012F4  0EFF               	movlw	high STR_36
 10237  0012F6  6E04               	movwf	i2strcpy@from+1,c
 10238  0012F8  EC52  F013         	call	i2_strcpy	;wreg free
 10239                           
 10240                           ;RTC.c: 73: break;
 10241  0012FC  D0A6               	goto	i2l4970
 10242  0012FE                     i2l4944:
 10243                           
 10244                           ;RTC.c: 75: strcpy(month, "Feb");
 10245  0012FE  0E3D               	movlw	low i2printRTC@month
 10246  001300  6E01               	movwf	i2strcpy@to,c
 10247  001302  0E00               	movlw	high i2printRTC@month
 10248  001304  6E02               	movwf	i2strcpy@to+1,c
 10249  001306  0ECB               	movlw	low STR_37
 10250  001308  6E03               	movwf	i2strcpy@from,c
 10251  00130A  0EFF               	movlw	high STR_37
 10252  00130C  6E04               	movwf	i2strcpy@from+1,c
 10253  00130E  EC52  F013         	call	i2_strcpy	;wreg free
 10254                           
 10255                           ;RTC.c: 76: break;
 10256  001312  D09B               	goto	i2l4970
 10257  001314                     i2l4946:
 10258                           
 10259                           ;RTC.c: 78: strcpy(month, "Mar");
 10260  001314  0E3D               	movlw	low i2printRTC@month
 10261  001316  6E01               	movwf	i2strcpy@to,c
 10262  001318  0E00               	movlw	high i2printRTC@month
 10263  00131A  6E02               	movwf	i2strcpy@to+1,c
 10264  00131C  0EE7               	movlw	low STR_38
 10265  00131E  6E03               	movwf	i2strcpy@from,c
 10266  001320  0EFF               	movlw	high STR_38
 10267  001322  6E04               	movwf	i2strcpy@from+1,c
 10268  001324  EC52  F013         	call	i2_strcpy	;wreg free
 10269                           
 10270                           ;RTC.c: 79: break;
 10271  001328  D090               	goto	i2l4970
 10272  00132A                     i2l4948:
 10273                           
 10274                           ;RTC.c: 81: strcpy(month, "Apr");
 10275  00132A  0E3D               	movlw	low i2printRTC@month
 10276  00132C  6E01               	movwf	i2strcpy@to,c
 10277  00132E  0E00               	movlw	high i2printRTC@month
 10278  001330  6E02               	movwf	i2strcpy@to+1,c
 10279  001332  0EEB               	movlw	low STR_39
 10280  001334  6E03               	movwf	i2strcpy@from,c
 10281  001336  0EFF               	movlw	high STR_39
 10282  001338  6E04               	movwf	i2strcpy@from+1,c
 10283  00133A  EC52  F013         	call	i2_strcpy	;wreg free
 10284                           
 10285                           ;RTC.c: 82: break;
 10286  00133E  D085               	goto	i2l4970
 10287  001340                     i2l4950:
 10288                           
 10289                           ;RTC.c: 84: strcpy(month, "May");
 10290  001340  0E3D               	movlw	low i2printRTC@month
 10291  001342  6E01               	movwf	i2strcpy@to,c
 10292  001344  0E00               	movlw	high i2printRTC@month
 10293  001346  6E02               	movwf	i2strcpy@to+1,c
 10294  001348  0EF7               	movlw	low STR_40
 10295  00134A  6E03               	movwf	i2strcpy@from,c
 10296  00134C  0EFF               	movlw	high STR_40
 10297  00134E  6E04               	movwf	i2strcpy@from+1,c
 10298  001350  EC52  F013         	call	i2_strcpy	;wreg free
 10299                           
 10300                           ;RTC.c: 85: break;
 10301  001354  D07A               	goto	i2l4970
 10302  001356                     i2l4952:
 10303                           
 10304                           ;RTC.c: 87: strcpy(month, "Jun");
 10305  001356  0E3D               	movlw	low i2printRTC@month
 10306  001358  6E01               	movwf	i2strcpy@to,c
 10307  00135A  0E00               	movlw	high i2printRTC@month
 10308  00135C  6E02               	movwf	i2strcpy@to+1,c
 10309  00135E  0EDF               	movlw	low STR_41
 10310  001360  6E03               	movwf	i2strcpy@from,c
 10311  001362  0EFF               	movlw	high STR_41
 10312  001364  6E04               	movwf	i2strcpy@from+1,c
 10313  001366  EC52  F013         	call	i2_strcpy	;wreg free
 10314                           
 10315                           ;RTC.c: 88: break;
 10316  00136A  D06F               	goto	i2l4970
 10317  00136C                     i2l4954:
 10318                           
 10319                           ;RTC.c: 90: strcpy(month, "Jul");
 10320  00136C  0E3D               	movlw	low i2printRTC@month
 10321  00136E  6E01               	movwf	i2strcpy@to,c
 10322  001370  0E00               	movlw	high i2printRTC@month
 10323  001372  6E02               	movwf	i2strcpy@to+1,c
 10324  001374  0ED7               	movlw	low STR_42
 10325  001376  6E03               	movwf	i2strcpy@from,c
 10326  001378  0EFF               	movlw	high STR_42
 10327  00137A  6E04               	movwf	i2strcpy@from+1,c
 10328  00137C  EC52  F013         	call	i2_strcpy	;wreg free
 10329                           
 10330                           ;RTC.c: 91: break;
 10331  001380  D064               	goto	i2l4970
 10332  001382                     i2l4956:
 10333                           
 10334                           ;RTC.c: 93: strcpy(month, "Aug");
 10335  001382  0E3D               	movlw	low i2printRTC@month
 10336  001384  6E01               	movwf	i2strcpy@to,c
 10337  001386  0E00               	movlw	high i2printRTC@month
 10338  001388  6E02               	movwf	i2strcpy@to+1,c
 10339  00138A  0ED3               	movlw	low STR_43
 10340  00138C  6E03               	movwf	i2strcpy@from,c
 10341  00138E  0EFF               	movlw	high STR_43
 10342  001390  6E04               	movwf	i2strcpy@from+1,c
 10343  001392  EC52  F013         	call	i2_strcpy	;wreg free
 10344                           
 10345                           ;RTC.c: 94: break;
 10346  001396  D059               	goto	i2l4970
 10347  001398                     i2l4958:
 10348                           
 10349                           ;RTC.c: 96: strcpy(month, "Sep");
 10350  001398  0E3D               	movlw	low i2printRTC@month
 10351  00139A  6E01               	movwf	i2strcpy@to,c
 10352  00139C  0E00               	movlw	high i2printRTC@month
 10353  00139E  6E02               	movwf	i2strcpy@to+1,c
 10354  0013A0  0EE3               	movlw	low STR_44
 10355  0013A2  6E03               	movwf	i2strcpy@from,c
 10356  0013A4  0EFF               	movlw	high STR_44
 10357  0013A6  6E04               	movwf	i2strcpy@from+1,c
 10358  0013A8  EC52  F013         	call	i2_strcpy	;wreg free
 10359                           
 10360                           ;RTC.c: 97: break;
 10361  0013AC  D04E               	goto	i2l4970
 10362  0013AE                     i2l4960:
 10363                           
 10364                           ;RTC.c: 99: strcpy(month, "Oct");
 10365  0013AE  0E3D               	movlw	low i2printRTC@month
 10366  0013B0  6E01               	movwf	i2strcpy@to,c
 10367  0013B2  0E00               	movlw	high i2printRTC@month
 10368  0013B4  6E02               	movwf	i2strcpy@to+1,c
 10369  0013B6  0EEF               	movlw	low STR_45
 10370  0013B8  6E03               	movwf	i2strcpy@from,c
 10371  0013BA  0EFF               	movlw	high STR_45
 10372  0013BC  6E04               	movwf	i2strcpy@from+1,c
 10373  0013BE  EC52  F013         	call	i2_strcpy	;wreg free
 10374                           
 10375                           ;RTC.c: 100: break;
 10376  0013C2  D043               	goto	i2l4970
 10377  0013C4                     i2l4962:
 10378                           
 10379                           ;RTC.c: 102: strcpy(month, "Nov");
 10380  0013C4  0E3D               	movlw	low i2printRTC@month
 10381  0013C6  6E01               	movwf	i2strcpy@to,c
 10382  0013C8  0E00               	movlw	high i2printRTC@month
 10383  0013CA  6E02               	movwf	i2strcpy@to+1,c
 10384  0013CC  0EF3               	movlw	low STR_46
 10385  0013CE  6E03               	movwf	i2strcpy@from,c
 10386  0013D0  0EFF               	movlw	high STR_46
 10387  0013D2  6E04               	movwf	i2strcpy@from+1,c
 10388  0013D4  EC52  F013         	call	i2_strcpy	;wreg free
 10389                           
 10390                           ;RTC.c: 103: break;
 10391  0013D8  D038               	goto	i2l4970
 10392  0013DA                     i2l4964:
 10393                           
 10394                           ;RTC.c: 105: strcpy(month, "Dec");
 10395  0013DA  0E3D               	movlw	low i2printRTC@month
 10396  0013DC  6E01               	movwf	i2strcpy@to,c
 10397  0013DE  0E00               	movlw	high i2printRTC@month
 10398  0013E0  6E02               	movwf	i2strcpy@to+1,c
 10399  0013E2  0ECF               	movlw	low STR_47
 10400  0013E4  6E03               	movwf	i2strcpy@from,c
 10401  0013E6  0EFF               	movlw	high STR_47
 10402  0013E8  6E04               	movwf	i2strcpy@from+1,c
 10403  0013EA  EC52  F013         	call	i2_strcpy	;wreg free
 10404                           
 10405                           ;RTC.c: 107: }
 10406                           
 10407                           ;RTC.c: 106: break;
 10408  0013EE  D02D               	goto	i2l4970
 10409  0013F0                     i2l4968:
 10410  0013F0  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 10411  0013F4  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 10412                           
 10413                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10414                           ; Switch size 1, requested type "space"
 10415                           ; Number of cases is 1, Range of values is 0 to 0
 10416                           ; switch strategies available:
 10417                           ; Name         Instructions Cycles
 10418                           ; simple_byte            4     3 (average)
 10419                           ;	Chosen strategy is simple_byte
 10420  0013F8  502B               	movf	??i2_printRTC+1,w,c
 10421  0013FA  0A00               	xorlw	0	; case 0
 10422  0013FC  A4D8               	btfss	status,2,c
 10423  0013FE  D025               	goto	i2l4970
 10424                           
 10425                           ; Switch size 1, requested type "space"
 10426                           ; Number of cases is 12, Range of values is 1 to 12
 10427                           ; switch strategies available:
 10428                           ; Name         Instructions Cycles
 10429                           ; simple_byte           37    19 (average)
 10430                           ;	Chosen strategy is simple_byte
 10431  001400  502A               	movf	??i2_printRTC,w,c
 10432  001402  0A01               	xorlw	1	; case 1
 10433  001404  B4D8               	btfsc	status,2,c
 10434  001406  D770               	goto	i2l4942
 10435  001408  0A03               	xorlw	3	; case 2
 10436  00140A  B4D8               	btfsc	status,2,c
 10437  00140C  D778               	goto	i2l4944
 10438  00140E  0A01               	xorlw	1	; case 3
 10439  001410  B4D8               	btfsc	status,2,c
 10440  001412  D780               	goto	i2l4946
 10441  001414  0A07               	xorlw	7	; case 4
 10442  001416  B4D8               	btfsc	status,2,c
 10443  001418  D788               	goto	i2l4948
 10444  00141A  0A01               	xorlw	1	; case 5
 10445  00141C  B4D8               	btfsc	status,2,c
 10446  00141E  D790               	goto	i2l4950
 10447  001420  0A03               	xorlw	3	; case 6
 10448  001422  B4D8               	btfsc	status,2,c
 10449  001424  D798               	goto	i2l4952
 10450  001426  0A01               	xorlw	1	; case 7
 10451  001428  B4D8               	btfsc	status,2,c
 10452  00142A  D7A0               	goto	i2l4954
 10453  00142C  0A0F               	xorlw	15	; case 8
 10454  00142E  B4D8               	btfsc	status,2,c
 10455  001430  D7A8               	goto	i2l4956
 10456  001432  0A01               	xorlw	1	; case 9
 10457  001434  B4D8               	btfsc	status,2,c
 10458  001436  D7B0               	goto	i2l4958
 10459  001438  0A03               	xorlw	3	; case 10
 10460  00143A  B4D8               	btfsc	status,2,c
 10461  00143C  D7B8               	goto	i2l4960
 10462  00143E  0A01               	xorlw	1	; case 11
 10463  001440  B4D8               	btfsc	status,2,c
 10464  001442  D7C0               	goto	i2l4962
 10465  001444  0A07               	xorlw	7	; case 12
 10466  001446  B4D8               	btfsc	status,2,c
 10467  001448  D7C8               	goto	i2l4964
 10468  00144A                     i2l4970:
 10469                           
 10470                           ;RTC.c: 108: lcdInst(0b10000000);;
 10471  00144A  0E80               	movlw	128
 10472  00144C  EC88  F015         	call	i2_lcdInst
 10473                           
 10474                           ;RTC.c: 109: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 10475  001450  0ED0               	movlw	low STR_48
 10476  001452  6E0D               	movwf	i2printf@f,c
 10477  001454  0EFD               	movlw	high STR_48
 10478  001456  6E0E               	movwf	i2printf@f+1,c
 10479  001458  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 10480  00145C  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 10481  001460  0E3D               	movlw	low i2printRTC@month
 10482  001462  6E11               	movwf	?i2_printf+4,c
 10483  001464  0E00               	movlw	high i2printRTC@month
 10484  001466  6E12               	movwf	?i2_printf+5,c
 10485  001468  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 10486  00146C  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 10487  001470  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 10488  001474  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 10489  001478  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 10490  00147C  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 10491  001480  ECC0  F004         	call	i2_printf	;wreg free
 10492  001484  0012               	return		;funcret
 10493  001486                     __end_ofi2_printRTC:
 10494                           	opt stack 0
 10495                           pclatu	equ	0xFFB
 10496                           pclath	equ	0xFFA
 10497                           tblptru	equ	0xFF8
 10498                           tblptrh	equ	0xFF7
 10499                           tblptrl	equ	0xFF6
 10500                           tablat	equ	0xFF5
 10501                           prodh	equ	0xFF4
 10502                           prodl	equ	0xFF3
 10503                           intcon	equ	0xFF2
 10504                           intcon2	equ	0xFF1
 10505                           intcon3	equ	0xFF0
 10506                           indf0	equ	0xFEF
 10507                           postinc0	equ	0xFEE
 10508                           fsr0h	equ	0xFEA
 10509                           fsr0l	equ	0xFE9
 10510                           wreg	equ	0xFE8
 10511                           postdec1	equ	0xFE5
 10512                           fsr1h	equ	0xFE2
 10513                           fsr1l	equ	0xFE1
 10514                           indf2	equ	0xFDF
 10515                           postinc2	equ	0xFDE
 10516                           postdec2	equ	0xFDD
 10517                           fsr2h	equ	0xFDA
 10518                           fsr2l	equ	0xFD9
 10519                           status	equ	0xFD8
 10520                           
 10521 ;; *************** function i2_strcpy *****************
 10522 ;; Defined at:
 10523 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 10524 ;; Parameters:    Size  Location     Type
 10525 ;;  to              2    0[COMRAM] PTR unsigned char 
 10526 ;;		 -> printRTC@month(4), 
 10527 ;;  from            2    2[COMRAM] PTR const unsigned char 
 10528 ;;		 -> STR_47(4), STR_46(4), STR_45(4), STR_44(4), 
 10529 ;;		 -> STR_43(4), STR_42(4), STR_41(4), STR_40(4), 
 10530 ;;		 -> STR_39(4), STR_38(4), STR_37(4), STR_36(4), 
 10531 ;; Auto vars:     Size  Location     Type
 10532 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 10533 ;;		 -> printRTC@month(4), 
 10534 ;; Return value:  Size  Location     Type
 10535 ;;                  2    0[COMRAM] PTR unsigned char 
 10536 ;; Registers used:
 10537 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 10538 ;; Tracked objects:
 10539 ;;		On entry : 0/0
 10540 ;;		On exit  : 0/0
 10541 ;;		Unchanged: 0/0
 10542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10543 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10544 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10546 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10547 ;;Total ram usage:        6 bytes
 10548 ;; Hardware stack levels used:    1
 10549 ;; This function calls:
 10550 ;;		Nothing
 10551 ;; This function is called by:
 10552 ;;		i2_printRTC
 10553 ;; This function uses a non-reentrant model
 10554 ;;
 10555                           
 10556                           	psect	text48
 10557  0026A4                     __ptext48:
 10558                           	opt stack 0
 10559  0026A4                     i2_strcpy:
 10560                           	opt stack 20
 10561                           
 10562                           ;incstack = 0
 10563  0026A4  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 10564  0026A8  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 10565  0026AC  D004               	goto	i2l4686
 10566  0026AE                     i2l4684:
 10567  0026AE  4A05               	infsnz	i2strcpy@cp,f,c
 10568  0026B0  2A06               	incf	i2strcpy@cp+1,f,c
 10569  0026B2  4A03               	infsnz	i2strcpy@from,f,c
 10570  0026B4  2A04               	incf	i2strcpy@from+1,f,c
 10571  0026B6                     i2l4686:
 10572  0026B6  C003  FFF6         	movff	i2strcpy@from,tblptrl
 10573  0026BA  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 10574  0026BE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 10575  0026BE  6AF8               	clrf	tblptru,c
 10576  0026C0                     	endif
 10577  0026C0                     	if	0	;tblptru may be non-zero
 10578  0026C0                     	endif
 10579  0026C0  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 10580  0026C4  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 10581  0026C8  0008               	tblrd		*
 10582  0026CA  CFF5 FFDF          	movff	tablat,indf2
 10583  0026CE  50DF               	movf	indf2,w,c
 10584  0026D0  B4D8               	btfsc	status,2,c
 10585  0026D2  0012               	return	
 10586  0026D4  D7EC               	goto	i2l4684
 10587  0026D6                     __end_ofi2_strcpy:
 10588                           	opt stack 0
 10589                           pclatu	equ	0xFFB
 10590                           pclath	equ	0xFFA
 10591                           tblptru	equ	0xFF8
 10592                           tblptrh	equ	0xFF7
 10593                           tblptrl	equ	0xFF6
 10594                           tablat	equ	0xFF5
 10595                           prodh	equ	0xFF4
 10596                           prodl	equ	0xFF3
 10597                           intcon	equ	0xFF2
 10598                           intcon2	equ	0xFF1
 10599                           intcon3	equ	0xFF0
 10600                           indf0	equ	0xFEF
 10601                           postinc0	equ	0xFEE
 10602                           fsr0h	equ	0xFEA
 10603                           fsr0l	equ	0xFE9
 10604                           wreg	equ	0xFE8
 10605                           postdec1	equ	0xFE5
 10606                           fsr1h	equ	0xFE2
 10607                           fsr1l	equ	0xFE1
 10608                           indf2	equ	0xFDF
 10609                           postinc2	equ	0xFDE
 10610                           postdec2	equ	0xFDD
 10611                           fsr2h	equ	0xFDA
 10612                           fsr2l	equ	0xFD9
 10613                           status	equ	0xFD8
 10614                           
 10615 ;; *************** function _inputHandler *****************
 10616 ;; Defined at:
 10617 ;;		line 315 in file "UI.c"
 10618 ;; Parameters:    Size  Location     Type
 10619 ;;		None
 10620 ;; Auto vars:     Size  Location     Type
 10621 ;;		None
 10622 ;; Return value:  Size  Location     Type
 10623 ;;                  2   41[COMRAM] int 
 10624 ;; Registers used:
 10625 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10626 ;; Tracked objects:
 10627 ;;		On entry : 0/0
 10628 ;;		On exit  : 0/0
 10629 ;;		Unchanged: 0/0
 10630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10631 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10633 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10634 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10635 ;;Total ram usage:        4 bytes
 10636 ;; Hardware stack levels used:    1
 10637 ;; Hardware stack levels required when called:    4
 10638 ;; This function calls:
 10639 ;;		_change_state_to_logs_11
 10640 ;;		_change_state_to_logs_12
 10641 ;;		_change_state_to_logs_22
 10642 ;;		_change_state_to_logs_23
 10643 ;;		_change_state_to_logs_33
 10644 ;;		_change_state_to_logs_34
 10645 ;;		_change_state_to_menu_11
 10646 ;;		_change_state_to_menu_23
 10647 ;;		i2_change_state_to_menu_12
 10648 ;;		i2_change_state_to_menu_22
 10649 ;; This function is called by:
 10650 ;;		_updateMenu
 10651 ;; This function uses a non-reentrant model
 10652 ;;
 10653                           
 10654                           	psect	text49
 10655  001680                     __ptext49:
 10656                           	opt stack 0
 10657  001680                     _inputHandler:
 10658                           	opt stack 18
 10659                           
 10660                           ;UI.c: 320: if(firstboot){
 10661                           
 10662                           ;incstack = 0
 10663  001680  5069               	movf	_firstboot,w,c
 10664  001682  106A               	iorwf	_firstboot+1,w,c
 10665  001684  B4D8               	btfsc	status,2,c
 10666  001686  D00B               	goto	i2l5038
 10667                           
 10668                           ;UI.c: 321: change_state_to_menu_11();
 10669  001688  ECB3  F013         	call	_change_state_to_menu_11	;wreg free
 10670                           
 10671                           ;UI.c: 322: firstboot = 0;
 10672  00168C  0E00               	movlw	0
 10673  00168E  6E6A               	movwf	_firstboot+1,c
 10674  001690  0E00               	movlw	0
 10675  001692  6E69               	movwf	_firstboot,c
 10676                           
 10677                           ;UI.c: 323: return 0;
 10678  001694  0E00               	movlw	0
 10679  001696  6E2B               	movwf	?_inputHandler+1,c
 10680  001698  0E00               	movlw	0
 10681  00169A  6E2A               	movwf	?_inputHandler,c
 10682  00169C  0012               	return	
 10683  00169E                     i2l5038:
 10684                           
 10685                           ;UI.c: 324: }
 10686                           ;UI.c: 325: if (logstate){
 10687  00169E  0100               	movlb	0	; () banked
 10688  0016A0  51F3               	movf	_logstate& (0+255),w,b
 10689  0016A2  0100               	movlb	0	; () banked
 10690  0016A4  11F4               	iorwf	(_logstate+1)& (0+255),w,b
 10691  0016A6  B4D8               	btfsc	status,2,c
 10692  0016A8  D0C7               	goto	i2l5156
 10693                           
 10694                           ; BSR set to: 0
 10695                           ;UI.c: 326: if(input == 'C' && PORTBbits.RB1 == 1){
 10696  0016AA  0E43               	movlw	67
 10697  0016AC  1879               	xorwf	_input,w,c
 10698  0016AE  A4D8               	btfss	status,2,c
 10699  0016B0  D012               	goto	i2l5056
 10700                           
 10701                           ; BSR set to: 0
 10702  0016B2  B281               	btfsc	3969,1,c	;volatile
 10703  0016B4  D009               	goto	i2l5048
 10704  0016B6  D00F               	goto	i2l5056
 10705  0016B8                     i2l5046:
 10706                           
 10707                           ;UI.c: 329: _delay((unsigned long)((10)*(32000000/4000.0)));
 10708  0016B8  0E68               	movlw	104
 10709  0016BA  6E2C               	movwf	??_inputHandler& (0+255),c
 10710  0016BC  0EE4               	movlw	228
 10711  0016BE                     i2u501_47:
 10712  0016BE  2EE8               	decfsz	wreg,f,c
 10713  0016C0  D7FE               	bra	i2u501_47
 10714  0016C2  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 10715  0016C4  D7FC               	bra	i2u501_47
 10716  0016C6  D000               	nop2	
 10717  0016C8                     i2l5048:
 10718  0016C8  B281               	btfsc	3969,1,c	;volatile
 10719  0016CA  D7F6               	goto	i2l5046
 10720  0016CC                     i2l5050:
 10721                           
 10722                           ;UI.c: 330: }
 10723                           ;UI.c: 331: return 0;
 10724  0016CC  0E00               	movlw	0
 10725  0016CE  6E2B               	movwf	?_inputHandler+1,c
 10726  0016D0  0E00               	movlw	0
 10727  0016D2  6E2A               	movwf	?_inputHandler,c
 10728  0016D4  0012               	return	
 10729  0016D6                     i2l5056:
 10730                           
 10731                           ;UI.c: 333: else if (input == 'D'){
 10732  0016D6  0E44               	movlw	68
 10733  0016D8  1879               	xorwf	_input,w,c
 10734  0016DA  A4D8               	btfss	status,2,c
 10735  0016DC  D7F7               	goto	i2l5050
 10736                           
 10737                           ;UI.c: 335: logstate = 0;
 10738  0016DE  0E00               	movlw	0
 10739  0016E0  0100               	movlb	0	; () banked
 10740  0016E2  6FF4               	movwf	(_logstate+1)& (0+255),b
 10741  0016E4  0E00               	movlw	0
 10742  0016E6  6FF3               	movwf	_logstate& (0+255),b
 10743                           
 10744                           ;UI.c: 336: switch(cur_state){
 10745  0016E8  D012               	goto	i2l5074
 10746  0016EA                     i2l5060:
 10747                           
 10748                           ;UI.c: 338: change_state_to_logs_11();
 10749  0016EA  EC2B  F014         	call	_change_state_to_logs_11	;wreg free
 10750                           
 10751                           ;UI.c: 339: break;
 10752  0016EE  D7EE               	goto	i2l5050
 10753  0016F0                     i2l5062:
 10754                           
 10755                           ;UI.c: 341: change_state_to_logs_12();
 10756  0016F0  EC13  F014         	call	_change_state_to_logs_12	;wreg free
 10757                           
 10758                           ;UI.c: 342: break;
 10759  0016F4  D7EB               	goto	i2l5050
 10760  0016F6                     i2l5064:
 10761                           
 10762                           ;UI.c: 344: change_state_to_logs_22();
 10763  0016F6  ECFB  F013         	call	_change_state_to_logs_22	;wreg free
 10764                           
 10765                           ;UI.c: 345: break;
 10766  0016FA  D7E8               	goto	i2l5050
 10767  0016FC                     i2l5066:
 10768                           
 10769                           ;UI.c: 347: change_state_to_logs_23();
 10770  0016FC  EC71  F014         	call	_change_state_to_logs_23	;wreg free
 10771                           
 10772                           ;UI.c: 348: break;
 10773  001700  D7E5               	goto	i2l5050
 10774  001702                     i2l5068:
 10775                           
 10776                           ;UI.c: 350: change_state_to_logs_33();
 10777  001702  ECE3  F013         	call	_change_state_to_logs_33	;wreg free
 10778                           
 10779                           ;UI.c: 351: break;
 10780  001706  D7E2               	goto	i2l5050
 10781  001708                     i2l5070:
 10782                           
 10783                           ;UI.c: 353: change_state_to_logs_34();
 10784  001708  ECCB  F013         	call	_change_state_to_logs_34	;wreg free
 10785                           
 10786                           ;UI.c: 355: }
 10787                           
 10788                           ;UI.c: 354: break;
 10789  00170C  D7DF               	goto	i2l5050
 10790  00170E                     i2l5074:
 10791  00170E  C0E7  F02C         	movff	_cur_state,??_inputHandler
 10792  001712  C0E8  F02D         	movff	_cur_state+1,??_inputHandler+1
 10793                           
 10794                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 10795                           ; Switch size 1, requested type "space"
 10796                           ; Number of cases is 2, Range of values is 3 to 4
 10797                           ; switch strategies available:
 10798                           ; Name         Instructions Cycles
 10799                           ; simple_byte            7     4 (average)
 10800                           ;	Chosen strategy is simple_byte
 10801  001716  502D               	movf	??_inputHandler+1,w,c
 10802  001718  0A03               	xorlw	3	; case 3
 10803  00171A  B4D8               	btfsc	status,2,c
 10804  00171C  D004               	goto	i2l6162
 10805  00171E  0A07               	xorlw	7	; case 4
 10806  001720  B4D8               	btfsc	status,2,c
 10807  001722  D00F               	goto	i2l6164
 10808  001724  D7D3               	goto	i2l5050
 10809  001726                     i2l6162:
 10810                           
 10811                           ; Switch size 1, requested type "space"
 10812                           ; Number of cases is 4, Range of values is 243 to 255
 10813                           ; switch strategies available:
 10814                           ; Name         Instructions Cycles
 10815                           ; simple_byte           13     7 (average)
 10816                           ;	Chosen strategy is simple_byte
 10817  001726  502C               	movf	??_inputHandler,w,c
 10818  001728  0AF3               	xorlw	243	; case 243
 10819  00172A  B4D8               	btfsc	status,2,c
 10820  00172C  D7DE               	goto	i2l5060
 10821  00172E  0A07               	xorlw	7	; case 244
 10822  001730  B4D8               	btfsc	status,2,c
 10823  001732  D7DE               	goto	i2l5062
 10824  001734  0A0A               	xorlw	10	; case 254
 10825  001736  B4D8               	btfsc	status,2,c
 10826  001738  D7DE               	goto	i2l5064
 10827  00173A  0A01               	xorlw	1	; case 255
 10828  00173C  B4D8               	btfsc	status,2,c
 10829  00173E  D7DE               	goto	i2l5066
 10830  001740  D7C5               	goto	i2l5050
 10831  001742                     i2l6164:
 10832                           
 10833                           ; Switch size 1, requested type "space"
 10834                           ; Number of cases is 2, Range of values is 9 to 10
 10835                           ; switch strategies available:
 10836                           ; Name         Instructions Cycles
 10837                           ; simple_byte            7     4 (average)
 10838                           ;	Chosen strategy is simple_byte
 10839  001742  502C               	movf	??_inputHandler,w,c
 10840  001744  0A09               	xorlw	9	; case 9
 10841  001746  B4D8               	btfsc	status,2,c
 10842  001748  D7DC               	goto	i2l5068
 10843  00174A  0A03               	xorlw	3	; case 10
 10844  00174C  B4D8               	btfsc	status,2,c
 10845  00174E  D7DC               	goto	i2l5070
 10846  001750  D7BD               	goto	i2l5050
 10847  001752                     i2l5086:
 10848                           
 10849                           ;UI.c: 365: if(cur_state == 11){
 10850  001752  0E0B               	movlw	11
 10851  001754  0100               	movlb	0	; () banked
 10852  001756  19E7               	xorwf	_cur_state& (0+255),w,b
 10853  001758  0100               	movlb	0	; () banked
 10854  00175A  11E8               	iorwf	(_cur_state+1)& (0+255),w,b
 10855  00175C  A4D8               	btfss	status,2,c
 10856  00175E  D005               	goto	i2l5094
 10857                           
 10858                           ; BSR set to: 0
 10859                           ;UI.c: 366: return 0;
 10860  001760  0E00               	movlw	0
 10861  001762  6E2B               	movwf	?_inputHandler+1,c
 10862  001764  0E00               	movlw	0
 10863  001766  6E2A               	movwf	?_inputHandler,c
 10864                           
 10865                           ; BSR set to: 0
 10866  001768  0012               	return	
 10867  00176A                     i2l5094:
 10868                           
 10869                           ; BSR set to: 0
 10870                           ;UI.c: 368: else{
 10871                           ;UI.c: 369: change_state_to_menu_11();
 10872  00176A  ECB3  F013         	call	_change_state_to_menu_11	;wreg free
 10873                           
 10874                           ;UI.c: 370: }
 10875                           ;UI.c: 371: return 0;
 10876  00176E  0E00               	movlw	0
 10877  001770  6E2B               	movwf	?_inputHandler+1,c
 10878  001772  0E00               	movlw	0
 10879  001774  6E2A               	movwf	?_inputHandler,c
 10880  001776  0012               	return	
 10881  001778                     i2l5100:
 10882                           
 10883                           ;UI.c: 373: if(cur_state == 22 | cur_state == 12){
 10884  001778  0E16               	movlw	22
 10885  00177A  0100               	movlb	0	; () banked
 10886  00177C  19E7               	xorwf	_cur_state& (0+255),w,b
 10887  00177E  0100               	movlb	0	; () banked
 10888  001780  11E8               	iorwf	(_cur_state+1)& (0+255),w,b
 10889  001782  B4D8               	btfsc	status,2,c
 10890  001784  D007               	goto	i2l5104
 10891                           
 10892                           ; BSR set to: 0
 10893  001786  0E0C               	movlw	12
 10894  001788  0100               	movlb	0	; () banked
 10895  00178A  19E7               	xorwf	_cur_state& (0+255),w,b
 10896  00178C  0100               	movlb	0	; () banked
 10897  00178E  11E8               	iorwf	(_cur_state+1)& (0+255),w,b
 10898  001790  A4D8               	btfss	status,2,c
 10899  001792  D005               	goto	i2l5110
 10900  001794                     i2l5104:
 10901                           
 10902                           ; BSR set to: 0
 10903                           ;UI.c: 374: return 0;
 10904  001794  0E00               	movlw	0
 10905  001796  6E2B               	movwf	?_inputHandler+1,c
 10906  001798  0E00               	movlw	0
 10907  00179A  6E2A               	movwf	?_inputHandler,c
 10908                           
 10909                           ; BSR set to: 0
 10910  00179C  0012               	return	
 10911  00179E                     i2l5110:
 10912                           
 10913                           ; BSR set to: 0
 10914                           ;UI.c: 376: else if(cur_state == 23){
 10915  00179E  0E17               	movlw	23
 10916  0017A0  0100               	movlb	0	; () banked
 10917  0017A2  19E7               	xorwf	_cur_state& (0+255),w,b
 10918  0017A4  0100               	movlb	0	; () banked
 10919  0017A6  11E8               	iorwf	(_cur_state+1)& (0+255),w,b
 10920  0017A8  A4D8               	btfss	status,2,c
 10921  0017AA  D003               	goto	i2l5114
 10922                           
 10923                           ; BSR set to: 0
 10924                           ;UI.c: 377: change_state_to_menu_22();
 10925  0017AC  EC6B  F013         	call	i2_change_state_to_menu_22	;wreg free
 10926                           
 10927                           ;UI.c: 378: }
 10928  0017B0  D002               	goto	i2l5116
 10929  0017B2                     i2l5114:
 10930                           
 10931                           ;UI.c: 379: else{
 10932                           ;UI.c: 380: change_state_to_menu_12();
 10933  0017B2  EC83  F013         	call	i2_change_state_to_menu_12	;wreg free
 10934  0017B6                     i2l5116:
 10935                           
 10936                           ;UI.c: 381: }
 10937                           ;UI.c: 382: return 0;
 10938  0017B6  0E00               	movlw	0
 10939  0017B8  6E2B               	movwf	?_inputHandler+1,c
 10940  0017BA  0E00               	movlw	0
 10941  0017BC  6E2A               	movwf	?_inputHandler,c
 10942  0017BE  0012               	return	
 10943  0017C0                     i2l5120:
 10944                           
 10945                           ;UI.c: 384: if(cur_state == 23){
 10946  0017C0  0E17               	movlw	23
 10947  0017C2  0100               	movlb	0	; () banked
 10948  0017C4  19E7               	xorwf	_cur_state& (0+255),w,b
 10949  0017C6  0100               	movlb	0	; () banked
 10950  0017C8  11E8               	iorwf	(_cur_state+1)& (0+255),w,b
 10951  0017CA  A4D8               	btfss	status,2,c
 10952  0017CC  D005               	goto	i2l5128
 10953                           
 10954                           ; BSR set to: 0
 10955                           ;UI.c: 385: return 0;
 10956  0017CE  0E00               	movlw	0
 10957  0017D0  6E2B               	movwf	?_inputHandler+1,c
 10958  0017D2  0E00               	movlw	0
 10959  0017D4  6E2A               	movwf	?_inputHandler,c
 10960                           
 10961                           ; BSR set to: 0
 10962  0017D6  0012               	return	
 10963  0017D8                     i2l5128:
 10964                           
 10965                           ; BSR set to: 0
 10966                           ;UI.c: 387: else{
 10967                           ;UI.c: 388: change_state_to_menu_23();
 10968  0017D8  EC9B  F013         	call	_change_state_to_menu_23	;wreg free
 10969                           
 10970                           ;UI.c: 389: }
 10971                           ;UI.c: 390: return 0;
 10972  0017DC  0E00               	movlw	0
 10973  0017DE  6E2B               	movwf	?_inputHandler+1,c
 10974  0017E0  0E00               	movlw	0
 10975  0017E2  6E2A               	movwf	?_inputHandler,c
 10976  0017E4  0012               	return	
 10977  0017E6                     i2l5134:
 10978                           
 10979                           ;UI.c: 393: up = 1;
 10980  0017E6  0E00               	movlw	0
 10981  0017E8  6E74               	movwf	_up+1,c
 10982  0017EA  0E01               	movlw	1
 10983  0017EC  6E73               	movwf	_up,c
 10984                           
 10985                           ;UI.c: 394: return 1;
 10986  0017EE  0E00               	movlw	0
 10987  0017F0  6E2B               	movwf	?_inputHandler+1,c
 10988  0017F2  0E01               	movlw	1
 10989  0017F4  6E2A               	movwf	?_inputHandler,c
 10990  0017F6  0012               	return	
 10991  0017F8                     i2l5138:
 10992                           
 10993                           ;UI.c: 396: down = 1;
 10994  0017F8  0E00               	movlw	0
 10995  0017FA  6E66               	movwf	_down+1,c
 10996  0017FC  0E01               	movlw	1
 10997  0017FE  6E65               	movwf	_down,c
 10998                           
 10999                           ;UI.c: 397: return 1;
 11000  001800  0E00               	movlw	0
 11001  001802  6E2B               	movwf	?_inputHandler+1,c
 11002  001804  0E01               	movlw	1
 11003  001806  6E2A               	movwf	?_inputHandler,c
 11004  001808  0012               	return	
 11005  00180A                     i2l5142:
 11006                           
 11007                           ;UI.c: 399: enter = 1;
 11008  00180A  0E00               	movlw	0
 11009  00180C  6E68               	movwf	_enter+1,c
 11010  00180E  0E01               	movlw	1
 11011  001810  6E67               	movwf	_enter,c
 11012                           
 11013                           ;UI.c: 400: return 1;
 11014  001812  0E00               	movlw	0
 11015  001814  6E2B               	movwf	?_inputHandler+1,c
 11016  001816  0E01               	movlw	1
 11017  001818  6E2A               	movwf	?_inputHandler,c
 11018  00181A  0012               	return	
 11019  00181C                     i2l5146:
 11020                           
 11021                           ;UI.c: 402: back = 1;
 11022  00181C  0E00               	movlw	0
 11023  00181E  6E60               	movwf	_back+1,c
 11024  001820  0E01               	movlw	1
 11025  001822  6E5F               	movwf	_back,c
 11026                           
 11027                           ;UI.c: 403: return 1;
 11028  001824  0E00               	movlw	0
 11029  001826  6E2B               	movwf	?_inputHandler+1,c
 11030  001828  0E01               	movlw	1
 11031  00182A  6E2A               	movwf	?_inputHandler,c
 11032  00182C  0012               	return	
 11033  00182E                     i2l5150:
 11034                           
 11035                           ;UI.c: 406: return 1;
 11036  00182E  0E00               	movlw	0
 11037  001830  6E2B               	movwf	?_inputHandler+1,c
 11038  001832  0E01               	movlw	1
 11039  001834  6E2A               	movwf	?_inputHandler,c
 11040                           
 11041                           ;UI.c: 407: }
 11042  001836  0012               	return	
 11043  001838                     i2l5156:
 11044  001838  5079               	movf	_input,w,c
 11045                           
 11046                           ; Switch size 1, requested type "space"
 11047                           ; Number of cases is 7, Range of values is 49 to 68
 11048                           ; switch strategies available:
 11049                           ; Name         Instructions Cycles
 11050                           ; simple_byte           22    12 (average)
 11051                           ;	Chosen strategy is simple_byte
 11052  00183A  0A31               	xorlw	49	; case 49
 11053  00183C  B4D8               	btfsc	status,2,c
 11054  00183E  D789               	goto	i2l5086
 11055  001840  0A03               	xorlw	3	; case 50
 11056  001842  B4D8               	btfsc	status,2,c
 11057  001844  D799               	goto	i2l5100
 11058  001846  0A01               	xorlw	1	; case 51
 11059  001848  B4D8               	btfsc	status,2,c
 11060  00184A  D7BA               	goto	i2l5120
 11061  00184C  0A72               	xorlw	114	; case 65
 11062  00184E  B4D8               	btfsc	status,2,c
 11063  001850  D7CA               	goto	i2l5134
 11064  001852  0A03               	xorlw	3	; case 66
 11065  001854  B4D8               	btfsc	status,2,c
 11066  001856  D7D0               	goto	i2l5138
 11067  001858  0A01               	xorlw	1	; case 67
 11068  00185A  B4D8               	btfsc	status,2,c
 11069  00185C  D7D6               	goto	i2l5142
 11070  00185E  0A07               	xorlw	7	; case 68
 11071  001860  B4D8               	btfsc	status,2,c
 11072  001862  D7DC               	goto	i2l5146
 11073  001864  D7E4               	goto	i2l5150
 11074  001866                     __end_of_inputHandler:
 11075                           	opt stack 0
 11076                           pclatu	equ	0xFFB
 11077                           pclath	equ	0xFFA
 11078                           tblptru	equ	0xFF8
 11079                           tblptrh	equ	0xFF7
 11080                           tblptrl	equ	0xFF6
 11081                           tablat	equ	0xFF5
 11082                           prodh	equ	0xFF4
 11083                           prodl	equ	0xFF3
 11084                           intcon	equ	0xFF2
 11085                           intcon2	equ	0xFF1
 11086                           intcon3	equ	0xFF0
 11087                           indf0	equ	0xFEF
 11088                           postinc0	equ	0xFEE
 11089                           fsr0h	equ	0xFEA
 11090                           fsr0l	equ	0xFE9
 11091                           wreg	equ	0xFE8
 11092                           postdec1	equ	0xFE5
 11093                           fsr1h	equ	0xFE2
 11094                           fsr1l	equ	0xFE1
 11095                           indf2	equ	0xFDF
 11096                           postinc2	equ	0xFDE
 11097                           postdec2	equ	0xFDD
 11098                           fsr2h	equ	0xFDA
 11099                           fsr2l	equ	0xFD9
 11100                           status	equ	0xFD8
 11101                           
 11102 ;; *************** function i2_change_state_to_menu_22 *****************
 11103 ;; Defined at:
 11104 ;;		line 440 in file "UI.c"
 11105 ;; Parameters:    Size  Location     Type
 11106 ;;		None
 11107 ;; Auto vars:     Size  Location     Type
 11108 ;;		None
 11109 ;; Return value:  Size  Location     Type
 11110 ;;                  1    wreg      void 
 11111 ;; Registers used:
 11112 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11113 ;; Tracked objects:
 11114 ;;		On entry : 0/0
 11115 ;;		On exit  : 0/0
 11116 ;;		Unchanged: 0/0
 11117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11121 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11122 ;;Total ram usage:        0 bytes
 11123 ;; Hardware stack levels used:    1
 11124 ;; Hardware stack levels required when called:    3
 11125 ;; This function calls:
 11126 ;;		i2_lcdInst
 11127 ;;		i2_printf
 11128 ;; This function is called by:
 11129 ;;		_updateMenu
 11130 ;;		_inputHandler
 11131 ;; This function uses a non-reentrant model
 11132 ;;
 11133                           
 11134                           	psect	text50
 11135  0026D6                     __ptext50:
 11136                           	opt stack 0
 11137  0026D6                     i2_change_state_to_menu_22:
 11138                           	opt stack 19
 11139                           
 11140                           ;UI.c: 441: cur_state = 22;
 11141                           
 11142                           ;incstack = 0
 11143  0026D6  0E00               	movlw	0
 11144  0026D8  0100               	movlb	0	; () banked
 11145  0026DA  6FE8               	movwf	(_cur_state+1)& (0+255),b
 11146  0026DC  0E16               	movlw	22
 11147  0026DE  6FE7               	movwf	_cur_state& (0+255),b
 11148                           
 11149                           ; BSR set to: 0
 11150                           ;UI.c: 443: lcdInst(0b10000000);;
 11151  0026E0  0E80               	movlw	128
 11152  0026E2  EC88  F015         	call	i2_lcdInst
 11153                           
 11154                           ;UI.c: 444: printf("2. SORT        <");
 11155  0026E6  0E64               	movlw	low STR_19
 11156  0026E8  6E0D               	movwf	i2printf@f,c
 11157  0026EA  0EFF               	movlw	high STR_19
 11158  0026EC  6E0E               	movwf	i2printf@f+1,c
 11159  0026EE  ECC0  F004         	call	i2_printf	;wreg free
 11160                           
 11161                           ;UI.c: 445: lcdInst(0b11000000);;
 11162  0026F2  0EC0               	movlw	192
 11163  0026F4  EC88  F015         	call	i2_lcdInst
 11164                           
 11165                           ;UI.c: 446: printf("3. LOGS         ");
 11166  0026F8  0E65               	movlw	low STR_21
 11167  0026FA  6E0D               	movwf	i2printf@f,c
 11168  0026FC  0EFE               	movlw	high STR_21
 11169  0026FE  6E0E               	movwf	i2printf@f+1,c
 11170  002700  ECC0  F004         	call	i2_printf	;wreg free
 11171  002704  0012               	return		;funcret
 11172  002706                     __end_ofi2_change_state_to_menu_22:
 11173                           	opt stack 0
 11174                           pclatu	equ	0xFFB
 11175                           pclath	equ	0xFFA
 11176                           tblptru	equ	0xFF8
 11177                           tblptrh	equ	0xFF7
 11178                           tblptrl	equ	0xFF6
 11179                           tablat	equ	0xFF5
 11180                           prodh	equ	0xFF4
 11181                           prodl	equ	0xFF3
 11182                           intcon	equ	0xFF2
 11183                           intcon2	equ	0xFF1
 11184                           intcon3	equ	0xFF0
 11185                           indf0	equ	0xFEF
 11186                           postinc0	equ	0xFEE
 11187                           fsr0h	equ	0xFEA
 11188                           fsr0l	equ	0xFE9
 11189                           wreg	equ	0xFE8
 11190                           postdec1	equ	0xFE5
 11191                           fsr1h	equ	0xFE2
 11192                           fsr1l	equ	0xFE1
 11193                           indf2	equ	0xFDF
 11194                           postinc2	equ	0xFDE
 11195                           postdec2	equ	0xFDD
 11196                           fsr2h	equ	0xFDA
 11197                           fsr2l	equ	0xFD9
 11198                           status	equ	0xFD8
 11199                           
 11200 ;; *************** function i2_change_state_to_menu_12 *****************
 11201 ;; Defined at:
 11202 ;;		line 432 in file "UI.c"
 11203 ;; Parameters:    Size  Location     Type
 11204 ;;		None
 11205 ;; Auto vars:     Size  Location     Type
 11206 ;;		None
 11207 ;; Return value:  Size  Location     Type
 11208 ;;                  1    wreg      void 
 11209 ;; Registers used:
 11210 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11211 ;; Tracked objects:
 11212 ;;		On entry : 0/0
 11213 ;;		On exit  : 0/0
 11214 ;;		Unchanged: 0/0
 11215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11219 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11220 ;;Total ram usage:        0 bytes
 11221 ;; Hardware stack levels used:    1
 11222 ;; Hardware stack levels required when called:    3
 11223 ;; This function calls:
 11224 ;;		i2_lcdInst
 11225 ;;		i2_printf
 11226 ;; This function is called by:
 11227 ;;		_updateMenu
 11228 ;;		_inputHandler
 11229 ;; This function uses a non-reentrant model
 11230 ;;
 11231                           
 11232                           	psect	text51
 11233  002706                     __ptext51:
 11234                           	opt stack 0
 11235  002706                     i2_change_state_to_menu_12:
 11236                           	opt stack 19
 11237                           
 11238                           ;UI.c: 433: cur_state = 12;
 11239                           
 11240                           ;incstack = 0
 11241  002706  0E00               	movlw	0
 11242  002708  0100               	movlb	0	; () banked
 11243  00270A  6FE8               	movwf	(_cur_state+1)& (0+255),b
 11244  00270C  0E0C               	movlw	12
 11245  00270E  6FE7               	movwf	_cur_state& (0+255),b
 11246                           
 11247                           ; BSR set to: 0
 11248                           ;UI.c: 435: lcdInst(0b10000000);;
 11249  002710  0E80               	movlw	128
 11250  002712  EC88  F015         	call	i2_lcdInst
 11251                           
 11252                           ;UI.c: 436: printf("1. DATE/TIME    ");
 11253  002716  0E87               	movlw	low STR_18
 11254  002718  6E0D               	movwf	i2printf@f,c
 11255  00271A  0EFE               	movlw	high STR_18
 11256  00271C  6E0E               	movwf	i2printf@f+1,c
 11257  00271E  ECC0  F004         	call	i2_printf	;wreg free
 11258                           
 11259                           ;UI.c: 437: lcdInst(0b11000000);;
 11260  002722  0EC0               	movlw	192
 11261  002724  EC88  F015         	call	i2_lcdInst
 11262                           
 11263                           ;UI.c: 438: printf("2. SORT        <");
 11264  002728  0E64               	movlw	low STR_19
 11265  00272A  6E0D               	movwf	i2printf@f,c
 11266  00272C  0EFF               	movlw	high STR_19
 11267  00272E  6E0E               	movwf	i2printf@f+1,c
 11268  002730  ECC0  F004         	call	i2_printf	;wreg free
 11269  002734  0012               	return		;funcret
 11270  002736                     __end_ofi2_change_state_to_menu_12:
 11271                           	opt stack 0
 11272                           pclatu	equ	0xFFB
 11273                           pclath	equ	0xFFA
 11274                           tblptru	equ	0xFF8
 11275                           tblptrh	equ	0xFF7
 11276                           tblptrl	equ	0xFF6
 11277                           tablat	equ	0xFF5
 11278                           prodh	equ	0xFF4
 11279                           prodl	equ	0xFF3
 11280                           intcon	equ	0xFF2
 11281                           intcon2	equ	0xFF1
 11282                           intcon3	equ	0xFF0
 11283                           indf0	equ	0xFEF
 11284                           postinc0	equ	0xFEE
 11285                           fsr0h	equ	0xFEA
 11286                           fsr0l	equ	0xFE9
 11287                           wreg	equ	0xFE8
 11288                           postdec1	equ	0xFE5
 11289                           fsr1h	equ	0xFE2
 11290                           fsr1l	equ	0xFE1
 11291                           indf2	equ	0xFDF
 11292                           postinc2	equ	0xFDE
 11293                           postdec2	equ	0xFDD
 11294                           fsr2h	equ	0xFDA
 11295                           fsr2l	equ	0xFD9
 11296                           status	equ	0xFD8
 11297                           
 11298 ;; *************** function _change_state_to_menu_23 *****************
 11299 ;; Defined at:
 11300 ;;		line 448 in file "UI.c"
 11301 ;; Parameters:    Size  Location     Type
 11302 ;;		None
 11303 ;; Auto vars:     Size  Location     Type
 11304 ;;		None
 11305 ;; Return value:  Size  Location     Type
 11306 ;;                  1    wreg      void 
 11307 ;; Registers used:
 11308 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11309 ;; Tracked objects:
 11310 ;;		On entry : 0/0
 11311 ;;		On exit  : 0/0
 11312 ;;		Unchanged: 0/0
 11313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11314 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11315 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11317 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11318 ;;Total ram usage:        0 bytes
 11319 ;; Hardware stack levels used:    1
 11320 ;; Hardware stack levels required when called:    3
 11321 ;; This function calls:
 11322 ;;		i2_lcdInst
 11323 ;;		i2_printf
 11324 ;; This function is called by:
 11325 ;;		_updateMenu
 11326 ;;		_inputHandler
 11327 ;; This function uses a non-reentrant model
 11328 ;;
 11329                           
 11330                           	psect	text52
 11331  002736                     __ptext52:
 11332                           	opt stack 0
 11333  002736                     _change_state_to_menu_23:
 11334                           	opt stack 18
 11335                           
 11336                           ;UI.c: 449: cur_state = 23;
 11337                           
 11338                           ;incstack = 0
 11339  002736  0E00               	movlw	0
 11340  002738  0100               	movlb	0	; () banked
 11341  00273A  6FE8               	movwf	(_cur_state+1)& (0+255),b
 11342  00273C  0E17               	movlw	23
 11343  00273E  6FE7               	movwf	_cur_state& (0+255),b
 11344                           
 11345                           ; BSR set to: 0
 11346                           ;UI.c: 451: lcdInst(0b10000000);;
 11347  002740  0E80               	movlw	128
 11348  002742  EC88  F015         	call	i2_lcdInst
 11349                           
 11350                           ;UI.c: 452: printf("2. SORT         ");
 11351  002746  0E76               	movlw	low STR_17
 11352  002748  6E0D               	movwf	i2printf@f,c
 11353  00274A  0EFE               	movlw	high STR_17
 11354  00274C  6E0E               	movwf	i2printf@f+1,c
 11355  00274E  ECC0  F004         	call	i2_printf	;wreg free
 11356                           
 11357                           ;UI.c: 453: lcdInst(0b11000000);;
 11358  002752  0EC0               	movlw	192
 11359  002754  EC88  F015         	call	i2_lcdInst
 11360                           
 11361                           ;UI.c: 454: printf("3. LOGS        <");
 11362  002758  0E53               	movlw	low STR_23
 11363  00275A  6E0D               	movwf	i2printf@f,c
 11364  00275C  0EFF               	movlw	high STR_23
 11365  00275E  6E0E               	movwf	i2printf@f+1,c
 11366  002760  ECC0  F004         	call	i2_printf	;wreg free
 11367  002764  0012               	return		;funcret
 11368  002766                     __end_of_change_state_to_menu_23:
 11369                           	opt stack 0
 11370                           pclatu	equ	0xFFB
 11371                           pclath	equ	0xFFA
 11372                           tblptru	equ	0xFF8
 11373                           tblptrh	equ	0xFF7
 11374                           tblptrl	equ	0xFF6
 11375                           tablat	equ	0xFF5
 11376                           prodh	equ	0xFF4
 11377                           prodl	equ	0xFF3
 11378                           intcon	equ	0xFF2
 11379                           intcon2	equ	0xFF1
 11380                           intcon3	equ	0xFF0
 11381                           indf0	equ	0xFEF
 11382                           postinc0	equ	0xFEE
 11383                           fsr0h	equ	0xFEA
 11384                           fsr0l	equ	0xFE9
 11385                           wreg	equ	0xFE8
 11386                           postdec1	equ	0xFE5
 11387                           fsr1h	equ	0xFE2
 11388                           fsr1l	equ	0xFE1
 11389                           indf2	equ	0xFDF
 11390                           postinc2	equ	0xFDE
 11391                           postdec2	equ	0xFDD
 11392                           fsr2h	equ	0xFDA
 11393                           fsr2l	equ	0xFD9
 11394                           status	equ	0xFD8
 11395                           
 11396 ;; *************** function _change_state_to_menu_11 *****************
 11397 ;; Defined at:
 11398 ;;		line 424 in file "UI.c"
 11399 ;; Parameters:    Size  Location     Type
 11400 ;;		None
 11401 ;; Auto vars:     Size  Location     Type
 11402 ;;		None
 11403 ;; Return value:  Size  Location     Type
 11404 ;;                  1    wreg      void 
 11405 ;; Registers used:
 11406 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11407 ;; Tracked objects:
 11408 ;;		On entry : 0/0
 11409 ;;		On exit  : 0/0
 11410 ;;		Unchanged: 0/0
 11411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11415 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11416 ;;Total ram usage:        0 bytes
 11417 ;; Hardware stack levels used:    1
 11418 ;; Hardware stack levels required when called:    3
 11419 ;; This function calls:
 11420 ;;		i2_lcdInst
 11421 ;;		i2_printf
 11422 ;; This function is called by:
 11423 ;;		_updateMenu
 11424 ;;		_inputHandler
 11425 ;; This function uses a non-reentrant model
 11426 ;;
 11427                           
 11428                           	psect	text53
 11429  002766                     __ptext53:
 11430                           	opt stack 0
 11431  002766                     _change_state_to_menu_11:
 11432                           	opt stack 18
 11433                           
 11434                           ;UI.c: 425: cur_state = 11;
 11435                           
 11436                           ;incstack = 0
 11437  002766  0E00               	movlw	0
 11438  002768  0100               	movlb	0	; () banked
 11439  00276A  6FE8               	movwf	(_cur_state+1)& (0+255),b
 11440  00276C  0E0B               	movlw	11
 11441  00276E  6FE7               	movwf	_cur_state& (0+255),b
 11442                           
 11443                           ; BSR set to: 0
 11444                           ;UI.c: 427: lcdInst(0b10000000);;
 11445  002770  0E80               	movlw	128
 11446  002772  EC88  F015         	call	i2_lcdInst
 11447                           
 11448                           ;UI.c: 428: printf("1. DATE/TIME   <");
 11449  002776  0E75               	movlw	low STR_16
 11450  002778  6E0D               	movwf	i2printf@f,c
 11451  00277A  0EFF               	movlw	high STR_16
 11452  00277C  6E0E               	movwf	i2printf@f+1,c
 11453  00277E  ECC0  F004         	call	i2_printf	;wreg free
 11454                           
 11455                           ;UI.c: 429: lcdInst(0b11000000);;
 11456  002782  0EC0               	movlw	192
 11457  002784  EC88  F015         	call	i2_lcdInst
 11458                           
 11459                           ;UI.c: 430: printf("2. SORT         ");
 11460  002788  0E76               	movlw	low STR_17
 11461  00278A  6E0D               	movwf	i2printf@f,c
 11462  00278C  0EFE               	movlw	high STR_17
 11463  00278E  6E0E               	movwf	i2printf@f+1,c
 11464  002790  ECC0  F004         	call	i2_printf	;wreg free
 11465  002794  0012               	return		;funcret
 11466  002796                     __end_of_change_state_to_menu_11:
 11467                           	opt stack 0
 11468                           pclatu	equ	0xFFB
 11469                           pclath	equ	0xFFA
 11470                           tblptru	equ	0xFF8
 11471                           tblptrh	equ	0xFF7
 11472                           tblptrl	equ	0xFF6
 11473                           tablat	equ	0xFF5
 11474                           prodh	equ	0xFF4
 11475                           prodl	equ	0xFF3
 11476                           intcon	equ	0xFF2
 11477                           intcon2	equ	0xFF1
 11478                           intcon3	equ	0xFF0
 11479                           indf0	equ	0xFEF
 11480                           postinc0	equ	0xFEE
 11481                           fsr0h	equ	0xFEA
 11482                           fsr0l	equ	0xFE9
 11483                           wreg	equ	0xFE8
 11484                           postdec1	equ	0xFE5
 11485                           fsr1h	equ	0xFE2
 11486                           fsr1l	equ	0xFE1
 11487                           indf2	equ	0xFDF
 11488                           postinc2	equ	0xFDE
 11489                           postdec2	equ	0xFDD
 11490                           fsr2h	equ	0xFDA
 11491                           fsr2l	equ	0xFD9
 11492                           status	equ	0xFD8
 11493                           
 11494 ;; *************** function _change_state_to_logs_34 *****************
 11495 ;; Defined at:
 11496 ;;		line 491 in file "UI.c"
 11497 ;; Parameters:    Size  Location     Type
 11498 ;;		None
 11499 ;; Auto vars:     Size  Location     Type
 11500 ;;		None
 11501 ;; Return value:  Size  Location     Type
 11502 ;;                  1    wreg      void 
 11503 ;; Registers used:
 11504 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11505 ;; Tracked objects:
 11506 ;;		On entry : 0/0
 11507 ;;		On exit  : 0/0
 11508 ;;		Unchanged: 0/0
 11509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11513 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11514 ;;Total ram usage:        0 bytes
 11515 ;; Hardware stack levels used:    1
 11516 ;; Hardware stack levels required when called:    3
 11517 ;; This function calls:
 11518 ;;		i2_lcdInst
 11519 ;;		i2_printf
 11520 ;; This function is called by:
 11521 ;;		_updateMenu
 11522 ;;		_inputHandler
 11523 ;; This function uses a non-reentrant model
 11524 ;;
 11525                           
 11526                           	psect	text54
 11527  002796                     __ptext54:
 11528                           	opt stack 0
 11529  002796                     _change_state_to_logs_34:
 11530                           	opt stack 18
 11531                           
 11532                           ;UI.c: 492: cur_state = 1034;
 11533                           
 11534                           ;incstack = 0
 11535  002796  0E04               	movlw	4
 11536  002798  0100               	movlb	0	; () banked
 11537  00279A  6FE8               	movwf	(_cur_state+1)& (0+255),b
 11538  00279C  0E0A               	movlw	10
 11539  00279E  6FE7               	movwf	_cur_state& (0+255),b
 11540                           
 11541                           ; BSR set to: 0
 11542                           ;UI.c: 493: lcdInst(0b10000000);;
 11543  0027A0  0E80               	movlw	128
 11544  0027A2  EC88  F015         	call	i2_lcdInst
 11545                           
 11546                           ;UI.c: 494: printf("LOG 3           ");
 11547  0027A6  0E43               	movlw	low STR_29
 11548  0027A8  6E0D               	movwf	i2printf@f,c
 11549  0027AA  0EFE               	movlw	high STR_29
 11550  0027AC  6E0E               	movwf	i2printf@f+1,c
 11551  0027AE  ECC0  F004         	call	i2_printf	;wreg free
 11552                           
 11553                           ;UI.c: 495: lcdInst(0b11000000);;
 11554  0027B2  0EC0               	movlw	192
 11555  0027B4  EC88  F015         	call	i2_lcdInst
 11556                           
 11557                           ;UI.c: 496: printf("LOG 4          <");
 11558  0027B8  0E42               	movlw	low STR_35
 11559  0027BA  6E0D               	movwf	i2printf@f,c
 11560  0027BC  0EFF               	movlw	high STR_35
 11561  0027BE  6E0E               	movwf	i2printf@f+1,c
 11562  0027C0  ECC0  F004         	call	i2_printf	;wreg free
 11563  0027C4  0012               	return		;funcret
 11564  0027C6                     __end_of_change_state_to_logs_34:
 11565                           	opt stack 0
 11566                           pclatu	equ	0xFFB
 11567                           pclath	equ	0xFFA
 11568                           tblptru	equ	0xFF8
 11569                           tblptrh	equ	0xFF7
 11570                           tblptrl	equ	0xFF6
 11571                           tablat	equ	0xFF5
 11572                           prodh	equ	0xFF4
 11573                           prodl	equ	0xFF3
 11574                           intcon	equ	0xFF2
 11575                           intcon2	equ	0xFF1
 11576                           intcon3	equ	0xFF0
 11577                           indf0	equ	0xFEF
 11578                           postinc0	equ	0xFEE
 11579                           fsr0h	equ	0xFEA
 11580                           fsr0l	equ	0xFE9
 11581                           wreg	equ	0xFE8
 11582                           postdec1	equ	0xFE5
 11583                           fsr1h	equ	0xFE2
 11584                           fsr1l	equ	0xFE1
 11585                           indf2	equ	0xFDF
 11586                           postinc2	equ	0xFDE
 11587                           postdec2	equ	0xFDD
 11588                           fsr2h	equ	0xFDA
 11589                           fsr2l	equ	0xFD9
 11590                           status	equ	0xFD8
 11591                           
 11592 ;; *************** function _change_state_to_logs_33 *****************
 11593 ;; Defined at:
 11594 ;;		line 484 in file "UI.c"
 11595 ;; Parameters:    Size  Location     Type
 11596 ;;		None
 11597 ;; Auto vars:     Size  Location     Type
 11598 ;;		None
 11599 ;; Return value:  Size  Location     Type
 11600 ;;                  1    wreg      void 
 11601 ;; Registers used:
 11602 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11603 ;; Tracked objects:
 11604 ;;		On entry : 0/0
 11605 ;;		On exit  : 0/0
 11606 ;;		Unchanged: 0/0
 11607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11611 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11612 ;;Total ram usage:        0 bytes
 11613 ;; Hardware stack levels used:    1
 11614 ;; Hardware stack levels required when called:    3
 11615 ;; This function calls:
 11616 ;;		i2_lcdInst
 11617 ;;		i2_printf
 11618 ;; This function is called by:
 11619 ;;		_updateMenu
 11620 ;;		_inputHandler
 11621 ;; This function uses a non-reentrant model
 11622 ;;
 11623                           
 11624                           	psect	text55
 11625  0027C6                     __ptext55:
 11626                           	opt stack 0
 11627  0027C6                     _change_state_to_logs_33:
 11628                           	opt stack 18
 11629                           
 11630                           ;UI.c: 485: cur_state = 1033;
 11631                           
 11632                           ;incstack = 0
 11633  0027C6  0E04               	movlw	4
 11634  0027C8  0100               	movlb	0	; () banked
 11635  0027CA  6FE8               	movwf	(_cur_state+1)& (0+255),b
 11636  0027CC  0E09               	movlw	9
 11637  0027CE  6FE7               	movwf	_cur_state& (0+255),b
 11638                           
 11639                           ; BSR set to: 0
 11640                           ;UI.c: 486: lcdInst(0b10000000);;
 11641  0027D0  0E80               	movlw	128
 11642  0027D2  EC88  F015         	call	i2_lcdInst
 11643                           
 11644                           ;UI.c: 487: printf("LOG 3          <");
 11645  0027D6  0E31               	movlw	low STR_31
 11646  0027D8  6E0D               	movwf	i2printf@f,c
 11647  0027DA  0EFF               	movlw	high STR_31
 11648  0027DC  6E0E               	movwf	i2printf@f+1,c
 11649  0027DE  ECC0  F004         	call	i2_printf	;wreg free
 11650                           
 11651                           ;UI.c: 488: lcdInst(0b11000000);;
 11652  0027E2  0EC0               	movlw	192
 11653  0027E4  EC88  F015         	call	i2_lcdInst
 11654                           
 11655                           ;UI.c: 489: printf("LOG 4           ");
 11656  0027E8  0E54               	movlw	low STR_33
 11657  0027EA  6E0D               	movwf	i2printf@f,c
 11658  0027EC  0EFE               	movlw	high STR_33
 11659  0027EE  6E0E               	movwf	i2printf@f+1,c
 11660  0027F0  ECC0  F004         	call	i2_printf	;wreg free
 11661  0027F4  0012               	return		;funcret
 11662  0027F6                     __end_of_change_state_to_logs_33:
 11663                           	opt stack 0
 11664                           pclatu	equ	0xFFB
 11665                           pclath	equ	0xFFA
 11666                           tblptru	equ	0xFF8
 11667                           tblptrh	equ	0xFF7
 11668                           tblptrl	equ	0xFF6
 11669                           tablat	equ	0xFF5
 11670                           prodh	equ	0xFF4
 11671                           prodl	equ	0xFF3
 11672                           intcon	equ	0xFF2
 11673                           intcon2	equ	0xFF1
 11674                           intcon3	equ	0xFF0
 11675                           indf0	equ	0xFEF
 11676                           postinc0	equ	0xFEE
 11677                           fsr0h	equ	0xFEA
 11678                           fsr0l	equ	0xFE9
 11679                           wreg	equ	0xFE8
 11680                           postdec1	equ	0xFE5
 11681                           fsr1h	equ	0xFE2
 11682                           fsr1l	equ	0xFE1
 11683                           indf2	equ	0xFDF
 11684                           postinc2	equ	0xFDE
 11685                           postdec2	equ	0xFDD
 11686                           fsr2h	equ	0xFDA
 11687                           fsr2l	equ	0xFD9
 11688                           status	equ	0xFD8
 11689                           
 11690 ;; *************** function _change_state_to_logs_23 *****************
 11691 ;; Defined at:
 11692 ;;		line 477 in file "UI.c"
 11693 ;; Parameters:    Size  Location     Type
 11694 ;;		None
 11695 ;; Auto vars:     Size  Location     Type
 11696 ;;		None
 11697 ;; Return value:  Size  Location     Type
 11698 ;;                  1    wreg      void 
 11699 ;; Registers used:
 11700 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11701 ;; Tracked objects:
 11702 ;;		On entry : 0/0
 11703 ;;		On exit  : 0/0
 11704 ;;		Unchanged: 0/0
 11705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11709 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11710 ;;Total ram usage:        0 bytes
 11711 ;; Hardware stack levels used:    1
 11712 ;; Hardware stack levels required when called:    3
 11713 ;; This function calls:
 11714 ;;		i2_lcdInst
 11715 ;;		i2_printf
 11716 ;; This function is called by:
 11717 ;;		_updateMenu
 11718 ;;		_inputHandler
 11719 ;; This function uses a non-reentrant model
 11720 ;;
 11721                           
 11722                           	psect	text56
 11723  0028E2                     __ptext56:
 11724                           	opt stack 0
 11725  0028E2                     _change_state_to_logs_23:
 11726                           	opt stack 18
 11727                           
 11728                           ;UI.c: 478: cur_state = 1023;
 11729                           
 11730                           ;incstack = 0
 11731  0028E2  0E03               	movlw	3
 11732  0028E4  0100               	movlb	0	; () banked
 11733  0028E6  6FE8               	movwf	(_cur_state+1)& (0+255),b
 11734  0028E8  69E7               	setf	_cur_state& (0+255),b
 11735                           
 11736                           ; BSR set to: 0
 11737                           ;UI.c: 479: lcdInst(0b10000000);;
 11738  0028EA  0E80               	movlw	128
 11739  0028EC  EC88  F015         	call	i2_lcdInst
 11740                           
 11741                           ;UI.c: 480: printf("LOG 2           ");
 11742  0028F0  0E32               	movlw	low STR_25
 11743  0028F2  6E0D               	movwf	i2printf@f,c
 11744  0028F4  0EFE               	movlw	high STR_25
 11745  0028F6  6E0E               	movwf	i2printf@f+1,c
 11746  0028F8  ECC0  F004         	call	i2_printf	;wreg free
 11747                           
 11748                           ;UI.c: 481: lcdInst(0b11000000);;
 11749  0028FC  0EC0               	movlw	192
 11750  0028FE  EC88  F015         	call	i2_lcdInst
 11751                           
 11752                           ;UI.c: 482: printf("LOG 3          <");
 11753  002902  0E31               	movlw	low STR_31
 11754  002904  6E0D               	movwf	i2printf@f,c
 11755  002906  0EFF               	movlw	high STR_31
 11756  002908  6E0E               	movwf	i2printf@f+1,c
 11757  00290A  ECC0  F004         	call	i2_printf	;wreg free
 11758  00290E  0012               	return		;funcret
 11759  002910                     __end_of_change_state_to_logs_23:
 11760                           	opt stack 0
 11761                           pclatu	equ	0xFFB
 11762                           pclath	equ	0xFFA
 11763                           tblptru	equ	0xFF8
 11764                           tblptrh	equ	0xFF7
 11765                           tblptrl	equ	0xFF6
 11766                           tablat	equ	0xFF5
 11767                           prodh	equ	0xFF4
 11768                           prodl	equ	0xFF3
 11769                           intcon	equ	0xFF2
 11770                           intcon2	equ	0xFF1
 11771                           intcon3	equ	0xFF0
 11772                           indf0	equ	0xFEF
 11773                           postinc0	equ	0xFEE
 11774                           fsr0h	equ	0xFEA
 11775                           fsr0l	equ	0xFE9
 11776                           wreg	equ	0xFE8
 11777                           postdec1	equ	0xFE5
 11778                           fsr1h	equ	0xFE2
 11779                           fsr1l	equ	0xFE1
 11780                           indf2	equ	0xFDF
 11781                           postinc2	equ	0xFDE
 11782                           postdec2	equ	0xFDD
 11783                           fsr2h	equ	0xFDA
 11784                           fsr2l	equ	0xFD9
 11785                           status	equ	0xFD8
 11786                           
 11787 ;; *************** function _change_state_to_logs_22 *****************
 11788 ;; Defined at:
 11789 ;;		line 470 in file "UI.c"
 11790 ;; Parameters:    Size  Location     Type
 11791 ;;		None
 11792 ;; Auto vars:     Size  Location     Type
 11793 ;;		None
 11794 ;; Return value:  Size  Location     Type
 11795 ;;                  1    wreg      void 
 11796 ;; Registers used:
 11797 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11798 ;; Tracked objects:
 11799 ;;		On entry : 0/0
 11800 ;;		On exit  : 0/0
 11801 ;;		Unchanged: 0/0
 11802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11806 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11807 ;;Total ram usage:        0 bytes
 11808 ;; Hardware stack levels used:    1
 11809 ;; Hardware stack levels required when called:    3
 11810 ;; This function calls:
 11811 ;;		i2_lcdInst
 11812 ;;		i2_printf
 11813 ;; This function is called by:
 11814 ;;		_updateMenu
 11815 ;;		_inputHandler
 11816 ;; This function uses a non-reentrant model
 11817 ;;
 11818                           
 11819                           	psect	text57
 11820  0027F6                     __ptext57:
 11821                           	opt stack 0
 11822  0027F6                     _change_state_to_logs_22:
 11823                           	opt stack 18
 11824                           
 11825                           ;UI.c: 471: cur_state = 1022;
 11826                           
 11827                           ;incstack = 0
 11828  0027F6  0E03               	movlw	3
 11829  0027F8  0100               	movlb	0	; () banked
 11830  0027FA  6FE8               	movwf	(_cur_state+1)& (0+255),b
 11831  0027FC  0EFE               	movlw	254
 11832  0027FE  6FE7               	movwf	_cur_state& (0+255),b
 11833                           
 11834                           ; BSR set to: 0
 11835                           ;UI.c: 472: lcdInst(0b10000000);;
 11836  002800  0E80               	movlw	128
 11837  002802  EC88  F015         	call	i2_lcdInst
 11838                           
 11839                           ;UI.c: 473: printf("LOG 2          <");
 11840  002806  0E20               	movlw	low STR_27
 11841  002808  6E0D               	movwf	i2printf@f,c
 11842  00280A  0EFF               	movlw	high STR_27
 11843  00280C  6E0E               	movwf	i2printf@f+1,c
 11844  00280E  ECC0  F004         	call	i2_printf	;wreg free
 11845                           
 11846                           ;UI.c: 474: lcdInst(0b11000000);;
 11847  002812  0EC0               	movlw	192
 11848  002814  EC88  F015         	call	i2_lcdInst
 11849                           
 11850                           ;UI.c: 475: printf("LOG 3           ");
 11851  002818  0E43               	movlw	low STR_29
 11852  00281A  6E0D               	movwf	i2printf@f,c
 11853  00281C  0EFE               	movlw	high STR_29
 11854  00281E  6E0E               	movwf	i2printf@f+1,c
 11855  002820  ECC0  F004         	call	i2_printf	;wreg free
 11856  002824  0012               	return		;funcret
 11857  002826                     __end_of_change_state_to_logs_22:
 11858                           	opt stack 0
 11859                           pclatu	equ	0xFFB
 11860                           pclath	equ	0xFFA
 11861                           tblptru	equ	0xFF8
 11862                           tblptrh	equ	0xFF7
 11863                           tblptrl	equ	0xFF6
 11864                           tablat	equ	0xFF5
 11865                           prodh	equ	0xFF4
 11866                           prodl	equ	0xFF3
 11867                           intcon	equ	0xFF2
 11868                           intcon2	equ	0xFF1
 11869                           intcon3	equ	0xFF0
 11870                           indf0	equ	0xFEF
 11871                           postinc0	equ	0xFEE
 11872                           fsr0h	equ	0xFEA
 11873                           fsr0l	equ	0xFE9
 11874                           wreg	equ	0xFE8
 11875                           postdec1	equ	0xFE5
 11876                           fsr1h	equ	0xFE2
 11877                           fsr1l	equ	0xFE1
 11878                           indf2	equ	0xFDF
 11879                           postinc2	equ	0xFDE
 11880                           postdec2	equ	0xFDD
 11881                           fsr2h	equ	0xFDA
 11882                           fsr2l	equ	0xFD9
 11883                           status	equ	0xFD8
 11884                           
 11885 ;; *************** function _change_state_to_logs_12 *****************
 11886 ;; Defined at:
 11887 ;;		line 463 in file "UI.c"
 11888 ;; Parameters:    Size  Location     Type
 11889 ;;		None
 11890 ;; Auto vars:     Size  Location     Type
 11891 ;;		None
 11892 ;; Return value:  Size  Location     Type
 11893 ;;                  1    wreg      void 
 11894 ;; Registers used:
 11895 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11896 ;; Tracked objects:
 11897 ;;		On entry : 0/0
 11898 ;;		On exit  : 0/0
 11899 ;;		Unchanged: 0/0
 11900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11904 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11905 ;;Total ram usage:        0 bytes
 11906 ;; Hardware stack levels used:    1
 11907 ;; Hardware stack levels required when called:    3
 11908 ;; This function calls:
 11909 ;;		i2_lcdInst
 11910 ;;		i2_printf
 11911 ;; This function is called by:
 11912 ;;		_updateMenu
 11913 ;;		_inputHandler
 11914 ;; This function uses a non-reentrant model
 11915 ;;
 11916                           
 11917                           	psect	text58
 11918  002826                     __ptext58:
 11919                           	opt stack 0
 11920  002826                     _change_state_to_logs_12:
 11921                           	opt stack 18
 11922                           
 11923                           ;UI.c: 464: cur_state = 1012;
 11924                           
 11925                           ;incstack = 0
 11926  002826  0E03               	movlw	3
 11927  002828  0100               	movlb	0	; () banked
 11928  00282A  6FE8               	movwf	(_cur_state+1)& (0+255),b
 11929  00282C  0EF4               	movlw	244
 11930  00282E  6FE7               	movwf	_cur_state& (0+255),b
 11931                           
 11932                           ; BSR set to: 0
 11933                           ;UI.c: 465: lcdInst(0b10000000);;
 11934  002830  0E80               	movlw	128
 11935  002832  EC88  F015         	call	i2_lcdInst
 11936                           
 11937                           ;UI.c: 466: printf("LOG 1           ");
 11938  002836  0E21               	movlw	low STR_26
 11939  002838  6E0D               	movwf	i2printf@f,c
 11940  00283A  0EFE               	movlw	high STR_26
 11941  00283C  6E0E               	movwf	i2printf@f+1,c
 11942  00283E  ECC0  F004         	call	i2_printf	;wreg free
 11943                           
 11944                           ;UI.c: 467: lcdInst(0b11000000);;
 11945  002842  0EC0               	movlw	192
 11946  002844  EC88  F015         	call	i2_lcdInst
 11947                           
 11948                           ;UI.c: 468: printf("LOG 2          <");
 11949  002848  0E20               	movlw	low STR_27
 11950  00284A  6E0D               	movwf	i2printf@f,c
 11951  00284C  0EFF               	movlw	high STR_27
 11952  00284E  6E0E               	movwf	i2printf@f+1,c
 11953  002850  ECC0  F004         	call	i2_printf	;wreg free
 11954  002854  0012               	return		;funcret
 11955  002856                     __end_of_change_state_to_logs_12:
 11956                           	opt stack 0
 11957                           pclatu	equ	0xFFB
 11958                           pclath	equ	0xFFA
 11959                           tblptru	equ	0xFF8
 11960                           tblptrh	equ	0xFF7
 11961                           tblptrl	equ	0xFF6
 11962                           tablat	equ	0xFF5
 11963                           prodh	equ	0xFF4
 11964                           prodl	equ	0xFF3
 11965                           intcon	equ	0xFF2
 11966                           intcon2	equ	0xFF1
 11967                           intcon3	equ	0xFF0
 11968                           indf0	equ	0xFEF
 11969                           postinc0	equ	0xFEE
 11970                           fsr0h	equ	0xFEA
 11971                           fsr0l	equ	0xFE9
 11972                           wreg	equ	0xFE8
 11973                           postdec1	equ	0xFE5
 11974                           fsr1h	equ	0xFE2
 11975                           fsr1l	equ	0xFE1
 11976                           indf2	equ	0xFDF
 11977                           postinc2	equ	0xFDE
 11978                           postdec2	equ	0xFDD
 11979                           fsr2h	equ	0xFDA
 11980                           fsr2l	equ	0xFD9
 11981                           status	equ	0xFD8
 11982                           
 11983 ;; *************** function _change_state_to_logs_11 *****************
 11984 ;; Defined at:
 11985 ;;		line 456 in file "UI.c"
 11986 ;; Parameters:    Size  Location     Type
 11987 ;;		None
 11988 ;; Auto vars:     Size  Location     Type
 11989 ;;		None
 11990 ;; Return value:  Size  Location     Type
 11991 ;;                  1    wreg      void 
 11992 ;; Registers used:
 11993 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11994 ;; Tracked objects:
 11995 ;;		On entry : 0/0
 11996 ;;		On exit  : 0/0
 11997 ;;		Unchanged: 0/0
 11998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11999 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12000 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12002 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12003 ;;Total ram usage:        0 bytes
 12004 ;; Hardware stack levels used:    1
 12005 ;; Hardware stack levels required when called:    3
 12006 ;; This function calls:
 12007 ;;		i2_lcdInst
 12008 ;;		i2_printf
 12009 ;; This function is called by:
 12010 ;;		_updateMenu
 12011 ;;		_inputHandler
 12012 ;; This function uses a non-reentrant model
 12013 ;;
 12014                           
 12015                           	psect	text59
 12016  002856                     __ptext59:
 12017                           	opt stack 0
 12018  002856                     _change_state_to_logs_11:
 12019                           	opt stack 18
 12020                           
 12021                           ;UI.c: 457: cur_state = 1011;
 12022                           
 12023                           ;incstack = 0
 12024  002856  0E03               	movlw	3
 12025  002858  0100               	movlb	0	; () banked
 12026  00285A  6FE8               	movwf	(_cur_state+1)& (0+255),b
 12027  00285C  0EF3               	movlw	243
 12028  00285E  6FE7               	movwf	_cur_state& (0+255),b
 12029                           
 12030                           ; BSR set to: 0
 12031                           ;UI.c: 458: lcdInst(0b10000000);;
 12032  002860  0E80               	movlw	128
 12033  002862  EC88  F015         	call	i2_lcdInst
 12034                           
 12035                           ;UI.c: 459: printf("LOG 1          <");
 12036  002866  0E0F               	movlw	low STR_24
 12037  002868  6E0D               	movwf	i2printf@f,c
 12038  00286A  0EFF               	movlw	high STR_24
 12039  00286C  6E0E               	movwf	i2printf@f+1,c
 12040  00286E  ECC0  F004         	call	i2_printf	;wreg free
 12041                           
 12042                           ;UI.c: 460: lcdInst(0b11000000);;
 12043  002872  0EC0               	movlw	192
 12044  002874  EC88  F015         	call	i2_lcdInst
 12045                           
 12046                           ;UI.c: 461: printf("LOG 2           ");
 12047  002878  0E32               	movlw	low STR_25
 12048  00287A  6E0D               	movwf	i2printf@f,c
 12049  00287C  0EFE               	movlw	high STR_25
 12050  00287E  6E0E               	movwf	i2printf@f+1,c
 12051  002880  ECC0  F004         	call	i2_printf	;wreg free
 12052  002884  0012               	return		;funcret
 12053  002886                     __end_of_change_state_to_logs_11:
 12054                           	opt stack 0
 12055                           pclatu	equ	0xFFB
 12056                           pclath	equ	0xFFA
 12057                           tblptru	equ	0xFF8
 12058                           tblptrh	equ	0xFF7
 12059                           tblptrl	equ	0xFF6
 12060                           tablat	equ	0xFF5
 12061                           prodh	equ	0xFF4
 12062                           prodl	equ	0xFF3
 12063                           intcon	equ	0xFF2
 12064                           intcon2	equ	0xFF1
 12065                           intcon3	equ	0xFF0
 12066                           indf0	equ	0xFEF
 12067                           postinc0	equ	0xFEE
 12068                           fsr0h	equ	0xFEA
 12069                           fsr0l	equ	0xFE9
 12070                           wreg	equ	0xFE8
 12071                           postdec1	equ	0xFE5
 12072                           fsr1h	equ	0xFE2
 12073                           fsr1l	equ	0xFE1
 12074                           indf2	equ	0xFDF
 12075                           postinc2	equ	0xFDE
 12076                           postdec2	equ	0xFDD
 12077                           fsr2h	equ	0xFDA
 12078                           fsr2l	equ	0xFD9
 12079                           status	equ	0xFD8
 12080                           
 12081 ;; *************** function _dispLogs *****************
 12082 ;; Defined at:
 12083 ;;		line 410 in file "UI.c"
 12084 ;; Parameters:    Size  Location     Type
 12085 ;;  myLog           2    0[COMRAM] int 
 12086 ;; Auto vars:     Size  Location     Type
 12087 ;;		None
 12088 ;; Return value:  Size  Location     Type
 12089 ;;                  1    wreg      void 
 12090 ;; Registers used:
 12091 ;;		wreg, status,2
 12092 ;; Tracked objects:
 12093 ;;		On entry : 0/0
 12094 ;;		On exit  : 0/0
 12095 ;;		Unchanged: 0/0
 12096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12097 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12098 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12100 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12101 ;;Total ram usage:        2 bytes
 12102 ;; Hardware stack levels used:    1
 12103 ;; This function calls:
 12104 ;;		Nothing
 12105 ;; This function is called by:
 12106 ;;		_updateMenu
 12107 ;; This function uses a non-reentrant model
 12108 ;;
 12109                           
 12110                           	psect	text60
 12111  002AAC                     __ptext60:
 12112                           	opt stack 0
 12113  002AAC                     _dispLogs:
 12114                           	opt stack 22
 12115                           
 12116                           ;UI.c: 411: logstate = 1;
 12117                           
 12118                           ;incstack = 0
 12119  002AAC  0E00               	movlw	0
 12120  002AAE  0100               	movlb	0	; () banked
 12121  002AB0  6FF4               	movwf	(_logstate+1)& (0+255),b
 12122  002AB2  0E01               	movlw	1
 12123  002AB4  6FF3               	movwf	_logstate& (0+255),b
 12124                           
 12125                           ; BSR set to: 0
 12126                           ;UI.c: 412: log = myLog;
 12127  002AB6  C001  F0F1         	movff	dispLogs@myLog,_log
 12128  002ABA  C002  F0F2         	movff	dispLogs@myLog+1,_log+1
 12129                           
 12130                           ; BSR set to: 0
 12131  002ABE  0012               	return		;funcret
 12132  002AC0                     __end_of_dispLogs:
 12133                           	opt stack 0
 12134                           pclatu	equ	0xFFB
 12135                           pclath	equ	0xFFA
 12136                           tblptru	equ	0xFF8
 12137                           tblptrh	equ	0xFF7
 12138                           tblptrl	equ	0xFF6
 12139                           tablat	equ	0xFF5
 12140                           prodh	equ	0xFF4
 12141                           prodl	equ	0xFF3
 12142                           intcon	equ	0xFF2
 12143                           intcon2	equ	0xFF1
 12144                           intcon3	equ	0xFF0
 12145                           indf0	equ	0xFEF
 12146                           postinc0	equ	0xFEE
 12147                           fsr0h	equ	0xFEA
 12148                           fsr0l	equ	0xFE9
 12149                           wreg	equ	0xFE8
 12150                           postdec1	equ	0xFE5
 12151                           fsr1h	equ	0xFE2
 12152                           fsr1l	equ	0xFE1
 12153                           indf2	equ	0xFDF
 12154                           postinc2	equ	0xFDE
 12155                           postdec2	equ	0xFDD
 12156                           fsr2h	equ	0xFDA
 12157                           fsr2l	equ	0xFD9
 12158                           status	equ	0xFD8
 12159                           
 12160 ;; *************** function _printSortTimer *****************
 12161 ;; Defined at:
 12162 ;;		line 139 in file "sort.c"
 12163 ;; Parameters:    Size  Location     Type
 12164 ;;		None
 12165 ;; Auto vars:     Size  Location     Type
 12166 ;;  i               2   72[COMRAM] int 
 12167 ;;  curTime        14   44[COMRAM] int [7]
 12168 ;;  timeDiff        2   70[COMRAM] unsigned int 
 12169 ;;  sec             2   66[COMRAM] int 
 12170 ;;  min             2   64[COMRAM] int 
 12171 ;;  hour            2   62[COMRAM] int 
 12172 ;;  cur_sec         2   60[COMRAM] unsigned int 
 12173 ;;  start_sec       2   58[COMRAM] unsigned int 
 12174 ;; Return value:  Size  Location     Type
 12175 ;;                  1    wreg      void 
 12176 ;; Registers used:
 12177 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12178 ;; Tracked objects:
 12179 ;;		On entry : 0/0
 12180 ;;		On exit  : 0/0
 12181 ;;		Unchanged: 0/0
 12182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12184 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12185 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12186 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12187 ;;Total ram usage:       33 bytes
 12188 ;; Hardware stack levels used:    1
 12189 ;; Hardware stack levels required when called:    3
 12190 ;; This function calls:
 12191 ;;		i2___lwdiv
 12192 ;;		i2___lwmod
 12193 ;;		i2___wmul
 12194 ;;		i2_getRTC
 12195 ;;		i2_lcdInst
 12196 ;;		i2_printf
 12197 ;; This function is called by:
 12198 ;;		_handler
 12199 ;; This function uses a non-reentrant model
 12200 ;;
 12201                           
 12202                           	psect	text61
 12203  001486                     __ptext61:
 12204                           	opt stack 0
 12205  001486                     _printSortTimer:
 12206                           	opt stack 20
 12207                           
 12208                           ;sort.c: 140: getRTC();
 12209                           
 12210                           ; BSR set to: 0
 12211                           ;incstack = 0
 12212  001486  EC8C  F010         	call	i2_getRTC	;wreg free
 12213                           
 12214                           ;sort.c: 141: int curTime[7];
 12215                           ;sort.c: 142: for(int i = 0; i < 7; i++){
 12216  00148A  0E00               	movlw	0
 12217  00148C  6E4A               	movwf	printSortTimer@i+1,c
 12218  00148E  0E00               	movlw	0
 12219  001490  6E49               	movwf	printSortTimer@i,c
 12220  001492                     i2l5884:
 12221  001492  BE4A               	btfsc	printSortTimer@i+1,7,c
 12222  001494  D006               	goto	i2l5888
 12223  001496  504A               	movf	printSortTimer@i+1,w,c
 12224  001498  E131               	bnz	i2l5894
 12225  00149A  0E07               	movlw	7
 12226  00149C  5C49               	subwf	printSortTimer@i,w,c
 12227  00149E  B0D8               	btfsc	status,0,c
 12228  0014A0  D02D               	goto	i2l5894
 12229  0014A2                     i2l5888:
 12230                           
 12231                           ;sort.c: 143: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 12232  0014A2  0ED4               	movlw	low _time
 12233  0014A4  2449               	addwf	printSortTimer@i,w,c
 12234  0014A6  6ED9               	movwf	fsr2l,c
 12235  0014A8  0E00               	movlw	high _time
 12236  0014AA  204A               	addwfc	printSortTimer@i+1,w,c
 12237  0014AC  6EDA               	movwf	fsr2h,c
 12238  0014AE  50DF               	movf	indf2,w,c
 12239  0014B0  6E2A               	movwf	??_printSortTimer& (0+255),c
 12240  0014B2  3A2A               	swapf	??_printSortTimer,f,c
 12241  0014B4  0E0F               	movlw	15
 12242  0014B6  162A               	andwf	??_printSortTimer,f,c
 12243  0014B8  0E0F               	movlw	15
 12244  0014BA  162A               	andwf	??_printSortTimer,f,c
 12245  0014BC  502A               	movf	??_printSortTimer,w,c
 12246  0014BE  0D0A               	mullw	10
 12247  0014C0  0ED4               	movlw	low _time
 12248  0014C2  2449               	addwf	printSortTimer@i,w,c
 12249  0014C4  6ED9               	movwf	fsr2l,c
 12250  0014C6  0E00               	movlw	high _time
 12251  0014C8  204A               	addwfc	printSortTimer@i+1,w,c
 12252  0014CA  6EDA               	movwf	fsr2h,c
 12253  0014CC  50DF               	movf	indf2,w,c
 12254  0014CE  0B0F               	andlw	15
 12255  0014D0  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 12256  0014D2  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 12257  0014D4  50F3               	movf	prodl,w,c
 12258  0014D6  262B               	addwf	??_printSortTimer+1,f,c
 12259  0014D8  50F4               	movf	prodh,w,c
 12260  0014DA  222C               	addwfc	??_printSortTimer+2,f,c
 12261  0014DC  90D8               	bcf	status,0,c
 12262  0014DE  3449               	rlcf	printSortTimer@i,w,c
 12263  0014E0  6ED9               	movwf	fsr2l,c
 12264  0014E2  344A               	rlcf	printSortTimer@i+1,w,c
 12265  0014E4  6EDA               	movwf	fsr2h,c
 12266  0014E6  0E2D               	movlw	low printSortTimer@curTime
 12267  0014E8  26D9               	addwf	fsr2l,f,c
 12268  0014EA  0E00               	movlw	high printSortTimer@curTime
 12269  0014EC  22DA               	addwfc	fsr2h,f,c
 12270  0014EE  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 12271  0014F2  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 12272  0014F6  4A49               	infsnz	printSortTimer@i,f,c
 12273  0014F8  2A4A               	incf	printSortTimer@i+1,f,c
 12274  0014FA  D7CB               	goto	i2l5884
 12275  0014FC                     i2l5894:
 12276                           
 12277                           ;sort.c: 144: }
 12278                           ;sort.c: 145: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 12279  0014FC  C102  F001         	movff	_startTime+2,i2___wmul@multiplier
 12280  001500  C103  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 12281  001504  0E00               	movlw	0
 12282  001506  6E04               	movwf	i2___wmul@multiplicand+1,c
 12283  001508  0E3C               	movlw	60
 12284  00150A  6E03               	movwf	i2___wmul@multiplicand,c
 12285  00150C  ECDD  F014         	call	i2___wmul	;wreg free
 12286  001510  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 12287  001514  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 12288  001518  C104  F001         	movff	_startTime+4,i2___wmul@multiplier
 12289  00151C  C105  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 12290  001520  0E0E               	movlw	14
 12291  001522  6E04               	movwf	i2___wmul@multiplicand+1,c
 12292  001524  0E10               	movlw	16
 12293  001526  6E03               	movwf	i2___wmul@multiplicand,c
 12294  001528  ECDD  F014         	call	i2___wmul	;wreg free
 12295  00152C  5001               	movf	?i2___wmul,w,c
 12296  00152E  262A               	addwf	??_printSortTimer,f,c
 12297  001530  5002               	movf	?i2___wmul+1,w,c
 12298  001532  222B               	addwfc	??_printSortTimer+1,f,c
 12299  001534  0101               	movlb	1	; () banked
 12300  001536  5100               	movf	_startTime& (0+255),w,b
 12301  001538  242A               	addwf	??_printSortTimer,w,c
 12302  00153A  6E3B               	movwf	printSortTimer@start_sec,c
 12303  00153C  0101               	movlb	1	; () banked
 12304  00153E  5101               	movf	(_startTime+1)& (0+255),w,b
 12305  001540  202B               	addwfc	??_printSortTimer+1,w,c
 12306  001542  6E3C               	movwf	printSortTimer@start_sec+1,c
 12307                           
 12308                           ;sort.c: 146: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 12309  001544  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 12310  001548  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 12311  00154C  0E00               	movlw	0
 12312  00154E  6E04               	movwf	i2___wmul@multiplicand+1,c
 12313  001550  0E3C               	movlw	60
 12314  001552  6E03               	movwf	i2___wmul@multiplicand,c
 12315  001554  ECDD  F014         	call	i2___wmul	;wreg free
 12316  001558  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 12317  00155C  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 12318  001560  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 12319  001564  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 12320  001568  0E0E               	movlw	14
 12321  00156A  6E04               	movwf	i2___wmul@multiplicand+1,c
 12322  00156C  0E10               	movlw	16
 12323  00156E  6E03               	movwf	i2___wmul@multiplicand,c
 12324  001570  ECDD  F014         	call	i2___wmul	;wreg free
 12325  001574  5001               	movf	?i2___wmul,w,c
 12326  001576  262A               	addwf	??_printSortTimer,f,c
 12327  001578  5002               	movf	?i2___wmul+1,w,c
 12328  00157A  222B               	addwfc	??_printSortTimer+1,f,c
 12329  00157C  502D               	movf	printSortTimer@curTime,w,c
 12330  00157E  242A               	addwf	??_printSortTimer,w,c
 12331  001580  6E3D               	movwf	printSortTimer@cur_sec,c
 12332  001582  502E               	movf	printSortTimer@curTime+1,w,c
 12333  001584  202B               	addwfc	??_printSortTimer+1,w,c
 12334  001586  6E3E               	movwf	printSortTimer@cur_sec+1,c
 12335                           
 12336                           ;sort.c: 147: unsigned int timeDiff = cur_sec - start_sec;
 12337  001588  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 12338  00158C  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 12339  001590  1E2A               	comf	??_printSortTimer,f,c
 12340  001592  1E2B               	comf	??_printSortTimer+1,f,c
 12341  001594  4A2A               	infsnz	??_printSortTimer,f,c
 12342  001596  2A2B               	incf	??_printSortTimer+1,f,c
 12343  001598  503D               	movf	printSortTimer@cur_sec,w,c
 12344  00159A  242A               	addwf	??_printSortTimer,w,c
 12345  00159C  6E47               	movwf	printSortTimer@timeDiff,c
 12346  00159E  503E               	movf	printSortTimer@cur_sec+1,w,c
 12347  0015A0  202B               	addwfc	??_printSortTimer+1,w,c
 12348  0015A2  6E48               	movwf	printSortTimer@timeDiff+1,c
 12349                           
 12350                           ;sort.c: 149: total_time = timeDiff;
 12351  0015A4  C047  F0F5         	movff	printSortTimer@timeDiff,_total_time
 12352  0015A8  C048  F0F6         	movff	printSortTimer@timeDiff+1,_total_time+1
 12353                           
 12354                           ;sort.c: 151: if(timeDiff >= 10){
 12355  0015AC  5048               	movf	printSortTimer@timeDiff+1,w,c
 12356  0015AE  E104               	bnz	i2u461_40
 12357  0015B0  0E0A               	movlw	10
 12358  0015B2  5C47               	subwf	printSortTimer@timeDiff,w,c
 12359  0015B4  A0D8               	btfss	status,0,c
 12360  0015B6  D003               	goto	i2l5904
 12361  0015B8                     i2u461_40:
 12362                           
 12363                           ;sort.c: 152: machine_state = DoneSorting_state;
 12364  0015B8  0E02               	movlw	2
 12365  0015BA  0100               	movlb	0	; () banked
 12366  0015BC  6FF7               	movwf	_machine_state& (0+255),b
 12367  0015BE                     i2l5904:
 12368                           
 12369                           ;sort.c: 154: }
 12370                           ;sort.c: 156: int hour = timeDiff / 3600;
 12371  0015BE  C047  F006         	movff	printSortTimer@timeDiff,i2___lwdiv@dividend
 12372  0015C2  C048  F007         	movff	printSortTimer@timeDiff+1,i2___lwdiv@dividend+1
 12373  0015C6  0E0E               	movlw	14
 12374  0015C8  6E09               	movwf	i2___lwdiv@divisor+1,c
 12375  0015CA  0E10               	movlw	16
 12376  0015CC  6E08               	movwf	i2___lwdiv@divisor,c
 12377  0015CE  EC37  F012         	call	i2___lwdiv	;wreg free
 12378  0015D2  C006  F03F         	movff	?i2___lwdiv,printSortTimer@hour
 12379  0015D6  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@hour+1
 12380                           
 12381                           ;sort.c: 157: int min = (timeDiff % 3600) / 60;
 12382  0015DA  0E0E               	movlw	14
 12383  0015DC  6E04               	movwf	i2___lwmod@divisor+1,c
 12384  0015DE  0E10               	movlw	16
 12385  0015E0  6E03               	movwf	i2___lwmod@divisor,c
 12386  0015E2  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 12387  0015E6  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 12388  0015EA  ECA4  F012         	call	i2___lwmod	;wreg free
 12389  0015EE  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 12390  0015F2  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 12391  0015F6  0E00               	movlw	0
 12392  0015F8  6E09               	movwf	i2___lwdiv@divisor+1,c
 12393  0015FA  0E3C               	movlw	60
 12394  0015FC  6E08               	movwf	i2___lwdiv@divisor,c
 12395  0015FE  EC37  F012         	call	i2___lwdiv	;wreg free
 12396  001602  C006  F041         	movff	?i2___lwdiv,printSortTimer@min
 12397  001606  C007  F042         	movff	?i2___lwdiv+1,printSortTimer@min+1
 12398                           
 12399                           ;sort.c: 158: int sec = (timeDiff % 3600) % 60;
 12400  00160A  0E0E               	movlw	14
 12401  00160C  6E04               	movwf	i2___lwmod@divisor+1,c
 12402  00160E  0E10               	movlw	16
 12403  001610  6E03               	movwf	i2___lwmod@divisor,c
 12404  001612  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 12405  001616  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 12406  00161A  ECA4  F012         	call	i2___lwmod	;wreg free
 12407  00161E  C001  F045         	movff	?i2___lwmod,_printSortTimer$2279
 12408  001622  C002  F046         	movff	?i2___lwmod+1,_printSortTimer$2279+1
 12409                           
 12410                           ;sort.c: 158: int sec = (timeDiff % 3600) % 60;
 12411  001626  C045  F001         	movff	_printSortTimer$2279,i2___lwmod@dividend
 12412  00162A  C046  F002         	movff	_printSortTimer$2279+1,i2___lwmod@dividend+1
 12413  00162E  0E00               	movlw	0
 12414  001630  6E04               	movwf	i2___lwmod@divisor+1,c
 12415  001632  0E3C               	movlw	60
 12416  001634  6E03               	movwf	i2___lwmod@divisor,c
 12417  001636  ECA4  F012         	call	i2___lwmod	;wreg free
 12418  00163A  C001  F043         	movff	?i2___lwmod,printSortTimer@sec
 12419  00163E  C002  F044         	movff	?i2___lwmod+1,printSortTimer@sec+1
 12420                           
 12421                           ;sort.c: 160: lcdInst(0b10000000);;
 12422  001642  0E80               	movlw	128
 12423  001644  EC88  F015         	call	i2_lcdInst
 12424                           
 12425                           ;sort.c: 161: printf("Sorting...");
 12426  001648  0EA8               	movlw	low STR_49
 12427  00164A  6E0D               	movwf	i2printf@f,c
 12428  00164C  0EFF               	movlw	high STR_49
 12429  00164E  6E0E               	movwf	i2printf@f+1,c
 12430  001650  ECC0  F004         	call	i2_printf	;wreg free
 12431                           
 12432                           ;sort.c: 162: lcdInst(0b11000000);;
 12433  001654  0EC0               	movlw	192
 12434  001656  EC88  F015         	call	i2_lcdInst
 12435                           
 12436                           ;sort.c: 163: printf("Time: %02d:%02d:%02d", hour, min, sec);
 12437  00165A  0EE8               	movlw	low STR_2
 12438  00165C  6E0D               	movwf	i2printf@f,c
 12439  00165E  0EFD               	movlw	high STR_2
 12440  001660  6E0E               	movwf	i2printf@f+1,c
 12441  001662  C03F  F00F         	movff	printSortTimer@hour,?i2_printf+2
 12442  001666  C040  F010         	movff	printSortTimer@hour+1,?i2_printf+3
 12443  00166A  C041  F011         	movff	printSortTimer@min,?i2_printf+4
 12444  00166E  C042  F012         	movff	printSortTimer@min+1,?i2_printf+5
 12445  001672  C043  F013         	movff	printSortTimer@sec,?i2_printf+6
 12446  001676  C044  F014         	movff	printSortTimer@sec+1,?i2_printf+7
 12447  00167A  ECC0  F004         	call	i2_printf	;wreg free
 12448  00167E  0012               	return		;funcret
 12449  001680                     __end_of_printSortTimer:
 12450                           	opt stack 0
 12451                           pclatu	equ	0xFFB
 12452                           pclath	equ	0xFFA
 12453                           tblptru	equ	0xFF8
 12454                           tblptrh	equ	0xFF7
 12455                           tblptrl	equ	0xFF6
 12456                           tablat	equ	0xFF5
 12457                           prodh	equ	0xFF4
 12458                           prodl	equ	0xFF3
 12459                           intcon	equ	0xFF2
 12460                           intcon2	equ	0xFF1
 12461                           intcon3	equ	0xFF0
 12462                           indf0	equ	0xFEF
 12463                           postinc0	equ	0xFEE
 12464                           fsr0h	equ	0xFEA
 12465                           fsr0l	equ	0xFE9
 12466                           wreg	equ	0xFE8
 12467                           postdec1	equ	0xFE5
 12468                           fsr1h	equ	0xFE2
 12469                           fsr1l	equ	0xFE1
 12470                           indf2	equ	0xFDF
 12471                           postinc2	equ	0xFDE
 12472                           postdec2	equ	0xFDD
 12473                           fsr2h	equ	0xFDA
 12474                           fsr2l	equ	0xFD9
 12475                           status	equ	0xFD8
 12476                           
 12477 ;; *************** function i2_printf *****************
 12478 ;; Defined at:
 12479 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 12480 ;; Parameters:    Size  Location     Type
 12481 ;;  f               2   12[COMRAM] PTR const unsigned char 
 12482 ;;		 -> STR_50(21), STR_49(11), STR_48(24), STR_35(17), 
 12483 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
 12484 ;;		 -> STR_30(17), STR_29(17), STR_28(17), STR_27(17), 
 12485 ;;		 -> STR_26(17), STR_25(17), STR_24(17), STR_23(17), 
 12486 ;;		 -> STR_22(17), STR_21(17), STR_20(17), STR_19(17), 
 12487 ;;		 -> STR_18(17), STR_17(17), STR_16(17), STR_15(17), 
 12488 ;;		 -> STR_14(3), STR_13(17), STR_12(17), STR_11(17), 
 12489 ;;		 -> STR_10(17), STR_9(17), STR_8(18), STR_7(10), 
 12490 ;;		 -> STR_6(17), STR_5(7), STR_4(17), STR_3(18), 
 12491 ;;		 -> STR_2(21), STR_1(17), 
 12492 ;; Auto vars:     Size  Location     Type
 12493 ;;  printf          4    0        struct .
 12494 ;;  printf          2   39[COMRAM] int 
 12495 ;;  printf          2   35[COMRAM] unsigned int 
 12496 ;;  printf          2   33[COMRAM] unsigned int 
 12497 ;;  printf          2   31[COMRAM] PTR const unsigned char 
 12498 ;;		 -> STR_51(7), printRTC@month(4), 
 12499 ;;  printf          2   29[COMRAM] PTR void [1]
 12500 ;;		 -> ?i2_printf(2), ?_printf(2), 
 12501 ;;  printf          1   38[COMRAM] char 
 12502 ;;  printf          1   37[COMRAM] unsigned char 
 12503 ;;  printf          1   28[COMRAM] char 
 12504 ;; Return value:  Size  Location     Type
 12505 ;;                  2   12[COMRAM] int 
 12506 ;; Registers used:
 12507 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12508 ;; Tracked objects:
 12509 ;;		On entry : 0/0
 12510 ;;		On exit  : 0/0
 12511 ;;		Unchanged: 0/0
 12512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12513 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12514 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12515 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12516 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12517 ;;Total ram usage:       29 bytes
 12518 ;; Hardware stack levels used:    1
 12519 ;; Hardware stack levels required when called:    2
 12520 ;; This function calls:
 12521 ;;		i2___lwdiv
 12522 ;;		i2___lwmod
 12523 ;;		i2___wmul
 12524 ;;		i2_isdigit
 12525 ;;		i2_putch
 12526 ;; This function is called by:
 12527 ;;		_change_state_to_menu_11
 12528 ;;		_change_state_to_menu_23
 12529 ;;		_change_state_to_logs_11
 12530 ;;		_change_state_to_logs_12
 12531 ;;		_change_state_to_logs_22
 12532 ;;		_change_state_to_logs_23
 12533 ;;		_change_state_to_logs_33
 12534 ;;		_change_state_to_logs_34
 12535 ;;		_printSortTimer
 12536 ;;		i2_change_state_to_menu_start
 12537 ;;		i2_change_state_to_menu_12
 12538 ;;		i2_change_state_to_menu_22
 12539 ;;		i2_printRTC
 12540 ;; This function uses a non-reentrant model
 12541 ;;
 12542                           
 12543                           	psect	text62
 12544  000980                     __ptext62:
 12545                           	opt stack 0
 12546  000980                     i2_printf:
 12547                           	opt stack 19
 12548                           
 12549                           ;doprnt.c: 466: va_list ap;
 12550                           ;doprnt.c: 499: signed char c;
 12551                           ;doprnt.c: 501: int width;
 12552                           ;doprnt.c: 506: signed char prec;
 12553                           ;doprnt.c: 508: unsigned char flag;
 12554                           ;doprnt.c: 523: union {
 12555                           ;doprnt.c: 524: unsigned long vd;
 12556                           ;doprnt.c: 525: double integ;
 12557                           ;doprnt.c: 526: } tmpval;
 12558                           ;doprnt.c: 528: unsigned int val;
 12559                           ;doprnt.c: 529: unsigned len;
 12560                           ;doprnt.c: 530: const char * cp;
 12561                           ;doprnt.c: 533: *ap = __va_start();
 12562                           
 12563                           ;incstack = 0
 12564  000980  0E0F               	movlw	low (?i2_printf+2)
 12565  000982  6E1E               	movwf	i2printf@ap,c
 12566  000984  0E00               	movlw	high (?i2_printf+2)
 12567  000986  6E1F               	movwf	i2printf@ap+1,c
 12568                           
 12569                           ;doprnt.c: 536: while(c = *f++) {
 12570  000988  D190               	goto	i2l4680
 12571  00098A                     i2l4556:
 12572                           
 12573                           ;doprnt.c: 538: if(c != '%')
 12574  00098A  0E25               	movlw	37
 12575  00098C  1827               	xorwf	i2printf@c,w,c
 12576  00098E  B4D8               	btfsc	status,2,c
 12577  000990  D004               	goto	i2l4560
 12578                           
 12579                           ;doprnt.c: 540: {
 12580                           ;doprnt.c: 541: (putch(c) );
 12581  000992  5027               	movf	i2printf@c,w,c
 12582  000994  EC82  F015         	call	i2_putch
 12583                           
 12584                           ;doprnt.c: 542: continue;
 12585  000998  D188               	goto	i2l4680
 12586  00099A                     i2l4560:
 12587                           
 12588                           ;doprnt.c: 543: }
 12589                           ;doprnt.c: 546: width = 0;
 12590  00099A  0E00               	movlw	0
 12591  00099C  6E29               	movwf	i2printf@width+1,c
 12592  00099E  0E00               	movlw	0
 12593  0009A0  6E28               	movwf	i2printf@width,c
 12594                           
 12595                           ;doprnt.c: 548: flag = 0;
 12596  0009A2  0E00               	movlw	0
 12597  0009A4  6E26               	movwf	i2printf@flag,c
 12598                           
 12599                           ;doprnt.c: 551: switch(*f) {
 12600                           
 12601                           ;doprnt.c: 550: for(;;) {
 12602  0009A6  D003               	goto	i2l4566
 12603  0009A8                     i2l4562:
 12604                           
 12605                           ;doprnt.c: 580: flag |= 0x04;
 12606  0009A8  8426               	bsf	i2printf@flag,2,c
 12607                           
 12608                           ;doprnt.c: 581: f++;
 12609  0009AA  4A0D               	infsnz	i2printf@f,f,c
 12610  0009AC  2A0E               	incf	i2printf@f+1,f,c
 12611  0009AE                     i2l4566:
 12612  0009AE  C00D  FFF6         	movff	i2printf@f,tblptrl
 12613  0009B2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12614  0009B6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12615  0009B6  6AF8               	clrf	tblptru,c
 12616  0009B8                     	endif
 12617  0009B8                     	if	0	;tblptru may be non-zero
 12618  0009B8                     	endif
 12619  0009B8  0008               	tblrd		*
 12620  0009BA  50F5               	movf	tablat,w,c
 12621                           
 12622                           ; Switch size 1, requested type "space"
 12623                           ; Number of cases is 1, Range of values is 48 to 48
 12624                           ; switch strategies available:
 12625                           ; Name         Instructions Cycles
 12626                           ; simple_byte            4     3 (average)
 12627                           ;	Chosen strategy is simple_byte
 12628  0009BC  0A30               	xorlw	48	; case 48
 12629  0009BE  B4D8               	btfsc	status,2,c
 12630  0009C0  D7F3               	goto	i2l4562
 12631                           
 12632                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 12633                           
 12634                           ;doprnt.c: 586: }
 12635                           
 12636                           ;doprnt.c: 585: break;
 12637  0009C2  C00D  FFF6         	movff	i2printf@f,tblptrl
 12638  0009C6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12639  0009CA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12640  0009CA  6AF8               	clrf	tblptru,c
 12641  0009CC                     	endif
 12642  0009CC                     	if	0	;tblptru may be non-zero
 12643  0009CC                     	endif
 12644  0009CC  0008               	tblrd		*
 12645  0009CE  50F5               	movf	tablat,w,c
 12646  0009D0  EC25  F015         	call	i2_isdigit
 12647  0009D4  A0D8               	btfss	status,0,c
 12648  0009D6  D0A4               	goto	i2l4612
 12649                           
 12650                           ;doprnt.c: 598: width = 0;
 12651  0009D8  0E00               	movlw	0
 12652  0009DA  6E29               	movwf	i2printf@width+1,c
 12653  0009DC  0E00               	movlw	0
 12654  0009DE  6E28               	movwf	i2printf@width,c
 12655  0009E0                     i2l4572:
 12656                           
 12657                           ;doprnt.c: 600: width *= 10;
 12658  0009E0  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 12659  0009E4  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 12660  0009E8  0E00               	movlw	0
 12661  0009EA  6E04               	movwf	i2___wmul@multiplicand+1,c
 12662  0009EC  0E0A               	movlw	10
 12663  0009EE  6E03               	movwf	i2___wmul@multiplicand,c
 12664  0009F0  ECDD  F014         	call	i2___wmul	;wreg free
 12665  0009F4  C001  F028         	movff	?i2___wmul,i2printf@width
 12666  0009F8  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 12667                           
 12668                           ;doprnt.c: 601: width += *f++ - '0';
 12669  0009FC  0ED0               	movlw	208
 12670  0009FE  6E19               	movwf	??i2_printf& (0+255),c
 12671  000A00  0EFF               	movlw	255
 12672  000A02  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 12673  000A04  C00D  FFF6         	movff	i2printf@f,tblptrl
 12674  000A08  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12675  000A0C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12676  000A0C  6AF8               	clrf	tblptru,c
 12677  000A0E                     	endif
 12678  000A0E                     	if	0	;tblptru may be non-zero
 12679  000A0E                     	endif
 12680  000A0E  0008               	tblrd		*
 12681  000A10  50F5               	movf	tablat,w,c
 12682  000A12  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 12683  000A14  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 12684  000A16  5019               	movf	??i2_printf,w,c
 12685  000A18  261B               	addwf	??i2_printf+2,f,c
 12686  000A1A  501A               	movf	??i2_printf+1,w,c
 12687  000A1C  221C               	addwfc	??i2_printf+3,f,c
 12688  000A1E  501B               	movf	??i2_printf+2,w,c
 12689  000A20  2628               	addwf	i2printf@width,f,c
 12690  000A22  501C               	movf	??i2_printf+3,w,c
 12691  000A24  2229               	addwfc	i2printf@width+1,f,c
 12692  000A26  4A0D               	infsnz	i2printf@f,f,c
 12693  000A28  2A0E               	incf	i2printf@f+1,f,c
 12694                           
 12695                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 12696  000A2A  C00D  FFF6         	movff	i2printf@f,tblptrl
 12697  000A2E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12698  000A32                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12699  000A32  6AF8               	clrf	tblptru,c
 12700  000A34                     	endif
 12701  000A34                     	if	0	;tblptru may be non-zero
 12702  000A34                     	endif
 12703  000A34  0008               	tblrd		*
 12704  000A36  50F5               	movf	tablat,w,c
 12705  000A38  EC25  F015         	call	i2_isdigit
 12706  000A3C  A0D8               	btfss	status,0,c
 12707  000A3E  D070               	goto	i2l4612
 12708  000A40  D7CF               	goto	i2l4572
 12709  000A42                     i2l4580:
 12710                           
 12711                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 12712  000A42  C01E  FFD9         	movff	i2printf@ap,fsr2l
 12713  000A46  C01F  FFDA         	movff	i2printf@ap+1,fsr2h
 12714  000A4A  CFDE F020          	movff	postinc2,i2printf@cp
 12715  000A4E  CFDD F021          	movff	postdec2,i2printf@cp+1
 12716  000A52  0E02               	movlw	2
 12717  000A54  261E               	addwf	i2printf@ap,f,c
 12718  000A56  0E00               	movlw	0
 12719  000A58  221F               	addwfc	i2printf@ap+1,f,c
 12720                           
 12721                           ;doprnt.c: 740: if(!cp)
 12722  000A5A  5020               	movf	i2printf@cp,w,c
 12723  000A5C  1021               	iorwf	i2printf@cp+1,w,c
 12724  000A5E  A4D8               	btfss	status,2,c
 12725  000A60  D004               	goto	i2l4588
 12726                           
 12727                           ;doprnt.c: 741: cp = "(null)";
 12728  000A62  0EBD               	movlw	low STR_51
 12729  000A64  6E20               	movwf	i2printf@cp,c
 12730  000A66  0EFF               	movlw	high STR_51
 12731  000A68  6E21               	movwf	i2printf@cp+1,c
 12732  000A6A                     i2l4588:
 12733                           
 12734                           ;doprnt.c: 745: len = 0;
 12735  000A6A  0E00               	movlw	0
 12736  000A6C  6E25               	movwf	i2printf@len+1,c
 12737  000A6E  0E00               	movlw	0
 12738  000A70  6E24               	movwf	i2printf@len,c
 12739                           
 12740                           ;doprnt.c: 746: while(cp[len])
 12741  000A72  D002               	goto	i2l4592
 12742  000A74                     i2l4590:
 12743                           
 12744                           ;doprnt.c: 747: len++;
 12745  000A74  4A24               	infsnz	i2printf@len,f,c
 12746  000A76  2A25               	incf	i2printf@len+1,f,c
 12747  000A78                     i2l4592:
 12748  000A78  5024               	movf	i2printf@len,w,c
 12749  000A7A  2420               	addwf	i2printf@cp,w,c
 12750  000A7C  6E19               	movwf	??i2_printf& (0+255),c
 12751  000A7E  5025               	movf	i2printf@len+1,w,c
 12752  000A80  2021               	addwfc	i2printf@cp+1,w,c
 12753  000A82  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 12754  000A84  C019  FFF6         	movff	??i2_printf,tblptrl
 12755  000A88  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 12756  000A8C  0E00               	movlw	low (__mediumconst shr (0+16))
 12757  000A8E  6EF8               	movwf	tblptru,c
 12758  000A90  0E0F               	movlw	(high __ramtop+-1)
 12759  000A92  64F7               	cpfsgt	tblptrh,c
 12760  000A94  D003               	bra	i2u301_47
 12761  000A96  0008               	tblrd		*
 12762  000A98  50F5               	movf	tablat,w,c
 12763  000A9A  D005               	bra	i2u301_40
 12764  000A9C                     i2u301_47:
 12765  000A9C  CFF6 FFE9          	movff	tblptrl,fsr0l
 12766  000AA0  CFF7 FFEA          	movff	tblptrh,fsr0h
 12767  000AA4  50EF               	movf	indf0,w,c
 12768  000AA6                     i2u301_40:
 12769  000AA6  0900               	iorlw	0
 12770  000AA8  A4D8               	btfss	status,2,c
 12771  000AAA  D7E4               	goto	i2l4590
 12772                           
 12773                           ;doprnt.c: 757: if(width > len)
 12774  000AAC  5028               	movf	i2printf@width,w,c
 12775  000AAE  5C24               	subwf	i2printf@len,w,c
 12776  000AB0  5029               	movf	i2printf@width+1,w,c
 12777  000AB2  5825               	subwfb	i2printf@len+1,w,c
 12778  000AB4  B0D8               	btfsc	status,0,c
 12779  000AB6  D005               	goto	i2l4598
 12780                           
 12781                           ;doprnt.c: 758: width -= len;
 12782  000AB8  5024               	movf	i2printf@len,w,c
 12783  000ABA  5E28               	subwf	i2printf@width,f,c
 12784  000ABC  5025               	movf	i2printf@len+1,w,c
 12785  000ABE  5A29               	subwfb	i2printf@width+1,f,c
 12786  000AC0  D008               	goto	i2l4602
 12787  000AC2                     i2l4598:
 12788                           
 12789                           ;doprnt.c: 759: else
 12790                           ;doprnt.c: 760: width = 0;
 12791  000AC2  0E00               	movlw	0
 12792  000AC4  6E29               	movwf	i2printf@width+1,c
 12793  000AC6  0E00               	movlw	0
 12794  000AC8  6E28               	movwf	i2printf@width,c
 12795                           
 12796                           ;doprnt.c: 764: while(width--)
 12797  000ACA  D003               	goto	i2l4602
 12798  000ACC                     i2l4600:
 12799                           
 12800                           ;doprnt.c: 765: (putch(' ') );
 12801  000ACC  0E20               	movlw	32
 12802  000ACE  EC82  F015         	call	i2_putch
 12803  000AD2                     i2l4602:
 12804  000AD2  0628               	decf	i2printf@width,f,c
 12805  000AD4  A0D8               	btfss	status,0,c
 12806  000AD6  0629               	decf	i2printf@width+1,f,c
 12807  000AD8  2828               	incf	i2printf@width,w,c
 12808  000ADA  E1F8               	bnz	i2l4600
 12809  000ADC  2829               	incf	i2printf@width+1,w,c
 12810  000ADE  B4D8               	btfsc	status,2,c
 12811  000AE0  D016               	goto	i2l4608
 12812  000AE2  D7F4               	goto	i2l4600
 12813  000AE4                     i2l4604:
 12814                           
 12815                           ;doprnt.c: 768: (putch(*cp++) );
 12816  000AE4  C020  FFF6         	movff	i2printf@cp,tblptrl
 12817  000AE8  C021  FFF7         	movff	i2printf@cp+1,tblptrh
 12818  000AEC  0E00               	movlw	low (__mediumconst shr (0+16))
 12819  000AEE  6EF8               	movwf	tblptru,c
 12820  000AF0  0E0F               	movlw	(high __ramtop+-1)
 12821  000AF2  64F7               	cpfsgt	tblptrh,c
 12822  000AF4  D003               	bra	i2u305_47
 12823  000AF6  0008               	tblrd		*
 12824  000AF8  50F5               	movf	tablat,w,c
 12825  000AFA  D005               	bra	i2u305_40
 12826  000AFC                     i2u305_47:
 12827  000AFC  CFF6 FFE9          	movff	tblptrl,fsr0l
 12828  000B00  CFF7 FFEA          	movff	tblptrh,fsr0h
 12829  000B04  50EF               	movf	indf0,w,c
 12830  000B06                     i2u305_40:
 12831  000B06  EC82  F015         	call	i2_putch
 12832  000B0A  4A20               	infsnz	i2printf@cp,f,c
 12833  000B0C  2A21               	incf	i2printf@cp+1,f,c
 12834  000B0E                     i2l4608:
 12835  000B0E  0624               	decf	i2printf@len,f,c
 12836  000B10  A0D8               	btfss	status,0,c
 12837  000B12  0625               	decf	i2printf@len+1,f,c
 12838  000B14  2824               	incf	i2printf@len,w,c
 12839  000B16  E1E6               	bnz	i2l4604
 12840  000B18  2825               	incf	i2printf@len+1,w,c
 12841  000B1A  B4D8               	btfsc	status,2,c
 12842  000B1C  D0C6               	goto	i2l4680
 12843  000B1E  D7E2               	goto	i2l4604
 12844  000B20                     i2l4612:
 12845  000B20  C00D  FFF6         	movff	i2printf@f,tblptrl
 12846  000B24  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12847  000B28  4A0D               	infsnz	i2printf@f,f,c
 12848  000B2A  2A0E               	incf	i2printf@f+1,f,c
 12849  000B2C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12850  000B2C  6AF8               	clrf	tblptru,c
 12851  000B2E                     	endif
 12852  000B2E                     	if	0	;tblptru may be non-zero
 12853  000B2E                     	endif
 12854  000B2E  0008               	tblrd		*
 12855  000B30  CFF5 F027          	movff	tablat,i2printf@c
 12856  000B34  5027               	movf	i2printf@c,w,c
 12857                           
 12858                           ; Switch size 1, requested type "space"
 12859                           ; Number of cases is 4, Range of values is 0 to 115
 12860                           ; switch strategies available:
 12861                           ; Name         Instructions Cycles
 12862                           ; simple_byte           13     7 (average)
 12863                           ;	Chosen strategy is simple_byte
 12864  000B36  0A00               	xorlw	0	; case 0
 12865  000B38  B4D8               	btfsc	status,2,c
 12866  000B3A  0012               	return	
 12867  000B3C  0A64               	xorlw	100	; case 100
 12868  000B3E  B4D8               	btfsc	status,2,c
 12869  000B40  D007               	goto	i2l4614
 12870  000B42  0A0D               	xorlw	13	; case 105
 12871  000B44  B4D8               	btfsc	status,2,c
 12872  000B46  D004               	goto	i2l4614
 12873  000B48  0A1A               	xorlw	26	; case 115
 12874  000B4A  B4D8               	btfsc	status,2,c
 12875  000B4C  D77A               	goto	i2l4580
 12876  000B4E  D0AD               	goto	i2l4680
 12877  000B50                     i2l4614:
 12878                           
 12879                           ;doprnt.c: 1253: {
 12880                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 12881  000B50  C01E  FFD9         	movff	i2printf@ap,fsr2l
 12882  000B54  C01F  FFDA         	movff	i2printf@ap+1,fsr2h
 12883  000B58  CFDE F022          	movff	postinc2,i2printf@val
 12884  000B5C  CFDD F023          	movff	postdec2,i2printf@val+1
 12885  000B60  0E02               	movlw	2
 12886  000B62  261E               	addwf	i2printf@ap,f,c
 12887  000B64  0E00               	movlw	0
 12888  000B66  221F               	addwfc	i2printf@ap+1,f,c
 12889                           
 12890                           ;doprnt.c: 1261: if((int)val < 0) {
 12891  000B68  AE23               	btfss	i2printf@val+1,7,c
 12892  000B6A  D006               	goto	i2l4624
 12893                           
 12894                           ;doprnt.c: 1262: flag |= 0x03;
 12895  000B6C  0E03               	movlw	3
 12896  000B6E  1226               	iorwf	i2printf@flag,f,c
 12897                           
 12898                           ;doprnt.c: 1263: val = -val;
 12899  000B70  6C22               	negf	i2printf@val,c
 12900  000B72  1E23               	comf	i2printf@val+1,f,c
 12901  000B74  B0D8               	btfsc	status,0,c
 12902  000B76  2A23               	incf	i2printf@val+1,f,c
 12903  000B78                     i2l4624:
 12904                           
 12905                           ;doprnt.c: 1264: }
 12906                           ;doprnt.c: 1266: }
 12907                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 12908  000B78  0E01               	movlw	1
 12909  000B7A  6E27               	movwf	i2printf@c,c
 12910  000B7C                     i2l4626:
 12911  000B7C  0E05               	movlw	5
 12912  000B7E  1827               	xorwf	i2printf@c,w,c
 12913  000B80  B4D8               	btfsc	status,2,c
 12914  000B82  D015               	goto	i2l4638
 12915                           
 12916                           ;doprnt.c: 1306: if(val < dpowers[c])
 12917  000B84  5027               	movf	i2printf@c,w,c
 12918  000B86  0D02               	mullw	2
 12919  000B88  0EC6               	movlw	low _dpowers
 12920  000B8A  24F3               	addwf	prodl,w,c
 12921  000B8C  6EF6               	movwf	tblptrl,c
 12922  000B8E  0EFD               	movlw	high _dpowers
 12923  000B90  20F4               	addwfc	prodh,w,c
 12924  000B92  6EF7               	movwf	tblptrh,c
 12925  000B94                     	if	1	;There are 3 active tblptr bytes
 12926  000B94  6AF8               	clrf	tblptru,c
 12927  000B96  0E00               	movlw	low (__mediumconst shr (0+16))
 12928  000B98  22F8               	addwfc	tblptru,f,c
 12929  000B9A                     	endif
 12930  000B9A  0009               	tblrd		*+
 12931  000B9C  50F5               	movf	tablat,w,c
 12932  000B9E  5C22               	subwf	i2printf@val,w,c
 12933  000BA0  0009               	tblrd		*+
 12934  000BA2  50F5               	movf	tablat,w,c
 12935  000BA4  5823               	subwfb	i2printf@val+1,w,c
 12936  000BA6  A0D8               	btfss	status,0,c
 12937  000BA8  D002               	goto	i2l4638
 12938                           
 12939                           ;doprnt.c: 1307: break;
 12940  000BAA  2A27               	incf	i2printf@c,f,c
 12941  000BAC  D7E7               	goto	i2l4626
 12942  000BAE                     i2l4638:
 12943                           
 12944                           ;doprnt.c: 1345: if(width && flag & 0x03)
 12945  000BAE  5028               	movf	i2printf@width,w,c
 12946  000BB0  1029               	iorwf	i2printf@width+1,w,c
 12947  000BB2  B4D8               	btfsc	status,2,c
 12948  000BB4  D009               	goto	i2l4644
 12949  000BB6  C026  F019         	movff	i2printf@flag,??i2_printf
 12950  000BBA  0E03               	movlw	3
 12951  000BBC  1619               	andwf	??i2_printf,f,c
 12952  000BBE  B4D8               	btfsc	status,2,c
 12953  000BC0  D003               	goto	i2l4644
 12954                           
 12955                           ;doprnt.c: 1346: width--;
 12956  000BC2  0628               	decf	i2printf@width,f,c
 12957  000BC4  A0D8               	btfss	status,0,c
 12958  000BC6  0629               	decf	i2printf@width+1,f,c
 12959  000BC8                     i2l4644:
 12960                           
 12961                           ;doprnt.c: 1381: if(width > c)
 12962  000BC8  0E80               	movlw	128
 12963  000BCA  BE27               	btfsc	i2printf@c,7,c
 12964  000BCC  0E7F               	movlw	127
 12965  000BCE  6E19               	movwf	??i2_printf& (0+255),c
 12966  000BD0  5028               	movf	i2printf@width,w,c
 12967  000BD2  5C27               	subwf	i2printf@c,w,c
 12968  000BD4  5029               	movf	i2printf@width+1,w,c
 12969  000BD6  0A80               	xorlw	128
 12970  000BD8  5819               	subwfb	??i2_printf& (0+255),w,c
 12971  000BDA  B0D8               	btfsc	status,0,c
 12972  000BDC  D007               	goto	i2l4648
 12973                           
 12974                           ;doprnt.c: 1382: width -= c;
 12975  000BDE  5027               	movf	i2printf@c,w,c
 12976  000BE0  5E28               	subwf	i2printf@width,f,c
 12977  000BE2  0E00               	movlw	0
 12978  000BE4  BE27               	btfsc	i2printf@c,7,c
 12979  000BE6  0EFF               	movlw	255
 12980  000BE8  5A29               	subwfb	i2printf@width+1,f,c
 12981  000BEA  D004               	goto	i2l4650
 12982  000BEC                     i2l4648:
 12983                           
 12984                           ;doprnt.c: 1383: else
 12985                           ;doprnt.c: 1384: width = 0;
 12986  000BEC  0E00               	movlw	0
 12987  000BEE  6E29               	movwf	i2printf@width+1,c
 12988  000BF0  0E00               	movlw	0
 12989  000BF2  6E28               	movwf	i2printf@width,c
 12990  000BF4                     i2l4650:
 12991                           
 12992                           ;doprnt.c: 1387: if(flag & 0x04) {
 12993  000BF4  A426               	btfss	i2printf@flag,2,c
 12994  000BF6  D014               	goto	i2l4662
 12995                           
 12996                           ;doprnt.c: 1392: if(flag & 0x03)
 12997  000BF8  C026  F019         	movff	i2printf@flag,??i2_printf
 12998  000BFC  0E03               	movlw	3
 12999  000BFE  1619               	andwf	??i2_printf,f,c
 13000  000C00  B4D8               	btfsc	status,2,c
 13001  000C02  D003               	goto	i2l4656
 13002                           
 13003                           ;doprnt.c: 1393: (putch('-') );
 13004  000C04  0E2D               	movlw	45
 13005  000C06  EC82  F015         	call	i2_putch
 13006  000C0A                     i2l4656:
 13007                           
 13008                           ;doprnt.c: 1415: if(width)
 13009  000C0A  5028               	movf	i2printf@width,w,c
 13010  000C0C  1029               	iorwf	i2printf@width+1,w,c
 13011  000C0E  B4D8               	btfsc	status,2,c
 13012  000C10  D01E               	goto	i2l4672
 13013                           
 13014                           ;doprnt.c: 1417: (putch('0') );
 13015                           
 13016                           ;doprnt.c: 1416: do
 13017  000C12  0E30               	movlw	48
 13018  000C14  EC82  F015         	call	i2_putch
 13019                           
 13020                           ;doprnt.c: 1418: while(--width);
 13021  000C18  0628               	decf	i2printf@width,f,c
 13022  000C1A  A0D8               	btfss	status,0,c
 13023  000C1C  0629               	decf	i2printf@width+1,f,c
 13024  000C1E  D7F5               	goto	i2l4656
 13025  000C20                     i2l4662:
 13026                           
 13027                           ;doprnt.c: 1422: {
 13028                           ;doprnt.c: 1424: if(width
 13029                           ;doprnt.c: 1428: )
 13030  000C20  5028               	movf	i2printf@width,w,c
 13031  000C22  1029               	iorwf	i2printf@width+1,w,c
 13032  000C24  B4D8               	btfsc	status,2,c
 13033  000C26  D00A               	goto	i2l4668
 13034  000C28                     i2l4664:
 13035                           
 13036                           ;doprnt.c: 1430: (putch(' ') );
 13037  000C28  0E20               	movlw	32
 13038  000C2A  EC82  F015         	call	i2_putch
 13039                           
 13040                           ;doprnt.c: 1431: while(--width);
 13041  000C2E  0628               	decf	i2printf@width,f,c
 13042  000C30  A0D8               	btfss	status,0,c
 13043  000C32  0629               	decf	i2printf@width+1,f,c
 13044  000C34  5028               	movf	i2printf@width,w,c
 13045  000C36  1029               	iorwf	i2printf@width+1,w,c
 13046  000C38  A4D8               	btfss	status,2,c
 13047  000C3A  D7F6               	goto	i2l4664
 13048  000C3C                     i2l4668:
 13049                           
 13050                           ;doprnt.c: 1438: if(flag & 0x03)
 13051  000C3C  C026  F019         	movff	i2printf@flag,??i2_printf
 13052  000C40  0E03               	movlw	3
 13053  000C42  1619               	andwf	??i2_printf,f,c
 13054  000C44  B4D8               	btfsc	status,2,c
 13055  000C46  D003               	goto	i2l4672
 13056                           
 13057                           ;doprnt.c: 1439: (putch('-') );
 13058  000C48  0E2D               	movlw	45
 13059  000C4A  EC82  F015         	call	i2_putch
 13060  000C4E                     i2l4672:
 13061                           
 13062                           ;doprnt.c: 1469: }
 13063                           ;doprnt.c: 1472: prec = c;
 13064  000C4E  C027  F01D         	movff	i2printf@c,i2printf@prec
 13065                           
 13066                           ;doprnt.c: 1474: while(prec--) {
 13067  000C52  D027               	goto	i2l4678
 13068  000C54                     i2l4674:
 13069                           
 13070                           ;doprnt.c: 1478: {
 13071                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 13072  000C54  501D               	movf	i2printf@prec,w,c
 13073  000C56  0D02               	mullw	2
 13074  000C58  0EC6               	movlw	low _dpowers
 13075  000C5A  24F3               	addwf	prodl,w,c
 13076  000C5C  6EF6               	movwf	tblptrl,c
 13077  000C5E  0EFD               	movlw	high _dpowers
 13078  000C60  20F4               	addwfc	prodh,w,c
 13079  000C62  6EF7               	movwf	tblptrh,c
 13080  000C64                     	if	1	;There are 3 active tblptr bytes
 13081  000C64  6AF8               	clrf	tblptru,c
 13082  000C66  0E00               	movlw	low (__mediumconst shr (0+16))
 13083  000C68  22F8               	addwfc	tblptru,f,c
 13084  000C6A                     	endif
 13085  000C6A  0009               	tblrd		*+
 13086  000C6C  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 13087  000C70  000A               	tblrd		*-
 13088  000C72  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 13089  000C76  C022  F006         	movff	i2printf@val,i2___lwdiv@dividend
 13090  000C7A  C023  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 13091  000C7E  EC37  F012         	call	i2___lwdiv	;wreg free
 13092  000C82  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 13093  000C86  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 13094  000C8A  0E00               	movlw	0
 13095  000C8C  6E04               	movwf	i2___lwmod@divisor+1,c
 13096  000C8E  0E0A               	movlw	10
 13097  000C90  6E03               	movwf	i2___lwmod@divisor,c
 13098  000C92  ECA4  F012         	call	i2___lwmod	;wreg free
 13099  000C96  5001               	movf	?i2___lwmod,w,c
 13100  000C98  0F30               	addlw	48
 13101  000C9A  6E27               	movwf	i2printf@c,c
 13102                           
 13103                           ;doprnt.c: 1523: }
 13104                           ;doprnt.c: 1524: (putch(c) );
 13105  000C9C  5027               	movf	i2printf@c,w,c
 13106  000C9E  EC82  F015         	call	i2_putch
 13107  000CA2                     i2l4678:
 13108  000CA2  061D               	decf	i2printf@prec,f,c
 13109  000CA4  281D               	incf	i2printf@prec,w,c
 13110  000CA6  A4D8               	btfss	status,2,c
 13111  000CA8  D7D5               	goto	i2l4674
 13112  000CAA                     i2l4680:
 13113  000CAA  C00D  FFF6         	movff	i2printf@f,tblptrl
 13114  000CAE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 13115  000CB2  4A0D               	infsnz	i2printf@f,f,c
 13116  000CB4  2A0E               	incf	i2printf@f+1,f,c
 13117  000CB6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13118  000CB6  6AF8               	clrf	tblptru,c
 13119  000CB8                     	endif
 13120  000CB8                     	if	0	;tblptru may be non-zero
 13121  000CB8                     	endif
 13122  000CB8  0008               	tblrd		*
 13123  000CBA  CFF5 F027          	movff	tablat,i2printf@c
 13124  000CBE  5027               	movf	i2printf@c,w,c
 13125  000CC0  B4D8               	btfsc	status,2,c
 13126  000CC2  0012               	return	
 13127  000CC4  D662               	goto	i2l4556
 13128  000CC6                     __end_ofi2_printf:
 13129                           	opt stack 0
 13130                           pclatu	equ	0xFFB
 13131                           pclath	equ	0xFFA
 13132                           tblptru	equ	0xFF8
 13133                           tblptrh	equ	0xFF7
 13134                           tblptrl	equ	0xFF6
 13135                           tablat	equ	0xFF5
 13136                           prodh	equ	0xFF4
 13137                           prodl	equ	0xFF3
 13138                           intcon	equ	0xFF2
 13139                           intcon2	equ	0xFF1
 13140                           intcon3	equ	0xFF0
 13141                           indf0	equ	0xFEF
 13142                           postinc0	equ	0xFEE
 13143                           fsr0h	equ	0xFEA
 13144                           fsr0l	equ	0xFE9
 13145                           wreg	equ	0xFE8
 13146                           postdec1	equ	0xFE5
 13147                           fsr1h	equ	0xFE2
 13148                           fsr1l	equ	0xFE1
 13149                           indf2	equ	0xFDF
 13150                           postinc2	equ	0xFDE
 13151                           postdec2	equ	0xFDD
 13152                           fsr2h	equ	0xFDA
 13153                           fsr2l	equ	0xFD9
 13154                           status	equ	0xFD8
 13155                           
 13156 ;; *************** function i2_putch *****************
 13157 ;; Defined at:
 13158 ;;		line 19 in file "lcd.c"
 13159 ;; Parameters:    Size  Location     Type
 13160 ;;  data            1    wreg     unsigned char 
 13161 ;; Auto vars:     Size  Location     Type
 13162 ;;  data            1    2[COMRAM] unsigned char 
 13163 ;; Return value:  Size  Location     Type
 13164 ;;                  1    wreg      void 
 13165 ;; Registers used:
 13166 ;;		wreg, status,2, status,0, cstack
 13167 ;; Tracked objects:
 13168 ;;		On entry : 0/0
 13169 ;;		On exit  : 0/0
 13170 ;;		Unchanged: 0/0
 13171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13173 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13175 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13176 ;;Total ram usage:        1 bytes
 13177 ;; Hardware stack levels used:    1
 13178 ;; Hardware stack levels required when called:    1
 13179 ;; This function calls:
 13180 ;;		i2_lcdNibble
 13181 ;; This function is called by:
 13182 ;;		i2_printf
 13183 ;; This function uses a non-reentrant model
 13184 ;;
 13185                           
 13186                           	psect	text63
 13187  002B04                     __ptext63:
 13188                           	opt stack 0
 13189  002B04                     i2_putch:
 13190                           	opt stack 19
 13191                           
 13192                           ;incstack = 0
 13193                           ;i2putch@data stored from wreg
 13194  002B04  6E03               	movwf	i2putch@data,c
 13195                           
 13196                           ;lcd.c: 20: LATDbits.LATD2 = 1;
 13197  002B06  848C               	bsf	3980,2,c	;volatile
 13198                           
 13199                           ;lcd.c: 21: lcdNibble(data);
 13200  002B08  5003               	movf	i2putch@data,w,c
 13201  002B0A  EC0C  F012         	call	i2_lcdNibble
 13202  002B0E  0012               	return		;funcret
 13203  002B10                     __end_ofi2_putch:
 13204                           	opt stack 0
 13205                           pclatu	equ	0xFFB
 13206                           pclath	equ	0xFFA
 13207                           tblptru	equ	0xFF8
 13208                           tblptrh	equ	0xFF7
 13209                           tblptrl	equ	0xFF6
 13210                           tablat	equ	0xFF5
 13211                           prodh	equ	0xFF4
 13212                           prodl	equ	0xFF3
 13213                           intcon	equ	0xFF2
 13214                           intcon2	equ	0xFF1
 13215                           intcon3	equ	0xFF0
 13216                           indf0	equ	0xFEF
 13217                           postinc0	equ	0xFEE
 13218                           fsr0h	equ	0xFEA
 13219                           fsr0l	equ	0xFE9
 13220                           wreg	equ	0xFE8
 13221                           postdec1	equ	0xFE5
 13222                           fsr1h	equ	0xFE2
 13223                           fsr1l	equ	0xFE1
 13224                           indf2	equ	0xFDF
 13225                           postinc2	equ	0xFDE
 13226                           postdec2	equ	0xFDD
 13227                           fsr2h	equ	0xFDA
 13228                           fsr2l	equ	0xFD9
 13229                           status	equ	0xFD8
 13230                           
 13231 ;; *************** function i2_isdigit *****************
 13232 ;; Defined at:
 13233 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 13234 ;; Parameters:    Size  Location     Type
 13235 ;;  c               1    wreg     unsigned char 
 13236 ;; Auto vars:     Size  Location     Type
 13237 ;;  c               1    2[COMRAM] unsigned char 
 13238 ;; Return value:  Size  Location     Type
 13239 ;;		None               void
 13240 ;; Registers used:
 13241 ;;		wreg, status,2, status,0
 13242 ;; Tracked objects:
 13243 ;;		On entry : 0/0
 13244 ;;		On exit  : 0/0
 13245 ;;		Unchanged: 0/0
 13246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13248 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13249 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13250 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13251 ;;Total ram usage:        3 bytes
 13252 ;; Hardware stack levels used:    1
 13253 ;; This function calls:
 13254 ;;		Nothing
 13255 ;; This function is called by:
 13256 ;;		i2_printf
 13257 ;; This function uses a non-reentrant model
 13258 ;;
 13259                           
 13260                           	psect	text64
 13261  002A4A                     __ptext64:
 13262                           	opt stack 0
 13263  002A4A                     i2_isdigit:
 13264                           	opt stack 20
 13265                           
 13266                           ;incstack = 0
 13267                           ;i2isdigit@c stored from wreg
 13268  002A4A  6E03               	movwf	i2isdigit@c,c
 13269  002A4C  0E00               	movlw	0
 13270  002A4E  6E02               	movwf	i2_isdigit$1809,c
 13271  002A50  0E3A               	movlw	58
 13272  002A52  6003               	cpfslt	i2isdigit@c,c
 13273  002A54  D005               	goto	i2l4310
 13274  002A56  0E2F               	movlw	47
 13275  002A58  6403               	cpfsgt	i2isdigit@c,c
 13276  002A5A  D002               	goto	i2l4310
 13277  002A5C  0E01               	movlw	1
 13278  002A5E  6E02               	movwf	i2_isdigit$1809,c
 13279  002A60                     i2l4310:
 13280  002A60  C002  F001         	movff	i2_isdigit$1809,??i2_isdigit
 13281  002A64  3001               	rrcf	??i2_isdigit,w,c
 13282  002A66  0012               	return	
 13283  002A68                     __end_ofi2_isdigit:
 13284                           	opt stack 0
 13285                           pclatu	equ	0xFFB
 13286                           pclath	equ	0xFFA
 13287                           tblptru	equ	0xFF8
 13288                           tblptrh	equ	0xFF7
 13289                           tblptrl	equ	0xFF6
 13290                           tablat	equ	0xFF5
 13291                           prodh	equ	0xFF4
 13292                           prodl	equ	0xFF3
 13293                           intcon	equ	0xFF2
 13294                           intcon2	equ	0xFF1
 13295                           intcon3	equ	0xFF0
 13296                           indf0	equ	0xFEF
 13297                           postinc0	equ	0xFEE
 13298                           fsr0h	equ	0xFEA
 13299                           fsr0l	equ	0xFE9
 13300                           wreg	equ	0xFE8
 13301                           postdec1	equ	0xFE5
 13302                           fsr1h	equ	0xFE2
 13303                           fsr1l	equ	0xFE1
 13304                           indf2	equ	0xFDF
 13305                           postinc2	equ	0xFDE
 13306                           postdec2	equ	0xFDD
 13307                           fsr2h	equ	0xFDA
 13308                           fsr2l	equ	0xFD9
 13309                           status	equ	0xFD8
 13310                           
 13311 ;; *************** function i2___wmul *****************
 13312 ;; Defined at:
 13313 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 13314 ;; Parameters:    Size  Location     Type
 13315 ;;  multiplier      2    0[COMRAM] unsigned int 
 13316 ;;  multiplicand    2    2[COMRAM] unsigned int 
 13317 ;; Auto vars:     Size  Location     Type
 13318 ;;  __wmul          2    4[COMRAM] unsigned int 
 13319 ;; Return value:  Size  Location     Type
 13320 ;;                  2    0[COMRAM] unsigned int 
 13321 ;; Registers used:
 13322 ;;		wreg, status,2, status,0, prodl, prodh
 13323 ;; Tracked objects:
 13324 ;;		On entry : 0/0
 13325 ;;		On exit  : 0/0
 13326 ;;		Unchanged: 0/0
 13327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13328 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13329 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13331 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13332 ;;Total ram usage:        6 bytes
 13333 ;; Hardware stack levels used:    1
 13334 ;; This function calls:
 13335 ;;		Nothing
 13336 ;; This function is called by:
 13337 ;;		_printSortTimer
 13338 ;;		i2_printf
 13339 ;; This function uses a non-reentrant model
 13340 ;;
 13341                           
 13342                           	psect	text65
 13343  0029BA                     __ptext65:
 13344                           	opt stack 0
 13345  0029BA                     i2___wmul:
 13346                           	opt stack 20
 13347                           
 13348                           ;incstack = 0
 13349  0029BA  5001               	movf	i2___wmul@multiplier,w,c
 13350  0029BC  0203               	mulwf	i2___wmul@multiplicand,c
 13351  0029BE  CFF3 F005          	movff	prodl,i2___wmul@product
 13352  0029C2  CFF4 F006          	movff	prodh,i2___wmul@product+1
 13353  0029C6  5001               	movf	i2___wmul@multiplier,w,c
 13354  0029C8  0204               	mulwf	i2___wmul@multiplicand+1,c
 13355  0029CA  50F3               	movf	prodl,w,c
 13356  0029CC  2606               	addwf	i2___wmul@product+1,f,c
 13357  0029CE  5002               	movf	i2___wmul@multiplier+1,w,c
 13358  0029D0  0203               	mulwf	i2___wmul@multiplicand,c
 13359  0029D2  50F3               	movf	prodl,w,c
 13360  0029D4  2606               	addwf	i2___wmul@product+1,f,c
 13361  0029D6  C005  F001         	movff	i2___wmul@product,?i2___wmul
 13362  0029DA  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 13363  0029DE  0012               	return	
 13364  0029E0                     __end_ofi2___wmul:
 13365                           	opt stack 0
 13366                           pclatu	equ	0xFFB
 13367                           pclath	equ	0xFFA
 13368                           tblptru	equ	0xFF8
 13369                           tblptrh	equ	0xFF7
 13370                           tblptrl	equ	0xFF6
 13371                           tablat	equ	0xFF5
 13372                           prodh	equ	0xFF4
 13373                           prodl	equ	0xFF3
 13374                           intcon	equ	0xFF2
 13375                           intcon2	equ	0xFF1
 13376                           intcon3	equ	0xFF0
 13377                           indf0	equ	0xFEF
 13378                           postinc0	equ	0xFEE
 13379                           fsr0h	equ	0xFEA
 13380                           fsr0l	equ	0xFE9
 13381                           wreg	equ	0xFE8
 13382                           postdec1	equ	0xFE5
 13383                           fsr1h	equ	0xFE2
 13384                           fsr1l	equ	0xFE1
 13385                           indf2	equ	0xFDF
 13386                           postinc2	equ	0xFDE
 13387                           postdec2	equ	0xFDD
 13388                           fsr2h	equ	0xFDA
 13389                           fsr2l	equ	0xFD9
 13390                           status	equ	0xFD8
 13391                           
 13392 ;; *************** function i2___lwmod *****************
 13393 ;; Defined at:
 13394 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 13395 ;; Parameters:    Size  Location     Type
 13396 ;;  dividend        2    0[COMRAM] unsigned int 
 13397 ;;  divisor         2    2[COMRAM] unsigned int 
 13398 ;; Auto vars:     Size  Location     Type
 13399 ;;  __lwmod         1    4[COMRAM] unsigned char 
 13400 ;; Return value:  Size  Location     Type
 13401 ;;                  2    0[COMRAM] unsigned int 
 13402 ;; Registers used:
 13403 ;;		wreg, status,2, status,0
 13404 ;; Tracked objects:
 13405 ;;		On entry : 0/0
 13406 ;;		On exit  : 0/0
 13407 ;;		Unchanged: 0/0
 13408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13409 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13410 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13412 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13413 ;;Total ram usage:        5 bytes
 13414 ;; Hardware stack levels used:    1
 13415 ;; This function calls:
 13416 ;;		Nothing
 13417 ;; This function is called by:
 13418 ;;		_printSortTimer
 13419 ;;		i2_printf
 13420 ;; This function uses a non-reentrant model
 13421 ;;
 13422                           
 13423                           	psect	text66
 13424  002548                     __ptext66:
 13425                           	opt stack 0
 13426  002548                     i2___lwmod:
 13427                           	opt stack 20
 13428                           
 13429                           ;incstack = 0
 13430  002548  5003               	movf	i2___lwmod@divisor,w,c
 13431  00254A  1004               	iorwf	i2___lwmod@divisor+1,w,c
 13432  00254C  B4D8               	btfsc	status,2,c
 13433  00254E  D018               	goto	i2l1893
 13434  002550  0E01               	movlw	1
 13435  002552  6E05               	movwf	i2___lwmod@counter,c
 13436  002554  D004               	goto	i2l4342
 13437  002556                     i2l4340:
 13438  002556  90D8               	bcf	status,0,c
 13439  002558  3603               	rlcf	i2___lwmod@divisor,f,c
 13440  00255A  3604               	rlcf	i2___lwmod@divisor+1,f,c
 13441  00255C  2A05               	incf	i2___lwmod@counter,f,c
 13442  00255E                     i2l4342:
 13443  00255E  AE04               	btfss	i2___lwmod@divisor+1,7,c
 13444  002560  D7FA               	goto	i2l4340
 13445  002562                     i2l4344:
 13446  002562  5003               	movf	i2___lwmod@divisor,w,c
 13447  002564  5C01               	subwf	i2___lwmod@dividend,w,c
 13448  002566  5004               	movf	i2___lwmod@divisor+1,w,c
 13449  002568  5802               	subwfb	i2___lwmod@dividend+1,w,c
 13450  00256A  A0D8               	btfss	status,0,c
 13451  00256C  D004               	goto	i2l4348
 13452  00256E  5003               	movf	i2___lwmod@divisor,w,c
 13453  002570  5E01               	subwf	i2___lwmod@dividend,f,c
 13454  002572  5004               	movf	i2___lwmod@divisor+1,w,c
 13455  002574  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 13456  002576                     i2l4348:
 13457  002576  90D8               	bcf	status,0,c
 13458  002578  3204               	rrcf	i2___lwmod@divisor+1,f,c
 13459  00257A  3203               	rrcf	i2___lwmod@divisor,f,c
 13460  00257C  2E05               	decfsz	i2___lwmod@counter,f,c
 13461  00257E  D7F1               	goto	i2l4344
 13462  002580                     i2l1893:
 13463  002580  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 13464  002584  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 13465  002588  0012               	return		;funcret
 13466  00258A                     __end_ofi2___lwmod:
 13467                           	opt stack 0
 13468                           pclatu	equ	0xFFB
 13469                           pclath	equ	0xFFA
 13470                           tblptru	equ	0xFF8
 13471                           tblptrh	equ	0xFF7
 13472                           tblptrl	equ	0xFF6
 13473                           tablat	equ	0xFF5
 13474                           prodh	equ	0xFF4
 13475                           prodl	equ	0xFF3
 13476                           intcon	equ	0xFF2
 13477                           intcon2	equ	0xFF1
 13478                           intcon3	equ	0xFF0
 13479                           indf0	equ	0xFEF
 13480                           postinc0	equ	0xFEE
 13481                           fsr0h	equ	0xFEA
 13482                           fsr0l	equ	0xFE9
 13483                           wreg	equ	0xFE8
 13484                           postdec1	equ	0xFE5
 13485                           fsr1h	equ	0xFE2
 13486                           fsr1l	equ	0xFE1
 13487                           indf2	equ	0xFDF
 13488                           postinc2	equ	0xFDE
 13489                           postdec2	equ	0xFDD
 13490                           fsr2h	equ	0xFDA
 13491                           fsr2l	equ	0xFD9
 13492                           status	equ	0xFD8
 13493                           
 13494 ;; *************** function i2___lwdiv *****************
 13495 ;; Defined at:
 13496 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 13497 ;; Parameters:    Size  Location     Type
 13498 ;;  dividend        2    5[COMRAM] unsigned int 
 13499 ;;  divisor         2    7[COMRAM] unsigned int 
 13500 ;; Auto vars:     Size  Location     Type
 13501 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 13502 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 13503 ;; Return value:  Size  Location     Type
 13504 ;;                  2    5[COMRAM] unsigned int 
 13505 ;; Registers used:
 13506 ;;		wreg, status,2, status,0
 13507 ;; Tracked objects:
 13508 ;;		On entry : 0/0
 13509 ;;		On exit  : 0/0
 13510 ;;		Unchanged: 0/0
 13511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13512 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13513 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13515 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13516 ;;Total ram usage:        7 bytes
 13517 ;; Hardware stack levels used:    1
 13518 ;; This function calls:
 13519 ;;		Nothing
 13520 ;; This function is called by:
 13521 ;;		_printSortTimer
 13522 ;;		i2_printf
 13523 ;; This function uses a non-reentrant model
 13524 ;;
 13525                           
 13526                           	psect	text67
 13527  00246E                     __ptext67:
 13528                           	opt stack 0
 13529  00246E                     i2___lwdiv:
 13530                           	opt stack 20
 13531                           
 13532                           ;incstack = 0
 13533  00246E  0E00               	movlw	0
 13534  002470  6E0B               	movwf	i2___lwdiv@quotient+1,c
 13535  002472  0E00               	movlw	0
 13536  002474  6E0A               	movwf	i2___lwdiv@quotient,c
 13537  002476  5008               	movf	i2___lwdiv@divisor,w,c
 13538  002478  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 13539  00247A  B4D8               	btfsc	status,2,c
 13540  00247C  D01C               	goto	i2l1883
 13541  00247E  0E01               	movlw	1
 13542  002480  6E0C               	movwf	i2___lwdiv@counter,c
 13543  002482  D004               	goto	i2l4322
 13544  002484                     i2l4320:
 13545  002484  90D8               	bcf	status,0,c
 13546  002486  3608               	rlcf	i2___lwdiv@divisor,f,c
 13547  002488  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 13548  00248A  2A0C               	incf	i2___lwdiv@counter,f,c
 13549  00248C                     i2l4322:
 13550  00248C  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 13551  00248E  D7FA               	goto	i2l4320
 13552  002490                     i2l4324:
 13553  002490  90D8               	bcf	status,0,c
 13554  002492  360A               	rlcf	i2___lwdiv@quotient,f,c
 13555  002494  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 13556  002496  5008               	movf	i2___lwdiv@divisor,w,c
 13557  002498  5C06               	subwf	i2___lwdiv@dividend,w,c
 13558  00249A  5009               	movf	i2___lwdiv@divisor+1,w,c
 13559  00249C  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 13560  00249E  A0D8               	btfss	status,0,c
 13561  0024A0  D005               	goto	i2l4332
 13562  0024A2  5008               	movf	i2___lwdiv@divisor,w,c
 13563  0024A4  5E06               	subwf	i2___lwdiv@dividend,f,c
 13564  0024A6  5009               	movf	i2___lwdiv@divisor+1,w,c
 13565  0024A8  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 13566  0024AA  800A               	bsf	i2___lwdiv@quotient,0,c
 13567  0024AC                     i2l4332:
 13568  0024AC  90D8               	bcf	status,0,c
 13569  0024AE  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 13570  0024B0  3208               	rrcf	i2___lwdiv@divisor,f,c
 13571  0024B2  2E0C               	decfsz	i2___lwdiv@counter,f,c
 13572  0024B4  D7ED               	goto	i2l4324
 13573  0024B6                     i2l1883:
 13574  0024B6  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 13575  0024BA  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 13576  0024BE  0012               	return		;funcret
 13577  0024C0                     __end_ofi2___lwdiv:
 13578                           	opt stack 0
 13579                           pclatu	equ	0xFFB
 13580                           pclath	equ	0xFFA
 13581                           tblptru	equ	0xFF8
 13582                           tblptrh	equ	0xFF7
 13583                           tblptrl	equ	0xFF6
 13584                           tablat	equ	0xFF5
 13585                           prodh	equ	0xFF4
 13586                           prodl	equ	0xFF3
 13587                           intcon	equ	0xFF2
 13588                           intcon2	equ	0xFF1
 13589                           intcon3	equ	0xFF0
 13590                           indf0	equ	0xFEF
 13591                           postinc0	equ	0xFEE
 13592                           fsr0h	equ	0xFEA
 13593                           fsr0l	equ	0xFE9
 13594                           wreg	equ	0xFE8
 13595                           postdec1	equ	0xFE5
 13596                           fsr1h	equ	0xFE2
 13597                           fsr1l	equ	0xFE1
 13598                           indf2	equ	0xFDF
 13599                           postinc2	equ	0xFDE
 13600                           postdec2	equ	0xFDD
 13601                           fsr2h	equ	0xFDA
 13602                           fsr2l	equ	0xFD9
 13603                           status	equ	0xFD8
 13604                           
 13605 ;; *************** function i2_lcdInst *****************
 13606 ;; Defined at:
 13607 ;;		line 14 in file "lcd.c"
 13608 ;; Parameters:    Size  Location     Type
 13609 ;;  data            1    wreg     unsigned char 
 13610 ;; Auto vars:     Size  Location     Type
 13611 ;;  data            1    2[COMRAM] unsigned char 
 13612 ;; Return value:  Size  Location     Type
 13613 ;;                  1    wreg      void 
 13614 ;; Registers used:
 13615 ;;		wreg, status,2, status,0, cstack
 13616 ;; Tracked objects:
 13617 ;;		On entry : 0/0
 13618 ;;		On exit  : 0/0
 13619 ;;		Unchanged: 0/0
 13620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13622 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13624 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13625 ;;Total ram usage:        1 bytes
 13626 ;; Hardware stack levels used:    1
 13627 ;; Hardware stack levels required when called:    1
 13628 ;; This function calls:
 13629 ;;		i2_lcdNibble
 13630 ;; This function is called by:
 13631 ;;		_change_state_to_menu_11
 13632 ;;		_change_state_to_menu_23
 13633 ;;		_change_state_to_logs_11
 13634 ;;		_change_state_to_logs_12
 13635 ;;		_change_state_to_logs_22
 13636 ;;		_change_state_to_logs_23
 13637 ;;		_change_state_to_logs_33
 13638 ;;		_change_state_to_logs_34
 13639 ;;		_printSortTimer
 13640 ;;		i2_change_state_to_menu_start
 13641 ;;		i2_change_state_to_menu_12
 13642 ;;		i2_change_state_to_menu_22
 13643 ;;		i2_printRTC
 13644 ;; This function uses a non-reentrant model
 13645 ;;
 13646                           
 13647                           	psect	text68
 13648  002B10                     __ptext68:
 13649                           	opt stack 0
 13650  002B10                     i2_lcdInst:
 13651                           	opt stack 19
 13652                           
 13653                           ;incstack = 0
 13654                           ;i2lcdInst@data stored from wreg
 13655  002B10  6E03               	movwf	i2lcdInst@data,c
 13656                           
 13657                           ;lcd.c: 15: LATDbits.LATD2 = 0;
 13658  002B12  948C               	bcf	3980,2,c	;volatile
 13659                           
 13660                           ;lcd.c: 16: lcdNibble(data);
 13661  002B14  5003               	movf	i2lcdInst@data,w,c
 13662  002B16  EC0C  F012         	call	i2_lcdNibble
 13663  002B1A  0012               	return		;funcret
 13664  002B1C                     __end_ofi2_lcdInst:
 13665                           	opt stack 0
 13666                           pclatu	equ	0xFFB
 13667                           pclath	equ	0xFFA
 13668                           tblptru	equ	0xFF8
 13669                           tblptrh	equ	0xFF7
 13670                           tblptrl	equ	0xFF6
 13671                           tablat	equ	0xFF5
 13672                           prodh	equ	0xFF4
 13673                           prodl	equ	0xFF3
 13674                           intcon	equ	0xFF2
 13675                           intcon2	equ	0xFF1
 13676                           intcon3	equ	0xFF0
 13677                           indf0	equ	0xFEF
 13678                           postinc0	equ	0xFEE
 13679                           fsr0h	equ	0xFEA
 13680                           fsr0l	equ	0xFE9
 13681                           wreg	equ	0xFE8
 13682                           postdec1	equ	0xFE5
 13683                           fsr1h	equ	0xFE2
 13684                           fsr1l	equ	0xFE1
 13685                           indf2	equ	0xFDF
 13686                           postinc2	equ	0xFDE
 13687                           postdec2	equ	0xFDD
 13688                           fsr2h	equ	0xFDA
 13689                           fsr2l	equ	0xFD9
 13690                           status	equ	0xFD8
 13691                           
 13692 ;; *************** function i2_lcdNibble *****************
 13693 ;; Defined at:
 13694 ;;		line 24 in file "lcd.c"
 13695 ;; Parameters:    Size  Location     Type
 13696 ;;  data            1    wreg     unsigned char 
 13697 ;; Auto vars:     Size  Location     Type
 13698 ;;  data            1    1[COMRAM] unsigned char 
 13699 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 13700 ;; Return value:  Size  Location     Type
 13701 ;;                  1    wreg      void 
 13702 ;; Registers used:
 13703 ;;		wreg, status,2, status,0
 13704 ;; Tracked objects:
 13705 ;;		On entry : 0/0
 13706 ;;		On exit  : 0/0
 13707 ;;		Unchanged: 0/0
 13708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13710 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13712 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13713 ;;Total ram usage:        2 bytes
 13714 ;; Hardware stack levels used:    1
 13715 ;; This function calls:
 13716 ;;		Nothing
 13717 ;; This function is called by:
 13718 ;;		i2_lcdInst
 13719 ;;		i2_putch
 13720 ;; This function uses a non-reentrant model
 13721 ;;
 13722                           
 13723                           	psect	text69
 13724  002418                     __ptext69:
 13725                           	opt stack 0
 13726  002418                     i2_lcdNibble:
 13727                           	opt stack 19
 13728                           
 13729                           ;incstack = 0
 13730                           ;i2lcdNibble@data stored from wreg
 13731  002418  6E02               	movwf	i2lcdNibble@data,c
 13732                           
 13733                           ;lcd.c: 26: char temp = data & 0xF0;
 13734  00241A  5002               	movf	i2lcdNibble@data,w,c
 13735  00241C  0BF0               	andlw	240
 13736  00241E  6E01               	movwf	i2lcdNibble@temp,c
 13737                           
 13738                           ;lcd.c: 27: LATD = LATD & 0x0F;
 13739  002420  508C               	movf	3980,w,c	;volatile
 13740  002422  0B0F               	andlw	15
 13741  002424  6E8C               	movwf	3980,c	;volatile
 13742                           
 13743                           ;lcd.c: 28: LATD = temp | LATD;
 13744  002426  5001               	movf	i2lcdNibble@temp,w,c
 13745  002428  108C               	iorwf	3980,w,c	;volatile
 13746  00242A  6E8C               	movwf	3980,c	;volatile
 13747                           
 13748                           ;lcd.c: 30: LATDbits.LATD3 = 1;
 13749  00242C  868C               	bsf	3980,3,c	;volatile
 13750                           
 13751                           ;lcd.c: 31: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13752  00242E  0E42               	movlw	66
 13753  002430                     i2u502_47:
 13754  002430  2EE8               	decfsz	wreg,f,c
 13755  002432  D7FE               	bra	i2u502_47
 13756  002434  D000               	nop2	
 13757                           
 13758                           ;lcd.c: 32: LATDbits.LATD3 = 0;
 13759  002436  968C               	bcf	3980,3,c	;volatile
 13760                           
 13761                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13762  002438  0E42               	movlw	66
 13763  00243A                     i2u503_47:
 13764  00243A  2EE8               	decfsz	wreg,f,c
 13765  00243C  D7FE               	bra	i2u503_47
 13766  00243E  D000               	nop2	
 13767                           
 13768                           ;lcd.c: 35: data = data << 4;
 13769  002440  3802               	swapf	i2lcdNibble@data,w,c
 13770  002442  0BF0               	andlw	240
 13771  002444  6E02               	movwf	i2lcdNibble@data,c
 13772                           
 13773                           ;lcd.c: 37: temp = data & 0xF0;
 13774  002446  5002               	movf	i2lcdNibble@data,w,c
 13775  002448  0BF0               	andlw	240
 13776  00244A  6E01               	movwf	i2lcdNibble@temp,c
 13777                           
 13778                           ;lcd.c: 38: LATD = LATD & 0x0F;
 13779  00244C  508C               	movf	3980,w,c	;volatile
 13780  00244E  0B0F               	andlw	15
 13781  002450  6E8C               	movwf	3980,c	;volatile
 13782                           
 13783                           ;lcd.c: 39: LATD = temp | LATD;
 13784  002452  5001               	movf	i2lcdNibble@temp,w,c
 13785  002454  108C               	iorwf	3980,w,c	;volatile
 13786  002456  6E8C               	movwf	3980,c	;volatile
 13787                           
 13788                           ;lcd.c: 41: LATDbits.LATD3 = 1;
 13789  002458  868C               	bsf	3980,3,c	;volatile
 13790                           
 13791                           ;lcd.c: 42: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13792  00245A  0E42               	movlw	66
 13793  00245C                     i2u504_47:
 13794  00245C  2EE8               	decfsz	wreg,f,c
 13795  00245E  D7FE               	bra	i2u504_47
 13796  002460  D000               	nop2	
 13797                           
 13798                           ;lcd.c: 43: LATDbits.LATD3 = 0;
 13799  002462  968C               	bcf	3980,3,c	;volatile
 13800                           
 13801                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13802  002464  0E42               	movlw	66
 13803  002466                     i2u505_47:
 13804  002466  2EE8               	decfsz	wreg,f,c
 13805  002468  D7FE               	bra	i2u505_47
 13806  00246A  D000               	nop2	
 13807  00246C  0012               	return		;funcret
 13808  00246E                     __end_ofi2_lcdNibble:
 13809                           	opt stack 0
 13810                           pclatu	equ	0xFFB
 13811                           pclath	equ	0xFFA
 13812                           tblptru	equ	0xFF8
 13813                           tblptrh	equ	0xFF7
 13814                           tblptrl	equ	0xFF6
 13815                           tablat	equ	0xFF5
 13816                           prodh	equ	0xFF4
 13817                           prodl	equ	0xFF3
 13818                           intcon	equ	0xFF2
 13819                           intcon2	equ	0xFF1
 13820                           intcon3	equ	0xFF0
 13821                           indf0	equ	0xFEF
 13822                           postinc0	equ	0xFEE
 13823                           fsr0h	equ	0xFEA
 13824                           fsr0l	equ	0xFE9
 13825                           wreg	equ	0xFE8
 13826                           postdec1	equ	0xFE5
 13827                           fsr1h	equ	0xFE2
 13828                           fsr1l	equ	0xFE1
 13829                           indf2	equ	0xFDF
 13830                           postinc2	equ	0xFDE
 13831                           postdec2	equ	0xFDD
 13832                           fsr2h	equ	0xFDA
 13833                           fsr2l	equ	0xFD9
 13834                           status	equ	0xFD8
 13835                           
 13836 ;; *************** function i2_getRTC *****************
 13837 ;; Defined at:
 13838 ;;		line 43 in file "RTC.c"
 13839 ;; Parameters:    Size  Location     Type
 13840 ;;		None
 13841 ;; Auto vars:     Size  Location     Type
 13842 ;;  getRTC          2    3[COMRAM] int 
 13843 ;; Return value:  Size  Location     Type
 13844 ;;                  1    wreg      void 
 13845 ;; Registers used:
 13846 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13847 ;; Tracked objects:
 13848 ;;		On entry : 0/0
 13849 ;;		On exit  : 0/0
 13850 ;;		Unchanged: 0/0
 13851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13853 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13855 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13856 ;;Total ram usage:        2 bytes
 13857 ;; Hardware stack levels used:    1
 13858 ;; Hardware stack levels required when called:    2
 13859 ;; This function calls:
 13860 ;;		i2_I2C_Master_Read
 13861 ;;		i2_I2C_Master_Start
 13862 ;;		i2_I2C_Master_Stop
 13863 ;;		i2_I2C_Master_Write
 13864 ;; This function is called by:
 13865 ;;		_printSortTimer
 13866 ;;		i2_printRTC
 13867 ;; This function uses a non-reentrant model
 13868 ;;
 13869                           
 13870                           	psect	text70
 13871  002118                     __ptext70:
 13872                           	opt stack 0
 13873  002118                     i2_getRTC:
 13874                           	opt stack 18
 13875                           
 13876                           ;RTC.c: 47: I2C_Master_Start();
 13877                           
 13878                           ;incstack = 0
 13879  002118  ECA8  F015         	call	i2_I2C_Master_Start	;wreg free
 13880                           
 13881                           ;RTC.c: 48: I2C_Master_Write(0b11010000);
 13882  00211C  0E00               	movlw	0
 13883  00211E  6E03               	movwf	i2I2C_Master_Write@d+1,c
 13884  002120  0ED0               	movlw	208
 13885  002122  6E02               	movwf	i2I2C_Master_Write@d,c
 13886  002124  EC93  F015         	call	i2_I2C_Master_Write	;wreg free
 13887                           
 13888                           ;RTC.c: 49: I2C_Master_Write(0x00);
 13889  002128  0E00               	movlw	0
 13890  00212A  6E03               	movwf	i2I2C_Master_Write@d+1,c
 13891  00212C  0E00               	movlw	0
 13892  00212E  6E02               	movwf	i2I2C_Master_Write@d,c
 13893  002130  EC93  F015         	call	i2_I2C_Master_Write	;wreg free
 13894                           
 13895                           ;RTC.c: 50: I2C_Master_Stop();
 13896  002134  ECA4  F015         	call	i2_I2C_Master_Stop	;wreg free
 13897                           
 13898                           ;RTC.c: 53: I2C_Master_Start();
 13899  002138  ECA8  F015         	call	i2_I2C_Master_Start	;wreg free
 13900                           
 13901                           ;RTC.c: 54: I2C_Master_Write(0b11010001);
 13902  00213C  0E00               	movlw	0
 13903  00213E  6E03               	movwf	i2I2C_Master_Write@d+1,c
 13904  002140  0ED1               	movlw	209
 13905  002142  6E02               	movwf	i2I2C_Master_Write@d,c
 13906  002144  EC93  F015         	call	i2_I2C_Master_Write	;wreg free
 13907                           
 13908                           ;RTC.c: 55: for(int i = 0; i < 6; i++){
 13909  002148  0E00               	movlw	0
 13910  00214A  6E05               	movwf	i2getRTC@i+1,c
 13911  00214C  0E00               	movlw	0
 13912  00214E  6E04               	movwf	i2getRTC@i,c
 13913  002150                     i2l4542:
 13914  002150  BE05               	btfsc	i2getRTC@i+1,7,c
 13915  002152  D006               	goto	i2l4546
 13916  002154  5005               	movf	i2getRTC@i+1,w,c
 13917  002156  E111               	bnz	i2l4552
 13918  002158  0E06               	movlw	6
 13919  00215A  5C04               	subwf	i2getRTC@i,w,c
 13920  00215C  B0D8               	btfsc	status,0,c
 13921  00215E  D00D               	goto	i2l4552
 13922  002160                     i2l4546:
 13923                           
 13924                           ;RTC.c: 56: time[i] = I2C_Master_Read(1);
 13925  002160  0ED4               	movlw	low _time
 13926  002162  2404               	addwf	i2getRTC@i,w,c
 13927  002164  6ED9               	movwf	fsr2l,c
 13928  002166  0E00               	movlw	high _time
 13929  002168  2005               	addwfc	i2getRTC@i+1,w,c
 13930  00216A  6EDA               	movwf	fsr2h,c
 13931  00216C  0E01               	movlw	1
 13932  00216E  ECF0  F014         	call	i2_I2C_Master_Read
 13933  002172  6EDF               	movwf	indf2,c
 13934  002174  4A04               	infsnz	i2getRTC@i,f,c
 13935  002176  2A05               	incf	i2getRTC@i+1,f,c
 13936  002178  D7EB               	goto	i2l4542
 13937  00217A                     i2l4552:
 13938                           
 13939                           ;RTC.c: 57: }
 13940                           ;RTC.c: 58: time[6] = I2C_Master_Read(0);
 13941  00217A  0E00               	movlw	0
 13942  00217C  ECF0  F014         	call	i2_I2C_Master_Read
 13943  002180  0100               	movlb	0	; () banked
 13944  002182  6FDA               	movwf	(_time+6)& (0+255),b
 13945                           
 13946                           ;RTC.c: 59: I2C_Master_Stop();
 13947  002184  ECA4  F015         	call	i2_I2C_Master_Stop	;wreg free
 13948  002188  0012               	return		;funcret
 13949  00218A                     __end_ofi2_getRTC:
 13950                           	opt stack 0
 13951                           pclatu	equ	0xFFB
 13952                           pclath	equ	0xFFA
 13953                           tblptru	equ	0xFF8
 13954                           tblptrh	equ	0xFF7
 13955                           tblptrl	equ	0xFF6
 13956                           tablat	equ	0xFF5
 13957                           prodh	equ	0xFF4
 13958                           prodl	equ	0xFF3
 13959                           intcon	equ	0xFF2
 13960                           intcon2	equ	0xFF1
 13961                           intcon3	equ	0xFF0
 13962                           indf0	equ	0xFEF
 13963                           postinc0	equ	0xFEE
 13964                           fsr0h	equ	0xFEA
 13965                           fsr0l	equ	0xFE9
 13966                           wreg	equ	0xFE8
 13967                           postdec1	equ	0xFE5
 13968                           fsr1h	equ	0xFE2
 13969                           fsr1l	equ	0xFE1
 13970                           indf2	equ	0xFDF
 13971                           postinc2	equ	0xFDE
 13972                           postdec2	equ	0xFDD
 13973                           fsr2h	equ	0xFDA
 13974                           fsr2l	equ	0xFD9
 13975                           status	equ	0xFD8
 13976                           
 13977 ;; *************** function i2_I2C_Master_Write *****************
 13978 ;; Defined at:
 13979 ;;		line 48 in file "I2C.c"
 13980 ;; Parameters:    Size  Location     Type
 13981 ;;  d               2    1[COMRAM] unsigned int 
 13982 ;; Auto vars:     Size  Location     Type
 13983 ;;		None
 13984 ;; Return value:  Size  Location     Type
 13985 ;;                  1    wreg      void 
 13986 ;; Registers used:
 13987 ;;		wreg, status,2, status,0, cstack
 13988 ;; Tracked objects:
 13989 ;;		On entry : 0/0
 13990 ;;		On exit  : 0/0
 13991 ;;		Unchanged: 0/0
 13992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13993 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13996 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13997 ;;Total ram usage:        2 bytes
 13998 ;; Hardware stack levels used:    1
 13999 ;; Hardware stack levels required when called:    1
 14000 ;; This function calls:
 14001 ;;		i2_I2C_Master_Wait
 14002 ;; This function is called by:
 14003 ;;		i2_getRTC
 14004 ;; This function uses a non-reentrant model
 14005 ;;
 14006                           
 14007                           	psect	text71
 14008  002B26                     __ptext71:
 14009                           	opt stack 0
 14010  002B26                     i2_I2C_Master_Write:
 14011                           	opt stack 18
 14012                           
 14013                           ;I2C.c: 50: I2C_Master_Wait();
 14014                           
 14015                           ;incstack = 0
 14016  002B26  EC69  F015         	call	i2_I2C_Master_Wait	;wreg free
 14017                           
 14018                           ;I2C.c: 51: SSPBUF = d;
 14019  002B2A  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 14020  002B2E  0012               	return		;funcret
 14021  002B30                     __end_ofi2_I2C_Master_Write:
 14022                           	opt stack 0
 14023                           pclatu	equ	0xFFB
 14024                           pclath	equ	0xFFA
 14025                           tblptru	equ	0xFF8
 14026                           tblptrh	equ	0xFF7
 14027                           tblptrl	equ	0xFF6
 14028                           tablat	equ	0xFF5
 14029                           prodh	equ	0xFF4
 14030                           prodl	equ	0xFF3
 14031                           intcon	equ	0xFF2
 14032                           intcon2	equ	0xFF1
 14033                           intcon3	equ	0xFF0
 14034                           indf0	equ	0xFEF
 14035                           postinc0	equ	0xFEE
 14036                           fsr0h	equ	0xFEA
 14037                           fsr0l	equ	0xFE9
 14038                           wreg	equ	0xFE8
 14039                           postdec1	equ	0xFE5
 14040                           fsr1h	equ	0xFE2
 14041                           fsr1l	equ	0xFE1
 14042                           indf2	equ	0xFDF
 14043                           postinc2	equ	0xFDE
 14044                           postdec2	equ	0xFDD
 14045                           fsr2h	equ	0xFDA
 14046                           fsr2l	equ	0xFD9
 14047                           status	equ	0xFD8
 14048                           
 14049 ;; *************** function i2_I2C_Master_Stop *****************
 14050 ;; Defined at:
 14051 ;;		line 42 in file "I2C.c"
 14052 ;; Parameters:    Size  Location     Type
 14053 ;;		None
 14054 ;; Auto vars:     Size  Location     Type
 14055 ;;		None
 14056 ;; Return value:  Size  Location     Type
 14057 ;;                  1    wreg      void 
 14058 ;; Registers used:
 14059 ;;		wreg, status,2, status,0, cstack
 14060 ;; Tracked objects:
 14061 ;;		On entry : 0/0
 14062 ;;		On exit  : 0/0
 14063 ;;		Unchanged: 0/0
 14064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14068 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14069 ;;Total ram usage:        0 bytes
 14070 ;; Hardware stack levels used:    1
 14071 ;; Hardware stack levels required when called:    1
 14072 ;; This function calls:
 14073 ;;		i2_I2C_Master_Wait
 14074 ;; This function is called by:
 14075 ;;		i2_getRTC
 14076 ;; This function uses a non-reentrant model
 14077 ;;
 14078                           
 14079                           	psect	text72
 14080  002B48                     __ptext72:
 14081                           	opt stack 0
 14082  002B48                     i2_I2C_Master_Stop:
 14083                           	opt stack 18
 14084                           
 14085                           ;I2C.c: 44: I2C_Master_Wait();
 14086                           
 14087                           ;incstack = 0
 14088  002B48  EC69  F015         	call	i2_I2C_Master_Wait	;wreg free
 14089                           
 14090                           ;I2C.c: 45: PEN = 1;
 14091  002B4C  84C5               	bsf	4037,2,c	;volatile
 14092  002B4E  0012               	return		;funcret
 14093  002B50                     __end_ofi2_I2C_Master_Stop:
 14094                           	opt stack 0
 14095                           pclatu	equ	0xFFB
 14096                           pclath	equ	0xFFA
 14097                           tblptru	equ	0xFF8
 14098                           tblptrh	equ	0xFF7
 14099                           tblptrl	equ	0xFF6
 14100                           tablat	equ	0xFF5
 14101                           prodh	equ	0xFF4
 14102                           prodl	equ	0xFF3
 14103                           intcon	equ	0xFF2
 14104                           intcon2	equ	0xFF1
 14105                           intcon3	equ	0xFF0
 14106                           indf0	equ	0xFEF
 14107                           postinc0	equ	0xFEE
 14108                           fsr0h	equ	0xFEA
 14109                           fsr0l	equ	0xFE9
 14110                           wreg	equ	0xFE8
 14111                           postdec1	equ	0xFE5
 14112                           fsr1h	equ	0xFE2
 14113                           fsr1l	equ	0xFE1
 14114                           indf2	equ	0xFDF
 14115                           postinc2	equ	0xFDE
 14116                           postdec2	equ	0xFDD
 14117                           fsr2h	equ	0xFDA
 14118                           fsr2l	equ	0xFD9
 14119                           status	equ	0xFD8
 14120                           
 14121 ;; *************** function i2_I2C_Master_Start *****************
 14122 ;; Defined at:
 14123 ;;		line 30 in file "I2C.c"
 14124 ;; Parameters:    Size  Location     Type
 14125 ;;		None
 14126 ;; Auto vars:     Size  Location     Type
 14127 ;;		None
 14128 ;; Return value:  Size  Location     Type
 14129 ;;                  1    wreg      void 
 14130 ;; Registers used:
 14131 ;;		wreg, status,2, status,0, cstack
 14132 ;; Tracked objects:
 14133 ;;		On entry : 0/0
 14134 ;;		On exit  : 0/0
 14135 ;;		Unchanged: 0/0
 14136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14140 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14141 ;;Total ram usage:        0 bytes
 14142 ;; Hardware stack levels used:    1
 14143 ;; Hardware stack levels required when called:    1
 14144 ;; This function calls:
 14145 ;;		i2_I2C_Master_Wait
 14146 ;; This function is called by:
 14147 ;;		i2_getRTC
 14148 ;; This function uses a non-reentrant model
 14149 ;;
 14150                           
 14151                           	psect	text73
 14152  002B50                     __ptext73:
 14153                           	opt stack 0
 14154  002B50                     i2_I2C_Master_Start:
 14155                           	opt stack 18
 14156                           
 14157                           ;I2C.c: 32: I2C_Master_Wait();
 14158                           
 14159                           ;incstack = 0
 14160  002B50  EC69  F015         	call	i2_I2C_Master_Wait	;wreg free
 14161                           
 14162                           ;I2C.c: 33: SEN = 1;
 14163  002B54  80C5               	bsf	4037,0,c	;volatile
 14164  002B56  0012               	return		;funcret
 14165  002B58                     __end_ofi2_I2C_Master_Start:
 14166                           	opt stack 0
 14167                           pclatu	equ	0xFFB
 14168                           pclath	equ	0xFFA
 14169                           tblptru	equ	0xFF8
 14170                           tblptrh	equ	0xFF7
 14171                           tblptrl	equ	0xFF6
 14172                           tablat	equ	0xFF5
 14173                           prodh	equ	0xFF4
 14174                           prodl	equ	0xFF3
 14175                           intcon	equ	0xFF2
 14176                           intcon2	equ	0xFF1
 14177                           intcon3	equ	0xFF0
 14178                           indf0	equ	0xFEF
 14179                           postinc0	equ	0xFEE
 14180                           fsr0h	equ	0xFEA
 14181                           fsr0l	equ	0xFE9
 14182                           wreg	equ	0xFE8
 14183                           postdec1	equ	0xFE5
 14184                           fsr1h	equ	0xFE2
 14185                           fsr1l	equ	0xFE1
 14186                           indf2	equ	0xFDF
 14187                           postinc2	equ	0xFDE
 14188                           postdec2	equ	0xFDD
 14189                           fsr2h	equ	0xFDA
 14190                           fsr2l	equ	0xFD9
 14191                           status	equ	0xFD8
 14192                           
 14193 ;; *************** function i2_I2C_Master_Read *****************
 14194 ;; Defined at:
 14195 ;;		line 54 in file "I2C.c"
 14196 ;; Parameters:    Size  Location     Type
 14197 ;;  a               1    wreg     unsigned char 
 14198 ;; Auto vars:     Size  Location     Type
 14199 ;;  a               1    1[COMRAM] unsigned char 
 14200 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 14201 ;; Return value:  Size  Location     Type
 14202 ;;                  1    wreg      unsigned char 
 14203 ;; Registers used:
 14204 ;;		wreg, status,2, status,0, cstack
 14205 ;; Tracked objects:
 14206 ;;		On entry : 0/0
 14207 ;;		On exit  : 0/0
 14208 ;;		Unchanged: 0/0
 14209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14211 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14213 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14214 ;;Total ram usage:        2 bytes
 14215 ;; Hardware stack levels used:    1
 14216 ;; Hardware stack levels required when called:    1
 14217 ;; This function calls:
 14218 ;;		i2_I2C_Master_Wait
 14219 ;; This function is called by:
 14220 ;;		i2_getRTC
 14221 ;; This function uses a non-reentrant model
 14222 ;;
 14223                           
 14224                           	psect	text74
 14225  0029E0                     __ptext74:
 14226                           	opt stack 0
 14227  0029E0                     i2_I2C_Master_Read:
 14228                           	opt stack 18
 14229                           
 14230                           ;incstack = 0
 14231                           ;i2I2C_Master_Read@a stored from wreg
 14232  0029E0  6E02               	movwf	i2I2C_Master_Read@a,c
 14233                           
 14234                           ;I2C.c: 56: unsigned char temp;
 14235                           ;I2C.c: 57: I2C_Master_Wait();
 14236  0029E2  EC69  F015         	call	i2_I2C_Master_Wait	;wreg free
 14237                           
 14238                           ;I2C.c: 58: RCEN = 1;
 14239  0029E6  86C5               	bsf	4037,3,c	;volatile
 14240                           
 14241                           ;I2C.c: 59: I2C_Master_Wait();
 14242  0029E8  EC69  F015         	call	i2_I2C_Master_Wait	;wreg free
 14243                           
 14244                           ;I2C.c: 60: temp = SSPBUF;
 14245  0029EC  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 14246                           
 14247                           ;I2C.c: 61: I2C_Master_Wait();
 14248  0029F0  EC69  F015         	call	i2_I2C_Master_Wait	;wreg free
 14249                           
 14250                           ;I2C.c: 62: ACKDT = (a)?0:1;
 14251  0029F4  5002               	movf	i2I2C_Master_Read@a,w,c
 14252  0029F6  A4D8               	btfss	status,2,c
 14253  0029F8  D002               	goto	i2u251_40
 14254  0029FA  8AC5               	bsf	4037,5,c	;volatile
 14255  0029FC  D001               	goto	i2l4286
 14256  0029FE                     i2u251_40:
 14257  0029FE  9AC5               	bcf	4037,5,c	;volatile
 14258  002A00                     i2l4286:
 14259                           
 14260                           ;I2C.c: 63: ACKEN = 1;
 14261  002A00  88C5               	bsf	4037,4,c	;volatile
 14262                           
 14263                           ;I2C.c: 64: return temp;
 14264  002A02  5003               	movf	i2I2C_Master_Read@temp,w,c
 14265  002A04  0012               	return	
 14266  002A06                     __end_ofi2_I2C_Master_Read:
 14267                           	opt stack 0
 14268                           pclatu	equ	0xFFB
 14269                           pclath	equ	0xFFA
 14270                           tblptru	equ	0xFF8
 14271                           tblptrh	equ	0xFF7
 14272                           tblptrl	equ	0xFF6
 14273                           tablat	equ	0xFF5
 14274                           prodh	equ	0xFF4
 14275                           prodl	equ	0xFF3
 14276                           intcon	equ	0xFF2
 14277                           intcon2	equ	0xFF1
 14278                           intcon3	equ	0xFF0
 14279                           indf0	equ	0xFEF
 14280                           postinc0	equ	0xFEE
 14281                           fsr0h	equ	0xFEA
 14282                           fsr0l	equ	0xFE9
 14283                           wreg	equ	0xFE8
 14284                           postdec1	equ	0xFE5
 14285                           fsr1h	equ	0xFE2
 14286                           fsr1l	equ	0xFE1
 14287                           indf2	equ	0xFDF
 14288                           postinc2	equ	0xFDE
 14289                           postdec2	equ	0xFDD
 14290                           fsr2h	equ	0xFDA
 14291                           fsr2l	equ	0xFD9
 14292                           status	equ	0xFD8
 14293                           
 14294 ;; *************** function i2_I2C_Master_Wait *****************
 14295 ;; Defined at:
 14296 ;;		line 25 in file "I2C.c"
 14297 ;; Parameters:    Size  Location     Type
 14298 ;;		None
 14299 ;; Auto vars:     Size  Location     Type
 14300 ;;		None
 14301 ;; Return value:  Size  Location     Type
 14302 ;;                  1    wreg      void 
 14303 ;; Registers used:
 14304 ;;		wreg, status,2, status,0
 14305 ;; Tracked objects:
 14306 ;;		On entry : 0/0
 14307 ;;		On exit  : 0/0
 14308 ;;		Unchanged: 0/0
 14309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14311 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14312 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14313 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14314 ;;Total ram usage:        1 bytes
 14315 ;; Hardware stack levels used:    1
 14316 ;; This function calls:
 14317 ;;		Nothing
 14318 ;; This function is called by:
 14319 ;;		i2_I2C_Master_Start
 14320 ;;		i2_I2C_Master_Stop
 14321 ;;		i2_I2C_Master_Write
 14322 ;;		i2_I2C_Master_Read
 14323 ;; This function uses a non-reentrant model
 14324 ;;
 14325                           
 14326                           	psect	text75
 14327  002AD2                     __ptext75:
 14328                           	opt stack 0
 14329  002AD2                     i2_I2C_Master_Wait:
 14330                           	opt stack 18
 14331  002AD2                     i2l196:
 14332  002AD2  B4C7               	btfsc	4039,2,c	;volatile
 14333  002AD4  D7FE               	goto	i2l196
 14334  002AD6  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 14335  002ADA  0E1F               	movlw	31
 14336  002ADC  1601               	andwf	??i2_I2C_Master_Wait,f,c
 14337  002ADE  B4D8               	btfsc	status,2,c
 14338  002AE0  0012               	return	
 14339  002AE2  D7F7               	goto	i2l196
 14340  002AE4                     __end_ofi2_I2C_Master_Wait:
 14341                           	opt stack 0
 14342                           pclatu	equ	0xFFB
 14343                           pclath	equ	0xFFA
 14344                           tblptru	equ	0xFF8
 14345                           tblptrh	equ	0xFF7
 14346                           tblptrl	equ	0xFF6
 14347                           tablat	equ	0xFF5
 14348                           prodh	equ	0xFF4
 14349                           prodl	equ	0xFF3
 14350                           intcon	equ	0xFF2
 14351                           intcon2	equ	0xFF1
 14352                           intcon3	equ	0xFF0
 14353                           indf0	equ	0xFEF
 14354                           postinc0	equ	0xFEE
 14355                           fsr0h	equ	0xFEA
 14356                           fsr0l	equ	0xFE9
 14357                           wreg	equ	0xFE8
 14358                           postdec1	equ	0xFE5
 14359                           fsr1h	equ	0xFE2
 14360                           fsr1l	equ	0xFE1
 14361                           indf2	equ	0xFDF
 14362                           postinc2	equ	0xFDE
 14363                           postdec2	equ	0xFDD
 14364                           fsr2h	equ	0xFDA
 14365                           fsr2l	equ	0xFD9
 14366                           status	equ	0xFD8
 14367                           pclatu	equ	0xFFB
 14368                           pclath	equ	0xFFA
 14369                           tblptru	equ	0xFF8
 14370                           tblptrh	equ	0xFF7
 14371                           tblptrl	equ	0xFF6
 14372                           tablat	equ	0xFF5
 14373                           prodh	equ	0xFF4
 14374                           prodl	equ	0xFF3
 14375                           intcon	equ	0xFF2
 14376                           intcon2	equ	0xFF1
 14377                           intcon3	equ	0xFF0
 14378                           indf0	equ	0xFEF
 14379                           postinc0	equ	0xFEE
 14380                           fsr0h	equ	0xFEA
 14381                           fsr0l	equ	0xFE9
 14382                           wreg	equ	0xFE8
 14383                           postdec1	equ	0xFE5
 14384                           fsr1h	equ	0xFE2
 14385                           fsr1l	equ	0xFE1
 14386                           indf2	equ	0xFDF
 14387                           postinc2	equ	0xFDE
 14388                           postdec2	equ	0xFDD
 14389                           fsr2h	equ	0xFDA
 14390                           fsr2l	equ	0xFD9
 14391                           status	equ	0xFD8
 14392                           
 14393                           	psect	rparam
 14394  0000                     pclatu	equ	0xFFB
 14395                           pclath	equ	0xFFA
 14396                           tblptru	equ	0xFF8
 14397                           tblptrh	equ	0xFF7
 14398                           tblptrl	equ	0xFF6
 14399                           tablat	equ	0xFF5
 14400                           prodh	equ	0xFF4
 14401                           prodl	equ	0xFF3
 14402                           intcon	equ	0xFF2
 14403                           intcon2	equ	0xFF1
 14404                           intcon3	equ	0xFF0
 14405                           indf0	equ	0xFEF
 14406                           postinc0	equ	0xFEE
 14407                           fsr0h	equ	0xFEA
 14408                           fsr0l	equ	0xFE9
 14409                           wreg	equ	0xFE8
 14410                           postdec1	equ	0xFE5
 14411                           fsr1h	equ	0xFE2
 14412                           fsr1l	equ	0xFE1
 14413                           indf2	equ	0xFDF
 14414                           postinc2	equ	0xFDE
 14415                           postdec2	equ	0xFDD
 14416                           fsr2h	equ	0xFDA
 14417                           fsr2l	equ	0xFD9
 14418                           status	equ	0xFD8
 14419                           
 14420                           	psect	temp
 14421  00007E                     btemp:
 14422                           	opt stack 0
 14423  00007E                     	ds	1
 14424  0000                     int$flags	set	btemp
 14425                           pclatu	equ	0xFFB
 14426                           pclath	equ	0xFFA
 14427                           tblptru	equ	0xFF8
 14428                           tblptrh	equ	0xFF7
 14429                           tblptrl	equ	0xFF6
 14430                           tablat	equ	0xFF5
 14431                           prodh	equ	0xFF4
 14432                           prodl	equ	0xFF3
 14433                           intcon	equ	0xFF2
 14434                           intcon2	equ	0xFF1
 14435                           intcon3	equ	0xFF0
 14436                           indf0	equ	0xFEF
 14437                           postinc0	equ	0xFEE
 14438                           fsr0h	equ	0xFEA
 14439                           fsr0l	equ	0xFE9
 14440                           wreg	equ	0xFE8
 14441                           postdec1	equ	0xFE5
 14442                           fsr1h	equ	0xFE2
 14443                           fsr1l	equ	0xFE1
 14444                           indf2	equ	0xFDF
 14445                           postinc2	equ	0xFDE
 14446                           postdec2	equ	0xFDD
 14447                           fsr2h	equ	0xFDA
 14448                           fsr2l	equ	0xFD9
 14449                           status	equ	0xFD8


Data Sizes:
    Strings     558
    Constant    27
    Data        16
    BSS         83
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     84     128
    BANK1           256      0      20
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_47(CODE[4]), STR_46(CODE[4]), STR_45(CODE[4]), STR_44(CODE[4]), 
		 -> STR_43(CODE[4]), STR_42(CODE[4]), STR_41(CODE[4]), STR_40(CODE[4]), 
		 -> STR_39(CODE[4]), STR_38(CODE[4]), STR_37(CODE[4]), STR_36(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_51(CODE[7]), printRTC@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_50(CODE[21]), STR_49(CODE[11]), STR_48(CODE[24]), STR_35(CODE[17]), 
		 -> STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), 
		 -> STR_30(CODE[17]), STR_29(CODE[17]), STR_28(CODE[17]), STR_27(CODE[17]), 
		 -> STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[17]), 
		 -> STR_22(CODE[17]), STR_21(CODE[17]), STR_20(CODE[17]), STR_19(CODE[17]), 
		 -> STR_18(CODE[17]), STR_17(CODE[17]), STR_16(CODE[17]), STR_15(CODE[17]), 
		 -> STR_14(CODE[3]), STR_13(CODE[17]), STR_12(CODE[17]), STR_11(CODE[17]), 
		 -> STR_10(CODE[17]), STR_9(CODE[17]), STR_8(CODE[18]), STR_7(CODE[10]), 
		 -> STR_6(CODE[17]), STR_5(CODE[7]), STR_4(CODE[17]), STR_3(CODE[18]), 
		 -> STR_2(CODE[21]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_ID
    _Loading->_initSortTimer
    _initSortTimer->_getRTC
    _getIR->_readIR
    _readIR->_readADC
    _ID->_readMAG
    _readMAG->_readADC
    _Distribution->_moveServoCup
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    ___awdiv->___awmod

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   38600
                         _PortTestA5
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0     972
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                              1     1      0     833
                                             10 BANK0      1     1      0
                              _getIR
                          _initFlags
                      _initSortTimer
                            _lcdInst
                       _moveServoCup
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initFlags                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getIR                                                0     0      0      45
                             _readIR
 ---------------------------------------------------------------------------------
 (4) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _ID                                                   8     8      0     117
                                              6 BANK0      8     8      0
                     _moveServoBlock
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (5) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _moveServoBlock                                       1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         0     0      0      22
                       _moveServoCup
 ---------------------------------------------------------------------------------
 (3) _moveServoCup                                         1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   13210
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     850
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     376
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   12360
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  16    16      0   23745
                                             68 BANK0     16    16      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0    7532
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    1611
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    4828
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    4828
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              33    21     12    4693
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     593
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     442
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     680
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     428
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _PortTestA5                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   73560
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   68752
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7546
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4506
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30400
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2     406
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4808
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    2905
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     417
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     318
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PortTestA5
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _machineConfig
   _sort
     _Distribution
       _moveServoCup
     _ID
       _moveServoBlock
       _readMAG
         _readADC
     _Loading
       _getIR
         _readIR
           _readADC
       _initFlags
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _moveServoCup
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      14       7        7.8%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     54      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     111      34        0.0%
DATA                 0      0     111       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Fri Feb 24 19:45:18 2017

                   i2_I2C_Master_Start 2B50                     i2_I2C_Master_Write 2B26  
                                   _ID 19A0                                     _UI 0012  
                         ___awdiv@sign 008B                                     _up 0073  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                                    ?_ID 0001  
                                  ?_UI 0001                                    UI@i 00C7  
                                  l430 00E0                                    l196 2A98  
                                  l293 2AC0                                    l296 2AC6  
                                  l832 1FF4                           __CFG_CPB$OFF 000000  
                                  _PEN 007E2A                           __CFG_CPD$OFF 000000  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
                       ?_machineConfig 0001                    ?i2_I2C_Master_Write 0002  
                                  _log 00F1                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
      __end_of_change_state_to_menu_11 2796        __end_of_change_state_to_menu_12 2638  
      __end_of_change_state_to_menu_22 2600        __end_of_change_state_to_menu_23 2766  
         _f_can_coming_to_distribution 00EB                         ??_Distribution 0081  
      __end_of_change_state_to_logs_11 2886        __end_of_change_state_to_logs_12 2856  
      __end_of_change_state_to_logs_22 2826        __end_of_change_state_to_logs_23 2910  
      __end_of_change_state_to_logs_33 27F6        __end_of_change_state_to_logs_34 27C6  
                                 ??_ID 0086                                   ??_UI 00C4  
                         __CFG_LVP$OFF 000000                           __CFG_WDT$OFF 000000  
                                 l1077 0D7C                                   l1285 1E64  
                                 l4200 28DA                                   l1830 1BE6  
                                 l4400 06A8                                   l4234 20BE  
                                 l4218 2988                                   l4410 0720  
                                 l5202 1D1E                                   l4236 20CA  
                                 l4412 0738                                   l4420 077C  
                                 l5310 1D70                                   l4246 2100  
                                 l4238 20D0                                   l4262 229E  
                                 l4254 2268                                   l4406 070E  
                                 l4422 07B0                                   l4510 264E  
                                 l4256 2274                                   l4432 07E0  
                                 l4416 0764                                   l4408 071A  
                                 l4504 2090                                   l4520 1B7A  
                                 l4176 2924                                   l5330 1DDC  
                                 l5322 1DBA                                   l5314 1D84  
                                 l5306 1D60                                   l4258 227A  
                                 l4434 07E6                                   l4370 05AA  
                                 l5410 0196                                   l4530 1BD4  
                                 l4522 1B80                                   l4178 2936  
                                 l1883 210E                                   l5316 1D90  
                                 l4452 0844                                   l4380 05E8  
                                 l4364 0584                                   l4508 2642  
                                 l1893 22AC                                   l5262 1A9A  
                                 l5318 1D96                                   l5326 1DC8  
                                 l4470 08BC                                   l4446 0822  
                                 l4374 05B4                                   l5414 01A0  
                                 l4518 1B6A                                   l5238 1A5C  
                                 l4472 08C8                                   l4480 08F6  
                                 l4464 08A0                                   l4456 087C  
                                 l4368 0598                                   l4720 0DA4  
                                 l4712 0CFA                                   l5512 0358  
                                 l5504 0336                                   l5432 01EC  
                                 l5424 01CA                                   l5274 1ACE  
                                 l5290 1B1E                                   l4482 08FC  
                                 l4458 0886                                   l4730 0E3A  
                                 l4722 0DC2                                   l5610 0506  
                                 l5530 03AE                                   l5450 0242  
                                 l5418 01B8                                   l5186 1CE2  
                                 l5276 1ADA                                   l5268 1AB0  
                                 l4476 08E2                                   l4396 0696  
                                 l4388 0664                                   l4740 0ED0  
                                 l4732 0E58                                   l4724 0DE0  
                                 l5508 0340                                   l5428 01D4  
                                 l5380 00FE                                   l5294 1B32  
                                 l5286 1B10                                   l5278 1AE0  
                                 l4486 0954                                   l4398 06A2  
                                 l4494 205A                                   l4734 0E76  
                                 l4726 0DFE                                   l4718 0D86  
                                 l5614 0510                                   l5534 03B8  
                                 l5454 024C                                   l4902 252E  
                                 l4488 0960                                   l4736 0E94  
                                 l4728 0E1C                                   l4744 0EEE  
                                 l5632 055C                                   l5624 053A  
                                 l5552 0404                                   l5544 03E2  
                                 l5472 0298                                   l5464 0276  
                                 l5392 0132                                   l5384 0110  
                                 l4904 253E                                   l4840 1C06  
                                 l4498 2070                                   l4738 0EB2  
                                 l4746 0F4C                                   l5618 0528  
                                 l5570 045A                                   l5538 03D0  
                                 l5490 0302                                   l5458 0264  
                                 l5378 00F8                                   l4850 1C92  
                                 l5628 0544                                   l5548 03EC  
                                 l5468 0280                                   l5396 0144  
                                 l5388 011A                                   l5636 0568  
                                 l4860 1E10                                   l4844 1C1C  
                                 l5574 0464                                   l5494 030C  
                                 l4862 1E20                                   _ADIE 007CEE  
                                 l5592 04B0                                   l5584 048E  
                                 l4864 1E30                                   l4856 1DF0  
                                 l4880 2212                                   _ADFM 007E07  
                                 l5578 047C                                   l5498 0324  
                                 l4858 1E00                                   l4882 2216  
                                 l5588 0498                                   l4868 1E42  
                                 l4892 2248                                   l5932 1FCA  
                                 l4886 222E                                   l5942 1FEA  
                                 l5934 1FD0                                   l4984 1F48  
                                 l4896 250C                                   l5944 1FF0  
                                 l5936 1FD6                                   l4994 1F8A  
                                 l4898 251C                                   l4988 1F5E  
                                 l5948 1FF6                                   _ADON 007E10  
                                 STR_1 FEBA                                   STR_2 FDE8  
                                 STR_3 FDFD                                   STR_4 FF86  
                                 STR_5 FFC4                                   STR_6 FEFE  
                                 STR_7 FFB3                                   STR_8 FE0F  
                                 STR_9 FE98                                   _LATA 000F89  
                                 _LATB 000F8A                                   _LATC 000F8B  
                                 _LATD 000F8C                                   _LATE 000F8D  
                                 u2410 28D8                                   u3240 23B8  
                                 u3250 23BA                                   u2610 2362  
                                 u2620 2364                                   u2710 075A  
                                 u5007 21EA                                   u3280 0D7C  
                                 u3265 22E6                                   u2717 0750  
                                 u2670 06E2                                   u3560 19F2  
                                 _PEIE 007F96                                   u2677 06D8  
                                 u3590 1A4C                                   u3568 19F6  
                                 _RCEN 007E2B                                   u4717 1CCA  
                                 u3598 1A50                                   u4807 01A8  
                                 u4727 19BA                                   u4817 01DC  
                                 u4737 1A34                                   u4907 03F4  
                                 u4827 0206                                   u4747 292C  
                                 u4917 041E                                   u4837 0254  
                                 u4757 24C8                                   u4927 046C  
                                 u4847 0288                                   u4767 24FC  
                                 u4937 04A0                                   u4857 02B2  
                                 u4777 002A                                   u4947 04CA  
                                 u4867 0314                                   u4787 0122  
                                 u4957 0518                                   u4877 0348  
                                 u4797 0152                                   u4967 054C  
                                 u4887 0372                                   u4977 21AA  
                                 u4897 03C0                                   u4987 21B4  
                                 u4997 21E0                                   _THIR 00F8  
                                 _RSEN 007E29                            _stopSignals 2A82  
                                 _back 005F                                   _main 1F92  
                                 _down 0065                                   _keys FDB5  
                                 _time 00D4                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 2A06                                   btemp 007E  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                      __end_ofi2_putch 2B10                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                             i2_printRTC 1250  
                          i2_lcdNibble 2418                        __end_of_Loading 1D44  
                     ?_I2C_Master_Init 008D                       ?_I2C_Master_Read 0001  
                     ?_I2C_Master_Wait 0001            ??i2_change_state_to_menu_12 002A  
          ??i2_change_state_to_menu_22 002A                       ?_I2C_Master_Stop 0001  
                                ?_main 0001                                  _ACKEN 007E2C  
                                _ACKDT 007E2D                        __end_of___awdiv 1B3C  
                                STR_10 FEDC                                  STR_11 FEA9  
                                STR_20 FF64                                  STR_12 FEED  
                                STR_13 FECB                                  STR_21 FE65  
                                STR_30 FE32                                  STR_22 FE76  
                                STR_14 FFFB                                  STR_15 FF97  
                                STR_23 FF53                                  STR_31 FF31  
                                STR_32 FF31                                  STR_40 FFF7  
                                STR_16 FF75                                  STR_24 FF0F  
                                STR_41 FFDF                                  STR_17 FE76  
                                STR_33 FE54                                  STR_25 FE32  
                                STR_34 FE43                                  STR_50 FDE8  
                                STR_42 FFD7                                  STR_18 FE87  
                                STR_26 FE21                                  STR_43 FFD3  
                                STR_51 FFBD                                  STR_19 FF64  
                                STR_35 FF42                                  STR_27 FF20  
                                STR_28 FF20                                  STR_44 FFE3  
                                STR_36 FFDB                        __end_of___awmod 1DE6  
                                STR_45 FFEF                                  STR_37 FFCB  
                                STR_29 FE43                                  STR_46 FFF3  
                                STR_38 FFE7                                  STR_39 FFEB  
                                STR_47 FFCF                                  STR_48 FDD0  
                                STR_49 FFA8                                  ?_sort 0001  
                      __end_of___lldiv 1BF8                                  _T0CON 000FD5  
                      ___awdiv@divisor 0088                                  _T1CON 000FCD  
                                _T3CON 000FB1                        __end_of___lwdiv 2118  
                      __end_of___lwmod 22B6                                  i2l196 2AD2  
                                i2l482 124C                        ___awdiv@counter 008A  
                                _VCFG0 007E0C                                  _VCFG1 007E0D  
                                _THMAG 00FA                                  _TMR0H 000FD7  
                                _TMR1H 000FCF                                  _TMR0L 000FD6  
                                _TMR3H 000FB3                                  _TMR1L 000FCE  
                                _TMR3L 000FB2                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst 2B04                        __end_of_handler 19A0  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _nRBPU 007F8F  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_readADC 293C  
                      __end_of_initLCD 2506                         __CFG_EBTRB$OFF 000000  
                           i2isdigit@c 0003                                  _getIR 21F2  
                      __end_of_loadRTC 1F92                        __end_of_readMAG 23C2  
                                _block 0077                        __end_of_dpowers FDD0  
                                _first 00FE                                  _enter 0067  
                      __end_of_isdigit 2992                                  _input 0079  
                                _putch 2AE4                                  pclath 000FFA  
                                tablat 000FF5                __size_of_moveServoBlock 0042  
                     __end_ofi2___wmul 29E0                       __end_ofi2_getRTC 218A  
                                status 000FD8                         __CFG_PBADEN$ON 000000  
                        i2printf@width 0028                       __end_ofi2_printf 0CC6  
                   __size_ofi2___lwdiv 0052                     __size_ofi2___lwmod 0042  
               moveServoCup@myPosition 0080                       __end_ofi2_strcpy 26D6  
                     _count_can_no_lab 00E1                        __initialization 1E78  
                   __size_ofi2_lcdInst 000C                           __end_of_main 201A  
                         __end_of_keys FDC6                           __end_of_sort 2A28  
                           i2printf@ap 001E                             i2printf@cp 0020  
                   __size_ofi2_isdigit 001E    __size_of_change_state_to_menu_start 002C  
                      ??_machineConfig 0080                                 ??_main 00D4  
                               ??_sort 008E                          __activetblptr 000003  
                           i2strcpy@cp 0005                             i2strcpy@to 0001  
                    ?_I2C_Master_Start 0001                      ?_I2C_Master_Write 0081  
                               ?_getIR 0001                     ??_I2C_Master_Start 0081  
                               _ADCON0 000FC2                                 _ADCON1 000FC1  
                   ??_I2C_Master_Write 0083                                 _ADRESH 000FC4  
                               _ADRESL 000FC3                       ___awdiv@dividend 0086  
                      i2lcdNibble@data 0002                                 ?_putch 0001  
               __size_of_initSortTimer 00AA                        i2lcdNibble@temp 0001  
            i2_change_state_to_menu_12 2706              i2_change_state_to_menu_22 26D6  
                               _INT1IE 007F83                                 _INT1IF 007F80  
                               _CVRCON 000FB5                                 i2l1404 191C  
                               i2l1077 12DE                                 i2l1409 1964  
                               i2l5100 1778                                 i2l4310 2A60  
                               i2l5110 179E                                 i2l4320 2484  
                               i2l5120 17C0                                 i2l5104 1794  
                               i2l4322 248C                                 i2l5114 17B2  
                               i2l5050 16CC                                 i2l4332 24AC  
                               i2l4324 2490                                 i2l4340 2556  
                               i2l5116 17B6                                 i2l5060 16EA  
                               i2l4342 255E                                 i2l5150 182E  
                               i2l5142 180A                                 i2l5134 17E6  
                               i2l5070 1708                                 i2l5062 16F0  
                               i2l5046 16B8                                 i2l5038 169E  
                               i2l4344 2562                                 i2l4600 0ACC  
                               i2l5128 17D8                                 i2l5064 16F6  
                               i2l5048 16C8                                 i2l5056 16D6  
                               i2l6008 195A                                 i2l4602 0AD2  
                               i2l5146 181C                                 i2l5138 17F8  
                               i2l5066 16FC                                 i2l5074 170E  
                               i2l1883 24B6                                 i2l4348 2576  
                               i2l4604 0AE4                                 i2l4612 0B20  
                               i2l5068 1702                                 i2l5156 1838  
                               i2l1893 2580                                 i2l4286 2A00  
                               i2l4542 2150                                 i2l4614 0B50  
                               i2l5094 176A                                 i2l5086 1752  
                               i2l4552 217A                                 i2l4624 0B78  
                               i2l4608 0B0E                                 i2l4560 099A  
                               i2l4546 2160                                 i2l4650 0BF4  
                               i2l4626 0B7C                                 i2l4562 09A8  
                               i2l6162 1726                                 i2l6154 1200  
                               i2l4644 0BC8                                 i2l4580 0A42  
                               i2l4572 09E0                                 i2l4556 098A  
                               i2l6164 1742                                 i2l6156 1222  
                               i2l5700 1070                                 i2l4662 0C20  
                               i2l4638 0BAE                                 i2l4590 0A74  
                               i2l4566 09AE                                 i2l6158 123E  
                               i2l4664 0C28                                 i2l4672 0C4E  
                               i2l4656 0C0A                                 i2l4648 0BEC  
                               i2l4592 0A78                                 i2l4680 0CAA  
                               i2l5720 10BE                                 i2l5712 10A2  
                               i2l5704 107E                                 i2l4674 0C54  
                               i2l4668 0C3C                                 i2l4588 0A6A  
                               i2l4684 26AE                                 i2l5740 1114  
                               i2l5732 10F0                                 i2l5724 10D4  
                               i2l5716 10B0                                 i2l5708 1094  
                               i2l5660 0FF0                                 i2l5652 0FD4  
                               i2l4678 0CA2                                 i2l4598 0AC2  
                               i2l4686 26B6                                 i2l4950 1340  
                               i2l4942 12E8                                 i2l5646 0FC0  
                               i2l5904 15BE                                 i2l4960 13AE  
                               i2l4952 1356                                 i2l4944 12FE  
                               i2l4936 127C                                 i2l5760 1162  
                               i2l5752 113E                                 i2l5744 1122  
                               i2l5736 10FE                                 i2l5728 10E2  
                               i2l5680 1028                                 i2l5672 100C  
                               i2l5664 0FFE                                 i2l5656 0FE2  
                               i2l5648 0FC6                                 i2l4962 13C4  
                               i2l4954 136C                                 i2l4946 1314  
                               i2l4970 144A                                 i2l4964 13DA  
                               i2l4956 1382                                 i2l4948 132A  
                               i2l5780 11B0                                 i2l5772 1194  
                               i2l5764 1170                                 i2l5756 1154  
                               i2l5748 1130                                 i2l5692 1054  
                               i2l5684 1038                                 i2l5676 101A  
                               i2l4958 1398                                 i2l4968 13F0  
                               i2l5784 11BE                                 i2l5776 11A2  
                               i2l5768 117E                                 i2l5696 1062  
                               i2l5688 1046                                 i2l5960 18D4  
                               i2l5794 11E2                                 i2l5884 1492  
                               i2l5788 11D4                                 i2l5894 14FC  
                               i2l5974 18F0                                 i2l5888 14A2  
                               i2l5996 192E                                 i2l5998 1930  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                                 _TMR3CF 00DF  
                            ??i2_putch 0003                                 _TMR1IE 007CE8  
                               _TMR1IF 007CF0                                 _TMR2IE 007CE9  
                               _TMR3IE 007D01                                 _TMR3IF 007D09  
                               _TMR0ON 007EAF                                 _TMR1ON 007E68  
                               _TMR3ON 007D88                                 _SSPADD 000FC8  
                               _TRISC3 007CA3                                 _TRISC4 007CA4  
                               _SSPBUF 000FC9                              ??_Loading 008A  
                       __CFG_XINST$OFF 000000                       __end_of_dispLogs 2AC0  
                          ?i2_printRTC 0001                   __end_of_Distribution 28B4  
                               ___wmul 266E                              ??___awdiv 008A  
                       __CFG_STVREN$ON 000000                              ??___awmod 0084  
                               _getRTC 201A                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 2A4A  
                               _initUI 2A68                                 _readIR 2316  
                               clear_0 1EDE                                 clear_1 1EEA  
                               clear_2 1EF6                       ___awdiv@quotient 008C  
                      ___awmod@divisor 0082                             _PortTestA5 2AC0  
                      ___awmod@counter 0084                              ??_lcdInst 0082  
                               _printf 0576                              ??_handler 004B  
                               _strcpy 2638                              ??_readADC 0080  
                            ??_initLCD 0083                              ??_loadRTC 0095  
                            ??_readMAG 0082   __end_ofi2_change_state_to_menu_start 29BA  
__size_ofi2_change_state_to_menu_start 0028           i2_change_state_to_menu_start 2992  
                         __pdataCOMRAM 007A                              ??_isdigit 0080  
                    __end_ofi2___lwdiv 24C0                       __end_of_printRTC 0F90  
                         __mediumconst FDB4                      __end_ofi2___lwmod 258A  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                      __end_ofi2_lcdInst 2B1C  
                    __end_ofi2_isdigit 2A68                             __accesstop 0080  
              __end_of__initialization 1EFC                          ?_inputHandler 002A  
                        ___rparam_used 000001                printSortTimer@start_sec 003B  
                   i2___lwmod@dividend 0001                         __pcstackCOMRAM 0001  
                         __pidataBANK0 2B30                           __pidataBANK1 2B5C  
                        __end_of_getIR 2254                            i2printRTC@i 0041  
                        _initSortTimer 1BF8                          __end_of_putch 2AF4  
                          i2printf@len 0024                            i2printf@val 0022  
                           __end_of_ID 1A7E                             __end_of_UI 0576  
                   printSortTimer@hour 003F                              ?i2___wmul 0001  
                   __size_of_lcdNibble 0068                              ?i2_getRTC 0001  
                          i2putch@data 0003                  printSortTimer@curTime 002D  
   __end_of_change_state_to_menu_start 2968          ?i2_change_state_to_menu_start 0001  
           _change_state_to_menu_start 293C                  printSortTimer@cur_sec 003D  
                            ?i2_printf 000D                                ??_getIR 0086  
                            ?i2_strcpy 0001                       _count_pop_no_tab 0061  
                  __size_ofi2_printRTC 0236                                ??_putch 0082  
                       _moveServoBlock 2506                             __pbssBANK0 00D4  
                           __pbssBANK1 0100                           ?_stopSignals 0001  
                       ??_inputHandler 002C                     __size_of_initFlags 003E  
             ?_change_state_to_menu_11 0001               ?_change_state_to_menu_12 0001  
             ?_change_state_to_menu_22 0001               ?_change_state_to_menu_23 0001  
             ?_change_state_to_logs_11 0001               ?_change_state_to_logs_12 0001  
             ?_change_state_to_logs_22 0001               ?_change_state_to_logs_23 0001  
             ?_change_state_to_logs_33 0001               ?_change_state_to_logs_34 0001  
                    printRTC@RTC_month 00BC                           ?i2_lcdNibble 0001  
                              UI@i_650 00CA                                UI@i_651 00CB  
                       ?_initSortTimer 0001                                UI@i_662 00D0  
                              UI@i_654 00CC                                UI@i_646 00C8  
                              UI@i_663 00D1                                UI@i_655 00CD  
                              UI@i_647 00C9                                UI@i_666 00D2  
                              UI@i_658 00CE                                UI@i_667 00D3  
                              UI@i_659 00CF                                ?___wmul 0080  
                              ?_getRTC 0001                                ?_initUI 0001  
                              ?_readIR 0001                            ?_PortTestA5 0001  
                              ?_printf 008E              ID@top_bottom_conductivity 0088  
                              _UI$2164 00C5                                ?_strcpy 0080  
                           ??i2___wmul 0005                             ??i2_getRTC 0004  
                        ?_moveServoCup 0001                             ??i2_printf 0019  
               __end_of_moveServoBlock 2548                             ??i2_strcpy 0005  
                            ?_dispLogs 0001                                _SSPCON1 000FC6  
                              _SSPCON2 000FC5                                _SSPSTAT 000FC7  
                              i2_putch 2B04                              ?_initTime 0080  
                      _f_loadingNewCan 00EF                        i2printRTC@month 003D  
                __size_of_Distribution 002E            __size_ofi2_I2C_Master_Start 0008  
                    __end_of_lcdNibble 21F2                                _Loading 1CA2  
          __size_ofi2_I2C_Master_Write 000A                                __Hparam 0000  
                              __Lparam 0000     __size_ofi2_change_state_to_menu_12 0030  
   __size_ofi2_change_state_to_menu_22 0030                              ?_printRTC 0001  
                              ___awdiv 1A7E                                ___awmod 1D44  
                              ___lldiv 1B3C                        __size_of___wmul 0036  
                              ___lwdiv 20A0                                ___lwmod 2254  
                      __size_of_getRTC 0086                        printSortTimer@i 0049  
                            _CMCONbits 000FB4                                _canType 0078  
                      __size_of_initUI 001A                        __size_of_readIR 0056  
                              __pcinit 1E78                                __ramtop 1000  
                              _lcdInst 2AF4                                _handler 0008  
                              __ptext0 1F92                                __ptext1 2A82  
                              __ptext2 2A06                                __ptext3 1CA2  
                              __ptext4 1BF8                                __ptext5 258A  
                              __ptext6 21F2                                __ptext7 2316  
                              __ptext8 19A0                                __ptext9 236C  
                    __end_of_initFlags 25C8                        __size_of_printf 040A  
                       ??_moveServoCup 0080                                _readADC 2910  
                      __size_of_strcpy 0036                                _initLCD 24C0  
                              _loadRTC 1F06                                _readMAG 236C  
                              _dpowers FDC6                                _isdigit 2968  
                     ___awmod@dividend 0080                                getRTC@i 0083  
             __size_of_I2C_Master_Init 0060               __size_of_I2C_Master_Read 002E  
             __size_of_I2C_Master_Wait 0014               __size_of_I2C_Master_Stop 0008  
                              _was_low 0075                        ?_moveServoBlock 0001  
                           ??_dispLogs 0003                           _Distribution 2886  
                       __pintcode_body 1866                   end_of_initialization 1EFC  
                           ??_initTime 0086                                int_func 1866  
                  i2___wmul@multiplier 0001                    __size_of_PortTestA5 0012  
            __size_of_I2C_Master_Start 0008              __size_of_I2C_Master_Write 000A  
                      ___lldiv@divisor 0084                        ___lldiv@counter 008C  
                      ??_initSortTimer 0085                                printf@c 00A8  
                         ??i2_printRTC 002A                                printf@f 008E  
                           ??_printRTC 00AB                       I2C_Master_Init@c 008D  
                     I2C_Master_Read@a 0081                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc2 000FDE                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 1866  
                __end_of_machineConfig 2418                             _updateMenu 0F90  
                    i2_I2C_Master_Read 29E0                              _IR_signal 00DB  
                    i2_I2C_Master_Wait 2AD2                      i2_I2C_Master_Stop 2B48  
                    i2___lwdiv@divisor 0008                              i2___lwdiv 246E  
                            i2___lwmod 2548                      i2___lwdiv@counter 000C  
                   ?i2_I2C_Master_Read 0001                     ?i2_I2C_Master_Wait 0001  
                   __end_ofi2_printRTC 1486                     ?i2_I2C_Master_Stop 0001  
         ??_change_state_to_menu_start 00C4                              i2_lcdInst 2B10  
                           _total_time 00F5                            printf@width 00A9  
                 __size_of_stopSignals 0016                             ID@magnetic 008C  
                  ??i2_I2C_Master_Read 0002                              i2_isdigit 2A4A  
                  ??i2_I2C_Master_Wait 0001                    ??i2_I2C_Master_Stop 0002  
                            i2getRTC@i 0004                              _UIenabled 005D  
                       __end_of___wmul 26A4                         __end_of_getRTC 20A0  
                 __size_ofi2_lcdNibble 0056                          __pidataCOMRAM 2B58  
                        i2lcdInst@data 0003                         __end_of_initUI 2A82  
                       __end_of_readIR 236C                       i2___wmul@product 0005  
                       __end_of_printf 0980                         _timer1highbits 006B  
                         i2printf@flag 0026                         __end_of_strcpy 266E  
            __end_ofi2_I2C_Master_Read 2A06              __end_ofi2_I2C_Master_Wait 2AE4  
                         i2printf@prec 001D                    start_initialization 1E78  
            __end_ofi2_I2C_Master_Stop 2B50                             readMAG@res 0084  
                    __size_ofi2___wmul 0026                        _count_can_w_lab 00E3  
          ?_change_state_to_menu_start 0001                      __size_ofi2_getRTC 0072  
                       _timer3highbits 006F                              i2printf@c 0027  
                            i2printf@f 000D                  i2I2C_Master_Read@temp 0003  
                           ?i2___lwdiv 0006                             ?i2___lwmod 0001  
                    __size_ofi2_printf 0346                      __size_ofi2_strcpy 0032  
                    ??_I2C_Master_Init 0091                      ??_I2C_Master_Read 0081  
                    ??_I2C_Master_Wait 0080                             ?i2_lcdInst 0001  
                    ??_I2C_Master_Stop 0081                       __CFG_OSC$INTIO67 000000  
                 __end_of_moveServoCup 1E78                             ?i2_isdigit 0001  
                           initTime@DD 0083                             initTime@MM 0084  
                           initTime@YY 0085                               ??___wmul 0084  
                             ??_getRTC 0083                            __pdataBANK0 00F8  
                          __pdataBANK1 0110                       __CFG_LPT1OSC$OFF 000000  
                             ??_initUI 00C4                               ??_readIR 0082  
                         ??_PortTestA5 0080                 printSortTimer@timeDiff 0047  
     __size_of_change_state_to_menu_11 0030       __size_of_change_state_to_menu_12 0038  
     __size_of_change_state_to_menu_22 0038       __size_of_change_state_to_menu_23 0030  
                             ??_printf 009A       __size_of_change_state_to_logs_11 0030  
     __size_of_change_state_to_logs_12 0030       __size_of_change_state_to_logs_22 0030  
     __size_of_change_state_to_logs_23 002E       __size_of_change_state_to_logs_33 0030  
     __size_of_change_state_to_logs_34 0030                               ??_strcpy 0084  
                  _printSortTimer$2279 0045                            __pbssCOMRAM 005B  
                          ?_updateMenu 0001                          __pcstackBANK0 0080  
              __size_of_printSortTimer 01FA                      i2___lwmod@divisor 0003  
                    i2___lwmod@counter 0005                           _isdigit$1809 0081  
                       initSortTimer@i 0088                      printSortTimer@min 0041  
                    printSortTimer@sec 0043                      __size_of_dispLogs 0014  
                     printRTC@INT_time 00AE                           i2strcpy@from 0003  
                             ?i2_putch 0001                        _count_pop_w_tab 0063  
                   __end_of_PortTestA5 2AD2                       _I2C_Master_Start 2B40  
                            _f_lastCan 00ED                               ?_Loading 0001  
                  i2I2C_Master_Write@d 0002                       _I2C_Master_Write 2B1C  
                    __size_of_initTime 0022                       ___lwdiv@dividend 0080  
                    __CFG_CCP2MX$PORTC 000000                              __pintcode 0008  
                        __pmediumconst FDB4                              _lcdNibble 218A  
                __size_of_inputHandler 01E6                               ?___awdiv 0086  
                             ?___awmod 0080                               ?___lldiv 0080  
                             ?___lwdiv 0080                               ?___lwmod 0087  
                    __size_of_printRTC 02CA                               ?_lcdInst 0001  
                             ?_handler 0001                       ??_moveServoBlock 0080  
                             ?_readADC 0001                               ?_initLCD 0001  
                             ?_loadRTC 0001                               ?_readMAG 0001  
                             ?_isdigit 0001             __size_ofi2_I2C_Master_Read 0026  
           __size_ofi2_I2C_Master_Wait 0012             __size_ofi2_I2C_Master_Stop 0008  
                            _firstboot 0069                              _initFlags 258A  
                            _cur_state 00E7                       ___lwdiv@quotient 0084  
                       __size_of_getIR 0062                            ??i2___lwdiv 000A  
                          ??i2___lwmod 0005                         __size_of_putch 0010  
                          __size_of_ID 00DE                            __size_of_UI 0564  
           __end_ofi2_I2C_Master_Start 2B58             __end_ofi2_I2C_Master_Write 2B30  
                          ??i2_lcdInst 0003                         ___wmul@product 0084  
                             _LATAbits 000F89                               _LATCbits 000F8B  
                             _LATDbits 000F8C                           _inputHandler 1680  
                          ??i2_isdigit 0001                               i2u301_40 0AA6  
                             i2u301_47 0A9C                               i2u305_40 0B06  
                             i2u305_47 0AFC                               i2u251_40 29FE  
                             i2u501_47 16BE                               i2u502_47 2430  
                             i2u503_47 243A                               i2u336_40 12DE  
                             i2u504_47 245C                               i2u505_47 2466  
                             i2u461_40 15B8                    __size_of_updateMenu 02C0  
                     __CFG_WDTPS$32768 000000                             ?_lcdNibble 0001  
                  ID@side_conductivity 008A                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 0080                              _startTime 0100  
                             i2___wmul 29BA                          lcdNibble@data 0081  
                             i2_getRTC 2118                             printf@flag 00A7  
                        lcdNibble@temp 0080                             printf@prec 009E  
                           ?_initFlags 0001                               i2_printf 0980  
                             i2_strcpy 26A4                    I2C_Master_Read@temp 0082  
                            copy_data0 1E8C                              copy_data1 1EAC  
                            copy_data2 1ECC                  __size_of_moveServoCup 0092  
                            readIR@res 0084                       __size_ofi2_putch 000C  
                        _timer1lowbits 006D                            _count_total 00E5  
                             __Hrparam 0000                          _timer3lowbits 0071  
                     __size_of_Loading 00A2                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                  __end_of_initSortTimer 1CA2  
                     __size_of___awdiv 00BE                       __size_of___awmod 00A2  
              _change_state_to_menu_11 2766             ?i2_change_state_to_menu_12 0001  
              _change_state_to_menu_12 2600             ?i2_change_state_to_menu_22 0001  
              _change_state_to_menu_22 25C8                _change_state_to_menu_23 2736  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 00BC  
                     __size_of___lwdiv 0078                _change_state_to_logs_11 2856  
              _change_state_to_logs_12 2826                _change_state_to_logs_22 27F6  
              _change_state_to_logs_23 28E2                _change_state_to_logs_33 27C6  
              _change_state_to_logs_34 2796                       __size_of___lwmod 0062  
                       readADC@channel 0081                     i2I2C_Master_Read@a 0002  
                     __size_of_lcdInst 0010                       __size_of_handler 1998  
                     _timer1_20ms_high 007A                        _I2C_Master_Init 22B6  
                     __size_of_readADC 002C                        _I2C_Master_Read 28B4  
                     __size_of_initLCD 0046                           _f_ID_receive 00FC  
                         _moveServoCup 1DE6                       __size_of_loadRTC 008C  
                     __size_of_readMAG 0056                        _I2C_Master_Wait 2A98  
                      _I2C_Master_Stop 2B38                       __size_of_isdigit 002A  
                       _printSortTimer 1486                        ___lwdiv@divisor 0082  
                      ___lwdiv@counter 0086                               __ptext10 2910  
                             __ptext11 2506                               __ptext20 2A28  
                             __ptext12 2886                               __ptext21 24C0  
                             __ptext13 1DE6                               __ptext30 2A98  
                             __ptext22 0012                               __ptext14 23C2  
                             __ptext31 25C8                               __ptext23 0CC6  
                             __ptext15 2A68                               __ptext40 218A  
                             __ptext32 2600                               __ptext24 2638  
                             __ptext16 1F06                               __ptext41 1D44  
                             __ptext33 0576                               __ptext25 201A  
                             __ptext17 22B6                               __ptext50 26D6  
                             __ptext42 1A7E                               __ptext34 2AE4  
                             __ptext26 2B1C                               __ptext18 1B3C  
                             __ptext51 2706                               __ptext43 2AC0  
                             __ptext35 2968                               __ptext27 2B38  
                             __ptext19 293C                               __ptext60 2AAC  
                             __ptext52 2736                               __ptext36 266E  
                             __ptext28 2B40                               __ptext61 1486  
                             __ptext53 2766                               __ptext45 0F90  
                             __ptext37 2254                               __ptext29 28B4  
                             __ptext70 2118                               __ptext62 0980  
                             __ptext54 2796                               __ptext46 2992  
                             __ptext38 20A0                               __ptext71 2B26  
                             __ptext63 2B04                               __ptext55 27C6  
                             __ptext47 1250                               __ptext39 2AF4  
                             __ptext72 2B48                               __ptext64 2A4A  
                             __ptext56 28E2                               __ptext48 26A4  
                             __ptext73 2B50                               __ptext65 29BA  
                             __ptext57 27F6                               __ptext49 1680  
                             __ptext74 29E0                               __ptext66 2548  
                             __ptext58 2826                               __ptext75 2AD2  
                             __ptext67 246E                               __ptext59 2856  
                             __ptext68 2B10                               __ptext69 2418  
                             _dispLogs 2AAC                          ??_stopSignals 0080  
                           strcpy@from 0082                         i2_isdigit$1809 0002  
                             _initTime 2A28                          __size_of_main 0088  
                        __size_of_sort 0022         ??i2_change_state_to_menu_start 0043  
                             _logstate 00F3                 __size_of_machineConfig 0056  
                        ??i2_lcdNibble 0001                               _printRTC 0CC6  
                          ??_lcdNibble 0080                              printRTC@i 00C2  
                             int$flags 007E                     _f_can_coming_to_ID 00E9  
                            printf@len 00A5                              printf@val 00A3  
    __end_ofi2_change_state_to_menu_12 2736      __end_ofi2_change_state_to_menu_22 2706  
                             loadRTC@i 0096                 __end_of_printSortTimer 1680  
                            putch@data 0082               __end_of_I2C_Master_Start 2B48  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 2B26  
                           _INTCONbits 000FF2                           ??_updateMenu 0043  
                          ??_initFlags 0080                             _MAG_signal 00DD  
                             isdigit@c 0082                               intlevel2 0000  
                      _timer1_20ms_low 007C                       ___lwmod@dividend 0087  
                     ___lldiv@dividend 0080                    __end_of_stopSignals 2A98  
            ??_change_state_to_menu_11 002A              ??_change_state_to_menu_12 00AB  
            ??_change_state_to_menu_22 00AB              ??_change_state_to_menu_23 002A  
            ??_change_state_to_logs_11 002A              ??_change_state_to_logs_12 002A  
            ??_change_state_to_logs_22 002A              ??_change_state_to_logs_23 002A  
            ??_change_state_to_logs_33 002A              ??_change_state_to_logs_34 002A  
                             printf@ap 009F                               printf@cp 00A1  
                   __end_of_updateMenu 1250                __end_of_I2C_Master_Init 2316  
              __end_of_I2C_Master_Read 28E2                __end_of_I2C_Master_Wait 2AAC  
              __end_of_I2C_Master_Stop 2B40                          printRTC@F3207 0110  
                          lcdInst@data 0082                    __end_ofi2_lcdNibble 246E  
                      ?_printSortTimer 0001                       ___lldiv@quotient 0088  
                    I2C_Master_Write@d 0081                        ___lwmod@divisor 0089  
                    _f_can_distributed 010E                               strcpy@cp 0084  
                             strcpy@to 0080                          _machineConfig 23C2  
                      ___lwmod@counter 008B               moveServoBlock@myPosition 0080  
                          _TMR3counter 005B                          printRTC@month 00BE  
                        ?_Distribution 0001                          _machine_state 00F7  
                        dispLogs@myLog 0001                     i2printRTC@INT_time 002D  
