

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Fri Mar 24 21:52:13 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   108                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   109                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   110  0000                     
   111                           ; Version 1.40
   112                           ; Generated 01/12/2016 GMT
   113                           ; 
   114                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   115                           ; All rights reserved.
   116                           ; 
   117                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   118                           ; 
   119                           ; Redistribution and use in source and binary forms, with or without modification, are
   120                           ; permitted provided that the following conditions are met:
   121                           ; 
   122                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   123                           ;        conditions and the following disclaimer.
   124                           ; 
   125                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   126                           ;        of conditions and the following disclaimer in the documentation and/or other
   127                           ;        materials provided with the distribution.
   128                           ; 
   129                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   130                           ;        software without specific prior written permission.
   131                           ; 
   132                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   133                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   134                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   135                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   136                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   137                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   138                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   139                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   140                           ; 
   141                           ; 
   142                           ; Code-generator required, PIC18F4620 Definitions
   143                           ; 
   144                           ; SFR Addresses
   145  0000                     
   146                           	psect	idataBANK1
   147  004888                     __pidataBANK1:
   148                           	opt stack 0
   149                           
   150                           ;initializer for UI@F3225
   151  004888  4D                 	db	77
   152  004889  4D                 	db	77
   153  00488A  4D                 	db	77
   154  00488B  00                 	db	0
   155                           
   156                           ;initializer for printRTC@F3216
   157  00488C  4D                 	db	77
   158  00488D  4D                 	db	77
   159  00488E  4D                 	db	77
   160  00488F  00                 	db	0
   161                           
   162                           	psect	mediumconst
   163  00FB12                     __pmediumconst:
   164                           	opt stack 0
   165  00FB12  00                 	db	0
   166  00FB13                     _keys:
   167                           	opt stack 0
   168  00FB13  31                 	db	49
   169  00FB14  32                 	db	50
   170  00FB15  33                 	db	51
   171  00FB16  41                 	db	65
   172  00FB17  34                 	db	52
   173  00FB18  35                 	db	53
   174  00FB19  36                 	db	54
   175  00FB1A  42                 	db	66
   176  00FB1B  37                 	db	55
   177  00FB1C  38                 	db	56
   178  00FB1D  39                 	db	57
   179  00FB1E  43                 	db	67
   180  00FB1F  2A                 	db	42
   181  00FB20  30                 	db	48
   182  00FB21  23                 	db	35
   183  00FB22  44                 	db	68
   184  00FB23  00                 	db	0
   185  00FB24                     __end_of_keys:
   186                           	opt stack 0
   187  00FB24                     _dpowers:
   188                           	opt stack 0
   189  00FB24  0001               	dw	1
   190  00FB26  000A               	dw	10
   191  00FB28  0064               	dw	100
   192  00FB2A  03E8               	dw	1000
   193  00FB2C  2710               	dw	10000
   194  00FB2E                     __end_of_dpowers:
   195                           	opt stack 0
   196  0000                     _ADCON0	set	4034
   197  0000                     _ADCON0bits	set	4034
   198  0000                     _ADCON1	set	4033
   199  0000                     _ADCON2	set	4032
   200  0000                     _ADRESH	set	4036
   201  0000                     _ADRESL	set	4035
   202  0000                     _CMCONbits	set	4020
   203  0000                     _CVRCON	set	4021
   204  0000                     _EEADR	set	4009
   205  0000                     _EEADRH	set	4010
   206  0000                     _EECON1bits	set	4006
   207  0000                     _EECON2	set	4007
   208  0000                     _EEDATA	set	4008
   209  0000                     _INTCONbits	set	4082
   210  0000                     _LATA	set	3977
   211  0000                     _LATAbits	set	3977
   212  0000                     _LATB	set	3978
   213  0000                     _LATC	set	3979
   214  0000                     _LATCbits	set	3979
   215  0000                     _LATD	set	3980
   216  0000                     _LATDbits	set	3980
   217  0000                     _LATE	set	3981
   218  0000                     _LATEbits	set	3981
   219  0000                     _OSCCON	set	4051
   220  0000                     _OSCTUNEbits	set	3995
   221  0000                     _PIR2bits	set	4001
   222  0000                     _PORTAbits	set	3968
   223  0000                     _PORTB	set	3969
   224  0000                     _PORTBbits	set	3969
   225  0000                     _SSPADD	set	4040
   226  0000                     _SSPBUF	set	4041
   227  0000                     _SSPCON1	set	4038
   228  0000                     _SSPCON2	set	4037
   229  0000                     _SSPSTAT	set	4039
   230  0000                     _T0CON	set	4053
   231  0000                     _T1CON	set	4045
   232  0000                     _T3CON	set	4017
   233  0000                     _TMR0H	set	4055
   234  0000                     _TMR0L	set	4054
   235  0000                     _TMR1H	set	4047
   236  0000                     _TMR1L	set	4046
   237  0000                     _TMR3H	set	4019
   238  0000                     _TMR3L	set	4018
   239  0000                     _TRISA	set	3986
   240  0000                     _TRISB	set	3987
   241  0000                     _TRISC	set	3988
   242  0000                     _TRISD	set	3989
   243  0000                     _TRISE	set	3990
   244  0000                     _ACKDT	set	32301
   245  0000                     _ACKEN	set	32300
   246  0000                     _ADIE	set	31982
   247  0000                     _INT1IE	set	32643
   248  0000                     _INT1IF	set	32640
   249  0000                     _PEIE	set	32662
   250  0000                     _PEN	set	32298
   251  0000                     _RCEN	set	32299
   252  0000                     _RSEN	set	32297
   253  0000                     _SEN	set	32296
   254  0000                     _TMR0IE	set	32661
   255  0000                     _TMR0IF	set	32658
   256  0000                     _TMR0ON	set	32431
   257  0000                     _TMR1IE	set	31976
   258  0000                     _TMR1IF	set	31984
   259  0000                     _TMR1ON	set	32360
   260  0000                     _TMR2IE	set	31977
   261  0000                     _TMR3IE	set	32001
   262  0000                     _TMR3IF	set	32009
   263  0000                     _TMR3ON	set	32136
   264  0000                     _TRISC3	set	31907
   265  0000                     _TRISC4	set	31908
   266  0000                     _nRBPU	set	32655
   267  00FB2E                     STR_21:
   268  00FB2E  25                 	db	37
   269  00FB2F  30                 	db	48	;'0'
   270  00FB30  32                 	db	50	;'2'
   271  00FB31  64                 	db	100	;'d'
   272  00FB32  25                 	db	37
   273  00FB33  73                 	db	115	;'s'
   274  00FB34  20                 	db	32
   275  00FB35  7C                 	db	124
   276  00FB36  20                 	db	32
   277  00FB37  25                 	db	37
   278  00FB38  30                 	db	48	;'0'
   279  00FB39  32                 	db	50	;'2'
   280  00FB3A  64                 	db	100	;'d'
   281  00FB3B  3A                 	db	58	;':'
   282  00FB3C  25                 	db	37
   283  00FB3D  30                 	db	48	;'0'
   284  00FB3E  32                 	db	50	;'2'
   285  00FB3F  64                 	db	100	;'d'
   286  00FB40  3A                 	db	58	;':'
   287  00FB41  25                 	db	37
   288  00FB42  30                 	db	48	;'0'
   289  00FB43  32                 	db	50	;'2'
   290  00FB44  64                 	db	100	;'d'
   291  00FB45  00                 	db	0
   292  00FB46                     STR_66:
   293  00FB46  28                 	db	40
   294  00FB47  64                 	db	100	;'d'
   295  00FB48  61                 	db	97	;'a'
   296  00FB49  74                 	db	116	;'t'
   297  00FB4A  61                 	db	97	;'a'
   298  00FB4B  3A                 	db	58	;':'
   299  00FB4C  20                 	db	32
   300  00FB4D  25                 	db	37
   301  00FB4E  75                 	db	117	;'u'
   302  00FB4F  2C                 	db	44
   303  00FB50  20                 	db	32
   304  00FB51  61                 	db	97	;'a'
   305  00FB52  64                 	db	100	;'d'
   306  00FB53  64                 	db	100	;'d'
   307  00FB54  72                 	db	114	;'r'
   308  00FB55  3A                 	db	58	;':'
   309  00FB56  20                 	db	32
   310  00FB57  25                 	db	37
   311  00FB58  75                 	db	117	;'u'
   312  00FB59  29                 	db	41
   313  00FB5A  00                 	db	0
   314  00FB5B                     STR_111:
   315  00FB5B  44                 	db	68	;'D'
   316  00FB5C  20                 	db	32
   317  00FB5D  57                 	db	87	;'W'
   318  00FB5E  49                 	db	73	;'I'
   319  00FB5F  4C                 	db	76	;'L'
   320  00FB60  4C                 	db	76	;'L'
   321  00FB61  20                 	db	32
   322  00FB62  52                 	db	82	;'R'
   323  00FB63  45                 	db	69	;'E'
   324  00FB64  54                 	db	84	;'T'
   325  00FB65  55                 	db	85	;'U'
   326  00FB66  52                 	db	82	;'R'
   327  00FB67  4E                 	db	78	;'N'
   328  00FB68  20                 	db	32
   329  00FB69  20                 	db	32
   330  00FB6A  20                 	db	32
   331  00FB6B  20                 	db	32
   332  00FB6C  00                 	db	0
   333  00FB6D                     STR_112:
   334  00FB6D  4F                 	db	79	;'O'
   335  00FB6E  54                 	db	84	;'T'
   336  00FB6F  48                 	db	72	;'H'
   337  00FB70  45                 	db	69	;'E'
   338  00FB71  52                 	db	82	;'R'
   339  00FB72  20                 	db	32
   340  00FB73  53                 	db	83	;'S'
   341  00FB74  45                 	db	69	;'E'
   342  00FB75  54                 	db	84	;'T'
   343  00FB76  53                 	db	83	;'S'
   344  00FB77  20                 	db	32
   345  00FB78  52                 	db	82	;'R'
   346  00FB79  41                 	db	65	;'A'
   347  00FB7A  35                 	db	53	;'5'
   348  00FB7B  20                 	db	32
   349  00FB7C  20                 	db	32
   350  00FB7D  20                 	db	32
   351  00FB7E  00                 	db	0
   352  00FB7F                     STR_116:
   353  00FB7F  53                 	db	83	;'S'
   354  00FB80  3A                 	db	58	;':'
   355  00FB81  20                 	db	32
   356  00FB82  44                 	db	68	;'D'
   357  00FB83  20                 	db	32
   358  00FB84  57                 	db	87	;'W'
   359  00FB85  49                 	db	73	;'I'
   360  00FB86  4C                 	db	76	;'L'
   361  00FB87  4C                 	db	76	;'L'
   362  00FB88  20                 	db	32
   363  00FB89  52                 	db	82	;'R'
   364  00FB8A  45                 	db	69	;'E'
   365  00FB8B  54                 	db	84	;'T'
   366  00FB8C  55                 	db	85	;'U'
   367  00FB8D  52                 	db	82	;'R'
   368  00FB8E  4E                 	db	78	;'N'
   369  00FB8F  20                 	db	32
   370  00FB90  00                 	db	0
   371  00FB91                     STR_3:
   372  00FB91  2D                 	db	45
   373  00FB92  2D                 	db	45
   374  00FB93  20                 	db	32
   375  00FB94  4C                 	db	76	;'L'
   376  00FB95  4F                 	db	79	;'O'
   377  00FB96  47                 	db	71	;'G'
   378  00FB97  20                 	db	32
   379  00FB98  25                 	db	37
   380  00FB99  32                 	db	50	;'2'
   381  00FB9A  64                 	db	100	;'d'
   382  00FB9B  20                 	db	32
   383  00FB9C  48                 	db	72	;'H'
   384  00FB9D  45                 	db	69	;'E'
   385  00FB9E  52                 	db	82	;'R'
   386  00FB9F  45                 	db	69	;'E'
   387  00FBA0  2D                 	db	45
   388  00FBA1  2D                 	db	45
   389  00FBA2  00                 	db	0
   390  00FBA3                     STR_1:
   391  00FBA3  52                 	db	82	;'R'
   392  00FBA4  45                 	db	69	;'E'
   393  00FBA5  53                 	db	83	;'S'
   394  00FBA6  55                 	db	85	;'U'
   395  00FBA7  4C                 	db	76	;'L'
   396  00FBA8  54                 	db	84	;'T'
   397  00FBA9  53                 	db	83	;'S'
   398  00FBAA  20                 	db	32
   399  00FBAB  49                 	db	73	;'I'
   400  00FBAC  4E                 	db	78	;'N'
   401  00FBAD  20                 	db	32
   402  00FBAE  4C                 	db	76	;'L'
   403  00FBAF  4F                 	db	79	;'O'
   404  00FBB0  47                 	db	71	;'G'
   405  00FBB1  20                 	db	32
   406  00FBB2  25                 	db	37
   407  00FBB3  64                 	db	100	;'d'
   408  00FBB4  00                 	db	0
   409  00FBB5                     STR_102:
   410  00FBB5  4D                 	db	77	;'M'
   411  00FBB6  49                 	db	73	;'I'
   412  00FBB7  44                 	db	68	;'D'
   413  00FBB8  20                 	db	32
   414  00FBB9  2D                 	db	45
   415  00FBBA  2D                 	db	45
   416  00FBBB  20                 	db	32
   417  00FBBC  32                 	db	50	;'2'
   418  00FBBD  73                 	db	115	;'s'
   419  00FBBE  20                 	db	32
   420  00FBBF  20                 	db	32
   421  00FBC0  20                 	db	32
   422  00FBC1  20                 	db	32
   423  00FBC2  20                 	db	32
   424  00FBC3  20                 	db	32
   425  00FBC4  20                 	db	32
   426  00FBC5  00                 	db	0
   427  00FBC6                     STR_105:
   428  00FBC6  44                 	db	68	;'D'
   429  00FBC7  52                 	db	82	;'R'
   430  00FBC8  4F                 	db	79	;'O'
   431  00FBC9  50                 	db	80	;'P'
   432  00FBCA  20                 	db	32
   433  00FBCB  2D                 	db	45
   434  00FBCC  2D                 	db	45
   435  00FBCD  20                 	db	32
   436  00FBCE  32                 	db	50	;'2'
   437  00FBCF  73                 	db	115	;'s'
   438  00FBD0  20                 	db	32
   439  00FBD1  20                 	db	32
   440  00FBD2  20                 	db	32
   441  00FBD3  20                 	db	32
   442  00FBD4  20                 	db	32
   443  00FBD5  20                 	db	32
   444  00FBD6  00                 	db	0
   445  00FBD7                     STR_99:
   446  00FBD7  4C                 	db	76	;'L'
   447  00FBD8  45                 	db	69	;'E'
   448  00FBD9  46                 	db	70	;'F'
   449  00FBDA  54                 	db	84	;'T'
   450  00FBDB  20                 	db	32
   451  00FBDC  2D                 	db	45
   452  00FBDD  2D                 	db	45
   453  00FBDE  20                 	db	32
   454  00FBDF  32                 	db	50	;'2'
   455  00FBE0  73                 	db	115	;'s'
   456  00FBE1  20                 	db	32
   457  00FBE2  20                 	db	32
   458  00FBE3  20                 	db	32
   459  00FBE4  20                 	db	32
   460  00FBE5  20                 	db	32
   461  00FBE6  20                 	db	32
   462  00FBE7  00                 	db	0
   463  00FBE8                     STR_104:
   464  00FBE8  4C                 	db	76	;'L'
   465  00FBE9  45                 	db	69	;'E'
   466  00FBEA  56                 	db	86	;'V'
   467  00FBEB  45                 	db	69	;'E'
   468  00FBEC  4C                 	db	76	;'L'
   469  00FBED  20                 	db	32
   470  00FBEE  2D                 	db	45
   471  00FBEF  2D                 	db	45
   472  00FBF0  20                 	db	32
   473  00FBF1  32                 	db	50	;'2'
   474  00FBF2  73                 	db	115	;'s'
   475  00FBF3  20                 	db	32
   476  00FBF4  20                 	db	32
   477  00FBF5  20                 	db	32
   478  00FBF6  20                 	db	32
   479  00FBF7  20                 	db	32
   480  00FBF8  00                 	db	0
   481  00FBF9                     STR_98:
   482  00FBF9  52                 	db	82	;'R'
   483  00FBFA  49                 	db	73	;'I'
   484  00FBFB  47                 	db	71	;'G'
   485  00FBFC  48                 	db	72	;'H'
   486  00FBFD  54                 	db	84	;'T'
   487  00FBFE  20                 	db	32
   488  00FBFF  2D                 	db	45
   489  00FC00  2D                 	db	45
   490  00FC01  20                 	db	32
   491  00FC02  32                 	db	50	;'2'
   492  00FC03  73                 	db	115	;'s'
   493  00FC04  20                 	db	32
   494  00FC05  20                 	db	32
   495  00FC06  20                 	db	32
   496  00FC07  20                 	db	32
   497  00FC08  20                 	db	32
   498  00FC09  00                 	db	0
   499  00FC0A                     STR_97:
   500  00FC0A  4D                 	db	77	;'M'
   501  00FC0B  49                 	db	73	;'I'
   502  00FC0C  44                 	db	68	;'D'
   503  00FC0D  44                 	db	68	;'D'
   504  00FC0E  4C                 	db	76	;'L'
   505  00FC0F  45                 	db	69	;'E'
   506  00FC10  20                 	db	32
   507  00FC11  2D                 	db	45
   508  00FC12  2D                 	db	45
   509  00FC13  20                 	db	32
   510  00FC14  32                 	db	50	;'2'
   511  00FC15  73                 	db	115	;'s'
   512  00FC16  20                 	db	32
   513  00FC17  20                 	db	32
   514  00FC18  20                 	db	32
   515  00FC19  20                 	db	32
   516  00FC1A  00                 	db	0
   517  00FC1B  44                 	db	68	;'D'
   518  00FC1C  20                 	db	32
   519  00FC1D  57                 	db	87	;'W'
   520  00FC1E  49                 	db	73	;'I'
   521  00FC1F  4C                 	db	76	;'L'
   522  00FC20  4C                 	db	76	;'L'
   523  00FC21  20                 	db	32
   524  00FC22  52                 	db	82	;'R'
   525  00FC23  45                 	db	69	;'E'
   526  00FC24  54                 	db	84	;'T'
   527  00FC25  55                 	db	85	;'U'
   528  00FC26  52                 	db	82	;'R'
   529  00FC27  4E                 	db	78	;'N'
   530  00FC28  20                 	db	32
   531  00FC29  20                 	db	32
   532  00FC2A  20                 	db	32
   533  00FC2B  00                 	db	0
   534  00FC2C                     STR_100:
   535  00FC2C  4D                 	db	77	;'M'
   536  00FC2D  49                 	db	73	;'I'
   537  00FC2E  44                 	db	68	;'D'
   538  00FC2F  2D                 	db	45
   539  00FC30  4C                 	db	76	;'L'
   540  00FC31  45                 	db	69	;'E'
   541  00FC32  46                 	db	70	;'F'
   542  00FC33  54                 	db	84	;'T'
   543  00FC34  20                 	db	32
   544  00FC35  2D                 	db	45
   545  00FC36  2D                 	db	45
   546  00FC37  20                 	db	32
   547  00FC38  32                 	db	50	;'2'
   548  00FC39  73                 	db	115	;'s'
   549  00FC3A  20                 	db	32
   550  00FC3B  20                 	db	32
   551  00FC3C  00                 	db	0
   552  00FC3D                     STR_101:
   553  00FC3D  4D                 	db	77	;'M'
   554  00FC3E  49                 	db	73	;'I'
   555  00FC3F  44                 	db	68	;'D'
   556  00FC40  2D                 	db	45
   557  00FC41  52                 	db	82	;'R'
   558  00FC42  49                 	db	73	;'I'
   559  00FC43  47                 	db	71	;'G'
   560  00FC44  48                 	db	72	;'H'
   561  00FC45  54                 	db	84	;'T'
   562  00FC46  20                 	db	32
   563  00FC47  2D                 	db	45
   564  00FC48  2D                 	db	45
   565  00FC49  20                 	db	32
   566  00FC4A  32                 	db	50	;'2'
   567  00FC4B  73                 	db	115	;'s'
   568  00FC4C  20                 	db	32
   569  00FC4D  00                 	db	0
   570  00FC4E  45                 	db	69	;'E'
   571  00FC4F  4C                 	db	76	;'L'
   572  00FC50  53                 	db	83	;'S'
   573  00FC51  45                 	db	69	;'E'
   574  00FC52  20                 	db	32
   575  00FC53  54                 	db	84	;'T'
   576  00FC54  4F                 	db	79	;'O'
   577  00FC55  47                 	db	71	;'G'
   578  00FC56  47                 	db	71	;'G'
   579  00FC57  4C                 	db	76	;'L'
   580  00FC58  45                 	db	69	;'E'
   581  00FC59  53                 	db	83	;'S'
   582  00FC5A  20                 	db	32
   583  00FC5B  52                 	db	82	;'R'
   584  00FC5C  41                 	db	65	;'A'
   585  00FC5D  35                 	db	53	;'5'
   586  00FC5E  00                 	db	0
   587  00FC5F                     STR_72:
   588  00FC5F  41                 	db	65	;'A'
   589  00FC60  4C                 	db	76	;'L'
   590  00FC61  47                 	db	71	;'G'
   591  00FC62  31                 	db	49	;'1'
   592  00FC63  3A                 	db	58	;':'
   593  00FC64  20                 	db	32
   594  00FC65  39                 	db	57	;'9'
   595  00FC66  20                 	db	32
   596  00FC67  50                 	db	80	;'P'
   597  00FC68  4F                 	db	79	;'O'
   598  00FC69  50                 	db	80	;'P'
   599  00FC6A  4E                 	db	78	;'N'
   600  00FC6B  4F                 	db	79	;'O'
   601  00FC6C  54                 	db	84	;'T'
   602  00FC6D  41                 	db	65	;'A'
   603  00FC6E  42                 	db	66	;'B'
   604  00FC6F  00                 	db	0
   605  00FC70                     STR_68:
   606  00FC70  31                 	db	49	;'1'
   607  00FC71  2E                 	db	46
   608  00FC72  41                 	db	65	;'A'
   609  00FC73  4C                 	db	76	;'L'
   610  00FC74  47                 	db	71	;'G'
   611  00FC75  7C                 	db	124
   612  00FC76  32                 	db	50	;'2'
   613  00FC77  2E                 	db	46
   614  00FC78  53                 	db	83	;'S'
   615  00FC79  4E                 	db	78	;'N'
   616  00FC7A  52                 	db	82	;'R'
   617  00FC7B  7C                 	db	124
   618  00FC7C  33                 	db	51	;'3'
   619  00FC7D  2E                 	db	46
   620  00FC7E  41                 	db	65	;'A'
   621  00FC7F  43                 	db	67	;'C'
   622  00FC80  00                 	db	0
   623  00FC81                     STR_92:
   624  00FC81  54                 	db	84	;'T'
   625  00FC82  53                 	db	83	;'S'
   626  00FC83  54                 	db	84	;'T'
   627  00FC84  3A                 	db	58	;':'
   628  00FC85  20                 	db	32
   629  00FC86  43                 	db	67	;'C'
   630  00FC87  4F                 	db	79	;'O'
   631  00FC88  4E                 	db	78	;'N'
   632  00FC89  44                 	db	68	;'D'
   633  00FC8A  20                 	db	32
   634  00FC8B  53                 	db	83	;'S'
   635  00FC8C  4F                 	db	79	;'O'
   636  00FC8D  4C                 	db	76	;'L'
   637  00FC8E  4E                 	db	78	;'N'
   638  00FC8F  27                 	db	39
   639  00FC90  44                 	db	68	;'D'
   640  00FC91  00                 	db	0
   641  00FC92                     STR_94:
   642  00FC92  54                 	db	84	;'T'
   643  00FC93  53                 	db	83	;'S'
   644  00FC94  54                 	db	84	;'T'
   645  00FC95  3A                 	db	58	;':'
   646  00FC96  20                 	db	32
   647  00FC97  50                 	db	80	;'P'
   648  00FC98  55                 	db	85	;'U'
   649  00FC99  53                 	db	83	;'S'
   650  00FC9A  48                 	db	72	;'H'
   651  00FC9B  20                 	db	32
   652  00FC9C  53                 	db	83	;'S'
   653  00FC9D  4F                 	db	79	;'O'
   654  00FC9E  4C                 	db	76	;'L'
   655  00FC9F  4E                 	db	78	;'N'
   656  00FCA0  27                 	db	39
   657  00FCA1  44                 	db	68	;'D'
   658  00FCA2  00                 	db	0
   659  00FCA3                     STR_69:
   660  00FCA3  34                 	db	52	;'4'
   661  00FCA4  2E                 	db	46
   662  00FCA5  48                 	db	72	;'H'
   663  00FCA6  49                 	db	73	;'I'
   664  00FCA7  7C                 	db	124
   665  00FCA8  35                 	db	53	;'5'
   666  00FCA9  2E                 	db	46
   667  00FCAA  54                 	db	84	;'T'
   668  00FCAB  4F                 	db	79	;'O'
   669  00FCAC  47                 	db	71	;'G'
   670  00FCAD  7C                 	db	124
   671  00FCAE  36                 	db	54	;'6'
   672  00FCAF  2E                 	db	46
   673  00FCB0  45                 	db	69	;'E'
   674  00FCB1  45                 	db	69	;'E'
   675  00FCB2  50                 	db	80	;'P'
   676  00FCB3  00                 	db	0
   677  00FCB4                     STR_110:
   678  00FCB4  54                 	db	84	;'T'
   679  00FCB5  53                 	db	83	;'S'
   680  00FCB6  54                 	db	84	;'T'
   681  00FCB7  3A                 	db	58	;':'
   682  00FCB8  20                 	db	32
   683  00FCB9  42                 	db	66	;'B'
   684  00FCBA  4F                 	db	79	;'O'
   685  00FCBB  54                 	db	84	;'T'
   686  00FCBC  48                 	db	72	;'H'
   687  00FCBD  20                 	db	32
   688  00FCBE  53                 	db	83	;'S'
   689  00FCBF  45                 	db	69	;'E'
   690  00FCC0  52                 	db	82	;'R'
   691  00FCC1  56                 	db	86	;'V'
   692  00FCC2  4F                 	db	79	;'O'
   693  00FCC3  53                 	db	83	;'S'
   694  00FCC4  00                 	db	0
   695  00FCC5                     STR_41:
   696  00FCC5  4C                 	db	76	;'L'
   697  00FCC6  4F                 	db	79	;'O'
   698  00FCC7  47                 	db	71	;'G'
   699  00FCC8  20                 	db	32
   700  00FCC9  31                 	db	49	;'1'
   701  00FCCA  20                 	db	32
   702  00FCCB  20                 	db	32
   703  00FCCC  20                 	db	32
   704  00FCCD  20                 	db	32
   705  00FCCE  20                 	db	32
   706  00FCCF  20                 	db	32
   707  00FCD0  20                 	db	32
   708  00FCD1  20                 	db	32
   709  00FCD2  20                 	db	32
   710  00FCD3  20                 	db	32
   711  00FCD4  20                 	db	32
   712  00FCD5  00                 	db	0
   713  00FCD6                     STR_40:
   714  00FCD6  4C                 	db	76	;'L'
   715  00FCD7  4F                 	db	79	;'O'
   716  00FCD8  47                 	db	71	;'G'
   717  00FCD9  20                 	db	32
   718  00FCDA  32                 	db	50	;'2'
   719  00FCDB  20                 	db	32
   720  00FCDC  20                 	db	32
   721  00FCDD  20                 	db	32
   722  00FCDE  20                 	db	32
   723  00FCDF  20                 	db	32
   724  00FCE0  20                 	db	32
   725  00FCE1  20                 	db	32
   726  00FCE2  20                 	db	32
   727  00FCE3  20                 	db	32
   728  00FCE4  20                 	db	32
   729  00FCE5  20                 	db	32
   730  00FCE6  00                 	db	0
   731  00FCE7                     STR_44:
   732  00FCE7  4C                 	db	76	;'L'
   733  00FCE8  4F                 	db	79	;'O'
   734  00FCE9  47                 	db	71	;'G'
   735  00FCEA  20                 	db	32
   736  00FCEB  33                 	db	51	;'3'
   737  00FCEC  20                 	db	32
   738  00FCED  20                 	db	32
   739  00FCEE  20                 	db	32
   740  00FCEF  20                 	db	32
   741  00FCF0  20                 	db	32
   742  00FCF1  20                 	db	32
   743  00FCF2  20                 	db	32
   744  00FCF3  20                 	db	32
   745  00FCF4  20                 	db	32
   746  00FCF5  20                 	db	32
   747  00FCF6  20                 	db	32
   748  00FCF7  00                 	db	0
   749  00FCF8                     STR_48:
   750  00FCF8  4C                 	db	76	;'L'
   751  00FCF9  4F                 	db	79	;'O'
   752  00FCFA  47                 	db	71	;'G'
   753  00FCFB  20                 	db	32
   754  00FCFC  34                 	db	52	;'4'
   755  00FCFD  20                 	db	32
   756  00FCFE  20                 	db	32
   757  00FCFF  20                 	db	32
   758  00FD00  20                 	db	32
   759  00FD01  20                 	db	32
   760  00FD02  20                 	db	32
   761  00FD03  20                 	db	32
   762  00FD04  20                 	db	32
   763  00FD05  20                 	db	32
   764  00FD06  20                 	db	32
   765  00FD07  20                 	db	32
   766  00FD08  00                 	db	0
   767  00FD09                     STR_36:
   768  00FD09  33                 	db	51	;'3'
   769  00FD0A  2E                 	db	46
   770  00FD0B  20                 	db	32
   771  00FD0C  4C                 	db	76	;'L'
   772  00FD0D  4F                 	db	79	;'O'
   773  00FD0E  47                 	db	71	;'G'
   774  00FD0F  53                 	db	83	;'S'
   775  00FD10  20                 	db	32
   776  00FD11  20                 	db	32
   777  00FD12  20                 	db	32
   778  00FD13  20                 	db	32
   779  00FD14  20                 	db	32
   780  00FD15  20                 	db	32
   781  00FD16  20                 	db	32
   782  00FD17  20                 	db	32
   783  00FD18  20                 	db	32
   784  00FD19  00                 	db	0
   785  00FD1A                     STR_32:
   786  00FD1A  32                 	db	50	;'2'
   787  00FD1B  2E                 	db	46
   788  00FD1C  20                 	db	32
   789  00FD1D  53                 	db	83	;'S'
   790  00FD1E  4F                 	db	79	;'O'
   791  00FD1F  52                 	db	82	;'R'
   792  00FD20  54                 	db	84	;'T'
   793  00FD21  20                 	db	32
   794  00FD22  20                 	db	32
   795  00FD23  20                 	db	32
   796  00FD24  20                 	db	32
   797  00FD25  20                 	db	32
   798  00FD26  20                 	db	32
   799  00FD27  20                 	db	32
   800  00FD28  20                 	db	32
   801  00FD29  20                 	db	32
   802  00FD2A  00                 	db	0
   803  00FD2B                     STR_33:
   804  00FD2B  31                 	db	49	;'1'
   805  00FD2C  2E                 	db	46
   806  00FD2D  20                 	db	32
   807  00FD2E  44                 	db	68	;'D'
   808  00FD2F  41                 	db	65	;'A'
   809  00FD30  54                 	db	84	;'T'
   810  00FD31  45                 	db	69	;'E'
   811  00FD32  2F                 	db	47
   812  00FD33  54                 	db	84	;'T'
   813  00FD34  49                 	db	73	;'I'
   814  00FD35  4D                 	db	77	;'M'
   815  00FD36  45                 	db	69	;'E'
   816  00FD37  20                 	db	32
   817  00FD38  20                 	db	32
   818  00FD39  20                 	db	32
   819  00FD3A  20                 	db	32
   820  00FD3B  00                 	db	0
   821  00FD3C                     STR_24:
   822  00FD3C  20                 	db	32
   823  00FD3D  2D                 	db	45
   824  00FD3E  2D                 	db	45
   825  00FD3F  20                 	db	32
   826  00FD40  50                 	db	80	;'P'
   827  00FD41  4F                 	db	79	;'O'
   828  00FD42  50                 	db	80	;'P'
   829  00FD43  20                 	db	32
   830  00FD44  20                 	db	32
   831  00FD45  43                 	db	67	;'C'
   832  00FD46  41                 	db	65	;'A'
   833  00FD47  4E                 	db	78	;'N'
   834  00FD48  20                 	db	32
   835  00FD49  2D                 	db	45
   836  00FD4A  2D                 	db	45
   837  00FD4B  20                 	db	32
   838  00FD4C  00                 	db	0
   839  00FD4D                     STR_26:
   840  00FD4D  20                 	db	32
   841  00FD4E  2D                 	db	45
   842  00FD4F  2D                 	db	45
   843  00FD50  20                 	db	32
   844  00FD51  53                 	db	83	;'S'
   845  00FD52  4F                 	db	79	;'O'
   846  00FD53  55                 	db	85	;'U'
   847  00FD54  50                 	db	80	;'P'
   848  00FD55  20                 	db	32
   849  00FD56  43                 	db	67	;'C'
   850  00FD57  41                 	db	65	;'A'
   851  00FD58  4E                 	db	78	;'N'
   852  00FD59  20                 	db	32
   853  00FD5A  2D                 	db	45
   854  00FD5B  2D                 	db	45
   855  00FD5C  20                 	db	32
   856  00FD5D  00                 	db	0
   857  00FD5E                     STR_28:
   858  00FD5E  2D                 	db	45
   859  00FD5F  2D                 	db	45
   860  00FD60  20                 	db	32
   861  00FD61  54                 	db	84	;'T'
   862  00FD62  4F                 	db	79	;'O'
   863  00FD63  54                 	db	84	;'T'
   864  00FD64  41                 	db	65	;'A'
   865  00FD65  4C                 	db	76	;'L'
   866  00FD66  20                 	db	32
   867  00FD67  43                 	db	67	;'C'
   868  00FD68  41                 	db	65	;'A'
   869  00FD69  4E                 	db	78	;'N'
   870  00FD6A  53                 	db	83	;'S'
   871  00FD6B  20                 	db	32
   872  00FD6C  2D                 	db	45
   873  00FD6D  2D                 	db	45
   874  00FD6E  00                 	db	0
   875  00FD6F                     STR_39:
   876  00FD6F  4C                 	db	76	;'L'
   877  00FD70  4F                 	db	79	;'O'
   878  00FD71  47                 	db	71	;'G'
   879  00FD72  20                 	db	32
   880  00FD73  31                 	db	49	;'1'
   881  00FD74  20                 	db	32
   882  00FD75  20                 	db	32
   883  00FD76  20                 	db	32
   884  00FD77  20                 	db	32
   885  00FD78  20                 	db	32
   886  00FD79  20                 	db	32
   887  00FD7A  20                 	db	32
   888  00FD7B  20                 	db	32
   889  00FD7C  20                 	db	32
   890  00FD7D  20                 	db	32
   891  00FD7E  3C                 	db	60	;'<'
   892  00FD7F  00                 	db	0
   893  00FD80                     STR_42:
   894  00FD80  4C                 	db	76	;'L'
   895  00FD81  4F                 	db	79	;'O'
   896  00FD82  47                 	db	71	;'G'
   897  00FD83  20                 	db	32
   898  00FD84  32                 	db	50	;'2'
   899  00FD85  20                 	db	32
   900  00FD86  20                 	db	32
   901  00FD87  20                 	db	32
   902  00FD88  20                 	db	32
   903  00FD89  20                 	db	32
   904  00FD8A  20                 	db	32
   905  00FD8B  20                 	db	32
   906  00FD8C  20                 	db	32
   907  00FD8D  20                 	db	32
   908  00FD8E  20                 	db	32
   909  00FD8F  3C                 	db	60	;'<'
   910  00FD90  00                 	db	0
   911  00FD91                     STR_46:
   912  00FD91  4C                 	db	76	;'L'
   913  00FD92  4F                 	db	79	;'O'
   914  00FD93  47                 	db	71	;'G'
   915  00FD94  20                 	db	32
   916  00FD95  33                 	db	51	;'3'
   917  00FD96  20                 	db	32
   918  00FD97  20                 	db	32
   919  00FD98  20                 	db	32
   920  00FD99  20                 	db	32
   921  00FD9A  20                 	db	32
   922  00FD9B  20                 	db	32
   923  00FD9C  20                 	db	32
   924  00FD9D  20                 	db	32
   925  00FD9E  20                 	db	32
   926  00FD9F  20                 	db	32
   927  00FDA0  3C                 	db	60	;'<'
   928  00FDA1  00                 	db	0
   929  00FDA2                     STR_50:
   930  00FDA2  4C                 	db	76	;'L'
   931  00FDA3  4F                 	db	79	;'O'
   932  00FDA4  47                 	db	71	;'G'
   933  00FDA5  20                 	db	32
   934  00FDA6  34                 	db	52	;'4'
   935  00FDA7  20                 	db	32
   936  00FDA8  20                 	db	32
   937  00FDA9  20                 	db	32
   938  00FDAA  20                 	db	32
   939  00FDAB  20                 	db	32
   940  00FDAC  20                 	db	32
   941  00FDAD  20                 	db	32
   942  00FDAE  20                 	db	32
   943  00FDAF  20                 	db	32
   944  00FDB0  20                 	db	32
   945  00FDB1  3C                 	db	60	;'<'
   946  00FDB2  00                 	db	0
   947  00FDB3                     STR_38:
   948  00FDB3  33                 	db	51	;'3'
   949  00FDB4  2E                 	db	46
   950  00FDB5  20                 	db	32
   951  00FDB6  4C                 	db	76	;'L'
   952  00FDB7  4F                 	db	79	;'O'
   953  00FDB8  47                 	db	71	;'G'
   954  00FDB9  53                 	db	83	;'S'
   955  00FDBA  20                 	db	32
   956  00FDBB  20                 	db	32
   957  00FDBC  20                 	db	32
   958  00FDBD  20                 	db	32
   959  00FDBE  20                 	db	32
   960  00FDBF  20                 	db	32
   961  00FDC0  20                 	db	32
   962  00FDC1  20                 	db	32
   963  00FDC2  3C                 	db	60	;'<'
   964  00FDC3  00                 	db	0
   965  00FDC4                     STR_34:
   966  00FDC4  32                 	db	50	;'2'
   967  00FDC5  2E                 	db	46
   968  00FDC6  20                 	db	32
   969  00FDC7  53                 	db	83	;'S'
   970  00FDC8  4F                 	db	79	;'O'
   971  00FDC9  52                 	db	82	;'R'
   972  00FDCA  54                 	db	84	;'T'
   973  00FDCB  20                 	db	32
   974  00FDCC  20                 	db	32
   975  00FDCD  20                 	db	32
   976  00FDCE  20                 	db	32
   977  00FDCF  20                 	db	32
   978  00FDD0  20                 	db	32
   979  00FDD1  20                 	db	32
   980  00FDD2  20                 	db	32
   981  00FDD3  3C                 	db	60	;'<'
   982  00FDD4  00                 	db	0
   983  00FDD5                     STR_31:
   984  00FDD5  31                 	db	49	;'1'
   985  00FDD6  2E                 	db	46
   986  00FDD7  20                 	db	32
   987  00FDD8  44                 	db	68	;'D'
   988  00FDD9  41                 	db	65	;'A'
   989  00FDDA  54                 	db	84	;'T'
   990  00FDDB  45                 	db	69	;'E'
   991  00FDDC  2F                 	db	47
   992  00FDDD  54                 	db	84	;'T'
   993  00FDDE  49                 	db	73	;'I'
   994  00FDDF  4D                 	db	77	;'M'
   995  00FDE0  45                 	db	69	;'E'
   996  00FDE1  20                 	db	32
   997  00FDE2  20                 	db	32
   998  00FDE3  20                 	db	32
   999  00FDE4  3C                 	db	60	;'<'
  1000  00FDE5  00                 	db	0
  1001  00FDE6                     STR_6:
  1002  00FDE6  50                 	db	80	;'P'
  1003  00FDE7  41                 	db	65	;'A'
  1004  00FDE8  55                 	db	85	;'U'
  1005  00FDE9  53                 	db	83	;'S'
  1006  00FDEA  45                 	db	69	;'E'
  1007  00FDEB  20                 	db	32
  1008  00FDEC  3C                 	db	60	;'<'
  1009  00FDED  20                 	db	32
  1010  00FDEE  7C                 	db	124
  1011  00FDEF  20                 	db	32
  1012  00FDF0  42                 	db	66	;'B'
  1013  00FDF1  41                 	db	65	;'A'
  1014  00FDF2  43                 	db	67	;'C'
  1015  00FDF3  4B                 	db	75	;'K'
  1016  00FDF4  20                 	db	32
  1017  00FDF5  3E                 	db	62	;'>'
  1018  00FDF6  00                 	db	0
  1019  00FDF7                     STR_30:
  1020  00FDF7  50                 	db	80	;'P'
  1021  00FDF8  55                 	db	85	;'U'
  1022  00FDF9  53                 	db	83	;'S'
  1023  00FDFA  48                 	db	72	;'H'
  1024  00FDFB  20                 	db	32
  1025  00FDFC  54                 	db	84	;'T'
  1026  00FDFD  4F                 	db	79	;'O'
  1027  00FDFE  20                 	db	32
  1028  00FDFF  43                 	db	67	;'C'
  1029  00FE00  4F                 	db	79	;'O'
  1030  00FE01  4E                 	db	78	;'N'
  1031  00FE02  54                 	db	84	;'T'
  1032  00FE03  49                 	db	73	;'I'
  1033  00FE04  4E                 	db	78	;'N'
  1034  00FE05  55                 	db	85	;'U'
  1035  00FE06  45                 	db	69	;'E'
  1036  00FE07  00                 	db	0
  1037  00FE08                     STR_27:
  1038  00FE08  4E                 	db	78	;'N'
  1039  00FE09  4C                 	db	76	;'L'
  1040  00FE0A  41                 	db	65	;'A'
  1041  00FE0B  42                 	db	66	;'B'
  1042  00FE0C  3A                 	db	58	;':'
  1043  00FE0D  20                 	db	32
  1044  00FE0E  25                 	db	37
  1045  00FE0F  64                 	db	100	;'d'
  1046  00FE10  7C                 	db	124
  1047  00FE11  4C                 	db	76	;'L'
  1048  00FE12  41                 	db	65	;'A'
  1049  00FE13  42                 	db	66	;'B'
  1050  00FE14  3A                 	db	58	;':'
  1051  00FE15  20                 	db	32
  1052  00FE16  25                 	db	37
  1053  00FE17  64                 	db	100	;'d'
  1054  00FE18  00                 	db	0
  1055  00FE19                     STR_25:
  1056  00FE19  4E                 	db	78	;'N'
  1057  00FE1A  54                 	db	84	;'T'
  1058  00FE1B  41                 	db	65	;'A'
  1059  00FE1C  42                 	db	66	;'B'
  1060  00FE1D  3A                 	db	58	;':'
  1061  00FE1E  20                 	db	32
  1062  00FE1F  25                 	db	37
  1063  00FE20  64                 	db	100	;'d'
  1064  00FE21  7C                 	db	124
  1065  00FE22  54                 	db	84	;'T'
  1066  00FE23  41                 	db	65	;'A'
  1067  00FE24  42                 	db	66	;'B'
  1068  00FE25  3A                 	db	58	;':'
  1069  00FE26  20                 	db	32
  1070  00FE27  25                 	db	37
  1071  00FE28  64                 	db	100	;'d'
  1072  00FE29  00                 	db	0
  1073  00FE2A                     STR_83:
  1074  00FE2A  4D                 	db	77	;'M'
  1075  00FE2B  41                 	db	65	;'A'
  1076  00FE2C  47                 	db	71	;'G'
  1077  00FE2D  5F                 	db	95	;'_'
  1078  00FE2E  73                 	db	115	;'s'
  1079  00FE2F  69                 	db	105	;'i'
  1080  00FE30  67                 	db	103	;'g'
  1081  00FE31  6E                 	db	110	;'n'
  1082  00FE32  61                 	db	97	;'a'
  1083  00FE33  6C                 	db	108	;'l'
  1084  00FE34  3A                 	db	58	;':'
  1085  00FE35  20                 	db	32
  1086  00FE36  25                 	db	37
  1087  00FE37  64                 	db	100	;'d'
  1088  00FE38  20                 	db	32
  1089  00FE39  00                 	db	0
  1090  00FE3A                     STR_103:
  1091  00FE3A  54                 	db	84	;'T'
  1092  00FE3B  53                 	db	83	;'S'
  1093  00FE3C  54                 	db	84	;'T'
  1094  00FE3D  3A                 	db	58	;':'
  1095  00FE3E  20                 	db	32
  1096  00FE3F  54                 	db	84	;'T'
  1097  00FE40  49                 	db	73	;'I'
  1098  00FE41  4C                 	db	76	;'L'
  1099  00FE42  54                 	db	84	;'T'
  1100  00FE43  20                 	db	32
  1101  00FE44  53                 	db	83	;'S'
  1102  00FE45  45                 	db	69	;'E'
  1103  00FE46  52                 	db	82	;'R'
  1104  00FE47  56                 	db	86	;'V'
  1105  00FE48  4F                 	db	79	;'O'
  1106  00FE49  00                 	db	0
  1107  00FE4A                     STR_4:
  1108  00FE4A  44                 	db	68	;'D'
  1109  00FE4B  49                 	db	73	;'I'
  1110  00FE4C  44                 	db	68	;'D'
  1111  00FE4D  4E                 	db	78	;'N'
  1112  00FE4E  27                 	db	39
  1113  00FE4F  54                 	db	84	;'T'
  1114  00FE50  20                 	db	32
  1115  00FE51  43                 	db	67	;'C'
  1116  00FE52  4F                 	db	79	;'O'
  1117  00FE53  4D                 	db	77	;'M'
  1118  00FE54  50                 	db	80	;'P'
  1119  00FE55  4C                 	db	76	;'L'
  1120  00FE56  45                 	db	69	;'E'
  1121  00FE57  54                 	db	84	;'T'
  1122  00FE58  45                 	db	69	;'E'
  1123  00FE59  00                 	db	0
  1124  00FE5A                     STR_80:
  1125  00FE5A  49                 	db	73	;'I'
  1126  00FE5B  52                 	db	82	;'R'
  1127  00FE5C  5F                 	db	95	;'_'
  1128  00FE5D  73                 	db	115	;'s'
  1129  00FE5E  69                 	db	105	;'i'
  1130  00FE5F  67                 	db	103	;'g'
  1131  00FE60  6E                 	db	110	;'n'
  1132  00FE61  61                 	db	97	;'a'
  1133  00FE62  6C                 	db	108	;'l'
  1134  00FE63  3A                 	db	58	;':'
  1135  00FE64  20                 	db	32
  1136  00FE65  25                 	db	37
  1137  00FE66  64                 	db	100	;'d'
  1138  00FE67  20                 	db	32
  1139  00FE68  00                 	db	0
  1140  00FE69                     STR_109:
  1141  00FE69  43                 	db	67	;'C'
  1142  00FE6A  41                 	db	65	;'A'
  1143  00FE6B  4D                 	db	77	;'M'
  1144  00FE6C  20                 	db	32
  1145  00FE6D  44                 	db	68	;'D'
  1146  00FE6E  57                 	db	87	;'W'
  1147  00FE6F  4E                 	db	78	;'N'
  1148  00FE70  20                 	db	32
  1149  00FE71  7C                 	db	124
  1150  00FE72  52                 	db	82	;'R'
  1151  00FE73  43                 	db	67	;'C'
  1152  00FE74  30                 	db	48	;'0'
  1153  00FE75  3D                 	db	61	;'='
  1154  00FE76  30                 	db	48	;'0'
  1155  00FE77  00                 	db	0
  1156  00FE78                     STR_108:
  1157  00FE78  43                 	db	67	;'C'
  1158  00FE79  41                 	db	65	;'A'
  1159  00FE7A  4D                 	db	77	;'M'
  1160  00FE7B  20                 	db	32
  1161  00FE7C  55                 	db	85	;'U'
  1162  00FE7D  50                 	db	80	;'P'
  1163  00FE7E  20                 	db	32
  1164  00FE7F  20                 	db	32
  1165  00FE80  7C                 	db	124
  1166  00FE81  52                 	db	82	;'R'
  1167  00FE82  43                 	db	67	;'C'
  1168  00FE83  30                 	db	48	;'0'
  1169  00FE84  3D                 	db	61	;'='
  1170  00FE85  31                 	db	49	;'1'
  1171  00FE86  00                 	db	0
  1172  00FE87                     STR_82:
  1173  00FE87  54                 	db	84	;'T'
  1174  00FE88  53                 	db	83	;'S'
  1175  00FE89  54                 	db	84	;'T'
  1176  00FE8A  3A                 	db	58	;':'
  1177  00FE8B  20                 	db	32
  1178  00FE8C  4D                 	db	77	;'M'
  1179  00FE8D  41                 	db	65	;'A'
  1180  00FE8E  47                 	db	71	;'G'
  1181  00FE8F  4E                 	db	78	;'N'
  1182  00FE90  45                 	db	69	;'E'
  1183  00FE91  54                 	db	84	;'T'
  1184  00FE92  49                 	db	73	;'I'
  1185  00FE93  53                 	db	83	;'S'
  1186  00FE94  4D                 	db	77	;'M'
  1187  00FE95  00                 	db	0
  1188  00FE96                     STR_107:
  1189  00FE96  54                 	db	84	;'T'
  1190  00FE97  53                 	db	83	;'S'
  1191  00FE98  54                 	db	84	;'T'
  1192  00FE99  3A                 	db	58	;':'
  1193  00FE9A  20                 	db	32
  1194  00FE9B  43                 	db	67	;'C'
  1195  00FE9C  41                 	db	65	;'A'
  1196  00FE9D  4D                 	db	77	;'M'
  1197  00FE9E  20                 	db	32
  1198  00FE9F  53                 	db	83	;'S'
  1199  00FEA0  45                 	db	69	;'E'
  1200  00FEA1  52                 	db	82	;'R'
  1201  00FEA2  56                 	db	86	;'V'
  1202  00FEA3  4F                 	db	79	;'O'
  1203  00FEA4  00                 	db	0
  1204  00FEA5                     STR_96:
  1205  00FEA5  54                 	db	84	;'T'
  1206  00FEA6  53                 	db	83	;'S'
  1207  00FEA7  54                 	db	84	;'T'
  1208  00FEA8  3A                 	db	58	;':'
  1209  00FEA9  20                 	db	32
  1210  00FEAA  50                 	db	80	;'P'
  1211  00FEAB  41                 	db	65	;'A'
  1212  00FEAC  4E                 	db	78	;'N'
  1213  00FEAD  20                 	db	32
  1214  00FEAE  53                 	db	83	;'S'
  1215  00FEAF  45                 	db	69	;'E'
  1216  00FEB0  52                 	db	82	;'R'
  1217  00FEB1  56                 	db	86	;'V'
  1218  00FEB2  4F                 	db	79	;'O'
  1219  00FEB3  00                 	db	0
  1220  00FEB4                     STR_75:
  1221  00FEB4  41                 	db	65	;'A'
  1222  00FEB5  4C                 	db	76	;'L'
  1223  00FEB6  47                 	db	71	;'G'
  1224  00FEB7  34                 	db	52	;'4'
  1225  00FEB8  3A                 	db	58	;':'
  1226  00FEB9  20                 	db	32
  1227  00FEBA  41                 	db	65	;'A'
  1228  00FEBB  4C                 	db	76	;'L'
  1229  00FEBC  4C                 	db	76	;'L'
  1230  00FEBD  20                 	db	32
  1231  00FEBE  43                 	db	67	;'C'
  1232  00FEBF  41                 	db	65	;'A'
  1233  00FEC0  4E                 	db	78	;'N'
  1234  00FEC1  53                 	db	83	;'S'
  1235  00FEC2  00                 	db	0
  1236  00FEC3                     STR_90:
  1237  00FEC3  54                 	db	84	;'T'
  1238  00FEC4  53                 	db	83	;'S'
  1239  00FEC5  54                 	db	84	;'T'
  1240  00FEC6  3A                 	db	58	;':'
  1241  00FEC7  20                 	db	32
  1242  00FEC8  44                 	db	68	;'D'
  1243  00FEC9  43                 	db	67	;'C'
  1244  00FECA  20                 	db	32
  1245  00FECB  4D                 	db	77	;'M'
  1246  00FECC  4F                 	db	79	;'O'
  1247  00FECD  54                 	db	84	;'T'
  1248  00FECE  4F                 	db	79	;'O'
  1249  00FECF  52                 	db	82	;'R'
  1250  00FED0  53                 	db	83	;'S'
  1251  00FED1  00                 	db	0
  1252  00FED2                     STR_70:
  1253  00FED2  41                 	db	65	;'A'
  1254  00FED3  4C                 	db	76	;'L'
  1255  00FED4  47                 	db	71	;'G'
  1256  00FED5  4F                 	db	79	;'O'
  1257  00FED6  52                 	db	82	;'R'
  1258  00FED7  49                 	db	73	;'I'
  1259  00FED8  54                 	db	84	;'T'
  1260  00FED9  48                 	db	72	;'H'
  1261  00FEDA  4D                 	db	77	;'M'
  1262  00FEDB  20                 	db	32
  1263  00FEDC  54                 	db	84	;'T'
  1264  00FEDD  45                 	db	69	;'E'
  1265  00FEDE  53                 	db	83	;'S'
  1266  00FEDF  54                 	db	84	;'T'
  1267  00FEE0  00                 	db	0
  1268  00FEE1                     STR_91:
  1269  00FEE1  50                 	db	80	;'P'
  1270  00FEE2  49                 	db	73	;'I'
  1271  00FEE3  4E                 	db	78	;'N'
  1272  00FEE4  20                 	db	32
  1273  00FEE5  52                 	db	82	;'R'
  1274  00FEE6  41                 	db	65	;'A'
  1275  00FEE7  35                 	db	53	;'5'
  1276  00FEE8  20                 	db	32
  1277  00FEE9  48                 	db	72	;'H'
  1278  00FEEA  49                 	db	73	;'I'
  1279  00FEEB  47                 	db	71	;'G'
  1280  00FEEC  48                 	db	72	;'H'
  1281  00FEED  2E                 	db	46
  1282  00FEEE  00                 	db	0
  1283  00FEEF                     STR_73:
  1284  00FEEF  41                 	db	65	;'A'
  1285  00FEF0  4C                 	db	76	;'L'
  1286  00FEF1  47                 	db	71	;'G'
  1287  00FEF2  32                 	db	50	;'2'
  1288  00FEF3  3A                 	db	58	;':'
  1289  00FEF4  20                 	db	32
  1290  00FEF5  31                 	db	49	;'1'
  1291  00FEF6  32                 	db	50	;'2'
  1292  00FEF7  20                 	db	32
  1293  00FEF8  43                 	db	67	;'C'
  1294  00FEF9  41                 	db	65	;'A'
  1295  00FEFA  4E                 	db	78	;'N'
  1296  00FEFB  53                 	db	83	;'S'
  1297  00FEFC  00                 	db	0
  1298  00FEFD                     STR_76:
  1299  00FEFD  41                 	db	65	;'A'
  1300  00FEFE  4C                 	db	76	;'L'
  1301  00FEFF  47                 	db	71	;'G'
  1302  00FF00  35                 	db	53	;'5'
  1303  00FF01  3A                 	db	58	;':'
  1304  00FF02  20                 	db	32
  1305  00FF03  4E                 	db	78	;'N'
  1306  00FF04  4F                 	db	79	;'O'
  1307  00FF05  20                 	db	32
  1308  00FF06  43                 	db	67	;'C'
  1309  00FF07  41                 	db	65	;'A'
  1310  00FF08  4E                 	db	78	;'N'
  1311  00FF09  53                 	db	83	;'S'
  1312  00FF0A  00                 	db	0
  1313  00FF0B                     STR_71:
  1314  00FF0B  50                 	db	80	;'P'
  1315  00FF0C  55                 	db	85	;'U'
  1316  00FF0D  53                 	db	83	;'S'
  1317  00FF0E  48                 	db	72	;'H'
  1318  00FF0F  20                 	db	32
  1319  00FF10  54                 	db	84	;'T'
  1320  00FF11  4F                 	db	79	;'O'
  1321  00FF12  20                 	db	32
  1322  00FF13  53                 	db	83	;'S'
  1323  00FF14  54                 	db	84	;'T'
  1324  00FF15  41                 	db	65	;'A'
  1325  00FF16  52                 	db	82	;'R'
  1326  00FF17  54                 	db	84	;'T'
  1327  00FF18  00                 	db	0
  1328  00FF19                     STR_23:
  1329  00FF19  25                 	db	37
  1330  00FF1A  64                 	db	100	;'d'
  1331  00FF1B  20                 	db	32
  1332  00FF1C  4D                 	db	77	;'M'
  1333  00FF1D  49                 	db	73	;'I'
  1334  00FF1E  4E                 	db	78	;'N'
  1335  00FF1F  20                 	db	32
  1336  00FF20  25                 	db	37
  1337  00FF21  64                 	db	100	;'d'
  1338  00FF22  20                 	db	32
  1339  00FF23  53                 	db	83	;'S'
  1340  00FF24  45                 	db	69	;'E'
  1341  00FF25  43                 	db	67	;'C'
  1342  00FF26  00                 	db	0
  1343  00FF27                     STR_2:
  1344  00FF27  54                 	db	84	;'T'
  1345  00FF28  49                 	db	73	;'I'
  1346  00FF29  4D                 	db	77	;'M'
  1347  00FF2A  45                 	db	69	;'E'
  1348  00FF2B  3A                 	db	58	;':'
  1349  00FF2C  20                 	db	32
  1350  00FF2D  25                 	db	37
  1351  00FF2E  64                 	db	100	;'d'
  1352  00FF2F  3A                 	db	58	;':'
  1353  00FF30  25                 	db	37
  1354  00FF31  30                 	db	48	;'0'
  1355  00FF32  32                 	db	50	;'2'
  1356  00FF33  64                 	db	100	;'d'
  1357  00FF34  00                 	db	0
  1358  00FF35                     STR_79:
  1359  00FF35  54                 	db	84	;'T'
  1360  00FF36  53                 	db	83	;'S'
  1361  00FF37  54                 	db	84	;'T'
  1362  00FF38  3A                 	db	58	;':'
  1363  00FF39  20                 	db	32
  1364  00FF3A  49                 	db	73	;'I'
  1365  00FF3B  52                 	db	82	;'R'
  1366  00FF3C  20                 	db	32
  1367  00FF3D  53                 	db	83	;'S'
  1368  00FF3E  4E                 	db	78	;'N'
  1369  00FF3F  53                 	db	83	;'S'
  1370  00FF40  52                 	db	82	;'R'
  1371  00FF41  00                 	db	0
  1372  00FF42                     STR_65:
  1373  00FF42  54                 	db	84	;'T'
  1374  00FF43  49                 	db	73	;'I'
  1375  00FF44  4D                 	db	77	;'M'
  1376  00FF45  45                 	db	69	;'E'
  1377  00FF46  20                 	db	32
  1378  00FF47  25                 	db	37
  1379  00FF48  64                 	db	100	;'d'
  1380  00FF49  3A                 	db	58	;':'
  1381  00FF4A  25                 	db	37
  1382  00FF4B  30                 	db	48	;'0'
  1383  00FF4C  32                 	db	50	;'2'
  1384  00FF4D  64                 	db	100	;'d'
  1385  00FF4E  00                 	db	0
  1386  00FF4F                     STR_74:
  1387  00FF4F  41                 	db	65	;'A'
  1388  00FF50  4C                 	db	76	;'L'
  1389  00FF51  47                 	db	71	;'G'
  1390  00FF52  33                 	db	51	;'3'
  1391  00FF53  3A                 	db	58	;':'
  1392  00FF54  20                 	db	32
  1393  00FF55  31                 	db	49	;'1'
  1394  00FF56  20                 	db	32
  1395  00FF57  43                 	db	67	;'C'
  1396  00FF58  41                 	db	65	;'A'
  1397  00FF59  4E                 	db	78	;'N'
  1398  00FF5A  00                 	db	0
  1399  00FF5B                     STR_93:
  1400  00FF5B  50                 	db	80	;'P'
  1401  00FF5C  49                 	db	73	;'I'
  1402  00FF5D  4E                 	db	78	;'N'
  1403  00FF5E  20                 	db	32
  1404  00FF5F  52                 	db	82	;'R'
  1405  00FF60  41                 	db	65	;'A'
  1406  00FF61  33                 	db	51	;'3'
  1407  00FF62  2E                 	db	46
  1408  00FF63  2E                 	db	46
  1409  00FF64  2E                 	db	46
  1410  00FF65  00                 	db	0
  1411  00FF66                     STR_95:
  1412  00FF66  50                 	db	80	;'P'
  1413  00FF67  49                 	db	73	;'I'
  1414  00FF68  4E                 	db	78	;'N'
  1415  00FF69  20                 	db	32
  1416  00FF6A  52                 	db	82	;'R'
  1417  00FF6B  41                 	db	65	;'A'
  1418  00FF6C  34                 	db	52	;'4'
  1419  00FF6D  2E                 	db	46
  1420  00FF6E  2E                 	db	46
  1421  00FF6F  2E                 	db	46
  1422  00FF70  00                 	db	0
  1423  00FF71                     STR_113:
  1424  00FF71  50                 	db	80	;'P'
  1425  00FF72  55                 	db	85	;'U'
  1426  00FF73  53                 	db	83	;'S'
  1427  00FF74  48                 	db	72	;'H'
  1428  00FF75  45                 	db	69	;'E'
  1429  00FF76  52                 	db	82	;'R'
  1430  00FF77  20                 	db	32
  1431  00FF78  54                 	db	84	;'T'
  1432  00FF79  53                 	db	83	;'S'
  1433  00FF7A  54                 	db	84	;'T'
  1434  00FF7B  00                 	db	0
  1435  00FF7C                     STR_64:
  1436  00FF7C  53                 	db	83	;'S'
  1437  00FF7D  4F                 	db	79	;'O'
  1438  00FF7E  52                 	db	82	;'R'
  1439  00FF7F  54                 	db	84	;'T'
  1440  00FF80  49                 	db	73	;'I'
  1441  00FF81  4E                 	db	78	;'N'
  1442  00FF82  47                 	db	71	;'G'
  1443  00FF83  2E                 	db	46
  1444  00FF84  2E                 	db	46
  1445  00FF85  2E                 	db	46
  1446  00FF86  00                 	db	0
  1447  00FF87                     STR_84:
  1448  00FF87  54                 	db	84	;'T'
  1449  00FF88  53                 	db	83	;'S'
  1450  00FF89  54                 	db	84	;'T'
  1451  00FF8A  3A                 	db	58	;':'
  1452  00FF8B  20                 	db	32
  1453  00FF8C  43                 	db	67	;'C'
  1454  00FF8D  4F                 	db	79	;'O'
  1455  00FF8E  4E                 	db	78	;'N'
  1456  00FF8F  44                 	db	68	;'D'
  1457  00FF90  00                 	db	0
  1458  00FF91                     STR_88:
  1459  00FF91  41                 	db	65	;'A'
  1460  00FF92  43                 	db	67	;'C'
  1461  00FF93  54                 	db	84	;'T'
  1462  00FF94  55                 	db	85	;'U'
  1463  00FF95  41                 	db	65	;'A'
  1464  00FF96  54                 	db	84	;'T'
  1465  00FF97  4F                 	db	79	;'O'
  1466  00FF98  52                 	db	82	;'R'
  1467  00FF99  53                 	db	83	;'S'
  1468  00FF9A  00                 	db	0
  1469  00FF9B                     STR_22:
  1470  00FF9B  44                 	db	68	;'D'
  1471  00FF9C  55                 	db	85	;'U'
  1472  00FF9D  52                 	db	82	;'R'
  1473  00FF9E  41                 	db	65	;'A'
  1474  00FF9F  54                 	db	84	;'T'
  1475  00FFA0  49                 	db	73	;'I'
  1476  00FFA1  4F                 	db	79	;'O'
  1477  00FFA2  4E                 	db	78	;'N'
  1478  00FFA3  3A                 	db	58	;':'
  1479  00FFA4  00                 	db	0
  1480  00FFA5                     STR_86:
  1481  00FFA5  43                 	db	67	;'C'
  1482  00FFA6  4F                 	db	79	;'O'
  1483  00FFA7  4E                 	db	78	;'N'
  1484  00FFA8  44                 	db	68	;'D'
  1485  00FFA9  3A                 	db	58	;':'
  1486  00FFAA  20                 	db	32
  1487  00FFAB  25                 	db	37
  1488  00FFAC  64                 	db	100	;'d'
  1489  00FFAD  00                 	db	0
  1490  00FFAE                     STR_77:
  1491  00FFAE  53                 	db	83	;'S'
  1492  00FFAF  45                 	db	69	;'E'
  1493  00FFB0  4E                 	db	78	;'N'
  1494  00FFB1  53                 	db	83	;'S'
  1495  00FFB2  4F                 	db	79	;'O'
  1496  00FFB3  52                 	db	82	;'R'
  1497  00FFB4  53                 	db	83	;'S'
  1498  00FFB5  00                 	db	0
  1499  00FFB6                     STR_118:
  1500  00FFB6  28                 	db	40
  1501  00FFB7  6E                 	db	110	;'n'
  1502  00FFB8  75                 	db	117	;'u'
  1503  00FFB9  6C                 	db	108	;'l'
  1504  00FFBA  6C                 	db	108	;'l'
  1505  00FFBB  29                 	db	41
  1506  00FFBC  00                 	db	0
  1507  00FFBD                     STR_67:
  1508  00FFBD  46                 	db	70	;'F'
  1509  00FFBE  41                 	db	65	;'A'
  1510  00FFBF  49                 	db	73	;'I'
  1511  00FFC0  4C                 	db	76	;'L'
  1512  00FFC1  45                 	db	69	;'E'
  1513  00FFC2  44                 	db	68	;'D'
  1514  00FFC3  00                 	db	0
  1515  00FFC4                     STR_7:
  1516  00FFC4  53                 	db	83	;'S'
  1517  00FFC5  54                 	db	84	;'T'
  1518  00FFC6  41                 	db	65	;'A'
  1519  00FFC7  52                 	db	82	;'R'
  1520  00FFC8  54                 	db	84	;'T'
  1521  00FFC9  3A                 	db	58	;':'
  1522  00FFCA  00                 	db	0
  1523  00FFCB                     STR_9:
  1524  00FFCB  46                 	db	70	;'F'
  1525  00FFCC  45                 	db	69	;'E'
  1526  00FFCD  42                 	db	66	;'B'
  1527  00FFCE  00                 	db	0
  1528  00FFCF                     STR_19:
  1529  00FFCF  44                 	db	68	;'D'
  1530  00FFD0  45                 	db	69	;'E'
  1531  00FFD1  43                 	db	67	;'C'
  1532  00FFD2  00                 	db	0
  1533  00FFD3                     STR_15:
  1534  00FFD3  41                 	db	65	;'A'
  1535  00FFD4  55                 	db	85	;'U'
  1536  00FFD5  47                 	db	71	;'G'
  1537  00FFD6  00                 	db	0
  1538  00FFD7                     STR_14:
  1539  00FFD7  4A                 	db	74	;'J'
  1540  00FFD8  55                 	db	85	;'U'
  1541  00FFD9  4C                 	db	76	;'L'
  1542  00FFDA  00                 	db	0
  1543  00FFDB                     STR_8:
  1544  00FFDB  4A                 	db	74	;'J'
  1545  00FFDC  41                 	db	65	;'A'
  1546  00FFDD  4E                 	db	78	;'N'
  1547  00FFDE  00                 	db	0
  1548  00FFDF                     STR_13:
  1549  00FFDF  4A                 	db	74	;'J'
  1550  00FFE0  55                 	db	85	;'U'
  1551  00FFE1  4E                 	db	78	;'N'
  1552  00FFE2  00                 	db	0
  1553  00FFE3                     STR_16:
  1554  00FFE3  53                 	db	83	;'S'
  1555  00FFE4  45                 	db	69	;'E'
  1556  00FFE5  50                 	db	80	;'P'
  1557  00FFE6  00                 	db	0
  1558  00FFE7                     STR_10:
  1559  00FFE7  4D                 	db	77	;'M'
  1560  00FFE8  41                 	db	65	;'A'
  1561  00FFE9  52                 	db	82	;'R'
  1562  00FFEA  00                 	db	0
  1563  00FFEB                     STR_11:
  1564  00FFEB  41                 	db	65	;'A'
  1565  00FFEC  50                 	db	80	;'P'
  1566  00FFED  52                 	db	82	;'R'
  1567  00FFEE  00                 	db	0
  1568  00FFEF                     STR_20:
  1569  00FFEF  45                 	db	69	;'E'
  1570  00FFF0  52                 	db	82	;'R'
  1571  00FFF1  52                 	db	82	;'R'
  1572  00FFF2  00                 	db	0
  1573  00FFF3                     STR_17:
  1574  00FFF3  4F                 	db	79	;'O'
  1575  00FFF4  43                 	db	67	;'C'
  1576  00FFF5  54                 	db	84	;'T'
  1577  00FFF6  00                 	db	0
  1578  00FFF7                     STR_18:
  1579  00FFF7  4E                 	db	78	;'N'
  1580  00FFF8  4F                 	db	79	;'O'
  1581  00FFF9  56                 	db	86	;'V'
  1582  00FFFA  00                 	db	0
  1583  00FFFB                     STR_12:
  1584  00FFFB  4D                 	db	77	;'M'
  1585  00FFFC  41                 	db	65	;'A'
  1586  00FFFD  59                 	db	89	;'Y'
  1587  00FFFE  00                 	db	0
  1588  0000                     
  1589                           ; #config settings
  1590  00FFFF  00                 	db	0	; dummy byte at the end
  1591  0000                     
  1592                           	psect	cinit
  1593  004146                     __pcinit:
  1594                           	opt stack 0
  1595  004146                     start_initialization:
  1596                           	opt stack 0
  1597  004146                     __initialization:
  1598                           	opt stack 0
  1599                           
  1600                           ; Initialize objects allocated to BANK1 (8 bytes)
  1601                           ; load TBLPTR registers with __pidataBANK1
  1602  004146  0E88               	movlw	low __pidataBANK1
  1603  004148  6EF6               	movwf	tblptrl,c
  1604  00414A  0E48               	movlw	high __pidataBANK1
  1605  00414C  6EF7               	movwf	tblptrh,c
  1606  00414E  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1607  004150  6EF8               	movwf	tblptru,c
  1608  004152  EE01  F02F         	lfsr	0,__pdataBANK1
  1609  004156  EE10 F008          	lfsr	1,8
  1610  00415A                     copy_data0:
  1611  00415A  0009               	tblrd		*+
  1612  00415C  CFF5 FFEE          	movff	tablat,postinc0
  1613  004160  50E5               	movf	postdec1,w,c
  1614  004162  50E1               	movf	fsr1l,w,c
  1615  004164  E1FA               	bnz	copy_data0
  1616                           
  1617                           ; Clear objects allocated to BANK1 (47 bytes)
  1618  004166  EE01  F000         	lfsr	0,__pbssBANK1
  1619  00416A  0E2F               	movlw	47
  1620  00416C                     clear_0:
  1621  00416C  6AEE               	clrf	postinc0,c
  1622  00416E  06E8               	decf	wreg,f,c
  1623  004170  E1FD               	bnz	clear_0
  1624                           
  1625                           ; Clear objects allocated to BANK0 (38 bytes)
  1626  004172  EE00  F0DA         	lfsr	0,__pbssBANK0
  1627  004176  0E26               	movlw	38
  1628  004178                     clear_1:
  1629  004178  6AEE               	clrf	postinc0,c
  1630  00417A  06E8               	decf	wreg,f,c
  1631  00417C  E1FD               	bnz	clear_1
  1632                           
  1633                           ; Clear objects allocated to COMRAM (35 bytes)
  1634  00417E  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1635  004182  0E23               	movlw	35
  1636  004184                     clear_2:
  1637  004184  6AEE               	clrf	postinc0,c
  1638  004186  06E8               	decf	wreg,f,c
  1639  004188  E1FD               	bnz	clear_2
  1640  00418A                     end_of_initialization:
  1641                           	opt stack 0
  1642  00418A                     __end_of__initialization:
  1643                           	opt stack 0
  1644  00418A  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1645  00418C  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1646  00418E  0100               	movlb	0
  1647  004190  EF12  F01B         	goto	_main	;jump to C main() function
  1648                           tblptru	equ	0xFF8
  1649                           tblptrh	equ	0xFF7
  1650                           tblptrl	equ	0xFF6
  1651                           tablat	equ	0xFF5
  1652                           postinc0	equ	0xFEE
  1653                           wreg	equ	0xFE8
  1654                           postdec1	equ	0xFE5
  1655                           fsr1l	equ	0xFE1
  1656                           
  1657                           	psect	bssCOMRAM
  1658  00005B                     __pbssCOMRAM:
  1659                           	opt stack 0
  1660  00005B                     _back:
  1661                           	opt stack 0
  1662  00005B                     	ds	2
  1663  00005D                     _count_can_no_lab:
  1664                           	opt stack 0
  1665  00005D                     	ds	2
  1666  00005F                     _count_can_w_lab:
  1667                           	opt stack 0
  1668  00005F                     	ds	2
  1669  000061                     _count_pop_no_tab:
  1670                           	opt stack 0
  1671  000061                     	ds	2
  1672  000063                     _count_pop_w_tab:
  1673                           	opt stack 0
  1674  000063                     	ds	2
  1675  000065                     _cur_can:
  1676                           	opt stack 0
  1677  000065                     	ds	2
  1678  000067                     _debug:
  1679                           	opt stack 0
  1680  000067                     	ds	2
  1681  000069                     _down:
  1682                           	opt stack 0
  1683  000069                     	ds	2
  1684  00006B                     _enter:
  1685                           	opt stack 0
  1686  00006B                     	ds	2
  1687  00006D                     _f_ID_receive:
  1688                           	opt stack 0
  1689  00006D                     	ds	2
  1690  00006F                     _f_can_coming_to_ID:
  1691                           	opt stack 0
  1692  00006F                     	ds	2
  1693  000071                     _f_can_coming_to_distribution:
  1694                           	opt stack 0
  1695  000071                     	ds	2
  1696  000073                     _f_lastCan:
  1697                           	opt stack 0
  1698  000073                     	ds	2
  1699  000075                     _firstboot:
  1700                           	opt stack 0
  1701  000075                     	ds	2
  1702  000077                     _up:
  1703                           	opt stack 0
  1704  000077                     	ds	2
  1705  000079                     _was_low_1:
  1706                           	opt stack 0
  1707  000079                     	ds	2
  1708  00007B                     _was_low_3:
  1709                           	opt stack 0
  1710  00007B                     	ds	2
  1711  00007D                     _input:
  1712                           	opt stack 0
  1713  00007D                     	ds	1
  1714                           tblptru	equ	0xFF8
  1715                           tblptrh	equ	0xFF7
  1716                           tblptrl	equ	0xFF6
  1717                           tablat	equ	0xFF5
  1718                           postinc0	equ	0xFEE
  1719                           wreg	equ	0xFE8
  1720                           postdec1	equ	0xFE5
  1721                           fsr1l	equ	0xFE1
  1722                           
  1723                           	psect	bssBANK0
  1724  0000DA                     __pbssBANK0:
  1725                           	opt stack 0
  1726  0000DA                     _IR_signal:
  1727                           	opt stack 0
  1728  0000DA                     	ds	2
  1729  0000DC                     _MAG_signal:
  1730                           	opt stack 0
  1731  0000DC                     	ds	2
  1732  0000DE                     _RTCflag:
  1733                           	opt stack 0
  1734  0000DE                     	ds	2
  1735  0000E0                     _cur_state:
  1736                           	opt stack 0
  1737  0000E0                     	ds	2
  1738  0000E2                     _f_loadingNewCan:
  1739                           	opt stack 0
  1740  0000E2                     	ds	2
  1741  0000E4                     _first:
  1742                           	opt stack 0
  1743  0000E4                     	ds	2
  1744  0000E6                     _log:
  1745                           	opt stack 0
  1746  0000E6                     	ds	2
  1747  0000E8                     _log_completion:
  1748                           	opt stack 0
  1749  0000E8                     	ds	2
  1750  0000EA                     _log_count_can_no_lab:
  1751                           	opt stack 0
  1752  0000EA                     	ds	2
  1753  0000EC                     _log_count_can_w_lab:
  1754                           	opt stack 0
  1755  0000EC                     	ds	2
  1756  0000EE                     _log_count_pop_no_tab:
  1757                           	opt stack 0
  1758  0000EE                     	ds	2
  1759  0000F0                     _log_count_pop_w_tab:
  1760                           	opt stack 0
  1761  0000F0                     	ds	2
  1762  0000F2                     _log_count_total:
  1763                           	opt stack 0
  1764  0000F2                     	ds	2
  1765  0000F4                     _log_total_time:
  1766                           	opt stack 0
  1767  0000F4                     	ds	2
  1768  0000F6                     _logstate:
  1769                           	opt stack 0
  1770  0000F6                     	ds	2
  1771  0000F8                     _total_time:
  1772                           	opt stack 0
  1773  0000F8                     	ds	2
  1774  0000FA                     _var:
  1775                           	opt stack 0
  1776  0000FA                     	ds	2
  1777  0000FC                     _machine_state:
  1778                           	opt stack 0
  1779  0000FC                     	ds	1
  1780  0000FD                     _sel:
  1781                           	opt stack 0
  1782  0000FD                     	ds	1
  1783  0000FE                     _count_total:
  1784                           	opt stack 0
  1785  0000FE                     	ds	2
  1786                           tblptru	equ	0xFF8
  1787                           tblptrh	equ	0xFF7
  1788                           tblptrl	equ	0xFF6
  1789                           tablat	equ	0xFF5
  1790                           postinc0	equ	0xFEE
  1791                           wreg	equ	0xFE8
  1792                           postdec1	equ	0xFE5
  1793                           fsr1l	equ	0xFE1
  1794                           
  1795                           	psect	bssBANK1
  1796  000100                     __pbssBANK1:
  1797                           	opt stack 0
  1798  000100                     _log_startTime:
  1799                           	opt stack 0
  1800  000100                     	ds	14
  1801  00010E                     _startTime:
  1802                           	opt stack 0
  1803  00010E                     	ds	14
  1804  00011C                     _servoTimes:
  1805                           	opt stack 0
  1806  00011C                     	ds	8
  1807  000124                     _time:
  1808                           	opt stack 0
  1809  000124                     	ds	7
  1810  00012B                     _f_can_distributed:
  1811                           	opt stack 0
  1812  00012B                     	ds	2
  1813  00012D                     _i:
  1814                           	opt stack 0
  1815  00012D                     	ds	2
  1816                           tblptru	equ	0xFF8
  1817                           tblptrh	equ	0xFF7
  1818                           tblptrl	equ	0xFF6
  1819                           tablat	equ	0xFF5
  1820                           postinc0	equ	0xFEE
  1821                           wreg	equ	0xFE8
  1822                           postdec1	equ	0xFE5
  1823                           fsr1l	equ	0xFE1
  1824                           
  1825                           	psect	dataBANK1
  1826  00012F                     __pdataBANK1:
  1827                           	opt stack 0
  1828  00012F                     UI@F3225:
  1829                           	opt stack 0
  1830  00012F                     	ds	4
  1831  000133                     printRTC@F3216:
  1832                           	opt stack 0
  1833  000133                     	ds	4
  1834                           tblptru	equ	0xFF8
  1835                           tblptrh	equ	0xFF7
  1836                           tblptrl	equ	0xFF6
  1837                           tablat	equ	0xFF5
  1838                           postinc0	equ	0xFEE
  1839                           wreg	equ	0xFE8
  1840                           postdec1	equ	0xFE5
  1841                           fsr1l	equ	0xFE1
  1842                           
  1843                           	psect	cstackBANK0
  1844  000080                     __pcstackBANK0:
  1845                           	opt stack 0
  1846  000080                     ??_delay_ms:
  1847  000080                     ??_PortTests:
  1848  000080                     ??_isdigit:
  1849  000080                     ??_readADC:
  1850  000080                     ??_I2C_Master_Wait:
  1851  000080                     ?___wmul:
  1852                           	opt stack 0
  1853  000080                     ?___awmod:
  1854                           	opt stack 0
  1855  000080                     ?___lwdiv:
  1856                           	opt stack 0
  1857  000080                     ?___lldiv:
  1858                           	opt stack 0
  1859  000080                     lcdNibble@temp:
  1860                           	opt stack 0
  1861  000080                     initTime@m:
  1862                           	opt stack 0
  1863  000080                     updateServoPosition@time_us:
  1864                           	opt stack 0
  1865  000080                     EEPROM_read@address:
  1866                           	opt stack 0
  1867  000080                     ___wmul@multiplier:
  1868                           	opt stack 0
  1869  000080                     ___awmod@dividend:
  1870                           	opt stack 0
  1871  000080                     ___lwdiv@dividend:
  1872                           	opt stack 0
  1873  000080                     strcpy@to:
  1874                           	opt stack 0
  1875  000080                     ___lldiv@dividend:
  1876                           	opt stack 0
  1877                           
  1878                           ; 4 bytes @ 0x0
  1879  000080                     	ds	1
  1880  000081                     readADC@channel:
  1881                           	opt stack 0
  1882  000081                     I2C_Master_Read@a:
  1883                           	opt stack 0
  1884  000081                     lcdNibble@data:
  1885                           	opt stack 0
  1886  000081                     initTime@h:
  1887                           	opt stack 0
  1888  000081                     delay_ms@milliseconds:
  1889                           	opt stack 0
  1890  000081                     _isdigit$1948:
  1891                           	opt stack 0
  1892  000081                     I2C_Master_Write@d:
  1893                           	opt stack 0
  1894                           
  1895                           ; 2 bytes @ 0x1
  1896  000081                     	ds	1
  1897  000082                     ??_readIR:
  1898  000082                     ??_readMAG:
  1899  000082                     I2C_Master_Read@temp:
  1900                           	opt stack 0
  1901  000082                     lcdInst@data:
  1902                           	opt stack 0
  1903  000082                     putch@data:
  1904                           	opt stack 0
  1905  000082                     initTime@w:
  1906                           	opt stack 0
  1907  000082                     isdigit@c:
  1908                           	opt stack 0
  1909  000082                     updateServoPosition@timer:
  1910                           	opt stack 0
  1911  000082                     ___wmul@multiplicand:
  1912                           	opt stack 0
  1913  000082                     ___awmod@divisor:
  1914                           	opt stack 0
  1915  000082                     ___lwdiv@divisor:
  1916                           	opt stack 0
  1917  000082                     strcpy@from:
  1918                           	opt stack 0
  1919                           
  1920                           ; 2 bytes @ 0x2
  1921  000082                     	ds	1
  1922  000083                     ??_initLCD:
  1923  000083                     initTime@DD:
  1924                           	opt stack 0
  1925  000083                     getRTC@i:
  1926                           	opt stack 0
  1927                           
  1928                           ; 2 bytes @ 0x3
  1929  000083                     	ds	1
  1930  000084                     ??_updateServoPosition:
  1931  000084                     initTime@MM:
  1932                           	opt stack 0
  1933  000084                     ___awmod@counter:
  1934                           	opt stack 0
  1935  000084                     readIR@res:
  1936                           	opt stack 0
  1937  000084                     readMAG@res:
  1938                           	opt stack 0
  1939  000084                     ___wmul@product:
  1940                           	opt stack 0
  1941  000084                     ___lwdiv@quotient:
  1942                           	opt stack 0
  1943  000084                     strcpy@cp:
  1944                           	opt stack 0
  1945  000084                     ___lldiv@divisor:
  1946                           	opt stack 0
  1947                           
  1948                           ; 4 bytes @ 0x4
  1949  000084                     	ds	1
  1950  000085                     ??_initSortTimer:
  1951  000085                     initTime@YY:
  1952                           	opt stack 0
  1953  000085                     ___awmod@sign:
  1954                           	opt stack 0
  1955                           
  1956                           ; 1 bytes @ 0x5
  1957  000085                     	ds	1
  1958  000086                     ??_getIR:
  1959  000086                     ??_getMAG:
  1960  000086                     ?___awdiv:
  1961                           	opt stack 0
  1962  000086                     initTime@s:
  1963                           	opt stack 0
  1964  000086                     ___lwdiv@counter:
  1965                           	opt stack 0
  1966  000086                     updateServoPosition@my_time:
  1967                           	opt stack 0
  1968  000086                     ___awdiv@dividend:
  1969                           	opt stack 0
  1970                           
  1971                           ; 2 bytes @ 0x6
  1972  000086                     	ds	1
  1973  000087                     ?___lwmod:
  1974                           	opt stack 0
  1975  000087                     ___lwmod@dividend:
  1976                           	opt stack 0
  1977                           
  1978                           ; 2 bytes @ 0x7
  1979  000087                     	ds	1
  1980  000088                     ??_ID:
  1981  000088                     ??_Distribution:
  1982  000088                     ??_initServos:
  1983  000088                     initSortTimer@i:
  1984                           	opt stack 0
  1985  000088                     ___awdiv@divisor:
  1986                           	opt stack 0
  1987  000088                     ___lldiv@quotient:
  1988                           	opt stack 0
  1989                           
  1990                           ; 4 bytes @ 0x8
  1991  000088                     	ds	1
  1992  000089                     ___lwmod@divisor:
  1993                           	opt stack 0
  1994                           
  1995                           ; 2 bytes @ 0x9
  1996  000089                     	ds	1
  1997  00008A                     ___awdiv@counter:
  1998                           	opt stack 0
  1999  00008A                     ID@i:
  2000                           	opt stack 0
  2001                           
  2002                           ; 2 bytes @ 0xA
  2003  00008A                     	ds	1
  2004  00008B                     ___awdiv@sign:
  2005                           	opt stack 0
  2006  00008B                     ___lwmod@counter:
  2007                           	opt stack 0
  2008                           
  2009                           ; 1 bytes @ 0xB
  2010  00008B                     	ds	1
  2011  00008C                     ___lldiv@counter:
  2012                           	opt stack 0
  2013  00008C                     ___awdiv@quotient:
  2014                           	opt stack 0
  2015  00008C                     ID@sensor_outputs:
  2016                           	opt stack 0
  2017                           
  2018                           ; 6 bytes @ 0xC
  2019  00008C                     	ds	1
  2020  00008D                     I2C_Master_Init@c:
  2021                           	opt stack 0
  2022                           
  2023                           ; 4 bytes @ 0xD
  2024  00008D                     	ds	1
  2025  00008E                     ?_printf:
  2026                           	opt stack 0
  2027  00008E                     printf@f:
  2028                           	opt stack 0
  2029                           
  2030                           ; 2 bytes @ 0xE
  2031  00008E                     	ds	3
  2032  000091                     ??_I2C_Master_Init:
  2033                           
  2034                           ; 1 bytes @ 0x11
  2035  000091                     	ds	4
  2036  000095                     ??_loadRTC:
  2037                           
  2038                           ; 1 bytes @ 0x15
  2039  000095                     	ds	1
  2040  000096                     loadRTC@i:
  2041                           	opt stack 0
  2042                           
  2043                           ; 2 bytes @ 0x16
  2044  000096                     	ds	4
  2045  00009A                     ??_printf:
  2046                           
  2047                           ; 1 bytes @ 0x1A
  2048  00009A                     	ds	4
  2049  00009E                     printf@prec:
  2050                           	opt stack 0
  2051                           
  2052                           ; 1 bytes @ 0x1E
  2053  00009E                     	ds	1
  2054  00009F                     printf@cp:
  2055                           	opt stack 0
  2056                           
  2057                           ; 2 bytes @ 0x1F
  2058  00009F                     	ds	2
  2059  0000A1                     printf@ap:
  2060                           	opt stack 0
  2061                           
  2062                           ; 2 bytes @ 0x21
  2063  0000A1                     	ds	2
  2064  0000A3                     printf@len:
  2065                           	opt stack 0
  2066                           
  2067                           ; 2 bytes @ 0x23
  2068  0000A3                     	ds	2
  2069  0000A5                     printf@val:
  2070                           	opt stack 0
  2071                           
  2072                           ; 2 bytes @ 0x25
  2073  0000A5                     	ds	2
  2074  0000A7                     printf@flag:
  2075                           	opt stack 0
  2076                           
  2077                           ; 1 bytes @ 0x27
  2078  0000A7                     	ds	1
  2079  0000A8                     printf@c:
  2080                           	opt stack 0
  2081                           
  2082                           ; 1 bytes @ 0x28
  2083  0000A8                     	ds	1
  2084  0000A9                     printf@width:
  2085                           	opt stack 0
  2086                           
  2087                           ; 2 bytes @ 0x29
  2088  0000A9                     	ds	2
  2089  0000AB                     ??_printRTC:
  2090  0000AB                     ??_algorithmTest:
  2091  0000AB                     ??_sensorTest:
  2092  0000AB                     ??_actuatorTest:
  2093  0000AB                     ??_PortTestA5:
  2094  0000AB                     ??_SpeedTest:
  2095  0000AB                     ??_PusherTest:
  2096  0000AB                     ??_BothServos:
  2097  0000AB                     EEPROM_write@address:
  2098                           	opt stack 0
  2099                           
  2100                           ; 2 bytes @ 0x2B
  2101  0000AB                     	ds	1
  2102  0000AC                     PusherTest@i:
  2103                           	opt stack 0
  2104                           
  2105                           ; 2 bytes @ 0x2C
  2106  0000AC                     	ds	1
  2107  0000AD                     EEPROM_write@data:
  2108                           	opt stack 0
  2109  0000AD                     actuatorTest@i_1639:
  2110                           	opt stack 0
  2111  0000AD                     sensorTest@res:
  2112                           	opt stack 0
  2113                           
  2114                           ; 2 bytes @ 0x2D
  2115  0000AD                     	ds	1
  2116  0000AE                     ??_EEPROM_write:
  2117  0000AE                     actuatorTest@i_1646:
  2118                           	opt stack 0
  2119  0000AE                     printRTC@INT_time:
  2120                           	opt stack 0
  2121                           
  2122                           ; 14 bytes @ 0x2E
  2123  0000AE                     	ds	1
  2124  0000AF                     EEPROM_write@i:
  2125                           	opt stack 0
  2126  0000AF                     actuatorTest@i_1647:
  2127                           	opt stack 0
  2128                           
  2129                           ; 1 bytes @ 0x2F
  2130  0000AF                     	ds	1
  2131  0000B0                     EEPROM_write@i_1329:
  2132                           	opt stack 0
  2133  0000B0                     actuatorTest@i_1649:
  2134                           	opt stack 0
  2135                           
  2136                           ; 1 bytes @ 0x30
  2137  0000B0                     	ds	1
  2138  0000B1                     ??_Loading:
  2139  0000B1                     logRun@num:
  2140                           	opt stack 0
  2141  0000B1                     actuatorTest@i_1650:
  2142                           	opt stack 0
  2143                           
  2144                           ; 1 bytes @ 0x31
  2145  0000B1                     	ds	1
  2146  0000B2                     logRun@byte1:
  2147                           	opt stack 0
  2148  0000B2                     actuatorTest@i_1652:
  2149                           	opt stack 0
  2150                           
  2151                           ; 1 bytes @ 0x32
  2152  0000B2                     	ds	1
  2153  0000B3                     logRun@byte2:
  2154                           	opt stack 0
  2155  0000B3                     actuatorTest@i_1653:
  2156                           	opt stack 0
  2157  0000B3                     Loading@addr:
  2158                           	opt stack 0
  2159                           
  2160                           ; 2 bytes @ 0x33
  2161  0000B3                     	ds	1
  2162  0000B4                     logRun@byte3:
  2163                           	opt stack 0
  2164  0000B4                     actuatorTest@i_1655:
  2165                           	opt stack 0
  2166                           
  2167                           ; 1 bytes @ 0x34
  2168  0000B4                     	ds	1
  2169  0000B5                     Loading@byte1:
  2170                           	opt stack 0
  2171  0000B5                     logRun@byte_i:
  2172                           	opt stack 0
  2173  0000B5                     actuatorTest@i_1656:
  2174                           	opt stack 0
  2175                           
  2176                           ; 1 bytes @ 0x35
  2177  0000B5                     	ds	1
  2178  0000B6                     logRun@byte11:
  2179                           	opt stack 0
  2180  0000B6                     actuatorTest@i_1658:
  2181                           	opt stack 0
  2182  0000B6                     Loading@i_1098:
  2183                           	opt stack 0
  2184                           
  2185                           ; 2 bytes @ 0x36
  2186  0000B6                     	ds	1
  2187  0000B7                     actuatorTest@i_1659:
  2188                           	opt stack 0
  2189  0000B7                     logRun@i:
  2190                           	opt stack 0
  2191                           
  2192                           ; 2 bytes @ 0x37
  2193  0000B7                     	ds	1
  2194  0000B8                     actuatorTest@i_1661:
  2195                           	opt stack 0
  2196  0000B8                     Loading@i:
  2197                           	opt stack 0
  2198                           
  2199                           ; 2 bytes @ 0x38
  2200  0000B8                     	ds	1
  2201  0000B9                     actuatorTest@i_1662:
  2202                           	opt stack 0
  2203  0000B9                     logRun@addr:
  2204                           	opt stack 0
  2205                           
  2206                           ; 2 bytes @ 0x39
  2207  0000B9                     	ds	1
  2208  0000BA                     actuatorTest@i_1665:
  2209                           	opt stack 0
  2210                           
  2211                           ; 1 bytes @ 0x3A
  2212  0000BA                     	ds	1
  2213  0000BB                     actuatorTest@i_1666:
  2214                           	opt stack 0
  2215                           
  2216                           ; 1 bytes @ 0x3B
  2217  0000BB                     	ds	1
  2218  0000BC                     actuatorTest@i_1668:
  2219                           	opt stack 0
  2220  0000BC                     printRTC@RTC_month:
  2221                           	opt stack 0
  2222                           
  2223                           ; 2 bytes @ 0x3C
  2224  0000BC                     	ds	1
  2225  0000BD                     actuatorTest@i_1669:
  2226                           	opt stack 0
  2227                           
  2228                           ; 1 bytes @ 0x3D
  2229  0000BD                     	ds	1
  2230  0000BE                     actuatorTest@i_1671:
  2231                           	opt stack 0
  2232  0000BE                     printRTC@month:
  2233                           	opt stack 0
  2234                           
  2235                           ; 4 bytes @ 0x3E
  2236  0000BE                     	ds	1
  2237  0000BF                     actuatorTest@i_1672:
  2238                           	opt stack 0
  2239                           
  2240                           ; 1 bytes @ 0x3F
  2241  0000BF                     	ds	1
  2242  0000C0                     actuatorTest@i_1675:
  2243                           	opt stack 0
  2244                           
  2245                           ; 1 bytes @ 0x40
  2246  0000C0                     	ds	1
  2247  0000C1                     actuatorTest@i_1676:
  2248                           	opt stack 0
  2249                           
  2250                           ; 1 bytes @ 0x41
  2251  0000C1                     	ds	1
  2252  0000C2                     actuatorTest@i_1678:
  2253                           	opt stack 0
  2254  0000C2                     printRTC@i:
  2255                           	opt stack 0
  2256                           
  2257                           ; 2 bytes @ 0x42
  2258  0000C2                     	ds	1
  2259  0000C3                     actuatorTest@i_1679:
  2260                           	opt stack 0
  2261                           
  2262                           ; 1 bytes @ 0x43
  2263  0000C3                     	ds	1
  2264  0000C4                     ??_UI:
  2265  0000C4                     actuatorTest@i:
  2266                           	opt stack 0
  2267                           
  2268                           ; 2 bytes @ 0x44
  2269  0000C4                     	ds	2
  2270  0000C6                     ??_Test:
  2271  0000C6                     _UI$2304:
  2272                           	opt stack 0
  2273                           
  2274                           ; 2 bytes @ 0x46
  2275  0000C6                     	ds	2
  2276  0000C8                     UI@i:
  2277                           	opt stack 0
  2278                           
  2279                           ; 1 bytes @ 0x48
  2280  0000C8                     	ds	1
  2281  0000C9                     UI@i_409:
  2282                           	opt stack 0
  2283                           
  2284                           ; 1 bytes @ 0x49
  2285  0000C9                     	ds	1
  2286  0000CA                     UI@i_412:
  2287                           	opt stack 0
  2288                           
  2289                           ; 1 bytes @ 0x4A
  2290  0000CA                     	ds	1
  2291  0000CB                     UI@i_413:
  2292                           	opt stack 0
  2293                           
  2294                           ; 1 bytes @ 0x4B
  2295  0000CB                     	ds	1
  2296  0000CC                     UI@i_431:
  2297                           	opt stack 0
  2298                           
  2299                           ; 1 bytes @ 0x4C
  2300  0000CC                     	ds	1
  2301  0000CD                     UI@i_432:
  2302                           	opt stack 0
  2303                           
  2304                           ; 1 bytes @ 0x4D
  2305  0000CD                     	ds	1
  2306  0000CE                     UI@i_435:
  2307                           	opt stack 0
  2308                           
  2309                           ; 1 bytes @ 0x4E
  2310  0000CE                     	ds	1
  2311  0000CF                     UI@i_436:
  2312                           	opt stack 0
  2313                           
  2314                           ; 1 bytes @ 0x4F
  2315  0000CF                     	ds	1
  2316  0000D0                     UI@i_439:
  2317                           	opt stack 0
  2318                           
  2319                           ; 1 bytes @ 0x50
  2320  0000D0                     	ds	1
  2321  0000D1                     UI@i_440:
  2322                           	opt stack 0
  2323                           
  2324                           ; 1 bytes @ 0x51
  2325  0000D1                     	ds	1
  2326  0000D2                     UI@i_443:
  2327                           	opt stack 0
  2328                           
  2329                           ; 1 bytes @ 0x52
  2330  0000D2                     	ds	1
  2331  0000D3                     UI@i_444:
  2332                           	opt stack 0
  2333                           
  2334                           ; 1 bytes @ 0x53
  2335  0000D3                     	ds	1
  2336  0000D4                     UI@i_447:
  2337                           	opt stack 0
  2338                           
  2339                           ; 1 bytes @ 0x54
  2340  0000D4                     	ds	1
  2341  0000D5                     UI@i_448:
  2342                           	opt stack 0
  2343                           
  2344                           ; 1 bytes @ 0x55
  2345  0000D5                     	ds	1
  2346  0000D6                     UI@month:
  2347                           	opt stack 0
  2348                           
  2349                           ; 4 bytes @ 0x56
  2350  0000D6                     	ds	4
  2351  0000DA                     tblptru	equ	0xFF8
  2352                           tblptrh	equ	0xFF7
  2353                           tblptrl	equ	0xFF6
  2354                           tablat	equ	0xFF5
  2355                           postinc0	equ	0xFEE
  2356                           wreg	equ	0xFE8
  2357                           postdec1	equ	0xFE5
  2358                           fsr1l	equ	0xFE1
  2359                           
  2360                           ; 1 bytes @ 0x5A
  2361                           
  2362                           	psect	cstackCOMRAM
  2363  000001                     __pcstackCOMRAM:
  2364                           	opt stack 0
  2365  000001                     ??i2_I2C_Master_Wait:
  2366  000001                     ??i2_isdigit:
  2367  000001                     ?i2___wmul:
  2368                           	opt stack 0
  2369  000001                     ?i2___lwmod:
  2370                           	opt stack 0
  2371  000001                     i2lcdNibble@temp:
  2372                           	opt stack 0
  2373  000001                     i2EEPROM_read@address:
  2374                           	opt stack 0
  2375  000001                     i2___wmul@multiplier:
  2376                           	opt stack 0
  2377  000001                     i2___lwmod@dividend:
  2378                           	opt stack 0
  2379  000001                     i2strcpy@to:
  2380                           	opt stack 0
  2381                           
  2382                           ; 2 bytes @ 0x0
  2383  000001                     	ds	1
  2384  000002                     i2I2C_Master_Read@a:
  2385                           	opt stack 0
  2386  000002                     i2lcdNibble@data:
  2387                           	opt stack 0
  2388  000002                     i2_isdigit$1948:
  2389                           	opt stack 0
  2390  000002                     i2I2C_Master_Write@d:
  2391                           	opt stack 0
  2392                           
  2393                           ; 2 bytes @ 0x1
  2394  000002                     	ds	1
  2395  000003                     i2I2C_Master_Read@temp:
  2396                           	opt stack 0
  2397  000003                     i2lcdInst@data:
  2398                           	opt stack 0
  2399  000003                     i2putch@data:
  2400                           	opt stack 0
  2401  000003                     i2isdigit@c:
  2402                           	opt stack 0
  2403  000003                     i2___wmul@multiplicand:
  2404                           	opt stack 0
  2405  000003                     i2___lwmod@divisor:
  2406                           	opt stack 0
  2407  000003                     i2strcpy@from:
  2408                           	opt stack 0
  2409                           
  2410                           ; 2 bytes @ 0x2
  2411  000003                     	ds	1
  2412  000004                     i2getRTC@i:
  2413                           	opt stack 0
  2414                           
  2415                           ; 2 bytes @ 0x3
  2416  000004                     	ds	1
  2417  000005                     i2___lwmod@counter:
  2418                           	opt stack 0
  2419  000005                     i2___wmul@product:
  2420                           	opt stack 0
  2421  000005                     i2strcpy@cp:
  2422                           	opt stack 0
  2423                           
  2424                           ; 2 bytes @ 0x4
  2425  000005                     	ds	1
  2426  000006                     ?i2___lwdiv:
  2427                           	opt stack 0
  2428  000006                     i2___lwdiv@dividend:
  2429                           	opt stack 0
  2430                           
  2431                           ; 2 bytes @ 0x5
  2432  000006                     	ds	1
  2433  000007                     retrieveLog@logNum:
  2434                           	opt stack 0
  2435                           
  2436                           ; 2 bytes @ 0x6
  2437  000007                     	ds	1
  2438  000008                     i2___lwdiv@divisor:
  2439                           	opt stack 0
  2440                           
  2441                           ; 2 bytes @ 0x7
  2442  000008                     	ds	1
  2443  000009                     ??_retrieveLog:
  2444                           
  2445                           ; 1 bytes @ 0x8
  2446  000009                     	ds	1
  2447  00000A                     i2___lwdiv@quotient:
  2448                           	opt stack 0
  2449                           
  2450                           ; 2 bytes @ 0x9
  2451  00000A                     	ds	1
  2452  00000B                     retrieveLog@byte1:
  2453                           	opt stack 0
  2454                           
  2455                           ; 1 bytes @ 0xA
  2456  00000B                     	ds	1
  2457  00000C                     retrieveLog@byte2:
  2458                           	opt stack 0
  2459  00000C                     i2___lwdiv@counter:
  2460                           	opt stack 0
  2461                           
  2462                           ; 1 bytes @ 0xB
  2463  00000C                     	ds	1
  2464  00000D                     ?i2_printf:
  2465                           	opt stack 0
  2466  00000D                     retrieveLog@byte3:
  2467                           	opt stack 0
  2468  00000D                     i2printf@f:
  2469                           	opt stack 0
  2470                           
  2471                           ; 2 bytes @ 0xC
  2472  00000D                     	ds	1
  2473  00000E                     retrieveLog@i:
  2474                           	opt stack 0
  2475                           
  2476                           ; 2 bytes @ 0xD
  2477  00000E                     	ds	2
  2478  000010                     retrieveLog@addr:
  2479                           	opt stack 0
  2480                           
  2481                           ; 2 bytes @ 0xF
  2482  000010                     	ds	2
  2483  000012                     dispLogs@myLog:
  2484                           	opt stack 0
  2485                           
  2486                           ; 2 bytes @ 0x11
  2487  000012                     	ds	2
  2488  000014                     
  2489                           ; 1 bytes @ 0x13
  2490  000014                     	ds	5
  2491  000019                     ??i2_printf:
  2492                           
  2493                           ; 1 bytes @ 0x18
  2494  000019                     	ds	4
  2495  00001D                     i2printf@prec:
  2496                           	opt stack 0
  2497                           
  2498                           ; 1 bytes @ 0x1C
  2499  00001D                     	ds	1
  2500  00001E                     i2printf@cp:
  2501                           	opt stack 0
  2502                           
  2503                           ; 2 bytes @ 0x1D
  2504  00001E                     	ds	2
  2505  000020                     i2printf@ap:
  2506                           	opt stack 0
  2507                           
  2508                           ; 2 bytes @ 0x1F
  2509  000020                     	ds	2
  2510  000022                     i2printf@len:
  2511                           	opt stack 0
  2512                           
  2513                           ; 2 bytes @ 0x21
  2514  000022                     	ds	2
  2515  000024                     i2printf@val:
  2516                           	opt stack 0
  2517                           
  2518                           ; 2 bytes @ 0x23
  2519  000024                     	ds	2
  2520  000026                     i2printf@flag:
  2521                           	opt stack 0
  2522                           
  2523                           ; 1 bytes @ 0x25
  2524  000026                     	ds	1
  2525  000027                     i2printf@c:
  2526                           	opt stack 0
  2527                           
  2528                           ; 1 bytes @ 0x26
  2529  000027                     	ds	1
  2530  000028                     i2printf@width:
  2531                           	opt stack 0
  2532                           
  2533                           ; 2 bytes @ 0x27
  2534  000028                     	ds	2
  2535  00002A                     ??_printSortTimer:
  2536  00002A                     ??i2_printRTC:
  2537  00002A                     ?_inputHandler:
  2538                           	opt stack 0
  2539                           
  2540                           ; 2 bytes @ 0x29
  2541  00002A                     	ds	2
  2542  00002C                     ??_inputHandler:
  2543                           
  2544                           ; 1 bytes @ 0x2B
  2545  00002C                     	ds	1
  2546  00002D                     printSortTimer@hour:
  2547                           	opt stack 0
  2548  00002D                     i2printRTC@INT_time:
  2549                           	opt stack 0
  2550                           
  2551                           ; 14 bytes @ 0x2C
  2552  00002D                     	ds	2
  2553  00002F                     printSortTimer@curTime:
  2554                           	opt stack 0
  2555                           
  2556                           ; 14 bytes @ 0x2E
  2557  00002F                     	ds	12
  2558  00003B                     i2printRTC@RTC_month:
  2559                           	opt stack 0
  2560                           
  2561                           ; 2 bytes @ 0x3A
  2562  00003B                     	ds	2
  2563  00003D                     printSortTimer@start_sec:
  2564                           	opt stack 0
  2565  00003D                     i2printRTC@month:
  2566                           	opt stack 0
  2567                           
  2568                           ; 4 bytes @ 0x3C
  2569  00003D                     	ds	2
  2570  00003F                     printSortTimer@cur_sec:
  2571                           	opt stack 0
  2572                           
  2573                           ; 2 bytes @ 0x3E
  2574  00003F                     	ds	2
  2575  000041                     printSortTimer@min:
  2576                           	opt stack 0
  2577  000041                     i2printRTC@i:
  2578                           	opt stack 0
  2579                           
  2580                           ; 2 bytes @ 0x40
  2581  000041                     	ds	2
  2582  000043                     ??_updateMenu:
  2583  000043                     printSortTimer@sec:
  2584                           	opt stack 0
  2585                           
  2586                           ; 2 bytes @ 0x42
  2587  000043                     	ds	2
  2588  000045                     _printSortTimer$2424:
  2589                           	opt stack 0
  2590                           
  2591                           ; 2 bytes @ 0x44
  2592  000045                     	ds	2
  2593  000047                     printSortTimer@timeDiff:
  2594                           	opt stack 0
  2595                           
  2596                           ; 2 bytes @ 0x46
  2597  000047                     	ds	2
  2598  000049                     printSortTimer@i:
  2599                           	opt stack 0
  2600                           
  2601                           ; 2 bytes @ 0x48
  2602  000049                     	ds	2
  2603  00004B                     ??_handler:
  2604                           
  2605                           ; 1 bytes @ 0x4A
  2606  00004B                     	ds	16
  2607                           tblptru	equ	0xFF8
  2608                           tblptrh	equ	0xFF7
  2609                           tblptrl	equ	0xFF6
  2610                           tablat	equ	0xFF5
  2611                           postinc0	equ	0xFEE
  2612                           wreg	equ	0xFE8
  2613                           postdec1	equ	0xFE5
  2614                           fsr1l	equ	0xFE1
  2615                           
  2616 ;;
  2617 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2618 ;;
  2619 ;; *************** function _main *****************
  2620 ;; Defined at:
  2621 ;;		line 19 in file "main.c"
  2622 ;; Parameters:    Size  Location     Type
  2623 ;;		None
  2624 ;; Auto vars:     Size  Location     Type
  2625 ;;		None
  2626 ;; Return value:  Size  Location     Type
  2627 ;;                  1    wreg      void 
  2628 ;; Registers used:
  2629 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2630 ;; Tracked objects:
  2631 ;;		On entry : 0/0
  2632 ;;		On exit  : 0/0
  2633 ;;		Unchanged: 0/0
  2634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2636 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2638 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2639 ;;Total ram usage:        0 bytes
  2640 ;; Hardware stack levels required when called:   13
  2641 ;; This function calls:
  2642 ;;		_I2C_Master_Init
  2643 ;;		_Test
  2644 ;;		_UI
  2645 ;;		_initLCD
  2646 ;;		_initTime
  2647 ;;		_initUI
  2648 ;;		_logRun
  2649 ;;		_machineConfig
  2650 ;;		_sort
  2651 ;;		_stopSignals
  2652 ;; This function is called by:
  2653 ;;		Startup code after reset
  2654 ;; This function uses a non-reentrant model
  2655 ;;
  2656                           
  2657                           	psect	text0
  2658  003624                     __ptext0:
  2659                           	opt stack 0
  2660  003624                     _main:
  2661                           	opt stack 18
  2662                           
  2663                           ;main.c: 20: machineConfig();
  2664                           
  2665                           ;incstack = 0
  2666  003624  EC9C  F01F         	call	_machineConfig	;wreg free
  2667                           
  2668                           ;main.c: 21: initLCD();
  2669  003628  EC16  F021         	call	_initLCD	;wreg free
  2670                           
  2671                           ;main.c: 24: RTCflag = 0;
  2672  00362C  0E00               	movlw	0
  2673  00362E  0100               	movlb	0	; () banked
  2674  003630  6FDF               	movwf	(_RTCflag+1)& (0+255),b
  2675  003632  0E00               	movlw	0
  2676  003634  6FDE               	movwf	_RTCflag& (0+255),b
  2677                           
  2678                           ;main.c: 25: if(RTCflag){
  2679  003636  0100               	movlb	0	; () banked
  2680  003638  51DE               	movf	_RTCflag& (0+255),w,b
  2681  00363A  0100               	movlb	0	; () banked
  2682  00363C  11DF               	iorwf	(_RTCflag+1)& (0+255),w,b
  2683  00363E  B4D8               	btfsc	status,2,c
  2684  003640  D016               	goto	l8148
  2685                           
  2686                           ; BSR set to: 0
  2687                           ;main.c: 26: initTime(0x42, 0x20, 0x15, 0x04, 0x15, 0x03, 0x17);
  2688  003642  0E20               	movlw	32
  2689  003644  0100               	movlb	0	; () banked
  2690  003646  6F80               	movwf	initTime@m& (0+255),b
  2691  003648  0E15               	movlw	21
  2692  00364A  0100               	movlb	0	; () banked
  2693  00364C  6F81               	movwf	initTime@h& (0+255),b
  2694  00364E  0E04               	movlw	4
  2695  003650  0100               	movlb	0	; () banked
  2696  003652  6F82               	movwf	initTime@w& (0+255),b
  2697  003654  0E15               	movlw	21
  2698  003656  0100               	movlb	0	; () banked
  2699  003658  6F83               	movwf	initTime@DD& (0+255),b
  2700  00365A  0E03               	movlw	3
  2701  00365C  0100               	movlb	0	; () banked
  2702  00365E  6F84               	movwf	initTime@MM& (0+255),b
  2703  003660  0E17               	movlw	23
  2704  003662  0100               	movlb	0	; () banked
  2705  003664  6F85               	movwf	initTime@YY& (0+255),b
  2706  003666  0E42               	movlw	66
  2707  003668  ECC9  F023         	call	_initTime
  2708                           
  2709                           ;main.c: 27: }
  2710  00366C  D00B               	goto	l8150
  2711  00366E                     l8148:
  2712                           
  2713                           ;main.c: 28: else{
  2714                           ;main.c: 29: I2C_Master_Init(10000);
  2715  00366E  0E10               	movlw	16
  2716  003670  0100               	movlb	0	; () banked
  2717  003672  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2718  003674  0E27               	movlw	39
  2719  003676  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2720  003678  0E00               	movlw	0
  2721  00367A  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2722  00367C  0E00               	movlw	0
  2723  00367E  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2724  003680  EC6C  F01F         	call	_I2C_Master_Init	;wreg free
  2725  003684                     l8150:
  2726                           
  2727                           ;main.c: 30: }
  2728                           ;main.c: 32: initUI();
  2729  003684  ECD2  F022         	call	_initUI	;wreg free
  2730                           
  2731                           ;main.c: 33: first = 1;
  2732  003688  0E00               	movlw	0
  2733  00368A  0100               	movlb	0	; () banked
  2734  00368C  6FE5               	movwf	(_first+1)& (0+255),b
  2735  00368E  0E01               	movlw	1
  2736  003690  6FE4               	movwf	_first& (0+255),b
  2737                           
  2738                           ; BSR set to: 0
  2739                           ;main.c: 44: switch(machine_state){
  2740                           
  2741                           ;main.c: 43: while(1){
  2742  003692  D018               	goto	l8172
  2743  003694                     l8154:
  2744                           
  2745                           ; BSR set to: 0
  2746                           ;main.c: 46: UI();
  2747  003694  EC65  F004         	call	_UI	;wreg free
  2748                           
  2749                           ;main.c: 47: break;
  2750  003698  D015               	goto	l8172
  2751  00369A                     l8156:
  2752                           
  2753                           ;main.c: 49: sort();
  2754  00369A  ECB8  F023         	call	_sort	;wreg free
  2755                           
  2756                           ;main.c: 50: break;
  2757  00369E  D012               	goto	l8172
  2758  0036A0                     l8158:
  2759                           
  2760                           ;main.c: 52: stopSignals();
  2761  0036A0  ECF5  F023         	call	_stopSignals	;wreg free
  2762                           
  2763                           ;main.c: 53: logRun();
  2764  0036A4  EC80  F018         	call	_logRun	;wreg free
  2765                           
  2766                           ;main.c: 54: first = 1;
  2767  0036A8  0E00               	movlw	0
  2768  0036AA  0100               	movlb	0	; () banked
  2769  0036AC  6FE5               	movwf	(_first+1)& (0+255),b
  2770  0036AE  0E01               	movlw	1
  2771  0036B0  6FE4               	movwf	_first& (0+255),b
  2772                           
  2773                           ; BSR set to: 0
  2774                           ;main.c: 55: UI();
  2775  0036B2  EC65  F004         	call	_UI	;wreg free
  2776                           
  2777                           ;main.c: 56: break;
  2778  0036B6  D006               	goto	l8172
  2779  0036B8                     l8166:
  2780                           
  2781                           ;main.c: 58: Test();
  2782  0036B8  ECB1  F019         	call	_Test	;wreg free
  2783                           
  2784                           ;main.c: 59: break;
  2785  0036BC  D003               	goto	l8172
  2786  0036BE                     l8168:
  2787                           
  2788                           ;main.c: 61: stopSignals();
  2789  0036BE  ECF5  F023         	call	_stopSignals	;wreg free
  2790  0036C2                     l487:
  2791  0036C2  D7FF               	goto	l487
  2792  0036C4                     l8172:
  2793  0036C4  0100               	movlb	0	; () banked
  2794  0036C6  51FC               	movf	_machine_state& (0+255),w,b
  2795                           
  2796                           ; Switch size 1, requested type "space"
  2797                           ; Number of cases is 5, Range of values is 0 to 4
  2798                           ; switch strategies available:
  2799                           ; Name         Instructions Cycles
  2800                           ; simple_byte           16     9 (average)
  2801                           ;	Chosen strategy is simple_byte
  2802  0036C8  0A00               	xorlw	0	; case 0
  2803  0036CA  B4D8               	btfsc	status,2,c
  2804  0036CC  D7E3               	goto	l8154
  2805  0036CE  0A01               	xorlw	1	; case 1
  2806  0036D0  B4D8               	btfsc	status,2,c
  2807  0036D2  D7E3               	goto	l8156
  2808  0036D4  0A03               	xorlw	3	; case 2
  2809  0036D6  B4D8               	btfsc	status,2,c
  2810  0036D8  D7E3               	goto	l8158
  2811  0036DA  0A01               	xorlw	1	; case 3
  2812  0036DC  B4D8               	btfsc	status,2,c
  2813  0036DE  D7EC               	goto	l8166
  2814  0036E0  0A07               	xorlw	7	; case 4
  2815  0036E2  B4D8               	btfsc	status,2,c
  2816  0036E4  D7EC               	goto	l8168
  2817                           
  2818                           ; BSR set to: 0
  2819                           
  2820                           ; BSR set to: 0
  2821  0036E6  D7EE               	goto	l8172
  2822  0036E8                     __end_of_main:
  2823                           	opt stack 0
  2824                           tblptru	equ	0xFF8
  2825                           tblptrh	equ	0xFF7
  2826                           tblptrl	equ	0xFF6
  2827                           tablat	equ	0xFF5
  2828                           postinc0	equ	0xFEE
  2829                           wreg	equ	0xFE8
  2830                           postdec1	equ	0xFE5
  2831                           fsr1l	equ	0xFE1
  2832                           status	equ	0xFD8
  2833                           
  2834 ;; *************** function _stopSignals *****************
  2835 ;; Defined at:
  2836 ;;		line 70 in file "main.c"
  2837 ;; Parameters:    Size  Location     Type
  2838 ;;		None
  2839 ;; Auto vars:     Size  Location     Type
  2840 ;;		None
  2841 ;; Return value:  Size  Location     Type
  2842 ;;                  1    wreg      void 
  2843 ;; Registers used:
  2844 ;;		wreg, status,2
  2845 ;; Tracked objects:
  2846 ;;		On entry : 0/0
  2847 ;;		On exit  : 0/0
  2848 ;;		Unchanged: 0/0
  2849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2853 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2854 ;;Total ram usage:        0 bytes
  2855 ;; Hardware stack levels used:    1
  2856 ;; Hardware stack levels required when called:    7
  2857 ;; This function calls:
  2858 ;;		Nothing
  2859 ;; This function is called by:
  2860 ;;		_main
  2861 ;; This function uses a non-reentrant model
  2862 ;;
  2863                           
  2864                           	psect	text1
  2865  0047EA                     __ptext1:
  2866                           	opt stack 0
  2867  0047EA                     _stopSignals:
  2868                           	opt stack 23
  2869                           
  2870                           ;main.c: 71: LATA = 0x00;
  2871                           
  2872                           ; BSR set to: 0
  2873                           ;incstack = 0
  2874  0047EA  0E00               	movlw	0
  2875  0047EC  6E89               	movwf	3977,c	;volatile
  2876                           
  2877                           ;main.c: 72: LATB = 0x00;
  2878  0047EE  0E00               	movlw	0
  2879  0047F0  6E8A               	movwf	3978,c	;volatile
  2880                           
  2881                           ;main.c: 73: LATC = 0x00;
  2882  0047F2  0E00               	movlw	0
  2883  0047F4  6E8B               	movwf	3979,c	;volatile
  2884                           
  2885                           ;main.c: 74: LATD = 0x00;
  2886  0047F6  0E00               	movlw	0
  2887  0047F8  6E8C               	movwf	3980,c	;volatile
  2888                           
  2889                           ;main.c: 75: LATE = 0x00;
  2890  0047FA  0E00               	movlw	0
  2891  0047FC  6E8D               	movwf	3981,c	;volatile
  2892  0047FE  0012               	return		;funcret
  2893  004800                     __end_of_stopSignals:
  2894                           	opt stack 0
  2895                           tblptru	equ	0xFF8
  2896                           tblptrh	equ	0xFF7
  2897                           tblptrl	equ	0xFF6
  2898                           tablat	equ	0xFF5
  2899                           postinc0	equ	0xFEE
  2900                           wreg	equ	0xFE8
  2901                           postdec1	equ	0xFE5
  2902                           fsr1l	equ	0xFE1
  2903                           status	equ	0xFD8
  2904                           
  2905 ;; *************** function _sort *****************
  2906 ;; Defined at:
  2907 ;;		line 55 in file "sort.c"
  2908 ;; Parameters:    Size  Location     Type
  2909 ;;		None
  2910 ;; Auto vars:     Size  Location     Type
  2911 ;;		None
  2912 ;; Return value:  Size  Location     Type
  2913 ;;                  1    wreg      void 
  2914 ;; Registers used:
  2915 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2916 ;; Tracked objects:
  2917 ;;		On entry : 0/0
  2918 ;;		On exit  : 0/0
  2919 ;;		Unchanged: 0/0
  2920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2921 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2922 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2924 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2925 ;;Total ram usage:        0 bytes
  2926 ;; Hardware stack levels used:    1
  2927 ;; Hardware stack levels required when called:   12
  2928 ;; This function calls:
  2929 ;;		_Distribution
  2930 ;;		_ID
  2931 ;;		_Loading
  2932 ;; This function is called by:
  2933 ;;		_main
  2934 ;; This function uses a non-reentrant model
  2935 ;;
  2936                           
  2937                           	psect	text2
  2938  004770                     __ptext2:
  2939                           	opt stack 0
  2940  004770                     _sort:
  2941                           	opt stack 18
  2942                           
  2943                           ;sort.c: 56: if(machine_state == Sorting_state){
  2944                           
  2945                           ;incstack = 0
  2946  004770  0100               	movlb	0	; () banked
  2947  004772  05FC               	decf	_machine_state& (0+255),w,b
  2948  004774  B4D8               	btfsc	status,2,c
  2949                           
  2950                           ; BSR set to: 0
  2951                           ;sort.c: 57: Loading();
  2952  004776  EC9C  F015         	call	_Loading	;wreg free
  2953                           
  2954                           ;sort.c: 58: }
  2955                           ;sort.c: 59: if(machine_state == Sorting_state){
  2956  00477A  0100               	movlb	0	; () banked
  2957  00477C  05FC               	decf	_machine_state& (0+255),w,b
  2958  00477E  B4D8               	btfsc	status,2,c
  2959                           
  2960                           ; BSR set to: 0
  2961                           ;sort.c: 60: ID();
  2962  004780  ECD2  F017         	call	_ID	;wreg free
  2963                           
  2964                           ;sort.c: 61: }
  2965                           ;sort.c: 62: if(machine_state == Sorting_state){
  2966  004784  0100               	movlb	0	; () banked
  2967  004786  05FC               	decf	_machine_state& (0+255),w,b
  2968  004788  A4D8               	btfss	status,2,c
  2969  00478A  0012               	return	
  2970                           
  2971                           ; BSR set to: 0
  2972                           ;sort.c: 63: Distribution();
  2973  00478C  EC23  F017         	call	_Distribution	;wreg free
  2974  004790  0012               	return	
  2975  004792                     __end_of_sort:
  2976                           	opt stack 0
  2977                           tblptru	equ	0xFF8
  2978                           tblptrh	equ	0xFF7
  2979                           tblptrl	equ	0xFF6
  2980                           tablat	equ	0xFF5
  2981                           postinc0	equ	0xFEE
  2982                           wreg	equ	0xFE8
  2983                           postdec1	equ	0xFE5
  2984                           fsr1l	equ	0xFE1
  2985                           status	equ	0xFD8
  2986                           
  2987 ;; *************** function _Loading *****************
  2988 ;; Defined at:
  2989 ;;		line 67 in file "sort.c"
  2990 ;; Parameters:    Size  Location     Type
  2991 ;;		None
  2992 ;; Auto vars:     Size  Location     Type
  2993 ;;  i               2   54[BANK0 ] int 
  2994 ;;  i               2   56[BANK0 ] int 
  2995 ;;  addr            2   51[BANK0 ] unsigned short 
  2996 ;;  byte1           1   53[BANK0 ] unsigned char 
  2997 ;; Return value:  Size  Location     Type
  2998 ;;                  1    wreg      void 
  2999 ;; Registers used:
  3000 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3001 ;; Tracked objects:
  3002 ;;		On entry : 0/0
  3003 ;;		On exit  : 0/0
  3004 ;;		Unchanged: 0/0
  3005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3007 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3008 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3009 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3010 ;;Total ram usage:        9 bytes
  3011 ;; Hardware stack levels used:    1
  3012 ;; Hardware stack levels required when called:   11
  3013 ;; This function calls:
  3014 ;;		_EEPROM_read
  3015 ;;		_EEPROM_write
  3016 ;;		_delay_ms
  3017 ;;		_getIR
  3018 ;;		_initGlobalVars
  3019 ;;		_initServos
  3020 ;;		_initSortTimer
  3021 ;;		_lcdInst
  3022 ;; This function is called by:
  3023 ;;		_sort
  3024 ;; This function uses a non-reentrant model
  3025 ;;
  3026                           
  3027                           	psect	text3
  3028  002B38                     __ptext3:
  3029                           	opt stack 0
  3030  002B38                     _Loading:
  3031                           	opt stack 18
  3032                           
  3033                           ;sort.c: 68: if(first){
  3034                           
  3035                           ;incstack = 0
  3036  002B38  0100               	movlb	0	; () banked
  3037  002B3A  51E4               	movf	_first& (0+255),w,b
  3038  002B3C  0100               	movlb	0	; () banked
  3039  002B3E  11E5               	iorwf	(_first+1)& (0+255),w,b
  3040  002B40  B4D8               	btfsc	status,2,c
  3041  002B42  D074               	goto	l6454
  3042                           
  3043                           ; BSR set to: 0
  3044                           ;sort.c: 69: initGlobalVars();
  3045  002B44  ECD2  F01E         	call	_initGlobalVars	;wreg free
  3046                           
  3047                           ;sort.c: 70: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3048  002B48  0E01               	movlw	1
  3049  002B4A  EC26  F024         	call	_lcdInst
  3050  002B4E  0E68               	movlw	104
  3051  002B50  0100               	movlb	0	; () banked
  3052  002B52  6FB1               	movwf	??_Loading& (0+255),b
  3053  002B54  0EE4               	movlw	228
  3054  002B56                     u7117:
  3055  002B56  2EE8               	decfsz	wreg,f,c
  3056  002B58  D7FE               	bra	u7117
  3057  002B5A  2FB1               	decfsz	??_Loading& (0+255),f,b
  3058  002B5C  D7FC               	bra	u7117
  3059  002B5E  F000               	nop	
  3060                           
  3061                           ;sort.c: 71: initSortTimer();
  3062  002B60  EC31  F01C         	call	_initSortTimer	;wreg free
  3063                           
  3064                           ;sort.c: 72: LATCbits.LATC5 = 1;
  3065  002B64  8A8B               	bsf	3979,5,c	;volatile
  3066                           
  3067                           ;sort.c: 77: sel = EEPROM_read(0);
  3068  002B66  0E00               	movlw	0
  3069  002B68  0100               	movlb	0	; () banked
  3070  002B6A  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3071  002B6C  0E00               	movlw	0
  3072  002B6E  6F80               	movwf	EEPROM_read@address& (0+255),b
  3073  002B70  ECE9  F023         	call	_EEPROM_read	;wreg free
  3074  002B74  0100               	movlb	0	; () banked
  3075  002B76  6FFD               	movwf	_sel& (0+255),b
  3076                           
  3077                           ; BSR set to: 0
  3078                           ;sort.c: 78: unsigned short addr = 1 + 11 * sel;
  3079  002B78  0100               	movlb	0	; () banked
  3080  002B7A  51FD               	movf	_sel& (0+255),w,b
  3081  002B7C  0D0B               	mullw	11
  3082  002B7E  0E01               	movlw	1
  3083  002B80  24F3               	addwf	prodl,w,c
  3084  002B82  0100               	movlb	0	; () banked
  3085  002B84  6FB3               	movwf	Loading@addr& (0+255),b
  3086  002B86  0E00               	movlw	0
  3087  002B88  20F4               	addwfc	prodh,w,c
  3088  002B8A  0100               	movlb	0	; () banked
  3089  002B8C  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3090                           
  3091                           ; BSR set to: 0
  3092                           ;sort.c: 79: unsigned char byte1 = 0b01111111;
  3093  002B8E  0E7F               	movlw	127
  3094  002B90  0100               	movlb	0	; () banked
  3095  002B92  6FB5               	movwf	Loading@byte1& (0+255),b
  3096                           
  3097                           ; BSR set to: 0
  3098                           ;sort.c: 80: EEPROM_write(addr, byte1);
  3099  002B94  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3100  002B98  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3101  002B9C  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3102  002BA0  EC35  F01A         	call	_EEPROM_write	;wreg free
  3103                           
  3104                           ;sort.c: 83: LATAbits.LATA5 = 0;
  3105  002BA4  9A89               	bcf	3977,5,c	;volatile
  3106                           
  3107                           ;sort.c: 85: for(int i=0; i<46; i++){
  3108  002BA6  0E00               	movlw	0
  3109  002BA8  0100               	movlb	0	; () banked
  3110  002BAA  6FB9               	movwf	(Loading@i+1)& (0+255),b
  3111  002BAC  0E00               	movlw	0
  3112  002BAE  6FB8               	movwf	Loading@i& (0+255),b
  3113                           
  3114                           ; BSR set to: 0
  3115  002BB0  0100               	movlb	0	; () banked
  3116  002BB2  BFB9               	btfsc	(Loading@i+1)& (0+255),7,b
  3117  002BB4  D008               	goto	l6442
  3118  002BB6  0100               	movlb	0	; () banked
  3119  002BB8  51B9               	movf	(Loading@i+1)& (0+255),w,b
  3120  002BBA  E126               	bnz	l730
  3121  002BBC  0E2E               	movlw	46
  3122  002BBE  0100               	movlb	0	; () banked
  3123  002BC0  5DB8               	subwf	Loading@i& (0+255),w,b
  3124  002BC2  B0D8               	btfsc	status,0,c
  3125  002BC4  D021               	goto	l730
  3126  002BC6                     l6442:
  3127                           
  3128                           ; BSR set to: 0
  3129                           ;sort.c: 86: LATAbits.LATA5 = !LATAbits.LATA5;
  3130  002BC6  BA89               	btfsc	3977,5,c	;volatile
  3131  002BC8  D004               	goto	u4850
  3132  002BCA  0100               	movlb	0	; () banked
  3133  002BCC  6BB1               	clrf	??_Loading& (0+255),b
  3134  002BCE  2BB1               	incf	??_Loading& (0+255),f,b
  3135  002BD0  D002               	goto	u4868
  3136  002BD2                     u4850:
  3137  002BD2  0100               	movlb	0	; () banked
  3138  002BD4  6BB1               	clrf	??_Loading& (0+255),b
  3139  002BD6                     u4868:
  3140  002BD6  0100               	movlb	0	; () banked
  3141  002BD8  3BB1               	swapf	??_Loading& (0+255),f,b
  3142  002BDA  47B1               	rlncf	??_Loading& (0+255),f,b
  3143  002BDC  5089               	movf	3977,w,c	;volatile
  3144  002BDE  0100               	movlb	0	; () banked
  3145  002BE0  19B1               	xorwf	??_Loading& (0+255),w,b
  3146  002BE2  0BDF               	andlw	-33
  3147  002BE4  19B1               	xorwf	??_Loading& (0+255),w,b
  3148  002BE6  6E89               	movwf	3977,c	;volatile
  3149                           
  3150                           ; BSR set to: 0
  3151                           ;sort.c: 87: delay_ms(45-i);
  3152  002BE8  0100               	movlb	0	; () banked
  3153  002BEA  51B8               	movf	Loading@i& (0+255),w,b
  3154  002BEC  0800               	sublw	0
  3155  002BEE  0F2D               	addlw	45
  3156  002BF0  EC58  F023         	call	_delay_ms
  3157  002BF4  0100               	movlb	0	; () banked
  3158  002BF6  4BB8               	infsnz	Loading@i& (0+255),f,b
  3159  002BF8  2BB9               	incf	(Loading@i+1)& (0+255),f,b
  3160                           
  3161                           ; BSR set to: 0
  3162  002BFA  0100               	movlb	0	; () banked
  3163  002BFC  BFB9               	btfsc	(Loading@i+1)& (0+255),7,b
  3164  002BFE  D7E3               	goto	l6442
  3165  002C00  0100               	movlb	0	; () banked
  3166  002C02  51B9               	movf	(Loading@i+1)& (0+255),w,b
  3167  002C04  E101               	bnz	u4870
  3168  002C06  D7DA               	goto	L1
  3169  002C08                     u4870:
  3170  002C08                     l730:
  3171                           
  3172                           ; BSR set to: 0
  3173                           ;sort.c: 88: }
  3174                           ;sort.c: 89: LATAbits.LATA5 = 1;
  3175  002C08  8A89               	bsf	3977,5,c	;volatile
  3176                           
  3177                           ; BSR set to: 0
  3178                           ;sort.c: 92: initServos();
  3179  002C0A  ECF8  F01F         	call	_initServos	;wreg free
  3180                           
  3181                           ;sort.c: 93: _delay((unsigned long)((5000)*(32000000/4000.0)));
  3182  002C0E  0ECB               	movlw	203
  3183  002C10  0100               	movlb	0	; () banked
  3184  002C12  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3185  002C14  0EEC               	movlw	236
  3186  002C16  0100               	movlb	0	; () banked
  3187  002C18  6FB1               	movwf	??_Loading& (0+255),b
  3188  002C1A  0E84               	movlw	132
  3189  002C1C                     u7127:
  3190  002C1C  2EE8               	decfsz	wreg,f,c
  3191  002C1E  D7FE               	bra	u7127
  3192  002C20  2FB1               	decfsz	??_Loading& (0+255),f,b
  3193  002C22  D7FC               	bra	u7127
  3194  002C24  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3195  002C26  D7FA               	bra	u7127
  3196  002C28  F000               	nop	
  3197                           
  3198                           ;sort.c: 94: }
  3199  002C2A  0012               	return	
  3200  002C2C                     l6454:
  3201                           
  3202                           ;sort.c: 95: else{
  3203                           ;sort.c: 98: if(!f_loadingNewCan){
  3204  002C2C  0100               	movlb	0	; () banked
  3205  002C2E  51E2               	movf	_f_loadingNewCan& (0+255),w,b
  3206  002C30  0100               	movlb	0	; () banked
  3207  002C32  11E3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3208  002C34  A4D8               	btfss	status,2,c
  3209  002C36  D017               	goto	l6470
  3210                           
  3211                           ; BSR set to: 0
  3212                           ;sort.c: 100: getIR();
  3213  002C38  EC50  F020         	call	_getIR	;wreg free
  3214                           
  3215                           ;sort.c: 102: if(!f_loadingNewCan){
  3216  002C3C  0100               	movlb	0	; () banked
  3217  002C3E  51E2               	movf	_f_loadingNewCan& (0+255),w,b
  3218  002C40  0100               	movlb	0	; () banked
  3219  002C42  11E3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3220  002C44  B4D8               	btfsc	status,2,c
  3221  002C46  0012               	return	
  3222                           
  3223                           ; BSR set to: 0
  3224                           ;sort.c: 106: else{
  3225                           ;sort.c: 107: count_total++;
  3226                           
  3227                           ; BSR set to: 0
  3228                           
  3229                           ; BSR set to: 0
  3230                           ;sort.c: 104: }
  3231                           
  3232                           ; BSR set to: 0
  3233                           ;sort.c: 103: return;
  3234  002C48  0100               	movlb	0	; () banked
  3235  002C4A  4BFE               	infsnz	_count_total& (0+255),f,b
  3236  002C4C  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3237                           
  3238                           ; BSR set to: 0
  3239                           ;sort.c: 108: if(count_total == 12){
  3240  002C4E  0E0C               	movlw	12
  3241  002C50  0100               	movlb	0	; () banked
  3242  002C52  19FE               	xorwf	_count_total& (0+255),w,b
  3243  002C54  0100               	movlb	0	; () banked
  3244  002C56  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3245  002C58  A4D8               	btfss	status,2,c
  3246  002C5A  0012               	return	
  3247                           
  3248                           ; BSR set to: 0
  3249                           ;sort.c: 109: f_lastCan = 1;
  3250  002C5C  0E00               	movlw	0
  3251  002C5E  6E74               	movwf	_f_lastCan+1,c
  3252  002C60  0E01               	movlw	1
  3253  002C62  6E73               	movwf	_f_lastCan,c
  3254                           
  3255                           ; BSR set to: 0
  3256                           ;sort.c: 110: }
  3257                           ;sort.c: 111: }
  3258                           ;sort.c: 112: }
  3259                           
  3260                           ; BSR set to: 0
  3261  002C64  0012               	return	
  3262  002C66                     l6470:
  3263                           
  3264                           ; BSR set to: 0
  3265                           ;sort.c: 115: else if(f_ID_receive){
  3266  002C66  506D               	movf	_f_ID_receive,w,c
  3267  002C68  106E               	iorwf	_f_ID_receive+1,w,c
  3268  002C6A  B4D8               	btfsc	status,2,c
  3269  002C6C  0012               	return	
  3270                           
  3271                           ; BSR set to: 0
  3272                           ;sort.c: 116: f_loadingNewCan = 0;
  3273  002C6E  0E00               	movlw	0
  3274  002C70  0100               	movlb	0	; () banked
  3275  002C72  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3276  002C74  0E00               	movlw	0
  3277  002C76  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3278                           
  3279                           ; BSR set to: 0
  3280                           ;sort.c: 117: _delay((unsigned long)((1500)*(32000000/4000.0)));
  3281  002C78  0E3D               	movlw	61
  3282  002C7A  0100               	movlb	0	; () banked
  3283  002C7C  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3284  002C7E  0EE1               	movlw	225
  3285  002C80  0100               	movlb	0	; () banked
  3286  002C82  6FB1               	movwf	??_Loading& (0+255),b
  3287  002C84  0E3F               	movlw	63
  3288  002C86                     u7137:
  3289  002C86  2EE8               	decfsz	wreg,f,c
  3290  002C88  D7FE               	bra	u7137
  3291  002C8A  2FB1               	decfsz	??_Loading& (0+255),f,b
  3292  002C8C  D7FC               	bra	u7137
  3293  002C8E  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3294  002C90  D7FA               	bra	u7137
  3295  002C92  D000               	nop2	
  3296                           
  3297                           ;sort.c: 119: for(int i = 0; i<3000; i++){
  3298  002C94  0E00               	movlw	0
  3299  002C96  0100               	movlb	0	; () banked
  3300  002C98  6FB7               	movwf	(Loading@i_1098+1)& (0+255),b
  3301  002C9A  0E00               	movlw	0
  3302  002C9C  6FB6               	movwf	Loading@i_1098& (0+255),b
  3303  002C9E                     l6478:
  3304                           
  3305                           ; BSR set to: 0
  3306  002C9E  0100               	movlb	0	; () banked
  3307  002CA0  BFB7               	btfsc	(Loading@i_1098+1)& (0+255),7,b
  3308  002CA2  D008               	goto	l739
  3309  002CA4  0EB8               	movlw	184
  3310  002CA6  0100               	movlb	0	; () banked
  3311  002CA8  5DB6               	subwf	Loading@i_1098& (0+255),w,b
  3312  002CAA  0E0B               	movlw	11
  3313  002CAC  0100               	movlb	0	; () banked
  3314  002CAE  59B7               	subwfb	(Loading@i_1098+1)& (0+255),w,b
  3315  002CB0  B0D8               	btfsc	status,0,c
  3316  002CB2  D00D               	goto	l6488
  3317  002CB4                     l739:
  3318                           
  3319                           ; BSR set to: 0
  3320                           ;sort.c: 120: LATAbits.LATA4 = 1;
  3321  002CB4  8889               	bsf	3977,4,c	;volatile
  3322                           
  3323                           ; BSR set to: 0
  3324                           ;sort.c: 121: _delay((unsigned long)((70)*(32000000/4000000.0)));
  3325  002CB6  0EBA               	movlw	186
  3326  002CB8                     u7147:
  3327  002CB8  2EE8               	decfsz	wreg,f,c
  3328  002CBA  D7FE               	bra	u7147
  3329  002CBC  D000               	nop2	
  3330                           
  3331                           ;sort.c: 122: LATAbits.LATA4 = 0;
  3332  002CBE  9889               	bcf	3977,4,c	;volatile
  3333                           
  3334                           ;sort.c: 123: _delay((unsigned long)((30)*(32000000/4000000.0)));
  3335  002CC0  0E50               	movlw	80
  3336  002CC2                     u7157:
  3337  002CC2  2EE8               	decfsz	wreg,f,c
  3338  002CC4  D7FE               	bra	u7157
  3339  002CC6  0100               	movlb	0	; () banked
  3340  002CC8  4BB6               	infsnz	Loading@i_1098& (0+255),f,b
  3341  002CCA  2BB7               	incf	(Loading@i_1098+1)& (0+255),f,b
  3342  002CCC  D7E8               	goto	l6478
  3343  002CCE                     l6488:
  3344                           
  3345                           ; BSR set to: 0
  3346                           ;sort.c: 124: }
  3347                           ;sort.c: 126: f_can_coming_to_ID = 1;
  3348  002CCE  0E00               	movlw	0
  3349  002CD0  6E70               	movwf	_f_can_coming_to_ID+1,c
  3350  002CD2  0E01               	movlw	1
  3351  002CD4  6E6F               	movwf	_f_can_coming_to_ID,c
  3352                           
  3353                           ; BSR set to: 0
  3354                           
  3355                           ; BSR set to: 0
  3356  002CD6  0012               	return	
  3357  002CD8                     __end_of_Loading:
  3358                           	opt stack 0
  3359                           tblptru	equ	0xFF8
  3360                           tblptrh	equ	0xFF7
  3361                           tblptrl	equ	0xFF6
  3362                           tablat	equ	0xFF5
  3363                           prodh	equ	0xFF4
  3364                           prodl	equ	0xFF3
  3365                           postinc0	equ	0xFEE
  3366                           wreg	equ	0xFE8
  3367                           postdec1	equ	0xFE5
  3368                           fsr1l	equ	0xFE1
  3369                           status	equ	0xFD8
  3370                           
  3371 ;; *************** function _initSortTimer *****************
  3372 ;; Defined at:
  3373 ;;		line 258 in file "sort.c"
  3374 ;; Parameters:    Size  Location     Type
  3375 ;;		None
  3376 ;; Auto vars:     Size  Location     Type
  3377 ;;  i               2    8[BANK0 ] int 
  3378 ;; Return value:  Size  Location     Type
  3379 ;;                  1    wreg      void 
  3380 ;; Registers used:
  3381 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3382 ;; Tracked objects:
  3383 ;;		On entry : 0/0
  3384 ;;		On exit  : 0/0
  3385 ;;		Unchanged: 0/0
  3386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3388 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3389 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3390 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3391 ;;Total ram usage:        5 bytes
  3392 ;; Hardware stack levels used:    1
  3393 ;; Hardware stack levels required when called:   10
  3394 ;; This function calls:
  3395 ;;		_getRTC
  3396 ;; This function is called by:
  3397 ;;		_Loading
  3398 ;; This function uses a non-reentrant model
  3399 ;;
  3400                           
  3401                           	psect	text4
  3402  003862                     __ptext4:
  3403                           	opt stack 0
  3404  003862                     _initSortTimer:
  3405                           	opt stack 18
  3406                           
  3407                           ;sort.c: 260: getRTC();
  3408                           
  3409                           ;incstack = 0
  3410  003862  EC1D  F01D         	call	_getRTC	;wreg free
  3411                           
  3412                           ;sort.c: 261: for(int i = 0; i < 7; i++){
  3413  003866  0E00               	movlw	0
  3414  003868  0100               	movlb	0	; () banked
  3415  00386A  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  3416  00386C  0E00               	movlw	0
  3417  00386E  6F88               	movwf	initSortTimer@i& (0+255),b
  3418  003870                     l6038:
  3419                           
  3420                           ; BSR set to: 0
  3421  003870  0100               	movlb	0	; () banked
  3422  003872  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  3423  003874  D008               	goto	l6042
  3424  003876  0100               	movlb	0	; () banked
  3425  003878  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  3426  00387A  E140               	bnz	l6048
  3427  00387C  0E07               	movlw	7
  3428  00387E  0100               	movlb	0	; () banked
  3429  003880  5D88               	subwf	initSortTimer@i& (0+255),w,b
  3430  003882  B0D8               	btfsc	status,0,c
  3431  003884  D03B               	goto	l6048
  3432  003886                     l6042:
  3433                           
  3434                           ; BSR set to: 0
  3435                           ;sort.c: 262: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  3436  003886  0E24               	movlw	low _time
  3437  003888  0100               	movlb	0	; () banked
  3438  00388A  2588               	addwf	initSortTimer@i& (0+255),w,b
  3439  00388C  6ED9               	movwf	fsr2l,c
  3440  00388E  0E01               	movlw	high _time
  3441  003890  0100               	movlb	0	; () banked
  3442  003892  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3443  003894  6EDA               	movwf	fsr2h,c
  3444  003896  50DF               	movf	indf2,w,c
  3445  003898  0100               	movlb	0	; () banked
  3446  00389A  6F85               	movwf	??_initSortTimer& (0+255),b
  3447  00389C  0100               	movlb	0	; () banked
  3448  00389E  3B85               	swapf	??_initSortTimer& (0+255),f,b
  3449  0038A0  0E0F               	movlw	15
  3450  0038A2  1785               	andwf	??_initSortTimer& (0+255),f,b
  3451  0038A4  0E0F               	movlw	15
  3452  0038A6  0100               	movlb	0	; () banked
  3453  0038A8  1785               	andwf	??_initSortTimer& (0+255),f,b
  3454  0038AA  0100               	movlb	0	; () banked
  3455  0038AC  5185               	movf	??_initSortTimer& (0+255),w,b
  3456  0038AE  0D0A               	mullw	10
  3457  0038B0  0E24               	movlw	low _time
  3458  0038B2  0100               	movlb	0	; () banked
  3459  0038B4  2588               	addwf	initSortTimer@i& (0+255),w,b
  3460  0038B6  6ED9               	movwf	fsr2l,c
  3461  0038B8  0E01               	movlw	high _time
  3462  0038BA  0100               	movlb	0	; () banked
  3463  0038BC  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3464  0038BE  6EDA               	movwf	fsr2h,c
  3465  0038C0  50DF               	movf	indf2,w,c
  3466  0038C2  0B0F               	andlw	15
  3467  0038C4  0100               	movlb	0	; () banked
  3468  0038C6  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  3469  0038C8  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  3470  0038CA  50F3               	movf	prodl,w,c
  3471  0038CC  0100               	movlb	0	; () banked
  3472  0038CE  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  3473  0038D0  50F4               	movf	prodh,w,c
  3474  0038D2  0100               	movlb	0	; () banked
  3475  0038D4  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  3476  0038D6  90D8               	bcf	status,0,c
  3477  0038D8  0100               	movlb	0	; () banked
  3478  0038DA  3588               	rlcf	initSortTimer@i& (0+255),w,b
  3479  0038DC  6ED9               	movwf	fsr2l,c
  3480  0038DE  0100               	movlb	0	; () banked
  3481  0038E0  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  3482  0038E2  6EDA               	movwf	fsr2h,c
  3483  0038E4  0E0E               	movlw	low _startTime
  3484  0038E6  26D9               	addwf	fsr2l,f,c
  3485  0038E8  0E01               	movlw	high _startTime
  3486  0038EA  22DA               	addwfc	fsr2h,f,c
  3487  0038EC  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  3488  0038F0  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  3489                           
  3490                           ; BSR set to: 0
  3491  0038F4  0100               	movlb	0	; () banked
  3492  0038F6  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  3493  0038F8  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  3494  0038FA  D7BA               	goto	l6038
  3495  0038FC                     l6048:
  3496                           
  3497                           ; BSR set to: 0
  3498                           ;sort.c: 263: }
  3499                           ;sort.c: 265: T0CON = 0b00010111;
  3500  0038FC  0E17               	movlw	23
  3501  0038FE  6ED5               	movwf	4053,c	;volatile
  3502                           
  3503                           ;sort.c: 274: TMR0H = 0b10000101;
  3504  003900  0E85               	movlw	133
  3505  003902  6ED7               	movwf	4055,c	;volatile
  3506                           
  3507                           ;sort.c: 275: TMR0L = 0b11101110;
  3508  003904  0EEE               	movlw	238
  3509  003906  6ED6               	movwf	4054,c	;volatile
  3510                           
  3511                           ; BSR set to: 0
  3512                           ;sort.c: 276: TMR0ON = 1;
  3513  003908  8ED5               	bsf	4053,7,c	;volatile
  3514                           
  3515                           ; BSR set to: 0
  3516  00390A  0012               	return		;funcret
  3517  00390C                     __end_of_initSortTimer:
  3518                           	opt stack 0
  3519                           tblptru	equ	0xFF8
  3520                           tblptrh	equ	0xFF7
  3521                           tblptrl	equ	0xFF6
  3522                           tablat	equ	0xFF5
  3523                           prodh	equ	0xFF4
  3524                           prodl	equ	0xFF3
  3525                           postinc0	equ	0xFEE
  3526                           wreg	equ	0xFE8
  3527                           postdec1	equ	0xFE5
  3528                           fsr1l	equ	0xFE1
  3529                           indf2	equ	0xFDF
  3530                           postinc2	equ	0xFDE
  3531                           postdec2	equ	0xFDD
  3532                           fsr2h	equ	0xFDA
  3533                           fsr2l	equ	0xFD9
  3534                           status	equ	0xFD8
  3535                           
  3536 ;; *************** function _initGlobalVars *****************
  3537 ;; Defined at:
  3538 ;;		line 239 in file "sort.c"
  3539 ;; Parameters:    Size  Location     Type
  3540 ;;		None
  3541 ;; Auto vars:     Size  Location     Type
  3542 ;;		None
  3543 ;; Return value:  Size  Location     Type
  3544 ;;                  1    wreg      void 
  3545 ;; Registers used:
  3546 ;;		wreg, status,2
  3547 ;; Tracked objects:
  3548 ;;		On entry : 0/0
  3549 ;;		On exit  : 0/0
  3550 ;;		Unchanged: 0/0
  3551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3553 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3555 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3556 ;;Total ram usage:        0 bytes
  3557 ;; Hardware stack levels used:    1
  3558 ;; Hardware stack levels required when called:    7
  3559 ;; This function calls:
  3560 ;;		Nothing
  3561 ;; This function is called by:
  3562 ;;		_Loading
  3563 ;; This function uses a non-reentrant model
  3564 ;;
  3565                           
  3566                           	psect	text5
  3567  003DA4                     __ptext5:
  3568                           	opt stack 0
  3569  003DA4                     _initGlobalVars:
  3570                           	opt stack 21
  3571                           
  3572                           ;sort.c: 241: first = 0;
  3573                           
  3574                           ; BSR set to: 0
  3575                           ;incstack = 0
  3576  003DA4  0E00               	movlw	0
  3577  003DA6  0100               	movlb	0	; () banked
  3578  003DA8  6FE5               	movwf	(_first+1)& (0+255),b
  3579  003DAA  0E00               	movlw	0
  3580  003DAC  6FE4               	movwf	_first& (0+255),b
  3581                           
  3582                           ;sort.c: 244: f_loadingNewCan = 0;
  3583  003DAE  0E00               	movlw	0
  3584  003DB0  0100               	movlb	0	; () banked
  3585  003DB2  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3586  003DB4  0E00               	movlw	0
  3587  003DB6  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3588                           
  3589                           ;sort.c: 245: f_lastCan = 0;
  3590  003DB8  0E00               	movlw	0
  3591  003DBA  6E74               	movwf	_f_lastCan+1,c
  3592  003DBC  0E00               	movlw	0
  3593  003DBE  6E73               	movwf	_f_lastCan,c
  3594                           
  3595                           ;sort.c: 246: f_ID_receive = 1;
  3596  003DC0  0E00               	movlw	0
  3597  003DC2  6E6E               	movwf	_f_ID_receive+1,c
  3598  003DC4  0E01               	movlw	1
  3599  003DC6  6E6D               	movwf	_f_ID_receive,c
  3600                           
  3601                           ;sort.c: 247: f_can_coming_to_ID = 0;
  3602  003DC8  0E00               	movlw	0
  3603  003DCA  6E70               	movwf	_f_can_coming_to_ID+1,c
  3604  003DCC  0E00               	movlw	0
  3605  003DCE  6E6F               	movwf	_f_can_coming_to_ID,c
  3606                           
  3607                           ;sort.c: 248: f_can_coming_to_distribution = 0;
  3608  003DD0  0E00               	movlw	0
  3609  003DD2  6E72               	movwf	_f_can_coming_to_distribution+1,c
  3610  003DD4  0E00               	movlw	0
  3611  003DD6  6E71               	movwf	_f_can_coming_to_distribution,c
  3612                           
  3613                           ;sort.c: 249: f_can_distributed = 0;
  3614  003DD8  0E00               	movlw	0
  3615  003DDA  0101               	movlb	1	; () banked
  3616  003DDC  6F2C               	movwf	(_f_can_distributed+1)& (0+255),b
  3617  003DDE  0E00               	movlw	0
  3618  003DE0  6F2B               	movwf	_f_can_distributed& (0+255),b
  3619                           
  3620                           ;sort.c: 252: count_total = 0;
  3621  003DE2  0E00               	movlw	0
  3622  003DE4  0100               	movlb	0	; () banked
  3623  003DE6  6FFF               	movwf	(_count_total+1)& (0+255),b
  3624  003DE8  0E00               	movlw	0
  3625  003DEA  6FFE               	movwf	_count_total& (0+255),b
  3626                           
  3627                           ;sort.c: 253: count_pop_no_tab = 0;
  3628  003DEC  0E00               	movlw	0
  3629  003DEE  6E62               	movwf	_count_pop_no_tab+1,c
  3630  003DF0  0E00               	movlw	0
  3631  003DF2  6E61               	movwf	_count_pop_no_tab,c
  3632                           
  3633                           ;sort.c: 254: count_pop_w_tab = 0;
  3634  003DF4  0E00               	movlw	0
  3635  003DF6  6E64               	movwf	_count_pop_w_tab+1,c
  3636  003DF8  0E00               	movlw	0
  3637  003DFA  6E63               	movwf	_count_pop_w_tab,c
  3638                           
  3639                           ;sort.c: 255: count_can_w_lab = 0;
  3640  003DFC  0E00               	movlw	0
  3641  003DFE  6E60               	movwf	_count_can_w_lab+1,c
  3642  003E00  0E00               	movlw	0
  3643  003E02  6E5F               	movwf	_count_can_w_lab,c
  3644                           
  3645                           ;sort.c: 256: count_can_no_lab = 0;
  3646  003E04  0E00               	movlw	0
  3647  003E06  6E5E               	movwf	_count_can_no_lab+1,c
  3648  003E08  0E00               	movlw	0
  3649  003E0A  6E5D               	movwf	_count_can_no_lab,c
  3650                           
  3651                           ; BSR set to: 0
  3652  003E0C  0012               	return		;funcret
  3653  003E0E                     __end_of_initGlobalVars:
  3654                           	opt stack 0
  3655                           tblptru	equ	0xFF8
  3656                           tblptrh	equ	0xFF7
  3657                           tblptrl	equ	0xFF6
  3658                           tablat	equ	0xFF5
  3659                           prodh	equ	0xFF4
  3660                           prodl	equ	0xFF3
  3661                           postinc0	equ	0xFEE
  3662                           wreg	equ	0xFE8
  3663                           postdec1	equ	0xFE5
  3664                           fsr1l	equ	0xFE1
  3665                           indf2	equ	0xFDF
  3666                           postinc2	equ	0xFDE
  3667                           postdec2	equ	0xFDD
  3668                           fsr2h	equ	0xFDA
  3669                           fsr2l	equ	0xFD9
  3670                           status	equ	0xFD8
  3671                           
  3672 ;; *************** function _getIR *****************
  3673 ;; Defined at:
  3674 ;;		line 316 in file "sort.c"
  3675 ;; Parameters:    Size  Location     Type
  3676 ;;		None
  3677 ;; Auto vars:     Size  Location     Type
  3678 ;;		None
  3679 ;; Return value:  Size  Location     Type
  3680 ;;                  1    wreg      void 
  3681 ;; Registers used:
  3682 ;;		wreg, status,2, status,0, cstack
  3683 ;; Tracked objects:
  3684 ;;		On entry : 0/0
  3685 ;;		On exit  : 0/0
  3686 ;;		Unchanged: 0/0
  3687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3690 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3691 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3692 ;;Total ram usage:        2 bytes
  3693 ;; Hardware stack levels used:    1
  3694 ;; Hardware stack levels required when called:    9
  3695 ;; This function calls:
  3696 ;;		_readIR
  3697 ;; This function is called by:
  3698 ;;		_Loading
  3699 ;; This function uses a non-reentrant model
  3700 ;;
  3701                           
  3702                           	psect	text6
  3703  0040A0                     __ptext6:
  3704                           	opt stack 0
  3705  0040A0                     _getIR:
  3706                           	opt stack 19
  3707                           
  3708                           ;sort.c: 317: readIR();
  3709                           
  3710                           ; BSR set to: 0
  3711                           ;incstack = 0
  3712  0040A0  ECCA  F020         	call	_readIR	;wreg free
  3713                           
  3714                           ;sort.c: 319: if(IR_signal==1){
  3715  0040A4  0100               	movlb	0	; () banked
  3716  0040A6  05DA               	decf	_IR_signal& (0+255),w,b
  3717  0040A8  0100               	movlb	0	; () banked
  3718  0040AA  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3719  0040AC  A4D8               	btfss	status,2,c
  3720  0040AE  0012               	return	
  3721                           
  3722                           ; BSR set to: 0
  3723                           ;sort.c: 320: _delay((unsigned long)((500)*(32000000/4000.0)));
  3724  0040B0  0E15               	movlw	21
  3725  0040B2  0100               	movlb	0	; () banked
  3726  0040B4  6F87               	movwf	(??_getIR+1)& (0+255),b
  3727  0040B6  0E4B               	movlw	75
  3728  0040B8  0100               	movlb	0	; () banked
  3729  0040BA  6F86               	movwf	??_getIR& (0+255),b
  3730  0040BC  0EBE               	movlw	190
  3731  0040BE                     u7167:
  3732  0040BE  2EE8               	decfsz	wreg,f,c
  3733  0040C0  D7FE               	bra	u7167
  3734  0040C2  2F86               	decfsz	??_getIR& (0+255),f,b
  3735  0040C4  D7FC               	bra	u7167
  3736  0040C6  2F87               	decfsz	(??_getIR+1)& (0+255),f,b
  3737  0040C8  D7FA               	bra	u7167
  3738  0040CA  F000               	nop	
  3739                           
  3740                           ;sort.c: 321: readIR();
  3741  0040CC  ECCA  F020         	call	_readIR	;wreg free
  3742                           
  3743                           ;sort.c: 322: if(IR_signal==1){
  3744  0040D0  0100               	movlb	0	; () banked
  3745  0040D2  05DA               	decf	_IR_signal& (0+255),w,b
  3746  0040D4  0100               	movlb	0	; () banked
  3747  0040D6  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3748  0040D8  A4D8               	btfss	status,2,c
  3749  0040DA  D006               	goto	l6138
  3750                           
  3751                           ; BSR set to: 0
  3752                           ;sort.c: 323: f_loadingNewCan = 1;
  3753  0040DC  0E00               	movlw	0
  3754  0040DE  0100               	movlb	0	; () banked
  3755  0040E0  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3756  0040E2  0E01               	movlw	1
  3757  0040E4  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3758                           
  3759                           ;sort.c: 324: }
  3760  0040E6  0012               	return	
  3761  0040E8                     l6138:
  3762                           
  3763                           ; BSR set to: 0
  3764                           ;sort.c: 325: else{
  3765                           ;sort.c: 326: f_loadingNewCan = 0;
  3766  0040E8  0E00               	movlw	0
  3767  0040EA  0100               	movlb	0	; () banked
  3768  0040EC  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3769  0040EE  0E00               	movlw	0
  3770  0040F0  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3771                           
  3772                           ; BSR set to: 0
  3773  0040F2  0012               	return	
  3774  0040F4                     __end_of_getIR:
  3775                           	opt stack 0
  3776                           tblptru	equ	0xFF8
  3777                           tblptrh	equ	0xFF7
  3778                           tblptrl	equ	0xFF6
  3779                           tablat	equ	0xFF5
  3780                           prodh	equ	0xFF4
  3781                           prodl	equ	0xFF3
  3782                           postinc0	equ	0xFEE
  3783                           wreg	equ	0xFE8
  3784                           postdec1	equ	0xFE5
  3785                           fsr1l	equ	0xFE1
  3786                           indf2	equ	0xFDF
  3787                           postinc2	equ	0xFDE
  3788                           postdec2	equ	0xFDD
  3789                           fsr2h	equ	0xFDA
  3790                           fsr2l	equ	0xFD9
  3791                           status	equ	0xFD8
  3792                           
  3793 ;; *************** function _readIR *****************
  3794 ;; Defined at:
  3795 ;;		line 23 in file "ADCFunctionality.c"
  3796 ;; Parameters:    Size  Location     Type
  3797 ;;		None
  3798 ;; Auto vars:     Size  Location     Type
  3799 ;;  res             2    4[BANK0 ] int 
  3800 ;; Return value:  Size  Location     Type
  3801 ;;                  1    wreg      void 
  3802 ;; Registers used:
  3803 ;;		wreg, status,2, status,0, cstack
  3804 ;; Tracked objects:
  3805 ;;		On entry : 0/0
  3806 ;;		On exit  : 0/0
  3807 ;;		Unchanged: 0/0
  3808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3810 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3811 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3812 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3813 ;;Total ram usage:        4 bytes
  3814 ;; Hardware stack levels used:    1
  3815 ;; Hardware stack levels required when called:    8
  3816 ;; This function calls:
  3817 ;;		_readADC
  3818 ;; This function is called by:
  3819 ;;		_getIR
  3820 ;; This function uses a non-reentrant model
  3821 ;;
  3822                           
  3823                           	psect	text7
  3824  004194                     __ptext7:
  3825                           	opt stack 0
  3826  004194                     _readIR:
  3827                           	opt stack 19
  3828                           
  3829                           ;ADCFunctionality.c: 24: readADC(0);
  3830                           
  3831                           ; BSR set to: 0
  3832                           ;incstack = 0
  3833  004194  0E00               	movlw	0
  3834  004196  EC2D  F023         	call	_readADC
  3835                           
  3836                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  3837  00419A  50C3               	movf	4035,w,c	;volatile
  3838  00419C  CFC4 F082          	movff	4036,??_readIR	;volatile
  3839  0041A0  0100               	movlb	0	; () banked
  3840  0041A2  6B83               	clrf	(??_readIR+1)& (0+255),b
  3841  0041A4  C082  F083         	movff	??_readIR,??_readIR+1
  3842  0041A8  0100               	movlb	0	; () banked
  3843  0041AA  6B82               	clrf	??_readIR& (0+255),b
  3844  0041AC  0100               	movlb	0	; () banked
  3845  0041AE  1182               	iorwf	??_readIR& (0+255),w,b
  3846  0041B0  0100               	movlb	0	; () banked
  3847  0041B2  6F84               	movwf	readIR@res& (0+255),b
  3848  0041B4  0100               	movlb	0	; () banked
  3849  0041B6  5183               	movf	(??_readIR+1)& (0+255),w,b
  3850  0041B8  0100               	movlb	0	; () banked
  3851  0041BA  6F85               	movwf	(readIR@res+1)& (0+255),b
  3852                           
  3853                           ; BSR set to: 0
  3854                           ;ADCFunctionality.c: 26: IR_signal = (res > 1000) ? 1 : 0;
  3855  0041BC  0100               	movlb	0	; () banked
  3856  0041BE  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  3857  0041C0  D00A               	goto	u3810
  3858  0041C2  0EE9               	movlw	233
  3859  0041C4  0100               	movlb	0	; () banked
  3860  0041C6  5D84               	subwf	readIR@res& (0+255),w,b
  3861  0041C8  0E03               	movlw	3
  3862  0041CA  0100               	movlb	0	; () banked
  3863  0041CC  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  3864  0041CE  A0D8               	btfss	status,0,c
  3865  0041D0  D002               	goto	u3810
  3866  0041D2  0E01               	movlw	1
  3867  0041D4  D001               	goto	u3820
  3868  0041D6                     u3810:
  3869  0041D6  0E00               	movlw	0
  3870  0041D8                     u3820:
  3871  0041D8  0100               	movlb	0	; () banked
  3872  0041DA  6FDA               	movwf	_IR_signal& (0+255),b
  3873  0041DC  6BDB               	clrf	(_IR_signal+1)& (0+255),b
  3874                           
  3875                           ; BSR set to: 0
  3876  0041DE  0012               	return		;funcret
  3877  0041E0                     __end_of_readIR:
  3878                           	opt stack 0
  3879                           tblptru	equ	0xFF8
  3880                           tblptrh	equ	0xFF7
  3881                           tblptrl	equ	0xFF6
  3882                           tablat	equ	0xFF5
  3883                           prodh	equ	0xFF4
  3884                           prodl	equ	0xFF3
  3885                           postinc0	equ	0xFEE
  3886                           wreg	equ	0xFE8
  3887                           postdec1	equ	0xFE5
  3888                           fsr1l	equ	0xFE1
  3889                           indf2	equ	0xFDF
  3890                           postinc2	equ	0xFDE
  3891                           postdec2	equ	0xFDD
  3892                           fsr2h	equ	0xFDA
  3893                           fsr2l	equ	0xFD9
  3894                           status	equ	0xFD8
  3895                           
  3896 ;; *************** function _delay_ms *****************
  3897 ;; Defined at:
  3898 ;;		line 351 in file "sort.c"
  3899 ;; Parameters:    Size  Location     Type
  3900 ;;  milliseconds    1    wreg     unsigned char 
  3901 ;; Auto vars:     Size  Location     Type
  3902 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  3903 ;; Return value:  Size  Location     Type
  3904 ;;                  1    wreg      void 
  3905 ;; Registers used:
  3906 ;;		wreg, status,2, status,0, cstack
  3907 ;; Tracked objects:
  3908 ;;		On entry : 0/0
  3909 ;;		On exit  : 0/0
  3910 ;;		Unchanged: 0/0
  3911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3913 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3914 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3915 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3916 ;;Total ram usage:        2 bytes
  3917 ;; Hardware stack levels used:    1
  3918 ;; Hardware stack levels required when called:    7
  3919 ;; This function calls:
  3920 ;;		Nothing
  3921 ;; This function is called by:
  3922 ;;		_Loading
  3923 ;; This function uses a non-reentrant model
  3924 ;;
  3925                           
  3926                           	psect	text8
  3927  0046B0                     __ptext8:
  3928                           	opt stack 0
  3929  0046B0                     _delay_ms:
  3930                           	opt stack 21
  3931                           
  3932                           ; BSR set to: 0
  3933                           ;incstack = 0
  3934                           ;delay_ms@milliseconds stored from wreg
  3935  0046B0  0100               	movlb	0	; () banked
  3936  0046B2  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  3937                           
  3938                           ;sort.c: 352: while(milliseconds > 0)
  3939  0046B4  D00B               	goto	l6110
  3940  0046B6                     l6106:
  3941                           
  3942                           ;sort.c: 353: {
  3943                           ;sort.c: 354: milliseconds--;
  3944  0046B6  0100               	movlb	0	; () banked
  3945  0046B8  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  3946                           
  3947                           ; BSR set to: 0
  3948                           ;sort.c: 355: _delay((unsigned long)((990)*(32000000/4000000.0)));
  3949  0046BA  0E0B               	movlw	11
  3950  0046BC  0100               	movlb	0	; () banked
  3951  0046BE  6F80               	movwf	??_delay_ms& (0+255),b
  3952  0046C0  0E47               	movlw	71
  3953  0046C2                     u7177:
  3954  0046C2  2EE8               	decfsz	wreg,f,c
  3955  0046C4  D7FE               	bra	u7177
  3956  0046C6  2F80               	decfsz	??_delay_ms& (0+255),f,b
  3957  0046C8  D7FC               	bra	u7177
  3958  0046CA  D000               	nop2	
  3959  0046CC                     l6110:
  3960  0046CC  0100               	movlb	0	; () banked
  3961  0046CE  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  3962  0046D0  0100               	movlb	0	; () banked
  3963  0046D2  B4D8               	btfsc	status,2,c
  3964  0046D4  0012               	return	
  3965  0046D6  D7EF               	goto	l6106
  3966  0046D8                     __end_of_delay_ms:
  3967                           	opt stack 0
  3968                           tblptru	equ	0xFF8
  3969                           tblptrh	equ	0xFF7
  3970                           tblptrl	equ	0xFF6
  3971                           tablat	equ	0xFF5
  3972                           prodh	equ	0xFF4
  3973                           prodl	equ	0xFF3
  3974                           postinc0	equ	0xFEE
  3975                           wreg	equ	0xFE8
  3976                           postdec1	equ	0xFE5
  3977                           fsr1l	equ	0xFE1
  3978                           indf2	equ	0xFDF
  3979                           postinc2	equ	0xFDE
  3980                           postdec2	equ	0xFDD
  3981                           fsr2h	equ	0xFDA
  3982                           fsr2l	equ	0xFD9
  3983                           status	equ	0xFD8
  3984                           
  3985 ;; *************** function _ID *****************
  3986 ;; Defined at:
  3987 ;;		line 130 in file "sort.c"
  3988 ;; Parameters:    Size  Location     Type
  3989 ;;		None
  3990 ;; Auto vars:     Size  Location     Type
  3991 ;;  i               2   10[BANK0 ] int 
  3992 ;;  sensor_outpu    6   12[BANK0 ] int [3]
  3993 ;; Return value:  Size  Location     Type
  3994 ;;                  1    wreg      void 
  3995 ;; Registers used:
  3996 ;;		wreg, status,2, status,0, cstack
  3997 ;; Tracked objects:
  3998 ;;		On entry : 0/0
  3999 ;;		On exit  : 0/0
  4000 ;;		Unchanged: 0/0
  4001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4003 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4004 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4005 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4006 ;;Total ram usage:       10 bytes
  4007 ;; Hardware stack levels used:    1
  4008 ;; Hardware stack levels required when called:   10
  4009 ;; This function calls:
  4010 ;;		_getMAG
  4011 ;; This function is called by:
  4012 ;;		_sort
  4013 ;; This function uses a non-reentrant model
  4014 ;;
  4015                           
  4016                           	psect	text9
  4017  002FA4                     __ptext9:
  4018                           	opt stack 0
  4019  002FA4                     _ID:
  4020                           	opt stack 19
  4021                           
  4022                           ;sort.c: 131: if(f_can_coming_to_ID){
  4023                           
  4024                           ; BSR set to: 0
  4025                           ;incstack = 0
  4026  002FA4  506F               	movf	_f_can_coming_to_ID,w,c
  4027  002FA6  1070               	iorwf	_f_can_coming_to_ID+1,w,c
  4028  002FA8  B4D8               	btfsc	status,2,c
  4029  002FAA  0012               	return	
  4030                           
  4031                           ;sort.c: 133: _delay((unsigned long)((750)*(32000000/4000.0)));
  4032  002FAC  0E1F               	movlw	31
  4033  002FAE  0100               	movlb	0	; () banked
  4034  002FB0  6F89               	movwf	(??_ID+1)& (0+255),b
  4035  002FB2  0E71               	movlw	113
  4036  002FB4  0100               	movlb	0	; () banked
  4037  002FB6  6F88               	movwf	??_ID& (0+255),b
  4038  002FB8  0E1E               	movlw	30
  4039  002FBA                     u7187:
  4040  002FBA  2EE8               	decfsz	wreg,f,c
  4041  002FBC  D7FE               	bra	u7187
  4042  002FBE  2F88               	decfsz	??_ID& (0+255),f,b
  4043  002FC0  D7FC               	bra	u7187
  4044  002FC2  2F89               	decfsz	(??_ID+1)& (0+255),f,b
  4045  002FC4  D7FA               	bra	u7187
  4046  002FC6  F000               	nop	
  4047                           
  4048                           ;sort.c: 138: int sensor_outputs[3];
  4049                           ;sort.c: 142: sensor_outputs[0] = PORTAbits.RA2;
  4050  002FC8  A480               	btfss	3968,2,c	;volatile
  4051  002FCA  D004               	goto	u4950
  4052  002FCC  0100               	movlb	0	; () banked
  4053  002FCE  6B88               	clrf	??_ID& (0+255),b
  4054  002FD0  2B88               	incf	??_ID& (0+255),f,b
  4055  002FD2  D002               	goto	u4958
  4056  002FD4                     u4950:
  4057  002FD4  0100               	movlb	0	; () banked
  4058  002FD6  6B88               	clrf	??_ID& (0+255),b
  4059  002FD8                     u4958:
  4060  002FD8  0100               	movlb	0	; () banked
  4061  002FDA  5188               	movf	??_ID& (0+255),w,b
  4062  002FDC  0100               	movlb	0	; () banked
  4063  002FDE  6F8C               	movwf	ID@sensor_outputs& (0+255),b
  4064  002FE0  6B8D               	clrf	(ID@sensor_outputs+1)& (0+255),b
  4065                           
  4066                           ; BSR set to: 0
  4067                           ;sort.c: 144: if(!sensor_outputs[0]){
  4068  002FE2  0100               	movlb	0	; () banked
  4069  002FE4  518C               	movf	ID@sensor_outputs& (0+255),w,b
  4070  002FE6  0100               	movlb	0	; () banked
  4071  002FE8  118D               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  4072  002FEA  A4D8               	btfss	status,2,c
  4073  002FEC  D029               	goto	l6512
  4074                           
  4075                           ; BSR set to: 0
  4076                           ;sort.c: 145: getMAG();
  4077  002FEE  ECC8  F021         	call	_getMAG	;wreg free
  4078                           
  4079                           ;sort.c: 146: sensor_outputs[1] = MAG_signal;
  4080  002FF2  C0DC  F08E         	movff	_MAG_signal,ID@sensor_outputs+2
  4081  002FF6  C0DD  F08F         	movff	_MAG_signal+1,ID@sensor_outputs+3
  4082                           
  4083                           ;sort.c: 147: if(!sensor_outputs[1]){
  4084  002FFA  0100               	movlb	0	; () banked
  4085  002FFC  518E               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  4086  002FFE  0100               	movlb	0	; () banked
  4087  003000  118F               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  4088  003002  A4D8               	btfss	status,2,c
  4089  003004  D01D               	goto	l6512
  4090                           
  4091                           ; BSR set to: 0
  4092                           ;sort.c: 148: LATAbits.LATA3 = 1;
  4093  003006  8689               	bsf	3977,3,c	;volatile
  4094                           
  4095                           ; BSR set to: 0
  4096                           ;sort.c: 150: _delay((unsigned long)((600)*(32000000/4000.0)));
  4097  003008  0E19               	movlw	25
  4098  00300A  0100               	movlb	0	; () banked
  4099  00300C  6F89               	movwf	(??_ID+1)& (0+255),b
  4100  00300E  0E5A               	movlw	90
  4101  003010  0100               	movlb	0	; () banked
  4102  003012  6F88               	movwf	??_ID& (0+255),b
  4103  003014  0EB1               	movlw	177
  4104  003016                     u7197:
  4105  003016  2EE8               	decfsz	wreg,f,c
  4106  003018  D7FE               	bra	u7197
  4107  00301A  2F88               	decfsz	??_ID& (0+255),f,b
  4108  00301C  D7FC               	bra	u7197
  4109  00301E  2F89               	decfsz	(??_ID+1)& (0+255),f,b
  4110  003020  D7FA               	bra	u7197
  4111  003022  D000               	nop2	
  4112                           
  4113                           ;sort.c: 151: sensor_outputs[2] = PORTAbits.RA2;
  4114  003024  A480               	btfss	3968,2,c	;volatile
  4115  003026  D004               	goto	u4980
  4116  003028  0100               	movlb	0	; () banked
  4117  00302A  6B88               	clrf	??_ID& (0+255),b
  4118  00302C  2B88               	incf	??_ID& (0+255),f,b
  4119  00302E  D002               	goto	u4988
  4120  003030                     u4980:
  4121  003030  0100               	movlb	0	; () banked
  4122  003032  6B88               	clrf	??_ID& (0+255),b
  4123  003034                     u4988:
  4124  003034  0100               	movlb	0	; () banked
  4125  003036  5188               	movf	??_ID& (0+255),w,b
  4126  003038  0100               	movlb	0	; () banked
  4127  00303A  6F90               	movwf	(ID@sensor_outputs+4)& (0+255),b
  4128  00303C  6B91               	clrf	(ID@sensor_outputs+5)& (0+255),b
  4129                           
  4130                           ; BSR set to: 0
  4131                           ;sort.c: 152: LATAbits.LATA3 = 0;
  4132  00303E  9689               	bcf	3977,3,c	;volatile
  4133  003040                     l6512:
  4134                           
  4135                           ; BSR set to: 0
  4136                           ;sort.c: 153: }
  4137                           ;sort.c: 154: }
  4138                           ;sort.c: 162: if(!sensor_outputs[0]){
  4139  003040  0100               	movlb	0	; () banked
  4140  003042  518C               	movf	ID@sensor_outputs& (0+255),w,b
  4141  003044  0100               	movlb	0	; () banked
  4142  003046  118D               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  4143  003048  A4D8               	btfss	status,2,c
  4144  00304A  D01E               	goto	l6530
  4145                           
  4146                           ; BSR set to: 0
  4147                           ;sort.c: 163: if(!sensor_outputs[1]){
  4148  00304C  0100               	movlb	0	; () banked
  4149  00304E  518E               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  4150  003050  0100               	movlb	0	; () banked
  4151  003052  118F               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  4152  003054  A4D8               	btfss	status,2,c
  4153  003056  D012               	goto	l6526
  4154                           
  4155                           ; BSR set to: 0
  4156                           ;sort.c: 164: if(!sensor_outputs[2]){
  4157  003058  0100               	movlb	0	; () banked
  4158  00305A  5190               	movf	(ID@sensor_outputs+4)& (0+255),w,b
  4159  00305C  0100               	movlb	0	; () banked
  4160  00305E  1191               	iorwf	(ID@sensor_outputs+5)& (0+255),w,b
  4161  003060  A4D8               	btfss	status,2,c
  4162  003062  D006               	goto	l6522
  4163                           
  4164                           ; BSR set to: 0
  4165                           ;sort.c: 165: count_pop_no_tab++;
  4166  003064  4A61               	infsnz	_count_pop_no_tab,f,c
  4167  003066  2A62               	incf	_count_pop_no_tab+1,f,c
  4168                           
  4169                           ; BSR set to: 0
  4170                           ;sort.c: 166: cur_can = 0;
  4171  003068  0E00               	movlw	0
  4172  00306A  6E66               	movwf	_cur_can+1,c
  4173  00306C  0E00               	movlw	0
  4174  00306E  D011               	goto	L4
  4175  003070                     l6522:
  4176                           
  4177                           ; BSR set to: 0
  4178                           ;sort.c: 168: else{
  4179                           ;sort.c: 169: count_pop_w_tab++;
  4180  003070  4A63               	infsnz	_count_pop_w_tab,f,c
  4181  003072  2A64               	incf	_count_pop_w_tab+1,f,c
  4182                           
  4183                           ; BSR set to: 0
  4184                           ;sort.c: 170: cur_can = 1;
  4185  003074  0E00               	movlw	0
  4186  003076  6E66               	movwf	_cur_can+1,c
  4187  003078  0E01               	movlw	1
  4188  00307A  D00B               	goto	L4
  4189  00307C                     l6526:
  4190                           
  4191                           ; BSR set to: 0
  4192                           ;sort.c: 173: else{
  4193                           ;sort.c: 174: count_can_w_lab++;
  4194  00307C  4A5F               	infsnz	_count_can_w_lab,f,c
  4195  00307E  2A60               	incf	_count_can_w_lab+1,f,c
  4196                           
  4197                           ; BSR set to: 0
  4198                           ;sort.c: 175: cur_can = 2;
  4199  003080  0E00               	movlw	0
  4200  003082  6E66               	movwf	_cur_can+1,c
  4201  003084  0E02               	movlw	2
  4202  003086  D005               	goto	L4
  4203  003088                     l6530:
  4204                           
  4205                           ; BSR set to: 0
  4206                           ;sort.c: 178: else{
  4207                           ;sort.c: 179: count_can_no_lab++;
  4208  003088  4A5D               	infsnz	_count_can_no_lab,f,c
  4209  00308A  2A5E               	incf	_count_can_no_lab+1,f,c
  4210                           
  4211                           ; BSR set to: 0
  4212                           ;sort.c: 180: cur_can = 3;
  4213  00308C  0E00               	movlw	0
  4214  00308E  6E66               	movwf	_cur_can+1,c
  4215  003090  0E03               	movlw	3
  4216  003092                     L4:
  4217  003092  6E65               	movwf	_cur_can,c
  4218                           
  4219                           ; BSR set to: 0
  4220                           ;sort.c: 181: }
  4221                           ;sort.c: 185: for(int i=0;i<10000;i++)
  4222                           
  4223                           ; BSR set to: 0
  4224  003094  0E00               	movlw	0
  4225  003096  0100               	movlb	0	; () banked
  4226  003098  6F8B               	movwf	(ID@i+1)& (0+255),b
  4227  00309A  0E00               	movlw	0
  4228  00309C  6F8A               	movwf	ID@i& (0+255),b
  4229  00309E                     l6536:
  4230                           
  4231                           ; BSR set to: 0
  4232  00309E  0100               	movlb	0	; () banked
  4233  0030A0  BF8B               	btfsc	(ID@i+1)& (0+255),7,b
  4234  0030A2  D008               	goto	l752
  4235  0030A4  0E10               	movlw	16
  4236  0030A6  0100               	movlb	0	; () banked
  4237  0030A8  5D8A               	subwf	ID@i& (0+255),w,b
  4238  0030AA  0E27               	movlw	39
  4239  0030AC  0100               	movlb	0	; () banked
  4240  0030AE  598B               	subwfb	(ID@i+1)& (0+255),w,b
  4241  0030B0  B0D8               	btfsc	status,0,c
  4242  0030B2  D00D               	goto	l753
  4243  0030B4                     l752:
  4244                           
  4245                           ; BSR set to: 0
  4246                           ;sort.c: 186: {
  4247                           ;sort.c: 187: LATCbits.LATC0 = 1;
  4248  0030B4  808B               	bsf	3979,0,c	;volatile
  4249                           
  4250                           ; BSR set to: 0
  4251                           ;sort.c: 188: _delay((unsigned long)((10)*(32000000/4000000.0)));
  4252  0030B6  0E1A               	movlw	26
  4253  0030B8                     u7207:
  4254  0030B8  2EE8               	decfsz	wreg,f,c
  4255  0030BA  D7FE               	bra	u7207
  4256  0030BC  D000               	nop2	
  4257                           
  4258                           ;sort.c: 189: LATCbits.LATC0 = 0;
  4259  0030BE  908B               	bcf	3979,0,c	;volatile
  4260                           
  4261                           ;sort.c: 190: _delay((unsigned long)((90)*(32000000/4000000.0)));
  4262  0030C0  0EF0               	movlw	240
  4263  0030C2                     u7217:
  4264  0030C2  2EE8               	decfsz	wreg,f,c
  4265  0030C4  D7FE               	bra	u7217
  4266  0030C6  0100               	movlb	0	; () banked
  4267  0030C8  4B8A               	infsnz	ID@i& (0+255),f,b
  4268  0030CA  2B8B               	incf	(ID@i+1)& (0+255),f,b
  4269  0030CC  D7E8               	goto	l6536
  4270  0030CE                     l753:
  4271                           
  4272                           ; BSR set to: 0
  4273                           ;sort.c: 191: }
  4274                           ;sort.c: 192: LATCbits.LATC0 = 0;
  4275  0030CE  908B               	bcf	3979,0,c	;volatile
  4276                           
  4277                           ; BSR set to: 0
  4278                           ;sort.c: 194: f_can_coming_to_distribution = 1;
  4279  0030D0  0E00               	movlw	0
  4280  0030D2  6E72               	movwf	_f_can_coming_to_distribution+1,c
  4281  0030D4  0E01               	movlw	1
  4282  0030D6  6E71               	movwf	_f_can_coming_to_distribution,c
  4283                           
  4284                           ; BSR set to: 0
  4285                           ;sort.c: 195: _delay((unsigned long)((1500)*(32000000/4000.0)));
  4286  0030D8  0E3D               	movlw	61
  4287  0030DA  0100               	movlb	0	; () banked
  4288  0030DC  6F89               	movwf	(??_ID+1)& (0+255),b
  4289  0030DE  0EE1               	movlw	225
  4290  0030E0  0100               	movlb	0	; () banked
  4291  0030E2  6F88               	movwf	??_ID& (0+255),b
  4292  0030E4  0E3F               	movlw	63
  4293  0030E6                     u7227:
  4294  0030E6  2EE8               	decfsz	wreg,f,c
  4295  0030E8  D7FE               	bra	u7227
  4296  0030EA  2F88               	decfsz	??_ID& (0+255),f,b
  4297  0030EC  D7FC               	bra	u7227
  4298  0030EE  2F89               	decfsz	(??_ID+1)& (0+255),f,b
  4299  0030F0  D7FA               	bra	u7227
  4300  0030F2  D000               	nop2	
  4301                           
  4302                           ;sort.c: 196: LATCbits.LATC0 = 1;
  4303  0030F4  808B               	bsf	3979,0,c	;volatile
  4304                           
  4305                           ;sort.c: 198: f_can_coming_to_ID = 0;
  4306  0030F6  0E00               	movlw	0
  4307  0030F8  6E70               	movwf	_f_can_coming_to_ID+1,c
  4308  0030FA  0E00               	movlw	0
  4309  0030FC  6E6F               	movwf	_f_can_coming_to_ID,c
  4310  0030FE  0012               	return	
  4311  003100                     __end_of_ID:
  4312                           	opt stack 0
  4313                           tblptru	equ	0xFF8
  4314                           tblptrh	equ	0xFF7
  4315                           tblptrl	equ	0xFF6
  4316                           tablat	equ	0xFF5
  4317                           prodh	equ	0xFF4
  4318                           prodl	equ	0xFF3
  4319                           postinc0	equ	0xFEE
  4320                           wreg	equ	0xFE8
  4321                           postdec1	equ	0xFE5
  4322                           fsr1l	equ	0xFE1
  4323                           indf2	equ	0xFDF
  4324                           postinc2	equ	0xFDE
  4325                           postdec2	equ	0xFDD
  4326                           fsr2h	equ	0xFDA
  4327                           fsr2l	equ	0xFD9
  4328                           status	equ	0xFD8
  4329                           
  4330 ;; *************** function _getMAG *****************
  4331 ;; Defined at:
  4332 ;;		line 330 in file "sort.c"
  4333 ;; Parameters:    Size  Location     Type
  4334 ;;		None
  4335 ;; Auto vars:     Size  Location     Type
  4336 ;;		None
  4337 ;; Return value:  Size  Location     Type
  4338 ;;                  1    wreg      void 
  4339 ;; Registers used:
  4340 ;;		wreg, status,2, status,0, cstack
  4341 ;; Tracked objects:
  4342 ;;		On entry : 0/0
  4343 ;;		On exit  : 0/0
  4344 ;;		Unchanged: 0/0
  4345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4348 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4349 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4350 ;;Total ram usage:        2 bytes
  4351 ;; Hardware stack levels used:    1
  4352 ;; Hardware stack levels required when called:    9
  4353 ;; This function calls:
  4354 ;;		_readMAG
  4355 ;; This function is called by:
  4356 ;;		_ID
  4357 ;; This function uses a non-reentrant model
  4358 ;;
  4359                           
  4360                           	psect	text10
  4361  004390                     __ptext10:
  4362                           	opt stack 0
  4363  004390                     _getMAG:
  4364                           	opt stack 19
  4365                           
  4366                           ;sort.c: 331: readMAG();
  4367                           
  4368                           ;incstack = 0
  4369  004390  ECF0  F020         	call	_readMAG	;wreg free
  4370                           
  4371                           ;sort.c: 333: if(MAG_signal==1){
  4372  004394  0100               	movlb	0	; () banked
  4373  004396  05DC               	decf	_MAG_signal& (0+255),w,b
  4374  004398  0100               	movlb	0	; () banked
  4375  00439A  11DD               	iorwf	(_MAG_signal+1)& (0+255),w,b
  4376  00439C  A4D8               	btfss	status,2,c
  4377  00439E  0012               	return	
  4378                           
  4379                           ; BSR set to: 0
  4380                           ;sort.c: 334: _delay((unsigned long)((500)*(32000000/4000.0)));
  4381  0043A0  0E15               	movlw	21
  4382  0043A2  0100               	movlb	0	; () banked
  4383  0043A4  6F87               	movwf	(??_getMAG+1)& (0+255),b
  4384  0043A6  0E4B               	movlw	75
  4385  0043A8  0100               	movlb	0	; () banked
  4386  0043AA  6F86               	movwf	??_getMAG& (0+255),b
  4387  0043AC  0EBE               	movlw	190
  4388  0043AE                     u7237:
  4389  0043AE  2EE8               	decfsz	wreg,f,c
  4390  0043B0  D7FE               	bra	u7237
  4391  0043B2  2F86               	decfsz	??_getMAG& (0+255),f,b
  4392  0043B4  D7FC               	bra	u7237
  4393  0043B6  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  4394  0043B8  D7FA               	bra	u7237
  4395  0043BA  F000               	nop	
  4396                           
  4397                           ;sort.c: 335: readMAG();
  4398  0043BC  ECF0  F020         	call	_readMAG	;wreg free
  4399  0043C0  0012               	return	
  4400  0043C2                     __end_of_getMAG:
  4401                           	opt stack 0
  4402                           tblptru	equ	0xFF8
  4403                           tblptrh	equ	0xFF7
  4404                           tblptrl	equ	0xFF6
  4405                           tablat	equ	0xFF5
  4406                           prodh	equ	0xFF4
  4407                           prodl	equ	0xFF3
  4408                           postinc0	equ	0xFEE
  4409                           wreg	equ	0xFE8
  4410                           postdec1	equ	0xFE5
  4411                           fsr1l	equ	0xFE1
  4412                           indf2	equ	0xFDF
  4413                           postinc2	equ	0xFDE
  4414                           postdec2	equ	0xFDD
  4415                           fsr2h	equ	0xFDA
  4416                           fsr2l	equ	0xFD9
  4417                           status	equ	0xFD8
  4418                           
  4419 ;; *************** function _Distribution *****************
  4420 ;; Defined at:
  4421 ;;		line 201 in file "sort.c"
  4422 ;; Parameters:    Size  Location     Type
  4423 ;;		None
  4424 ;; Auto vars:     Size  Location     Type
  4425 ;;		None
  4426 ;; Return value:  Size  Location     Type
  4427 ;;                  1    wreg      void 
  4428 ;; Registers used:
  4429 ;;		wreg, status,2, status,0, cstack
  4430 ;; Tracked objects:
  4431 ;;		On entry : 0/0
  4432 ;;		On exit  : 0/0
  4433 ;;		Unchanged: 0/0
  4434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4437 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4438 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4439 ;;Total ram usage:        2 bytes
  4440 ;; Hardware stack levels used:    1
  4441 ;; Hardware stack levels required when called:    8
  4442 ;; This function calls:
  4443 ;;		_updateServoPosition
  4444 ;; This function is called by:
  4445 ;;		_sort
  4446 ;; This function uses a non-reentrant model
  4447 ;;
  4448                           
  4449                           	psect	text11
  4450  002E46                     __ptext11:
  4451                           	opt stack 0
  4452  002E46                     _Distribution:
  4453                           	opt stack 21
  4454                           
  4455                           ;sort.c: 202: if(f_can_coming_to_distribution){
  4456                           
  4457                           ;incstack = 0
  4458  002E46  5071               	movf	_f_can_coming_to_distribution,w,c
  4459  002E48  1072               	iorwf	_f_can_coming_to_distribution+1,w,c
  4460  002E4A  B4D8               	btfsc	status,2,c
  4461  002E4C  0012               	return	
  4462  002E4E  D034               	goto	l6568
  4463  002E50                     l6558:
  4464                           
  4465                           ;sort.c: 207: updateServoPosition(500, 1);
  4466  002E50  0E01               	movlw	1
  4467  002E52  0100               	movlb	0	; () banked
  4468  002E54  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4469  002E56  0EF4               	movlw	244
  4470  002E58  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4471  002E5A  0E00               	movlw	0
  4472  002E5C  0100               	movlb	0	; () banked
  4473  002E5E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4474  002E60  0E01               	movlw	1
  4475  002E62  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4476  002E64  EC5E  F01E         	call	_updateServoPosition	;wreg free
  4477                           
  4478                           ;sort.c: 208: break;
  4479  002E68  D03E               	goto	l6570
  4480  002E6A                     l6560:
  4481                           
  4482                           ;sort.c: 210: updateServoPosition(750, 1);
  4483  002E6A  0E02               	movlw	2
  4484  002E6C  0100               	movlb	0	; () banked
  4485  002E6E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4486  002E70  0EEE               	movlw	238
  4487  002E72  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4488  002E74  0E00               	movlw	0
  4489  002E76  0100               	movlb	0	; () banked
  4490  002E78  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4491  002E7A  0E01               	movlw	1
  4492  002E7C  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4493  002E7E  EC5E  F01E         	call	_updateServoPosition	;wreg free
  4494                           
  4495                           ;sort.c: 211: break;
  4496  002E82  D031               	goto	l6570
  4497  002E84                     l6562:
  4498                           
  4499                           ;sort.c: 213: updateServoPosition(1700, 1);
  4500  002E84  0E06               	movlw	6
  4501  002E86  0100               	movlb	0	; () banked
  4502  002E88  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4503  002E8A  0EA4               	movlw	164
  4504  002E8C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4505  002E8E  0E00               	movlw	0
  4506  002E90  0100               	movlb	0	; () banked
  4507  002E92  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4508  002E94  0E01               	movlw	1
  4509  002E96  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4510  002E98  EC5E  F01E         	call	_updateServoPosition	;wreg free
  4511                           
  4512                           ;sort.c: 214: break;
  4513  002E9C  D024               	goto	l6570
  4514  002E9E                     l6564:
  4515                           
  4516                           ;sort.c: 216: updateServoPosition(2100, 1);
  4517  002E9E  0E08               	movlw	8
  4518  002EA0  0100               	movlb	0	; () banked
  4519  002EA2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4520  002EA4  0E34               	movlw	52
  4521  002EA6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4522  002EA8  0E00               	movlw	0
  4523  002EAA  0100               	movlb	0	; () banked
  4524  002EAC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4525  002EAE  0E01               	movlw	1
  4526  002EB0  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4527  002EB2  EC5E  F01E         	call	_updateServoPosition	;wreg free
  4528                           
  4529                           ;sort.c: 220: }
  4530                           
  4531                           ;sort.c: 219: break;
  4532                           
  4533                           ;sort.c: 218: default:
  4534                           
  4535                           ;sort.c: 217: break;
  4536  002EB6  D017               	goto	l6570
  4537  002EB8                     l6568:
  4538  002EB8  C065  F088         	movff	_cur_can,??_Distribution
  4539  002EBC  C066  F089         	movff	_cur_can+1,??_Distribution+1
  4540                           
  4541                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4542                           ; Switch size 1, requested type "space"
  4543                           ; Number of cases is 1, Range of values is 0 to 0
  4544                           ; switch strategies available:
  4545                           ; Name         Instructions Cycles
  4546                           ; simple_byte            4     3 (average)
  4547                           ;	Chosen strategy is simple_byte
  4548  002EC0  0100               	movlb	0	; () banked
  4549  002EC2  5189               	movf	(??_Distribution+1)& (0+255),w,b
  4550  002EC4  0A00               	xorlw	0	; case 0
  4551  002EC6  A4D8               	btfss	status,2,c
  4552  002EC8  D00E               	goto	l6570
  4553                           
  4554                           ; BSR set to: 0
  4555                           ; Switch size 1, requested type "space"
  4556                           ; Number of cases is 4, Range of values is 0 to 3
  4557                           ; switch strategies available:
  4558                           ; Name         Instructions Cycles
  4559                           ; simple_byte           13     7 (average)
  4560                           ;	Chosen strategy is simple_byte
  4561  002ECA  0100               	movlb	0	; () banked
  4562  002ECC  5188               	movf	??_Distribution& (0+255),w,b
  4563  002ECE  0A00               	xorlw	0	; case 0
  4564  002ED0  B4D8               	btfsc	status,2,c
  4565  002ED2  D7BE               	goto	l6558
  4566  002ED4  0A01               	xorlw	1	; case 1
  4567  002ED6  B4D8               	btfsc	status,2,c
  4568  002ED8  D7C8               	goto	l6560
  4569  002EDA  0A03               	xorlw	3	; case 2
  4570  002EDC  B4D8               	btfsc	status,2,c
  4571  002EDE  D7D2               	goto	l6562
  4572  002EE0  0A01               	xorlw	1	; case 3
  4573  002EE2  B4D8               	btfsc	status,2,c
  4574  002EE4  D7DC               	goto	l6564
  4575  002EE6                     l6570:
  4576                           
  4577                           ;sort.c: 221: _delay((unsigned long)((1500)*(32000000/4000.0)));
  4578  002EE6  0E3D               	movlw	61
  4579  002EE8  0100               	movlb	0	; () banked
  4580  002EEA  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4581  002EEC  0EE1               	movlw	225
  4582  002EEE  0100               	movlb	0	; () banked
  4583  002EF0  6F88               	movwf	??_Distribution& (0+255),b
  4584  002EF2  0E3F               	movlw	63
  4585  002EF4                     u7247:
  4586  002EF4  2EE8               	decfsz	wreg,f,c
  4587  002EF6  D7FE               	bra	u7247
  4588  002EF8  2F88               	decfsz	??_Distribution& (0+255),f,b
  4589  002EFA  D7FC               	bra	u7247
  4590  002EFC  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4591  002EFE  D7FA               	bra	u7247
  4592  002F00  D000               	nop2	
  4593                           
  4594                           ;sort.c: 224: updateServoPosition(1350, 3);
  4595  002F02  0E05               	movlw	5
  4596  002F04  0100               	movlb	0	; () banked
  4597  002F06  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4598  002F08  0E46               	movlw	70
  4599  002F0A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4600  002F0C  0E00               	movlw	0
  4601  002F0E  0100               	movlb	0	; () banked
  4602  002F10  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4603  002F12  0E03               	movlw	3
  4604  002F14  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4605  002F16  EC5E  F01E         	call	_updateServoPosition	;wreg free
  4606                           
  4607                           ;sort.c: 225: _delay((unsigned long)((2000)*(32000000/4000.0)));
  4608  002F1A  0E52               	movlw	82
  4609  002F1C  0100               	movlb	0	; () banked
  4610  002F1E  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4611  002F20  0E2B               	movlw	43
  4612  002F22  0100               	movlb	0	; () banked
  4613  002F24  6F88               	movwf	??_Distribution& (0+255),b
  4614  002F26  0E00               	movlw	0
  4615  002F28                     u7257:
  4616  002F28  2EE8               	decfsz	wreg,f,c
  4617  002F2A  D7FE               	bra	u7257
  4618  002F2C  2F88               	decfsz	??_Distribution& (0+255),f,b
  4619  002F2E  D7FC               	bra	u7257
  4620  002F30  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4621  002F32  D7FA               	bra	u7257
  4622  002F34  F000               	nop	
  4623                           
  4624                           ;sort.c: 228: updateServoPosition(1150, 3);
  4625  002F36  0E04               	movlw	4
  4626  002F38  0100               	movlb	0	; () banked
  4627  002F3A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4628  002F3C  0E7E               	movlw	126
  4629  002F3E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4630  002F40  0E00               	movlw	0
  4631  002F42  0100               	movlb	0	; () banked
  4632  002F44  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4633  002F46  0E03               	movlw	3
  4634  002F48  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4635  002F4A  EC5E  F01E         	call	_updateServoPosition	;wreg free
  4636                           
  4637                           ;sort.c: 229: _delay((unsigned long)((750)*(32000000/4000.0)));
  4638  002F4E  0E1F               	movlw	31
  4639  002F50  0100               	movlb	0	; () banked
  4640  002F52  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4641  002F54  0E71               	movlw	113
  4642  002F56  0100               	movlb	0	; () banked
  4643  002F58  6F88               	movwf	??_Distribution& (0+255),b
  4644  002F5A  0E1E               	movlw	30
  4645  002F5C                     u7267:
  4646  002F5C  2EE8               	decfsz	wreg,f,c
  4647  002F5E  D7FE               	bra	u7267
  4648  002F60  2F88               	decfsz	??_Distribution& (0+255),f,b
  4649  002F62  D7FC               	bra	u7267
  4650  002F64  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4651  002F66  D7FA               	bra	u7267
  4652  002F68  F000               	nop	
  4653                           
  4654                           ;sort.c: 230: updateServoPosition(1200, 1);
  4655  002F6A  0E04               	movlw	4
  4656  002F6C  0100               	movlb	0	; () banked
  4657  002F6E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4658  002F70  0EB0               	movlw	176
  4659  002F72  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4660  002F74  0E00               	movlw	0
  4661  002F76  0100               	movlb	0	; () banked
  4662  002F78  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4663  002F7A  0E01               	movlw	1
  4664  002F7C  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4665  002F7E  EC5E  F01E         	call	_updateServoPosition	;wreg free
  4666                           
  4667                           ;sort.c: 231: f_can_coming_to_distribution = 0;
  4668  002F82  0E00               	movlw	0
  4669  002F84  6E72               	movwf	_f_can_coming_to_distribution+1,c
  4670  002F86  0E00               	movlw	0
  4671  002F88  6E71               	movwf	_f_can_coming_to_distribution,c
  4672                           
  4673                           ;sort.c: 232: f_can_distributed = 1;
  4674  002F8A  0E00               	movlw	0
  4675  002F8C  0101               	movlb	1	; () banked
  4676  002F8E  6F2C               	movwf	(_f_can_distributed+1)& (0+255),b
  4677  002F90  0E01               	movlw	1
  4678  002F92  6F2B               	movwf	_f_can_distributed& (0+255),b
  4679                           
  4680                           ; BSR set to: 1
  4681                           ;sort.c: 233: if(f_lastCan == 1){
  4682  002F94  0473               	decf	_f_lastCan,w,c
  4683  002F96  1074               	iorwf	_f_lastCan+1,w,c
  4684  002F98  A4D8               	btfss	status,2,c
  4685  002F9A  0012               	return	
  4686                           
  4687                           ; BSR set to: 1
  4688                           ;sort.c: 234: machine_state = DoneSorting_state;
  4689  002F9C  0E02               	movlw	2
  4690  002F9E  0100               	movlb	0	; () banked
  4691  002FA0  6FFC               	movwf	_machine_state& (0+255),b
  4692                           
  4693                           ; BSR set to: 0
  4694  002FA2  0012               	return	
  4695  002FA4                     __end_of_Distribution:
  4696                           	opt stack 0
  4697                           tblptru	equ	0xFF8
  4698                           tblptrh	equ	0xFF7
  4699                           tblptrl	equ	0xFF6
  4700                           tablat	equ	0xFF5
  4701                           prodh	equ	0xFF4
  4702                           prodl	equ	0xFF3
  4703                           postinc0	equ	0xFEE
  4704                           wreg	equ	0xFE8
  4705                           postdec1	equ	0xFE5
  4706                           fsr1l	equ	0xFE1
  4707                           indf2	equ	0xFDF
  4708                           postinc2	equ	0xFDE
  4709                           postdec2	equ	0xFDD
  4710                           fsr2h	equ	0xFDA
  4711                           fsr2l	equ	0xFD9
  4712                           status	equ	0xFD8
  4713                           
  4714 ;; *************** function _machineConfig *****************
  4715 ;; Defined at:
  4716 ;;		line 15 in file "MachineConfig.c"
  4717 ;; Parameters:    Size  Location     Type
  4718 ;;		None
  4719 ;; Auto vars:     Size  Location     Type
  4720 ;;		None
  4721 ;; Return value:  Size  Location     Type
  4722 ;;                  1    wreg      void 
  4723 ;; Registers used:
  4724 ;;		wreg, status,2
  4725 ;; Tracked objects:
  4726 ;;		On entry : 0/0
  4727 ;;		On exit  : 0/0
  4728 ;;		Unchanged: 0/0
  4729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4731 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4733 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4734 ;;Total ram usage:        0 bytes
  4735 ;; Hardware stack levels used:    1
  4736 ;; Hardware stack levels required when called:    7
  4737 ;; This function calls:
  4738 ;;		Nothing
  4739 ;; This function is called by:
  4740 ;;		_main
  4741 ;; This function uses a non-reentrant model
  4742 ;;
  4743                           
  4744                           	psect	text12
  4745  003F38                     __ptext12:
  4746                           	opt stack 0
  4747  003F38                     _machineConfig:
  4748                           	opt stack 23
  4749                           
  4750                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  4751                           
  4752                           ;incstack = 0
  4753  003F38  0EF0               	movlw	240
  4754  003F3A  6ED3               	movwf	4051,c	;volatile
  4755                           
  4756                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  4757  003F3C  8C9B               	bsf	3995,6,c	;volatile
  4758                           
  4759                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  4760  003F3E  0E07               	movlw	7
  4761  003F40  6E92               	movwf	3986,c	;volatile
  4762                           
  4763                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  4764  003F42  0EF2               	movlw	242
  4765  003F44  6E93               	movwf	3987,c	;volatile
  4766                           
  4767                           ;MachineConfig.c: 27: TRISC = 0x00;
  4768  003F46  0E00               	movlw	0
  4769  003F48  6E94               	movwf	3988,c	;volatile
  4770                           
  4771                           ;MachineConfig.c: 31: TRISD = 0x00;
  4772  003F4A  0E00               	movlw	0
  4773  003F4C  6E95               	movwf	3989,c	;volatile
  4774                           
  4775                           ;MachineConfig.c: 34: TRISE = 0x00;
  4776  003F4E  0E00               	movlw	0
  4777  003F50  6E96               	movwf	3990,c	;volatile
  4778                           
  4779                           ;MachineConfig.c: 37: LATA = 0x00;
  4780  003F52  0E00               	movlw	0
  4781  003F54  6E89               	movwf	3977,c	;volatile
  4782                           
  4783                           ;MachineConfig.c: 38: LATB = 0x00;
  4784  003F56  0E00               	movlw	0
  4785  003F58  6E8A               	movwf	3978,c	;volatile
  4786                           
  4787                           ;MachineConfig.c: 39: LATC = 0x00;
  4788  003F5A  0E00               	movlw	0
  4789  003F5C  6E8B               	movwf	3979,c	;volatile
  4790                           
  4791                           ;MachineConfig.c: 40: LATD = 0x00;
  4792  003F5E  0E00               	movlw	0
  4793  003F60  6E8C               	movwf	3980,c	;volatile
  4794                           
  4795                           ;MachineConfig.c: 41: LATE = 0x00;
  4796  003F62  0E00               	movlw	0
  4797  003F64  6E8D               	movwf	3981,c	;volatile
  4798                           
  4799                           ;MachineConfig.c: 43: nRBPU = 0;
  4800  003F66  9EF1               	bcf	intcon2,7,c	;volatile
  4801                           
  4802                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  4803  003F68  0E00               	movlw	0
  4804  003F6A  6EC2               	movwf	4034,c	;volatile
  4805                           
  4806                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  4807  003F6C  0E0D               	movlw	13
  4808  003F6E  6EC1               	movwf	4033,c	;volatile
  4809                           
  4810                           ;MachineConfig.c: 50: CVRCON = 0x00;
  4811  003F70  0E00               	movlw	0
  4812  003F72  6EB5               	movwf	4021,c	;volatile
  4813                           
  4814                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  4815  003F74  96B4               	bcf	4020,3,c	;volatile
  4816                           
  4817                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  4818  003F76  0EB1               	movlw	177
  4819  003F78  6EC0               	movwf	4032,c	;volatile
  4820                           
  4821                           ;MachineConfig.c: 55: INT1IE = 1;
  4822  003F7A  86F0               	bsf	intcon3,3,c	;volatile
  4823                           
  4824                           ;MachineConfig.c: 57: TMR0IE = 1;
  4825  003F7C  8AF2               	bsf	intcon,5,c	;volatile
  4826                           
  4827                           ;MachineConfig.c: 58: TMR1IE = 1;
  4828  003F7E  809D               	bsf	3997,0,c	;volatile
  4829                           
  4830                           ;MachineConfig.c: 59: T1CON = 0b10110000;
  4831  003F80  0EB0               	movlw	176
  4832  003F82  6ECD               	movwf	4045,c	;volatile
  4833                           
  4834                           ;MachineConfig.c: 60: T3CON = 0b10110000;
  4835  003F84  0EB0               	movlw	176
  4836  003F86  6EB1               	movwf	4017,c	;volatile
  4837                           
  4838                           ;MachineConfig.c: 61: TMR2IE = 1;
  4839  003F88  829D               	bsf	3997,1,c	;volatile
  4840                           
  4841                           ;MachineConfig.c: 62: TMR3IE = 1;
  4842  003F8A  82A0               	bsf	4000,1,c	;volatile
  4843                           
  4844                           ;MachineConfig.c: 63: PEIE = 1;
  4845  003F8C  8CF2               	bsf	intcon,6,c	;volatile
  4846                           
  4847                           ;MachineConfig.c: 64: ADIE = 0;
  4848  003F8E  9C9D               	bcf	3997,6,c	;volatile
  4849                           
  4850                           ;MachineConfig.c: 65: (INTCONbits.GIE = 0);
  4851  003F90  9EF2               	bcf	intcon,7,c	;volatile
  4852  003F92  0012               	return		;funcret
  4853  003F94                     __end_of_machineConfig:
  4854                           	opt stack 0
  4855                           tblptru	equ	0xFF8
  4856                           tblptrh	equ	0xFF7
  4857                           tblptrl	equ	0xFF6
  4858                           tablat	equ	0xFF5
  4859                           prodh	equ	0xFF4
  4860                           prodl	equ	0xFF3
  4861                           intcon	equ	0xFF2
  4862                           intcon2	equ	0xFF1
  4863                           intcon3	equ	0xFF0
  4864                           postinc0	equ	0xFEE
  4865                           wreg	equ	0xFE8
  4866                           postdec1	equ	0xFE5
  4867                           fsr1l	equ	0xFE1
  4868                           indf2	equ	0xFDF
  4869                           postinc2	equ	0xFDE
  4870                           postdec2	equ	0xFDD
  4871                           fsr2h	equ	0xFDA
  4872                           fsr2l	equ	0xFD9
  4873                           status	equ	0xFD8
  4874                           
  4875 ;; *************** function _logRun *****************
  4876 ;; Defined at:
  4877 ;;		line 84 in file "EEPROM.c"
  4878 ;; Parameters:    Size  Location     Type
  4879 ;;		None
  4880 ;; Auto vars:     Size  Location     Type
  4881 ;;  byte_i          1   53[BANK0 ] unsigned char 
  4882 ;;  i               2   55[BANK0 ] int 
  4883 ;;  num             1   49[BANK0 ] unsigned char 
  4884 ;;  addr            2   57[BANK0 ] unsigned short 
  4885 ;;  byte11          1   54[BANK0 ] unsigned char 
  4886 ;;  byte3           1   52[BANK0 ] unsigned char 
  4887 ;;  byte2           1   51[BANK0 ] unsigned char 
  4888 ;;  byte1           1   50[BANK0 ] unsigned char 
  4889 ;; Return value:  Size  Location     Type
  4890 ;;                  1    wreg      void 
  4891 ;; Registers used:
  4892 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4893 ;; Tracked objects:
  4894 ;;		On entry : 0/0
  4895 ;;		On exit  : 0/0
  4896 ;;		Unchanged: 0/0
  4897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4899 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4901 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4902 ;;Total ram usage:       10 bytes
  4903 ;; Hardware stack levels used:    1
  4904 ;; Hardware stack levels required when called:   11
  4905 ;; This function calls:
  4906 ;;		_EEPROM_read
  4907 ;;		_EEPROM_write
  4908 ;; This function is called by:
  4909 ;;		_main
  4910 ;; This function uses a non-reentrant model
  4911 ;;
  4912                           
  4913                           	psect	text13
  4914  003100                     __ptext13:
  4915                           	opt stack 0
  4916  003100                     _logRun:
  4917                           	opt stack 19
  4918                           
  4919                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  4920                           
  4921                           ;incstack = 0
  4922  003100  0E00               	movlw	0
  4923  003102  0100               	movlb	0	; () banked
  4924  003104  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  4925  003106  0E00               	movlw	0
  4926  003108  6F80               	movwf	EEPROM_read@address& (0+255),b
  4927  00310A  ECE9  F023         	call	_EEPROM_read	;wreg free
  4928  00310E  0100               	movlb	0	; () banked
  4929  003110  6FFD               	movwf	_sel& (0+255),b
  4930                           
  4931                           ; BSR set to: 0
  4932                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  4933  003112  0100               	movlb	0	; () banked
  4934  003114  51FD               	movf	_sel& (0+255),w,b
  4935  003116  0D0B               	mullw	11
  4936  003118  0E01               	movlw	1
  4937  00311A  24F3               	addwf	prodl,w,c
  4938  00311C  0100               	movlb	0	; () banked
  4939  00311E  6FB9               	movwf	logRun@addr& (0+255),b
  4940  003120  0E00               	movlw	0
  4941  003122  20F4               	addwfc	prodh,w,c
  4942  003124  0100               	movlb	0	; () banked
  4943  003126  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  4944                           
  4945                           ; BSR set to: 0
  4946                           ;EEPROM.c: 101: if (sel < 3){
  4947  003128  0E03               	movlw	3
  4948  00312A  0100               	movlb	0	; () banked
  4949  00312C  61FD               	cpfslt	_sel& (0+255),b
  4950  00312E  D00E               	goto	l8014
  4951                           
  4952                           ; BSR set to: 0
  4953                           ;EEPROM.c: 102: unsigned char num = sel+1;
  4954  003130  0100               	movlb	0	; () banked
  4955  003132  29FD               	incf	_sel& (0+255),w,b
  4956  003134  0100               	movlb	0	; () banked
  4957  003136  6FB1               	movwf	logRun@num& (0+255),b
  4958                           
  4959                           ; BSR set to: 0
  4960                           ;EEPROM.c: 103: EEPROM_write(0, num);
  4961  003138  0E00               	movlw	0
  4962  00313A  0100               	movlb	0	; () banked
  4963  00313C  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  4964  00313E  0E00               	movlw	0
  4965  003140  6FAB               	movwf	EEPROM_write@address& (0+255),b
  4966  003142  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  4967  003146  EC35  F01A         	call	_EEPROM_write	;wreg free
  4968                           
  4969                           ;EEPROM.c: 104: }
  4970  00314A  D00A               	goto	l8016
  4971  00314C                     l8014:
  4972                           
  4973                           ;EEPROM.c: 105: else{
  4974                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  4975  00314C  0E00               	movlw	0
  4976  00314E  0100               	movlb	0	; () banked
  4977  003150  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  4978  003152  0E00               	movlw	0
  4979  003154  6FAB               	movwf	EEPROM_write@address& (0+255),b
  4980  003156  0E00               	movlw	0
  4981  003158  0100               	movlb	0	; () banked
  4982  00315A  6FAD               	movwf	EEPROM_write@data& (0+255),b
  4983  00315C  EC35  F01A         	call	_EEPROM_write	;wreg free
  4984  003160                     l8016:
  4985                           
  4986                           ;EEPROM.c: 107: }
  4987                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  4988  003160  0100               	movlb	0	; () banked
  4989  003162  51FE               	movf	_count_total& (0+255),w,b
  4990  003164  0980               	iorlw	128
  4991  003166  0100               	movlb	0	; () banked
  4992  003168  6FB2               	movwf	logRun@byte1& (0+255),b
  4993                           
  4994                           ; BSR set to: 0
  4995                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  4996  00316A  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4997  00316E  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4998  003172  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  4999  003176  EC35  F01A         	call	_EEPROM_write	;wreg free
  5000                           
  5001                           ;EEPROM.c: 112: addr++;
  5002  00317A  0100               	movlb	0	; () banked
  5003  00317C  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5004  00317E  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5005                           
  5006                           ; BSR set to: 0
  5007                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  5008  003180  3861               	swapf	_count_pop_no_tab,w,c
  5009  003182  0BF0               	andlw	240
  5010  003184  1063               	iorwf	_count_pop_w_tab,w,c
  5011  003186  0100               	movlb	0	; () banked
  5012  003188  6FB3               	movwf	logRun@byte2& (0+255),b
  5013                           
  5014                           ; BSR set to: 0
  5015                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  5016  00318A  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5017  00318E  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5018  003192  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  5019  003196  EC35  F01A         	call	_EEPROM_write	;wreg free
  5020                           
  5021                           ;EEPROM.c: 117: addr++;
  5022  00319A  0100               	movlb	0	; () banked
  5023  00319C  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5024  00319E  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5025                           
  5026                           ; BSR set to: 0
  5027                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  5028  0031A0  385F               	swapf	_count_can_w_lab,w,c
  5029  0031A2  0BF0               	andlw	240
  5030  0031A4  105D               	iorwf	_count_can_no_lab,w,c
  5031  0031A6  0100               	movlb	0	; () banked
  5032  0031A8  6FB4               	movwf	logRun@byte3& (0+255),b
  5033                           
  5034                           ; BSR set to: 0
  5035                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  5036  0031AA  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5037  0031AE  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5038  0031B2  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  5039  0031B6  EC35  F01A         	call	_EEPROM_write	;wreg free
  5040                           
  5041                           ;EEPROM.c: 120: addr++;
  5042  0031BA  0100               	movlb	0	; () banked
  5043  0031BC  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5044  0031BE  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5045                           
  5046                           ; BSR set to: 0
  5047                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  5048  0031C0  0E00               	movlw	0
  5049  0031C2  0100               	movlb	0	; () banked
  5050  0031C4  6FB8               	movwf	(logRun@i+1)& (0+255),b
  5051  0031C6  0E00               	movlw	0
  5052  0031C8  6FB7               	movwf	logRun@i& (0+255),b
  5053                           
  5054                           ; BSR set to: 0
  5055  0031CA  0100               	movlb	0	; () banked
  5056  0031CC  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  5057  0031CE  D008               	goto	l8040
  5058  0031D0  0100               	movlb	0	; () banked
  5059  0031D2  51B8               	movf	(logRun@i+1)& (0+255),w,b
  5060  0031D4  E128               	bnz	l954
  5061  0031D6  0E07               	movlw	7
  5062  0031D8  0100               	movlb	0	; () banked
  5063  0031DA  5DB7               	subwf	logRun@i& (0+255),w,b
  5064  0031DC  B0D8               	btfsc	status,0,c
  5065  0031DE  D023               	goto	l954
  5066  0031E0                     l8040:
  5067                           
  5068                           ; BSR set to: 0
  5069                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  5070  0031E0  90D8               	bcf	status,0,c
  5071  0031E2  0100               	movlb	0	; () banked
  5072  0031E4  35B7               	rlcf	logRun@i& (0+255),w,b
  5073  0031E6  6ED9               	movwf	fsr2l,c
  5074  0031E8  0100               	movlb	0	; () banked
  5075  0031EA  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  5076  0031EC  6EDA               	movwf	fsr2h,c
  5077  0031EE  0E0E               	movlw	low _startTime
  5078  0031F0  26D9               	addwf	fsr2l,f,c
  5079  0031F2  0E01               	movlw	high _startTime
  5080  0031F4  22DA               	addwfc	fsr2h,f,c
  5081  0031F6  50DF               	movf	indf2,w,c
  5082  0031F8  0100               	movlb	0	; () banked
  5083  0031FA  6FB5               	movwf	logRun@byte_i& (0+255),b
  5084                           
  5085                           ; BSR set to: 0
  5086                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  5087  0031FC  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5088  003200  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5089  003204  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  5090  003208  EC35  F01A         	call	_EEPROM_write	;wreg free
  5091                           
  5092                           ;EEPROM.c: 126: addr++;
  5093  00320C  0100               	movlb	0	; () banked
  5094  00320E  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5095  003210  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5096                           
  5097                           ; BSR set to: 0
  5098  003212  0100               	movlb	0	; () banked
  5099  003214  4BB7               	infsnz	logRun@i& (0+255),f,b
  5100  003216  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  5101                           
  5102                           ; BSR set to: 0
  5103  003218  0100               	movlb	0	; () banked
  5104  00321A  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  5105  00321C  D7E1               	goto	l8040
  5106  00321E  0100               	movlb	0	; () banked
  5107  003220  51B8               	movf	(logRun@i+1)& (0+255),w,b
  5108  003222  E101               	bnz	u6910
  5109  003224  D7D8               	goto	L5
  5110  003226                     u6910:
  5111  003226                     l954:
  5112                           
  5113                           ; BSR set to: 0
  5114                           ;EEPROM.c: 127: }
  5115                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  5116  003226  C0F8  F0B6         	movff	_total_time,logRun@byte11
  5117                           
  5118                           ; BSR set to: 0
  5119                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  5120  00322A  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5121  00322E  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5122  003232  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  5123  003236  EC35  F01A         	call	_EEPROM_write	;wreg free
  5124  00323A  0012               	return		;funcret
  5125  00323C                     __end_of_logRun:
  5126                           	opt stack 0
  5127                           tblptru	equ	0xFF8
  5128                           tblptrh	equ	0xFF7
  5129                           tblptrl	equ	0xFF6
  5130                           tablat	equ	0xFF5
  5131                           prodh	equ	0xFF4
  5132                           prodl	equ	0xFF3
  5133                           intcon	equ	0xFF2
  5134                           intcon2	equ	0xFF1
  5135                           intcon3	equ	0xFF0
  5136                           postinc0	equ	0xFEE
  5137                           wreg	equ	0xFE8
  5138                           postdec1	equ	0xFE5
  5139                           fsr1l	equ	0xFE1
  5140                           indf2	equ	0xFDF
  5141                           postinc2	equ	0xFDE
  5142                           postdec2	equ	0xFDD
  5143                           fsr2h	equ	0xFDA
  5144                           fsr2l	equ	0xFD9
  5145                           status	equ	0xFD8
  5146                           
  5147 ;; *************** function _EEPROM_write *****************
  5148 ;; Defined at:
  5149 ;;		line 32 in file "EEPROM.c"
  5150 ;; Parameters:    Size  Location     Type
  5151 ;;  address         2   43[BANK0 ] unsigned short 
  5152 ;;  data            1   45[BANK0 ] unsigned char 
  5153 ;; Auto vars:     Size  Location     Type
  5154 ;;  i               1   48[BANK0 ] unsigned char 
  5155 ;;  i               1   47[BANK0 ] unsigned char 
  5156 ;; Return value:  Size  Location     Type
  5157 ;;                  1    wreg      void 
  5158 ;; Registers used:
  5159 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5160 ;; Tracked objects:
  5161 ;;		On entry : 0/0
  5162 ;;		On exit  : 0/0
  5163 ;;		Unchanged: 0/0
  5164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5165 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5166 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5167 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5168 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5169 ;;Total ram usage:        6 bytes
  5170 ;; Hardware stack levels used:    1
  5171 ;; Hardware stack levels required when called:   10
  5172 ;; This function calls:
  5173 ;;		_EEPROM_read
  5174 ;;		_lcdInst
  5175 ;;		_printf
  5176 ;; This function is called by:
  5177 ;;		_Loading
  5178 ;;		_logRun
  5179 ;; This function uses a non-reentrant model
  5180 ;;
  5181                           
  5182                           	psect	text14
  5183  00346A                     __ptext14:
  5184                           	opt stack 0
  5185  00346A                     _EEPROM_write:
  5186                           	opt stack 18
  5187                           
  5188                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  5189                           
  5190                           ;incstack = 0
  5191  00346A  84A6               	bsf	4006,2,c	;volatile
  5192                           
  5193                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  5194  00346C  0100               	movlb	0	; () banked
  5195  00346E  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  5196  003470  6EAA               	movwf	4010,c	;volatile
  5197                           
  5198                           ; BSR set to: 0
  5199                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  5200  003472  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  5201                           
  5202                           ; BSR set to: 0
  5203                           ;EEPROM.c: 39: EEDATA = data;
  5204  003476  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  5205                           
  5206                           ; BSR set to: 0
  5207                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  5208  00347A  9EA6               	bcf	4006,7,c	;volatile
  5209                           
  5210                           ; BSR set to: 0
  5211                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  5212  00347C  9CA6               	bcf	4006,6,c	;volatile
  5213                           
  5214                           ; BSR set to: 0
  5215                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  5216  00347E  9EF2               	bcf	intcon,7,c	;volatile
  5217                           
  5218                           ;EEPROM.c: 45: EECON2 = 0x55;
  5219  003480  0E55               	movlw	85
  5220  003482  6EA7               	movwf	4007,c	;volatile
  5221                           
  5222                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  5223  003484  0EAA               	movlw	170
  5224  003486  6EA7               	movwf	4007,c	;volatile
  5225                           
  5226                           ; BSR set to: 0
  5227                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  5228  003488  82A6               	bsf	4006,1,c	;volatile
  5229                           
  5230                           ; BSR set to: 0
  5231                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  5232  00348A  8EF2               	bsf	intcon,7,c	;volatile
  5233  00348C                     l932:
  5234  00348C  A8A1               	btfss	4001,4,c	;volatile
  5235  00348E  D7FE               	goto	l932
  5236                           
  5237                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  5238  003490  98A1               	bcf	4001,4,c	;volatile
  5239                           
  5240                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  5241  003492  94A6               	bcf	4006,2,c	;volatile
  5242                           
  5243                           ;EEPROM.c: 57: if(debug){
  5244  003494  5067               	movf	_debug,w,c
  5245  003496  1068               	iorwf	_debug+1,w,c
  5246  003498  B4D8               	btfsc	status,2,c
  5247  00349A  0012               	return	
  5248                           
  5249                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5250  00349C  0E01               	movlw	1
  5251  00349E  EC26  F024         	call	_lcdInst
  5252  0034A2  0E68               	movlw	104
  5253  0034A4  0100               	movlb	0	; () banked
  5254  0034A6  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5255  0034A8  0EE4               	movlw	228
  5256  0034AA                     u7277:
  5257  0034AA  2EE8               	decfsz	wreg,f,c
  5258  0034AC  D7FE               	bra	u7277
  5259  0034AE  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5260  0034B0  D7FC               	bra	u7277
  5261  0034B2  F000               	nop	
  5262                           
  5263                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  5264  0034B4  0E80               	movlw	128
  5265  0034B6  EC26  F024         	call	_lcdInst
  5266                           
  5267                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  5268  0034BA  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  5269  0034BE  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  5270  0034C2  ECE9  F023         	call	_EEPROM_read	;wreg free
  5271  0034C6  0100               	movlb	0	; () banked
  5272  0034C8  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  5273  0034CA  A4D8               	btfss	status,2,c
  5274  0034CC  D024               	goto	l6092
  5275                           
  5276                           ; BSR set to: 0
  5277                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  5278  0034CE  0E46               	movlw	low STR_66
  5279  0034D0  0100               	movlb	0	; () banked
  5280  0034D2  6F8E               	movwf	printf@f& (0+255),b
  5281  0034D4  0EFB               	movlw	high STR_66
  5282  0034D6  0100               	movlb	0	; () banked
  5283  0034D8  6F8F               	movwf	(printf@f+1)& (0+255),b
  5284  0034DA  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  5285  0034DE  0100               	movlb	0	; () banked
  5286  0034E0  6B91               	clrf	(?_printf+3)& (0+255),b
  5287  0034E2  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  5288  0034E6  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  5289  0034EA  ECB8  F008         	call	_printf	;wreg free
  5290                           
  5291                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  5292  0034EE  0E00               	movlw	0
  5293  0034F0  0100               	movlb	0	; () banked
  5294  0034F2  6FAF               	movwf	EEPROM_write@i& (0+255),b
  5295  0034F4                     l6084:
  5296                           
  5297                           ; BSR set to: 0
  5298  0034F4  0E63               	movlw	99
  5299  0034F6  0100               	movlb	0	; () banked
  5300  0034F8  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  5301  0034FA  D001               	goto	l6088
  5302  0034FC  0012               	return	
  5303  0034FE                     l6088:
  5304                           
  5305                           ; BSR set to: 0
  5306  0034FE  0E68               	movlw	104
  5307  003500  0100               	movlb	0	; () banked
  5308  003502  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5309  003504  0EE4               	movlw	228
  5310  003506                     u7287:
  5311  003506  2EE8               	decfsz	wreg,f,c
  5312  003508  D7FE               	bra	u7287
  5313  00350A  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5314  00350C  D7FC               	bra	u7287
  5315  00350E  F000               	nop	
  5316  003510  0100               	movlb	0	; () banked
  5317  003512  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  5318  003514  D7EF               	goto	l6084
  5319  003516                     l6092:
  5320                           
  5321                           ; BSR set to: 0
  5322                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  5323  003516  0EBD               	movlw	low STR_67
  5324  003518  0100               	movlb	0	; () banked
  5325  00351A  6F8E               	movwf	printf@f& (0+255),b
  5326  00351C  0EFF               	movlw	high STR_67
  5327  00351E  0100               	movlb	0	; () banked
  5328  003520  6F8F               	movwf	(printf@f+1)& (0+255),b
  5329  003522  ECB8  F008         	call	_printf	;wreg free
  5330  003526  0E00               	movlw	0
  5331  003528  0100               	movlb	0	; () banked
  5332  00352A  6FB0               	movwf	EEPROM_write@i_1329& (0+255),b
  5333  00352C                     l6096:
  5334                           
  5335                           ; BSR set to: 0
  5336  00352C  0E63               	movlw	99
  5337  00352E  0100               	movlb	0	; () banked
  5338  003530  65B0               	cpfsgt	EEPROM_write@i_1329& (0+255),b
  5339  003532  D001               	goto	l6100
  5340  003534  0012               	return	
  5341  003536                     l6100:
  5342                           
  5343                           ; BSR set to: 0
  5344  003536  0E68               	movlw	104
  5345  003538  0100               	movlb	0	; () banked
  5346  00353A  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5347  00353C  0EE4               	movlw	228
  5348  00353E                     u7297:
  5349  00353E  2EE8               	decfsz	wreg,f,c
  5350  003540  D7FE               	bra	u7297
  5351  003542  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5352  003544  D7FC               	bra	u7297
  5353  003546  F000               	nop	
  5354  003548  0100               	movlb	0	; () banked
  5355  00354A  2BB0               	incf	EEPROM_write@i_1329& (0+255),f,b
  5356  00354C  D7EF               	goto	l6096
  5357  00354E                     __end_of_EEPROM_write:
  5358                           	opt stack 0
  5359                           tblptru	equ	0xFF8
  5360                           tblptrh	equ	0xFF7
  5361                           tblptrl	equ	0xFF6
  5362                           tablat	equ	0xFF5
  5363                           prodh	equ	0xFF4
  5364                           prodl	equ	0xFF3
  5365                           intcon	equ	0xFF2
  5366                           intcon2	equ	0xFF1
  5367                           intcon3	equ	0xFF0
  5368                           postinc0	equ	0xFEE
  5369                           wreg	equ	0xFE8
  5370                           postdec1	equ	0xFE5
  5371                           fsr1l	equ	0xFE1
  5372                           indf2	equ	0xFDF
  5373                           postinc2	equ	0xFDE
  5374                           postdec2	equ	0xFDD
  5375                           fsr2h	equ	0xFDA
  5376                           fsr2l	equ	0xFD9
  5377                           status	equ	0xFD8
  5378                           
  5379 ;; *************** function _EEPROM_read *****************
  5380 ;; Defined at:
  5381 ;;		line 68 in file "EEPROM.c"
  5382 ;; Parameters:    Size  Location     Type
  5383 ;;  address         2    0[BANK0 ] unsigned short 
  5384 ;; Auto vars:     Size  Location     Type
  5385 ;;		None
  5386 ;; Return value:  Size  Location     Type
  5387 ;;                  1    wreg      unsigned char 
  5388 ;; Registers used:
  5389 ;;		wreg, status,2
  5390 ;; Tracked objects:
  5391 ;;		On entry : 0/0
  5392 ;;		On exit  : 0/0
  5393 ;;		Unchanged: 0/0
  5394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5395 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5396 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5398 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5399 ;;Total ram usage:        2 bytes
  5400 ;; Hardware stack levels used:    1
  5401 ;; Hardware stack levels required when called:    7
  5402 ;; This function calls:
  5403 ;;		Nothing
  5404 ;; This function is called by:
  5405 ;;		_Loading
  5406 ;;		_EEPROM_write
  5407 ;;		_logRun
  5408 ;; This function uses a non-reentrant model
  5409 ;;
  5410                           
  5411                           	psect	text15
  5412  0047D2                     __ptext15:
  5413                           	opt stack 0
  5414  0047D2                     _EEPROM_read:
  5415                           	opt stack 20
  5416                           
  5417                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  5418                           
  5419                           ;incstack = 0
  5420  0047D2  0100               	movlb	0	; () banked
  5421  0047D4  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  5422  0047D6  6EAA               	movwf	4010,c	;volatile
  5423                           
  5424                           ; BSR set to: 0
  5425                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  5426  0047D8  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  5427                           
  5428                           ; BSR set to: 0
  5429                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  5430  0047DC  9EA6               	bcf	4006,7,c	;volatile
  5431                           
  5432                           ; BSR set to: 0
  5433                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  5434  0047DE  9CA6               	bcf	4006,6,c	;volatile
  5435                           
  5436                           ; BSR set to: 0
  5437                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  5438  0047E0  80A6               	bsf	4006,0,c	;volatile
  5439  0047E2                     l945:
  5440  0047E2  B0A6               	btfsc	4006,0,c	;volatile
  5441  0047E4  D7FE               	goto	l945
  5442                           
  5443                           ;EEPROM.c: 81: return EEDATA;
  5444  0047E6  50A8               	movf	4008,w,c	;volatile
  5445  0047E8  0012               	return	
  5446  0047EA                     __end_of_EEPROM_read:
  5447                           	opt stack 0
  5448                           tblptru	equ	0xFF8
  5449                           tblptrh	equ	0xFF7
  5450                           tblptrl	equ	0xFF6
  5451                           tablat	equ	0xFF5
  5452                           prodh	equ	0xFF4
  5453                           prodl	equ	0xFF3
  5454                           intcon	equ	0xFF2
  5455                           intcon2	equ	0xFF1
  5456                           intcon3	equ	0xFF0
  5457                           postinc0	equ	0xFEE
  5458                           wreg	equ	0xFE8
  5459                           postdec1	equ	0xFE5
  5460                           fsr1l	equ	0xFE1
  5461                           indf2	equ	0xFDF
  5462                           postinc2	equ	0xFDE
  5463                           postdec2	equ	0xFDD
  5464                           fsr2h	equ	0xFDA
  5465                           fsr2l	equ	0xFD9
  5466                           status	equ	0xFD8
  5467                           
  5468 ;; *************** function _initUI *****************
  5469 ;; Defined at:
  5470 ;;		line 62 in file "UI.c"
  5471 ;; Parameters:    Size  Location     Type
  5472 ;;		None
  5473 ;; Auto vars:     Size  Location     Type
  5474 ;;		None
  5475 ;; Return value:  Size  Location     Type
  5476 ;;                  1    wreg      void 
  5477 ;; Registers used:
  5478 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5479 ;; Tracked objects:
  5480 ;;		On entry : 0/0
  5481 ;;		On exit  : 0/0
  5482 ;;		Unchanged: 0/0
  5483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5485 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5487 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5488 ;;Total ram usage:        0 bytes
  5489 ;; Hardware stack levels used:    1
  5490 ;; Hardware stack levels required when called:   12
  5491 ;; This function calls:
  5492 ;;		_change_state_to_menu_start
  5493 ;;		_loadRTC
  5494 ;; This function is called by:
  5495 ;;		_main
  5496 ;; This function uses a non-reentrant model
  5497 ;;
  5498                           
  5499                           	psect	text16
  5500  0045A4                     __ptext16:
  5501                           	opt stack 0
  5502  0045A4                     _initUI:
  5503                           	opt stack 18
  5504                           
  5505                           ;UI.c: 63: (INTCONbits.GIE = 1);
  5506                           
  5507                           ;incstack = 0
  5508  0045A4  8EF2               	bsf	intcon,7,c	;volatile
  5509                           
  5510                           ;UI.c: 64: machine_state = UI_state;
  5511  0045A6  0E00               	movlw	0
  5512  0045A8  0100               	movlb	0	; () banked
  5513  0045AA  6FFC               	movwf	_machine_state& (0+255),b
  5514                           
  5515                           ;UI.c: 65: logstate = 0;
  5516  0045AC  0E00               	movlw	0
  5517  0045AE  0100               	movlb	0	; () banked
  5518  0045B0  6FF7               	movwf	(_logstate+1)& (0+255),b
  5519  0045B2  0E00               	movlw	0
  5520  0045B4  6FF6               	movwf	_logstate& (0+255),b
  5521                           
  5522                           ; BSR set to: 0
  5523                           ;UI.c: 67: if(RTCflag){
  5524  0045B6  0100               	movlb	0	; () banked
  5525  0045B8  51DE               	movf	_RTCflag& (0+255),w,b
  5526  0045BA  0100               	movlb	0	; () banked
  5527  0045BC  11DF               	iorwf	(_RTCflag+1)& (0+255),w,b
  5528  0045BE  A4D8               	btfss	status,2,c
  5529                           
  5530                           ; BSR set to: 0
  5531                           ;UI.c: 68: loadRTC();
  5532  0045C0  ECD7  F01C         	call	_loadRTC	;wreg free
  5533                           
  5534                           ;UI.c: 69: }
  5535                           ;UI.c: 71: change_state_to_menu_start();
  5536  0045C4  EC17  F023         	call	_change_state_to_menu_start	;wreg free
  5537                           
  5538                           ;UI.c: 72: firstboot = 1;
  5539  0045C8  0E00               	movlw	0
  5540  0045CA  6E76               	movwf	_firstboot+1,c
  5541  0045CC  0E01               	movlw	1
  5542  0045CE  6E75               	movwf	_firstboot,c
  5543  0045D0  0012               	return		;funcret
  5544  0045D2                     __end_of_initUI:
  5545                           	opt stack 0
  5546                           tblptru	equ	0xFF8
  5547                           tblptrh	equ	0xFF7
  5548                           tblptrl	equ	0xFF6
  5549                           tablat	equ	0xFF5
  5550                           prodh	equ	0xFF4
  5551                           prodl	equ	0xFF3
  5552                           intcon	equ	0xFF2
  5553                           intcon2	equ	0xFF1
  5554                           intcon3	equ	0xFF0
  5555                           postinc0	equ	0xFEE
  5556                           wreg	equ	0xFE8
  5557                           postdec1	equ	0xFE5
  5558                           fsr1l	equ	0xFE1
  5559                           indf2	equ	0xFDF
  5560                           postinc2	equ	0xFDE
  5561                           postdec2	equ	0xFDD
  5562                           fsr2h	equ	0xFDA
  5563                           fsr2l	equ	0xFD9
  5564                           status	equ	0xFD8
  5565                           
  5566 ;; *************** function _loadRTC *****************
  5567 ;; Defined at:
  5568 ;;		line 28 in file "RTC.c"
  5569 ;; Parameters:    Size  Location     Type
  5570 ;;		None
  5571 ;; Auto vars:     Size  Location     Type
  5572 ;;  i               2   22[BANK0 ] int 
  5573 ;; Return value:  Size  Location     Type
  5574 ;;                  1    wreg      void 
  5575 ;; Registers used:
  5576 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5577 ;; Tracked objects:
  5578 ;;		On entry : 0/0
  5579 ;;		On exit  : 0/0
  5580 ;;		Unchanged: 0/0
  5581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5583 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5584 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5585 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5586 ;;Total ram usage:        3 bytes
  5587 ;; Hardware stack levels used:    1
  5588 ;; Hardware stack levels required when called:    9
  5589 ;; This function calls:
  5590 ;;		_I2C_Master_Init
  5591 ;;		_I2C_Master_Start
  5592 ;;		_I2C_Master_Stop
  5593 ;;		_I2C_Master_Write
  5594 ;; This function is called by:
  5595 ;;		_initUI
  5596 ;; This function uses a non-reentrant model
  5597 ;;
  5598                           
  5599                           	psect	text17
  5600  0039AE                     __ptext17:
  5601                           	opt stack 0
  5602  0039AE                     _loadRTC:
  5603                           	opt stack 20
  5604                           
  5605                           ;RTC.c: 30: I2C_Master_Init(10000);
  5606                           
  5607                           ;incstack = 0
  5608  0039AE  0E10               	movlw	16
  5609  0039B0  0100               	movlb	0	; () banked
  5610  0039B2  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  5611  0039B4  0E27               	movlw	39
  5612  0039B6  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  5613  0039B8  0E00               	movlw	0
  5614  0039BA  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  5615  0039BC  0E00               	movlw	0
  5616  0039BE  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  5617  0039C0  EC6C  F01F         	call	_I2C_Master_Init	;wreg free
  5618                           
  5619                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  5620  0039C4  9EF2               	bcf	intcon,7,c	;volatile
  5621                           
  5622                           ;RTC.c: 34: I2C_Master_Start();
  5623  0039C6  EC4C  F024         	call	_I2C_Master_Start	;wreg free
  5624                           
  5625                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  5626  0039CA  0E00               	movlw	0
  5627  0039CC  0100               	movlb	0	; () banked
  5628  0039CE  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5629  0039D0  0ED0               	movlw	208
  5630  0039D2  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5631  0039D4  EC3A  F024         	call	_I2C_Master_Write	;wreg free
  5632                           
  5633                           ;RTC.c: 36: I2C_Master_Write(0x00);
  5634  0039D8  0E00               	movlw	0
  5635  0039DA  0100               	movlb	0	; () banked
  5636  0039DC  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5637  0039DE  0E00               	movlw	0
  5638  0039E0  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5639  0039E2  EC3A  F024         	call	_I2C_Master_Write	;wreg free
  5640                           
  5641                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  5642  0039E6  0E00               	movlw	0
  5643  0039E8  0100               	movlb	0	; () banked
  5644  0039EA  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  5645  0039EC  0E00               	movlw	0
  5646  0039EE  6F96               	movwf	loadRTC@i& (0+255),b
  5647  0039F0                     l6226:
  5648                           
  5649                           ; BSR set to: 0
  5650  0039F0  0100               	movlb	0	; () banked
  5651  0039F2  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  5652  0039F4  D008               	goto	l6230
  5653  0039F6  0100               	movlb	0	; () banked
  5654  0039F8  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  5655  0039FA  E11B               	bnz	l6236
  5656  0039FC  0E07               	movlw	7
  5657  0039FE  0100               	movlb	0	; () banked
  5658  003A00  5D96               	subwf	loadRTC@i& (0+255),w,b
  5659  003A02  B0D8               	btfsc	status,0,c
  5660  003A04  D016               	goto	l6236
  5661  003A06                     l6230:
  5662                           
  5663                           ; BSR set to: 0
  5664                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  5665  003A06  0E24               	movlw	low _time
  5666  003A08  0100               	movlb	0	; () banked
  5667  003A0A  2596               	addwf	loadRTC@i& (0+255),w,b
  5668  003A0C  6ED9               	movwf	fsr2l,c
  5669  003A0E  0E01               	movlw	high _time
  5670  003A10  0100               	movlb	0	; () banked
  5671  003A12  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  5672  003A14  6EDA               	movwf	fsr2h,c
  5673  003A16  50DF               	movf	indf2,w,c
  5674  003A18  0100               	movlb	0	; () banked
  5675  003A1A  6F95               	movwf	??_loadRTC& (0+255),b
  5676  003A1C  0100               	movlb	0	; () banked
  5677  003A1E  5195               	movf	??_loadRTC& (0+255),w,b
  5678  003A20  0100               	movlb	0	; () banked
  5679  003A22  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5680  003A24  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  5681  003A26  EC3A  F024         	call	_I2C_Master_Write	;wreg free
  5682  003A2A  0100               	movlb	0	; () banked
  5683  003A2C  4B96               	infsnz	loadRTC@i& (0+255),f,b
  5684  003A2E  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  5685  003A30  D7DF               	goto	l6226
  5686  003A32                     l6236:
  5687                           
  5688                           ; BSR set to: 0
  5689                           ;RTC.c: 39: }
  5690                           ;RTC.c: 40: I2C_Master_Stop();
  5691  003A32  EC48  F024         	call	_I2C_Master_Stop	;wreg free
  5692                           
  5693                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  5694  003A36  8EF2               	bsf	intcon,7,c	;volatile
  5695  003A38  0012               	return		;funcret
  5696  003A3A                     __end_of_loadRTC:
  5697                           	opt stack 0
  5698                           tblptru	equ	0xFF8
  5699                           tblptrh	equ	0xFF7
  5700                           tblptrl	equ	0xFF6
  5701                           tablat	equ	0xFF5
  5702                           prodh	equ	0xFF4
  5703                           prodl	equ	0xFF3
  5704                           intcon	equ	0xFF2
  5705                           intcon2	equ	0xFF1
  5706                           intcon3	equ	0xFF0
  5707                           postinc0	equ	0xFEE
  5708                           wreg	equ	0xFE8
  5709                           postdec1	equ	0xFE5
  5710                           fsr1l	equ	0xFE1
  5711                           indf2	equ	0xFDF
  5712                           postinc2	equ	0xFDE
  5713                           postdec2	equ	0xFDD
  5714                           fsr2h	equ	0xFDA
  5715                           fsr2l	equ	0xFD9
  5716                           status	equ	0xFD8
  5717                           
  5718 ;; *************** function _I2C_Master_Init *****************
  5719 ;; Defined at:
  5720 ;;		line 15 in file "I2C.c"
  5721 ;; Parameters:    Size  Location     Type
  5722 ;;  c               4   13[BANK0 ] const unsigned long 
  5723 ;; Auto vars:     Size  Location     Type
  5724 ;;		None
  5725 ;; Return value:  Size  Location     Type
  5726 ;;                  1    wreg      void 
  5727 ;; Registers used:
  5728 ;;		wreg, status,2, status,0, cstack
  5729 ;; Tracked objects:
  5730 ;;		On entry : 0/0
  5731 ;;		On exit  : 0/0
  5732 ;;		Unchanged: 0/0
  5733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5734 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5736 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5737 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5738 ;;Total ram usage:        8 bytes
  5739 ;; Hardware stack levels used:    1
  5740 ;; Hardware stack levels required when called:    8
  5741 ;; This function calls:
  5742 ;;		___lldiv
  5743 ;; This function is called by:
  5744 ;;		_main
  5745 ;;		_loadRTC
  5746 ;; This function uses a non-reentrant model
  5747 ;;
  5748                           
  5749                           	psect	text18
  5750  003ED8                     __ptext18:
  5751                           	opt stack 0
  5752  003ED8                     _I2C_Master_Init:
  5753                           	opt stack 20
  5754                           
  5755                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  5756                           
  5757                           ;incstack = 0
  5758  003ED8  0E00               	movlw	0
  5759  003EDA  6EC7               	movwf	4039,c	;volatile
  5760                           
  5761                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  5762  003EDC  0E28               	movlw	40
  5763  003EDE  6EC6               	movwf	4038,c	;volatile
  5764                           
  5765                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  5766  003EE0  0E00               	movlw	0
  5767  003EE2  6EC5               	movwf	4037,c	;volatile
  5768                           
  5769                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  5770  003EE4  0E00               	movlw	0
  5771  003EE6  0100               	movlb	0	; () banked
  5772  003EE8  6F80               	movwf	___lldiv@dividend& (0+255),b
  5773  003EEA  0E48               	movlw	72
  5774  003EEC  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  5775  003EEE  0EE8               	movlw	232
  5776  003EF0  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  5777  003EF2  0E01               	movlw	1
  5778  003EF4  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  5779  003EF6  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  5780  003EFA  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  5781  003EFE  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  5782  003F02  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  5783  003F06  0E02               	movlw	2
  5784  003F08                     u4505:
  5785  003F08  90D8               	bcf	status,0,c
  5786  003F0A  0100               	movlb	0	; () banked
  5787  003F0C  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  5788  003F0E  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  5789  003F10  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  5790  003F12  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  5791  003F14  2EE8               	decfsz	wreg,f,c
  5792  003F16  D7F8               	goto	u4505
  5793  003F18  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  5794  003F1C  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5795  003F20  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5796  003F24  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5797  003F28  ECD3  F01B         	call	___lldiv	;wreg free
  5798  003F2C  0100               	movlb	0	; () banked
  5799  003F2E  0580               	decf	?___lldiv& (0+255),w,b
  5800  003F30  6EC8               	movwf	4040,c	;volatile
  5801                           
  5802                           ; BSR set to: 0
  5803                           ;I2C.c: 22: TRISC3 = 1;
  5804  003F32  8694               	bsf	3988,3,c	;volatile
  5805                           
  5806                           ; BSR set to: 0
  5807                           ;I2C.c: 23: TRISC4 = 1;
  5808  003F34  8894               	bsf	3988,4,c	;volatile
  5809                           
  5810                           ; BSR set to: 0
  5811  003F36  0012               	return		;funcret
  5812  003F38                     __end_of_I2C_Master_Init:
  5813                           	opt stack 0
  5814                           tblptru	equ	0xFF8
  5815                           tblptrh	equ	0xFF7
  5816                           tblptrl	equ	0xFF6
  5817                           tablat	equ	0xFF5
  5818                           prodh	equ	0xFF4
  5819                           prodl	equ	0xFF3
  5820                           intcon	equ	0xFF2
  5821                           intcon2	equ	0xFF1
  5822                           intcon3	equ	0xFF0
  5823                           postinc0	equ	0xFEE
  5824                           wreg	equ	0xFE8
  5825                           postdec1	equ	0xFE5
  5826                           fsr1l	equ	0xFE1
  5827                           indf2	equ	0xFDF
  5828                           postinc2	equ	0xFDE
  5829                           postdec2	equ	0xFDD
  5830                           fsr2h	equ	0xFDA
  5831                           fsr2l	equ	0xFD9
  5832                           status	equ	0xFD8
  5833                           
  5834 ;; *************** function ___lldiv *****************
  5835 ;; Defined at:
  5836 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5837 ;; Parameters:    Size  Location     Type
  5838 ;;  dividend        4    0[BANK0 ] unsigned long 
  5839 ;;  divisor         4    4[BANK0 ] unsigned long 
  5840 ;; Auto vars:     Size  Location     Type
  5841 ;;  quotient        4    8[BANK0 ] unsigned long 
  5842 ;;  counter         1   12[BANK0 ] unsigned char 
  5843 ;; Return value:  Size  Location     Type
  5844 ;;                  4    0[BANK0 ] unsigned long 
  5845 ;; Registers used:
  5846 ;;		wreg, status,2, status,0
  5847 ;; Tracked objects:
  5848 ;;		On entry : 0/0
  5849 ;;		On exit  : 0/0
  5850 ;;		Unchanged: 0/0
  5851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5852 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5853 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5855 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5856 ;;Total ram usage:       13 bytes
  5857 ;; Hardware stack levels used:    1
  5858 ;; Hardware stack levels required when called:    7
  5859 ;; This function calls:
  5860 ;;		Nothing
  5861 ;; This function is called by:
  5862 ;;		_I2C_Master_Init
  5863 ;; This function uses a non-reentrant model
  5864 ;;
  5865                           
  5866                           	psect	text19
  5867  0037A6                     __ptext19:
  5868                           	opt stack 0
  5869  0037A6                     ___lldiv:
  5870                           	opt stack 20
  5871                           
  5872                           ; BSR set to: 0
  5873                           ;incstack = 0
  5874  0037A6  0E00               	movlw	0
  5875  0037A8  0100               	movlb	0	; () banked
  5876  0037AA  6F88               	movwf	___lldiv@quotient& (0+255),b
  5877  0037AC  0E00               	movlw	0
  5878  0037AE  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  5879  0037B0  0E00               	movlw	0
  5880  0037B2  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  5881  0037B4  0E00               	movlw	0
  5882  0037B6  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  5883                           
  5884                           ; BSR set to: 0
  5885  0037B8  0100               	movlb	0	; () banked
  5886  0037BA  5184               	movf	___lldiv@divisor& (0+255),w,b
  5887  0037BC  0100               	movlb	0	; () banked
  5888  0037BE  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  5889  0037C0  0100               	movlb	0	; () banked
  5890  0037C2  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  5891  0037C4  0100               	movlb	0	; () banked
  5892  0037C6  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  5893  0037C8  B4D8               	btfsc	status,2,c
  5894  0037CA  D042               	goto	l1670
  5895                           
  5896                           ; BSR set to: 0
  5897  0037CC  0E01               	movlw	1
  5898  0037CE  0100               	movlb	0	; () banked
  5899  0037D0  6F8C               	movwf	___lldiv@counter& (0+255),b
  5900  0037D2  D008               	goto	l5662
  5901  0037D4                     l5660:
  5902                           
  5903                           ; BSR set to: 0
  5904  0037D4  0100               	movlb	0	; () banked
  5905  0037D6  90D8               	bcf	status,0,c
  5906  0037D8  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  5907  0037DA  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  5908  0037DC  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  5909  0037DE  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  5910  0037E0  0100               	movlb	0	; () banked
  5911  0037E2  2B8C               	incf	___lldiv@counter& (0+255),f,b
  5912  0037E4                     l5662:
  5913                           
  5914                           ; BSR set to: 0
  5915  0037E4  0100               	movlb	0	; () banked
  5916  0037E6  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  5917  0037E8  D7F5               	goto	l5660
  5918  0037EA                     l5664:
  5919                           
  5920                           ; BSR set to: 0
  5921  0037EA  0100               	movlb	0	; () banked
  5922  0037EC  90D8               	bcf	status,0,c
  5923  0037EE  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  5924  0037F0  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  5925  0037F2  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  5926  0037F4  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  5927                           
  5928                           ; BSR set to: 0
  5929  0037F6  0100               	movlb	0	; () banked
  5930  0037F8  5184               	movf	___lldiv@divisor& (0+255),w,b
  5931  0037FA  0100               	movlb	0	; () banked
  5932  0037FC  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  5933  0037FE  0100               	movlb	0	; () banked
  5934  003800  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5935  003802  0100               	movlb	0	; () banked
  5936  003804  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  5937  003806  0100               	movlb	0	; () banked
  5938  003808  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5939  00380A  0100               	movlb	0	; () banked
  5940  00380C  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  5941  00380E  0100               	movlb	0	; () banked
  5942  003810  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5943  003812  0100               	movlb	0	; () banked
  5944  003814  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  5945  003816  A0D8               	btfss	status,0,c
  5946  003818  D012               	goto	l5672
  5947                           
  5948                           ; BSR set to: 0
  5949  00381A  0100               	movlb	0	; () banked
  5950  00381C  5184               	movf	___lldiv@divisor& (0+255),w,b
  5951  00381E  0100               	movlb	0	; () banked
  5952  003820  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  5953  003822  0100               	movlb	0	; () banked
  5954  003824  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5955  003826  0100               	movlb	0	; () banked
  5956  003828  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  5957  00382A  0100               	movlb	0	; () banked
  5958  00382C  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5959  00382E  0100               	movlb	0	; () banked
  5960  003830  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  5961  003832  0100               	movlb	0	; () banked
  5962  003834  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5963  003836  0100               	movlb	0	; () banked
  5964  003838  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  5965                           
  5966                           ; BSR set to: 0
  5967  00383A  0100               	movlb	0	; () banked
  5968  00383C  8188               	bsf	___lldiv@quotient& (0+255),0,b
  5969  00383E                     l5672:
  5970                           
  5971                           ; BSR set to: 0
  5972  00383E  0100               	movlb	0	; () banked
  5973  003840  90D8               	bcf	status,0,c
  5974  003842  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  5975  003844  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  5976  003846  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  5977  003848  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  5978                           
  5979                           ; BSR set to: 0
  5980  00384A  0100               	movlb	0	; () banked
  5981  00384C  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  5982  00384E  D7CD               	goto	l5664
  5983  003850                     l1670:
  5984                           
  5985                           ; BSR set to: 0
  5986  003850  C088  F080         	movff	___lldiv@quotient,?___lldiv
  5987  003854  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  5988  003858  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  5989  00385C  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  5990                           
  5991                           ; BSR set to: 0
  5992  003860  0012               	return		;funcret
  5993  003862                     __end_of___lldiv:
  5994                           	opt stack 0
  5995                           tblptru	equ	0xFF8
  5996                           tblptrh	equ	0xFF7
  5997                           tblptrl	equ	0xFF6
  5998                           tablat	equ	0xFF5
  5999                           prodh	equ	0xFF4
  6000                           prodl	equ	0xFF3
  6001                           intcon	equ	0xFF2
  6002                           intcon2	equ	0xFF1
  6003                           intcon3	equ	0xFF0
  6004                           postinc0	equ	0xFEE
  6005                           wreg	equ	0xFE8
  6006                           postdec1	equ	0xFE5
  6007                           fsr1l	equ	0xFE1
  6008                           indf2	equ	0xFDF
  6009                           postinc2	equ	0xFDE
  6010                           postdec2	equ	0xFDD
  6011                           fsr2h	equ	0xFDA
  6012                           fsr2l	equ	0xFD9
  6013                           status	equ	0xFD8
  6014                           
  6015 ;; *************** function _change_state_to_menu_start *****************
  6016 ;; Defined at:
  6017 ;;		line 474 in file "UI.c"
  6018 ;; Parameters:    Size  Location     Type
  6019 ;;		None
  6020 ;; Auto vars:     Size  Location     Type
  6021 ;;		None
  6022 ;; Return value:  Size  Location     Type
  6023 ;;                  1    wreg      void 
  6024 ;; Registers used:
  6025 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6026 ;; Tracked objects:
  6027 ;;		On entry : 0/0
  6028 ;;		On exit  : 0/0
  6029 ;;		Unchanged: 0/0
  6030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6034 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6035 ;;Total ram usage:        0 bytes
  6036 ;; Hardware stack levels used:    1
  6037 ;; Hardware stack levels required when called:   11
  6038 ;; This function calls:
  6039 ;;		_lcdInst
  6040 ;;		_printRTC
  6041 ;;		_printf
  6042 ;; This function is called by:
  6043 ;;		_initUI
  6044 ;; This function uses a non-reentrant model
  6045 ;;
  6046                           
  6047                           	psect	text20
  6048  00462E                     __ptext20:
  6049                           	opt stack 0
  6050  00462E                     _change_state_to_menu_start:
  6051                           	opt stack 18
  6052                           
  6053                           ;UI.c: 475: cur_state = 0;
  6054                           
  6055                           ; BSR set to: 0
  6056                           ;incstack = 0
  6057  00462E  0E00               	movlw	0
  6058  004630  0100               	movlb	0	; () banked
  6059  004632  6FE1               	movwf	(_cur_state+1)& (0+255),b
  6060  004634  0E00               	movlw	0
  6061  004636  6FE0               	movwf	_cur_state& (0+255),b
  6062                           
  6063                           ; BSR set to: 0
  6064                           ;UI.c: 477: lcdInst(0b10000000);;
  6065  004638  0E80               	movlw	128
  6066  00463A  EC26  F024         	call	_lcdInst
  6067                           
  6068                           ;UI.c: 478: printRTC();
  6069  00463E  ECD0  F00F         	call	_printRTC	;wreg free
  6070                           
  6071                           ;UI.c: 479: lcdInst(0b11000000);;
  6072  004642  0EC0               	movlw	192
  6073  004644  EC26  F024         	call	_lcdInst
  6074                           
  6075                           ;UI.c: 480: printf("PUSH TO CONTINUE");
  6076  004648  0EF7               	movlw	low STR_30
  6077  00464A  0100               	movlb	0	; () banked
  6078  00464C  6F8E               	movwf	printf@f& (0+255),b
  6079  00464E  0EFD               	movlw	high STR_30
  6080  004650  0100               	movlb	0	; () banked
  6081  004652  6F8F               	movwf	(printf@f+1)& (0+255),b
  6082  004654  ECB8  F008         	call	_printf	;wreg free
  6083  004658  0012               	return		;funcret
  6084  00465A                     __end_of_change_state_to_menu_start:
  6085                           	opt stack 0
  6086                           tblptru	equ	0xFF8
  6087                           tblptrh	equ	0xFF7
  6088                           tblptrl	equ	0xFF6
  6089                           tablat	equ	0xFF5
  6090                           prodh	equ	0xFF4
  6091                           prodl	equ	0xFF3
  6092                           intcon	equ	0xFF2
  6093                           intcon2	equ	0xFF1
  6094                           intcon3	equ	0xFF0
  6095                           postinc0	equ	0xFEE
  6096                           wreg	equ	0xFE8
  6097                           postdec1	equ	0xFE5
  6098                           fsr1l	equ	0xFE1
  6099                           indf2	equ	0xFDF
  6100                           postinc2	equ	0xFDE
  6101                           postdec2	equ	0xFDD
  6102                           fsr2h	equ	0xFDA
  6103                           fsr2l	equ	0xFD9
  6104                           status	equ	0xFD8
  6105                           
  6106 ;; *************** function _initTime *****************
  6107 ;; Defined at:
  6108 ;;		line 17 in file "RTC.c"
  6109 ;; Parameters:    Size  Location     Type
  6110 ;;  s               1    wreg     unsigned char 
  6111 ;;  m               1    0[BANK0 ] unsigned char 
  6112 ;;  h               1    1[BANK0 ] unsigned char 
  6113 ;;  w               1    2[BANK0 ] unsigned char 
  6114 ;;  DD              1    3[BANK0 ] unsigned char 
  6115 ;;  MM              1    4[BANK0 ] unsigned char 
  6116 ;;  YY              1    5[BANK0 ] unsigned char 
  6117 ;; Auto vars:     Size  Location     Type
  6118 ;;  s               1    6[BANK0 ] unsigned char 
  6119 ;; Return value:  Size  Location     Type
  6120 ;;                  1    wreg      void 
  6121 ;; Registers used:
  6122 ;;		wreg
  6123 ;; Tracked objects:
  6124 ;;		On entry : 0/0
  6125 ;;		On exit  : 0/0
  6126 ;;		Unchanged: 0/0
  6127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6128 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6129 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6131 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6132 ;;Total ram usage:        7 bytes
  6133 ;; Hardware stack levels used:    1
  6134 ;; Hardware stack levels required when called:    7
  6135 ;; This function calls:
  6136 ;;		Nothing
  6137 ;; This function is called by:
  6138 ;;		_main
  6139 ;; This function uses a non-reentrant model
  6140 ;;
  6141                           
  6142                           	psect	text21
  6143  004792                     __ptext21:
  6144                           	opt stack 0
  6145  004792                     _initTime:
  6146                           	opt stack 23
  6147                           
  6148                           ;incstack = 0
  6149                           ;initTime@s stored from wreg
  6150  004792  0100               	movlb	0	; () banked
  6151  004794  6F86               	movwf	initTime@s& (0+255),b
  6152                           
  6153                           ;RTC.c: 19: time[0] = s;
  6154  004796  C086  F124         	movff	initTime@s,_time
  6155                           
  6156                           ;RTC.c: 20: time[1] = m;
  6157  00479A  C080  F125         	movff	initTime@m,_time+1
  6158                           
  6159                           ;RTC.c: 21: time[2] = h;
  6160  00479E  C081  F126         	movff	initTime@h,_time+2
  6161                           
  6162                           ;RTC.c: 22: time[3] = w;
  6163  0047A2  C082  F127         	movff	initTime@w,_time+3
  6164                           
  6165                           ;RTC.c: 23: time[4] = DD;
  6166  0047A6  C083  F128         	movff	initTime@DD,_time+4
  6167                           
  6168                           ;RTC.c: 24: time[5] = MM;
  6169  0047AA  C084  F129         	movff	initTime@MM,_time+5
  6170                           
  6171                           ;RTC.c: 25: time[6] = YY;
  6172  0047AE  C085  F12A         	movff	initTime@YY,_time+6
  6173  0047B2  0012               	return		;funcret
  6174  0047B4                     __end_of_initTime:
  6175                           	opt stack 0
  6176                           tblptru	equ	0xFF8
  6177                           tblptrh	equ	0xFF7
  6178                           tblptrl	equ	0xFF6
  6179                           tablat	equ	0xFF5
  6180                           prodh	equ	0xFF4
  6181                           prodl	equ	0xFF3
  6182                           intcon	equ	0xFF2
  6183                           intcon2	equ	0xFF1
  6184                           intcon3	equ	0xFF0
  6185                           postinc0	equ	0xFEE
  6186                           wreg	equ	0xFE8
  6187                           postdec1	equ	0xFE5
  6188                           fsr1l	equ	0xFE1
  6189                           indf2	equ	0xFDF
  6190                           postinc2	equ	0xFDE
  6191                           postdec2	equ	0xFDD
  6192                           fsr2h	equ	0xFDA
  6193                           fsr2l	equ	0xFD9
  6194                           status	equ	0xFD8
  6195                           
  6196 ;; *************** function _initLCD *****************
  6197 ;; Defined at:
  6198 ;;		line 48 in file "lcd.c"
  6199 ;; Parameters:    Size  Location     Type
  6200 ;;		None
  6201 ;; Auto vars:     Size  Location     Type
  6202 ;;		None
  6203 ;; Return value:  Size  Location     Type
  6204 ;;                  1    wreg      void 
  6205 ;; Registers used:
  6206 ;;		wreg, status,2, status,0, cstack
  6207 ;; Tracked objects:
  6208 ;;		On entry : 0/0
  6209 ;;		On exit  : 0/0
  6210 ;;		Unchanged: 0/0
  6211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6213 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6214 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6215 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6216 ;;Total ram usage:        1 bytes
  6217 ;; Hardware stack levels used:    1
  6218 ;; Hardware stack levels required when called:    9
  6219 ;; This function calls:
  6220 ;;		_lcdInst
  6221 ;; This function is called by:
  6222 ;;		_main
  6223 ;; This function uses a non-reentrant model
  6224 ;;
  6225                           
  6226                           	psect	text22
  6227  00422C                     __ptext22:
  6228                           	opt stack 0
  6229  00422C                     _initLCD:
  6230                           	opt stack 21
  6231                           
  6232                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  6233                           
  6234                           ;incstack = 0
  6235  00422C  0E9C               	movlw	156
  6236  00422E  0100               	movlb	0	; () banked
  6237  004230  6F83               	movwf	??_initLCD& (0+255),b
  6238  004232  0ED7               	movlw	215
  6239  004234                     u7307:
  6240  004234  2EE8               	decfsz	wreg,f,c
  6241  004236  D7FE               	bra	u7307
  6242  004238  2F83               	decfsz	??_initLCD& (0+255),f,b
  6243  00423A  D7FC               	bra	u7307
  6244                           
  6245                           ;lcd.c: 50: lcdInst(0b00110011);
  6246  00423C  0E33               	movlw	51
  6247  00423E  EC26  F024         	call	_lcdInst
  6248                           
  6249                           ;lcd.c: 51: lcdInst(0b00110010);
  6250  004242  0E32               	movlw	50
  6251  004244  EC26  F024         	call	_lcdInst
  6252                           
  6253                           ;lcd.c: 53: lcdInst(0b00101000);
  6254  004248  0E28               	movlw	40
  6255  00424A  EC26  F024         	call	_lcdInst
  6256                           
  6257                           ;lcd.c: 54: lcdInst(0b00001100);
  6258  00424E  0E0C               	movlw	12
  6259  004250  EC26  F024         	call	_lcdInst
  6260                           
  6261                           ;lcd.c: 55: lcdInst(0b00000110);
  6262  004254  0E06               	movlw	6
  6263  004256  EC26  F024         	call	_lcdInst
  6264                           
  6265                           ;lcd.c: 56: lcdInst(0b00000001);
  6266  00425A  0E01               	movlw	1
  6267  00425C  EC26  F024         	call	_lcdInst
  6268                           
  6269                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  6270  004260  0E9C               	movlw	156
  6271  004262  0100               	movlb	0	; () banked
  6272  004264  6F83               	movwf	??_initLCD& (0+255),b
  6273  004266  0ED7               	movlw	215
  6274  004268                     u7317:
  6275  004268  2EE8               	decfsz	wreg,f,c
  6276  00426A  D7FE               	bra	u7317
  6277  00426C  2F83               	decfsz	??_initLCD& (0+255),f,b
  6278  00426E  D7FC               	bra	u7317
  6279  004270  0012               	return		;funcret
  6280  004272                     __end_of_initLCD:
  6281                           	opt stack 0
  6282                           tblptru	equ	0xFF8
  6283                           tblptrh	equ	0xFF7
  6284                           tblptrl	equ	0xFF6
  6285                           tablat	equ	0xFF5
  6286                           prodh	equ	0xFF4
  6287                           prodl	equ	0xFF3
  6288                           intcon	equ	0xFF2
  6289                           intcon2	equ	0xFF1
  6290                           intcon3	equ	0xFF0
  6291                           postinc0	equ	0xFEE
  6292                           wreg	equ	0xFE8
  6293                           postdec1	equ	0xFE5
  6294                           fsr1l	equ	0xFE1
  6295                           indf2	equ	0xFDF
  6296                           postinc2	equ	0xFDE
  6297                           postdec2	equ	0xFDD
  6298                           fsr2h	equ	0xFDA
  6299                           fsr2l	equ	0xFD9
  6300                           status	equ	0xFD8
  6301                           
  6302 ;; *************** function _UI *****************
  6303 ;; Defined at:
  6304 ;;		line 76 in file "UI.c"
  6305 ;; Parameters:    Size  Location     Type
  6306 ;;		None
  6307 ;; Auto vars:     Size  Location     Type
  6308 ;;  i               1   73[BANK0 ] unsigned char 
  6309 ;;  i               1   85[BANK0 ] unsigned char 
  6310 ;;  i               1   84[BANK0 ] unsigned char 
  6311 ;;  i               1   83[BANK0 ] unsigned char 
  6312 ;;  i               1   82[BANK0 ] unsigned char 
  6313 ;;  i               1   81[BANK0 ] unsigned char 
  6314 ;;  i               1   80[BANK0 ] unsigned char 
  6315 ;;  i               1   79[BANK0 ] unsigned char 
  6316 ;;  i               1   78[BANK0 ] unsigned char 
  6317 ;;  i               1   77[BANK0 ] unsigned char 
  6318 ;;  i               1   76[BANK0 ] unsigned char 
  6319 ;;  i               1   75[BANK0 ] unsigned char 
  6320 ;;  i               1   74[BANK0 ] unsigned char 
  6321 ;;  month           4   86[BANK0 ] unsigned char [4]
  6322 ;;  i               1   72[BANK0 ] unsigned char 
  6323 ;; Return value:  Size  Location     Type
  6324 ;;                  1    wreg      void 
  6325 ;; Registers used:
  6326 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6327 ;; Tracked objects:
  6328 ;;		On entry : 0/0
  6329 ;;		On exit  : 0/0
  6330 ;;		Unchanged: 0/0
  6331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6333 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6334 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6335 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6336 ;;Total ram usage:       22 bytes
  6337 ;; Hardware stack levels used:    1
  6338 ;; Hardware stack levels required when called:   11
  6339 ;; This function calls:
  6340 ;;		___awdiv
  6341 ;;		___awmod
  6342 ;;		_change_state_to_menu_12
  6343 ;;		_change_state_to_menu_22
  6344 ;;		_lcdInst
  6345 ;;		_printRTC
  6346 ;;		_printf
  6347 ;;		_strcpy
  6348 ;; This function is called by:
  6349 ;;		_main
  6350 ;; This function uses a non-reentrant model
  6351 ;;
  6352                           
  6353                           	psect	text23
  6354  0008CA                     __ptext23:
  6355                           	opt stack 0
  6356  0008CA                     _UI:
  6357                           	opt stack 19
  6358                           
  6359                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  6360                           
  6361                           ;incstack = 0
  6362  0008CA  0E02               	movlw	2
  6363  0008CC  0100               	movlb	0	; () banked
  6364  0008CE  19FC               	xorwf	_machine_state& (0+255),w,b
  6365  0008D0  A4D8               	btfss	status,2,c
  6366  0008D2  D075               	goto	l7442
  6367                           
  6368                           ; BSR set to: 0
  6369                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6370  0008D4  0E01               	movlw	1
  6371  0008D6  EC26  F024         	call	_lcdInst
  6372  0008DA  0E68               	movlw	104
  6373  0008DC  0100               	movlb	0	; () banked
  6374  0008DE  6FC4               	movwf	??_UI& (0+255),b
  6375  0008E0  0EE4               	movlw	228
  6376  0008E2                     u7327:
  6377  0008E2  2EE8               	decfsz	wreg,f,c
  6378  0008E4  D7FE               	bra	u7327
  6379  0008E6  2FC4               	decfsz	??_UI& (0+255),f,b
  6380  0008E8  D7FC               	bra	u7327
  6381  0008EA  F000               	nop	
  6382                           
  6383                           ;UI.c: 79: lcdInst(0b10000000);;
  6384  0008EC  0E80               	movlw	128
  6385  0008EE  EC26  F024         	call	_lcdInst
  6386                           
  6387                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  6388  0008F2  0EA3               	movlw	low STR_1
  6389  0008F4  0100               	movlb	0	; () banked
  6390  0008F6  6F8E               	movwf	printf@f& (0+255),b
  6391  0008F8  0EFB               	movlw	high STR_1
  6392  0008FA  0100               	movlb	0	; () banked
  6393  0008FC  6F8F               	movwf	(printf@f+1)& (0+255),b
  6394  0008FE  0E01               	movlw	1
  6395  000900  0100               	movlb	0	; () banked
  6396  000902  25FD               	addwf	_sel& (0+255),w,b
  6397  000904  0100               	movlb	0	; () banked
  6398  000906  6F90               	movwf	(?_printf+2)& (0+255),b
  6399  000908  0100               	movlb	0	; () banked
  6400  00090A  6B91               	clrf	(?_printf+3)& (0+255),b
  6401  00090C  0E00               	movlw	0
  6402  00090E  2391               	addwfc	(?_printf+3)& (0+255),f,b
  6403  000910  ECB8  F008         	call	_printf	;wreg free
  6404                           
  6405                           ;UI.c: 81: lcdInst(0b11000000);;
  6406  000914  0EC0               	movlw	192
  6407  000916  EC26  F024         	call	_lcdInst
  6408                           
  6409                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  6410  00091A  0E0E               	movlw	14
  6411  00091C  0100               	movlb	0	; () banked
  6412  00091E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6413  000920  0E10               	movlw	16
  6414  000922  6F82               	movwf	___awmod@divisor& (0+255),b
  6415  000924  C0F8  F080         	movff	_total_time,___awmod@dividend
  6416  000928  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  6417  00092C  EC86  F01C         	call	___awmod	;wreg free
  6418  000930  C080  F0C6         	movff	?___awmod,_UI$2304
  6419  000934  C081  F0C7         	movff	?___awmod+1,_UI$2304+1
  6420                           
  6421                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  6422  000938  0E27               	movlw	low STR_2
  6423  00093A  0100               	movlb	0	; () banked
  6424  00093C  6F8E               	movwf	printf@f& (0+255),b
  6425  00093E  0EFF               	movlw	high STR_2
  6426  000940  0100               	movlb	0	; () banked
  6427  000942  6F8F               	movwf	(printf@f+1)& (0+255),b
  6428  000944  0E0E               	movlw	14
  6429  000946  0100               	movlb	0	; () banked
  6430  000948  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6431  00094A  0E10               	movlw	16
  6432  00094C  6F82               	movwf	___awmod@divisor& (0+255),b
  6433  00094E  C0F8  F080         	movff	_total_time,___awmod@dividend
  6434  000952  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  6435  000956  EC86  F01C         	call	___awmod	;wreg free
  6436  00095A  C080  F086         	movff	?___awmod,___awdiv@dividend
  6437  00095E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  6438  000962  0E00               	movlw	0
  6439  000964  0100               	movlb	0	; () banked
  6440  000966  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6441  000968  0E3C               	movlw	60
  6442  00096A  6F88               	movwf	___awdiv@divisor& (0+255),b
  6443  00096C  EC74  F01B         	call	___awdiv	;wreg free
  6444  000970  C086  F090         	movff	?___awdiv,?_printf+2
  6445  000974  C087  F091         	movff	?___awdiv+1,?_printf+3
  6446  000978  C0C6  F080         	movff	_UI$2304,___awmod@dividend
  6447  00097C  C0C7  F081         	movff	_UI$2304+1,___awmod@dividend+1
  6448  000980  0E00               	movlw	0
  6449  000982  0100               	movlb	0	; () banked
  6450  000984  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6451  000986  0E3C               	movlw	60
  6452  000988  6F82               	movwf	___awmod@divisor& (0+255),b
  6453  00098A  EC86  F01C         	call	___awmod	;wreg free
  6454  00098E  C080  F092         	movff	?___awmod,?_printf+4
  6455  000992  C081  F093         	movff	?___awmod+1,?_printf+5
  6456  000996  ECB8  F008         	call	_printf	;wreg free
  6457                           
  6458                           ;UI.c: 83: machine_state = UI_state;
  6459  00099A  0E00               	movlw	0
  6460  00099C  0100               	movlb	0	; () banked
  6461  00099E  6FFC               	movwf	_machine_state& (0+255),b
  6462  0009A0                     l180:
  6463  0009A0  A281               	btfss	3969,1,c	;volatile
  6464  0009A2  D7FE               	goto	l180
  6465                           
  6466                           ;UI.c: 86: }
  6467                           ;UI.c: 87: if(cur_state==12){
  6468  0009A4  0E0C               	movlw	12
  6469  0009A6  0100               	movlb	0	; () banked
  6470  0009A8  19E0               	xorwf	_cur_state& (0+255),w,b
  6471  0009AA  0100               	movlb	0	; () banked
  6472  0009AC  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
  6473  0009AE  A4D8               	btfss	status,2,c
  6474  0009B0  D003               	goto	l7440
  6475                           
  6476                           ; BSR set to: 0
  6477                           ;UI.c: 88: change_state_to_menu_12();
  6478  0009B2  EC76  F021         	call	_change_state_to_menu_12	;wreg free
  6479                           
  6480                           ;UI.c: 89: }
  6481  0009B6  D3D5               	goto	l7762
  6482  0009B8                     l7440:
  6483                           
  6484                           ;UI.c: 90: else{
  6485                           ;UI.c: 91: change_state_to_menu_22();
  6486  0009B8  EC5A  F021         	call	_change_state_to_menu_22	;wreg free
  6487                           
  6488                           ;UI.c: 92: }
  6489                           ;UI.c: 93: }
  6490  0009BC  D3D2               	goto	l7762
  6491  0009BE                     l7442:
  6492                           
  6493                           ;UI.c: 94: else if(cur_state == 0){
  6494  0009BE  0100               	movlb	0	; () banked
  6495  0009C0  51E0               	movf	_cur_state& (0+255),w,b
  6496  0009C2  0100               	movlb	0	; () banked
  6497  0009C4  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
  6498  0009C6  A4D8               	btfss	status,2,c
  6499  0009C8  D3CC               	goto	l7762
  6500                           
  6501                           ; BSR set to: 0
  6502                           ;UI.c: 95: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  6503  0009CA  0E00               	movlw	0
  6504  0009CC  0100               	movlb	0	; () banked
  6505  0009CE  6FC8               	movwf	UI@i& (0+255),b
  6506  0009D0                     l7446:
  6507                           
  6508                           ; BSR set to: 0
  6509  0009D0  0E63               	movlw	99
  6510  0009D2  0100               	movlb	0	; () banked
  6511  0009D4  65C8               	cpfsgt	UI@i& (0+255),b
  6512  0009D6  D001               	goto	l7450
  6513  0009D8  D00C               	goto	l7454
  6514  0009DA                     l7450:
  6515                           
  6516                           ; BSR set to: 0
  6517  0009DA  0E68               	movlw	104
  6518  0009DC  0100               	movlb	0	; () banked
  6519  0009DE  6FC4               	movwf	??_UI& (0+255),b
  6520  0009E0  0EE4               	movlw	228
  6521  0009E2                     u7337:
  6522  0009E2  2EE8               	decfsz	wreg,f,c
  6523  0009E4  D7FE               	bra	u7337
  6524  0009E6  2FC4               	decfsz	??_UI& (0+255),f,b
  6525  0009E8  D7FC               	bra	u7337
  6526  0009EA  F000               	nop	
  6527  0009EC  0100               	movlb	0	; () banked
  6528  0009EE  2BC8               	incf	UI@i& (0+255),f,b
  6529  0009F0  D7EF               	goto	l7446
  6530  0009F2                     l7454:
  6531                           
  6532                           ; BSR set to: 0
  6533                           ;UI.c: 96: if(cur_state == 0){
  6534  0009F2  0100               	movlb	0	; () banked
  6535  0009F4  51E0               	movf	_cur_state& (0+255),w,b
  6536  0009F6  0100               	movlb	0	; () banked
  6537  0009F8  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
  6538  0009FA  A4D8               	btfss	status,2,c
  6539  0009FC  D3B2               	goto	l7762
  6540                           
  6541                           ; BSR set to: 0
  6542                           ;UI.c: 97: printRTC();
  6543  0009FE  ECD0  F00F         	call	_printRTC	;wreg free
  6544                           
  6545                           ;UI.c: 98: }
  6546                           ;UI.c: 99: }
  6547                           ;UI.c: 100: while(logstate){
  6548  000A02  D3AF               	goto	l7762
  6549  000A04                     l7458:
  6550                           
  6551                           ;UI.c: 102: if(!log_completion){
  6552  000A04  0100               	movlb	0	; () banked
  6553  000A06  51E8               	movf	_log_completion& (0+255),w,b
  6554  000A08  0100               	movlb	0	; () banked
  6555  000A0A  11E9               	iorwf	(_log_completion+1)& (0+255),w,b
  6556  000A0C  A4D8               	btfss	status,2,c
  6557  000A0E  D041               	goto	l7488
  6558                           
  6559                           ; BSR set to: 0
  6560                           ;UI.c: 103: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6561  000A10  0E01               	movlw	1
  6562  000A12  EC26  F024         	call	_lcdInst
  6563  000A16  0E68               	movlw	104
  6564  000A18  0100               	movlb	0	; () banked
  6565  000A1A  6FC4               	movwf	??_UI& (0+255),b
  6566  000A1C  0EE4               	movlw	228
  6567  000A1E                     u7347:
  6568  000A1E  2EE8               	decfsz	wreg,f,c
  6569  000A20  D7FE               	bra	u7347
  6570  000A22  2FC4               	decfsz	??_UI& (0+255),f,b
  6571  000A24  D7FC               	bra	u7347
  6572  000A26  F000               	nop	
  6573                           
  6574                           ;UI.c: 104: lcdInst(0b10000000);;
  6575  000A28  0E80               	movlw	128
  6576  000A2A  EC26  F024         	call	_lcdInst
  6577                           
  6578                           ;UI.c: 105: printf("-- LOG %2d HERE--", log);
  6579  000A2E  0E91               	movlw	low STR_3
  6580  000A30  0100               	movlb	0	; () banked
  6581  000A32  6F8E               	movwf	printf@f& (0+255),b
  6582  000A34  0EFB               	movlw	high STR_3
  6583  000A36  0100               	movlb	0	; () banked
  6584  000A38  6F8F               	movwf	(printf@f+1)& (0+255),b
  6585  000A3A  C0E6  F090         	movff	_log,?_printf+2
  6586  000A3E  C0E7  F091         	movff	_log+1,?_printf+3
  6587  000A42  ECB8  F008         	call	_printf	;wreg free
  6588                           
  6589                           ;UI.c: 106: lcdInst(0b11000000);;
  6590  000A46  0EC0               	movlw	192
  6591  000A48  EC26  F024         	call	_lcdInst
  6592                           
  6593                           ;UI.c: 107: printf("DIDN'T COMPLETE");
  6594  000A4C  0E4A               	movlw	low STR_4
  6595  000A4E  0100               	movlb	0	; () banked
  6596  000A50  6F8E               	movwf	printf@f& (0+255),b
  6597  000A52  0EFE               	movlw	high STR_4
  6598  000A54  0100               	movlb	0	; () banked
  6599  000A56  6F8F               	movwf	(printf@f+1)& (0+255),b
  6600  000A58  ECB8  F008         	call	_printf	;wreg free
  6601  000A5C                     l7472:
  6602  000A5C  0E00               	movlw	0
  6603  000A5E  0100               	movlb	0	; () banked
  6604  000A60  6FC9               	movwf	UI@i_409& (0+255),b
  6605  000A62                     l7474:
  6606                           
  6607                           ; BSR set to: 0
  6608  000A62  0E63               	movlw	99
  6609  000A64  0100               	movlb	0	; () banked
  6610  000A66  65C9               	cpfsgt	UI@i_409& (0+255),b
  6611  000A68  D001               	goto	l7478
  6612  000A6A  D00C               	goto	l7482
  6613  000A6C                     l7478:
  6614                           
  6615                           ; BSR set to: 0
  6616  000A6C  0E68               	movlw	104
  6617  000A6E  0100               	movlb	0	; () banked
  6618  000A70  6FC4               	movwf	??_UI& (0+255),b
  6619  000A72  0EE4               	movlw	228
  6620  000A74                     u7357:
  6621  000A74  2EE8               	decfsz	wreg,f,c
  6622  000A76  D7FE               	bra	u7357
  6623  000A78  2FC4               	decfsz	??_UI& (0+255),f,b
  6624  000A7A  D7FC               	bra	u7357
  6625  000A7C  F000               	nop	
  6626  000A7E  0100               	movlb	0	; () banked
  6627  000A80  2BC9               	incf	UI@i_409& (0+255),f,b
  6628  000A82  D7EF               	goto	l7474
  6629  000A84                     l7482:
  6630                           
  6631                           ; BSR set to: 0
  6632  000A84  0100               	movlb	0	; () banked
  6633  000A86  51F6               	movf	_logstate& (0+255),w,b
  6634  000A88  0100               	movlb	0	; () banked
  6635  000A8A  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6636  000A8C  B4D8               	btfsc	status,2,c
  6637  000A8E  0012               	return	
  6638  000A90  D7E5               	goto	l7472
  6639  000A92                     l7488:
  6640                           
  6641                           ; BSR set to: 0
  6642                           ;UI.c: 111: else{
  6643                           ;UI.c: 112: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6644  000A92  0E01               	movlw	1
  6645  000A94  EC26  F024         	call	_lcdInst
  6646  000A98  0E68               	movlw	104
  6647  000A9A  0100               	movlb	0	; () banked
  6648  000A9C  6FC4               	movwf	??_UI& (0+255),b
  6649  000A9E  0EE4               	movlw	228
  6650  000AA0                     u7367:
  6651  000AA0  2EE8               	decfsz	wreg,f,c
  6652  000AA2  D7FE               	bra	u7367
  6653  000AA4  2FC4               	decfsz	??_UI& (0+255),f,b
  6654  000AA6  D7FC               	bra	u7367
  6655  000AA8  F000               	nop	
  6656                           
  6657                           ;UI.c: 113: lcdInst(0b10000000);;
  6658  000AAA  0E80               	movlw	128
  6659  000AAC  EC26  F024         	call	_lcdInst
  6660                           
  6661                           ;UI.c: 114: printf("-- LOG %2d HERE--", log);
  6662  000AB0  0E91               	movlw	low STR_3
  6663  000AB2  0100               	movlb	0	; () banked
  6664  000AB4  6F8E               	movwf	printf@f& (0+255),b
  6665  000AB6  0EFB               	movlw	high STR_3
  6666  000AB8  0100               	movlb	0	; () banked
  6667  000ABA  6F8F               	movwf	(printf@f+1)& (0+255),b
  6668  000ABC  C0E6  F090         	movff	_log,?_printf+2
  6669  000AC0  C0E7  F091         	movff	_log+1,?_printf+3
  6670  000AC4  ECB8  F008         	call	_printf	;wreg free
  6671                           
  6672                           ;UI.c: 115: lcdInst(0b11000000);;
  6673  000AC8  0EC0               	movlw	192
  6674  000ACA  EC26  F024         	call	_lcdInst
  6675                           
  6676                           ;UI.c: 116: printf("PAUSE < | BACK >");
  6677  000ACE  0EE6               	movlw	low STR_6
  6678  000AD0  0100               	movlb	0	; () banked
  6679  000AD2  6F8E               	movwf	printf@f& (0+255),b
  6680  000AD4  0EFD               	movlw	high STR_6
  6681  000AD6  0100               	movlb	0	; () banked
  6682  000AD8  6F8F               	movwf	(printf@f+1)& (0+255),b
  6683  000ADA  ECB8  F008         	call	_printf	;wreg free
  6684                           
  6685                           ;UI.c: 118: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6686  000ADE  0E00               	movlw	0
  6687  000AE0  0100               	movlb	0	; () banked
  6688  000AE2  6FCA               	movwf	UI@i_412& (0+255),b
  6689  000AE4                     l7502:
  6690                           
  6691                           ; BSR set to: 0
  6692  000AE4  0E63               	movlw	99
  6693  000AE6  0100               	movlb	0	; () banked
  6694  000AE8  65CA               	cpfsgt	UI@i_412& (0+255),b
  6695  000AEA  D001               	goto	l7506
  6696  000AEC  D00C               	goto	l7510
  6697  000AEE                     l7506:
  6698                           
  6699                           ; BSR set to: 0
  6700  000AEE  0E68               	movlw	104
  6701  000AF0  0100               	movlb	0	; () banked
  6702  000AF2  6FC4               	movwf	??_UI& (0+255),b
  6703  000AF4  0EE4               	movlw	228
  6704  000AF6                     u7377:
  6705  000AF6  2EE8               	decfsz	wreg,f,c
  6706  000AF8  D7FE               	bra	u7377
  6707  000AFA  2FC4               	decfsz	??_UI& (0+255),f,b
  6708  000AFC  D7FC               	bra	u7377
  6709  000AFE  F000               	nop	
  6710  000B00  0100               	movlb	0	; () banked
  6711  000B02  2BCA               	incf	UI@i_412& (0+255),f,b
  6712  000B04  D7EF               	goto	l7502
  6713  000B06                     l7510:
  6714                           
  6715                           ; BSR set to: 0
  6716  000B06  0100               	movlb	0	; () banked
  6717  000B08  51F6               	movf	_logstate& (0+255),w,b
  6718  000B0A  0100               	movlb	0	; () banked
  6719  000B0C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6720  000B0E  B4D8               	btfsc	status,2,c
  6721  000B10  0012               	return	
  6722                           
  6723                           ; BSR set to: 0
  6724                           ;UI.c: 119: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6725                           
  6726                           ; BSR set to: 0
  6727                           
  6728                           ; BSR set to: 0
  6729  000B12  0E00               	movlw	0
  6730  000B14  0100               	movlb	0	; () banked
  6731  000B16  6FCB               	movwf	UI@i_413& (0+255),b
  6732  000B18                     l7516:
  6733                           
  6734                           ; BSR set to: 0
  6735  000B18  0E63               	movlw	99
  6736  000B1A  0100               	movlb	0	; () banked
  6737  000B1C  65CB               	cpfsgt	UI@i_413& (0+255),b
  6738  000B1E  D001               	goto	l7520
  6739  000B20  D00C               	goto	l7524
  6740  000B22                     l7520:
  6741                           
  6742                           ; BSR set to: 0
  6743  000B22  0E68               	movlw	104
  6744  000B24  0100               	movlb	0	; () banked
  6745  000B26  6FC4               	movwf	??_UI& (0+255),b
  6746  000B28  0EE4               	movlw	228
  6747  000B2A                     u7387:
  6748  000B2A  2EE8               	decfsz	wreg,f,c
  6749  000B2C  D7FE               	bra	u7387
  6750  000B2E  2FC4               	decfsz	??_UI& (0+255),f,b
  6751  000B30  D7FC               	bra	u7387
  6752  000B32  F000               	nop	
  6753  000B34  0100               	movlb	0	; () banked
  6754  000B36  2BCB               	incf	UI@i_413& (0+255),f,b
  6755  000B38  D7EF               	goto	l7516
  6756  000B3A                     l7524:
  6757                           
  6758                           ; BSR set to: 0
  6759  000B3A  0100               	movlb	0	; () banked
  6760  000B3C  51F6               	movf	_logstate& (0+255),w,b
  6761  000B3E  0100               	movlb	0	; () banked
  6762  000B40  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6763  000B42  B4D8               	btfsc	status,2,c
  6764  000B44  0012               	return	
  6765                           
  6766                           ; BSR set to: 0
  6767                           ;UI.c: 121: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6768                           
  6769                           ; BSR set to: 0
  6770                           
  6771                           ; BSR set to: 0
  6772  000B46  0E01               	movlw	1
  6773  000B48  EC26  F024         	call	_lcdInst
  6774  000B4C  0E68               	movlw	104
  6775  000B4E  0100               	movlb	0	; () banked
  6776  000B50  6FC4               	movwf	??_UI& (0+255),b
  6777  000B52  0EE4               	movlw	228
  6778  000B54                     u7397:
  6779  000B54  2EE8               	decfsz	wreg,f,c
  6780  000B56  D7FE               	bra	u7397
  6781  000B58  2FC4               	decfsz	??_UI& (0+255),f,b
  6782  000B5A  D7FC               	bra	u7397
  6783  000B5C  F000               	nop	
  6784                           
  6785                           ;UI.c: 122: lcdInst(0b10000000);;
  6786  000B5E  0E80               	movlw	128
  6787  000B60  EC26  F024         	call	_lcdInst
  6788                           
  6789                           ;UI.c: 123: printf("START:");
  6790  000B64  0EC4               	movlw	low STR_7
  6791  000B66  0100               	movlb	0	; () banked
  6792  000B68  6F8E               	movwf	printf@f& (0+255),b
  6793  000B6A  0EFF               	movlw	high STR_7
  6794  000B6C  0100               	movlb	0	; () banked
  6795  000B6E  6F8F               	movwf	(printf@f+1)& (0+255),b
  6796  000B70  ECB8  F008         	call	_printf	;wreg free
  6797                           
  6798                           ;UI.c: 124: lcdInst(0b11000000);;
  6799  000B74  0EC0               	movlw	192
  6800  000B76  EC26  F024         	call	_lcdInst
  6801                           
  6802                           ;UI.c: 125: char month[] = "MMM";
  6803  000B7A  C12F  F0D6         	movff	UI@F3225,UI@month
  6804  000B7E  C130  F0D7         	movff	UI@F3225+1,UI@month+1
  6805  000B82  C131  F0D8         	movff	UI@F3225+2,UI@month+2
  6806  000B86  C132  F0D9         	movff	UI@F3225+3,UI@month+3
  6807                           
  6808                           ;UI.c: 126: switch(log_startTime[5]){
  6809  000B8A  D0C3               	goto	l7568
  6810  000B8C                     l7540:
  6811                           
  6812                           ;UI.c: 128: strcpy(month, "JAN");
  6813  000B8C  0ED6               	movlw	low UI@month
  6814  000B8E  0100               	movlb	0	; () banked
  6815  000B90  6F80               	movwf	strcpy@to& (0+255),b
  6816  000B92  0E00               	movlw	high UI@month
  6817  000B94  0100               	movlb	0	; () banked
  6818  000B96  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6819  000B98  0EDB               	movlw	low STR_8
  6820  000B9A  0100               	movlb	0	; () banked
  6821  000B9C  6F82               	movwf	strcpy@from& (0+255),b
  6822  000B9E  0EFF               	movlw	high STR_8
  6823  000BA0  0100               	movlb	0	; () banked
  6824  000BA2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6825  000BA4  EC92  F021         	call	_strcpy	;wreg free
  6826                           
  6827                           ;UI.c: 129: break;
  6828  000BA8  D0E6               	goto	l7570
  6829  000BAA                     l7542:
  6830                           
  6831                           ;UI.c: 131: strcpy(month, "FEB");
  6832  000BAA  0ED6               	movlw	low UI@month
  6833  000BAC  0100               	movlb	0	; () banked
  6834  000BAE  6F80               	movwf	strcpy@to& (0+255),b
  6835  000BB0  0E00               	movlw	high UI@month
  6836  000BB2  0100               	movlb	0	; () banked
  6837  000BB4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6838  000BB6  0ECB               	movlw	low STR_9
  6839  000BB8  0100               	movlb	0	; () banked
  6840  000BBA  6F82               	movwf	strcpy@from& (0+255),b
  6841  000BBC  0EFF               	movlw	high STR_9
  6842  000BBE  0100               	movlb	0	; () banked
  6843  000BC0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6844  000BC2  EC92  F021         	call	_strcpy	;wreg free
  6845                           
  6846                           ;UI.c: 132: break;
  6847  000BC6  D0D7               	goto	l7570
  6848  000BC8                     l7544:
  6849                           
  6850                           ;UI.c: 134: strcpy(month, "MAR");
  6851  000BC8  0ED6               	movlw	low UI@month
  6852  000BCA  0100               	movlb	0	; () banked
  6853  000BCC  6F80               	movwf	strcpy@to& (0+255),b
  6854  000BCE  0E00               	movlw	high UI@month
  6855  000BD0  0100               	movlb	0	; () banked
  6856  000BD2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6857  000BD4  0EE7               	movlw	low STR_10
  6858  000BD6  0100               	movlb	0	; () banked
  6859  000BD8  6F82               	movwf	strcpy@from& (0+255),b
  6860  000BDA  0EFF               	movlw	high STR_10
  6861  000BDC  0100               	movlb	0	; () banked
  6862  000BDE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6863  000BE0  EC92  F021         	call	_strcpy	;wreg free
  6864                           
  6865                           ;UI.c: 135: break;
  6866  000BE4  D0C8               	goto	l7570
  6867  000BE6                     l7546:
  6868                           
  6869                           ;UI.c: 137: strcpy(month, "APR");
  6870  000BE6  0ED6               	movlw	low UI@month
  6871  000BE8  0100               	movlb	0	; () banked
  6872  000BEA  6F80               	movwf	strcpy@to& (0+255),b
  6873  000BEC  0E00               	movlw	high UI@month
  6874  000BEE  0100               	movlb	0	; () banked
  6875  000BF0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6876  000BF2  0EEB               	movlw	low STR_11
  6877  000BF4  0100               	movlb	0	; () banked
  6878  000BF6  6F82               	movwf	strcpy@from& (0+255),b
  6879  000BF8  0EFF               	movlw	high STR_11
  6880  000BFA  0100               	movlb	0	; () banked
  6881  000BFC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6882  000BFE  EC92  F021         	call	_strcpy	;wreg free
  6883                           
  6884                           ;UI.c: 138: break;
  6885  000C02  D0B9               	goto	l7570
  6886  000C04                     l7548:
  6887                           
  6888                           ;UI.c: 140: strcpy(month, "MAY");
  6889  000C04  0ED6               	movlw	low UI@month
  6890  000C06  0100               	movlb	0	; () banked
  6891  000C08  6F80               	movwf	strcpy@to& (0+255),b
  6892  000C0A  0E00               	movlw	high UI@month
  6893  000C0C  0100               	movlb	0	; () banked
  6894  000C0E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6895  000C10  0EFB               	movlw	low STR_12
  6896  000C12  0100               	movlb	0	; () banked
  6897  000C14  6F82               	movwf	strcpy@from& (0+255),b
  6898  000C16  0EFF               	movlw	high STR_12
  6899  000C18  0100               	movlb	0	; () banked
  6900  000C1A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6901  000C1C  EC92  F021         	call	_strcpy	;wreg free
  6902                           
  6903                           ;UI.c: 141: break;
  6904  000C20  D0AA               	goto	l7570
  6905  000C22                     l7550:
  6906                           
  6907                           ;UI.c: 143: strcpy(month, "JUN");
  6908  000C22  0ED6               	movlw	low UI@month
  6909  000C24  0100               	movlb	0	; () banked
  6910  000C26  6F80               	movwf	strcpy@to& (0+255),b
  6911  000C28  0E00               	movlw	high UI@month
  6912  000C2A  0100               	movlb	0	; () banked
  6913  000C2C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6914  000C2E  0EDF               	movlw	low STR_13
  6915  000C30  0100               	movlb	0	; () banked
  6916  000C32  6F82               	movwf	strcpy@from& (0+255),b
  6917  000C34  0EFF               	movlw	high STR_13
  6918  000C36  0100               	movlb	0	; () banked
  6919  000C38  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6920  000C3A  EC92  F021         	call	_strcpy	;wreg free
  6921                           
  6922                           ;UI.c: 144: break;
  6923  000C3E  D09B               	goto	l7570
  6924  000C40                     l7552:
  6925                           
  6926                           ;UI.c: 146: strcpy(month, "JUL");
  6927  000C40  0ED6               	movlw	low UI@month
  6928  000C42  0100               	movlb	0	; () banked
  6929  000C44  6F80               	movwf	strcpy@to& (0+255),b
  6930  000C46  0E00               	movlw	high UI@month
  6931  000C48  0100               	movlb	0	; () banked
  6932  000C4A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6933  000C4C  0ED7               	movlw	low STR_14
  6934  000C4E  0100               	movlb	0	; () banked
  6935  000C50  6F82               	movwf	strcpy@from& (0+255),b
  6936  000C52  0EFF               	movlw	high STR_14
  6937  000C54  0100               	movlb	0	; () banked
  6938  000C56  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6939  000C58  EC92  F021         	call	_strcpy	;wreg free
  6940                           
  6941                           ;UI.c: 147: break;
  6942  000C5C  D08C               	goto	l7570
  6943  000C5E                     l7554:
  6944                           
  6945                           ;UI.c: 149: strcpy(month, "AUG");
  6946  000C5E  0ED6               	movlw	low UI@month
  6947  000C60  0100               	movlb	0	; () banked
  6948  000C62  6F80               	movwf	strcpy@to& (0+255),b
  6949  000C64  0E00               	movlw	high UI@month
  6950  000C66  0100               	movlb	0	; () banked
  6951  000C68  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6952  000C6A  0ED3               	movlw	low STR_15
  6953  000C6C  0100               	movlb	0	; () banked
  6954  000C6E  6F82               	movwf	strcpy@from& (0+255),b
  6955  000C70  0EFF               	movlw	high STR_15
  6956  000C72  0100               	movlb	0	; () banked
  6957  000C74  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6958  000C76  EC92  F021         	call	_strcpy	;wreg free
  6959                           
  6960                           ;UI.c: 150: break;
  6961  000C7A  D07D               	goto	l7570
  6962  000C7C                     l7556:
  6963                           
  6964                           ;UI.c: 152: strcpy(month, "SEP");
  6965  000C7C  0ED6               	movlw	low UI@month
  6966  000C7E  0100               	movlb	0	; () banked
  6967  000C80  6F80               	movwf	strcpy@to& (0+255),b
  6968  000C82  0E00               	movlw	high UI@month
  6969  000C84  0100               	movlb	0	; () banked
  6970  000C86  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6971  000C88  0EE3               	movlw	low STR_16
  6972  000C8A  0100               	movlb	0	; () banked
  6973  000C8C  6F82               	movwf	strcpy@from& (0+255),b
  6974  000C8E  0EFF               	movlw	high STR_16
  6975  000C90  0100               	movlb	0	; () banked
  6976  000C92  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6977  000C94  EC92  F021         	call	_strcpy	;wreg free
  6978                           
  6979                           ;UI.c: 153: break;
  6980  000C98  D06E               	goto	l7570
  6981  000C9A                     l7558:
  6982                           
  6983                           ;UI.c: 155: strcpy(month, "OCT");
  6984  000C9A  0ED6               	movlw	low UI@month
  6985  000C9C  0100               	movlb	0	; () banked
  6986  000C9E  6F80               	movwf	strcpy@to& (0+255),b
  6987  000CA0  0E00               	movlw	high UI@month
  6988  000CA2  0100               	movlb	0	; () banked
  6989  000CA4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6990  000CA6  0EF3               	movlw	low STR_17
  6991  000CA8  0100               	movlb	0	; () banked
  6992  000CAA  6F82               	movwf	strcpy@from& (0+255),b
  6993  000CAC  0EFF               	movlw	high STR_17
  6994  000CAE  0100               	movlb	0	; () banked
  6995  000CB0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6996  000CB2  EC92  F021         	call	_strcpy	;wreg free
  6997                           
  6998                           ;UI.c: 156: break;
  6999  000CB6  D05F               	goto	l7570
  7000  000CB8                     l7560:
  7001                           
  7002                           ;UI.c: 158: strcpy(month, "NOV");
  7003  000CB8  0ED6               	movlw	low UI@month
  7004  000CBA  0100               	movlb	0	; () banked
  7005  000CBC  6F80               	movwf	strcpy@to& (0+255),b
  7006  000CBE  0E00               	movlw	high UI@month
  7007  000CC0  0100               	movlb	0	; () banked
  7008  000CC2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7009  000CC4  0EF7               	movlw	low STR_18
  7010  000CC6  0100               	movlb	0	; () banked
  7011  000CC8  6F82               	movwf	strcpy@from& (0+255),b
  7012  000CCA  0EFF               	movlw	high STR_18
  7013  000CCC  0100               	movlb	0	; () banked
  7014  000CCE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7015  000CD0  EC92  F021         	call	_strcpy	;wreg free
  7016                           
  7017                           ;UI.c: 159: break;
  7018  000CD4  D050               	goto	l7570
  7019  000CD6                     l7562:
  7020                           
  7021                           ;UI.c: 161: strcpy(month, "DEC");
  7022  000CD6  0ED6               	movlw	low UI@month
  7023  000CD8  0100               	movlb	0	; () banked
  7024  000CDA  6F80               	movwf	strcpy@to& (0+255),b
  7025  000CDC  0E00               	movlw	high UI@month
  7026  000CDE  0100               	movlb	0	; () banked
  7027  000CE0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7028  000CE2  0ECF               	movlw	low STR_19
  7029  000CE4  0100               	movlb	0	; () banked
  7030  000CE6  6F82               	movwf	strcpy@from& (0+255),b
  7031  000CE8  0EFF               	movlw	high STR_19
  7032  000CEA  0100               	movlb	0	; () banked
  7033  000CEC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7034  000CEE  EC92  F021         	call	_strcpy	;wreg free
  7035                           
  7036                           ;UI.c: 162: break;
  7037  000CF2  D041               	goto	l7570
  7038  000CF4                     l7564:
  7039                           
  7040                           ;UI.c: 164: strcpy(month, "ERR");
  7041  000CF4  0ED6               	movlw	low UI@month
  7042  000CF6  0100               	movlb	0	; () banked
  7043  000CF8  6F80               	movwf	strcpy@to& (0+255),b
  7044  000CFA  0E00               	movlw	high UI@month
  7045  000CFC  0100               	movlb	0	; () banked
  7046  000CFE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7047  000D00  0EEF               	movlw	low STR_20
  7048  000D02  0100               	movlb	0	; () banked
  7049  000D04  6F82               	movwf	strcpy@from& (0+255),b
  7050  000D06  0EFF               	movlw	high STR_20
  7051  000D08  0100               	movlb	0	; () banked
  7052  000D0A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7053  000D0C  EC92  F021         	call	_strcpy	;wreg free
  7054                           
  7055                           ;UI.c: 166: }
  7056                           
  7057                           ;UI.c: 165: break;
  7058  000D10  D032               	goto	l7570
  7059  000D12                     l7568:
  7060  000D12  EE21  F00A         	lfsr	2,_log_startTime+10
  7061  000D16  CFDE F0C4          	movff	postinc2,??_UI
  7062  000D1A  CFDD F0C5          	movff	postdec2,??_UI+1
  7063                           
  7064                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7065                           ; Switch size 1, requested type "space"
  7066                           ; Number of cases is 1, Range of values is 0 to 0
  7067                           ; switch strategies available:
  7068                           ; Name         Instructions Cycles
  7069                           ; simple_byte            4     3 (average)
  7070                           ;	Chosen strategy is simple_byte
  7071  000D1E  0100               	movlb	0	; () banked
  7072  000D20  51C5               	movf	(??_UI+1)& (0+255),w,b
  7073  000D22  0A00               	xorlw	0	; case 0
  7074  000D24  A4D8               	btfss	status,2,c
  7075  000D26  D7E6               	goto	l7564
  7076                           
  7077                           ; BSR set to: 0
  7078                           ; Switch size 1, requested type "space"
  7079                           ; Number of cases is 12, Range of values is 1 to 12
  7080                           ; switch strategies available:
  7081                           ; Name         Instructions Cycles
  7082                           ; simple_byte           37    19 (average)
  7083                           ;	Chosen strategy is simple_byte
  7084  000D28  0100               	movlb	0	; () banked
  7085  000D2A  51C4               	movf	??_UI& (0+255),w,b
  7086  000D2C  0A01               	xorlw	1	; case 1
  7087  000D2E  B4D8               	btfsc	status,2,c
  7088  000D30  D72D               	goto	l7540
  7089  000D32  0A03               	xorlw	3	; case 2
  7090  000D34  B4D8               	btfsc	status,2,c
  7091  000D36  D739               	goto	l7542
  7092  000D38  0A01               	xorlw	1	; case 3
  7093  000D3A  B4D8               	btfsc	status,2,c
  7094  000D3C  D745               	goto	l7544
  7095  000D3E  0A07               	xorlw	7	; case 4
  7096  000D40  B4D8               	btfsc	status,2,c
  7097  000D42  D751               	goto	l7546
  7098  000D44  0A01               	xorlw	1	; case 5
  7099  000D46  B4D8               	btfsc	status,2,c
  7100  000D48  D75D               	goto	l7548
  7101  000D4A  0A03               	xorlw	3	; case 6
  7102  000D4C  B4D8               	btfsc	status,2,c
  7103  000D4E  D769               	goto	l7550
  7104  000D50  0A01               	xorlw	1	; case 7
  7105  000D52  B4D8               	btfsc	status,2,c
  7106  000D54  D775               	goto	l7552
  7107  000D56  0A0F               	xorlw	15	; case 8
  7108  000D58  B4D8               	btfsc	status,2,c
  7109  000D5A  D781               	goto	l7554
  7110  000D5C  0A01               	xorlw	1	; case 9
  7111  000D5E  B4D8               	btfsc	status,2,c
  7112  000D60  D78D               	goto	l7556
  7113  000D62  0A03               	xorlw	3	; case 10
  7114  000D64  B4D8               	btfsc	status,2,c
  7115  000D66  D799               	goto	l7558
  7116  000D68  0A01               	xorlw	1	; case 11
  7117  000D6A  B4D8               	btfsc	status,2,c
  7118  000D6C  D7A5               	goto	l7560
  7119  000D6E  0A07               	xorlw	7	; case 12
  7120  000D70  B4D8               	btfsc	status,2,c
  7121  000D72  D7B1               	goto	l7562
  7122  000D74  D7BF               	goto	l7564
  7123  000D76                     l7570:
  7124                           
  7125                           ;UI.c: 167: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  7126  000D76  0E2E               	movlw	low STR_21
  7127  000D78  0100               	movlb	0	; () banked
  7128  000D7A  6F8E               	movwf	printf@f& (0+255),b
  7129  000D7C  0EFB               	movlw	high STR_21
  7130  000D7E  0100               	movlb	0	; () banked
  7131  000D80  6F8F               	movwf	(printf@f+1)& (0+255),b
  7132  000D82  C108  F090         	movff	_log_startTime+8,?_printf+2
  7133  000D86  C109  F091         	movff	_log_startTime+9,?_printf+3
  7134  000D8A  0ED6               	movlw	low UI@month
  7135  000D8C  0100               	movlb	0	; () banked
  7136  000D8E  6F92               	movwf	(?_printf+4)& (0+255),b
  7137  000D90  0E00               	movlw	high UI@month
  7138  000D92  0100               	movlb	0	; () banked
  7139  000D94  6F93               	movwf	(?_printf+5)& (0+255),b
  7140  000D96  C104  F094         	movff	_log_startTime+4,?_printf+6
  7141  000D9A  C105  F095         	movff	_log_startTime+5,?_printf+7
  7142  000D9E  C102  F096         	movff	_log_startTime+2,?_printf+8
  7143  000DA2  C103  F097         	movff	_log_startTime+3,?_printf+9
  7144  000DA6  C100  F098         	movff	_log_startTime,?_printf+10
  7145  000DAA  C101  F099         	movff	_log_startTime+1,?_printf+11
  7146  000DAE  ECB8  F008         	call	_printf	;wreg free
  7147                           
  7148                           ;UI.c: 169: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7149  000DB2  0E00               	movlw	0
  7150  000DB4  0100               	movlb	0	; () banked
  7151  000DB6  6FCC               	movwf	UI@i_431& (0+255),b
  7152  000DB8                     l7574:
  7153                           
  7154                           ; BSR set to: 0
  7155  000DB8  0E63               	movlw	99
  7156  000DBA  0100               	movlb	0	; () banked
  7157  000DBC  65CC               	cpfsgt	UI@i_431& (0+255),b
  7158  000DBE  D001               	goto	l7578
  7159  000DC0  D00C               	goto	l7582
  7160  000DC2                     l7578:
  7161                           
  7162                           ; BSR set to: 0
  7163  000DC2  0E68               	movlw	104
  7164  000DC4  0100               	movlb	0	; () banked
  7165  000DC6  6FC4               	movwf	??_UI& (0+255),b
  7166  000DC8  0EE4               	movlw	228
  7167  000DCA                     u7407:
  7168  000DCA  2EE8               	decfsz	wreg,f,c
  7169  000DCC  D7FE               	bra	u7407
  7170  000DCE  2FC4               	decfsz	??_UI& (0+255),f,b
  7171  000DD0  D7FC               	bra	u7407
  7172  000DD2  F000               	nop	
  7173  000DD4  0100               	movlb	0	; () banked
  7174  000DD6  2BCC               	incf	UI@i_431& (0+255),f,b
  7175  000DD8  D7EF               	goto	l7574
  7176  000DDA                     l7582:
  7177                           
  7178                           ; BSR set to: 0
  7179  000DDA  0100               	movlb	0	; () banked
  7180  000DDC  51F6               	movf	_logstate& (0+255),w,b
  7181  000DDE  0100               	movlb	0	; () banked
  7182  000DE0  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7183  000DE2  B4D8               	btfsc	status,2,c
  7184  000DE4  0012               	return	
  7185                           
  7186                           ; BSR set to: 0
  7187                           ;UI.c: 170: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7188                           
  7189                           ; BSR set to: 0
  7190                           
  7191                           ; BSR set to: 0
  7192  000DE6  0E00               	movlw	0
  7193  000DE8  0100               	movlb	0	; () banked
  7194  000DEA  6FCD               	movwf	UI@i_432& (0+255),b
  7195  000DEC                     l7588:
  7196                           
  7197                           ; BSR set to: 0
  7198  000DEC  0E63               	movlw	99
  7199  000DEE  0100               	movlb	0	; () banked
  7200  000DF0  65CD               	cpfsgt	UI@i_432& (0+255),b
  7201  000DF2  D001               	goto	l7592
  7202  000DF4  D00C               	goto	l7596
  7203  000DF6                     l7592:
  7204                           
  7205                           ; BSR set to: 0
  7206  000DF6  0E68               	movlw	104
  7207  000DF8  0100               	movlb	0	; () banked
  7208  000DFA  6FC4               	movwf	??_UI& (0+255),b
  7209  000DFC  0EE4               	movlw	228
  7210  000DFE                     u7417:
  7211  000DFE  2EE8               	decfsz	wreg,f,c
  7212  000E00  D7FE               	bra	u7417
  7213  000E02  2FC4               	decfsz	??_UI& (0+255),f,b
  7214  000E04  D7FC               	bra	u7417
  7215  000E06  F000               	nop	
  7216  000E08  0100               	movlb	0	; () banked
  7217  000E0A  2BCD               	incf	UI@i_432& (0+255),f,b
  7218  000E0C  D7EF               	goto	l7588
  7219  000E0E                     l7596:
  7220                           
  7221                           ; BSR set to: 0
  7222  000E0E  0100               	movlb	0	; () banked
  7223  000E10  51F6               	movf	_logstate& (0+255),w,b
  7224  000E12  0100               	movlb	0	; () banked
  7225  000E14  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7226  000E16  B4D8               	btfsc	status,2,c
  7227  000E18  0012               	return	
  7228                           
  7229                           ; BSR set to: 0
  7230                           ;UI.c: 172: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7231                           
  7232                           ; BSR set to: 0
  7233                           
  7234                           ; BSR set to: 0
  7235  000E1A  0E01               	movlw	1
  7236  000E1C  EC26  F024         	call	_lcdInst
  7237  000E20  0E68               	movlw	104
  7238  000E22  0100               	movlb	0	; () banked
  7239  000E24  6FC4               	movwf	??_UI& (0+255),b
  7240  000E26  0EE4               	movlw	228
  7241  000E28                     u7427:
  7242  000E28  2EE8               	decfsz	wreg,f,c
  7243  000E2A  D7FE               	bra	u7427
  7244  000E2C  2FC4               	decfsz	??_UI& (0+255),f,b
  7245  000E2E  D7FC               	bra	u7427
  7246  000E30  F000               	nop	
  7247                           
  7248                           ;UI.c: 173: lcdInst(0b10000000);;
  7249  000E32  0E80               	movlw	128
  7250  000E34  EC26  F024         	call	_lcdInst
  7251                           
  7252                           ;UI.c: 174: printf("DURATION:");
  7253  000E38  0E9B               	movlw	low STR_22
  7254  000E3A  0100               	movlb	0	; () banked
  7255  000E3C  6F8E               	movwf	printf@f& (0+255),b
  7256  000E3E  0EFF               	movlw	high STR_22
  7257  000E40  0100               	movlb	0	; () banked
  7258  000E42  6F8F               	movwf	(printf@f+1)& (0+255),b
  7259  000E44  ECB8  F008         	call	_printf	;wreg free
  7260                           
  7261                           ;UI.c: 175: lcdInst(0b11000000);;
  7262  000E48  0EC0               	movlw	192
  7263  000E4A  EC26  F024         	call	_lcdInst
  7264                           
  7265                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  7266  000E4E  0E0E               	movlw	14
  7267  000E50  0100               	movlb	0	; () banked
  7268  000E52  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7269  000E54  0E10               	movlw	16
  7270  000E56  6F82               	movwf	___awmod@divisor& (0+255),b
  7271  000E58  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  7272  000E5C  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  7273  000E60  EC86  F01C         	call	___awmod	;wreg free
  7274  000E64  C080  F0C6         	movff	?___awmod,_UI$2304
  7275  000E68  C081  F0C7         	movff	?___awmod+1,_UI$2304+1
  7276                           
  7277                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  7278  000E6C  0E19               	movlw	low STR_23
  7279  000E6E  0100               	movlb	0	; () banked
  7280  000E70  6F8E               	movwf	printf@f& (0+255),b
  7281  000E72  0EFF               	movlw	high STR_23
  7282  000E74  0100               	movlb	0	; () banked
  7283  000E76  6F8F               	movwf	(printf@f+1)& (0+255),b
  7284  000E78  0E0E               	movlw	14
  7285  000E7A  0100               	movlb	0	; () banked
  7286  000E7C  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7287  000E7E  0E10               	movlw	16
  7288  000E80  6F82               	movwf	___awmod@divisor& (0+255),b
  7289  000E82  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  7290  000E86  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  7291  000E8A  EC86  F01C         	call	___awmod	;wreg free
  7292  000E8E  C080  F086         	movff	?___awmod,___awdiv@dividend
  7293  000E92  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7294  000E96  0E00               	movlw	0
  7295  000E98  0100               	movlb	0	; () banked
  7296  000E9A  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7297  000E9C  0E3C               	movlw	60
  7298  000E9E  6F88               	movwf	___awdiv@divisor& (0+255),b
  7299  000EA0  EC74  F01B         	call	___awdiv	;wreg free
  7300  000EA4  C086  F090         	movff	?___awdiv,?_printf+2
  7301  000EA8  C087  F091         	movff	?___awdiv+1,?_printf+3
  7302  000EAC  C0C6  F080         	movff	_UI$2304,___awmod@dividend
  7303  000EB0  C0C7  F081         	movff	_UI$2304+1,___awmod@dividend+1
  7304  000EB4  0E00               	movlw	0
  7305  000EB6  0100               	movlb	0	; () banked
  7306  000EB8  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7307  000EBA  0E3C               	movlw	60
  7308  000EBC  6F82               	movwf	___awmod@divisor& (0+255),b
  7309  000EBE  EC86  F01C         	call	___awmod	;wreg free
  7310  000EC2  C080  F092         	movff	?___awmod,?_printf+4
  7311  000EC6  C081  F093         	movff	?___awmod+1,?_printf+5
  7312  000ECA  ECB8  F008         	call	_printf	;wreg free
  7313                           
  7314                           ;UI.c: 178: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7315  000ECE  0E00               	movlw	0
  7316  000ED0  0100               	movlb	0	; () banked
  7317  000ED2  6FCE               	movwf	UI@i_435& (0+255),b
  7318  000ED4                     l7616:
  7319                           
  7320                           ; BSR set to: 0
  7321  000ED4  0E63               	movlw	99
  7322  000ED6  0100               	movlb	0	; () banked
  7323  000ED8  65CE               	cpfsgt	UI@i_435& (0+255),b
  7324  000EDA  D001               	goto	l7620
  7325  000EDC  D00C               	goto	l7624
  7326  000EDE                     l7620:
  7327                           
  7328                           ; BSR set to: 0
  7329  000EDE  0E68               	movlw	104
  7330  000EE0  0100               	movlb	0	; () banked
  7331  000EE2  6FC4               	movwf	??_UI& (0+255),b
  7332  000EE4  0EE4               	movlw	228
  7333  000EE6                     u7437:
  7334  000EE6  2EE8               	decfsz	wreg,f,c
  7335  000EE8  D7FE               	bra	u7437
  7336  000EEA  2FC4               	decfsz	??_UI& (0+255),f,b
  7337  000EEC  D7FC               	bra	u7437
  7338  000EEE  F000               	nop	
  7339  000EF0  0100               	movlb	0	; () banked
  7340  000EF2  2BCE               	incf	UI@i_435& (0+255),f,b
  7341  000EF4  D7EF               	goto	l7616
  7342  000EF6                     l7624:
  7343                           
  7344                           ; BSR set to: 0
  7345  000EF6  0100               	movlb	0	; () banked
  7346  000EF8  51F6               	movf	_logstate& (0+255),w,b
  7347  000EFA  0100               	movlb	0	; () banked
  7348  000EFC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7349  000EFE  B4D8               	btfsc	status,2,c
  7350  000F00  0012               	return	
  7351                           
  7352                           ; BSR set to: 0
  7353                           ;UI.c: 179: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7354                           
  7355                           ; BSR set to: 0
  7356                           
  7357                           ; BSR set to: 0
  7358  000F02  0E00               	movlw	0
  7359  000F04  0100               	movlb	0	; () banked
  7360  000F06  6FCF               	movwf	UI@i_436& (0+255),b
  7361  000F08                     l7630:
  7362                           
  7363                           ; BSR set to: 0
  7364  000F08  0E63               	movlw	99
  7365  000F0A  0100               	movlb	0	; () banked
  7366  000F0C  65CF               	cpfsgt	UI@i_436& (0+255),b
  7367  000F0E  D001               	goto	l7634
  7368  000F10  D00C               	goto	l7638
  7369  000F12                     l7634:
  7370                           
  7371                           ; BSR set to: 0
  7372  000F12  0E68               	movlw	104
  7373  000F14  0100               	movlb	0	; () banked
  7374  000F16  6FC4               	movwf	??_UI& (0+255),b
  7375  000F18  0EE4               	movlw	228
  7376  000F1A                     u7447:
  7377  000F1A  2EE8               	decfsz	wreg,f,c
  7378  000F1C  D7FE               	bra	u7447
  7379  000F1E  2FC4               	decfsz	??_UI& (0+255),f,b
  7380  000F20  D7FC               	bra	u7447
  7381  000F22  F000               	nop	
  7382  000F24  0100               	movlb	0	; () banked
  7383  000F26  2BCF               	incf	UI@i_436& (0+255),f,b
  7384  000F28  D7EF               	goto	l7630
  7385  000F2A                     l7638:
  7386                           
  7387                           ; BSR set to: 0
  7388  000F2A  0100               	movlb	0	; () banked
  7389  000F2C  51F6               	movf	_logstate& (0+255),w,b
  7390  000F2E  0100               	movlb	0	; () banked
  7391  000F30  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7392  000F32  B4D8               	btfsc	status,2,c
  7393  000F34  0012               	return	
  7394                           
  7395                           ; BSR set to: 0
  7396                           ;UI.c: 181: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7397                           
  7398                           ; BSR set to: 0
  7399                           
  7400                           ; BSR set to: 0
  7401  000F36  0E01               	movlw	1
  7402  000F38  EC26  F024         	call	_lcdInst
  7403  000F3C  0E68               	movlw	104
  7404  000F3E  0100               	movlb	0	; () banked
  7405  000F40  6FC4               	movwf	??_UI& (0+255),b
  7406  000F42  0EE4               	movlw	228
  7407  000F44                     u7457:
  7408  000F44  2EE8               	decfsz	wreg,f,c
  7409  000F46  D7FE               	bra	u7457
  7410  000F48  2FC4               	decfsz	??_UI& (0+255),f,b
  7411  000F4A  D7FC               	bra	u7457
  7412  000F4C  F000               	nop	
  7413                           
  7414                           ;UI.c: 182: lcdInst(0b10000000);;
  7415  000F4E  0E80               	movlw	128
  7416  000F50  EC26  F024         	call	_lcdInst
  7417                           
  7418                           ;UI.c: 183: printf(" -- POP  CAN -- ");
  7419  000F54  0E3C               	movlw	low STR_24
  7420  000F56  0100               	movlb	0	; () banked
  7421  000F58  6F8E               	movwf	printf@f& (0+255),b
  7422  000F5A  0EFD               	movlw	high STR_24
  7423  000F5C  0100               	movlb	0	; () banked
  7424  000F5E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7425  000F60  ECB8  F008         	call	_printf	;wreg free
  7426                           
  7427                           ;UI.c: 184: lcdInst(0b11000000);;
  7428  000F64  0EC0               	movlw	192
  7429  000F66  EC26  F024         	call	_lcdInst
  7430                           
  7431                           ;UI.c: 185: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  7432  000F6A  0E19               	movlw	low STR_25
  7433  000F6C  0100               	movlb	0	; () banked
  7434  000F6E  6F8E               	movwf	printf@f& (0+255),b
  7435  000F70  0EFE               	movlw	high STR_25
  7436  000F72  0100               	movlb	0	; () banked
  7437  000F74  6F8F               	movwf	(printf@f+1)& (0+255),b
  7438  000F76  C0EE  F090         	movff	_log_count_pop_no_tab,?_printf+2
  7439  000F7A  C0EF  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  7440  000F7E  C0F0  F092         	movff	_log_count_pop_w_tab,?_printf+4
  7441  000F82  C0F1  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  7442  000F86  ECB8  F008         	call	_printf	;wreg free
  7443                           
  7444                           ;UI.c: 187: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7445  000F8A  0E00               	movlw	0
  7446  000F8C  0100               	movlb	0	; () banked
  7447  000F8E  6FD0               	movwf	UI@i_439& (0+255),b
  7448  000F90                     l7656:
  7449                           
  7450                           ; BSR set to: 0
  7451  000F90  0E63               	movlw	99
  7452  000F92  0100               	movlb	0	; () banked
  7453  000F94  65D0               	cpfsgt	UI@i_439& (0+255),b
  7454  000F96  D001               	goto	l7660
  7455  000F98  D00C               	goto	l7664
  7456  000F9A                     l7660:
  7457                           
  7458                           ; BSR set to: 0
  7459  000F9A  0E68               	movlw	104
  7460  000F9C  0100               	movlb	0	; () banked
  7461  000F9E  6FC4               	movwf	??_UI& (0+255),b
  7462  000FA0  0EE4               	movlw	228
  7463  000FA2                     u7467:
  7464  000FA2  2EE8               	decfsz	wreg,f,c
  7465  000FA4  D7FE               	bra	u7467
  7466  000FA6  2FC4               	decfsz	??_UI& (0+255),f,b
  7467  000FA8  D7FC               	bra	u7467
  7468  000FAA  F000               	nop	
  7469  000FAC  0100               	movlb	0	; () banked
  7470  000FAE  2BD0               	incf	UI@i_439& (0+255),f,b
  7471  000FB0  D7EF               	goto	l7656
  7472  000FB2                     l7664:
  7473                           
  7474                           ; BSR set to: 0
  7475  000FB2  0100               	movlb	0	; () banked
  7476  000FB4  51F6               	movf	_logstate& (0+255),w,b
  7477  000FB6  0100               	movlb	0	; () banked
  7478  000FB8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7479  000FBA  B4D8               	btfsc	status,2,c
  7480  000FBC  0012               	return	
  7481                           
  7482                           ; BSR set to: 0
  7483                           ;UI.c: 188: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7484                           
  7485                           ; BSR set to: 0
  7486                           
  7487                           ; BSR set to: 0
  7488  000FBE  0E00               	movlw	0
  7489  000FC0  0100               	movlb	0	; () banked
  7490  000FC2  6FD1               	movwf	UI@i_440& (0+255),b
  7491  000FC4                     l7670:
  7492                           
  7493                           ; BSR set to: 0
  7494  000FC4  0E63               	movlw	99
  7495  000FC6  0100               	movlb	0	; () banked
  7496  000FC8  65D1               	cpfsgt	UI@i_440& (0+255),b
  7497  000FCA  D001               	goto	l7674
  7498  000FCC  D00C               	goto	l7678
  7499  000FCE                     l7674:
  7500                           
  7501                           ; BSR set to: 0
  7502  000FCE  0E68               	movlw	104
  7503  000FD0  0100               	movlb	0	; () banked
  7504  000FD2  6FC4               	movwf	??_UI& (0+255),b
  7505  000FD4  0EE4               	movlw	228
  7506  000FD6                     u7477:
  7507  000FD6  2EE8               	decfsz	wreg,f,c
  7508  000FD8  D7FE               	bra	u7477
  7509  000FDA  2FC4               	decfsz	??_UI& (0+255),f,b
  7510  000FDC  D7FC               	bra	u7477
  7511  000FDE  F000               	nop	
  7512  000FE0  0100               	movlb	0	; () banked
  7513  000FE2  2BD1               	incf	UI@i_440& (0+255),f,b
  7514  000FE4  D7EF               	goto	l7670
  7515  000FE6                     l7678:
  7516                           
  7517                           ; BSR set to: 0
  7518  000FE6  0100               	movlb	0	; () banked
  7519  000FE8  51F6               	movf	_logstate& (0+255),w,b
  7520  000FEA  0100               	movlb	0	; () banked
  7521  000FEC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7522  000FEE  B4D8               	btfsc	status,2,c
  7523  000FF0  0012               	return	
  7524                           
  7525                           ; BSR set to: 0
  7526                           ;UI.c: 190: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7527                           
  7528                           ; BSR set to: 0
  7529                           
  7530                           ; BSR set to: 0
  7531  000FF2  0E01               	movlw	1
  7532  000FF4  EC26  F024         	call	_lcdInst
  7533  000FF8  0E68               	movlw	104
  7534  000FFA  0100               	movlb	0	; () banked
  7535  000FFC  6FC4               	movwf	??_UI& (0+255),b
  7536  000FFE  0EE4               	movlw	228
  7537  001000                     u7487:
  7538  001000  2EE8               	decfsz	wreg,f,c
  7539  001002  D7FE               	bra	u7487
  7540  001004  2FC4               	decfsz	??_UI& (0+255),f,b
  7541  001006  D7FC               	bra	u7487
  7542  001008  F000               	nop	
  7543                           
  7544                           ;UI.c: 191: lcdInst(0b10000000);;
  7545  00100A  0E80               	movlw	128
  7546  00100C  EC26  F024         	call	_lcdInst
  7547                           
  7548                           ;UI.c: 192: printf(" -- SOUP CAN -- ");
  7549  001010  0E4D               	movlw	low STR_26
  7550  001012  0100               	movlb	0	; () banked
  7551  001014  6F8E               	movwf	printf@f& (0+255),b
  7552  001016  0EFD               	movlw	high STR_26
  7553  001018  0100               	movlb	0	; () banked
  7554  00101A  6F8F               	movwf	(printf@f+1)& (0+255),b
  7555  00101C  ECB8  F008         	call	_printf	;wreg free
  7556                           
  7557                           ;UI.c: 193: lcdInst(0b11000000);;
  7558  001020  0EC0               	movlw	192
  7559  001022  EC26  F024         	call	_lcdInst
  7560                           
  7561                           ;UI.c: 194: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  7562  001026  0E08               	movlw	low STR_27
  7563  001028  0100               	movlb	0	; () banked
  7564  00102A  6F8E               	movwf	printf@f& (0+255),b
  7565  00102C  0EFE               	movlw	high STR_27
  7566  00102E  0100               	movlb	0	; () banked
  7567  001030  6F8F               	movwf	(printf@f+1)& (0+255),b
  7568  001032  C0EA  F090         	movff	_log_count_can_no_lab,?_printf+2
  7569  001036  C0EB  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  7570  00103A  C0EC  F092         	movff	_log_count_can_w_lab,?_printf+4
  7571  00103E  C0ED  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  7572  001042  ECB8  F008         	call	_printf	;wreg free
  7573                           
  7574                           ;UI.c: 196: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7575  001046  0E00               	movlw	0
  7576  001048  0100               	movlb	0	; () banked
  7577  00104A  6FD2               	movwf	UI@i_443& (0+255),b
  7578  00104C                     l7696:
  7579                           
  7580                           ; BSR set to: 0
  7581  00104C  0E63               	movlw	99
  7582  00104E  0100               	movlb	0	; () banked
  7583  001050  65D2               	cpfsgt	UI@i_443& (0+255),b
  7584  001052  D001               	goto	l7700
  7585  001054  D00C               	goto	l7704
  7586  001056                     l7700:
  7587                           
  7588                           ; BSR set to: 0
  7589  001056  0E68               	movlw	104
  7590  001058  0100               	movlb	0	; () banked
  7591  00105A  6FC4               	movwf	??_UI& (0+255),b
  7592  00105C  0EE4               	movlw	228
  7593  00105E                     u7497:
  7594  00105E  2EE8               	decfsz	wreg,f,c
  7595  001060  D7FE               	bra	u7497
  7596  001062  2FC4               	decfsz	??_UI& (0+255),f,b
  7597  001064  D7FC               	bra	u7497
  7598  001066  F000               	nop	
  7599  001068  0100               	movlb	0	; () banked
  7600  00106A  2BD2               	incf	UI@i_443& (0+255),f,b
  7601  00106C  D7EF               	goto	l7696
  7602  00106E                     l7704:
  7603                           
  7604                           ; BSR set to: 0
  7605  00106E  0100               	movlb	0	; () banked
  7606  001070  51F6               	movf	_logstate& (0+255),w,b
  7607  001072  0100               	movlb	0	; () banked
  7608  001074  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7609  001076  B4D8               	btfsc	status,2,c
  7610  001078  0012               	return	
  7611                           
  7612                           ; BSR set to: 0
  7613                           ;UI.c: 197: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7614                           
  7615                           ; BSR set to: 0
  7616                           
  7617                           ; BSR set to: 0
  7618  00107A  0E00               	movlw	0
  7619  00107C  0100               	movlb	0	; () banked
  7620  00107E  6FD3               	movwf	UI@i_444& (0+255),b
  7621  001080                     l7710:
  7622                           
  7623                           ; BSR set to: 0
  7624  001080  0E63               	movlw	99
  7625  001082  0100               	movlb	0	; () banked
  7626  001084  65D3               	cpfsgt	UI@i_444& (0+255),b
  7627  001086  D001               	goto	l7714
  7628  001088  D00C               	goto	l7718
  7629  00108A                     l7714:
  7630                           
  7631                           ; BSR set to: 0
  7632  00108A  0E68               	movlw	104
  7633  00108C  0100               	movlb	0	; () banked
  7634  00108E  6FC4               	movwf	??_UI& (0+255),b
  7635  001090  0EE4               	movlw	228
  7636  001092                     u7507:
  7637  001092  2EE8               	decfsz	wreg,f,c
  7638  001094  D7FE               	bra	u7507
  7639  001096  2FC4               	decfsz	??_UI& (0+255),f,b
  7640  001098  D7FC               	bra	u7507
  7641  00109A  F000               	nop	
  7642  00109C  0100               	movlb	0	; () banked
  7643  00109E  2BD3               	incf	UI@i_444& (0+255),f,b
  7644  0010A0  D7EF               	goto	l7710
  7645  0010A2                     l7718:
  7646                           
  7647                           ; BSR set to: 0
  7648  0010A2  0100               	movlb	0	; () banked
  7649  0010A4  51F6               	movf	_logstate& (0+255),w,b
  7650  0010A6  0100               	movlb	0	; () banked
  7651  0010A8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7652  0010AA  B4D8               	btfsc	status,2,c
  7653  0010AC  0012               	return	
  7654                           
  7655                           ; BSR set to: 0
  7656                           ;UI.c: 199: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7657                           
  7658                           ; BSR set to: 0
  7659                           
  7660                           ; BSR set to: 0
  7661  0010AE  0E01               	movlw	1
  7662  0010B0  EC26  F024         	call	_lcdInst
  7663  0010B4  0E68               	movlw	104
  7664  0010B6  0100               	movlb	0	; () banked
  7665  0010B8  6FC4               	movwf	??_UI& (0+255),b
  7666  0010BA  0EE4               	movlw	228
  7667  0010BC                     u7517:
  7668  0010BC  2EE8               	decfsz	wreg,f,c
  7669  0010BE  D7FE               	bra	u7517
  7670  0010C0  2FC4               	decfsz	??_UI& (0+255),f,b
  7671  0010C2  D7FC               	bra	u7517
  7672  0010C4  F000               	nop	
  7673                           
  7674                           ;UI.c: 200: lcdInst(0b10000000);;
  7675  0010C6  0E80               	movlw	128
  7676  0010C8  EC26  F024         	call	_lcdInst
  7677                           
  7678                           ;UI.c: 201: printf("-- TOTAL CANS --");
  7679  0010CC  0E5E               	movlw	low STR_28
  7680  0010CE  0100               	movlb	0	; () banked
  7681  0010D0  6F8E               	movwf	printf@f& (0+255),b
  7682  0010D2  0EFD               	movlw	high STR_28
  7683  0010D4  0100               	movlb	0	; () banked
  7684  0010D6  6F8F               	movwf	(printf@f+1)& (0+255),b
  7685  0010D8  ECB8  F008         	call	_printf	;wreg free
  7686                           
  7687                           ;UI.c: 202: lcdInst(0b11000000);;
  7688  0010DC  0EC0               	movlw	192
  7689  0010DE  EC26  F024         	call	_lcdInst
  7690                           
  7691                           ;UI.c: 203: printf("%d", log_count_total);
  7692  0010E2  0E16               	movlw	low (STR_27+14)
  7693  0010E4  0100               	movlb	0	; () banked
  7694  0010E6  6F8E               	movwf	printf@f& (0+255),b
  7695  0010E8  0EFE               	movlw	high (STR_27+14)
  7696  0010EA  0100               	movlb	0	; () banked
  7697  0010EC  6F8F               	movwf	(printf@f+1)& (0+255),b
  7698  0010EE  C0F2  F090         	movff	_log_count_total,?_printf+2
  7699  0010F2  C0F3  F091         	movff	_log_count_total+1,?_printf+3
  7700  0010F6  ECB8  F008         	call	_printf	;wreg free
  7701                           
  7702                           ;UI.c: 205: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7703  0010FA  0E00               	movlw	0
  7704  0010FC  0100               	movlb	0	; () banked
  7705  0010FE  6FD4               	movwf	UI@i_447& (0+255),b
  7706  001100                     l7736:
  7707                           
  7708                           ; BSR set to: 0
  7709  001100  0E63               	movlw	99
  7710  001102  0100               	movlb	0	; () banked
  7711  001104  65D4               	cpfsgt	UI@i_447& (0+255),b
  7712  001106  D001               	goto	l7740
  7713  001108  D00C               	goto	l7744
  7714  00110A                     l7740:
  7715                           
  7716                           ; BSR set to: 0
  7717  00110A  0E68               	movlw	104
  7718  00110C  0100               	movlb	0	; () banked
  7719  00110E  6FC4               	movwf	??_UI& (0+255),b
  7720  001110  0EE4               	movlw	228
  7721  001112                     u7527:
  7722  001112  2EE8               	decfsz	wreg,f,c
  7723  001114  D7FE               	bra	u7527
  7724  001116  2FC4               	decfsz	??_UI& (0+255),f,b
  7725  001118  D7FC               	bra	u7527
  7726  00111A  F000               	nop	
  7727  00111C  0100               	movlb	0	; () banked
  7728  00111E  2BD4               	incf	UI@i_447& (0+255),f,b
  7729  001120  D7EF               	goto	l7736
  7730  001122                     l7744:
  7731                           
  7732                           ; BSR set to: 0
  7733  001122  0100               	movlb	0	; () banked
  7734  001124  51F6               	movf	_logstate& (0+255),w,b
  7735  001126  0100               	movlb	0	; () banked
  7736  001128  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7737  00112A  B4D8               	btfsc	status,2,c
  7738  00112C  0012               	return	
  7739                           
  7740                           ; BSR set to: 0
  7741                           ;UI.c: 206: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7742                           
  7743                           ; BSR set to: 0
  7744                           
  7745                           ; BSR set to: 0
  7746  00112E  0E00               	movlw	0
  7747  001130  0100               	movlb	0	; () banked
  7748  001132  6FD5               	movwf	UI@i_448& (0+255),b
  7749  001134                     l7750:
  7750                           
  7751                           ; BSR set to: 0
  7752  001134  0E63               	movlw	99
  7753  001136  0100               	movlb	0	; () banked
  7754  001138  65D5               	cpfsgt	UI@i_448& (0+255),b
  7755  00113A  D001               	goto	l7754
  7756  00113C  D00C               	goto	l7758
  7757  00113E                     l7754:
  7758                           
  7759                           ; BSR set to: 0
  7760  00113E  0E68               	movlw	104
  7761  001140  0100               	movlb	0	; () banked
  7762  001142  6FC4               	movwf	??_UI& (0+255),b
  7763  001144  0EE4               	movlw	228
  7764  001146                     u7537:
  7765  001146  2EE8               	decfsz	wreg,f,c
  7766  001148  D7FE               	bra	u7537
  7767  00114A  2FC4               	decfsz	??_UI& (0+255),f,b
  7768  00114C  D7FC               	bra	u7537
  7769  00114E  F000               	nop	
  7770  001150  0100               	movlb	0	; () banked
  7771  001152  2BD5               	incf	UI@i_448& (0+255),f,b
  7772  001154  D7EF               	goto	l7750
  7773  001156                     l7758:
  7774                           
  7775                           ; BSR set to: 0
  7776  001156  0100               	movlb	0	; () banked
  7777  001158  51F6               	movf	_logstate& (0+255),w,b
  7778  00115A  0100               	movlb	0	; () banked
  7779  00115C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7780  00115E  B4D8               	btfsc	status,2,c
  7781  001160  0012               	return	
  7782  001162                     l7762:
  7783  001162  0100               	movlb	0	; () banked
  7784  001164  51F6               	movf	_logstate& (0+255),w,b
  7785  001166  0100               	movlb	0	; () banked
  7786  001168  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7787  00116A  B4D8               	btfsc	status,2,c
  7788  00116C  0012               	return	
  7789  00116E  D44A               	goto	l7458
  7790  001170                     __end_of_UI:
  7791                           	opt stack 0
  7792                           tblptru	equ	0xFF8
  7793                           tblptrh	equ	0xFF7
  7794                           tblptrl	equ	0xFF6
  7795                           tablat	equ	0xFF5
  7796                           prodh	equ	0xFF4
  7797                           prodl	equ	0xFF3
  7798                           intcon	equ	0xFF2
  7799                           intcon2	equ	0xFF1
  7800                           intcon3	equ	0xFF0
  7801                           postinc0	equ	0xFEE
  7802                           wreg	equ	0xFE8
  7803                           postdec1	equ	0xFE5
  7804                           fsr1l	equ	0xFE1
  7805                           indf2	equ	0xFDF
  7806                           postinc2	equ	0xFDE
  7807                           postdec2	equ	0xFDD
  7808                           fsr2h	equ	0xFDA
  7809                           fsr2l	equ	0xFD9
  7810                           status	equ	0xFD8
  7811                           
  7812 ;; *************** function _printRTC *****************
  7813 ;; Defined at:
  7814 ;;		line 63 in file "RTC.c"
  7815 ;; Parameters:    Size  Location     Type
  7816 ;;		None
  7817 ;; Auto vars:     Size  Location     Type
  7818 ;;  i               2   66[BANK0 ] int 
  7819 ;;  INT_time       14   46[BANK0 ] int [7]
  7820 ;;  month           4   62[BANK0 ] unsigned char [4]
  7821 ;;  RTC_month       2   60[BANK0 ] int 
  7822 ;; Return value:  Size  Location     Type
  7823 ;;                  1    wreg      void 
  7824 ;; Registers used:
  7825 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7826 ;; Tracked objects:
  7827 ;;		On entry : 0/0
  7828 ;;		On exit  : 0/0
  7829 ;;		Unchanged: 0/0
  7830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7832 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7833 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7834 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7835 ;;Total ram usage:       25 bytes
  7836 ;; Hardware stack levels used:    1
  7837 ;; Hardware stack levels required when called:   10
  7838 ;; This function calls:
  7839 ;;		_getRTC
  7840 ;;		_lcdInst
  7841 ;;		_printf
  7842 ;;		_strcpy
  7843 ;; This function is called by:
  7844 ;;		_UI
  7845 ;;		_change_state_to_menu_start
  7846 ;; This function uses a non-reentrant model
  7847 ;;
  7848                           
  7849                           	psect	text24
  7850  001FA0                     __ptext24:
  7851                           	opt stack 0
  7852  001FA0                     _printRTC:
  7853                           	opt stack 18
  7854                           
  7855                           ;RTC.c: 64: getRTC();
  7856                           
  7857                           ; BSR set to: 0
  7858                           ;incstack = 0
  7859  001FA0  EC1D  F01D         	call	_getRTC	;wreg free
  7860                           
  7861                           ;RTC.c: 65: char month[] = "MMM";
  7862  001FA4  C133  F0BE         	movff	printRTC@F3216,printRTC@month
  7863  001FA8  C134  F0BF         	movff	printRTC@F3216+1,printRTC@month+1
  7864  001FAC  C135  F0C0         	movff	printRTC@F3216+2,printRTC@month+2
  7865  001FB0  C136  F0C1         	movff	printRTC@F3216+3,printRTC@month+3
  7866                           
  7867                           ;RTC.c: 66: int INT_time[7];
  7868                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  7869  001FB4  0E00               	movlw	0
  7870  001FB6  0100               	movlb	0	; () banked
  7871  001FB8  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  7872  001FBA  0E00               	movlw	0
  7873  001FBC  6FC2               	movwf	printRTC@i& (0+255),b
  7874                           
  7875                           ; BSR set to: 0
  7876  001FBE  0100               	movlb	0	; () banked
  7877  001FC0  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7878  001FC2  D008               	goto	l5868
  7879  001FC4  0100               	movlb	0	; () banked
  7880  001FC6  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7881  001FC8  E146               	bnz	l602
  7882  001FCA  0E07               	movlw	7
  7883  001FCC  0100               	movlb	0	; () banked
  7884  001FCE  5DC2               	subwf	printRTC@i& (0+255),w,b
  7885  001FD0  B0D8               	btfsc	status,0,c
  7886  001FD2  D041               	goto	l602
  7887  001FD4                     l5868:
  7888                           
  7889                           ; BSR set to: 0
  7890                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  7891  001FD4  0E24               	movlw	low _time
  7892  001FD6  0100               	movlb	0	; () banked
  7893  001FD8  25C2               	addwf	printRTC@i& (0+255),w,b
  7894  001FDA  6ED9               	movwf	fsr2l,c
  7895  001FDC  0E01               	movlw	high _time
  7896  001FDE  0100               	movlb	0	; () banked
  7897  001FE0  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7898  001FE2  6EDA               	movwf	fsr2h,c
  7899  001FE4  50DF               	movf	indf2,w,c
  7900  001FE6  0100               	movlb	0	; () banked
  7901  001FE8  6FAB               	movwf	??_printRTC& (0+255),b
  7902  001FEA  0100               	movlb	0	; () banked
  7903  001FEC  3BAB               	swapf	??_printRTC& (0+255),f,b
  7904  001FEE  0E0F               	movlw	15
  7905  001FF0  17AB               	andwf	??_printRTC& (0+255),f,b
  7906  001FF2  0E0F               	movlw	15
  7907  001FF4  0100               	movlb	0	; () banked
  7908  001FF6  17AB               	andwf	??_printRTC& (0+255),f,b
  7909  001FF8  0100               	movlb	0	; () banked
  7910  001FFA  51AB               	movf	??_printRTC& (0+255),w,b
  7911  001FFC  0D0A               	mullw	10
  7912  001FFE  0E24               	movlw	low _time
  7913  002000  0100               	movlb	0	; () banked
  7914  002002  25C2               	addwf	printRTC@i& (0+255),w,b
  7915  002004  6ED9               	movwf	fsr2l,c
  7916  002006  0E01               	movlw	high _time
  7917  002008  0100               	movlb	0	; () banked
  7918  00200A  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7919  00200C  6EDA               	movwf	fsr2h,c
  7920  00200E  50DF               	movf	indf2,w,c
  7921  002010  0B0F               	andlw	15
  7922  002012  0100               	movlb	0	; () banked
  7923  002014  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  7924  002016  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  7925  002018  50F3               	movf	prodl,w,c
  7926  00201A  0100               	movlb	0	; () banked
  7927  00201C  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  7928  00201E  50F4               	movf	prodh,w,c
  7929  002020  0100               	movlb	0	; () banked
  7930  002022  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  7931  002024  90D8               	bcf	status,0,c
  7932  002026  0100               	movlb	0	; () banked
  7933  002028  35C2               	rlcf	printRTC@i& (0+255),w,b
  7934  00202A  6ED9               	movwf	fsr2l,c
  7935  00202C  0100               	movlb	0	; () banked
  7936  00202E  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  7937  002030  6EDA               	movwf	fsr2h,c
  7938  002032  0EAE               	movlw	low printRTC@INT_time
  7939  002034  26D9               	addwf	fsr2l,f,c
  7940  002036  0E00               	movlw	high printRTC@INT_time
  7941  002038  22DA               	addwfc	fsr2h,f,c
  7942  00203A  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  7943  00203E  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  7944                           
  7945                           ; BSR set to: 0
  7946  002042  0100               	movlb	0	; () banked
  7947  002044  4BC2               	infsnz	printRTC@i& (0+255),f,b
  7948  002046  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  7949                           
  7950                           ; BSR set to: 0
  7951  002048  0100               	movlb	0	; () banked
  7952  00204A  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7953  00204C  D7C3               	goto	l5868
  7954  00204E  0100               	movlb	0	; () banked
  7955  002050  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7956  002052  E101               	bnz	u4520
  7957  002054  D7BA               	goto	L6
  7958  002056                     u4520:
  7959  002056                     l602:
  7960                           
  7961                           ; BSR set to: 0
  7962                           ;RTC.c: 69: }
  7963                           ;RTC.c: 70: int RTC_month = INT_time[5];
  7964  002056  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  7965  00205A  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  7966                           
  7967                           ;RTC.c: 71: switch(RTC_month){
  7968  00205E  D0B4               	goto	l5900
  7969  002060                     l5874:
  7970                           
  7971                           ; BSR set to: 0
  7972                           ;RTC.c: 73: strcpy(month, "JAN");
  7973  002060  0EBE               	movlw	low printRTC@month
  7974  002062  0100               	movlb	0	; () banked
  7975  002064  6F80               	movwf	strcpy@to& (0+255),b
  7976  002066  0E00               	movlw	high printRTC@month
  7977  002068  0100               	movlb	0	; () banked
  7978  00206A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7979  00206C  0EDB               	movlw	low STR_8
  7980  00206E  0100               	movlb	0	; () banked
  7981  002070  6F82               	movwf	strcpy@from& (0+255),b
  7982  002072  0EFF               	movlw	high STR_8
  7983  002074  0100               	movlb	0	; () banked
  7984  002076  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7985  002078  EC92  F021         	call	_strcpy	;wreg free
  7986                           
  7987                           ;RTC.c: 74: break;
  7988  00207C  D0D4               	goto	l5902
  7989  00207E                     l5876:
  7990                           
  7991                           ;RTC.c: 76: strcpy(month, "FEB");
  7992  00207E  0EBE               	movlw	low printRTC@month
  7993  002080  0100               	movlb	0	; () banked
  7994  002082  6F80               	movwf	strcpy@to& (0+255),b
  7995  002084  0E00               	movlw	high printRTC@month
  7996  002086  0100               	movlb	0	; () banked
  7997  002088  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7998  00208A  0ECB               	movlw	low STR_9
  7999  00208C  0100               	movlb	0	; () banked
  8000  00208E  6F82               	movwf	strcpy@from& (0+255),b
  8001  002090  0EFF               	movlw	high STR_9
  8002  002092  0100               	movlb	0	; () banked
  8003  002094  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8004  002096  EC92  F021         	call	_strcpy	;wreg free
  8005                           
  8006                           ;RTC.c: 77: break;
  8007  00209A  D0C5               	goto	l5902
  8008  00209C                     l5878:
  8009                           
  8010                           ;RTC.c: 79: strcpy(month, "MAR");
  8011  00209C  0EBE               	movlw	low printRTC@month
  8012  00209E  0100               	movlb	0	; () banked
  8013  0020A0  6F80               	movwf	strcpy@to& (0+255),b
  8014  0020A2  0E00               	movlw	high printRTC@month
  8015  0020A4  0100               	movlb	0	; () banked
  8016  0020A6  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8017  0020A8  0EE7               	movlw	low STR_10
  8018  0020AA  0100               	movlb	0	; () banked
  8019  0020AC  6F82               	movwf	strcpy@from& (0+255),b
  8020  0020AE  0EFF               	movlw	high STR_10
  8021  0020B0  0100               	movlb	0	; () banked
  8022  0020B2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8023  0020B4  EC92  F021         	call	_strcpy	;wreg free
  8024                           
  8025                           ;RTC.c: 80: break;
  8026  0020B8  D0B6               	goto	l5902
  8027  0020BA                     l5880:
  8028                           
  8029                           ;RTC.c: 82: strcpy(month, "APR");
  8030  0020BA  0EBE               	movlw	low printRTC@month
  8031  0020BC  0100               	movlb	0	; () banked
  8032  0020BE  6F80               	movwf	strcpy@to& (0+255),b
  8033  0020C0  0E00               	movlw	high printRTC@month
  8034  0020C2  0100               	movlb	0	; () banked
  8035  0020C4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8036  0020C6  0EEB               	movlw	low STR_11
  8037  0020C8  0100               	movlb	0	; () banked
  8038  0020CA  6F82               	movwf	strcpy@from& (0+255),b
  8039  0020CC  0EFF               	movlw	high STR_11
  8040  0020CE  0100               	movlb	0	; () banked
  8041  0020D0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8042  0020D2  EC92  F021         	call	_strcpy	;wreg free
  8043                           
  8044                           ;RTC.c: 83: break;
  8045  0020D6  D0A7               	goto	l5902
  8046  0020D8                     l5882:
  8047                           
  8048                           ;RTC.c: 85: strcpy(month, "MAY");
  8049  0020D8  0EBE               	movlw	low printRTC@month
  8050  0020DA  0100               	movlb	0	; () banked
  8051  0020DC  6F80               	movwf	strcpy@to& (0+255),b
  8052  0020DE  0E00               	movlw	high printRTC@month
  8053  0020E0  0100               	movlb	0	; () banked
  8054  0020E2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8055  0020E4  0EFB               	movlw	low STR_12
  8056  0020E6  0100               	movlb	0	; () banked
  8057  0020E8  6F82               	movwf	strcpy@from& (0+255),b
  8058  0020EA  0EFF               	movlw	high STR_12
  8059  0020EC  0100               	movlb	0	; () banked
  8060  0020EE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8061  0020F0  EC92  F021         	call	_strcpy	;wreg free
  8062                           
  8063                           ;RTC.c: 86: break;
  8064  0020F4  D098               	goto	l5902
  8065  0020F6                     l5884:
  8066                           
  8067                           ;RTC.c: 88: strcpy(month, "JUN");
  8068  0020F6  0EBE               	movlw	low printRTC@month
  8069  0020F8  0100               	movlb	0	; () banked
  8070  0020FA  6F80               	movwf	strcpy@to& (0+255),b
  8071  0020FC  0E00               	movlw	high printRTC@month
  8072  0020FE  0100               	movlb	0	; () banked
  8073  002100  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8074  002102  0EDF               	movlw	low STR_13
  8075  002104  0100               	movlb	0	; () banked
  8076  002106  6F82               	movwf	strcpy@from& (0+255),b
  8077  002108  0EFF               	movlw	high STR_13
  8078  00210A  0100               	movlb	0	; () banked
  8079  00210C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8080  00210E  EC92  F021         	call	_strcpy	;wreg free
  8081                           
  8082                           ;RTC.c: 89: break;
  8083  002112  D089               	goto	l5902
  8084  002114                     l5886:
  8085                           
  8086                           ;RTC.c: 91: strcpy(month, "JUL");
  8087  002114  0EBE               	movlw	low printRTC@month
  8088  002116  0100               	movlb	0	; () banked
  8089  002118  6F80               	movwf	strcpy@to& (0+255),b
  8090  00211A  0E00               	movlw	high printRTC@month
  8091  00211C  0100               	movlb	0	; () banked
  8092  00211E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8093  002120  0ED7               	movlw	low STR_14
  8094  002122  0100               	movlb	0	; () banked
  8095  002124  6F82               	movwf	strcpy@from& (0+255),b
  8096  002126  0EFF               	movlw	high STR_14
  8097  002128  0100               	movlb	0	; () banked
  8098  00212A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8099  00212C  EC92  F021         	call	_strcpy	;wreg free
  8100                           
  8101                           ;RTC.c: 92: break;
  8102  002130  D07A               	goto	l5902
  8103  002132                     l5888:
  8104                           
  8105                           ;RTC.c: 94: strcpy(month, "AUG");
  8106  002132  0EBE               	movlw	low printRTC@month
  8107  002134  0100               	movlb	0	; () banked
  8108  002136  6F80               	movwf	strcpy@to& (0+255),b
  8109  002138  0E00               	movlw	high printRTC@month
  8110  00213A  0100               	movlb	0	; () banked
  8111  00213C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8112  00213E  0ED3               	movlw	low STR_15
  8113  002140  0100               	movlb	0	; () banked
  8114  002142  6F82               	movwf	strcpy@from& (0+255),b
  8115  002144  0EFF               	movlw	high STR_15
  8116  002146  0100               	movlb	0	; () banked
  8117  002148  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8118  00214A  EC92  F021         	call	_strcpy	;wreg free
  8119                           
  8120                           ;RTC.c: 95: break;
  8121  00214E  D06B               	goto	l5902
  8122  002150                     l5890:
  8123                           
  8124                           ;RTC.c: 97: strcpy(month, "SEP");
  8125  002150  0EBE               	movlw	low printRTC@month
  8126  002152  0100               	movlb	0	; () banked
  8127  002154  6F80               	movwf	strcpy@to& (0+255),b
  8128  002156  0E00               	movlw	high printRTC@month
  8129  002158  0100               	movlb	0	; () banked
  8130  00215A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8131  00215C  0EE3               	movlw	low STR_16
  8132  00215E  0100               	movlb	0	; () banked
  8133  002160  6F82               	movwf	strcpy@from& (0+255),b
  8134  002162  0EFF               	movlw	high STR_16
  8135  002164  0100               	movlb	0	; () banked
  8136  002166  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8137  002168  EC92  F021         	call	_strcpy	;wreg free
  8138                           
  8139                           ;RTC.c: 98: break;
  8140  00216C  D05C               	goto	l5902
  8141  00216E                     l5892:
  8142                           
  8143                           ;RTC.c: 100: strcpy(month, "OCT");
  8144  00216E  0EBE               	movlw	low printRTC@month
  8145  002170  0100               	movlb	0	; () banked
  8146  002172  6F80               	movwf	strcpy@to& (0+255),b
  8147  002174  0E00               	movlw	high printRTC@month
  8148  002176  0100               	movlb	0	; () banked
  8149  002178  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8150  00217A  0EF3               	movlw	low STR_17
  8151  00217C  0100               	movlb	0	; () banked
  8152  00217E  6F82               	movwf	strcpy@from& (0+255),b
  8153  002180  0EFF               	movlw	high STR_17
  8154  002182  0100               	movlb	0	; () banked
  8155  002184  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8156  002186  EC92  F021         	call	_strcpy	;wreg free
  8157                           
  8158                           ;RTC.c: 101: break;
  8159  00218A  D04D               	goto	l5902
  8160  00218C                     l5894:
  8161                           
  8162                           ;RTC.c: 103: strcpy(month, "NOV");
  8163  00218C  0EBE               	movlw	low printRTC@month
  8164  00218E  0100               	movlb	0	; () banked
  8165  002190  6F80               	movwf	strcpy@to& (0+255),b
  8166  002192  0E00               	movlw	high printRTC@month
  8167  002194  0100               	movlb	0	; () banked
  8168  002196  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8169  002198  0EF7               	movlw	low STR_18
  8170  00219A  0100               	movlb	0	; () banked
  8171  00219C  6F82               	movwf	strcpy@from& (0+255),b
  8172  00219E  0EFF               	movlw	high STR_18
  8173  0021A0  0100               	movlb	0	; () banked
  8174  0021A2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8175  0021A4  EC92  F021         	call	_strcpy	;wreg free
  8176                           
  8177                           ;RTC.c: 104: break;
  8178  0021A8  D03E               	goto	l5902
  8179  0021AA                     l5896:
  8180                           
  8181                           ;RTC.c: 106: strcpy(month, "DEC");
  8182  0021AA  0EBE               	movlw	low printRTC@month
  8183  0021AC  0100               	movlb	0	; () banked
  8184  0021AE  6F80               	movwf	strcpy@to& (0+255),b
  8185  0021B0  0E00               	movlw	high printRTC@month
  8186  0021B2  0100               	movlb	0	; () banked
  8187  0021B4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8188  0021B6  0ECF               	movlw	low STR_19
  8189  0021B8  0100               	movlb	0	; () banked
  8190  0021BA  6F82               	movwf	strcpy@from& (0+255),b
  8191  0021BC  0EFF               	movlw	high STR_19
  8192  0021BE  0100               	movlb	0	; () banked
  8193  0021C0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8194  0021C2  EC92  F021         	call	_strcpy	;wreg free
  8195                           
  8196                           ;RTC.c: 108: }
  8197                           
  8198                           ;RTC.c: 107: break;
  8199  0021C6  D02F               	goto	l5902
  8200  0021C8                     l5900:
  8201  0021C8  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  8202  0021CC  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  8203                           
  8204                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8205                           ; Switch size 1, requested type "space"
  8206                           ; Number of cases is 1, Range of values is 0 to 0
  8207                           ; switch strategies available:
  8208                           ; Name         Instructions Cycles
  8209                           ; simple_byte            4     3 (average)
  8210                           ;	Chosen strategy is simple_byte
  8211  0021D0  0100               	movlb	0	; () banked
  8212  0021D2  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  8213  0021D4  0A00               	xorlw	0	; case 0
  8214  0021D6  A4D8               	btfss	status,2,c
  8215  0021D8  D026               	goto	l5902
  8216                           
  8217                           ; BSR set to: 0
  8218                           ; Switch size 1, requested type "space"
  8219                           ; Number of cases is 12, Range of values is 1 to 12
  8220                           ; switch strategies available:
  8221                           ; Name         Instructions Cycles
  8222                           ; simple_byte           37    19 (average)
  8223                           ;	Chosen strategy is simple_byte
  8224  0021DA  0100               	movlb	0	; () banked
  8225  0021DC  51AB               	movf	??_printRTC& (0+255),w,b
  8226  0021DE  0A01               	xorlw	1	; case 1
  8227  0021E0  B4D8               	btfsc	status,2,c
  8228  0021E2  D73E               	goto	l5874
  8229  0021E4  0A03               	xorlw	3	; case 2
  8230  0021E6  B4D8               	btfsc	status,2,c
  8231  0021E8  D74A               	goto	l5876
  8232  0021EA  0A01               	xorlw	1	; case 3
  8233  0021EC  B4D8               	btfsc	status,2,c
  8234  0021EE  D756               	goto	l5878
  8235  0021F0  0A07               	xorlw	7	; case 4
  8236  0021F2  B4D8               	btfsc	status,2,c
  8237  0021F4  D762               	goto	l5880
  8238  0021F6  0A01               	xorlw	1	; case 5
  8239  0021F8  B4D8               	btfsc	status,2,c
  8240  0021FA  D76E               	goto	l5882
  8241  0021FC  0A03               	xorlw	3	; case 6
  8242  0021FE  B4D8               	btfsc	status,2,c
  8243  002200  D77A               	goto	l5884
  8244  002202  0A01               	xorlw	1	; case 7
  8245  002204  B4D8               	btfsc	status,2,c
  8246  002206  D786               	goto	l5886
  8247  002208  0A0F               	xorlw	15	; case 8
  8248  00220A  B4D8               	btfsc	status,2,c
  8249  00220C  D792               	goto	l5888
  8250  00220E  0A01               	xorlw	1	; case 9
  8251  002210  B4D8               	btfsc	status,2,c
  8252  002212  D79E               	goto	l5890
  8253  002214  0A03               	xorlw	3	; case 10
  8254  002216  B4D8               	btfsc	status,2,c
  8255  002218  D7AA               	goto	l5892
  8256  00221A  0A01               	xorlw	1	; case 11
  8257  00221C  B4D8               	btfsc	status,2,c
  8258  00221E  D7B6               	goto	l5894
  8259  002220  0A07               	xorlw	7	; case 12
  8260  002222  B4D8               	btfsc	status,2,c
  8261  002224  D7C2               	goto	l5896
  8262  002226                     l5902:
  8263                           
  8264                           ;RTC.c: 109: lcdInst(0b10000000);;
  8265  002226  0E80               	movlw	128
  8266  002228  EC26  F024         	call	_lcdInst
  8267                           
  8268                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  8269  00222C  0E2E               	movlw	low STR_21
  8270  00222E  0100               	movlb	0	; () banked
  8271  002230  6F8E               	movwf	printf@f& (0+255),b
  8272  002232  0EFB               	movlw	high STR_21
  8273  002234  0100               	movlb	0	; () banked
  8274  002236  6F8F               	movwf	(printf@f+1)& (0+255),b
  8275  002238  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  8276  00223C  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  8277  002240  0EBE               	movlw	low printRTC@month
  8278  002242  0100               	movlb	0	; () banked
  8279  002244  6F92               	movwf	(?_printf+4)& (0+255),b
  8280  002246  0E00               	movlw	high printRTC@month
  8281  002248  0100               	movlb	0	; () banked
  8282  00224A  6F93               	movwf	(?_printf+5)& (0+255),b
  8283  00224C  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  8284  002250  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  8285  002254  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  8286  002258  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  8287  00225C  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  8288  002260  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  8289  002264  ECB8  F008         	call	_printf	;wreg free
  8290  002268  0012               	return		;funcret
  8291  00226A                     __end_of_printRTC:
  8292                           	opt stack 0
  8293                           tblptru	equ	0xFF8
  8294                           tblptrh	equ	0xFF7
  8295                           tblptrl	equ	0xFF6
  8296                           tablat	equ	0xFF5
  8297                           prodh	equ	0xFF4
  8298                           prodl	equ	0xFF3
  8299                           intcon	equ	0xFF2
  8300                           intcon2	equ	0xFF1
  8301                           intcon3	equ	0xFF0
  8302                           postinc0	equ	0xFEE
  8303                           wreg	equ	0xFE8
  8304                           postdec1	equ	0xFE5
  8305                           fsr1l	equ	0xFE1
  8306                           indf2	equ	0xFDF
  8307                           postinc2	equ	0xFDE
  8308                           postdec2	equ	0xFDD
  8309                           fsr2h	equ	0xFDA
  8310                           fsr2l	equ	0xFD9
  8311                           status	equ	0xFD8
  8312                           
  8313 ;; *************** function _strcpy *****************
  8314 ;; Defined at:
  8315 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  8316 ;; Parameters:    Size  Location     Type
  8317 ;;  to              2    0[BANK0 ] PTR unsigned char 
  8318 ;;		 -> printRTC@month(4), UI@month(4), 
  8319 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  8320 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  8321 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  8322 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  8323 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  8324 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  8325 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  8326 ;;		 -> STR_8(4), 
  8327 ;; Auto vars:     Size  Location     Type
  8328 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  8329 ;;		 -> printRTC@month(4), UI@month(4), 
  8330 ;; Return value:  Size  Location     Type
  8331 ;;                  2    0[BANK0 ] PTR unsigned char 
  8332 ;; Registers used:
  8333 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8334 ;; Tracked objects:
  8335 ;;		On entry : 0/0
  8336 ;;		On exit  : 0/0
  8337 ;;		Unchanged: 0/0
  8338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8339 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8340 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8342 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8343 ;;Total ram usage:        6 bytes
  8344 ;; Hardware stack levels used:    1
  8345 ;; Hardware stack levels required when called:    7
  8346 ;; This function calls:
  8347 ;;		Nothing
  8348 ;; This function is called by:
  8349 ;;		_UI
  8350 ;;		_printRTC
  8351 ;; This function uses a non-reentrant model
  8352 ;;
  8353                           
  8354                           	psect	text25
  8355  004324                     __ptext25:
  8356                           	opt stack 0
  8357  004324                     _strcpy:
  8358                           	opt stack 20
  8359                           
  8360                           ;incstack = 0
  8361  004324  C080  F084         	movff	strcpy@to,strcpy@cp
  8362  004328  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  8363  00432C  D006               	goto	l5612
  8364  00432E                     l5610:
  8365  00432E  0100               	movlb	0	; () banked
  8366  004330  4B84               	infsnz	strcpy@cp& (0+255),f,b
  8367  004332  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  8368  004334  0100               	movlb	0	; () banked
  8369  004336  4B82               	infsnz	strcpy@from& (0+255),f,b
  8370  004338  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  8371  00433A                     l5612:
  8372  00433A  C082  FFF6         	movff	strcpy@from,tblptrl
  8373  00433E  C083  FFF7         	movff	strcpy@from+1,tblptrh
  8374  004342                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8375  004342  6AF8               	clrf	tblptru,c
  8376  004344                     	endif
  8377  004344                     	if	0	;tblptru may be non-zero
  8378  004344                     	endif
  8379  004344  C084  FFD9         	movff	strcpy@cp,fsr2l
  8380  004348  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  8381  00434C  0008               	tblrd		*
  8382  00434E  CFF5 FFDF          	movff	tablat,indf2
  8383  004352  50DF               	movf	indf2,w,c
  8384  004354  B4D8               	btfsc	status,2,c
  8385  004356  0012               	return	
  8386  004358  D7EA               	goto	l5610
  8387  00435A                     __end_of_strcpy:
  8388                           	opt stack 0
  8389                           tblptru	equ	0xFF8
  8390                           tblptrh	equ	0xFF7
  8391                           tblptrl	equ	0xFF6
  8392                           tablat	equ	0xFF5
  8393                           prodh	equ	0xFF4
  8394                           prodl	equ	0xFF3
  8395                           intcon	equ	0xFF2
  8396                           intcon2	equ	0xFF1
  8397                           intcon3	equ	0xFF0
  8398                           postinc0	equ	0xFEE
  8399                           wreg	equ	0xFE8
  8400                           postdec1	equ	0xFE5
  8401                           fsr1l	equ	0xFE1
  8402                           indf2	equ	0xFDF
  8403                           postinc2	equ	0xFDE
  8404                           postdec2	equ	0xFDD
  8405                           fsr2h	equ	0xFDA
  8406                           fsr2l	equ	0xFD9
  8407                           status	equ	0xFD8
  8408                           
  8409 ;; *************** function _getRTC *****************
  8410 ;; Defined at:
  8411 ;;		line 44 in file "RTC.c"
  8412 ;; Parameters:    Size  Location     Type
  8413 ;;		None
  8414 ;; Auto vars:     Size  Location     Type
  8415 ;;  i               2    3[BANK0 ] int 
  8416 ;; Return value:  Size  Location     Type
  8417 ;;                  1    wreg      void 
  8418 ;; Registers used:
  8419 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8420 ;; Tracked objects:
  8421 ;;		On entry : 0/0
  8422 ;;		On exit  : 0/0
  8423 ;;		Unchanged: 0/0
  8424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8426 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8428 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8429 ;;Total ram usage:        2 bytes
  8430 ;; Hardware stack levels used:    1
  8431 ;; Hardware stack levels required when called:    9
  8432 ;; This function calls:
  8433 ;;		_I2C_Master_Read
  8434 ;;		_I2C_Master_Start
  8435 ;;		_I2C_Master_Stop
  8436 ;;		_I2C_Master_Write
  8437 ;; This function is called by:
  8438 ;;		_printRTC
  8439 ;;		_initSortTimer
  8440 ;; This function uses a non-reentrant model
  8441 ;;
  8442                           
  8443                           	psect	text26
  8444  003A3A                     __ptext26:
  8445                           	opt stack 0
  8446  003A3A                     _getRTC:
  8447                           	opt stack 18
  8448                           
  8449                           ;RTC.c: 48: I2C_Master_Start();
  8450                           
  8451                           ;incstack = 0
  8452  003A3A  EC4C  F024         	call	_I2C_Master_Start	;wreg free
  8453                           
  8454                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  8455  003A3E  0E00               	movlw	0
  8456  003A40  0100               	movlb	0	; () banked
  8457  003A42  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8458  003A44  0ED0               	movlw	208
  8459  003A46  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8460  003A48  EC3A  F024         	call	_I2C_Master_Write	;wreg free
  8461                           
  8462                           ;RTC.c: 50: I2C_Master_Write(0x00);
  8463  003A4C  0E00               	movlw	0
  8464  003A4E  0100               	movlb	0	; () banked
  8465  003A50  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8466  003A52  0E00               	movlw	0
  8467  003A54  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8468  003A56  EC3A  F024         	call	_I2C_Master_Write	;wreg free
  8469                           
  8470                           ;RTC.c: 51: I2C_Master_Stop();
  8471  003A5A  EC48  F024         	call	_I2C_Master_Stop	;wreg free
  8472                           
  8473                           ;RTC.c: 54: I2C_Master_Start();
  8474  003A5E  EC4C  F024         	call	_I2C_Master_Start	;wreg free
  8475                           
  8476                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  8477  003A62  0E00               	movlw	0
  8478  003A64  0100               	movlb	0	; () banked
  8479  003A66  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8480  003A68  0ED1               	movlw	209
  8481  003A6A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8482  003A6C  EC3A  F024         	call	_I2C_Master_Write	;wreg free
  8483                           
  8484                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  8485  003A70  0E00               	movlw	0
  8486  003A72  0100               	movlb	0	; () banked
  8487  003A74  6F84               	movwf	(getRTC@i+1)& (0+255),b
  8488  003A76  0E00               	movlw	0
  8489  003A78  6F83               	movwf	getRTC@i& (0+255),b
  8490  003A7A                     l5618:
  8491                           
  8492                           ; BSR set to: 0
  8493  003A7A  0100               	movlb	0	; () banked
  8494  003A7C  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  8495  003A7E  D008               	goto	l5622
  8496  003A80  0100               	movlb	0	; () banked
  8497  003A82  5184               	movf	(getRTC@i+1)& (0+255),w,b
  8498  003A84  E115               	bnz	l5628
  8499  003A86  0E06               	movlw	6
  8500  003A88  0100               	movlb	0	; () banked
  8501  003A8A  5D83               	subwf	getRTC@i& (0+255),w,b
  8502  003A8C  B0D8               	btfsc	status,0,c
  8503  003A8E  D010               	goto	l5628
  8504  003A90                     l5622:
  8505                           
  8506                           ; BSR set to: 0
  8507                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  8508  003A90  0E24               	movlw	low _time
  8509  003A92  0100               	movlb	0	; () banked
  8510  003A94  2583               	addwf	getRTC@i& (0+255),w,b
  8511  003A96  6ED9               	movwf	fsr2l,c
  8512  003A98  0E01               	movlw	high _time
  8513  003A9A  0100               	movlb	0	; () banked
  8514  003A9C  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  8515  003A9E  6EDA               	movwf	fsr2h,c
  8516  003AA0  0E01               	movlw	1
  8517  003AA2  ECE9  F022         	call	_I2C_Master_Read
  8518  003AA6  6EDF               	movwf	indf2,c
  8519  003AA8  0100               	movlb	0	; () banked
  8520  003AAA  4B83               	infsnz	getRTC@i& (0+255),f,b
  8521  003AAC  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  8522  003AAE  D7E5               	goto	l5618
  8523  003AB0                     l5628:
  8524                           
  8525                           ; BSR set to: 0
  8526                           ;RTC.c: 58: }
  8527                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  8528  003AB0  0E00               	movlw	0
  8529  003AB2  ECE9  F022         	call	_I2C_Master_Read
  8530  003AB6  0101               	movlb	1	; () banked
  8531  003AB8  6F2A               	movwf	(_time+6)& (0+255),b
  8532                           
  8533                           ;RTC.c: 60: I2C_Master_Stop();
  8534  003ABA  EC48  F024         	call	_I2C_Master_Stop	;wreg free
  8535  003ABE  0012               	return		;funcret
  8536  003AC0                     __end_of_getRTC:
  8537                           	opt stack 0
  8538                           tblptru	equ	0xFF8
  8539                           tblptrh	equ	0xFF7
  8540                           tblptrl	equ	0xFF6
  8541                           tablat	equ	0xFF5
  8542                           prodh	equ	0xFF4
  8543                           prodl	equ	0xFF3
  8544                           intcon	equ	0xFF2
  8545                           intcon2	equ	0xFF1
  8546                           intcon3	equ	0xFF0
  8547                           postinc0	equ	0xFEE
  8548                           wreg	equ	0xFE8
  8549                           postdec1	equ	0xFE5
  8550                           fsr1l	equ	0xFE1
  8551                           indf2	equ	0xFDF
  8552                           postinc2	equ	0xFDE
  8553                           postdec2	equ	0xFDD
  8554                           fsr2h	equ	0xFDA
  8555                           fsr2l	equ	0xFD9
  8556                           status	equ	0xFD8
  8557                           
  8558 ;; *************** function _I2C_Master_Write *****************
  8559 ;; Defined at:
  8560 ;;		line 49 in file "I2C.c"
  8561 ;; Parameters:    Size  Location     Type
  8562 ;;  d               2    1[BANK0 ] unsigned int 
  8563 ;; Auto vars:     Size  Location     Type
  8564 ;;		None
  8565 ;; Return value:  Size  Location     Type
  8566 ;;                  1    wreg      void 
  8567 ;; Registers used:
  8568 ;;		wreg, status,2, status,0, cstack
  8569 ;; Tracked objects:
  8570 ;;		On entry : 0/0
  8571 ;;		On exit  : 0/0
  8572 ;;		Unchanged: 0/0
  8573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8574 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8577 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8578 ;;Total ram usage:        2 bytes
  8579 ;; Hardware stack levels used:    1
  8580 ;; Hardware stack levels required when called:    8
  8581 ;; This function calls:
  8582 ;;		_I2C_Master_Wait
  8583 ;; This function is called by:
  8584 ;;		_loadRTC
  8585 ;;		_getRTC
  8586 ;; This function uses a non-reentrant model
  8587 ;;
  8588                           
  8589                           	psect	text27
  8590  004874                     __ptext27:
  8591                           	opt stack 0
  8592  004874                     _I2C_Master_Write:
  8593                           	opt stack 18
  8594                           
  8595                           ;I2C.c: 51: I2C_Master_Wait();
  8596                           
  8597                           ;incstack = 0
  8598  004874  EC0B  F024         	call	_I2C_Master_Wait	;wreg free
  8599                           
  8600                           ;I2C.c: 52: SSPBUF = d;
  8601  004878  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  8602  00487C  0012               	return		;funcret
  8603  00487E                     __end_of_I2C_Master_Write:
  8604                           	opt stack 0
  8605                           tblptru	equ	0xFF8
  8606                           tblptrh	equ	0xFF7
  8607                           tblptrl	equ	0xFF6
  8608                           tablat	equ	0xFF5
  8609                           prodh	equ	0xFF4
  8610                           prodl	equ	0xFF3
  8611                           intcon	equ	0xFF2
  8612                           intcon2	equ	0xFF1
  8613                           intcon3	equ	0xFF0
  8614                           postinc0	equ	0xFEE
  8615                           wreg	equ	0xFE8
  8616                           postdec1	equ	0xFE5
  8617                           fsr1l	equ	0xFE1
  8618                           indf2	equ	0xFDF
  8619                           postinc2	equ	0xFDE
  8620                           postdec2	equ	0xFDD
  8621                           fsr2h	equ	0xFDA
  8622                           fsr2l	equ	0xFD9
  8623                           status	equ	0xFD8
  8624                           
  8625 ;; *************** function _I2C_Master_Stop *****************
  8626 ;; Defined at:
  8627 ;;		line 43 in file "I2C.c"
  8628 ;; Parameters:    Size  Location     Type
  8629 ;;		None
  8630 ;; Auto vars:     Size  Location     Type
  8631 ;;		None
  8632 ;; Return value:  Size  Location     Type
  8633 ;;                  1    wreg      void 
  8634 ;; Registers used:
  8635 ;;		wreg, status,2, status,0, cstack
  8636 ;; Tracked objects:
  8637 ;;		On entry : 0/0
  8638 ;;		On exit  : 0/0
  8639 ;;		Unchanged: 0/0
  8640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8642 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8644 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8645 ;;Total ram usage:        0 bytes
  8646 ;; Hardware stack levels used:    1
  8647 ;; Hardware stack levels required when called:    8
  8648 ;; This function calls:
  8649 ;;		_I2C_Master_Wait
  8650 ;; This function is called by:
  8651 ;;		_loadRTC
  8652 ;;		_getRTC
  8653 ;; This function uses a non-reentrant model
  8654 ;;
  8655                           
  8656                           	psect	text28
  8657  004890                     __ptext28:
  8658                           	opt stack 0
  8659  004890                     _I2C_Master_Stop:
  8660                           	opt stack 18
  8661                           
  8662                           ;I2C.c: 45: I2C_Master_Wait();
  8663                           
  8664                           ;incstack = 0
  8665  004890  EC0B  F024         	call	_I2C_Master_Wait	;wreg free
  8666                           
  8667                           ;I2C.c: 46: PEN = 1;
  8668  004894  84C5               	bsf	4037,2,c	;volatile
  8669  004896  0012               	return		;funcret
  8670  004898                     __end_of_I2C_Master_Stop:
  8671                           	opt stack 0
  8672                           tblptru	equ	0xFF8
  8673                           tblptrh	equ	0xFF7
  8674                           tblptrl	equ	0xFF6
  8675                           tablat	equ	0xFF5
  8676                           prodh	equ	0xFF4
  8677                           prodl	equ	0xFF3
  8678                           intcon	equ	0xFF2
  8679                           intcon2	equ	0xFF1
  8680                           intcon3	equ	0xFF0
  8681                           postinc0	equ	0xFEE
  8682                           wreg	equ	0xFE8
  8683                           postdec1	equ	0xFE5
  8684                           fsr1l	equ	0xFE1
  8685                           indf2	equ	0xFDF
  8686                           postinc2	equ	0xFDE
  8687                           postdec2	equ	0xFDD
  8688                           fsr2h	equ	0xFDA
  8689                           fsr2l	equ	0xFD9
  8690                           status	equ	0xFD8
  8691                           
  8692 ;; *************** function _I2C_Master_Start *****************
  8693 ;; Defined at:
  8694 ;;		line 31 in file "I2C.c"
  8695 ;; Parameters:    Size  Location     Type
  8696 ;;		None
  8697 ;; Auto vars:     Size  Location     Type
  8698 ;;		None
  8699 ;; Return value:  Size  Location     Type
  8700 ;;                  1    wreg      void 
  8701 ;; Registers used:
  8702 ;;		wreg, status,2, status,0, cstack
  8703 ;; Tracked objects:
  8704 ;;		On entry : 0/0
  8705 ;;		On exit  : 0/0
  8706 ;;		Unchanged: 0/0
  8707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8709 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8711 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8712 ;;Total ram usage:        0 bytes
  8713 ;; Hardware stack levels used:    1
  8714 ;; Hardware stack levels required when called:    8
  8715 ;; This function calls:
  8716 ;;		_I2C_Master_Wait
  8717 ;; This function is called by:
  8718 ;;		_loadRTC
  8719 ;;		_getRTC
  8720 ;; This function uses a non-reentrant model
  8721 ;;
  8722                           
  8723                           	psect	text29
  8724  004898                     __ptext29:
  8725                           	opt stack 0
  8726  004898                     _I2C_Master_Start:
  8727                           	opt stack 18
  8728                           
  8729                           ;I2C.c: 33: I2C_Master_Wait();
  8730                           
  8731                           ;incstack = 0
  8732  004898  EC0B  F024         	call	_I2C_Master_Wait	;wreg free
  8733                           
  8734                           ;I2C.c: 34: SEN = 1;
  8735  00489C  80C5               	bsf	4037,0,c	;volatile
  8736  00489E  0012               	return		;funcret
  8737  0048A0                     __end_of_I2C_Master_Start:
  8738                           	opt stack 0
  8739                           tblptru	equ	0xFF8
  8740                           tblptrh	equ	0xFF7
  8741                           tblptrl	equ	0xFF6
  8742                           tablat	equ	0xFF5
  8743                           prodh	equ	0xFF4
  8744                           prodl	equ	0xFF3
  8745                           intcon	equ	0xFF2
  8746                           intcon2	equ	0xFF1
  8747                           intcon3	equ	0xFF0
  8748                           postinc0	equ	0xFEE
  8749                           wreg	equ	0xFE8
  8750                           postdec1	equ	0xFE5
  8751                           fsr1l	equ	0xFE1
  8752                           indf2	equ	0xFDF
  8753                           postinc2	equ	0xFDE
  8754                           postdec2	equ	0xFDD
  8755                           fsr2h	equ	0xFDA
  8756                           fsr2l	equ	0xFD9
  8757                           status	equ	0xFD8
  8758                           
  8759 ;; *************** function _I2C_Master_Read *****************
  8760 ;; Defined at:
  8761 ;;		line 55 in file "I2C.c"
  8762 ;; Parameters:    Size  Location     Type
  8763 ;;  a               1    wreg     unsigned char 
  8764 ;; Auto vars:     Size  Location     Type
  8765 ;;  a               1    1[BANK0 ] unsigned char 
  8766 ;;  temp            1    2[BANK0 ] unsigned char 
  8767 ;; Return value:  Size  Location     Type
  8768 ;;                  1    wreg      unsigned char 
  8769 ;; Registers used:
  8770 ;;		wreg, status,2, status,0, cstack
  8771 ;; Tracked objects:
  8772 ;;		On entry : 0/0
  8773 ;;		On exit  : 0/0
  8774 ;;		Unchanged: 0/0
  8775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8777 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8779 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8780 ;;Total ram usage:        2 bytes
  8781 ;; Hardware stack levels used:    1
  8782 ;; Hardware stack levels required when called:    8
  8783 ;; This function calls:
  8784 ;;		_I2C_Master_Wait
  8785 ;; This function is called by:
  8786 ;;		_getRTC
  8787 ;; This function uses a non-reentrant model
  8788 ;;
  8789                           
  8790                           	psect	text30
  8791  0045D2                     __ptext30:
  8792                           	opt stack 0
  8793  0045D2                     _I2C_Master_Read:
  8794                           	opt stack 18
  8795                           
  8796                           ;incstack = 0
  8797                           ;I2C_Master_Read@a stored from wreg
  8798  0045D2  0100               	movlb	0	; () banked
  8799  0045D4  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  8800                           
  8801                           ;I2C.c: 57: unsigned char temp;
  8802                           ;I2C.c: 58: I2C_Master_Wait();
  8803  0045D6  EC0B  F024         	call	_I2C_Master_Wait	;wreg free
  8804                           
  8805                           ;I2C.c: 59: RCEN = 1;
  8806  0045DA  86C5               	bsf	4037,3,c	;volatile
  8807                           
  8808                           ;I2C.c: 60: I2C_Master_Wait();
  8809  0045DC  EC0B  F024         	call	_I2C_Master_Wait	;wreg free
  8810                           
  8811                           ;I2C.c: 61: temp = SSPBUF;
  8812  0045E0  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  8813                           
  8814                           ;I2C.c: 62: I2C_Master_Wait();
  8815  0045E4  EC0B  F024         	call	_I2C_Master_Wait	;wreg free
  8816                           
  8817                           ;I2C.c: 63: ACKDT = (a)?0:1;
  8818  0045E8  0100               	movlb	0	; () banked
  8819  0045EA  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  8820  0045EC  0100               	movlb	0	; () banked
  8821  0045EE  A4D8               	btfss	status,2,c
  8822  0045F0  D002               	goto	u3610
  8823  0045F2  8AC5               	bsf	4037,5,c	;volatile
  8824  0045F4  D001               	goto	l5306
  8825  0045F6                     u3610:
  8826  0045F6  9AC5               	bcf	4037,5,c	;volatile
  8827  0045F8                     l5306:
  8828                           
  8829                           ;I2C.c: 64: ACKEN = 1;
  8830  0045F8  88C5               	bsf	4037,4,c	;volatile
  8831                           
  8832                           ;I2C.c: 65: return temp;
  8833  0045FA  0100               	movlb	0	; () banked
  8834  0045FC  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  8835  0045FE  0012               	return	
  8836  004600                     __end_of_I2C_Master_Read:
  8837                           	opt stack 0
  8838                           tblptru	equ	0xFF8
  8839                           tblptrh	equ	0xFF7
  8840                           tblptrl	equ	0xFF6
  8841                           tablat	equ	0xFF5
  8842                           prodh	equ	0xFF4
  8843                           prodl	equ	0xFF3
  8844                           intcon	equ	0xFF2
  8845                           intcon2	equ	0xFF1
  8846                           intcon3	equ	0xFF0
  8847                           postinc0	equ	0xFEE
  8848                           wreg	equ	0xFE8
  8849                           postdec1	equ	0xFE5
  8850                           fsr1l	equ	0xFE1
  8851                           indf2	equ	0xFDF
  8852                           postinc2	equ	0xFDE
  8853                           postdec2	equ	0xFDD
  8854                           fsr2h	equ	0xFDA
  8855                           fsr2l	equ	0xFD9
  8856                           status	equ	0xFD8
  8857                           
  8858 ;; *************** function _I2C_Master_Wait *****************
  8859 ;; Defined at:
  8860 ;;		line 26 in file "I2C.c"
  8861 ;; Parameters:    Size  Location     Type
  8862 ;;		None
  8863 ;; Auto vars:     Size  Location     Type
  8864 ;;		None
  8865 ;; Return value:  Size  Location     Type
  8866 ;;                  1    wreg      void 
  8867 ;; Registers used:
  8868 ;;		wreg, status,2, status,0
  8869 ;; Tracked objects:
  8870 ;;		On entry : 0/0
  8871 ;;		On exit  : 0/0
  8872 ;;		Unchanged: 0/0
  8873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8875 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8876 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8877 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8878 ;;Total ram usage:        1 bytes
  8879 ;; Hardware stack levels used:    1
  8880 ;; Hardware stack levels required when called:    7
  8881 ;; This function calls:
  8882 ;;		Nothing
  8883 ;; This function is called by:
  8884 ;;		_I2C_Master_Start
  8885 ;;		_I2C_Master_Stop
  8886 ;;		_I2C_Master_Write
  8887 ;;		_I2C_Master_Read
  8888 ;;		_I2C_Master_RepeatedStart
  8889 ;; This function uses a non-reentrant model
  8890 ;;
  8891                           
  8892                           	psect	text31
  8893  004816                     __ptext31:
  8894                           	opt stack 0
  8895  004816                     _I2C_Master_Wait:
  8896                           	opt stack 18
  8897  004816                     l66:
  8898  004816  B4C7               	btfsc	4039,2,c	;volatile
  8899  004818  D7FE               	goto	l66
  8900  00481A  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  8901  00481E  0E1F               	movlw	31
  8902  004820  0100               	movlb	0	; () banked
  8903  004822  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  8904  004824  B4D8               	btfsc	status,2,c
  8905  004826  0012               	return	
  8906  004828  D7F6               	goto	l66
  8907  00482A                     __end_of_I2C_Master_Wait:
  8908                           	opt stack 0
  8909                           tblptru	equ	0xFF8
  8910                           tblptrh	equ	0xFF7
  8911                           tblptrl	equ	0xFF6
  8912                           tablat	equ	0xFF5
  8913                           prodh	equ	0xFF4
  8914                           prodl	equ	0xFF3
  8915                           intcon	equ	0xFF2
  8916                           intcon2	equ	0xFF1
  8917                           intcon3	equ	0xFF0
  8918                           postinc0	equ	0xFEE
  8919                           wreg	equ	0xFE8
  8920                           postdec1	equ	0xFE5
  8921                           fsr1l	equ	0xFE1
  8922                           indf2	equ	0xFDF
  8923                           postinc2	equ	0xFDE
  8924                           postdec2	equ	0xFDD
  8925                           fsr2h	equ	0xFDA
  8926                           fsr2l	equ	0xFD9
  8927                           status	equ	0xFD8
  8928                           
  8929 ;; *************** function _change_state_to_menu_22 *****************
  8930 ;; Defined at:
  8931 ;;		line 498 in file "UI.c"
  8932 ;; Parameters:    Size  Location     Type
  8933 ;;		None
  8934 ;; Auto vars:     Size  Location     Type
  8935 ;;		None
  8936 ;; Return value:  Size  Location     Type
  8937 ;;                  1    wreg      void 
  8938 ;; Registers used:
  8939 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8940 ;; Tracked objects:
  8941 ;;		On entry : 0/0
  8942 ;;		On exit  : 0/0
  8943 ;;		Unchanged: 0/0
  8944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8948 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8949 ;;Total ram usage:        0 bytes
  8950 ;; Hardware stack levels used:    1
  8951 ;; Hardware stack levels required when called:   10
  8952 ;; This function calls:
  8953 ;;		_lcdInst
  8954 ;;		_printf
  8955 ;; This function is called by:
  8956 ;;		_UI
  8957 ;; This function uses a non-reentrant model
  8958 ;;
  8959                           
  8960                           	psect	text32
  8961  0042B4                     __ptext32:
  8962                           	opt stack 0
  8963  0042B4                     _change_state_to_menu_22:
  8964                           	opt stack 19
  8965                           
  8966                           ;UI.c: 499: cur_state = 22;
  8967                           
  8968                           ; BSR set to: 0
  8969                           ;incstack = 0
  8970  0042B4  0E00               	movlw	0
  8971  0042B6  0100               	movlb	0	; () banked
  8972  0042B8  6FE1               	movwf	(_cur_state+1)& (0+255),b
  8973  0042BA  0E16               	movlw	22
  8974  0042BC  6FE0               	movwf	_cur_state& (0+255),b
  8975                           
  8976                           ; BSR set to: 0
  8977                           ;UI.c: 501: lcdInst(0b10000000);;
  8978  0042BE  0E80               	movlw	128
  8979  0042C0  EC26  F024         	call	_lcdInst
  8980                           
  8981                           ;UI.c: 502: printf("2. SORT        <");
  8982  0042C4  0EC4               	movlw	low STR_34
  8983  0042C6  0100               	movlb	0	; () banked
  8984  0042C8  6F8E               	movwf	printf@f& (0+255),b
  8985  0042CA  0EFD               	movlw	high STR_34
  8986  0042CC  0100               	movlb	0	; () banked
  8987  0042CE  6F8F               	movwf	(printf@f+1)& (0+255),b
  8988  0042D0  ECB8  F008         	call	_printf	;wreg free
  8989                           
  8990                           ;UI.c: 503: lcdInst(0b11000000);;
  8991  0042D4  0EC0               	movlw	192
  8992  0042D6  EC26  F024         	call	_lcdInst
  8993                           
  8994                           ;UI.c: 504: printf("3. LOGS         ");
  8995  0042DA  0E09               	movlw	low STR_36
  8996  0042DC  0100               	movlb	0	; () banked
  8997  0042DE  6F8E               	movwf	printf@f& (0+255),b
  8998  0042E0  0EFD               	movlw	high STR_36
  8999  0042E2  0100               	movlb	0	; () banked
  9000  0042E4  6F8F               	movwf	(printf@f+1)& (0+255),b
  9001  0042E6  ECB8  F008         	call	_printf	;wreg free
  9002  0042EA  0012               	return		;funcret
  9003  0042EC                     __end_of_change_state_to_menu_22:
  9004                           	opt stack 0
  9005                           tblptru	equ	0xFF8
  9006                           tblptrh	equ	0xFF7
  9007                           tblptrl	equ	0xFF6
  9008                           tablat	equ	0xFF5
  9009                           prodh	equ	0xFF4
  9010                           prodl	equ	0xFF3
  9011                           intcon	equ	0xFF2
  9012                           intcon2	equ	0xFF1
  9013                           intcon3	equ	0xFF0
  9014                           postinc0	equ	0xFEE
  9015                           wreg	equ	0xFE8
  9016                           postdec1	equ	0xFE5
  9017                           fsr1l	equ	0xFE1
  9018                           indf2	equ	0xFDF
  9019                           postinc2	equ	0xFDE
  9020                           postdec2	equ	0xFDD
  9021                           fsr2h	equ	0xFDA
  9022                           fsr2l	equ	0xFD9
  9023                           status	equ	0xFD8
  9024                           
  9025 ;; *************** function _change_state_to_menu_12 *****************
  9026 ;; Defined at:
  9027 ;;		line 490 in file "UI.c"
  9028 ;; Parameters:    Size  Location     Type
  9029 ;;		None
  9030 ;; Auto vars:     Size  Location     Type
  9031 ;;		None
  9032 ;; Return value:  Size  Location     Type
  9033 ;;                  1    wreg      void 
  9034 ;; Registers used:
  9035 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9036 ;; Tracked objects:
  9037 ;;		On entry : 0/0
  9038 ;;		On exit  : 0/0
  9039 ;;		Unchanged: 0/0
  9040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9042 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9044 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9045 ;;Total ram usage:        0 bytes
  9046 ;; Hardware stack levels used:    1
  9047 ;; Hardware stack levels required when called:   10
  9048 ;; This function calls:
  9049 ;;		_lcdInst
  9050 ;;		_printf
  9051 ;; This function is called by:
  9052 ;;		_UI
  9053 ;; This function uses a non-reentrant model
  9054 ;;
  9055                           
  9056                           	psect	text33
  9057  0042EC                     __ptext33:
  9058                           	opt stack 0
  9059  0042EC                     _change_state_to_menu_12:
  9060                           	opt stack 19
  9061                           
  9062                           ;UI.c: 491: cur_state = 12;
  9063                           
  9064                           ;incstack = 0
  9065  0042EC  0E00               	movlw	0
  9066  0042EE  0100               	movlb	0	; () banked
  9067  0042F0  6FE1               	movwf	(_cur_state+1)& (0+255),b
  9068  0042F2  0E0C               	movlw	12
  9069  0042F4  6FE0               	movwf	_cur_state& (0+255),b
  9070                           
  9071                           ; BSR set to: 0
  9072                           ;UI.c: 493: lcdInst(0b10000000);;
  9073  0042F6  0E80               	movlw	128
  9074  0042F8  EC26  F024         	call	_lcdInst
  9075                           
  9076                           ;UI.c: 494: printf("1. DATE/TIME    ");
  9077  0042FC  0E2B               	movlw	low STR_33
  9078  0042FE  0100               	movlb	0	; () banked
  9079  004300  6F8E               	movwf	printf@f& (0+255),b
  9080  004302  0EFD               	movlw	high STR_33
  9081  004304  0100               	movlb	0	; () banked
  9082  004306  6F8F               	movwf	(printf@f+1)& (0+255),b
  9083  004308  ECB8  F008         	call	_printf	;wreg free
  9084                           
  9085                           ;UI.c: 495: lcdInst(0b11000000);;
  9086  00430C  0EC0               	movlw	192
  9087  00430E  EC26  F024         	call	_lcdInst
  9088                           
  9089                           ;UI.c: 496: printf("2. SORT        <");
  9090  004312  0EC4               	movlw	low STR_34
  9091  004314  0100               	movlb	0	; () banked
  9092  004316  6F8E               	movwf	printf@f& (0+255),b
  9093  004318  0EFD               	movlw	high STR_34
  9094  00431A  0100               	movlb	0	; () banked
  9095  00431C  6F8F               	movwf	(printf@f+1)& (0+255),b
  9096  00431E  ECB8  F008         	call	_printf	;wreg free
  9097  004322  0012               	return		;funcret
  9098  004324                     __end_of_change_state_to_menu_12:
  9099                           	opt stack 0
  9100                           tblptru	equ	0xFF8
  9101                           tblptrh	equ	0xFF7
  9102                           tblptrl	equ	0xFF6
  9103                           tablat	equ	0xFF5
  9104                           prodh	equ	0xFF4
  9105                           prodl	equ	0xFF3
  9106                           intcon	equ	0xFF2
  9107                           intcon2	equ	0xFF1
  9108                           intcon3	equ	0xFF0
  9109                           postinc0	equ	0xFEE
  9110                           wreg	equ	0xFE8
  9111                           postdec1	equ	0xFE5
  9112                           fsr1l	equ	0xFE1
  9113                           indf2	equ	0xFDF
  9114                           postinc2	equ	0xFDE
  9115                           postdec2	equ	0xFDD
  9116                           fsr2h	equ	0xFDA
  9117                           fsr2l	equ	0xFD9
  9118                           status	equ	0xFD8
  9119                           
  9120 ;; *************** function ___awmod *****************
  9121 ;; Defined at:
  9122 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  9123 ;; Parameters:    Size  Location     Type
  9124 ;;  dividend        2    0[BANK0 ] int 
  9125 ;;  divisor         2    2[BANK0 ] int 
  9126 ;; Auto vars:     Size  Location     Type
  9127 ;;  sign            1    5[BANK0 ] unsigned char 
  9128 ;;  counter         1    4[BANK0 ] unsigned char 
  9129 ;; Return value:  Size  Location     Type
  9130 ;;                  2    0[BANK0 ] int 
  9131 ;; Registers used:
  9132 ;;		wreg, status,2, status,0
  9133 ;; Tracked objects:
  9134 ;;		On entry : 0/0
  9135 ;;		On exit  : 0/0
  9136 ;;		Unchanged: 0/0
  9137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9138 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9139 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9141 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9142 ;;Total ram usage:        6 bytes
  9143 ;; Hardware stack levels used:    1
  9144 ;; Hardware stack levels required when called:    7
  9145 ;; This function calls:
  9146 ;;		Nothing
  9147 ;; This function is called by:
  9148 ;;		_UI
  9149 ;; This function uses a non-reentrant model
  9150 ;;
  9151                           
  9152                           	psect	text34
  9153  00390C                     __ptext34:
  9154                           	opt stack 0
  9155  00390C                     ___awmod:
  9156                           	opt stack 22
  9157                           
  9158                           ;incstack = 0
  9159  00390C  0E00               	movlw	0
  9160  00390E  0100               	movlb	0	; () banked
  9161  003910  6F85               	movwf	___awmod@sign& (0+255),b
  9162                           
  9163                           ; BSR set to: 0
  9164  003912  0100               	movlb	0	; () banked
  9165  003914  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  9166  003916  D008               	goto	l7368
  9167                           
  9168                           ; BSR set to: 0
  9169  003918  0100               	movlb	0	; () banked
  9170  00391A  6D80               	negf	___awmod@dividend& (0+255),b
  9171  00391C  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9172  00391E  B0D8               	btfsc	status,0,c
  9173  003920  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9174                           
  9175                           ; BSR set to: 0
  9176  003922  0E01               	movlw	1
  9177  003924  0100               	movlb	0	; () banked
  9178  003926  6F85               	movwf	___awmod@sign& (0+255),b
  9179  003928                     l7368:
  9180                           
  9181                           ; BSR set to: 0
  9182  003928  0100               	movlb	0	; () banked
  9183  00392A  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9184  00392C  D005               	goto	l7372
  9185                           
  9186                           ; BSR set to: 0
  9187  00392E  0100               	movlb	0	; () banked
  9188  003930  6D82               	negf	___awmod@divisor& (0+255),b
  9189  003932  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  9190  003934  B0D8               	btfsc	status,0,c
  9191  003936  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  9192  003938                     l7372:
  9193                           
  9194                           ; BSR set to: 0
  9195  003938  0100               	movlb	0	; () banked
  9196  00393A  5182               	movf	___awmod@divisor& (0+255),w,b
  9197  00393C  0100               	movlb	0	; () banked
  9198  00393E  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  9199  003940  B4D8               	btfsc	status,2,c
  9200  003942  D026               	goto	l7388
  9201                           
  9202                           ; BSR set to: 0
  9203  003944  0E01               	movlw	1
  9204  003946  0100               	movlb	0	; () banked
  9205  003948  6F84               	movwf	___awmod@counter& (0+255),b
  9206  00394A  D006               	goto	l7378
  9207  00394C                     l7376:
  9208                           
  9209                           ; BSR set to: 0
  9210  00394C  0100               	movlb	0	; () banked
  9211  00394E  90D8               	bcf	status,0,c
  9212  003950  3782               	rlcf	___awmod@divisor& (0+255),f,b
  9213  003952  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  9214  003954  0100               	movlb	0	; () banked
  9215  003956  2B84               	incf	___awmod@counter& (0+255),f,b
  9216  003958                     l7378:
  9217                           
  9218                           ; BSR set to: 0
  9219  003958  0100               	movlb	0	; () banked
  9220  00395A  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9221  00395C  D7F7               	goto	l7376
  9222  00395E                     l7380:
  9223                           
  9224                           ; BSR set to: 0
  9225  00395E  0100               	movlb	0	; () banked
  9226  003960  5182               	movf	___awmod@divisor& (0+255),w,b
  9227  003962  0100               	movlb	0	; () banked
  9228  003964  5D80               	subwf	___awmod@dividend& (0+255),w,b
  9229  003966  0100               	movlb	0	; () banked
  9230  003968  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9231  00396A  0100               	movlb	0	; () banked
  9232  00396C  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  9233  00396E  A0D8               	btfss	status,0,c
  9234  003970  D008               	goto	l7384
  9235                           
  9236                           ; BSR set to: 0
  9237  003972  0100               	movlb	0	; () banked
  9238  003974  5182               	movf	___awmod@divisor& (0+255),w,b
  9239  003976  0100               	movlb	0	; () banked
  9240  003978  5F80               	subwf	___awmod@dividend& (0+255),f,b
  9241  00397A  0100               	movlb	0	; () banked
  9242  00397C  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9243  00397E  0100               	movlb	0	; () banked
  9244  003980  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  9245  003982                     l7384:
  9246                           
  9247                           ; BSR set to: 0
  9248  003982  0100               	movlb	0	; () banked
  9249  003984  90D8               	bcf	status,0,c
  9250  003986  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  9251  003988  3382               	rrcf	___awmod@divisor& (0+255),f,b
  9252                           
  9253                           ; BSR set to: 0
  9254  00398A  0100               	movlb	0	; () banked
  9255  00398C  2F84               	decfsz	___awmod@counter& (0+255),f,b
  9256  00398E  D7E7               	goto	l7380
  9257  003990                     l7388:
  9258                           
  9259                           ; BSR set to: 0
  9260  003990  0100               	movlb	0	; () banked
  9261  003992  5185               	movf	___awmod@sign& (0+255),w,b
  9262  003994  0100               	movlb	0	; () banked
  9263  003996  B4D8               	btfsc	status,2,c
  9264  003998  D005               	goto	l7392
  9265                           
  9266                           ; BSR set to: 0
  9267  00399A  0100               	movlb	0	; () banked
  9268  00399C  6D80               	negf	___awmod@dividend& (0+255),b
  9269  00399E  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9270  0039A0  B0D8               	btfsc	status,0,c
  9271  0039A2  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9272  0039A4                     l7392:
  9273                           
  9274                           ; BSR set to: 0
  9275  0039A4  C080  F080         	movff	___awmod@dividend,?___awmod
  9276  0039A8  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  9277  0039AC  0012               	return	
  9278  0039AE                     __end_of___awmod:
  9279                           	opt stack 0
  9280                           tblptru	equ	0xFF8
  9281                           tblptrh	equ	0xFF7
  9282                           tblptrl	equ	0xFF6
  9283                           tablat	equ	0xFF5
  9284                           prodh	equ	0xFF4
  9285                           prodl	equ	0xFF3
  9286                           intcon	equ	0xFF2
  9287                           intcon2	equ	0xFF1
  9288                           intcon3	equ	0xFF0
  9289                           postinc0	equ	0xFEE
  9290                           wreg	equ	0xFE8
  9291                           postdec1	equ	0xFE5
  9292                           fsr1l	equ	0xFE1
  9293                           indf2	equ	0xFDF
  9294                           postinc2	equ	0xFDE
  9295                           postdec2	equ	0xFDD
  9296                           fsr2h	equ	0xFDA
  9297                           fsr2l	equ	0xFD9
  9298                           status	equ	0xFD8
  9299                           
  9300 ;; *************** function ___awdiv *****************
  9301 ;; Defined at:
  9302 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  9303 ;; Parameters:    Size  Location     Type
  9304 ;;  dividend        2    6[BANK0 ] int 
  9305 ;;  divisor         2    8[BANK0 ] int 
  9306 ;; Auto vars:     Size  Location     Type
  9307 ;;  quotient        2   12[BANK0 ] int 
  9308 ;;  sign            1   11[BANK0 ] unsigned char 
  9309 ;;  counter         1   10[BANK0 ] unsigned char 
  9310 ;; Return value:  Size  Location     Type
  9311 ;;                  2    6[BANK0 ] int 
  9312 ;; Registers used:
  9313 ;;		wreg, status,2, status,0
  9314 ;; Tracked objects:
  9315 ;;		On entry : 0/0
  9316 ;;		On exit  : 0/0
  9317 ;;		Unchanged: 0/0
  9318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9319 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9320 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9322 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9323 ;;Total ram usage:        8 bytes
  9324 ;; Hardware stack levels used:    1
  9325 ;; Hardware stack levels required when called:    7
  9326 ;; This function calls:
  9327 ;;		Nothing
  9328 ;; This function is called by:
  9329 ;;		_UI
  9330 ;; This function uses a non-reentrant model
  9331 ;;
  9332                           
  9333                           	psect	text35
  9334  0036E8                     __ptext35:
  9335                           	opt stack 0
  9336  0036E8                     ___awdiv:
  9337                           	opt stack 22
  9338                           
  9339                           ; BSR set to: 0
  9340                           ;incstack = 0
  9341  0036E8  0E00               	movlw	0
  9342  0036EA  0100               	movlb	0	; () banked
  9343  0036EC  6F8B               	movwf	___awdiv@sign& (0+255),b
  9344                           
  9345                           ; BSR set to: 0
  9346  0036EE  0100               	movlb	0	; () banked
  9347  0036F0  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9348  0036F2  D008               	goto	l7324
  9349                           
  9350                           ; BSR set to: 0
  9351  0036F4  0100               	movlb	0	; () banked
  9352  0036F6  6D88               	negf	___awdiv@divisor& (0+255),b
  9353  0036F8  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  9354  0036FA  B0D8               	btfsc	status,0,c
  9355  0036FC  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  9356                           
  9357                           ; BSR set to: 0
  9358  0036FE  0E01               	movlw	1
  9359  003700  0100               	movlb	0	; () banked
  9360  003702  6F8B               	movwf	___awdiv@sign& (0+255),b
  9361  003704                     l7324:
  9362                           
  9363                           ; BSR set to: 0
  9364  003704  0100               	movlb	0	; () banked
  9365  003706  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  9366  003708  D008               	goto	l7330
  9367                           
  9368                           ; BSR set to: 0
  9369  00370A  0100               	movlb	0	; () banked
  9370  00370C  6D86               	negf	___awdiv@dividend& (0+255),b
  9371  00370E  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  9372  003710  B0D8               	btfsc	status,0,c
  9373  003712  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  9374                           
  9375                           ; BSR set to: 0
  9376  003714  0E01               	movlw	1
  9377  003716  0100               	movlb	0	; () banked
  9378  003718  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  9379  00371A                     l7330:
  9380                           
  9381                           ; BSR set to: 0
  9382  00371A  0E00               	movlw	0
  9383  00371C  0100               	movlb	0	; () banked
  9384  00371E  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  9385  003720  0E00               	movlw	0
  9386  003722  6F8C               	movwf	___awdiv@quotient& (0+255),b
  9387                           
  9388                           ; BSR set to: 0
  9389  003724  0100               	movlb	0	; () banked
  9390  003726  5188               	movf	___awdiv@divisor& (0+255),w,b
  9391  003728  0100               	movlb	0	; () banked
  9392  00372A  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  9393  00372C  B4D8               	btfsc	status,2,c
  9394  00372E  D02C               	goto	l7352
  9395                           
  9396                           ; BSR set to: 0
  9397  003730  0E01               	movlw	1
  9398  003732  0100               	movlb	0	; () banked
  9399  003734  6F8A               	movwf	___awdiv@counter& (0+255),b
  9400  003736  D006               	goto	l7338
  9401  003738                     l7336:
  9402                           
  9403                           ; BSR set to: 0
  9404  003738  0100               	movlb	0	; () banked
  9405  00373A  90D8               	bcf	status,0,c
  9406  00373C  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  9407  00373E  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  9408  003740  0100               	movlb	0	; () banked
  9409  003742  2B8A               	incf	___awdiv@counter& (0+255),f,b
  9410  003744                     l7338:
  9411                           
  9412                           ; BSR set to: 0
  9413  003744  0100               	movlb	0	; () banked
  9414  003746  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9415  003748  D7F7               	goto	l7336
  9416  00374A                     l7340:
  9417                           
  9418                           ; BSR set to: 0
  9419  00374A  0100               	movlb	0	; () banked
  9420  00374C  90D8               	bcf	status,0,c
  9421  00374E  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  9422  003750  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  9423                           
  9424                           ; BSR set to: 0
  9425  003752  0100               	movlb	0	; () banked
  9426  003754  5188               	movf	___awdiv@divisor& (0+255),w,b
  9427  003756  0100               	movlb	0	; () banked
  9428  003758  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  9429  00375A  0100               	movlb	0	; () banked
  9430  00375C  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9431  00375E  0100               	movlb	0	; () banked
  9432  003760  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  9433  003762  A0D8               	btfss	status,0,c
  9434  003764  D00A               	goto	l7348
  9435                           
  9436                           ; BSR set to: 0
  9437  003766  0100               	movlb	0	; () banked
  9438  003768  5188               	movf	___awdiv@divisor& (0+255),w,b
  9439  00376A  0100               	movlb	0	; () banked
  9440  00376C  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  9441  00376E  0100               	movlb	0	; () banked
  9442  003770  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9443  003772  0100               	movlb	0	; () banked
  9444  003774  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  9445                           
  9446                           ; BSR set to: 0
  9447  003776  0100               	movlb	0	; () banked
  9448  003778  818C               	bsf	___awdiv@quotient& (0+255),0,b
  9449  00377A                     l7348:
  9450                           
  9451                           ; BSR set to: 0
  9452  00377A  0100               	movlb	0	; () banked
  9453  00377C  90D8               	bcf	status,0,c
  9454  00377E  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  9455  003780  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  9456                           
  9457                           ; BSR set to: 0
  9458  003782  0100               	movlb	0	; () banked
  9459  003784  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  9460  003786  D7E1               	goto	l7340
  9461  003788                     l7352:
  9462                           
  9463                           ; BSR set to: 0
  9464  003788  0100               	movlb	0	; () banked
  9465  00378A  518B               	movf	___awdiv@sign& (0+255),w,b
  9466  00378C  0100               	movlb	0	; () banked
  9467  00378E  B4D8               	btfsc	status,2,c
  9468  003790  D005               	goto	l7356
  9469                           
  9470                           ; BSR set to: 0
  9471  003792  0100               	movlb	0	; () banked
  9472  003794  6D8C               	negf	___awdiv@quotient& (0+255),b
  9473  003796  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  9474  003798  B0D8               	btfsc	status,0,c
  9475  00379A  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  9476  00379C                     l7356:
  9477                           
  9478                           ; BSR set to: 0
  9479  00379C  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  9480  0037A0  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  9481  0037A4  0012               	return	
  9482  0037A6                     __end_of___awdiv:
  9483                           	opt stack 0
  9484                           tblptru	equ	0xFF8
  9485                           tblptrh	equ	0xFF7
  9486                           tblptrl	equ	0xFF6
  9487                           tablat	equ	0xFF5
  9488                           prodh	equ	0xFF4
  9489                           prodl	equ	0xFF3
  9490                           intcon	equ	0xFF2
  9491                           intcon2	equ	0xFF1
  9492                           intcon3	equ	0xFF0
  9493                           postinc0	equ	0xFEE
  9494                           wreg	equ	0xFE8
  9495                           postdec1	equ	0xFE5
  9496                           fsr1l	equ	0xFE1
  9497                           indf2	equ	0xFDF
  9498                           postinc2	equ	0xFDE
  9499                           postdec2	equ	0xFDD
  9500                           fsr2h	equ	0xFDA
  9501                           fsr2l	equ	0xFD9
  9502                           status	equ	0xFD8
  9503                           
  9504 ;; *************** function _Test *****************
  9505 ;; Defined at:
  9506 ;;		line 29 in file "Test.c"
  9507 ;; Parameters:    Size  Location     Type
  9508 ;;		None
  9509 ;; Auto vars:     Size  Location     Type
  9510 ;;		None
  9511 ;; Return value:  Size  Location     Type
  9512 ;;                  1    wreg      void 
  9513 ;; Registers used:
  9514 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9515 ;; Tracked objects:
  9516 ;;		On entry : 0/0
  9517 ;;		On exit  : 0/0
  9518 ;;		Unchanged: 0/0
  9519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9521 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9522 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9523 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9524 ;;Total ram usage:        2 bytes
  9525 ;; Hardware stack levels used:    1
  9526 ;; Hardware stack levels required when called:   11
  9527 ;; This function calls:
  9528 ;;		_BothServos
  9529 ;;		_EEPROMTest
  9530 ;;		_PortTestA5
  9531 ;;		_PortTests
  9532 ;;		_PusherTest
  9533 ;;		_SpeedTest
  9534 ;;		_actuatorTest
  9535 ;;		_algorithmTest
  9536 ;;		_lcdInst
  9537 ;;		_printf
  9538 ;;		_sensorTest
  9539 ;; This function is called by:
  9540 ;;		_main
  9541 ;; This function uses a non-reentrant model
  9542 ;;
  9543                           
  9544                           	psect	text36
  9545  003362                     __ptext36:
  9546                           	opt stack 0
  9547  003362                     _Test:
  9548                           	opt stack 19
  9549  003362                     
  9550                           ;Test.c: 32: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
  9551  003362  0E01               	movlw	1
  9552  003364  EC26  F024         	call	_lcdInst
  9553  003368  0E68               	movlw	104
  9554  00336A  0100               	movlb	0	; () banked
  9555  00336C  6FC6               	movwf	??_Test& (0+255),b
  9556  00336E  0EE4               	movlw	228
  9557  003370                     u7547:
  9558  003370  2EE8               	decfsz	wreg,f,c
  9559  003372  D7FE               	bra	u7547
  9560  003374  2FC6               	decfsz	??_Test& (0+255),f,b
  9561  003376  D7FC               	bra	u7547
  9562  003378  F000               	nop	
  9563  00337A  0E80               	movlw	128
  9564  00337C  EC26  F024         	call	_lcdInst
  9565                           
  9566                           ;Test.c: 33: printf("1.ALG|2.SNR|3.AC");
  9567  003380  0E70               	movlw	low STR_68
  9568  003382  0100               	movlb	0	; () banked
  9569  003384  6F8E               	movwf	printf@f& (0+255),b
  9570  003386  0EFC               	movlw	high STR_68
  9571  003388  0100               	movlb	0	; () banked
  9572  00338A  6F8F               	movwf	(printf@f+1)& (0+255),b
  9573  00338C  ECB8  F008         	call	_printf	;wreg free
  9574                           
  9575                           ;Test.c: 34: lcdInst(0b11000000);;
  9576  003390  0EC0               	movlw	192
  9577  003392  EC26  F024         	call	_lcdInst
  9578                           
  9579                           ;Test.c: 35: printf("4.HI|5.TOG|6.EEP");
  9580  003396  0EA3               	movlw	low STR_69
  9581  003398  0100               	movlb	0	; () banked
  9582  00339A  6F8E               	movwf	printf@f& (0+255),b
  9583  00339C  0EFC               	movlw	high STR_69
  9584  00339E  0100               	movlb	0	; () banked
  9585  0033A0  6F8F               	movwf	(printf@f+1)& (0+255),b
  9586  0033A2  ECB8  F008         	call	_printf	;wreg free
  9587                           
  9588                           ;Test.c: 36: _delay((unsigned long)((100)*(32000000/4000.0)));
  9589  0033A6  0E05               	movlw	5
  9590  0033A8  0100               	movlb	0	; () banked
  9591  0033AA  6FC7               	movwf	(??_Test+1)& (0+255),b
  9592  0033AC  0E0F               	movlw	15
  9593  0033AE  0100               	movlb	0	; () banked
  9594  0033B0  6FC6               	movwf	??_Test& (0+255),b
  9595  0033B2  0EF1               	movlw	241
  9596  0033B4                     u7557:
  9597  0033B4  2EE8               	decfsz	wreg,f,c
  9598  0033B6  D7FE               	bra	u7557
  9599  0033B8  2FC6               	decfsz	??_Test& (0+255),f,b
  9600  0033BA  D7FC               	bra	u7557
  9601  0033BC  2FC7               	decfsz	(??_Test+1)& (0+255),f,b
  9602  0033BE  D7FA               	bra	u7557
  9603  0033C0                     l1044:
  9604  0033C0  A281               	btfss	3969,1,c	;volatile
  9605  0033C2  D7FE               	goto	l1044
  9606                           
  9607                           ;Test.c: 38: var = PORTB >> 4;
  9608  0033C4  CF81 F0C6          	movff	3969,??_Test	;volatile
  9609  0033C8  0100               	movlb	0	; () banked
  9610  0033CA  3BC6               	swapf	??_Test& (0+255),f,b
  9611  0033CC  0E0F               	movlw	15
  9612  0033CE  17C6               	andwf	??_Test& (0+255),f,b
  9613  0033D0  0100               	movlb	0	; () banked
  9614  0033D2  51C6               	movf	??_Test& (0+255),w,b
  9615  0033D4  0100               	movlb	0	; () banked
  9616  0033D6  6FFA               	movwf	_var& (0+255),b
  9617  0033D8  6BFB               	clrf	(_var+1)& (0+255),b
  9618                           
  9619                           ; BSR set to: 0
  9620                           ;Test.c: 39: var++;
  9621  0033DA  0100               	movlb	0	; () banked
  9622  0033DC  4BFA               	infsnz	_var& (0+255),f,b
  9623  0033DE  2BFB               	incf	(_var+1)& (0+255),f,b
  9624  0033E0                     l1047:
  9625  0033E0  A281               	btfss	3969,1,c	;volatile
  9626  0033E2  D01C               	goto	l8090
  9627  0033E4  D7FD               	goto	l1047
  9628  0033E6                     l8070:
  9629                           
  9630                           ;Test.c: 43: algorithmTest();
  9631  0033E6  ECA7  F01A         	call	_algorithmTest	;wreg free
  9632                           
  9633                           ;Test.c: 44: break;
  9634  0033EA  D7BB               	goto	l8052
  9635  0033EC                     l8072:
  9636                           
  9637                           ;Test.c: 46: sensorTest();
  9638  0033EC  EC51  F00E         	call	_sensorTest	;wreg free
  9639                           
  9640                           ;Test.c: 47: break;
  9641  0033F0  D7B8               	goto	l8052
  9642  0033F2                     l8074:
  9643                           
  9644                           ;Test.c: 49: actuatorTest();
  9645  0033F2  EC09  F000         	call	_actuatorTest	;wreg free
  9646                           
  9647                           ;Test.c: 50: break;
  9648  0033F6  D7B5               	goto	l8052
  9649  0033F8                     l8076:
  9650                           
  9651                           ;Test.c: 52: PortTestA5();
  9652  0033F8  ECCA  F01F         	call	_PortTestA5	;wreg free
  9653                           
  9654                           ;Test.c: 53: break;
  9655  0033FC  D7B2               	goto	l8052
  9656  0033FE                     l8078:
  9657                           
  9658                           ;Test.c: 56: SpeedTest();
  9659  0033FE  EC60  F01D         	call	_SpeedTest	;wreg free
  9660                           
  9661                           ;Test.c: 57: break;
  9662  003402  D7AF               	goto	l8052
  9663  003404                     l8080:
  9664                           
  9665                           ;Test.c: 59: EEPROMTest();
  9666  003404  EC58  F024         	call	_EEPROMTest	;wreg free
  9667                           
  9668                           ;Test.c: 60: break;
  9669  003408  D7AC               	goto	l8052
  9670  00340A                     l8082:
  9671                           
  9672                           ;Test.c: 62: PusherTest();
  9673  00340A  ECE4  F01D         	call	_PusherTest	;wreg free
  9674                           
  9675                           ;Test.c: 63: break;
  9676  00340E  D7A9               	goto	l8052
  9677  003410                     l8084:
  9678                           
  9679                           ;Test.c: 65: PortTests();
  9680  003410  ECA2  F01D         	call	_PortTests	;wreg free
  9681                           
  9682                           ;Test.c: 66: break;
  9683  003414  D7A6               	goto	l8052
  9684  003416                     l8086:
  9685                           
  9686                           ;Test.c: 68: BothServos();
  9687  003416  ECD4  F00A         	call	_BothServos	;wreg free
  9688                           
  9689                           ;Test.c: 72: }
  9690                           
  9691                           ;Test.c: 71: break;
  9692                           
  9693                           ;Test.c: 70: default:
  9694                           
  9695                           ;Test.c: 69: break;
  9696  00341A  D7A3               	goto	l8052
  9697  00341C                     l8090:
  9698  00341C  C0FA  F0C6         	movff	_var,??_Test
  9699  003420  C0FB  F0C7         	movff	_var+1,??_Test+1
  9700                           
  9701                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9702                           ; Switch size 1, requested type "space"
  9703                           ; Number of cases is 1, Range of values is 0 to 0
  9704                           ; switch strategies available:
  9705                           ; Name         Instructions Cycles
  9706                           ; simple_byte            4     3 (average)
  9707                           ;	Chosen strategy is simple_byte
  9708  003424  0100               	movlb	0	; () banked
  9709  003426  51C7               	movf	(??_Test+1)& (0+255),w,b
  9710  003428  0A00               	xorlw	0	; case 0
  9711  00342A  A4D8               	btfss	status,2,c
  9712  00342C  D79A               	goto	l8052
  9713                           
  9714                           ; BSR set to: 0
  9715                           ; Switch size 1, requested type "space"
  9716                           ; Number of cases is 9, Range of values is 1 to 10
  9717                           ; switch strategies available:
  9718                           ; Name         Instructions Cycles
  9719                           ; simple_byte           28    15 (average)
  9720                           ;	Chosen strategy is simple_byte
  9721  00342E  0100               	movlb	0	; () banked
  9722  003430  51C6               	movf	??_Test& (0+255),w,b
  9723  003432  0A01               	xorlw	1	; case 1
  9724  003434  B4D8               	btfsc	status,2,c
  9725  003436  D7D7               	goto	l8070
  9726  003438  0A03               	xorlw	3	; case 2
  9727  00343A  B4D8               	btfsc	status,2,c
  9728  00343C  D7D7               	goto	l8072
  9729  00343E  0A01               	xorlw	1	; case 3
  9730  003440  B4D8               	btfsc	status,2,c
  9731  003442  D7D7               	goto	l8074
  9732  003444  0A06               	xorlw	6	; case 5
  9733  003446  B4D8               	btfsc	status,2,c
  9734  003448  D7D7               	goto	l8076
  9735  00344A  0A03               	xorlw	3	; case 6
  9736  00344C  B4D8               	btfsc	status,2,c
  9737  00344E  D7D7               	goto	l8078
  9738  003450  0A01               	xorlw	1	; case 7
  9739  003452  B4D8               	btfsc	status,2,c
  9740  003454  D7D7               	goto	l8080
  9741  003456  0A0F               	xorlw	15	; case 8
  9742  003458  B4D8               	btfsc	status,2,c
  9743  00345A  D7D7               	goto	l8082
  9744  00345C  0A01               	xorlw	1	; case 9
  9745  00345E  B4D8               	btfsc	status,2,c
  9746  003460  D7D7               	goto	l8084
  9747  003462  0A03               	xorlw	3	; case 10
  9748  003464  B4D8               	btfsc	status,2,c
  9749  003466  D7D7               	goto	l8086
  9750                           
  9751                           ; BSR set to: 0
  9752                           
  9753                           ; BSR set to: 0
  9754  003468  D77C               	goto	l8052
  9755  00346A                     __end_of_Test:
  9756                           	opt stack 0
  9757                           tblptru	equ	0xFF8
  9758                           tblptrh	equ	0xFF7
  9759                           tblptrl	equ	0xFF6
  9760                           tablat	equ	0xFF5
  9761                           prodh	equ	0xFF4
  9762                           prodl	equ	0xFF3
  9763                           intcon	equ	0xFF2
  9764                           intcon2	equ	0xFF1
  9765                           intcon3	equ	0xFF0
  9766                           postinc0	equ	0xFEE
  9767                           wreg	equ	0xFE8
  9768                           postdec1	equ	0xFE5
  9769                           fsr1l	equ	0xFE1
  9770                           indf2	equ	0xFDF
  9771                           postinc2	equ	0xFDE
  9772                           postdec2	equ	0xFDD
  9773                           fsr2h	equ	0xFDA
  9774                           fsr2l	equ	0xFD9
  9775                           status	equ	0xFD8
  9776                           
  9777 ;; *************** function _sensorTest *****************
  9778 ;; Defined at:
  9779 ;;		line 120 in file "Test.c"
  9780 ;; Parameters:    Size  Location     Type
  9781 ;;		None
  9782 ;; Auto vars:     Size  Location     Type
  9783 ;;  res             2   45[BANK0 ] int 
  9784 ;; Return value:  Size  Location     Type
  9785 ;;                  1    wreg      void 
  9786 ;; Registers used:
  9787 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9788 ;; Tracked objects:
  9789 ;;		On entry : 0/0
  9790 ;;		On exit  : 0/0
  9791 ;;		Unchanged: 0/0
  9792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9794 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9795 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9796 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9797 ;;Total ram usage:        4 bytes
  9798 ;; Hardware stack levels used:    1
  9799 ;; Hardware stack levels required when called:   10
  9800 ;; This function calls:
  9801 ;;		_lcdInst
  9802 ;;		_printf
  9803 ;;		_readADC
  9804 ;;		_readMAG
  9805 ;; This function is called by:
  9806 ;;		_Test
  9807 ;; This function uses a non-reentrant model
  9808 ;;
  9809                           
  9810                           	psect	text37
  9811  001CA2                     __ptext37:
  9812                           	opt stack 0
  9813  001CA2                     _sensorTest:
  9814                           	opt stack 19
  9815                           
  9816                           ;Test.c: 122: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9817                           
  9818                           ; BSR set to: 0
  9819                           ;incstack = 0
  9820  001CA2  0E01               	movlw	1
  9821  001CA4  EC26  F024         	call	_lcdInst
  9822  001CA8  0E68               	movlw	104
  9823  001CAA  0100               	movlb	0	; () banked
  9824  001CAC  6FAB               	movwf	??_sensorTest& (0+255),b
  9825  001CAE  0EE4               	movlw	228
  9826  001CB0                     u7567:
  9827  001CB0  2EE8               	decfsz	wreg,f,c
  9828  001CB2  D7FE               	bra	u7567
  9829  001CB4  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9830  001CB6  D7FC               	bra	u7567
  9831  001CB8  F000               	nop	
  9832  001CBA  0E80               	movlw	128
  9833  001CBC  EC26  F024         	call	_lcdInst
  9834                           
  9835                           ;Test.c: 123: printf("SENSORS");
  9836  001CC0  0EAE               	movlw	low STR_77
  9837  001CC2  0100               	movlb	0	; () banked
  9838  001CC4  6F8E               	movwf	printf@f& (0+255),b
  9839  001CC6  0EFF               	movlw	high STR_77
  9840  001CC8  0100               	movlb	0	; () banked
  9841  001CCA  6F8F               	movwf	(printf@f+1)& (0+255),b
  9842  001CCC  ECB8  F008         	call	_printf	;wreg free
  9843                           
  9844                           ;Test.c: 124: lcdInst(0b11000000);;
  9845  001CD0  0EC0               	movlw	192
  9846  001CD2  EC26  F024         	call	_lcdInst
  9847                           
  9848                           ;Test.c: 125: printf("PUSH TO START");
  9849  001CD6  0E0B               	movlw	low STR_71
  9850  001CD8  0100               	movlb	0	; () banked
  9851  001CDA  6F8E               	movwf	printf@f& (0+255),b
  9852  001CDC  0EFF               	movlw	high STR_71
  9853  001CDE  0100               	movlb	0	; () banked
  9854  001CE0  6F8F               	movwf	(printf@f+1)& (0+255),b
  9855  001CE2  ECB8  F008         	call	_printf	;wreg free
  9856                           
  9857                           ;Test.c: 126: _delay((unsigned long)((100)*(32000000/4000.0)));
  9858  001CE6  0E05               	movlw	5
  9859  001CE8  0100               	movlb	0	; () banked
  9860  001CEA  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9861  001CEC  0E0F               	movlw	15
  9862  001CEE  0100               	movlb	0	; () banked
  9863  001CF0  6FAB               	movwf	??_sensorTest& (0+255),b
  9864  001CF2  0EF1               	movlw	241
  9865  001CF4                     u7577:
  9866  001CF4  2EE8               	decfsz	wreg,f,c
  9867  001CF6  D7FE               	bra	u7577
  9868  001CF8  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9869  001CFA  D7FC               	bra	u7577
  9870  001CFC  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9871  001CFE  D7FA               	bra	u7577
  9872  001D00                     l1076:
  9873  001D00  A281               	btfss	3969,1,c	;volatile
  9874  001D02  D7FE               	goto	l1076
  9875  001D04                     l1079:
  9876  001D04  B281               	btfsc	3969,1,c	;volatile
  9877  001D06  D7FE               	goto	l1079
  9878                           
  9879                           ;Test.c: 129: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9880  001D08  0E01               	movlw	1
  9881  001D0A  EC26  F024         	call	_lcdInst
  9882  001D0E  0E68               	movlw	104
  9883  001D10  0100               	movlb	0	; () banked
  9884  001D12  6FAB               	movwf	??_sensorTest& (0+255),b
  9885  001D14  0EE4               	movlw	228
  9886  001D16                     u7587:
  9887  001D16  2EE8               	decfsz	wreg,f,c
  9888  001D18  D7FE               	bra	u7587
  9889  001D1A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9890  001D1C  D7FC               	bra	u7587
  9891  001D1E  F000               	nop	
  9892  001D20  0E80               	movlw	128
  9893  001D22  EC26  F024         	call	_lcdInst
  9894                           
  9895                           ;Test.c: 134: printf("TST: IR SNSR");
  9896  001D26  0E35               	movlw	low STR_79
  9897  001D28  0100               	movlb	0	; () banked
  9898  001D2A  6F8E               	movwf	printf@f& (0+255),b
  9899  001D2C  0EFF               	movlw	high STR_79
  9900  001D2E  0100               	movlb	0	; () banked
  9901  001D30  6F8F               	movwf	(printf@f+1)& (0+255),b
  9902  001D32  ECB8  F008         	call	_printf	;wreg free
  9903                           
  9904                           ;Test.c: 135: _delay((unsigned long)((100)*(32000000/4000.0)));
  9905  001D36  0E05               	movlw	5
  9906  001D38  0100               	movlb	0	; () banked
  9907  001D3A  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9908  001D3C  0E0F               	movlw	15
  9909  001D3E  0100               	movlb	0	; () banked
  9910  001D40  6FAB               	movwf	??_sensorTest& (0+255),b
  9911  001D42  0EF1               	movlw	241
  9912  001D44                     u7597:
  9913  001D44  2EE8               	decfsz	wreg,f,c
  9914  001D46  D7FE               	bra	u7597
  9915  001D48  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9916  001D4A  D7FC               	bra	u7597
  9917  001D4C  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9918  001D4E  D7FA               	bra	u7597
  9919                           
  9920                           ;Test.c: 136: LATCbits.LATC5 = 1;
  9921  001D50  8A8B               	bsf	3979,5,c	;volatile
  9922                           
  9923                           ;Test.c: 137: while(PORTBbits.RB1 == 0){
  9924  001D52  D05C               	goto	l6666
  9925  001D54                     l6648:
  9926                           
  9927                           ;Test.c: 138: readADC(0);
  9928  001D54  0E00               	movlw	0
  9929  001D56  EC2D  F023         	call	_readADC
  9930                           
  9931                           ;Test.c: 139: int res = ADRESH<<8 | ADRESL;
  9932  001D5A  50C3               	movf	4035,w,c	;volatile
  9933  001D5C  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
  9934  001D60  0100               	movlb	0	; () banked
  9935  001D62  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
  9936  001D64  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
  9937  001D68  0100               	movlb	0	; () banked
  9938  001D6A  6BAB               	clrf	??_sensorTest& (0+255),b
  9939  001D6C  0100               	movlb	0	; () banked
  9940  001D6E  11AB               	iorwf	??_sensorTest& (0+255),w,b
  9941  001D70  0100               	movlb	0	; () banked
  9942  001D72  6FAD               	movwf	sensorTest@res& (0+255),b
  9943  001D74  0100               	movlb	0	; () banked
  9944  001D76  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
  9945  001D78  0100               	movlb	0	; () banked
  9946  001D7A  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
  9947                           
  9948                           ; BSR set to: 0
  9949                           ;Test.c: 140: IR_signal = (res > 1000) ? 1 : 0;
  9950  001D7C  0100               	movlb	0	; () banked
  9951  001D7E  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
  9952  001D80  D00A               	goto	u5100
  9953  001D82  0EE9               	movlw	233
  9954  001D84  0100               	movlb	0	; () banked
  9955  001D86  5DAD               	subwf	sensorTest@res& (0+255),w,b
  9956  001D88  0E03               	movlw	3
  9957  001D8A  0100               	movlb	0	; () banked
  9958  001D8C  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
  9959  001D8E  A0D8               	btfss	status,0,c
  9960  001D90  D002               	goto	u5100
  9961  001D92  0E01               	movlw	1
  9962  001D94  D001               	goto	u5110
  9963  001D96                     u5100:
  9964  001D96  0E00               	movlw	0
  9965  001D98                     u5110:
  9966  001D98  0100               	movlb	0	; () banked
  9967  001D9A  6FDA               	movwf	_IR_signal& (0+255),b
  9968  001D9C  6BDB               	clrf	(_IR_signal+1)& (0+255),b
  9969                           
  9970                           ;Test.c: 142: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9971  001D9E  0E01               	movlw	1
  9972  001DA0  EC26  F024         	call	_lcdInst
  9973  001DA4  0E68               	movlw	104
  9974  001DA6  0100               	movlb	0	; () banked
  9975  001DA8  6FAB               	movwf	??_sensorTest& (0+255),b
  9976  001DAA  0EE4               	movlw	228
  9977  001DAC                     u7607:
  9978  001DAC  2EE8               	decfsz	wreg,f,c
  9979  001DAE  D7FE               	bra	u7607
  9980  001DB0  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9981  001DB2  D7FC               	bra	u7607
  9982  001DB4  F000               	nop	
  9983  001DB6  0E80               	movlw	128
  9984  001DB8  EC26  F024         	call	_lcdInst
  9985                           
  9986                           ;Test.c: 143: printf("IR_signal: %d ", IR_signal);
  9987  001DBC  0E5A               	movlw	low STR_80
  9988  001DBE  0100               	movlb	0	; () banked
  9989  001DC0  6F8E               	movwf	printf@f& (0+255),b
  9990  001DC2  0EFE               	movlw	high STR_80
  9991  001DC4  0100               	movlb	0	; () banked
  9992  001DC6  6F8F               	movwf	(printf@f+1)& (0+255),b
  9993  001DC8  C0DA  F090         	movff	_IR_signal,?_printf+2
  9994  001DCC  C0DB  F091         	movff	_IR_signal+1,?_printf+3
  9995  001DD0  ECB8  F008         	call	_printf	;wreg free
  9996                           
  9997                           ;Test.c: 144: lcdInst(0b11000000);;
  9998  001DD4  0EC0               	movlw	192
  9999  001DD6  EC26  F024         	call	_lcdInst
 10000                           
 10001                           ;Test.c: 145: printf("%d", res);
 10002  001DDA  0E16               	movlw	low (STR_27+14)
 10003  001DDC  0100               	movlb	0	; () banked
 10004  001DDE  6F8E               	movwf	printf@f& (0+255),b
 10005  001DE0  0EFE               	movlw	high (STR_27+14)
 10006  001DE2  0100               	movlb	0	; () banked
 10007  001DE4  6F8F               	movwf	(printf@f+1)& (0+255),b
 10008  001DE6  C0AD  F090         	movff	sensorTest@res,?_printf+2
 10009  001DEA  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
 10010  001DEE  ECB8  F008         	call	_printf	;wreg free
 10011                           
 10012                           ;Test.c: 146: _delay((unsigned long)((100)*(32000000/4000.0)));
 10013  001DF2  0E05               	movlw	5
 10014  001DF4  0100               	movlb	0	; () banked
 10015  001DF6  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10016  001DF8  0E0F               	movlw	15
 10017  001DFA  0100               	movlb	0	; () banked
 10018  001DFC  6FAB               	movwf	??_sensorTest& (0+255),b
 10019  001DFE  0EF1               	movlw	241
 10020  001E00                     u7617:
 10021  001E00  2EE8               	decfsz	wreg,f,c
 10022  001E02  D7FE               	bra	u7617
 10023  001E04  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10024  001E06  D7FC               	bra	u7617
 10025  001E08  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10026  001E0A  D7FA               	bra	u7617
 10027  001E0C                     l6666:
 10028  001E0C  A281               	btfss	3969,1,c	;volatile
 10029  001E0E  D7A2               	goto	l6648
 10030                           
 10031                           ;Test.c: 147: }
 10032                           ;Test.c: 148: LATCbits.LATC5 = 0;
 10033  001E10  9A8B               	bcf	3979,5,c	;volatile
 10034                           
 10035                           ;Test.c: 155: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10036  001E12  0E01               	movlw	1
 10037  001E14  EC26  F024         	call	_lcdInst
 10038  001E18  0E68               	movlw	104
 10039  001E1A  0100               	movlb	0	; () banked
 10040  001E1C  6FAB               	movwf	??_sensorTest& (0+255),b
 10041  001E1E  0EE4               	movlw	228
 10042  001E20                     u7627:
 10043  001E20  2EE8               	decfsz	wreg,f,c
 10044  001E22  D7FE               	bra	u7627
 10045  001E24  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10046  001E26  D7FC               	bra	u7627
 10047  001E28  F000               	nop	
 10048  001E2A  0E80               	movlw	128
 10049  001E2C  EC26  F024         	call	_lcdInst
 10050                           
 10051                           ;Test.c: 156: printf("TST: MAGNETISM");
 10052  001E30  0E87               	movlw	low STR_82
 10053  001E32  0100               	movlb	0	; () banked
 10054  001E34  6F8E               	movwf	printf@f& (0+255),b
 10055  001E36  0EFE               	movlw	high STR_82
 10056  001E38  0100               	movlb	0	; () banked
 10057  001E3A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10058  001E3C  ECB8  F008         	call	_printf	;wreg free
 10059                           
 10060                           ;Test.c: 157: _delay((unsigned long)((100)*(32000000/4000.0)));
 10061  001E40  0E05               	movlw	5
 10062  001E42  0100               	movlb	0	; () banked
 10063  001E44  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10064  001E46  0E0F               	movlw	15
 10065  001E48  0100               	movlb	0	; () banked
 10066  001E4A  6FAB               	movwf	??_sensorTest& (0+255),b
 10067  001E4C  0EF1               	movlw	241
 10068  001E4E                     u7637:
 10069  001E4E  2EE8               	decfsz	wreg,f,c
 10070  001E50  D7FE               	bra	u7637
 10071  001E52  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10072  001E54  D7FC               	bra	u7637
 10073  001E56  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10074  001E58  D7FA               	bra	u7637
 10075                           
 10076                           ;Test.c: 158: while(PORTBbits.RB1 == 0){
 10077  001E5A  D021               	goto	l6684
 10078  001E5C                     l6678:
 10079                           
 10080                           ;Test.c: 159: readMAG();
 10081  001E5C  ECF0  F020         	call	_readMAG	;wreg free
 10082                           
 10083                           ;Test.c: 160: lcdInst(0b10000000);;
 10084  001E60  0E80               	movlw	128
 10085  001E62  EC26  F024         	call	_lcdInst
 10086                           
 10087                           ;Test.c: 161: lcdInst(0b11000000);;
 10088  001E66  0EC0               	movlw	192
 10089  001E68  EC26  F024         	call	_lcdInst
 10090                           
 10091                           ;Test.c: 162: printf("MAG_signal: %d ", MAG_signal);
 10092  001E6C  0E2A               	movlw	low STR_83
 10093  001E6E  0100               	movlb	0	; () banked
 10094  001E70  6F8E               	movwf	printf@f& (0+255),b
 10095  001E72  0EFE               	movlw	high STR_83
 10096  001E74  0100               	movlb	0	; () banked
 10097  001E76  6F8F               	movwf	(printf@f+1)& (0+255),b
 10098  001E78  C0DC  F090         	movff	_MAG_signal,?_printf+2
 10099  001E7C  C0DD  F091         	movff	_MAG_signal+1,?_printf+3
 10100  001E80  ECB8  F008         	call	_printf	;wreg free
 10101                           
 10102                           ;Test.c: 163: _delay((unsigned long)((100)*(32000000/4000.0)));
 10103  001E84  0E05               	movlw	5
 10104  001E86  0100               	movlb	0	; () banked
 10105  001E88  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10106  001E8A  0E0F               	movlw	15
 10107  001E8C  0100               	movlb	0	; () banked
 10108  001E8E  6FAB               	movwf	??_sensorTest& (0+255),b
 10109  001E90  0EF1               	movlw	241
 10110  001E92                     u7647:
 10111  001E92  2EE8               	decfsz	wreg,f,c
 10112  001E94  D7FE               	bra	u7647
 10113  001E96  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10114  001E98  D7FC               	bra	u7647
 10115  001E9A  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10116  001E9C  D7FA               	bra	u7647
 10117  001E9E                     l6684:
 10118  001E9E  A281               	btfss	3969,1,c	;volatile
 10119  001EA0  D7DD               	goto	l6678
 10120                           
 10121                           ;Test.c: 164: }
 10122                           ;Test.c: 169: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10123  001EA2  0E01               	movlw	1
 10124  001EA4  EC26  F024         	call	_lcdInst
 10125  001EA8  0E68               	movlw	104
 10126  001EAA  0100               	movlb	0	; () banked
 10127  001EAC  6FAB               	movwf	??_sensorTest& (0+255),b
 10128  001EAE  0EE4               	movlw	228
 10129  001EB0                     u7657:
 10130  001EB0  2EE8               	decfsz	wreg,f,c
 10131  001EB2  D7FE               	bra	u7657
 10132  001EB4  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10133  001EB6  D7FC               	bra	u7657
 10134  001EB8  F000               	nop	
 10135  001EBA  0E80               	movlw	128
 10136  001EBC  EC26  F024         	call	_lcdInst
 10137                           
 10138                           ;Test.c: 170: printf("TST: COND");
 10139  001EC0  0E87               	movlw	low STR_84
 10140  001EC2  0100               	movlb	0	; () banked
 10141  001EC4  6F8E               	movwf	printf@f& (0+255),b
 10142  001EC6  0EFF               	movlw	high STR_84
 10143  001EC8  0100               	movlb	0	; () banked
 10144  001ECA  6F8F               	movwf	(printf@f+1)& (0+255),b
 10145  001ECC  ECB8  F008         	call	_printf	;wreg free
 10146                           
 10147                           ;Test.c: 171: _delay((unsigned long)((100)*(32000000/4000.0)));
 10148  001ED0  0E05               	movlw	5
 10149  001ED2  0100               	movlb	0	; () banked
 10150  001ED4  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10151  001ED6  0E0F               	movlw	15
 10152  001ED8  0100               	movlb	0	; () banked
 10153  001EDA  6FAB               	movwf	??_sensorTest& (0+255),b
 10154  001EDC  0EF1               	movlw	241
 10155  001EDE                     u7667:
 10156  001EDE  2EE8               	decfsz	wreg,f,c
 10157  001EE0  D7FE               	bra	u7667
 10158  001EE2  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10159  001EE4  D7FC               	bra	u7667
 10160  001EE6  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10161  001EE8  D7FA               	bra	u7667
 10162  001EEA                     l6696:
 10163                           
 10164                           ;Test.c: 173: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10165  001EEA  0E01               	movlw	1
 10166  001EEC  EC26  F024         	call	_lcdInst
 10167  001EF0  0E68               	movlw	104
 10168  001EF2  0100               	movlb	0	; () banked
 10169  001EF4  6FAB               	movwf	??_sensorTest& (0+255),b
 10170  001EF6  0EE4               	movlw	228
 10171  001EF8                     u7677:
 10172  001EF8  2EE8               	decfsz	wreg,f,c
 10173  001EFA  D7FE               	bra	u7677
 10174  001EFC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10175  001EFE  D7FC               	bra	u7677
 10176  001F00  F000               	nop	
 10177  001F02  0E80               	movlw	128
 10178  001F04  EC26  F024         	call	_lcdInst
 10179                           
 10180                           ;Test.c: 174: printf("TST: COND");
 10181  001F08  0E87               	movlw	low STR_84
 10182  001F0A  0100               	movlb	0	; () banked
 10183  001F0C  6F8E               	movwf	printf@f& (0+255),b
 10184  001F0E  0EFF               	movlw	high STR_84
 10185  001F10  0100               	movlb	0	; () banked
 10186  001F12  6F8F               	movwf	(printf@f+1)& (0+255),b
 10187  001F14  ECB8  F008         	call	_printf	;wreg free
 10188                           
 10189                           ;Test.c: 175: while(PORTBbits.RB1 == 0){
 10190  001F18  D01B               	goto	l6708
 10191  001F1A                     l6704:
 10192                           
 10193                           ;Test.c: 179: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10194  001F1A  0E80               	movlw	128
 10195  001F1C  EC26  F024         	call	_lcdInst
 10196  001F20  0EC0               	movlw	192
 10197  001F22  EC26  F024         	call	_lcdInst
 10198                           
 10199                           ;Test.c: 180: printf("COND: %d", PORTAbits.RA2);
 10200  001F26  0EA5               	movlw	low STR_86
 10201  001F28  0100               	movlb	0	; () banked
 10202  001F2A  6F8E               	movwf	printf@f& (0+255),b
 10203  001F2C  0EFF               	movlw	high STR_86
 10204  001F2E  0100               	movlb	0	; () banked
 10205  001F30  6F8F               	movwf	(printf@f+1)& (0+255),b
 10206  001F32  A480               	btfss	3968,2,c	;volatile
 10207  001F34  D004               	goto	u5140
 10208  001F36  0100               	movlb	0	; () banked
 10209  001F38  6BAB               	clrf	??_sensorTest& (0+255),b
 10210  001F3A  2BAB               	incf	??_sensorTest& (0+255),f,b
 10211  001F3C  D002               	goto	u5148
 10212  001F3E                     u5140:
 10213  001F3E  0100               	movlb	0	; () banked
 10214  001F40  6BAB               	clrf	??_sensorTest& (0+255),b
 10215  001F42                     u5148:
 10216  001F42  0100               	movlb	0	; () banked
 10217  001F44  51AB               	movf	??_sensorTest& (0+255),w,b
 10218  001F46  0100               	movlb	0	; () banked
 10219  001F48  6F90               	movwf	(?_printf+2)& (0+255),b
 10220  001F4A  6B91               	clrf	(?_printf+3)& (0+255),b
 10221  001F4C  ECB8  F008         	call	_printf	;wreg free
 10222  001F50                     l6708:
 10223  001F50  A281               	btfss	3969,1,c	;volatile
 10224  001F52  D7E3               	goto	l6704
 10225                           
 10226                           ;Test.c: 181: }
 10227                           ;Test.c: 182: if(PORTB >> 4 == 0b1111){
 10228  001F54  3881               	swapf	3969,w,c	;volatile
 10229  001F56  0B0F               	andlw	15
 10230  001F58  0A0F               	xorlw	15
 10231  001F5A  B4D8               	btfsc	status,2,c
 10232  001F5C  0012               	return	
 10233                           
 10234                           ;Test.c: 185: else{
 10235                           ;Test.c: 186: LATAbits.LATA3 = 1;
 10236                           
 10237                           ;Test.c: 184: }
 10238                           
 10239                           ;Test.c: 183: break;
 10240  001F5E  8689               	bsf	3977,3,c	;volatile
 10241                           
 10242                           ;Test.c: 187: while(PORTBbits.RB1 == 1){
 10243  001F60  D01B               	goto	l6720
 10244  001F62                     l6716:
 10245                           
 10246                           ;Test.c: 189: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10247  001F62  0E80               	movlw	128
 10248  001F64  EC26  F024         	call	_lcdInst
 10249  001F68  0EC0               	movlw	192
 10250  001F6A  EC26  F024         	call	_lcdInst
 10251                           
 10252                           ;Test.c: 190: printf("COND: %d", PORTAbits.RA2);
 10253  001F6E  0EA5               	movlw	low STR_86
 10254  001F70  0100               	movlb	0	; () banked
 10255  001F72  6F8E               	movwf	printf@f& (0+255),b
 10256  001F74  0EFF               	movlw	high STR_86
 10257  001F76  0100               	movlb	0	; () banked
 10258  001F78  6F8F               	movwf	(printf@f+1)& (0+255),b
 10259  001F7A  A480               	btfss	3968,2,c	;volatile
 10260  001F7C  D004               	goto	u5170
 10261  001F7E  0100               	movlb	0	; () banked
 10262  001F80  6BAB               	clrf	??_sensorTest& (0+255),b
 10263  001F82  2BAB               	incf	??_sensorTest& (0+255),f,b
 10264  001F84  D002               	goto	u5178
 10265  001F86                     u5170:
 10266  001F86  0100               	movlb	0	; () banked
 10267  001F88  6BAB               	clrf	??_sensorTest& (0+255),b
 10268  001F8A                     u5178:
 10269  001F8A  0100               	movlb	0	; () banked
 10270  001F8C  51AB               	movf	??_sensorTest& (0+255),w,b
 10271  001F8E  0100               	movlb	0	; () banked
 10272  001F90  6F90               	movwf	(?_printf+2)& (0+255),b
 10273  001F92  6B91               	clrf	(?_printf+3)& (0+255),b
 10274  001F94  ECB8  F008         	call	_printf	;wreg free
 10275  001F98                     l6720:
 10276  001F98  B281               	btfsc	3969,1,c	;volatile
 10277  001F9A  D7E3               	goto	l6716
 10278                           
 10279                           ;Test.c: 191: }
 10280                           ;Test.c: 192: LATAbits.LATA3 = ~1;
 10281  001F9C  9689               	bcf	3977,3,c	;volatile
 10282  001F9E  D7A5               	goto	l6696
 10283  001FA0                     __end_of_sensorTest:
 10284                           	opt stack 0
 10285                           tblptru	equ	0xFF8
 10286                           tblptrh	equ	0xFF7
 10287                           tblptrl	equ	0xFF6
 10288                           tablat	equ	0xFF5
 10289                           prodh	equ	0xFF4
 10290                           prodl	equ	0xFF3
 10291                           intcon	equ	0xFF2
 10292                           intcon2	equ	0xFF1
 10293                           intcon3	equ	0xFF0
 10294                           postinc0	equ	0xFEE
 10295                           wreg	equ	0xFE8
 10296                           postdec1	equ	0xFE5
 10297                           fsr1l	equ	0xFE1
 10298                           indf2	equ	0xFDF
 10299                           postinc2	equ	0xFDE
 10300                           postdec2	equ	0xFDD
 10301                           fsr2h	equ	0xFDA
 10302                           fsr2l	equ	0xFD9
 10303                           status	equ	0xFD8
 10304                           
 10305 ;; *************** function _readMAG *****************
 10306 ;; Defined at:
 10307 ;;		line 29 in file "ADCFunctionality.c"
 10308 ;; Parameters:    Size  Location     Type
 10309 ;;		None
 10310 ;; Auto vars:     Size  Location     Type
 10311 ;;  res             2    4[BANK0 ] int 
 10312 ;; Return value:  Size  Location     Type
 10313 ;;                  1    wreg      void 
 10314 ;; Registers used:
 10315 ;;		wreg, status,2, status,0, cstack
 10316 ;; Tracked objects:
 10317 ;;		On entry : 0/0
 10318 ;;		On exit  : 0/0
 10319 ;;		Unchanged: 0/0
 10320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10322 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10323 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10324 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10325 ;;Total ram usage:        4 bytes
 10326 ;; Hardware stack levels used:    1
 10327 ;; Hardware stack levels required when called:    8
 10328 ;; This function calls:
 10329 ;;		_readADC
 10330 ;; This function is called by:
 10331 ;;		_getMAG
 10332 ;;		_sensorTest
 10333 ;; This function uses a non-reentrant model
 10334 ;;
 10335                           
 10336                           	psect	text38
 10337  0041E0                     __ptext38:
 10338                           	opt stack 0
 10339  0041E0                     _readMAG:
 10340                           	opt stack 19
 10341                           
 10342                           ;ADCFunctionality.c: 30: readADC(1);
 10343                           
 10344                           ;incstack = 0
 10345  0041E0  0E01               	movlw	1
 10346  0041E2  EC2D  F023         	call	_readADC
 10347                           
 10348                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 10349  0041E6  50C3               	movf	4035,w,c	;volatile
 10350  0041E8  CFC4 F082          	movff	4036,??_readMAG	;volatile
 10351  0041EC  0100               	movlb	0	; () banked
 10352  0041EE  6B83               	clrf	(??_readMAG+1)& (0+255),b
 10353  0041F0  C082  F083         	movff	??_readMAG,??_readMAG+1
 10354  0041F4  0100               	movlb	0	; () banked
 10355  0041F6  6B82               	clrf	??_readMAG& (0+255),b
 10356  0041F8  0100               	movlb	0	; () banked
 10357  0041FA  1182               	iorwf	??_readMAG& (0+255),w,b
 10358  0041FC  0100               	movlb	0	; () banked
 10359  0041FE  6F84               	movwf	readMAG@res& (0+255),b
 10360  004200  0100               	movlb	0	; () banked
 10361  004202  5183               	movf	(??_readMAG+1)& (0+255),w,b
 10362  004204  0100               	movlb	0	; () banked
 10363  004206  6F85               	movwf	(readMAG@res+1)& (0+255),b
 10364                           
 10365                           ; BSR set to: 0
 10366                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 10367  004208  0100               	movlb	0	; () banked
 10368  00420A  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 10369  00420C  D008               	goto	u3831
 10370  00420E  0100               	movlb	0	; () banked
 10371  004210  5185               	movf	(readMAG@res+1)& (0+255),w,b
 10372  004212  E107               	bnz	u3830
 10373  004214  0E96               	movlw	150
 10374  004216  0100               	movlb	0	; () banked
 10375  004218  5D84               	subwf	readMAG@res& (0+255),w,b
 10376  00421A  B0D8               	btfsc	status,0,c
 10377  00421C  D002               	goto	u3830
 10378  00421E                     u3831:
 10379  00421E  0E01               	movlw	1
 10380  004220  D001               	goto	u3840
 10381  004222                     u3830:
 10382  004222  0E00               	movlw	0
 10383  004224                     u3840:
 10384  004224  0100               	movlb	0	; () banked
 10385  004226  6FDC               	movwf	_MAG_signal& (0+255),b
 10386  004228  6BDD               	clrf	(_MAG_signal+1)& (0+255),b
 10387                           
 10388                           ; BSR set to: 0
 10389  00422A  0012               	return		;funcret
 10390  00422C                     __end_of_readMAG:
 10391                           	opt stack 0
 10392                           tblptru	equ	0xFF8
 10393                           tblptrh	equ	0xFF7
 10394                           tblptrl	equ	0xFF6
 10395                           tablat	equ	0xFF5
 10396                           prodh	equ	0xFF4
 10397                           prodl	equ	0xFF3
 10398                           intcon	equ	0xFF2
 10399                           intcon2	equ	0xFF1
 10400                           intcon3	equ	0xFF0
 10401                           postinc0	equ	0xFEE
 10402                           wreg	equ	0xFE8
 10403                           postdec1	equ	0xFE5
 10404                           fsr1l	equ	0xFE1
 10405                           indf2	equ	0xFDF
 10406                           postinc2	equ	0xFDE
 10407                           postdec2	equ	0xFDD
 10408                           fsr2h	equ	0xFDA
 10409                           fsr2l	equ	0xFD9
 10410                           status	equ	0xFD8
 10411                           
 10412 ;; *************** function _readADC *****************
 10413 ;; Defined at:
 10414 ;;		line 15 in file "ADCFunctionality.c"
 10415 ;; Parameters:    Size  Location     Type
 10416 ;;  channel         1    wreg     unsigned char 
 10417 ;; Auto vars:     Size  Location     Type
 10418 ;;  channel         1    1[BANK0 ] unsigned char 
 10419 ;; Return value:  Size  Location     Type
 10420 ;;                  1    wreg      void 
 10421 ;; Registers used:
 10422 ;;		wreg, status,2, status,0, cstack
 10423 ;; Tracked objects:
 10424 ;;		On entry : 0/0
 10425 ;;		On exit  : 0/0
 10426 ;;		Unchanged: 0/0
 10427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10429 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10430 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10431 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10432 ;;Total ram usage:        2 bytes
 10433 ;; Hardware stack levels used:    1
 10434 ;; Hardware stack levels required when called:    7
 10435 ;; This function calls:
 10436 ;;		Nothing
 10437 ;; This function is called by:
 10438 ;;		_readIR
 10439 ;;		_readMAG
 10440 ;;		_sensorTest
 10441 ;; This function uses a non-reentrant model
 10442 ;;
 10443                           
 10444                           	psect	text39
 10445  00465A                     __ptext39:
 10446                           	opt stack 0
 10447  00465A                     _readADC:
 10448                           	opt stack 19
 10449                           
 10450                           ; BSR set to: 0
 10451                           ;incstack = 0
 10452                           ;readADC@channel stored from wreg
 10453  00465A  0100               	movlb	0	; () banked
 10454  00465C  6F81               	movwf	readADC@channel& (0+255),b
 10455                           
 10456                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 10457  00465E  0100               	movlb	0	; () banked
 10458  004660  4581               	rlncf	readADC@channel& (0+255),w,b
 10459  004662  46E8               	rlncf	wreg,f,c
 10460  004664  0BFC               	andlw	252
 10461  004666  6EC2               	movwf	4034,c	;volatile
 10462                           
 10463                           ; BSR set to: 0
 10464                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 10465  004668  80C2               	bsf	4034,0,c	;volatile
 10466                           
 10467                           ; BSR set to: 0
 10468                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 10469  00466A  82C2               	bsf	4034,1,c	;volatile
 10470                           
 10471                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 10472  00466C  D009               	goto	l5284
 10473  00466E                     l5282:
 10474  00466E  0E34               	movlw	52
 10475  004670  0100               	movlb	0	; () banked
 10476  004672  6F80               	movwf	??_readADC& (0+255),b
 10477  004674  0EF1               	movlw	241
 10478  004676                     u7687:
 10479  004676  2EE8               	decfsz	wreg,f,c
 10480  004678  D7FE               	bra	u7687
 10481  00467A  2F80               	decfsz	??_readADC& (0+255),f,b
 10482  00467C  D7FC               	bra	u7687
 10483  00467E  D000               	nop2	
 10484  004680                     l5284:
 10485  004680  A2C2               	btfss	4034,1,c	;volatile
 10486  004682  0012               	return	
 10487  004684  D7F4               	goto	l5282
 10488  004686                     __end_of_readADC:
 10489                           	opt stack 0
 10490                           tblptru	equ	0xFF8
 10491                           tblptrh	equ	0xFF7
 10492                           tblptrl	equ	0xFF6
 10493                           tablat	equ	0xFF5
 10494                           prodh	equ	0xFF4
 10495                           prodl	equ	0xFF3
 10496                           intcon	equ	0xFF2
 10497                           intcon2	equ	0xFF1
 10498                           intcon3	equ	0xFF0
 10499                           postinc0	equ	0xFEE
 10500                           wreg	equ	0xFE8
 10501                           postdec1	equ	0xFE5
 10502                           fsr1l	equ	0xFE1
 10503                           indf2	equ	0xFDF
 10504                           postinc2	equ	0xFDE
 10505                           postdec2	equ	0xFDD
 10506                           fsr2h	equ	0xFDA
 10507                           fsr2l	equ	0xFD9
 10508                           status	equ	0xFD8
 10509                           
 10510 ;; *************** function _algorithmTest *****************
 10511 ;; Defined at:
 10512 ;;		line 76 in file "Test.c"
 10513 ;; Parameters:    Size  Location     Type
 10514 ;;		None
 10515 ;; Auto vars:     Size  Location     Type
 10516 ;;		None
 10517 ;; Return value:  Size  Location     Type
 10518 ;;                  1    wreg      void 
 10519 ;; Registers used:
 10520 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10521 ;; Tracked objects:
 10522 ;;		On entry : 0/0
 10523 ;;		On exit  : 0/0
 10524 ;;		Unchanged: 0/0
 10525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10527 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10528 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10529 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10530 ;;Total ram usage:        2 bytes
 10531 ;; Hardware stack levels used:    1
 10532 ;; Hardware stack levels required when called:   10
 10533 ;; This function calls:
 10534 ;;		_lcdInst
 10535 ;;		_printf
 10536 ;; This function is called by:
 10537 ;;		_Test
 10538 ;; This function uses a non-reentrant model
 10539 ;;
 10540                           
 10541                           	psect	text40
 10542  00354E                     __ptext40:
 10543                           	opt stack 0
 10544  00354E                     _algorithmTest:
 10545                           	opt stack 19
 10546                           
 10547                           ;Test.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10548                           
 10549                           ;incstack = 0
 10550  00354E  0E01               	movlw	1
 10551  003550  EC26  F024         	call	_lcdInst
 10552  003554  0E68               	movlw	104
 10553  003556  0100               	movlb	0	; () banked
 10554  003558  6FAB               	movwf	??_algorithmTest& (0+255),b
 10555  00355A  0EE4               	movlw	228
 10556  00355C                     u7697:
 10557  00355C  2EE8               	decfsz	wreg,f,c
 10558  00355E  D7FE               	bra	u7697
 10559  003560  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10560  003562  D7FC               	bra	u7697
 10561  003564  F000               	nop	
 10562  003566  0E80               	movlw	128
 10563  003568  EC26  F024         	call	_lcdInst
 10564                           
 10565                           ;Test.c: 79: printf("ALGORITHM TEST");
 10566  00356C  0ED2               	movlw	low STR_70
 10567  00356E  0100               	movlb	0	; () banked
 10568  003570  6F8E               	movwf	printf@f& (0+255),b
 10569  003572  0EFE               	movlw	high STR_70
 10570  003574  0100               	movlb	0	; () banked
 10571  003576  6F8F               	movwf	(printf@f+1)& (0+255),b
 10572  003578  ECB8  F008         	call	_printf	;wreg free
 10573                           
 10574                           ;Test.c: 80: lcdInst(0b11000000);;
 10575  00357C  0EC0               	movlw	192
 10576  00357E  EC26  F024         	call	_lcdInst
 10577                           
 10578                           ;Test.c: 81: printf("PUSH TO START");
 10579  003582  0E0B               	movlw	low STR_71
 10580  003584  0100               	movlb	0	; () banked
 10581  003586  6F8E               	movwf	printf@f& (0+255),b
 10582  003588  0EFF               	movlw	high STR_71
 10583  00358A  0100               	movlb	0	; () banked
 10584  00358C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10585  00358E  ECB8  F008         	call	_printf	;wreg free
 10586                           
 10587                           ;Test.c: 82: _delay((unsigned long)((100)*(32000000/4000.0)));
 10588  003592  0E05               	movlw	5
 10589  003594  0100               	movlb	0	; () banked
 10590  003596  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 10591  003598  0E0F               	movlw	15
 10592  00359A  0100               	movlb	0	; () banked
 10593  00359C  6FAB               	movwf	??_algorithmTest& (0+255),b
 10594  00359E  0EF1               	movlw	241
 10595  0035A0                     u7707:
 10596  0035A0  2EE8               	decfsz	wreg,f,c
 10597  0035A2  D7FE               	bra	u7707
 10598  0035A4  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10599  0035A6  D7FC               	bra	u7707
 10600  0035A8  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 10601  0035AA  D7FA               	bra	u7707
 10602  0035AC                     l1067:
 10603  0035AC  A281               	btfss	3969,1,c	;volatile
 10604  0035AE  D7FE               	goto	l1067
 10605  0035B0                     l1070:
 10606  0035B0  B281               	btfsc	3969,1,c	;volatile
 10607  0035B2  D7FE               	goto	l1070
 10608                           
 10609                           ;Test.c: 85: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10610  0035B4  0E01               	movlw	1
 10611  0035B6  EC26  F024         	call	_lcdInst
 10612  0035BA  0E68               	movlw	104
 10613  0035BC  0100               	movlb	0	; () banked
 10614  0035BE  6FAB               	movwf	??_algorithmTest& (0+255),b
 10615  0035C0  0EE4               	movlw	228
 10616  0035C2                     u7717:
 10617  0035C2  2EE8               	decfsz	wreg,f,c
 10618  0035C4  D7FE               	bra	u7717
 10619  0035C6  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10620  0035C8  D7FC               	bra	u7717
 10621  0035CA  F000               	nop	
 10622  0035CC  0E80               	movlw	128
 10623  0035CE  EC26  F024         	call	_lcdInst
 10624                           
 10625                           ;Test.c: 90: printf("ALG1: 9 POPNOTAB");
 10626  0035D2  0E5F               	movlw	low STR_72
 10627  0035D4  0100               	movlb	0	; () banked
 10628  0035D6  6F8E               	movwf	printf@f& (0+255),b
 10629  0035D8  0EFC               	movlw	high STR_72
 10630  0035DA  0100               	movlb	0	; () banked
 10631  0035DC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10632  0035DE  ECB8  F008         	call	_printf	;wreg free
 10633                           
 10634                           ;Test.c: 97: printf("ALG2: 12 CANS");
 10635  0035E2  0EEF               	movlw	low STR_73
 10636  0035E4  0100               	movlb	0	; () banked
 10637  0035E6  6F8E               	movwf	printf@f& (0+255),b
 10638  0035E8  0EFE               	movlw	high STR_73
 10639  0035EA  0100               	movlb	0	; () banked
 10640  0035EC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10641  0035EE  ECB8  F008         	call	_printf	;wreg free
 10642                           
 10643                           ;Test.c: 106: printf("ALG3: 1 CAN");
 10644  0035F2  0E4F               	movlw	low STR_74
 10645  0035F4  0100               	movlb	0	; () banked
 10646  0035F6  6F8E               	movwf	printf@f& (0+255),b
 10647  0035F8  0EFF               	movlw	high STR_74
 10648  0035FA  0100               	movlb	0	; () banked
 10649  0035FC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10650  0035FE  ECB8  F008         	call	_printf	;wreg free
 10651                           
 10652                           ;Test.c: 112: printf("ALG4: ALL CANS");
 10653  003602  0EB4               	movlw	low STR_75
 10654  003604  0100               	movlb	0	; () banked
 10655  003606  6F8E               	movwf	printf@f& (0+255),b
 10656  003608  0EFE               	movlw	high STR_75
 10657  00360A  0100               	movlb	0	; () banked
 10658  00360C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10659  00360E  ECB8  F008         	call	_printf	;wreg free
 10660                           
 10661                           ;Test.c: 117: printf("ALG5: NO CANS");
 10662  003612  0EFD               	movlw	low STR_76
 10663  003614  0100               	movlb	0	; () banked
 10664  003616  6F8E               	movwf	printf@f& (0+255),b
 10665  003618  0EFE               	movlw	high STR_76
 10666  00361A  0100               	movlb	0	; () banked
 10667  00361C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10668  00361E  ECB8  F008         	call	_printf	;wreg free
 10669  003622  0012               	return		;funcret
 10670  003624                     __end_of_algorithmTest:
 10671                           	opt stack 0
 10672                           tblptru	equ	0xFF8
 10673                           tblptrh	equ	0xFF7
 10674                           tblptrl	equ	0xFF6
 10675                           tablat	equ	0xFF5
 10676                           prodh	equ	0xFF4
 10677                           prodl	equ	0xFF3
 10678                           intcon	equ	0xFF2
 10679                           intcon2	equ	0xFF1
 10680                           intcon3	equ	0xFF0
 10681                           postinc0	equ	0xFEE
 10682                           wreg	equ	0xFE8
 10683                           postdec1	equ	0xFE5
 10684                           fsr1l	equ	0xFE1
 10685                           indf2	equ	0xFDF
 10686                           postinc2	equ	0xFDE
 10687                           postdec2	equ	0xFDD
 10688                           fsr2h	equ	0xFDA
 10689                           fsr2l	equ	0xFD9
 10690                           status	equ	0xFD8
 10691                           
 10692 ;; *************** function _actuatorTest *****************
 10693 ;; Defined at:
 10694 ;;		line 197 in file "Test.c"
 10695 ;; Parameters:    Size  Location     Type
 10696 ;;		None
 10697 ;; Auto vars:     Size  Location     Type
 10698 ;;  i               1   45[BANK0 ] unsigned char 
 10699 ;;  i               1   67[BANK0 ] unsigned char 
 10700 ;;  i               1   66[BANK0 ] unsigned char 
 10701 ;;  i               1   65[BANK0 ] unsigned char 
 10702 ;;  i               1   64[BANK0 ] unsigned char 
 10703 ;;  i               1   63[BANK0 ] unsigned char 
 10704 ;;  i               1   62[BANK0 ] unsigned char 
 10705 ;;  i               1   61[BANK0 ] unsigned char 
 10706 ;;  i               1   60[BANK0 ] unsigned char 
 10707 ;;  i               1   59[BANK0 ] unsigned char 
 10708 ;;  i               1   58[BANK0 ] unsigned char 
 10709 ;;  i               1   57[BANK0 ] unsigned char 
 10710 ;;  i               1   56[BANK0 ] unsigned char 
 10711 ;;  i               1   55[BANK0 ] unsigned char 
 10712 ;;  i               1   54[BANK0 ] unsigned char 
 10713 ;;  i               1   53[BANK0 ] unsigned char 
 10714 ;;  i               1   52[BANK0 ] unsigned char 
 10715 ;;  i               1   51[BANK0 ] unsigned char 
 10716 ;;  i               1   50[BANK0 ] unsigned char 
 10717 ;;  i               1   49[BANK0 ] unsigned char 
 10718 ;;  i               1   48[BANK0 ] unsigned char 
 10719 ;;  i               1   47[BANK0 ] unsigned char 
 10720 ;;  i               1   46[BANK0 ] unsigned char 
 10721 ;;  i               2   68[BANK0 ] int 
 10722 ;; Return value:  Size  Location     Type
 10723 ;;                  1    wreg      void 
 10724 ;; Registers used:
 10725 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10726 ;; Tracked objects:
 10727 ;;		On entry : 0/0
 10728 ;;		On exit  : 0/0
 10729 ;;		Unchanged: 0/0
 10730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10732 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10733 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10734 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10735 ;;Total ram usage:       27 bytes
 10736 ;; Hardware stack levels used:    1
 10737 ;; Hardware stack levels required when called:   10
 10738 ;; This function calls:
 10739 ;;		_lcdInst
 10740 ;;		_printf
 10741 ;;		_updateServoPosition
 10742 ;; This function is called by:
 10743 ;;		_Test
 10744 ;; This function uses a non-reentrant model
 10745 ;;
 10746                           
 10747                           	psect	text41
 10748  000012                     __ptext41:
 10749                           	opt stack 0
 10750  000012                     _actuatorTest:
 10751                           	opt stack 19
 10752                           
 10753                           ;Test.c: 199: int i = 0;
 10754                           
 10755                           ;incstack = 0
 10756  000012  0E00               	movlw	0
 10757  000014  0100               	movlb	0	; () banked
 10758  000016  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10759  000018  0E00               	movlw	0
 10760  00001A  6FC4               	movwf	actuatorTest@i& (0+255),b
 10761                           
 10762                           ; BSR set to: 0
 10763                           ;Test.c: 201: (INTCONbits.GIE = 1);
 10764  00001C  8EF2               	bsf	intcon,7,c	;volatile
 10765                           
 10766                           ; BSR set to: 0
 10767                           ;Test.c: 202: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10768  00001E  0E01               	movlw	1
 10769  000020  EC26  F024         	call	_lcdInst
 10770  000024  0E68               	movlw	104
 10771  000026  0100               	movlb	0	; () banked
 10772  000028  6FAB               	movwf	??_actuatorTest& (0+255),b
 10773  00002A  0EE4               	movlw	228
 10774  00002C                     u7727:
 10775  00002C  2EE8               	decfsz	wreg,f,c
 10776  00002E  D7FE               	bra	u7727
 10777  000030  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10778  000032  D7FC               	bra	u7727
 10779  000034  F000               	nop	
 10780  000036  0E80               	movlw	128
 10781  000038  EC26  F024         	call	_lcdInst
 10782                           
 10783                           ;Test.c: 203: printf("ACTUATORS");
 10784  00003C  0E91               	movlw	low STR_88
 10785  00003E  0100               	movlb	0	; () banked
 10786  000040  6F8E               	movwf	printf@f& (0+255),b
 10787  000042  0EFF               	movlw	high STR_88
 10788  000044  0100               	movlb	0	; () banked
 10789  000046  6F8F               	movwf	(printf@f+1)& (0+255),b
 10790  000048  ECB8  F008         	call	_printf	;wreg free
 10791                           
 10792                           ;Test.c: 204: lcdInst(0b11000000);;
 10793  00004C  0EC0               	movlw	192
 10794  00004E  EC26  F024         	call	_lcdInst
 10795                           
 10796                           ;Test.c: 205: printf("PUSH TO START");
 10797  000052  0E0B               	movlw	low STR_71
 10798  000054  0100               	movlb	0	; () banked
 10799  000056  6F8E               	movwf	printf@f& (0+255),b
 10800  000058  0EFF               	movlw	high STR_71
 10801  00005A  0100               	movlb	0	; () banked
 10802  00005C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10803  00005E  ECB8  F008         	call	_printf	;wreg free
 10804                           
 10805                           ;Test.c: 206: _delay((unsigned long)((100)*(32000000/4000.0)));
 10806  000062  0E05               	movlw	5
 10807  000064  0100               	movlb	0	; () banked
 10808  000066  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10809  000068  0E0F               	movlw	15
 10810  00006A  0100               	movlb	0	; () banked
 10811  00006C  6FAB               	movwf	??_actuatorTest& (0+255),b
 10812  00006E  0EF1               	movlw	241
 10813  000070                     u7737:
 10814  000070  2EE8               	decfsz	wreg,f,c
 10815  000072  D7FE               	bra	u7737
 10816  000074  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10817  000076  D7FC               	bra	u7737
 10818  000078  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10819  00007A  D7FA               	bra	u7737
 10820  00007C                     l1102:
 10821  00007C  A281               	btfss	3969,1,c	;volatile
 10822  00007E  D7FE               	goto	l1102
 10823  000080                     l1105:
 10824  000080  B281               	btfsc	3969,1,c	;volatile
 10825  000082  D7FE               	goto	l1105
 10826                           
 10827                           ;Test.c: 209: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10828  000084  0E01               	movlw	1
 10829  000086  EC26  F024         	call	_lcdInst
 10830  00008A  0E68               	movlw	104
 10831  00008C  0100               	movlb	0	; () banked
 10832  00008E  6FAB               	movwf	??_actuatorTest& (0+255),b
 10833  000090  0EE4               	movlw	228
 10834  000092                     u7747:
 10835  000092  2EE8               	decfsz	wreg,f,c
 10836  000094  D7FE               	bra	u7747
 10837  000096  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10838  000098  D7FC               	bra	u7747
 10839  00009A  F000               	nop	
 10840  00009C  0E80               	movlw	128
 10841  00009E  EC26  F024         	call	_lcdInst
 10842                           
 10843                           ;Test.c: 214: printf("TST: DC MOTORS");
 10844  0000A2  0EC3               	movlw	low STR_90
 10845  0000A4  0100               	movlb	0	; () banked
 10846  0000A6  6F8E               	movwf	printf@f& (0+255),b
 10847  0000A8  0EFE               	movlw	high STR_90
 10848  0000AA  0100               	movlb	0	; () banked
 10849  0000AC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10850  0000AE  ECB8  F008         	call	_printf	;wreg free
 10851                           
 10852                           ;Test.c: 215: lcdInst(0b11000000);;
 10853  0000B2  0EC0               	movlw	192
 10854  0000B4  EC26  F024         	call	_lcdInst
 10855                           
 10856                           ;Test.c: 216: printf("PIN RA5 HIGH.");
 10857  0000B8  0EE1               	movlw	low STR_91
 10858  0000BA  0100               	movlb	0	; () banked
 10859  0000BC  6F8E               	movwf	printf@f& (0+255),b
 10860  0000BE  0EFE               	movlw	high STR_91
 10861  0000C0  0100               	movlb	0	; () banked
 10862  0000C2  6F8F               	movwf	(printf@f+1)& (0+255),b
 10863  0000C4  ECB8  F008         	call	_printf	;wreg free
 10864                           
 10865                           ;Test.c: 217: LATAbits.LATA5 = 1;
 10866  0000C8  8A89               	bsf	3977,5,c	;volatile
 10867                           
 10868                           ;Test.c: 218: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 10869  0000CA  0E00               	movlw	0
 10870  0000CC  0100               	movlb	0	; () banked
 10871  0000CE  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10872  0000D0  0E00               	movlw	0
 10873  0000D2  6FC4               	movwf	actuatorTest@i& (0+255),b
 10874                           
 10875                           ; BSR set to: 0
 10876  0000D4  0100               	movlb	0	; () banked
 10877  0000D6  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10878  0000D8  D008               	goto	l6760
 10879  0000DA  0100               	movlb	0	; () banked
 10880  0000DC  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10881  0000DE  E123               	bnz	l1109
 10882  0000E0  0E05               	movlw	5
 10883  0000E2  0100               	movlb	0	; () banked
 10884  0000E4  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10885  0000E6  B0D8               	btfsc	status,0,c
 10886  0000E8  D01E               	goto	l1109
 10887  0000EA                     l6760:
 10888                           
 10889                           ; BSR set to: 0
 10890  0000EA  0E00               	movlw	0
 10891  0000EC  0100               	movlb	0	; () banked
 10892  0000EE  6FAD               	movwf	actuatorTest@i_1639& (0+255),b
 10893  0000F0                     l6762:
 10894                           
 10895                           ; BSR set to: 0
 10896  0000F0  0E63               	movlw	99
 10897  0000F2  0100               	movlb	0	; () banked
 10898  0000F4  65AD               	cpfsgt	actuatorTest@i_1639& (0+255),b
 10899  0000F6  D001               	goto	l6766
 10900  0000F8  D00C               	goto	l6770
 10901  0000FA                     l6766:
 10902                           
 10903                           ; BSR set to: 0
 10904  0000FA  0E68               	movlw	104
 10905  0000FC  0100               	movlb	0	; () banked
 10906  0000FE  6FAB               	movwf	??_actuatorTest& (0+255),b
 10907  000100  0EE4               	movlw	228
 10908  000102                     u7757:
 10909  000102  2EE8               	decfsz	wreg,f,c
 10910  000104  D7FE               	bra	u7757
 10911  000106  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10912  000108  D7FC               	bra	u7757
 10913  00010A  F000               	nop	
 10914  00010C  0100               	movlb	0	; () banked
 10915  00010E  2BAD               	incf	actuatorTest@i_1639& (0+255),f,b
 10916  000110  D7EF               	goto	l6762
 10917  000112                     l6770:
 10918                           
 10919                           ; BSR set to: 0
 10920  000112  0100               	movlb	0	; () banked
 10921  000114  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 10922  000116  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 10923                           
 10924                           ; BSR set to: 0
 10925  000118  0100               	movlb	0	; () banked
 10926  00011A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10927  00011C  D7E6               	goto	l6760
 10928  00011E  0100               	movlb	0	; () banked
 10929  000120  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10930  000122  E101               	bnz	u5240
 10931  000124  D7DD               	goto	L7
 10932  000126                     u5240:
 10933  000126                     l1109:
 10934                           
 10935                           ; BSR set to: 0
 10936                           ;Test.c: 219: LATAbits.LATA5 = 0;
 10937  000126  9A89               	bcf	3977,5,c	;volatile
 10938                           
 10939                           ; BSR set to: 0
 10940                           ;Test.c: 220: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10941  000128  0E01               	movlw	1
 10942  00012A  EC26  F024         	call	_lcdInst
 10943  00012E  0E68               	movlw	104
 10944  000130  0100               	movlb	0	; () banked
 10945  000132  6FAB               	movwf	??_actuatorTest& (0+255),b
 10946  000134  0EE4               	movlw	228
 10947  000136                     u7767:
 10948  000136  2EE8               	decfsz	wreg,f,c
 10949  000138  D7FE               	bra	u7767
 10950  00013A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10951  00013C  D7FC               	bra	u7767
 10952  00013E  F000               	nop	
 10953  000140  0E80               	movlw	128
 10954  000142  EC26  F024         	call	_lcdInst
 10955                           
 10956                           ;Test.c: 226: printf("TST: COND SOLN'D");
 10957  000146  0E81               	movlw	low STR_92
 10958  000148  0100               	movlb	0	; () banked
 10959  00014A  6F8E               	movwf	printf@f& (0+255),b
 10960  00014C  0EFC               	movlw	high STR_92
 10961  00014E  0100               	movlb	0	; () banked
 10962  000150  6F8F               	movwf	(printf@f+1)& (0+255),b
 10963  000152  ECB8  F008         	call	_printf	;wreg free
 10964                           
 10965                           ;Test.c: 227: lcdInst(0b11000000);;
 10966  000156  0EC0               	movlw	192
 10967  000158  EC26  F024         	call	_lcdInst
 10968                           
 10969                           ;Test.c: 228: printf("PIN RA3...");
 10970  00015C  0E5B               	movlw	low STR_93
 10971  00015E  0100               	movlb	0	; () banked
 10972  000160  6F8E               	movwf	printf@f& (0+255),b
 10973  000162  0EFF               	movlw	high STR_93
 10974  000164  0100               	movlb	0	; () banked
 10975  000166  6F8F               	movwf	(printf@f+1)& (0+255),b
 10976  000168  ECB8  F008         	call	_printf	;wreg free
 10977                           
 10978                           ;Test.c: 229: for(i=0;i<5;i++){
 10979  00016C  0E00               	movlw	0
 10980  00016E  0100               	movlb	0	; () banked
 10981  000170  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10982  000172  0E00               	movlw	0
 10983  000174  6FC4               	movwf	actuatorTest@i& (0+255),b
 10984                           
 10985                           ; BSR set to: 0
 10986  000176  0100               	movlb	0	; () banked
 10987  000178  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10988  00017A  D008               	goto	l1112
 10989  00017C  0100               	movlb	0	; () banked
 10990  00017E  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10991  000180  E12C               	bnz	l1113
 10992  000182  0E05               	movlw	5
 10993  000184  0100               	movlb	0	; () banked
 10994  000186  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10995  000188  B0D8               	btfsc	status,0,c
 10996  00018A  D027               	goto	l1113
 10997  00018C                     l1112:
 10998                           
 10999                           ; BSR set to: 0
 11000                           ;Test.c: 230: LATAbits.LATA3 = 1;
 11001  00018C  8689               	bsf	3977,3,c	;volatile
 11002                           
 11003                           ; BSR set to: 0
 11004                           ;Test.c: 231: _delay((unsigned long)((300)*(32000000/4000.0)));
 11005  00018E  0E0D               	movlw	13
 11006  000190  0100               	movlb	0	; () banked
 11007  000192  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11008  000194  0E2D               	movlw	45
 11009  000196  0100               	movlb	0	; () banked
 11010  000198  6FAB               	movwf	??_actuatorTest& (0+255),b
 11011  00019A  0ED7               	movlw	215
 11012  00019C                     u7777:
 11013  00019C  2EE8               	decfsz	wreg,f,c
 11014  00019E  D7FE               	bra	u7777
 11015  0001A0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11016  0001A2  D7FC               	bra	u7777
 11017  0001A4  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11018  0001A6  D7FA               	bra	u7777
 11019  0001A8  D000               	nop2	
 11020                           
 11021                           ;Test.c: 232: LATAbits.LATA3 = ~1;
 11022  0001AA  9689               	bcf	3977,3,c	;volatile
 11023                           
 11024                           ;Test.c: 233: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 11025  0001AC  0E1D               	movlw	29
 11026  0001AE  0100               	movlb	0	; () banked
 11027  0001B0  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11028  0001B2  0E69               	movlw	105
 11029  0001B4  0100               	movlb	0	; () banked
 11030  0001B6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11031  0001B8  0EA5               	movlw	165
 11032  0001BA                     u7787:
 11033  0001BA  2EE8               	decfsz	wreg,f,c
 11034  0001BC  D7FE               	bra	u7787
 11035  0001BE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11036  0001C0  D7FC               	bra	u7787
 11037  0001C2  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11038  0001C4  D7FA               	bra	u7787
 11039  0001C6  0100               	movlb	0	; () banked
 11040  0001C8  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11041  0001CA  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11042  0001CC  0100               	movlb	0	; () banked
 11043  0001CE  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11044  0001D0  D7DD               	goto	l1112
 11045  0001D2  0100               	movlb	0	; () banked
 11046  0001D4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11047  0001D6  E101               	bnz	u5260
 11048  0001D8  D7D4               	goto	L8
 11049  0001DA                     u5260:
 11050  0001DA                     l1113:
 11051                           
 11052                           ; BSR set to: 0
 11053                           ;Test.c: 234: }
 11054                           ;Test.c: 235: LATAbits.LATA3 = ~1;
 11055  0001DA  9689               	bcf	3977,3,c	;volatile
 11056                           
 11057                           ; BSR set to: 0
 11058                           ;Test.c: 236: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11059  0001DC  0E01               	movlw	1
 11060  0001DE  EC26  F024         	call	_lcdInst
 11061  0001E2  0E68               	movlw	104
 11062  0001E4  0100               	movlb	0	; () banked
 11063  0001E6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11064  0001E8  0EE4               	movlw	228
 11065  0001EA                     u7797:
 11066  0001EA  2EE8               	decfsz	wreg,f,c
 11067  0001EC  D7FE               	bra	u7797
 11068  0001EE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11069  0001F0  D7FC               	bra	u7797
 11070  0001F2  F000               	nop	
 11071  0001F4  0E80               	movlw	128
 11072  0001F6  EC26  F024         	call	_lcdInst
 11073                           
 11074                           ;Test.c: 242: printf("TST: PUSH SOLN'D");
 11075  0001FA  0E92               	movlw	low STR_94
 11076  0001FC  0100               	movlb	0	; () banked
 11077  0001FE  6F8E               	movwf	printf@f& (0+255),b
 11078  000200  0EFC               	movlw	high STR_94
 11079  000202  0100               	movlb	0	; () banked
 11080  000204  6F8F               	movwf	(printf@f+1)& (0+255),b
 11081  000206  ECB8  F008         	call	_printf	;wreg free
 11082                           
 11083                           ;Test.c: 243: lcdInst(0b11000000);;
 11084  00020A  0EC0               	movlw	192
 11085  00020C  EC26  F024         	call	_lcdInst
 11086                           
 11087                           ;Test.c: 244: printf("PIN RA4...");
 11088  000210  0E66               	movlw	low STR_95
 11089  000212  0100               	movlb	0	; () banked
 11090  000214  6F8E               	movwf	printf@f& (0+255),b
 11091  000216  0EFF               	movlw	high STR_95
 11092  000218  0100               	movlb	0	; () banked
 11093  00021A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11094  00021C  ECB8  F008         	call	_printf	;wreg free
 11095                           
 11096                           ;Test.c: 245: for(i=0;i<5;i++){
 11097  000220  0E00               	movlw	0
 11098  000222  0100               	movlb	0	; () banked
 11099  000224  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11100  000226  0E00               	movlw	0
 11101  000228  6FC4               	movwf	actuatorTest@i& (0+255),b
 11102                           
 11103                           ; BSR set to: 0
 11104  00022A  0100               	movlb	0	; () banked
 11105  00022C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11106  00022E  D008               	goto	l1114
 11107  000230  0100               	movlb	0	; () banked
 11108  000232  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11109  000234  E12C               	bnz	l1115
 11110  000236  0E05               	movlw	5
 11111  000238  0100               	movlb	0	; () banked
 11112  00023A  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11113  00023C  B0D8               	btfsc	status,0,c
 11114  00023E  D027               	goto	l1115
 11115  000240                     l1114:
 11116                           
 11117                           ; BSR set to: 0
 11118                           ;Test.c: 246: LATAbits.LATA4 = 1;
 11119  000240  8889               	bsf	3977,4,c	;volatile
 11120                           
 11121                           ; BSR set to: 0
 11122                           ;Test.c: 247: _delay((unsigned long)((300)*(32000000/4000.0)));
 11123  000242  0E0D               	movlw	13
 11124  000244  0100               	movlb	0	; () banked
 11125  000246  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11126  000248  0E2D               	movlw	45
 11127  00024A  0100               	movlb	0	; () banked
 11128  00024C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11129  00024E  0ED7               	movlw	215
 11130  000250                     u7807:
 11131  000250  2EE8               	decfsz	wreg,f,c
 11132  000252  D7FE               	bra	u7807
 11133  000254  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11134  000256  D7FC               	bra	u7807
 11135  000258  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11136  00025A  D7FA               	bra	u7807
 11137  00025C  D000               	nop2	
 11138                           
 11139                           ;Test.c: 248: LATAbits.LATA4 = ~1;
 11140  00025E  9889               	bcf	3977,4,c	;volatile
 11141                           
 11142                           ;Test.c: 249: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 11143  000260  0E1D               	movlw	29
 11144  000262  0100               	movlb	0	; () banked
 11145  000264  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11146  000266  0E69               	movlw	105
 11147  000268  0100               	movlb	0	; () banked
 11148  00026A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11149  00026C  0EA5               	movlw	165
 11150  00026E                     u7817:
 11151  00026E  2EE8               	decfsz	wreg,f,c
 11152  000270  D7FE               	bra	u7817
 11153  000272  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11154  000274  D7FC               	bra	u7817
 11155  000276  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11156  000278  D7FA               	bra	u7817
 11157  00027A  0100               	movlb	0	; () banked
 11158  00027C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11159  00027E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11160  000280  0100               	movlb	0	; () banked
 11161  000282  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11162  000284  D7DD               	goto	l1114
 11163  000286  0100               	movlb	0	; () banked
 11164  000288  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11165  00028A  E101               	bnz	u5280
 11166  00028C  D7D4               	goto	L9
 11167  00028E                     u5280:
 11168  00028E                     l1115:
 11169                           
 11170                           ; BSR set to: 0
 11171                           ;Test.c: 250: }
 11172                           ;Test.c: 251: LATAbits.LATA4 = ~1;
 11173  00028E  9889               	bcf	3977,4,c	;volatile
 11174                           
 11175                           ; BSR set to: 0
 11176                           ;Test.c: 252: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11177  000290  0E01               	movlw	1
 11178  000292  EC26  F024         	call	_lcdInst
 11179  000296  0E68               	movlw	104
 11180  000298  0100               	movlb	0	; () banked
 11181  00029A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11182  00029C  0EE4               	movlw	228
 11183  00029E                     u7827:
 11184  00029E  2EE8               	decfsz	wreg,f,c
 11185  0002A0  D7FE               	bra	u7827
 11186  0002A2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11187  0002A4  D7FC               	bra	u7827
 11188  0002A6  F000               	nop	
 11189  0002A8  0E80               	movlw	128
 11190  0002AA  EC26  F024         	call	_lcdInst
 11191                           
 11192                           ;Test.c: 255: machine_state = Sorting_state;
 11193  0002AE  0E01               	movlw	1
 11194  0002B0  0100               	movlb	0	; () banked
 11195  0002B2  6FFC               	movwf	_machine_state& (0+255),b
 11196                           
 11197                           ; BSR set to: 0
 11198                           ;Test.c: 256: was_low_1 = 0;
 11199  0002B4  0E00               	movlw	0
 11200  0002B6  6E7A               	movwf	_was_low_1+1,c	;volatile
 11201  0002B8  0E00               	movlw	0
 11202  0002BA  6E79               	movwf	_was_low_1,c	;volatile
 11203                           
 11204                           ; BSR set to: 0
 11205                           ;Test.c: 257: was_low_1 = 0;
 11206  0002BC  0E00               	movlw	0
 11207  0002BE  6E7A               	movwf	_was_low_1+1,c	;volatile
 11208  0002C0  0E00               	movlw	0
 11209  0002C2  6E79               	movwf	_was_low_1,c	;volatile
 11210                           
 11211                           ; BSR set to: 0
 11212                           ;Test.c: 264: printf("TST: PAN SERVO");
 11213  0002C4  0EA5               	movlw	low STR_96
 11214  0002C6  0100               	movlb	0	; () banked
 11215  0002C8  6F8E               	movwf	printf@f& (0+255),b
 11216  0002CA  0EFE               	movlw	high STR_96
 11217  0002CC  0100               	movlb	0	; () banked
 11218  0002CE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11219  0002D0  ECB8  F008         	call	_printf	;wreg free
 11220                           
 11221                           ;Test.c: 265: lcdInst(0b11000000);;
 11222  0002D4  0EC0               	movlw	192
 11223  0002D6  EC26  F024         	call	_lcdInst
 11224                           
 11225                           ;Test.c: 266: printf("MIDDLE -- 2s    ");
 11226  0002DA  0E0A               	movlw	low STR_97
 11227  0002DC  0100               	movlb	0	; () banked
 11228  0002DE  6F8E               	movwf	printf@f& (0+255),b
 11229  0002E0  0EFC               	movlw	high STR_97
 11230  0002E2  0100               	movlb	0	; () banked
 11231  0002E4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11232  0002E6  ECB8  F008         	call	_printf	;wreg free
 11233                           
 11234                           ;Test.c: 267: updateServoPosition(1200, 1);
 11235  0002EA  0E04               	movlw	4
 11236  0002EC  0100               	movlb	0	; () banked
 11237  0002EE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11238  0002F0  0EB0               	movlw	176
 11239  0002F2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11240  0002F4  0E00               	movlw	0
 11241  0002F6  0100               	movlb	0	; () banked
 11242  0002F8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11243  0002FA  0E01               	movlw	1
 11244  0002FC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11245  0002FE  EC5E  F01E         	call	_updateServoPosition	;wreg free
 11246                           
 11247                           ;Test.c: 268: TMR1ON = 1;
 11248  000302  80CD               	bsf	4045,0,c	;volatile
 11249                           
 11250                           ;Test.c: 269: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11251  000304  0E00               	movlw	0
 11252  000306  0100               	movlb	0	; () banked
 11253  000308  6FAE               	movwf	actuatorTest@i_1646& (0+255),b
 11254  00030A                     l6846:
 11255                           
 11256                           ; BSR set to: 0
 11257  00030A  0E63               	movlw	99
 11258  00030C  0100               	movlb	0	; () banked
 11259  00030E  65AE               	cpfsgt	actuatorTest@i_1646& (0+255),b
 11260  000310  D001               	goto	l6850
 11261  000312  D00C               	goto	l6854
 11262  000314                     l6850:
 11263                           
 11264                           ; BSR set to: 0
 11265  000314  0E68               	movlw	104
 11266  000316  0100               	movlb	0	; () banked
 11267  000318  6FAB               	movwf	??_actuatorTest& (0+255),b
 11268  00031A  0EE4               	movlw	228
 11269  00031C                     u7837:
 11270  00031C  2EE8               	decfsz	wreg,f,c
 11271  00031E  D7FE               	bra	u7837
 11272  000320  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11273  000322  D7FC               	bra	u7837
 11274  000324  F000               	nop	
 11275  000326  0100               	movlb	0	; () banked
 11276  000328  2BAE               	incf	actuatorTest@i_1646& (0+255),f,b
 11277  00032A  D7EF               	goto	l6846
 11278  00032C                     l6854:
 11279                           
 11280                           ; BSR set to: 0
 11281  00032C  0E00               	movlw	0
 11282  00032E  0100               	movlb	0	; () banked
 11283  000330  6FAF               	movwf	actuatorTest@i_1647& (0+255),b
 11284  000332                     l6856:
 11285                           
 11286                           ; BSR set to: 0
 11287  000332  0E63               	movlw	99
 11288  000334  0100               	movlb	0	; () banked
 11289  000336  65AF               	cpfsgt	actuatorTest@i_1647& (0+255),b
 11290  000338  D001               	goto	l6860
 11291  00033A  D00C               	goto	l6864
 11292  00033C                     l6860:
 11293                           
 11294                           ; BSR set to: 0
 11295  00033C  0E68               	movlw	104
 11296  00033E  0100               	movlb	0	; () banked
 11297  000340  6FAB               	movwf	??_actuatorTest& (0+255),b
 11298  000342  0EE4               	movlw	228
 11299  000344                     u7847:
 11300  000344  2EE8               	decfsz	wreg,f,c
 11301  000346  D7FE               	bra	u7847
 11302  000348  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11303  00034A  D7FC               	bra	u7847
 11304  00034C  F000               	nop	
 11305  00034E  0100               	movlb	0	; () banked
 11306  000350  2BAF               	incf	actuatorTest@i_1647& (0+255),f,b
 11307  000352  D7EF               	goto	l6856
 11308  000354                     l6864:
 11309                           
 11310                           ; BSR set to: 0
 11311                           ;Test.c: 271: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11312  000354  0E80               	movlw	128
 11313  000356  EC26  F024         	call	_lcdInst
 11314  00035A  0EC0               	movlw	192
 11315  00035C  EC26  F024         	call	_lcdInst
 11316                           
 11317                           ;Test.c: 272: printf("RIGHT -- 2s     ");
 11318  000360  0EF9               	movlw	low STR_98
 11319  000362  0100               	movlb	0	; () banked
 11320  000364  6F8E               	movwf	printf@f& (0+255),b
 11321  000366  0EFB               	movlw	high STR_98
 11322  000368  0100               	movlb	0	; () banked
 11323  00036A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11324  00036C  ECB8  F008         	call	_printf	;wreg free
 11325                           
 11326                           ;Test.c: 273: updateServoPosition(500, 1);
 11327  000370  0E01               	movlw	1
 11328  000372  0100               	movlb	0	; () banked
 11329  000374  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11330  000376  0EF4               	movlw	244
 11331  000378  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11332  00037A  0E00               	movlw	0
 11333  00037C  0100               	movlb	0	; () banked
 11334  00037E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11335  000380  0E01               	movlw	1
 11336  000382  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11337  000384  EC5E  F01E         	call	_updateServoPosition	;wreg free
 11338                           
 11339                           ;Test.c: 274: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11340  000388  0E00               	movlw	0
 11341  00038A  0100               	movlb	0	; () banked
 11342  00038C  6FB0               	movwf	actuatorTest@i_1649& (0+255),b
 11343  00038E                     l6872:
 11344                           
 11345                           ; BSR set to: 0
 11346  00038E  0E63               	movlw	99
 11347  000390  0100               	movlb	0	; () banked
 11348  000392  65B0               	cpfsgt	actuatorTest@i_1649& (0+255),b
 11349  000394  D001               	goto	l6876
 11350  000396  D00C               	goto	l6880
 11351  000398                     l6876:
 11352                           
 11353                           ; BSR set to: 0
 11354  000398  0E68               	movlw	104
 11355  00039A  0100               	movlb	0	; () banked
 11356  00039C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11357  00039E  0EE4               	movlw	228
 11358  0003A0                     u7857:
 11359  0003A0  2EE8               	decfsz	wreg,f,c
 11360  0003A2  D7FE               	bra	u7857
 11361  0003A4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11362  0003A6  D7FC               	bra	u7857
 11363  0003A8  F000               	nop	
 11364  0003AA  0100               	movlb	0	; () banked
 11365  0003AC  2BB0               	incf	actuatorTest@i_1649& (0+255),f,b
 11366  0003AE  D7EF               	goto	l6872
 11367  0003B0                     l6880:
 11368                           
 11369                           ; BSR set to: 0
 11370  0003B0  0E00               	movlw	0
 11371  0003B2  0100               	movlb	0	; () banked
 11372  0003B4  6FB1               	movwf	actuatorTest@i_1650& (0+255),b
 11373  0003B6                     l6882:
 11374                           
 11375                           ; BSR set to: 0
 11376  0003B6  0E63               	movlw	99
 11377  0003B8  0100               	movlb	0	; () banked
 11378  0003BA  65B1               	cpfsgt	actuatorTest@i_1650& (0+255),b
 11379  0003BC  D001               	goto	l6886
 11380  0003BE  D00C               	goto	l6890
 11381  0003C0                     l6886:
 11382                           
 11383                           ; BSR set to: 0
 11384  0003C0  0E68               	movlw	104
 11385  0003C2  0100               	movlb	0	; () banked
 11386  0003C4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11387  0003C6  0EE4               	movlw	228
 11388  0003C8                     u7867:
 11389  0003C8  2EE8               	decfsz	wreg,f,c
 11390  0003CA  D7FE               	bra	u7867
 11391  0003CC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11392  0003CE  D7FC               	bra	u7867
 11393  0003D0  F000               	nop	
 11394  0003D2  0100               	movlb	0	; () banked
 11395  0003D4  2BB1               	incf	actuatorTest@i_1650& (0+255),f,b
 11396  0003D6  D7EF               	goto	l6882
 11397  0003D8                     l6890:
 11398                           
 11399                           ; BSR set to: 0
 11400                           ;Test.c: 276: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11401  0003D8  0E80               	movlw	128
 11402  0003DA  EC26  F024         	call	_lcdInst
 11403  0003DE  0EC0               	movlw	192
 11404  0003E0  EC26  F024         	call	_lcdInst
 11405                           
 11406                           ;Test.c: 277: printf("LEFT -- 2s      ");
 11407  0003E4  0ED7               	movlw	low STR_99
 11408  0003E6  0100               	movlb	0	; () banked
 11409  0003E8  6F8E               	movwf	printf@f& (0+255),b
 11410  0003EA  0EFB               	movlw	high STR_99
 11411  0003EC  0100               	movlb	0	; () banked
 11412  0003EE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11413  0003F0  ECB8  F008         	call	_printf	;wreg free
 11414                           
 11415                           ;Test.c: 278: updateServoPosition(2100, 1);
 11416  0003F4  0E08               	movlw	8
 11417  0003F6  0100               	movlb	0	; () banked
 11418  0003F8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11419  0003FA  0E34               	movlw	52
 11420  0003FC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11421  0003FE  0E00               	movlw	0
 11422  000400  0100               	movlb	0	; () banked
 11423  000402  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11424  000404  0E01               	movlw	1
 11425  000406  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11426  000408  EC5E  F01E         	call	_updateServoPosition	;wreg free
 11427                           
 11428                           ;Test.c: 279: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11429  00040C  0E00               	movlw	0
 11430  00040E  0100               	movlb	0	; () banked
 11431  000410  6FB2               	movwf	actuatorTest@i_1652& (0+255),b
 11432  000412                     l6898:
 11433                           
 11434                           ; BSR set to: 0
 11435  000412  0E63               	movlw	99
 11436  000414  0100               	movlb	0	; () banked
 11437  000416  65B2               	cpfsgt	actuatorTest@i_1652& (0+255),b
 11438  000418  D001               	goto	l6902
 11439  00041A  D00C               	goto	l6906
 11440  00041C                     l6902:
 11441                           
 11442                           ; BSR set to: 0
 11443  00041C  0E68               	movlw	104
 11444  00041E  0100               	movlb	0	; () banked
 11445  000420  6FAB               	movwf	??_actuatorTest& (0+255),b
 11446  000422  0EE4               	movlw	228
 11447  000424                     u7877:
 11448  000424  2EE8               	decfsz	wreg,f,c
 11449  000426  D7FE               	bra	u7877
 11450  000428  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11451  00042A  D7FC               	bra	u7877
 11452  00042C  F000               	nop	
 11453  00042E  0100               	movlb	0	; () banked
 11454  000430  2BB2               	incf	actuatorTest@i_1652& (0+255),f,b
 11455  000432  D7EF               	goto	l6898
 11456  000434                     l6906:
 11457                           
 11458                           ; BSR set to: 0
 11459  000434  0E00               	movlw	0
 11460  000436  0100               	movlb	0	; () banked
 11461  000438  6FB3               	movwf	actuatorTest@i_1653& (0+255),b
 11462  00043A                     l6908:
 11463                           
 11464                           ; BSR set to: 0
 11465  00043A  0E63               	movlw	99
 11466  00043C  0100               	movlb	0	; () banked
 11467  00043E  65B3               	cpfsgt	actuatorTest@i_1653& (0+255),b
 11468  000440  D001               	goto	l6912
 11469  000442  D00C               	goto	l6916
 11470  000444                     l6912:
 11471                           
 11472                           ; BSR set to: 0
 11473  000444  0E68               	movlw	104
 11474  000446  0100               	movlb	0	; () banked
 11475  000448  6FAB               	movwf	??_actuatorTest& (0+255),b
 11476  00044A  0EE4               	movlw	228
 11477  00044C                     u7887:
 11478  00044C  2EE8               	decfsz	wreg,f,c
 11479  00044E  D7FE               	bra	u7887
 11480  000450  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11481  000452  D7FC               	bra	u7887
 11482  000454  F000               	nop	
 11483  000456  0100               	movlb	0	; () banked
 11484  000458  2BB3               	incf	actuatorTest@i_1653& (0+255),f,b
 11485  00045A  D7EF               	goto	l6908
 11486  00045C                     l6916:
 11487                           
 11488                           ; BSR set to: 0
 11489                           ;Test.c: 281: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11490  00045C  0E80               	movlw	128
 11491  00045E  EC26  F024         	call	_lcdInst
 11492  000462  0EC0               	movlw	192
 11493  000464  EC26  F024         	call	_lcdInst
 11494                           
 11495                           ;Test.c: 282: printf("MID-LEFT -- 2s  ");
 11496  000468  0E2C               	movlw	low STR_100
 11497  00046A  0100               	movlb	0	; () banked
 11498  00046C  6F8E               	movwf	printf@f& (0+255),b
 11499  00046E  0EFC               	movlw	high STR_100
 11500  000470  0100               	movlb	0	; () banked
 11501  000472  6F8F               	movwf	(printf@f+1)& (0+255),b
 11502  000474  ECB8  F008         	call	_printf	;wreg free
 11503                           
 11504                           ;Test.c: 283: updateServoPosition(1700, 1);
 11505  000478  0E06               	movlw	6
 11506  00047A  0100               	movlb	0	; () banked
 11507  00047C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11508  00047E  0EA4               	movlw	164
 11509  000480  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11510  000482  0E00               	movlw	0
 11511  000484  0100               	movlb	0	; () banked
 11512  000486  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11513  000488  0E01               	movlw	1
 11514  00048A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11515  00048C  EC5E  F01E         	call	_updateServoPosition	;wreg free
 11516                           
 11517                           ;Test.c: 284: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11518  000490  0E00               	movlw	0
 11519  000492  0100               	movlb	0	; () banked
 11520  000494  6FB4               	movwf	actuatorTest@i_1655& (0+255),b
 11521  000496                     l6924:
 11522                           
 11523                           ; BSR set to: 0
 11524  000496  0E63               	movlw	99
 11525  000498  0100               	movlb	0	; () banked
 11526  00049A  65B4               	cpfsgt	actuatorTest@i_1655& (0+255),b
 11527  00049C  D001               	goto	l6928
 11528  00049E  D00C               	goto	l6932
 11529  0004A0                     l6928:
 11530                           
 11531                           ; BSR set to: 0
 11532  0004A0  0E68               	movlw	104
 11533  0004A2  0100               	movlb	0	; () banked
 11534  0004A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11535  0004A6  0EE4               	movlw	228
 11536  0004A8                     u7897:
 11537  0004A8  2EE8               	decfsz	wreg,f,c
 11538  0004AA  D7FE               	bra	u7897
 11539  0004AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11540  0004AE  D7FC               	bra	u7897
 11541  0004B0  F000               	nop	
 11542  0004B2  0100               	movlb	0	; () banked
 11543  0004B4  2BB4               	incf	actuatorTest@i_1655& (0+255),f,b
 11544  0004B6  D7EF               	goto	l6924
 11545  0004B8                     l6932:
 11546                           
 11547                           ; BSR set to: 0
 11548  0004B8  0E00               	movlw	0
 11549  0004BA  0100               	movlb	0	; () banked
 11550  0004BC  6FB5               	movwf	actuatorTest@i_1656& (0+255),b
 11551  0004BE                     l6934:
 11552                           
 11553                           ; BSR set to: 0
 11554  0004BE  0E63               	movlw	99
 11555  0004C0  0100               	movlb	0	; () banked
 11556  0004C2  65B5               	cpfsgt	actuatorTest@i_1656& (0+255),b
 11557  0004C4  D001               	goto	l6938
 11558  0004C6  D00C               	goto	l6942
 11559  0004C8                     l6938:
 11560                           
 11561                           ; BSR set to: 0
 11562  0004C8  0E68               	movlw	104
 11563  0004CA  0100               	movlb	0	; () banked
 11564  0004CC  6FAB               	movwf	??_actuatorTest& (0+255),b
 11565  0004CE  0EE4               	movlw	228
 11566  0004D0                     u7907:
 11567  0004D0  2EE8               	decfsz	wreg,f,c
 11568  0004D2  D7FE               	bra	u7907
 11569  0004D4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11570  0004D6  D7FC               	bra	u7907
 11571  0004D8  F000               	nop	
 11572  0004DA  0100               	movlb	0	; () banked
 11573  0004DC  2BB5               	incf	actuatorTest@i_1656& (0+255),f,b
 11574  0004DE  D7EF               	goto	l6934
 11575  0004E0                     l6942:
 11576                           
 11577                           ; BSR set to: 0
 11578                           ;Test.c: 286: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11579  0004E0  0E80               	movlw	128
 11580  0004E2  EC26  F024         	call	_lcdInst
 11581  0004E6  0EC0               	movlw	192
 11582  0004E8  EC26  F024         	call	_lcdInst
 11583                           
 11584                           ;Test.c: 287: printf("MID-RIGHT -- 2s ");
 11585  0004EC  0E3D               	movlw	low STR_101
 11586  0004EE  0100               	movlb	0	; () banked
 11587  0004F0  6F8E               	movwf	printf@f& (0+255),b
 11588  0004F2  0EFC               	movlw	high STR_101
 11589  0004F4  0100               	movlb	0	; () banked
 11590  0004F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 11591  0004F8  ECB8  F008         	call	_printf	;wreg free
 11592                           
 11593                           ;Test.c: 288: updateServoPosition(750, 1);
 11594  0004FC  0E02               	movlw	2
 11595  0004FE  0100               	movlb	0	; () banked
 11596  000500  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11597  000502  0EEE               	movlw	238
 11598  000504  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11599  000506  0E00               	movlw	0
 11600  000508  0100               	movlb	0	; () banked
 11601  00050A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11602  00050C  0E01               	movlw	1
 11603  00050E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11604  000510  EC5E  F01E         	call	_updateServoPosition	;wreg free
 11605                           
 11606                           ;Test.c: 289: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11607  000514  0E00               	movlw	0
 11608  000516  0100               	movlb	0	; () banked
 11609  000518  6FB6               	movwf	actuatorTest@i_1658& (0+255),b
 11610  00051A                     l6950:
 11611                           
 11612                           ; BSR set to: 0
 11613  00051A  0E63               	movlw	99
 11614  00051C  0100               	movlb	0	; () banked
 11615  00051E  65B6               	cpfsgt	actuatorTest@i_1658& (0+255),b
 11616  000520  D001               	goto	l6954
 11617  000522  D00C               	goto	l6958
 11618  000524                     l6954:
 11619                           
 11620                           ; BSR set to: 0
 11621  000524  0E68               	movlw	104
 11622  000526  0100               	movlb	0	; () banked
 11623  000528  6FAB               	movwf	??_actuatorTest& (0+255),b
 11624  00052A  0EE4               	movlw	228
 11625  00052C                     u7917:
 11626  00052C  2EE8               	decfsz	wreg,f,c
 11627  00052E  D7FE               	bra	u7917
 11628  000530  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11629  000532  D7FC               	bra	u7917
 11630  000534  F000               	nop	
 11631  000536  0100               	movlb	0	; () banked
 11632  000538  2BB6               	incf	actuatorTest@i_1658& (0+255),f,b
 11633  00053A  D7EF               	goto	l6950
 11634  00053C                     l6958:
 11635                           
 11636                           ; BSR set to: 0
 11637  00053C  0E00               	movlw	0
 11638  00053E  0100               	movlb	0	; () banked
 11639  000540  6FB7               	movwf	actuatorTest@i_1659& (0+255),b
 11640  000542                     l6960:
 11641                           
 11642                           ; BSR set to: 0
 11643  000542  0E63               	movlw	99
 11644  000544  0100               	movlb	0	; () banked
 11645  000546  65B7               	cpfsgt	actuatorTest@i_1659& (0+255),b
 11646  000548  D001               	goto	l6964
 11647  00054A  D00C               	goto	l6968
 11648  00054C                     l6964:
 11649                           
 11650                           ; BSR set to: 0
 11651  00054C  0E68               	movlw	104
 11652  00054E  0100               	movlb	0	; () banked
 11653  000550  6FAB               	movwf	??_actuatorTest& (0+255),b
 11654  000552  0EE4               	movlw	228
 11655  000554                     u7927:
 11656  000554  2EE8               	decfsz	wreg,f,c
 11657  000556  D7FE               	bra	u7927
 11658  000558  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11659  00055A  D7FC               	bra	u7927
 11660  00055C  F000               	nop	
 11661  00055E  0100               	movlb	0	; () banked
 11662  000560  2BB7               	incf	actuatorTest@i_1659& (0+255),f,b
 11663  000562  D7EF               	goto	l6960
 11664  000564                     l6968:
 11665                           
 11666                           ; BSR set to: 0
 11667                           ;Test.c: 291: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11668  000564  0E80               	movlw	128
 11669  000566  EC26  F024         	call	_lcdInst
 11670  00056A  0EC0               	movlw	192
 11671  00056C  EC26  F024         	call	_lcdInst
 11672                           
 11673                           ;Test.c: 292: printf("MID -- 2s       ");
 11674  000570  0EB5               	movlw	low STR_102
 11675  000572  0100               	movlb	0	; () banked
 11676  000574  6F8E               	movwf	printf@f& (0+255),b
 11677  000576  0EFB               	movlw	high STR_102
 11678  000578  0100               	movlb	0	; () banked
 11679  00057A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11680  00057C  ECB8  F008         	call	_printf	;wreg free
 11681                           
 11682                           ;Test.c: 293: updateServoPosition(1200, 1);
 11683  000580  0E04               	movlw	4
 11684  000582  0100               	movlb	0	; () banked
 11685  000584  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11686  000586  0EB0               	movlw	176
 11687  000588  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11688  00058A  0E00               	movlw	0
 11689  00058C  0100               	movlb	0	; () banked
 11690  00058E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11691  000590  0E01               	movlw	1
 11692  000592  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11693  000594  EC5E  F01E         	call	_updateServoPosition	;wreg free
 11694                           
 11695                           ;Test.c: 294: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11696  000598  0E00               	movlw	0
 11697  00059A  0100               	movlb	0	; () banked
 11698  00059C  6FB8               	movwf	actuatorTest@i_1661& (0+255),b
 11699  00059E                     l6976:
 11700                           
 11701                           ; BSR set to: 0
 11702  00059E  0E63               	movlw	99
 11703  0005A0  0100               	movlb	0	; () banked
 11704  0005A2  65B8               	cpfsgt	actuatorTest@i_1661& (0+255),b
 11705  0005A4  D001               	goto	l6980
 11706  0005A6  D00C               	goto	l6984
 11707  0005A8                     l6980:
 11708                           
 11709                           ; BSR set to: 0
 11710  0005A8  0E68               	movlw	104
 11711  0005AA  0100               	movlb	0	; () banked
 11712  0005AC  6FAB               	movwf	??_actuatorTest& (0+255),b
 11713  0005AE  0EE4               	movlw	228
 11714  0005B0                     u7937:
 11715  0005B0  2EE8               	decfsz	wreg,f,c
 11716  0005B2  D7FE               	bra	u7937
 11717  0005B4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11718  0005B6  D7FC               	bra	u7937
 11719  0005B8  F000               	nop	
 11720  0005BA  0100               	movlb	0	; () banked
 11721  0005BC  2BB8               	incf	actuatorTest@i_1661& (0+255),f,b
 11722  0005BE  D7EF               	goto	l6976
 11723  0005C0                     l6984:
 11724                           
 11725                           ; BSR set to: 0
 11726  0005C0  0E00               	movlw	0
 11727  0005C2  0100               	movlb	0	; () banked
 11728  0005C4  6FB9               	movwf	actuatorTest@i_1662& (0+255),b
 11729  0005C6                     l6986:
 11730                           
 11731                           ; BSR set to: 0
 11732  0005C6  0E63               	movlw	99
 11733  0005C8  0100               	movlb	0	; () banked
 11734  0005CA  65B9               	cpfsgt	actuatorTest@i_1662& (0+255),b
 11735  0005CC  D001               	goto	l6990
 11736  0005CE  D00C               	goto	l1139
 11737  0005D0                     l6990:
 11738                           
 11739                           ; BSR set to: 0
 11740  0005D0  0E68               	movlw	104
 11741  0005D2  0100               	movlb	0	; () banked
 11742  0005D4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11743  0005D6  0EE4               	movlw	228
 11744  0005D8                     u7947:
 11745  0005D8  2EE8               	decfsz	wreg,f,c
 11746  0005DA  D7FE               	bra	u7947
 11747  0005DC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11748  0005DE  D7FC               	bra	u7947
 11749  0005E0  F000               	nop	
 11750  0005E2  0100               	movlb	0	; () banked
 11751  0005E4  2BB9               	incf	actuatorTest@i_1662& (0+255),f,b
 11752  0005E6  D7EF               	goto	l6986
 11753  0005E8                     l1139:
 11754                           
 11755                           ; BSR set to: 0
 11756                           ;Test.c: 295: TMR1ON = 0;
 11757  0005E8  90CD               	bcf	4045,0,c	;volatile
 11758                           
 11759                           ; BSR set to: 0
 11760                           ;Test.c: 302: printf("TST: TILT SERVO");
 11761  0005EA  0E3A               	movlw	low STR_103
 11762  0005EC  0100               	movlb	0	; () banked
 11763  0005EE  6F8E               	movwf	printf@f& (0+255),b
 11764  0005F0  0EFE               	movlw	high STR_103
 11765  0005F2  0100               	movlb	0	; () banked
 11766  0005F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11767  0005F6  ECB8  F008         	call	_printf	;wreg free
 11768                           
 11769                           ;Test.c: 303: lcdInst(0b11000000);;
 11770  0005FA  0EC0               	movlw	192
 11771  0005FC  EC26  F024         	call	_lcdInst
 11772                           
 11773                           ;Test.c: 304: printf("LEVEL -- 2s     ");
 11774  000600  0EE8               	movlw	low STR_104
 11775  000602  0100               	movlb	0	; () banked
 11776  000604  6F8E               	movwf	printf@f& (0+255),b
 11777  000606  0EFB               	movlw	high STR_104
 11778  000608  0100               	movlb	0	; () banked
 11779  00060A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11780  00060C  ECB8  F008         	call	_printf	;wreg free
 11781                           
 11782                           ;Test.c: 305: updateServoPosition(1150, 3);
 11783  000610  0E04               	movlw	4
 11784  000612  0100               	movlb	0	; () banked
 11785  000614  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11786  000616  0E7E               	movlw	126
 11787  000618  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11788  00061A  0E00               	movlw	0
 11789  00061C  0100               	movlb	0	; () banked
 11790  00061E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11791  000620  0E03               	movlw	3
 11792  000622  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11793  000624  EC5E  F01E         	call	_updateServoPosition	;wreg free
 11794                           
 11795                           ;Test.c: 306: TMR3ON = 1;
 11796  000628  80B1               	bsf	4017,0,c	;volatile
 11797                           
 11798                           ;Test.c: 307: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11799  00062A  0E00               	movlw	0
 11800  00062C  0100               	movlb	0	; () banked
 11801  00062E  6FBA               	movwf	actuatorTest@i_1665& (0+255),b
 11802  000630                     l7004:
 11803                           
 11804                           ; BSR set to: 0
 11805  000630  0E63               	movlw	99
 11806  000632  0100               	movlb	0	; () banked
 11807  000634  65BA               	cpfsgt	actuatorTest@i_1665& (0+255),b
 11808  000636  D001               	goto	l7008
 11809  000638  D00C               	goto	l7012
 11810  00063A                     l7008:
 11811                           
 11812                           ; BSR set to: 0
 11813  00063A  0E68               	movlw	104
 11814  00063C  0100               	movlb	0	; () banked
 11815  00063E  6FAB               	movwf	??_actuatorTest& (0+255),b
 11816  000640  0EE4               	movlw	228
 11817  000642                     u7957:
 11818  000642  2EE8               	decfsz	wreg,f,c
 11819  000644  D7FE               	bra	u7957
 11820  000646  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11821  000648  D7FC               	bra	u7957
 11822  00064A  F000               	nop	
 11823  00064C  0100               	movlb	0	; () banked
 11824  00064E  2BBA               	incf	actuatorTest@i_1665& (0+255),f,b
 11825  000650  D7EF               	goto	l7004
 11826  000652                     l7012:
 11827                           
 11828                           ; BSR set to: 0
 11829  000652  0E00               	movlw	0
 11830  000654  0100               	movlb	0	; () banked
 11831  000656  6FBB               	movwf	actuatorTest@i_1666& (0+255),b
 11832  000658                     l7014:
 11833                           
 11834                           ; BSR set to: 0
 11835  000658  0E63               	movlw	99
 11836  00065A  0100               	movlb	0	; () banked
 11837  00065C  65BB               	cpfsgt	actuatorTest@i_1666& (0+255),b
 11838  00065E  D001               	goto	l7018
 11839  000660  D00C               	goto	l7022
 11840  000662                     l7018:
 11841                           
 11842                           ; BSR set to: 0
 11843  000662  0E68               	movlw	104
 11844  000664  0100               	movlb	0	; () banked
 11845  000666  6FAB               	movwf	??_actuatorTest& (0+255),b
 11846  000668  0EE4               	movlw	228
 11847  00066A                     u7967:
 11848  00066A  2EE8               	decfsz	wreg,f,c
 11849  00066C  D7FE               	bra	u7967
 11850  00066E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11851  000670  D7FC               	bra	u7967
 11852  000672  F000               	nop	
 11853  000674  0100               	movlb	0	; () banked
 11854  000676  2BBB               	incf	actuatorTest@i_1666& (0+255),f,b
 11855  000678  D7EF               	goto	l7014
 11856  00067A                     l7022:
 11857                           
 11858                           ; BSR set to: 0
 11859                           ;Test.c: 309: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11860  00067A  0E80               	movlw	128
 11861  00067C  EC26  F024         	call	_lcdInst
 11862  000680  0EC0               	movlw	192
 11863  000682  EC26  F024         	call	_lcdInst
 11864                           
 11865                           ;Test.c: 310: printf("DROP -- 2s      ");
 11866  000686  0EC6               	movlw	low STR_105
 11867  000688  0100               	movlb	0	; () banked
 11868  00068A  6F8E               	movwf	printf@f& (0+255),b
 11869  00068C  0EFB               	movlw	high STR_105
 11870  00068E  0100               	movlb	0	; () banked
 11871  000690  6F8F               	movwf	(printf@f+1)& (0+255),b
 11872  000692  ECB8  F008         	call	_printf	;wreg free
 11873                           
 11874                           ;Test.c: 311: updateServoPosition(1350, 3);
 11875  000696  0E05               	movlw	5
 11876  000698  0100               	movlb	0	; () banked
 11877  00069A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11878  00069C  0E46               	movlw	70
 11879  00069E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11880  0006A0  0E00               	movlw	0
 11881  0006A2  0100               	movlb	0	; () banked
 11882  0006A4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11883  0006A6  0E03               	movlw	3
 11884  0006A8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11885  0006AA  EC5E  F01E         	call	_updateServoPosition	;wreg free
 11886                           
 11887                           ;Test.c: 312: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11888  0006AE  0E00               	movlw	0
 11889  0006B0  0100               	movlb	0	; () banked
 11890  0006B2  6FBC               	movwf	actuatorTest@i_1668& (0+255),b
 11891  0006B4                     l7030:
 11892                           
 11893                           ; BSR set to: 0
 11894  0006B4  0E63               	movlw	99
 11895  0006B6  0100               	movlb	0	; () banked
 11896  0006B8  65BC               	cpfsgt	actuatorTest@i_1668& (0+255),b
 11897  0006BA  D001               	goto	l7034
 11898  0006BC  D00C               	goto	l7038
 11899  0006BE                     l7034:
 11900                           
 11901                           ; BSR set to: 0
 11902  0006BE  0E68               	movlw	104
 11903  0006C0  0100               	movlb	0	; () banked
 11904  0006C2  6FAB               	movwf	??_actuatorTest& (0+255),b
 11905  0006C4  0EE4               	movlw	228
 11906  0006C6                     u7977:
 11907  0006C6  2EE8               	decfsz	wreg,f,c
 11908  0006C8  D7FE               	bra	u7977
 11909  0006CA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11910  0006CC  D7FC               	bra	u7977
 11911  0006CE  F000               	nop	
 11912  0006D0  0100               	movlb	0	; () banked
 11913  0006D2  2BBC               	incf	actuatorTest@i_1668& (0+255),f,b
 11914  0006D4  D7EF               	goto	l7030
 11915  0006D6                     l7038:
 11916                           
 11917                           ; BSR set to: 0
 11918  0006D6  0E00               	movlw	0
 11919  0006D8  0100               	movlb	0	; () banked
 11920  0006DA  6FBD               	movwf	actuatorTest@i_1669& (0+255),b
 11921  0006DC                     l7040:
 11922                           
 11923                           ; BSR set to: 0
 11924  0006DC  0E63               	movlw	99
 11925  0006DE  0100               	movlb	0	; () banked
 11926  0006E0  65BD               	cpfsgt	actuatorTest@i_1669& (0+255),b
 11927  0006E2  D001               	goto	l7044
 11928  0006E4  D00C               	goto	l7048
 11929  0006E6                     l7044:
 11930                           
 11931                           ; BSR set to: 0
 11932  0006E6  0E68               	movlw	104
 11933  0006E8  0100               	movlb	0	; () banked
 11934  0006EA  6FAB               	movwf	??_actuatorTest& (0+255),b
 11935  0006EC  0EE4               	movlw	228
 11936  0006EE                     u7987:
 11937  0006EE  2EE8               	decfsz	wreg,f,c
 11938  0006F0  D7FE               	bra	u7987
 11939  0006F2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11940  0006F4  D7FC               	bra	u7987
 11941  0006F6  F000               	nop	
 11942  0006F8  0100               	movlb	0	; () banked
 11943  0006FA  2BBD               	incf	actuatorTest@i_1669& (0+255),f,b
 11944  0006FC  D7EF               	goto	l7040
 11945  0006FE                     l7048:
 11946                           
 11947                           ; BSR set to: 0
 11948                           ;Test.c: 314: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11949  0006FE  0E80               	movlw	128
 11950  000700  EC26  F024         	call	_lcdInst
 11951  000704  0EC0               	movlw	192
 11952  000706  EC26  F024         	call	_lcdInst
 11953                           
 11954                           ;Test.c: 315: printf("LEVEL -- 2s     ");
 11955  00070A  0EE8               	movlw	low STR_104
 11956  00070C  0100               	movlb	0	; () banked
 11957  00070E  6F8E               	movwf	printf@f& (0+255),b
 11958  000710  0EFB               	movlw	high STR_104
 11959  000712  0100               	movlb	0	; () banked
 11960  000714  6F8F               	movwf	(printf@f+1)& (0+255),b
 11961  000716  ECB8  F008         	call	_printf	;wreg free
 11962                           
 11963                           ;Test.c: 316: updateServoPosition(1150, 3);
 11964  00071A  0E04               	movlw	4
 11965  00071C  0100               	movlb	0	; () banked
 11966  00071E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11967  000720  0E7E               	movlw	126
 11968  000722  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11969  000724  0E00               	movlw	0
 11970  000726  0100               	movlb	0	; () banked
 11971  000728  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11972  00072A  0E03               	movlw	3
 11973  00072C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11974  00072E  EC5E  F01E         	call	_updateServoPosition	;wreg free
 11975                           
 11976                           ;Test.c: 317: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11977  000732  0E00               	movlw	0
 11978  000734  0100               	movlb	0	; () banked
 11979  000736  6FBE               	movwf	actuatorTest@i_1671& (0+255),b
 11980  000738                     l7056:
 11981                           
 11982                           ; BSR set to: 0
 11983  000738  0E63               	movlw	99
 11984  00073A  0100               	movlb	0	; () banked
 11985  00073C  65BE               	cpfsgt	actuatorTest@i_1671& (0+255),b
 11986  00073E  D001               	goto	l7060
 11987  000740  D00C               	goto	l7064
 11988  000742                     l7060:
 11989                           
 11990                           ; BSR set to: 0
 11991  000742  0E68               	movlw	104
 11992  000744  0100               	movlb	0	; () banked
 11993  000746  6FAB               	movwf	??_actuatorTest& (0+255),b
 11994  000748  0EE4               	movlw	228
 11995  00074A                     u7997:
 11996  00074A  2EE8               	decfsz	wreg,f,c
 11997  00074C  D7FE               	bra	u7997
 11998  00074E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11999  000750  D7FC               	bra	u7997
 12000  000752  F000               	nop	
 12001  000754  0100               	movlb	0	; () banked
 12002  000756  2BBE               	incf	actuatorTest@i_1671& (0+255),f,b
 12003  000758  D7EF               	goto	l7056
 12004  00075A                     l7064:
 12005                           
 12006                           ; BSR set to: 0
 12007  00075A  0E00               	movlw	0
 12008  00075C  0100               	movlb	0	; () banked
 12009  00075E  6FBF               	movwf	actuatorTest@i_1672& (0+255),b
 12010  000760                     l7066:
 12011                           
 12012                           ; BSR set to: 0
 12013  000760  0E63               	movlw	99
 12014  000762  0100               	movlb	0	; () banked
 12015  000764  65BF               	cpfsgt	actuatorTest@i_1672& (0+255),b
 12016  000766  D001               	goto	l7070
 12017  000768  D00C               	goto	l1151
 12018  00076A                     l7070:
 12019                           
 12020                           ; BSR set to: 0
 12021  00076A  0E68               	movlw	104
 12022  00076C  0100               	movlb	0	; () banked
 12023  00076E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12024  000770  0EE4               	movlw	228
 12025  000772                     u8007:
 12026  000772  2EE8               	decfsz	wreg,f,c
 12027  000774  D7FE               	bra	u8007
 12028  000776  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12029  000778  D7FC               	bra	u8007
 12030  00077A  F000               	nop	
 12031  00077C  0100               	movlb	0	; () banked
 12032  00077E  2BBF               	incf	actuatorTest@i_1672& (0+255),f,b
 12033  000780  D7EF               	goto	l7066
 12034  000782                     l1151:
 12035                           
 12036                           ; BSR set to: 0
 12037                           ;Test.c: 318: TMR3ON = 0;
 12038  000782  90B1               	bcf	4017,0,c	;volatile
 12039                           
 12040                           ;Test.c: 319: (INTCONbits.GIE = 0);
 12041  000784  9EF2               	bcf	intcon,7,c	;volatile
 12042                           
 12043                           ; BSR set to: 0
 12044                           ;Test.c: 324: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12045  000786  0E01               	movlw	1
 12046  000788  EC26  F024         	call	_lcdInst
 12047  00078C  0E68               	movlw	104
 12048  00078E  0100               	movlb	0	; () banked
 12049  000790  6FAB               	movwf	??_actuatorTest& (0+255),b
 12050  000792  0EE4               	movlw	228
 12051  000794                     u8017:
 12052  000794  2EE8               	decfsz	wreg,f,c
 12053  000796  D7FE               	bra	u8017
 12054  000798  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12055  00079A  D7FC               	bra	u8017
 12056  00079C  F000               	nop	
 12057  00079E  0E80               	movlw	128
 12058  0007A0  EC26  F024         	call	_lcdInst
 12059                           
 12060                           ;Test.c: 325: printf("TST: CAM SERVO");
 12061  0007A4  0E96               	movlw	low STR_107
 12062  0007A6  0100               	movlb	0	; () banked
 12063  0007A8  6F8E               	movwf	printf@f& (0+255),b
 12064  0007AA  0EFE               	movlw	high STR_107
 12065  0007AC  0100               	movlb	0	; () banked
 12066  0007AE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12067  0007B0  ECB8  F008         	call	_printf	;wreg free
 12068                           
 12069                           ;Test.c: 326: lcdInst(0b11000000);;
 12070  0007B4  0EC0               	movlw	192
 12071  0007B6  EC26  F024         	call	_lcdInst
 12072                           
 12073                           ;Test.c: 327: printf("CAM UP  |RC0=1");
 12074  0007BA  0E78               	movlw	low STR_108
 12075  0007BC  0100               	movlb	0	; () banked
 12076  0007BE  6F8E               	movwf	printf@f& (0+255),b
 12077  0007C0  0EFE               	movlw	high STR_108
 12078  0007C2  0100               	movlb	0	; () banked
 12079  0007C4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12080  0007C6  ECB8  F008         	call	_printf	;wreg free
 12081                           
 12082                           ;Test.c: 328: LATCbits.LATC0 = 1;
 12083  0007CA  808B               	bsf	3979,0,c	;volatile
 12084                           
 12085                           ;Test.c: 329: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12086  0007CC  0E00               	movlw	0
 12087  0007CE  0100               	movlb	0	; () banked
 12088  0007D0  6FC0               	movwf	actuatorTest@i_1675& (0+255),b
 12089  0007D2                     l7090:
 12090                           
 12091                           ; BSR set to: 0
 12092  0007D2  0E63               	movlw	99
 12093  0007D4  0100               	movlb	0	; () banked
 12094  0007D6  65C0               	cpfsgt	actuatorTest@i_1675& (0+255),b
 12095  0007D8  D001               	goto	l7094
 12096  0007DA  D00C               	goto	l7098
 12097  0007DC                     l7094:
 12098                           
 12099                           ; BSR set to: 0
 12100  0007DC  0E68               	movlw	104
 12101  0007DE  0100               	movlb	0	; () banked
 12102  0007E0  6FAB               	movwf	??_actuatorTest& (0+255),b
 12103  0007E2  0EE4               	movlw	228
 12104  0007E4                     u8027:
 12105  0007E4  2EE8               	decfsz	wreg,f,c
 12106  0007E6  D7FE               	bra	u8027
 12107  0007E8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12108  0007EA  D7FC               	bra	u8027
 12109  0007EC  F000               	nop	
 12110  0007EE  0100               	movlb	0	; () banked
 12111  0007F0  2BC0               	incf	actuatorTest@i_1675& (0+255),f,b
 12112  0007F2  D7EF               	goto	l7090
 12113  0007F4                     l7098:
 12114                           
 12115                           ; BSR set to: 0
 12116  0007F4  0E00               	movlw	0
 12117  0007F6  0100               	movlb	0	; () banked
 12118  0007F8  6FC1               	movwf	actuatorTest@i_1676& (0+255),b
 12119  0007FA                     l7100:
 12120                           
 12121                           ; BSR set to: 0
 12122  0007FA  0E63               	movlw	99
 12123  0007FC  0100               	movlb	0	; () banked
 12124  0007FE  65C1               	cpfsgt	actuatorTest@i_1676& (0+255),b
 12125  000800  D001               	goto	l7104
 12126  000802  D00C               	goto	l7108
 12127  000804                     l7104:
 12128                           
 12129                           ; BSR set to: 0
 12130  000804  0E68               	movlw	104
 12131  000806  0100               	movlb	0	; () banked
 12132  000808  6FAB               	movwf	??_actuatorTest& (0+255),b
 12133  00080A  0EE4               	movlw	228
 12134  00080C                     u8037:
 12135  00080C  2EE8               	decfsz	wreg,f,c
 12136  00080E  D7FE               	bra	u8037
 12137  000810  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12138  000812  D7FC               	bra	u8037
 12139  000814  F000               	nop	
 12140  000816  0100               	movlb	0	; () banked
 12141  000818  2BC1               	incf	actuatorTest@i_1676& (0+255),f,b
 12142  00081A  D7EF               	goto	l7100
 12143  00081C                     l7108:
 12144                           
 12145                           ; BSR set to: 0
 12146                           ;Test.c: 330: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12147  00081C  0E80               	movlw	128
 12148  00081E  EC26  F024         	call	_lcdInst
 12149  000822  0EC0               	movlw	192
 12150  000824  EC26  F024         	call	_lcdInst
 12151                           
 12152                           ;Test.c: 331: printf("CAM DWN |RC0=0");
 12153  000828  0E69               	movlw	low STR_109
 12154  00082A  0100               	movlb	0	; () banked
 12155  00082C  6F8E               	movwf	printf@f& (0+255),b
 12156  00082E  0EFE               	movlw	high STR_109
 12157  000830  0100               	movlb	0	; () banked
 12158  000832  6F8F               	movwf	(printf@f+1)& (0+255),b
 12159  000834  ECB8  F008         	call	_printf	;wreg free
 12160                           
 12161                           ;Test.c: 334: for(i=0;i<10000;i++)
 12162  000838  0E00               	movlw	0
 12163  00083A  0100               	movlb	0	; () banked
 12164  00083C  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12165  00083E  0E00               	movlw	0
 12166  000840  6FC4               	movwf	actuatorTest@i& (0+255),b
 12167  000842                     l7114:
 12168                           
 12169                           ; BSR set to: 0
 12170  000842  0100               	movlb	0	; () banked
 12171  000844  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12172  000846  D008               	goto	l1156
 12173  000848  0E10               	movlw	16
 12174  00084A  0100               	movlb	0	; () banked
 12175  00084C  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 12176  00084E  0E27               	movlw	39
 12177  000850  0100               	movlb	0	; () banked
 12178  000852  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 12179  000854  B0D8               	btfsc	status,0,c
 12180  000856  D00D               	goto	l7124
 12181  000858                     l1156:
 12182                           
 12183                           ; BSR set to: 0
 12184                           ;Test.c: 335: {
 12185                           ;Test.c: 336: LATCbits.LATC0 = 1;
 12186  000858  808B               	bsf	3979,0,c	;volatile
 12187                           
 12188                           ; BSR set to: 0
 12189                           ;Test.c: 337: _delay((unsigned long)((10)*(32000000/4000000.0)));
 12190  00085A  0E1A               	movlw	26
 12191  00085C                     u8047:
 12192  00085C  2EE8               	decfsz	wreg,f,c
 12193  00085E  D7FE               	bra	u8047
 12194  000860  D000               	nop2	
 12195                           
 12196                           ;Test.c: 338: LATCbits.LATC0 = 0;
 12197  000862  908B               	bcf	3979,0,c	;volatile
 12198                           
 12199                           ;Test.c: 339: _delay((unsigned long)((90)*(32000000/4000000.0)));
 12200  000864  0EF0               	movlw	240
 12201  000866                     u8057:
 12202  000866  2EE8               	decfsz	wreg,f,c
 12203  000868  D7FE               	bra	u8057
 12204  00086A  0100               	movlb	0	; () banked
 12205  00086C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12206  00086E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12207  000870  D7E8               	goto	l7114
 12208  000872                     l7124:
 12209                           
 12210                           ; BSR set to: 0
 12211                           ;Test.c: 340: }
 12212                           ;Test.c: 342: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12213  000872  0E00               	movlw	0
 12214  000874  0100               	movlb	0	; () banked
 12215  000876  6FC2               	movwf	actuatorTest@i_1678& (0+255),b
 12216  000878                     l7126:
 12217                           
 12218                           ; BSR set to: 0
 12219  000878  0E63               	movlw	99
 12220  00087A  0100               	movlb	0	; () banked
 12221  00087C  65C2               	cpfsgt	actuatorTest@i_1678& (0+255),b
 12222  00087E  D001               	goto	l7130
 12223  000880  D00C               	goto	l7134
 12224  000882                     l7130:
 12225                           
 12226                           ; BSR set to: 0
 12227  000882  0E68               	movlw	104
 12228  000884  0100               	movlb	0	; () banked
 12229  000886  6FAB               	movwf	??_actuatorTest& (0+255),b
 12230  000888  0EE4               	movlw	228
 12231  00088A                     u8067:
 12232  00088A  2EE8               	decfsz	wreg,f,c
 12233  00088C  D7FE               	bra	u8067
 12234  00088E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12235  000890  D7FC               	bra	u8067
 12236  000892  F000               	nop	
 12237  000894  0100               	movlb	0	; () banked
 12238  000896  2BC2               	incf	actuatorTest@i_1678& (0+255),f,b
 12239  000898  D7EF               	goto	l7126
 12240  00089A                     l7134:
 12241                           
 12242                           ; BSR set to: 0
 12243  00089A  0E00               	movlw	0
 12244  00089C  0100               	movlb	0	; () banked
 12245  00089E  6FC3               	movwf	actuatorTest@i_1679& (0+255),b
 12246  0008A0                     l7136:
 12247                           
 12248                           ; BSR set to: 0
 12249  0008A0  0E63               	movlw	99
 12250  0008A2  0100               	movlb	0	; () banked
 12251  0008A4  65C3               	cpfsgt	actuatorTest@i_1679& (0+255),b
 12252  0008A6  D001               	goto	l7140
 12253  0008A8  D00C               	goto	l7144
 12254  0008AA                     l7140:
 12255                           
 12256                           ; BSR set to: 0
 12257  0008AA  0E68               	movlw	104
 12258  0008AC  0100               	movlb	0	; () banked
 12259  0008AE  6FAB               	movwf	??_actuatorTest& (0+255),b
 12260  0008B0  0EE4               	movlw	228
 12261  0008B2                     u8077:
 12262  0008B2  2EE8               	decfsz	wreg,f,c
 12263  0008B4  D7FE               	bra	u8077
 12264  0008B6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12265  0008B8  D7FC               	bra	u8077
 12266  0008BA  F000               	nop	
 12267  0008BC  0100               	movlb	0	; () banked
 12268  0008BE  2BC3               	incf	actuatorTest@i_1679& (0+255),f,b
 12269  0008C0  D7EF               	goto	l7136
 12270  0008C2                     l7144:
 12271                           
 12272                           ; BSR set to: 0
 12273                           ;Test.c: 343: machine_state = Testing_state;
 12274  0008C2  0E03               	movlw	3
 12275  0008C4  0100               	movlb	0	; () banked
 12276  0008C6  6FFC               	movwf	_machine_state& (0+255),b
 12277                           
 12278                           ; BSR set to: 0
 12279  0008C8  0012               	return		;funcret
 12280  0008CA                     __end_of_actuatorTest:
 12281                           	opt stack 0
 12282                           tblptru	equ	0xFF8
 12283                           tblptrh	equ	0xFF7
 12284                           tblptrl	equ	0xFF6
 12285                           tablat	equ	0xFF5
 12286                           prodh	equ	0xFF4
 12287                           prodl	equ	0xFF3
 12288                           intcon	equ	0xFF2
 12289                           intcon2	equ	0xFF1
 12290                           intcon3	equ	0xFF0
 12291                           postinc0	equ	0xFEE
 12292                           wreg	equ	0xFE8
 12293                           postdec1	equ	0xFE5
 12294                           fsr1l	equ	0xFE1
 12295                           indf2	equ	0xFDF
 12296                           postinc2	equ	0xFDE
 12297                           postdec2	equ	0xFDD
 12298                           fsr2h	equ	0xFDA
 12299                           fsr2l	equ	0xFD9
 12300                           status	equ	0xFD8
 12301                           
 12302 ;; *************** function _SpeedTest *****************
 12303 ;; Defined at:
 12304 ;;		line 518 in file "Test.c"
 12305 ;; Parameters:    Size  Location     Type
 12306 ;;		None
 12307 ;; Auto vars:     Size  Location     Type
 12308 ;;		None
 12309 ;; Return value:  Size  Location     Type
 12310 ;;                  1    wreg      void 
 12311 ;; Registers used:
 12312 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12313 ;; Tracked objects:
 12314 ;;		On entry : 0/0
 12315 ;;		On exit  : 0/0
 12316 ;;		Unchanged: 0/0
 12317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12319 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12320 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12321 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12322 ;;Total ram usage:        1 bytes
 12323 ;; Hardware stack levels used:    1
 12324 ;; Hardware stack levels required when called:   10
 12325 ;; This function calls:
 12326 ;;		_lcdInst
 12327 ;;		_printf
 12328 ;; This function is called by:
 12329 ;;		_Test
 12330 ;; This function uses a non-reentrant model
 12331 ;;
 12332                           
 12333                           	psect	text42
 12334  003AC0                     __ptext42:
 12335                           	opt stack 0
 12336  003AC0                     _SpeedTest:
 12337                           	opt stack 19
 12338                           
 12339                           ;Test.c: 519: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12340                           
 12341                           ; BSR set to: 0
 12342                           ;incstack = 0
 12343  003AC0  0E01               	movlw	1
 12344  003AC2  EC26  F024         	call	_lcdInst
 12345  003AC6  0E68               	movlw	104
 12346  003AC8  0100               	movlb	0	; () banked
 12347  003ACA  6FAB               	movwf	??_SpeedTest& (0+255),b
 12348  003ACC  0EE4               	movlw	228
 12349  003ACE                     u8087:
 12350  003ACE  2EE8               	decfsz	wreg,f,c
 12351  003AD0  D7FE               	bra	u8087
 12352  003AD2  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 12353  003AD4  D7FC               	bra	u8087
 12354  003AD6  F000               	nop	
 12355  003AD8  0E80               	movlw	128
 12356  003ADA  EC26  F024         	call	_lcdInst
 12357                           
 12358                           ;Test.c: 520: printf("S: D WILL RETURN ");
 12359  003ADE  0E7F               	movlw	low STR_116
 12360  003AE0  0100               	movlb	0	; () banked
 12361  003AE2  6F8E               	movwf	printf@f& (0+255),b
 12362  003AE4  0EFB               	movlw	high STR_116
 12363  003AE6  0100               	movlb	0	; () banked
 12364  003AE8  6F8F               	movwf	(printf@f+1)& (0+255),b
 12365  003AEA  ECB8  F008         	call	_printf	;wreg free
 12366                           
 12367                           ;Test.c: 521: lcdInst(0b11000000);;
 12368  003AEE  0EC0               	movlw	192
 12369  003AF0  EC26  F024         	call	_lcdInst
 12370                           
 12371                           ;Test.c: 522: printf("OTHER SETS RA5   ");
 12372  003AF4  0E6D               	movlw	low STR_112
 12373  003AF6  0100               	movlb	0	; () banked
 12374  003AF8  6F8E               	movwf	printf@f& (0+255),b
 12375  003AFA  0EFB               	movlw	high STR_112
 12376  003AFC  0100               	movlb	0	; () banked
 12377  003AFE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12378  003B00  ECB8  F008         	call	_printf	;wreg free
 12379  003B04                     l1233:
 12380  003B04  A281               	btfss	3969,1,c	;volatile
 12381  003B06  D7FE               	goto	l1233
 12382                           
 12383                           ;Test.c: 527: }
 12384                           ;Test.c: 528: if(PORTB >> 4 == 0b1111){
 12385  003B08  3881               	swapf	3969,w,c	;volatile
 12386  003B0A  0B0F               	andlw	15
 12387  003B0C  0A0F               	xorlw	15
 12388  003B0E  B4D8               	btfsc	status,2,c
 12389  003B10  0012               	return	
 12390  003B12  D014               	goto	l7186
 12391  003B14                     l1240:
 12392                           
 12393                           ;Test.c: 533: LATAbits.LATA5 = 1;
 12394  003B14  8A89               	bsf	3977,5,c	;volatile
 12395                           
 12396                           ;Test.c: 534: _delay((unsigned long)((5)*(32000000/4000.0)));
 12397  003B16  0E34               	movlw	52
 12398  003B18  0100               	movlb	0	; () banked
 12399  003B1A  6FAB               	movwf	??_SpeedTest& (0+255),b
 12400  003B1C  0EF1               	movlw	241
 12401  003B1E                     u8097:
 12402  003B1E  2EE8               	decfsz	wreg,f,c
 12403  003B20  D7FE               	bra	u8097
 12404  003B22  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 12405  003B24  D7FC               	bra	u8097
 12406  003B26  D000               	nop2	
 12407                           
 12408                           ;Test.c: 535: LATAbits.LATA5 = 0;
 12409  003B28  9A89               	bcf	3977,5,c	;volatile
 12410                           
 12411                           ;Test.c: 536: _delay((unsigned long)((5)*(32000000/4000.0)));
 12412  003B2A  0E34               	movlw	52
 12413  003B2C  0100               	movlb	0	; () banked
 12414  003B2E  6FAB               	movwf	??_SpeedTest& (0+255),b
 12415  003B30  0EF1               	movlw	241
 12416  003B32                     u8107:
 12417  003B32  2EE8               	decfsz	wreg,f,c
 12418  003B34  D7FE               	bra	u8107
 12419  003B36  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 12420  003B38  D7FC               	bra	u8107
 12421  003B3A  D000               	nop2	
 12422  003B3C                     l7186:
 12423  003B3C  B281               	btfsc	3969,1,c	;volatile
 12424  003B3E  D7EA               	goto	l1240
 12425                           
 12426                           ;Test.c: 539: }
 12427                           ;Test.c: 540: LATAbits.LATA5 = 0;
 12428  003B40  9A89               	bcf	3977,5,c	;volatile
 12429  003B42  D7E0               	goto	l1233
 12430  003B44                     __end_of_SpeedTest:
 12431                           	opt stack 0
 12432                           tblptru	equ	0xFF8
 12433                           tblptrh	equ	0xFF7
 12434                           tblptrl	equ	0xFF6
 12435                           tablat	equ	0xFF5
 12436                           prodh	equ	0xFF4
 12437                           prodl	equ	0xFF3
 12438                           intcon	equ	0xFF2
 12439                           intcon2	equ	0xFF1
 12440                           intcon3	equ	0xFF0
 12441                           postinc0	equ	0xFEE
 12442                           wreg	equ	0xFE8
 12443                           postdec1	equ	0xFE5
 12444                           fsr1l	equ	0xFE1
 12445                           indf2	equ	0xFDF
 12446                           postinc2	equ	0xFDE
 12447                           postdec2	equ	0xFDD
 12448                           fsr2h	equ	0xFDA
 12449                           fsr2l	equ	0xFD9
 12450                           status	equ	0xFD8
 12451                           
 12452 ;; *************** function _PusherTest *****************
 12453 ;; Defined at:
 12454 ;;		line 461 in file "Test.c"
 12455 ;; Parameters:    Size  Location     Type
 12456 ;;		None
 12457 ;; Auto vars:     Size  Location     Type
 12458 ;;  i               2   44[BANK0 ] int 
 12459 ;; Return value:  Size  Location     Type
 12460 ;;                  1    wreg      void 
 12461 ;; Registers used:
 12462 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12463 ;; Tracked objects:
 12464 ;;		On entry : 0/0
 12465 ;;		On exit  : 0/0
 12466 ;;		Unchanged: 0/0
 12467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12469 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12470 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12471 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12472 ;;Total ram usage:        3 bytes
 12473 ;; Hardware stack levels used:    1
 12474 ;; Hardware stack levels required when called:   10
 12475 ;; This function calls:
 12476 ;;		_lcdInst
 12477 ;;		_printf
 12478 ;; This function is called by:
 12479 ;;		_Test
 12480 ;; This function uses a non-reentrant model
 12481 ;;
 12482                           
 12483                           	psect	text43
 12484  003BC8                     __ptext43:
 12485                           	opt stack 0
 12486  003BC8                     _PusherTest:
 12487                           	opt stack 19
 12488                           
 12489                           ;Test.c: 462: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12490                           
 12491                           ;incstack = 0
 12492  003BC8  0E01               	movlw	1
 12493  003BCA  EC26  F024         	call	_lcdInst
 12494  003BCE  0E68               	movlw	104
 12495  003BD0  0100               	movlb	0	; () banked
 12496  003BD2  6FAB               	movwf	??_PusherTest& (0+255),b
 12497  003BD4  0EE4               	movlw	228
 12498  003BD6                     u8117:
 12499  003BD6  2EE8               	decfsz	wreg,f,c
 12500  003BD8  D7FE               	bra	u8117
 12501  003BDA  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 12502  003BDC  D7FC               	bra	u8117
 12503  003BDE  F000               	nop	
 12504  003BE0  0E80               	movlw	128
 12505  003BE2  EC26  F024         	call	_lcdInst
 12506                           
 12507                           ;Test.c: 463: printf("PUSHER TST");
 12508  003BE6  0E71               	movlw	low STR_113
 12509  003BE8  0100               	movlb	0	; () banked
 12510  003BEA  6F8E               	movwf	printf@f& (0+255),b
 12511  003BEC  0EFF               	movlw	high STR_113
 12512  003BEE  0100               	movlb	0	; () banked
 12513  003BF0  6F8F               	movwf	(printf@f+1)& (0+255),b
 12514  003BF2  ECB8  F008         	call	_printf	;wreg free
 12515  003BF6                     l1204:
 12516  003BF6  A281               	btfss	3969,1,c	;volatile
 12517  003BF8  D7FE               	goto	l1204
 12518                           
 12519                           ;Test.c: 469: }
 12520                           ;Test.c: 470: if(PORTB >> 4 == 0b1111){
 12521  003BFA  3881               	swapf	3969,w,c	;volatile
 12522  003BFC  0B0F               	andlw	15
 12523  003BFE  0A0F               	xorlw	15
 12524  003C00  B4D8               	btfsc	status,2,c
 12525  003C02  0012               	return	
 12526                           
 12527                           ;Test.c: 472: }
 12528                           ;Test.c: 476: for(int i = 0; i<3000; i++){
 12529                           
 12530                           ;Test.c: 471: break;
 12531  003C04  0E00               	movlw	0
 12532  003C06  0100               	movlb	0	; () banked
 12533  003C08  6FAD               	movwf	(PusherTest@i+1)& (0+255),b
 12534  003C0A  0E00               	movlw	0
 12535  003C0C  6FAC               	movwf	PusherTest@i& (0+255),b
 12536  003C0E                     l7202:
 12537                           
 12538                           ; BSR set to: 0
 12539  003C0E  0100               	movlb	0	; () banked
 12540  003C10  BFAD               	btfsc	(PusherTest@i+1)& (0+255),7,b
 12541  003C12  D008               	goto	l1209
 12542  003C14  0EB8               	movlw	184
 12543  003C16  0100               	movlb	0	; () banked
 12544  003C18  5DAC               	subwf	PusherTest@i& (0+255),w,b
 12545  003C1A  0E0B               	movlw	11
 12546  003C1C  0100               	movlb	0	; () banked
 12547  003C1E  59AD               	subwfb	(PusherTest@i+1)& (0+255),w,b
 12548  003C20  B0D8               	btfsc	status,0,c
 12549  003C22  D00D               	goto	l1211
 12550  003C24                     l1209:
 12551                           
 12552                           ; BSR set to: 0
 12553                           ;Test.c: 477: LATAbits.LATA4 = 1;
 12554  003C24  8889               	bsf	3977,4,c	;volatile
 12555                           
 12556                           ; BSR set to: 0
 12557                           ;Test.c: 478: _delay((unsigned long)((75)*(32000000/4000000.0)));
 12558  003C26  0EC8               	movlw	200
 12559  003C28                     u8127:
 12560  003C28  2EE8               	decfsz	wreg,f,c
 12561  003C2A  D7FE               	bra	u8127
 12562                           
 12563                           ;Test.c: 479: LATAbits.LATA4 = 0;
 12564  003C2C  9889               	bcf	3977,4,c	;volatile
 12565                           
 12566                           ;Test.c: 480: _delay((unsigned long)((25)*(32000000/4000000.0)));
 12567  003C2E  0E42               	movlw	66
 12568  003C30                     u8137:
 12569  003C30  2EE8               	decfsz	wreg,f,c
 12570  003C32  D7FE               	bra	u8137
 12571  003C34  D000               	nop2	
 12572  003C36  0100               	movlb	0	; () banked
 12573  003C38  4BAC               	infsnz	PusherTest@i& (0+255),f,b
 12574  003C3A  2BAD               	incf	(PusherTest@i+1)& (0+255),f,b
 12575  003C3C  D7E8               	goto	l7202
 12576  003C3E                     l1211:
 12577  003C3E  A281               	btfss	3969,1,c	;volatile
 12578  003C40  D7DA               	goto	l1204
 12579  003C42  D7FD               	goto	l1211
 12580  003C44                     __end_of_PusherTest:
 12581                           	opt stack 0
 12582                           tblptru	equ	0xFF8
 12583                           tblptrh	equ	0xFF7
 12584                           tblptrl	equ	0xFF6
 12585                           tablat	equ	0xFF5
 12586                           prodh	equ	0xFF4
 12587                           prodl	equ	0xFF3
 12588                           intcon	equ	0xFF2
 12589                           intcon2	equ	0xFF1
 12590                           intcon3	equ	0xFF0
 12591                           postinc0	equ	0xFEE
 12592                           wreg	equ	0xFE8
 12593                           postdec1	equ	0xFE5
 12594                           fsr1l	equ	0xFE1
 12595                           indf2	equ	0xFDF
 12596                           postinc2	equ	0xFDE
 12597                           postdec2	equ	0xFDD
 12598                           fsr2h	equ	0xFDA
 12599                           fsr2l	equ	0xFD9
 12600                           status	equ	0xFD8
 12601                           
 12602 ;; *************** function _PortTests *****************
 12603 ;; Defined at:
 12604 ;;		line 403 in file "Test.c"
 12605 ;; Parameters:    Size  Location     Type
 12606 ;;		None
 12607 ;; Auto vars:     Size  Location     Type
 12608 ;;		None
 12609 ;; Return value:  Size  Location     Type
 12610 ;;                  1    wreg      void 
 12611 ;; Registers used:
 12612 ;;		wreg, status,2, status,0
 12613 ;; Tracked objects:
 12614 ;;		On entry : 0/0
 12615 ;;		On exit  : 0/0
 12616 ;;		Unchanged: 0/0
 12617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12620 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12621 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12622 ;;Total ram usage:        2 bytes
 12623 ;; Hardware stack levels used:    1
 12624 ;; Hardware stack levels required when called:    7
 12625 ;; This function calls:
 12626 ;;		Nothing
 12627 ;; This function is called by:
 12628 ;;		_Test
 12629 ;; This function uses a non-reentrant model
 12630 ;;
 12631                           
 12632                           	psect	text44
 12633  003B44                     __ptext44:
 12634                           	opt stack 0
 12635  003B44                     _PortTests:
 12636                           	opt stack 22
 12637  003B44                     l1169:
 12638  003B44  A281               	btfss	3969,1,c	;volatile
 12639  003B46  D7FE               	goto	l1169
 12640                           
 12641                           ;Test.c: 407: var = PORTB >> 4;
 12642  003B48  CF81 F080          	movff	3969,??_PortTests	;volatile
 12643  003B4C  0100               	movlb	0	; () banked
 12644  003B4E  3B80               	swapf	??_PortTests& (0+255),f,b
 12645  003B50  0E0F               	movlw	15
 12646  003B52  1780               	andwf	??_PortTests& (0+255),f,b
 12647  003B54  0100               	movlb	0	; () banked
 12648  003B56  5180               	movf	??_PortTests& (0+255),w,b
 12649  003B58  0100               	movlb	0	; () banked
 12650  003B5A  6FFA               	movwf	_var& (0+255),b
 12651  003B5C  6BFB               	clrf	(_var+1)& (0+255),b
 12652                           
 12653                           ;Test.c: 408: switch(var){
 12654  003B5E  D00C               	goto	l7216
 12655  003B60                     l1173:
 12656                           
 12657                           ; BSR set to: 0
 12658                           ;Test.c: 410: LATEbits.LATE0 = 1;
 12659  003B60  808D               	bsf	3981,0,c	;volatile
 12660                           
 12661                           ;Test.c: 411: break;
 12662  003B62  D027               	goto	l1181
 12663  003B64                     l1175:
 12664                           
 12665                           ; BSR set to: 0
 12666                           ;Test.c: 413: LATEbits.LATE1 = 1;
 12667  003B64  828D               	bsf	3981,1,c	;volatile
 12668                           
 12669                           ;Test.c: 414: break;
 12670  003B66  D025               	goto	l1181
 12671  003B68                     l1176:
 12672                           
 12673                           ; BSR set to: 0
 12674                           ;Test.c: 416: LATDbits.LATD0 = 1;
 12675  003B68  808C               	bsf	3980,0,c	;volatile
 12676                           
 12677                           ;Test.c: 417: break;
 12678  003B6A  D023               	goto	l1181
 12679  003B6C                     l1177:
 12680                           
 12681                           ; BSR set to: 0
 12682                           ;Test.c: 419: LATAbits.LATA3 = 1;
 12683  003B6C  8689               	bsf	3977,3,c	;volatile
 12684                           
 12685                           ;Test.c: 420: break;
 12686  003B6E  D021               	goto	l1181
 12687  003B70                     l1178:
 12688                           
 12689                           ; BSR set to: 0
 12690                           ;Test.c: 422: LATAbits.LATA4 = 1;
 12691  003B70  8889               	bsf	3977,4,c	;volatile
 12692                           
 12693                           ;Test.c: 423: break;
 12694  003B72  D01F               	goto	l1181
 12695  003B74                     l1179:
 12696                           
 12697                           ; BSR set to: 0
 12698                           ;Test.c: 425: LATAbits.LATA5 = 1;
 12699  003B74  8A89               	bsf	3977,5,c	;volatile
 12700                           
 12701                           ; BSR set to: 0
 12702                           ;Test.c: 429: }
 12703                           
 12704                           ; BSR set to: 0
 12705                           ;Test.c: 428: break;
 12706                           
 12707                           ;Test.c: 427: default:
 12708                           
 12709                           ;Test.c: 426: break;
 12710  003B76  D01D               	goto	l1181
 12711  003B78                     l7216:
 12712                           
 12713                           ; BSR set to: 0
 12714  003B78  C0FA  F080         	movff	_var,??_PortTests
 12715  003B7C  C0FB  F081         	movff	_var+1,??_PortTests+1
 12716                           
 12717                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12718                           ; Switch size 1, requested type "space"
 12719                           ; Number of cases is 1, Range of values is 0 to 0
 12720                           ; switch strategies available:
 12721                           ; Name         Instructions Cycles
 12722                           ; simple_byte            4     3 (average)
 12723                           ;	Chosen strategy is simple_byte
 12724  003B80  0100               	movlb	0	; () banked
 12725  003B82  5181               	movf	(??_PortTests+1)& (0+255),w,b
 12726  003B84  0A00               	xorlw	0	; case 0
 12727  003B86  A4D8               	btfss	status,2,c
 12728  003B88  D014               	goto	l1181
 12729                           
 12730                           ; BSR set to: 0
 12731                           ; Switch size 1, requested type "space"
 12732                           ; Number of cases is 6, Range of values is 0 to 5
 12733                           ; switch strategies available:
 12734                           ; Name         Instructions Cycles
 12735                           ; simple_byte           19    10 (average)
 12736                           ;	Chosen strategy is simple_byte
 12737  003B8A  0100               	movlb	0	; () banked
 12738  003B8C  5180               	movf	??_PortTests& (0+255),w,b
 12739  003B8E  0A00               	xorlw	0	; case 0
 12740  003B90  B4D8               	btfsc	status,2,c
 12741  003B92  D7E6               	goto	l1173
 12742  003B94  0A01               	xorlw	1	; case 1
 12743  003B96  B4D8               	btfsc	status,2,c
 12744  003B98  D7E5               	goto	l1175
 12745  003B9A  0A03               	xorlw	3	; case 2
 12746  003B9C  B4D8               	btfsc	status,2,c
 12747  003B9E  D7E4               	goto	l1176
 12748  003BA0  0A01               	xorlw	1	; case 3
 12749  003BA2  B4D8               	btfsc	status,2,c
 12750  003BA4  D7E3               	goto	l1177
 12751  003BA6  0A07               	xorlw	7	; case 4
 12752  003BA8  B4D8               	btfsc	status,2,c
 12753  003BAA  D7E2               	goto	l1178
 12754  003BAC  0A01               	xorlw	1	; case 5
 12755  003BAE  B4D8               	btfsc	status,2,c
 12756  003BB0  D7E1               	goto	l1179
 12757  003BB2                     l1181:
 12758  003BB2  B281               	btfsc	3969,1,c	;volatile
 12759  003BB4  D7FE               	goto	l1181
 12760                           
 12761                           ;Test.c: 431: __nop();
 12762  003BB6  F000               	nop	
 12763                           
 12764                           ;Test.c: 432: __nop();
 12765  003BB8  F000               	nop	
 12766                           
 12767                           ;Test.c: 433: LATA = 0x00;
 12768  003BBA  0E00               	movlw	0
 12769  003BBC  6E89               	movwf	3977,c	;volatile
 12770                           
 12771                           ;Test.c: 434: LATE = 0x00;
 12772  003BBE  0E00               	movlw	0
 12773  003BC0  6E8D               	movwf	3981,c	;volatile
 12774                           
 12775                           ;Test.c: 435: LATD = 0x00; }
 12776  003BC2  0E00               	movlw	0
 12777  003BC4  6E8C               	movwf	3980,c	;volatile
 12778  003BC6  D7BE               	goto	l1169
 12779  003BC8                     __end_of_PortTests:
 12780                           	opt stack 0
 12781                           tblptru	equ	0xFF8
 12782                           tblptrh	equ	0xFF7
 12783                           tblptrl	equ	0xFF6
 12784                           tablat	equ	0xFF5
 12785                           prodh	equ	0xFF4
 12786                           prodl	equ	0xFF3
 12787                           intcon	equ	0xFF2
 12788                           intcon2	equ	0xFF1
 12789                           intcon3	equ	0xFF0
 12790                           postinc0	equ	0xFEE
 12791                           wreg	equ	0xFE8
 12792                           postdec1	equ	0xFE5
 12793                           fsr1l	equ	0xFE1
 12794                           indf2	equ	0xFDF
 12795                           postinc2	equ	0xFDE
 12796                           postdec2	equ	0xFDD
 12797                           fsr2h	equ	0xFDA
 12798                           fsr2l	equ	0xFD9
 12799                           status	equ	0xFD8
 12800                           
 12801 ;; *************** function _PortTestA5 *****************
 12802 ;; Defined at:
 12803 ;;		line 438 in file "Test.c"
 12804 ;; Parameters:    Size  Location     Type
 12805 ;;		None
 12806 ;; Auto vars:     Size  Location     Type
 12807 ;;		None
 12808 ;; Return value:  Size  Location     Type
 12809 ;;                  1    wreg      void 
 12810 ;; Registers used:
 12811 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12812 ;; Tracked objects:
 12813 ;;		On entry : 0/0
 12814 ;;		On exit  : 0/0
 12815 ;;		Unchanged: 0/0
 12816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12819 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12820 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12821 ;;Total ram usage:        1 bytes
 12822 ;; Hardware stack levels used:    1
 12823 ;; Hardware stack levels required when called:   10
 12824 ;; This function calls:
 12825 ;;		_lcdInst
 12826 ;;		_printf
 12827 ;; This function is called by:
 12828 ;;		_Test
 12829 ;; This function uses a non-reentrant model
 12830 ;;
 12831                           
 12832                           	psect	text45
 12833  003F94                     __ptext45:
 12834                           	opt stack 0
 12835  003F94                     _PortTestA5:
 12836                           	opt stack 19
 12837                           
 12838                           ;Test.c: 439: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12839                           
 12840                           ;incstack = 0
 12841  003F94  0E01               	movlw	1
 12842  003F96  EC26  F024         	call	_lcdInst
 12843  003F9A  0E68               	movlw	104
 12844  003F9C  0100               	movlb	0	; () banked
 12845  003F9E  6FAB               	movwf	??_PortTestA5& (0+255),b
 12846  003FA0  0EE4               	movlw	228
 12847  003FA2                     u8147:
 12848  003FA2  2EE8               	decfsz	wreg,f,c
 12849  003FA4  D7FE               	bra	u8147
 12850  003FA6  2FAB               	decfsz	??_PortTestA5& (0+255),f,b
 12851  003FA8  D7FC               	bra	u8147
 12852  003FAA  F000               	nop	
 12853  003FAC  0E80               	movlw	128
 12854  003FAE  EC26  F024         	call	_lcdInst
 12855                           
 12856                           ;Test.c: 440: printf("D WILL RETURN    ");
 12857  003FB2  0E5B               	movlw	low STR_111
 12858  003FB4  0100               	movlb	0	; () banked
 12859  003FB6  6F8E               	movwf	printf@f& (0+255),b
 12860  003FB8  0EFB               	movlw	high STR_111
 12861  003FBA  0100               	movlb	0	; () banked
 12862  003FBC  6F8F               	movwf	(printf@f+1)& (0+255),b
 12863  003FBE  ECB8  F008         	call	_printf	;wreg free
 12864                           
 12865                           ;Test.c: 441: lcdInst(0b11000000);;
 12866  003FC2  0EC0               	movlw	192
 12867  003FC4  EC26  F024         	call	_lcdInst
 12868                           
 12869                           ;Test.c: 442: printf("OTHER SETS RA5   ");
 12870  003FC8  0E6D               	movlw	low STR_112
 12871  003FCA  0100               	movlb	0	; () banked
 12872  003FCC  6F8E               	movwf	printf@f& (0+255),b
 12873  003FCE  0EFB               	movlw	high STR_112
 12874  003FD0  0100               	movlb	0	; () banked
 12875  003FD2  6F8F               	movwf	(printf@f+1)& (0+255),b
 12876  003FD4  ECB8  F008         	call	_printf	;wreg free
 12877  003FD8                     l1190:
 12878  003FD8  A281               	btfss	3969,1,c	;volatile
 12879  003FDA  D7FE               	goto	l1190
 12880                           
 12881                           ;Test.c: 447: }
 12882                           ;Test.c: 448: if(PORTB >> 4 == 0b1111){
 12883  003FDC  3881               	swapf	3969,w,c	;volatile
 12884  003FDE  0B0F               	andlw	15
 12885  003FE0  0A0F               	xorlw	15
 12886  003FE2  B4D8               	btfsc	status,2,c
 12887  003FE4  0012               	return	
 12888                           
 12889                           ;Test.c: 451: else{
 12890                           ;Test.c: 452: LATAbits.LATA5 = 1;
 12891                           
 12892                           ;Test.c: 450: }
 12893                           
 12894                           ;Test.c: 449: break;
 12895  003FE6  8A89               	bsf	3977,5,c	;volatile
 12896  003FE8                     l1196:
 12897  003FE8  B281               	btfsc	3969,1,c	;volatile
 12898  003FEA  D7FE               	goto	l1196
 12899                           
 12900                           ;Test.c: 455: }
 12901                           ;Test.c: 456: LATAbits.LATA5 = 0;
 12902  003FEC  9A89               	bcf	3977,5,c	;volatile
 12903  003FEE  D7F4               	goto	l1190
 12904  003FF0                     __end_of_PortTestA5:
 12905                           	opt stack 0
 12906                           tblptru	equ	0xFF8
 12907                           tblptrh	equ	0xFF7
 12908                           tblptrl	equ	0xFF6
 12909                           tablat	equ	0xFF5
 12910                           prodh	equ	0xFF4
 12911                           prodl	equ	0xFF3
 12912                           intcon	equ	0xFF2
 12913                           intcon2	equ	0xFF1
 12914                           intcon3	equ	0xFF0
 12915                           postinc0	equ	0xFEE
 12916                           wreg	equ	0xFE8
 12917                           postdec1	equ	0xFE5
 12918                           fsr1l	equ	0xFE1
 12919                           indf2	equ	0xFDF
 12920                           postinc2	equ	0xFDE
 12921                           postdec2	equ	0xFDD
 12922                           fsr2h	equ	0xFDA
 12923                           fsr2l	equ	0xFD9
 12924                           status	equ	0xFD8
 12925                           
 12926 ;; *************** function _EEPROMTest *****************
 12927 ;; Defined at:
 12928 ;;		line 545 in file "Test.c"
 12929 ;; Parameters:    Size  Location     Type
 12930 ;;		None
 12931 ;; Auto vars:     Size  Location     Type
 12932 ;;		None
 12933 ;; Return value:  Size  Location     Type
 12934 ;;                  1    wreg      void 
 12935 ;; Registers used:
 12936 ;;		None
 12937 ;; Tracked objects:
 12938 ;;		On entry : 0/0
 12939 ;;		On exit  : 0/0
 12940 ;;		Unchanged: 0/0
 12941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12945 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12946 ;;Total ram usage:        0 bytes
 12947 ;; Hardware stack levels used:    1
 12948 ;; Hardware stack levels required when called:    7
 12949 ;; This function calls:
 12950 ;;		Nothing
 12951 ;; This function is called by:
 12952 ;;		_Test
 12953 ;; This function uses a non-reentrant model
 12954 ;;
 12955                           
 12956                           	psect	text46
 12957  0048B0                     __ptext46:
 12958                           	opt stack 0
 12959  0048B0                     _EEPROMTest:
 12960                           	opt stack 22
 12961                           
 12962                           ;incstack = 0
 12963  0048B0  0012               	return		;funcret
 12964  0048B2                     __end_of_EEPROMTest:
 12965                           	opt stack 0
 12966                           tblptru	equ	0xFF8
 12967                           tblptrh	equ	0xFF7
 12968                           tblptrl	equ	0xFF6
 12969                           tablat	equ	0xFF5
 12970                           prodh	equ	0xFF4
 12971                           prodl	equ	0xFF3
 12972                           intcon	equ	0xFF2
 12973                           intcon2	equ	0xFF1
 12974                           intcon3	equ	0xFF0
 12975                           postinc0	equ	0xFEE
 12976                           wreg	equ	0xFE8
 12977                           postdec1	equ	0xFE5
 12978                           fsr1l	equ	0xFE1
 12979                           indf2	equ	0xFDF
 12980                           postinc2	equ	0xFDE
 12981                           postdec2	equ	0xFDD
 12982                           fsr2h	equ	0xFDA
 12983                           fsr2l	equ	0xFD9
 12984                           status	equ	0xFD8
 12985                           
 12986 ;; *************** function _BothServos *****************
 12987 ;; Defined at:
 12988 ;;		line 346 in file "Test.c"
 12989 ;; Parameters:    Size  Location     Type
 12990 ;;		None
 12991 ;; Auto vars:     Size  Location     Type
 12992 ;;		None
 12993 ;; Return value:  Size  Location     Type
 12994 ;;                  1    wreg      void 
 12995 ;; Registers used:
 12996 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12997 ;; Tracked objects:
 12998 ;;		On entry : 0/0
 12999 ;;		On exit  : 0/0
 13000 ;;		Unchanged: 0/0
 13001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13003 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13004 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13005 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13006 ;;Total ram usage:        2 bytes
 13007 ;; Hardware stack levels used:    1
 13008 ;; Hardware stack levels required when called:   10
 13009 ;; This function calls:
 13010 ;;		_initServos
 13011 ;;		_lcdInst
 13012 ;;		_printf
 13013 ;;		_updateServoPosition
 13014 ;; This function is called by:
 13015 ;;		_Test
 13016 ;; This function uses a non-reentrant model
 13017 ;;
 13018                           
 13019                           	psect	text47
 13020  0015A8                     __ptext47:
 13021                           	opt stack 0
 13022  0015A8                     _BothServos:
 13023                           	opt stack 19
 13024                           
 13025                           ;Test.c: 347: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13026                           
 13027                           ;incstack = 0
 13028  0015A8  0E01               	movlw	1
 13029  0015AA  EC26  F024         	call	_lcdInst
 13030  0015AE  0E68               	movlw	104
 13031  0015B0  0100               	movlb	0	; () banked
 13032  0015B2  6FAB               	movwf	??_BothServos& (0+255),b
 13033  0015B4  0EE4               	movlw	228
 13034  0015B6                     u8157:
 13035  0015B6  2EE8               	decfsz	wreg,f,c
 13036  0015B8  D7FE               	bra	u8157
 13037  0015BA  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13038  0015BC  D7FC               	bra	u8157
 13039  0015BE  F000               	nop	
 13040  0015C0  0E80               	movlw	128
 13041  0015C2  EC26  F024         	call	_lcdInst
 13042                           
 13043                           ;Test.c: 348: printf("TST: BOTH SERVOS");
 13044  0015C6  0EB4               	movlw	low STR_110
 13045  0015C8  0100               	movlb	0	; () banked
 13046  0015CA  6F8E               	movwf	printf@f& (0+255),b
 13047  0015CC  0EFC               	movlw	high STR_110
 13048  0015CE  0100               	movlb	0	; () banked
 13049  0015D0  6F8F               	movwf	(printf@f+1)& (0+255),b
 13050  0015D2  ECB8  F008         	call	_printf	;wreg free
 13051                           
 13052                           ;Test.c: 349: TMR1ON = 1;
 13053  0015D6  80CD               	bsf	4045,0,c	;volatile
 13054                           
 13055                           ;Test.c: 350: TMR3ON = 1;
 13056  0015D8  80B1               	bsf	4017,0,c	;volatile
 13057                           
 13058                           ;Test.c: 351: machine_state = Sorting_state;
 13059  0015DA  0E01               	movlw	1
 13060  0015DC  0100               	movlb	0	; () banked
 13061  0015DE  6FFC               	movwf	_machine_state& (0+255),b
 13062                           
 13063                           ; BSR set to: 0
 13064                           ;Test.c: 352: was_low_1 = 0;
 13065  0015E0  0E00               	movlw	0
 13066  0015E2  6E7A               	movwf	_was_low_1+1,c	;volatile
 13067  0015E4  0E00               	movlw	0
 13068  0015E6  6E79               	movwf	_was_low_1,c	;volatile
 13069                           
 13070                           ; BSR set to: 0
 13071                           ;Test.c: 353: was_low_3 = 0;
 13072  0015E8  0E00               	movlw	0
 13073  0015EA  6E7C               	movwf	_was_low_3+1,c	;volatile
 13074  0015EC  0E00               	movlw	0
 13075  0015EE  6E7B               	movwf	_was_low_3,c	;volatile
 13076                           
 13077                           ; BSR set to: 0
 13078                           ;Test.c: 359: initServos();
 13079  0015F0  ECF8  F01F         	call	_initServos	;wreg free
 13080                           
 13081                           ;Test.c: 360: _delay((unsigned long)((1500)*(32000000/4000.0)));
 13082  0015F4  0E3D               	movlw	61
 13083  0015F6  0100               	movlb	0	; () banked
 13084  0015F8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13085  0015FA  0EE1               	movlw	225
 13086  0015FC  0100               	movlb	0	; () banked
 13087  0015FE  6FAB               	movwf	??_BothServos& (0+255),b
 13088  001600  0E3F               	movlw	63
 13089  001602                     u8167:
 13090  001602  2EE8               	decfsz	wreg,f,c
 13091  001604  D7FE               	bra	u8167
 13092  001606  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13093  001608  D7FC               	bra	u8167
 13094  00160A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13095  00160C  D7FA               	bra	u8167
 13096  00160E  D000               	nop2	
 13097                           
 13098                           ;Test.c: 362: updateServoPosition(500, 1);
 13099  001610  0E01               	movlw	1
 13100  001612  0100               	movlb	0	; () banked
 13101  001614  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13102  001616  0EF4               	movlw	244
 13103  001618  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13104  00161A  0E00               	movlw	0
 13105  00161C  0100               	movlb	0	; () banked
 13106  00161E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13107  001620  0E01               	movlw	1
 13108  001622  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13109  001624  EC5E  F01E         	call	_updateServoPosition	;wreg free
 13110                           
 13111                           ;Test.c: 363: updateServoPosition(1150, 3);
 13112  001628  0E04               	movlw	4
 13113  00162A  0100               	movlb	0	; () banked
 13114  00162C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13115  00162E  0E7E               	movlw	126
 13116  001630  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13117  001632  0E00               	movlw	0
 13118  001634  0100               	movlb	0	; () banked
 13119  001636  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13120  001638  0E03               	movlw	3
 13121  00163A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13122  00163C  EC5E  F01E         	call	_updateServoPosition	;wreg free
 13123                           
 13124                           ;Test.c: 364: _delay((unsigned long)((750)*(32000000/4000.0)));
 13125  001640  0E1F               	movlw	31
 13126  001642  0100               	movlb	0	; () banked
 13127  001644  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13128  001646  0E71               	movlw	113
 13129  001648  0100               	movlb	0	; () banked
 13130  00164A  6FAB               	movwf	??_BothServos& (0+255),b
 13131  00164C  0E1E               	movlw	30
 13132  00164E                     u8177:
 13133  00164E  2EE8               	decfsz	wreg,f,c
 13134  001650  D7FE               	bra	u8177
 13135  001652  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13136  001654  D7FC               	bra	u8177
 13137  001656  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13138  001658  D7FA               	bra	u8177
 13139  00165A  F000               	nop	
 13140                           
 13141                           ;Test.c: 365: updateServoPosition(1350, 3);
 13142  00165C  0E05               	movlw	5
 13143  00165E  0100               	movlb	0	; () banked
 13144  001660  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13145  001662  0E46               	movlw	70
 13146  001664  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13147  001666  0E00               	movlw	0
 13148  001668  0100               	movlb	0	; () banked
 13149  00166A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13150  00166C  0E03               	movlw	3
 13151  00166E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13152  001670  EC5E  F01E         	call	_updateServoPosition	;wreg free
 13153                           
 13154                           ;Test.c: 366: _delay((unsigned long)((2000)*(32000000/4000.0)));
 13155  001674  0E52               	movlw	82
 13156  001676  0100               	movlb	0	; () banked
 13157  001678  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13158  00167A  0E2B               	movlw	43
 13159  00167C  0100               	movlb	0	; () banked
 13160  00167E  6FAB               	movwf	??_BothServos& (0+255),b
 13161  001680  0E00               	movlw	0
 13162  001682                     u8187:
 13163  001682  2EE8               	decfsz	wreg,f,c
 13164  001684  D7FE               	bra	u8187
 13165  001686  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13166  001688  D7FC               	bra	u8187
 13167  00168A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13168  00168C  D7FA               	bra	u8187
 13169  00168E  F000               	nop	
 13170                           
 13171                           ;Test.c: 367: updateServoPosition(1150, 3);
 13172  001690  0E04               	movlw	4
 13173  001692  0100               	movlb	0	; () banked
 13174  001694  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13175  001696  0E7E               	movlw	126
 13176  001698  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13177  00169A  0E00               	movlw	0
 13178  00169C  0100               	movlb	0	; () banked
 13179  00169E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13180  0016A0  0E03               	movlw	3
 13181  0016A2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13182  0016A4  EC5E  F01E         	call	_updateServoPosition	;wreg free
 13183                           
 13184                           ;Test.c: 368: _delay((unsigned long)((750)*(32000000/4000.0)));
 13185  0016A8  0E1F               	movlw	31
 13186  0016AA  0100               	movlb	0	; () banked
 13187  0016AC  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13188  0016AE  0E71               	movlw	113
 13189  0016B0  0100               	movlb	0	; () banked
 13190  0016B2  6FAB               	movwf	??_BothServos& (0+255),b
 13191  0016B4  0E1E               	movlw	30
 13192  0016B6                     u8197:
 13193  0016B6  2EE8               	decfsz	wreg,f,c
 13194  0016B8  D7FE               	bra	u8197
 13195  0016BA  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13196  0016BC  D7FC               	bra	u8197
 13197  0016BE  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13198  0016C0  D7FA               	bra	u8197
 13199  0016C2  F000               	nop	
 13200                           
 13201                           ;Test.c: 370: updateServoPosition(750, 1);
 13202  0016C4  0E02               	movlw	2
 13203  0016C6  0100               	movlb	0	; () banked
 13204  0016C8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13205  0016CA  0EEE               	movlw	238
 13206  0016CC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13207  0016CE  0E00               	movlw	0
 13208  0016D0  0100               	movlb	0	; () banked
 13209  0016D2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13210  0016D4  0E01               	movlw	1
 13211  0016D6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13212  0016D8  EC5E  F01E         	call	_updateServoPosition	;wreg free
 13213                           
 13214                           ;Test.c: 371: updateServoPosition(1150, 3);
 13215  0016DC  0E04               	movlw	4
 13216  0016DE  0100               	movlb	0	; () banked
 13217  0016E0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13218  0016E2  0E7E               	movlw	126
 13219  0016E4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13220  0016E6  0E00               	movlw	0
 13221  0016E8  0100               	movlb	0	; () banked
 13222  0016EA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13223  0016EC  0E03               	movlw	3
 13224  0016EE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13225  0016F0  EC5E  F01E         	call	_updateServoPosition	;wreg free
 13226                           
 13227                           ;Test.c: 372: _delay((unsigned long)((750)*(32000000/4000.0)));
 13228  0016F4  0E1F               	movlw	31
 13229  0016F6  0100               	movlb	0	; () banked
 13230  0016F8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13231  0016FA  0E71               	movlw	113
 13232  0016FC  0100               	movlb	0	; () banked
 13233  0016FE  6FAB               	movwf	??_BothServos& (0+255),b
 13234  001700  0E1E               	movlw	30
 13235  001702                     u8207:
 13236  001702  2EE8               	decfsz	wreg,f,c
 13237  001704  D7FE               	bra	u8207
 13238  001706  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13239  001708  D7FC               	bra	u8207
 13240  00170A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13241  00170C  D7FA               	bra	u8207
 13242  00170E  F000               	nop	
 13243                           
 13244                           ;Test.c: 373: updateServoPosition(1350, 3);
 13245  001710  0E05               	movlw	5
 13246  001712  0100               	movlb	0	; () banked
 13247  001714  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13248  001716  0E46               	movlw	70
 13249  001718  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13250  00171A  0E00               	movlw	0
 13251  00171C  0100               	movlb	0	; () banked
 13252  00171E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13253  001720  0E03               	movlw	3
 13254  001722  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13255  001724  EC5E  F01E         	call	_updateServoPosition	;wreg free
 13256                           
 13257                           ;Test.c: 374: _delay((unsigned long)((2000)*(32000000/4000.0)));
 13258  001728  0E52               	movlw	82
 13259  00172A  0100               	movlb	0	; () banked
 13260  00172C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13261  00172E  0E2B               	movlw	43
 13262  001730  0100               	movlb	0	; () banked
 13263  001732  6FAB               	movwf	??_BothServos& (0+255),b
 13264  001734  0E00               	movlw	0
 13265  001736                     u8217:
 13266  001736  2EE8               	decfsz	wreg,f,c
 13267  001738  D7FE               	bra	u8217
 13268  00173A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13269  00173C  D7FC               	bra	u8217
 13270  00173E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13271  001740  D7FA               	bra	u8217
 13272  001742  F000               	nop	
 13273                           
 13274                           ;Test.c: 375: updateServoPosition(1150, 3);
 13275  001744  0E04               	movlw	4
 13276  001746  0100               	movlb	0	; () banked
 13277  001748  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13278  00174A  0E7E               	movlw	126
 13279  00174C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13280  00174E  0E00               	movlw	0
 13281  001750  0100               	movlb	0	; () banked
 13282  001752  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13283  001754  0E03               	movlw	3
 13284  001756  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13285  001758  EC5E  F01E         	call	_updateServoPosition	;wreg free
 13286                           
 13287                           ;Test.c: 376: _delay((unsigned long)((750)*(32000000/4000.0)));
 13288  00175C  0E1F               	movlw	31
 13289  00175E  0100               	movlb	0	; () banked
 13290  001760  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13291  001762  0E71               	movlw	113
 13292  001764  0100               	movlb	0	; () banked
 13293  001766  6FAB               	movwf	??_BothServos& (0+255),b
 13294  001768  0E1E               	movlw	30
 13295  00176A                     u8227:
 13296  00176A  2EE8               	decfsz	wreg,f,c
 13297  00176C  D7FE               	bra	u8227
 13298  00176E  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13299  001770  D7FC               	bra	u8227
 13300  001772  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13301  001774  D7FA               	bra	u8227
 13302  001776  F000               	nop	
 13303                           
 13304                           ;Test.c: 378: updateServoPosition(1200, 1);
 13305  001778  0E04               	movlw	4
 13306  00177A  0100               	movlb	0	; () banked
 13307  00177C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13308  00177E  0EB0               	movlw	176
 13309  001780  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13310  001782  0E00               	movlw	0
 13311  001784  0100               	movlb	0	; () banked
 13312  001786  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13313  001788  0E01               	movlw	1
 13314  00178A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13315  00178C  EC5E  F01E         	call	_updateServoPosition	;wreg free
 13316                           
 13317                           ;Test.c: 379: updateServoPosition(1150, 3);
 13318  001790  0E04               	movlw	4
 13319  001792  0100               	movlb	0	; () banked
 13320  001794  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13321  001796  0E7E               	movlw	126
 13322  001798  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13323  00179A  0E00               	movlw	0
 13324  00179C  0100               	movlb	0	; () banked
 13325  00179E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13326  0017A0  0E03               	movlw	3
 13327  0017A2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13328  0017A4  EC5E  F01E         	call	_updateServoPosition	;wreg free
 13329                           
 13330                           ;Test.c: 380: _delay((unsigned long)((1500)*(32000000/4000.0)));
 13331  0017A8  0E3D               	movlw	61
 13332  0017AA  0100               	movlb	0	; () banked
 13333  0017AC  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13334  0017AE  0EE1               	movlw	225
 13335  0017B0  0100               	movlb	0	; () banked
 13336  0017B2  6FAB               	movwf	??_BothServos& (0+255),b
 13337  0017B4  0E3F               	movlw	63
 13338  0017B6                     u8237:
 13339  0017B6  2EE8               	decfsz	wreg,f,c
 13340  0017B8  D7FE               	bra	u8237
 13341  0017BA  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13342  0017BC  D7FC               	bra	u8237
 13343  0017BE  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13344  0017C0  D7FA               	bra	u8237
 13345  0017C2  D000               	nop2	
 13346                           
 13347                           ;Test.c: 382: updateServoPosition(1700, 1);
 13348  0017C4  0E06               	movlw	6
 13349  0017C6  0100               	movlb	0	; () banked
 13350  0017C8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13351  0017CA  0EA4               	movlw	164
 13352  0017CC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13353  0017CE  0E00               	movlw	0
 13354  0017D0  0100               	movlb	0	; () banked
 13355  0017D2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13356  0017D4  0E01               	movlw	1
 13357  0017D6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13358  0017D8  EC5E  F01E         	call	_updateServoPosition	;wreg free
 13359                           
 13360                           ;Test.c: 383: updateServoPosition(1150, 3);
 13361  0017DC  0E04               	movlw	4
 13362  0017DE  0100               	movlb	0	; () banked
 13363  0017E0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13364  0017E2  0E7E               	movlw	126
 13365  0017E4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13366  0017E6  0E00               	movlw	0
 13367  0017E8  0100               	movlb	0	; () banked
 13368  0017EA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13369  0017EC  0E03               	movlw	3
 13370  0017EE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13371  0017F0  EC5E  F01E         	call	_updateServoPosition	;wreg free
 13372                           
 13373                           ;Test.c: 384: _delay((unsigned long)((750)*(32000000/4000.0)));
 13374  0017F4  0E1F               	movlw	31
 13375  0017F6  0100               	movlb	0	; () banked
 13376  0017F8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13377  0017FA  0E71               	movlw	113
 13378  0017FC  0100               	movlb	0	; () banked
 13379  0017FE  6FAB               	movwf	??_BothServos& (0+255),b
 13380  001800  0E1E               	movlw	30
 13381  001802                     u8247:
 13382  001802  2EE8               	decfsz	wreg,f,c
 13383  001804  D7FE               	bra	u8247
 13384  001806  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13385  001808  D7FC               	bra	u8247
 13386  00180A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13387  00180C  D7FA               	bra	u8247
 13388  00180E  F000               	nop	
 13389                           
 13390                           ;Test.c: 385: updateServoPosition(1350, 3);
 13391  001810  0E05               	movlw	5
 13392  001812  0100               	movlb	0	; () banked
 13393  001814  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13394  001816  0E46               	movlw	70
 13395  001818  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13396  00181A  0E00               	movlw	0
 13397  00181C  0100               	movlb	0	; () banked
 13398  00181E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13399  001820  0E03               	movlw	3
 13400  001822  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13401  001824  EC5E  F01E         	call	_updateServoPosition	;wreg free
 13402                           
 13403                           ;Test.c: 386: _delay((unsigned long)((2000)*(32000000/4000.0)));
 13404  001828  0E52               	movlw	82
 13405  00182A  0100               	movlb	0	; () banked
 13406  00182C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13407  00182E  0E2B               	movlw	43
 13408  001830  0100               	movlb	0	; () banked
 13409  001832  6FAB               	movwf	??_BothServos& (0+255),b
 13410  001834  0E00               	movlw	0
 13411  001836                     u8257:
 13412  001836  2EE8               	decfsz	wreg,f,c
 13413  001838  D7FE               	bra	u8257
 13414  00183A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13415  00183C  D7FC               	bra	u8257
 13416  00183E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13417  001840  D7FA               	bra	u8257
 13418  001842  F000               	nop	
 13419                           
 13420                           ;Test.c: 387: updateServoPosition(1150, 3);
 13421  001844  0E04               	movlw	4
 13422  001846  0100               	movlb	0	; () banked
 13423  001848  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13424  00184A  0E7E               	movlw	126
 13425  00184C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13426  00184E  0E00               	movlw	0
 13427  001850  0100               	movlb	0	; () banked
 13428  001852  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13429  001854  0E03               	movlw	3
 13430  001856  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13431  001858  EC5E  F01E         	call	_updateServoPosition	;wreg free
 13432                           
 13433                           ;Test.c: 388: _delay((unsigned long)((750)*(32000000/4000.0)));
 13434  00185C  0E1F               	movlw	31
 13435  00185E  0100               	movlb	0	; () banked
 13436  001860  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13437  001862  0E71               	movlw	113
 13438  001864  0100               	movlb	0	; () banked
 13439  001866  6FAB               	movwf	??_BothServos& (0+255),b
 13440  001868  0E1E               	movlw	30
 13441  00186A                     u8267:
 13442  00186A  2EE8               	decfsz	wreg,f,c
 13443  00186C  D7FE               	bra	u8267
 13444  00186E  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13445  001870  D7FC               	bra	u8267
 13446  001872  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13447  001874  D7FA               	bra	u8267
 13448  001876  F000               	nop	
 13449                           
 13450                           ;Test.c: 390: updateServoPosition(2100, 1);
 13451  001878  0E08               	movlw	8
 13452  00187A  0100               	movlb	0	; () banked
 13453  00187C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13454  00187E  0E34               	movlw	52
 13455  001880  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13456  001882  0E00               	movlw	0
 13457  001884  0100               	movlb	0	; () banked
 13458  001886  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13459  001888  0E01               	movlw	1
 13460  00188A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13461  00188C  EC5E  F01E         	call	_updateServoPosition	;wreg free
 13462                           
 13463                           ;Test.c: 391: updateServoPosition(1150, 3);
 13464  001890  0E04               	movlw	4
 13465  001892  0100               	movlb	0	; () banked
 13466  001894  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13467  001896  0E7E               	movlw	126
 13468  001898  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13469  00189A  0E00               	movlw	0
 13470  00189C  0100               	movlb	0	; () banked
 13471  00189E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13472  0018A0  0E03               	movlw	3
 13473  0018A2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13474  0018A4  EC5E  F01E         	call	_updateServoPosition	;wreg free
 13475                           
 13476                           ;Test.c: 392: _delay((unsigned long)((750)*(32000000/4000.0)));
 13477  0018A8  0E1F               	movlw	31
 13478  0018AA  0100               	movlb	0	; () banked
 13479  0018AC  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13480  0018AE  0E71               	movlw	113
 13481  0018B0  0100               	movlb	0	; () banked
 13482  0018B2  6FAB               	movwf	??_BothServos& (0+255),b
 13483  0018B4  0E1E               	movlw	30
 13484  0018B6                     u8277:
 13485  0018B6  2EE8               	decfsz	wreg,f,c
 13486  0018B8  D7FE               	bra	u8277
 13487  0018BA  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13488  0018BC  D7FC               	bra	u8277
 13489  0018BE  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13490  0018C0  D7FA               	bra	u8277
 13491  0018C2  F000               	nop	
 13492                           
 13493                           ;Test.c: 393: updateServoPosition(1350, 3);
 13494  0018C4  0E05               	movlw	5
 13495  0018C6  0100               	movlb	0	; () banked
 13496  0018C8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13497  0018CA  0E46               	movlw	70
 13498  0018CC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13499  0018CE  0E00               	movlw	0
 13500  0018D0  0100               	movlb	0	; () banked
 13501  0018D2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13502  0018D4  0E03               	movlw	3
 13503  0018D6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13504  0018D8  EC5E  F01E         	call	_updateServoPosition	;wreg free
 13505                           
 13506                           ;Test.c: 394: _delay((unsigned long)((2000)*(32000000/4000.0)));
 13507  0018DC  0E52               	movlw	82
 13508  0018DE  0100               	movlb	0	; () banked
 13509  0018E0  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13510  0018E2  0E2B               	movlw	43
 13511  0018E4  0100               	movlb	0	; () banked
 13512  0018E6  6FAB               	movwf	??_BothServos& (0+255),b
 13513  0018E8  0E00               	movlw	0
 13514  0018EA                     u8287:
 13515  0018EA  2EE8               	decfsz	wreg,f,c
 13516  0018EC  D7FE               	bra	u8287
 13517  0018EE  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13518  0018F0  D7FC               	bra	u8287
 13519  0018F2  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13520  0018F4  D7FA               	bra	u8287
 13521  0018F6  F000               	nop	
 13522                           
 13523                           ;Test.c: 395: updateServoPosition(1150, 3);
 13524  0018F8  0E04               	movlw	4
 13525  0018FA  0100               	movlb	0	; () banked
 13526  0018FC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13527  0018FE  0E7E               	movlw	126
 13528  001900  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13529  001902  0E00               	movlw	0
 13530  001904  0100               	movlb	0	; () banked
 13531  001906  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13532  001908  0E03               	movlw	3
 13533  00190A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13534  00190C  EC5E  F01E         	call	_updateServoPosition	;wreg free
 13535                           
 13536                           ;Test.c: 396: _delay((unsigned long)((750)*(32000000/4000.0)));
 13537  001910  0E1F               	movlw	31
 13538  001912  0100               	movlb	0	; () banked
 13539  001914  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13540  001916  0E71               	movlw	113
 13541  001918  0100               	movlb	0	; () banked
 13542  00191A  6FAB               	movwf	??_BothServos& (0+255),b
 13543  00191C  0E1E               	movlw	30
 13544  00191E                     u8297:
 13545  00191E  2EE8               	decfsz	wreg,f,c
 13546  001920  D7FE               	bra	u8297
 13547  001922  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13548  001924  D7FC               	bra	u8297
 13549  001926  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13550  001928  D7FA               	bra	u8297
 13551  00192A  F000               	nop	
 13552                           
 13553                           ;Test.c: 398: TMR1ON = 0;
 13554  00192C  90CD               	bcf	4045,0,c	;volatile
 13555                           
 13556                           ;Test.c: 399: TMR3ON = 0;
 13557  00192E  90B1               	bcf	4017,0,c	;volatile
 13558                           
 13559                           ;Test.c: 400: (INTCONbits.GIE = 0);
 13560  001930  9EF2               	bcf	intcon,7,c	;volatile
 13561  001932  0012               	return		;funcret
 13562  001934                     __end_of_BothServos:
 13563                           	opt stack 0
 13564                           tblptru	equ	0xFF8
 13565                           tblptrh	equ	0xFF7
 13566                           tblptrl	equ	0xFF6
 13567                           tablat	equ	0xFF5
 13568                           prodh	equ	0xFF4
 13569                           prodl	equ	0xFF3
 13570                           intcon	equ	0xFF2
 13571                           intcon2	equ	0xFF1
 13572                           intcon3	equ	0xFF0
 13573                           postinc0	equ	0xFEE
 13574                           wreg	equ	0xFE8
 13575                           postdec1	equ	0xFE5
 13576                           fsr1l	equ	0xFE1
 13577                           indf2	equ	0xFDF
 13578                           postinc2	equ	0xFDE
 13579                           postdec2	equ	0xFDD
 13580                           fsr2h	equ	0xFDA
 13581                           fsr2l	equ	0xFD9
 13582                           status	equ	0xFD8
 13583                           
 13584 ;; *************** function _printf *****************
 13585 ;; Defined at:
 13586 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 13587 ;; Parameters:    Size  Location     Type
 13588 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 13589 ;;		 -> STR_117(18), STR_116(18), STR_115(17), STR_114(17), 
 13590 ;;		 -> STR_113(11), STR_112(18), STR_111(18), STR_110(17), 
 13591 ;;		 -> STR_109(15), STR_108(15), STR_107(15), STR_106(17), 
 13592 ;;		 -> STR_105(17), STR_104(17), STR_103(16), STR_102(17), 
 13593 ;;		 -> STR_101(17), STR_100(17), STR_99(17), STR_98(17), 
 13594 ;;		 -> STR_97(17), STR_96(15), STR_95(11), STR_94(17), 
 13595 ;;		 -> STR_93(11), STR_92(17), STR_91(14), STR_90(15), 
 13596 ;;		 -> STR_89(14), STR_88(10), STR_87(9), STR_86(9), 
 13597 ;;		 -> STR_85(10), STR_84(10), STR_83(16), STR_82(15), 
 13598 ;;		 -> STR_81(3), STR_80(15), STR_79(13), STR_78(14), 
 13599 ;;		 -> STR_77(8), STR_76(14), STR_75(15), STR_74(12), 
 13600 ;;		 -> STR_73(14), STR_72(17), STR_71(14), STR_70(15), 
 13601 ;;		 -> STR_69(17), STR_68(17), STR_67(7), STR_66(21), 
 13602 ;;		 -> STR_65(13), STR_64(11), STR_63(24), STR_50(17), 
 13603 ;;		 -> STR_49(17), STR_48(17), STR_47(17), STR_46(17), 
 13604 ;;		 -> STR_45(17), STR_44(17), STR_43(17), STR_42(17), 
 13605 ;;		 -> STR_41(17), STR_40(17), STR_39(17), STR_38(17), 
 13606 ;;		 -> STR_37(17), STR_36(17), STR_35(17), STR_34(17), 
 13607 ;;		 -> STR_33(17), STR_32(17), STR_31(17), STR_30(17), 
 13608 ;;		 -> STR_29(3), STR_28(17), STR_27(17), STR_26(17), 
 13609 ;;		 -> STR_25(17), STR_24(17), STR_23(14), STR_22(10), 
 13610 ;;		 -> STR_21(24), STR_7(7), STR_6(17), STR_5(18), 
 13611 ;;		 -> STR_4(16), STR_3(18), STR_2(14), STR_1(18), 
 13612 ;; Auto vars:     Size  Location     Type
 13613 ;;  tmpval          4    0        struct .
 13614 ;;  width           2   41[BANK0 ] int 
 13615 ;;  val             2   37[BANK0 ] unsigned int 
 13616 ;;  len             2   35[BANK0 ] unsigned int 
 13617 ;;  ap              2   33[BANK0 ] PTR void [1]
 13618 ;;		 -> ?i2_printf(2), ?_printf(2), 
 13619 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 13620 ;;		 -> STR_118(7), count_total(2), printRTC@month(4), UI@month(4), 
 13621 ;;  c               1   40[BANK0 ] char 
 13622 ;;  flag            1   39[BANK0 ] unsigned char 
 13623 ;;  prec            1   30[BANK0 ] char 
 13624 ;; Return value:  Size  Location     Type
 13625 ;;                  2   14[BANK0 ] int 
 13626 ;; Registers used:
 13627 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13628 ;; Tracked objects:
 13629 ;;		On entry : 0/0
 13630 ;;		On exit  : 0/0
 13631 ;;		Unchanged: 0/0
 13632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13633 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13634 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13635 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13636 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13637 ;;Total ram usage:       29 bytes
 13638 ;; Hardware stack levels used:    1
 13639 ;; Hardware stack levels required when called:    9
 13640 ;; This function calls:
 13641 ;;		___lwdiv
 13642 ;;		___lwmod
 13643 ;;		___wmul
 13644 ;;		_isdigit
 13645 ;;		_putch
 13646 ;; This function is called by:
 13647 ;;		_UI
 13648 ;;		_change_state_to_menu_start
 13649 ;;		_change_state_to_menu_12
 13650 ;;		_change_state_to_menu_22
 13651 ;;		_printRTC
 13652 ;;		_EEPROM_write
 13653 ;;		_Test
 13654 ;;		_algorithmTest
 13655 ;;		_sensorTest
 13656 ;;		_actuatorTest
 13657 ;;		_BothServos
 13658 ;;		_PortTestA5
 13659 ;;		_PusherTest
 13660 ;;		_SpeedTest
 13661 ;;		_ToggleTestA5
 13662 ;; This function uses a non-reentrant model
 13663 ;;
 13664                           
 13665                           	psect	text48
 13666  001170                     __ptext48:
 13667                           	opt stack 0
 13668  001170                     _printf:
 13669                           	opt stack 18
 13670                           
 13671                           ;doprnt.c: 466: va_list ap;
 13672                           ;doprnt.c: 499: signed char c;
 13673                           ;doprnt.c: 501: int width;
 13674                           ;doprnt.c: 506: signed char prec;
 13675                           ;doprnt.c: 508: unsigned char flag;
 13676                           ;doprnt.c: 523: union {
 13677                           ;doprnt.c: 524: unsigned long vd;
 13678                           ;doprnt.c: 525: double integ;
 13679                           ;doprnt.c: 526: } tmpval;
 13680                           ;doprnt.c: 528: unsigned int val;
 13681                           ;doprnt.c: 529: unsigned len;
 13682                           ;doprnt.c: 530: const char * cp;
 13683                           ;doprnt.c: 533: *ap = __va_start();
 13684                           
 13685                           ;incstack = 0
 13686  001170  0E90               	movlw	low (?_printf+2)
 13687  001172  0100               	movlb	0	; () banked
 13688  001174  6FA1               	movwf	printf@ap& (0+255),b
 13689  001176  0E00               	movlw	high (?_printf+2)
 13690  001178  0100               	movlb	0	; () banked
 13691  00117A  6FA2               	movwf	(printf@ap+1)& (0+255),b
 13692                           
 13693                           ;doprnt.c: 536: while(c = *f++) {
 13694  00117C  D205               	goto	l5606
 13695  00117E                     l5476:
 13696                           
 13697                           ; BSR set to: 0
 13698                           ;doprnt.c: 538: if(c != '%')
 13699  00117E  0E25               	movlw	37
 13700  001180  0100               	movlb	0	; () banked
 13701  001182  19A8               	xorwf	printf@c& (0+255),w,b
 13702  001184  B4D8               	btfsc	status,2,c
 13703  001186  D005               	goto	l5480
 13704                           
 13705                           ; BSR set to: 0
 13706                           ;doprnt.c: 540: {
 13707                           ;doprnt.c: 541: (putch(c) );
 13708  001188  0100               	movlb	0	; () banked
 13709  00118A  51A8               	movf	printf@c& (0+255),w,b
 13710  00118C  EC1E  F024         	call	_putch
 13711                           
 13712                           ;doprnt.c: 542: continue;
 13713  001190  D1FB               	goto	l5606
 13714  001192                     l5480:
 13715                           
 13716                           ;doprnt.c: 543: }
 13717                           ;doprnt.c: 546: width = 0;
 13718  001192  0E00               	movlw	0
 13719  001194  0100               	movlb	0	; () banked
 13720  001196  6FAA               	movwf	(printf@width+1)& (0+255),b
 13721  001198  0E00               	movlw	0
 13722  00119A  6FA9               	movwf	printf@width& (0+255),b
 13723                           
 13724                           ;doprnt.c: 548: flag = 0;
 13725  00119C  0E00               	movlw	0
 13726  00119E  0100               	movlb	0	; () banked
 13727  0011A0  6FA7               	movwf	printf@flag& (0+255),b
 13728                           
 13729                           ; BSR set to: 0
 13730                           ;doprnt.c: 551: switch(*f) {
 13731                           
 13732                           ;doprnt.c: 550: for(;;) {
 13733  0011A2  D005               	goto	l5486
 13734  0011A4                     l5482:
 13735                           
 13736                           ;doprnt.c: 580: flag |= 0x04;
 13737  0011A4  0100               	movlb	0	; () banked
 13738  0011A6  85A7               	bsf	printf@flag& (0+255),2,b
 13739                           
 13740                           ;doprnt.c: 581: f++;
 13741  0011A8  0100               	movlb	0	; () banked
 13742  0011AA  4B8E               	infsnz	printf@f& (0+255),f,b
 13743  0011AC  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13744  0011AE                     l5486:
 13745  0011AE  C08E  FFF6         	movff	printf@f,tblptrl
 13746  0011B2  C08F  FFF7         	movff	printf@f+1,tblptrh
 13747  0011B6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13748  0011B6  6AF8               	clrf	tblptru,c
 13749  0011B8                     	endif
 13750  0011B8                     	if	0	;tblptru may be non-zero
 13751  0011B8                     	endif
 13752  0011B8  0008               	tblrd		*
 13753  0011BA  50F5               	movf	tablat,w,c
 13754                           
 13755                           ; Switch size 1, requested type "space"
 13756                           ; Number of cases is 1, Range of values is 48 to 48
 13757                           ; switch strategies available:
 13758                           ; Name         Instructions Cycles
 13759                           ; simple_byte            4     3 (average)
 13760                           ;	Chosen strategy is simple_byte
 13761  0011BC  0A30               	xorlw	48	; case 48
 13762  0011BE  B4D8               	btfsc	status,2,c
 13763  0011C0  D7F1               	goto	l5482
 13764                           
 13765                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 13766                           
 13767                           ;doprnt.c: 586: }
 13768                           
 13769                           ;doprnt.c: 585: break;
 13770  0011C2  C08E  FFF6         	movff	printf@f,tblptrl
 13771  0011C6  C08F  FFF7         	movff	printf@f+1,tblptrh
 13772  0011CA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13773  0011CA  6AF8               	clrf	tblptru,c
 13774  0011CC                     	endif
 13775  0011CC                     	if	0	;tblptru may be non-zero
 13776  0011CC                     	endif
 13777  0011CC  0008               	tblrd		*
 13778  0011CE  50F5               	movf	tablat,w,c
 13779  0011D0  EC43  F023         	call	_isdigit
 13780  0011D4  A0D8               	btfss	status,0,c
 13781  0011D6  D0D2               	goto	l5534
 13782                           
 13783                           ;doprnt.c: 598: width = 0;
 13784  0011D8  0E00               	movlw	0
 13785  0011DA  0100               	movlb	0	; () banked
 13786  0011DC  6FAA               	movwf	(printf@width+1)& (0+255),b
 13787  0011DE  0E00               	movlw	0
 13788  0011E0  6FA9               	movwf	printf@width& (0+255),b
 13789  0011E2                     l5492:
 13790                           
 13791                           ;doprnt.c: 600: width *= 10;
 13792  0011E2  C0A9  F080         	movff	printf@width,___wmul@multiplier
 13793  0011E6  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 13794  0011EA  0E00               	movlw	0
 13795  0011EC  0100               	movlb	0	; () banked
 13796  0011EE  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13797  0011F0  0E0A               	movlw	10
 13798  0011F2  6F82               	movwf	___wmul@multiplicand& (0+255),b
 13799  0011F4  ECAD  F021         	call	___wmul	;wreg free
 13800  0011F8  C080  F0A9         	movff	?___wmul,printf@width
 13801  0011FC  C081  F0AA         	movff	?___wmul+1,printf@width+1
 13802                           
 13803                           ;doprnt.c: 601: width += *f++ - '0';
 13804  001200  0ED0               	movlw	208
 13805  001202  0100               	movlb	0	; () banked
 13806  001204  6F9A               	movwf	??_printf& (0+255),b
 13807  001206  0EFF               	movlw	255
 13808  001208  0100               	movlb	0	; () banked
 13809  00120A  6F9B               	movwf	(??_printf+1)& (0+255),b
 13810  00120C  C08E  FFF6         	movff	printf@f,tblptrl
 13811  001210  C08F  FFF7         	movff	printf@f+1,tblptrh
 13812  001214                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13813  001214  6AF8               	clrf	tblptru,c
 13814  001216                     	endif
 13815  001216                     	if	0	;tblptru may be non-zero
 13816  001216                     	endif
 13817  001216  0008               	tblrd		*
 13818  001218  50F5               	movf	tablat,w,c
 13819  00121A  0100               	movlb	0	; () banked
 13820  00121C  6F9C               	movwf	(??_printf+2)& (0+255),b
 13821  00121E  6B9D               	clrf	(??_printf+3)& (0+255),b
 13822  001220  0100               	movlb	0	; () banked
 13823  001222  519A               	movf	??_printf& (0+255),w,b
 13824  001224  0100               	movlb	0	; () banked
 13825  001226  279C               	addwf	(??_printf+2)& (0+255),f,b
 13826  001228  0100               	movlb	0	; () banked
 13827  00122A  519B               	movf	(??_printf+1)& (0+255),w,b
 13828  00122C  0100               	movlb	0	; () banked
 13829  00122E  239D               	addwfc	(??_printf+3)& (0+255),f,b
 13830  001230  0100               	movlb	0	; () banked
 13831  001232  519C               	movf	(??_printf+2)& (0+255),w,b
 13832  001234  0100               	movlb	0	; () banked
 13833  001236  27A9               	addwf	printf@width& (0+255),f,b
 13834  001238  0100               	movlb	0	; () banked
 13835  00123A  519D               	movf	(??_printf+3)& (0+255),w,b
 13836  00123C  0100               	movlb	0	; () banked
 13837  00123E  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 13838                           
 13839                           ; BSR set to: 0
 13840  001240  0100               	movlb	0	; () banked
 13841  001242  4B8E               	infsnz	printf@f& (0+255),f,b
 13842  001244  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13843                           
 13844                           ; BSR set to: 0
 13845                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 13846  001246  C08E  FFF6         	movff	printf@f,tblptrl
 13847  00124A  C08F  FFF7         	movff	printf@f+1,tblptrh
 13848  00124E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13849  00124E  6AF8               	clrf	tblptru,c
 13850  001250                     	endif
 13851  001250                     	if	0	;tblptru may be non-zero
 13852  001250                     	endif
 13853  001250  0008               	tblrd		*
 13854  001252  50F5               	movf	tablat,w,c
 13855  001254  EC43  F023         	call	_isdigit
 13856  001258  A0D8               	btfss	status,0,c
 13857  00125A  D090               	goto	l5534
 13858  00125C  D7C2               	goto	l5492
 13859  00125E                     l5500:
 13860                           
 13861                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 13862  00125E  C0A1  FFD9         	movff	printf@ap,fsr2l
 13863  001262  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 13864  001266  CFDE F09F          	movff	postinc2,printf@cp
 13865  00126A  CFDD F0A0          	movff	postdec2,printf@cp+1
 13866  00126E  0E02               	movlw	2
 13867  001270  0100               	movlb	0	; () banked
 13868  001272  27A1               	addwf	printf@ap& (0+255),f,b
 13869  001274  0E00               	movlw	0
 13870  001276  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 13871                           
 13872                           ; BSR set to: 0
 13873                           ;doprnt.c: 740: if(!cp)
 13874  001278  0100               	movlb	0	; () banked
 13875  00127A  519F               	movf	printf@cp& (0+255),w,b
 13876  00127C  0100               	movlb	0	; () banked
 13877  00127E  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 13878  001280  A4D8               	btfss	status,2,c
 13879  001282  D006               	goto	l5508
 13880                           
 13881                           ; BSR set to: 0
 13882                           ;doprnt.c: 741: cp = "(null)";
 13883  001284  0EB6               	movlw	low STR_118
 13884  001286  0100               	movlb	0	; () banked
 13885  001288  6F9F               	movwf	printf@cp& (0+255),b
 13886  00128A  0EFF               	movlw	high STR_118
 13887  00128C  0100               	movlb	0	; () banked
 13888  00128E  6FA0               	movwf	(printf@cp+1)& (0+255),b
 13889  001290                     l5508:
 13890                           
 13891                           ; BSR set to: 0
 13892                           ;doprnt.c: 745: len = 0;
 13893  001290  0E00               	movlw	0
 13894  001292  0100               	movlb	0	; () banked
 13895  001294  6FA4               	movwf	(printf@len+1)& (0+255),b
 13896  001296  0E00               	movlw	0
 13897  001298  6FA3               	movwf	printf@len& (0+255),b
 13898                           
 13899                           ;doprnt.c: 746: while(cp[len])
 13900  00129A  D003               	goto	l5512
 13901  00129C                     l5510:
 13902                           
 13903                           ;doprnt.c: 747: len++;
 13904  00129C  0100               	movlb	0	; () banked
 13905  00129E  4BA3               	infsnz	printf@len& (0+255),f,b
 13906  0012A0  2BA4               	incf	(printf@len+1)& (0+255),f,b
 13907  0012A2                     l5512:
 13908                           
 13909                           ; BSR set to: 0
 13910  0012A2  0100               	movlb	0	; () banked
 13911  0012A4  51A3               	movf	printf@len& (0+255),w,b
 13912  0012A6  0100               	movlb	0	; () banked
 13913  0012A8  259F               	addwf	printf@cp& (0+255),w,b
 13914  0012AA  0100               	movlb	0	; () banked
 13915  0012AC  6F9A               	movwf	??_printf& (0+255),b
 13916  0012AE  0100               	movlb	0	; () banked
 13917  0012B0  51A4               	movf	(printf@len+1)& (0+255),w,b
 13918  0012B2  0100               	movlb	0	; () banked
 13919  0012B4  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 13920  0012B6  0100               	movlb	0	; () banked
 13921  0012B8  6F9B               	movwf	(??_printf+1)& (0+255),b
 13922  0012BA  C09A  FFF6         	movff	??_printf,tblptrl
 13923  0012BE  C09B  FFF7         	movff	??_printf+1,tblptrh
 13924  0012C2  0E00               	movlw	low (__mediumconst shr (0+16))
 13925  0012C4  6EF8               	movwf	tblptru,c
 13926  0012C6  0E0F               	movlw	(high __ramtop+-1)
 13927  0012C8  64F7               	cpfsgt	tblptrh,c
 13928  0012CA  D003               	bra	u3897
 13929  0012CC  0008               	tblrd		*
 13930  0012CE  50F5               	movf	tablat,w,c
 13931  0012D0  D005               	bra	u3890
 13932  0012D2                     u3897:
 13933  0012D2  CFF6 FFE9          	movff	tblptrl,fsr0l
 13934  0012D6  CFF7 FFEA          	movff	tblptrh,fsr0h
 13935  0012DA  50EF               	movf	indf0,w,c
 13936  0012DC                     u3890:
 13937  0012DC  0900               	iorlw	0
 13938  0012DE  A4D8               	btfss	status,2,c
 13939  0012E0  D7DD               	goto	l5510
 13940                           
 13941                           ;doprnt.c: 757: if(width > len)
 13942  0012E2  0100               	movlb	0	; () banked
 13943  0012E4  51A9               	movf	printf@width& (0+255),w,b
 13944  0012E6  0100               	movlb	0	; () banked
 13945  0012E8  5DA3               	subwf	printf@len& (0+255),w,b
 13946  0012EA  0100               	movlb	0	; () banked
 13947  0012EC  51AA               	movf	(printf@width+1)& (0+255),w,b
 13948  0012EE  0100               	movlb	0	; () banked
 13949  0012F0  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 13950  0012F2  B0D8               	btfsc	status,0,c
 13951  0012F4  D009               	goto	l5518
 13952                           
 13953                           ; BSR set to: 0
 13954                           ;doprnt.c: 758: width -= len;
 13955  0012F6  0100               	movlb	0	; () banked
 13956  0012F8  51A3               	movf	printf@len& (0+255),w,b
 13957  0012FA  0100               	movlb	0	; () banked
 13958  0012FC  5FA9               	subwf	printf@width& (0+255),f,b
 13959  0012FE  0100               	movlb	0	; () banked
 13960  001300  51A4               	movf	(printf@len+1)& (0+255),w,b
 13961  001302  0100               	movlb	0	; () banked
 13962  001304  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 13963  001306  D009               	goto	l5522
 13964  001308                     l5518:
 13965                           
 13966                           ; BSR set to: 0
 13967                           ;doprnt.c: 759: else
 13968                           ;doprnt.c: 760: width = 0;
 13969  001308  0E00               	movlw	0
 13970  00130A  0100               	movlb	0	; () banked
 13971  00130C  6FAA               	movwf	(printf@width+1)& (0+255),b
 13972  00130E  0E00               	movlw	0
 13973  001310  6FA9               	movwf	printf@width& (0+255),b
 13974                           
 13975                           ; BSR set to: 0
 13976                           ;doprnt.c: 764: while(width--)
 13977  001312  D003               	goto	l5522
 13978  001314                     l5520:
 13979                           
 13980                           ; BSR set to: 0
 13981                           ;doprnt.c: 765: (putch(' ') );
 13982  001314  0E20               	movlw	32
 13983  001316  EC1E  F024         	call	_putch
 13984  00131A                     l5522:
 13985  00131A  0100               	movlb	0	; () banked
 13986  00131C  07A9               	decf	printf@width& (0+255),f,b
 13987  00131E  A0D8               	btfss	status,0,c
 13988  001320  07AA               	decf	(printf@width+1)& (0+255),f,b
 13989  001322  0100               	movlb	0	; () banked
 13990  001324  29A9               	incf	printf@width& (0+255),w,b
 13991  001326  E1F6               	bnz	l5520
 13992  001328  0100               	movlb	0	; () banked
 13993  00132A  29AA               	incf	(printf@width+1)& (0+255),w,b
 13994  00132C  B4D8               	btfsc	status,2,c
 13995  00132E  D017               	goto	l5528
 13996  001330  D7F1               	goto	l5520
 13997  001332                     l5524:
 13998                           
 13999                           ; BSR set to: 0
 14000                           ;doprnt.c: 768: (putch(*cp++) );
 14001  001332  C09F  FFF6         	movff	printf@cp,tblptrl
 14002  001336  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 14003  00133A  0E00               	movlw	low (__mediumconst shr (0+16))
 14004  00133C  6EF8               	movwf	tblptru,c
 14005  00133E  0E0F               	movlw	(high __ramtop+-1)
 14006  001340  64F7               	cpfsgt	tblptrh,c
 14007  001342  D003               	bra	u3937
 14008  001344  0008               	tblrd		*
 14009  001346  50F5               	movf	tablat,w,c
 14010  001348  D005               	bra	u3930
 14011  00134A                     u3937:
 14012  00134A  CFF6 FFE9          	movff	tblptrl,fsr0l
 14013  00134E  CFF7 FFEA          	movff	tblptrh,fsr0h
 14014  001352  50EF               	movf	indf0,w,c
 14015  001354                     u3930:
 14016  001354  EC1E  F024         	call	_putch
 14017  001358  0100               	movlb	0	; () banked
 14018  00135A  4B9F               	infsnz	printf@cp& (0+255),f,b
 14019  00135C  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 14020  00135E                     l5528:
 14021                           
 14022                           ; BSR set to: 0
 14023  00135E  0100               	movlb	0	; () banked
 14024  001360  07A3               	decf	printf@len& (0+255),f,b
 14025  001362  A0D8               	btfss	status,0,c
 14026  001364  07A4               	decf	(printf@len+1)& (0+255),f,b
 14027  001366  0100               	movlb	0	; () banked
 14028  001368  29A3               	incf	printf@len& (0+255),w,b
 14029  00136A  E1E3               	bnz	l5524
 14030  00136C  0100               	movlb	0	; () banked
 14031  00136E  29A4               	incf	(printf@len+1)& (0+255),w,b
 14032  001370  B4D8               	btfsc	status,2,c
 14033  001372  D10A               	goto	l5606
 14034  001374  D7DE               	goto	l5524
 14035  001376                     l5530:
 14036                           
 14037                           ; BSR set to: 0
 14038                           ;doprnt.c: 818: flag |= 0x40;
 14039  001376  0100               	movlb	0	; () banked
 14040  001378  8DA7               	bsf	printf@flag& (0+255),6,b
 14041                           
 14042                           ; BSR set to: 0
 14043                           ;doprnt.c: 822: }
 14044                           
 14045                           ;doprnt.c: 819: break;
 14046  00137A  D01D               	goto	l1276
 14047  00137C                     l5534:
 14048  00137C  C08E  FFF6         	movff	printf@f,tblptrl
 14049  001380  C08F  FFF7         	movff	printf@f+1,tblptrh
 14050  001384  0100               	movlb	0	; () banked
 14051  001386  4B8E               	infsnz	printf@f& (0+255),f,b
 14052  001388  2B8F               	incf	(printf@f+1)& (0+255),f,b
 14053  00138A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14054  00138A  6AF8               	clrf	tblptru,c
 14055  00138C                     	endif
 14056  00138C                     	if	0	;tblptru may be non-zero
 14057  00138C                     	endif
 14058  00138C  0008               	tblrd		*
 14059  00138E  CFF5 F0A8          	movff	tablat,printf@c
 14060  001392  0100               	movlb	0	; () banked
 14061  001394  51A8               	movf	printf@c& (0+255),w,b
 14062                           
 14063                           ; Switch size 1, requested type "space"
 14064                           ; Number of cases is 5, Range of values is 0 to 117
 14065                           ; switch strategies available:
 14066                           ; Name         Instructions Cycles
 14067                           ; simple_byte           16     9 (average)
 14068                           ;	Chosen strategy is simple_byte
 14069  001396  0A00               	xorlw	0	; case 0
 14070  001398  B4D8               	btfsc	status,2,c
 14071  00139A  0012               	return	
 14072  00139C  0A64               	xorlw	100	; case 100
 14073  00139E  B4D8               	btfsc	status,2,c
 14074  0013A0  D00A               	goto	l1276
 14075  0013A2  0A0D               	xorlw	13	; case 105
 14076  0013A4  B4D8               	btfsc	status,2,c
 14077  0013A6  D007               	goto	l1276
 14078  0013A8  0A1A               	xorlw	26	; case 115
 14079  0013AA  B4D8               	btfsc	status,2,c
 14080  0013AC  D758               	goto	l5500
 14081  0013AE  0A06               	xorlw	6	; case 117
 14082  0013B0  B4D8               	btfsc	status,2,c
 14083  0013B2  D7E1               	goto	l5530
 14084  0013B4  D0E9               	goto	l5606
 14085  0013B6                     l1276:
 14086                           
 14087                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 14088  0013B6  0100               	movlb	0	; () banked
 14089  0013B8  BDA7               	btfsc	printf@flag& (0+255),6,b
 14090  0013BA  D019               	goto	l5546
 14091                           
 14092                           ; BSR set to: 0
 14093                           ;doprnt.c: 1253: {
 14094                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 14095  0013BC  C0A1  FFD9         	movff	printf@ap,fsr2l
 14096  0013C0  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 14097  0013C4  CFDE F0A5          	movff	postinc2,printf@val
 14098  0013C8  CFDD F0A6          	movff	postdec2,printf@val+1
 14099                           
 14100                           ; BSR set to: 0
 14101  0013CC  0E02               	movlw	2
 14102  0013CE  0100               	movlb	0	; () banked
 14103  0013D0  27A1               	addwf	printf@ap& (0+255),f,b
 14104  0013D2  0E00               	movlw	0
 14105  0013D4  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 14106                           
 14107                           ; BSR set to: 0
 14108                           ;doprnt.c: 1261: if((int)val < 0) {
 14109  0013D6  0100               	movlb	0	; () banked
 14110  0013D8  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 14111  0013DA  D016               	goto	l5550
 14112                           
 14113                           ; BSR set to: 0
 14114                           ;doprnt.c: 1262: flag |= 0x03;
 14115  0013DC  0E03               	movlw	3
 14116  0013DE  0100               	movlb	0	; () banked
 14117  0013E0  13A7               	iorwf	printf@flag& (0+255),f,b
 14118                           
 14119                           ; BSR set to: 0
 14120                           ;doprnt.c: 1263: val = -val;
 14121  0013E2  0100               	movlb	0	; () banked
 14122  0013E4  6DA5               	negf	printf@val& (0+255),b
 14123  0013E6  1FA6               	comf	(printf@val+1)& (0+255),f,b
 14124  0013E8  B0D8               	btfsc	status,0,c
 14125  0013EA  2BA6               	incf	(printf@val+1)& (0+255),f,b
 14126                           
 14127                           ; BSR set to: 0
 14128                           ;doprnt.c: 1264: }
 14129                           ;doprnt.c: 1266: }
 14130  0013EC  D00D               	goto	l5550
 14131  0013EE                     l5546:
 14132                           
 14133                           ; BSR set to: 0
 14134                           ;doprnt.c: 1268: else
 14135                           ;doprnt.c: 1273: {
 14136                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 14137  0013EE  C0A1  FFD9         	movff	printf@ap,fsr2l
 14138  0013F2  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 14139  0013F6  CFDE F0A5          	movff	postinc2,printf@val
 14140  0013FA  CFDD F0A6          	movff	postdec2,printf@val+1
 14141                           
 14142                           ; BSR set to: 0
 14143  0013FE  0E02               	movlw	2
 14144  001400  0100               	movlb	0	; () banked
 14145  001402  27A1               	addwf	printf@ap& (0+255),f,b
 14146  001404  0E00               	movlw	0
 14147  001406  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 14148  001408                     l5550:
 14149                           
 14150                           ; BSR set to: 0
 14151                           ;doprnt.c: 1287: }
 14152                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 14153  001408  0E01               	movlw	1
 14154  00140A  0100               	movlb	0	; () banked
 14155  00140C  6FA8               	movwf	printf@c& (0+255),b
 14156  00140E                     l5552:
 14157                           
 14158                           ; BSR set to: 0
 14159  00140E  0E05               	movlw	5
 14160  001410  0100               	movlb	0	; () banked
 14161  001412  19A8               	xorwf	printf@c& (0+255),w,b
 14162  001414  B4D8               	btfsc	status,2,c
 14163  001416  D019               	goto	l5564
 14164                           
 14165                           ; BSR set to: 0
 14166                           ;doprnt.c: 1306: if(val < dpowers[c])
 14167                           
 14168                           ; BSR set to: 0
 14169                           
 14170                           ; BSR set to: 0
 14171  001418  0100               	movlb	0	; () banked
 14172  00141A  51A8               	movf	printf@c& (0+255),w,b
 14173  00141C  0D02               	mullw	2
 14174  00141E  0E24               	movlw	low _dpowers
 14175  001420  24F3               	addwf	prodl,w,c
 14176  001422  6EF6               	movwf	tblptrl,c
 14177  001424  0EFB               	movlw	high _dpowers
 14178  001426  20F4               	addwfc	prodh,w,c
 14179  001428  6EF7               	movwf	tblptrh,c
 14180  00142A                     	if	1	;There are 3 active tblptr bytes
 14181  00142A  6AF8               	clrf	tblptru,c
 14182  00142C  0E00               	movlw	low (__mediumconst shr (0+16))
 14183  00142E  22F8               	addwfc	tblptru,f,c
 14184  001430                     	endif
 14185  001430  0009               	tblrd		*+
 14186  001432  50F5               	movf	tablat,w,c
 14187  001434  0100               	movlb	0	; () banked
 14188  001436  5DA5               	subwf	printf@val& (0+255),w,b
 14189  001438  0009               	tblrd		*+
 14190  00143A  50F5               	movf	tablat,w,c
 14191  00143C  0100               	movlb	0	; () banked
 14192  00143E  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 14193  001440  A0D8               	btfss	status,0,c
 14194  001442  D003               	goto	l5564
 14195                           
 14196                           ; BSR set to: 0
 14197                           
 14198                           ; BSR set to: 0
 14199                           
 14200                           ; BSR set to: 0
 14201                           ;doprnt.c: 1307: break;
 14202  001444  0100               	movlb	0	; () banked
 14203  001446  2BA8               	incf	printf@c& (0+255),f,b
 14204  001448  D7E2               	goto	l5552
 14205  00144A                     l5564:
 14206                           
 14207                           ; BSR set to: 0
 14208                           ;doprnt.c: 1345: if(width && flag & 0x03)
 14209  00144A  0100               	movlb	0	; () banked
 14210  00144C  51A9               	movf	printf@width& (0+255),w,b
 14211  00144E  0100               	movlb	0	; () banked
 14212  001450  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 14213  001452  B4D8               	btfsc	status,2,c
 14214  001454  D00B               	goto	l5570
 14215                           
 14216                           ; BSR set to: 0
 14217  001456  C0A7  F09A         	movff	printf@flag,??_printf
 14218  00145A  0E03               	movlw	3
 14219  00145C  0100               	movlb	0	; () banked
 14220  00145E  179A               	andwf	??_printf& (0+255),f,b
 14221  001460  B4D8               	btfsc	status,2,c
 14222  001462  D004               	goto	l5570
 14223                           
 14224                           ; BSR set to: 0
 14225                           ;doprnt.c: 1346: width--;
 14226  001464  0100               	movlb	0	; () banked
 14227  001466  07A9               	decf	printf@width& (0+255),f,b
 14228  001468  A0D8               	btfss	status,0,c
 14229  00146A  07AA               	decf	(printf@width+1)& (0+255),f,b
 14230  00146C                     l5570:
 14231                           
 14232                           ; BSR set to: 0
 14233                           ;doprnt.c: 1381: if(width > c)
 14234  00146C  0E80               	movlw	128
 14235  00146E  0100               	movlb	0	; () banked
 14236  001470  BFA8               	btfsc	printf@c& (0+255),7,b
 14237  001472  0E7F               	movlw	127
 14238  001474  0100               	movlb	0	; () banked
 14239  001476  6F9A               	movwf	??_printf& (0+255),b
 14240  001478  0100               	movlb	0	; () banked
 14241  00147A  51A9               	movf	printf@width& (0+255),w,b
 14242  00147C  0100               	movlb	0	; () banked
 14243  00147E  5DA8               	subwf	printf@c& (0+255),w,b
 14244  001480  0100               	movlb	0	; () banked
 14245  001482  51AA               	movf	(printf@width+1)& (0+255),w,b
 14246  001484  0A80               	xorlw	128
 14247  001486  0100               	movlb	0	; () banked
 14248  001488  599A               	subwfb	??_printf& (0+255),w,b
 14249  00148A  B0D8               	btfsc	status,0,c
 14250  00148C  D00B               	goto	l5574
 14251                           
 14252                           ; BSR set to: 0
 14253                           ;doprnt.c: 1382: width -= c;
 14254  00148E  0100               	movlb	0	; () banked
 14255  001490  51A8               	movf	printf@c& (0+255),w,b
 14256  001492  0100               	movlb	0	; () banked
 14257  001494  5FA9               	subwf	printf@width& (0+255),f,b
 14258  001496  0E00               	movlw	0
 14259  001498  0100               	movlb	0	; () banked
 14260  00149A  BFA8               	btfsc	printf@c& (0+255),7,b
 14261  00149C  0EFF               	movlw	255
 14262  00149E  0100               	movlb	0	; () banked
 14263  0014A0  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 14264  0014A2  D005               	goto	l5576
 14265  0014A4                     l5574:
 14266                           
 14267                           ; BSR set to: 0
 14268                           ;doprnt.c: 1383: else
 14269                           ;doprnt.c: 1384: width = 0;
 14270  0014A4  0E00               	movlw	0
 14271  0014A6  0100               	movlb	0	; () banked
 14272  0014A8  6FAA               	movwf	(printf@width+1)& (0+255),b
 14273  0014AA  0E00               	movlw	0
 14274  0014AC  6FA9               	movwf	printf@width& (0+255),b
 14275  0014AE                     l5576:
 14276                           
 14277                           ; BSR set to: 0
 14278                           ;doprnt.c: 1387: if(flag & 0x04) {
 14279  0014AE  0100               	movlb	0	; () banked
 14280  0014B0  A5A7               	btfss	printf@flag& (0+255),2,b
 14281  0014B2  D018               	goto	l5588
 14282                           
 14283                           ; BSR set to: 0
 14284                           ;doprnt.c: 1392: if(flag & 0x03)
 14285  0014B4  C0A7  F09A         	movff	printf@flag,??_printf
 14286  0014B8  0E03               	movlw	3
 14287  0014BA  0100               	movlb	0	; () banked
 14288  0014BC  179A               	andwf	??_printf& (0+255),f,b
 14289  0014BE  B4D8               	btfsc	status,2,c
 14290  0014C0  D003               	goto	l5582
 14291                           
 14292                           ; BSR set to: 0
 14293                           ;doprnt.c: 1393: (putch('-') );
 14294  0014C2  0E2D               	movlw	45
 14295  0014C4  EC1E  F024         	call	_putch
 14296  0014C8                     l5582:
 14297                           
 14298                           ;doprnt.c: 1415: if(width)
 14299  0014C8  0100               	movlb	0	; () banked
 14300  0014CA  51A9               	movf	printf@width& (0+255),w,b
 14301  0014CC  0100               	movlb	0	; () banked
 14302  0014CE  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 14303  0014D0  B4D8               	btfsc	status,2,c
 14304  0014D2  D025               	goto	l5598
 14305                           
 14306                           ; BSR set to: 0
 14307                           ;doprnt.c: 1417: (putch('0') );
 14308                           
 14309                           ; BSR set to: 0
 14310                           
 14311                           ;doprnt.c: 1416: do
 14312  0014D4  0E30               	movlw	48
 14313  0014D6  EC1E  F024         	call	_putch
 14314                           
 14315                           ;doprnt.c: 1418: while(--width);
 14316  0014DA  0100               	movlb	0	; () banked
 14317  0014DC  07A9               	decf	printf@width& (0+255),f,b
 14318  0014DE  A0D8               	btfss	status,0,c
 14319  0014E0  07AA               	decf	(printf@width+1)& (0+255),f,b
 14320  0014E2  D7F2               	goto	l5582
 14321  0014E4                     l5588:
 14322                           
 14323                           ; BSR set to: 0
 14324                           ;doprnt.c: 1422: {
 14325                           ;doprnt.c: 1424: if(width
 14326                           ;doprnt.c: 1428: )
 14327  0014E4  0100               	movlb	0	; () banked
 14328  0014E6  51A9               	movf	printf@width& (0+255),w,b
 14329  0014E8  0100               	movlb	0	; () banked
 14330  0014EA  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 14331  0014EC  B4D8               	btfsc	status,2,c
 14332  0014EE  D00D               	goto	l5594
 14333  0014F0                     l5590:
 14334                           
 14335                           ; BSR set to: 0
 14336                           ;doprnt.c: 1430: (putch(' ') );
 14337  0014F0  0E20               	movlw	32
 14338  0014F2  EC1E  F024         	call	_putch
 14339                           
 14340                           ;doprnt.c: 1431: while(--width);
 14341  0014F6  0100               	movlb	0	; () banked
 14342  0014F8  07A9               	decf	printf@width& (0+255),f,b
 14343  0014FA  A0D8               	btfss	status,0,c
 14344  0014FC  07AA               	decf	(printf@width+1)& (0+255),f,b
 14345  0014FE  0100               	movlb	0	; () banked
 14346  001500  51A9               	movf	printf@width& (0+255),w,b
 14347  001502  0100               	movlb	0	; () banked
 14348  001504  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 14349  001506  A4D8               	btfss	status,2,c
 14350  001508  D7F3               	goto	l5590
 14351  00150A                     l5594:
 14352                           
 14353                           ; BSR set to: 0
 14354                           ;doprnt.c: 1438: if(flag & 0x03)
 14355  00150A  C0A7  F09A         	movff	printf@flag,??_printf
 14356  00150E  0E03               	movlw	3
 14357  001510  0100               	movlb	0	; () banked
 14358  001512  179A               	andwf	??_printf& (0+255),f,b
 14359  001514  B4D8               	btfsc	status,2,c
 14360  001516  D003               	goto	l5598
 14361                           
 14362                           ; BSR set to: 0
 14363                           ;doprnt.c: 1439: (putch('-') );
 14364  001518  0E2D               	movlw	45
 14365  00151A  EC1E  F024         	call	_putch
 14366  00151E                     l5598:
 14367                           
 14368                           ;doprnt.c: 1469: }
 14369                           ;doprnt.c: 1472: prec = c;
 14370  00151E  C0A8  F09E         	movff	printf@c,printf@prec
 14371                           
 14372                           ;doprnt.c: 1474: while(prec--) {
 14373  001522  D02C               	goto	l5604
 14374  001524                     l5600:
 14375                           
 14376                           ;doprnt.c: 1478: {
 14377                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 14378  001524  0100               	movlb	0	; () banked
 14379  001526  519E               	movf	printf@prec& (0+255),w,b
 14380  001528  0D02               	mullw	2
 14381  00152A  0E24               	movlw	low _dpowers
 14382  00152C  24F3               	addwf	prodl,w,c
 14383  00152E  6EF6               	movwf	tblptrl,c
 14384  001530  0EFB               	movlw	high _dpowers
 14385  001532  20F4               	addwfc	prodh,w,c
 14386  001534  6EF7               	movwf	tblptrh,c
 14387  001536                     	if	1	;There are 3 active tblptr bytes
 14388  001536  6AF8               	clrf	tblptru,c
 14389  001538  0E00               	movlw	low (__mediumconst shr (0+16))
 14390  00153A  22F8               	addwfc	tblptru,f,c
 14391  00153C                     	endif
 14392  00153C  0009               	tblrd		*+
 14393  00153E  CFF5 F082          	movff	tablat,___lwdiv@divisor
 14394  001542  000A               	tblrd		*-
 14395  001544  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 14396  001548  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 14397  00154C  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 14398  001550  EC22  F01E         	call	___lwdiv	;wreg free
 14399  001554  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 14400  001558  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 14401  00155C  0E00               	movlw	0
 14402  00155E  0100               	movlb	0	; () banked
 14403  001560  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 14404  001562  0E0A               	movlw	10
 14405  001564  6F89               	movwf	___lwmod@divisor& (0+255),b
 14406  001566  EC3B  F01F         	call	___lwmod	;wreg free
 14407  00156A  0100               	movlb	0	; () banked
 14408  00156C  5187               	movf	?___lwmod& (0+255),w,b
 14409  00156E  0F30               	addlw	48
 14410  001570  0100               	movlb	0	; () banked
 14411  001572  6FA8               	movwf	printf@c& (0+255),b
 14412                           
 14413                           ; BSR set to: 0
 14414                           ;doprnt.c: 1523: }
 14415                           ;doprnt.c: 1524: (putch(c) );
 14416  001574  0100               	movlb	0	; () banked
 14417  001576  51A8               	movf	printf@c& (0+255),w,b
 14418  001578  EC1E  F024         	call	_putch
 14419  00157C                     l5604:
 14420  00157C  0100               	movlb	0	; () banked
 14421  00157E  079E               	decf	printf@prec& (0+255),f,b
 14422  001580  0100               	movlb	0	; () banked
 14423  001582  299E               	incf	printf@prec& (0+255),w,b
 14424  001584  A4D8               	btfss	status,2,c
 14425  001586  D7CE               	goto	l5600
 14426  001588                     l5606:
 14427  001588  C08E  FFF6         	movff	printf@f,tblptrl
 14428  00158C  C08F  FFF7         	movff	printf@f+1,tblptrh
 14429  001590  0100               	movlb	0	; () banked
 14430  001592  4B8E               	infsnz	printf@f& (0+255),f,b
 14431  001594  2B8F               	incf	(printf@f+1)& (0+255),f,b
 14432  001596                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14433  001596  6AF8               	clrf	tblptru,c
 14434  001598                     	endif
 14435  001598                     	if	0	;tblptru may be non-zero
 14436  001598                     	endif
 14437  001598  0008               	tblrd		*
 14438  00159A  CFF5 F0A8          	movff	tablat,printf@c
 14439  00159E  0100               	movlb	0	; () banked
 14440  0015A0  51A8               	movf	printf@c& (0+255),w,b
 14441  0015A2  B4D8               	btfsc	status,2,c
 14442  0015A4  0012               	return	
 14443  0015A6  D5EB               	goto	l5476
 14444  0015A8                     __end_of_printf:
 14445                           	opt stack 0
 14446                           tblptru	equ	0xFF8
 14447                           tblptrh	equ	0xFF7
 14448                           tblptrl	equ	0xFF6
 14449                           tablat	equ	0xFF5
 14450                           prodh	equ	0xFF4
 14451                           prodl	equ	0xFF3
 14452                           intcon	equ	0xFF2
 14453                           intcon2	equ	0xFF1
 14454                           intcon3	equ	0xFF0
 14455                           indf0	equ	0xFEF
 14456                           postinc0	equ	0xFEE
 14457                           fsr0h	equ	0xFEA
 14458                           fsr0l	equ	0xFE9
 14459                           wreg	equ	0xFE8
 14460                           postdec1	equ	0xFE5
 14461                           fsr1l	equ	0xFE1
 14462                           indf2	equ	0xFDF
 14463                           postinc2	equ	0xFDE
 14464                           postdec2	equ	0xFDD
 14465                           fsr2h	equ	0xFDA
 14466                           fsr2l	equ	0xFD9
 14467                           status	equ	0xFD8
 14468                           
 14469 ;; *************** function _putch *****************
 14470 ;; Defined at:
 14471 ;;		line 20 in file "lcd.c"
 14472 ;; Parameters:    Size  Location     Type
 14473 ;;  data            1    wreg     unsigned char 
 14474 ;; Auto vars:     Size  Location     Type
 14475 ;;  data            1    2[BANK0 ] unsigned char 
 14476 ;; Return value:  Size  Location     Type
 14477 ;;                  1    wreg      void 
 14478 ;; Registers used:
 14479 ;;		wreg, status,2, status,0, cstack
 14480 ;; Tracked objects:
 14481 ;;		On entry : 0/0
 14482 ;;		On exit  : 0/0
 14483 ;;		Unchanged: 0/0
 14484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14486 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14488 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14489 ;;Total ram usage:        1 bytes
 14490 ;; Hardware stack levels used:    1
 14491 ;; Hardware stack levels required when called:    8
 14492 ;; This function calls:
 14493 ;;		_lcdNibble
 14494 ;; This function is called by:
 14495 ;;		_printf
 14496 ;; This function uses a non-reentrant model
 14497 ;;
 14498                           
 14499                           	psect	text49
 14500  00483C                     __ptext49:
 14501                           	opt stack 0
 14502  00483C                     _putch:
 14503                           	opt stack 18
 14504                           
 14505                           ;incstack = 0
 14506                           ;putch@data stored from wreg
 14507  00483C  0100               	movlb	0	; () banked
 14508  00483E  6F82               	movwf	putch@data& (0+255),b
 14509                           
 14510                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 14511  004840  848C               	bsf	3980,2,c	;volatile
 14512                           
 14513                           ;lcd.c: 22: lcdNibble(data);
 14514  004842  0100               	movlb	0	; () banked
 14515  004844  5182               	movf	putch@data& (0+255),w,b
 14516  004846  EC07  F01F         	call	_lcdNibble
 14517  00484A  0012               	return		;funcret
 14518  00484C                     __end_of_putch:
 14519                           	opt stack 0
 14520                           tblptru	equ	0xFF8
 14521                           tblptrh	equ	0xFF7
 14522                           tblptrl	equ	0xFF6
 14523                           tablat	equ	0xFF5
 14524                           prodh	equ	0xFF4
 14525                           prodl	equ	0xFF3
 14526                           intcon	equ	0xFF2
 14527                           intcon2	equ	0xFF1
 14528                           intcon3	equ	0xFF0
 14529                           indf0	equ	0xFEF
 14530                           postinc0	equ	0xFEE
 14531                           fsr0h	equ	0xFEA
 14532                           fsr0l	equ	0xFE9
 14533                           wreg	equ	0xFE8
 14534                           postdec1	equ	0xFE5
 14535                           fsr1l	equ	0xFE1
 14536                           indf2	equ	0xFDF
 14537                           postinc2	equ	0xFDE
 14538                           postdec2	equ	0xFDD
 14539                           fsr2h	equ	0xFDA
 14540                           fsr2l	equ	0xFD9
 14541                           status	equ	0xFD8
 14542                           
 14543 ;; *************** function _isdigit *****************
 14544 ;; Defined at:
 14545 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 14546 ;; Parameters:    Size  Location     Type
 14547 ;;  c               1    wreg     unsigned char 
 14548 ;; Auto vars:     Size  Location     Type
 14549 ;;  c               1    2[BANK0 ] unsigned char 
 14550 ;; Return value:  Size  Location     Type
 14551 ;;		None               void
 14552 ;; Registers used:
 14553 ;;		wreg, status,2, status,0
 14554 ;; Tracked objects:
 14555 ;;		On entry : 0/0
 14556 ;;		On exit  : 0/0
 14557 ;;		Unchanged: 0/0
 14558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14560 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14561 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14562 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14563 ;;Total ram usage:        3 bytes
 14564 ;; Hardware stack levels used:    1
 14565 ;; Hardware stack levels required when called:    7
 14566 ;; This function calls:
 14567 ;;		Nothing
 14568 ;; This function is called by:
 14569 ;;		_printf
 14570 ;; This function uses a non-reentrant model
 14571 ;;
 14572                           
 14573                           	psect	text50
 14574  004686                     __ptext50:
 14575                           	opt stack 0
 14576  004686                     _isdigit:
 14577                           	opt stack 19
 14578                           
 14579                           ;incstack = 0
 14580                           ;isdigit@c stored from wreg
 14581  004686  0100               	movlb	0	; () banked
 14582  004688  6F82               	movwf	isdigit@c& (0+255),b
 14583  00468A  0E00               	movlw	0
 14584  00468C  0100               	movlb	0	; () banked
 14585  00468E  6F81               	movwf	_isdigit$1948& (0+255),b
 14586                           
 14587                           ; BSR set to: 0
 14588  004690  0E3A               	movlw	58
 14589  004692  0100               	movlb	0	; () banked
 14590  004694  6182               	cpfslt	isdigit@c& (0+255),b
 14591  004696  D007               	goto	l5324
 14592                           
 14593                           ; BSR set to: 0
 14594  004698  0E2F               	movlw	47
 14595  00469A  0100               	movlb	0	; () banked
 14596  00469C  6582               	cpfsgt	isdigit@c& (0+255),b
 14597  00469E  D003               	goto	l5324
 14598                           
 14599                           ; BSR set to: 0
 14600  0046A0  0E01               	movlw	1
 14601  0046A2  0100               	movlb	0	; () banked
 14602  0046A4  6F81               	movwf	_isdigit$1948& (0+255),b
 14603  0046A6                     l5324:
 14604                           
 14605                           ; BSR set to: 0
 14606  0046A6  C081  F080         	movff	_isdigit$1948,??_isdigit
 14607  0046AA  0100               	movlb	0	; () banked
 14608  0046AC  3180               	rrcf	??_isdigit& (0+255),w,b
 14609  0046AE  0012               	return	
 14610  0046B0                     __end_of_isdigit:
 14611                           	opt stack 0
 14612                           tblptru	equ	0xFF8
 14613                           tblptrh	equ	0xFF7
 14614                           tblptrl	equ	0xFF6
 14615                           tablat	equ	0xFF5
 14616                           prodh	equ	0xFF4
 14617                           prodl	equ	0xFF3
 14618                           intcon	equ	0xFF2
 14619                           intcon2	equ	0xFF1
 14620                           intcon3	equ	0xFF0
 14621                           indf0	equ	0xFEF
 14622                           postinc0	equ	0xFEE
 14623                           fsr0h	equ	0xFEA
 14624                           fsr0l	equ	0xFE9
 14625                           wreg	equ	0xFE8
 14626                           postdec1	equ	0xFE5
 14627                           fsr1l	equ	0xFE1
 14628                           indf2	equ	0xFDF
 14629                           postinc2	equ	0xFDE
 14630                           postdec2	equ	0xFDD
 14631                           fsr2h	equ	0xFDA
 14632                           fsr2l	equ	0xFD9
 14633                           status	equ	0xFD8
 14634                           
 14635 ;; *************** function ___wmul *****************
 14636 ;; Defined at:
 14637 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 14638 ;; Parameters:    Size  Location     Type
 14639 ;;  multiplier      2    0[BANK0 ] unsigned int 
 14640 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 14641 ;; Auto vars:     Size  Location     Type
 14642 ;;  product         2    4[BANK0 ] unsigned int 
 14643 ;; Return value:  Size  Location     Type
 14644 ;;                  2    0[BANK0 ] unsigned int 
 14645 ;; Registers used:
 14646 ;;		wreg, status,2, status,0, prodl, prodh
 14647 ;; Tracked objects:
 14648 ;;		On entry : 0/0
 14649 ;;		On exit  : 0/0
 14650 ;;		Unchanged: 0/0
 14651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14652 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14653 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14655 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14656 ;;Total ram usage:        6 bytes
 14657 ;; Hardware stack levels used:    1
 14658 ;; Hardware stack levels required when called:    7
 14659 ;; This function calls:
 14660 ;;		Nothing
 14661 ;; This function is called by:
 14662 ;;		_printf
 14663 ;; This function uses a non-reentrant model
 14664 ;;
 14665                           
 14666                           	psect	text51
 14667  00435A                     __ptext51:
 14668                           	opt stack 0
 14669  00435A                     ___wmul:
 14670                           	opt stack 19
 14671                           
 14672                           ; BSR set to: 0
 14673                           ;incstack = 0
 14674  00435A  0100               	movlb	0	; () banked
 14675  00435C  5180               	movf	___wmul@multiplier& (0+255),w,b
 14676  00435E  0100               	movlb	0	; () banked
 14677  004360  0382               	mulwf	___wmul@multiplicand& (0+255),b
 14678  004362  CFF3 F084          	movff	prodl,___wmul@product
 14679  004366  CFF4 F085          	movff	prodh,___wmul@product+1
 14680  00436A  0100               	movlb	0	; () banked
 14681  00436C  5180               	movf	___wmul@multiplier& (0+255),w,b
 14682  00436E  0100               	movlb	0	; () banked
 14683  004370  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 14684  004372  50F3               	movf	prodl,w,c
 14685  004374  0100               	movlb	0	; () banked
 14686  004376  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 14687  004378  0100               	movlb	0	; () banked
 14688  00437A  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 14689  00437C  0100               	movlb	0	; () banked
 14690  00437E  0382               	mulwf	___wmul@multiplicand& (0+255),b
 14691  004380  50F3               	movf	prodl,w,c
 14692  004382  0100               	movlb	0	; () banked
 14693  004384  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 14694                           
 14695                           ; BSR set to: 0
 14696  004386  C084  F080         	movff	___wmul@product,?___wmul
 14697  00438A  C085  F081         	movff	___wmul@product+1,?___wmul+1
 14698  00438E  0012               	return	
 14699  004390                     __end_of___wmul:
 14700                           	opt stack 0
 14701                           tblptru	equ	0xFF8
 14702                           tblptrh	equ	0xFF7
 14703                           tblptrl	equ	0xFF6
 14704                           tablat	equ	0xFF5
 14705                           prodh	equ	0xFF4
 14706                           prodl	equ	0xFF3
 14707                           intcon	equ	0xFF2
 14708                           intcon2	equ	0xFF1
 14709                           intcon3	equ	0xFF0
 14710                           indf0	equ	0xFEF
 14711                           postinc0	equ	0xFEE
 14712                           fsr0h	equ	0xFEA
 14713                           fsr0l	equ	0xFE9
 14714                           wreg	equ	0xFE8
 14715                           postdec1	equ	0xFE5
 14716                           fsr1l	equ	0xFE1
 14717                           indf2	equ	0xFDF
 14718                           postinc2	equ	0xFDE
 14719                           postdec2	equ	0xFDD
 14720                           fsr2h	equ	0xFDA
 14721                           fsr2l	equ	0xFD9
 14722                           status	equ	0xFD8
 14723                           
 14724 ;; *************** function ___lwmod *****************
 14725 ;; Defined at:
 14726 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 14727 ;; Parameters:    Size  Location     Type
 14728 ;;  dividend        2    7[BANK0 ] unsigned int 
 14729 ;;  divisor         2    9[BANK0 ] unsigned int 
 14730 ;; Auto vars:     Size  Location     Type
 14731 ;;  counter         1   11[BANK0 ] unsigned char 
 14732 ;; Return value:  Size  Location     Type
 14733 ;;                  2    7[BANK0 ] unsigned int 
 14734 ;; Registers used:
 14735 ;;		wreg, status,2, status,0
 14736 ;; Tracked objects:
 14737 ;;		On entry : 0/0
 14738 ;;		On exit  : 0/0
 14739 ;;		Unchanged: 0/0
 14740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14741 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14742 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14744 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14745 ;;Total ram usage:        5 bytes
 14746 ;; Hardware stack levels used:    1
 14747 ;; Hardware stack levels required when called:    7
 14748 ;; This function calls:
 14749 ;;		Nothing
 14750 ;; This function is called by:
 14751 ;;		_printf
 14752 ;; This function uses a non-reentrant model
 14753 ;;
 14754                           
 14755                           	psect	text52
 14756  003E76                     __ptext52:
 14757                           	opt stack 0
 14758  003E76                     ___lwmod:
 14759                           	opt stack 19
 14760                           
 14761                           ; BSR set to: 0
 14762                           ;incstack = 0
 14763  003E76  0100               	movlb	0	; () banked
 14764  003E78  5189               	movf	___lwmod@divisor& (0+255),w,b
 14765  003E7A  0100               	movlb	0	; () banked
 14766  003E7C  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 14767  003E7E  B4D8               	btfsc	status,2,c
 14768  003E80  D026               	goto	l1733
 14769                           
 14770                           ; BSR set to: 0
 14771  003E82  0E01               	movlw	1
 14772  003E84  0100               	movlb	0	; () banked
 14773  003E86  6F8B               	movwf	___lwmod@counter& (0+255),b
 14774  003E88  D006               	goto	l5362
 14775  003E8A                     l5360:
 14776                           
 14777                           ; BSR set to: 0
 14778  003E8A  0100               	movlb	0	; () banked
 14779  003E8C  90D8               	bcf	status,0,c
 14780  003E8E  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 14781  003E90  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 14782  003E92  0100               	movlb	0	; () banked
 14783  003E94  2B8B               	incf	___lwmod@counter& (0+255),f,b
 14784  003E96                     l5362:
 14785                           
 14786                           ; BSR set to: 0
 14787  003E96  0100               	movlb	0	; () banked
 14788  003E98  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 14789  003E9A  D7F7               	goto	l5360
 14790  003E9C                     l5364:
 14791                           
 14792                           ; BSR set to: 0
 14793  003E9C  0100               	movlb	0	; () banked
 14794  003E9E  5189               	movf	___lwmod@divisor& (0+255),w,b
 14795  003EA0  0100               	movlb	0	; () banked
 14796  003EA2  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 14797  003EA4  0100               	movlb	0	; () banked
 14798  003EA6  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 14799  003EA8  0100               	movlb	0	; () banked
 14800  003EAA  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 14801  003EAC  A0D8               	btfss	status,0,c
 14802  003EAE  D008               	goto	l5368
 14803                           
 14804                           ; BSR set to: 0
 14805  003EB0  0100               	movlb	0	; () banked
 14806  003EB2  5189               	movf	___lwmod@divisor& (0+255),w,b
 14807  003EB4  0100               	movlb	0	; () banked
 14808  003EB6  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 14809  003EB8  0100               	movlb	0	; () banked
 14810  003EBA  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 14811  003EBC  0100               	movlb	0	; () banked
 14812  003EBE  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 14813  003EC0                     l5368:
 14814                           
 14815                           ; BSR set to: 0
 14816  003EC0  0100               	movlb	0	; () banked
 14817  003EC2  90D8               	bcf	status,0,c
 14818  003EC4  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 14819  003EC6  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 14820                           
 14821                           ; BSR set to: 0
 14822  003EC8  0100               	movlb	0	; () banked
 14823  003ECA  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 14824  003ECC  D7E7               	goto	l5364
 14825  003ECE                     l1733:
 14826                           
 14827                           ; BSR set to: 0
 14828  003ECE  C087  F087         	movff	___lwmod@dividend,?___lwmod
 14829  003ED2  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 14830                           
 14831                           ; BSR set to: 0
 14832  003ED6  0012               	return		;funcret
 14833  003ED8                     __end_of___lwmod:
 14834                           	opt stack 0
 14835                           tblptru	equ	0xFF8
 14836                           tblptrh	equ	0xFF7
 14837                           tblptrl	equ	0xFF6
 14838                           tablat	equ	0xFF5
 14839                           prodh	equ	0xFF4
 14840                           prodl	equ	0xFF3
 14841                           intcon	equ	0xFF2
 14842                           intcon2	equ	0xFF1
 14843                           intcon3	equ	0xFF0
 14844                           indf0	equ	0xFEF
 14845                           postinc0	equ	0xFEE
 14846                           fsr0h	equ	0xFEA
 14847                           fsr0l	equ	0xFE9
 14848                           wreg	equ	0xFE8
 14849                           postdec1	equ	0xFE5
 14850                           fsr1l	equ	0xFE1
 14851                           indf2	equ	0xFDF
 14852                           postinc2	equ	0xFDE
 14853                           postdec2	equ	0xFDD
 14854                           fsr2h	equ	0xFDA
 14855                           fsr2l	equ	0xFD9
 14856                           status	equ	0xFD8
 14857                           
 14858 ;; *************** function ___lwdiv *****************
 14859 ;; Defined at:
 14860 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 14861 ;; Parameters:    Size  Location     Type
 14862 ;;  dividend        2    0[BANK0 ] unsigned int 
 14863 ;;  divisor         2    2[BANK0 ] unsigned int 
 14864 ;; Auto vars:     Size  Location     Type
 14865 ;;  quotient        2    4[BANK0 ] unsigned int 
 14866 ;;  counter         1    6[BANK0 ] unsigned char 
 14867 ;; Return value:  Size  Location     Type
 14868 ;;                  2    0[BANK0 ] unsigned int 
 14869 ;; Registers used:
 14870 ;;		wreg, status,2, status,0
 14871 ;; Tracked objects:
 14872 ;;		On entry : 0/0
 14873 ;;		On exit  : 0/0
 14874 ;;		Unchanged: 0/0
 14875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14876 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14877 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14879 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14880 ;;Total ram usage:        7 bytes
 14881 ;; Hardware stack levels used:    1
 14882 ;; Hardware stack levels required when called:    7
 14883 ;; This function calls:
 14884 ;;		Nothing
 14885 ;; This function is called by:
 14886 ;;		_printf
 14887 ;; This function uses a non-reentrant model
 14888 ;;
 14889                           
 14890                           	psect	text53
 14891  003C44                     __ptext53:
 14892                           	opt stack 0
 14893  003C44                     ___lwdiv:
 14894                           	opt stack 19
 14895                           
 14896                           ; BSR set to: 0
 14897                           ;incstack = 0
 14898  003C44  0E00               	movlw	0
 14899  003C46  0100               	movlb	0	; () banked
 14900  003C48  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 14901  003C4A  0E00               	movlw	0
 14902  003C4C  6F84               	movwf	___lwdiv@quotient& (0+255),b
 14903                           
 14904                           ; BSR set to: 0
 14905  003C4E  0100               	movlb	0	; () banked
 14906  003C50  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14907  003C52  0100               	movlb	0	; () banked
 14908  003C54  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 14909  003C56  B4D8               	btfsc	status,2,c
 14910  003C58  D02C               	goto	l1723
 14911                           
 14912                           ; BSR set to: 0
 14913  003C5A  0E01               	movlw	1
 14914  003C5C  0100               	movlb	0	; () banked
 14915  003C5E  6F86               	movwf	___lwdiv@counter& (0+255),b
 14916  003C60  D006               	goto	l5342
 14917  003C62                     l5340:
 14918                           
 14919                           ; BSR set to: 0
 14920  003C62  0100               	movlb	0	; () banked
 14921  003C64  90D8               	bcf	status,0,c
 14922  003C66  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 14923  003C68  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 14924  003C6A  0100               	movlb	0	; () banked
 14925  003C6C  2B86               	incf	___lwdiv@counter& (0+255),f,b
 14926  003C6E                     l5342:
 14927                           
 14928                           ; BSR set to: 0
 14929  003C6E  0100               	movlb	0	; () banked
 14930  003C70  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 14931  003C72  D7F7               	goto	l5340
 14932  003C74                     l5344:
 14933                           
 14934                           ; BSR set to: 0
 14935  003C74  0100               	movlb	0	; () banked
 14936  003C76  90D8               	bcf	status,0,c
 14937  003C78  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 14938  003C7A  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 14939                           
 14940                           ; BSR set to: 0
 14941  003C7C  0100               	movlb	0	; () banked
 14942  003C7E  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14943  003C80  0100               	movlb	0	; () banked
 14944  003C82  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 14945  003C84  0100               	movlb	0	; () banked
 14946  003C86  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 14947  003C88  0100               	movlb	0	; () banked
 14948  003C8A  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 14949  003C8C  A0D8               	btfss	status,0,c
 14950  003C8E  D00A               	goto	l5352
 14951                           
 14952                           ; BSR set to: 0
 14953  003C90  0100               	movlb	0	; () banked
 14954  003C92  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14955  003C94  0100               	movlb	0	; () banked
 14956  003C96  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 14957  003C98  0100               	movlb	0	; () banked
 14958  003C9A  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 14959  003C9C  0100               	movlb	0	; () banked
 14960  003C9E  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 14961                           
 14962                           ; BSR set to: 0
 14963  003CA0  0100               	movlb	0	; () banked
 14964  003CA2  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 14965  003CA4                     l5352:
 14966                           
 14967                           ; BSR set to: 0
 14968  003CA4  0100               	movlb	0	; () banked
 14969  003CA6  90D8               	bcf	status,0,c
 14970  003CA8  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 14971  003CAA  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 14972                           
 14973                           ; BSR set to: 0
 14974  003CAC  0100               	movlb	0	; () banked
 14975  003CAE  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 14976  003CB0  D7E1               	goto	l5344
 14977  003CB2                     l1723:
 14978                           
 14979                           ; BSR set to: 0
 14980  003CB2  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 14981  003CB6  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 14982                           
 14983                           ; BSR set to: 0
 14984  003CBA  0012               	return		;funcret
 14985  003CBC                     __end_of___lwdiv:
 14986                           	opt stack 0
 14987                           tblptru	equ	0xFF8
 14988                           tblptrh	equ	0xFF7
 14989                           tblptrl	equ	0xFF6
 14990                           tablat	equ	0xFF5
 14991                           prodh	equ	0xFF4
 14992                           prodl	equ	0xFF3
 14993                           intcon	equ	0xFF2
 14994                           intcon2	equ	0xFF1
 14995                           intcon3	equ	0xFF0
 14996                           indf0	equ	0xFEF
 14997                           postinc0	equ	0xFEE
 14998                           fsr0h	equ	0xFEA
 14999                           fsr0l	equ	0xFE9
 15000                           wreg	equ	0xFE8
 15001                           postdec1	equ	0xFE5
 15002                           fsr1l	equ	0xFE1
 15003                           indf2	equ	0xFDF
 15004                           postinc2	equ	0xFDE
 15005                           postdec2	equ	0xFDD
 15006                           fsr2h	equ	0xFDA
 15007                           fsr2l	equ	0xFD9
 15008                           status	equ	0xFD8
 15009                           
 15010 ;; *************** function _lcdInst *****************
 15011 ;; Defined at:
 15012 ;;		line 15 in file "lcd.c"
 15013 ;; Parameters:    Size  Location     Type
 15014 ;;  data            1    wreg     unsigned char 
 15015 ;; Auto vars:     Size  Location     Type
 15016 ;;  data            1    2[BANK0 ] unsigned char 
 15017 ;; Return value:  Size  Location     Type
 15018 ;;                  1    wreg      void 
 15019 ;; Registers used:
 15020 ;;		wreg, status,2, status,0, cstack
 15021 ;; Tracked objects:
 15022 ;;		On entry : 0/0
 15023 ;;		On exit  : 0/0
 15024 ;;		Unchanged: 0/0
 15025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15027 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15029 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15030 ;;Total ram usage:        1 bytes
 15031 ;; Hardware stack levels used:    1
 15032 ;; Hardware stack levels required when called:    8
 15033 ;; This function calls:
 15034 ;;		_lcdNibble
 15035 ;; This function is called by:
 15036 ;;		_UI
 15037 ;;		_change_state_to_menu_start
 15038 ;;		_change_state_to_menu_12
 15039 ;;		_change_state_to_menu_22
 15040 ;;		_initLCD
 15041 ;;		_printRTC
 15042 ;;		_Loading
 15043 ;;		_EEPROM_write
 15044 ;;		_Test
 15045 ;;		_algorithmTest
 15046 ;;		_sensorTest
 15047 ;;		_actuatorTest
 15048 ;;		_BothServos
 15049 ;;		_PortTestA5
 15050 ;;		_PusherTest
 15051 ;;		_SpeedTest
 15052 ;;		_ToggleTestA5
 15053 ;; This function uses a non-reentrant model
 15054 ;;
 15055                           
 15056                           	psect	text54
 15057  00484C                     __ptext54:
 15058                           	opt stack 0
 15059  00484C                     _lcdInst:
 15060                           	opt stack 20
 15061                           
 15062                           ; BSR set to: 0
 15063                           ;incstack = 0
 15064                           ;lcdInst@data stored from wreg
 15065  00484C  0100               	movlb	0	; () banked
 15066  00484E  6F82               	movwf	lcdInst@data& (0+255),b
 15067                           
 15068                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 15069  004850  948C               	bcf	3980,2,c	;volatile
 15070                           
 15071                           ;lcd.c: 17: lcdNibble(data);
 15072  004852  0100               	movlb	0	; () banked
 15073  004854  5182               	movf	lcdInst@data& (0+255),w,b
 15074  004856  EC07  F01F         	call	_lcdNibble
 15075  00485A  0012               	return		;funcret
 15076  00485C                     __end_of_lcdInst:
 15077                           	opt stack 0
 15078                           tblptru	equ	0xFF8
 15079                           tblptrh	equ	0xFF7
 15080                           tblptrl	equ	0xFF6
 15081                           tablat	equ	0xFF5
 15082                           prodh	equ	0xFF4
 15083                           prodl	equ	0xFF3
 15084                           intcon	equ	0xFF2
 15085                           intcon2	equ	0xFF1
 15086                           intcon3	equ	0xFF0
 15087                           indf0	equ	0xFEF
 15088                           postinc0	equ	0xFEE
 15089                           fsr0h	equ	0xFEA
 15090                           fsr0l	equ	0xFE9
 15091                           wreg	equ	0xFE8
 15092                           postdec1	equ	0xFE5
 15093                           fsr1l	equ	0xFE1
 15094                           indf2	equ	0xFDF
 15095                           postinc2	equ	0xFDE
 15096                           postdec2	equ	0xFDD
 15097                           fsr2h	equ	0xFDA
 15098                           fsr2l	equ	0xFD9
 15099                           status	equ	0xFD8
 15100                           
 15101 ;; *************** function _lcdNibble *****************
 15102 ;; Defined at:
 15103 ;;		line 25 in file "lcd.c"
 15104 ;; Parameters:    Size  Location     Type
 15105 ;;  data            1    wreg     unsigned char 
 15106 ;; Auto vars:     Size  Location     Type
 15107 ;;  data            1    1[BANK0 ] unsigned char 
 15108 ;;  temp            1    0[BANK0 ] unsigned char 
 15109 ;; Return value:  Size  Location     Type
 15110 ;;                  1    wreg      void 
 15111 ;; Registers used:
 15112 ;;		wreg, status,2, status,0
 15113 ;; Tracked objects:
 15114 ;;		On entry : 0/0
 15115 ;;		On exit  : 0/0
 15116 ;;		Unchanged: 0/0
 15117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15119 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15121 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15122 ;;Total ram usage:        2 bytes
 15123 ;; Hardware stack levels used:    1
 15124 ;; Hardware stack levels required when called:    7
 15125 ;; This function calls:
 15126 ;;		Nothing
 15127 ;; This function is called by:
 15128 ;;		_lcdInst
 15129 ;;		_putch
 15130 ;; This function uses a non-reentrant model
 15131 ;;
 15132                           
 15133                           	psect	text55
 15134  003E0E                     __ptext55:
 15135                           	opt stack 0
 15136  003E0E                     _lcdNibble:
 15137                           	opt stack 20
 15138                           
 15139                           ;incstack = 0
 15140                           ;lcdNibble@data stored from wreg
 15141  003E0E  0100               	movlb	0	; () banked
 15142  003E10  6F81               	movwf	lcdNibble@data& (0+255),b
 15143                           
 15144                           ;lcd.c: 27: char temp = data & 0xF0;
 15145  003E12  0100               	movlb	0	; () banked
 15146  003E14  5181               	movf	lcdNibble@data& (0+255),w,b
 15147  003E16  0BF0               	andlw	240
 15148  003E18  0100               	movlb	0	; () banked
 15149  003E1A  6F80               	movwf	lcdNibble@temp& (0+255),b
 15150                           
 15151                           ;lcd.c: 28: LATD = LATD & 0x0F;
 15152  003E1C  508C               	movf	3980,w,c	;volatile
 15153  003E1E  0B0F               	andlw	15
 15154  003E20  6E8C               	movwf	3980,c	;volatile
 15155                           
 15156                           ;lcd.c: 29: LATD = temp | LATD;
 15157  003E22  0100               	movlb	0	; () banked
 15158  003E24  5180               	movf	lcdNibble@temp& (0+255),w,b
 15159  003E26  108C               	iorwf	3980,w,c	;volatile
 15160  003E28  6E8C               	movwf	3980,c	;volatile
 15161                           
 15162                           ; BSR set to: 0
 15163                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 15164  003E2A  868C               	bsf	3980,3,c	;volatile
 15165                           
 15166                           ; BSR set to: 0
 15167                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15168  003E2C  0E42               	movlw	66
 15169  003E2E                     u8307:
 15170  003E2E  2EE8               	decfsz	wreg,f,c
 15171  003E30  D7FE               	bra	u8307
 15172  003E32  D000               	nop2	
 15173                           
 15174                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 15175  003E34  968C               	bcf	3980,3,c	;volatile
 15176                           
 15177                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15178  003E36  0E42               	movlw	66
 15179  003E38                     u8317:
 15180  003E38  2EE8               	decfsz	wreg,f,c
 15181  003E3A  D7FE               	bra	u8317
 15182  003E3C  D000               	nop2	
 15183                           
 15184                           ;lcd.c: 36: data = data << 4;
 15185  003E3E  0100               	movlb	0	; () banked
 15186  003E40  3981               	swapf	lcdNibble@data& (0+255),w,b
 15187  003E42  0BF0               	andlw	240
 15188  003E44  0100               	movlb	0	; () banked
 15189  003E46  6F81               	movwf	lcdNibble@data& (0+255),b
 15190                           
 15191                           ;lcd.c: 38: temp = data & 0xF0;
 15192  003E48  0100               	movlb	0	; () banked
 15193  003E4A  5181               	movf	lcdNibble@data& (0+255),w,b
 15194  003E4C  0BF0               	andlw	240
 15195  003E4E  0100               	movlb	0	; () banked
 15196  003E50  6F80               	movwf	lcdNibble@temp& (0+255),b
 15197                           
 15198                           ;lcd.c: 39: LATD = LATD & 0x0F;
 15199  003E52  508C               	movf	3980,w,c	;volatile
 15200  003E54  0B0F               	andlw	15
 15201  003E56  6E8C               	movwf	3980,c	;volatile
 15202                           
 15203                           ;lcd.c: 40: LATD = temp | LATD;
 15204  003E58  0100               	movlb	0	; () banked
 15205  003E5A  5180               	movf	lcdNibble@temp& (0+255),w,b
 15206  003E5C  108C               	iorwf	3980,w,c	;volatile
 15207  003E5E  6E8C               	movwf	3980,c	;volatile
 15208                           
 15209                           ; BSR set to: 0
 15210                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 15211  003E60  868C               	bsf	3980,3,c	;volatile
 15212                           
 15213                           ; BSR set to: 0
 15214                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15215  003E62  0E42               	movlw	66
 15216  003E64                     u8327:
 15217  003E64  2EE8               	decfsz	wreg,f,c
 15218  003E66  D7FE               	bra	u8327
 15219  003E68  D000               	nop2	
 15220                           
 15221                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 15222  003E6A  968C               	bcf	3980,3,c	;volatile
 15223                           
 15224                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15225  003E6C  0E42               	movlw	66
 15226  003E6E                     u8337:
 15227  003E6E  2EE8               	decfsz	wreg,f,c
 15228  003E70  D7FE               	bra	u8337
 15229  003E72  D000               	nop2	
 15230  003E74  0012               	return		;funcret
 15231  003E76                     __end_of_lcdNibble:
 15232                           	opt stack 0
 15233                           tblptru	equ	0xFF8
 15234                           tblptrh	equ	0xFF7
 15235                           tblptrl	equ	0xFF6
 15236                           tablat	equ	0xFF5
 15237                           prodh	equ	0xFF4
 15238                           prodl	equ	0xFF3
 15239                           intcon	equ	0xFF2
 15240                           intcon2	equ	0xFF1
 15241                           intcon3	equ	0xFF0
 15242                           indf0	equ	0xFEF
 15243                           postinc0	equ	0xFEE
 15244                           fsr0h	equ	0xFEA
 15245                           fsr0l	equ	0xFE9
 15246                           wreg	equ	0xFE8
 15247                           postdec1	equ	0xFE5
 15248                           fsr1l	equ	0xFE1
 15249                           indf2	equ	0xFDF
 15250                           postinc2	equ	0xFDE
 15251                           postdec2	equ	0xFDD
 15252                           fsr2h	equ	0xFDA
 15253                           fsr2l	equ	0xFD9
 15254                           status	equ	0xFD8
 15255                           
 15256 ;; *************** function _initServos *****************
 15257 ;; Defined at:
 15258 ;;		line 278 in file "sort.c"
 15259 ;; Parameters:    Size  Location     Type
 15260 ;;		None
 15261 ;; Auto vars:     Size  Location     Type
 15262 ;;		None
 15263 ;; Return value:  Size  Location     Type
 15264 ;;                  1    wreg      void 
 15265 ;; Registers used:
 15266 ;;		wreg, status,2, status,0, cstack
 15267 ;; Tracked objects:
 15268 ;;		On entry : 0/0
 15269 ;;		On exit  : 0/0
 15270 ;;		Unchanged: 0/0
 15271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15273 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15274 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15275 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15276 ;;Total ram usage:        1 bytes
 15277 ;; Hardware stack levels used:    1
 15278 ;; Hardware stack levels required when called:    8
 15279 ;; This function calls:
 15280 ;;		_updateServoPosition
 15281 ;; This function is called by:
 15282 ;;		_Loading
 15283 ;;		_BothServos
 15284 ;; This function uses a non-reentrant model
 15285 ;;
 15286                           
 15287                           	psect	text56
 15288  003FF0                     __ptext56:
 15289                           	opt stack 0
 15290  003FF0                     _initServos:
 15291                           	opt stack 20
 15292                           
 15293                           ;sort.c: 279: updateServoPosition(1200, 1);
 15294                           
 15295                           ;incstack = 0
 15296  003FF0  0E04               	movlw	4
 15297  003FF2  0100               	movlb	0	; () banked
 15298  003FF4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15299  003FF6  0EB0               	movlw	176
 15300  003FF8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15301  003FFA  0E00               	movlw	0
 15302  003FFC  0100               	movlb	0	; () banked
 15303  003FFE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15304  004000  0E01               	movlw	1
 15305  004002  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15306  004004  EC5E  F01E         	call	_updateServoPosition	;wreg free
 15307                           
 15308                           ;sort.c: 280: updateServoPosition(1150, 3);
 15309  004008  0E04               	movlw	4
 15310  00400A  0100               	movlb	0	; () banked
 15311  00400C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15312  00400E  0E7E               	movlw	126
 15313  004010  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15314  004012  0E00               	movlw	0
 15315  004014  0100               	movlb	0	; () banked
 15316  004016  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15317  004018  0E03               	movlw	3
 15318  00401A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15319  00401C  EC5E  F01E         	call	_updateServoPosition	;wreg free
 15320                           
 15321                           ;sort.c: 281: TMR1ON = 1;
 15322  004020  80CD               	bsf	4045,0,c	;volatile
 15323                           
 15324                           ;sort.c: 282: was_low_1 = 0;
 15325  004022  0E00               	movlw	0
 15326  004024  6E7A               	movwf	_was_low_1+1,c	;volatile
 15327  004026  0E00               	movlw	0
 15328  004028  6E79               	movwf	_was_low_1,c	;volatile
 15329                           
 15330                           ;sort.c: 283: _delay((unsigned long)((5)*(32000000/4000.0)));
 15331  00402A  0E34               	movlw	52
 15332  00402C  0100               	movlb	0	; () banked
 15333  00402E  6F88               	movwf	??_initServos& (0+255),b
 15334  004030  0EF1               	movlw	241
 15335  004032                     u8347:
 15336  004032  2EE8               	decfsz	wreg,f,c
 15337  004034  D7FE               	bra	u8347
 15338  004036  2F88               	decfsz	??_initServos& (0+255),f,b
 15339  004038  D7FC               	bra	u8347
 15340  00403A  D000               	nop2	
 15341                           
 15342                           ;sort.c: 284: TMR3ON = 1;
 15343  00403C  80B1               	bsf	4017,0,c	;volatile
 15344                           
 15345                           ;sort.c: 285: was_low_3 = 0;
 15346  00403E  0E00               	movlw	0
 15347  004040  6E7C               	movwf	_was_low_3+1,c	;volatile
 15348  004042  0E00               	movlw	0
 15349  004044  6E7B               	movwf	_was_low_3,c	;volatile
 15350                           
 15351                           ;sort.c: 287: LATCbits.LATC0 = 1;
 15352  004046  808B               	bsf	3979,0,c	;volatile
 15353  004048  0012               	return		;funcret
 15354  00404A                     __end_of_initServos:
 15355                           	opt stack 0
 15356                           tblptru	equ	0xFF8
 15357                           tblptrh	equ	0xFF7
 15358                           tblptrl	equ	0xFF6
 15359                           tablat	equ	0xFF5
 15360                           prodh	equ	0xFF4
 15361                           prodl	equ	0xFF3
 15362                           intcon	equ	0xFF2
 15363                           intcon2	equ	0xFF1
 15364                           intcon3	equ	0xFF0
 15365                           indf0	equ	0xFEF
 15366                           postinc0	equ	0xFEE
 15367                           fsr0h	equ	0xFEA
 15368                           fsr0l	equ	0xFE9
 15369                           wreg	equ	0xFE8
 15370                           postdec1	equ	0xFE5
 15371                           fsr1l	equ	0xFE1
 15372                           indf2	equ	0xFDF
 15373                           postinc2	equ	0xFDE
 15374                           postdec2	equ	0xFDD
 15375                           fsr2h	equ	0xFDA
 15376                           fsr2l	equ	0xFD9
 15377                           status	equ	0xFD8
 15378                           
 15379 ;; *************** function _updateServoPosition *****************
 15380 ;; Defined at:
 15381 ;;		line 339 in file "sort.c"
 15382 ;; Parameters:    Size  Location     Type
 15383 ;;  time_us         2    0[BANK0 ] int 
 15384 ;;  timer           2    2[BANK0 ] int 
 15385 ;; Auto vars:     Size  Location     Type
 15386 ;;  my_time         2    6[BANK0 ] unsigned int 
 15387 ;; Return value:  Size  Location     Type
 15388 ;;                  1    wreg      void 
 15389 ;; Registers used:
 15390 ;;		wreg, status,2, status,0
 15391 ;; Tracked objects:
 15392 ;;		On entry : 0/0
 15393 ;;		On exit  : 0/0
 15394 ;;		Unchanged: 0/0
 15395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15396 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15397 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15398 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15399 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15400 ;;Total ram usage:        8 bytes
 15401 ;; Hardware stack levels used:    1
 15402 ;; Hardware stack levels required when called:    7
 15403 ;; This function calls:
 15404 ;;		Nothing
 15405 ;; This function is called by:
 15406 ;;		_Distribution
 15407 ;;		_initServos
 15408 ;;		_actuatorTest
 15409 ;;		_BothServos
 15410 ;; This function uses a non-reentrant model
 15411 ;;
 15412                           
 15413                           	psect	text57
 15414  003CBC                     __ptext57:
 15415                           	opt stack 0
 15416  003CBC                     _updateServoPosition:
 15417                           	opt stack 20
 15418                           
 15419                           ;sort.c: 340: unsigned int my_time = 65535 - time_us;
 15420                           
 15421                           ;incstack = 0
 15422  003CBC  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 15423  003CC0  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 15424  003CC4  0100               	movlb	0	; () banked
 15425  003CC6  1F84               	comf	??_updateServoPosition& (0+255),f,b
 15426  003CC8  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 15427  003CCA  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 15428  003CCC  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 15429  003CCE  0EFF               	movlw	255
 15430  003CD0  0100               	movlb	0	; () banked
 15431  003CD2  2584               	addwf	??_updateServoPosition& (0+255),w,b
 15432  003CD4  0100               	movlb	0	; () banked
 15433  003CD6  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 15434  003CD8  0EFF               	movlw	255
 15435  003CDA  0100               	movlb	0	; () banked
 15436  003CDC  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 15437  003CDE  0100               	movlb	0	; () banked
 15438  003CE0  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 15439                           
 15440                           ;sort.c: 341: switch(timer){
 15441  003CE2  D015               	goto	l5648
 15442  003CE4                     l5646:
 15443                           
 15444                           ; BSR set to: 0
 15445                           ;sort.c: 343: servoTimes[0] = my_time >> 8;
 15446  003CE4  0100               	movlb	0	; () banked
 15447  003CE6  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15448  003CE8  0101               	movlb	1	; () banked
 15449  003CEA  6F1C               	movwf	_servoTimes& (0+255),b
 15450  003CEC  6B1D               	clrf	(_servoTimes+1)& (0+255),b
 15451                           
 15452                           ;sort.c: 344: servoTimes[1] = my_time & 0xFF;
 15453  003CEE  0100               	movlb	0	; () banked
 15454  003CF0  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15455  003CF2  0101               	movlb	1	; () banked
 15456  003CF4  6F1E               	movwf	(_servoTimes+2)& (0+255),b
 15457  003CF6  6B1F               	clrf	(_servoTimes+3)& (0+255),b
 15458  003CF8                     l798:
 15459                           
 15460                           ;sort.c: 346: servoTimes[2] = my_time >> 8;
 15461  003CF8  0100               	movlb	0	; () banked
 15462  003CFA  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15463  003CFC  0101               	movlb	1	; () banked
 15464  003CFE  6F20               	movwf	(_servoTimes+4)& (0+255),b
 15465  003D00  6B21               	clrf	(_servoTimes+5)& (0+255),b
 15466                           
 15467                           ;sort.c: 347: servoTimes[3] = my_time & 0xFF;
 15468  003D02  0100               	movlb	0	; () banked
 15469  003D04  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15470  003D06  0101               	movlb	1	; () banked
 15471  003D08  6F22               	movwf	(_servoTimes+6)& (0+255),b
 15472  003D0A  6B23               	clrf	(_servoTimes+7)& (0+255),b
 15473                           
 15474                           ;sort.c: 348: }
 15475  003D0C  0012               	return	
 15476  003D0E                     l5648:
 15477  003D0E  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 15478  003D12  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 15479                           
 15480                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15481                           ; Switch size 1, requested type "space"
 15482                           ; Number of cases is 1, Range of values is 0 to 0
 15483                           ; switch strategies available:
 15484                           ; Name         Instructions Cycles
 15485                           ; simple_byte            4     3 (average)
 15486                           ;	Chosen strategy is simple_byte
 15487  003D16  0100               	movlb	0	; () banked
 15488  003D18  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 15489  003D1A  0A00               	xorlw	0	; case 0
 15490  003D1C  A4D8               	btfss	status,2,c
 15491  003D1E  0012               	return	
 15492                           
 15493                           ; BSR set to: 0
 15494                           ; Switch size 1, requested type "space"
 15495                           ; Number of cases is 2, Range of values is 1 to 3
 15496                           ; switch strategies available:
 15497                           ; Name         Instructions Cycles
 15498                           ; simple_byte            7     4 (average)
 15499                           ;	Chosen strategy is simple_byte
 15500  003D20  0100               	movlb	0	; () banked
 15501  003D22  5184               	movf	??_updateServoPosition& (0+255),w,b
 15502  003D24  0A01               	xorlw	1	; case 1
 15503  003D26  B4D8               	btfsc	status,2,c
 15504  003D28  D7DD               	goto	l5646
 15505  003D2A  0A02               	xorlw	2	; case 3
 15506  003D2C  A4D8               	btfss	status,2,c
 15507  003D2E  0012               	return	
 15508  003D30  D7E3               	goto	l798
 15509  003D32                     __end_of_updateServoPosition:
 15510                           	opt stack 0
 15511                           tblptru	equ	0xFF8
 15512                           tblptrh	equ	0xFF7
 15513                           tblptrl	equ	0xFF6
 15514                           tablat	equ	0xFF5
 15515                           prodh	equ	0xFF4
 15516                           prodl	equ	0xFF3
 15517                           intcon	equ	0xFF2
 15518                           intcon2	equ	0xFF1
 15519                           intcon3	equ	0xFF0
 15520                           indf0	equ	0xFEF
 15521                           postinc0	equ	0xFEE
 15522                           fsr0h	equ	0xFEA
 15523                           fsr0l	equ	0xFE9
 15524                           wreg	equ	0xFE8
 15525                           postdec1	equ	0xFE5
 15526                           fsr1l	equ	0xFE1
 15527                           indf2	equ	0xFDF
 15528                           postinc2	equ	0xFDE
 15529                           postdec2	equ	0xFDD
 15530                           fsr2h	equ	0xFDA
 15531                           fsr2l	equ	0xFD9
 15532                           status	equ	0xFD8
 15533                           
 15534 ;; *************** function _handler *****************
 15535 ;; Defined at:
 15536 ;;		line 16 in file "interruptHandler.c"
 15537 ;; Parameters:    Size  Location     Type
 15538 ;;		None
 15539 ;; Auto vars:     Size  Location     Type
 15540 ;;		None
 15541 ;; Return value:  Size  Location     Type
 15542 ;;                  1    wreg      void 
 15543 ;; Registers used:
 15544 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15545 ;; Tracked objects:
 15546 ;;		On entry : 0/0
 15547 ;;		On exit  : 0/0
 15548 ;;		Unchanged: 0/0
 15549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15552 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15553 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15554 ;;Total ram usage:       16 bytes
 15555 ;; Hardware stack levels used:    1
 15556 ;; Hardware stack levels required when called:    6
 15557 ;; This function calls:
 15558 ;;		_printSortTimer
 15559 ;;		_updateMenu
 15560 ;; This function is called by:
 15561 ;;		Interrupt level 2
 15562 ;; This function uses a non-reentrant model
 15563 ;;
 15564                           
 15565                           	psect	intcode
 15566  000008                     __pintcode:
 15567                           	opt stack 0
 15568  000008                     _handler:
 15569                           	opt stack 18
 15570                           
 15571                           ;incstack = 0
 15572  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 15573  00000A  ED6C  F016         	call	int_func,f	;refresh shadow registers
 15574                           tblptru	equ	0xFF8
 15575                           tblptrh	equ	0xFF7
 15576                           tblptrl	equ	0xFF6
 15577                           tablat	equ	0xFF5
 15578                           prodh	equ	0xFF4
 15579                           prodl	equ	0xFF3
 15580                           intcon	equ	0xFF2
 15581                           intcon2	equ	0xFF1
 15582                           intcon3	equ	0xFF0
 15583                           indf0	equ	0xFEF
 15584                           postinc0	equ	0xFEE
 15585                           fsr0h	equ	0xFEA
 15586                           fsr0l	equ	0xFE9
 15587                           wreg	equ	0xFE8
 15588                           postdec1	equ	0xFE5
 15589                           fsr1l	equ	0xFE1
 15590                           indf2	equ	0xFDF
 15591                           postinc2	equ	0xFDE
 15592                           postdec2	equ	0xFDD
 15593                           fsr2h	equ	0xFDA
 15594                           fsr2l	equ	0xFD9
 15595                           status	equ	0xFD8
 15596                           
 15597                           	psect	intcode_body
 15598  002CD8                     __pintcode_body:
 15599                           	opt stack 18
 15600  002CD8                     int_func:
 15601                           	opt stack 18
 15602  002CD8  0006               	pop		; remove dummy address from shadow register refresh
 15603  002CDA  CFFA F04D          	movff	pclath,??_handler+2
 15604  002CDE  CFFB F04E          	movff	pclatu,??_handler+3
 15605  002CE2  CFE9 F04F          	movff	fsr0l,??_handler+4
 15606  002CE6  CFEA F050          	movff	fsr0h,??_handler+5
 15607  002CEA  CFE1 F051          	movff	fsr1l,??_handler+6
 15608  002CEE  CFE2 F052          	movff	fsr1h,??_handler+7
 15609  002CF2  CFD9 F053          	movff	fsr2l,??_handler+8
 15610  002CF6  CFDA F054          	movff	fsr2h,??_handler+9
 15611  002CFA  CFF3 F055          	movff	prodl,??_handler+10
 15612  002CFE  CFF4 F056          	movff	prodh,??_handler+11
 15613  002D02  CFF6 F057          	movff	tblptrl,??_handler+12
 15614  002D06  CFF7 F058          	movff	tblptrh,??_handler+13
 15615  002D0A  CFF8 F059          	movff	tblptru,??_handler+14
 15616  002D0E  CFF5 F05A          	movff	tablat,??_handler+15
 15617                           
 15618                           ;interruptHandler.c: 18: if(INT1IF){
 15619  002D12  A0F0               	btfss	intcon3,0,c	;volatile
 15620  002D14  D020               	goto	i2l8188
 15621                           
 15622                           ;interruptHandler.c: 19: INT1IF = 0;
 15623  002D16  90F0               	bcf	intcon3,0,c	;volatile
 15624                           
 15625                           ;interruptHandler.c: 20: if(machine_state == UI_state) {
 15626  002D18  0100               	movlb	0	; () banked
 15627  002D1A  51FC               	movf	_machine_state& (0+255),w,b
 15628  002D1C  A4D8               	btfss	status,2,c
 15629  002D1E  D01B               	goto	i2l8188
 15630                           
 15631                           ; BSR set to: 0
 15632                           ;interruptHandler.c: 21: input = keys[(PORTB & 0xF0) >> 4];
 15633  002D20  3881               	swapf	3969,w,c	;volatile
 15634  002D22  0B0F               	andlw	15
 15635  002D24  0B0F               	andlw	15
 15636  002D26  6E4B               	movwf	??_handler& (0+255),c
 15637  002D28  6A4C               	clrf	(??_handler+1)& (0+255),c
 15638  002D2A  0E13               	movlw	low _keys
 15639  002D2C  244B               	addwf	??_handler,w,c
 15640  002D2E  6EF6               	movwf	tblptrl,c
 15641  002D30  0EFB               	movlw	high _keys
 15642  002D32  204C               	addwfc	??_handler+1,w,c
 15643  002D34  6EF7               	movwf	tblptrh,c
 15644  002D36                     	if	1	;There are 3 active tblptr bytes
 15645  002D36  6AF8               	clrf	tblptru,c
 15646  002D38  0E00               	movlw	low (__mediumconst shr (0+16))
 15647  002D3A  22F8               	addwfc	tblptru,f,c
 15648  002D3C                     	endif
 15649  002D3C  0008               	tblrd		*
 15650  002D3E  CFF5 F07D          	movff	tablat,_input	;volatile
 15651                           
 15652                           ; BSR set to: 0
 15653                           ;interruptHandler.c: 23: if(input == '*'){
 15654  002D42  0E2A               	movlw	42
 15655  002D44  187D               	xorwf	_input,w,c	;volatile
 15656  002D46  A4D8               	btfss	status,2,c
 15657  002D48  D004               	goto	i2l8186
 15658                           
 15659                           ; BSR set to: 0
 15660                           ;interruptHandler.c: 24: machine_state = Testing_state;
 15661  002D4A  0E03               	movlw	3
 15662  002D4C  0100               	movlb	0	; () banked
 15663  002D4E  6FFC               	movwf	_machine_state& (0+255),b
 15664                           
 15665                           ;interruptHandler.c: 25: }
 15666  002D50  D002               	goto	i2l8188
 15667  002D52                     i2l8186:
 15668                           
 15669                           ; BSR set to: 0
 15670                           ;interruptHandler.c: 26: else{
 15671                           ;interruptHandler.c: 27: updateMenu();
 15672  002D52  EC35  F011         	call	_updateMenu	;wreg free
 15673  002D56                     i2l8188:
 15674                           
 15675                           ;interruptHandler.c: 28: }
 15676                           ;interruptHandler.c: 29: }
 15677                           ;interruptHandler.c: 30: }
 15678                           ;interruptHandler.c: 33: if(TMR0IF){
 15679  002D56  A4F2               	btfss	intcon,2,c	;volatile
 15680  002D58  D00C               	goto	i2l8202
 15681                           
 15682                           ;interruptHandler.c: 34: TMR0IF = 0;
 15683  002D5A  94F2               	bcf	intcon,2,c	;volatile
 15684                           
 15685                           ;interruptHandler.c: 35: if(machine_state == Sorting_state){
 15686  002D5C  0100               	movlb	0	; () banked
 15687  002D5E  05FC               	decf	_machine_state& (0+255),w,b
 15688  002D60  A4D8               	btfss	status,2,c
 15689  002D62  D007               	goto	i2l8202
 15690                           
 15691                           ; BSR set to: 0
 15692                           ;interruptHandler.c: 36: printSortTimer();
 15693  002D64  ECB0  F013         	call	_printSortTimer	;wreg free
 15694                           
 15695                           ;interruptHandler.c: 38: TMR0H = 0b10000101;
 15696  002D68  0E85               	movlw	133
 15697  002D6A  6ED7               	movwf	4055,c	;volatile
 15698                           
 15699                           ;interruptHandler.c: 39: TMR0L = 0b11101110;
 15700  002D6C  0EEE               	movlw	238
 15701  002D6E  6ED6               	movwf	4054,c	;volatile
 15702                           
 15703                           ;interruptHandler.c: 40: TMR0ON = 1;
 15704  002D70  8ED5               	bsf	4053,7,c	;volatile
 15705  002D72                     i2l8202:
 15706                           
 15707                           ;interruptHandler.c: 41: }
 15708                           ;interruptHandler.c: 42: }
 15709                           ;interruptHandler.c: 45: if(TMR1IF){
 15710  002D72  A09E               	btfss	3998,0,c	;volatile
 15711  002D74  D024               	goto	i2l8226
 15712                           
 15713                           ;interruptHandler.c: 46: TMR1IF = 0;
 15714  002D76  909E               	bcf	3998,0,c	;volatile
 15715                           
 15716                           ;interruptHandler.c: 47: TMR1ON = 0;
 15717  002D78  90CD               	bcf	4045,0,c	;volatile
 15718                           
 15719                           ;interruptHandler.c: 48: if(machine_state == Sorting_state){
 15720  002D7A  0100               	movlb	0	; () banked
 15721  002D7C  05FC               	decf	_machine_state& (0+255),w,b
 15722  002D7E  A4D8               	btfss	status,2,c
 15723  002D80  D01E               	goto	i2l8226
 15724                           
 15725                           ; BSR set to: 0
 15726                           ;interruptHandler.c: 49: if(was_low_1){
 15727  002D82  5079               	movf	_was_low_1,w,c	;volatile
 15728  002D84  107A               	iorwf	_was_low_1+1,w,c	;volatile
 15729  002D86  B4D8               	btfsc	status,2,c
 15730  002D88  D00A               	goto	i2l863
 15731                           
 15732                           ; BSR set to: 0
 15733                           ;interruptHandler.c: 50: LATCbits.LATC1 = 1;
 15734  002D8A  828B               	bsf	3979,1,c	;volatile
 15735                           
 15736                           ; BSR set to: 0
 15737                           ;interruptHandler.c: 51: was_low_1 = 0;
 15738  002D8C  0E00               	movlw	0
 15739  002D8E  6E7A               	movwf	_was_low_1+1,c	;volatile
 15740  002D90  0E00               	movlw	0
 15741  002D92  6E79               	movwf	_was_low_1,c	;volatile
 15742                           
 15743                           ; BSR set to: 0
 15744                           ;interruptHandler.c: 52: TMR1H = servoTimes[0];
 15745  002D94  C11C  FFCF         	movff	_servoTimes,4047	;volatile
 15746                           
 15747                           ; BSR set to: 0
 15748                           ;interruptHandler.c: 53: TMR1L = servoTimes[1];
 15749  002D98  C11E  FFCE         	movff	_servoTimes+2,4046	;volatile
 15750                           
 15751                           ;interruptHandler.c: 54: }
 15752  002D9C  D00F               	goto	i2l8224
 15753  002D9E                     i2l863:
 15754                           
 15755                           ; BSR set to: 0
 15756                           ;interruptHandler.c: 55: else{
 15757                           ;interruptHandler.c: 56: LATCbits.LATC1 = 0;
 15758  002D9E  928B               	bcf	3979,1,c	;volatile
 15759                           
 15760                           ; BSR set to: 0
 15761                           ;interruptHandler.c: 57: was_low_1 = 1;
 15762  002DA0  0E00               	movlw	0
 15763  002DA2  6E7A               	movwf	_was_low_1+1,c	;volatile
 15764  002DA4  0E01               	movlw	1
 15765  002DA6  6E79               	movwf	_was_low_1,c	;volatile
 15766                           
 15767                           ; BSR set to: 0
 15768                           ;interruptHandler.c: 58: TMR1H = 20000 - servoTimes[0];
 15769  002DA8  0101               	movlb	1	; () banked
 15770  002DAA  511C               	movf	_servoTimes& (0+255),w,b
 15771  002DAC  0800               	sublw	0
 15772  002DAE  0F20               	addlw	32
 15773  002DB0  6ECF               	movwf	4047,c	;volatile
 15774                           
 15775                           ; BSR set to: 1
 15776                           ;interruptHandler.c: 59: TMR1L = 20000 - servoTimes[1];
 15777  002DB2  0101               	movlb	1	; () banked
 15778  002DB4  511E               	movf	(_servoTimes+2)& (0+255),w,b
 15779  002DB6  0800               	sublw	0
 15780  002DB8  0F20               	addlw	32
 15781  002DBA  6ECE               	movwf	4046,c	;volatile
 15782  002DBC                     i2l8224:
 15783                           
 15784                           ;interruptHandler.c: 60: }
 15785                           ;interruptHandler.c: 61: TMR1ON = 1;
 15786  002DBC  80CD               	bsf	4045,0,c	;volatile
 15787  002DBE                     i2l8226:
 15788                           
 15789                           ;interruptHandler.c: 62: }
 15790                           ;interruptHandler.c: 63: }
 15791                           ;interruptHandler.c: 65: if(TMR3IF){
 15792  002DBE  A2A1               	btfss	4001,1,c	;volatile
 15793  002DC0  D024               	goto	i2l869
 15794                           
 15795                           ;interruptHandler.c: 66: TMR3IF = 0;
 15796  002DC2  92A1               	bcf	4001,1,c	;volatile
 15797                           
 15798                           ;interruptHandler.c: 67: TMR3ON = 0;
 15799  002DC4  90B1               	bcf	4017,0,c	;volatile
 15800                           
 15801                           ;interruptHandler.c: 68: if(machine_state == Sorting_state){
 15802  002DC6  0100               	movlb	0	; () banked
 15803  002DC8  05FC               	decf	_machine_state& (0+255),w,b
 15804  002DCA  A4D8               	btfss	status,2,c
 15805  002DCC  D01E               	goto	i2l869
 15806                           
 15807                           ; BSR set to: 0
 15808                           ;interruptHandler.c: 69: if(was_low_3){
 15809  002DCE  507B               	movf	_was_low_3,w,c	;volatile
 15810  002DD0  107C               	iorwf	_was_low_3+1,w,c	;volatile
 15811  002DD2  B4D8               	btfsc	status,2,c
 15812  002DD4  D00A               	goto	i2l867
 15813                           
 15814                           ; BSR set to: 0
 15815                           ;interruptHandler.c: 70: LATCbits.LATC2 = 1;
 15816  002DD6  848B               	bsf	3979,2,c	;volatile
 15817                           
 15818                           ; BSR set to: 0
 15819                           ;interruptHandler.c: 71: was_low_3 = 0;
 15820  002DD8  0E00               	movlw	0
 15821  002DDA  6E7C               	movwf	_was_low_3+1,c	;volatile
 15822  002DDC  0E00               	movlw	0
 15823  002DDE  6E7B               	movwf	_was_low_3,c	;volatile
 15824                           
 15825                           ; BSR set to: 0
 15826                           ;interruptHandler.c: 72: TMR3H = servoTimes[2];
 15827  002DE0  C120  FFB3         	movff	_servoTimes+4,4019	;volatile
 15828                           
 15829                           ; BSR set to: 0
 15830                           ;interruptHandler.c: 73: TMR3L = servoTimes[3];
 15831  002DE4  C122  FFB2         	movff	_servoTimes+6,4018	;volatile
 15832                           
 15833                           ;interruptHandler.c: 74: }
 15834  002DE8  D00F               	goto	i2l8248
 15835  002DEA                     i2l867:
 15836                           
 15837                           ; BSR set to: 0
 15838                           ;interruptHandler.c: 75: else{
 15839                           ;interruptHandler.c: 76: LATCbits.LATC2 = 0;
 15840  002DEA  948B               	bcf	3979,2,c	;volatile
 15841                           
 15842                           ; BSR set to: 0
 15843                           ;interruptHandler.c: 77: was_low_3 = 1;
 15844  002DEC  0E00               	movlw	0
 15845  002DEE  6E7C               	movwf	_was_low_3+1,c	;volatile
 15846  002DF0  0E01               	movlw	1
 15847  002DF2  6E7B               	movwf	_was_low_3,c	;volatile
 15848                           
 15849                           ; BSR set to: 0
 15850                           ;interruptHandler.c: 78: TMR3H = 20000 - servoTimes[2];
 15851  002DF4  0101               	movlb	1	; () banked
 15852  002DF6  5120               	movf	(_servoTimes+4)& (0+255),w,b
 15853  002DF8  0800               	sublw	0
 15854  002DFA  0F20               	addlw	32
 15855  002DFC  6EB3               	movwf	4019,c	;volatile
 15856                           
 15857                           ; BSR set to: 1
 15858                           ;interruptHandler.c: 79: TMR3L = 20000 - servoTimes[3];
 15859  002DFE  0101               	movlb	1	; () banked
 15860  002E00  5122               	movf	(_servoTimes+6)& (0+255),w,b
 15861  002E02  0800               	sublw	0
 15862  002E04  0F20               	addlw	32
 15863  002E06  6EB2               	movwf	4018,c	;volatile
 15864  002E08                     i2l8248:
 15865                           
 15866                           ;interruptHandler.c: 80: }
 15867                           ;interruptHandler.c: 81: TMR3ON = 1;
 15868  002E08  80B1               	bsf	4017,0,c	;volatile
 15869  002E0A                     i2l869:
 15870  002E0A  C05A  FFF5         	movff	??_handler+15,tablat
 15871  002E0E  C059  FFF8         	movff	??_handler+14,tblptru
 15872  002E12  C058  FFF7         	movff	??_handler+13,tblptrh
 15873  002E16  C057  FFF6         	movff	??_handler+12,tblptrl
 15874  002E1A  C056  FFF4         	movff	??_handler+11,prodh
 15875  002E1E  C055  FFF3         	movff	??_handler+10,prodl
 15876  002E22  C054  FFDA         	movff	??_handler+9,fsr2h
 15877  002E26  C053  FFD9         	movff	??_handler+8,fsr2l
 15878  002E2A  C052  FFE2         	movff	??_handler+7,fsr1h
 15879  002E2E  C051  FFE1         	movff	??_handler+6,fsr1l
 15880  002E32  C050  FFEA         	movff	??_handler+5,fsr0h
 15881  002E36  C04F  FFE9         	movff	??_handler+4,fsr0l
 15882  002E3A  C04E  FFFB         	movff	??_handler+3,pclatu
 15883  002E3E  C04D  FFFA         	movff	??_handler+2,pclath
 15884  002E42  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 15885  002E44  0011               	retfie		f
 15886  002E46                     __end_of_handler:
 15887                           	opt stack 0
 15888                           pclatu	equ	0xFFB
 15889                           pclath	equ	0xFFA
 15890                           tblptru	equ	0xFF8
 15891                           tblptrh	equ	0xFF7
 15892                           tblptrl	equ	0xFF6
 15893                           tablat	equ	0xFF5
 15894                           prodh	equ	0xFF4
 15895                           prodl	equ	0xFF3
 15896                           intcon	equ	0xFF2
 15897                           intcon2	equ	0xFF1
 15898                           intcon3	equ	0xFF0
 15899                           indf0	equ	0xFEF
 15900                           postinc0	equ	0xFEE
 15901                           fsr0h	equ	0xFEA
 15902                           fsr0l	equ	0xFE9
 15903                           wreg	equ	0xFE8
 15904                           postdec1	equ	0xFE5
 15905                           fsr1h	equ	0xFE2
 15906                           fsr1l	equ	0xFE1
 15907                           indf2	equ	0xFDF
 15908                           postinc2	equ	0xFDE
 15909                           postdec2	equ	0xFDD
 15910                           fsr2h	equ	0xFDA
 15911                           fsr2l	equ	0xFD9
 15912                           status	equ	0xFD8
 15913                           
 15914 ;; *************** function _updateMenu *****************
 15915 ;; Defined at:
 15916 ;;		line 213 in file "UI.c"
 15917 ;; Parameters:    Size  Location     Type
 15918 ;;		None
 15919 ;; Auto vars:     Size  Location     Type
 15920 ;;		None
 15921 ;; Return value:  Size  Location     Type
 15922 ;;                  1    wreg      void 
 15923 ;; Registers used:
 15924 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15925 ;; Tracked objects:
 15926 ;;		On entry : 0/0
 15927 ;;		On exit  : 0/0
 15928 ;;		Unchanged: 0/0
 15929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15932 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15933 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15934 ;;Total ram usage:        2 bytes
 15935 ;; Hardware stack levels used:    1
 15936 ;; Hardware stack levels required when called:    5
 15937 ;; This function calls:
 15938 ;;		_change_state_to_logs_11
 15939 ;;		_change_state_to_logs_12
 15940 ;;		_change_state_to_logs_22
 15941 ;;		_change_state_to_logs_23
 15942 ;;		_change_state_to_logs_33
 15943 ;;		_change_state_to_logs_34
 15944 ;;		_change_state_to_menu_11
 15945 ;;		_change_state_to_menu_23
 15946 ;;		_dispLogs
 15947 ;;		_inputHandler
 15948 ;;		i2_change_state_to_menu_12
 15949 ;;		i2_change_state_to_menu_22
 15950 ;;		i2_change_state_to_menu_start
 15951 ;; This function is called by:
 15952 ;;		_handler
 15953 ;; This function uses a non-reentrant model
 15954 ;;
 15955                           
 15956                           	psect	text59
 15957  00226A                     __ptext59:
 15958                           	opt stack 0
 15959  00226A                     _updateMenu:
 15960                           	opt stack 18
 15961                           
 15962                           ;UI.c: 214: up = 0; down = 0; enter = 0; back = 0;
 15963                           
 15964                           ;incstack = 0
 15965  00226A  0E00               	movlw	0
 15966  00226C  6E78               	movwf	_up+1,c
 15967  00226E  0E00               	movlw	0
 15968  002270  6E77               	movwf	_up,c
 15969  002272  0E00               	movlw	0
 15970  002274  6E6A               	movwf	_down+1,c
 15971  002276  0E00               	movlw	0
 15972  002278  6E69               	movwf	_down,c
 15973  00227A  0E00               	movlw	0
 15974  00227C  6E6C               	movwf	_enter+1,c
 15975  00227E  0E00               	movlw	0
 15976  002280  6E6B               	movwf	_enter,c
 15977  002282  0E00               	movlw	0
 15978  002284  6E5C               	movwf	_back+1,c
 15979  002286  0E00               	movlw	0
 15980  002288  6E5B               	movwf	_back,c
 15981                           
 15982                           ;UI.c: 215: (INTCONbits.GIE = 0);
 15983  00228A  9EF2               	bcf	intcon,7,c	;volatile
 15984                           
 15985                           ;UI.c: 217: if (inputHandler()
 15986                           ;UI.c: 220: ){
 15987  00228C  ECA9  F014         	call	_inputHandler	;wreg free
 15988  002290  502A               	movf	?_inputHandler,w,c
 15989  002292  102B               	iorwf	?_inputHandler+1,w,c
 15990  002294  A4D8               	btfss	status,2,c
 15991  002296  D112               	goto	i2l7924
 15992  002298  D146               	goto	i2l257
 15993  00229A                     i2l7776:
 15994                           
 15995                           ;UI.c: 224: change_state_to_menu_11();
 15996  00229A  EC42  F022         	call	_change_state_to_menu_11	;wreg free
 15997                           
 15998                           ;UI.c: 225: break;
 15999  00229E  D143               	goto	i2l257
 16000  0022A0                     i2l7778:
 16001                           
 16002                           ;UI.c: 228: if(up){
 16003  0022A0  5077               	movf	_up,w,c
 16004  0022A2  1078               	iorwf	_up+1,w,c
 16005  0022A4  B4D8               	btfsc	status,2,c
 16006  0022A6  D003               	goto	i2l7782
 16007                           
 16008                           ;UI.c: 229: change_state_to_menu_23();
 16009  0022A8  EC2A  F022         	call	_change_state_to_menu_23	;wreg free
 16010                           
 16011                           ;UI.c: 230: }
 16012  0022AC  D13C               	goto	i2l257
 16013  0022AE                     i2l7782:
 16014                           
 16015                           ;UI.c: 231: else if(down){
 16016  0022AE  5069               	movf	_down,w,c
 16017  0022B0  106A               	iorwf	_down+1,w,c
 16018  0022B2  B4D8               	btfsc	status,2,c
 16019  0022B4  D003               	goto	i2l7786
 16020                           
 16021                           ;UI.c: 232: change_state_to_menu_12();
 16022  0022B6  EC12  F022         	call	i2_change_state_to_menu_12	;wreg free
 16023                           
 16024                           ;UI.c: 233: }
 16025  0022BA  D135               	goto	i2l257
 16026  0022BC                     i2l7786:
 16027                           
 16028                           ;UI.c: 234: else if(enter){
 16029  0022BC  506B               	movf	_enter,w,c
 16030  0022BE  106C               	iorwf	_enter+1,w,c
 16031  0022C0  B4D8               	btfsc	status,2,c
 16032  0022C2  D131               	goto	i2l257
 16033                           
 16034                           ;UI.c: 235: change_state_to_menu_start();
 16035  0022C4  EC6C  F023         	call	i2_change_state_to_menu_start	;wreg free
 16036                           
 16037                           ;UI.c: 236: }
 16038                           ;UI.c: 237: break;
 16039  0022C8  D12E               	goto	i2l257
 16040  0022CA                     i2l7790:
 16041                           
 16042                           ;UI.c: 240: if(up){
 16043  0022CA  5077               	movf	_up,w,c
 16044  0022CC  1078               	iorwf	_up+1,w,c
 16045  0022CE  B4D8               	btfsc	status,2,c
 16046  0022D0  D003               	goto	i2l7794
 16047                           
 16048                           ;UI.c: 241: change_state_to_menu_11();
 16049  0022D2  EC42  F022         	call	_change_state_to_menu_11	;wreg free
 16050                           
 16051                           ;UI.c: 242: }
 16052  0022D6  D127               	goto	i2l257
 16053  0022D8                     i2l7794:
 16054                           
 16055                           ;UI.c: 243: else if(down){
 16056  0022D8  5069               	movf	_down,w,c
 16057  0022DA  106A               	iorwf	_down+1,w,c
 16058  0022DC  B4D8               	btfsc	status,2,c
 16059  0022DE  D011               	goto	i2l7810
 16060                           
 16061                           ;UI.c: 244: change_state_to_menu_23();
 16062  0022E0  EC2A  F022         	call	_change_state_to_menu_23	;wreg free
 16063                           
 16064                           ;UI.c: 245: }
 16065  0022E4  D120               	goto	i2l257
 16066  0022E6                     i2l7802:
 16067                           
 16068                           ;UI.c: 252: if(up){
 16069  0022E6  5077               	movf	_up,w,c
 16070  0022E8  1078               	iorwf	_up+1,w,c
 16071  0022EA  B4D8               	btfsc	status,2,c
 16072  0022EC  D003               	goto	i2l7806
 16073                           
 16074                           ;UI.c: 253: change_state_to_menu_11();
 16075  0022EE  EC42  F022         	call	_change_state_to_menu_11	;wreg free
 16076                           
 16077                           ;UI.c: 254: }
 16078  0022F2  D119               	goto	i2l257
 16079  0022F4                     i2l7806:
 16080                           
 16081                           ;UI.c: 255: else if(down){
 16082  0022F4  5069               	movf	_down,w,c
 16083  0022F6  106A               	iorwf	_down+1,w,c
 16084  0022F8  B4D8               	btfsc	status,2,c
 16085  0022FA  D003               	goto	i2l7810
 16086                           
 16087                           ;UI.c: 256: change_state_to_menu_23();
 16088  0022FC  EC2A  F022         	call	_change_state_to_menu_23	;wreg free
 16089                           
 16090                           ;UI.c: 257: }
 16091  002300  D112               	goto	i2l257
 16092  002302                     i2l7810:
 16093                           
 16094                           ;UI.c: 258: else if(enter){
 16095  002302  506B               	movf	_enter,w,c
 16096  002304  106C               	iorwf	_enter+1,w,c
 16097  002306  B4D8               	btfsc	status,2,c
 16098  002308  D10E               	goto	i2l257
 16099                           
 16100                           ;UI.c: 259: machine_state = Sorting_state;
 16101  00230A  0E01               	movlw	1
 16102  00230C  0100               	movlb	0	; () banked
 16103  00230E  6FFC               	movwf	_machine_state& (0+255),b
 16104                           
 16105                           ; BSR set to: 0
 16106                           ;UI.c: 260: }
 16107                           ;UI.c: 261: break;
 16108                           
 16109                           ; BSR set to: 0
 16110                           
 16111                           ; BSR set to: 0
 16112  002310  D10A               	goto	i2l257
 16113  002312                     i2l7814:
 16114                           
 16115                           ;UI.c: 264: if(up){
 16116  002312  5077               	movf	_up,w,c
 16117  002314  1078               	iorwf	_up+1,w,c
 16118  002316  B4D8               	btfsc	status,2,c
 16119  002318  D003               	goto	i2l7818
 16120                           
 16121                           ;UI.c: 265: change_state_to_menu_22();
 16122  00231A  ECFA  F021         	call	i2_change_state_to_menu_22	;wreg free
 16123                           
 16124                           ;UI.c: 266: }
 16125  00231E  D103               	goto	i2l257
 16126  002320                     i2l7818:
 16127                           
 16128                           ;UI.c: 267: else if(down){
 16129  002320  5069               	movf	_down,w,c
 16130  002322  106A               	iorwf	_down+1,w,c
 16131  002324  B4D8               	btfsc	status,2,c
 16132  002326  D003               	goto	i2l7822
 16133                           
 16134                           ;UI.c: 268: change_state_to_menu_11();
 16135  002328  EC42  F022         	call	_change_state_to_menu_11	;wreg free
 16136                           
 16137                           ;UI.c: 269: }
 16138  00232C  D0FC               	goto	i2l257
 16139  00232E                     i2l7822:
 16140                           
 16141                           ;UI.c: 270: else if(enter){
 16142  00232E  506B               	movf	_enter,w,c
 16143  002330  106C               	iorwf	_enter+1,w,c
 16144  002332  B4D8               	btfsc	status,2,c
 16145  002334  D0F8               	goto	i2l257
 16146                           
 16147                           ;UI.c: 271: change_state_to_logs_11();
 16148  002336  ECBA  F022         	call	_change_state_to_logs_11	;wreg free
 16149                           
 16150                           ;UI.c: 272: }
 16151                           ;UI.c: 273: break;
 16152  00233A  D0F5               	goto	i2l257
 16153  00233C                     i2l7826:
 16154                           
 16155                           ;UI.c: 276: if(up){
 16156  00233C  5077               	movf	_up,w,c
 16157  00233E  1078               	iorwf	_up+1,w,c
 16158  002340  B4D8               	btfsc	status,2,c
 16159  002342  D003               	goto	i2l7830
 16160                           
 16161                           ;UI.c: 277: change_state_to_logs_34();
 16162  002344  EC5A  F022         	call	_change_state_to_logs_34	;wreg free
 16163                           
 16164                           ;UI.c: 278: }
 16165  002348  D0EE               	goto	i2l257
 16166  00234A                     i2l7830:
 16167                           
 16168                           ;UI.c: 279: else if(down){
 16169  00234A  5069               	movf	_down,w,c
 16170  00234C  106A               	iorwf	_down+1,w,c
 16171  00234E  B4D8               	btfsc	status,2,c
 16172  002350  D003               	goto	i2l7834
 16173                           
 16174                           ;UI.c: 280: change_state_to_logs_12();
 16175  002352  ECA2  F022         	call	_change_state_to_logs_12	;wreg free
 16176                           
 16177                           ;UI.c: 281: }
 16178  002356  D0E7               	goto	i2l257
 16179  002358                     i2l7834:
 16180                           
 16181                           ;UI.c: 282: else if(enter){
 16182  002358  506B               	movf	_enter,w,c
 16183  00235A  106C               	iorwf	_enter+1,w,c
 16184  00235C  B4D8               	btfsc	status,2,c
 16185  00235E  D007               	goto	i2l7838
 16186                           
 16187                           ;UI.c: 283: dispLogs(1);
 16188  002360  0E00               	movlw	0
 16189  002362  6E13               	movwf	dispLogs@myLog+1,c
 16190  002364  0E01               	movlw	1
 16191  002366  6E12               	movwf	dispLogs@myLog,c
 16192  002368  ECA6  F023         	call	_dispLogs	;wreg free
 16193                           
 16194                           ;UI.c: 284: }
 16195  00236C  D0DC               	goto	i2l257
 16196  00236E                     i2l7838:
 16197                           
 16198                           ;UI.c: 285: else if(back){
 16199  00236E  505B               	movf	_back,w,c
 16200  002370  105C               	iorwf	_back+1,w,c
 16201  002372  B4D8               	btfsc	status,2,c
 16202  002374  D0D8               	goto	i2l257
 16203                           
 16204                           ;UI.c: 286: change_state_to_menu_23();
 16205  002376  EC2A  F022         	call	_change_state_to_menu_23	;wreg free
 16206                           
 16207                           ;UI.c: 287: }
 16208                           ;UI.c: 288: break;
 16209  00237A  D0D5               	goto	i2l257
 16210  00237C                     i2l7842:
 16211                           
 16212                           ;UI.c: 291: if(up){
 16213  00237C  5077               	movf	_up,w,c
 16214  00237E  1078               	iorwf	_up+1,w,c
 16215  002380  B4D8               	btfsc	status,2,c
 16216  002382  D003               	goto	i2l7846
 16217                           
 16218                           ;UI.c: 292: change_state_to_logs_11();
 16219  002384  ECBA  F022         	call	_change_state_to_logs_11	;wreg free
 16220                           
 16221                           ;UI.c: 293: }
 16222  002388  D0CE               	goto	i2l257
 16223  00238A                     i2l7846:
 16224                           
 16225                           ;UI.c: 294: else if(down){
 16226  00238A  5069               	movf	_down,w,c
 16227  00238C  106A               	iorwf	_down+1,w,c
 16228  00238E  B4D8               	btfsc	status,2,c
 16229  002390  D003               	goto	i2l7850
 16230                           
 16231                           ;UI.c: 295: change_state_to_logs_23();
 16232  002392  EC00  F023         	call	_change_state_to_logs_23	;wreg free
 16233                           
 16234                           ;UI.c: 296: }
 16235  002396  D0C7               	goto	i2l257
 16236  002398                     i2l7850:
 16237                           
 16238                           ;UI.c: 297: else if(enter){
 16239  002398  506B               	movf	_enter,w,c
 16240  00239A  106C               	iorwf	_enter+1,w,c
 16241  00239C  B4D8               	btfsc	status,2,c
 16242  00239E  D007               	goto	i2l7854
 16243                           
 16244                           ;UI.c: 298: dispLogs(2);
 16245  0023A0  0E00               	movlw	0
 16246  0023A2  6E13               	movwf	dispLogs@myLog+1,c
 16247  0023A4  0E02               	movlw	2
 16248  0023A6  6E12               	movwf	dispLogs@myLog,c
 16249  0023A8  ECA6  F023         	call	_dispLogs	;wreg free
 16250                           
 16251                           ;UI.c: 299: }
 16252  0023AC  D0BC               	goto	i2l257
 16253  0023AE                     i2l7854:
 16254                           
 16255                           ;UI.c: 300: else if(back){
 16256  0023AE  505B               	movf	_back,w,c
 16257  0023B0  105C               	iorwf	_back+1,w,c
 16258  0023B2  B4D8               	btfsc	status,2,c
 16259  0023B4  D0B8               	goto	i2l257
 16260                           
 16261                           ;UI.c: 301: change_state_to_menu_23();
 16262  0023B6  EC2A  F022         	call	_change_state_to_menu_23	;wreg free
 16263                           
 16264                           ;UI.c: 302: }
 16265                           ;UI.c: 303: break;
 16266  0023BA  D0B5               	goto	i2l257
 16267  0023BC                     i2l7858:
 16268                           
 16269                           ;UI.c: 306: if(up){
 16270  0023BC  5077               	movf	_up,w,c
 16271  0023BE  1078               	iorwf	_up+1,w,c
 16272  0023C0  B4D8               	btfsc	status,2,c
 16273  0023C2  D003               	goto	i2l7862
 16274                           
 16275                           ;UI.c: 307: change_state_to_logs_11();
 16276  0023C4  ECBA  F022         	call	_change_state_to_logs_11	;wreg free
 16277                           
 16278                           ;UI.c: 308: }
 16279  0023C8  D0AE               	goto	i2l257
 16280  0023CA                     i2l7862:
 16281                           
 16282                           ;UI.c: 309: else if(down){
 16283  0023CA  5069               	movf	_down,w,c
 16284  0023CC  106A               	iorwf	_down+1,w,c
 16285  0023CE  B4D8               	btfsc	status,2,c
 16286  0023D0  D003               	goto	i2l7866
 16287                           
 16288                           ;UI.c: 310: change_state_to_logs_23();
 16289  0023D2  EC00  F023         	call	_change_state_to_logs_23	;wreg free
 16290                           
 16291                           ;UI.c: 311: }
 16292  0023D6  D0A7               	goto	i2l257
 16293  0023D8                     i2l7866:
 16294                           
 16295                           ;UI.c: 312: else if(enter){
 16296  0023D8  506B               	movf	_enter,w,c
 16297  0023DA  106C               	iorwf	_enter+1,w,c
 16298  0023DC  B4D8               	btfsc	status,2,c
 16299  0023DE  D007               	goto	i2l7870
 16300                           
 16301                           ;UI.c: 313: dispLogs(2);
 16302  0023E0  0E00               	movlw	0
 16303  0023E2  6E13               	movwf	dispLogs@myLog+1,c
 16304  0023E4  0E02               	movlw	2
 16305  0023E6  6E12               	movwf	dispLogs@myLog,c
 16306  0023E8  ECA6  F023         	call	_dispLogs	;wreg free
 16307                           
 16308                           ;UI.c: 314: }
 16309  0023EC  D09C               	goto	i2l257
 16310  0023EE                     i2l7870:
 16311                           
 16312                           ;UI.c: 315: else if(back){
 16313  0023EE  505B               	movf	_back,w,c
 16314  0023F0  105C               	iorwf	_back+1,w,c
 16315  0023F2  B4D8               	btfsc	status,2,c
 16316  0023F4  D098               	goto	i2l257
 16317                           
 16318                           ;UI.c: 316: change_state_to_menu_23();
 16319  0023F6  EC2A  F022         	call	_change_state_to_menu_23	;wreg free
 16320                           
 16321                           ;UI.c: 317: }
 16322                           ;UI.c: 318: break;
 16323  0023FA  D095               	goto	i2l257
 16324  0023FC                     i2l7874:
 16325                           
 16326                           ;UI.c: 321: if(up){
 16327  0023FC  5077               	movf	_up,w,c
 16328  0023FE  1078               	iorwf	_up+1,w,c
 16329  002400  B4D8               	btfsc	status,2,c
 16330  002402  D003               	goto	i2l7878
 16331                           
 16332                           ;UI.c: 322: change_state_to_logs_22();
 16333  002404  EC8A  F022         	call	_change_state_to_logs_22	;wreg free
 16334                           
 16335                           ;UI.c: 323: }
 16336  002408  D08E               	goto	i2l257
 16337  00240A                     i2l7878:
 16338                           
 16339                           ;UI.c: 324: else if(down){
 16340  00240A  5069               	movf	_down,w,c
 16341  00240C  106A               	iorwf	_down+1,w,c
 16342  00240E  B4D8               	btfsc	status,2,c
 16343  002410  D003               	goto	i2l7882
 16344                           
 16345                           ;UI.c: 325: change_state_to_logs_34();
 16346  002412  EC5A  F022         	call	_change_state_to_logs_34	;wreg free
 16347                           
 16348                           ;UI.c: 326: }
 16349  002416  D087               	goto	i2l257
 16350  002418                     i2l7882:
 16351                           
 16352                           ;UI.c: 327: else if(enter){
 16353  002418  506B               	movf	_enter,w,c
 16354  00241A  106C               	iorwf	_enter+1,w,c
 16355  00241C  B4D8               	btfsc	status,2,c
 16356  00241E  D007               	goto	i2l7886
 16357                           
 16358                           ;UI.c: 328: dispLogs(3);
 16359  002420  0E00               	movlw	0
 16360  002422  6E13               	movwf	dispLogs@myLog+1,c
 16361  002424  0E03               	movlw	3
 16362  002426  6E12               	movwf	dispLogs@myLog,c
 16363  002428  ECA6  F023         	call	_dispLogs	;wreg free
 16364                           
 16365                           ;UI.c: 329: }
 16366  00242C  D07C               	goto	i2l257
 16367  00242E                     i2l7886:
 16368                           
 16369                           ;UI.c: 330: else if(back){
 16370  00242E  505B               	movf	_back,w,c
 16371  002430  105C               	iorwf	_back+1,w,c
 16372  002432  B4D8               	btfsc	status,2,c
 16373  002434  D078               	goto	i2l257
 16374                           
 16375                           ;UI.c: 331: change_state_to_menu_23();
 16376  002436  EC2A  F022         	call	_change_state_to_menu_23	;wreg free
 16377                           
 16378                           ;UI.c: 332: }
 16379                           ;UI.c: 333: break;
 16380  00243A  D075               	goto	i2l257
 16381  00243C                     i2l7890:
 16382                           
 16383                           ;UI.c: 336: if(up){
 16384  00243C  5077               	movf	_up,w,c
 16385  00243E  1078               	iorwf	_up+1,w,c
 16386  002440  B4D8               	btfsc	status,2,c
 16387  002442  D003               	goto	i2l7894
 16388                           
 16389                           ;UI.c: 337: change_state_to_logs_22();
 16390  002444  EC8A  F022         	call	_change_state_to_logs_22	;wreg free
 16391                           
 16392                           ;UI.c: 338: }
 16393  002448  D06E               	goto	i2l257
 16394  00244A                     i2l7894:
 16395                           
 16396                           ;UI.c: 339: else if(down){
 16397  00244A  5069               	movf	_down,w,c
 16398  00244C  106A               	iorwf	_down+1,w,c
 16399  00244E  B4D8               	btfsc	status,2,c
 16400  002450  D003               	goto	i2l7898
 16401                           
 16402                           ;UI.c: 340: change_state_to_logs_34();
 16403  002452  EC5A  F022         	call	_change_state_to_logs_34	;wreg free
 16404                           
 16405                           ;UI.c: 341: }
 16406  002456  D067               	goto	i2l257
 16407  002458                     i2l7898:
 16408                           
 16409                           ;UI.c: 342: else if(enter){
 16410  002458  506B               	movf	_enter,w,c
 16411  00245A  106C               	iorwf	_enter+1,w,c
 16412  00245C  B4D8               	btfsc	status,2,c
 16413  00245E  D007               	goto	i2l7902
 16414                           
 16415                           ;UI.c: 343: dispLogs(3);
 16416  002460  0E00               	movlw	0
 16417  002462  6E13               	movwf	dispLogs@myLog+1,c
 16418  002464  0E03               	movlw	3
 16419  002466  6E12               	movwf	dispLogs@myLog,c
 16420  002468  ECA6  F023         	call	_dispLogs	;wreg free
 16421                           
 16422                           ;UI.c: 344: }
 16423  00246C  D05C               	goto	i2l257
 16424  00246E                     i2l7902:
 16425                           
 16426                           ;UI.c: 345: else if(back){
 16427  00246E  505B               	movf	_back,w,c
 16428  002470  105C               	iorwf	_back+1,w,c
 16429  002472  B4D8               	btfsc	status,2,c
 16430  002474  D058               	goto	i2l257
 16431                           
 16432                           ;UI.c: 346: change_state_to_menu_23();
 16433  002476  EC2A  F022         	call	_change_state_to_menu_23	;wreg free
 16434                           
 16435                           ;UI.c: 347: }
 16436                           ;UI.c: 348: break;
 16437  00247A  D055               	goto	i2l257
 16438  00247C                     i2l7906:
 16439                           
 16440                           ;UI.c: 351: if(up){
 16441  00247C  5077               	movf	_up,w,c
 16442  00247E  1078               	iorwf	_up+1,w,c
 16443  002480  B4D8               	btfsc	status,2,c
 16444  002482  D003               	goto	i2l7910
 16445                           
 16446                           ;UI.c: 352: change_state_to_logs_33();
 16447  002484  EC72  F022         	call	_change_state_to_logs_33	;wreg free
 16448                           
 16449                           ;UI.c: 353: }
 16450  002488  D04E               	goto	i2l257
 16451  00248A                     i2l7910:
 16452                           
 16453                           ;UI.c: 354: else if(down){
 16454  00248A  5069               	movf	_down,w,c
 16455  00248C  106A               	iorwf	_down+1,w,c
 16456  00248E  B4D8               	btfsc	status,2,c
 16457  002490  D003               	goto	i2l7914
 16458                           
 16459                           ;UI.c: 355: change_state_to_logs_11();
 16460  002492  ECBA  F022         	call	_change_state_to_logs_11	;wreg free
 16461                           
 16462                           ;UI.c: 356: }
 16463  002496  D047               	goto	i2l257
 16464  002498                     i2l7914:
 16465                           
 16466                           ;UI.c: 357: else if(enter){
 16467  002498  506B               	movf	_enter,w,c
 16468  00249A  106C               	iorwf	_enter+1,w,c
 16469  00249C  B4D8               	btfsc	status,2,c
 16470  00249E  D007               	goto	i2l7918
 16471                           
 16472                           ;UI.c: 358: dispLogs(4);
 16473  0024A0  0E00               	movlw	0
 16474  0024A2  6E13               	movwf	dispLogs@myLog+1,c
 16475  0024A4  0E04               	movlw	4
 16476  0024A6  6E12               	movwf	dispLogs@myLog,c
 16477  0024A8  ECA6  F023         	call	_dispLogs	;wreg free
 16478                           
 16479                           ;UI.c: 359: }
 16480  0024AC  D03C               	goto	i2l257
 16481  0024AE                     i2l7918:
 16482                           
 16483                           ;UI.c: 360: else if(back){
 16484  0024AE  505B               	movf	_back,w,c
 16485  0024B0  105C               	iorwf	_back+1,w,c
 16486  0024B2  B4D8               	btfsc	status,2,c
 16487  0024B4  D038               	goto	i2l257
 16488                           
 16489                           ;UI.c: 361: change_state_to_menu_23();
 16490  0024B6  EC2A  F022         	call	_change_state_to_menu_23	;wreg free
 16491                           
 16492                           ;UI.c: 367: }
 16493                           
 16494                           ;UI.c: 366: break;
 16495                           
 16496                           ;UI.c: 365: default:
 16497                           
 16498                           ;UI.c: 362: }
 16499                           ;UI.c: 363: break;
 16500  0024BA  D035               	goto	i2l257
 16501  0024BC                     i2l7924:
 16502  0024BC  C0E0  F043         	movff	_cur_state,??_updateMenu
 16503  0024C0  C0E1  F044         	movff	_cur_state+1,??_updateMenu+1
 16504                           
 16505                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 16506                           ; Switch size 1, requested type "space"
 16507                           ; Number of cases is 3, Range of values is 0 to 4
 16508                           ; switch strategies available:
 16509                           ; Name         Instructions Cycles
 16510                           ; simple_byte           10     6 (average)
 16511                           ;	Chosen strategy is simple_byte
 16512  0024C4  5044               	movf	??_updateMenu+1,w,c
 16513  0024C6  0A00               	xorlw	0	; case 0
 16514  0024C8  B4D8               	btfsc	status,2,c
 16515  0024CA  D007               	goto	i2l8536
 16516  0024CC  0A03               	xorlw	3	; case 3
 16517  0024CE  B4D8               	btfsc	status,2,c
 16518  0024D0  D015               	goto	i2l8538
 16519  0024D2  0A07               	xorlw	7	; case 4
 16520  0024D4  B4D8               	btfsc	status,2,c
 16521  0024D6  D020               	goto	i2l8540
 16522  0024D8  D026               	goto	i2l257
 16523  0024DA                     i2l8536:
 16524                           
 16525                           ; Switch size 1, requested type "space"
 16526                           ; Number of cases is 5, Range of values is 0 to 23
 16527                           ; switch strategies available:
 16528                           ; Name         Instructions Cycles
 16529                           ; simple_byte           16     9 (average)
 16530                           ;	Chosen strategy is simple_byte
 16531  0024DA  5043               	movf	??_updateMenu,w,c
 16532  0024DC  0A00               	xorlw	0	; case 0
 16533  0024DE  B4D8               	btfsc	status,2,c
 16534  0024E0  D6DC               	goto	i2l7776
 16535  0024E2  0A0B               	xorlw	11	; case 11
 16536  0024E4  B4D8               	btfsc	status,2,c
 16537  0024E6  D6DC               	goto	i2l7778
 16538  0024E8  0A07               	xorlw	7	; case 12
 16539  0024EA  B4D8               	btfsc	status,2,c
 16540  0024EC  D6EE               	goto	i2l7790
 16541  0024EE  0A1A               	xorlw	26	; case 22
 16542  0024F0  B4D8               	btfsc	status,2,c
 16543  0024F2  D6F9               	goto	i2l7802
 16544  0024F4  0A01               	xorlw	1	; case 23
 16545  0024F6  B4D8               	btfsc	status,2,c
 16546  0024F8  D70C               	goto	i2l7814
 16547  0024FA  D015               	goto	i2l257
 16548  0024FC                     i2l8538:
 16549                           
 16550                           ; Switch size 1, requested type "space"
 16551                           ; Number of cases is 4, Range of values is 243 to 255
 16552                           ; switch strategies available:
 16553                           ; Name         Instructions Cycles
 16554                           ; simple_byte           13     7 (average)
 16555                           ;	Chosen strategy is simple_byte
 16556  0024FC  5043               	movf	??_updateMenu,w,c
 16557  0024FE  0AF3               	xorlw	243	; case 243
 16558  002500  B4D8               	btfsc	status,2,c
 16559  002502  D71C               	goto	i2l7826
 16560  002504  0A07               	xorlw	7	; case 244
 16561  002506  B4D8               	btfsc	status,2,c
 16562  002508  D739               	goto	i2l7842
 16563  00250A  0A0A               	xorlw	10	; case 254
 16564  00250C  B4D8               	btfsc	status,2,c
 16565  00250E  D756               	goto	i2l7858
 16566  002510  0A01               	xorlw	1	; case 255
 16567  002512  B4D8               	btfsc	status,2,c
 16568  002514  D773               	goto	i2l7874
 16569  002516  D007               	goto	i2l257
 16570  002518                     i2l8540:
 16571                           
 16572                           ; Switch size 1, requested type "space"
 16573                           ; Number of cases is 2, Range of values is 9 to 10
 16574                           ; switch strategies available:
 16575                           ; Name         Instructions Cycles
 16576                           ; simple_byte            7     4 (average)
 16577                           ;	Chosen strategy is simple_byte
 16578  002518  5043               	movf	??_updateMenu,w,c
 16579  00251A  0A09               	xorlw	9	; case 9
 16580  00251C  B4D8               	btfsc	status,2,c
 16581  00251E  D78E               	goto	i2l7890
 16582  002520  0A03               	xorlw	3	; case 10
 16583  002522  B4D8               	btfsc	status,2,c
 16584  002524  D7AB               	goto	i2l7906
 16585  002526                     i2l257:
 16586                           
 16587                           ;UI.c: 368: }
 16588                           ;UI.c: 369: (INTCONbits.GIE = 1);
 16589  002526  8EF2               	bsf	intcon,7,c	;volatile
 16590  002528  0012               	return		;funcret
 16591  00252A                     __end_of_updateMenu:
 16592                           	opt stack 0
 16593                           pclatu	equ	0xFFB
 16594                           pclath	equ	0xFFA
 16595                           tblptru	equ	0xFF8
 16596                           tblptrh	equ	0xFF7
 16597                           tblptrl	equ	0xFF6
 16598                           tablat	equ	0xFF5
 16599                           prodh	equ	0xFF4
 16600                           prodl	equ	0xFF3
 16601                           intcon	equ	0xFF2
 16602                           intcon2	equ	0xFF1
 16603                           intcon3	equ	0xFF0
 16604                           indf0	equ	0xFEF
 16605                           postinc0	equ	0xFEE
 16606                           fsr0h	equ	0xFEA
 16607                           fsr0l	equ	0xFE9
 16608                           wreg	equ	0xFE8
 16609                           postdec1	equ	0xFE5
 16610                           fsr1h	equ	0xFE2
 16611                           fsr1l	equ	0xFE1
 16612                           indf2	equ	0xFDF
 16613                           postinc2	equ	0xFDE
 16614                           postdec2	equ	0xFDD
 16615                           fsr2h	equ	0xFDA
 16616                           fsr2l	equ	0xFD9
 16617                           status	equ	0xFD8
 16618                           
 16619 ;; *************** function i2_change_state_to_menu_start *****************
 16620 ;; Defined at:
 16621 ;;		line 474 in file "UI.c"
 16622 ;; Parameters:    Size  Location     Type
 16623 ;;		None
 16624 ;; Auto vars:     Size  Location     Type
 16625 ;;		None
 16626 ;; Return value:  Size  Location     Type
 16627 ;;                  1    wreg      void 
 16628 ;; Registers used:
 16629 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16630 ;; Tracked objects:
 16631 ;;		On entry : 0/0
 16632 ;;		On exit  : 0/0
 16633 ;;		Unchanged: 0/0
 16634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16636 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16638 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16639 ;;Total ram usage:        0 bytes
 16640 ;; Hardware stack levels used:    1
 16641 ;; Hardware stack levels required when called:    4
 16642 ;; This function calls:
 16643 ;;		i2_lcdInst
 16644 ;;		i2_printRTC
 16645 ;;		i2_printf
 16646 ;; This function is called by:
 16647 ;;		_updateMenu
 16648 ;; This function uses a non-reentrant model
 16649 ;;
 16650                           
 16651                           	psect	text60
 16652  0046D8                     __ptext60:
 16653                           	opt stack 0
 16654  0046D8                     i2_change_state_to_menu_start:
 16655                           	opt stack 18
 16656                           
 16657                           ;UI.c: 475: cur_state = 0;
 16658                           
 16659                           ;incstack = 0
 16660  0046D8  0E00               	movlw	0
 16661  0046DA  0100               	movlb	0	; () banked
 16662  0046DC  6FE1               	movwf	(_cur_state+1)& (0+255),b
 16663  0046DE  0E00               	movlw	0
 16664  0046E0  6FE0               	movwf	_cur_state& (0+255),b
 16665                           
 16666                           ; BSR set to: 0
 16667                           ;UI.c: 477: lcdInst(0b10000000);;
 16668  0046E2  0E80               	movlw	128
 16669  0046E4  EC34  F024         	call	i2_lcdInst
 16670                           
 16671                           ;UI.c: 478: printRTC();
 16672  0046E8  EC95  F012         	call	i2_printRTC	;wreg free
 16673                           
 16674                           ;UI.c: 479: lcdInst(0b11000000);;
 16675  0046EC  0EC0               	movlw	192
 16676  0046EE  EC34  F024         	call	i2_lcdInst
 16677                           
 16678                           ;UI.c: 480: printf("PUSH TO CONTINUE");
 16679  0046F2  0EF7               	movlw	low STR_30
 16680  0046F4  6E0D               	movwf	i2printf@f,c
 16681  0046F6  0EFD               	movlw	high STR_30
 16682  0046F8  6E0E               	movwf	i2printf@f+1,c
 16683  0046FA  EC9A  F00C         	call	i2_printf	;wreg free
 16684  0046FE  0012               	return		;funcret
 16685  004700                     __end_ofi2_change_state_to_menu_start:
 16686                           	opt stack 0
 16687                           pclatu	equ	0xFFB
 16688                           pclath	equ	0xFFA
 16689                           tblptru	equ	0xFF8
 16690                           tblptrh	equ	0xFF7
 16691                           tblptrl	equ	0xFF6
 16692                           tablat	equ	0xFF5
 16693                           prodh	equ	0xFF4
 16694                           prodl	equ	0xFF3
 16695                           intcon	equ	0xFF2
 16696                           intcon2	equ	0xFF1
 16697                           intcon3	equ	0xFF0
 16698                           indf0	equ	0xFEF
 16699                           postinc0	equ	0xFEE
 16700                           fsr0h	equ	0xFEA
 16701                           fsr0l	equ	0xFE9
 16702                           wreg	equ	0xFE8
 16703                           postdec1	equ	0xFE5
 16704                           fsr1h	equ	0xFE2
 16705                           fsr1l	equ	0xFE1
 16706                           indf2	equ	0xFDF
 16707                           postinc2	equ	0xFDE
 16708                           postdec2	equ	0xFDD
 16709                           fsr2h	equ	0xFDA
 16710                           fsr2l	equ	0xFD9
 16711                           status	equ	0xFD8
 16712                           
 16713 ;; *************** function i2_printRTC *****************
 16714 ;; Defined at:
 16715 ;;		line 63 in file "RTC.c"
 16716 ;; Parameters:    Size  Location     Type
 16717 ;;		None
 16718 ;; Auto vars:     Size  Location     Type
 16719 ;;  printRTC       14   44[COMRAM] int [7]
 16720 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 16721 ;;  printRTC        2   64[COMRAM] int 
 16722 ;;  printRTC        2   58[COMRAM] int 
 16723 ;; Return value:  Size  Location     Type
 16724 ;;                  1    wreg      void 
 16725 ;; Registers used:
 16726 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16727 ;; Tracked objects:
 16728 ;;		On entry : 0/0
 16729 ;;		On exit  : 0/0
 16730 ;;		Unchanged: 0/0
 16731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16733 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16734 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16735 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16736 ;;Total ram usage:       25 bytes
 16737 ;; Hardware stack levels used:    1
 16738 ;; Hardware stack levels required when called:    3
 16739 ;; This function calls:
 16740 ;;		i2_getRTC
 16741 ;;		i2_lcdInst
 16742 ;;		i2_printf
 16743 ;;		i2_strcpy
 16744 ;; This function is called by:
 16745 ;;		i2_change_state_to_menu_start
 16746 ;; This function uses a non-reentrant model
 16747 ;;
 16748                           
 16749                           	psect	text61
 16750  00252A                     __ptext61:
 16751                           	opt stack 0
 16752  00252A                     i2_printRTC:
 16753                           	opt stack 18
 16754                           
 16755                           ;RTC.c: 64: getRTC();
 16756                           
 16757                           ;incstack = 0
 16758  00252A  EC99  F01E         	call	i2_getRTC	;wreg free
 16759                           
 16760                           ;RTC.c: 65: char month[] = "MMM";
 16761  00252E  C133  F03D         	movff	printRTC@F3216,i2printRTC@month
 16762  002532  C134  F03E         	movff	printRTC@F3216+1,i2printRTC@month+1
 16763  002536  C135  F03F         	movff	printRTC@F3216+2,i2printRTC@month+2
 16764  00253A  C136  F040         	movff	printRTC@F3216+3,i2printRTC@month+3
 16765                           
 16766                           ;RTC.c: 66: int INT_time[7];
 16767                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 16768  00253E  0E00               	movlw	0
 16769  002540  6E42               	movwf	i2printRTC@i+1,c
 16770  002542  0E00               	movlw	0
 16771  002544  6E41               	movwf	i2printRTC@i,c
 16772  002546  BE42               	btfsc	i2printRTC@i+1,7,c
 16773  002548  D006               	goto	i2l6178
 16774  00254A  5042               	movf	i2printRTC@i+1,w,c
 16775  00254C  E135               	bnz	i2l602
 16776  00254E  0E07               	movlw	7
 16777  002550  5C41               	subwf	i2printRTC@i,w,c
 16778  002552  B0D8               	btfsc	status,0,c
 16779  002554  D031               	goto	i2l602
 16780  002556                     i2l6178:
 16781                           
 16782                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 16783  002556  0E24               	movlw	low _time
 16784  002558  2441               	addwf	i2printRTC@i,w,c
 16785  00255A  6ED9               	movwf	fsr2l,c
 16786  00255C  0E01               	movlw	high _time
 16787  00255E  2042               	addwfc	i2printRTC@i+1,w,c
 16788  002560  6EDA               	movwf	fsr2h,c
 16789  002562  50DF               	movf	indf2,w,c
 16790  002564  6E2A               	movwf	??i2_printRTC& (0+255),c
 16791  002566  3A2A               	swapf	??i2_printRTC,f,c
 16792  002568  0E0F               	movlw	15
 16793  00256A  162A               	andwf	??i2_printRTC,f,c
 16794  00256C  0E0F               	movlw	15
 16795  00256E  162A               	andwf	??i2_printRTC,f,c
 16796  002570  502A               	movf	??i2_printRTC,w,c
 16797  002572  0D0A               	mullw	10
 16798  002574  0E24               	movlw	low _time
 16799  002576  2441               	addwf	i2printRTC@i,w,c
 16800  002578  6ED9               	movwf	fsr2l,c
 16801  00257A  0E01               	movlw	high _time
 16802  00257C  2042               	addwfc	i2printRTC@i+1,w,c
 16803  00257E  6EDA               	movwf	fsr2h,c
 16804  002580  50DF               	movf	indf2,w,c
 16805  002582  0B0F               	andlw	15
 16806  002584  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 16807  002586  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 16808  002588  50F3               	movf	prodl,w,c
 16809  00258A  262B               	addwf	??i2_printRTC+1,f,c
 16810  00258C  50F4               	movf	prodh,w,c
 16811  00258E  222C               	addwfc	??i2_printRTC+2,f,c
 16812  002590  90D8               	bcf	status,0,c
 16813  002592  3441               	rlcf	i2printRTC@i,w,c
 16814  002594  6ED9               	movwf	fsr2l,c
 16815  002596  3442               	rlcf	i2printRTC@i+1,w,c
 16816  002598  6EDA               	movwf	fsr2h,c
 16817  00259A  0E2D               	movlw	low i2printRTC@INT_time
 16818  00259C  26D9               	addwf	fsr2l,f,c
 16819  00259E  0E00               	movlw	high i2printRTC@INT_time
 16820  0025A0  22DA               	addwfc	fsr2h,f,c
 16821  0025A2  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 16822  0025A6  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 16823  0025AA  4A41               	infsnz	i2printRTC@i,f,c
 16824  0025AC  2A42               	incf	i2printRTC@i+1,f,c
 16825  0025AE  BE42               	btfsc	i2printRTC@i+1,7,c
 16826  0025B0  D7D2               	goto	i2l6178
 16827  0025B2  5042               	movf	i2printRTC@i+1,w,c
 16828  0025B4  E101               	bnz	i2u469_40
 16829  0025B6  D7CB               	goto	L10
 16830  0025B8                     i2u469_40:
 16831  0025B8                     i2l602:
 16832                           
 16833                           ;RTC.c: 69: }
 16834                           ;RTC.c: 70: int RTC_month = INT_time[5];
 16835  0025B8  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 16836  0025BC  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 16837                           
 16838                           ;RTC.c: 71: switch(RTC_month){
 16839  0025C0  D084               	goto	i2l6210
 16840  0025C2                     i2l6184:
 16841                           
 16842                           ;RTC.c: 73: strcpy(month, "JAN");
 16843  0025C2  0E3D               	movlw	low i2printRTC@month
 16844  0025C4  6E01               	movwf	i2strcpy@to,c
 16845  0025C6  0E00               	movlw	high i2printRTC@month
 16846  0025C8  6E02               	movwf	i2strcpy@to+1,c
 16847  0025CA  0EDB               	movlw	low STR_8
 16848  0025CC  6E03               	movwf	i2strcpy@from,c
 16849  0025CE  0EFF               	movlw	high STR_8
 16850  0025D0  6E04               	movwf	i2strcpy@from+1,c
 16851  0025D2  ECE1  F021         	call	i2_strcpy	;wreg free
 16852                           
 16853                           ;RTC.c: 74: break;
 16854  0025D6  D0A6               	goto	i2l6212
 16855  0025D8                     i2l6186:
 16856                           
 16857                           ;RTC.c: 76: strcpy(month, "FEB");
 16858  0025D8  0E3D               	movlw	low i2printRTC@month
 16859  0025DA  6E01               	movwf	i2strcpy@to,c
 16860  0025DC  0E00               	movlw	high i2printRTC@month
 16861  0025DE  6E02               	movwf	i2strcpy@to+1,c
 16862  0025E0  0ECB               	movlw	low STR_9
 16863  0025E2  6E03               	movwf	i2strcpy@from,c
 16864  0025E4  0EFF               	movlw	high STR_9
 16865  0025E6  6E04               	movwf	i2strcpy@from+1,c
 16866  0025E8  ECE1  F021         	call	i2_strcpy	;wreg free
 16867                           
 16868                           ;RTC.c: 77: break;
 16869  0025EC  D09B               	goto	i2l6212
 16870  0025EE                     i2l6188:
 16871                           
 16872                           ;RTC.c: 79: strcpy(month, "MAR");
 16873  0025EE  0E3D               	movlw	low i2printRTC@month
 16874  0025F0  6E01               	movwf	i2strcpy@to,c
 16875  0025F2  0E00               	movlw	high i2printRTC@month
 16876  0025F4  6E02               	movwf	i2strcpy@to+1,c
 16877  0025F6  0EE7               	movlw	low STR_10
 16878  0025F8  6E03               	movwf	i2strcpy@from,c
 16879  0025FA  0EFF               	movlw	high STR_10
 16880  0025FC  6E04               	movwf	i2strcpy@from+1,c
 16881  0025FE  ECE1  F021         	call	i2_strcpy	;wreg free
 16882                           
 16883                           ;RTC.c: 80: break;
 16884  002602  D090               	goto	i2l6212
 16885  002604                     i2l6190:
 16886                           
 16887                           ;RTC.c: 82: strcpy(month, "APR");
 16888  002604  0E3D               	movlw	low i2printRTC@month
 16889  002606  6E01               	movwf	i2strcpy@to,c
 16890  002608  0E00               	movlw	high i2printRTC@month
 16891  00260A  6E02               	movwf	i2strcpy@to+1,c
 16892  00260C  0EEB               	movlw	low STR_11
 16893  00260E  6E03               	movwf	i2strcpy@from,c
 16894  002610  0EFF               	movlw	high STR_11
 16895  002612  6E04               	movwf	i2strcpy@from+1,c
 16896  002614  ECE1  F021         	call	i2_strcpy	;wreg free
 16897                           
 16898                           ;RTC.c: 83: break;
 16899  002618  D085               	goto	i2l6212
 16900  00261A                     i2l6192:
 16901                           
 16902                           ;RTC.c: 85: strcpy(month, "MAY");
 16903  00261A  0E3D               	movlw	low i2printRTC@month
 16904  00261C  6E01               	movwf	i2strcpy@to,c
 16905  00261E  0E00               	movlw	high i2printRTC@month
 16906  002620  6E02               	movwf	i2strcpy@to+1,c
 16907  002622  0EFB               	movlw	low STR_12
 16908  002624  6E03               	movwf	i2strcpy@from,c
 16909  002626  0EFF               	movlw	high STR_12
 16910  002628  6E04               	movwf	i2strcpy@from+1,c
 16911  00262A  ECE1  F021         	call	i2_strcpy	;wreg free
 16912                           
 16913                           ;RTC.c: 86: break;
 16914  00262E  D07A               	goto	i2l6212
 16915  002630                     i2l6194:
 16916                           
 16917                           ;RTC.c: 88: strcpy(month, "JUN");
 16918  002630  0E3D               	movlw	low i2printRTC@month
 16919  002632  6E01               	movwf	i2strcpy@to,c
 16920  002634  0E00               	movlw	high i2printRTC@month
 16921  002636  6E02               	movwf	i2strcpy@to+1,c
 16922  002638  0EDF               	movlw	low STR_13
 16923  00263A  6E03               	movwf	i2strcpy@from,c
 16924  00263C  0EFF               	movlw	high STR_13
 16925  00263E  6E04               	movwf	i2strcpy@from+1,c
 16926  002640  ECE1  F021         	call	i2_strcpy	;wreg free
 16927                           
 16928                           ;RTC.c: 89: break;
 16929  002644  D06F               	goto	i2l6212
 16930  002646                     i2l6196:
 16931                           
 16932                           ;RTC.c: 91: strcpy(month, "JUL");
 16933  002646  0E3D               	movlw	low i2printRTC@month
 16934  002648  6E01               	movwf	i2strcpy@to,c
 16935  00264A  0E00               	movlw	high i2printRTC@month
 16936  00264C  6E02               	movwf	i2strcpy@to+1,c
 16937  00264E  0ED7               	movlw	low STR_14
 16938  002650  6E03               	movwf	i2strcpy@from,c
 16939  002652  0EFF               	movlw	high STR_14
 16940  002654  6E04               	movwf	i2strcpy@from+1,c
 16941  002656  ECE1  F021         	call	i2_strcpy	;wreg free
 16942                           
 16943                           ;RTC.c: 92: break;
 16944  00265A  D064               	goto	i2l6212
 16945  00265C                     i2l6198:
 16946                           
 16947                           ;RTC.c: 94: strcpy(month, "AUG");
 16948  00265C  0E3D               	movlw	low i2printRTC@month
 16949  00265E  6E01               	movwf	i2strcpy@to,c
 16950  002660  0E00               	movlw	high i2printRTC@month
 16951  002662  6E02               	movwf	i2strcpy@to+1,c
 16952  002664  0ED3               	movlw	low STR_15
 16953  002666  6E03               	movwf	i2strcpy@from,c
 16954  002668  0EFF               	movlw	high STR_15
 16955  00266A  6E04               	movwf	i2strcpy@from+1,c
 16956  00266C  ECE1  F021         	call	i2_strcpy	;wreg free
 16957                           
 16958                           ;RTC.c: 95: break;
 16959  002670  D059               	goto	i2l6212
 16960  002672                     i2l6200:
 16961                           
 16962                           ;RTC.c: 97: strcpy(month, "SEP");
 16963  002672  0E3D               	movlw	low i2printRTC@month
 16964  002674  6E01               	movwf	i2strcpy@to,c
 16965  002676  0E00               	movlw	high i2printRTC@month
 16966  002678  6E02               	movwf	i2strcpy@to+1,c
 16967  00267A  0EE3               	movlw	low STR_16
 16968  00267C  6E03               	movwf	i2strcpy@from,c
 16969  00267E  0EFF               	movlw	high STR_16
 16970  002680  6E04               	movwf	i2strcpy@from+1,c
 16971  002682  ECE1  F021         	call	i2_strcpy	;wreg free
 16972                           
 16973                           ;RTC.c: 98: break;
 16974  002686  D04E               	goto	i2l6212
 16975  002688                     i2l6202:
 16976                           
 16977                           ;RTC.c: 100: strcpy(month, "OCT");
 16978  002688  0E3D               	movlw	low i2printRTC@month
 16979  00268A  6E01               	movwf	i2strcpy@to,c
 16980  00268C  0E00               	movlw	high i2printRTC@month
 16981  00268E  6E02               	movwf	i2strcpy@to+1,c
 16982  002690  0EF3               	movlw	low STR_17
 16983  002692  6E03               	movwf	i2strcpy@from,c
 16984  002694  0EFF               	movlw	high STR_17
 16985  002696  6E04               	movwf	i2strcpy@from+1,c
 16986  002698  ECE1  F021         	call	i2_strcpy	;wreg free
 16987                           
 16988                           ;RTC.c: 101: break;
 16989  00269C  D043               	goto	i2l6212
 16990  00269E                     i2l6204:
 16991                           
 16992                           ;RTC.c: 103: strcpy(month, "NOV");
 16993  00269E  0E3D               	movlw	low i2printRTC@month
 16994  0026A0  6E01               	movwf	i2strcpy@to,c
 16995  0026A2  0E00               	movlw	high i2printRTC@month
 16996  0026A4  6E02               	movwf	i2strcpy@to+1,c
 16997  0026A6  0EF7               	movlw	low STR_18
 16998  0026A8  6E03               	movwf	i2strcpy@from,c
 16999  0026AA  0EFF               	movlw	high STR_18
 17000  0026AC  6E04               	movwf	i2strcpy@from+1,c
 17001  0026AE  ECE1  F021         	call	i2_strcpy	;wreg free
 17002                           
 17003                           ;RTC.c: 104: break;
 17004  0026B2  D038               	goto	i2l6212
 17005  0026B4                     i2l6206:
 17006                           
 17007                           ;RTC.c: 106: strcpy(month, "DEC");
 17008  0026B4  0E3D               	movlw	low i2printRTC@month
 17009  0026B6  6E01               	movwf	i2strcpy@to,c
 17010  0026B8  0E00               	movlw	high i2printRTC@month
 17011  0026BA  6E02               	movwf	i2strcpy@to+1,c
 17012  0026BC  0ECF               	movlw	low STR_19
 17013  0026BE  6E03               	movwf	i2strcpy@from,c
 17014  0026C0  0EFF               	movlw	high STR_19
 17015  0026C2  6E04               	movwf	i2strcpy@from+1,c
 17016  0026C4  ECE1  F021         	call	i2_strcpy	;wreg free
 17017                           
 17018                           ;RTC.c: 108: }
 17019                           
 17020                           ;RTC.c: 107: break;
 17021  0026C8  D02D               	goto	i2l6212
 17022  0026CA                     i2l6210:
 17023  0026CA  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 17024  0026CE  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 17025                           
 17026                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17027                           ; Switch size 1, requested type "space"
 17028                           ; Number of cases is 1, Range of values is 0 to 0
 17029                           ; switch strategies available:
 17030                           ; Name         Instructions Cycles
 17031                           ; simple_byte            4     3 (average)
 17032                           ;	Chosen strategy is simple_byte
 17033  0026D2  502B               	movf	??i2_printRTC+1,w,c
 17034  0026D4  0A00               	xorlw	0	; case 0
 17035  0026D6  A4D8               	btfss	status,2,c
 17036  0026D8  D025               	goto	i2l6212
 17037                           
 17038                           ; Switch size 1, requested type "space"
 17039                           ; Number of cases is 12, Range of values is 1 to 12
 17040                           ; switch strategies available:
 17041                           ; Name         Instructions Cycles
 17042                           ; simple_byte           37    19 (average)
 17043                           ;	Chosen strategy is simple_byte
 17044  0026DA  502A               	movf	??i2_printRTC,w,c
 17045  0026DC  0A01               	xorlw	1	; case 1
 17046  0026DE  B4D8               	btfsc	status,2,c
 17047  0026E0  D770               	goto	i2l6184
 17048  0026E2  0A03               	xorlw	3	; case 2
 17049  0026E4  B4D8               	btfsc	status,2,c
 17050  0026E6  D778               	goto	i2l6186
 17051  0026E8  0A01               	xorlw	1	; case 3
 17052  0026EA  B4D8               	btfsc	status,2,c
 17053  0026EC  D780               	goto	i2l6188
 17054  0026EE  0A07               	xorlw	7	; case 4
 17055  0026F0  B4D8               	btfsc	status,2,c
 17056  0026F2  D788               	goto	i2l6190
 17057  0026F4  0A01               	xorlw	1	; case 5
 17058  0026F6  B4D8               	btfsc	status,2,c
 17059  0026F8  D790               	goto	i2l6192
 17060  0026FA  0A03               	xorlw	3	; case 6
 17061  0026FC  B4D8               	btfsc	status,2,c
 17062  0026FE  D798               	goto	i2l6194
 17063  002700  0A01               	xorlw	1	; case 7
 17064  002702  B4D8               	btfsc	status,2,c
 17065  002704  D7A0               	goto	i2l6196
 17066  002706  0A0F               	xorlw	15	; case 8
 17067  002708  B4D8               	btfsc	status,2,c
 17068  00270A  D7A8               	goto	i2l6198
 17069  00270C  0A01               	xorlw	1	; case 9
 17070  00270E  B4D8               	btfsc	status,2,c
 17071  002710  D7B0               	goto	i2l6200
 17072  002712  0A03               	xorlw	3	; case 10
 17073  002714  B4D8               	btfsc	status,2,c
 17074  002716  D7B8               	goto	i2l6202
 17075  002718  0A01               	xorlw	1	; case 11
 17076  00271A  B4D8               	btfsc	status,2,c
 17077  00271C  D7C0               	goto	i2l6204
 17078  00271E  0A07               	xorlw	7	; case 12
 17079  002720  B4D8               	btfsc	status,2,c
 17080  002722  D7C8               	goto	i2l6206
 17081  002724                     i2l6212:
 17082                           
 17083                           ;RTC.c: 109: lcdInst(0b10000000);;
 17084  002724  0E80               	movlw	128
 17085  002726  EC34  F024         	call	i2_lcdInst
 17086                           
 17087                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 17088  00272A  0E2E               	movlw	low STR_21
 17089  00272C  6E0D               	movwf	i2printf@f,c
 17090  00272E  0EFB               	movlw	high STR_21
 17091  002730  6E0E               	movwf	i2printf@f+1,c
 17092  002732  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 17093  002736  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 17094  00273A  0E3D               	movlw	low i2printRTC@month
 17095  00273C  6E11               	movwf	?i2_printf+4,c
 17096  00273E  0E00               	movlw	high i2printRTC@month
 17097  002740  6E12               	movwf	?i2_printf+5,c
 17098  002742  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 17099  002746  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 17100  00274A  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 17101  00274E  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 17102  002752  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 17103  002756  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 17104  00275A  EC9A  F00C         	call	i2_printf	;wreg free
 17105  00275E  0012               	return		;funcret
 17106  002760                     __end_ofi2_printRTC:
 17107                           	opt stack 0
 17108                           pclatu	equ	0xFFB
 17109                           pclath	equ	0xFFA
 17110                           tblptru	equ	0xFF8
 17111                           tblptrh	equ	0xFF7
 17112                           tblptrl	equ	0xFF6
 17113                           tablat	equ	0xFF5
 17114                           prodh	equ	0xFF4
 17115                           prodl	equ	0xFF3
 17116                           intcon	equ	0xFF2
 17117                           intcon2	equ	0xFF1
 17118                           intcon3	equ	0xFF0
 17119                           indf0	equ	0xFEF
 17120                           postinc0	equ	0xFEE
 17121                           fsr0h	equ	0xFEA
 17122                           fsr0l	equ	0xFE9
 17123                           wreg	equ	0xFE8
 17124                           postdec1	equ	0xFE5
 17125                           fsr1h	equ	0xFE2
 17126                           fsr1l	equ	0xFE1
 17127                           indf2	equ	0xFDF
 17128                           postinc2	equ	0xFDE
 17129                           postdec2	equ	0xFDD
 17130                           fsr2h	equ	0xFDA
 17131                           fsr2l	equ	0xFD9
 17132                           status	equ	0xFD8
 17133                           
 17134 ;; *************** function i2_strcpy *****************
 17135 ;; Defined at:
 17136 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 17137 ;; Parameters:    Size  Location     Type
 17138 ;;  to              2    0[COMRAM] PTR unsigned char 
 17139 ;;		 -> printRTC@month(4), UI@month(4), 
 17140 ;;  from            2    2[COMRAM] PTR const unsigned char 
 17141 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 17142 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 17143 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 17144 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 17145 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 17146 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 17147 ;;		 -> STR_8(4), 
 17148 ;; Auto vars:     Size  Location     Type
 17149 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 17150 ;;		 -> printRTC@month(4), UI@month(4), 
 17151 ;; Return value:  Size  Location     Type
 17152 ;;                  2    0[COMRAM] PTR unsigned char 
 17153 ;; Registers used:
 17154 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 17155 ;; Tracked objects:
 17156 ;;		On entry : 0/0
 17157 ;;		On exit  : 0/0
 17158 ;;		Unchanged: 0/0
 17159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17160 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17161 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17163 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17164 ;;Total ram usage:        6 bytes
 17165 ;; Hardware stack levels used:    1
 17166 ;; This function calls:
 17167 ;;		Nothing
 17168 ;; This function is called by:
 17169 ;;		i2_printRTC
 17170 ;; This function uses a non-reentrant model
 17171 ;;
 17172                           
 17173                           	psect	text62
 17174  0043C2                     __ptext62:
 17175                           	opt stack 0
 17176  0043C2                     i2_strcpy:
 17177                           	opt stack 20
 17178                           
 17179                           ;incstack = 0
 17180  0043C2  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 17181  0043C6  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 17182  0043CA  D004               	goto	i2l5848
 17183  0043CC                     i2l5846:
 17184  0043CC  4A05               	infsnz	i2strcpy@cp,f,c
 17185  0043CE  2A06               	incf	i2strcpy@cp+1,f,c
 17186  0043D0  4A03               	infsnz	i2strcpy@from,f,c
 17187  0043D2  2A04               	incf	i2strcpy@from+1,f,c
 17188  0043D4                     i2l5848:
 17189  0043D4  C003  FFF6         	movff	i2strcpy@from,tblptrl
 17190  0043D8  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 17191  0043DC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17192  0043DC  6AF8               	clrf	tblptru,c
 17193  0043DE                     	endif
 17194  0043DE                     	if	0	;tblptru may be non-zero
 17195  0043DE                     	endif
 17196  0043DE  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 17197  0043E2  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 17198  0043E6  0008               	tblrd		*
 17199  0043E8  CFF5 FFDF          	movff	tablat,indf2
 17200  0043EC  50DF               	movf	indf2,w,c
 17201  0043EE  B4D8               	btfsc	status,2,c
 17202  0043F0  0012               	return	
 17203  0043F2  D7EC               	goto	i2l5846
 17204  0043F4                     __end_ofi2_strcpy:
 17205                           	opt stack 0
 17206                           pclatu	equ	0xFFB
 17207                           pclath	equ	0xFFA
 17208                           tblptru	equ	0xFF8
 17209                           tblptrh	equ	0xFF7
 17210                           tblptrl	equ	0xFF6
 17211                           tablat	equ	0xFF5
 17212                           prodh	equ	0xFF4
 17213                           prodl	equ	0xFF3
 17214                           intcon	equ	0xFF2
 17215                           intcon2	equ	0xFF1
 17216                           intcon3	equ	0xFF0
 17217                           indf0	equ	0xFEF
 17218                           postinc0	equ	0xFEE
 17219                           fsr0h	equ	0xFEA
 17220                           fsr0l	equ	0xFE9
 17221                           wreg	equ	0xFE8
 17222                           postdec1	equ	0xFE5
 17223                           fsr1h	equ	0xFE2
 17224                           fsr1l	equ	0xFE1
 17225                           indf2	equ	0xFDF
 17226                           postinc2	equ	0xFDE
 17227                           postdec2	equ	0xFDD
 17228                           fsr2h	equ	0xFDA
 17229                           fsr2l	equ	0xFD9
 17230                           status	equ	0xFD8
 17231                           
 17232 ;; *************** function _inputHandler *****************
 17233 ;; Defined at:
 17234 ;;		line 372 in file "UI.c"
 17235 ;; Parameters:    Size  Location     Type
 17236 ;;		None
 17237 ;; Auto vars:     Size  Location     Type
 17238 ;;		None
 17239 ;; Return value:  Size  Location     Type
 17240 ;;                  2   41[COMRAM] int 
 17241 ;; Registers used:
 17242 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17243 ;; Tracked objects:
 17244 ;;		On entry : 0/0
 17245 ;;		On exit  : 0/0
 17246 ;;		Unchanged: 0/0
 17247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17248 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17249 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17250 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17251 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17252 ;;Total ram usage:        4 bytes
 17253 ;; Hardware stack levels used:    1
 17254 ;; Hardware stack levels required when called:    4
 17255 ;; This function calls:
 17256 ;;		_change_state_to_logs_11
 17257 ;;		_change_state_to_logs_12
 17258 ;;		_change_state_to_logs_22
 17259 ;;		_change_state_to_logs_23
 17260 ;;		_change_state_to_logs_33
 17261 ;;		_change_state_to_logs_34
 17262 ;;		_change_state_to_menu_11
 17263 ;;		_change_state_to_menu_23
 17264 ;;		i2_change_state_to_menu_12
 17265 ;;		i2_change_state_to_menu_22
 17266 ;; This function is called by:
 17267 ;;		_updateMenu
 17268 ;; This function uses a non-reentrant model
 17269 ;;
 17270                           
 17271                           	psect	text63
 17272  002952                     __ptext63:
 17273                           	opt stack 0
 17274  002952                     _inputHandler:
 17275                           	opt stack 18
 17276                           
 17277                           ;UI.c: 377: if(firstboot){
 17278                           
 17279                           ;incstack = 0
 17280  002952  5075               	movf	_firstboot,w,c
 17281  002954  1076               	iorwf	_firstboot+1,w,c
 17282  002956  B4D8               	btfsc	status,2,c
 17283  002958  D00B               	goto	i2l6280
 17284                           
 17285                           ;UI.c: 378: change_state_to_menu_11();
 17286  00295A  EC42  F022         	call	_change_state_to_menu_11	;wreg free
 17287                           
 17288                           ;UI.c: 379: firstboot = 0;
 17289  00295E  0E00               	movlw	0
 17290  002960  6E76               	movwf	_firstboot+1,c
 17291  002962  0E00               	movlw	0
 17292  002964  6E75               	movwf	_firstboot,c
 17293                           
 17294                           ;UI.c: 380: return 0;
 17295  002966  0E00               	movlw	0
 17296  002968  6E2B               	movwf	?_inputHandler+1,c
 17297  00296A  0E00               	movlw	0
 17298  00296C  6E2A               	movwf	?_inputHandler,c
 17299  00296E  0012               	return	
 17300  002970                     i2l6280:
 17301                           
 17302                           ;UI.c: 381: }
 17303                           ;UI.c: 382: if (logstate){
 17304  002970  0100               	movlb	0	; () banked
 17305  002972  51F6               	movf	_logstate& (0+255),w,b
 17306  002974  0100               	movlb	0	; () banked
 17307  002976  11F7               	iorwf	(_logstate+1)& (0+255),w,b
 17308  002978  B4D8               	btfsc	status,2,c
 17309  00297A  D0C7               	goto	i2l6398
 17310                           
 17311                           ; BSR set to: 0
 17312                           ;UI.c: 383: if(input == 'C' && PORTBbits.RB1 == 1){
 17313  00297C  0E43               	movlw	67
 17314  00297E  187D               	xorwf	_input,w,c	;volatile
 17315  002980  A4D8               	btfss	status,2,c
 17316  002982  D012               	goto	i2l6298
 17317                           
 17318                           ; BSR set to: 0
 17319  002984  B281               	btfsc	3969,1,c	;volatile
 17320  002986  D009               	goto	i2l6290
 17321  002988  D00F               	goto	i2l6298
 17322  00298A                     i2l6288:
 17323                           
 17324                           ;UI.c: 386: _delay((unsigned long)((10)*(32000000/4000.0)));
 17325  00298A  0E68               	movlw	104
 17326  00298C  6E2C               	movwf	??_inputHandler& (0+255),c
 17327  00298E  0EE4               	movlw	228
 17328  002990                     i2u835_47:
 17329  002990  2EE8               	decfsz	wreg,f,c
 17330  002992  D7FE               	bra	i2u835_47
 17331  002994  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 17332  002996  D7FC               	bra	i2u835_47
 17333  002998  D000               	nop2	
 17334  00299A                     i2l6290:
 17335  00299A  B281               	btfsc	3969,1,c	;volatile
 17336  00299C  D7F6               	goto	i2l6288
 17337  00299E                     i2l6292:
 17338                           
 17339                           ;UI.c: 387: }
 17340                           ;UI.c: 388: return 0;
 17341  00299E  0E00               	movlw	0
 17342  0029A0  6E2B               	movwf	?_inputHandler+1,c
 17343  0029A2  0E00               	movlw	0
 17344  0029A4  6E2A               	movwf	?_inputHandler,c
 17345  0029A6  0012               	return	
 17346  0029A8                     i2l6298:
 17347                           
 17348                           ;UI.c: 390: else if (input == 'D'){
 17349  0029A8  0E44               	movlw	68
 17350  0029AA  187D               	xorwf	_input,w,c	;volatile
 17351  0029AC  A4D8               	btfss	status,2,c
 17352  0029AE  D7F7               	goto	i2l6292
 17353                           
 17354                           ;UI.c: 392: logstate = 0;
 17355  0029B0  0E00               	movlw	0
 17356  0029B2  0100               	movlb	0	; () banked
 17357  0029B4  6FF7               	movwf	(_logstate+1)& (0+255),b
 17358  0029B6  0E00               	movlw	0
 17359  0029B8  6FF6               	movwf	_logstate& (0+255),b
 17360                           
 17361                           ;UI.c: 393: switch(cur_state){
 17362  0029BA  D012               	goto	i2l6316
 17363  0029BC                     i2l6302:
 17364                           
 17365                           ;UI.c: 395: change_state_to_logs_11();
 17366  0029BC  ECBA  F022         	call	_change_state_to_logs_11	;wreg free
 17367                           
 17368                           ;UI.c: 396: break;
 17369  0029C0  D7EE               	goto	i2l6292
 17370  0029C2                     i2l6304:
 17371                           
 17372                           ;UI.c: 398: change_state_to_logs_12();
 17373  0029C2  ECA2  F022         	call	_change_state_to_logs_12	;wreg free
 17374                           
 17375                           ;UI.c: 399: break;
 17376  0029C6  D7EB               	goto	i2l6292
 17377  0029C8                     i2l6306:
 17378                           
 17379                           ;UI.c: 401: change_state_to_logs_22();
 17380  0029C8  EC8A  F022         	call	_change_state_to_logs_22	;wreg free
 17381                           
 17382                           ;UI.c: 402: break;
 17383  0029CC  D7E8               	goto	i2l6292
 17384  0029CE                     i2l6308:
 17385                           
 17386                           ;UI.c: 404: change_state_to_logs_23();
 17387  0029CE  EC00  F023         	call	_change_state_to_logs_23	;wreg free
 17388                           
 17389                           ;UI.c: 405: break;
 17390  0029D2  D7E5               	goto	i2l6292
 17391  0029D4                     i2l6310:
 17392                           
 17393                           ;UI.c: 407: change_state_to_logs_33();
 17394  0029D4  EC72  F022         	call	_change_state_to_logs_33	;wreg free
 17395                           
 17396                           ;UI.c: 408: break;
 17397  0029D8  D7E2               	goto	i2l6292
 17398  0029DA                     i2l6312:
 17399                           
 17400                           ;UI.c: 410: change_state_to_logs_34();
 17401  0029DA  EC5A  F022         	call	_change_state_to_logs_34	;wreg free
 17402                           
 17403                           ;UI.c: 412: }
 17404                           
 17405                           ;UI.c: 411: break;
 17406  0029DE  D7DF               	goto	i2l6292
 17407  0029E0                     i2l6316:
 17408  0029E0  C0E0  F02C         	movff	_cur_state,??_inputHandler
 17409  0029E4  C0E1  F02D         	movff	_cur_state+1,??_inputHandler+1
 17410                           
 17411                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 17412                           ; Switch size 1, requested type "space"
 17413                           ; Number of cases is 2, Range of values is 3 to 4
 17414                           ; switch strategies available:
 17415                           ; Name         Instructions Cycles
 17416                           ; simple_byte            7     4 (average)
 17417                           ;	Chosen strategy is simple_byte
 17418  0029E8  502D               	movf	??_inputHandler+1,w,c
 17419  0029EA  0A03               	xorlw	3	; case 3
 17420  0029EC  B4D8               	btfsc	status,2,c
 17421  0029EE  D004               	goto	i2l8544
 17422  0029F0  0A07               	xorlw	7	; case 4
 17423  0029F2  B4D8               	btfsc	status,2,c
 17424  0029F4  D00F               	goto	i2l8546
 17425  0029F6  D7D3               	goto	i2l6292
 17426  0029F8                     i2l8544:
 17427                           
 17428                           ; Switch size 1, requested type "space"
 17429                           ; Number of cases is 4, Range of values is 243 to 255
 17430                           ; switch strategies available:
 17431                           ; Name         Instructions Cycles
 17432                           ; simple_byte           13     7 (average)
 17433                           ;	Chosen strategy is simple_byte
 17434  0029F8  502C               	movf	??_inputHandler,w,c
 17435  0029FA  0AF3               	xorlw	243	; case 243
 17436  0029FC  B4D8               	btfsc	status,2,c
 17437  0029FE  D7DE               	goto	i2l6302
 17438  002A00  0A07               	xorlw	7	; case 244
 17439  002A02  B4D8               	btfsc	status,2,c
 17440  002A04  D7DE               	goto	i2l6304
 17441  002A06  0A0A               	xorlw	10	; case 254
 17442  002A08  B4D8               	btfsc	status,2,c
 17443  002A0A  D7DE               	goto	i2l6306
 17444  002A0C  0A01               	xorlw	1	; case 255
 17445  002A0E  B4D8               	btfsc	status,2,c
 17446  002A10  D7DE               	goto	i2l6308
 17447  002A12  D7C5               	goto	i2l6292
 17448  002A14                     i2l8546:
 17449                           
 17450                           ; Switch size 1, requested type "space"
 17451                           ; Number of cases is 2, Range of values is 9 to 10
 17452                           ; switch strategies available:
 17453                           ; Name         Instructions Cycles
 17454                           ; simple_byte            7     4 (average)
 17455                           ;	Chosen strategy is simple_byte
 17456  002A14  502C               	movf	??_inputHandler,w,c
 17457  002A16  0A09               	xorlw	9	; case 9
 17458  002A18  B4D8               	btfsc	status,2,c
 17459  002A1A  D7DC               	goto	i2l6310
 17460  002A1C  0A03               	xorlw	3	; case 10
 17461  002A1E  B4D8               	btfsc	status,2,c
 17462  002A20  D7DC               	goto	i2l6312
 17463  002A22  D7BD               	goto	i2l6292
 17464  002A24                     i2l6328:
 17465                           
 17466                           ;UI.c: 422: if(cur_state == 11){
 17467  002A24  0E0B               	movlw	11
 17468  002A26  0100               	movlb	0	; () banked
 17469  002A28  19E0               	xorwf	_cur_state& (0+255),w,b
 17470  002A2A  0100               	movlb	0	; () banked
 17471  002A2C  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
 17472  002A2E  A4D8               	btfss	status,2,c
 17473  002A30  D005               	goto	i2l6336
 17474                           
 17475                           ; BSR set to: 0
 17476                           ;UI.c: 423: return 0;
 17477  002A32  0E00               	movlw	0
 17478  002A34  6E2B               	movwf	?_inputHandler+1,c
 17479  002A36  0E00               	movlw	0
 17480  002A38  6E2A               	movwf	?_inputHandler,c
 17481                           
 17482                           ; BSR set to: 0
 17483  002A3A  0012               	return	
 17484  002A3C                     i2l6336:
 17485                           
 17486                           ; BSR set to: 0
 17487                           ;UI.c: 425: else{
 17488                           ;UI.c: 426: change_state_to_menu_11();
 17489  002A3C  EC42  F022         	call	_change_state_to_menu_11	;wreg free
 17490                           
 17491                           ;UI.c: 427: }
 17492                           ;UI.c: 428: return 0;
 17493  002A40  0E00               	movlw	0
 17494  002A42  6E2B               	movwf	?_inputHandler+1,c
 17495  002A44  0E00               	movlw	0
 17496  002A46  6E2A               	movwf	?_inputHandler,c
 17497  002A48  0012               	return	
 17498  002A4A                     i2l6342:
 17499                           
 17500                           ;UI.c: 430: if(cur_state == 22 | cur_state == 12){
 17501  002A4A  0E16               	movlw	22
 17502  002A4C  0100               	movlb	0	; () banked
 17503  002A4E  19E0               	xorwf	_cur_state& (0+255),w,b
 17504  002A50  0100               	movlb	0	; () banked
 17505  002A52  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
 17506  002A54  B4D8               	btfsc	status,2,c
 17507  002A56  D007               	goto	i2l6346
 17508                           
 17509                           ; BSR set to: 0
 17510  002A58  0E0C               	movlw	12
 17511  002A5A  0100               	movlb	0	; () banked
 17512  002A5C  19E0               	xorwf	_cur_state& (0+255),w,b
 17513  002A5E  0100               	movlb	0	; () banked
 17514  002A60  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
 17515  002A62  A4D8               	btfss	status,2,c
 17516  002A64  D005               	goto	i2l6352
 17517  002A66                     i2l6346:
 17518                           
 17519                           ; BSR set to: 0
 17520                           ;UI.c: 431: return 0;
 17521  002A66  0E00               	movlw	0
 17522  002A68  6E2B               	movwf	?_inputHandler+1,c
 17523  002A6A  0E00               	movlw	0
 17524  002A6C  6E2A               	movwf	?_inputHandler,c
 17525                           
 17526                           ; BSR set to: 0
 17527  002A6E  0012               	return	
 17528  002A70                     i2l6352:
 17529                           
 17530                           ; BSR set to: 0
 17531                           ;UI.c: 433: else if(cur_state == 23){
 17532  002A70  0E17               	movlw	23
 17533  002A72  0100               	movlb	0	; () banked
 17534  002A74  19E0               	xorwf	_cur_state& (0+255),w,b
 17535  002A76  0100               	movlb	0	; () banked
 17536  002A78  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
 17537  002A7A  A4D8               	btfss	status,2,c
 17538  002A7C  D003               	goto	i2l6356
 17539                           
 17540                           ; BSR set to: 0
 17541                           ;UI.c: 434: change_state_to_menu_22();
 17542  002A7E  ECFA  F021         	call	i2_change_state_to_menu_22	;wreg free
 17543                           
 17544                           ;UI.c: 435: }
 17545  002A82  D002               	goto	i2l6358
 17546  002A84                     i2l6356:
 17547                           
 17548                           ;UI.c: 436: else{
 17549                           ;UI.c: 437: change_state_to_menu_12();
 17550  002A84  EC12  F022         	call	i2_change_state_to_menu_12	;wreg free
 17551  002A88                     i2l6358:
 17552                           
 17553                           ;UI.c: 438: }
 17554                           ;UI.c: 439: return 0;
 17555  002A88  0E00               	movlw	0
 17556  002A8A  6E2B               	movwf	?_inputHandler+1,c
 17557  002A8C  0E00               	movlw	0
 17558  002A8E  6E2A               	movwf	?_inputHandler,c
 17559  002A90  0012               	return	
 17560  002A92                     i2l6362:
 17561                           
 17562                           ;UI.c: 441: if(cur_state == 23){
 17563  002A92  0E17               	movlw	23
 17564  002A94  0100               	movlb	0	; () banked
 17565  002A96  19E0               	xorwf	_cur_state& (0+255),w,b
 17566  002A98  0100               	movlb	0	; () banked
 17567  002A9A  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
 17568  002A9C  A4D8               	btfss	status,2,c
 17569  002A9E  D005               	goto	i2l6370
 17570                           
 17571                           ; BSR set to: 0
 17572                           ;UI.c: 442: return 0;
 17573  002AA0  0E00               	movlw	0
 17574  002AA2  6E2B               	movwf	?_inputHandler+1,c
 17575  002AA4  0E00               	movlw	0
 17576  002AA6  6E2A               	movwf	?_inputHandler,c
 17577                           
 17578                           ; BSR set to: 0
 17579  002AA8  0012               	return	
 17580  002AAA                     i2l6370:
 17581                           
 17582                           ; BSR set to: 0
 17583                           ;UI.c: 444: else{
 17584                           ;UI.c: 445: change_state_to_menu_23();
 17585  002AAA  EC2A  F022         	call	_change_state_to_menu_23	;wreg free
 17586                           
 17587                           ;UI.c: 446: }
 17588                           ;UI.c: 447: return 0;
 17589  002AAE  0E00               	movlw	0
 17590  002AB0  6E2B               	movwf	?_inputHandler+1,c
 17591  002AB2  0E00               	movlw	0
 17592  002AB4  6E2A               	movwf	?_inputHandler,c
 17593  002AB6  0012               	return	
 17594  002AB8                     i2l6376:
 17595                           
 17596                           ;UI.c: 450: up = 1;
 17597  002AB8  0E00               	movlw	0
 17598  002ABA  6E78               	movwf	_up+1,c
 17599  002ABC  0E01               	movlw	1
 17600  002ABE  6E77               	movwf	_up,c
 17601                           
 17602                           ;UI.c: 451: return 1;
 17603  002AC0  0E00               	movlw	0
 17604  002AC2  6E2B               	movwf	?_inputHandler+1,c
 17605  002AC4  0E01               	movlw	1
 17606  002AC6  6E2A               	movwf	?_inputHandler,c
 17607  002AC8  0012               	return	
 17608  002ACA                     i2l6380:
 17609                           
 17610                           ;UI.c: 453: down = 1;
 17611  002ACA  0E00               	movlw	0
 17612  002ACC  6E6A               	movwf	_down+1,c
 17613  002ACE  0E01               	movlw	1
 17614  002AD0  6E69               	movwf	_down,c
 17615                           
 17616                           ;UI.c: 454: return 1;
 17617  002AD2  0E00               	movlw	0
 17618  002AD4  6E2B               	movwf	?_inputHandler+1,c
 17619  002AD6  0E01               	movlw	1
 17620  002AD8  6E2A               	movwf	?_inputHandler,c
 17621  002ADA  0012               	return	
 17622  002ADC                     i2l6384:
 17623                           
 17624                           ;UI.c: 456: enter = 1;
 17625  002ADC  0E00               	movlw	0
 17626  002ADE  6E6C               	movwf	_enter+1,c
 17627  002AE0  0E01               	movlw	1
 17628  002AE2  6E6B               	movwf	_enter,c
 17629                           
 17630                           ;UI.c: 457: return 1;
 17631  002AE4  0E00               	movlw	0
 17632  002AE6  6E2B               	movwf	?_inputHandler+1,c
 17633  002AE8  0E01               	movlw	1
 17634  002AEA  6E2A               	movwf	?_inputHandler,c
 17635  002AEC  0012               	return	
 17636  002AEE                     i2l6388:
 17637                           
 17638                           ;UI.c: 459: back = 1;
 17639  002AEE  0E00               	movlw	0
 17640  002AF0  6E5C               	movwf	_back+1,c
 17641  002AF2  0E01               	movlw	1
 17642  002AF4  6E5B               	movwf	_back,c
 17643                           
 17644                           ;UI.c: 460: return 1;
 17645  002AF6  0E00               	movlw	0
 17646  002AF8  6E2B               	movwf	?_inputHandler+1,c
 17647  002AFA  0E01               	movlw	1
 17648  002AFC  6E2A               	movwf	?_inputHandler,c
 17649  002AFE  0012               	return	
 17650  002B00                     i2l6392:
 17651                           
 17652                           ;UI.c: 463: return 1;
 17653  002B00  0E00               	movlw	0
 17654  002B02  6E2B               	movwf	?_inputHandler+1,c
 17655  002B04  0E01               	movlw	1
 17656  002B06  6E2A               	movwf	?_inputHandler,c
 17657                           
 17658                           ;UI.c: 464: }
 17659  002B08  0012               	return	
 17660  002B0A                     i2l6398:
 17661  002B0A  507D               	movf	_input,w,c	;volatile
 17662                           
 17663                           ; Switch size 1, requested type "space"
 17664                           ; Number of cases is 7, Range of values is 49 to 68
 17665                           ; switch strategies available:
 17666                           ; Name         Instructions Cycles
 17667                           ; simple_byte           22    12 (average)
 17668                           ;	Chosen strategy is simple_byte
 17669  002B0C  0A31               	xorlw	49	; case 49
 17670  002B0E  B4D8               	btfsc	status,2,c
 17671  002B10  D789               	goto	i2l6328
 17672  002B12  0A03               	xorlw	3	; case 50
 17673  002B14  B4D8               	btfsc	status,2,c
 17674  002B16  D799               	goto	i2l6342
 17675  002B18  0A01               	xorlw	1	; case 51
 17676  002B1A  B4D8               	btfsc	status,2,c
 17677  002B1C  D7BA               	goto	i2l6362
 17678  002B1E  0A72               	xorlw	114	; case 65
 17679  002B20  B4D8               	btfsc	status,2,c
 17680  002B22  D7CA               	goto	i2l6376
 17681  002B24  0A03               	xorlw	3	; case 66
 17682  002B26  B4D8               	btfsc	status,2,c
 17683  002B28  D7D0               	goto	i2l6380
 17684  002B2A  0A01               	xorlw	1	; case 67
 17685  002B2C  B4D8               	btfsc	status,2,c
 17686  002B2E  D7D6               	goto	i2l6384
 17687  002B30  0A07               	xorlw	7	; case 68
 17688  002B32  B4D8               	btfsc	status,2,c
 17689  002B34  D7DC               	goto	i2l6388
 17690  002B36  D7E4               	goto	i2l6392
 17691  002B38                     __end_of_inputHandler:
 17692                           	opt stack 0
 17693                           pclatu	equ	0xFFB
 17694                           pclath	equ	0xFFA
 17695                           tblptru	equ	0xFF8
 17696                           tblptrh	equ	0xFF7
 17697                           tblptrl	equ	0xFF6
 17698                           tablat	equ	0xFF5
 17699                           prodh	equ	0xFF4
 17700                           prodl	equ	0xFF3
 17701                           intcon	equ	0xFF2
 17702                           intcon2	equ	0xFF1
 17703                           intcon3	equ	0xFF0
 17704                           indf0	equ	0xFEF
 17705                           postinc0	equ	0xFEE
 17706                           fsr0h	equ	0xFEA
 17707                           fsr0l	equ	0xFE9
 17708                           wreg	equ	0xFE8
 17709                           postdec1	equ	0xFE5
 17710                           fsr1h	equ	0xFE2
 17711                           fsr1l	equ	0xFE1
 17712                           indf2	equ	0xFDF
 17713                           postinc2	equ	0xFDE
 17714                           postdec2	equ	0xFDD
 17715                           fsr2h	equ	0xFDA
 17716                           fsr2l	equ	0xFD9
 17717                           status	equ	0xFD8
 17718                           
 17719 ;; *************** function i2_change_state_to_menu_22 *****************
 17720 ;; Defined at:
 17721 ;;		line 498 in file "UI.c"
 17722 ;; Parameters:    Size  Location     Type
 17723 ;;		None
 17724 ;; Auto vars:     Size  Location     Type
 17725 ;;		None
 17726 ;; Return value:  Size  Location     Type
 17727 ;;                  1    wreg      void 
 17728 ;; Registers used:
 17729 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17730 ;; Tracked objects:
 17731 ;;		On entry : 0/0
 17732 ;;		On exit  : 0/0
 17733 ;;		Unchanged: 0/0
 17734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17736 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17738 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17739 ;;Total ram usage:        0 bytes
 17740 ;; Hardware stack levels used:    1
 17741 ;; Hardware stack levels required when called:    3
 17742 ;; This function calls:
 17743 ;;		i2_lcdInst
 17744 ;;		i2_printf
 17745 ;; This function is called by:
 17746 ;;		_updateMenu
 17747 ;;		_inputHandler
 17748 ;; This function uses a non-reentrant model
 17749 ;;
 17750                           
 17751                           	psect	text64
 17752  0043F4                     __ptext64:
 17753                           	opt stack 0
 17754  0043F4                     i2_change_state_to_menu_22:
 17755                           	opt stack 19
 17756                           
 17757                           ;UI.c: 499: cur_state = 22;
 17758                           
 17759                           ;incstack = 0
 17760  0043F4  0E00               	movlw	0
 17761  0043F6  0100               	movlb	0	; () banked
 17762  0043F8  6FE1               	movwf	(_cur_state+1)& (0+255),b
 17763  0043FA  0E16               	movlw	22
 17764  0043FC  6FE0               	movwf	_cur_state& (0+255),b
 17765                           
 17766                           ; BSR set to: 0
 17767                           ;UI.c: 501: lcdInst(0b10000000);;
 17768  0043FE  0E80               	movlw	128
 17769  004400  EC34  F024         	call	i2_lcdInst
 17770                           
 17771                           ;UI.c: 502: printf("2. SORT        <");
 17772  004404  0EC4               	movlw	low STR_34
 17773  004406  6E0D               	movwf	i2printf@f,c
 17774  004408  0EFD               	movlw	high STR_34
 17775  00440A  6E0E               	movwf	i2printf@f+1,c
 17776  00440C  EC9A  F00C         	call	i2_printf	;wreg free
 17777                           
 17778                           ;UI.c: 503: lcdInst(0b11000000);;
 17779  004410  0EC0               	movlw	192
 17780  004412  EC34  F024         	call	i2_lcdInst
 17781                           
 17782                           ;UI.c: 504: printf("3. LOGS         ");
 17783  004416  0E09               	movlw	low STR_36
 17784  004418  6E0D               	movwf	i2printf@f,c
 17785  00441A  0EFD               	movlw	high STR_36
 17786  00441C  6E0E               	movwf	i2printf@f+1,c
 17787  00441E  EC9A  F00C         	call	i2_printf	;wreg free
 17788  004422  0012               	return		;funcret
 17789  004424                     __end_ofi2_change_state_to_menu_22:
 17790                           	opt stack 0
 17791                           pclatu	equ	0xFFB
 17792                           pclath	equ	0xFFA
 17793                           tblptru	equ	0xFF8
 17794                           tblptrh	equ	0xFF7
 17795                           tblptrl	equ	0xFF6
 17796                           tablat	equ	0xFF5
 17797                           prodh	equ	0xFF4
 17798                           prodl	equ	0xFF3
 17799                           intcon	equ	0xFF2
 17800                           intcon2	equ	0xFF1
 17801                           intcon3	equ	0xFF0
 17802                           indf0	equ	0xFEF
 17803                           postinc0	equ	0xFEE
 17804                           fsr0h	equ	0xFEA
 17805                           fsr0l	equ	0xFE9
 17806                           wreg	equ	0xFE8
 17807                           postdec1	equ	0xFE5
 17808                           fsr1h	equ	0xFE2
 17809                           fsr1l	equ	0xFE1
 17810                           indf2	equ	0xFDF
 17811                           postinc2	equ	0xFDE
 17812                           postdec2	equ	0xFDD
 17813                           fsr2h	equ	0xFDA
 17814                           fsr2l	equ	0xFD9
 17815                           status	equ	0xFD8
 17816                           
 17817 ;; *************** function i2_change_state_to_menu_12 *****************
 17818 ;; Defined at:
 17819 ;;		line 490 in file "UI.c"
 17820 ;; Parameters:    Size  Location     Type
 17821 ;;		None
 17822 ;; Auto vars:     Size  Location     Type
 17823 ;;		None
 17824 ;; Return value:  Size  Location     Type
 17825 ;;                  1    wreg      void 
 17826 ;; Registers used:
 17827 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17828 ;; Tracked objects:
 17829 ;;		On entry : 0/0
 17830 ;;		On exit  : 0/0
 17831 ;;		Unchanged: 0/0
 17832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17836 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17837 ;;Total ram usage:        0 bytes
 17838 ;; Hardware stack levels used:    1
 17839 ;; Hardware stack levels required when called:    3
 17840 ;; This function calls:
 17841 ;;		i2_lcdInst
 17842 ;;		i2_printf
 17843 ;; This function is called by:
 17844 ;;		_updateMenu
 17845 ;;		_inputHandler
 17846 ;; This function uses a non-reentrant model
 17847 ;;
 17848                           
 17849                           	psect	text65
 17850  004424                     __ptext65:
 17851                           	opt stack 0
 17852  004424                     i2_change_state_to_menu_12:
 17853                           	opt stack 19
 17854                           
 17855                           ;UI.c: 491: cur_state = 12;
 17856                           
 17857                           ;incstack = 0
 17858  004424  0E00               	movlw	0
 17859  004426  0100               	movlb	0	; () banked
 17860  004428  6FE1               	movwf	(_cur_state+1)& (0+255),b
 17861  00442A  0E0C               	movlw	12
 17862  00442C  6FE0               	movwf	_cur_state& (0+255),b
 17863                           
 17864                           ; BSR set to: 0
 17865                           ;UI.c: 493: lcdInst(0b10000000);;
 17866  00442E  0E80               	movlw	128
 17867  004430  EC34  F024         	call	i2_lcdInst
 17868                           
 17869                           ;UI.c: 494: printf("1. DATE/TIME    ");
 17870  004434  0E2B               	movlw	low STR_33
 17871  004436  6E0D               	movwf	i2printf@f,c
 17872  004438  0EFD               	movlw	high STR_33
 17873  00443A  6E0E               	movwf	i2printf@f+1,c
 17874  00443C  EC9A  F00C         	call	i2_printf	;wreg free
 17875                           
 17876                           ;UI.c: 495: lcdInst(0b11000000);;
 17877  004440  0EC0               	movlw	192
 17878  004442  EC34  F024         	call	i2_lcdInst
 17879                           
 17880                           ;UI.c: 496: printf("2. SORT        <");
 17881  004446  0EC4               	movlw	low STR_34
 17882  004448  6E0D               	movwf	i2printf@f,c
 17883  00444A  0EFD               	movlw	high STR_34
 17884  00444C  6E0E               	movwf	i2printf@f+1,c
 17885  00444E  EC9A  F00C         	call	i2_printf	;wreg free
 17886  004452  0012               	return		;funcret
 17887  004454                     __end_ofi2_change_state_to_menu_12:
 17888                           	opt stack 0
 17889                           pclatu	equ	0xFFB
 17890                           pclath	equ	0xFFA
 17891                           tblptru	equ	0xFF8
 17892                           tblptrh	equ	0xFF7
 17893                           tblptrl	equ	0xFF6
 17894                           tablat	equ	0xFF5
 17895                           prodh	equ	0xFF4
 17896                           prodl	equ	0xFF3
 17897                           intcon	equ	0xFF2
 17898                           intcon2	equ	0xFF1
 17899                           intcon3	equ	0xFF0
 17900                           indf0	equ	0xFEF
 17901                           postinc0	equ	0xFEE
 17902                           fsr0h	equ	0xFEA
 17903                           fsr0l	equ	0xFE9
 17904                           wreg	equ	0xFE8
 17905                           postdec1	equ	0xFE5
 17906                           fsr1h	equ	0xFE2
 17907                           fsr1l	equ	0xFE1
 17908                           indf2	equ	0xFDF
 17909                           postinc2	equ	0xFDE
 17910                           postdec2	equ	0xFDD
 17911                           fsr2h	equ	0xFDA
 17912                           fsr2l	equ	0xFD9
 17913                           status	equ	0xFD8
 17914                           
 17915 ;; *************** function _change_state_to_menu_23 *****************
 17916 ;; Defined at:
 17917 ;;		line 506 in file "UI.c"
 17918 ;; Parameters:    Size  Location     Type
 17919 ;;		None
 17920 ;; Auto vars:     Size  Location     Type
 17921 ;;		None
 17922 ;; Return value:  Size  Location     Type
 17923 ;;                  1    wreg      void 
 17924 ;; Registers used:
 17925 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17926 ;; Tracked objects:
 17927 ;;		On entry : 0/0
 17928 ;;		On exit  : 0/0
 17929 ;;		Unchanged: 0/0
 17930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17932 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17934 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17935 ;;Total ram usage:        0 bytes
 17936 ;; Hardware stack levels used:    1
 17937 ;; Hardware stack levels required when called:    3
 17938 ;; This function calls:
 17939 ;;		i2_lcdInst
 17940 ;;		i2_printf
 17941 ;; This function is called by:
 17942 ;;		_updateMenu
 17943 ;;		_inputHandler
 17944 ;; This function uses a non-reentrant model
 17945 ;;
 17946                           
 17947                           	psect	text66
 17948  004454                     __ptext66:
 17949                           	opt stack 0
 17950  004454                     _change_state_to_menu_23:
 17951                           	opt stack 18
 17952                           
 17953                           ;UI.c: 507: cur_state = 23;
 17954                           
 17955                           ;incstack = 0
 17956  004454  0E00               	movlw	0
 17957  004456  0100               	movlb	0	; () banked
 17958  004458  6FE1               	movwf	(_cur_state+1)& (0+255),b
 17959  00445A  0E17               	movlw	23
 17960  00445C  6FE0               	movwf	_cur_state& (0+255),b
 17961                           
 17962                           ; BSR set to: 0
 17963                           ;UI.c: 509: lcdInst(0b10000000);;
 17964  00445E  0E80               	movlw	128
 17965  004460  EC34  F024         	call	i2_lcdInst
 17966                           
 17967                           ;UI.c: 510: printf("2. SORT         ");
 17968  004464  0E1A               	movlw	low STR_32
 17969  004466  6E0D               	movwf	i2printf@f,c
 17970  004468  0EFD               	movlw	high STR_32
 17971  00446A  6E0E               	movwf	i2printf@f+1,c
 17972  00446C  EC9A  F00C         	call	i2_printf	;wreg free
 17973                           
 17974                           ;UI.c: 511: lcdInst(0b11000000);;
 17975  004470  0EC0               	movlw	192
 17976  004472  EC34  F024         	call	i2_lcdInst
 17977                           
 17978                           ;UI.c: 512: printf("3. LOGS        <");
 17979  004476  0EB3               	movlw	low STR_38
 17980  004478  6E0D               	movwf	i2printf@f,c
 17981  00447A  0EFD               	movlw	high STR_38
 17982  00447C  6E0E               	movwf	i2printf@f+1,c
 17983  00447E  EC9A  F00C         	call	i2_printf	;wreg free
 17984  004482  0012               	return		;funcret
 17985  004484                     __end_of_change_state_to_menu_23:
 17986                           	opt stack 0
 17987                           pclatu	equ	0xFFB
 17988                           pclath	equ	0xFFA
 17989                           tblptru	equ	0xFF8
 17990                           tblptrh	equ	0xFF7
 17991                           tblptrl	equ	0xFF6
 17992                           tablat	equ	0xFF5
 17993                           prodh	equ	0xFF4
 17994                           prodl	equ	0xFF3
 17995                           intcon	equ	0xFF2
 17996                           intcon2	equ	0xFF1
 17997                           intcon3	equ	0xFF0
 17998                           indf0	equ	0xFEF
 17999                           postinc0	equ	0xFEE
 18000                           fsr0h	equ	0xFEA
 18001                           fsr0l	equ	0xFE9
 18002                           wreg	equ	0xFE8
 18003                           postdec1	equ	0xFE5
 18004                           fsr1h	equ	0xFE2
 18005                           fsr1l	equ	0xFE1
 18006                           indf2	equ	0xFDF
 18007                           postinc2	equ	0xFDE
 18008                           postdec2	equ	0xFDD
 18009                           fsr2h	equ	0xFDA
 18010                           fsr2l	equ	0xFD9
 18011                           status	equ	0xFD8
 18012                           
 18013 ;; *************** function _change_state_to_menu_11 *****************
 18014 ;; Defined at:
 18015 ;;		line 482 in file "UI.c"
 18016 ;; Parameters:    Size  Location     Type
 18017 ;;		None
 18018 ;; Auto vars:     Size  Location     Type
 18019 ;;		None
 18020 ;; Return value:  Size  Location     Type
 18021 ;;                  1    wreg      void 
 18022 ;; Registers used:
 18023 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18024 ;; Tracked objects:
 18025 ;;		On entry : 0/0
 18026 ;;		On exit  : 0/0
 18027 ;;		Unchanged: 0/0
 18028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18030 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18032 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18033 ;;Total ram usage:        0 bytes
 18034 ;; Hardware stack levels used:    1
 18035 ;; Hardware stack levels required when called:    3
 18036 ;; This function calls:
 18037 ;;		i2_lcdInst
 18038 ;;		i2_printf
 18039 ;; This function is called by:
 18040 ;;		_updateMenu
 18041 ;;		_inputHandler
 18042 ;; This function uses a non-reentrant model
 18043 ;;
 18044                           
 18045                           	psect	text67
 18046  004484                     __ptext67:
 18047                           	opt stack 0
 18048  004484                     _change_state_to_menu_11:
 18049                           	opt stack 18
 18050                           
 18051                           ;UI.c: 483: cur_state = 11;
 18052                           
 18053                           ;incstack = 0
 18054  004484  0E00               	movlw	0
 18055  004486  0100               	movlb	0	; () banked
 18056  004488  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18057  00448A  0E0B               	movlw	11
 18058  00448C  6FE0               	movwf	_cur_state& (0+255),b
 18059                           
 18060                           ; BSR set to: 0
 18061                           ;UI.c: 485: lcdInst(0b10000000);;
 18062  00448E  0E80               	movlw	128
 18063  004490  EC34  F024         	call	i2_lcdInst
 18064                           
 18065                           ;UI.c: 486: printf("1. DATE/TIME   <");
 18066  004494  0ED5               	movlw	low STR_31
 18067  004496  6E0D               	movwf	i2printf@f,c
 18068  004498  0EFD               	movlw	high STR_31
 18069  00449A  6E0E               	movwf	i2printf@f+1,c
 18070  00449C  EC9A  F00C         	call	i2_printf	;wreg free
 18071                           
 18072                           ;UI.c: 487: lcdInst(0b11000000);;
 18073  0044A0  0EC0               	movlw	192
 18074  0044A2  EC34  F024         	call	i2_lcdInst
 18075                           
 18076                           ;UI.c: 488: printf("2. SORT         ");
 18077  0044A6  0E1A               	movlw	low STR_32
 18078  0044A8  6E0D               	movwf	i2printf@f,c
 18079  0044AA  0EFD               	movlw	high STR_32
 18080  0044AC  6E0E               	movwf	i2printf@f+1,c
 18081  0044AE  EC9A  F00C         	call	i2_printf	;wreg free
 18082  0044B2  0012               	return		;funcret
 18083  0044B4                     __end_of_change_state_to_menu_11:
 18084                           	opt stack 0
 18085                           pclatu	equ	0xFFB
 18086                           pclath	equ	0xFFA
 18087                           tblptru	equ	0xFF8
 18088                           tblptrh	equ	0xFF7
 18089                           tblptrl	equ	0xFF6
 18090                           tablat	equ	0xFF5
 18091                           prodh	equ	0xFF4
 18092                           prodl	equ	0xFF3
 18093                           intcon	equ	0xFF2
 18094                           intcon2	equ	0xFF1
 18095                           intcon3	equ	0xFF0
 18096                           indf0	equ	0xFEF
 18097                           postinc0	equ	0xFEE
 18098                           fsr0h	equ	0xFEA
 18099                           fsr0l	equ	0xFE9
 18100                           wreg	equ	0xFE8
 18101                           postdec1	equ	0xFE5
 18102                           fsr1h	equ	0xFE2
 18103                           fsr1l	equ	0xFE1
 18104                           indf2	equ	0xFDF
 18105                           postinc2	equ	0xFDE
 18106                           postdec2	equ	0xFDD
 18107                           fsr2h	equ	0xFDA
 18108                           fsr2l	equ	0xFD9
 18109                           status	equ	0xFD8
 18110                           
 18111 ;; *************** function _change_state_to_logs_34 *****************
 18112 ;; Defined at:
 18113 ;;		line 549 in file "UI.c"
 18114 ;; Parameters:    Size  Location     Type
 18115 ;;		None
 18116 ;; Auto vars:     Size  Location     Type
 18117 ;;		None
 18118 ;; Return value:  Size  Location     Type
 18119 ;;                  1    wreg      void 
 18120 ;; Registers used:
 18121 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18122 ;; Tracked objects:
 18123 ;;		On entry : 0/0
 18124 ;;		On exit  : 0/0
 18125 ;;		Unchanged: 0/0
 18126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18130 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18131 ;;Total ram usage:        0 bytes
 18132 ;; Hardware stack levels used:    1
 18133 ;; Hardware stack levels required when called:    3
 18134 ;; This function calls:
 18135 ;;		i2_lcdInst
 18136 ;;		i2_printf
 18137 ;; This function is called by:
 18138 ;;		_updateMenu
 18139 ;;		_inputHandler
 18140 ;; This function uses a non-reentrant model
 18141 ;;
 18142                           
 18143                           	psect	text68
 18144  0044B4                     __ptext68:
 18145                           	opt stack 0
 18146  0044B4                     _change_state_to_logs_34:
 18147                           	opt stack 18
 18148                           
 18149                           ;UI.c: 550: cur_state = 1034;
 18150                           
 18151                           ;incstack = 0
 18152  0044B4  0E04               	movlw	4
 18153  0044B6  0100               	movlb	0	; () banked
 18154  0044B8  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18155  0044BA  0E0A               	movlw	10
 18156  0044BC  6FE0               	movwf	_cur_state& (0+255),b
 18157                           
 18158                           ; BSR set to: 0
 18159                           ;UI.c: 551: lcdInst(0b10000000);;
 18160  0044BE  0E80               	movlw	128
 18161  0044C0  EC34  F024         	call	i2_lcdInst
 18162                           
 18163                           ;UI.c: 552: printf("LOG 3           ");
 18164  0044C4  0EE7               	movlw	low STR_44
 18165  0044C6  6E0D               	movwf	i2printf@f,c
 18166  0044C8  0EFC               	movlw	high STR_44
 18167  0044CA  6E0E               	movwf	i2printf@f+1,c
 18168  0044CC  EC9A  F00C         	call	i2_printf	;wreg free
 18169                           
 18170                           ;UI.c: 553: lcdInst(0b11000000);;
 18171  0044D0  0EC0               	movlw	192
 18172  0044D2  EC34  F024         	call	i2_lcdInst
 18173                           
 18174                           ;UI.c: 554: printf("LOG 4          <");
 18175  0044D6  0EA2               	movlw	low STR_50
 18176  0044D8  6E0D               	movwf	i2printf@f,c
 18177  0044DA  0EFD               	movlw	high STR_50
 18178  0044DC  6E0E               	movwf	i2printf@f+1,c
 18179  0044DE  EC9A  F00C         	call	i2_printf	;wreg free
 18180  0044E2  0012               	return		;funcret
 18181  0044E4                     __end_of_change_state_to_logs_34:
 18182                           	opt stack 0
 18183                           pclatu	equ	0xFFB
 18184                           pclath	equ	0xFFA
 18185                           tblptru	equ	0xFF8
 18186                           tblptrh	equ	0xFF7
 18187                           tblptrl	equ	0xFF6
 18188                           tablat	equ	0xFF5
 18189                           prodh	equ	0xFF4
 18190                           prodl	equ	0xFF3
 18191                           intcon	equ	0xFF2
 18192                           intcon2	equ	0xFF1
 18193                           intcon3	equ	0xFF0
 18194                           indf0	equ	0xFEF
 18195                           postinc0	equ	0xFEE
 18196                           fsr0h	equ	0xFEA
 18197                           fsr0l	equ	0xFE9
 18198                           wreg	equ	0xFE8
 18199                           postdec1	equ	0xFE5
 18200                           fsr1h	equ	0xFE2
 18201                           fsr1l	equ	0xFE1
 18202                           indf2	equ	0xFDF
 18203                           postinc2	equ	0xFDE
 18204                           postdec2	equ	0xFDD
 18205                           fsr2h	equ	0xFDA
 18206                           fsr2l	equ	0xFD9
 18207                           status	equ	0xFD8
 18208                           
 18209 ;; *************** function _change_state_to_logs_33 *****************
 18210 ;; Defined at:
 18211 ;;		line 542 in file "UI.c"
 18212 ;; Parameters:    Size  Location     Type
 18213 ;;		None
 18214 ;; Auto vars:     Size  Location     Type
 18215 ;;		None
 18216 ;; Return value:  Size  Location     Type
 18217 ;;                  1    wreg      void 
 18218 ;; Registers used:
 18219 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18220 ;; Tracked objects:
 18221 ;;		On entry : 0/0
 18222 ;;		On exit  : 0/0
 18223 ;;		Unchanged: 0/0
 18224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18228 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18229 ;;Total ram usage:        0 bytes
 18230 ;; Hardware stack levels used:    1
 18231 ;; Hardware stack levels required when called:    3
 18232 ;; This function calls:
 18233 ;;		i2_lcdInst
 18234 ;;		i2_printf
 18235 ;; This function is called by:
 18236 ;;		_updateMenu
 18237 ;;		_inputHandler
 18238 ;; This function uses a non-reentrant model
 18239 ;;
 18240                           
 18241                           	psect	text69
 18242  0044E4                     __ptext69:
 18243                           	opt stack 0
 18244  0044E4                     _change_state_to_logs_33:
 18245                           	opt stack 18
 18246                           
 18247                           ;UI.c: 543: cur_state = 1033;
 18248                           
 18249                           ;incstack = 0
 18250  0044E4  0E04               	movlw	4
 18251  0044E6  0100               	movlb	0	; () banked
 18252  0044E8  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18253  0044EA  0E09               	movlw	9
 18254  0044EC  6FE0               	movwf	_cur_state& (0+255),b
 18255                           
 18256                           ; BSR set to: 0
 18257                           ;UI.c: 544: lcdInst(0b10000000);;
 18258  0044EE  0E80               	movlw	128
 18259  0044F0  EC34  F024         	call	i2_lcdInst
 18260                           
 18261                           ;UI.c: 545: printf("LOG 3          <");
 18262  0044F4  0E91               	movlw	low STR_46
 18263  0044F6  6E0D               	movwf	i2printf@f,c
 18264  0044F8  0EFD               	movlw	high STR_46
 18265  0044FA  6E0E               	movwf	i2printf@f+1,c
 18266  0044FC  EC9A  F00C         	call	i2_printf	;wreg free
 18267                           
 18268                           ;UI.c: 546: lcdInst(0b11000000);;
 18269  004500  0EC0               	movlw	192
 18270  004502  EC34  F024         	call	i2_lcdInst
 18271                           
 18272                           ;UI.c: 547: printf("LOG 4           ");
 18273  004506  0EF8               	movlw	low STR_48
 18274  004508  6E0D               	movwf	i2printf@f,c
 18275  00450A  0EFC               	movlw	high STR_48
 18276  00450C  6E0E               	movwf	i2printf@f+1,c
 18277  00450E  EC9A  F00C         	call	i2_printf	;wreg free
 18278  004512  0012               	return		;funcret
 18279  004514                     __end_of_change_state_to_logs_33:
 18280                           	opt stack 0
 18281                           pclatu	equ	0xFFB
 18282                           pclath	equ	0xFFA
 18283                           tblptru	equ	0xFF8
 18284                           tblptrh	equ	0xFF7
 18285                           tblptrl	equ	0xFF6
 18286                           tablat	equ	0xFF5
 18287                           prodh	equ	0xFF4
 18288                           prodl	equ	0xFF3
 18289                           intcon	equ	0xFF2
 18290                           intcon2	equ	0xFF1
 18291                           intcon3	equ	0xFF0
 18292                           indf0	equ	0xFEF
 18293                           postinc0	equ	0xFEE
 18294                           fsr0h	equ	0xFEA
 18295                           fsr0l	equ	0xFE9
 18296                           wreg	equ	0xFE8
 18297                           postdec1	equ	0xFE5
 18298                           fsr1h	equ	0xFE2
 18299                           fsr1l	equ	0xFE1
 18300                           indf2	equ	0xFDF
 18301                           postinc2	equ	0xFDE
 18302                           postdec2	equ	0xFDD
 18303                           fsr2h	equ	0xFDA
 18304                           fsr2l	equ	0xFD9
 18305                           status	equ	0xFD8
 18306                           
 18307 ;; *************** function _change_state_to_logs_23 *****************
 18308 ;; Defined at:
 18309 ;;		line 535 in file "UI.c"
 18310 ;; Parameters:    Size  Location     Type
 18311 ;;		None
 18312 ;; Auto vars:     Size  Location     Type
 18313 ;;		None
 18314 ;; Return value:  Size  Location     Type
 18315 ;;                  1    wreg      void 
 18316 ;; Registers used:
 18317 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18318 ;; Tracked objects:
 18319 ;;		On entry : 0/0
 18320 ;;		On exit  : 0/0
 18321 ;;		Unchanged: 0/0
 18322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18326 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18327 ;;Total ram usage:        0 bytes
 18328 ;; Hardware stack levels used:    1
 18329 ;; Hardware stack levels required when called:    3
 18330 ;; This function calls:
 18331 ;;		i2_lcdInst
 18332 ;;		i2_printf
 18333 ;; This function is called by:
 18334 ;;		_updateMenu
 18335 ;;		_inputHandler
 18336 ;; This function uses a non-reentrant model
 18337 ;;
 18338                           
 18339                           	psect	text70
 18340  004600                     __ptext70:
 18341                           	opt stack 0
 18342  004600                     _change_state_to_logs_23:
 18343                           	opt stack 18
 18344                           
 18345                           ;UI.c: 536: cur_state = 1023;
 18346                           
 18347                           ;incstack = 0
 18348  004600  0E03               	movlw	3
 18349  004602  0100               	movlb	0	; () banked
 18350  004604  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18351  004606  69E0               	setf	_cur_state& (0+255),b
 18352                           
 18353                           ; BSR set to: 0
 18354                           ;UI.c: 537: lcdInst(0b10000000);;
 18355  004608  0E80               	movlw	128
 18356  00460A  EC34  F024         	call	i2_lcdInst
 18357                           
 18358                           ;UI.c: 538: printf("LOG 2           ");
 18359  00460E  0ED6               	movlw	low STR_40
 18360  004610  6E0D               	movwf	i2printf@f,c
 18361  004612  0EFC               	movlw	high STR_40
 18362  004614  6E0E               	movwf	i2printf@f+1,c
 18363  004616  EC9A  F00C         	call	i2_printf	;wreg free
 18364                           
 18365                           ;UI.c: 539: lcdInst(0b11000000);;
 18366  00461A  0EC0               	movlw	192
 18367  00461C  EC34  F024         	call	i2_lcdInst
 18368                           
 18369                           ;UI.c: 540: printf("LOG 3          <");
 18370  004620  0E91               	movlw	low STR_46
 18371  004622  6E0D               	movwf	i2printf@f,c
 18372  004624  0EFD               	movlw	high STR_46
 18373  004626  6E0E               	movwf	i2printf@f+1,c
 18374  004628  EC9A  F00C         	call	i2_printf	;wreg free
 18375  00462C  0012               	return		;funcret
 18376  00462E                     __end_of_change_state_to_logs_23:
 18377                           	opt stack 0
 18378                           pclatu	equ	0xFFB
 18379                           pclath	equ	0xFFA
 18380                           tblptru	equ	0xFF8
 18381                           tblptrh	equ	0xFF7
 18382                           tblptrl	equ	0xFF6
 18383                           tablat	equ	0xFF5
 18384                           prodh	equ	0xFF4
 18385                           prodl	equ	0xFF3
 18386                           intcon	equ	0xFF2
 18387                           intcon2	equ	0xFF1
 18388                           intcon3	equ	0xFF0
 18389                           indf0	equ	0xFEF
 18390                           postinc0	equ	0xFEE
 18391                           fsr0h	equ	0xFEA
 18392                           fsr0l	equ	0xFE9
 18393                           wreg	equ	0xFE8
 18394                           postdec1	equ	0xFE5
 18395                           fsr1h	equ	0xFE2
 18396                           fsr1l	equ	0xFE1
 18397                           indf2	equ	0xFDF
 18398                           postinc2	equ	0xFDE
 18399                           postdec2	equ	0xFDD
 18400                           fsr2h	equ	0xFDA
 18401                           fsr2l	equ	0xFD9
 18402                           status	equ	0xFD8
 18403                           
 18404 ;; *************** function _change_state_to_logs_22 *****************
 18405 ;; Defined at:
 18406 ;;		line 528 in file "UI.c"
 18407 ;; Parameters:    Size  Location     Type
 18408 ;;		None
 18409 ;; Auto vars:     Size  Location     Type
 18410 ;;		None
 18411 ;; Return value:  Size  Location     Type
 18412 ;;                  1    wreg      void 
 18413 ;; Registers used:
 18414 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18415 ;; Tracked objects:
 18416 ;;		On entry : 0/0
 18417 ;;		On exit  : 0/0
 18418 ;;		Unchanged: 0/0
 18419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18423 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18424 ;;Total ram usage:        0 bytes
 18425 ;; Hardware stack levels used:    1
 18426 ;; Hardware stack levels required when called:    3
 18427 ;; This function calls:
 18428 ;;		i2_lcdInst
 18429 ;;		i2_printf
 18430 ;; This function is called by:
 18431 ;;		_updateMenu
 18432 ;;		_inputHandler
 18433 ;; This function uses a non-reentrant model
 18434 ;;
 18435                           
 18436                           	psect	text71
 18437  004514                     __ptext71:
 18438                           	opt stack 0
 18439  004514                     _change_state_to_logs_22:
 18440                           	opt stack 18
 18441                           
 18442                           ;UI.c: 529: cur_state = 1022;
 18443                           
 18444                           ;incstack = 0
 18445  004514  0E03               	movlw	3
 18446  004516  0100               	movlb	0	; () banked
 18447  004518  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18448  00451A  0EFE               	movlw	254
 18449  00451C  6FE0               	movwf	_cur_state& (0+255),b
 18450                           
 18451                           ; BSR set to: 0
 18452                           ;UI.c: 530: lcdInst(0b10000000);;
 18453  00451E  0E80               	movlw	128
 18454  004520  EC34  F024         	call	i2_lcdInst
 18455                           
 18456                           ;UI.c: 531: printf("LOG 2          <");
 18457  004524  0E80               	movlw	low STR_42
 18458  004526  6E0D               	movwf	i2printf@f,c
 18459  004528  0EFD               	movlw	high STR_42
 18460  00452A  6E0E               	movwf	i2printf@f+1,c
 18461  00452C  EC9A  F00C         	call	i2_printf	;wreg free
 18462                           
 18463                           ;UI.c: 532: lcdInst(0b11000000);;
 18464  004530  0EC0               	movlw	192
 18465  004532  EC34  F024         	call	i2_lcdInst
 18466                           
 18467                           ;UI.c: 533: printf("LOG 3           ");
 18468  004536  0EE7               	movlw	low STR_44
 18469  004538  6E0D               	movwf	i2printf@f,c
 18470  00453A  0EFC               	movlw	high STR_44
 18471  00453C  6E0E               	movwf	i2printf@f+1,c
 18472  00453E  EC9A  F00C         	call	i2_printf	;wreg free
 18473  004542  0012               	return		;funcret
 18474  004544                     __end_of_change_state_to_logs_22:
 18475                           	opt stack 0
 18476                           pclatu	equ	0xFFB
 18477                           pclath	equ	0xFFA
 18478                           tblptru	equ	0xFF8
 18479                           tblptrh	equ	0xFF7
 18480                           tblptrl	equ	0xFF6
 18481                           tablat	equ	0xFF5
 18482                           prodh	equ	0xFF4
 18483                           prodl	equ	0xFF3
 18484                           intcon	equ	0xFF2
 18485                           intcon2	equ	0xFF1
 18486                           intcon3	equ	0xFF0
 18487                           indf0	equ	0xFEF
 18488                           postinc0	equ	0xFEE
 18489                           fsr0h	equ	0xFEA
 18490                           fsr0l	equ	0xFE9
 18491                           wreg	equ	0xFE8
 18492                           postdec1	equ	0xFE5
 18493                           fsr1h	equ	0xFE2
 18494                           fsr1l	equ	0xFE1
 18495                           indf2	equ	0xFDF
 18496                           postinc2	equ	0xFDE
 18497                           postdec2	equ	0xFDD
 18498                           fsr2h	equ	0xFDA
 18499                           fsr2l	equ	0xFD9
 18500                           status	equ	0xFD8
 18501                           
 18502 ;; *************** function _change_state_to_logs_12 *****************
 18503 ;; Defined at:
 18504 ;;		line 521 in file "UI.c"
 18505 ;; Parameters:    Size  Location     Type
 18506 ;;		None
 18507 ;; Auto vars:     Size  Location     Type
 18508 ;;		None
 18509 ;; Return value:  Size  Location     Type
 18510 ;;                  1    wreg      void 
 18511 ;; Registers used:
 18512 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18513 ;; Tracked objects:
 18514 ;;		On entry : 0/0
 18515 ;;		On exit  : 0/0
 18516 ;;		Unchanged: 0/0
 18517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18521 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18522 ;;Total ram usage:        0 bytes
 18523 ;; Hardware stack levels used:    1
 18524 ;; Hardware stack levels required when called:    3
 18525 ;; This function calls:
 18526 ;;		i2_lcdInst
 18527 ;;		i2_printf
 18528 ;; This function is called by:
 18529 ;;		_updateMenu
 18530 ;;		_inputHandler
 18531 ;; This function uses a non-reentrant model
 18532 ;;
 18533                           
 18534                           	psect	text72
 18535  004544                     __ptext72:
 18536                           	opt stack 0
 18537  004544                     _change_state_to_logs_12:
 18538                           	opt stack 18
 18539                           
 18540                           ;UI.c: 522: cur_state = 1012;
 18541                           
 18542                           ;incstack = 0
 18543  004544  0E03               	movlw	3
 18544  004546  0100               	movlb	0	; () banked
 18545  004548  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18546  00454A  0EF4               	movlw	244
 18547  00454C  6FE0               	movwf	_cur_state& (0+255),b
 18548                           
 18549                           ; BSR set to: 0
 18550                           ;UI.c: 523: lcdInst(0b10000000);;
 18551  00454E  0E80               	movlw	128
 18552  004550  EC34  F024         	call	i2_lcdInst
 18553                           
 18554                           ;UI.c: 524: printf("LOG 1           ");
 18555  004554  0EC5               	movlw	low STR_41
 18556  004556  6E0D               	movwf	i2printf@f,c
 18557  004558  0EFC               	movlw	high STR_41
 18558  00455A  6E0E               	movwf	i2printf@f+1,c
 18559  00455C  EC9A  F00C         	call	i2_printf	;wreg free
 18560                           
 18561                           ;UI.c: 525: lcdInst(0b11000000);;
 18562  004560  0EC0               	movlw	192
 18563  004562  EC34  F024         	call	i2_lcdInst
 18564                           
 18565                           ;UI.c: 526: printf("LOG 2          <");
 18566  004566  0E80               	movlw	low STR_42
 18567  004568  6E0D               	movwf	i2printf@f,c
 18568  00456A  0EFD               	movlw	high STR_42
 18569  00456C  6E0E               	movwf	i2printf@f+1,c
 18570  00456E  EC9A  F00C         	call	i2_printf	;wreg free
 18571  004572  0012               	return		;funcret
 18572  004574                     __end_of_change_state_to_logs_12:
 18573                           	opt stack 0
 18574                           pclatu	equ	0xFFB
 18575                           pclath	equ	0xFFA
 18576                           tblptru	equ	0xFF8
 18577                           tblptrh	equ	0xFF7
 18578                           tblptrl	equ	0xFF6
 18579                           tablat	equ	0xFF5
 18580                           prodh	equ	0xFF4
 18581                           prodl	equ	0xFF3
 18582                           intcon	equ	0xFF2
 18583                           intcon2	equ	0xFF1
 18584                           intcon3	equ	0xFF0
 18585                           indf0	equ	0xFEF
 18586                           postinc0	equ	0xFEE
 18587                           fsr0h	equ	0xFEA
 18588                           fsr0l	equ	0xFE9
 18589                           wreg	equ	0xFE8
 18590                           postdec1	equ	0xFE5
 18591                           fsr1h	equ	0xFE2
 18592                           fsr1l	equ	0xFE1
 18593                           indf2	equ	0xFDF
 18594                           postinc2	equ	0xFDE
 18595                           postdec2	equ	0xFDD
 18596                           fsr2h	equ	0xFDA
 18597                           fsr2l	equ	0xFD9
 18598                           status	equ	0xFD8
 18599                           
 18600 ;; *************** function _change_state_to_logs_11 *****************
 18601 ;; Defined at:
 18602 ;;		line 514 in file "UI.c"
 18603 ;; Parameters:    Size  Location     Type
 18604 ;;		None
 18605 ;; Auto vars:     Size  Location     Type
 18606 ;;		None
 18607 ;; Return value:  Size  Location     Type
 18608 ;;                  1    wreg      void 
 18609 ;; Registers used:
 18610 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18611 ;; Tracked objects:
 18612 ;;		On entry : 0/0
 18613 ;;		On exit  : 0/0
 18614 ;;		Unchanged: 0/0
 18615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18619 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18620 ;;Total ram usage:        0 bytes
 18621 ;; Hardware stack levels used:    1
 18622 ;; Hardware stack levels required when called:    3
 18623 ;; This function calls:
 18624 ;;		i2_lcdInst
 18625 ;;		i2_printf
 18626 ;; This function is called by:
 18627 ;;		_updateMenu
 18628 ;;		_inputHandler
 18629 ;; This function uses a non-reentrant model
 18630 ;;
 18631                           
 18632                           	psect	text73
 18633  004574                     __ptext73:
 18634                           	opt stack 0
 18635  004574                     _change_state_to_logs_11:
 18636                           	opt stack 18
 18637                           
 18638                           ;UI.c: 515: cur_state = 1011;
 18639                           
 18640                           ;incstack = 0
 18641  004574  0E03               	movlw	3
 18642  004576  0100               	movlb	0	; () banked
 18643  004578  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18644  00457A  0EF3               	movlw	243
 18645  00457C  6FE0               	movwf	_cur_state& (0+255),b
 18646                           
 18647                           ; BSR set to: 0
 18648                           ;UI.c: 516: lcdInst(0b10000000);;
 18649  00457E  0E80               	movlw	128
 18650  004580  EC34  F024         	call	i2_lcdInst
 18651                           
 18652                           ;UI.c: 517: printf("LOG 1          <");
 18653  004584  0E6F               	movlw	low STR_39
 18654  004586  6E0D               	movwf	i2printf@f,c
 18655  004588  0EFD               	movlw	high STR_39
 18656  00458A  6E0E               	movwf	i2printf@f+1,c
 18657  00458C  EC9A  F00C         	call	i2_printf	;wreg free
 18658                           
 18659                           ;UI.c: 518: lcdInst(0b11000000);;
 18660  004590  0EC0               	movlw	192
 18661  004592  EC34  F024         	call	i2_lcdInst
 18662                           
 18663                           ;UI.c: 519: printf("LOG 2           ");
 18664  004596  0ED6               	movlw	low STR_40
 18665  004598  6E0D               	movwf	i2printf@f,c
 18666  00459A  0EFC               	movlw	high STR_40
 18667  00459C  6E0E               	movwf	i2printf@f+1,c
 18668  00459E  EC9A  F00C         	call	i2_printf	;wreg free
 18669  0045A2  0012               	return		;funcret
 18670  0045A4                     __end_of_change_state_to_logs_11:
 18671                           	opt stack 0
 18672                           pclatu	equ	0xFFB
 18673                           pclath	equ	0xFFA
 18674                           tblptru	equ	0xFF8
 18675                           tblptrh	equ	0xFF7
 18676                           tblptrl	equ	0xFF6
 18677                           tablat	equ	0xFF5
 18678                           prodh	equ	0xFF4
 18679                           prodl	equ	0xFF3
 18680                           intcon	equ	0xFF2
 18681                           intcon2	equ	0xFF1
 18682                           intcon3	equ	0xFF0
 18683                           indf0	equ	0xFEF
 18684                           postinc0	equ	0xFEE
 18685                           fsr0h	equ	0xFEA
 18686                           fsr0l	equ	0xFE9
 18687                           wreg	equ	0xFE8
 18688                           postdec1	equ	0xFE5
 18689                           fsr1h	equ	0xFE2
 18690                           fsr1l	equ	0xFE1
 18691                           indf2	equ	0xFDF
 18692                           postinc2	equ	0xFDE
 18693                           postdec2	equ	0xFDD
 18694                           fsr2h	equ	0xFDA
 18695                           fsr2l	equ	0xFD9
 18696                           status	equ	0xFD8
 18697                           
 18698 ;; *************** function _dispLogs *****************
 18699 ;; Defined at:
 18700 ;;		line 467 in file "UI.c"
 18701 ;; Parameters:    Size  Location     Type
 18702 ;;  myLog           2   17[COMRAM] int 
 18703 ;; Auto vars:     Size  Location     Type
 18704 ;;		None
 18705 ;; Return value:  Size  Location     Type
 18706 ;;                  1    wreg      void 
 18707 ;; Registers used:
 18708 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18709 ;; Tracked objects:
 18710 ;;		On entry : 0/0
 18711 ;;		On exit  : 0/0
 18712 ;;		Unchanged: 0/0
 18713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18714 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18717 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18718 ;;Total ram usage:        2 bytes
 18719 ;; Hardware stack levels used:    1
 18720 ;; Hardware stack levels required when called:    2
 18721 ;; This function calls:
 18722 ;;		_retrieveLog
 18723 ;; This function is called by:
 18724 ;;		_updateMenu
 18725 ;; This function uses a non-reentrant model
 18726 ;;
 18727                           
 18728                           	psect	text74
 18729  00474C                     __ptext74:
 18730                           	opt stack 0
 18731  00474C                     _dispLogs:
 18732                           	opt stack 20
 18733                           
 18734                           ;UI.c: 468: logstate = 1;
 18735                           
 18736                           ;incstack = 0
 18737  00474C  0E00               	movlw	0
 18738  00474E  0100               	movlb	0	; () banked
 18739  004750  6FF7               	movwf	(_logstate+1)& (0+255),b
 18740  004752  0E01               	movlw	1
 18741  004754  6FF6               	movwf	_logstate& (0+255),b
 18742                           
 18743                           ; BSR set to: 0
 18744                           ;UI.c: 469: log = myLog;
 18745  004756  C012  F0E6         	movff	dispLogs@myLog,_log
 18746  00475A  C013  F0E7         	movff	dispLogs@myLog+1,_log+1
 18747                           
 18748                           ; BSR set to: 0
 18749                           ;UI.c: 470: retrieveLog(myLog - 1);
 18750  00475E  0EFF               	movlw	255
 18751  004760  2412               	addwf	dispLogs@myLog,w,c
 18752  004762  6E07               	movwf	retrieveLog@logNum,c
 18753  004764  0EFF               	movlw	255
 18754  004766  2013               	addwfc	dispLogs@myLog+1,w,c
 18755  004768  6E08               	movwf	retrieveLog@logNum+1,c
 18756  00476A  EC1E  F019         	call	_retrieveLog	;wreg free
 18757  00476E  0012               	return		;funcret
 18758  004770                     __end_of_dispLogs:
 18759                           	opt stack 0
 18760                           pclatu	equ	0xFFB
 18761                           pclath	equ	0xFFA
 18762                           tblptru	equ	0xFF8
 18763                           tblptrh	equ	0xFF7
 18764                           tblptrl	equ	0xFF6
 18765                           tablat	equ	0xFF5
 18766                           prodh	equ	0xFF4
 18767                           prodl	equ	0xFF3
 18768                           intcon	equ	0xFF2
 18769                           intcon2	equ	0xFF1
 18770                           intcon3	equ	0xFF0
 18771                           indf0	equ	0xFEF
 18772                           postinc0	equ	0xFEE
 18773                           fsr0h	equ	0xFEA
 18774                           fsr0l	equ	0xFE9
 18775                           wreg	equ	0xFE8
 18776                           postdec1	equ	0xFE5
 18777                           fsr1h	equ	0xFE2
 18778                           fsr1l	equ	0xFE1
 18779                           indf2	equ	0xFDF
 18780                           postinc2	equ	0xFDE
 18781                           postdec2	equ	0xFDD
 18782                           fsr2h	equ	0xFDA
 18783                           fsr2l	equ	0xFD9
 18784                           status	equ	0xFD8
 18785                           
 18786 ;; *************** function _retrieveLog *****************
 18787 ;; Defined at:
 18788 ;;		line 134 in file "EEPROM.c"
 18789 ;; Parameters:    Size  Location     Type
 18790 ;;  logNum          2    6[COMRAM] int 
 18791 ;; Auto vars:     Size  Location     Type
 18792 ;;  i               2   13[COMRAM] int 
 18793 ;;  addr            2   15[COMRAM] unsigned short 
 18794 ;;  byte3           1   12[COMRAM] unsigned char 
 18795 ;;  byte2           1   11[COMRAM] unsigned char 
 18796 ;;  byte1           1   10[COMRAM] unsigned char 
 18797 ;; Return value:  Size  Location     Type
 18798 ;;                  1    wreg      void 
 18799 ;; Registers used:
 18800 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18801 ;; Tracked objects:
 18802 ;;		On entry : 0/0
 18803 ;;		On exit  : 0/0
 18804 ;;		Unchanged: 0/0
 18805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18806 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18807 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18808 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18809 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18810 ;;Total ram usage:       11 bytes
 18811 ;; Hardware stack levels used:    1
 18812 ;; Hardware stack levels required when called:    1
 18813 ;; This function calls:
 18814 ;;		i2_EEPROM_read
 18815 ;;		i2___wmul
 18816 ;; This function is called by:
 18817 ;;		_dispLogs
 18818 ;; This function uses a non-reentrant model
 18819 ;;
 18820                           
 18821                           	psect	text75
 18822  00323C                     __ptext75:
 18823                           	opt stack 0
 18824  00323C                     _retrieveLog:
 18825                           	opt stack 20
 18826                           
 18827                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 18828                           
 18829                           ;incstack = 0
 18830  00323C  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 18831  003240  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 18832  003244  0E00               	movlw	0
 18833  003246  6E04               	movwf	i2___wmul@multiplicand+1,c
 18834  003248  0E0B               	movlw	11
 18835  00324A  6E03               	movwf	i2___wmul@multiplicand,c
 18836  00324C  EC80  F023         	call	i2___wmul	;wreg free
 18837  003250  0E01               	movlw	1
 18838  003252  2401               	addwf	?i2___wmul,w,c
 18839  003254  6E10               	movwf	retrieveLog@addr,c
 18840  003256  0E00               	movlw	0
 18841  003258  2002               	addwfc	?i2___wmul+1,w,c
 18842  00325A  6E11               	movwf	retrieveLog@addr+1,c
 18843                           
 18844                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 18845  00325C  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18846  003260  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18847  003264  EC00  F024         	call	i2_EEPROM_read	;wreg free
 18848  003268  6E0B               	movwf	retrieveLog@byte1,c
 18849                           
 18850                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 18851  00326A  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 18852  00326E  0E80               	movlw	128
 18853  003270  1609               	andwf	??_retrieveLog,f,c
 18854  003272  5009               	movf	??_retrieveLog,w,c
 18855  003274  0100               	movlb	0	; () banked
 18856  003276  6FE8               	movwf	_log_completion& (0+255),b
 18857  003278  6BE9               	clrf	(_log_completion+1)& (0+255),b
 18858                           
 18859                           ; BSR set to: 0
 18860                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 18861  00327A  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 18862  00327E  0E0F               	movlw	15
 18863  003280  1609               	andwf	??_retrieveLog,f,c
 18864  003282  5009               	movf	??_retrieveLog,w,c
 18865  003284  0100               	movlb	0	; () banked
 18866  003286  6FF2               	movwf	_log_count_total& (0+255),b
 18867  003288  6BF3               	clrf	(_log_count_total+1)& (0+255),b
 18868                           
 18869                           ; BSR set to: 0
 18870                           ;EEPROM.c: 146: addr++;
 18871  00328A  4A10               	infsnz	retrieveLog@addr,f,c
 18872  00328C  2A11               	incf	retrieveLog@addr+1,f,c
 18873                           
 18874                           ; BSR set to: 0
 18875                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 18876  00328E  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18877  003292  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18878  003296  EC00  F024         	call	i2_EEPROM_read	;wreg free
 18879  00329A  6E0C               	movwf	retrieveLog@byte2,c
 18880                           
 18881                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)((byte2 & 0b11110000)>> 4);
 18882  00329C  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 18883  0032A0  3A09               	swapf	??_retrieveLog,f,c
 18884  0032A2  0E0F               	movlw	15
 18885  0032A4  1609               	andwf	??_retrieveLog,f,c
 18886  0032A6  0E0F               	movlw	15
 18887  0032A8  1609               	andwf	??_retrieveLog,f,c
 18888  0032AA  5009               	movf	??_retrieveLog,w,c
 18889  0032AC  0100               	movlb	0	; () banked
 18890  0032AE  6FEE               	movwf	_log_count_pop_no_tab& (0+255),b
 18891  0032B0  6BEF               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 18892                           
 18893                           ; BSR set to: 0
 18894                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 18895  0032B2  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 18896  0032B6  0E0F               	movlw	15
 18897  0032B8  1609               	andwf	??_retrieveLog,f,c
 18898  0032BA  5009               	movf	??_retrieveLog,w,c
 18899  0032BC  0100               	movlb	0	; () banked
 18900  0032BE  6FF0               	movwf	_log_count_pop_w_tab& (0+255),b
 18901  0032C0  6BF1               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 18902                           
 18903                           ; BSR set to: 0
 18904                           ;EEPROM.c: 152: addr++;
 18905  0032C2  4A10               	infsnz	retrieveLog@addr,f,c
 18906  0032C4  2A11               	incf	retrieveLog@addr+1,f,c
 18907                           
 18908                           ; BSR set to: 0
 18909                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 18910  0032C6  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18911  0032CA  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18912  0032CE  EC00  F024         	call	i2_EEPROM_read	;wreg free
 18913  0032D2  6E0D               	movwf	retrieveLog@byte3,c
 18914                           
 18915                           ;EEPROM.c: 154: log_count_can_w_lab = (int)((byte3 & 0b11110000)>> 4);
 18916  0032D4  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 18917  0032D8  3A09               	swapf	??_retrieveLog,f,c
 18918  0032DA  0E0F               	movlw	15
 18919  0032DC  1609               	andwf	??_retrieveLog,f,c
 18920  0032DE  0E0F               	movlw	15
 18921  0032E0  1609               	andwf	??_retrieveLog,f,c
 18922  0032E2  5009               	movf	??_retrieveLog,w,c
 18923  0032E4  0100               	movlb	0	; () banked
 18924  0032E6  6FEC               	movwf	_log_count_can_w_lab& (0+255),b
 18925  0032E8  6BED               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 18926                           
 18927                           ; BSR set to: 0
 18928                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 18929  0032EA  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 18930  0032EE  0E0F               	movlw	15
 18931  0032F0  1609               	andwf	??_retrieveLog,f,c
 18932  0032F2  5009               	movf	??_retrieveLog,w,c
 18933  0032F4  0100               	movlb	0	; () banked
 18934  0032F6  6FEA               	movwf	_log_count_can_no_lab& (0+255),b
 18935  0032F8  6BEB               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 18936                           
 18937                           ; BSR set to: 0
 18938                           ;EEPROM.c: 156: addr++;
 18939  0032FA  4A10               	infsnz	retrieveLog@addr,f,c
 18940  0032FC  2A11               	incf	retrieveLog@addr+1,f,c
 18941                           
 18942                           ; BSR set to: 0
 18943                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 18944  0032FE  0E00               	movlw	0
 18945  003300  6E0F               	movwf	retrieveLog@i+1,c
 18946  003302  0E00               	movlw	0
 18947  003304  6E0E               	movwf	retrieveLog@i,c
 18948  003306                     i2l6018:
 18949                           
 18950                           ; BSR set to: 0
 18951  003306  BE0F               	btfsc	retrieveLog@i+1,7,c
 18952  003308  D006               	goto	i2l6022
 18953  00330A  500F               	movf	retrieveLog@i+1,w,c
 18954  00330C  E11E               	bnz	i2l6030
 18955  00330E  0E07               	movlw	7
 18956  003310  5C0E               	subwf	retrieveLog@i,w,c
 18957  003312  B0D8               	btfsc	status,0,c
 18958  003314  D01A               	goto	i2l6030
 18959  003316                     i2l6022:
 18960                           
 18961                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 18962  003316  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18963  00331A  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18964  00331E  EC00  F024         	call	i2_EEPROM_read	;wreg free
 18965  003322  6E09               	movwf	??_retrieveLog& (0+255),c
 18966  003324  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 18967  003326  90D8               	bcf	status,0,c
 18968  003328  340E               	rlcf	retrieveLog@i,w,c
 18969  00332A  6ED9               	movwf	fsr2l,c
 18970  00332C  340F               	rlcf	retrieveLog@i+1,w,c
 18971  00332E  6EDA               	movwf	fsr2h,c
 18972  003330  0E00               	movlw	low _log_startTime
 18973  003332  26D9               	addwf	fsr2l,f,c
 18974  003334  0E01               	movlw	high _log_startTime
 18975  003336  22DA               	addwfc	fsr2h,f,c
 18976  003338  C009  FFDE         	movff	??_retrieveLog,postinc2
 18977  00333C  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 18978                           
 18979                           ;EEPROM.c: 161: addr++;
 18980  003340  4A10               	infsnz	retrieveLog@addr,f,c
 18981  003342  2A11               	incf	retrieveLog@addr+1,f,c
 18982  003344  4A0E               	infsnz	retrieveLog@i,f,c
 18983  003346  2A0F               	incf	retrieveLog@i+1,f,c
 18984  003348  D7DE               	goto	i2l6018
 18985  00334A                     i2l6030:
 18986                           
 18987                           ;EEPROM.c: 162: }
 18988                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 18989  00334A  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18990  00334E  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18991  003352  EC00  F024         	call	i2_EEPROM_read	;wreg free
 18992  003356  6E09               	movwf	??_retrieveLog& (0+255),c
 18993  003358  5009               	movf	??_retrieveLog,w,c
 18994  00335A  0100               	movlb	0	; () banked
 18995  00335C  6FF4               	movwf	_log_total_time& (0+255),b
 18996  00335E  6BF5               	clrf	(_log_total_time+1)& (0+255),b
 18997                           
 18998                           ; BSR set to: 0
 18999  003360  0012               	return		;funcret
 19000  003362                     __end_of_retrieveLog:
 19001                           	opt stack 0
 19002                           pclatu	equ	0xFFB
 19003                           pclath	equ	0xFFA
 19004                           tblptru	equ	0xFF8
 19005                           tblptrh	equ	0xFF7
 19006                           tblptrl	equ	0xFF6
 19007                           tablat	equ	0xFF5
 19008                           prodh	equ	0xFF4
 19009                           prodl	equ	0xFF3
 19010                           intcon	equ	0xFF2
 19011                           intcon2	equ	0xFF1
 19012                           intcon3	equ	0xFF0
 19013                           indf0	equ	0xFEF
 19014                           postinc0	equ	0xFEE
 19015                           fsr0h	equ	0xFEA
 19016                           fsr0l	equ	0xFE9
 19017                           wreg	equ	0xFE8
 19018                           postdec1	equ	0xFE5
 19019                           fsr1h	equ	0xFE2
 19020                           fsr1l	equ	0xFE1
 19021                           indf2	equ	0xFDF
 19022                           postinc2	equ	0xFDE
 19023                           postdec2	equ	0xFDD
 19024                           fsr2h	equ	0xFDA
 19025                           fsr2l	equ	0xFD9
 19026                           status	equ	0xFD8
 19027                           
 19028 ;; *************** function i2_EEPROM_read *****************
 19029 ;; Defined at:
 19030 ;;		line 68 in file "EEPROM.c"
 19031 ;; Parameters:    Size  Location     Type
 19032 ;;  address         2    0[COMRAM] unsigned short 
 19033 ;; Auto vars:     Size  Location     Type
 19034 ;;		None
 19035 ;; Return value:  Size  Location     Type
 19036 ;;                  1    wreg      unsigned char 
 19037 ;; Registers used:
 19038 ;;		wreg, status,2
 19039 ;; Tracked objects:
 19040 ;;		On entry : 0/0
 19041 ;;		On exit  : 0/0
 19042 ;;		Unchanged: 0/0
 19043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19044 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19045 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19047 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19048 ;;Total ram usage:        2 bytes
 19049 ;; Hardware stack levels used:    1
 19050 ;; This function calls:
 19051 ;;		Nothing
 19052 ;; This function is called by:
 19053 ;;		_retrieveLog
 19054 ;; This function uses a non-reentrant model
 19055 ;;
 19056                           
 19057                           	psect	text76
 19058  004800                     __ptext76:
 19059                           	opt stack 0
 19060  004800                     i2_EEPROM_read:
 19061                           	opt stack 20
 19062                           
 19063                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 19064                           
 19065                           ; BSR set to: 0
 19066                           ;incstack = 0
 19067  004800  5002               	movf	i2EEPROM_read@address+1,w,c
 19068  004802  6EAA               	movwf	4010,c	;volatile
 19069                           
 19070                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 19071  004804  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 19072                           
 19073                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 19074  004808  9EA6               	bcf	4006,7,c	;volatile
 19075                           
 19076                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 19077  00480A  9CA6               	bcf	4006,6,c	;volatile
 19078                           
 19079                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 19080  00480C  80A6               	bsf	4006,0,c	;volatile
 19081  00480E                     i2l945:
 19082  00480E  B0A6               	btfsc	4006,0,c	;volatile
 19083  004810  D7FE               	goto	i2l945
 19084                           
 19085                           ;EEPROM.c: 81: return EEDATA;
 19086  004812  50A8               	movf	4008,w,c	;volatile
 19087  004814  0012               	return	
 19088  004816                     __end_ofi2_EEPROM_read:
 19089                           	opt stack 0
 19090                           pclatu	equ	0xFFB
 19091                           pclath	equ	0xFFA
 19092                           tblptru	equ	0xFF8
 19093                           tblptrh	equ	0xFF7
 19094                           tblptrl	equ	0xFF6
 19095                           tablat	equ	0xFF5
 19096                           prodh	equ	0xFF4
 19097                           prodl	equ	0xFF3
 19098                           intcon	equ	0xFF2
 19099                           intcon2	equ	0xFF1
 19100                           intcon3	equ	0xFF0
 19101                           indf0	equ	0xFEF
 19102                           postinc0	equ	0xFEE
 19103                           fsr0h	equ	0xFEA
 19104                           fsr0l	equ	0xFE9
 19105                           wreg	equ	0xFE8
 19106                           postdec1	equ	0xFE5
 19107                           fsr1h	equ	0xFE2
 19108                           fsr1l	equ	0xFE1
 19109                           indf2	equ	0xFDF
 19110                           postinc2	equ	0xFDE
 19111                           postdec2	equ	0xFDD
 19112                           fsr2h	equ	0xFDA
 19113                           fsr2l	equ	0xFD9
 19114                           status	equ	0xFD8
 19115                           
 19116 ;; *************** function _printSortTimer *****************
 19117 ;; Defined at:
 19118 ;;		line 289 in file "sort.c"
 19119 ;; Parameters:    Size  Location     Type
 19120 ;;		None
 19121 ;; Auto vars:     Size  Location     Type
 19122 ;;  i               2   72[COMRAM] int 
 19123 ;;  curTime        14   46[COMRAM] int [7]
 19124 ;;  timeDiff        2   70[COMRAM] unsigned int 
 19125 ;;  sec             2   66[COMRAM] int 
 19126 ;;  min             2   64[COMRAM] int 
 19127 ;;  cur_sec         2   62[COMRAM] unsigned int 
 19128 ;;  start_sec       2   60[COMRAM] unsigned int 
 19129 ;;  hour            2   44[COMRAM] int 
 19130 ;; Return value:  Size  Location     Type
 19131 ;;                  1    wreg      void 
 19132 ;; Registers used:
 19133 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19134 ;; Tracked objects:
 19135 ;;		On entry : 0/0
 19136 ;;		On exit  : 0/0
 19137 ;;		Unchanged: 0/0
 19138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19140 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19141 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19142 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19143 ;;Total ram usage:       33 bytes
 19144 ;; Hardware stack levels used:    1
 19145 ;; Hardware stack levels required when called:    3
 19146 ;; This function calls:
 19147 ;;		i2___lwdiv
 19148 ;;		i2___lwmod
 19149 ;;		i2___wmul
 19150 ;;		i2_getRTC
 19151 ;;		i2_lcdInst
 19152 ;;		i2_printf
 19153 ;; This function is called by:
 19154 ;;		_handler
 19155 ;; This function uses a non-reentrant model
 19156 ;;
 19157                           
 19158                           	psect	text77
 19159  002760                     __ptext77:
 19160                           	opt stack 0
 19161  002760                     _printSortTimer:
 19162                           	opt stack 20
 19163                           
 19164                           ;sort.c: 290: getRTC();
 19165                           
 19166                           ;incstack = 0
 19167  002760  EC99  F01E         	call	i2_getRTC	;wreg free
 19168                           
 19169                           ;sort.c: 291: int curTime[7];
 19170                           ;sort.c: 292: for(int i = 0; i < 7; i++){
 19171  002764  0E00               	movlw	0
 19172  002766  6E4A               	movwf	printSortTimer@i+1,c
 19173  002768  0E00               	movlw	0
 19174  00276A  6E49               	movwf	printSortTimer@i,c
 19175  00276C                     i2l8100:
 19176  00276C  BE4A               	btfsc	printSortTimer@i+1,7,c
 19177  00276E  D006               	goto	i2l8104
 19178  002770  504A               	movf	printSortTimer@i+1,w,c
 19179  002772  E131               	bnz	i2l8110
 19180  002774  0E07               	movlw	7
 19181  002776  5C49               	subwf	printSortTimer@i,w,c
 19182  002778  B0D8               	btfsc	status,0,c
 19183  00277A  D02D               	goto	i2l8110
 19184  00277C                     i2l8104:
 19185                           
 19186                           ;sort.c: 293: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 19187  00277C  0E24               	movlw	low _time
 19188  00277E  2449               	addwf	printSortTimer@i,w,c
 19189  002780  6ED9               	movwf	fsr2l,c
 19190  002782  0E01               	movlw	high _time
 19191  002784  204A               	addwfc	printSortTimer@i+1,w,c
 19192  002786  6EDA               	movwf	fsr2h,c
 19193  002788  50DF               	movf	indf2,w,c
 19194  00278A  6E2A               	movwf	??_printSortTimer& (0+255),c
 19195  00278C  3A2A               	swapf	??_printSortTimer,f,c
 19196  00278E  0E0F               	movlw	15
 19197  002790  162A               	andwf	??_printSortTimer,f,c
 19198  002792  0E0F               	movlw	15
 19199  002794  162A               	andwf	??_printSortTimer,f,c
 19200  002796  502A               	movf	??_printSortTimer,w,c
 19201  002798  0D0A               	mullw	10
 19202  00279A  0E24               	movlw	low _time
 19203  00279C  2449               	addwf	printSortTimer@i,w,c
 19204  00279E  6ED9               	movwf	fsr2l,c
 19205  0027A0  0E01               	movlw	high _time
 19206  0027A2  204A               	addwfc	printSortTimer@i+1,w,c
 19207  0027A4  6EDA               	movwf	fsr2h,c
 19208  0027A6  50DF               	movf	indf2,w,c
 19209  0027A8  0B0F               	andlw	15
 19210  0027AA  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 19211  0027AC  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 19212  0027AE  50F3               	movf	prodl,w,c
 19213  0027B0  262B               	addwf	??_printSortTimer+1,f,c
 19214  0027B2  50F4               	movf	prodh,w,c
 19215  0027B4  222C               	addwfc	??_printSortTimer+2,f,c
 19216  0027B6  90D8               	bcf	status,0,c
 19217  0027B8  3449               	rlcf	printSortTimer@i,w,c
 19218  0027BA  6ED9               	movwf	fsr2l,c
 19219  0027BC  344A               	rlcf	printSortTimer@i+1,w,c
 19220  0027BE  6EDA               	movwf	fsr2h,c
 19221  0027C0  0E2F               	movlw	low printSortTimer@curTime
 19222  0027C2  26D9               	addwf	fsr2l,f,c
 19223  0027C4  0E00               	movlw	high printSortTimer@curTime
 19224  0027C6  22DA               	addwfc	fsr2h,f,c
 19225  0027C8  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 19226  0027CC  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 19227  0027D0  4A49               	infsnz	printSortTimer@i,f,c
 19228  0027D2  2A4A               	incf	printSortTimer@i+1,f,c
 19229  0027D4  D7CB               	goto	i2l8100
 19230  0027D6                     i2l8110:
 19231                           
 19232                           ;sort.c: 294: }
 19233                           ;sort.c: 295: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 19234  0027D6  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 19235  0027DA  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 19236  0027DE  0E00               	movlw	0
 19237  0027E0  6E04               	movwf	i2___wmul@multiplicand+1,c
 19238  0027E2  0E3C               	movlw	60
 19239  0027E4  6E03               	movwf	i2___wmul@multiplicand,c
 19240  0027E6  EC80  F023         	call	i2___wmul	;wreg free
 19241  0027EA  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 19242  0027EE  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 19243  0027F2  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 19244  0027F6  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 19245  0027FA  0E0E               	movlw	14
 19246  0027FC  6E04               	movwf	i2___wmul@multiplicand+1,c
 19247  0027FE  0E10               	movlw	16
 19248  002800  6E03               	movwf	i2___wmul@multiplicand,c
 19249  002802  EC80  F023         	call	i2___wmul	;wreg free
 19250  002806  5001               	movf	?i2___wmul,w,c
 19251  002808  262A               	addwf	??_printSortTimer,f,c
 19252  00280A  5002               	movf	?i2___wmul+1,w,c
 19253  00280C  222B               	addwfc	??_printSortTimer+1,f,c
 19254  00280E  0101               	movlb	1	; () banked
 19255  002810  510E               	movf	_startTime& (0+255),w,b
 19256  002812  242A               	addwf	??_printSortTimer,w,c
 19257  002814  6E3D               	movwf	printSortTimer@start_sec,c
 19258  002816  0101               	movlb	1	; () banked
 19259  002818  510F               	movf	(_startTime+1)& (0+255),w,b
 19260  00281A  202B               	addwfc	??_printSortTimer+1,w,c
 19261  00281C  6E3E               	movwf	printSortTimer@start_sec+1,c
 19262                           
 19263                           ;sort.c: 296: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 19264  00281E  C031  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 19265  002822  C032  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 19266  002826  0E00               	movlw	0
 19267  002828  6E04               	movwf	i2___wmul@multiplicand+1,c
 19268  00282A  0E3C               	movlw	60
 19269  00282C  6E03               	movwf	i2___wmul@multiplicand,c
 19270  00282E  EC80  F023         	call	i2___wmul	;wreg free
 19271  002832  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 19272  002836  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 19273  00283A  C033  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 19274  00283E  C034  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 19275  002842  0E0E               	movlw	14
 19276  002844  6E04               	movwf	i2___wmul@multiplicand+1,c
 19277  002846  0E10               	movlw	16
 19278  002848  6E03               	movwf	i2___wmul@multiplicand,c
 19279  00284A  EC80  F023         	call	i2___wmul	;wreg free
 19280  00284E  5001               	movf	?i2___wmul,w,c
 19281  002850  262A               	addwf	??_printSortTimer,f,c
 19282  002852  5002               	movf	?i2___wmul+1,w,c
 19283  002854  222B               	addwfc	??_printSortTimer+1,f,c
 19284  002856  502F               	movf	printSortTimer@curTime,w,c
 19285  002858  242A               	addwf	??_printSortTimer,w,c
 19286  00285A  6E3F               	movwf	printSortTimer@cur_sec,c
 19287  00285C  5030               	movf	printSortTimer@curTime+1,w,c
 19288  00285E  202B               	addwfc	??_printSortTimer+1,w,c
 19289  002860  6E40               	movwf	printSortTimer@cur_sec+1,c
 19290                           
 19291                           ;sort.c: 297: unsigned int timeDiff = cur_sec - start_sec;
 19292  002862  C03D  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 19293  002866  C03E  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 19294  00286A  1E2A               	comf	??_printSortTimer,f,c
 19295  00286C  1E2B               	comf	??_printSortTimer+1,f,c
 19296  00286E  4A2A               	infsnz	??_printSortTimer,f,c
 19297  002870  2A2B               	incf	??_printSortTimer+1,f,c
 19298  002872  503F               	movf	printSortTimer@cur_sec,w,c
 19299  002874  242A               	addwf	??_printSortTimer,w,c
 19300  002876  6E47               	movwf	printSortTimer@timeDiff,c
 19301  002878  5040               	movf	printSortTimer@cur_sec+1,w,c
 19302  00287A  202B               	addwfc	??_printSortTimer+1,w,c
 19303  00287C  6E48               	movwf	printSortTimer@timeDiff+1,c
 19304                           
 19305                           ;sort.c: 299: total_time = timeDiff;
 19306  00287E  C047  F0F8         	movff	printSortTimer@timeDiff,_total_time
 19307  002882  C048  F0F9         	movff	printSortTimer@timeDiff+1,_total_time+1
 19308                           
 19309                           ;sort.c: 301: if(timeDiff >= 179){
 19310  002886  5048               	movf	printSortTimer@timeDiff+1,w,c
 19311  002888  E104               	bnz	i2u696_40
 19312  00288A  0EB3               	movlw	179
 19313  00288C  5C47               	subwf	printSortTimer@timeDiff,w,c
 19314  00288E  A0D8               	btfss	status,0,c
 19315  002890  D003               	goto	i2l8120
 19316  002892                     i2u696_40:
 19317                           
 19318                           ;sort.c: 302: machine_state = DoneSorting_state;
 19319  002892  0E02               	movlw	2
 19320  002894  0100               	movlb	0	; () banked
 19321  002896  6FFC               	movwf	_machine_state& (0+255),b
 19322  002898                     i2l8120:
 19323                           
 19324                           ;sort.c: 304: }
 19325                           ;sort.c: 306: int hour = timeDiff / 3600;
 19326  002898  C047  F006         	movff	printSortTimer@timeDiff,i2___lwdiv@dividend
 19327  00289C  C048  F007         	movff	printSortTimer@timeDiff+1,i2___lwdiv@dividend+1
 19328  0028A0  0E0E               	movlw	14
 19329  0028A2  6E09               	movwf	i2___lwdiv@divisor+1,c
 19330  0028A4  0E10               	movlw	16
 19331  0028A6  6E08               	movwf	i2___lwdiv@divisor,c
 19332  0028A8  EC7A  F020         	call	i2___lwdiv	;wreg free
 19333  0028AC  C006  F02D         	movff	?i2___lwdiv,printSortTimer@hour
 19334  0028B0  C007  F02E         	movff	?i2___lwdiv+1,printSortTimer@hour+1
 19335                           
 19336                           ;sort.c: 307: int min = (timeDiff % 3600) / 60;
 19337  0028B4  0E0E               	movlw	14
 19338  0028B6  6E04               	movwf	i2___lwmod@divisor+1,c
 19339  0028B8  0E10               	movlw	16
 19340  0028BA  6E03               	movwf	i2___lwmod@divisor,c
 19341  0028BC  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 19342  0028C0  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 19343  0028C4  EC39  F021         	call	i2___lwmod	;wreg free
 19344  0028C8  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 19345  0028CC  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 19346  0028D0  0E00               	movlw	0
 19347  0028D2  6E09               	movwf	i2___lwdiv@divisor+1,c
 19348  0028D4  0E3C               	movlw	60
 19349  0028D6  6E08               	movwf	i2___lwdiv@divisor,c
 19350  0028D8  EC7A  F020         	call	i2___lwdiv	;wreg free
 19351  0028DC  C006  F041         	movff	?i2___lwdiv,printSortTimer@min
 19352  0028E0  C007  F042         	movff	?i2___lwdiv+1,printSortTimer@min+1
 19353                           
 19354                           ;sort.c: 308: int sec = (timeDiff % 3600) % 60;
 19355  0028E4  0E0E               	movlw	14
 19356  0028E6  6E04               	movwf	i2___lwmod@divisor+1,c
 19357  0028E8  0E10               	movlw	16
 19358  0028EA  6E03               	movwf	i2___lwmod@divisor,c
 19359  0028EC  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 19360  0028F0  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 19361  0028F4  EC39  F021         	call	i2___lwmod	;wreg free
 19362  0028F8  C001  F045         	movff	?i2___lwmod,_printSortTimer$2424
 19363  0028FC  C002  F046         	movff	?i2___lwmod+1,_printSortTimer$2424+1
 19364                           
 19365                           ;sort.c: 308: int sec = (timeDiff % 3600) % 60;
 19366  002900  C045  F001         	movff	_printSortTimer$2424,i2___lwmod@dividend
 19367  002904  C046  F002         	movff	_printSortTimer$2424+1,i2___lwmod@dividend+1
 19368  002908  0E00               	movlw	0
 19369  00290A  6E04               	movwf	i2___lwmod@divisor+1,c
 19370  00290C  0E3C               	movlw	60
 19371  00290E  6E03               	movwf	i2___lwmod@divisor,c
 19372  002910  EC39  F021         	call	i2___lwmod	;wreg free
 19373  002914  C001  F043         	movff	?i2___lwmod,printSortTimer@sec
 19374  002918  C002  F044         	movff	?i2___lwmod+1,printSortTimer@sec+1
 19375                           
 19376                           ;sort.c: 310: lcdInst(0b10000000);;
 19377  00291C  0E80               	movlw	128
 19378  00291E  EC34  F024         	call	i2_lcdInst
 19379                           
 19380                           ;sort.c: 311: printf("SORTING...");
 19381  002922  0E7C               	movlw	low STR_64
 19382  002924  6E0D               	movwf	i2printf@f,c
 19383  002926  0EFF               	movlw	high STR_64
 19384  002928  6E0E               	movwf	i2printf@f+1,c
 19385  00292A  EC9A  F00C         	call	i2_printf	;wreg free
 19386                           
 19387                           ;sort.c: 312: lcdInst(0b11000000);;
 19388  00292E  0EC0               	movlw	192
 19389  002930  EC34  F024         	call	i2_lcdInst
 19390                           
 19391                           ;sort.c: 313: printf("TIME %d:%02d", min, sec);
 19392  002934  0E42               	movlw	low STR_65
 19393  002936  6E0D               	movwf	i2printf@f,c
 19394  002938  0EFF               	movlw	high STR_65
 19395  00293A  6E0E               	movwf	i2printf@f+1,c
 19396  00293C  C041  F00F         	movff	printSortTimer@min,?i2_printf+2
 19397  002940  C042  F010         	movff	printSortTimer@min+1,?i2_printf+3
 19398  002944  C043  F011         	movff	printSortTimer@sec,?i2_printf+4
 19399  002948  C044  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 19400  00294C  EC9A  F00C         	call	i2_printf	;wreg free
 19401  002950  0012               	return		;funcret
 19402  002952                     __end_of_printSortTimer:
 19403                           	opt stack 0
 19404                           pclatu	equ	0xFFB
 19405                           pclath	equ	0xFFA
 19406                           tblptru	equ	0xFF8
 19407                           tblptrh	equ	0xFF7
 19408                           tblptrl	equ	0xFF6
 19409                           tablat	equ	0xFF5
 19410                           prodh	equ	0xFF4
 19411                           prodl	equ	0xFF3
 19412                           intcon	equ	0xFF2
 19413                           intcon2	equ	0xFF1
 19414                           intcon3	equ	0xFF0
 19415                           indf0	equ	0xFEF
 19416                           postinc0	equ	0xFEE
 19417                           fsr0h	equ	0xFEA
 19418                           fsr0l	equ	0xFE9
 19419                           wreg	equ	0xFE8
 19420                           postdec1	equ	0xFE5
 19421                           fsr1h	equ	0xFE2
 19422                           fsr1l	equ	0xFE1
 19423                           indf2	equ	0xFDF
 19424                           postinc2	equ	0xFDE
 19425                           postdec2	equ	0xFDD
 19426                           fsr2h	equ	0xFDA
 19427                           fsr2l	equ	0xFD9
 19428                           status	equ	0xFD8
 19429                           
 19430 ;; *************** function i2_printf *****************
 19431 ;; Defined at:
 19432 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 19433 ;; Parameters:    Size  Location     Type
 19434 ;;  f               2   12[COMRAM] PTR const unsigned char 
 19435 ;;		 -> STR_117(18), STR_116(18), STR_115(17), STR_114(17), 
 19436 ;;		 -> STR_113(11), STR_112(18), STR_111(18), STR_110(17), 
 19437 ;;		 -> STR_109(15), STR_108(15), STR_107(15), STR_106(17), 
 19438 ;;		 -> STR_105(17), STR_104(17), STR_103(16), STR_102(17), 
 19439 ;;		 -> STR_101(17), STR_100(17), STR_99(17), STR_98(17), 
 19440 ;;		 -> STR_97(17), STR_96(15), STR_95(11), STR_94(17), 
 19441 ;;		 -> STR_93(11), STR_92(17), STR_91(14), STR_90(15), 
 19442 ;;		 -> STR_89(14), STR_88(10), STR_87(9), STR_86(9), 
 19443 ;;		 -> STR_85(10), STR_84(10), STR_83(16), STR_82(15), 
 19444 ;;		 -> STR_81(3), STR_80(15), STR_79(13), STR_78(14), 
 19445 ;;		 -> STR_77(8), STR_76(14), STR_75(15), STR_74(12), 
 19446 ;;		 -> STR_73(14), STR_72(17), STR_71(14), STR_70(15), 
 19447 ;;		 -> STR_69(17), STR_68(17), STR_67(7), STR_66(21), 
 19448 ;;		 -> STR_65(13), STR_64(11), STR_63(24), STR_50(17), 
 19449 ;;		 -> STR_49(17), STR_48(17), STR_47(17), STR_46(17), 
 19450 ;;		 -> STR_45(17), STR_44(17), STR_43(17), STR_42(17), 
 19451 ;;		 -> STR_41(17), STR_40(17), STR_39(17), STR_38(17), 
 19452 ;;		 -> STR_37(17), STR_36(17), STR_35(17), STR_34(17), 
 19453 ;;		 -> STR_33(17), STR_32(17), STR_31(17), STR_30(17), 
 19454 ;;		 -> STR_29(3), STR_28(17), STR_27(17), STR_26(17), 
 19455 ;;		 -> STR_25(17), STR_24(17), STR_23(14), STR_22(10), 
 19456 ;;		 -> STR_21(24), STR_7(7), STR_6(17), STR_5(18), 
 19457 ;;		 -> STR_4(16), STR_3(18), STR_2(14), STR_1(18), 
 19458 ;; Auto vars:     Size  Location     Type
 19459 ;;  printf          4    0        struct .
 19460 ;;  printf          2   39[COMRAM] int 
 19461 ;;  printf          2   35[COMRAM] unsigned int 
 19462 ;;  printf          2   33[COMRAM] unsigned int 
 19463 ;;  printf          2   31[COMRAM] PTR void [1]
 19464 ;;		 -> ?i2_printf(2), ?_printf(2), 
 19465 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 19466 ;;		 -> STR_118(7), count_total(2), printRTC@month(4), UI@month(4), 
 19467 ;;  printf          1   38[COMRAM] char 
 19468 ;;  printf          1   37[COMRAM] unsigned char 
 19469 ;;  printf          1   28[COMRAM] char 
 19470 ;; Return value:  Size  Location     Type
 19471 ;;                  2   12[COMRAM] int 
 19472 ;; Registers used:
 19473 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19474 ;; Tracked objects:
 19475 ;;		On entry : 0/0
 19476 ;;		On exit  : 0/0
 19477 ;;		Unchanged: 0/0
 19478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19479 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19480 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19481 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19482 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19483 ;;Total ram usage:       29 bytes
 19484 ;; Hardware stack levels used:    1
 19485 ;; Hardware stack levels required when called:    2
 19486 ;; This function calls:
 19487 ;;		i2___lwdiv
 19488 ;;		i2___lwmod
 19489 ;;		i2___wmul
 19490 ;;		i2_isdigit
 19491 ;;		i2_putch
 19492 ;; This function is called by:
 19493 ;;		_change_state_to_menu_11
 19494 ;;		_change_state_to_menu_23
 19495 ;;		_change_state_to_logs_11
 19496 ;;		_change_state_to_logs_12
 19497 ;;		_change_state_to_logs_22
 19498 ;;		_change_state_to_logs_23
 19499 ;;		_change_state_to_logs_33
 19500 ;;		_change_state_to_logs_34
 19501 ;;		_printSortTimer
 19502 ;;		i2_change_state_to_menu_start
 19503 ;;		i2_change_state_to_menu_12
 19504 ;;		i2_change_state_to_menu_22
 19505 ;;		i2_printRTC
 19506 ;; This function uses a non-reentrant model
 19507 ;;
 19508                           
 19509                           	psect	text78
 19510  001934                     __ptext78:
 19511                           	opt stack 0
 19512  001934                     i2_printf:
 19513                           	opt stack 19
 19514                           
 19515                           ;doprnt.c: 466: va_list ap;
 19516                           ;doprnt.c: 499: signed char c;
 19517                           ;doprnt.c: 501: int width;
 19518                           ;doprnt.c: 506: signed char prec;
 19519                           ;doprnt.c: 508: unsigned char flag;
 19520                           ;doprnt.c: 523: union {
 19521                           ;doprnt.c: 524: unsigned long vd;
 19522                           ;doprnt.c: 525: double integ;
 19523                           ;doprnt.c: 526: } tmpval;
 19524                           ;doprnt.c: 528: unsigned int val;
 19525                           ;doprnt.c: 529: unsigned len;
 19526                           ;doprnt.c: 530: const char * cp;
 19527                           ;doprnt.c: 533: *ap = __va_start();
 19528                           
 19529                           ;incstack = 0
 19530  001934  0E0F               	movlw	low (?i2_printf+2)
 19531  001936  6E20               	movwf	i2printf@ap,c
 19532  001938  0E00               	movlw	high (?i2_printf+2)
 19533  00193A  6E21               	movwf	i2printf@ap+1,c
 19534                           
 19535                           ;doprnt.c: 536: while(c = *f++) {
 19536  00193C  D1A4               	goto	i2l5842
 19537  00193E                     i2l5712:
 19538                           
 19539                           ;doprnt.c: 538: if(c != '%')
 19540  00193E  0E25               	movlw	37
 19541  001940  1827               	xorwf	i2printf@c,w,c
 19542  001942  B4D8               	btfsc	status,2,c
 19543  001944  D004               	goto	i2l5716
 19544                           
 19545                           ;doprnt.c: 540: {
 19546                           ;doprnt.c: 541: (putch(c) );
 19547  001946  5027               	movf	i2printf@c,w,c
 19548  001948  EC2E  F024         	call	i2_putch
 19549                           
 19550                           ;doprnt.c: 542: continue;
 19551  00194C  D19C               	goto	i2l5842
 19552  00194E                     i2l5716:
 19553                           
 19554                           ;doprnt.c: 543: }
 19555                           ;doprnt.c: 546: width = 0;
 19556  00194E  0E00               	movlw	0
 19557  001950  6E29               	movwf	i2printf@width+1,c
 19558  001952  0E00               	movlw	0
 19559  001954  6E28               	movwf	i2printf@width,c
 19560                           
 19561                           ;doprnt.c: 548: flag = 0;
 19562  001956  0E00               	movlw	0
 19563  001958  6E26               	movwf	i2printf@flag,c
 19564                           
 19565                           ;doprnt.c: 551: switch(*f) {
 19566                           
 19567                           ;doprnt.c: 550: for(;;) {
 19568  00195A  D003               	goto	i2l5722
 19569  00195C                     i2l5718:
 19570                           
 19571                           ;doprnt.c: 580: flag |= 0x04;
 19572  00195C  8426               	bsf	i2printf@flag,2,c
 19573                           
 19574                           ;doprnt.c: 581: f++;
 19575  00195E  4A0D               	infsnz	i2printf@f,f,c
 19576  001960  2A0E               	incf	i2printf@f+1,f,c
 19577  001962                     i2l5722:
 19578  001962  C00D  FFF6         	movff	i2printf@f,tblptrl
 19579  001966  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19580  00196A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19581  00196A  6AF8               	clrf	tblptru,c
 19582  00196C                     	endif
 19583  00196C                     	if	0	;tblptru may be non-zero
 19584  00196C                     	endif
 19585  00196C  0008               	tblrd		*
 19586  00196E  50F5               	movf	tablat,w,c
 19587                           
 19588                           ; Switch size 1, requested type "space"
 19589                           ; Number of cases is 1, Range of values is 48 to 48
 19590                           ; switch strategies available:
 19591                           ; Name         Instructions Cycles
 19592                           ; simple_byte            4     3 (average)
 19593                           ;	Chosen strategy is simple_byte
 19594  001970  0A30               	xorlw	48	; case 48
 19595  001972  B4D8               	btfsc	status,2,c
 19596  001974  D7F3               	goto	i2l5718
 19597                           
 19598                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 19599                           
 19600                           ;doprnt.c: 586: }
 19601                           
 19602                           ;doprnt.c: 585: break;
 19603  001976  C00D  FFF6         	movff	i2printf@f,tblptrl
 19604  00197A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19605  00197E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19606  00197E  6AF8               	clrf	tblptru,c
 19607  001980                     	endif
 19608  001980                     	if	0	;tblptru may be non-zero
 19609  001980                     	endif
 19610  001980  0008               	tblrd		*
 19611  001982  50F5               	movf	tablat,w,c
 19612  001984  ECDA  F023         	call	i2_isdigit
 19613  001988  A0D8               	btfss	status,0,c
 19614  00198A  D0A6               	goto	i2l5770
 19615                           
 19616                           ;doprnt.c: 598: width = 0;
 19617  00198C  0E00               	movlw	0
 19618  00198E  6E29               	movwf	i2printf@width+1,c
 19619  001990  0E00               	movlw	0
 19620  001992  6E28               	movwf	i2printf@width,c
 19621  001994                     i2l5728:
 19622                           
 19623                           ;doprnt.c: 600: width *= 10;
 19624  001994  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 19625  001998  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 19626  00199C  0E00               	movlw	0
 19627  00199E  6E04               	movwf	i2___wmul@multiplicand+1,c
 19628  0019A0  0E0A               	movlw	10
 19629  0019A2  6E03               	movwf	i2___wmul@multiplicand,c
 19630  0019A4  EC80  F023         	call	i2___wmul	;wreg free
 19631  0019A8  C001  F028         	movff	?i2___wmul,i2printf@width
 19632  0019AC  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 19633                           
 19634                           ;doprnt.c: 601: width += *f++ - '0';
 19635  0019B0  0ED0               	movlw	208
 19636  0019B2  6E19               	movwf	??i2_printf& (0+255),c
 19637  0019B4  0EFF               	movlw	255
 19638  0019B6  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 19639  0019B8  C00D  FFF6         	movff	i2printf@f,tblptrl
 19640  0019BC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19641  0019C0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19642  0019C0  6AF8               	clrf	tblptru,c
 19643  0019C2                     	endif
 19644  0019C2                     	if	0	;tblptru may be non-zero
 19645  0019C2                     	endif
 19646  0019C2  0008               	tblrd		*
 19647  0019C4  50F5               	movf	tablat,w,c
 19648  0019C6  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 19649  0019C8  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 19650  0019CA  5019               	movf	??i2_printf,w,c
 19651  0019CC  261B               	addwf	??i2_printf+2,f,c
 19652  0019CE  501A               	movf	??i2_printf+1,w,c
 19653  0019D0  221C               	addwfc	??i2_printf+3,f,c
 19654  0019D2  501B               	movf	??i2_printf+2,w,c
 19655  0019D4  2628               	addwf	i2printf@width,f,c
 19656  0019D6  501C               	movf	??i2_printf+3,w,c
 19657  0019D8  2229               	addwfc	i2printf@width+1,f,c
 19658  0019DA  4A0D               	infsnz	i2printf@f,f,c
 19659  0019DC  2A0E               	incf	i2printf@f+1,f,c
 19660                           
 19661                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 19662  0019DE  C00D  FFF6         	movff	i2printf@f,tblptrl
 19663  0019E2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19664  0019E6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19665  0019E6  6AF8               	clrf	tblptru,c
 19666  0019E8                     	endif
 19667  0019E8                     	if	0	;tblptru may be non-zero
 19668  0019E8                     	endif
 19669  0019E8  0008               	tblrd		*
 19670  0019EA  50F5               	movf	tablat,w,c
 19671  0019EC  ECDA  F023         	call	i2_isdigit
 19672  0019F0  A0D8               	btfss	status,0,c
 19673  0019F2  D072               	goto	i2l5770
 19674  0019F4  D7CF               	goto	i2l5728
 19675  0019F6                     i2l5736:
 19676                           
 19677                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 19678  0019F6  C020  FFD9         	movff	i2printf@ap,fsr2l
 19679  0019FA  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 19680  0019FE  CFDE F01E          	movff	postinc2,i2printf@cp
 19681  001A02  CFDD F01F          	movff	postdec2,i2printf@cp+1
 19682  001A06  0E02               	movlw	2
 19683  001A08  2620               	addwf	i2printf@ap,f,c
 19684  001A0A  0E00               	movlw	0
 19685  001A0C  2221               	addwfc	i2printf@ap+1,f,c
 19686                           
 19687                           ;doprnt.c: 740: if(!cp)
 19688  001A0E  501E               	movf	i2printf@cp,w,c
 19689  001A10  101F               	iorwf	i2printf@cp+1,w,c
 19690  001A12  A4D8               	btfss	status,2,c
 19691  001A14  D004               	goto	i2l5744
 19692                           
 19693                           ;doprnt.c: 741: cp = "(null)";
 19694  001A16  0EB6               	movlw	low STR_118
 19695  001A18  6E1E               	movwf	i2printf@cp,c
 19696  001A1A  0EFF               	movlw	high STR_118
 19697  001A1C  6E1F               	movwf	i2printf@cp+1,c
 19698  001A1E                     i2l5744:
 19699                           
 19700                           ;doprnt.c: 745: len = 0;
 19701  001A1E  0E00               	movlw	0
 19702  001A20  6E23               	movwf	i2printf@len+1,c
 19703  001A22  0E00               	movlw	0
 19704  001A24  6E22               	movwf	i2printf@len,c
 19705                           
 19706                           ;doprnt.c: 746: while(cp[len])
 19707  001A26  D002               	goto	i2l5748
 19708  001A28                     i2l5746:
 19709                           
 19710                           ;doprnt.c: 747: len++;
 19711  001A28  4A22               	infsnz	i2printf@len,f,c
 19712  001A2A  2A23               	incf	i2printf@len+1,f,c
 19713  001A2C                     i2l5748:
 19714  001A2C  5022               	movf	i2printf@len,w,c
 19715  001A2E  241E               	addwf	i2printf@cp,w,c
 19716  001A30  6E19               	movwf	??i2_printf& (0+255),c
 19717  001A32  5023               	movf	i2printf@len+1,w,c
 19718  001A34  201F               	addwfc	i2printf@cp+1,w,c
 19719  001A36  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 19720  001A38  C019  FFF6         	movff	??i2_printf,tblptrl
 19721  001A3C  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 19722  001A40  0E00               	movlw	low (__mediumconst shr (0+16))
 19723  001A42  6EF8               	movwf	tblptru,c
 19724  001A44  0E0F               	movlw	(high __ramtop+-1)
 19725  001A46  64F7               	cpfsgt	tblptrh,c
 19726  001A48  D003               	bra	i2u426_47
 19727  001A4A  0008               	tblrd		*
 19728  001A4C  50F5               	movf	tablat,w,c
 19729  001A4E  D005               	bra	i2u426_40
 19730  001A50                     i2u426_47:
 19731  001A50  CFF6 FFE9          	movff	tblptrl,fsr0l
 19732  001A54  CFF7 FFEA          	movff	tblptrh,fsr0h
 19733  001A58  50EF               	movf	indf0,w,c
 19734  001A5A                     i2u426_40:
 19735  001A5A  0900               	iorlw	0
 19736  001A5C  A4D8               	btfss	status,2,c
 19737  001A5E  D7E4               	goto	i2l5746
 19738                           
 19739                           ;doprnt.c: 757: if(width > len)
 19740  001A60  5028               	movf	i2printf@width,w,c
 19741  001A62  5C22               	subwf	i2printf@len,w,c
 19742  001A64  5029               	movf	i2printf@width+1,w,c
 19743  001A66  5823               	subwfb	i2printf@len+1,w,c
 19744  001A68  B0D8               	btfsc	status,0,c
 19745  001A6A  D005               	goto	i2l5754
 19746                           
 19747                           ;doprnt.c: 758: width -= len;
 19748  001A6C  5022               	movf	i2printf@len,w,c
 19749  001A6E  5E28               	subwf	i2printf@width,f,c
 19750  001A70  5023               	movf	i2printf@len+1,w,c
 19751  001A72  5A29               	subwfb	i2printf@width+1,f,c
 19752  001A74  D008               	goto	i2l5758
 19753  001A76                     i2l5754:
 19754                           
 19755                           ;doprnt.c: 759: else
 19756                           ;doprnt.c: 760: width = 0;
 19757  001A76  0E00               	movlw	0
 19758  001A78  6E29               	movwf	i2printf@width+1,c
 19759  001A7A  0E00               	movlw	0
 19760  001A7C  6E28               	movwf	i2printf@width,c
 19761                           
 19762                           ;doprnt.c: 764: while(width--)
 19763  001A7E  D003               	goto	i2l5758
 19764  001A80                     i2l5756:
 19765                           
 19766                           ;doprnt.c: 765: (putch(' ') );
 19767  001A80  0E20               	movlw	32
 19768  001A82  EC2E  F024         	call	i2_putch
 19769  001A86                     i2l5758:
 19770  001A86  0628               	decf	i2printf@width,f,c
 19771  001A88  A0D8               	btfss	status,0,c
 19772  001A8A  0629               	decf	i2printf@width+1,f,c
 19773  001A8C  2828               	incf	i2printf@width,w,c
 19774  001A8E  E1F8               	bnz	i2l5756
 19775  001A90  2829               	incf	i2printf@width+1,w,c
 19776  001A92  B4D8               	btfsc	status,2,c
 19777  001A94  D016               	goto	i2l5764
 19778  001A96  D7F4               	goto	i2l5756
 19779  001A98                     i2l5760:
 19780                           
 19781                           ;doprnt.c: 768: (putch(*cp++) );
 19782  001A98  C01E  FFF6         	movff	i2printf@cp,tblptrl
 19783  001A9C  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 19784  001AA0  0E00               	movlw	low (__mediumconst shr (0+16))
 19785  001AA2  6EF8               	movwf	tblptru,c
 19786  001AA4  0E0F               	movlw	(high __ramtop+-1)
 19787  001AA6  64F7               	cpfsgt	tblptrh,c
 19788  001AA8  D003               	bra	i2u430_47
 19789  001AAA  0008               	tblrd		*
 19790  001AAC  50F5               	movf	tablat,w,c
 19791  001AAE  D005               	bra	i2u430_40
 19792  001AB0                     i2u430_47:
 19793  001AB0  CFF6 FFE9          	movff	tblptrl,fsr0l
 19794  001AB4  CFF7 FFEA          	movff	tblptrh,fsr0h
 19795  001AB8  50EF               	movf	indf0,w,c
 19796  001ABA                     i2u430_40:
 19797  001ABA  EC2E  F024         	call	i2_putch
 19798  001ABE  4A1E               	infsnz	i2printf@cp,f,c
 19799  001AC0  2A1F               	incf	i2printf@cp+1,f,c
 19800  001AC2                     i2l5764:
 19801  001AC2  0622               	decf	i2printf@len,f,c
 19802  001AC4  A0D8               	btfss	status,0,c
 19803  001AC6  0623               	decf	i2printf@len+1,f,c
 19804  001AC8  2822               	incf	i2printf@len,w,c
 19805  001ACA  E1E6               	bnz	i2l5760
 19806  001ACC  2823               	incf	i2printf@len+1,w,c
 19807  001ACE  B4D8               	btfsc	status,2,c
 19808  001AD0  D0DA               	goto	i2l5842
 19809  001AD2  D7E2               	goto	i2l5760
 19810  001AD4                     i2l5766:
 19811                           
 19812                           ;doprnt.c: 818: flag |= 0x40;
 19813  001AD4  8C26               	bsf	i2printf@flag,6,c
 19814                           
 19815                           ;doprnt.c: 822: }
 19816                           
 19817                           ;doprnt.c: 819: break;
 19818  001AD6  D01B               	goto	i2l1276
 19819  001AD8                     i2l5770:
 19820  001AD8  C00D  FFF6         	movff	i2printf@f,tblptrl
 19821  001ADC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19822  001AE0  4A0D               	infsnz	i2printf@f,f,c
 19823  001AE2  2A0E               	incf	i2printf@f+1,f,c
 19824  001AE4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19825  001AE4  6AF8               	clrf	tblptru,c
 19826  001AE6                     	endif
 19827  001AE6                     	if	0	;tblptru may be non-zero
 19828  001AE6                     	endif
 19829  001AE6  0008               	tblrd		*
 19830  001AE8  CFF5 F027          	movff	tablat,i2printf@c
 19831  001AEC  5027               	movf	i2printf@c,w,c
 19832                           
 19833                           ; Switch size 1, requested type "space"
 19834                           ; Number of cases is 5, Range of values is 0 to 117
 19835                           ; switch strategies available:
 19836                           ; Name         Instructions Cycles
 19837                           ; simple_byte           16     9 (average)
 19838                           ;	Chosen strategy is simple_byte
 19839  001AEE  0A00               	xorlw	0	; case 0
 19840  001AF0  B4D8               	btfsc	status,2,c
 19841  001AF2  0012               	return	
 19842  001AF4  0A64               	xorlw	100	; case 100
 19843  001AF6  B4D8               	btfsc	status,2,c
 19844  001AF8  D00A               	goto	i2l1276
 19845  001AFA  0A0D               	xorlw	13	; case 105
 19846  001AFC  B4D8               	btfsc	status,2,c
 19847  001AFE  D007               	goto	i2l1276
 19848  001B00  0A1A               	xorlw	26	; case 115
 19849  001B02  B4D8               	btfsc	status,2,c
 19850  001B04  D778               	goto	i2l5736
 19851  001B06  0A06               	xorlw	6	; case 117
 19852  001B08  B4D8               	btfsc	status,2,c
 19853  001B0A  D7E4               	goto	i2l5766
 19854  001B0C  D0BC               	goto	i2l5842
 19855  001B0E                     i2l1276:
 19856                           
 19857                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 19858  001B0E  BC26               	btfsc	i2printf@flag,6,c
 19859  001B10  D015               	goto	i2l5782
 19860                           
 19861                           ;doprnt.c: 1253: {
 19862                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 19863  001B12  C020  FFD9         	movff	i2printf@ap,fsr2l
 19864  001B16  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 19865  001B1A  CFDE F024          	movff	postinc2,i2printf@val
 19866  001B1E  CFDD F025          	movff	postdec2,i2printf@val+1
 19867  001B22  0E02               	movlw	2
 19868  001B24  2620               	addwf	i2printf@ap,f,c
 19869  001B26  0E00               	movlw	0
 19870  001B28  2221               	addwfc	i2printf@ap+1,f,c
 19871                           
 19872                           ;doprnt.c: 1261: if((int)val < 0) {
 19873  001B2A  AE25               	btfss	i2printf@val+1,7,c
 19874  001B2C  D013               	goto	i2l5786
 19875                           
 19876                           ;doprnt.c: 1262: flag |= 0x03;
 19877  001B2E  0E03               	movlw	3
 19878  001B30  1226               	iorwf	i2printf@flag,f,c
 19879                           
 19880                           ;doprnt.c: 1263: val = -val;
 19881  001B32  6C24               	negf	i2printf@val,c
 19882  001B34  1E25               	comf	i2printf@val+1,f,c
 19883  001B36  B0D8               	btfsc	status,0,c
 19884  001B38  2A25               	incf	i2printf@val+1,f,c
 19885                           
 19886                           ;doprnt.c: 1264: }
 19887                           ;doprnt.c: 1266: }
 19888  001B3A  D00C               	goto	i2l5786
 19889  001B3C                     i2l5782:
 19890                           
 19891                           ;doprnt.c: 1268: else
 19892                           ;doprnt.c: 1273: {
 19893                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 19894  001B3C  C020  FFD9         	movff	i2printf@ap,fsr2l
 19895  001B40  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 19896  001B44  CFDE F024          	movff	postinc2,i2printf@val
 19897  001B48  CFDD F025          	movff	postdec2,i2printf@val+1
 19898  001B4C  0E02               	movlw	2
 19899  001B4E  2620               	addwf	i2printf@ap,f,c
 19900  001B50  0E00               	movlw	0
 19901  001B52  2221               	addwfc	i2printf@ap+1,f,c
 19902  001B54                     i2l5786:
 19903                           
 19904                           ;doprnt.c: 1287: }
 19905                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 19906  001B54  0E01               	movlw	1
 19907  001B56  6E27               	movwf	i2printf@c,c
 19908  001B58                     i2l5788:
 19909  001B58  0E05               	movlw	5
 19910  001B5A  1827               	xorwf	i2printf@c,w,c
 19911  001B5C  B4D8               	btfsc	status,2,c
 19912  001B5E  D015               	goto	i2l5800
 19913                           
 19914                           ;doprnt.c: 1306: if(val < dpowers[c])
 19915  001B60  5027               	movf	i2printf@c,w,c
 19916  001B62  0D02               	mullw	2
 19917  001B64  0E24               	movlw	low _dpowers
 19918  001B66  24F3               	addwf	prodl,w,c
 19919  001B68  6EF6               	movwf	tblptrl,c
 19920  001B6A  0EFB               	movlw	high _dpowers
 19921  001B6C  20F4               	addwfc	prodh,w,c
 19922  001B6E  6EF7               	movwf	tblptrh,c
 19923  001B70                     	if	1	;There are 3 active tblptr bytes
 19924  001B70  6AF8               	clrf	tblptru,c
 19925  001B72  0E00               	movlw	low (__mediumconst shr (0+16))
 19926  001B74  22F8               	addwfc	tblptru,f,c
 19927  001B76                     	endif
 19928  001B76  0009               	tblrd		*+
 19929  001B78  50F5               	movf	tablat,w,c
 19930  001B7A  5C24               	subwf	i2printf@val,w,c
 19931  001B7C  0009               	tblrd		*+
 19932  001B7E  50F5               	movf	tablat,w,c
 19933  001B80  5825               	subwfb	i2printf@val+1,w,c
 19934  001B82  A0D8               	btfss	status,0,c
 19935  001B84  D002               	goto	i2l5800
 19936                           
 19937                           ;doprnt.c: 1307: break;
 19938  001B86  2A27               	incf	i2printf@c,f,c
 19939  001B88  D7E7               	goto	i2l5788
 19940  001B8A                     i2l5800:
 19941                           
 19942                           ;doprnt.c: 1345: if(width && flag & 0x03)
 19943  001B8A  5028               	movf	i2printf@width,w,c
 19944  001B8C  1029               	iorwf	i2printf@width+1,w,c
 19945  001B8E  B4D8               	btfsc	status,2,c
 19946  001B90  D009               	goto	i2l5806
 19947  001B92  C026  F019         	movff	i2printf@flag,??i2_printf
 19948  001B96  0E03               	movlw	3
 19949  001B98  1619               	andwf	??i2_printf,f,c
 19950  001B9A  B4D8               	btfsc	status,2,c
 19951  001B9C  D003               	goto	i2l5806
 19952                           
 19953                           ;doprnt.c: 1346: width--;
 19954  001B9E  0628               	decf	i2printf@width,f,c
 19955  001BA0  A0D8               	btfss	status,0,c
 19956  001BA2  0629               	decf	i2printf@width+1,f,c
 19957  001BA4                     i2l5806:
 19958                           
 19959                           ;doprnt.c: 1381: if(width > c)
 19960  001BA4  0E80               	movlw	128
 19961  001BA6  BE27               	btfsc	i2printf@c,7,c
 19962  001BA8  0E7F               	movlw	127
 19963  001BAA  6E19               	movwf	??i2_printf& (0+255),c
 19964  001BAC  5028               	movf	i2printf@width,w,c
 19965  001BAE  5C27               	subwf	i2printf@c,w,c
 19966  001BB0  5029               	movf	i2printf@width+1,w,c
 19967  001BB2  0A80               	xorlw	128
 19968  001BB4  5819               	subwfb	??i2_printf& (0+255),w,c
 19969  001BB6  B0D8               	btfsc	status,0,c
 19970  001BB8  D007               	goto	i2l5810
 19971                           
 19972                           ;doprnt.c: 1382: width -= c;
 19973  001BBA  5027               	movf	i2printf@c,w,c
 19974  001BBC  5E28               	subwf	i2printf@width,f,c
 19975  001BBE  0E00               	movlw	0
 19976  001BC0  BE27               	btfsc	i2printf@c,7,c
 19977  001BC2  0EFF               	movlw	255
 19978  001BC4  5A29               	subwfb	i2printf@width+1,f,c
 19979  001BC6  D004               	goto	i2l5812
 19980  001BC8                     i2l5810:
 19981                           
 19982                           ;doprnt.c: 1383: else
 19983                           ;doprnt.c: 1384: width = 0;
 19984  001BC8  0E00               	movlw	0
 19985  001BCA  6E29               	movwf	i2printf@width+1,c
 19986  001BCC  0E00               	movlw	0
 19987  001BCE  6E28               	movwf	i2printf@width,c
 19988  001BD0                     i2l5812:
 19989                           
 19990                           ;doprnt.c: 1387: if(flag & 0x04) {
 19991  001BD0  A426               	btfss	i2printf@flag,2,c
 19992  001BD2  D014               	goto	i2l5824
 19993                           
 19994                           ;doprnt.c: 1392: if(flag & 0x03)
 19995  001BD4  C026  F019         	movff	i2printf@flag,??i2_printf
 19996  001BD8  0E03               	movlw	3
 19997  001BDA  1619               	andwf	??i2_printf,f,c
 19998  001BDC  B4D8               	btfsc	status,2,c
 19999  001BDE  D003               	goto	i2l5818
 20000                           
 20001                           ;doprnt.c: 1393: (putch('-') );
 20002  001BE0  0E2D               	movlw	45
 20003  001BE2  EC2E  F024         	call	i2_putch
 20004  001BE6                     i2l5818:
 20005                           
 20006                           ;doprnt.c: 1415: if(width)
 20007  001BE6  5028               	movf	i2printf@width,w,c
 20008  001BE8  1029               	iorwf	i2printf@width+1,w,c
 20009  001BEA  B4D8               	btfsc	status,2,c
 20010  001BEC  D01E               	goto	i2l5834
 20011                           
 20012                           ;doprnt.c: 1417: (putch('0') );
 20013                           
 20014                           ;doprnt.c: 1416: do
 20015  001BEE  0E30               	movlw	48
 20016  001BF0  EC2E  F024         	call	i2_putch
 20017                           
 20018                           ;doprnt.c: 1418: while(--width);
 20019  001BF4  0628               	decf	i2printf@width,f,c
 20020  001BF6  A0D8               	btfss	status,0,c
 20021  001BF8  0629               	decf	i2printf@width+1,f,c
 20022  001BFA  D7F5               	goto	i2l5818
 20023  001BFC                     i2l5824:
 20024                           
 20025                           ;doprnt.c: 1422: {
 20026                           ;doprnt.c: 1424: if(width
 20027                           ;doprnt.c: 1428: )
 20028  001BFC  5028               	movf	i2printf@width,w,c
 20029  001BFE  1029               	iorwf	i2printf@width+1,w,c
 20030  001C00  B4D8               	btfsc	status,2,c
 20031  001C02  D00A               	goto	i2l5830
 20032  001C04                     i2l5826:
 20033                           
 20034                           ;doprnt.c: 1430: (putch(' ') );
 20035  001C04  0E20               	movlw	32
 20036  001C06  EC2E  F024         	call	i2_putch
 20037                           
 20038                           ;doprnt.c: 1431: while(--width);
 20039  001C0A  0628               	decf	i2printf@width,f,c
 20040  001C0C  A0D8               	btfss	status,0,c
 20041  001C0E  0629               	decf	i2printf@width+1,f,c
 20042  001C10  5028               	movf	i2printf@width,w,c
 20043  001C12  1029               	iorwf	i2printf@width+1,w,c
 20044  001C14  A4D8               	btfss	status,2,c
 20045  001C16  D7F6               	goto	i2l5826
 20046  001C18                     i2l5830:
 20047                           
 20048                           ;doprnt.c: 1438: if(flag & 0x03)
 20049  001C18  C026  F019         	movff	i2printf@flag,??i2_printf
 20050  001C1C  0E03               	movlw	3
 20051  001C1E  1619               	andwf	??i2_printf,f,c
 20052  001C20  B4D8               	btfsc	status,2,c
 20053  001C22  D003               	goto	i2l5834
 20054                           
 20055                           ;doprnt.c: 1439: (putch('-') );
 20056  001C24  0E2D               	movlw	45
 20057  001C26  EC2E  F024         	call	i2_putch
 20058  001C2A                     i2l5834:
 20059                           
 20060                           ;doprnt.c: 1469: }
 20061                           ;doprnt.c: 1472: prec = c;
 20062  001C2A  C027  F01D         	movff	i2printf@c,i2printf@prec
 20063                           
 20064                           ;doprnt.c: 1474: while(prec--) {
 20065  001C2E  D027               	goto	i2l5840
 20066  001C30                     i2l5836:
 20067                           
 20068                           ;doprnt.c: 1478: {
 20069                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 20070  001C30  501D               	movf	i2printf@prec,w,c
 20071  001C32  0D02               	mullw	2
 20072  001C34  0E24               	movlw	low _dpowers
 20073  001C36  24F3               	addwf	prodl,w,c
 20074  001C38  6EF6               	movwf	tblptrl,c
 20075  001C3A  0EFB               	movlw	high _dpowers
 20076  001C3C  20F4               	addwfc	prodh,w,c
 20077  001C3E  6EF7               	movwf	tblptrh,c
 20078  001C40                     	if	1	;There are 3 active tblptr bytes
 20079  001C40  6AF8               	clrf	tblptru,c
 20080  001C42  0E00               	movlw	low (__mediumconst shr (0+16))
 20081  001C44  22F8               	addwfc	tblptru,f,c
 20082  001C46                     	endif
 20083  001C46  0009               	tblrd		*+
 20084  001C48  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 20085  001C4C  000A               	tblrd		*-
 20086  001C4E  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 20087  001C52  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 20088  001C56  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 20089  001C5A  EC7A  F020         	call	i2___lwdiv	;wreg free
 20090  001C5E  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 20091  001C62  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 20092  001C66  0E00               	movlw	0
 20093  001C68  6E04               	movwf	i2___lwmod@divisor+1,c
 20094  001C6A  0E0A               	movlw	10
 20095  001C6C  6E03               	movwf	i2___lwmod@divisor,c
 20096  001C6E  EC39  F021         	call	i2___lwmod	;wreg free
 20097  001C72  5001               	movf	?i2___lwmod,w,c
 20098  001C74  0F30               	addlw	48
 20099  001C76  6E27               	movwf	i2printf@c,c
 20100                           
 20101                           ;doprnt.c: 1523: }
 20102                           ;doprnt.c: 1524: (putch(c) );
 20103  001C78  5027               	movf	i2printf@c,w,c
 20104  001C7A  EC2E  F024         	call	i2_putch
 20105  001C7E                     i2l5840:
 20106  001C7E  061D               	decf	i2printf@prec,f,c
 20107  001C80  281D               	incf	i2printf@prec,w,c
 20108  001C82  A4D8               	btfss	status,2,c
 20109  001C84  D7D5               	goto	i2l5836
 20110  001C86                     i2l5842:
 20111  001C86  C00D  FFF6         	movff	i2printf@f,tblptrl
 20112  001C8A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 20113  001C8E  4A0D               	infsnz	i2printf@f,f,c
 20114  001C90  2A0E               	incf	i2printf@f+1,f,c
 20115  001C92                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20116  001C92  6AF8               	clrf	tblptru,c
 20117  001C94                     	endif
 20118  001C94                     	if	0	;tblptru may be non-zero
 20119  001C94                     	endif
 20120  001C94  0008               	tblrd		*
 20121  001C96  CFF5 F027          	movff	tablat,i2printf@c
 20122  001C9A  5027               	movf	i2printf@c,w,c
 20123  001C9C  B4D8               	btfsc	status,2,c
 20124  001C9E  0012               	return	
 20125  001CA0  D64E               	goto	i2l5712
 20126  001CA2                     __end_ofi2_printf:
 20127                           	opt stack 0
 20128                           pclatu	equ	0xFFB
 20129                           pclath	equ	0xFFA
 20130                           tblptru	equ	0xFF8
 20131                           tblptrh	equ	0xFF7
 20132                           tblptrl	equ	0xFF6
 20133                           tablat	equ	0xFF5
 20134                           prodh	equ	0xFF4
 20135                           prodl	equ	0xFF3
 20136                           intcon	equ	0xFF2
 20137                           intcon2	equ	0xFF1
 20138                           intcon3	equ	0xFF0
 20139                           indf0	equ	0xFEF
 20140                           postinc0	equ	0xFEE
 20141                           fsr0h	equ	0xFEA
 20142                           fsr0l	equ	0xFE9
 20143                           wreg	equ	0xFE8
 20144                           postdec1	equ	0xFE5
 20145                           fsr1h	equ	0xFE2
 20146                           fsr1l	equ	0xFE1
 20147                           indf2	equ	0xFDF
 20148                           postinc2	equ	0xFDE
 20149                           postdec2	equ	0xFDD
 20150                           fsr2h	equ	0xFDA
 20151                           fsr2l	equ	0xFD9
 20152                           status	equ	0xFD8
 20153                           
 20154 ;; *************** function i2_putch *****************
 20155 ;; Defined at:
 20156 ;;		line 20 in file "lcd.c"
 20157 ;; Parameters:    Size  Location     Type
 20158 ;;  data            1    wreg     unsigned char 
 20159 ;; Auto vars:     Size  Location     Type
 20160 ;;  data            1    2[COMRAM] unsigned char 
 20161 ;; Return value:  Size  Location     Type
 20162 ;;                  1    wreg      void 
 20163 ;; Registers used:
 20164 ;;		wreg, status,2, status,0, cstack
 20165 ;; Tracked objects:
 20166 ;;		On entry : 0/0
 20167 ;;		On exit  : 0/0
 20168 ;;		Unchanged: 0/0
 20169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20171 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20173 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20174 ;;Total ram usage:        1 bytes
 20175 ;; Hardware stack levels used:    1
 20176 ;; Hardware stack levels required when called:    1
 20177 ;; This function calls:
 20178 ;;		i2_lcdNibble
 20179 ;; This function is called by:
 20180 ;;		i2_printf
 20181 ;; This function uses a non-reentrant model
 20182 ;;
 20183                           
 20184                           	psect	text79
 20185  00485C                     __ptext79:
 20186                           	opt stack 0
 20187  00485C                     i2_putch:
 20188                           	opt stack 19
 20189                           
 20190                           ;incstack = 0
 20191                           ;i2putch@data stored from wreg
 20192  00485C  6E03               	movwf	i2putch@data,c
 20193                           
 20194                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 20195  00485E  848C               	bsf	3980,2,c	;volatile
 20196                           
 20197                           ;lcd.c: 22: lcdNibble(data);
 20198  004860  5003               	movf	i2putch@data,w,c
 20199  004862  EC25  F020         	call	i2_lcdNibble
 20200  004866  0012               	return		;funcret
 20201  004868                     __end_ofi2_putch:
 20202                           	opt stack 0
 20203                           pclatu	equ	0xFFB
 20204                           pclath	equ	0xFFA
 20205                           tblptru	equ	0xFF8
 20206                           tblptrh	equ	0xFF7
 20207                           tblptrl	equ	0xFF6
 20208                           tablat	equ	0xFF5
 20209                           prodh	equ	0xFF4
 20210                           prodl	equ	0xFF3
 20211                           intcon	equ	0xFF2
 20212                           intcon2	equ	0xFF1
 20213                           intcon3	equ	0xFF0
 20214                           indf0	equ	0xFEF
 20215                           postinc0	equ	0xFEE
 20216                           fsr0h	equ	0xFEA
 20217                           fsr0l	equ	0xFE9
 20218                           wreg	equ	0xFE8
 20219                           postdec1	equ	0xFE5
 20220                           fsr1h	equ	0xFE2
 20221                           fsr1l	equ	0xFE1
 20222                           indf2	equ	0xFDF
 20223                           postinc2	equ	0xFDE
 20224                           postdec2	equ	0xFDD
 20225                           fsr2h	equ	0xFDA
 20226                           fsr2l	equ	0xFD9
 20227                           status	equ	0xFD8
 20228                           
 20229 ;; *************** function i2_isdigit *****************
 20230 ;; Defined at:
 20231 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 20232 ;; Parameters:    Size  Location     Type
 20233 ;;  c               1    wreg     unsigned char 
 20234 ;; Auto vars:     Size  Location     Type
 20235 ;;  c               1    2[COMRAM] unsigned char 
 20236 ;; Return value:  Size  Location     Type
 20237 ;;		None               void
 20238 ;; Registers used:
 20239 ;;		wreg, status,2, status,0
 20240 ;; Tracked objects:
 20241 ;;		On entry : 0/0
 20242 ;;		On exit  : 0/0
 20243 ;;		Unchanged: 0/0
 20244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20246 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20247 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20248 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20249 ;;Total ram usage:        3 bytes
 20250 ;; Hardware stack levels used:    1
 20251 ;; This function calls:
 20252 ;;		Nothing
 20253 ;; This function is called by:
 20254 ;;		i2_printf
 20255 ;; This function uses a non-reentrant model
 20256 ;;
 20257                           
 20258                           	psect	text80
 20259  0047B4                     __ptext80:
 20260                           	opt stack 0
 20261  0047B4                     i2_isdigit:
 20262                           	opt stack 20
 20263                           
 20264                           ;incstack = 0
 20265                           ;i2isdigit@c stored from wreg
 20266  0047B4  6E03               	movwf	i2isdigit@c,c
 20267  0047B6  0E00               	movlw	0
 20268  0047B8  6E02               	movwf	i2_isdigit$1948,c
 20269  0047BA  0E3A               	movlw	58
 20270  0047BC  6003               	cpfslt	i2isdigit@c,c
 20271  0047BE  D005               	goto	i2l5416
 20272  0047C0  0E2F               	movlw	47
 20273  0047C2  6403               	cpfsgt	i2isdigit@c,c
 20274  0047C4  D002               	goto	i2l5416
 20275  0047C6  0E01               	movlw	1
 20276  0047C8  6E02               	movwf	i2_isdigit$1948,c
 20277  0047CA                     i2l5416:
 20278  0047CA  C002  F001         	movff	i2_isdigit$1948,??i2_isdigit
 20279  0047CE  3001               	rrcf	??i2_isdigit,w,c
 20280  0047D0  0012               	return	
 20281  0047D2                     __end_ofi2_isdigit:
 20282                           	opt stack 0
 20283                           pclatu	equ	0xFFB
 20284                           pclath	equ	0xFFA
 20285                           tblptru	equ	0xFF8
 20286                           tblptrh	equ	0xFF7
 20287                           tblptrl	equ	0xFF6
 20288                           tablat	equ	0xFF5
 20289                           prodh	equ	0xFF4
 20290                           prodl	equ	0xFF3
 20291                           intcon	equ	0xFF2
 20292                           intcon2	equ	0xFF1
 20293                           intcon3	equ	0xFF0
 20294                           indf0	equ	0xFEF
 20295                           postinc0	equ	0xFEE
 20296                           fsr0h	equ	0xFEA
 20297                           fsr0l	equ	0xFE9
 20298                           wreg	equ	0xFE8
 20299                           postdec1	equ	0xFE5
 20300                           fsr1h	equ	0xFE2
 20301                           fsr1l	equ	0xFE1
 20302                           indf2	equ	0xFDF
 20303                           postinc2	equ	0xFDE
 20304                           postdec2	equ	0xFDD
 20305                           fsr2h	equ	0xFDA
 20306                           fsr2l	equ	0xFD9
 20307                           status	equ	0xFD8
 20308                           
 20309 ;; *************** function i2___wmul *****************
 20310 ;; Defined at:
 20311 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 20312 ;; Parameters:    Size  Location     Type
 20313 ;;  multiplier      2    0[COMRAM] unsigned int 
 20314 ;;  multiplicand    2    2[COMRAM] unsigned int 
 20315 ;; Auto vars:     Size  Location     Type
 20316 ;;  __wmul          2    4[COMRAM] unsigned int 
 20317 ;; Return value:  Size  Location     Type
 20318 ;;                  2    0[COMRAM] unsigned int 
 20319 ;; Registers used:
 20320 ;;		wreg, status,2, status,0, prodl, prodh
 20321 ;; Tracked objects:
 20322 ;;		On entry : 0/0
 20323 ;;		On exit  : 0/0
 20324 ;;		Unchanged: 0/0
 20325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20326 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20327 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20329 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20330 ;;Total ram usage:        6 bytes
 20331 ;; Hardware stack levels used:    1
 20332 ;; This function calls:
 20333 ;;		Nothing
 20334 ;; This function is called by:
 20335 ;;		_printSortTimer
 20336 ;;		_retrieveLog
 20337 ;;		i2_printf
 20338 ;; This function uses a non-reentrant model
 20339 ;;
 20340                           
 20341                           	psect	text81
 20342  004700                     __ptext81:
 20343                           	opt stack 0
 20344  004700                     i2___wmul:
 20345                           	opt stack 20
 20346                           
 20347                           ;incstack = 0
 20348  004700  5001               	movf	i2___wmul@multiplier,w,c
 20349  004702  0203               	mulwf	i2___wmul@multiplicand,c
 20350  004704  CFF3 F005          	movff	prodl,i2___wmul@product
 20351  004708  CFF4 F006          	movff	prodh,i2___wmul@product+1
 20352  00470C  5001               	movf	i2___wmul@multiplier,w,c
 20353  00470E  0204               	mulwf	i2___wmul@multiplicand+1,c
 20354  004710  50F3               	movf	prodl,w,c
 20355  004712  2606               	addwf	i2___wmul@product+1,f,c
 20356  004714  5002               	movf	i2___wmul@multiplier+1,w,c
 20357  004716  0203               	mulwf	i2___wmul@multiplicand,c
 20358  004718  50F3               	movf	prodl,w,c
 20359  00471A  2606               	addwf	i2___wmul@product+1,f,c
 20360  00471C  C005  F001         	movff	i2___wmul@product,?i2___wmul
 20361  004720  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 20362  004724  0012               	return	
 20363  004726                     __end_ofi2___wmul:
 20364                           	opt stack 0
 20365                           pclatu	equ	0xFFB
 20366                           pclath	equ	0xFFA
 20367                           tblptru	equ	0xFF8
 20368                           tblptrh	equ	0xFF7
 20369                           tblptrl	equ	0xFF6
 20370                           tablat	equ	0xFF5
 20371                           prodh	equ	0xFF4
 20372                           prodl	equ	0xFF3
 20373                           intcon	equ	0xFF2
 20374                           intcon2	equ	0xFF1
 20375                           intcon3	equ	0xFF0
 20376                           indf0	equ	0xFEF
 20377                           postinc0	equ	0xFEE
 20378                           fsr0h	equ	0xFEA
 20379                           fsr0l	equ	0xFE9
 20380                           wreg	equ	0xFE8
 20381                           postdec1	equ	0xFE5
 20382                           fsr1h	equ	0xFE2
 20383                           fsr1l	equ	0xFE1
 20384                           indf2	equ	0xFDF
 20385                           postinc2	equ	0xFDE
 20386                           postdec2	equ	0xFDD
 20387                           fsr2h	equ	0xFDA
 20388                           fsr2l	equ	0xFD9
 20389                           status	equ	0xFD8
 20390                           
 20391 ;; *************** function i2___lwmod *****************
 20392 ;; Defined at:
 20393 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 20394 ;; Parameters:    Size  Location     Type
 20395 ;;  dividend        2    0[COMRAM] unsigned int 
 20396 ;;  divisor         2    2[COMRAM] unsigned int 
 20397 ;; Auto vars:     Size  Location     Type
 20398 ;;  __lwmod         1    4[COMRAM] unsigned char 
 20399 ;; Return value:  Size  Location     Type
 20400 ;;                  2    0[COMRAM] unsigned int 
 20401 ;; Registers used:
 20402 ;;		wreg, status,2, status,0
 20403 ;; Tracked objects:
 20404 ;;		On entry : 0/0
 20405 ;;		On exit  : 0/0
 20406 ;;		Unchanged: 0/0
 20407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20408 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20409 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20411 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20412 ;;Total ram usage:        5 bytes
 20413 ;; Hardware stack levels used:    1
 20414 ;; This function calls:
 20415 ;;		Nothing
 20416 ;; This function is called by:
 20417 ;;		_printSortTimer
 20418 ;;		i2_printf
 20419 ;; This function uses a non-reentrant model
 20420 ;;
 20421                           
 20422                           	psect	text82
 20423  004272                     __ptext82:
 20424                           	opt stack 0
 20425  004272                     i2___lwmod:
 20426                           	opt stack 20
 20427                           
 20428                           ;incstack = 0
 20429  004272  5003               	movf	i2___lwmod@divisor,w,c
 20430  004274  1004               	iorwf	i2___lwmod@divisor+1,w,c
 20431  004276  B4D8               	btfsc	status,2,c
 20432  004278  D018               	goto	i2l1733
 20433  00427A  0E01               	movlw	1
 20434  00427C  6E05               	movwf	i2___lwmod@counter,c
 20435  00427E  D004               	goto	i2l5448
 20436  004280                     i2l5446:
 20437  004280  90D8               	bcf	status,0,c
 20438  004282  3603               	rlcf	i2___lwmod@divisor,f,c
 20439  004284  3604               	rlcf	i2___lwmod@divisor+1,f,c
 20440  004286  2A05               	incf	i2___lwmod@counter,f,c
 20441  004288                     i2l5448:
 20442  004288  AE04               	btfss	i2___lwmod@divisor+1,7,c
 20443  00428A  D7FA               	goto	i2l5446
 20444  00428C                     i2l5450:
 20445  00428C  5003               	movf	i2___lwmod@divisor,w,c
 20446  00428E  5C01               	subwf	i2___lwmod@dividend,w,c
 20447  004290  5004               	movf	i2___lwmod@divisor+1,w,c
 20448  004292  5802               	subwfb	i2___lwmod@dividend+1,w,c
 20449  004294  A0D8               	btfss	status,0,c
 20450  004296  D004               	goto	i2l5454
 20451  004298  5003               	movf	i2___lwmod@divisor,w,c
 20452  00429A  5E01               	subwf	i2___lwmod@dividend,f,c
 20453  00429C  5004               	movf	i2___lwmod@divisor+1,w,c
 20454  00429E  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 20455  0042A0                     i2l5454:
 20456  0042A0  90D8               	bcf	status,0,c
 20457  0042A2  3204               	rrcf	i2___lwmod@divisor+1,f,c
 20458  0042A4  3203               	rrcf	i2___lwmod@divisor,f,c
 20459  0042A6  2E05               	decfsz	i2___lwmod@counter,f,c
 20460  0042A8  D7F1               	goto	i2l5450
 20461  0042AA                     i2l1733:
 20462  0042AA  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 20463  0042AE  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 20464  0042B2  0012               	return		;funcret
 20465  0042B4                     __end_ofi2___lwmod:
 20466                           	opt stack 0
 20467                           pclatu	equ	0xFFB
 20468                           pclath	equ	0xFFA
 20469                           tblptru	equ	0xFF8
 20470                           tblptrh	equ	0xFF7
 20471                           tblptrl	equ	0xFF6
 20472                           tablat	equ	0xFF5
 20473                           prodh	equ	0xFF4
 20474                           prodl	equ	0xFF3
 20475                           intcon	equ	0xFF2
 20476                           intcon2	equ	0xFF1
 20477                           intcon3	equ	0xFF0
 20478                           indf0	equ	0xFEF
 20479                           postinc0	equ	0xFEE
 20480                           fsr0h	equ	0xFEA
 20481                           fsr0l	equ	0xFE9
 20482                           wreg	equ	0xFE8
 20483                           postdec1	equ	0xFE5
 20484                           fsr1h	equ	0xFE2
 20485                           fsr1l	equ	0xFE1
 20486                           indf2	equ	0xFDF
 20487                           postinc2	equ	0xFDE
 20488                           postdec2	equ	0xFDD
 20489                           fsr2h	equ	0xFDA
 20490                           fsr2l	equ	0xFD9
 20491                           status	equ	0xFD8
 20492                           
 20493 ;; *************** function i2___lwdiv *****************
 20494 ;; Defined at:
 20495 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 20496 ;; Parameters:    Size  Location     Type
 20497 ;;  dividend        2    5[COMRAM] unsigned int 
 20498 ;;  divisor         2    7[COMRAM] unsigned int 
 20499 ;; Auto vars:     Size  Location     Type
 20500 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 20501 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 20502 ;; Return value:  Size  Location     Type
 20503 ;;                  2    5[COMRAM] unsigned int 
 20504 ;; Registers used:
 20505 ;;		wreg, status,2, status,0
 20506 ;; Tracked objects:
 20507 ;;		On entry : 0/0
 20508 ;;		On exit  : 0/0
 20509 ;;		Unchanged: 0/0
 20510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20511 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20512 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20514 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20515 ;;Total ram usage:        7 bytes
 20516 ;; Hardware stack levels used:    1
 20517 ;; This function calls:
 20518 ;;		Nothing
 20519 ;; This function is called by:
 20520 ;;		_printSortTimer
 20521 ;;		i2_printf
 20522 ;; This function uses a non-reentrant model
 20523 ;;
 20524                           
 20525                           	psect	text83
 20526  0040F4                     __ptext83:
 20527                           	opt stack 0
 20528  0040F4                     i2___lwdiv:
 20529                           	opt stack 20
 20530                           
 20531                           ;incstack = 0
 20532  0040F4  0E00               	movlw	0
 20533  0040F6  6E0B               	movwf	i2___lwdiv@quotient+1,c
 20534  0040F8  0E00               	movlw	0
 20535  0040FA  6E0A               	movwf	i2___lwdiv@quotient,c
 20536  0040FC  5008               	movf	i2___lwdiv@divisor,w,c
 20537  0040FE  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 20538  004100  B4D8               	btfsc	status,2,c
 20539  004102  D01C               	goto	i2l1723
 20540  004104  0E01               	movlw	1
 20541  004106  6E0C               	movwf	i2___lwdiv@counter,c
 20542  004108  D004               	goto	i2l5428
 20543  00410A                     i2l5426:
 20544  00410A  90D8               	bcf	status,0,c
 20545  00410C  3608               	rlcf	i2___lwdiv@divisor,f,c
 20546  00410E  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 20547  004110  2A0C               	incf	i2___lwdiv@counter,f,c
 20548  004112                     i2l5428:
 20549  004112  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 20550  004114  D7FA               	goto	i2l5426
 20551  004116                     i2l5430:
 20552  004116  90D8               	bcf	status,0,c
 20553  004118  360A               	rlcf	i2___lwdiv@quotient,f,c
 20554  00411A  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 20555  00411C  5008               	movf	i2___lwdiv@divisor,w,c
 20556  00411E  5C06               	subwf	i2___lwdiv@dividend,w,c
 20557  004120  5009               	movf	i2___lwdiv@divisor+1,w,c
 20558  004122  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 20559  004124  A0D8               	btfss	status,0,c
 20560  004126  D005               	goto	i2l5438
 20561  004128  5008               	movf	i2___lwdiv@divisor,w,c
 20562  00412A  5E06               	subwf	i2___lwdiv@dividend,f,c
 20563  00412C  5009               	movf	i2___lwdiv@divisor+1,w,c
 20564  00412E  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 20565  004130  800A               	bsf	i2___lwdiv@quotient,0,c
 20566  004132                     i2l5438:
 20567  004132  90D8               	bcf	status,0,c
 20568  004134  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 20569  004136  3208               	rrcf	i2___lwdiv@divisor,f,c
 20570  004138  2E0C               	decfsz	i2___lwdiv@counter,f,c
 20571  00413A  D7ED               	goto	i2l5430
 20572  00413C                     i2l1723:
 20573  00413C  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 20574  004140  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 20575  004144  0012               	return		;funcret
 20576  004146                     __end_ofi2___lwdiv:
 20577                           	opt stack 0
 20578                           pclatu	equ	0xFFB
 20579                           pclath	equ	0xFFA
 20580                           tblptru	equ	0xFF8
 20581                           tblptrh	equ	0xFF7
 20582                           tblptrl	equ	0xFF6
 20583                           tablat	equ	0xFF5
 20584                           prodh	equ	0xFF4
 20585                           prodl	equ	0xFF3
 20586                           intcon	equ	0xFF2
 20587                           intcon2	equ	0xFF1
 20588                           intcon3	equ	0xFF0
 20589                           indf0	equ	0xFEF
 20590                           postinc0	equ	0xFEE
 20591                           fsr0h	equ	0xFEA
 20592                           fsr0l	equ	0xFE9
 20593                           wreg	equ	0xFE8
 20594                           postdec1	equ	0xFE5
 20595                           fsr1h	equ	0xFE2
 20596                           fsr1l	equ	0xFE1
 20597                           indf2	equ	0xFDF
 20598                           postinc2	equ	0xFDE
 20599                           postdec2	equ	0xFDD
 20600                           fsr2h	equ	0xFDA
 20601                           fsr2l	equ	0xFD9
 20602                           status	equ	0xFD8
 20603                           
 20604 ;; *************** function i2_lcdInst *****************
 20605 ;; Defined at:
 20606 ;;		line 15 in file "lcd.c"
 20607 ;; Parameters:    Size  Location     Type
 20608 ;;  data            1    wreg     unsigned char 
 20609 ;; Auto vars:     Size  Location     Type
 20610 ;;  data            1    2[COMRAM] unsigned char 
 20611 ;; Return value:  Size  Location     Type
 20612 ;;                  1    wreg      void 
 20613 ;; Registers used:
 20614 ;;		wreg, status,2, status,0, cstack
 20615 ;; Tracked objects:
 20616 ;;		On entry : 0/0
 20617 ;;		On exit  : 0/0
 20618 ;;		Unchanged: 0/0
 20619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20621 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20623 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20624 ;;Total ram usage:        1 bytes
 20625 ;; Hardware stack levels used:    1
 20626 ;; Hardware stack levels required when called:    1
 20627 ;; This function calls:
 20628 ;;		i2_lcdNibble
 20629 ;; This function is called by:
 20630 ;;		_change_state_to_menu_11
 20631 ;;		_change_state_to_menu_23
 20632 ;;		_change_state_to_logs_11
 20633 ;;		_change_state_to_logs_12
 20634 ;;		_change_state_to_logs_22
 20635 ;;		_change_state_to_logs_23
 20636 ;;		_change_state_to_logs_33
 20637 ;;		_change_state_to_logs_34
 20638 ;;		_printSortTimer
 20639 ;;		i2_change_state_to_menu_start
 20640 ;;		i2_change_state_to_menu_12
 20641 ;;		i2_change_state_to_menu_22
 20642 ;;		i2_printRTC
 20643 ;; This function uses a non-reentrant model
 20644 ;;
 20645                           
 20646                           	psect	text84
 20647  004868                     __ptext84:
 20648                           	opt stack 0
 20649  004868                     i2_lcdInst:
 20650                           	opt stack 19
 20651                           
 20652                           ;incstack = 0
 20653                           ;i2lcdInst@data stored from wreg
 20654  004868  6E03               	movwf	i2lcdInst@data,c
 20655                           
 20656                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 20657  00486A  948C               	bcf	3980,2,c	;volatile
 20658                           
 20659                           ;lcd.c: 17: lcdNibble(data);
 20660  00486C  5003               	movf	i2lcdInst@data,w,c
 20661  00486E  EC25  F020         	call	i2_lcdNibble
 20662  004872  0012               	return		;funcret
 20663  004874                     __end_ofi2_lcdInst:
 20664                           	opt stack 0
 20665                           pclatu	equ	0xFFB
 20666                           pclath	equ	0xFFA
 20667                           tblptru	equ	0xFF8
 20668                           tblptrh	equ	0xFF7
 20669                           tblptrl	equ	0xFF6
 20670                           tablat	equ	0xFF5
 20671                           prodh	equ	0xFF4
 20672                           prodl	equ	0xFF3
 20673                           intcon	equ	0xFF2
 20674                           intcon2	equ	0xFF1
 20675                           intcon3	equ	0xFF0
 20676                           indf0	equ	0xFEF
 20677                           postinc0	equ	0xFEE
 20678                           fsr0h	equ	0xFEA
 20679                           fsr0l	equ	0xFE9
 20680                           wreg	equ	0xFE8
 20681                           postdec1	equ	0xFE5
 20682                           fsr1h	equ	0xFE2
 20683                           fsr1l	equ	0xFE1
 20684                           indf2	equ	0xFDF
 20685                           postinc2	equ	0xFDE
 20686                           postdec2	equ	0xFDD
 20687                           fsr2h	equ	0xFDA
 20688                           fsr2l	equ	0xFD9
 20689                           status	equ	0xFD8
 20690                           
 20691 ;; *************** function i2_lcdNibble *****************
 20692 ;; Defined at:
 20693 ;;		line 25 in file "lcd.c"
 20694 ;; Parameters:    Size  Location     Type
 20695 ;;  data            1    wreg     unsigned char 
 20696 ;; Auto vars:     Size  Location     Type
 20697 ;;  data            1    1[COMRAM] unsigned char 
 20698 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 20699 ;; Return value:  Size  Location     Type
 20700 ;;                  1    wreg      void 
 20701 ;; Registers used:
 20702 ;;		wreg, status,2, status,0
 20703 ;; Tracked objects:
 20704 ;;		On entry : 0/0
 20705 ;;		On exit  : 0/0
 20706 ;;		Unchanged: 0/0
 20707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20709 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20711 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20712 ;;Total ram usage:        2 bytes
 20713 ;; Hardware stack levels used:    1
 20714 ;; This function calls:
 20715 ;;		Nothing
 20716 ;; This function is called by:
 20717 ;;		i2_lcdInst
 20718 ;;		i2_putch
 20719 ;; This function uses a non-reentrant model
 20720 ;;
 20721                           
 20722                           	psect	text85
 20723  00404A                     __ptext85:
 20724                           	opt stack 0
 20725  00404A                     i2_lcdNibble:
 20726                           	opt stack 19
 20727                           
 20728                           ;incstack = 0
 20729                           ;i2lcdNibble@data stored from wreg
 20730  00404A  6E02               	movwf	i2lcdNibble@data,c
 20731                           
 20732                           ;lcd.c: 27: char temp = data & 0xF0;
 20733  00404C  5002               	movf	i2lcdNibble@data,w,c
 20734  00404E  0BF0               	andlw	240
 20735  004050  6E01               	movwf	i2lcdNibble@temp,c
 20736                           
 20737                           ;lcd.c: 28: LATD = LATD & 0x0F;
 20738  004052  508C               	movf	3980,w,c	;volatile
 20739  004054  0B0F               	andlw	15
 20740  004056  6E8C               	movwf	3980,c	;volatile
 20741                           
 20742                           ;lcd.c: 29: LATD = temp | LATD;
 20743  004058  5001               	movf	i2lcdNibble@temp,w,c
 20744  00405A  108C               	iorwf	3980,w,c	;volatile
 20745  00405C  6E8C               	movwf	3980,c	;volatile
 20746                           
 20747                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 20748  00405E  868C               	bsf	3980,3,c	;volatile
 20749                           
 20750                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20751  004060  0E42               	movlw	66
 20752  004062                     i2u836_47:
 20753  004062  2EE8               	decfsz	wreg,f,c
 20754  004064  D7FE               	bra	i2u836_47
 20755  004066  D000               	nop2	
 20756                           
 20757                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 20758  004068  968C               	bcf	3980,3,c	;volatile
 20759                           
 20760                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20761  00406A  0E42               	movlw	66
 20762  00406C                     i2u837_47:
 20763  00406C  2EE8               	decfsz	wreg,f,c
 20764  00406E  D7FE               	bra	i2u837_47
 20765  004070  D000               	nop2	
 20766                           
 20767                           ;lcd.c: 36: data = data << 4;
 20768  004072  3802               	swapf	i2lcdNibble@data,w,c
 20769  004074  0BF0               	andlw	240
 20770  004076  6E02               	movwf	i2lcdNibble@data,c
 20771                           
 20772                           ;lcd.c: 38: temp = data & 0xF0;
 20773  004078  5002               	movf	i2lcdNibble@data,w,c
 20774  00407A  0BF0               	andlw	240
 20775  00407C  6E01               	movwf	i2lcdNibble@temp,c
 20776                           
 20777                           ;lcd.c: 39: LATD = LATD & 0x0F;
 20778  00407E  508C               	movf	3980,w,c	;volatile
 20779  004080  0B0F               	andlw	15
 20780  004082  6E8C               	movwf	3980,c	;volatile
 20781                           
 20782                           ;lcd.c: 40: LATD = temp | LATD;
 20783  004084  5001               	movf	i2lcdNibble@temp,w,c
 20784  004086  108C               	iorwf	3980,w,c	;volatile
 20785  004088  6E8C               	movwf	3980,c	;volatile
 20786                           
 20787                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 20788  00408A  868C               	bsf	3980,3,c	;volatile
 20789                           
 20790                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20791  00408C  0E42               	movlw	66
 20792  00408E                     i2u838_47:
 20793  00408E  2EE8               	decfsz	wreg,f,c
 20794  004090  D7FE               	bra	i2u838_47
 20795  004092  D000               	nop2	
 20796                           
 20797                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 20798  004094  968C               	bcf	3980,3,c	;volatile
 20799                           
 20800                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20801  004096  0E42               	movlw	66
 20802  004098                     i2u839_47:
 20803  004098  2EE8               	decfsz	wreg,f,c
 20804  00409A  D7FE               	bra	i2u839_47
 20805  00409C  D000               	nop2	
 20806  00409E  0012               	return		;funcret
 20807  0040A0                     __end_ofi2_lcdNibble:
 20808                           	opt stack 0
 20809                           pclatu	equ	0xFFB
 20810                           pclath	equ	0xFFA
 20811                           tblptru	equ	0xFF8
 20812                           tblptrh	equ	0xFF7
 20813                           tblptrl	equ	0xFF6
 20814                           tablat	equ	0xFF5
 20815                           prodh	equ	0xFF4
 20816                           prodl	equ	0xFF3
 20817                           intcon	equ	0xFF2
 20818                           intcon2	equ	0xFF1
 20819                           intcon3	equ	0xFF0
 20820                           indf0	equ	0xFEF
 20821                           postinc0	equ	0xFEE
 20822                           fsr0h	equ	0xFEA
 20823                           fsr0l	equ	0xFE9
 20824                           wreg	equ	0xFE8
 20825                           postdec1	equ	0xFE5
 20826                           fsr1h	equ	0xFE2
 20827                           fsr1l	equ	0xFE1
 20828                           indf2	equ	0xFDF
 20829                           postinc2	equ	0xFDE
 20830                           postdec2	equ	0xFDD
 20831                           fsr2h	equ	0xFDA
 20832                           fsr2l	equ	0xFD9
 20833                           status	equ	0xFD8
 20834                           
 20835 ;; *************** function i2_getRTC *****************
 20836 ;; Defined at:
 20837 ;;		line 44 in file "RTC.c"
 20838 ;; Parameters:    Size  Location     Type
 20839 ;;		None
 20840 ;; Auto vars:     Size  Location     Type
 20841 ;;  getRTC          2    3[COMRAM] int 
 20842 ;; Return value:  Size  Location     Type
 20843 ;;                  1    wreg      void 
 20844 ;; Registers used:
 20845 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20846 ;; Tracked objects:
 20847 ;;		On entry : 0/0
 20848 ;;		On exit  : 0/0
 20849 ;;		Unchanged: 0/0
 20850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20852 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20854 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20855 ;;Total ram usage:        2 bytes
 20856 ;; Hardware stack levels used:    1
 20857 ;; Hardware stack levels required when called:    2
 20858 ;; This function calls:
 20859 ;;		i2_I2C_Master_Read
 20860 ;;		i2_I2C_Master_Start
 20861 ;;		i2_I2C_Master_Stop
 20862 ;;		i2_I2C_Master_Write
 20863 ;; This function is called by:
 20864 ;;		_printSortTimer
 20865 ;;		i2_printRTC
 20866 ;; This function uses a non-reentrant model
 20867 ;;
 20868                           
 20869                           	psect	text86
 20870  003D32                     __ptext86:
 20871                           	opt stack 0
 20872  003D32                     i2_getRTC:
 20873                           	opt stack 18
 20874                           
 20875                           ;RTC.c: 48: I2C_Master_Start();
 20876                           
 20877                           ;incstack = 0
 20878  003D32  EC54  F024         	call	i2_I2C_Master_Start	;wreg free
 20879                           
 20880                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 20881  003D36  0E00               	movlw	0
 20882  003D38  6E03               	movwf	i2I2C_Master_Write@d+1,c
 20883  003D3A  0ED0               	movlw	208
 20884  003D3C  6E02               	movwf	i2I2C_Master_Write@d,c
 20885  003D3E  EC3F  F024         	call	i2_I2C_Master_Write	;wreg free
 20886                           
 20887                           ;RTC.c: 50: I2C_Master_Write(0x00);
 20888  003D42  0E00               	movlw	0
 20889  003D44  6E03               	movwf	i2I2C_Master_Write@d+1,c
 20890  003D46  0E00               	movlw	0
 20891  003D48  6E02               	movwf	i2I2C_Master_Write@d,c
 20892  003D4A  EC3F  F024         	call	i2_I2C_Master_Write	;wreg free
 20893                           
 20894                           ;RTC.c: 51: I2C_Master_Stop();
 20895  003D4E  EC50  F024         	call	i2_I2C_Master_Stop	;wreg free
 20896                           
 20897                           ;RTC.c: 54: I2C_Master_Start();
 20898  003D52  EC54  F024         	call	i2_I2C_Master_Start	;wreg free
 20899                           
 20900                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 20901  003D56  0E00               	movlw	0
 20902  003D58  6E03               	movwf	i2I2C_Master_Write@d+1,c
 20903  003D5A  0ED1               	movlw	209
 20904  003D5C  6E02               	movwf	i2I2C_Master_Write@d,c
 20905  003D5E  EC3F  F024         	call	i2_I2C_Master_Write	;wreg free
 20906                           
 20907                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 20908  003D62  0E00               	movlw	0
 20909  003D64  6E05               	movwf	i2getRTC@i+1,c
 20910  003D66  0E00               	movlw	0
 20911  003D68  6E04               	movwf	i2getRTC@i,c
 20912  003D6A                     i2l5684:
 20913  003D6A  BE05               	btfsc	i2getRTC@i+1,7,c
 20914  003D6C  D006               	goto	i2l5688
 20915  003D6E  5005               	movf	i2getRTC@i+1,w,c
 20916  003D70  E111               	bnz	i2l5694
 20917  003D72  0E06               	movlw	6
 20918  003D74  5C04               	subwf	i2getRTC@i,w,c
 20919  003D76  B0D8               	btfsc	status,0,c
 20920  003D78  D00D               	goto	i2l5694
 20921  003D7A                     i2l5688:
 20922                           
 20923                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 20924  003D7A  0E24               	movlw	low _time
 20925  003D7C  2404               	addwf	i2getRTC@i,w,c
 20926  003D7E  6ED9               	movwf	fsr2l,c
 20927  003D80  0E01               	movlw	high _time
 20928  003D82  2005               	addwfc	i2getRTC@i+1,w,c
 20929  003D84  6EDA               	movwf	fsr2h,c
 20930  003D86  0E01               	movlw	1
 20931  003D88  EC93  F023         	call	i2_I2C_Master_Read
 20932  003D8C  6EDF               	movwf	indf2,c
 20933  003D8E  4A04               	infsnz	i2getRTC@i,f,c
 20934  003D90  2A05               	incf	i2getRTC@i+1,f,c
 20935  003D92  D7EB               	goto	i2l5684
 20936  003D94                     i2l5694:
 20937                           
 20938                           ;RTC.c: 58: }
 20939                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 20940  003D94  0E00               	movlw	0
 20941  003D96  EC93  F023         	call	i2_I2C_Master_Read
 20942  003D9A  0101               	movlb	1	; () banked
 20943  003D9C  6F2A               	movwf	(_time+6)& (0+255),b
 20944                           
 20945                           ;RTC.c: 60: I2C_Master_Stop();
 20946  003D9E  EC50  F024         	call	i2_I2C_Master_Stop	;wreg free
 20947  003DA2  0012               	return		;funcret
 20948  003DA4                     __end_ofi2_getRTC:
 20949                           	opt stack 0
 20950                           pclatu	equ	0xFFB
 20951                           pclath	equ	0xFFA
 20952                           tblptru	equ	0xFF8
 20953                           tblptrh	equ	0xFF7
 20954                           tblptrl	equ	0xFF6
 20955                           tablat	equ	0xFF5
 20956                           prodh	equ	0xFF4
 20957                           prodl	equ	0xFF3
 20958                           intcon	equ	0xFF2
 20959                           intcon2	equ	0xFF1
 20960                           intcon3	equ	0xFF0
 20961                           indf0	equ	0xFEF
 20962                           postinc0	equ	0xFEE
 20963                           fsr0h	equ	0xFEA
 20964                           fsr0l	equ	0xFE9
 20965                           wreg	equ	0xFE8
 20966                           postdec1	equ	0xFE5
 20967                           fsr1h	equ	0xFE2
 20968                           fsr1l	equ	0xFE1
 20969                           indf2	equ	0xFDF
 20970                           postinc2	equ	0xFDE
 20971                           postdec2	equ	0xFDD
 20972                           fsr2h	equ	0xFDA
 20973                           fsr2l	equ	0xFD9
 20974                           status	equ	0xFD8
 20975                           
 20976 ;; *************** function i2_I2C_Master_Write *****************
 20977 ;; Defined at:
 20978 ;;		line 49 in file "I2C.c"
 20979 ;; Parameters:    Size  Location     Type
 20980 ;;  d               2    1[COMRAM] unsigned int 
 20981 ;; Auto vars:     Size  Location     Type
 20982 ;;		None
 20983 ;; Return value:  Size  Location     Type
 20984 ;;                  1    wreg      void 
 20985 ;; Registers used:
 20986 ;;		wreg, status,2, status,0, cstack
 20987 ;; Tracked objects:
 20988 ;;		On entry : 0/0
 20989 ;;		On exit  : 0/0
 20990 ;;		Unchanged: 0/0
 20991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20992 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20995 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20996 ;;Total ram usage:        2 bytes
 20997 ;; Hardware stack levels used:    1
 20998 ;; Hardware stack levels required when called:    1
 20999 ;; This function calls:
 21000 ;;		i2_I2C_Master_Wait
 21001 ;; This function is called by:
 21002 ;;		i2_getRTC
 21003 ;; This function uses a non-reentrant model
 21004 ;;
 21005                           
 21006                           	psect	text87
 21007  00487E                     __ptext87:
 21008                           	opt stack 0
 21009  00487E                     i2_I2C_Master_Write:
 21010                           	opt stack 18
 21011                           
 21012                           ;I2C.c: 51: I2C_Master_Wait();
 21013                           
 21014                           ;incstack = 0
 21015  00487E  EC15  F024         	call	i2_I2C_Master_Wait	;wreg free
 21016                           
 21017                           ;I2C.c: 52: SSPBUF = d;
 21018  004882  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 21019  004886  0012               	return		;funcret
 21020  004888                     __end_ofi2_I2C_Master_Write:
 21021                           	opt stack 0
 21022                           pclatu	equ	0xFFB
 21023                           pclath	equ	0xFFA
 21024                           tblptru	equ	0xFF8
 21025                           tblptrh	equ	0xFF7
 21026                           tblptrl	equ	0xFF6
 21027                           tablat	equ	0xFF5
 21028                           prodh	equ	0xFF4
 21029                           prodl	equ	0xFF3
 21030                           intcon	equ	0xFF2
 21031                           intcon2	equ	0xFF1
 21032                           intcon3	equ	0xFF0
 21033                           indf0	equ	0xFEF
 21034                           postinc0	equ	0xFEE
 21035                           fsr0h	equ	0xFEA
 21036                           fsr0l	equ	0xFE9
 21037                           wreg	equ	0xFE8
 21038                           postdec1	equ	0xFE5
 21039                           fsr1h	equ	0xFE2
 21040                           fsr1l	equ	0xFE1
 21041                           indf2	equ	0xFDF
 21042                           postinc2	equ	0xFDE
 21043                           postdec2	equ	0xFDD
 21044                           fsr2h	equ	0xFDA
 21045                           fsr2l	equ	0xFD9
 21046                           status	equ	0xFD8
 21047                           
 21048 ;; *************** function i2_I2C_Master_Stop *****************
 21049 ;; Defined at:
 21050 ;;		line 43 in file "I2C.c"
 21051 ;; Parameters:    Size  Location     Type
 21052 ;;		None
 21053 ;; Auto vars:     Size  Location     Type
 21054 ;;		None
 21055 ;; Return value:  Size  Location     Type
 21056 ;;                  1    wreg      void 
 21057 ;; Registers used:
 21058 ;;		wreg, status,2, status,0, cstack
 21059 ;; Tracked objects:
 21060 ;;		On entry : 0/0
 21061 ;;		On exit  : 0/0
 21062 ;;		Unchanged: 0/0
 21063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21067 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21068 ;;Total ram usage:        0 bytes
 21069 ;; Hardware stack levels used:    1
 21070 ;; Hardware stack levels required when called:    1
 21071 ;; This function calls:
 21072 ;;		i2_I2C_Master_Wait
 21073 ;; This function is called by:
 21074 ;;		i2_getRTC
 21075 ;; This function uses a non-reentrant model
 21076 ;;
 21077                           
 21078                           	psect	text88
 21079  0048A0                     __ptext88:
 21080                           	opt stack 0
 21081  0048A0                     i2_I2C_Master_Stop:
 21082                           	opt stack 18
 21083                           
 21084                           ;I2C.c: 45: I2C_Master_Wait();
 21085                           
 21086                           ;incstack = 0
 21087  0048A0  EC15  F024         	call	i2_I2C_Master_Wait	;wreg free
 21088                           
 21089                           ;I2C.c: 46: PEN = 1;
 21090  0048A4  84C5               	bsf	4037,2,c	;volatile
 21091  0048A6  0012               	return		;funcret
 21092  0048A8                     __end_ofi2_I2C_Master_Stop:
 21093                           	opt stack 0
 21094                           pclatu	equ	0xFFB
 21095                           pclath	equ	0xFFA
 21096                           tblptru	equ	0xFF8
 21097                           tblptrh	equ	0xFF7
 21098                           tblptrl	equ	0xFF6
 21099                           tablat	equ	0xFF5
 21100                           prodh	equ	0xFF4
 21101                           prodl	equ	0xFF3
 21102                           intcon	equ	0xFF2
 21103                           intcon2	equ	0xFF1
 21104                           intcon3	equ	0xFF0
 21105                           indf0	equ	0xFEF
 21106                           postinc0	equ	0xFEE
 21107                           fsr0h	equ	0xFEA
 21108                           fsr0l	equ	0xFE9
 21109                           wreg	equ	0xFE8
 21110                           postdec1	equ	0xFE5
 21111                           fsr1h	equ	0xFE2
 21112                           fsr1l	equ	0xFE1
 21113                           indf2	equ	0xFDF
 21114                           postinc2	equ	0xFDE
 21115                           postdec2	equ	0xFDD
 21116                           fsr2h	equ	0xFDA
 21117                           fsr2l	equ	0xFD9
 21118                           status	equ	0xFD8
 21119                           
 21120 ;; *************** function i2_I2C_Master_Start *****************
 21121 ;; Defined at:
 21122 ;;		line 31 in file "I2C.c"
 21123 ;; Parameters:    Size  Location     Type
 21124 ;;		None
 21125 ;; Auto vars:     Size  Location     Type
 21126 ;;		None
 21127 ;; Return value:  Size  Location     Type
 21128 ;;                  1    wreg      void 
 21129 ;; Registers used:
 21130 ;;		wreg, status,2, status,0, cstack
 21131 ;; Tracked objects:
 21132 ;;		On entry : 0/0
 21133 ;;		On exit  : 0/0
 21134 ;;		Unchanged: 0/0
 21135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21139 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21140 ;;Total ram usage:        0 bytes
 21141 ;; Hardware stack levels used:    1
 21142 ;; Hardware stack levels required when called:    1
 21143 ;; This function calls:
 21144 ;;		i2_I2C_Master_Wait
 21145 ;; This function is called by:
 21146 ;;		i2_getRTC
 21147 ;; This function uses a non-reentrant model
 21148 ;;
 21149                           
 21150                           	psect	text89
 21151  0048A8                     __ptext89:
 21152                           	opt stack 0
 21153  0048A8                     i2_I2C_Master_Start:
 21154                           	opt stack 18
 21155                           
 21156                           ;I2C.c: 33: I2C_Master_Wait();
 21157                           
 21158                           ;incstack = 0
 21159  0048A8  EC15  F024         	call	i2_I2C_Master_Wait	;wreg free
 21160                           
 21161                           ;I2C.c: 34: SEN = 1;
 21162  0048AC  80C5               	bsf	4037,0,c	;volatile
 21163  0048AE  0012               	return		;funcret
 21164  0048B0                     __end_ofi2_I2C_Master_Start:
 21165                           	opt stack 0
 21166                           pclatu	equ	0xFFB
 21167                           pclath	equ	0xFFA
 21168                           tblptru	equ	0xFF8
 21169                           tblptrh	equ	0xFF7
 21170                           tblptrl	equ	0xFF6
 21171                           tablat	equ	0xFF5
 21172                           prodh	equ	0xFF4
 21173                           prodl	equ	0xFF3
 21174                           intcon	equ	0xFF2
 21175                           intcon2	equ	0xFF1
 21176                           intcon3	equ	0xFF0
 21177                           indf0	equ	0xFEF
 21178                           postinc0	equ	0xFEE
 21179                           fsr0h	equ	0xFEA
 21180                           fsr0l	equ	0xFE9
 21181                           wreg	equ	0xFE8
 21182                           postdec1	equ	0xFE5
 21183                           fsr1h	equ	0xFE2
 21184                           fsr1l	equ	0xFE1
 21185                           indf2	equ	0xFDF
 21186                           postinc2	equ	0xFDE
 21187                           postdec2	equ	0xFDD
 21188                           fsr2h	equ	0xFDA
 21189                           fsr2l	equ	0xFD9
 21190                           status	equ	0xFD8
 21191                           
 21192 ;; *************** function i2_I2C_Master_Read *****************
 21193 ;; Defined at:
 21194 ;;		line 55 in file "I2C.c"
 21195 ;; Parameters:    Size  Location     Type
 21196 ;;  a               1    wreg     unsigned char 
 21197 ;; Auto vars:     Size  Location     Type
 21198 ;;  a               1    1[COMRAM] unsigned char 
 21199 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 21200 ;; Return value:  Size  Location     Type
 21201 ;;                  1    wreg      unsigned char 
 21202 ;; Registers used:
 21203 ;;		wreg, status,2, status,0, cstack
 21204 ;; Tracked objects:
 21205 ;;		On entry : 0/0
 21206 ;;		On exit  : 0/0
 21207 ;;		Unchanged: 0/0
 21208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21210 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21212 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21213 ;;Total ram usage:        2 bytes
 21214 ;; Hardware stack levels used:    1
 21215 ;; Hardware stack levels required when called:    1
 21216 ;; This function calls:
 21217 ;;		i2_I2C_Master_Wait
 21218 ;; This function is called by:
 21219 ;;		i2_getRTC
 21220 ;; This function uses a non-reentrant model
 21221 ;;
 21222                           
 21223                           	psect	text90
 21224  004726                     __ptext90:
 21225                           	opt stack 0
 21226  004726                     i2_I2C_Master_Read:
 21227                           	opt stack 18
 21228                           
 21229                           ;incstack = 0
 21230                           ;i2I2C_Master_Read@a stored from wreg
 21231  004726  6E02               	movwf	i2I2C_Master_Read@a,c
 21232                           
 21233                           ;I2C.c: 57: unsigned char temp;
 21234                           ;I2C.c: 58: I2C_Master_Wait();
 21235  004728  EC15  F024         	call	i2_I2C_Master_Wait	;wreg free
 21236                           
 21237                           ;I2C.c: 59: RCEN = 1;
 21238  00472C  86C5               	bsf	4037,3,c	;volatile
 21239                           
 21240                           ;I2C.c: 60: I2C_Master_Wait();
 21241  00472E  EC15  F024         	call	i2_I2C_Master_Wait	;wreg free
 21242                           
 21243                           ;I2C.c: 61: temp = SSPBUF;
 21244  004732  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 21245                           
 21246                           ;I2C.c: 62: I2C_Master_Wait();
 21247  004736  EC15  F024         	call	i2_I2C_Master_Wait	;wreg free
 21248                           
 21249                           ;I2C.c: 63: ACKDT = (a)?0:1;
 21250  00473A  5002               	movf	i2I2C_Master_Read@a,w,c
 21251  00473C  A4D8               	btfss	status,2,c
 21252  00473E  D002               	goto	i2u371_40
 21253  004740  8AC5               	bsf	4037,5,c	;volatile
 21254  004742  D001               	goto	i2l5392
 21255  004744                     i2u371_40:
 21256  004744  9AC5               	bcf	4037,5,c	;volatile
 21257  004746                     i2l5392:
 21258                           
 21259                           ;I2C.c: 64: ACKEN = 1;
 21260  004746  88C5               	bsf	4037,4,c	;volatile
 21261                           
 21262                           ;I2C.c: 65: return temp;
 21263  004748  5003               	movf	i2I2C_Master_Read@temp,w,c
 21264  00474A  0012               	return	
 21265  00474C                     __end_ofi2_I2C_Master_Read:
 21266                           	opt stack 0
 21267                           pclatu	equ	0xFFB
 21268                           pclath	equ	0xFFA
 21269                           tblptru	equ	0xFF8
 21270                           tblptrh	equ	0xFF7
 21271                           tblptrl	equ	0xFF6
 21272                           tablat	equ	0xFF5
 21273                           prodh	equ	0xFF4
 21274                           prodl	equ	0xFF3
 21275                           intcon	equ	0xFF2
 21276                           intcon2	equ	0xFF1
 21277                           intcon3	equ	0xFF0
 21278                           indf0	equ	0xFEF
 21279                           postinc0	equ	0xFEE
 21280                           fsr0h	equ	0xFEA
 21281                           fsr0l	equ	0xFE9
 21282                           wreg	equ	0xFE8
 21283                           postdec1	equ	0xFE5
 21284                           fsr1h	equ	0xFE2
 21285                           fsr1l	equ	0xFE1
 21286                           indf2	equ	0xFDF
 21287                           postinc2	equ	0xFDE
 21288                           postdec2	equ	0xFDD
 21289                           fsr2h	equ	0xFDA
 21290                           fsr2l	equ	0xFD9
 21291                           status	equ	0xFD8
 21292                           
 21293 ;; *************** function i2_I2C_Master_Wait *****************
 21294 ;; Defined at:
 21295 ;;		line 26 in file "I2C.c"
 21296 ;; Parameters:    Size  Location     Type
 21297 ;;		None
 21298 ;; Auto vars:     Size  Location     Type
 21299 ;;		None
 21300 ;; Return value:  Size  Location     Type
 21301 ;;                  1    wreg      void 
 21302 ;; Registers used:
 21303 ;;		wreg, status,2, status,0
 21304 ;; Tracked objects:
 21305 ;;		On entry : 0/0
 21306 ;;		On exit  : 0/0
 21307 ;;		Unchanged: 0/0
 21308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21311 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21312 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21313 ;;Total ram usage:        1 bytes
 21314 ;; Hardware stack levels used:    1
 21315 ;; This function calls:
 21316 ;;		Nothing
 21317 ;; This function is called by:
 21318 ;;		i2_I2C_Master_Start
 21319 ;;		i2_I2C_Master_Stop
 21320 ;;		i2_I2C_Master_Write
 21321 ;;		i2_I2C_Master_Read
 21322 ;; This function uses a non-reentrant model
 21323 ;;
 21324                           
 21325                           	psect	text91
 21326  00482A                     __ptext91:
 21327                           	opt stack 0
 21328  00482A                     i2_I2C_Master_Wait:
 21329                           	opt stack 18
 21330  00482A                     i2l66:
 21331  00482A  B4C7               	btfsc	4039,2,c	;volatile
 21332  00482C  D7FE               	goto	i2l66
 21333  00482E  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 21334  004832  0E1F               	movlw	31
 21335  004834  1601               	andwf	??i2_I2C_Master_Wait,f,c
 21336  004836  B4D8               	btfsc	status,2,c
 21337  004838  0012               	return	
 21338  00483A  D7F7               	goto	i2l66
 21339  00483C                     __end_ofi2_I2C_Master_Wait:
 21340                           	opt stack 0
 21341                           pclatu	equ	0xFFB
 21342                           pclath	equ	0xFFA
 21343                           tblptru	equ	0xFF8
 21344                           tblptrh	equ	0xFF7
 21345                           tblptrl	equ	0xFF6
 21346                           tablat	equ	0xFF5
 21347                           prodh	equ	0xFF4
 21348                           prodl	equ	0xFF3
 21349                           intcon	equ	0xFF2
 21350                           intcon2	equ	0xFF1
 21351                           intcon3	equ	0xFF0
 21352                           indf0	equ	0xFEF
 21353                           postinc0	equ	0xFEE
 21354                           fsr0h	equ	0xFEA
 21355                           fsr0l	equ	0xFE9
 21356                           wreg	equ	0xFE8
 21357                           postdec1	equ	0xFE5
 21358                           fsr1h	equ	0xFE2
 21359                           fsr1l	equ	0xFE1
 21360                           indf2	equ	0xFDF
 21361                           postinc2	equ	0xFDE
 21362                           postdec2	equ	0xFDD
 21363                           fsr2h	equ	0xFDA
 21364                           fsr2l	equ	0xFD9
 21365                           status	equ	0xFD8
 21366                           pclatu	equ	0xFFB
 21367                           pclath	equ	0xFFA
 21368                           tblptru	equ	0xFF8
 21369                           tblptrh	equ	0xFF7
 21370                           tblptrl	equ	0xFF6
 21371                           tablat	equ	0xFF5
 21372                           prodh	equ	0xFF4
 21373                           prodl	equ	0xFF3
 21374                           intcon	equ	0xFF2
 21375                           intcon2	equ	0xFF1
 21376                           intcon3	equ	0xFF0
 21377                           indf0	equ	0xFEF
 21378                           postinc0	equ	0xFEE
 21379                           fsr0h	equ	0xFEA
 21380                           fsr0l	equ	0xFE9
 21381                           wreg	equ	0xFE8
 21382                           postdec1	equ	0xFE5
 21383                           fsr1h	equ	0xFE2
 21384                           fsr1l	equ	0xFE1
 21385                           indf2	equ	0xFDF
 21386                           postinc2	equ	0xFDE
 21387                           postdec2	equ	0xFDD
 21388                           fsr2h	equ	0xFDA
 21389                           fsr2l	equ	0xFD9
 21390                           status	equ	0xFD8
 21391                           
 21392                           	psect	rparam
 21393  0000                     pclatu	equ	0xFFB
 21394                           pclath	equ	0xFFA
 21395                           tblptru	equ	0xFF8
 21396                           tblptrh	equ	0xFF7
 21397                           tblptrl	equ	0xFF6
 21398                           tablat	equ	0xFF5
 21399                           prodh	equ	0xFF4
 21400                           prodl	equ	0xFF3
 21401                           intcon	equ	0xFF2
 21402                           intcon2	equ	0xFF1
 21403                           intcon3	equ	0xFF0
 21404                           indf0	equ	0xFEF
 21405                           postinc0	equ	0xFEE
 21406                           fsr0h	equ	0xFEA
 21407                           fsr0l	equ	0xFE9
 21408                           wreg	equ	0xFE8
 21409                           postdec1	equ	0xFE5
 21410                           fsr1h	equ	0xFE2
 21411                           fsr1l	equ	0xFE1
 21412                           indf2	equ	0xFDF
 21413                           postinc2	equ	0xFDE
 21414                           postdec2	equ	0xFDD
 21415                           fsr2h	equ	0xFDA
 21416                           fsr2l	equ	0xFD9
 21417                           status	equ	0xFD8
 21418                           
 21419                           	psect	temp
 21420  00007E                     btemp:
 21421                           	opt stack 0
 21422  00007E                     	ds	1
 21423  0000                     int$flags	set	btemp
 21424                           pclatu	equ	0xFFB
 21425                           pclath	equ	0xFFA
 21426                           tblptru	equ	0xFF8
 21427                           tblptrh	equ	0xFF7
 21428                           tblptrl	equ	0xFF6
 21429                           tablat	equ	0xFF5
 21430                           prodh	equ	0xFF4
 21431                           prodl	equ	0xFF3
 21432                           intcon	equ	0xFF2
 21433                           intcon2	equ	0xFF1
 21434                           intcon3	equ	0xFF0
 21435                           indf0	equ	0xFEF
 21436                           postinc0	equ	0xFEE
 21437                           fsr0h	equ	0xFEA
 21438                           fsr0l	equ	0xFE9
 21439                           wreg	equ	0xFE8
 21440                           postdec1	equ	0xFE5
 21441                           fsr1h	equ	0xFE2
 21442                           fsr1l	equ	0xFE1
 21443                           indf2	equ	0xFDF
 21444                           postinc2	equ	0xFDE
 21445                           postdec2	equ	0xFDD
 21446                           fsr2h	equ	0xFDA
 21447                           fsr2l	equ	0xFD9
 21448                           status	equ	0xFD8


Data Sizes:
    Strings     1233
    Constant    27
    Data        8
    BSS         120
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      55
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_118(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_117(CODE[18]), STR_116(CODE[18]), STR_115(CODE[17]), STR_114(CODE[17]), 
		 -> STR_113(CODE[11]), STR_112(CODE[18]), STR_111(CODE[18]), STR_110(CODE[17]), 
		 -> STR_109(CODE[15]), STR_108(CODE[15]), STR_107(CODE[15]), STR_106(CODE[17]), 
		 -> STR_105(CODE[17]), STR_104(CODE[17]), STR_103(CODE[16]), STR_102(CODE[17]), 
		 -> STR_101(CODE[17]), STR_100(CODE[17]), STR_99(CODE[17]), STR_98(CODE[17]), 
		 -> STR_97(CODE[17]), STR_96(CODE[15]), STR_95(CODE[11]), STR_94(CODE[17]), 
		 -> STR_93(CODE[11]), STR_92(CODE[17]), STR_91(CODE[14]), STR_90(CODE[15]), 
		 -> STR_89(CODE[14]), STR_88(CODE[10]), STR_87(CODE[9]), STR_86(CODE[9]), 
		 -> STR_85(CODE[10]), STR_84(CODE[10]), STR_83(CODE[16]), STR_82(CODE[15]), 
		 -> STR_81(CODE[3]), STR_80(CODE[15]), STR_79(CODE[13]), STR_78(CODE[14]), 
		 -> STR_77(CODE[8]), STR_76(CODE[14]), STR_75(CODE[15]), STR_74(CODE[12]), 
		 -> STR_73(CODE[14]), STR_72(CODE[17]), STR_71(CODE[14]), STR_70(CODE[15]), 
		 -> STR_69(CODE[17]), STR_68(CODE[17]), STR_67(CODE[7]), STR_66(CODE[21]), 
		 -> STR_65(CODE[13]), STR_64(CODE[11]), STR_63(CODE[24]), STR_50(CODE[17]), 
		 -> STR_49(CODE[17]), STR_48(CODE[17]), STR_47(CODE[17]), STR_46(CODE[17]), 
		 -> STR_45(CODE[17]), STR_44(CODE[17]), STR_43(CODE[17]), STR_42(CODE[17]), 
		 -> STR_41(CODE[17]), STR_40(CODE[17]), STR_39(CODE[17]), STR_38(CODE[17]), 
		 -> STR_37(CODE[17]), STR_36(CODE[17]), STR_35(CODE[17]), STR_34(CODE[17]), 
		 -> STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), STR_30(CODE[17]), 
		 -> STR_29(CODE[3]), STR_28(CODE[17]), STR_27(CODE[17]), STR_26(CODE[17]), 
		 -> STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[14]), STR_22(CODE[10]), 
		 -> STR_21(CODE[24]), STR_7(CODE[7]), STR_6(CODE[17]), STR_5(CODE[18]), 
		 -> STR_4(CODE[16]), STR_3(CODE[18]), STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getIR->_readIR
    _readIR->_readADC
    _ID->_getMAG
    _getMAG->_readMAG
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _algorithmTest->_printf
    _actuatorTest->_printf
    _SpeedTest->_printf
    _PusherTest->_printf
    _PortTestA5->_printf
    _BothServos->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _initServos->_updateServoPosition

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  182141
                    _I2C_Master_Init
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   21258
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                              9     9      0   16264
                                             49 BANK0      9     9      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getIR                                                2     2      0      45
                                              6 BANK0      2     2      0
                             _readIR
 ---------------------------------------------------------------------------------
 (4) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _ID                                                  10    10      0     253
                                              8 BANK0     10    10      0
                             _getMAG
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    4741
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   10850
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   10103
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   22096
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   21182
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   43944
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   12775
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    8407
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    8407
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0   82880
                                             70 BANK0      2     2      0
                         _BothServos
                         _EEPROMTest
                         _PortTestA5
                          _PortTests
                         _PusherTest
                          _SpeedTest
                       _actuatorTest
                      _algorithmTest
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    8519
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (5) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    8407
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   14391
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _SpeedTest                                            1     1      0    8407
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PusherTest                                           3     3      0    8453
                                             43 BANK0      3     3      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTests                                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTestA5                                           1     1      0    8407
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _EEPROMTest                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   17889
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    8272
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     442
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    4741
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    4741
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   76936
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   71999
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7744
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4605
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   31390
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4937
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    3004
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     318
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _EEPROMTest
     _PortTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTests
     _PusherTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _SpeedTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _getMAG
         _readMAG
           _readADC
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      37       7       21.5%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     134      34        0.0%
DATA                 0      0     134       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Fri Mar 24 21:52:13 2017

                                    _i 012D                     i2_I2C_Master_Start 48A8  
                   i2_I2C_Master_Write 487E                                     l66 4816  
                                   _ID 2FA4                            __CFG_CPD$ON 000000  
                                   _UI 08CA                           ___awdiv@sign 008B  
                                   _up 0077                    ___wmul@multiplicand 0082  
                   i2___lwdiv@dividend 0006                            __CFG_BORV$3 000000  
                   EEPROM_read@address 0080                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                                    ID@i 008A  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l180 09A0  
                                  l602 2056                                    l730 2C08  
                                  l487 36C2                                    l752 30B4  
                                  l753 30CE                                    l739 2CB4  
                                  l932 348C                                    l945 47E2  
                                  l954 3226                                    l798 3CF8  
                         __CFG_CPB$OFF 000000                                    _PEN 007E2A  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
                       ?_machineConfig 0001                    ?i2_I2C_Master_Write 0002  
                                  _log 00E6                                    _sel 00FD  
                                  _var 00FA                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
                  _log_count_can_w_lab 00EC        __end_of_change_state_to_menu_11 44B4  
      __end_of_change_state_to_menu_12 4324        __end_of_change_state_to_menu_22 42EC  
      __end_of_change_state_to_menu_23 4484           _f_can_coming_to_distribution 0071  
                       ??_Distribution 0088        __end_of_change_state_to_logs_11 45A4  
      __end_of_change_state_to_logs_12 4574        __end_of_change_state_to_logs_22 4544  
      __end_of_change_state_to_logs_23 462E        __end_of_change_state_to_logs_33 4514  
      __end_of_change_state_to_logs_34 44E4                                   ??_ID 0088  
                                 ??_UI 00C4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1102 007C  
                                 l1112 018C                                   l1113 01DA  
                                 l1105 0080                                   l1114 0240  
                                 l1211 3C3E                                   l1115 028E  
                                 l1204 3BF6                                   l1044 33C0  
                                 l1109 0126                                   l1070 35B0  
                                 l1151 0782                                   l1047 33E0  
                                 l1240 3B14                                   l1209 3C24  
                                 l1233 3B04                                   l1139 05E8  
                                 l1067 35AC                                   l1156 0858  
                                 l1076 1D00                                   l1181 3BB2  
                                 l1173 3B60                                   l1190 3FD8  
                                 l1175 3B64                                   l1079 1D04  
                                 l1176 3B68                                   l1177 3B6C  
                                 l1169 3B44                                   l1178 3B70  
                                 l1179 3B74                                   l1276 13B6  
                                 l1196 3FE8                                   l1723 3CB2  
                                 l1733 3ECE                                   l1670 3850  
                                 l6100 3536                                   l6110 46CC  
                                 l5306 45F8                                   l6106 46B6  
                                 l6042 3886                                   l5340 3C62  
                                 l5324 46A6                                   l5500 125E  
                                 l7100 07FA                                   l7012 0652  
                                 l7004 0630                                   l5342 3C6E  
                                 l5510 129C                                   l7030 06B4  
                                 l7022 067A                                   l7014 0658  
                                 l6230 3A06                                   l6038 3870  
                                 l5352 3CA4                                   l5344 3C74  
                                 l5360 3E8A                                   l5600 1524  
                                 l5520 1314                                   l5512 12A2  
                                 l7104 0804                                   l7040 06DC  
                                 l7008 063A                                   l6048 38FC  
                                 l5362 3E96                                   l5530 1376  
                                 l5522 131A                                   l7202 3C0E  
                                 l7130 0882                                   l7114 0842  
                                 l7034 06BE                                   l7018 0662  
                                 l5282 466E                                   l5610 432E  
                                 l6226 39F0                                   l6138 40E8  
                                 l5364 3E9C                                   l5604 157C  
                                 l5524 1332                                   l5508 1290  
                                 l7140 08AA                                   l7124 0872  
                                 l7108 081C                                   l7060 0742  
                                 l7044 06E6                                   l5284 4680  
                                 l5612 433A                                   l6236 3A32  
                                 l6084 34F4                                   l6092 3516  
                                 l5550 1408                                   l5518 1308  
                                 l5534 137C                                   l5606 1588  
                                 l7134 089A                                   l7126 0878  
                                 l7070 076A                                   l7038 06D6  
                                 l5622 3A90                                   l8014 314C  
                                 l5368 3EC0                                   l5552 140E  
                                 l5528 135E                                   l5480 1192  
                                 l7216 3B78                                   l7144 08C2  
                                 l7136 08A0                                   l7064 075A  
                                 l7056 0738                                   l7048 06FE  
                                 l6096 352C                                   l6088 34FE  
                                 l8040 31E0                                   l8016 3160  
                                 l6512 3040                                   l5570 146C  
                                 l5546 13EE                                   l5482 11A4  
                                 l7090 07D2                                   l7066 0760  
                                 l7330 371A                                   l5618 3A7A  
                                 l6522 3070                                   l6530 3088  
                                 l6442 2BC6                                   l5564 144A  
                                 l5492 11E2                                   l5476 117E  
                                 l8052 3362                                   l7340 374A  
                                 l7324 3704                                   l5628 3AB0  
                                 l5900 21C8                                   l5660 37D4  
                                 l5646 3CE4                                   l5590 14F0  
                                 l5582 14C8                                   l5574 14A4  
                                 l5486 11AE                                   l7094 07DC  
                                 l8070 33E6                                   l5902 2226  
                                 l7510 0B06                                   l7502 0AE4  
                                 l5662 37E4                                   l6526 307C  
                                 l6470 2C66                                   l6454 2C2C  
                                 l8150 3684                                   _ADIE 007CEE  
                                 l5648 3D0E                                   l5576 14AE  
                                 l6720 1F98                                   l6704 1F1A  
                                 l8080 3404                                   l8072 33EC  
                                 l7336 3738                                   l7352 3788  
                                 l7520 0B22                                   l7440 09B8  
                                 l5672 383E                                   l5664 37EA  
                                 l6560 2E6A                                   l6536 309E  
                                 l5594 150A                                   l7186 3B3C  
                                 l7098 07F4                                   l8082 340A  
                                 l8074 33F2                                   l8090 341C  
                                 l7338 3744                                   l7506 0AEE  
                                 l7450 09DA                                   l7442 09BE  
                                 l6562 2E84                                   l6570 2EE6  
                                 l8154 3694                                   l5588 14E4  
                                 l6716 1F62                                   l6708 1F50  
                                 l8084 3410                                   l8076 33F8  
                                 l7356 379C                                   l7348 377A  
                                 l7380 395E                                   l7372 3938  
                                 l7700 1056                                   l7620 0EDE  
                                 l7540 0B8C                                   l7524 0B3A  
                                 l7516 0B18                                   l6564 2E9E  
                                 l8156 369A                                   l8172 36C4  
                                 l8148 366E                                   l5598 151E  
                                 l6902 041C                                   l8086 3416  
                                 l8078 33FE                                   l7710 1080  
                                 l7630 0F08                                   l7550 0C22  
                                 l7542 0BAA                                   l7454 09F2  
                                 l7446 09D0                                   l6558 2E50  
                                 l6478 2C9E                                   l8166 36B8  
                                 l8158 36A0                                   l6912 0444  
                                 l6760 00EA                                   l6648 1D54  
                                 l7392 39A4                                   l7384 3982  
                                 l7376 394C                                   l7368 3928  
                                 l5880 20BA                                   l7704 106E  
                                 l7624 0EF6                                   l7616 0ED4  
                                 l7560 0CB8                                   l7552 0C40  
                                 l7544 0BC8                                   l7472 0A5C  
                                 l6568 2EB8                                   l6488 2CCE  
                                 l8168 36BE                                   l6906 0434  
                                 l6850 0314                                   l6770 0112  
                                 l6762 00F0                                   l6666 1E0C  
                                 l7378 3958                                   l5890 2150  
                                 l5882 20D8                                   l5874 2060  
                                 l7714 108A                                   l7634 0F12  
                                 l7562 0CD6                                   l7554 0C5E  
                                 l7546 0BE6                                   l7570 0D76  
                                 l7482 0A84                                   l7474 0A62  
                                 l7458 0A04                                   l6932 04B8  
                                 l6924 0496                                   l6916 045C  
                                 l6908 043A                                   l6860 033C  
                                 l6684 1E9E                                   l7388 3990  
                                 l5892 216E                                   l5884 20F6  
                                 l5876 207E                                   l5868 1FD4  
                                 l7740 110A                                   l7660 0F9A  
                                 l7564 0CF4                                   l7556 0C7C  
                                 l7548 0C04                                   l6950 051A  
                                 l6942 04E0                                   l6934 04BE  
                                 l6854 032C                                   l6846 030A  
                                 l6766 00FA                                   l6678 1E5C  
                                 l5894 218C                                   l5886 2114  
                                 l5878 209C                                   l7750 1134  
                                 l7718 10A2                                   l7670 0FC4  
                                 l7638 0F2A                                   l7582 0DDA  
                                 l7574 0DB8                                   l7558 0C9A  
                                 l7478 0A6C                                   l6960 0542  
                                 l6928 04A0                                   l6880 03B0  
                                 l6872 038E                                   l6864 0354  
                                 l6856 0332                                   l6696 1EEA  
                                 l5896 21AA                                   l5888 2132  
                                 l7744 1122                                   l7736 1100  
                                 l7664 0FB2                                   l7656 0F90  
                                 l7592 0DF6                                   l7568 0D12  
                                 l7488 0A92                                   l6954 0524  
                                 l6938 04C8                                   l6890 03D8  
                                 l6882 03B6                                   l7754 113E  
                                 l7674 0FCE                                   l7578 0DC2  
                                 l7762 1162                                   l6980 05A8  
                                 l6964 054C                                   l6876 0398  
                                 l7596 0E0E                                   l7588 0DEC  
                                 l6990 05D0                                   l6958 053C  
                                 l6886 03C0                                   l7758 1156  
                                 l7678 0FE6                                   l6984 05C0  
                                 l6976 059E                                   l6968 0564  
                                 l7696 104C                                   l6986 05C6  
                                 l6898 0412                                   STR_1 FBA3  
                                 STR_2 FF27                                   STR_3 FB91  
                                 STR_4 FE4A                                   STR_5 FB91  
                                 STR_6 FDE6                                   STR_7 FFC4  
                                 STR_8 FFDB                                   STR_9 FFCB  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u5100 1D96  
                                 u5110 1D98                                   u3610 45F6  
                                 u5140 1F3E                                   u5240 0126  
                                 u4520 2056                                   u4505 3F08  
                                 u5170 1F86                                   u3810 41D6  
                                 _PEIE 007F96                                   u5260 01DA  
                                 u5148 1F42                                   u3820 41D8  
                                 u3830 4222                                   u3831 421E  
                                 u5280 028E                                   u3840 4224  
                                 u3930 1354                                   u5178 1F8A  
                                 _RCEN 007E2B                                   u7117 2B56  
                                 u8007 0772                                   u7207 30B8  
                                 u7127 2C1C                                   u3937 134A  
                                 u8017 0794                                   u7217 30C2  
                                 u7137 2C86                                   u3890 12DC  
                                 u4850 2BD2                                   u8107 3B32  
                                 u8027 07E4                                   u7307 4234  
                                 u7227 30E6                                   u7147 2CB8  
                                 u8117 3BD6                                   u8037 080C  
                                 u7317 4268                                   u7237 43AE  
                                 u7157 2CC2                                   u4950 2FD4  
                                 u4870 2C08                                   u8207 1702  
                                 u8127 3C28                                   u8047 085C  
                                 u7407 0DCA                                   u7327 08E2  
                                 u7247 2EF4                                   u7167 40BE  
                                 u3897 12D2                                   u8217 1736  
                                 u8137 3C30                                   u8057 0866  
                                 u7417 0DFE                                   u7337 09E2  
                                 u7257 2F28                                   u7177 46C2  
                                 i2l66 482A                                   u8307 3E2E  
                                 u8227 176A                                   u8147 3FA2  
                                 u8067 088A                                   u7507 1092  
                                 u7427 0E28                                   u7347 0A1E  
                                 u7267 2F5C                                   u7187 2FBA  
                                 u4980 3030                                   u4868 2BD6  
                                 u8317 3E38                                   u8237 17B6  
                                 u8157 15B6                                   u8077 08B2  
                                 u7517 10BC                                   u7437 0EE6  
                                 u7357 0A74                                   u7277 34AA  
                                 u7197 3016                                   u6910 3226  
                                 u4958 2FD8                                   u8327 3E64  
                                 u8247 1802                                   u8167 1602  
                                 u8087 3ACE                                   u7607 1DAC  
                                 u7527 1112                                   u7447 0F1A  
                                 u7367 0AA0                                   u7287 3506  
                                 u8337 3E6E                                   u8257 1836  
                                 u8177 164E                                   u8097 3B1E  
                                 u7617 1E00                                   u7537 1146  
                                 u7457 0F44                                   u7377 0AF6  
                                 u7297 353E                                   u8347 4032  
                                 u8267 186A                                   u8187 1682  
                                 u7707 35A0                                   u7627 1E20  
                                 u7547 3370                                   u7467 0FA2  
                                 u7387 0B2A                                   u4988 3034  
                                 u8277 18B6                                   u8197 16B6  
                                 u7717 35C2                                   u7637 1E4E  
                                 u7557 33B4                                   u7477 0FD6  
                                 u7397 0B54                                   u8287 18EA  
                                 u7807 0250                                   u7727 002C  
                                 u7647 1E92                                   u7567 1CB0  
                                 u7487 1000                                   u8297 191E  
                                 u7817 026E                                   u7737 0070  
                                 u7657 1EB0                                   u7577 1CF4  
                                 u7497 105E                                   u7907 04D0  
                                 u7827 029E                                   u7747 0092  
                                 u7667 1EDE                                   u7587 1D16  
                                 u7917 052C                                   u7837 031C  
                                 u7757 0102                                   u7677 1EF8  
                                 u7597 1D44                                   u7927 0554  
                                 u7847 0344                                   u7767 0136  
                                 u7687 4676                                   u7937 05B0  
                                 u7857 03A0                                   u7777 019C  
                                 u7697 355C                                   u7947 05D8  
                                 u7867 03C8                                   u7787 01BA  
                                 u7957 0642                                   u7877 0424  
                                 u7797 01EA                                   u7967 066A  
                                 u7887 044C                                   u7977 06C6  
                                 u7897 04A8                                   u7987 06EE  
                                 u7997 074A                                   _RSEN 007E29  
                          _stopSignals 47EA                                   _Test 3362  
                                 _back 005B                                   _main 3624  
                                 _down 0069                                   _keys FB13  
                                 _time 0124                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 4770                                   btemp 007E  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                 _log_count_can_no_lab 00EA                        __end_ofi2_putch 4868  
                  __size_of_EEPROMTest 0002                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                             i2_printRTC 252A  
                          i2_lcdNibble 404A                        __end_of_Loading 2CD8  
                 __end_of_actuatorTest 08CA                       ?_I2C_Master_Init 008D  
                     ?_I2C_Master_Read 0001                       ?_I2C_Master_Wait 0001  
          ??i2_change_state_to_menu_12 002A            ??i2_change_state_to_menu_22 002A  
                     ?_I2C_Master_Stop 0001                                  ?_Test 0001  
                 __end_of_EEPROM_write 354E                                  ?_main 0001  
                                _ACKEN 007E2C                                  _ACKDT 007E2D  
                      __end_of___awdiv 37A6                                  _EEADR 000FA9  
                                STR_10 FFE7                                  STR_11 FFEB  
                                STR_12 FFFB                                  STR_20 FFEF  
                                STR_13 FFDF                                  STR_21 FB2E  
                                STR_14 FFD7                                  STR_22 FF9B  
                                STR_30 FDF7                                  STR_15 FFD3  
                                STR_23 FF19                                  STR_31 FDD5  
                                STR_16 FFE3                                  STR_24 FD3C  
                                STR_32 FD1A                                  STR_40 FCD6  
                                STR_17 FFF3                                  STR_25 FE19  
                                STR_33 FD2B                                  STR_41 FCC5  
                                STR_18 FFF7                                  STR_34 FDC4  
                                STR_50 FDA2                                  STR_42 FD80  
                                STR_26 FD4D                                  STR_43 FD80  
                                STR_35 FDC4                                  STR_51 FFDB  
                                STR_19 FFCF                                  STR_27 FE08  
                                STR_52 FFCB                                  STR_60 FFF3  
                                STR_28 FD5E                                  STR_36 FD09  
                                STR_44 FCE7                        __end_of___awmod 39AE  
                                STR_45 FCD6                                  STR_37 FD1A  
                                STR_53 FFE7                                  STR_61 FFF7  
                                STR_29 FE16                                  STR_62 FFCF  
                                STR_54 FFEB                                  STR_70 FED2  
                                STR_38 FDB3                                  STR_46 FD91  
                                STR_47 FD91                                  STR_55 FFFB  
                                STR_63 FB2E                                  STR_71 FF0B  
                                STR_39 FD6F                                  STR_56 FFDF  
                                STR_64 FF7C                                  STR_80 FE5A  
                                STR_48 FCF8                                  STR_72 FC5F  
                                STR_49 FCE7                                  STR_57 FFD7  
                                STR_81 FE16                                  STR_65 FF42  
                                STR_73 FEEF                                  STR_58 FFD3  
                                STR_74 FF4F                                  STR_90 FEC3  
                                STR_82 FE87                                  STR_66 FB46  
                                STR_59 FFE3                                  STR_67 FFBD  
                                STR_91 FEE1                                  STR_75 FEB4  
                                STR_83 FE2A                                  STR_84 FF87  
                                STR_76 FEFD                                  STR_92 FC81  
                                STR_68 FC70                                  STR_85 FF87  
                                STR_77 FFAE                                  STR_93 FF5B  
                                STR_69 FCA3                                  STR_78 FF0B  
                                STR_86 FFA5                                  STR_94 FC92  
                                STR_87 FFA5                                  STR_95 FF66  
                                STR_79 FF35                                  STR_88 FF91  
                                STR_96 FEA5                                  STR_89 FF0B  
                                STR_97 FC0A                                  STR_98 FBF9  
                                STR_99 FBD7                                  ?_sort 0001  
                      __end_of___lldiv 3862                                  _T0CON 000FD5  
                      ___awdiv@divisor 0088                                  _T1CON 000FCD  
                                _T3CON 000FB1                        __end_of___lwdiv 3CBC  
                      __end_of___lwmod 3ED8                                  i2l257 2526  
                                i2l602 25B8                                  i2l863 2D9E  
                                i2l945 480E                                  i2l867 2DEA  
                      ___awdiv@counter 008A                                  i2l869 2E0A  
                                _TMR0H 000FD7                                  _TMR1H 000FCF  
                                _TMR0L 000FD6                                  _TMR3H 000FB3  
                                _TMR1L 000FCE                                  _TMR3L 000FB2  
                           _BothServos 15A8                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst 485C                        __end_of_handler 2E46  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _nRBPU 007F8F  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_readADC 4686  
                      __end_of_initLCD 4272                         __CFG_EBTRB$OFF 000000  
                                _debug 0067                             i2isdigit@c 0003  
                                _getIR 40A0                        __end_of_loadRTC 3A3A  
                      __end_of_readMAG 422C                        __end_of_dpowers FB2E  
                                _first 00E4                                  _enter 006B  
                      __end_of_isdigit 46B0                                  _input 007D  
                                _putch 483C                                  pclath 000FFA  
                                tablat 000FF5                       __end_ofi2___wmul 4726  
                     __end_ofi2_getRTC 3DA4                    _log_count_pop_w_tab 00F0  
                                status 000FD8                         __CFG_PBADEN$ON 000000  
                        i2printf@width 0028                       __end_ofi2_printf 1CA2  
                   __size_ofi2___lwdiv 0052                     __size_ofi2___lwmod 0042  
                     __end_ofi2_strcpy 43F4                            Loading@addr 00B3  
                     _count_can_no_lab 005D                   __size_of_EEPROM_read 0018  
                      __initialization 4146                           __end_of_Test 346A  
                   __size_ofi2_lcdInst 000C                           __end_of_main 36E8  
                         __end_of_keys FB24                           __end_of_sort 4792  
                           i2printf@ap 0020                             i2printf@cp 001E  
                   __size_ofi2_isdigit 001E                                 ??_Test 00C6  
  __size_of_change_state_to_menu_start 002C                        ??_machineConfig 0080  
                               ??_main 00DA                                 ??_sort 00BA  
                        __activetblptr 000003             updateServoPosition@my_time 0086  
           updateServoPosition@time_us 0080                             i2strcpy@cp 0005  
                           i2strcpy@to 0001                      ?_I2C_Master_Start 0001  
                  EEPROM_write@address 00AB                 __size_ofi2_EEPROM_read 0016  
                    ?_I2C_Master_Write 0081                                 ?_getIR 0001  
                   ??_I2C_Master_Start 0081                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 0083  
                               _ADCON2 000FC0                                 STR_100 FC2C  
                               STR_101 FC3D                                 STR_110 FCB4  
                               STR_102 FBB5                                 STR_103 FE3A  
                               STR_111 FB5B                                 STR_104 FBE8  
                               STR_112 FB6D                                 STR_113 FF71  
                               STR_105 FBC6                                 STR_106 FBE8  
                               STR_114 FC1B                                 _ADRESH 000FC4  
                               STR_107 FE96                                 STR_115 FC4E  
                               STR_108 FE78                                 STR_116 FB7F  
                               _EEADRH 000FAA                                 STR_117 FB6D  
                               STR_109 FE69                                 STR_118 FFB6  
                               _ADRESL 000FC3                                 _EEDATA 000FA8  
                               _EECON2 000FA7                       ___awdiv@dividend 0086  
                      i2lcdNibble@data 0002                                 ?_putch 0001  
               __size_of_initSortTimer 00AA                        i2lcdNibble@temp 0001  
            i2_change_state_to_menu_12 4424              i2_change_state_to_menu_22 43F4  
                               _INT1IE 007F83                                 _INT1IF 007F80  
                               _CVRCON 000FB5                                 i2l1276 1B0E  
                               i2l1723 413C                                 i2l1733 42AA  
                               i2l6030 334A                                 i2l6022 3316  
                               i2l6200 2672                                 i2l6018 3306  
                               i2l6202 2688                                 i2l6210 26CA  
                               i2l6204 269E                                 i2l6212 2724  
                               i2l5430 4116                                 i2l6310 29D4  
                               i2l6302 29BC                                 i2l6206 26B4  
                               i2l5416 47CA                                 i2l6312 29DA  
                               i2l6304 29C2                                 i2l5426 410A  
                               i2l5450 428C                                 i2l6306 29C8  
                               i2l5428 4112                                 i2l8100 276C  
                               i2l6308 29CE                                 i2l6316 29E0  
                               i2l5438 4132                                 i2l5454 42A0  
                               i2l5446 4280                                 i2l8110 27D6  
                               i2l6342 2A4A                                 i2l6190 2604  
                               i2l5392 4746                                 i2l5448 4288  
                               i2l5800 1B8A                                 i2l5712 193E  
                               i2l8120 2898                                 i2l8104 277C  
                               i2l6352 2A70                                 i2l6336 2A3C  
                               i2l6328 2A24                                 i2l6280 2970  
                               i2l6192 261A                                 i2l6184 25C2  
                               i2l5810 1BC8                                 i2l5722 1962  
                               i2l6370 2AAA                                 i2l6362 2A92  
                               i2l6346 2A66                                 i2l6290 299A  
                               i2l6194 2630                                 i2l6186 25D8  
                               i2l6178 2556                                 i2l8202 2D72  
                               i2l5812 1BD0                                 i2l5716 194E  
                               i2l6380 2ACA                                 i2l6356 2A84  
                               i2l6292 299E                                 i2l6196 2646  
                               i2l6188 25EE                                 i2l5830 1C18  
                               i2l5806 1BA4                                 i2l5718 195C  
                               i2l6358 2A88                                 i2l6198 265C  
                               i2l5840 1C7E                                 i2l5824 1BFC  
                               i2l5760 1A98                                 i2l5744 1A1E  
                               i2l5736 19F6                                 i2l5728 1994  
                               i2l6392 2B00                                 i2l6384 2ADC  
                               i2l6376 2AB8                                 i2l6288 298A  
                               i2l8224 2DBC                                 i2l5826 1C04  
                               i2l5834 1C2A                                 i2l5818 1BE6  
                               i2l5754 1A76                                 i2l5746 1A28  
                               i2l5770 1AD8                                 i2l5842 1C86  
                               i2l6298 29A8                                 i2l8226 2DBE  
                               i2l5684 3D6A                                 i2l5836 1C30  
                               i2l5764 1AC2                                 i2l5756 1A80  
                               i2l5748 1A2C                                 i2l6388 2AEE  
                               i2l5694 3D94                                 i2l5782 1B3C  
                               i2l5766 1AD4                                 i2l5758 1A86  
                               i2l6398 2B0A                                 i2l5846 43CC  
                               i2l5688 3D7A                                 i2l5848 43D4  
                               i2l8248 2E08                                 i2l5786 1B54  
                               i2l7810 2302                                 i2l7802 22E6  
                               i2l8186 2D52                                 i2l5788 1B58  
                               i2l8540 2518                                 i2l8188 2D56  
                               i2l7910 248A                                 i2l7902 246E  
                               i2l7830 234A                                 i2l7822 232E  
                               i2l7814 2312                                 i2l7806 22F4  
                               i2l8544 29F8                                 i2l8536 24DA  
                               i2l8546 2A14                                 i2l8538 24FC  
                               i2l7914 2498                                 i2l7906 247C  
                               i2l7850 2398                                 i2l7842 237C  
                               i2l7834 2358                                 i2l7826 233C  
                               i2l7818 2320                                 i2l7924 24BC  
                               i2l7918 24AE                                 i2l7870 23EE  
                               i2l7862 23CA                                 i2l7854 23AE  
                               i2l7846 238A                                 i2l7838 236E  
                               i2l7790 22CA                                 i2l7782 22AE  
                               i2l7776 229A                                 i2l7890 243C  
                               i2l7882 2418                                 i2l7874 23FC  
                               i2l7866 23D8                                 i2l7858 23BC  
                               i2l7794 22D8                                 i2l7786 22BC  
                               i2l7778 22A0                                 i2l7894 244A  
                               i2l7886 242E                                 i2l7878 240A  
                               i2l7898 2458                                 _OSCCON 000FD3  
                               _TMR0IE 007F95                                 _TMR0IF 007F92  
                            ??i2_putch 0003                                 _TMR1IE 007CE8  
                               _TMR1IF 007CF0                                 _TMR2IE 007CE9  
                               _TMR3IE 007D01                                 _TMR3IF 007D09  
                               _TMR0ON 007EAF                                 _TMR1ON 007E68  
                               _TMR3ON 007D88                                 _SSPADD 000FC8  
                               _TRISC3 007CA3                                 _TRISC4 007CA4  
                               _SSPBUF 000FC9                              ??_Loading 00B1  
                     __end_of_delay_ms 46D8                   delay_ms@milliseconds 0081  
                       __CFG_XINST$OFF 000000                       ID@sensor_outputs 008C  
                     __end_of_dispLogs 4770                            ?i2_printRTC 0001  
                     retrieveLog@byte1 000B                       retrieveLog@byte2 000C  
                     retrieveLog@byte3 000D                   __end_of_Distribution 2FA4  
                               ___wmul 435A                              ??___awdiv 008A  
                       __CFG_STVREN$ON 000000                                 _getMAG 4390  
                            ??___awmod 0084                            logRun@byte1 00B2  
                          logRun@byte2 00B3                            logRun@byte3 00B4  
                               _getRTC 3A3A                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 47B4  
                               _initUI 45A4                                 _readIR 4194  
                               _logRun 3100                                 clear_0 416C  
                               clear_1 4178                                 clear_2 4184  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                           _PortTestA5 3F94                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 1170  
                            ??_handler 004B                __size_of_initGlobalVars 006A  
                         ?_retrieveLog 0007                                 _strcpy 4324  
                   __size_of_SpeedTest 0084                              ??_readADC 0080  
                            ??_initLCD 0083                              ??_loadRTC 0095  
                            ??_readMAG 0082   __end_ofi2_change_state_to_menu_start 4700  
__size_ofi2_change_state_to_menu_start 0028           i2_change_state_to_menu_start 46D8  
                          ?_BothServos 0001                           ??_EEPROMTest 0080  
                            ??_isdigit 0080                     __size_of_PortTests 0084  
                    __end_ofi2___lwdiv 4146                       __end_of_printRTC 226A  
                         __mediumconst FB12                      __end_ofi2___lwmod 42B4  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                   _log_count_pop_no_tab 00EE  
                __end_of_algorithmTest 3624                      __end_ofi2_lcdInst 4874  
                           _PusherTest 3BC8                      __end_ofi2_isdigit 47D2  
                           __accesstop 0080                __end_of__initialization 418A  
                        ?_inputHandler 002A                          ___rparam_used 000001  
              printSortTimer@start_sec 003D                  __size_of_actuatorTest 08B8  
                        i2_EEPROM_read 4800                           Loading@byte1 00B5  
                   i2___lwmod@dividend 0001                     __end_of_EEPROMTest 48B2  
                       __pcstackCOMRAM 0001                  __size_of_EEPROM_write 00E4  
                         __pidataBANK1 4888                          __end_of_getIR 40F4  
                          i2printRTC@i 0041                          _initSortTimer 3862  
          __end_of_updateServoPosition 3D32                          __end_of_putch 484C  
                          i2printf@len 0022                            i2printf@val 0024  
                           __end_of_ID 3100                             __end_of_UI 1170  
                   printSortTimer@hour 002D                              ?i2___wmul 0001  
                   __size_of_lcdNibble 0068                              ?i2_getRTC 0001  
                          i2putch@data 0003                  printSortTimer@curTime 002F  
   __end_of_change_state_to_menu_start 465A          ?i2_change_state_to_menu_start 0001  
           _change_state_to_menu_start 462E                  printSortTimer@cur_sec 003F  
                            ?i2_printf 000D                                ??_getIR 0086  
                            ?i2_strcpy 0001                       _count_pop_no_tab 0061  
                  __size_ofi2_printRTC 0236                                ??_putch 0082  
                         _actuatorTest 0012                             __pbssBANK0 00DA  
                           __pbssBANK1 0100                           ?_stopSignals 0001  
                       ??_inputHandler 002C                           _EEPROM_write 346A  
             ?_change_state_to_menu_11 0001               ?_change_state_to_menu_12 0001  
                              UI@F3225 012F               ?_change_state_to_menu_22 0001  
             ?_change_state_to_menu_23 0001                      __end_of_SpeedTest 3B44  
                       ?i2_EEPROM_read 0001               ?_change_state_to_logs_11 0001  
             ?_change_state_to_logs_12 0001               ?_change_state_to_logs_22 0001  
             ?_change_state_to_logs_23 0001               ?_change_state_to_logs_33 0001  
             ?_change_state_to_logs_34 0001                    __size_of_BothServos 038C  
                    __end_of_PortTests 3BC8                      printRTC@RTC_month 00BC  
                         ?i2_lcdNibble 0001                                UI@i_412 00CA  
                              UI@i_413 00CB                                UI@i_431 00CC  
                              UI@i_440 00D1                                UI@i_432 00CD  
                              UI@i_409 00C9                                UI@i_443 00D2  
                              UI@i_435 00CE                                UI@i_444 00D3  
                              UI@i_436 00CF                                UI@i_447 00D4  
                              UI@i_439 00D0                                UI@i_448 00D5  
                       ?_initSortTimer 0001                                ?___wmul 0080  
                              ?_getMAG 0001                                ?_getRTC 0001  
                              ?_initUI 0001                                ?_readIR 0001  
                              ?_logRun 0001               updateServoPosition@timer 0082  
                              UI@month 00D6                            ?_PortTestA5 0001  
                              ?_printf 008E                                _UI$2304 00C6  
                              ?_strcpy 0080                             ??i2___wmul 0005  
                           ??i2_getRTC 0004                              ?_delay_ms 0001  
                           ??i2_printf 0019                             ??i2_strcpy 0005  
                            ?_dispLogs 0012                                _SSPCON1 000FC6  
                              _SSPCON2 000FC5                            ?_PusherTest 0001  
                              _SSPSTAT 000FC7                                _RTCflag 00DE  
                              i2_putch 485C                              ?_initTime 0080  
                      _f_loadingNewCan 00E2                        i2printRTC@month 003D  
                __size_of_Distribution 015E            __size_ofi2_I2C_Master_Start 0008  
                    __end_of_lcdNibble 3E76                                _Loading 2B38  
          __size_ofi2_I2C_Master_Write 000A                       EEPROM_write@data 00AD  
                              __Hparam 0000                                __Lparam 0000  
   __size_ofi2_change_state_to_menu_12 0030     __size_ofi2_change_state_to_menu_22 0030  
                            ?_printRTC 0001                                ___awdiv 36E8  
                              ___awmod 390C                             _initServos 3FF0  
                              ___lldiv 37A6                        __size_of___wmul 0036  
                      __size_of_getMAG 0032                                ___lwdiv 3C44  
                              ___lwmod 3E76                        __size_of_getRTC 0086  
                      printSortTimer@i 0049                              _CMCONbits 000FB4  
                    retrieveLog@logNum 0007                           logRun@byte11 00B6  
                      __size_of_initUI 002E                        __size_of_readIR 004C  
                              __pcinit 4146                   i2EEPROM_read@address 0001  
                      __size_of_logRun 013C                           logRun@byte_i 00B5  
                              __ramtop 1000                         _initGlobalVars 3DA4  
                              _lcdInst 484C                                _handler 0008  
                              __ptext0 3624                                __ptext1 47EA  
                              __ptext2 4770                                __ptext3 2B38  
                              __ptext4 3862                                __ptext5 3DA4  
                              __ptext6 40A0                                __ptext7 4194  
                              __ptext8 46B0                                __ptext9 2FA4  
                      __size_of_printf 0438                                _readADC 465A  
                      __size_of_strcpy 0036                                _initLCD 422C  
                              _cur_can 0065                                _loadRTC 39AE  
                              _readMAG 41E0                                _dpowers FB24  
                   actuatorTest@i_1650 00B1                     actuatorTest@i_1652 00B2  
                   actuatorTest@i_1661 00B8                     actuatorTest@i_1653 00B3  
                   actuatorTest@i_1662 00B9                     actuatorTest@i_1646 00AE  
                   actuatorTest@i_1671 00BE                     actuatorTest@i_1655 00B4  
                   actuatorTest@i_1647 00AF                     actuatorTest@i_1639 00AD  
                   actuatorTest@i_1672 00BF                     actuatorTest@i_1656 00B5  
                   actuatorTest@i_1665 00BA                     actuatorTest@i_1649 00B0  
                   actuatorTest@i_1666 00BB                     actuatorTest@i_1658 00B6  
                   actuatorTest@i_1675 00C0                     actuatorTest@i_1659 00B7  
                   actuatorTest@i_1676 00C1                     actuatorTest@i_1668 00BC  
                   actuatorTest@i_1669 00BD                     actuatorTest@i_1678 00C2  
                   actuatorTest@i_1679 00C3                                _isdigit 4686  
                     ___awmod@dividend 0080                                getRTC@i 0083  
                 __size_of_retrieveLog 0126                             ??_delay_ms 0080  
             __size_of_I2C_Master_Init 0060               __size_of_I2C_Master_Read 002E  
                        _log_startTime 0100               __size_of_I2C_Master_Wait 0014  
             __size_of_I2C_Master_Stop 0008                             ??_dispLogs 0014  
                         _Distribution 2E46                         __pintcode_body 2CD8  
                 end_of_initialization 418A                                logRun@i 00B7  
                           ??_initTime 0086                        ??i2_EEPROM_read 0003  
                              int_func 2CD8                    i2___wmul@multiplier 0001  
                        ??_EEPROM_read 0082                    __size_of_PortTestA5 005C  
            __size_of_I2C_Master_Start 0008              __size_of_I2C_Master_Write 000A  
                      ___lldiv@divisor 0084                        ___lldiv@counter 008C  
                      ??_initSortTimer 0085                                printf@c 00A8  
                         ??i2_printRTC 002A                                printf@f 008E  
                           ??_printRTC 00AB                       I2C_Master_Init@c 008D  
                     I2C_Master_Read@a 0081                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc2 000FDE                 __end_of_initGlobalVars 3E0E  
                           _sensorTest 1CA2                    __size_of_PusherTest 007C  
                           _servoTimes 011C                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 2B38  
                         ??_BothServos 00AB                  __end_of_machineConfig 3F94  
                           _updateMenu 226A                      i2_I2C_Master_Read 4726  
                            _IR_signal 00DA                      i2_I2C_Master_Wait 482A  
                    i2_I2C_Master_Stop 48A0                      i2___lwdiv@divisor 0008  
                      _log_count_total 00F2                              i2___lwdiv 40F4  
                            i2___lwmod 4272                      i2___lwdiv@counter 000C  
                   ?i2_I2C_Master_Read 0001                     ?i2_I2C_Master_Wait 0001  
                   __end_ofi2_printRTC 2760                     ?i2_I2C_Master_Stop 0001  
                        actuatorTest@i 00C4           ??_change_state_to_menu_start 00C4  
                            i2_lcdInst 4868                          Loading@i_1098 00B6  
                           _total_time 00F8                            printf@width 00A9  
                 __size_of_stopSignals 0016                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 47B4                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002                              i2getRTC@i 0004  
                   __end_of_BothServos 1934                            PusherTest@i 00AC  
                  __end_of_EEPROM_read 47EA                            ?_initServos 0001  
                      ?_initGlobalVars 0001                         __end_of___wmul 4390  
                       __end_of_getMAG 43C2                         __end_of_getRTC 3AC0  
                 __size_ofi2_lcdNibble 0056                          EEPROM_write@i 00AF  
                        i2lcdInst@data 0003                         __end_of_initUI 45D2  
                       __end_of_readIR 41E0                         __end_of_logRun 323C  
                     i2___wmul@product 0005                         __end_of_printf 15A8  
                         i2printf@flag 0026                         __end_of_strcpy 435A  
            __end_ofi2_I2C_Master_Read 474C              __end_ofi2_I2C_Master_Wait 483C  
                         i2printf@prec 001D                    start_initialization 4146  
            __end_ofi2_I2C_Master_Stop 48A8                             readMAG@res 0084  
                    __size_ofi2___wmul 0026                        _count_can_w_lab 005F  
          ?_change_state_to_menu_start 0001                      __size_ofi2_getRTC 0072  
                            i2printf@c 0027                              i2printf@f 000D  
                   EEPROM_write@i_1329 00B0                  i2I2C_Master_Read@temp 0003  
                           ?i2___lwdiv 0006                             ?i2___lwmod 0001  
                    __size_ofi2_printf 036E                      __size_ofi2_strcpy 0032  
                    ??_I2C_Master_Init 0091                      ??_I2C_Master_Read 0081  
                    ??_I2C_Master_Wait 0080                             ?i2_lcdInst 0001  
                    ??_I2C_Master_Stop 0081                       __CFG_OSC$INTIO67 000000  
                           ?i2_isdigit 0001                             initTime@DD 0083  
                           initTime@MM 0084                             initTime@YY 0085  
                      retrieveLog@addr 0010                             logRun@addr 00B9  
                            _SpeedTest 3AC0                               ??___wmul 0084  
                             ??_getMAG 0086                               ??_getRTC 0083  
               __size_of_algorithmTest 00D6                              _PortTests 3B44  
                          ?_sensorTest 0001                            __pdataBANK1 012F  
                     __CFG_LPT1OSC$OFF 000000                               ??_initUI 00C4  
                             ??_readIR 0082                               ??_logRun 00B1  
                         ??_PortTestA5 00AB                 printSortTimer@timeDiff 0047  
     __size_of_change_state_to_menu_11 0030       __size_of_change_state_to_menu_12 0038  
     __size_of_change_state_to_menu_22 0038       __size_of_change_state_to_menu_23 0030  
                             ??_printf 009A       __size_of_change_state_to_logs_11 0030  
     __size_of_change_state_to_logs_12 0030       __size_of_change_state_to_logs_22 0030  
     __size_of_change_state_to_logs_23 002E       __size_of_change_state_to_logs_33 0030  
     __size_of_change_state_to_logs_34 0030                               ??_strcpy 0084  
                  _printSortTimer$2424 0045                            __pbssCOMRAM 005B  
         __size_of_updateServoPosition 0076                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                __size_of_printSortTimer 01F2  
                    i2___lwmod@divisor 0003                      i2___lwmod@counter 0005  
                         _isdigit$1948 0081                           ??_PusherTest 00AB  
                    __size_of_delay_ms 0028                         initSortTimer@i 0088  
                    printSortTimer@min 0041                      printSortTimer@sec 0043  
                  __size_of_initServos 005A                      __size_of_dispLogs 0024  
                     printRTC@INT_time 00AE                           i2strcpy@from 0003  
                             ?i2_putch 0001                        _count_pop_w_tab 0063  
                          _EEPROM_read 47D2                     __end_of_PortTestA5 3FF0  
                     _I2C_Master_Start 4898                              _f_lastCan 0073  
                             ?_Loading 0001                    i2I2C_Master_Write@d 0002  
                     _I2C_Master_Write 4874                      __size_of_initTime 0022  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                             ?_SpeedTest 0001  
                        __pmediumconst FB12                              _lcdNibble 3E0E  
                __size_of_inputHandler 01E6                               ?___awdiv 0086  
                             ?___awmod 0080                               ?___lldiv 0080  
                             ?___lwdiv 0080                             ?_PortTests 0001  
                             ?___lwmod 0087                      __size_of_printRTC 02CA  
                   __end_of_PusherTest 3C44                               ?_lcdInst 0001  
                             ?_handler 0001                               ?_readADC 0001  
                             ?_initLCD 0001                               ?_loadRTC 0001  
                             ?_readMAG 0001                               ?_isdigit 0001  
           __size_ofi2_I2C_Master_Read 0026             __size_ofi2_I2C_Master_Wait 0012  
           __size_ofi2_I2C_Master_Stop 0008                              _firstboot 0075  
                            _cur_state 00E0                       ___lwdiv@quotient 0084  
                       __size_of_getIR 0054                          _algorithmTest 354E  
                          ??i2___lwdiv 000A                            ??i2___lwmod 0005  
                       __size_of_putch 0010                            __size_of_ID 015C  
                          __size_of_UI 08A6                    __size_of_sensorTest 02FE  
           __end_ofi2_I2C_Master_Start 48B0             __end_ofi2_I2C_Master_Write 4888  
                          ??i2_lcdInst 0003                         ___wmul@product 0084  
                             _LATAbits 000F89                               _LATCbits 000F8B  
                             _LATDbits 000F8C                               _LATEbits 000F8D  
                         _inputHandler 2952                            ??i2_isdigit 0001  
                             i2u430_40 1ABA                               i2u430_47 1AB0  
                             i2u426_40 1A5A                               i2u426_47 1A50  
                             i2u371_40 4744                               _PIR2bits 000FA1  
                             i2u469_40 25B8                               i2u835_47 2990  
                             i2u836_47 4062                               i2u837_47 406C  
                             i2u838_47 408E                               i2u839_47 4098  
                             i2u696_40 2892                    __size_of_updateMenu 02C0  
                       _log_completion 00E8                       __CFG_WDTPS$32768 000000  
                           ?_lcdNibble 0001                              _was_low_1 0079  
                            _was_low_3 007B                          ??_retrieveLog 0009  
                           _ADCON0bits 000FC2                      ___wmul@multiplier 0080  
                            _startTime 010E                               i2___wmul 4700  
                        lcdNibble@data 0081                               i2_getRTC 3D32  
                           printf@flag 00A7                          lcdNibble@temp 0080  
                           printf@prec 009E                               Loading@i 00B8  
                             i2_printf 1934                               i2_strcpy 43C2  
                       ?_algorithmTest 0001                    I2C_Master_Read@temp 0082  
                            copy_data0 415A                              readIR@res 0084  
                     __size_ofi2_putch 000C                             _EECON1bits 000FA6  
                __end_ofi2_EEPROM_read 4816                            _count_total 00FE  
                     ??_initGlobalVars 0080                               __Hrparam 0000  
                     __size_of_Loading 01A0                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                              logRun@num 00B1  
                          ??_SpeedTest 00AB                  __end_of_initSortTimer 390C  
                         ??_initServos 0088                            ??_PortTests 0080  
                     __size_of___awdiv 00BE                       __size_of___awmod 00A2  
              _change_state_to_menu_11 4484             ?i2_change_state_to_menu_12 0001  
              _change_state_to_menu_12 42EC             ?i2_change_state_to_menu_22 0001  
              _change_state_to_menu_22 42B4                _change_state_to_menu_23 4454  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 00BC  
                     __size_of___lwdiv 0078                _change_state_to_logs_11 4574  
              _change_state_to_logs_12 4544                _change_state_to_logs_22 4514  
              _change_state_to_logs_23 4600                _change_state_to_logs_33 44E4  
              _change_state_to_logs_34 44B4                       __size_of___lwmod 0062  
                       readADC@channel 0081                     i2I2C_Master_Read@a 0002  
                     __size_of_lcdInst 0010                       __size_of_handler 2E3E  
                           _EEPROMTest 48B0                        _I2C_Master_Init 3ED8  
                     __size_of_readADC 002C                        _I2C_Master_Read 45D2  
                     __size_of_initLCD 0046                           _f_ID_receive 006D  
                     __size_of_loadRTC 008C                       __size_of_readMAG 004C  
                      _I2C_Master_Wait 4816                        _I2C_Master_Stop 4890  
                     __size_of_isdigit 002A                               _delay_ms 46B0  
                       _printSortTimer 2760                        ___lwdiv@divisor 0082  
                      ___lwdiv@counter 0086                    __end_of_retrieveLog 3362  
                             __ptext10 4390                               __ptext11 2E46  
                             __ptext20 462E                               __ptext12 3F38  
                             __ptext21 4792                               __ptext13 3100  
                             __ptext30 45D2                               __ptext22 422C  
                             __ptext14 346A                               __ptext31 4816  
                             __ptext23 08CA                               __ptext15 47D2  
                             __ptext40 354E                               __ptext32 42B4  
                             __ptext24 1FA0                               __ptext16 45A4  
                             __ptext41 0012                               __ptext33 42EC  
                             __ptext25 4324                               __ptext17 39AE  
                             __ptext50 4686                               __ptext42 3AC0  
                             __ptext34 390C                               __ptext26 3A3A  
                             __ptext18 3ED8                               __ptext51 435A  
                             __ptext43 3BC8                               __ptext35 36E8  
                             __ptext27 4874                               __ptext19 37A6  
                             __ptext60 46D8                               __ptext52 3E76  
                             __ptext44 3B44                               __ptext36 3362  
                             __ptext28 4890                               __ptext61 252A  
                             __ptext53 3C44                               __ptext45 3F94  
                             __ptext37 1CA2                               __ptext29 4898  
                             __ptext70 4600                               __ptext62 43C2  
                             __ptext54 484C                               __ptext46 48B0  
                             __ptext38 41E0                               __ptext71 4514  
                             __ptext63 2952                               __ptext55 3E0E  
                             __ptext47 15A8                               __ptext39 465A  
                             __ptext80 47B4                               __ptext72 4544  
                             __ptext64 43F4                               __ptext56 3FF0  
                             __ptext48 1170                               __ptext81 4700  
                             __ptext73 4574                               __ptext65 4424  
                             __ptext57 3CBC                               __ptext49 483C  
                             __ptext90 4726                               __ptext82 4272  
                             __ptext74 474C                               __ptext66 4454  
                             __ptext91 482A                               __ptext83 40F4  
                             __ptext75 323C                               __ptext67 4484  
                             __ptext59 226A                               __ptext84 4868  
                             __ptext76 4800                               __ptext68 44B4  
                             __ptext85 404A                               __ptext77 2760  
                             __ptext69 44E4                               __ptext86 3D32  
                             __ptext78 1934                               __ptext87 487E  
                             __ptext79 485C                               __ptext88 48A0  
                             __ptext89 48A8                               _dispLogs 474C  
                        ?_actuatorTest 0001                          ??_stopSignals 0080  
                           strcpy@from 0082                         i2_isdigit$1948 0002  
                   __end_of_initServos 404A                          __size_of_Test 0108  
                        ?_EEPROM_write 00AB                               _initTime 4792  
                        __size_of_main 00C4                          __size_of_sort 0022  
       ??i2_change_state_to_menu_start 0043                               _logstate 00F6  
                  _updateServoPosition 3CBC                 __size_of_machineConfig 005C  
                        ??i2_lcdNibble 0001                               _printRTC 1FA0  
                          ??_lcdNibble 0080                              printRTC@i 00C2  
                             int$flags 007E                           ??_sensorTest 00AB  
                       _log_total_time 00F4                     _f_can_coming_to_ID 006F  
                            printf@len 00A3                              printf@val 00A5  
    __end_ofi2_change_state_to_menu_12 4454      __end_ofi2_change_state_to_menu_22 4424  
                             loadRTC@i 0096                 __end_of_printSortTimer 2952  
                            putch@data 0082               __end_of_I2C_Master_Start 48A0  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 487E  
                           _INTCONbits 000FF2                   ?_updateServoPosition 0080  
                         ??_updateMenu 0043                        ??_algorithmTest 00AB  
                           _MAG_signal 00DC                               isdigit@c 0082  
                        sensorTest@res 00AD                         ??_actuatorTest 00AB  
                             intlevel2 0000                         ??_EEPROM_write 00AE  
                   __end_of_sensorTest 1FA0                       ___lwmod@dividend 0087  
                     ___lldiv@dividend 0080                           ?_EEPROM_read 0080  
                  __end_of_stopSignals 4800              ??_change_state_to_menu_11 002A  
            ??_change_state_to_menu_12 00AB              ??_change_state_to_menu_22 00AB  
            ??_change_state_to_menu_23 002A              ??_change_state_to_logs_11 002A  
            ??_change_state_to_logs_12 002A              ??_change_state_to_logs_22 002A  
            ??_change_state_to_logs_23 002A              ??_change_state_to_logs_33 002A  
            ??_change_state_to_logs_34 002A                               printf@ap 00A1  
                             printf@cp 009F                     __end_of_updateMenu 252A  
              __end_of_I2C_Master_Init 3F38                __end_of_I2C_Master_Read 4600  
              __end_of_I2C_Master_Wait 482A                __end_of_I2C_Master_Stop 4898  
                          lcdInst@data 0082                          printRTC@F3216 0133  
                         retrieveLog@i 000E                            _retrieveLog 323C  
                  __end_ofi2_lcdNibble 40A0                  ??_updateServoPosition 0084  
                      ?_printSortTimer 0001                       ___lldiv@quotient 0088  
                    I2C_Master_Write@d 0081                            ?_EEPROMTest 0001  
                      ___lwmod@divisor 0089                      _f_can_distributed 012B  
                             strcpy@cp 0084                               strcpy@to 0080  
                        _machineConfig 3F38                        ___lwmod@counter 008B  
                        printRTC@month 00BE                          ?_Distribution 0001  
                        _machine_state 00FC                          dispLogs@myLog 0012  
                   i2printRTC@INT_time 002D  
