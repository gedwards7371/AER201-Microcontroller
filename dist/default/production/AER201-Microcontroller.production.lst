

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Apr 10 10:56:52 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    79                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	text93,global,reloc=2,class=CODE,delta=1
   109                           	psect	text94,global,reloc=2,class=CODE,delta=1
   110                           	psect	text95,global,reloc=2,class=CODE,delta=1
   111                           	psect	text96,global,reloc=2,class=CODE,delta=1
   112                           	psect	text97,global,reloc=2,class=CODE,delta=1
   113                           	psect	text98,global,reloc=2,class=CODE,delta=1
   114                           	psect	text99,global,reloc=2,class=CODE,delta=1
   115                           	psect	text100,global,reloc=2,class=CODE,delta=1
   116                           	psect	text101,global,reloc=2,class=CODE,delta=1
   117                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   118                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   119                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   120  0000                     
   121                           ; Version 1.40
   122                           ; Generated 01/12/2016 GMT
   123                           ; 
   124                           ; Copyright © 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   125                           ; All rights reserved.
   126                           ; 
   127                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   128                           ; 
   129                           ; Redistribution and use in source and binary forms, with or without modification, are
   130                           ; permitted provided that the following conditions are met:
   131                           ; 
   132                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   133                           ;        conditions and the following disclaimer.
   134                           ; 
   135                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   136                           ;        of conditions and the following disclaimer in the documentation and/or other
   137                           ;        materials provided with the distribution.
   138                           ; 
   139                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   140                           ;        software without specific prior written permission.
   141                           ; 
   142                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   143                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   144                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   145                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   146                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   147                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   148                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   149                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   150                           ; 
   151                           ; 
   152                           ; Code-generator required, PIC18F4620 Definitions
   153                           ; 
   154                           ; SFR Addresses
   155  0000                     
   156                           	psect	idataBANK1
   157  005BB2                     __pidataBANK1:
   158                           	opt stack 0
   159                           
   160                           ;initializer for UI@F3246
   161  005BB2  4D                 	db	77
   162  005BB3  4D                 	db	77
   163  005BB4  4D                 	db	77
   164  005BB5  00                 	db	0
   165                           
   166                           ;initializer for printRTC@F3236
   167  005BB6  4D                 	db	77
   168  005BB7  4D                 	db	77
   169  005BB8  4D                 	db	77
   170  005BB9  00                 	db	0
   171                           
   172                           	psect	mediumconst
   173  00FA9C                     __pmediumconst:
   174                           	opt stack 0
   175  00FA9C  00                 	db	0
   176  00FA9D                     _keys:
   177                           	opt stack 0
   178  00FA9D  31                 	db	49
   179  00FA9E  32                 	db	50
   180  00FA9F  33                 	db	51
   181  00FAA0  41                 	db	65
   182  00FAA1  34                 	db	52
   183  00FAA2  35                 	db	53
   184  00FAA3  36                 	db	54
   185  00FAA4  42                 	db	66
   186  00FAA5  37                 	db	55
   187  00FAA6  38                 	db	56
   188  00FAA7  39                 	db	57
   189  00FAA8  43                 	db	67
   190  00FAA9  2A                 	db	42
   191  00FAAA  30                 	db	48
   192  00FAAB  23                 	db	35
   193  00FAAC  44                 	db	68
   194  00FAAD  00                 	db	0
   195  00FAAE                     __end_of_keys:
   196                           	opt stack 0
   197  00FAAE                     _dpowers:
   198                           	opt stack 0
   199  00FAAE  0001               	dw	1
   200  00FAB0  000A               	dw	10
   201  00FAB2  0064               	dw	100
   202  00FAB4  03E8               	dw	1000
   203  00FAB6  2710               	dw	10000
   204  00FAB8                     __end_of_dpowers:
   205                           	opt stack 0
   206  0000                     _ADCON0	set	4034
   207  0000                     _ADCON0bits	set	4034
   208  0000                     _ADCON1	set	4033
   209  0000                     _ADCON2	set	4032
   210  0000                     _ADRESH	set	4036
   211  0000                     _ADRESL	set	4035
   212  0000                     _CMCONbits	set	4020
   213  0000                     _CVRCON	set	4021
   214  0000                     _EEADR	set	4009
   215  0000                     _EEADRH	set	4010
   216  0000                     _EECON1bits	set	4006
   217  0000                     _EECON2	set	4007
   218  0000                     _EEDATA	set	4008
   219  0000                     _INTCONbits	set	4082
   220  0000                     _LATA	set	3977
   221  0000                     _LATAbits	set	3977
   222  0000                     _LATB	set	3978
   223  0000                     _LATBbits	set	3978
   224  0000                     _LATC	set	3979
   225  0000                     _LATCbits	set	3979
   226  0000                     _LATD	set	3980
   227  0000                     _LATDbits	set	3980
   228  0000                     _LATE	set	3981
   229  0000                     _OSCCON	set	4051
   230  0000                     _OSCTUNEbits	set	3995
   231  0000                     _PIR2bits	set	4001
   232  0000                     _PORTAbits	set	3968
   233  0000                     _PORTB	set	3969
   234  0000                     _PORTBbits	set	3969
   235  0000                     _PR2	set	4043
   236  0000                     _SSPADD	set	4040
   237  0000                     _SSPBUF	set	4041
   238  0000                     _SSPCON1	set	4038
   239  0000                     _SSPCON2	set	4037
   240  0000                     _SSPSTAT	set	4039
   241  0000                     _T0CON	set	4053
   242  0000                     _T1CON	set	4045
   243  0000                     _T2CON	set	4042
   244  0000                     _T3CON	set	4017
   245  0000                     _TMR0H	set	4055
   246  0000                     _TMR0L	set	4054
   247  0000                     _TMR1H	set	4047
   248  0000                     _TMR1L	set	4046
   249  0000                     _TMR3H	set	4019
   250  0000                     _TMR3L	set	4018
   251  0000                     _TRISA	set	3986
   252  0000                     _TRISB	set	3987
   253  0000                     _TRISC	set	3988
   254  0000                     _TRISD	set	3989
   255  0000                     _TRISE	set	3990
   256  0000                     _ACKDT	set	32301
   257  0000                     _ACKEN	set	32300
   258  0000                     _ADIE	set	31982
   259  0000                     _INT1IE	set	32643
   260  0000                     _INT1IF	set	32640
   261  0000                     _PEIE	set	32662
   262  0000                     _PEN	set	32298
   263  0000                     _RCEN	set	32299
   264  0000                     _RSEN	set	32297
   265  0000                     _SEN	set	32296
   266  0000                     _TMR0IE	set	32661
   267  0000                     _TMR0IF	set	32658
   268  0000                     _TMR0ON	set	32431
   269  0000                     _TMR1IE	set	31976
   270  0000                     _TMR1IF	set	31984
   271  0000                     _TMR1ON	set	32360
   272  0000                     _TMR2IE	set	31977
   273  0000                     _TMR2IF	set	31985
   274  0000                     _TMR2ON	set	32338
   275  0000                     _TMR3IE	set	32001
   276  0000                     _TMR3IF	set	32009
   277  0000                     _TMR3ON	set	32136
   278  0000                     _TRISC3	set	31907
   279  0000                     _TRISC4	set	31908
   280  0000                     _nRBPU	set	32655
   281  00FAB8                     STR_21:
   282  00FAB8  25                 	db	37
   283  00FAB9  30                 	db	48	;'0'
   284  00FABA  32                 	db	50	;'2'
   285  00FABB  64                 	db	100	;'d'
   286  00FABC  25                 	db	37
   287  00FABD  73                 	db	115	;'s'
   288  00FABE  20                 	db	32
   289  00FABF  7C                 	db	124
   290  00FAC0  20                 	db	32
   291  00FAC1  25                 	db	37
   292  00FAC2  30                 	db	48	;'0'
   293  00FAC3  32                 	db	50	;'2'
   294  00FAC4  64                 	db	100	;'d'
   295  00FAC5  3A                 	db	58	;':'
   296  00FAC6  25                 	db	37
   297  00FAC7  30                 	db	48	;'0'
   298  00FAC8  32                 	db	50	;'2'
   299  00FAC9  64                 	db	100	;'d'
   300  00FACA  3A                 	db	58	;':'
   301  00FACB  25                 	db	37
   302  00FACC  30                 	db	48	;'0'
   303  00FACD  32                 	db	50	;'2'
   304  00FACE  64                 	db	100	;'d'
   305  00FACF  00                 	db	0
   306  00FAD0                     STR_66:
   307  00FAD0  28                 	db	40
   308  00FAD1  64                 	db	100	;'d'
   309  00FAD2  61                 	db	97	;'a'
   310  00FAD3  74                 	db	116	;'t'
   311  00FAD4  61                 	db	97	;'a'
   312  00FAD5  3A                 	db	58	;':'
   313  00FAD6  20                 	db	32
   314  00FAD7  25                 	db	37
   315  00FAD8  75                 	db	117	;'u'
   316  00FAD9  2C                 	db	44
   317  00FADA  20                 	db	32
   318  00FADB  61                 	db	97	;'a'
   319  00FADC  64                 	db	100	;'d'
   320  00FADD  64                 	db	100	;'d'
   321  00FADE  72                 	db	114	;'r'
   322  00FADF  3A                 	db	58	;':'
   323  00FAE0  20                 	db	32
   324  00FAE1  25                 	db	37
   325  00FAE2  75                 	db	117	;'u'
   326  00FAE3  29                 	db	41
   327  00FAE4  00                 	db	0
   328  00FAE5                     STR_111:
   329  00FAE5  44                 	db	68	;'D'
   330  00FAE6  20                 	db	32
   331  00FAE7  57                 	db	87	;'W'
   332  00FAE8  49                 	db	73	;'I'
   333  00FAE9  4C                 	db	76	;'L'
   334  00FAEA  4C                 	db	76	;'L'
   335  00FAEB  20                 	db	32
   336  00FAEC  52                 	db	82	;'R'
   337  00FAED  45                 	db	69	;'E'
   338  00FAEE  54                 	db	84	;'T'
   339  00FAEF  55                 	db	85	;'U'
   340  00FAF0  52                 	db	82	;'R'
   341  00FAF1  4E                 	db	78	;'N'
   342  00FAF2  20                 	db	32
   343  00FAF3  20                 	db	32
   344  00FAF4  20                 	db	32
   345  00FAF5  20                 	db	32
   346  00FAF6  00                 	db	0
   347  00FAF7                     STR_121:
   348  00FAF7  4F                 	db	79	;'O'
   349  00FAF8  54                 	db	84	;'T'
   350  00FAF9  48                 	db	72	;'H'
   351  00FAFA  45                 	db	69	;'E'
   352  00FAFB  52                 	db	82	;'R'
   353  00FAFC  20                 	db	32
   354  00FAFD  53                 	db	83	;'S'
   355  00FAFE  45                 	db	69	;'E'
   356  00FAFF  54                 	db	84	;'T'
   357  00FB00  53                 	db	83	;'S'
   358  00FB01  20                 	db	32
   359  00FB02  52                 	db	82	;'R'
   360  00FB03  41                 	db	65	;'A'
   361  00FB04  35                 	db	53	;'5'
   362  00FB05  20                 	db	32
   363  00FB06  20                 	db	32
   364  00FB07  20                 	db	32
   365  00FB08  00                 	db	0
   366  00FB09                     STR_120:
   367  00FB09  53                 	db	83	;'S'
   368  00FB0A  3A                 	db	58	;':'
   369  00FB0B  20                 	db	32
   370  00FB0C  44                 	db	68	;'D'
   371  00FB0D  20                 	db	32
   372  00FB0E  57                 	db	87	;'W'
   373  00FB0F  49                 	db	73	;'I'
   374  00FB10  4C                 	db	76	;'L'
   375  00FB11  4C                 	db	76	;'L'
   376  00FB12  20                 	db	32
   377  00FB13  52                 	db	82	;'R'
   378  00FB14  45                 	db	69	;'E'
   379  00FB15  54                 	db	84	;'T'
   380  00FB16  55                 	db	85	;'U'
   381  00FB17  52                 	db	82	;'R'
   382  00FB18  4E                 	db	78	;'N'
   383  00FB19  20                 	db	32
   384  00FB1A  00                 	db	0
   385  00FB1B                     STR_123:
   386  00FB1B  4F                 	db	79	;'O'
   387  00FB1C  54                 	db	84	;'T'
   388  00FB1D  48                 	db	72	;'H'
   389  00FB1E  45                 	db	69	;'E'
   390  00FB1F  52                 	db	82	;'R'
   391  00FB20  3A                 	db	58	;':'
   392  00FB21  20                 	db	32
   393  00FB22  43                 	db	67	;'C'
   394  00FB23  41                 	db	65	;'A'
   395  00FB24  4D                 	db	77	;'M'
   396  00FB25  20                 	db	32
   397  00FB26  54                 	db	84	;'T'
   398  00FB27  4F                 	db	79	;'O'
   399  00FB28  47                 	db	71	;'G'
   400  00FB29  47                 	db	71	;'G'
   401  00FB2A  4C                 	db	76	;'L'
   402  00FB2B  45                 	db	69	;'E'
   403  00FB2C  00                 	db	0
   404  00FB2D                     STR_129:
   405  00FB2D  4F                 	db	79	;'O'
   406  00FB2E  54                 	db	84	;'T'
   407  00FB2F  48                 	db	72	;'H'
   408  00FB30  45                 	db	69	;'E'
   409  00FB31  52                 	db	82	;'R'
   410  00FB32  20                 	db	32
   411  00FB33  53                 	db	83	;'S'
   412  00FB34  45                 	db	69	;'E'
   413  00FB35  54                 	db	84	;'T'
   414  00FB36  53                 	db	83	;'S'
   415  00FB37  20                 	db	32
   416  00FB38  50                 	db	80	;'P'
   417  00FB39  55                 	db	85	;'U'
   418  00FB3A  53                 	db	83	;'S'
   419  00FB3B  48                 	db	72	;'H'
   420  00FB3C  45                 	db	69	;'E'
   421  00FB3D  52                 	db	82	;'R'
   422  00FB3E  00                 	db	0
   423  00FB3F                     STR_3:
   424  00FB3F  2D                 	db	45
   425  00FB40  2D                 	db	45
   426  00FB41  20                 	db	32
   427  00FB42  4C                 	db	76	;'L'
   428  00FB43  4F                 	db	79	;'O'
   429  00FB44  47                 	db	71	;'G'
   430  00FB45  20                 	db	32
   431  00FB46  25                 	db	37
   432  00FB47  32                 	db	50	;'2'
   433  00FB48  64                 	db	100	;'d'
   434  00FB49  20                 	db	32
   435  00FB4A  48                 	db	72	;'H'
   436  00FB4B  45                 	db	69	;'E'
   437  00FB4C  52                 	db	82	;'R'
   438  00FB4D  45                 	db	69	;'E'
   439  00FB4E  2D                 	db	45
   440  00FB4F  2D                 	db	45
   441  00FB50  00                 	db	0
   442  00FB51                     STR_1:
   443  00FB51  52                 	db	82	;'R'
   444  00FB52  45                 	db	69	;'E'
   445  00FB53  53                 	db	83	;'S'
   446  00FB54  55                 	db	85	;'U'
   447  00FB55  4C                 	db	76	;'L'
   448  00FB56  54                 	db	84	;'T'
   449  00FB57  53                 	db	83	;'S'
   450  00FB58  20                 	db	32
   451  00FB59  49                 	db	73	;'I'
   452  00FB5A  4E                 	db	78	;'N'
   453  00FB5B  20                 	db	32
   454  00FB5C  4C                 	db	76	;'L'
   455  00FB5D  4F                 	db	79	;'O'
   456  00FB5E  47                 	db	71	;'G'
   457  00FB5F  20                 	db	32
   458  00FB60  25                 	db	37
   459  00FB61  64                 	db	100	;'d'
   460  00FB62  00                 	db	0
   461  00FB63                     STR_102:
   462  00FB63  4D                 	db	77	;'M'
   463  00FB64  49                 	db	73	;'I'
   464  00FB65  44                 	db	68	;'D'
   465  00FB66  20                 	db	32
   466  00FB67  2D                 	db	45
   467  00FB68  2D                 	db	45
   468  00FB69  20                 	db	32
   469  00FB6A  32                 	db	50	;'2'
   470  00FB6B  73                 	db	115	;'s'
   471  00FB6C  20                 	db	32
   472  00FB6D  20                 	db	32
   473  00FB6E  20                 	db	32
   474  00FB6F  20                 	db	32
   475  00FB70  20                 	db	32
   476  00FB71  20                 	db	32
   477  00FB72  20                 	db	32
   478  00FB73  00                 	db	0
   479  00FB74                     STR_105:
   480  00FB74  44                 	db	68	;'D'
   481  00FB75  52                 	db	82	;'R'
   482  00FB76  4F                 	db	79	;'O'
   483  00FB77  50                 	db	80	;'P'
   484  00FB78  20                 	db	32
   485  00FB79  2D                 	db	45
   486  00FB7A  2D                 	db	45
   487  00FB7B  20                 	db	32
   488  00FB7C  32                 	db	50	;'2'
   489  00FB7D  73                 	db	115	;'s'
   490  00FB7E  20                 	db	32
   491  00FB7F  20                 	db	32
   492  00FB80  20                 	db	32
   493  00FB81  20                 	db	32
   494  00FB82  20                 	db	32
   495  00FB83  20                 	db	32
   496  00FB84  00                 	db	0
   497  00FB85                     STR_99:
   498  00FB85  4C                 	db	76	;'L'
   499  00FB86  45                 	db	69	;'E'
   500  00FB87  46                 	db	70	;'F'
   501  00FB88  54                 	db	84	;'T'
   502  00FB89  20                 	db	32
   503  00FB8A  2D                 	db	45
   504  00FB8B  2D                 	db	45
   505  00FB8C  20                 	db	32
   506  00FB8D  32                 	db	50	;'2'
   507  00FB8E  73                 	db	115	;'s'
   508  00FB8F  20                 	db	32
   509  00FB90  20                 	db	32
   510  00FB91  20                 	db	32
   511  00FB92  20                 	db	32
   512  00FB93  20                 	db	32
   513  00FB94  20                 	db	32
   514  00FB95  00                 	db	0
   515  00FB96                     STR_104:
   516  00FB96  4C                 	db	76	;'L'
   517  00FB97  45                 	db	69	;'E'
   518  00FB98  56                 	db	86	;'V'
   519  00FB99  45                 	db	69	;'E'
   520  00FB9A  4C                 	db	76	;'L'
   521  00FB9B  20                 	db	32
   522  00FB9C  2D                 	db	45
   523  00FB9D  2D                 	db	45
   524  00FB9E  20                 	db	32
   525  00FB9F  32                 	db	50	;'2'
   526  00FBA0  73                 	db	115	;'s'
   527  00FBA1  20                 	db	32
   528  00FBA2  20                 	db	32
   529  00FBA3  20                 	db	32
   530  00FBA4  20                 	db	32
   531  00FBA5  20                 	db	32
   532  00FBA6  00                 	db	0
   533  00FBA7                     STR_98:
   534  00FBA7  52                 	db	82	;'R'
   535  00FBA8  49                 	db	73	;'I'
   536  00FBA9  47                 	db	71	;'G'
   537  00FBAA  48                 	db	72	;'H'
   538  00FBAB  54                 	db	84	;'T'
   539  00FBAC  20                 	db	32
   540  00FBAD  2D                 	db	45
   541  00FBAE  2D                 	db	45
   542  00FBAF  20                 	db	32
   543  00FBB0  32                 	db	50	;'2'
   544  00FBB1  73                 	db	115	;'s'
   545  00FBB2  20                 	db	32
   546  00FBB3  20                 	db	32
   547  00FBB4  20                 	db	32
   548  00FBB5  20                 	db	32
   549  00FBB6  20                 	db	32
   550  00FBB7  00                 	db	0
   551  00FBB8                     STR_97:
   552  00FBB8  4D                 	db	77	;'M'
   553  00FBB9  49                 	db	73	;'I'
   554  00FBBA  44                 	db	68	;'D'
   555  00FBBB  44                 	db	68	;'D'
   556  00FBBC  4C                 	db	76	;'L'
   557  00FBBD  45                 	db	69	;'E'
   558  00FBBE  20                 	db	32
   559  00FBBF  2D                 	db	45
   560  00FBC0  2D                 	db	45
   561  00FBC1  20                 	db	32
   562  00FBC2  32                 	db	50	;'2'
   563  00FBC3  73                 	db	115	;'s'
   564  00FBC4  20                 	db	32
   565  00FBC5  20                 	db	32
   566  00FBC6  20                 	db	32
   567  00FBC7  20                 	db	32
   568  00FBC8  00                 	db	0
   569  00FBC9                     STR_112:
   570  00FBC9  4F                 	db	79	;'O'
   571  00FBCA  54                 	db	84	;'T'
   572  00FBCB  48                 	db	72	;'H'
   573  00FBCC  45                 	db	69	;'E'
   574  00FBCD  52                 	db	82	;'R'
   575  00FBCE  20                 	db	32
   576  00FBCF  53                 	db	83	;'S'
   577  00FBD0  45                 	db	69	;'E'
   578  00FBD1  54                 	db	84	;'T'
   579  00FBD2  53                 	db	83	;'S'
   580  00FBD3  20                 	db	32
   581  00FBD4  44                 	db	68	;'D'
   582  00FBD5  43                 	db	67	;'C'
   583  00FBD6  20                 	db	32
   584  00FBD7  20                 	db	32
   585  00FBD8  20                 	db	32
   586  00FBD9  00                 	db	0
   587  00FBDA                     STR_118:
   588  00FBDA  44                 	db	68	;'D'
   589  00FBDB  20                 	db	32
   590  00FBDC  57                 	db	87	;'W'
   591  00FBDD  49                 	db	73	;'I'
   592  00FBDE  4C                 	db	76	;'L'
   593  00FBDF  4C                 	db	76	;'L'
   594  00FBE0  20                 	db	32
   595  00FBE1  52                 	db	82	;'R'
   596  00FBE2  45                 	db	69	;'E'
   597  00FBE3  54                 	db	84	;'T'
   598  00FBE4  55                 	db	85	;'U'
   599  00FBE5  52                 	db	82	;'R'
   600  00FBE6  4E                 	db	78	;'N'
   601  00FBE7  20                 	db	32
   602  00FBE8  20                 	db	32
   603  00FBE9  20                 	db	32
   604  00FBEA  00                 	db	0
   605  00FBEB                     STR_115:
   606  00FBEB  35                 	db	53	;'5'
   607  00FBEC  3A                 	db	58	;':'
   608  00FBED  48                 	db	72	;'H'
   609  00FBEE  7C                 	db	124
   610  00FBEF  36                 	db	54	;'6'
   611  00FBF0  3A                 	db	58	;':'
   612  00FBF1  4C                 	db	76	;'L'
   613  00FBF2  7C                 	db	124
   614  00FBF3  49                 	db	73	;'I'
   615  00FBF4  52                 	db	82	;'R'
   616  00FBF5  3A                 	db	58	;':'
   617  00FBF6  25                 	db	37
   618  00FBF7  64                 	db	100	;'d'
   619  00FBF8  20                 	db	32
   620  00FBF9  20                 	db	32
   621  00FBFA  20                 	db	32
   622  00FBFB  00                 	db	0
   623  00FBFC                     STR_113:
   624  00FBFC  31                 	db	49	;'1'
   625  00FBFD  3A                 	db	58	;':'
   626  00FBFE  20                 	db	32
   627  00FBFF  44                 	db	68	;'D'
   628  00FC00  43                 	db	67	;'C'
   629  00FC01  20                 	db	32
   630  00FC02  7C                 	db	124
   631  00FC03  20                 	db	32
   632  00FC04  41                 	db	65	;'A'
   633  00FC05  3A                 	db	58	;':'
   634  00FC06  20                 	db	32
   635  00FC07  41                 	db	65	;'A'
   636  00FC08  52                 	db	82	;'R'
   637  00FC09  4D                 	db	77	;'M'
   638  00FC0A  20                 	db	32
   639  00FC0B  20                 	db	32
   640  00FC0C  00                 	db	0
   641  00FC0D                     STR_100:
   642  00FC0D  4D                 	db	77	;'M'
   643  00FC0E  49                 	db	73	;'I'
   644  00FC0F  44                 	db	68	;'D'
   645  00FC10  2D                 	db	45
   646  00FC11  4C                 	db	76	;'L'
   647  00FC12  45                 	db	69	;'E'
   648  00FC13  46                 	db	70	;'F'
   649  00FC14  54                 	db	84	;'T'
   650  00FC15  20                 	db	32
   651  00FC16  2D                 	db	45
   652  00FC17  2D                 	db	45
   653  00FC18  20                 	db	32
   654  00FC19  32                 	db	50	;'2'
   655  00FC1A  73                 	db	115	;'s'
   656  00FC1B  20                 	db	32
   657  00FC1C  20                 	db	32
   658  00FC1D  00                 	db	0
   659  00FC1E                     STR_101:
   660  00FC1E  4D                 	db	77	;'M'
   661  00FC1F  49                 	db	73	;'I'
   662  00FC20  44                 	db	68	;'D'
   663  00FC21  2D                 	db	45
   664  00FC22  52                 	db	82	;'R'
   665  00FC23  49                 	db	73	;'I'
   666  00FC24  47                 	db	71	;'G'
   667  00FC25  48                 	db	72	;'H'
   668  00FC26  54                 	db	84	;'T'
   669  00FC27  20                 	db	32
   670  00FC28  2D                 	db	45
   671  00FC29  2D                 	db	45
   672  00FC2A  20                 	db	32
   673  00FC2B  32                 	db	50	;'2'
   674  00FC2C  73                 	db	115	;'s'
   675  00FC2D  20                 	db	32
   676  00FC2E  00                 	db	0
   677  00FC2F  45                 	db	69	;'E'
   678  00FC30  4C                 	db	76	;'L'
   679  00FC31  53                 	db	83	;'S'
   680  00FC32  45                 	db	69	;'E'
   681  00FC33  20                 	db	32
   682  00FC34  54                 	db	84	;'T'
   683  00FC35  4F                 	db	79	;'O'
   684  00FC36  47                 	db	71	;'G'
   685  00FC37  47                 	db	71	;'G'
   686  00FC38  4C                 	db	76	;'L'
   687  00FC39  45                 	db	69	;'E'
   688  00FC3A  53                 	db	83	;'S'
   689  00FC3B  20                 	db	32
   690  00FC3C  52                 	db	82	;'R'
   691  00FC3D  41                 	db	65	;'A'
   692  00FC3E  35                 	db	53	;'5'
   693  00FC3F  00                 	db	0
   694  00FC40                     STR_72:
   695  00FC40  41                 	db	65	;'A'
   696  00FC41  4C                 	db	76	;'L'
   697  00FC42  47                 	db	71	;'G'
   698  00FC43  31                 	db	49	;'1'
   699  00FC44  3A                 	db	58	;':'
   700  00FC45  20                 	db	32
   701  00FC46  39                 	db	57	;'9'
   702  00FC47  20                 	db	32
   703  00FC48  50                 	db	80	;'P'
   704  00FC49  4F                 	db	79	;'O'
   705  00FC4A  50                 	db	80	;'P'
   706  00FC4B  4E                 	db	78	;'N'
   707  00FC4C  4F                 	db	79	;'O'
   708  00FC4D  54                 	db	84	;'T'
   709  00FC4E  41                 	db	65	;'A'
   710  00FC4F  42                 	db	66	;'B'
   711  00FC50  00                 	db	0
   712  00FC51                     STR_92:
   713  00FC51  54                 	db	84	;'T'
   714  00FC52  53                 	db	83	;'S'
   715  00FC53  54                 	db	84	;'T'
   716  00FC54  3A                 	db	58	;':'
   717  00FC55  20                 	db	32
   718  00FC56  43                 	db	67	;'C'
   719  00FC57  4F                 	db	79	;'O'
   720  00FC58  4E                 	db	78	;'N'
   721  00FC59  44                 	db	68	;'D'
   722  00FC5A  20                 	db	32
   723  00FC5B  53                 	db	83	;'S'
   724  00FC5C  4F                 	db	79	;'O'
   725  00FC5D  4C                 	db	76	;'L'
   726  00FC5E  4E                 	db	78	;'N'
   727  00FC5F  27                 	db	39
   728  00FC60  44                 	db	68	;'D'
   729  00FC61  00                 	db	0
   730  00FC62                     STR_94:
   731  00FC62  54                 	db	84	;'T'
   732  00FC63  53                 	db	83	;'S'
   733  00FC64  54                 	db	84	;'T'
   734  00FC65  3A                 	db	58	;':'
   735  00FC66  20                 	db	32
   736  00FC67  50                 	db	80	;'P'
   737  00FC68  55                 	db	85	;'U'
   738  00FC69  53                 	db	83	;'S'
   739  00FC6A  48                 	db	72	;'H'
   740  00FC6B  20                 	db	32
   741  00FC6C  53                 	db	83	;'S'
   742  00FC6D  4F                 	db	79	;'O'
   743  00FC6E  4C                 	db	76	;'L'
   744  00FC6F  4E                 	db	78	;'N'
   745  00FC70  27                 	db	39
   746  00FC71  44                 	db	68	;'D'
   747  00FC72  00                 	db	0
   748  00FC73                     STR_68:
   749  00FC73  32                 	db	50	;'2'
   750  00FC74  2E                 	db	46
   751  00FC75  53                 	db	83	;'S'
   752  00FC76  4E                 	db	78	;'N'
   753  00FC77  52                 	db	82	;'R'
   754  00FC78  7C                 	db	124
   755  00FC79  34                 	db	52	;'4'
   756  00FC7A  2E                 	db	46
   757  00FC7B  48                 	db	72	;'H'
   758  00FC7C  49                 	db	73	;'I'
   759  00FC7D  7C                 	db	124
   760  00FC7E  35                 	db	53	;'5'
   761  00FC7F  2E                 	db	46
   762  00FC80  4D                 	db	77	;'M'
   763  00FC81  45                 	db	69	;'E'
   764  00FC82  44                 	db	68	;'D'
   765  00FC83  00                 	db	0
   766  00FC84                     STR_69:
   767  00FC84  42                 	db	66	;'B'
   768  00FC85  2E                 	db	46
   769  00FC86  50                 	db	80	;'P'
   770  00FC87  4C                 	db	76	;'L'
   771  00FC88  41                 	db	65	;'A'
   772  00FC89  7C                 	db	124
   773  00FC8A  38                 	db	56	;'8'
   774  00FC8B  2E                 	db	46
   775  00FC8C  53                 	db	83	;'S'
   776  00FC8D  56                 	db	86	;'V'
   777  00FC8E  7C                 	db	124
   778  00FC8F  39                 	db	57	;'9'
   779  00FC90  2E                 	db	46
   780  00FC91  42                 	db	66	;'B'
   781  00FC92  4C                 	db	76	;'L'
   782  00FC93  4B                 	db	75	;'K'
   783  00FC94  00                 	db	0
   784  00FC95                     STR_127:
   785  00FC95  45                 	db	69	;'E'
   786  00FC96  4C                 	db	76	;'L'
   787  00FC97  53                 	db	83	;'S'
   788  00FC98  45                 	db	69	;'E'
   789  00FC99  20                 	db	32
   790  00FC9A  54                 	db	84	;'T'
   791  00FC9B  4F                 	db	79	;'O'
   792  00FC9C  47                 	db	71	;'G'
   793  00FC9D  47                 	db	71	;'G'
   794  00FC9E  4C                 	db	76	;'L'
   795  00FC9F  45                 	db	69	;'E'
   796  00FCA0  53                 	db	83	;'S'
   797  00FCA1  20                 	db	32
   798  00FCA2  41                 	db	65	;'A'
   799  00FCA3  52                 	db	82	;'R'
   800  00FCA4  4D                 	db	77	;'M'
   801  00FCA5  00                 	db	0
   802  00FCA6                     STR_110:
   803  00FCA6  54                 	db	84	;'T'
   804  00FCA7  53                 	db	83	;'S'
   805  00FCA8  54                 	db	84	;'T'
   806  00FCA9  3A                 	db	58	;':'
   807  00FCAA  20                 	db	32
   808  00FCAB  42                 	db	66	;'B'
   809  00FCAC  4F                 	db	79	;'O'
   810  00FCAD  54                 	db	84	;'T'
   811  00FCAE  48                 	db	72	;'H'
   812  00FCAF  20                 	db	32
   813  00FCB0  53                 	db	83	;'S'
   814  00FCB1  45                 	db	69	;'E'
   815  00FCB2  52                 	db	82	;'R'
   816  00FCB3  56                 	db	86	;'V'
   817  00FCB4  4F                 	db	79	;'O'
   818  00FCB5  53                 	db	83	;'S'
   819  00FCB6  00                 	db	0
   820  00FCB7                     STR_64:
   821  00FCB7  53                 	db	83	;'S'
   822  00FCB8  4F                 	db	79	;'O'
   823  00FCB9  52                 	db	82	;'R'
   824  00FCBA  54                 	db	84	;'T'
   825  00FCBB  49                 	db	73	;'I'
   826  00FCBC  4E                 	db	78	;'N'
   827  00FCBD  47                 	db	71	;'G'
   828  00FCBE  2E                 	db	46
   829  00FCBF  2E                 	db	46
   830  00FCC0  2E                 	db	46
   831  00FCC1  20                 	db	32
   832  00FCC2  20                 	db	32
   833  00FCC3  20                 	db	32
   834  00FCC4  20                 	db	32
   835  00FCC5  20                 	db	32
   836  00FCC6  20                 	db	32
   837  00FCC7  00                 	db	0
   838  00FCC8                     STR_65:
   839  00FCC8  54                 	db	84	;'T'
   840  00FCC9  49                 	db	73	;'I'
   841  00FCCA  4D                 	db	77	;'M'
   842  00FCCB  45                 	db	69	;'E'
   843  00FCCC  20                 	db	32
   844  00FCCD  25                 	db	37
   845  00FCCE  64                 	db	100	;'d'
   846  00FCCF  3A                 	db	58	;':'
   847  00FCD0  25                 	db	37
   848  00FCD1  30                 	db	48	;'0'
   849  00FCD2  32                 	db	50	;'2'
   850  00FCD3  64                 	db	100	;'d'
   851  00FCD4  20                 	db	32
   852  00FCD5  20                 	db	32
   853  00FCD6  20                 	db	32
   854  00FCD7  20                 	db	32
   855  00FCD8  00                 	db	0
   856  00FCD9                     STR_41:
   857  00FCD9  4C                 	db	76	;'L'
   858  00FCDA  4F                 	db	79	;'O'
   859  00FCDB  47                 	db	71	;'G'
   860  00FCDC  20                 	db	32
   861  00FCDD  31                 	db	49	;'1'
   862  00FCDE  20                 	db	32
   863  00FCDF  20                 	db	32
   864  00FCE0  20                 	db	32
   865  00FCE1  20                 	db	32
   866  00FCE2  20                 	db	32
   867  00FCE3  20                 	db	32
   868  00FCE4  20                 	db	32
   869  00FCE5  20                 	db	32
   870  00FCE6  20                 	db	32
   871  00FCE7  20                 	db	32
   872  00FCE8  20                 	db	32
   873  00FCE9  00                 	db	0
   874  00FCEA                     STR_40:
   875  00FCEA  4C                 	db	76	;'L'
   876  00FCEB  4F                 	db	79	;'O'
   877  00FCEC  47                 	db	71	;'G'
   878  00FCED  20                 	db	32
   879  00FCEE  32                 	db	50	;'2'
   880  00FCEF  20                 	db	32
   881  00FCF0  20                 	db	32
   882  00FCF1  20                 	db	32
   883  00FCF2  20                 	db	32
   884  00FCF3  20                 	db	32
   885  00FCF4  20                 	db	32
   886  00FCF5  20                 	db	32
   887  00FCF6  20                 	db	32
   888  00FCF7  20                 	db	32
   889  00FCF8  20                 	db	32
   890  00FCF9  20                 	db	32
   891  00FCFA  00                 	db	0
   892  00FCFB                     STR_44:
   893  00FCFB  4C                 	db	76	;'L'
   894  00FCFC  4F                 	db	79	;'O'
   895  00FCFD  47                 	db	71	;'G'
   896  00FCFE  20                 	db	32
   897  00FCFF  33                 	db	51	;'3'
   898  00FD00  20                 	db	32
   899  00FD01  20                 	db	32
   900  00FD02  20                 	db	32
   901  00FD03  20                 	db	32
   902  00FD04  20                 	db	32
   903  00FD05  20                 	db	32
   904  00FD06  20                 	db	32
   905  00FD07  20                 	db	32
   906  00FD08  20                 	db	32
   907  00FD09  20                 	db	32
   908  00FD0A  20                 	db	32
   909  00FD0B  00                 	db	0
   910  00FD0C                     STR_48:
   911  00FD0C  4C                 	db	76	;'L'
   912  00FD0D  4F                 	db	79	;'O'
   913  00FD0E  47                 	db	71	;'G'
   914  00FD0F  20                 	db	32
   915  00FD10  34                 	db	52	;'4'
   916  00FD11  20                 	db	32
   917  00FD12  20                 	db	32
   918  00FD13  20                 	db	32
   919  00FD14  20                 	db	32
   920  00FD15  20                 	db	32
   921  00FD16  20                 	db	32
   922  00FD17  20                 	db	32
   923  00FD18  20                 	db	32
   924  00FD19  20                 	db	32
   925  00FD1A  20                 	db	32
   926  00FD1B  20                 	db	32
   927  00FD1C  00                 	db	0
   928  00FD1D                     STR_36:
   929  00FD1D  33                 	db	51	;'3'
   930  00FD1E  2E                 	db	46
   931  00FD1F  20                 	db	32
   932  00FD20  4C                 	db	76	;'L'
   933  00FD21  4F                 	db	79	;'O'
   934  00FD22  47                 	db	71	;'G'
   935  00FD23  53                 	db	83	;'S'
   936  00FD24  20                 	db	32
   937  00FD25  20                 	db	32
   938  00FD26  20                 	db	32
   939  00FD27  20                 	db	32
   940  00FD28  20                 	db	32
   941  00FD29  20                 	db	32
   942  00FD2A  20                 	db	32
   943  00FD2B  20                 	db	32
   944  00FD2C  20                 	db	32
   945  00FD2D  00                 	db	0
   946  00FD2E                     STR_32:
   947  00FD2E  32                 	db	50	;'2'
   948  00FD2F  2E                 	db	46
   949  00FD30  20                 	db	32
   950  00FD31  53                 	db	83	;'S'
   951  00FD32  4F                 	db	79	;'O'
   952  00FD33  52                 	db	82	;'R'
   953  00FD34  54                 	db	84	;'T'
   954  00FD35  20                 	db	32
   955  00FD36  20                 	db	32
   956  00FD37  20                 	db	32
   957  00FD38  20                 	db	32
   958  00FD39  20                 	db	32
   959  00FD3A  20                 	db	32
   960  00FD3B  20                 	db	32
   961  00FD3C  20                 	db	32
   962  00FD3D  20                 	db	32
   963  00FD3E  00                 	db	0
   964  00FD3F                     STR_33:
   965  00FD3F  31                 	db	49	;'1'
   966  00FD40  2E                 	db	46
   967  00FD41  20                 	db	32
   968  00FD42  44                 	db	68	;'D'
   969  00FD43  41                 	db	65	;'A'
   970  00FD44  54                 	db	84	;'T'
   971  00FD45  45                 	db	69	;'E'
   972  00FD46  2F                 	db	47
   973  00FD47  54                 	db	84	;'T'
   974  00FD48  49                 	db	73	;'I'
   975  00FD49  4D                 	db	77	;'M'
   976  00FD4A  45                 	db	69	;'E'
   977  00FD4B  20                 	db	32
   978  00FD4C  20                 	db	32
   979  00FD4D  20                 	db	32
   980  00FD4E  20                 	db	32
   981  00FD4F  00                 	db	0
   982  00FD50                     STR_24:
   983  00FD50  20                 	db	32
   984  00FD51  2D                 	db	45
   985  00FD52  2D                 	db	45
   986  00FD53  20                 	db	32
   987  00FD54  50                 	db	80	;'P'
   988  00FD55  4F                 	db	79	;'O'
   989  00FD56  50                 	db	80	;'P'
   990  00FD57  20                 	db	32
   991  00FD58  20                 	db	32
   992  00FD59  43                 	db	67	;'C'
   993  00FD5A  41                 	db	65	;'A'
   994  00FD5B  4E                 	db	78	;'N'
   995  00FD5C  20                 	db	32
   996  00FD5D  2D                 	db	45
   997  00FD5E  2D                 	db	45
   998  00FD5F  20                 	db	32
   999  00FD60  00                 	db	0
  1000  00FD61                     STR_26:
  1001  00FD61  20                 	db	32
  1002  00FD62  2D                 	db	45
  1003  00FD63  2D                 	db	45
  1004  00FD64  20                 	db	32
  1005  00FD65  53                 	db	83	;'S'
  1006  00FD66  4F                 	db	79	;'O'
  1007  00FD67  55                 	db	85	;'U'
  1008  00FD68  50                 	db	80	;'P'
  1009  00FD69  20                 	db	32
  1010  00FD6A  43                 	db	67	;'C'
  1011  00FD6B  41                 	db	65	;'A'
  1012  00FD6C  4E                 	db	78	;'N'
  1013  00FD6D  20                 	db	32
  1014  00FD6E  2D                 	db	45
  1015  00FD6F  2D                 	db	45
  1016  00FD70  20                 	db	32
  1017  00FD71  00                 	db	0
  1018  00FD72                     STR_28:
  1019  00FD72  2D                 	db	45
  1020  00FD73  2D                 	db	45
  1021  00FD74  20                 	db	32
  1022  00FD75  54                 	db	84	;'T'
  1023  00FD76  4F                 	db	79	;'O'
  1024  00FD77  54                 	db	84	;'T'
  1025  00FD78  41                 	db	65	;'A'
  1026  00FD79  4C                 	db	76	;'L'
  1027  00FD7A  20                 	db	32
  1028  00FD7B  43                 	db	67	;'C'
  1029  00FD7C  41                 	db	65	;'A'
  1030  00FD7D  4E                 	db	78	;'N'
  1031  00FD7E  53                 	db	83	;'S'
  1032  00FD7F  20                 	db	32
  1033  00FD80  2D                 	db	45
  1034  00FD81  2D                 	db	45
  1035  00FD82  00                 	db	0
  1036  00FD83                     STR_39:
  1037  00FD83  4C                 	db	76	;'L'
  1038  00FD84  4F                 	db	79	;'O'
  1039  00FD85  47                 	db	71	;'G'
  1040  00FD86  20                 	db	32
  1041  00FD87  31                 	db	49	;'1'
  1042  00FD88  20                 	db	32
  1043  00FD89  20                 	db	32
  1044  00FD8A  20                 	db	32
  1045  00FD8B  20                 	db	32
  1046  00FD8C  20                 	db	32
  1047  00FD8D  20                 	db	32
  1048  00FD8E  20                 	db	32
  1049  00FD8F  20                 	db	32
  1050  00FD90  20                 	db	32
  1051  00FD91  20                 	db	32
  1052  00FD92  3C                 	db	60	;'<'
  1053  00FD93  00                 	db	0
  1054  00FD94                     STR_42:
  1055  00FD94  4C                 	db	76	;'L'
  1056  00FD95  4F                 	db	79	;'O'
  1057  00FD96  47                 	db	71	;'G'
  1058  00FD97  20                 	db	32
  1059  00FD98  32                 	db	50	;'2'
  1060  00FD99  20                 	db	32
  1061  00FD9A  20                 	db	32
  1062  00FD9B  20                 	db	32
  1063  00FD9C  20                 	db	32
  1064  00FD9D  20                 	db	32
  1065  00FD9E  20                 	db	32
  1066  00FD9F  20                 	db	32
  1067  00FDA0  20                 	db	32
  1068  00FDA1  20                 	db	32
  1069  00FDA2  20                 	db	32
  1070  00FDA3  3C                 	db	60	;'<'
  1071  00FDA4  00                 	db	0
  1072  00FDA5                     STR_46:
  1073  00FDA5  4C                 	db	76	;'L'
  1074  00FDA6  4F                 	db	79	;'O'
  1075  00FDA7  47                 	db	71	;'G'
  1076  00FDA8  20                 	db	32
  1077  00FDA9  33                 	db	51	;'3'
  1078  00FDAA  20                 	db	32
  1079  00FDAB  20                 	db	32
  1080  00FDAC  20                 	db	32
  1081  00FDAD  20                 	db	32
  1082  00FDAE  20                 	db	32
  1083  00FDAF  20                 	db	32
  1084  00FDB0  20                 	db	32
  1085  00FDB1  20                 	db	32
  1086  00FDB2  20                 	db	32
  1087  00FDB3  20                 	db	32
  1088  00FDB4  3C                 	db	60	;'<'
  1089  00FDB5  00                 	db	0
  1090  00FDB6                     STR_50:
  1091  00FDB6  4C                 	db	76	;'L'
  1092  00FDB7  4F                 	db	79	;'O'
  1093  00FDB8  47                 	db	71	;'G'
  1094  00FDB9  20                 	db	32
  1095  00FDBA  34                 	db	52	;'4'
  1096  00FDBB  20                 	db	32
  1097  00FDBC  20                 	db	32
  1098  00FDBD  20                 	db	32
  1099  00FDBE  20                 	db	32
  1100  00FDBF  20                 	db	32
  1101  00FDC0  20                 	db	32
  1102  00FDC1  20                 	db	32
  1103  00FDC2  20                 	db	32
  1104  00FDC3  20                 	db	32
  1105  00FDC4  20                 	db	32
  1106  00FDC5  3C                 	db	60	;'<'
  1107  00FDC6  00                 	db	0
  1108  00FDC7                     STR_38:
  1109  00FDC7  33                 	db	51	;'3'
  1110  00FDC8  2E                 	db	46
  1111  00FDC9  20                 	db	32
  1112  00FDCA  4C                 	db	76	;'L'
  1113  00FDCB  4F                 	db	79	;'O'
  1114  00FDCC  47                 	db	71	;'G'
  1115  00FDCD  53                 	db	83	;'S'
  1116  00FDCE  20                 	db	32
  1117  00FDCF  20                 	db	32
  1118  00FDD0  20                 	db	32
  1119  00FDD1  20                 	db	32
  1120  00FDD2  20                 	db	32
  1121  00FDD3  20                 	db	32
  1122  00FDD4  20                 	db	32
  1123  00FDD5  20                 	db	32
  1124  00FDD6  3C                 	db	60	;'<'
  1125  00FDD7  00                 	db	0
  1126  00FDD8                     STR_34:
  1127  00FDD8  32                 	db	50	;'2'
  1128  00FDD9  2E                 	db	46
  1129  00FDDA  20                 	db	32
  1130  00FDDB  53                 	db	83	;'S'
  1131  00FDDC  4F                 	db	79	;'O'
  1132  00FDDD  52                 	db	82	;'R'
  1133  00FDDE  54                 	db	84	;'T'
  1134  00FDDF  20                 	db	32
  1135  00FDE0  20                 	db	32
  1136  00FDE1  20                 	db	32
  1137  00FDE2  20                 	db	32
  1138  00FDE3  20                 	db	32
  1139  00FDE4  20                 	db	32
  1140  00FDE5  20                 	db	32
  1141  00FDE6  20                 	db	32
  1142  00FDE7  3C                 	db	60	;'<'
  1143  00FDE8  00                 	db	0
  1144  00FDE9                     STR_31:
  1145  00FDE9  31                 	db	49	;'1'
  1146  00FDEA  2E                 	db	46
  1147  00FDEB  20                 	db	32
  1148  00FDEC  44                 	db	68	;'D'
  1149  00FDED  41                 	db	65	;'A'
  1150  00FDEE  54                 	db	84	;'T'
  1151  00FDEF  45                 	db	69	;'E'
  1152  00FDF0  2F                 	db	47
  1153  00FDF1  54                 	db	84	;'T'
  1154  00FDF2  49                 	db	73	;'I'
  1155  00FDF3  4D                 	db	77	;'M'
  1156  00FDF4  45                 	db	69	;'E'
  1157  00FDF5  20                 	db	32
  1158  00FDF6  20                 	db	32
  1159  00FDF7  20                 	db	32
  1160  00FDF8  3C                 	db	60	;'<'
  1161  00FDF9  00                 	db	0
  1162  00FDFA                     STR_6:
  1163  00FDFA  50                 	db	80	;'P'
  1164  00FDFB  41                 	db	65	;'A'
  1165  00FDFC  55                 	db	85	;'U'
  1166  00FDFD  53                 	db	83	;'S'
  1167  00FDFE  45                 	db	69	;'E'
  1168  00FDFF  20                 	db	32
  1169  00FE00  3C                 	db	60	;'<'
  1170  00FE01  20                 	db	32
  1171  00FE02  7C                 	db	124
  1172  00FE03  20                 	db	32
  1173  00FE04  42                 	db	66	;'B'
  1174  00FE05  41                 	db	65	;'A'
  1175  00FE06  43                 	db	67	;'C'
  1176  00FE07  4B                 	db	75	;'K'
  1177  00FE08  20                 	db	32
  1178  00FE09  3E                 	db	62	;'>'
  1179  00FE0A  00                 	db	0
  1180  00FE0B                     STR_30:
  1181  00FE0B  50                 	db	80	;'P'
  1182  00FE0C  55                 	db	85	;'U'
  1183  00FE0D  53                 	db	83	;'S'
  1184  00FE0E  48                 	db	72	;'H'
  1185  00FE0F  20                 	db	32
  1186  00FE10  54                 	db	84	;'T'
  1187  00FE11  4F                 	db	79	;'O'
  1188  00FE12  20                 	db	32
  1189  00FE13  43                 	db	67	;'C'
  1190  00FE14  4F                 	db	79	;'O'
  1191  00FE15  4E                 	db	78	;'N'
  1192  00FE16  54                 	db	84	;'T'
  1193  00FE17  49                 	db	73	;'I'
  1194  00FE18  4E                 	db	78	;'N'
  1195  00FE19  55                 	db	85	;'U'
  1196  00FE1A  45                 	db	69	;'E'
  1197  00FE1B  00                 	db	0
  1198  00FE1C                     STR_27:
  1199  00FE1C  4E                 	db	78	;'N'
  1200  00FE1D  4C                 	db	76	;'L'
  1201  00FE1E  41                 	db	65	;'A'
  1202  00FE1F  42                 	db	66	;'B'
  1203  00FE20  3A                 	db	58	;':'
  1204  00FE21  20                 	db	32
  1205  00FE22  25                 	db	37
  1206  00FE23  64                 	db	100	;'d'
  1207  00FE24  7C                 	db	124
  1208  00FE25  4C                 	db	76	;'L'
  1209  00FE26  41                 	db	65	;'A'
  1210  00FE27  42                 	db	66	;'B'
  1211  00FE28  3A                 	db	58	;':'
  1212  00FE29  20                 	db	32
  1213  00FE2A  25                 	db	37
  1214  00FE2B  64                 	db	100	;'d'
  1215  00FE2C  00                 	db	0
  1216  00FE2D                     STR_25:
  1217  00FE2D  4E                 	db	78	;'N'
  1218  00FE2E  54                 	db	84	;'T'
  1219  00FE2F  41                 	db	65	;'A'
  1220  00FE30  42                 	db	66	;'B'
  1221  00FE31  3A                 	db	58	;':'
  1222  00FE32  20                 	db	32
  1223  00FE33  25                 	db	37
  1224  00FE34  64                 	db	100	;'d'
  1225  00FE35  7C                 	db	124
  1226  00FE36  54                 	db	84	;'T'
  1227  00FE37  41                 	db	65	;'A'
  1228  00FE38  42                 	db	66	;'B'
  1229  00FE39  3A                 	db	58	;':'
  1230  00FE3A  20                 	db	32
  1231  00FE3B  25                 	db	37
  1232  00FE3C  64                 	db	100	;'d'
  1233  00FE3D  00                 	db	0
  1234  00FE3E                     STR_83:
  1235  00FE3E  4D                 	db	77	;'M'
  1236  00FE3F  41                 	db	65	;'A'
  1237  00FE40  47                 	db	71	;'G'
  1238  00FE41  5F                 	db	95	;'_'
  1239  00FE42  73                 	db	115	;'s'
  1240  00FE43  69                 	db	105	;'i'
  1241  00FE44  67                 	db	103	;'g'
  1242  00FE45  6E                 	db	110	;'n'
  1243  00FE46  61                 	db	97	;'a'
  1244  00FE47  6C                 	db	108	;'l'
  1245  00FE48  3A                 	db	58	;':'
  1246  00FE49  20                 	db	32
  1247  00FE4A  25                 	db	37
  1248  00FE4B  64                 	db	100	;'d'
  1249  00FE4C  20                 	db	32
  1250  00FE4D  00                 	db	0
  1251  00FE4E                     STR_103:
  1252  00FE4E  54                 	db	84	;'T'
  1253  00FE4F  53                 	db	83	;'S'
  1254  00FE50  54                 	db	84	;'T'
  1255  00FE51  3A                 	db	58	;':'
  1256  00FE52  20                 	db	32
  1257  00FE53  54                 	db	84	;'T'
  1258  00FE54  49                 	db	73	;'I'
  1259  00FE55  4C                 	db	76	;'L'
  1260  00FE56  54                 	db	84	;'T'
  1261  00FE57  20                 	db	32
  1262  00FE58  53                 	db	83	;'S'
  1263  00FE59  45                 	db	69	;'E'
  1264  00FE5A  52                 	db	82	;'R'
  1265  00FE5B  56                 	db	86	;'V'
  1266  00FE5C  4F                 	db	79	;'O'
  1267  00FE5D  00                 	db	0
  1268  00FE5E                     STR_4:
  1269  00FE5E  44                 	db	68	;'D'
  1270  00FE5F  49                 	db	73	;'I'
  1271  00FE60  44                 	db	68	;'D'
  1272  00FE61  4E                 	db	78	;'N'
  1273  00FE62  27                 	db	39
  1274  00FE63  54                 	db	84	;'T'
  1275  00FE64  20                 	db	32
  1276  00FE65  43                 	db	67	;'C'
  1277  00FE66  4F                 	db	79	;'O'
  1278  00FE67  4D                 	db	77	;'M'
  1279  00FE68  50                 	db	80	;'P'
  1280  00FE69  4C                 	db	76	;'L'
  1281  00FE6A  45                 	db	69	;'E'
  1282  00FE6B  54                 	db	84	;'T'
  1283  00FE6C  45                 	db	69	;'E'
  1284  00FE6D  00                 	db	0
  1285  00FE6E                     STR_122:
  1286  00FE6E  44                 	db	68	;'D'
  1287  00FE6F  3A                 	db	58	;':'
  1288  00FE70  52                 	db	82	;'R'
  1289  00FE71  45                 	db	69	;'E'
  1290  00FE72  54                 	db	84	;'T'
  1291  00FE73  7C                 	db	124
  1292  00FE74  32                 	db	50	;'2'
  1293  00FE75  3A                 	db	58	;':'
  1294  00FE76  43                 	db	67	;'C'
  1295  00FE77  20                 	db	32
  1296  00FE78  25                 	db	37
  1297  00FE79  64                 	db	100	;'d'
  1298  00FE7A  20                 	db	32
  1299  00FE7B  20                 	db	32
  1300  00FE7C  00                 	db	0
  1301  00FE7D                     STR_80:
  1302  00FE7D  49                 	db	73	;'I'
  1303  00FE7E  52                 	db	82	;'R'
  1304  00FE7F  5F                 	db	95	;'_'
  1305  00FE80  73                 	db	115	;'s'
  1306  00FE81  69                 	db	105	;'i'
  1307  00FE82  67                 	db	103	;'g'
  1308  00FE83  6E                 	db	110	;'n'
  1309  00FE84  61                 	db	97	;'a'
  1310  00FE85  6C                 	db	108	;'l'
  1311  00FE86  3A                 	db	58	;':'
  1312  00FE87  20                 	db	32
  1313  00FE88  25                 	db	37
  1314  00FE89  64                 	db	100	;'d'
  1315  00FE8A  20                 	db	32
  1316  00FE8B  00                 	db	0
  1317  00FE8C                     STR_109:
  1318  00FE8C  43                 	db	67	;'C'
  1319  00FE8D  41                 	db	65	;'A'
  1320  00FE8E  4D                 	db	77	;'M'
  1321  00FE8F  20                 	db	32
  1322  00FE90  44                 	db	68	;'D'
  1323  00FE91  57                 	db	87	;'W'
  1324  00FE92  4E                 	db	78	;'N'
  1325  00FE93  20                 	db	32
  1326  00FE94  7C                 	db	124
  1327  00FE95  52                 	db	82	;'R'
  1328  00FE96  43                 	db	67	;'C'
  1329  00FE97  30                 	db	48	;'0'
  1330  00FE98  3D                 	db	61	;'='
  1331  00FE99  30                 	db	48	;'0'
  1332  00FE9A  00                 	db	0
  1333  00FE9B                     STR_108:
  1334  00FE9B  43                 	db	67	;'C'
  1335  00FE9C  41                 	db	65	;'A'
  1336  00FE9D  4D                 	db	77	;'M'
  1337  00FE9E  20                 	db	32
  1338  00FE9F  55                 	db	85	;'U'
  1339  00FEA0  50                 	db	80	;'P'
  1340  00FEA1  20                 	db	32
  1341  00FEA2  20                 	db	32
  1342  00FEA3  7C                 	db	124
  1343  00FEA4  52                 	db	82	;'R'
  1344  00FEA5  43                 	db	67	;'C'
  1345  00FEA6  30                 	db	48	;'0'
  1346  00FEA7  3D                 	db	61	;'='
  1347  00FEA8  31                 	db	49	;'1'
  1348  00FEA9  00                 	db	0
  1349  00FEAA                     STR_82:
  1350  00FEAA  54                 	db	84	;'T'
  1351  00FEAB  53                 	db	83	;'S'
  1352  00FEAC  54                 	db	84	;'T'
  1353  00FEAD  3A                 	db	58	;':'
  1354  00FEAE  20                 	db	32
  1355  00FEAF  4D                 	db	77	;'M'
  1356  00FEB0  41                 	db	65	;'A'
  1357  00FEB1  47                 	db	71	;'G'
  1358  00FEB2  4E                 	db	78	;'N'
  1359  00FEB3  45                 	db	69	;'E'
  1360  00FEB4  54                 	db	84	;'T'
  1361  00FEB5  49                 	db	73	;'I'
  1362  00FEB6  53                 	db	83	;'S'
  1363  00FEB7  4D                 	db	77	;'M'
  1364  00FEB8  00                 	db	0
  1365  00FEB9                     STR_107:
  1366  00FEB9  54                 	db	84	;'T'
  1367  00FEBA  53                 	db	83	;'S'
  1368  00FEBB  54                 	db	84	;'T'
  1369  00FEBC  3A                 	db	58	;':'
  1370  00FEBD  20                 	db	32
  1371  00FEBE  43                 	db	67	;'C'
  1372  00FEBF  41                 	db	65	;'A'
  1373  00FEC0  4D                 	db	77	;'M'
  1374  00FEC1  20                 	db	32
  1375  00FEC2  53                 	db	83	;'S'
  1376  00FEC3  45                 	db	69	;'E'
  1377  00FEC4  52                 	db	82	;'R'
  1378  00FEC5  56                 	db	86	;'V'
  1379  00FEC6  4F                 	db	79	;'O'
  1380  00FEC7  00                 	db	0
  1381  00FEC8                     STR_96:
  1382  00FEC8  54                 	db	84	;'T'
  1383  00FEC9  53                 	db	83	;'S'
  1384  00FECA  54                 	db	84	;'T'
  1385  00FECB  3A                 	db	58	;':'
  1386  00FECC  20                 	db	32
  1387  00FECD  50                 	db	80	;'P'
  1388  00FECE  41                 	db	65	;'A'
  1389  00FECF  4E                 	db	78	;'N'
  1390  00FED0  20                 	db	32
  1391  00FED1  53                 	db	83	;'S'
  1392  00FED2  45                 	db	69	;'E'
  1393  00FED3  52                 	db	82	;'R'
  1394  00FED4  56                 	db	86	;'V'
  1395  00FED5  4F                 	db	79	;'O'
  1396  00FED6  00                 	db	0
  1397  00FED7                     STR_75:
  1398  00FED7  41                 	db	65	;'A'
  1399  00FED8  4C                 	db	76	;'L'
  1400  00FED9  47                 	db	71	;'G'
  1401  00FEDA  34                 	db	52	;'4'
  1402  00FEDB  3A                 	db	58	;':'
  1403  00FEDC  20                 	db	32
  1404  00FEDD  41                 	db	65	;'A'
  1405  00FEDE  4C                 	db	76	;'L'
  1406  00FEDF  4C                 	db	76	;'L'
  1407  00FEE0  20                 	db	32
  1408  00FEE1  43                 	db	67	;'C'
  1409  00FEE2  41                 	db	65	;'A'
  1410  00FEE3  4E                 	db	78	;'N'
  1411  00FEE4  53                 	db	83	;'S'
  1412  00FEE5  00                 	db	0
  1413  00FEE6                     STR_90:
  1414  00FEE6  54                 	db	84	;'T'
  1415  00FEE7  53                 	db	83	;'S'
  1416  00FEE8  54                 	db	84	;'T'
  1417  00FEE9  3A                 	db	58	;':'
  1418  00FEEA  20                 	db	32
  1419  00FEEB  44                 	db	68	;'D'
  1420  00FEEC  43                 	db	67	;'C'
  1421  00FEED  20                 	db	32
  1422  00FEEE  4D                 	db	77	;'M'
  1423  00FEEF  4F                 	db	79	;'O'
  1424  00FEF0  54                 	db	84	;'T'
  1425  00FEF1  4F                 	db	79	;'O'
  1426  00FEF2  52                 	db	82	;'R'
  1427  00FEF3  53                 	db	83	;'S'
  1428  00FEF4  00                 	db	0
  1429  00FEF5                     STR_70:
  1430  00FEF5  41                 	db	65	;'A'
  1431  00FEF6  4C                 	db	76	;'L'
  1432  00FEF7  47                 	db	71	;'G'
  1433  00FEF8  4F                 	db	79	;'O'
  1434  00FEF9  52                 	db	82	;'R'
  1435  00FEFA  49                 	db	73	;'I'
  1436  00FEFB  54                 	db	84	;'T'
  1437  00FEFC  48                 	db	72	;'H'
  1438  00FEFD  4D                 	db	77	;'M'
  1439  00FEFE  20                 	db	32
  1440  00FEFF  54                 	db	84	;'T'
  1441  00FF00  45                 	db	69	;'E'
  1442  00FF01  53                 	db	83	;'S'
  1443  00FF02  54                 	db	84	;'T'
  1444  00FF03  00                 	db	0
  1445  00FF04                     STR_91:
  1446  00FF04  50                 	db	80	;'P'
  1447  00FF05  49                 	db	73	;'I'
  1448  00FF06  4E                 	db	78	;'N'
  1449  00FF07  20                 	db	32
  1450  00FF08  52                 	db	82	;'R'
  1451  00FF09  41                 	db	65	;'A'
  1452  00FF0A  35                 	db	53	;'5'
  1453  00FF0B  20                 	db	32
  1454  00FF0C  48                 	db	72	;'H'
  1455  00FF0D  49                 	db	73	;'I'
  1456  00FF0E  47                 	db	71	;'G'
  1457  00FF0F  48                 	db	72	;'H'
  1458  00FF10  2E                 	db	46
  1459  00FF11  00                 	db	0
  1460  00FF12                     STR_73:
  1461  00FF12  41                 	db	65	;'A'
  1462  00FF13  4C                 	db	76	;'L'
  1463  00FF14  47                 	db	71	;'G'
  1464  00FF15  32                 	db	50	;'2'
  1465  00FF16  3A                 	db	58	;':'
  1466  00FF17  20                 	db	32
  1467  00FF18  31                 	db	49	;'1'
  1468  00FF19  32                 	db	50	;'2'
  1469  00FF1A  20                 	db	32
  1470  00FF1B  43                 	db	67	;'C'
  1471  00FF1C  41                 	db	65	;'A'
  1472  00FF1D  4E                 	db	78	;'N'
  1473  00FF1E  53                 	db	83	;'S'
  1474  00FF1F  00                 	db	0
  1475  00FF20                     STR_76:
  1476  00FF20  41                 	db	65	;'A'
  1477  00FF21  4C                 	db	76	;'L'
  1478  00FF22  47                 	db	71	;'G'
  1479  00FF23  35                 	db	53	;'5'
  1480  00FF24  3A                 	db	58	;':'
  1481  00FF25  20                 	db	32
  1482  00FF26  4E                 	db	78	;'N'
  1483  00FF27  4F                 	db	79	;'O'
  1484  00FF28  20                 	db	32
  1485  00FF29  43                 	db	67	;'C'
  1486  00FF2A  41                 	db	65	;'A'
  1487  00FF2B  4E                 	db	78	;'N'
  1488  00FF2C  53                 	db	83	;'S'
  1489  00FF2D  00                 	db	0
  1490  00FF2E                     STR_71:
  1491  00FF2E  50                 	db	80	;'P'
  1492  00FF2F  55                 	db	85	;'U'
  1493  00FF30  53                 	db	83	;'S'
  1494  00FF31  48                 	db	72	;'H'
  1495  00FF32  20                 	db	32
  1496  00FF33  54                 	db	84	;'T'
  1497  00FF34  4F                 	db	79	;'O'
  1498  00FF35  20                 	db	32
  1499  00FF36  53                 	db	83	;'S'
  1500  00FF37  54                 	db	84	;'T'
  1501  00FF38  41                 	db	65	;'A'
  1502  00FF39  52                 	db	82	;'R'
  1503  00FF3A  54                 	db	84	;'T'
  1504  00FF3B  00                 	db	0
  1505  00FF3C                     STR_23:
  1506  00FF3C  25                 	db	37
  1507  00FF3D  64                 	db	100	;'d'
  1508  00FF3E  20                 	db	32
  1509  00FF3F  4D                 	db	77	;'M'
  1510  00FF40  49                 	db	73	;'I'
  1511  00FF41  4E                 	db	78	;'N'
  1512  00FF42  20                 	db	32
  1513  00FF43  25                 	db	37
  1514  00FF44  64                 	db	100	;'d'
  1515  00FF45  20                 	db	32
  1516  00FF46  53                 	db	83	;'S'
  1517  00FF47  45                 	db	69	;'E'
  1518  00FF48  43                 	db	67	;'C'
  1519  00FF49  00                 	db	0
  1520  00FF4A                     STR_2:
  1521  00FF4A  54                 	db	84	;'T'
  1522  00FF4B  49                 	db	73	;'I'
  1523  00FF4C  4D                 	db	77	;'M'
  1524  00FF4D  45                 	db	69	;'E'
  1525  00FF4E  3A                 	db	58	;':'
  1526  00FF4F  20                 	db	32
  1527  00FF50  25                 	db	37
  1528  00FF51  64                 	db	100	;'d'
  1529  00FF52  3A                 	db	58	;':'
  1530  00FF53  25                 	db	37
  1531  00FF54  30                 	db	48	;'0'
  1532  00FF55  32                 	db	50	;'2'
  1533  00FF56  64                 	db	100	;'d'
  1534  00FF57  00                 	db	0
  1535  00FF58                     STR_79:
  1536  00FF58  54                 	db	84	;'T'
  1537  00FF59  53                 	db	83	;'S'
  1538  00FF5A  54                 	db	84	;'T'
  1539  00FF5B  3A                 	db	58	;':'
  1540  00FF5C  20                 	db	32
  1541  00FF5D  49                 	db	73	;'I'
  1542  00FF5E  52                 	db	82	;'R'
  1543  00FF5F  20                 	db	32
  1544  00FF60  53                 	db	83	;'S'
  1545  00FF61  4E                 	db	78	;'N'
  1546  00FF62  53                 	db	83	;'S'
  1547  00FF63  52                 	db	82	;'R'
  1548  00FF64  00                 	db	0
  1549  00FF65                     STR_74:
  1550  00FF65  41                 	db	65	;'A'
  1551  00FF66  4C                 	db	76	;'L'
  1552  00FF67  47                 	db	71	;'G'
  1553  00FF68  33                 	db	51	;'3'
  1554  00FF69  3A                 	db	58	;':'
  1555  00FF6A  20                 	db	32
  1556  00FF6B  31                 	db	49	;'1'
  1557  00FF6C  20                 	db	32
  1558  00FF6D  43                 	db	67	;'C'
  1559  00FF6E  41                 	db	65	;'A'
  1560  00FF6F  4E                 	db	78	;'N'
  1561  00FF70  00                 	db	0
  1562  00FF71                     STR_93:
  1563  00FF71  50                 	db	80	;'P'
  1564  00FF72  49                 	db	73	;'I'
  1565  00FF73  4E                 	db	78	;'N'
  1566  00FF74  20                 	db	32
  1567  00FF75  52                 	db	82	;'R'
  1568  00FF76  41                 	db	65	;'A'
  1569  00FF77  33                 	db	51	;'3'
  1570  00FF78  2E                 	db	46
  1571  00FF79  2E                 	db	46
  1572  00FF7A  2E                 	db	46
  1573  00FF7B  00                 	db	0
  1574  00FF7C                     STR_95:
  1575  00FF7C  50                 	db	80	;'P'
  1576  00FF7D  49                 	db	73	;'I'
  1577  00FF7E  4E                 	db	78	;'N'
  1578  00FF7F  20                 	db	32
  1579  00FF80  52                 	db	82	;'R'
  1580  00FF81  41                 	db	65	;'A'
  1581  00FF82  34                 	db	52	;'4'
  1582  00FF83  2E                 	db	46
  1583  00FF84  2E                 	db	46
  1584  00FF85  2E                 	db	46
  1585  00FF86  00                 	db	0
  1586  00FF87                     STR_84:
  1587  00FF87  54                 	db	84	;'T'
  1588  00FF88  53                 	db	83	;'S'
  1589  00FF89  54                 	db	84	;'T'
  1590  00FF8A  3A                 	db	58	;':'
  1591  00FF8B  20                 	db	32
  1592  00FF8C  43                 	db	67	;'C'
  1593  00FF8D  4F                 	db	79	;'O'
  1594  00FF8E  4E                 	db	78	;'N'
  1595  00FF8F  44                 	db	68	;'D'
  1596  00FF90  00                 	db	0
  1597  00FF91                     STR_88:
  1598  00FF91  41                 	db	65	;'A'
  1599  00FF92  43                 	db	67	;'C'
  1600  00FF93  54                 	db	84	;'T'
  1601  00FF94  55                 	db	85	;'U'
  1602  00FF95  41                 	db	65	;'A'
  1603  00FF96  54                 	db	84	;'T'
  1604  00FF97  4F                 	db	79	;'O'
  1605  00FF98  52                 	db	82	;'R'
  1606  00FF99  53                 	db	83	;'S'
  1607  00FF9A  00                 	db	0
  1608  00FF9B                     STR_22:
  1609  00FF9B  44                 	db	68	;'D'
  1610  00FF9C  55                 	db	85	;'U'
  1611  00FF9D  52                 	db	82	;'R'
  1612  00FF9E  41                 	db	65	;'A'
  1613  00FF9F  54                 	db	84	;'T'
  1614  00FFA0  49                 	db	73	;'I'
  1615  00FFA1  4F                 	db	79	;'O'
  1616  00FFA2  4E                 	db	78	;'N'
  1617  00FFA3  3A                 	db	58	;':'
  1618  00FFA4  00                 	db	0
  1619  00FFA5                     STR_86:
  1620  00FFA5  43                 	db	67	;'C'
  1621  00FFA6  4F                 	db	79	;'O'
  1622  00FFA7  4E                 	db	78	;'N'
  1623  00FFA8  44                 	db	68	;'D'
  1624  00FFA9  3A                 	db	58	;':'
  1625  00FFAA  20                 	db	32
  1626  00FFAB  25                 	db	37
  1627  00FFAC  64                 	db	100	;'d'
  1628  00FFAD  00                 	db	0
  1629  00FFAE                     STR_77:
  1630  00FFAE  53                 	db	83	;'S'
  1631  00FFAF  45                 	db	69	;'E'
  1632  00FFB0  4E                 	db	78	;'N'
  1633  00FFB1  53                 	db	83	;'S'
  1634  00FFB2  4F                 	db	79	;'O'
  1635  00FFB3  52                 	db	82	;'R'
  1636  00FFB4  53                 	db	83	;'S'
  1637  00FFB5  00                 	db	0
  1638  00FFB6                     STR_130:
  1639  00FFB6  28                 	db	40
  1640  00FFB7  6E                 	db	110	;'n'
  1641  00FFB8  75                 	db	117	;'u'
  1642  00FFB9  6C                 	db	108	;'l'
  1643  00FFBA  6C                 	db	108	;'l'
  1644  00FFBB  29                 	db	41
  1645  00FFBC  00                 	db	0
  1646  00FFBD                     STR_67:
  1647  00FFBD  46                 	db	70	;'F'
  1648  00FFBE  41                 	db	65	;'A'
  1649  00FFBF  49                 	db	73	;'I'
  1650  00FFC0  4C                 	db	76	;'L'
  1651  00FFC1  45                 	db	69	;'E'
  1652  00FFC2  44                 	db	68	;'D'
  1653  00FFC3  00                 	db	0
  1654  00FFC4                     STR_7:
  1655  00FFC4  53                 	db	83	;'S'
  1656  00FFC5  54                 	db	84	;'T'
  1657  00FFC6  41                 	db	65	;'A'
  1658  00FFC7  52                 	db	82	;'R'
  1659  00FFC8  54                 	db	84	;'T'
  1660  00FFC9  3A                 	db	58	;':'
  1661  00FFCA  00                 	db	0
  1662  00FFCB                     STR_9:
  1663  00FFCB  46                 	db	70	;'F'
  1664  00FFCC  45                 	db	69	;'E'
  1665  00FFCD  42                 	db	66	;'B'
  1666  00FFCE  00                 	db	0
  1667  00FFCF                     STR_19:
  1668  00FFCF  44                 	db	68	;'D'
  1669  00FFD0  45                 	db	69	;'E'
  1670  00FFD1  43                 	db	67	;'C'
  1671  00FFD2  00                 	db	0
  1672  00FFD3                     STR_15:
  1673  00FFD3  41                 	db	65	;'A'
  1674  00FFD4  55                 	db	85	;'U'
  1675  00FFD5  47                 	db	71	;'G'
  1676  00FFD6  00                 	db	0
  1677  00FFD7                     STR_14:
  1678  00FFD7  4A                 	db	74	;'J'
  1679  00FFD8  55                 	db	85	;'U'
  1680  00FFD9  4C                 	db	76	;'L'
  1681  00FFDA  00                 	db	0
  1682  00FFDB                     STR_8:
  1683  00FFDB  4A                 	db	74	;'J'
  1684  00FFDC  41                 	db	65	;'A'
  1685  00FFDD  4E                 	db	78	;'N'
  1686  00FFDE  00                 	db	0
  1687  00FFDF                     STR_13:
  1688  00FFDF  4A                 	db	74	;'J'
  1689  00FFE0  55                 	db	85	;'U'
  1690  00FFE1  4E                 	db	78	;'N'
  1691  00FFE2  00                 	db	0
  1692  00FFE3                     STR_16:
  1693  00FFE3  53                 	db	83	;'S'
  1694  00FFE4  45                 	db	69	;'E'
  1695  00FFE5  50                 	db	80	;'P'
  1696  00FFE6  00                 	db	0
  1697  00FFE7                     STR_10:
  1698  00FFE7  4D                 	db	77	;'M'
  1699  00FFE8  41                 	db	65	;'A'
  1700  00FFE9  52                 	db	82	;'R'
  1701  00FFEA  00                 	db	0
  1702  00FFEB                     STR_11:
  1703  00FFEB  41                 	db	65	;'A'
  1704  00FFEC  50                 	db	80	;'P'
  1705  00FFED  52                 	db	82	;'R'
  1706  00FFEE  00                 	db	0
  1707  00FFEF                     STR_20:
  1708  00FFEF  45                 	db	69	;'E'
  1709  00FFF0  52                 	db	82	;'R'
  1710  00FFF1  52                 	db	82	;'R'
  1711  00FFF2  00                 	db	0
  1712  00FFF3                     STR_17:
  1713  00FFF3  4F                 	db	79	;'O'
  1714  00FFF4  43                 	db	67	;'C'
  1715  00FFF5  54                 	db	84	;'T'
  1716  00FFF6  00                 	db	0
  1717  00FFF7                     STR_18:
  1718  00FFF7  4E                 	db	78	;'N'
  1719  00FFF8  4F                 	db	79	;'O'
  1720  00FFF9  56                 	db	86	;'V'
  1721  00FFFA  00                 	db	0
  1722  00FFFB                     STR_12:
  1723  00FFFB  4D                 	db	77	;'M'
  1724  00FFFC  41                 	db	65	;'A'
  1725  00FFFD  59                 	db	89	;'Y'
  1726  00FFFE  00                 	db	0
  1727  0000                     
  1728                           ; #config settings
  1729  00FFFF  00                 	db	0	; dummy byte at the end
  1730  0000                     
  1731                           	psect	cinit
  1732  00536C                     __pcinit:
  1733                           	opt stack 0
  1734  00536C                     start_initialization:
  1735                           	opt stack 0
  1736  00536C                     __initialization:
  1737                           	opt stack 0
  1738                           
  1739                           ; Initialize objects allocated to BANK1 (8 bytes)
  1740                           ; load TBLPTR registers with __pidataBANK1
  1741  00536C  0EB2               	movlw	low __pidataBANK1
  1742  00536E  6EF6               	movwf	tblptrl,c
  1743  005370  0E5B               	movlw	high __pidataBANK1
  1744  005372  6EF7               	movwf	tblptrh,c
  1745  005374  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1746  005376  6EF8               	movwf	tblptru,c
  1747  005378  EE01  F049         	lfsr	0,__pdataBANK1
  1748  00537C  EE10 F008          	lfsr	1,8
  1749  005380                     copy_data0:
  1750  005380  0009               	tblrd		*+
  1751  005382  CFF5 FFEE          	movff	tablat,postinc0
  1752  005386  50E5               	movf	postdec1,w,c
  1753  005388  50E1               	movf	fsr1l,w,c
  1754  00538A  E1FA               	bnz	copy_data0
  1755                           
  1756                           ; Clear objects allocated to BANK1 (73 bytes)
  1757  00538C  EE01  F000         	lfsr	0,__pbssBANK1
  1758  005390  0E49               	movlw	73
  1759  005392                     clear_0:
  1760  005392  6AEE               	clrf	postinc0,c
  1761  005394  06E8               	decf	wreg,f,c
  1762  005396  E1FD               	bnz	clear_0
  1763                           
  1764                           ; Clear objects allocated to BANK0 (38 bytes)
  1765  005398  EE00  F0DA         	lfsr	0,__pbssBANK0
  1766  00539C  0E26               	movlw	38
  1767  00539E                     clear_1:
  1768  00539E  6AEE               	clrf	postinc0,c
  1769  0053A0  06E8               	decf	wreg,f,c
  1770  0053A2  E1FD               	bnz	clear_1
  1771                           
  1772                           ; Clear objects allocated to COMRAM (35 bytes)
  1773  0053A4  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1774  0053A8  0E23               	movlw	35
  1775  0053AA                     clear_2:
  1776  0053AA  6AEE               	clrf	postinc0,c
  1777  0053AC  06E8               	decf	wreg,f,c
  1778  0053AE  E1FD               	bnz	clear_2
  1779  0053B0                     end_of_initialization:
  1780                           	opt stack 0
  1781  0053B0                     __end_of__initialization:
  1782                           	opt stack 0
  1783  0053B0  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1784  0053B2  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1785  0053B4  0100               	movlb	0
  1786  0053B6  EF7E  F023         	goto	_main	;jump to C main() function
  1787                           tblptru	equ	0xFF8
  1788                           tblptrh	equ	0xFF7
  1789                           tblptrl	equ	0xFF6
  1790                           tablat	equ	0xFF5
  1791                           postinc0	equ	0xFEE
  1792                           wreg	equ	0xFE8
  1793                           postdec1	equ	0xFE5
  1794                           fsr1l	equ	0xFE1
  1795                           
  1796                           	psect	bssCOMRAM
  1797  00005B                     __pbssCOMRAM:
  1798                           	opt stack 0
  1799  00005B                     _back:
  1800                           	opt stack 0
  1801  00005B                     	ds	2
  1802  00005D                     _down:
  1803                           	opt stack 0
  1804  00005D                     	ds	2
  1805  00005F                     _enter:
  1806                           	opt stack 0
  1807  00005F                     	ds	2
  1808  000061                     _f_panning_to_bin:
  1809                           	opt stack 0
  1810  000061                     	ds	2
  1811  000063                     _log_completion:
  1812                           	opt stack 0
  1813  000063                     	ds	2
  1814  000065                     _log_count_can_no_lab:
  1815                           	opt stack 0
  1816  000065                     	ds	2
  1817  000067                     _log_count_pop_no_tab:
  1818                           	opt stack 0
  1819  000067                     	ds	2
  1820  000069                     _log_count_pop_w_tab:
  1821                           	opt stack 0
  1822  000069                     	ds	2
  1823  00006B                     _pan_servo_state:
  1824                           	opt stack 0
  1825  00006B                     	ds	2
  1826  00006D                     _servo_timer_counter:
  1827                           	opt stack 0
  1828  00006D                     	ds	2
  1829  00006F                     _servo_timer_target:
  1830                           	opt stack 0
  1831  00006F                     	ds	2
  1832  000071                     _tilt_servo_state:
  1833                           	opt stack 0
  1834  000071                     	ds	2
  1835  000073                     _timer2_counter:
  1836                           	opt stack 0
  1837  000073                     	ds	2
  1838  000075                     _up:
  1839                           	opt stack 0
  1840  000075                     	ds	2
  1841  000077                     _was_low_1:
  1842                           	opt stack 0
  1843  000077                     	ds	2
  1844  000079                     _was_low_2:
  1845                           	opt stack 0
  1846  000079                     	ds	2
  1847  00007B                     _was_low_3:
  1848                           	opt stack 0
  1849  00007B                     	ds	2
  1850  00007D                     _input:
  1851                           	opt stack 0
  1852  00007D                     	ds	1
  1853                           tblptru	equ	0xFF8
  1854                           tblptrh	equ	0xFF7
  1855                           tblptrl	equ	0xFF6
  1856                           tablat	equ	0xFF5
  1857                           postinc0	equ	0xFEE
  1858                           wreg	equ	0xFE8
  1859                           postdec1	equ	0xFE5
  1860                           fsr1l	equ	0xFE1
  1861                           
  1862                           	psect	bssBANK0
  1863  0000DA                     __pbssBANK0:
  1864                           	opt stack 0
  1865  0000DA                     _servoTimes:
  1866                           	opt stack 0
  1867  0000DA                     	ds	8
  1868  0000E2                     _sensor_outputs:
  1869                           	opt stack 0
  1870  0000E2                     	ds	4
  1871  0000E6                     _COND_signal:
  1872                           	opt stack 0
  1873  0000E6                     	ds	2
  1874  0000E8                     _IR_signal:
  1875                           	opt stack 0
  1876  0000E8                     	ds	2
  1877  0000EA                     _MAG_signal:
  1878                           	opt stack 0
  1879  0000EA                     	ds	2
  1880  0000EC                     _RTCflag:
  1881                           	opt stack 0
  1882  0000EC                     	ds	2
  1883  0000EE                     _cur_state:
  1884                           	opt stack 0
  1885  0000EE                     	ds	2
  1886  0000F0                     _f_arm_position:
  1887                           	opt stack 0
  1888  0000F0                     	ds	2
  1889  0000F2                     _f_loadingNewCan:
  1890                           	opt stack 0
  1891  0000F2                     	ds	2
  1892  0000F4                     _log:
  1893                           	opt stack 0
  1894  0000F4                     	ds	2
  1895  0000F6                     _log_total_time:
  1896                           	opt stack 0
  1897  0000F6                     	ds	2
  1898  0000F8                     _logstate:
  1899                           	opt stack 0
  1900  0000F8                     	ds	2
  1901  0000FA                     _total_time:
  1902                           	opt stack 0
  1903  0000FA                     	ds	2
  1904  0000FC                     _machine_state:
  1905                           	opt stack 0
  1906  0000FC                     	ds	1
  1907  0000FD                     _sel:
  1908                           	opt stack 0
  1909  0000FD                     	ds	1
  1910  0000FE                     _count_total:
  1911                           	opt stack 0
  1912  0000FE                     	ds	2
  1913                           tblptru	equ	0xFF8
  1914                           tblptrh	equ	0xFF7
  1915                           tblptrl	equ	0xFF6
  1916                           tablat	equ	0xFF5
  1917                           postinc0	equ	0xFEE
  1918                           wreg	equ	0xFE8
  1919                           postdec1	equ	0xFE5
  1920                           fsr1l	equ	0xFE1
  1921                           
  1922                           	psect	bssBANK1
  1923  000100                     __pbssBANK1:
  1924                           	opt stack 0
  1925  000100                     _log_startTime:
  1926                           	opt stack 0
  1927  000100                     	ds	14
  1928  00010E                     _startTime:
  1929                           	opt stack 0
  1930  00010E                     	ds	14
  1931  00011C                     _time:
  1932                           	opt stack 0
  1933  00011C                     	ds	7
  1934  000123                     _count_can_no_lab:
  1935                           	opt stack 0
  1936  000123                     	ds	2
  1937  000125                     _count_can_w_lab:
  1938                           	opt stack 0
  1939  000125                     	ds	2
  1940  000127                     _count_pop_no_tab:
  1941                           	opt stack 0
  1942  000127                     	ds	2
  1943  000129                     _count_pop_w_tab:
  1944                           	opt stack 0
  1945  000129                     	ds	2
  1946  00012B                     _cur_can:
  1947                           	opt stack 0
  1948  00012B                     	ds	2
  1949  00012D                     _debug:
  1950                           	opt stack 0
  1951  00012D                     	ds	2
  1952  00012F                     _f_ID_receive:
  1953                           	opt stack 0
  1954  00012F                     	ds	2
  1955  000131                     _f_can_coming_to_ID:
  1956                           	opt stack 0
  1957  000131                     	ds	2
  1958  000133                     _f_can_coming_to_distribution:
  1959                           	opt stack 0
  1960  000133                     	ds	2
  1961  000135                     _f_can_distributed:
  1962                           	opt stack 0
  1963  000135                     	ds	2
  1964  000137                     _f_lastCan:
  1965                           	opt stack 0
  1966  000137                     	ds	2
  1967  000139                     _f_most_recent_sort_time:
  1968                           	opt stack 0
  1969  000139                     	ds	2
  1970  00013B                     _first:
  1971                           	opt stack 0
  1972  00013B                     	ds	2
  1973  00013D                     _firstboot:
  1974                           	opt stack 0
  1975  00013D                     	ds	2
  1976  00013F                     _i:
  1977                           	opt stack 0
  1978  00013F                     	ds	2
  1979  000141                     _log_count_can_w_lab:
  1980                           	opt stack 0
  1981  000141                     	ds	2
  1982  000143                     _log_count_total:
  1983                           	opt stack 0
  1984  000143                     	ds	2
  1985  000145                     _most_recent_sort_time:
  1986                           	opt stack 0
  1987  000145                     	ds	2
  1988  000147                     _var:
  1989                           	opt stack 0
  1990  000147                     	ds	2
  1991                           tblptru	equ	0xFF8
  1992                           tblptrh	equ	0xFF7
  1993                           tblptrl	equ	0xFF6
  1994                           tablat	equ	0xFF5
  1995                           postinc0	equ	0xFEE
  1996                           wreg	equ	0xFE8
  1997                           postdec1	equ	0xFE5
  1998                           fsr1l	equ	0xFE1
  1999                           
  2000                           	psect	dataBANK1
  2001  000149                     __pdataBANK1:
  2002                           	opt stack 0
  2003  000149                     UI@F3246:
  2004                           	opt stack 0
  2005  000149                     	ds	4
  2006  00014D                     printRTC@F3236:
  2007                           	opt stack 0
  2008  00014D                     	ds	4
  2009                           tblptru	equ	0xFF8
  2010                           tblptrh	equ	0xFF7
  2011                           tblptrl	equ	0xFF6
  2012                           tablat	equ	0xFF5
  2013                           postinc0	equ	0xFEE
  2014                           wreg	equ	0xFE8
  2015                           postdec1	equ	0xFE5
  2016                           fsr1l	equ	0xFE1
  2017                           
  2018                           	psect	cstackBANK0
  2019  000080                     __pcstackBANK0:
  2020                           	opt stack 0
  2021  000080                     ??_delay_ms:
  2022  000080                     ??_isdigit:
  2023  000080                     ??_readADC:
  2024  000080                     ??_I2C_Master_Wait:
  2025  000080                     ?___wmul:
  2026                           	opt stack 0
  2027  000080                     ?___awmod:
  2028                           	opt stack 0
  2029  000080                     ?___lwdiv:
  2030                           	opt stack 0
  2031  000080                     ?___ftpack:
  2032                           	opt stack 0
  2033  000080                     ?___lldiv:
  2034                           	opt stack 0
  2035  000080                     lcdNibble@temp:
  2036                           	opt stack 0
  2037  000080                     initTime@m:
  2038                           	opt stack 0
  2039  000080                     updateServoPosition@time_us:
  2040                           	opt stack 0
  2041  000080                     EEPROM_read@address:
  2042                           	opt stack 0
  2043  000080                     ___wmul@multiplier:
  2044                           	opt stack 0
  2045  000080                     ___awmod@dividend:
  2046                           	opt stack 0
  2047  000080                     ___lwdiv@dividend:
  2048                           	opt stack 0
  2049  000080                     strcpy@to:
  2050                           	opt stack 0
  2051  000080                     ___ftpack@arg:
  2052                           	opt stack 0
  2053  000080                     ___lldiv@dividend:
  2054                           	opt stack 0
  2055                           
  2056                           ; 4 bytes @ 0x0
  2057  000080                     	ds	1
  2058  000081                     readADC@channel:
  2059                           	opt stack 0
  2060  000081                     I2C_Master_Read@a:
  2061                           	opt stack 0
  2062  000081                     lcdNibble@data:
  2063                           	opt stack 0
  2064  000081                     initTime@h:
  2065                           	opt stack 0
  2066  000081                     delay_ms@milliseconds:
  2067                           	opt stack 0
  2068  000081                     _isdigit$2062:
  2069                           	opt stack 0
  2070  000081                     I2C_Master_Write@d:
  2071                           	opt stack 0
  2072                           
  2073                           ; 2 bytes @ 0x1
  2074  000081                     	ds	1
  2075  000082                     ??_readIR:
  2076  000082                     ??_readMAG:
  2077  000082                     ??_readCOND:
  2078  000082                     I2C_Master_Read@temp:
  2079                           	opt stack 0
  2080  000082                     lcdInst@data:
  2081                           	opt stack 0
  2082  000082                     putch@data:
  2083                           	opt stack 0
  2084  000082                     initTime@w:
  2085                           	opt stack 0
  2086  000082                     isdigit@c:
  2087                           	opt stack 0
  2088  000082                     updateServoPosition@timer:
  2089                           	opt stack 0
  2090  000082                     ___wmul@multiplicand:
  2091                           	opt stack 0
  2092  000082                     ___awmod@divisor:
  2093                           	opt stack 0
  2094  000082                     ___lwdiv@divisor:
  2095                           	opt stack 0
  2096  000082                     strcpy@from:
  2097                           	opt stack 0
  2098                           
  2099                           ; 2 bytes @ 0x2
  2100  000082                     	ds	1
  2101  000083                     ??_initLCD:
  2102  000083                     initTime@DD:
  2103                           	opt stack 0
  2104  000083                     ___ftpack@exp:
  2105                           	opt stack 0
  2106  000083                     getRTC@i:
  2107                           	opt stack 0
  2108                           
  2109                           ; 2 bytes @ 0x3
  2110  000083                     	ds	1
  2111  000084                     ??_updateServoPosition:
  2112  000084                     initTime@MM:
  2113                           	opt stack 0
  2114  000084                     ___awmod@counter:
  2115                           	opt stack 0
  2116  000084                     ___ftpack@sign:
  2117                           	opt stack 0
  2118  000084                     readIR@res:
  2119                           	opt stack 0
  2120  000084                     readMAG@res:
  2121                           	opt stack 0
  2122  000084                     readCOND@res:
  2123                           	opt stack 0
  2124  000084                     ___wmul@product:
  2125                           	opt stack 0
  2126  000084                     ___lwdiv@quotient:
  2127                           	opt stack 0
  2128  000084                     strcpy@cp:
  2129                           	opt stack 0
  2130  000084                     ___lldiv@divisor:
  2131                           	opt stack 0
  2132                           
  2133                           ; 4 bytes @ 0x4
  2134  000084                     	ds	1
  2135  000085                     ??_initSortTimer:
  2136  000085                     ??___ftpack:
  2137  000085                     initTime@YY:
  2138                           	opt stack 0
  2139  000085                     ___awmod@sign:
  2140                           	opt stack 0
  2141                           
  2142                           ; 1 bytes @ 0x5
  2143  000085                     	ds	1
  2144  000086                     ??_getIR:
  2145  000086                     ??_getMAG:
  2146  000086                     ?___awdiv:
  2147                           	opt stack 0
  2148  000086                     initTime@s:
  2149                           	opt stack 0
  2150  000086                     ___lwdiv@counter:
  2151                           	opt stack 0
  2152  000086                     updateServoPosition@my_time:
  2153                           	opt stack 0
  2154  000086                     ___awdiv@dividend:
  2155                           	opt stack 0
  2156                           
  2157                           ; 2 bytes @ 0x6
  2158  000086                     	ds	1
  2159  000087                     ?___lwmod:
  2160                           	opt stack 0
  2161  000087                     getIR@i:
  2162                           	opt stack 0
  2163  000087                     ___lwmod@dividend:
  2164                           	opt stack 0
  2165                           
  2166                           ; 2 bytes @ 0x7
  2167  000087                     	ds	1
  2168  000088                     ??_Distribution:
  2169  000088                     ??_initServos:
  2170  000088                     initSortTimer@i:
  2171                           	opt stack 0
  2172  000088                     ___awdiv@divisor:
  2173                           	opt stack 0
  2174  000088                     ___lldiv@quotient:
  2175                           	opt stack 0
  2176                           
  2177                           ; 4 bytes @ 0x8
  2178  000088                     	ds	1
  2179  000089                     ___lwmod@divisor:
  2180                           	opt stack 0
  2181                           
  2182                           ; 2 bytes @ 0x9
  2183  000089                     	ds	1
  2184  00008A                     ___awdiv@counter:
  2185                           	opt stack 0
  2186                           
  2187                           ; 1 bytes @ 0xA
  2188  00008A                     	ds	1
  2189  00008B                     ___awdiv@sign:
  2190                           	opt stack 0
  2191  00008B                     ___lwmod@counter:
  2192                           	opt stack 0
  2193                           
  2194                           ; 1 bytes @ 0xB
  2195  00008B                     	ds	1
  2196  00008C                     ___lldiv@counter:
  2197                           	opt stack 0
  2198  00008C                     ___awdiv@quotient:
  2199                           	opt stack 0
  2200                           
  2201                           ; 2 bytes @ 0xC
  2202  00008C                     	ds	1
  2203  00008D                     I2C_Master_Init@c:
  2204                           	opt stack 0
  2205                           
  2206                           ; 4 bytes @ 0xD
  2207  00008D                     	ds	1
  2208  00008E                     ?_printf:
  2209                           	opt stack 0
  2210  00008E                     ?___awtoft:
  2211                           	opt stack 0
  2212  00008E                     printf@f:
  2213                           	opt stack 0
  2214  00008E                     ___awtoft@c:
  2215                           	opt stack 0
  2216                           
  2217                           ; 2 bytes @ 0xE
  2218  00008E                     	ds	3
  2219  000091                     ??_I2C_Master_Init:
  2220  000091                     ___awtoft@sign:
  2221                           	opt stack 0
  2222                           
  2223                           ; 1 bytes @ 0x11
  2224  000091                     	ds	1
  2225  000092                     ___ftge@ff1:
  2226                           	opt stack 0
  2227                           
  2228                           ; 3 bytes @ 0x12
  2229  000092                     	ds	3
  2230  000095                     ??_loadRTC:
  2231  000095                     ___ftge@ff2:
  2232                           	opt stack 0
  2233                           
  2234                           ; 3 bytes @ 0x15
  2235  000095                     	ds	1
  2236  000096                     loadRTC@i:
  2237                           	opt stack 0
  2238                           
  2239                           ; 2 bytes @ 0x16
  2240  000096                     	ds	2
  2241  000098                     ??___ftge:
  2242                           
  2243                           ; 1 bytes @ 0x18
  2244  000098                     	ds	2
  2245  00009A                     ??_printf:
  2246                           
  2247                           ; 1 bytes @ 0x1A
  2248  00009A                     	ds	1
  2249  00009B                     ??_ID:
  2250                           
  2251                           ; 1 bytes @ 0x1B
  2252  00009B                     	ds	2
  2253  00009D                     _ID$1142:
  2254                           	opt stack 0
  2255                           
  2256                           ; 1 bytes @ 0x1D
  2257  00009D                     	ds	1
  2258  00009E                     _ID$1144:
  2259                           	opt stack 0
  2260  00009E                     printf@prec:
  2261                           	opt stack 0
  2262                           
  2263                           ; 1 bytes @ 0x1E
  2264  00009E                     	ds	1
  2265  00009F                     ID@i:
  2266                           	opt stack 0
  2267  00009F                     printf@cp:
  2268                           	opt stack 0
  2269                           
  2270                           ; 2 bytes @ 0x1F
  2271  00009F                     	ds	2
  2272  0000A1                     ID@i_1141:
  2273                           	opt stack 0
  2274  0000A1                     printf@ap:
  2275                           	opt stack 0
  2276                           
  2277                           ; 2 bytes @ 0x21
  2278  0000A1                     	ds	2
  2279  0000A3                     ID@i_1143:
  2280                           	opt stack 0
  2281  0000A3                     printf@len:
  2282                           	opt stack 0
  2283                           
  2284                           ; 2 bytes @ 0x23
  2285  0000A3                     	ds	2
  2286  0000A5                     ID@i_1145:
  2287                           	opt stack 0
  2288  0000A5                     printf@val:
  2289                           	opt stack 0
  2290                           
  2291                           ; 2 bytes @ 0x25
  2292  0000A5                     	ds	2
  2293  0000A7                     printf@flag:
  2294                           	opt stack 0
  2295  0000A7                     ID@res1:
  2296                           	opt stack 0
  2297                           
  2298                           ; 2 bytes @ 0x27
  2299  0000A7                     	ds	1
  2300  0000A8                     printf@c:
  2301                           	opt stack 0
  2302                           
  2303                           ; 1 bytes @ 0x28
  2304  0000A8                     	ds	1
  2305  0000A9                     ID@res2:
  2306                           	opt stack 0
  2307  0000A9                     printf@width:
  2308                           	opt stack 0
  2309                           
  2310                           ; 2 bytes @ 0x29
  2311  0000A9                     	ds	2
  2312  0000AB                     ??_printRTC:
  2313  0000AB                     ??_algorithmTest:
  2314  0000AB                     ??_sensorTest:
  2315  0000AB                     ??_actuatorTest:
  2316  0000AB                     ??_arm:
  2317  0000AB                     ??_PortTestDC:
  2318  0000AB                     ??_SpeedTest:
  2319  0000AB                     ??_PortTestPusher:
  2320  0000AB                     ??_PlatformTest:
  2321  0000AB                     ??_BothServos:
  2322  0000AB                     ??_BlockerTest:
  2323  0000AB                     ID@res3:
  2324                           	opt stack 0
  2325  0000AB                     EEPROM_write@address:
  2326                           	opt stack 0
  2327                           
  2328                           ; 2 bytes @ 0x2B
  2329  0000AB                     	ds	1
  2330  0000AC                     arm@on:
  2331                           	opt stack 0
  2332                           
  2333                           ; 2 bytes @ 0x2C
  2334  0000AC                     	ds	1
  2335  0000AD                     ID@time:
  2336                           	opt stack 0
  2337  0000AD                     EEPROM_write@data:
  2338                           	opt stack 0
  2339  0000AD                     actuatorTest@i_1733:
  2340                           	opt stack 0
  2341  0000AD                     sensorTest@res:
  2342                           	opt stack 0
  2343  0000AD                     PlatformTest@res:
  2344                           	opt stack 0
  2345  0000AD                     BlockerTest@i:
  2346                           	opt stack 0
  2347                           
  2348                           ; 2 bytes @ 0x2D
  2349  0000AD                     	ds	1
  2350  0000AE                     ??_EEPROM_write:
  2351  0000AE                     actuatorTest@i_1740:
  2352                           	opt stack 0
  2353  0000AE                     ID@n:
  2354                           	opt stack 0
  2355  0000AE                     printRTC@INT_time:
  2356                           	opt stack 0
  2357                           
  2358                           ; 14 bytes @ 0x2E
  2359  0000AE                     	ds	1
  2360  0000AF                     EEPROM_write@i:
  2361                           	opt stack 0
  2362  0000AF                     actuatorTest@i_1741:
  2363                           	opt stack 0
  2364  0000AF                     PlatformTest@res_1785:
  2365                           	opt stack 0
  2366  0000AF                     BlockerTest@res:
  2367                           	opt stack 0
  2368                           
  2369                           ; 2 bytes @ 0x2F
  2370  0000AF                     	ds	1
  2371  0000B0                     EEPROM_write@i_1401:
  2372                           	opt stack 0
  2373  0000B0                     actuatorTest@i_1743:
  2374                           	opt stack 0
  2375                           
  2376                           ; 1 bytes @ 0x30
  2377  0000B0                     	ds	1
  2378  0000B1                     ??_Loading:
  2379  0000B1                     logRun@num:
  2380                           	opt stack 0
  2381  0000B1                     actuatorTest@i_1744:
  2382                           	opt stack 0
  2383  0000B1                     PlatformTest@i:
  2384                           	opt stack 0
  2385  0000B1                     BlockerTest@cam_flag:
  2386                           	opt stack 0
  2387                           
  2388                           ; 2 bytes @ 0x31
  2389  0000B1                     	ds	1
  2390  0000B2                     logRun@byte1:
  2391                           	opt stack 0
  2392  0000B2                     actuatorTest@i_1746:
  2393                           	opt stack 0
  2394                           
  2395                           ; 1 bytes @ 0x32
  2396  0000B2                     	ds	1
  2397  0000B3                     logRun@byte2:
  2398                           	opt stack 0
  2399  0000B3                     actuatorTest@i_1747:
  2400                           	opt stack 0
  2401  0000B3                     Loading@addr:
  2402                           	opt stack 0
  2403  0000B3                     PlatformTest@i_1789:
  2404                           	opt stack 0
  2405  0000B3                     BlockerTest@cond_flag:
  2406                           	opt stack 0
  2407                           
  2408                           ; 2 bytes @ 0x33
  2409  0000B3                     	ds	1
  2410  0000B4                     logRun@byte3:
  2411                           	opt stack 0
  2412  0000B4                     actuatorTest@i_1749:
  2413                           	opt stack 0
  2414                           
  2415                           ; 1 bytes @ 0x34
  2416  0000B4                     	ds	1
  2417  0000B5                     Loading@byte1:
  2418                           	opt stack 0
  2419  0000B5                     logRun@byte_i:
  2420                           	opt stack 0
  2421  0000B5                     actuatorTest@i_1750:
  2422                           	opt stack 0
  2423  0000B5                     PlatformTest@on:
  2424                           	opt stack 0
  2425                           
  2426                           ; 2 bytes @ 0x35
  2427  0000B5                     	ds	1
  2428  0000B6                     logRun@byte11:
  2429                           	opt stack 0
  2430  0000B6                     actuatorTest@i_1752:
  2431                           	opt stack 0
  2432  0000B6                     Loading@i_1118:
  2433                           	opt stack 0
  2434                           
  2435                           ; 2 bytes @ 0x36
  2436  0000B6                     	ds	1
  2437  0000B7                     actuatorTest@i_1753:
  2438                           	opt stack 0
  2439  0000B7                     logRun@i:
  2440                           	opt stack 0
  2441                           
  2442                           ; 2 bytes @ 0x37
  2443  0000B7                     	ds	1
  2444  0000B8                     actuatorTest@i_1755:
  2445                           	opt stack 0
  2446  0000B8                     Loading@i_1127:
  2447                           	opt stack 0
  2448                           
  2449                           ; 2 bytes @ 0x38
  2450  0000B8                     	ds	1
  2451  0000B9                     actuatorTest@i_1756:
  2452                           	opt stack 0
  2453  0000B9                     logRun@addr:
  2454                           	opt stack 0
  2455                           
  2456                           ; 2 bytes @ 0x39
  2457  0000B9                     	ds	1
  2458  0000BA                     actuatorTest@i_1759:
  2459                           	opt stack 0
  2460  0000BA                     Loading@i_1129:
  2461                           	opt stack 0
  2462                           
  2463                           ; 2 bytes @ 0x3A
  2464  0000BA                     	ds	1
  2465  0000BB                     actuatorTest@i_1760:
  2466                           	opt stack 0
  2467                           
  2468                           ; 1 bytes @ 0x3B
  2469  0000BB                     	ds	1
  2470  0000BC                     actuatorTest@i_1762:
  2471                           	opt stack 0
  2472  0000BC                     printRTC@RTC_month:
  2473                           	opt stack 0
  2474  0000BC                     Loading@i_1130:
  2475                           	opt stack 0
  2476                           
  2477                           ; 2 bytes @ 0x3C
  2478  0000BC                     	ds	1
  2479  0000BD                     actuatorTest@i_1763:
  2480                           	opt stack 0
  2481                           
  2482                           ; 1 bytes @ 0x3D
  2483  0000BD                     	ds	1
  2484  0000BE                     actuatorTest@i_1765:
  2485                           	opt stack 0
  2486  0000BE                     Loading@i_1132:
  2487                           	opt stack 0
  2488  0000BE                     printRTC@month:
  2489                           	opt stack 0
  2490                           
  2491                           ; 4 bytes @ 0x3E
  2492  0000BE                     	ds	1
  2493  0000BF                     actuatorTest@i_1766:
  2494                           	opt stack 0
  2495                           
  2496                           ; 1 bytes @ 0x3F
  2497  0000BF                     	ds	1
  2498  0000C0                     actuatorTest@i_1769:
  2499                           	opt stack 0
  2500  0000C0                     Loading@i:
  2501                           	opt stack 0
  2502                           
  2503                           ; 2 bytes @ 0x40
  2504  0000C0                     	ds	1
  2505  0000C1                     actuatorTest@i_1770:
  2506                           	opt stack 0
  2507                           
  2508                           ; 1 bytes @ 0x41
  2509  0000C1                     	ds	1
  2510  0000C2                     actuatorTest@i_1772:
  2511                           	opt stack 0
  2512  0000C2                     printRTC@i:
  2513                           	opt stack 0
  2514  0000C2                     Loading@j:
  2515                           	opt stack 0
  2516                           
  2517                           ; 2 bytes @ 0x42
  2518  0000C2                     	ds	1
  2519  0000C3                     actuatorTest@i_1773:
  2520                           	opt stack 0
  2521                           
  2522                           ; 1 bytes @ 0x43
  2523  0000C3                     	ds	1
  2524  0000C4                     ??_UI:
  2525  0000C4                     actuatorTest@i:
  2526                           	opt stack 0
  2527                           
  2528                           ; 2 bytes @ 0x44
  2529  0000C4                     	ds	2
  2530  0000C6                     ??_Test:
  2531  0000C6                     _UI$2427:
  2532                           	opt stack 0
  2533                           
  2534                           ; 2 bytes @ 0x46
  2535  0000C6                     	ds	2
  2536  0000C8                     UI@i:
  2537                           	opt stack 0
  2538                           
  2539                           ; 1 bytes @ 0x48
  2540  0000C8                     	ds	1
  2541  0000C9                     UI@i_412:
  2542                           	opt stack 0
  2543                           
  2544                           ; 1 bytes @ 0x49
  2545  0000C9                     	ds	1
  2546  0000CA                     UI@i_415:
  2547                           	opt stack 0
  2548                           
  2549                           ; 1 bytes @ 0x4A
  2550  0000CA                     	ds	1
  2551  0000CB                     UI@i_416:
  2552                           	opt stack 0
  2553                           
  2554                           ; 1 bytes @ 0x4B
  2555  0000CB                     	ds	1
  2556  0000CC                     UI@i_434:
  2557                           	opt stack 0
  2558                           
  2559                           ; 1 bytes @ 0x4C
  2560  0000CC                     	ds	1
  2561  0000CD                     UI@i_435:
  2562                           	opt stack 0
  2563                           
  2564                           ; 1 bytes @ 0x4D
  2565  0000CD                     	ds	1
  2566  0000CE                     UI@i_438:
  2567                           	opt stack 0
  2568                           
  2569                           ; 1 bytes @ 0x4E
  2570  0000CE                     	ds	1
  2571  0000CF                     UI@i_439:
  2572                           	opt stack 0
  2573                           
  2574                           ; 1 bytes @ 0x4F
  2575  0000CF                     	ds	1
  2576  0000D0                     UI@i_442:
  2577                           	opt stack 0
  2578                           
  2579                           ; 1 bytes @ 0x50
  2580  0000D0                     	ds	1
  2581  0000D1                     UI@i_443:
  2582                           	opt stack 0
  2583                           
  2584                           ; 1 bytes @ 0x51
  2585  0000D1                     	ds	1
  2586  0000D2                     UI@i_446:
  2587                           	opt stack 0
  2588                           
  2589                           ; 1 bytes @ 0x52
  2590  0000D2                     	ds	1
  2591  0000D3                     UI@i_447:
  2592                           	opt stack 0
  2593                           
  2594                           ; 1 bytes @ 0x53
  2595  0000D3                     	ds	1
  2596  0000D4                     UI@i_450:
  2597                           	opt stack 0
  2598                           
  2599                           ; 1 bytes @ 0x54
  2600  0000D4                     	ds	1
  2601  0000D5                     UI@i_451:
  2602                           	opt stack 0
  2603                           
  2604                           ; 1 bytes @ 0x55
  2605  0000D5                     	ds	1
  2606  0000D6                     UI@month:
  2607                           	opt stack 0
  2608                           
  2609                           ; 4 bytes @ 0x56
  2610  0000D6                     	ds	4
  2611  0000DA                     tblptru	equ	0xFF8
  2612                           tblptrh	equ	0xFF7
  2613                           tblptrl	equ	0xFF6
  2614                           tablat	equ	0xFF5
  2615                           postinc0	equ	0xFEE
  2616                           wreg	equ	0xFE8
  2617                           postdec1	equ	0xFE5
  2618                           fsr1l	equ	0xFE1
  2619                           
  2620                           ; 1 bytes @ 0x5A
  2621                           
  2622                           	psect	cstackCOMRAM
  2623  000001                     __pcstackCOMRAM:
  2624                           	opt stack 0
  2625  000001                     ??_updateArmState:
  2626  000001                     ??i2_I2C_Master_Wait:
  2627  000001                     ??i2_delay_ms:
  2628  000001                     ??i2_isdigit:
  2629  000001                     ?i2___wmul:
  2630                           	opt stack 0
  2631  000001                     ?i2___lwmod:
  2632                           	opt stack 0
  2633  000001                     i2lcdNibble@temp:
  2634                           	opt stack 0
  2635  000001                     i2updateServoPosition@time_us:
  2636                           	opt stack 0
  2637  000001                     i2EEPROM_read@address:
  2638                           	opt stack 0
  2639  000001                     i2___wmul@multiplier:
  2640                           	opt stack 0
  2641  000001                     i2___lwmod@dividend:
  2642                           	opt stack 0
  2643  000001                     i2strcpy@to:
  2644                           	opt stack 0
  2645                           
  2646                           ; 2 bytes @ 0x0
  2647  000001                     	ds	1
  2648  000002                     i2I2C_Master_Read@a:
  2649                           	opt stack 0
  2650  000002                     i2lcdNibble@data:
  2651                           	opt stack 0
  2652  000002                     i2delay_ms@milliseconds:
  2653                           	opt stack 0
  2654  000002                     i2_isdigit$2062:
  2655                           	opt stack 0
  2656  000002                     i2I2C_Master_Write@d:
  2657                           	opt stack 0
  2658                           
  2659                           ; 2 bytes @ 0x1
  2660  000002                     	ds	1
  2661  000003                     i2I2C_Master_Read@temp:
  2662                           	opt stack 0
  2663  000003                     i2lcdInst@data:
  2664                           	opt stack 0
  2665  000003                     i2putch@data:
  2666                           	opt stack 0
  2667  000003                     i2isdigit@c:
  2668                           	opt stack 0
  2669  000003                     i2updateServoPosition@timer:
  2670                           	opt stack 0
  2671  000003                     i2___wmul@multiplicand:
  2672                           	opt stack 0
  2673  000003                     i2___lwmod@divisor:
  2674                           	opt stack 0
  2675  000003                     i2strcpy@from:
  2676                           	opt stack 0
  2677                           
  2678                           ; 2 bytes @ 0x2
  2679  000003                     	ds	1
  2680  000004                     i2getRTC@i:
  2681                           	opt stack 0
  2682                           
  2683                           ; 2 bytes @ 0x3
  2684  000004                     	ds	1
  2685  000005                     ??i2_updateServoPosition:
  2686  000005                     i2___lwmod@counter:
  2687                           	opt stack 0
  2688  000005                     i2___wmul@product:
  2689                           	opt stack 0
  2690  000005                     i2strcpy@cp:
  2691                           	opt stack 0
  2692                           
  2693                           ; 2 bytes @ 0x4
  2694  000005                     	ds	1
  2695  000006                     ?i2___lwdiv:
  2696                           	opt stack 0
  2697  000006                     i2___lwdiv@dividend:
  2698                           	opt stack 0
  2699                           
  2700                           ; 2 bytes @ 0x5
  2701  000006                     	ds	1
  2702  000007                     retrieveLog@logNum:
  2703                           	opt stack 0
  2704  000007                     i2updateServoPosition@my_time:
  2705                           	opt stack 0
  2706                           
  2707                           ; 2 bytes @ 0x6
  2708  000007                     	ds	1
  2709  000008                     i2___lwdiv@divisor:
  2710                           	opt stack 0
  2711                           
  2712                           ; 2 bytes @ 0x7
  2713  000008                     	ds	1
  2714  000009                     ??_retrieveLog:
  2715  000009                     ??_updateServoStates:
  2716                           
  2717                           ; 1 bytes @ 0x8
  2718  000009                     	ds	1
  2719  00000A                     i2___lwdiv@quotient:
  2720                           	opt stack 0
  2721                           
  2722                           ; 2 bytes @ 0x9
  2723  00000A                     	ds	1
  2724  00000B                     retrieveLog@byte1:
  2725                           	opt stack 0
  2726                           
  2727                           ; 1 bytes @ 0xA
  2728  00000B                     	ds	1
  2729  00000C                     retrieveLog@byte2:
  2730                           	opt stack 0
  2731  00000C                     i2___lwdiv@counter:
  2732                           	opt stack 0
  2733                           
  2734                           ; 1 bytes @ 0xB
  2735  00000C                     	ds	1
  2736  00000D                     ?i2_printf:
  2737                           	opt stack 0
  2738  00000D                     retrieveLog@byte3:
  2739                           	opt stack 0
  2740  00000D                     i2printf@f:
  2741                           	opt stack 0
  2742                           
  2743                           ; 2 bytes @ 0xC
  2744  00000D                     	ds	1
  2745  00000E                     retrieveLog@i:
  2746                           	opt stack 0
  2747                           
  2748                           ; 2 bytes @ 0xD
  2749  00000E                     	ds	2
  2750  000010                     retrieveLog@addr:
  2751                           	opt stack 0
  2752                           
  2753                           ; 2 bytes @ 0xF
  2754  000010                     	ds	2
  2755  000012                     dispLogs@myLog:
  2756                           	opt stack 0
  2757                           
  2758                           ; 2 bytes @ 0x11
  2759  000012                     	ds	2
  2760  000014                     
  2761                           ; 1 bytes @ 0x13
  2762  000014                     	ds	5
  2763  000019                     ??i2_printf:
  2764                           
  2765                           ; 1 bytes @ 0x18
  2766  000019                     	ds	4
  2767  00001D                     i2printf@prec:
  2768                           	opt stack 0
  2769                           
  2770                           ; 1 bytes @ 0x1C
  2771  00001D                     	ds	1
  2772  00001E                     i2printf@cp:
  2773                           	opt stack 0
  2774                           
  2775                           ; 2 bytes @ 0x1D
  2776  00001E                     	ds	2
  2777  000020                     i2printf@ap:
  2778                           	opt stack 0
  2779                           
  2780                           ; 2 bytes @ 0x1F
  2781  000020                     	ds	2
  2782  000022                     i2printf@len:
  2783                           	opt stack 0
  2784                           
  2785                           ; 2 bytes @ 0x21
  2786  000022                     	ds	2
  2787  000024                     i2printf@val:
  2788                           	opt stack 0
  2789                           
  2790                           ; 2 bytes @ 0x23
  2791  000024                     	ds	2
  2792  000026                     i2printf@flag:
  2793                           	opt stack 0
  2794                           
  2795                           ; 1 bytes @ 0x25
  2796  000026                     	ds	1
  2797  000027                     i2printf@c:
  2798                           	opt stack 0
  2799                           
  2800                           ; 1 bytes @ 0x26
  2801  000027                     	ds	1
  2802  000028                     i2printf@width:
  2803                           	opt stack 0
  2804                           
  2805                           ; 2 bytes @ 0x27
  2806  000028                     	ds	2
  2807  00002A                     ??_printSortTimer:
  2808  00002A                     ??i2_printRTC:
  2809  00002A                     ?_inputHandler:
  2810                           	opt stack 0
  2811                           
  2812                           ; 2 bytes @ 0x29
  2813  00002A                     	ds	2
  2814  00002C                     ??_inputHandler:
  2815                           
  2816                           ; 1 bytes @ 0x2B
  2817  00002C                     	ds	1
  2818  00002D                     printSortTimer@curTime:
  2819                           	opt stack 0
  2820  00002D                     i2printRTC@INT_time:
  2821                           	opt stack 0
  2822                           
  2823                           ; 14 bytes @ 0x2C
  2824  00002D                     	ds	14
  2825  00003B                     printSortTimer@start_sec:
  2826                           	opt stack 0
  2827  00003B                     i2printRTC@RTC_month:
  2828                           	opt stack 0
  2829                           
  2830                           ; 2 bytes @ 0x3A
  2831  00003B                     	ds	2
  2832  00003D                     printSortTimer@cur_sec:
  2833                           	opt stack 0
  2834  00003D                     i2printRTC@month:
  2835                           	opt stack 0
  2836                           
  2837                           ; 4 bytes @ 0x3C
  2838  00003D                     	ds	2
  2839  00003F                     printSortTimer@min:
  2840                           	opt stack 0
  2841                           
  2842                           ; 2 bytes @ 0x3E
  2843  00003F                     	ds	2
  2844  000041                     printSortTimer@sec:
  2845                           	opt stack 0
  2846  000041                     i2printRTC@i:
  2847                           	opt stack 0
  2848                           
  2849                           ; 2 bytes @ 0x40
  2850  000041                     	ds	2
  2851  000043                     ??_updateMenu:
  2852  000043                     _printSortTimer$2559:
  2853                           	opt stack 0
  2854                           
  2855                           ; 2 bytes @ 0x42
  2856  000043                     	ds	2
  2857  000045                     printSortTimer@timeDiff:
  2858                           	opt stack 0
  2859                           
  2860                           ; 2 bytes @ 0x44
  2861  000045                     	ds	2
  2862  000047                     printSortTimer@i_1161:
  2863                           	opt stack 0
  2864                           
  2865                           ; 2 bytes @ 0x46
  2866  000047                     	ds	2
  2867  000049                     printSortTimer@i:
  2868                           	opt stack 0
  2869                           
  2870                           ; 2 bytes @ 0x48
  2871  000049                     	ds	2
  2872  00004B                     ??_handler:
  2873                           
  2874                           ; 1 bytes @ 0x4A
  2875  00004B                     	ds	16
  2876                           tblptru	equ	0xFF8
  2877                           tblptrh	equ	0xFF7
  2878                           tblptrl	equ	0xFF6
  2879                           tablat	equ	0xFF5
  2880                           postinc0	equ	0xFEE
  2881                           wreg	equ	0xFE8
  2882                           postdec1	equ	0xFE5
  2883                           fsr1l	equ	0xFE1
  2884                           
  2885 ;;
  2886 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2887 ;;
  2888 ;; *************** function _main *****************
  2889 ;; Defined at:
  2890 ;;		line 19 in file "main.c"
  2891 ;; Parameters:    Size  Location     Type
  2892 ;;		None
  2893 ;; Auto vars:     Size  Location     Type
  2894 ;;		None
  2895 ;; Return value:  Size  Location     Type
  2896 ;;                  1    wreg      void 
  2897 ;; Registers used:
  2898 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2899 ;; Tracked objects:
  2900 ;;		On entry : 0/0
  2901 ;;		On exit  : 0/0
  2902 ;;		Unchanged: 0/0
  2903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2907 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2908 ;;Total ram usage:        0 bytes
  2909 ;; Hardware stack levels required when called:   13
  2910 ;; This function calls:
  2911 ;;		_I2C_Master_Init
  2912 ;;		_Test
  2913 ;;		_UI
  2914 ;;		_initEEPROM
  2915 ;;		_initLCD
  2916 ;;		_initTime
  2917 ;;		_initUI
  2918 ;;		_logRun
  2919 ;;		_machineConfig
  2920 ;;		_sort
  2921 ;;		_stopSignals
  2922 ;; This function is called by:
  2923 ;;		Startup code after reset
  2924 ;; This function uses a non-reentrant model
  2925 ;;
  2926                           
  2927                           	psect	text0
  2928  0046FC                     __ptext0:
  2929                           	opt stack 0
  2930  0046FC                     _main:
  2931                           	opt stack 18
  2932                           
  2933                           ;main.c: 20: machineConfig();
  2934                           
  2935                           ;incstack = 0
  2936  0046FC  EC71  F028         	call	_machineConfig	;wreg free
  2937                           
  2938                           ;main.c: 21: initLCD();
  2939  004700  EC4F  F02A         	call	_initLCD	;wreg free
  2940                           
  2941                           ;main.c: 24: RTCflag = 0;
  2942  004704  0E00               	movlw	0
  2943  004706  0100               	movlb	0	; () banked
  2944  004708  6FED               	movwf	(_RTCflag+1)& (0+255),b
  2945  00470A  0E00               	movlw	0
  2946  00470C  6FEC               	movwf	_RTCflag& (0+255),b
  2947                           
  2948                           ;main.c: 25: if(RTCflag){
  2949  00470E  0100               	movlb	0	; () banked
  2950  004710  51EC               	movf	_RTCflag& (0+255),w,b
  2951  004712  0100               	movlb	0	; () banked
  2952  004714  11ED               	iorwf	(_RTCflag+1)& (0+255),w,b
  2953  004716  B4D8               	btfsc	status,2,c
  2954  004718  D016               	goto	l10075
  2955                           
  2956                           ; BSR set to: 0
  2957                           ;main.c: 26: initTime(0x42, 0x47, 0x17, 0x07, 0x08, 0x04, 0x17);
  2958  00471A  0E47               	movlw	71
  2959  00471C  0100               	movlb	0	; () banked
  2960  00471E  6F80               	movwf	initTime@m& (0+255),b
  2961  004720  0E17               	movlw	23
  2962  004722  0100               	movlb	0	; () banked
  2963  004724  6F81               	movwf	initTime@h& (0+255),b
  2964  004726  0E07               	movlw	7
  2965  004728  0100               	movlb	0	; () banked
  2966  00472A  6F82               	movwf	initTime@w& (0+255),b
  2967  00472C  0E08               	movlw	8
  2968  00472E  0100               	movlb	0	; () banked
  2969  004730  6F83               	movwf	initTime@DD& (0+255),b
  2970  004732  0E04               	movlw	4
  2971  004734  0100               	movlb	0	; () banked
  2972  004736  6F84               	movwf	initTime@MM& (0+255),b
  2973  004738  0E17               	movlw	23
  2974  00473A  0100               	movlb	0	; () banked
  2975  00473C  6F85               	movwf	initTime@YY& (0+255),b
  2976  00473E  0E42               	movlw	66
  2977  004740  EC42  F02D         	call	_initTime
  2978                           
  2979                           ;main.c: 27: }
  2980  004744  D00B               	goto	l10077
  2981  004746                     l10075:
  2982                           
  2983                           ;main.c: 28: else{
  2984                           ;main.c: 29: I2C_Master_Init(10000);
  2985  004746  0E10               	movlw	16
  2986  004748  0100               	movlb	0	; () banked
  2987  00474A  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2988  00474C  0E27               	movlw	39
  2989  00474E  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2990  004750  0E00               	movlw	0
  2991  004752  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2992  004754  0E00               	movlw	0
  2993  004756  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2994  004758  ECD4  F028         	call	_I2C_Master_Init	;wreg free
  2995  00475C                     l10077:
  2996                           
  2997                           ;main.c: 30: }
  2998                           ;main.c: 32: initUI();
  2999  00475C  EC72  F02B         	call	_initUI	;wreg free
  3000                           
  3001                           ;main.c: 33: first = 1;
  3002  004760  0E00               	movlw	0
  3003  004762  0101               	movlb	1	; () banked
  3004  004764  6F3C               	movwf	(_first+1)& (0+255),b
  3005  004766  0E01               	movlw	1
  3006  004768  6F3B               	movwf	_first& (0+255),b
  3007                           
  3008                           ; BSR set to: 1
  3009                           ;main.c: 34: initEEPROM();
  3010  00476A  EC8A  F02D         	call	_initEEPROM	;wreg free
  3011                           
  3012                           ;main.c: 45: switch(machine_state){
  3013                           
  3014                           ;main.c: 44: while(1){
  3015  00476E  D01A               	goto	l10103
  3016  004770                     l10083:
  3017                           
  3018                           ;main.c: 47: UI();
  3019  004770  EC09  F000         	call	_UI	;wreg free
  3020                           
  3021                           ;main.c: 48: break;
  3022  004774  D017               	goto	l10103
  3023  004776                     l10085:
  3024                           
  3025                           ;main.c: 50: sort();
  3026  004776  EC31  F02D         	call	_sort	;wreg free
  3027                           
  3028                           ;main.c: 51: break;
  3029  00477A  D014               	goto	l10103
  3030  00477C                     l10087:
  3031                           
  3032                           ;main.c: 53: stopSignals();
  3033  00477C  EC62  F02D         	call	_stopSignals	;wreg free
  3034                           
  3035                           ;main.c: 54: logRun();
  3036  004780  EC75  F01F         	call	_logRun	;wreg free
  3037                           
  3038                           ;main.c: 55: first = 1;
  3039  004784  0E00               	movlw	0
  3040  004786  0101               	movlb	1	; () banked
  3041  004788  6F3C               	movwf	(_first+1)& (0+255),b
  3042  00478A  0E01               	movlw	1
  3043  00478C  6F3B               	movwf	_first& (0+255),b
  3044                           
  3045                           ; BSR set to: 1
  3046                           ;main.c: 56: initLCD();
  3047  00478E  EC4F  F02A         	call	_initLCD	;wreg free
  3048                           
  3049                           ;main.c: 57: UI();
  3050  004792  EC09  F000         	call	_UI	;wreg free
  3051                           
  3052                           ;main.c: 58: break;
  3053  004796  D006               	goto	l10103
  3054  004798                     l10097:
  3055                           
  3056                           ;main.c: 60: Test();
  3057  004798  EC2C  F021         	call	_Test	;wreg free
  3058                           
  3059                           ;main.c: 61: break;
  3060  00479C  D003               	goto	l10103
  3061  00479E                     l10099:
  3062                           
  3063                           ;main.c: 63: stopSignals();
  3064  00479E  EC62  F02D         	call	_stopSignals	;wreg free
  3065  0047A2                     l508:
  3066  0047A2  D7FF               	goto	l508
  3067  0047A4                     l10103:
  3068  0047A4  0100               	movlb	0	; () banked
  3069  0047A6  51FC               	movf	_machine_state& (0+255),w,b
  3070                           
  3071                           ; Switch size 1, requested type "space"
  3072                           ; Number of cases is 5, Range of values is 0 to 4
  3073                           ; switch strategies available:
  3074                           ; Name         Instructions Cycles
  3075                           ; simple_byte           16     9 (average)
  3076                           ;	Chosen strategy is simple_byte
  3077  0047A8  0A00               	xorlw	0	; case 0
  3078  0047AA  B4D8               	btfsc	status,2,c
  3079  0047AC  D7E1               	goto	l10083
  3080  0047AE  0A01               	xorlw	1	; case 1
  3081  0047B0  B4D8               	btfsc	status,2,c
  3082  0047B2  D7E1               	goto	l10085
  3083  0047B4  0A03               	xorlw	3	; case 2
  3084  0047B6  B4D8               	btfsc	status,2,c
  3085  0047B8  D7E1               	goto	l10087
  3086  0047BA  0A01               	xorlw	1	; case 3
  3087  0047BC  B4D8               	btfsc	status,2,c
  3088  0047BE  D7EC               	goto	l10097
  3089  0047C0  0A07               	xorlw	7	; case 4
  3090  0047C2  B4D8               	btfsc	status,2,c
  3091  0047C4  D7EC               	goto	l10099
  3092                           
  3093                           ; BSR set to: 0
  3094                           
  3095                           ; BSR set to: 0
  3096  0047C6  D7EE               	goto	l10103
  3097  0047C8                     __end_of_main:
  3098                           	opt stack 0
  3099                           tblptru	equ	0xFF8
  3100                           tblptrh	equ	0xFF7
  3101                           tblptrl	equ	0xFF6
  3102                           tablat	equ	0xFF5
  3103                           postinc0	equ	0xFEE
  3104                           wreg	equ	0xFE8
  3105                           postdec1	equ	0xFE5
  3106                           fsr1l	equ	0xFE1
  3107                           status	equ	0xFD8
  3108                           
  3109 ;; *************** function _sort *****************
  3110 ;; Defined at:
  3111 ;;		line 67 in file "sort.c"
  3112 ;; Parameters:    Size  Location     Type
  3113 ;;		None
  3114 ;; Auto vars:     Size  Location     Type
  3115 ;;		None
  3116 ;; Return value:  Size  Location     Type
  3117 ;;                  1    wreg      void 
  3118 ;; Registers used:
  3119 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3120 ;; Tracked objects:
  3121 ;;		On entry : 0/0
  3122 ;;		On exit  : 0/0
  3123 ;;		Unchanged: 0/0
  3124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3128 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3129 ;;Total ram usage:        0 bytes
  3130 ;; Hardware stack levels used:    1
  3131 ;; Hardware stack levels required when called:   12
  3132 ;; This function calls:
  3133 ;;		_Distribution
  3134 ;;		_ID
  3135 ;;		_Loading
  3136 ;; This function is called by:
  3137 ;;		_main
  3138 ;; This function uses a non-reentrant model
  3139 ;;
  3140                           
  3141                           	psect	text1
  3142  005A62                     __ptext1:
  3143                           	opt stack 0
  3144  005A62                     _sort:
  3145                           	opt stack 18
  3146                           
  3147                           ;sort.c: 68: if(machine_state == Sorting_state){
  3148                           
  3149                           ; BSR set to: 0
  3150                           ;incstack = 0
  3151  005A62  0100               	movlb	0	; () banked
  3152  005A64  05FC               	decf	_machine_state& (0+255),w,b
  3153  005A66  B4D8               	btfsc	status,2,c
  3154                           
  3155                           ; BSR set to: 0
  3156                           ;sort.c: 69: Loading();
  3157  005A68  ECC7  F008         	call	_Loading	;wreg free
  3158                           
  3159                           ;sort.c: 70: }
  3160                           ;sort.c: 71: if(machine_state == Sorting_state){
  3161  005A6C  0100               	movlb	0	; () banked
  3162  005A6E  05FC               	decf	_machine_state& (0+255),w,b
  3163  005A70  B4D8               	btfsc	status,2,c
  3164                           
  3165                           ; BSR set to: 0
  3166                           ;sort.c: 72: ID();
  3167  005A72  ECDD  F00D         	call	_ID	;wreg free
  3168                           
  3169                           ;sort.c: 73: }
  3170                           ;sort.c: 74: if(machine_state == Sorting_state){
  3171  005A76  0100               	movlb	0	; () banked
  3172  005A78  05FC               	decf	_machine_state& (0+255),w,b
  3173  005A7A  A4D8               	btfss	status,2,c
  3174  005A7C  0012               	return	
  3175                           
  3176                           ; BSR set to: 0
  3177                           ;sort.c: 75: Distribution();
  3178  005A7E  ECA2  F022         	call	_Distribution	;wreg free
  3179  005A82  0012               	return	
  3180  005A84                     __end_of_sort:
  3181                           	opt stack 0
  3182                           tblptru	equ	0xFF8
  3183                           tblptrh	equ	0xFF7
  3184                           tblptrl	equ	0xFF6
  3185                           tablat	equ	0xFF5
  3186                           postinc0	equ	0xFEE
  3187                           wreg	equ	0xFE8
  3188                           postdec1	equ	0xFE5
  3189                           fsr1l	equ	0xFE1
  3190                           status	equ	0xFD8
  3191                           
  3192 ;; *************** function _Loading *****************
  3193 ;; Defined at:
  3194 ;;		line 79 in file "sort.c"
  3195 ;; Parameters:    Size  Location     Type
  3196 ;;		None
  3197 ;; Auto vars:     Size  Location     Type
  3198 ;;  i               2   62[BANK0 ] int 
  3199 ;;  i               2   60[BANK0 ] int 
  3200 ;;  i               2   58[BANK0 ] int 
  3201 ;;  i               2   56[BANK0 ] int 
  3202 ;;  i               2   54[BANK0 ] int 
  3203 ;;  j               2   66[BANK0 ] int 
  3204 ;;  i               2   64[BANK0 ] int 
  3205 ;;  addr            2   51[BANK0 ] unsigned short 
  3206 ;;  byte1           1   53[BANK0 ] unsigned char 
  3207 ;; Return value:  Size  Location     Type
  3208 ;;                  1    wreg      void 
  3209 ;; Registers used:
  3210 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3211 ;; Tracked objects:
  3212 ;;		On entry : 0/0
  3213 ;;		On exit  : 0/0
  3214 ;;		Unchanged: 0/0
  3215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3217 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3218 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3219 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3220 ;;Total ram usage:       19 bytes
  3221 ;; Hardware stack levels used:    1
  3222 ;; Hardware stack levels required when called:   11
  3223 ;; This function calls:
  3224 ;;		_EEPROM_read
  3225 ;;		_EEPROM_write
  3226 ;;		_delay_ms
  3227 ;;		_getIR
  3228 ;;		_getMAG
  3229 ;;		_initGlobalVars
  3230 ;;		_initServos
  3231 ;;		_initSortTimer
  3232 ;;		_lcdInst
  3233 ;;		_readIR
  3234 ;; This function is called by:
  3235 ;;		_sort
  3236 ;; This function uses a non-reentrant model
  3237 ;;
  3238                           
  3239                           	psect	text2
  3240  00118E                     __ptext2:
  3241                           	opt stack 0
  3242  00118E                     _Loading:
  3243                           	opt stack 18
  3244                           
  3245                           ;sort.c: 80: if(first){
  3246                           
  3247                           ;incstack = 0
  3248  00118E  0101               	movlb	1	; () banked
  3249  001190  513B               	movf	_first& (0+255),w,b
  3250  001192  0101               	movlb	1	; () banked
  3251  001194  113C               	iorwf	(_first+1)& (0+255),w,b
  3252  001196  B4D8               	btfsc	status,2,c
  3253  001198  D066               	goto	l7807
  3254                           
  3255                           ; BSR set to: 1
  3256                           ;sort.c: 81: initGlobalVars();
  3257  00119A  EC48  F024         	call	_initGlobalVars	;wreg free
  3258                           
  3259                           ;sort.c: 82: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3260  00119E  0E01               	movlw	1
  3261  0011A0  ECBB  F02D         	call	_lcdInst
  3262  0011A4  0E68               	movlw	104
  3263  0011A6  0100               	movlb	0	; () banked
  3264  0011A8  6FB1               	movwf	??_Loading& (0+255),b
  3265  0011AA  0EE4               	movlw	228
  3266  0011AC                     u9717:
  3267  0011AC  2EE8               	decfsz	wreg,f,c
  3268  0011AE  D7FE               	bra	u9717
  3269  0011B0  2FB1               	decfsz	??_Loading& (0+255),f,b
  3270  0011B2  D7FC               	bra	u9717
  3271  0011B4  F000               	nop	
  3272                           
  3273                           ;sort.c: 83: initSortTimer();
  3274  0011B6  EC65  F025         	call	_initSortTimer	;wreg free
  3275                           
  3276                           ;sort.c: 84: LATCbits.LATC5 = 1;
  3277  0011BA  8A8B               	bsf	3979,5,c	;volatile
  3278                           
  3279                           ;sort.c: 89: sel = EEPROM_read(0);
  3280  0011BC  0E00               	movlw	0
  3281  0011BE  0100               	movlb	0	; () banked
  3282  0011C0  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3283  0011C2  0E00               	movlw	0
  3284  0011C4  6F80               	movwf	EEPROM_read@address& (0+255),b
  3285  0011C6  EC7E  F02D         	call	_EEPROM_read	;wreg free
  3286  0011CA  0100               	movlb	0	; () banked
  3287  0011CC  6FFD               	movwf	_sel& (0+255),b
  3288                           
  3289                           ; BSR set to: 0
  3290                           ;sort.c: 90: unsigned short addr = 1 + 11 * sel;
  3291  0011CE  0100               	movlb	0	; () banked
  3292  0011D0  51FD               	movf	_sel& (0+255),w,b
  3293  0011D2  0D0B               	mullw	11
  3294  0011D4  0E01               	movlw	1
  3295  0011D6  24F3               	addwf	prodl,w,c
  3296  0011D8  0100               	movlb	0	; () banked
  3297  0011DA  6FB3               	movwf	Loading@addr& (0+255),b
  3298  0011DC  0E00               	movlw	0
  3299  0011DE  20F4               	addwfc	prodh,w,c
  3300  0011E0  0100               	movlb	0	; () banked
  3301  0011E2  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3302                           
  3303                           ; BSR set to: 0
  3304                           ;sort.c: 91: unsigned char byte1 = 0b01111111;
  3305  0011E4  0E7F               	movlw	127
  3306  0011E6  0100               	movlb	0	; () banked
  3307  0011E8  6FB5               	movwf	Loading@byte1& (0+255),b
  3308                           
  3309                           ; BSR set to: 0
  3310                           ;sort.c: 92: EEPROM_write(addr, byte1);
  3311  0011EA  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3312  0011EE  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3313  0011F2  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3314  0011F6  EC2E  F022         	call	_EEPROM_write	;wreg free
  3315                           
  3316                           ;sort.c: 95: LATBbits.LATB2 = 0;
  3317  0011FA  948A               	bcf	3978,2,c	;volatile
  3318                           
  3319                           ;sort.c: 97: for(int i=0; i<46; i++){
  3320  0011FC  0E00               	movlw	0
  3321  0011FE  0100               	movlb	0	; () banked
  3322  001200  6FC1               	movwf	(Loading@i+1)& (0+255),b
  3323  001202  0E00               	movlw	0
  3324  001204  6FC0               	movwf	Loading@i& (0+255),b
  3325                           
  3326                           ; BSR set to: 0
  3327  001206  0100               	movlb	0	; () banked
  3328  001208  BFC1               	btfsc	(Loading@i+1)& (0+255),7,b
  3329  00120A  D008               	goto	l7797
  3330  00120C  0100               	movlb	0	; () banked
  3331  00120E  51C1               	movf	(Loading@i+1)& (0+255),w,b
  3332  001210  E126               	bnz	l785
  3333  001212  0E2E               	movlw	46
  3334  001214  0100               	movlb	0	; () banked
  3335  001216  5DC0               	subwf	Loading@i& (0+255),w,b
  3336  001218  B0D8               	btfsc	status,0,c
  3337  00121A  D021               	goto	l785
  3338  00121C                     l7797:
  3339                           
  3340                           ; BSR set to: 0
  3341                           ;sort.c: 98: LATBbits.LATB2 = !LATBbits.LATB2;
  3342  00121C  B48A               	btfsc	3978,2,c	;volatile
  3343  00121E  D004               	goto	u6370
  3344  001220  0100               	movlb	0	; () banked
  3345  001222  6BB1               	clrf	??_Loading& (0+255),b
  3346  001224  2BB1               	incf	??_Loading& (0+255),f,b
  3347  001226  D002               	goto	u6388
  3348  001228                     u6370:
  3349  001228  0100               	movlb	0	; () banked
  3350  00122A  6BB1               	clrf	??_Loading& (0+255),b
  3351  00122C                     u6388:
  3352  00122C  0100               	movlb	0	; () banked
  3353  00122E  47B1               	rlncf	??_Loading& (0+255),f,b
  3354  001230  47B1               	rlncf	??_Loading& (0+255),f,b
  3355  001232  508A               	movf	3978,w,c	;volatile
  3356  001234  0100               	movlb	0	; () banked
  3357  001236  19B1               	xorwf	??_Loading& (0+255),w,b
  3358  001238  0BFB               	andlw	-5
  3359  00123A  19B1               	xorwf	??_Loading& (0+255),w,b
  3360  00123C  6E8A               	movwf	3978,c	;volatile
  3361                           
  3362                           ; BSR set to: 0
  3363                           ;sort.c: 99: delay_ms(45-i);
  3364  00123E  0100               	movlb	0	; () banked
  3365  001240  51C0               	movf	Loading@i& (0+255),w,b
  3366  001242  0800               	sublw	0
  3367  001244  0F2D               	addlw	45
  3368  001246  ECD1  F02C         	call	_delay_ms
  3369  00124A  0100               	movlb	0	; () banked
  3370  00124C  4BC0               	infsnz	Loading@i& (0+255),f,b
  3371  00124E  2BC1               	incf	(Loading@i+1)& (0+255),f,b
  3372                           
  3373                           ; BSR set to: 0
  3374  001250  0100               	movlb	0	; () banked
  3375  001252  BFC1               	btfsc	(Loading@i+1)& (0+255),7,b
  3376  001254  D7E3               	goto	l7797
  3377  001256  0100               	movlb	0	; () banked
  3378  001258  51C1               	movf	(Loading@i+1)& (0+255),w,b
  3379  00125A  E101               	bnz	u6390
  3380  00125C  D7DA               	goto	L1
  3381  00125E                     u6390:
  3382  00125E                     l785:
  3383                           
  3384                           ; BSR set to: 0
  3385                           ;sort.c: 100: }
  3386                           ;sort.c: 101: LATBbits.LATB2 = 1;
  3387  00125E  848A               	bsf	3978,2,c	;volatile
  3388                           
  3389                           ; BSR set to: 0
  3390                           ;sort.c: 104: initServos();
  3391  001260  EC19  F027         	call	_initServos	;wreg free
  3392                           
  3393                           ;sort.c: 105: }
  3394  001264  0012               	return	
  3395  001266                     l7807:
  3396                           
  3397                           ;sort.c: 106: else{
  3398                           ;sort.c: 109: if(!f_loadingNewCan){
  3399  001266  0100               	movlb	0	; () banked
  3400  001268  51F2               	movf	_f_loadingNewCan& (0+255),w,b
  3401  00126A  0100               	movlb	0	; () banked
  3402  00126C  11F3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3403  00126E  A4D8               	btfss	status,2,c
  3404  001270  D018               	goto	l7823
  3405                           
  3406                           ; BSR set to: 0
  3407                           ;sort.c: 111: getIR();
  3408  001272  EC91  F027         	call	_getIR	;wreg free
  3409                           
  3410                           ;sort.c: 113: if(!f_loadingNewCan){
  3411  001276  0100               	movlb	0	; () banked
  3412  001278  51F2               	movf	_f_loadingNewCan& (0+255),w,b
  3413  00127A  0100               	movlb	0	; () banked
  3414  00127C  11F3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3415  00127E  B4D8               	btfsc	status,2,c
  3416  001280  0012               	return	
  3417                           
  3418                           ; BSR set to: 0
  3419                           ;sort.c: 117: else{
  3420                           ;sort.c: 118: count_total++;
  3421                           
  3422                           ; BSR set to: 0
  3423                           
  3424                           ; BSR set to: 0
  3425                           ;sort.c: 115: }
  3426                           
  3427                           ; BSR set to: 0
  3428                           ;sort.c: 114: return;
  3429  001282  0100               	movlb	0	; () banked
  3430  001284  4BFE               	infsnz	_count_total& (0+255),f,b
  3431  001286  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3432                           
  3433                           ; BSR set to: 0
  3434                           ;sort.c: 119: if(count_total == 12){
  3435  001288  0E0C               	movlw	12
  3436  00128A  0100               	movlb	0	; () banked
  3437  00128C  19FE               	xorwf	_count_total& (0+255),w,b
  3438  00128E  0100               	movlb	0	; () banked
  3439  001290  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3440  001292  A4D8               	btfss	status,2,c
  3441  001294  0012               	return	
  3442                           
  3443                           ; BSR set to: 0
  3444                           ;sort.c: 120: f_lastCan = 1;
  3445  001296  0E00               	movlw	0
  3446  001298  0101               	movlb	1	; () banked
  3447  00129A  6F38               	movwf	(_f_lastCan+1)& (0+255),b
  3448  00129C  0E01               	movlw	1
  3449  00129E  6F37               	movwf	_f_lastCan& (0+255),b
  3450                           
  3451                           ; BSR set to: 1
  3452                           ;sort.c: 121: }
  3453                           ;sort.c: 122: }
  3454                           ;sort.c: 123: }
  3455                           
  3456                           ; BSR set to: 1
  3457  0012A0  0012               	return	
  3458  0012A2                     l7823:
  3459                           
  3460                           ;sort.c: 126: else if(f_ID_receive){
  3461  0012A2  0101               	movlb	1	; () banked
  3462  0012A4  512F               	movf	_f_ID_receive& (0+255),w,b
  3463  0012A6  0101               	movlb	1	; () banked
  3464  0012A8  1130               	iorwf	(_f_ID_receive+1)& (0+255),w,b
  3465  0012AA  B4D8               	btfsc	status,2,c
  3466  0012AC  0012               	return	
  3467                           
  3468                           ; BSR set to: 1
  3469                           ;sort.c: 127: f_most_recent_sort_time = 1;
  3470  0012AE  0E00               	movlw	0
  3471  0012B0  0101               	movlb	1	; () banked
  3472  0012B2  6F3A               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  3473  0012B4  0E01               	movlw	1
  3474  0012B6  6F39               	movwf	_f_most_recent_sort_time& (0+255),b
  3475                           
  3476                           ;sort.c: 128: f_loadingNewCan = 0;
  3477  0012B8  0E00               	movlw	0
  3478  0012BA  0100               	movlb	0	; () banked
  3479  0012BC  6FF3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3480  0012BE  0E00               	movlw	0
  3481  0012C0  6FF2               	movwf	_f_loadingNewCan& (0+255),b
  3482                           
  3483                           ; BSR set to: 0
  3484                           ;sort.c: 129: _delay((unsigned long)((400)*(32000000/4000.0)));
  3485  0012C2  0E11               	movlw	17
  3486  0012C4  0100               	movlb	0	; () banked
  3487  0012C6  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3488  0012C8  0E3C               	movlw	60
  3489  0012CA  0100               	movlb	0	; () banked
  3490  0012CC  6FB1               	movwf	??_Loading& (0+255),b
  3491  0012CE  0ECB               	movlw	203
  3492  0012D0                     u9727:
  3493  0012D0  2EE8               	decfsz	wreg,f,c
  3494  0012D2  D7FE               	bra	u9727
  3495  0012D4  2FB1               	decfsz	??_Loading& (0+255),f,b
  3496  0012D6  D7FC               	bra	u9727
  3497  0012D8  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3498  0012DA  D7FA               	bra	u9727
  3499                           
  3500                           ;sort.c: 130: LATBbits.LATB2 = 0;
  3501  0012DC  948A               	bcf	3978,2,c	;volatile
  3502                           
  3503                           ;sort.c: 134: f_arm_position = 1;
  3504  0012DE  0E00               	movlw	0
  3505  0012E0  0100               	movlb	0	; () banked
  3506  0012E2  6FF1               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3507  0012E4  0E01               	movlw	1
  3508  0012E6  6FF0               	movwf	_f_arm_position& (0+255),b	;volatile
  3509                           
  3510                           ; BSR set to: 0
  3511                           ;sort.c: 136: delay_ms(750);
  3512  0012E8  0EEE               	movlw	238
  3513  0012EA  ECD1  F02C         	call	_delay_ms
  3514                           
  3515                           ;sort.c: 137: getMAG();
  3516  0012EE  EC40  F02B         	call	_getMAG	;wreg free
  3517                           
  3518                           ;sort.c: 138: sensor_outputs[0] = MAG_signal;
  3519  0012F2  C0EA  F0E2         	movff	_MAG_signal,_sensor_outputs
  3520  0012F6  C0EB  F0E3         	movff	_MAG_signal+1,_sensor_outputs+1
  3521                           
  3522                           ;sort.c: 140: if(sensor_outputs[0]){
  3523  0012FA  0100               	movlb	0	; () banked
  3524  0012FC  51E2               	movf	_sensor_outputs& (0+255),w,b
  3525  0012FE  0100               	movlb	0	; () banked
  3526  001300  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3527  001302  B4D8               	btfsc	status,2,c
  3528  001304  D027               	goto	l7853
  3529                           
  3530                           ; BSR set to: 0
  3531                           ;sort.c: 141: for(int i = 0; i<25; i++){
  3532  001306  0E00               	movlw	0
  3533  001308  0100               	movlb	0	; () banked
  3534  00130A  6FB7               	movwf	(Loading@i_1118+1)& (0+255),b
  3535  00130C  0E00               	movlw	0
  3536  00130E  6FB6               	movwf	Loading@i_1118& (0+255),b
  3537  001310                     l7843:
  3538                           
  3539                           ; BSR set to: 0
  3540  001310  0100               	movlb	0	; () banked
  3541  001312  BFB7               	btfsc	(Loading@i_1118+1)& (0+255),7,b
  3542  001314  D008               	goto	l795
  3543  001316  0100               	movlb	0	; () banked
  3544  001318  51B7               	movf	(Loading@i_1118+1)& (0+255),w,b
  3545  00131A  E143               	bnz	l7865
  3546  00131C  0E19               	movlw	25
  3547  00131E  0100               	movlb	0	; () banked
  3548  001320  5DB6               	subwf	Loading@i_1118& (0+255),w,b
  3549  001322  B0D8               	btfsc	status,0,c
  3550  001324  D03E               	goto	l7865
  3551  001326                     l795:
  3552                           
  3553                           ; BSR set to: 0
  3554                           ;sort.c: 142: LATAbits.LATA4 = 1;
  3555  001326  8889               	bsf	3977,4,c	;volatile
  3556                           
  3557                           ; BSR set to: 0
  3558                           ;sort.c: 143: _delay((unsigned long)((7500)*(32000000/4000000.0)));
  3559  001328  0E4E               	movlw	78
  3560  00132A  0100               	movlb	0	; () banked
  3561  00132C  6FB1               	movwf	??_Loading& (0+255),b
  3562  00132E  0EEB               	movlw	235
  3563  001330                     u9737:
  3564  001330  2EE8               	decfsz	wreg,f,c
  3565  001332  D7FE               	bra	u9737
  3566  001334  2FB1               	decfsz	??_Loading& (0+255),f,b
  3567  001336  D7FC               	bra	u9737
  3568                           
  3569                           ;sort.c: 144: LATAbits.LATA4 = 0;
  3570  001338  9889               	bcf	3977,4,c	;volatile
  3571                           
  3572                           ;sort.c: 145: _delay((unsigned long)((2500)*(32000000/4000000.0)));
  3573  00133A  0E1A               	movlw	26
  3574  00133C  0100               	movlb	0	; () banked
  3575  00133E  6FB1               	movwf	??_Loading& (0+255),b
  3576  001340  0EF8               	movlw	248
  3577  001342                     u9747:
  3578  001342  2EE8               	decfsz	wreg,f,c
  3579  001344  D7FE               	bra	u9747
  3580  001346  2FB1               	decfsz	??_Loading& (0+255),f,b
  3581  001348  D7FC               	bra	u9747
  3582  00134A  F000               	nop	
  3583  00134C  0100               	movlb	0	; () banked
  3584  00134E  4BB6               	infsnz	Loading@i_1118& (0+255),f,b
  3585  001350  2BB7               	incf	(Loading@i_1118+1)& (0+255),f,b
  3586  001352  D7DE               	goto	l7843
  3587  001354                     l7853:
  3588                           
  3589                           ; BSR set to: 0
  3590                           ;sort.c: 148: else{
  3591                           ;sort.c: 149: for(int i = 0; i<25; i++){
  3592  001354  0E00               	movlw	0
  3593  001356  0100               	movlb	0	; () banked
  3594  001358  6FB9               	movwf	(Loading@i_1127+1)& (0+255),b
  3595  00135A  0E00               	movlw	0
  3596  00135C  6FB8               	movwf	Loading@i_1127& (0+255),b
  3597  00135E                     l7855:
  3598                           
  3599                           ; BSR set to: 0
  3600  00135E  0100               	movlb	0	; () banked
  3601  001360  BFB9               	btfsc	(Loading@i_1127+1)& (0+255),7,b
  3602  001362  D008               	goto	l798
  3603  001364  0100               	movlb	0	; () banked
  3604  001366  51B9               	movf	(Loading@i_1127+1)& (0+255),w,b
  3605  001368  E11C               	bnz	l7865
  3606  00136A  0E19               	movlw	25
  3607  00136C  0100               	movlb	0	; () banked
  3608  00136E  5DB8               	subwf	Loading@i_1127& (0+255),w,b
  3609  001370  B0D8               	btfsc	status,0,c
  3610  001372  D017               	goto	l7865
  3611  001374                     l798:
  3612                           
  3613                           ; BSR set to: 0
  3614                           ;sort.c: 150: LATAbits.LATA4 = 1;
  3615  001374  8889               	bsf	3977,4,c	;volatile
  3616                           
  3617                           ; BSR set to: 0
  3618                           ;sort.c: 151: _delay((unsigned long)((5800)*(32000000/4000000.0)));
  3619  001376  0E3D               	movlw	61
  3620  001378  0100               	movlb	0	; () banked
  3621  00137A  6FB1               	movwf	??_Loading& (0+255),b
  3622  00137C  0E41               	movlw	65
  3623  00137E                     u9757:
  3624  00137E  2EE8               	decfsz	wreg,f,c
  3625  001380  D7FE               	bra	u9757
  3626  001382  2FB1               	decfsz	??_Loading& (0+255),f,b
  3627  001384  D7FC               	bra	u9757
  3628                           
  3629                           ;sort.c: 152: LATAbits.LATA4 = 0;
  3630  001386  9889               	bcf	3977,4,c	;volatile
  3631                           
  3632                           ;sort.c: 153: _delay((unsigned long)((4200)*(32000000/4000000.0)));
  3633  001388  0E2C               	movlw	44
  3634  00138A  0100               	movlb	0	; () banked
  3635  00138C  6FB1               	movwf	??_Loading& (0+255),b
  3636  00138E  0EA1               	movlw	161
  3637  001390                     u9767:
  3638  001390  2EE8               	decfsz	wreg,f,c
  3639  001392  D7FE               	bra	u9767
  3640  001394  2FB1               	decfsz	??_Loading& (0+255),f,b
  3641  001396  D7FC               	bra	u9767
  3642  001398  D000               	nop2	
  3643  00139A  0100               	movlb	0	; () banked
  3644  00139C  4BB8               	infsnz	Loading@i_1127& (0+255),f,b
  3645  00139E  2BB9               	incf	(Loading@i_1127+1)& (0+255),f,b
  3646  0013A0  D7DE               	goto	l7855
  3647  0013A2                     l7865:
  3648                           
  3649                           ; BSR set to: 0
  3650                           ;sort.c: 154: }
  3651                           ;sort.c: 155: }
  3652                           ;sort.c: 157: _delay((unsigned long)((350)*(32000000/4000.0)));
  3653  0013A2  0E0F               	movlw	15
  3654  0013A4  0100               	movlb	0	; () banked
  3655  0013A6  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3656  0013A8  0E35               	movlw	53
  3657  0013AA  0100               	movlb	0	; () banked
  3658  0013AC  6FB1               	movwf	??_Loading& (0+255),b
  3659  0013AE  0E51               	movlw	81
  3660  0013B0                     u9777:
  3661  0013B0  2EE8               	decfsz	wreg,f,c
  3662  0013B2  D7FE               	bra	u9777
  3663  0013B4  2FB1               	decfsz	??_Loading& (0+255),f,b
  3664  0013B6  D7FC               	bra	u9777
  3665  0013B8  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3666  0013BA  D7FA               	bra	u9777
  3667                           
  3668                           ;sort.c: 159: readIR();
  3669  0013BC  ECDD  F029         	call	_readIR	;wreg free
  3670                           
  3671                           ;sort.c: 160: if(IR_signal){
  3672  0013C0  0100               	movlb	0	; () banked
  3673  0013C2  51E8               	movf	_IR_signal& (0+255),w,b
  3674  0013C4  0100               	movlb	0	; () banked
  3675  0013C6  11E9               	iorwf	(_IR_signal+1)& (0+255),w,b
  3676  0013C8  B4D8               	btfsc	status,2,c
  3677  0013CA  D1D5               	goto	l7993
  3678                           
  3679                           ; BSR set to: 0
  3680                           ;sort.c: 161: _delay((unsigned long)((70)*(32000000/4000.0)));
  3681  0013CC  0E03               	movlw	3
  3682  0013CE  0100               	movlb	0	; () banked
  3683  0013D0  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3684  0013D2  0ED8               	movlw	216
  3685  0013D4  0100               	movlb	0	; () banked
  3686  0013D6  6FB1               	movwf	??_Loading& (0+255),b
  3687  0013D8  0E41               	movlw	65
  3688  0013DA                     u9787:
  3689  0013DA  2EE8               	decfsz	wreg,f,c
  3690  0013DC  D7FE               	bra	u9787
  3691  0013DE  2FB1               	decfsz	??_Loading& (0+255),f,b
  3692  0013E0  D7FC               	bra	u9787
  3693  0013E2  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3694  0013E4  D7FA               	bra	u9787
  3695  0013E6  D000               	nop2	
  3696                           
  3697                           ;sort.c: 162: readIR();
  3698  0013E8  ECDD  F029         	call	_readIR	;wreg free
  3699                           
  3700                           ;sort.c: 163: if(IR_signal){
  3701  0013EC  0100               	movlb	0	; () banked
  3702  0013EE  51E8               	movf	_IR_signal& (0+255),w,b
  3703  0013F0  0100               	movlb	0	; () banked
  3704  0013F2  11E9               	iorwf	(_IR_signal+1)& (0+255),w,b
  3705  0013F4  B4D8               	btfsc	status,2,c
  3706  0013F6  D054               	goto	l7903
  3707                           
  3708                           ; BSR set to: 0
  3709                           ;sort.c: 164: if(sensor_outputs[0]){
  3710  0013F8  0100               	movlb	0	; () banked
  3711  0013FA  51E2               	movf	_sensor_outputs& (0+255),w,b
  3712  0013FC  0100               	movlb	0	; () banked
  3713  0013FE  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3714  001400  B4D8               	btfsc	status,2,c
  3715  001402  D027               	goto	l7891
  3716                           
  3717                           ; BSR set to: 0
  3718                           ;sort.c: 165: for(int i = 0; i<25; i++){
  3719  001404  0E00               	movlw	0
  3720  001406  0100               	movlb	0	; () banked
  3721  001408  6FBB               	movwf	(Loading@i_1129+1)& (0+255),b
  3722  00140A  0E00               	movlw	0
  3723  00140C  6FBA               	movwf	Loading@i_1129& (0+255),b
  3724  00140E                     l7881:
  3725                           
  3726                           ; BSR set to: 0
  3727  00140E  0100               	movlb	0	; () banked
  3728  001410  BFBB               	btfsc	(Loading@i_1129+1)& (0+255),7,b
  3729  001412  D008               	goto	l803
  3730  001414  0100               	movlb	0	; () banked
  3731  001416  51BB               	movf	(Loading@i_1129+1)& (0+255),w,b
  3732  001418  E143               	bnz	l7903
  3733  00141A  0E19               	movlw	25
  3734  00141C  0100               	movlb	0	; () banked
  3735  00141E  5DBA               	subwf	Loading@i_1129& (0+255),w,b
  3736  001420  B0D8               	btfsc	status,0,c
  3737  001422  D03E               	goto	l7903
  3738  001424                     l803:
  3739                           
  3740                           ; BSR set to: 0
  3741                           ;sort.c: 166: LATAbits.LATA4 = 1;
  3742  001424  8889               	bsf	3977,4,c	;volatile
  3743                           
  3744                           ; BSR set to: 0
  3745                           ;sort.c: 167: _delay((unsigned long)((7500)*(32000000/4000000.0)));
  3746  001426  0E4E               	movlw	78
  3747  001428  0100               	movlb	0	; () banked
  3748  00142A  6FB1               	movwf	??_Loading& (0+255),b
  3749  00142C  0EEB               	movlw	235
  3750  00142E                     u9797:
  3751  00142E  2EE8               	decfsz	wreg,f,c
  3752  001430  D7FE               	bra	u9797
  3753  001432  2FB1               	decfsz	??_Loading& (0+255),f,b
  3754  001434  D7FC               	bra	u9797
  3755                           
  3756                           ;sort.c: 168: LATAbits.LATA4 = 0;
  3757  001436  9889               	bcf	3977,4,c	;volatile
  3758                           
  3759                           ;sort.c: 169: _delay((unsigned long)((2500)*(32000000/4000000.0)));
  3760  001438  0E1A               	movlw	26
  3761  00143A  0100               	movlb	0	; () banked
  3762  00143C  6FB1               	movwf	??_Loading& (0+255),b
  3763  00143E  0EF8               	movlw	248
  3764  001440                     u9807:
  3765  001440  2EE8               	decfsz	wreg,f,c
  3766  001442  D7FE               	bra	u9807
  3767  001444  2FB1               	decfsz	??_Loading& (0+255),f,b
  3768  001446  D7FC               	bra	u9807
  3769  001448  F000               	nop	
  3770  00144A  0100               	movlb	0	; () banked
  3771  00144C  4BBA               	infsnz	Loading@i_1129& (0+255),f,b
  3772  00144E  2BBB               	incf	(Loading@i_1129+1)& (0+255),f,b
  3773  001450  D7DE               	goto	l7881
  3774  001452                     l7891:
  3775                           
  3776                           ; BSR set to: 0
  3777                           ;sort.c: 172: else{
  3778                           ;sort.c: 173: for(int i = 0; i<25; i++){
  3779  001452  0E00               	movlw	0
  3780  001454  0100               	movlb	0	; () banked
  3781  001456  6FBD               	movwf	(Loading@i_1130+1)& (0+255),b
  3782  001458  0E00               	movlw	0
  3783  00145A  6FBC               	movwf	Loading@i_1130& (0+255),b
  3784  00145C                     l7893:
  3785                           
  3786                           ; BSR set to: 0
  3787  00145C  0100               	movlb	0	; () banked
  3788  00145E  BFBD               	btfsc	(Loading@i_1130+1)& (0+255),7,b
  3789  001460  D008               	goto	l806
  3790  001462  0100               	movlb	0	; () banked
  3791  001464  51BD               	movf	(Loading@i_1130+1)& (0+255),w,b
  3792  001466  E11C               	bnz	l7903
  3793  001468  0E19               	movlw	25
  3794  00146A  0100               	movlb	0	; () banked
  3795  00146C  5DBC               	subwf	Loading@i_1130& (0+255),w,b
  3796  00146E  B0D8               	btfsc	status,0,c
  3797  001470  D017               	goto	l7903
  3798  001472                     l806:
  3799                           
  3800                           ; BSR set to: 0
  3801                           ;sort.c: 174: LATAbits.LATA4 = 1;
  3802  001472  8889               	bsf	3977,4,c	;volatile
  3803                           
  3804                           ; BSR set to: 0
  3805                           ;sort.c: 175: _delay((unsigned long)((5800)*(32000000/4000000.0)));
  3806  001474  0E3D               	movlw	61
  3807  001476  0100               	movlb	0	; () banked
  3808  001478  6FB1               	movwf	??_Loading& (0+255),b
  3809  00147A  0E41               	movlw	65
  3810  00147C                     u9817:
  3811  00147C  2EE8               	decfsz	wreg,f,c
  3812  00147E  D7FE               	bra	u9817
  3813  001480  2FB1               	decfsz	??_Loading& (0+255),f,b
  3814  001482  D7FC               	bra	u9817
  3815                           
  3816                           ;sort.c: 176: LATAbits.LATA4 = 0;
  3817  001484  9889               	bcf	3977,4,c	;volatile
  3818                           
  3819                           ;sort.c: 177: _delay((unsigned long)((4200)*(32000000/4000000.0)));
  3820  001486  0E2C               	movlw	44
  3821  001488  0100               	movlb	0	; () banked
  3822  00148A  6FB1               	movwf	??_Loading& (0+255),b
  3823  00148C  0EA1               	movlw	161
  3824  00148E                     u9827:
  3825  00148E  2EE8               	decfsz	wreg,f,c
  3826  001490  D7FE               	bra	u9827
  3827  001492  2FB1               	decfsz	??_Loading& (0+255),f,b
  3828  001494  D7FC               	bra	u9827
  3829  001496  D000               	nop2	
  3830  001498  0100               	movlb	0	; () banked
  3831  00149A  4BBC               	infsnz	Loading@i_1130& (0+255),f,b
  3832  00149C  2BBD               	incf	(Loading@i_1130+1)& (0+255),f,b
  3833  00149E  D7DE               	goto	l7893
  3834  0014A0                     l7903:
  3835                           
  3836                           ; BSR set to: 0
  3837                           ;sort.c: 178: }
  3838                           ;sort.c: 179: }
  3839                           ;sort.c: 180: }
  3840                           ;sort.c: 182: _delay((unsigned long)((350)*(32000000/4000.0)));
  3841  0014A0  0E0F               	movlw	15
  3842  0014A2  0100               	movlb	0	; () banked
  3843  0014A4  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3844  0014A6  0E35               	movlw	53
  3845  0014A8  0100               	movlb	0	; () banked
  3846  0014AA  6FB1               	movwf	??_Loading& (0+255),b
  3847  0014AC  0E51               	movlw	81
  3848  0014AE                     u9837:
  3849  0014AE  2EE8               	decfsz	wreg,f,c
  3850  0014B0  D7FE               	bra	u9837
  3851  0014B2  2FB1               	decfsz	??_Loading& (0+255),f,b
  3852  0014B4  D7FC               	bra	u9837
  3853  0014B6  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3854  0014B8  D7FA               	bra	u9837
  3855                           
  3856                           ;sort.c: 184: int j = 0;
  3857  0014BA  0E00               	movlw	0
  3858  0014BC  0100               	movlb	0	; () banked
  3859  0014BE  6FC3               	movwf	(Loading@j+1)& (0+255),b
  3860  0014C0  0E00               	movlw	0
  3861  0014C2  6FC2               	movwf	Loading@j& (0+255),b
  3862                           
  3863                           ;sort.c: 185: while(IR_signal){
  3864  0014C4  D151               	goto	l7991
  3865  0014C6                     l7907:
  3866                           
  3867                           ; BSR set to: 0
  3868                           ;sort.c: 186: readIR();
  3869  0014C6  ECDD  F029         	call	_readIR	;wreg free
  3870                           
  3871                           ;sort.c: 187: if(j == 3 || j == 4){
  3872  0014CA  0E03               	movlw	3
  3873  0014CC  0100               	movlb	0	; () banked
  3874  0014CE  19C2               	xorwf	Loading@j& (0+255),w,b
  3875  0014D0  0100               	movlb	0	; () banked
  3876  0014D2  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3877  0014D4  B4D8               	btfsc	status,2,c
  3878  0014D6  D007               	goto	l7913
  3879                           
  3880                           ; BSR set to: 0
  3881  0014D8  0E04               	movlw	4
  3882  0014DA  0100               	movlb	0	; () banked
  3883  0014DC  19C2               	xorwf	Loading@j& (0+255),w,b
  3884  0014DE  0100               	movlb	0	; () banked
  3885  0014E0  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3886  0014E2  A4D8               	btfss	status,2,c
  3887  0014E4  D005               	goto	l7915
  3888  0014E6                     l7913:
  3889                           
  3890                           ; BSR set to: 0
  3891                           ;sort.c: 188: f_arm_position = 0;
  3892  0014E6  0E00               	movlw	0
  3893  0014E8  0100               	movlb	0	; () banked
  3894  0014EA  6FF1               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3895  0014EC  0E00               	movlw	0
  3896  0014EE  D022               	goto	L2
  3897  0014F0                     l7915:
  3898                           
  3899                           ; BSR set to: 0
  3900                           ;sort.c: 190: else if(j == 5 || j == 6){
  3901  0014F0  0E05               	movlw	5
  3902  0014F2  0100               	movlb	0	; () banked
  3903  0014F4  19C2               	xorwf	Loading@j& (0+255),w,b
  3904  0014F6  0100               	movlb	0	; () banked
  3905  0014F8  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3906  0014FA  B4D8               	btfsc	status,2,c
  3907  0014FC  D007               	goto	l816
  3908                           
  3909                           ; BSR set to: 0
  3910  0014FE  0E06               	movlw	6
  3911  001500  0100               	movlb	0	; () banked
  3912  001502  19C2               	xorwf	Loading@j& (0+255),w,b
  3913  001504  0100               	movlb	0	; () banked
  3914  001506  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3915  001508  A4D8               	btfss	status,2,c
  3916  00150A  D002               	goto	l7919
  3917  00150C                     l816:
  3918                           
  3919                           ; BSR set to: 0
  3920                           ;sort.c: 191: LATBbits.LATB2 = 1;
  3921  00150C  848A               	bsf	3978,2,c	;volatile
  3922                           
  3923                           ;sort.c: 192: }
  3924  00150E  D034               	goto	l813
  3925  001510                     l7919:
  3926                           
  3927                           ; BSR set to: 0
  3928                           ;sort.c: 193: else if(j == 7 || j == 8){
  3929  001510  0E07               	movlw	7
  3930  001512  0100               	movlb	0	; () banked
  3931  001514  19C2               	xorwf	Loading@j& (0+255),w,b
  3932  001516  0100               	movlb	0	; () banked
  3933  001518  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3934  00151A  B4D8               	btfsc	status,2,c
  3935  00151C  D007               	goto	l7923
  3936                           
  3937                           ; BSR set to: 0
  3938  00151E  0E08               	movlw	8
  3939  001520  0100               	movlb	0	; () banked
  3940  001522  19C2               	xorwf	Loading@j& (0+255),w,b
  3941  001524  0100               	movlb	0	; () banked
  3942  001526  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3943  001528  A4D8               	btfss	status,2,c
  3944  00152A  D006               	goto	l818
  3945  00152C                     l7923:
  3946                           
  3947                           ; BSR set to: 0
  3948                           ;sort.c: 194: f_arm_position = 1;
  3949  00152C  0E00               	movlw	0
  3950  00152E  0100               	movlb	0	; () banked
  3951  001530  6FF1               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3952  001532  0E01               	movlw	1
  3953  001534                     L2:
  3954  001534  6FF0               	movwf	_f_arm_position& (0+255),b	;volatile
  3955                           
  3956                           ;sort.c: 195: }
  3957  001536  D020               	goto	l813
  3958  001538                     l818:
  3959                           
  3960                           ; BSR set to: 0
  3961                           ;sort.c: 196: else if(j % 2 == 0){
  3962  001538  0100               	movlb	0	; () banked
  3963  00153A  B1C2               	btfsc	Loading@j& (0+255),0,b
  3964  00153C  D01D               	goto	l813
  3965                           
  3966                           ; BSR set to: 0
  3967                           ;sort.c: 197: LATBbits.LATB2 = !LATBbits.LATB2;
  3968  00153E  B48A               	btfsc	3978,2,c	;volatile
  3969  001540  D004               	goto	u6630
  3970  001542  0100               	movlb	0	; () banked
  3971  001544  6BB1               	clrf	??_Loading& (0+255),b
  3972  001546  2BB1               	incf	??_Loading& (0+255),f,b
  3973  001548  D002               	goto	u6648
  3974  00154A                     u6630:
  3975  00154A  0100               	movlb	0	; () banked
  3976  00154C  6BB1               	clrf	??_Loading& (0+255),b
  3977  00154E                     u6648:
  3978  00154E  0100               	movlb	0	; () banked
  3979  001550  47B1               	rlncf	??_Loading& (0+255),f,b
  3980  001552  47B1               	rlncf	??_Loading& (0+255),f,b
  3981  001554  508A               	movf	3978,w,c	;volatile
  3982  001556  0100               	movlb	0	; () banked
  3983  001558  19B1               	xorwf	??_Loading& (0+255),w,b
  3984  00155A  0BFB               	andlw	-5
  3985  00155C  19B1               	xorwf	??_Loading& (0+255),w,b
  3986  00155E  6E8A               	movwf	3978,c	;volatile
  3987                           
  3988                           ;sort.c: 198: f_arm_position = !f_arm_position;
  3989  001560  0100               	movlb	0	; () banked
  3990  001562  51F0               	movf	_f_arm_position& (0+255),w,b	;volatile
  3991  001564  0100               	movlb	0	; () banked
  3992  001566  11F1               	iorwf	(_f_arm_position+1)& (0+255),w,b	;volatile
  3993  001568  A4D8               	btfss	status,2,c
  3994  00156A  D002               	goto	u6650
  3995  00156C  0E01               	movlw	1
  3996  00156E  D001               	goto	u6660
  3997  001570                     u6650:
  3998  001570  0E00               	movlw	0
  3999  001572                     u6660:
  4000  001572  0100               	movlb	0	; () banked
  4001  001574  6FF0               	movwf	_f_arm_position& (0+255),b	;volatile
  4002  001576  6BF1               	clrf	(_f_arm_position+1)& (0+255),b	;volatile
  4003  001578                     l813:
  4004                           
  4005                           ; BSR set to: 0
  4006                           ;sort.c: 199: }
  4007                           ;sort.c: 202: if(IR_signal){
  4008  001578  0100               	movlb	0	; () banked
  4009  00157A  51E8               	movf	_IR_signal& (0+255),w,b
  4010  00157C  0100               	movlb	0	; () banked
  4011  00157E  11E9               	iorwf	(_IR_signal+1)& (0+255),w,b
  4012  001580  B4D8               	btfsc	status,2,c
  4013  001582  D0D6               	goto	l7979
  4014                           
  4015                           ; BSR set to: 0
  4016                           ;sort.c: 203: _delay((unsigned long)((350)*(32000000/4000.0)));
  4017  001584  0E0F               	movlw	15
  4018  001586  0100               	movlb	0	; () banked
  4019  001588  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4020  00158A  0E35               	movlw	53
  4021  00158C  0100               	movlb	0	; () banked
  4022  00158E  6FB1               	movwf	??_Loading& (0+255),b
  4023  001590  0E51               	movlw	81
  4024  001592                     u9847:
  4025  001592  2EE8               	decfsz	wreg,f,c
  4026  001594  D7FE               	bra	u9847
  4027  001596  2FB1               	decfsz	??_Loading& (0+255),f,b
  4028  001598  D7FC               	bra	u9847
  4029  00159A  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4030  00159C  D7FA               	bra	u9847
  4031                           
  4032                           ;sort.c: 204: readIR();
  4033  00159E  ECDD  F029         	call	_readIR	;wreg free
  4034                           
  4035                           ;sort.c: 205: if(IR_signal){
  4036  0015A2  0100               	movlb	0	; () banked
  4037  0015A4  51E8               	movf	_IR_signal& (0+255),w,b
  4038  0015A6  0100               	movlb	0	; () banked
  4039  0015A8  11E9               	iorwf	(_IR_signal+1)& (0+255),w,b
  4040  0015AA  B4D8               	btfsc	status,2,c
  4041  0015AC  D0BD               	goto	l824
  4042                           
  4043                           ; BSR set to: 0
  4044                           ;sort.c: 206: if(sensor_outputs[0]){
  4045  0015AE  0100               	movlb	0	; () banked
  4046  0015B0  51E2               	movf	_sensor_outputs& (0+255),w,b
  4047  0015B2  0100               	movlb	0	; () banked
  4048  0015B4  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  4049  0015B6  B4D8               	btfsc	status,2,c
  4050  0015B8  D011               	goto	l7941
  4051                           
  4052                           ; BSR set to: 0
  4053                           ;sort.c: 207: LATAbits.LATA4 = 1;
  4054  0015BA  8889               	bsf	3977,4,c	;volatile
  4055                           
  4056                           ; BSR set to: 0
  4057                           ;sort.c: 208: _delay((unsigned long)((250)*(32000000/4000.0)));
  4058  0015BC  0E0B               	movlw	11
  4059  0015BE  0100               	movlb	0	; () banked
  4060  0015C0  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4061  0015C2  0E26               	movlw	38
  4062  0015C4  0100               	movlb	0	; () banked
  4063  0015C6  6FB1               	movwf	??_Loading& (0+255),b
  4064  0015C8  0E5D               	movlw	93
  4065  0015CA                     u9857:
  4066  0015CA  2EE8               	decfsz	wreg,f,c
  4067  0015CC  D7FE               	bra	u9857
  4068  0015CE  2FB1               	decfsz	??_Loading& (0+255),f,b
  4069  0015D0  D7FC               	bra	u9857
  4070  0015D2  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4071  0015D4  D7FA               	bra	u9857
  4072  0015D6  D000               	nop2	
  4073                           
  4074                           ;sort.c: 209: LATAbits.LATA4 = 0;
  4075  0015D8  9889               	bcf	3977,4,c	;volatile
  4076                           
  4077                           ;sort.c: 210: }
  4078  0015DA  D0A6               	goto	l824
  4079  0015DC                     l7941:
  4080                           
  4081                           ;sort.c: 211: else{
  4082                           ;sort.c: 212: for(int i = 0; i<25; i++){
  4083  0015DC  0E00               	movlw	0
  4084  0015DE  0100               	movlb	0	; () banked
  4085  0015E0  6FBF               	movwf	(Loading@i_1132+1)& (0+255),b
  4086  0015E2  0E00               	movlw	0
  4087  0015E4  6FBE               	movwf	Loading@i_1132& (0+255),b
  4088                           
  4089                           ; BSR set to: 0
  4090  0015E6  0100               	movlb	0	; () banked
  4091  0015E8  BFBF               	btfsc	(Loading@i_1132+1)& (0+255),7,b
  4092  0015EA  D079               	goto	l7971
  4093  0015EC  0100               	movlb	0	; () banked
  4094  0015EE  51BF               	movf	(Loading@i_1132+1)& (0+255),w,b
  4095  0015F0  E106               	bnz	u6700
  4096  0015F2  0E19               	movlw	25
  4097  0015F4  0100               	movlb	0	; () banked
  4098  0015F6  5DBE               	subwf	Loading@i_1132& (0+255),w,b
  4099  0015F8  B0D8               	btfsc	status,0,c
  4100  0015FA  D096               	goto	l824
  4101  0015FC  D070               	goto	l7971
  4102  0015FE                     u6700:
  4103                           
  4104                           ; BSR set to: 0
  4105  0015FE  D094               	goto	l824
  4106  001600                     l830:
  4107                           
  4108                           ; BSR set to: 0
  4109                           ;sort.c: 215: LATAbits.LATA4 = 1;
  4110  001600  8889               	bsf	3977,4,c	;volatile
  4111                           
  4112                           ; BSR set to: 0
  4113                           ;sort.c: 216: _delay((unsigned long)((7500)*(32000000/4000000.0)));
  4114  001602  0E4E               	movlw	78
  4115  001604  0100               	movlb	0	; () banked
  4116  001606  6FB1               	movwf	??_Loading& (0+255),b
  4117  001608  0EEB               	movlw	235
  4118  00160A                     u9867:
  4119  00160A  2EE8               	decfsz	wreg,f,c
  4120  00160C  D7FE               	bra	u9867
  4121  00160E  2FB1               	decfsz	??_Loading& (0+255),f,b
  4122  001610  D7FC               	bra	u9867
  4123                           
  4124                           ;sort.c: 217: LATAbits.LATA4 = 0;
  4125  001612  9889               	bcf	3977,4,c	;volatile
  4126                           
  4127                           ;sort.c: 218: _delay((unsigned long)((2500)*(32000000/4000000.0)));
  4128  001614  0E1A               	movlw	26
  4129  001616  0100               	movlb	0	; () banked
  4130  001618  6FB1               	movwf	??_Loading& (0+255),b
  4131  00161A  0EF8               	movlw	248
  4132  00161C                     u9877:
  4133  00161C  2EE8               	decfsz	wreg,f,c
  4134  00161E  D7FE               	bra	u9877
  4135  001620  2FB1               	decfsz	??_Loading& (0+255),f,b
  4136  001622  D7FC               	bra	u9877
  4137  001624  D05A               	goto	L6
  4138  001626                     l832:
  4139                           
  4140                           ; BSR set to: 0
  4141                           ;sort.c: 221: LATAbits.LATA4 = 1;
  4142  001626  8889               	bsf	3977,4,c	;volatile
  4143                           
  4144                           ; BSR set to: 0
  4145                           ;sort.c: 222: _delay((unsigned long)((8000)*(32000000/4000000.0)));
  4146  001628  0E54               	movlw	84
  4147  00162A  0100               	movlb	0	; () banked
  4148  00162C  6FB1               	movwf	??_Loading& (0+255),b
  4149  00162E  0E1C               	movlw	28
  4150  001630                     u9887:
  4151  001630  2EE8               	decfsz	wreg,f,c
  4152  001632  D7FE               	bra	u9887
  4153  001634  2FB1               	decfsz	??_Loading& (0+255),f,b
  4154  001636  D7FC               	bra	u9887
  4155  001638  F000               	nop	
  4156                           
  4157                           ;sort.c: 223: LATAbits.LATA4 = 0;
  4158  00163A  9889               	bcf	3977,4,c	;volatile
  4159                           
  4160                           ;sort.c: 224: _delay((unsigned long)((2000)*(32000000/4000000.0)));
  4161  00163C  0E15               	movlw	21
  4162  00163E  0100               	movlb	0	; () banked
  4163  001640  6FB1               	movwf	??_Loading& (0+255),b
  4164  001642  0EC6               	movlw	198
  4165  001644                     u9897:
  4166  001644  2EE8               	decfsz	wreg,f,c
  4167  001646  D7FE               	bra	u9897
  4168  001648  2FB1               	decfsz	??_Loading& (0+255),f,b
  4169  00164A  D7FC               	bra	u9897
  4170  00164C  D046               	goto	L6
  4171  00164E                     l833:
  4172                           
  4173                           ; BSR set to: 0
  4174                           ;sort.c: 227: LATAbits.LATA4 = 1;
  4175  00164E  8889               	bsf	3977,4,c	;volatile
  4176                           
  4177                           ; BSR set to: 0
  4178                           ;sort.c: 228: _delay((unsigned long)((8500)*(32000000/4000000.0)));
  4179  001650  0E59               	movlw	89
  4180  001652  0100               	movlb	0	; () banked
  4181  001654  6FB1               	movwf	??_Loading& (0+255),b
  4182  001656  0E4E               	movlw	78
  4183  001658                     u9907:
  4184  001658  2EE8               	decfsz	wreg,f,c
  4185  00165A  D7FE               	bra	u9907
  4186  00165C  2FB1               	decfsz	??_Loading& (0+255),f,b
  4187  00165E  D7FC               	bra	u9907
  4188  001660  F000               	nop	
  4189                           
  4190                           ;sort.c: 229: LATAbits.LATA4 = 0;
  4191  001662  9889               	bcf	3977,4,c	;volatile
  4192                           
  4193                           ;sort.c: 230: _delay((unsigned long)((1500)*(32000000/4000000.0)));
  4194  001664  0E10               	movlw	16
  4195  001666  0100               	movlb	0	; () banked
  4196  001668  6FB1               	movwf	??_Loading& (0+255),b
  4197  00166A  0E94               	movlw	148
  4198  00166C                     u9917:
  4199  00166C  2EE8               	decfsz	wreg,f,c
  4200  00166E  D7FE               	bra	u9917
  4201  001670  2FB1               	decfsz	??_Loading& (0+255),f,b
  4202  001672  D7FC               	bra	u9917
  4203  001674  D032               	goto	L6
  4204  001676                     l834:
  4205                           
  4206                           ; BSR set to: 0
  4207                           ;sort.c: 233: LATAbits.LATA4 = 1;
  4208  001676  8889               	bsf	3977,4,c	;volatile
  4209                           
  4210                           ; BSR set to: 0
  4211                           ;sort.c: 234: _delay((unsigned long)((9000)*(32000000/4000000.0)));
  4212  001678  0E5E               	movlw	94
  4213  00167A  0100               	movlb	0	; () banked
  4214  00167C  6FB1               	movwf	??_Loading& (0+255),b
  4215  00167E  0E80               	movlw	128
  4216  001680                     u9927:
  4217  001680  2EE8               	decfsz	wreg,f,c
  4218  001682  D7FE               	bra	u9927
  4219  001684  2FB1               	decfsz	??_Loading& (0+255),f,b
  4220  001686  D7FC               	bra	u9927
  4221  001688  F000               	nop	
  4222                           
  4223                           ;sort.c: 235: LATAbits.LATA4 = 0;
  4224  00168A  9889               	bcf	3977,4,c	;volatile
  4225                           
  4226                           ;sort.c: 236: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  4227  00168C  0E0B               	movlw	11
  4228  00168E  0100               	movlb	0	; () banked
  4229  001690  6FB1               	movwf	??_Loading& (0+255),b
  4230  001692  0E62               	movlw	98
  4231  001694                     u9937:
  4232  001694  2EE8               	decfsz	wreg,f,c
  4233  001696  D7FE               	bra	u9937
  4234  001698  2FB1               	decfsz	??_Loading& (0+255),f,b
  4235  00169A  D7FC               	bra	u9937
  4236  00169C  D01E               	goto	L6
  4237  00169E                     l835:
  4238                           
  4239                           ; BSR set to: 0
  4240                           ;sort.c: 239: LATAbits.LATA4 = 1;
  4241  00169E  8889               	bsf	3977,4,c	;volatile
  4242                           
  4243                           ; BSR set to: 0
  4244                           ;sort.c: 240: _delay((unsigned long)((9500)*(32000000/4000000.0)));
  4245  0016A0  0E63               	movlw	99
  4246  0016A2  0100               	movlb	0	; () banked
  4247  0016A4  6FB1               	movwf	??_Loading& (0+255),b
  4248  0016A6  0EB2               	movlw	178
  4249  0016A8                     u9947:
  4250  0016A8  2EE8               	decfsz	wreg,f,c
  4251  0016AA  D7FE               	bra	u9947
  4252  0016AC  2FB1               	decfsz	??_Loading& (0+255),f,b
  4253  0016AE  D7FC               	bra	u9947
  4254  0016B0  F000               	nop	
  4255                           
  4256                           ;sort.c: 241: LATAbits.LATA4 = 0;
  4257  0016B2  9889               	bcf	3977,4,c	;volatile
  4258                           
  4259                           ;sort.c: 242: _delay((unsigned long)((5000)*(32000000/4000000.0)));
  4260  0016B4  0E34               	movlw	52
  4261  0016B6  0100               	movlb	0	; () banked
  4262  0016B8  6FB1               	movwf	??_Loading& (0+255),b
  4263  0016BA  0EF1               	movlw	241
  4264  0016BC                     u9957:
  4265  0016BC  2EE8               	decfsz	wreg,f,c
  4266  0016BE  D7FE               	bra	u9957
  4267  0016C0  2FB1               	decfsz	??_Loading& (0+255),f,b
  4268  0016C2  D7FC               	bra	u9957
  4269  0016C4  D000               	nop2	
  4270                           
  4271                           ;sort.c: 243: break;
  4272  0016C6  D026               	goto	l7973
  4273  0016C8                     l836:
  4274                           
  4275                           ; BSR set to: 0
  4276                           ;sort.c: 245: LATAbits.LATA4 = 1;
  4277  0016C8  8889               	bsf	3977,4,c	;volatile
  4278                           
  4279                           ; BSR set to: 0
  4280                           ;sort.c: 246: _delay((unsigned long)((10)*(32000000/4000.0)));
  4281  0016CA  0E68               	movlw	104
  4282  0016CC  0100               	movlb	0	; () banked
  4283  0016CE  6FB1               	movwf	??_Loading& (0+255),b
  4284  0016D0  0EE4               	movlw	228
  4285  0016D2                     u9967:
  4286  0016D2  2EE8               	decfsz	wreg,f,c
  4287  0016D4  D7FE               	bra	u9967
  4288  0016D6  2FB1               	decfsz	??_Loading& (0+255),f,b
  4289  0016D8  D7FC               	bra	u9967
  4290  0016DA                     L6:
  4291  0016DA  F000               	nop	
  4292                           
  4293                           ;sort.c: 248: }
  4294                           
  4295                           ;sort.c: 247: break;
  4296  0016DC  D01B               	goto	l7973
  4297  0016DE                     l7971:
  4298  0016DE  C0C2  F0B1         	movff	Loading@j,??_Loading
  4299  0016E2  C0C3  F0B2         	movff	Loading@j+1,??_Loading+1
  4300                           
  4301                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4302                           ; Switch size 1, requested type "space"
  4303                           ; Number of cases is 1, Range of values is 0 to 0
  4304                           ; switch strategies available:
  4305                           ; Name         Instructions Cycles
  4306                           ; simple_byte            4     3 (average)
  4307                           ;	Chosen strategy is simple_byte
  4308  0016E6  0100               	movlb	0	; () banked
  4309  0016E8  51B2               	movf	(??_Loading+1)& (0+255),w,b
  4310  0016EA  0A00               	xorlw	0	; case 0
  4311  0016EC  A4D8               	btfss	status,2,c
  4312  0016EE  D7EC               	goto	l836
  4313                           
  4314                           ; BSR set to: 0
  4315                           ; Switch size 1, requested type "space"
  4316                           ; Number of cases is 5, Range of values is 0 to 4
  4317                           ; switch strategies available:
  4318                           ; Name         Instructions Cycles
  4319                           ; simple_byte           16     9 (average)
  4320                           ;	Chosen strategy is simple_byte
  4321  0016F0  0100               	movlb	0	; () banked
  4322  0016F2  51B1               	movf	??_Loading& (0+255),w,b
  4323  0016F4  0A00               	xorlw	0	; case 0
  4324  0016F6  B4D8               	btfsc	status,2,c
  4325  0016F8  D783               	goto	l830
  4326  0016FA  0A01               	xorlw	1	; case 1
  4327  0016FC  B4D8               	btfsc	status,2,c
  4328  0016FE  D793               	goto	l832
  4329  001700  0A03               	xorlw	3	; case 2
  4330  001702  B4D8               	btfsc	status,2,c
  4331  001704  D7A4               	goto	l833
  4332  001706  0A01               	xorlw	1	; case 3
  4333  001708  B4D8               	btfsc	status,2,c
  4334  00170A  D7B5               	goto	l834
  4335  00170C  0A07               	xorlw	7	; case 4
  4336  00170E  B4D8               	btfsc	status,2,c
  4337  001710  D7C6               	goto	l835
  4338  001712  D7DA               	goto	l836
  4339  001714                     l7973:
  4340  001714  0100               	movlb	0	; () banked
  4341  001716  4BBE               	infsnz	Loading@i_1132& (0+255),f,b
  4342  001718  2BBF               	incf	(Loading@i_1132+1)& (0+255),f,b
  4343                           
  4344                           ; BSR set to: 0
  4345  00171A  0100               	movlb	0	; () banked
  4346  00171C  BFBF               	btfsc	(Loading@i_1132+1)& (0+255),7,b
  4347  00171E  D7DF               	goto	l7971
  4348  001720  0100               	movlb	0	; () banked
  4349  001722  51BF               	movf	(Loading@i_1132+1)& (0+255),w,b
  4350  001724  E101               	bnz	l824
  4351  001726  D765               	goto	L7
  4352  001728                     l824:
  4353                           
  4354                           ;sort.c: 249: }
  4355                           ;sort.c: 250: }
  4356                           ;sort.c: 251: }
  4357                           ;sort.c: 252: LATAbits.LATA4 = 0;
  4358  001728  9889               	bcf	3977,4,c	;volatile
  4359                           
  4360                           ;sort.c: 253: j++;
  4361  00172A  0100               	movlb	0	; () banked
  4362  00172C  4BC2               	infsnz	Loading@j& (0+255),f,b
  4363  00172E  2BC3               	incf	(Loading@j+1)& (0+255),f,b
  4364  001730                     l7979:
  4365                           
  4366                           ; BSR set to: 0
  4367                           ;sort.c: 254: }
  4368                           ;sort.c: 256: if(!IR_signal){
  4369  001730  0100               	movlb	0	; () banked
  4370  001732  51E8               	movf	_IR_signal& (0+255),w,b
  4371  001734  0100               	movlb	0	; () banked
  4372  001736  11E9               	iorwf	(_IR_signal+1)& (0+255),w,b
  4373  001738  A4D8               	btfss	status,2,c
  4374  00173A  D016               	goto	l7991
  4375                           
  4376                           ; BSR set to: 0
  4377                           ;sort.c: 257: _delay((unsigned long)((500)*(32000000/4000.0)));
  4378  00173C  0E15               	movlw	21
  4379  00173E  0100               	movlb	0	; () banked
  4380  001740  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4381  001742  0E4B               	movlw	75
  4382  001744  0100               	movlb	0	; () banked
  4383  001746  6FB1               	movwf	??_Loading& (0+255),b
  4384  001748  0EBE               	movlw	190
  4385  00174A                     u9977:
  4386  00174A  2EE8               	decfsz	wreg,f,c
  4387  00174C  D7FE               	bra	u9977
  4388  00174E  2FB1               	decfsz	??_Loading& (0+255),f,b
  4389  001750  D7FC               	bra	u9977
  4390  001752  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4391  001754  D7FA               	bra	u9977
  4392  001756  F000               	nop	
  4393                           
  4394                           ;sort.c: 258: readIR();
  4395  001758  ECDD  F029         	call	_readIR	;wreg free
  4396                           
  4397                           ;sort.c: 259: if(IR_signal){
  4398  00175C  0100               	movlb	0	; () banked
  4399  00175E  51E8               	movf	_IR_signal& (0+255),w,b
  4400  001760  0100               	movlb	0	; () banked
  4401  001762  11E9               	iorwf	(_IR_signal+1)& (0+255),w,b
  4402  001764  B4D8               	btfsc	status,2,c
  4403  001766  D006               	goto	l840
  4404  001768                     l7991:
  4405                           
  4406                           ; BSR set to: 0
  4407  001768  0100               	movlb	0	; () banked
  4408  00176A  51E8               	movf	_IR_signal& (0+255),w,b
  4409  00176C  0100               	movlb	0	; () banked
  4410  00176E  11E9               	iorwf	(_IR_signal+1)& (0+255),w,b
  4411  001770  A4D8               	btfss	status,2,c
  4412  001772  D6A9               	goto	l7907
  4413  001774                     l840:
  4414                           
  4415                           ; BSR set to: 0
  4416                           ;sort.c: 264: }
  4417                           ;sort.c: 265: }
  4418                           ;sort.c: 266: }
  4419                           ;sort.c: 267: LATBbits.LATB2 = 0;
  4420  001774  948A               	bcf	3978,2,c	;volatile
  4421  001776                     l7993:
  4422                           
  4423                           ; BSR set to: 0
  4424                           ;sort.c: 268: }
  4425                           ;sort.c: 269: f_can_coming_to_ID = 1;
  4426  001776  0E00               	movlw	0
  4427  001778  0101               	movlb	1	; () banked
  4428  00177A  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4429  00177C  0E01               	movlw	1
  4430  00177E  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  4431                           
  4432                           ; BSR set to: 1
  4433                           
  4434                           ; BSR set to: 1
  4435  001780  0012               	return	
  4436  001782                     __end_of_Loading:
  4437                           	opt stack 0
  4438                           tblptru	equ	0xFF8
  4439                           tblptrh	equ	0xFF7
  4440                           tblptrl	equ	0xFF6
  4441                           tablat	equ	0xFF5
  4442                           prodh	equ	0xFF4
  4443                           prodl	equ	0xFF3
  4444                           postinc0	equ	0xFEE
  4445                           wreg	equ	0xFE8
  4446                           postdec1	equ	0xFE5
  4447                           fsr1l	equ	0xFE1
  4448                           status	equ	0xFD8
  4449                           
  4450 ;; *************** function _initSortTimer *****************
  4451 ;; Defined at:
  4452 ;;		line 445 in file "sort.c"
  4453 ;; Parameters:    Size  Location     Type
  4454 ;;		None
  4455 ;; Auto vars:     Size  Location     Type
  4456 ;;  i               2    8[BANK0 ] int 
  4457 ;; Return value:  Size  Location     Type
  4458 ;;                  1    wreg      void 
  4459 ;; Registers used:
  4460 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4461 ;; Tracked objects:
  4462 ;;		On entry : 0/0
  4463 ;;		On exit  : 0/0
  4464 ;;		Unchanged: 0/0
  4465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4467 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4468 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4469 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4470 ;;Total ram usage:        5 bytes
  4471 ;; Hardware stack levels used:    1
  4472 ;; Hardware stack levels required when called:   10
  4473 ;; This function calls:
  4474 ;;		_getRTC
  4475 ;; This function is called by:
  4476 ;;		_Loading
  4477 ;; This function uses a non-reentrant model
  4478 ;;
  4479                           
  4480                           	psect	text3
  4481  004ACA                     __ptext3:
  4482                           	opt stack 0
  4483  004ACA                     _initSortTimer:
  4484                           	opt stack 18
  4485                           
  4486                           ;sort.c: 447: getRTC();
  4487                           
  4488                           ;incstack = 0
  4489  004ACA  EC51  F026         	call	_getRTC	;wreg free
  4490                           
  4491                           ;sort.c: 448: for(int i = 0; i < 7; i++){
  4492  004ACE  0E00               	movlw	0
  4493  004AD0  0100               	movlb	0	; () banked
  4494  004AD2  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  4495  004AD4  0E00               	movlw	0
  4496  004AD6  6F88               	movwf	initSortTimer@i& (0+255),b
  4497  004AD8                     l7299:
  4498                           
  4499                           ; BSR set to: 0
  4500  004AD8  0100               	movlb	0	; () banked
  4501  004ADA  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  4502  004ADC  D008               	goto	l7303
  4503  004ADE  0100               	movlb	0	; () banked
  4504  004AE0  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  4505  004AE2  E140               	bnz	l7309
  4506  004AE4  0E07               	movlw	7
  4507  004AE6  0100               	movlb	0	; () banked
  4508  004AE8  5D88               	subwf	initSortTimer@i& (0+255),w,b
  4509  004AEA  B0D8               	btfsc	status,0,c
  4510  004AEC  D03B               	goto	l7309
  4511  004AEE                     l7303:
  4512                           
  4513                           ; BSR set to: 0
  4514                           ;sort.c: 449: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  4515  004AEE  0E1C               	movlw	low _time
  4516  004AF0  0100               	movlb	0	; () banked
  4517  004AF2  2588               	addwf	initSortTimer@i& (0+255),w,b
  4518  004AF4  6ED9               	movwf	fsr2l,c
  4519  004AF6  0E01               	movlw	high _time
  4520  004AF8  0100               	movlb	0	; () banked
  4521  004AFA  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4522  004AFC  6EDA               	movwf	fsr2h,c
  4523  004AFE  50DF               	movf	indf2,w,c
  4524  004B00  0100               	movlb	0	; () banked
  4525  004B02  6F85               	movwf	??_initSortTimer& (0+255),b
  4526  004B04  0100               	movlb	0	; () banked
  4527  004B06  3B85               	swapf	??_initSortTimer& (0+255),f,b
  4528  004B08  0E0F               	movlw	15
  4529  004B0A  1785               	andwf	??_initSortTimer& (0+255),f,b
  4530  004B0C  0E0F               	movlw	15
  4531  004B0E  0100               	movlb	0	; () banked
  4532  004B10  1785               	andwf	??_initSortTimer& (0+255),f,b
  4533  004B12  0100               	movlb	0	; () banked
  4534  004B14  5185               	movf	??_initSortTimer& (0+255),w,b
  4535  004B16  0D0A               	mullw	10
  4536  004B18  0E1C               	movlw	low _time
  4537  004B1A  0100               	movlb	0	; () banked
  4538  004B1C  2588               	addwf	initSortTimer@i& (0+255),w,b
  4539  004B1E  6ED9               	movwf	fsr2l,c
  4540  004B20  0E01               	movlw	high _time
  4541  004B22  0100               	movlb	0	; () banked
  4542  004B24  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4543  004B26  6EDA               	movwf	fsr2h,c
  4544  004B28  50DF               	movf	indf2,w,c
  4545  004B2A  0B0F               	andlw	15
  4546  004B2C  0100               	movlb	0	; () banked
  4547  004B2E  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  4548  004B30  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  4549  004B32  50F3               	movf	prodl,w,c
  4550  004B34  0100               	movlb	0	; () banked
  4551  004B36  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  4552  004B38  50F4               	movf	prodh,w,c
  4553  004B3A  0100               	movlb	0	; () banked
  4554  004B3C  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  4555  004B3E  90D8               	bcf	status,0,c
  4556  004B40  0100               	movlb	0	; () banked
  4557  004B42  3588               	rlcf	initSortTimer@i& (0+255),w,b
  4558  004B44  6ED9               	movwf	fsr2l,c
  4559  004B46  0100               	movlb	0	; () banked
  4560  004B48  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  4561  004B4A  6EDA               	movwf	fsr2h,c
  4562  004B4C  0E0E               	movlw	low _startTime
  4563  004B4E  26D9               	addwf	fsr2l,f,c
  4564  004B50  0E01               	movlw	high _startTime
  4565  004B52  22DA               	addwfc	fsr2h,f,c
  4566  004B54  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  4567  004B58  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  4568                           
  4569                           ; BSR set to: 0
  4570  004B5C  0100               	movlb	0	; () banked
  4571  004B5E  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  4572  004B60  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  4573  004B62  D7BA               	goto	l7299
  4574  004B64                     l7309:
  4575                           
  4576                           ; BSR set to: 0
  4577                           ;sort.c: 450: }
  4578                           ;sort.c: 452: T0CON = 0b00010111;
  4579  004B64  0E17               	movlw	23
  4580  004B66  6ED5               	movwf	4053,c	;volatile
  4581                           
  4582                           ;sort.c: 461: TMR0H = 0b10000101;
  4583  004B68  0E85               	movlw	133
  4584  004B6A  6ED7               	movwf	4055,c	;volatile
  4585                           
  4586                           ;sort.c: 462: TMR0L = 0b11101110;
  4587  004B6C  0EEE               	movlw	238
  4588  004B6E  6ED6               	movwf	4054,c	;volatile
  4589                           
  4590                           ; BSR set to: 0
  4591                           ;sort.c: 463: TMR0ON = 1;
  4592  004B70  8ED5               	bsf	4053,7,c	;volatile
  4593                           
  4594                           ; BSR set to: 0
  4595  004B72  0012               	return		;funcret
  4596  004B74                     __end_of_initSortTimer:
  4597                           	opt stack 0
  4598                           tblptru	equ	0xFF8
  4599                           tblptrh	equ	0xFF7
  4600                           tblptrl	equ	0xFF6
  4601                           tablat	equ	0xFF5
  4602                           prodh	equ	0xFF4
  4603                           prodl	equ	0xFF3
  4604                           postinc0	equ	0xFEE
  4605                           wreg	equ	0xFE8
  4606                           postdec1	equ	0xFE5
  4607                           fsr1l	equ	0xFE1
  4608                           indf2	equ	0xFDF
  4609                           postinc2	equ	0xFDE
  4610                           postdec2	equ	0xFDD
  4611                           fsr2h	equ	0xFDA
  4612                           fsr2l	equ	0xFD9
  4613                           status	equ	0xFD8
  4614                           
  4615 ;; *************** function _initGlobalVars *****************
  4616 ;; Defined at:
  4617 ;;		line 413 in file "sort.c"
  4618 ;; Parameters:    Size  Location     Type
  4619 ;;		None
  4620 ;; Auto vars:     Size  Location     Type
  4621 ;;		None
  4622 ;; Return value:  Size  Location     Type
  4623 ;;                  1    wreg      void 
  4624 ;; Registers used:
  4625 ;;		wreg, status,2
  4626 ;; Tracked objects:
  4627 ;;		On entry : 0/0
  4628 ;;		On exit  : 0/0
  4629 ;;		Unchanged: 0/0
  4630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4634 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4635 ;;Total ram usage:        0 bytes
  4636 ;; Hardware stack levels used:    1
  4637 ;; Hardware stack levels required when called:    7
  4638 ;; This function calls:
  4639 ;;		Nothing
  4640 ;; This function is called by:
  4641 ;;		_Loading
  4642 ;; This function uses a non-reentrant model
  4643 ;;
  4644                           
  4645                           	psect	text4
  4646  004890                     __ptext4:
  4647                           	opt stack 0
  4648  004890                     _initGlobalVars:
  4649                           	opt stack 21
  4650                           
  4651                           ;sort.c: 415: first = 0;
  4652                           
  4653                           ; BSR set to: 0
  4654                           ;incstack = 0
  4655  004890  0E00               	movlw	0
  4656  004892  0101               	movlb	1	; () banked
  4657  004894  6F3C               	movwf	(_first+1)& (0+255),b
  4658  004896  0E00               	movlw	0
  4659  004898  6F3B               	movwf	_first& (0+255),b
  4660                           
  4661                           ;sort.c: 418: f_loadingNewCan = 0;
  4662  00489A  0E00               	movlw	0
  4663  00489C  0100               	movlb	0	; () banked
  4664  00489E  6FF3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4665  0048A0  0E00               	movlw	0
  4666  0048A2  6FF2               	movwf	_f_loadingNewCan& (0+255),b
  4667                           
  4668                           ;sort.c: 419: f_lastCan = 0;
  4669  0048A4  0E00               	movlw	0
  4670  0048A6  0101               	movlb	1	; () banked
  4671  0048A8  6F38               	movwf	(_f_lastCan+1)& (0+255),b
  4672  0048AA  0E00               	movlw	0
  4673  0048AC  6F37               	movwf	_f_lastCan& (0+255),b
  4674                           
  4675                           ;sort.c: 420: f_ID_receive = 1;
  4676  0048AE  0E00               	movlw	0
  4677  0048B0  0101               	movlb	1	; () banked
  4678  0048B2  6F30               	movwf	(_f_ID_receive+1)& (0+255),b
  4679  0048B4  0E01               	movlw	1
  4680  0048B6  6F2F               	movwf	_f_ID_receive& (0+255),b
  4681                           
  4682                           ;sort.c: 421: f_can_coming_to_ID = 0;
  4683  0048B8  0E00               	movlw	0
  4684  0048BA  0101               	movlb	1	; () banked
  4685  0048BC  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4686  0048BE  0E00               	movlw	0
  4687  0048C0  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  4688                           
  4689                           ;sort.c: 422: f_can_coming_to_distribution = 0;
  4690  0048C2  0E00               	movlw	0
  4691  0048C4  0101               	movlb	1	; () banked
  4692  0048C6  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  4693  0048C8  0E00               	movlw	0
  4694  0048CA  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  4695                           
  4696                           ;sort.c: 423: f_can_distributed = 1;
  4697  0048CC  0E00               	movlw	0
  4698  0048CE  0101               	movlb	1	; () banked
  4699  0048D0  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
  4700  0048D2  0E01               	movlw	1
  4701  0048D4  6F35               	movwf	_f_can_distributed& (0+255),b
  4702                           
  4703                           ;sort.c: 424: f_most_recent_sort_time = 0;
  4704  0048D6  0E00               	movlw	0
  4705  0048D8  0101               	movlb	1	; () banked
  4706  0048DA  6F3A               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  4707  0048DC  0E00               	movlw	0
  4708  0048DE  6F39               	movwf	_f_most_recent_sort_time& (0+255),b
  4709                           
  4710                           ;sort.c: 427: count_total = 0;
  4711  0048E0  0E00               	movlw	0
  4712  0048E2  0100               	movlb	0	; () banked
  4713  0048E4  6FFF               	movwf	(_count_total+1)& (0+255),b
  4714  0048E6  0E00               	movlw	0
  4715  0048E8  6FFE               	movwf	_count_total& (0+255),b
  4716                           
  4717                           ;sort.c: 428: count_pop_no_tab = 0;
  4718  0048EA  0E00               	movlw	0
  4719  0048EC  0101               	movlb	1	; () banked
  4720  0048EE  6F28               	movwf	(_count_pop_no_tab+1)& (0+255),b
  4721  0048F0  0E00               	movlw	0
  4722  0048F2  6F27               	movwf	_count_pop_no_tab& (0+255),b
  4723                           
  4724                           ;sort.c: 429: count_pop_w_tab = 0;
  4725  0048F4  0E00               	movlw	0
  4726  0048F6  0101               	movlb	1	; () banked
  4727  0048F8  6F2A               	movwf	(_count_pop_w_tab+1)& (0+255),b
  4728  0048FA  0E00               	movlw	0
  4729  0048FC  6F29               	movwf	_count_pop_w_tab& (0+255),b
  4730                           
  4731                           ;sort.c: 430: count_can_w_lab = 0;
  4732  0048FE  0E00               	movlw	0
  4733  004900  0101               	movlb	1	; () banked
  4734  004902  6F26               	movwf	(_count_can_w_lab+1)& (0+255),b
  4735  004904  0E00               	movlw	0
  4736  004906  6F25               	movwf	_count_can_w_lab& (0+255),b
  4737                           
  4738                           ;sort.c: 431: count_can_no_lab = 0;
  4739  004908  0E00               	movlw	0
  4740  00490A  0101               	movlb	1	; () banked
  4741  00490C  6F24               	movwf	(_count_can_no_lab+1)& (0+255),b
  4742  00490E  0E00               	movlw	0
  4743  004910  6F23               	movwf	_count_can_no_lab& (0+255),b
  4744                           
  4745                           ;sort.c: 434: most_recent_sort_time = 999;
  4746  004912  0E03               	movlw	3
  4747  004914  0101               	movlb	1	; () banked
  4748  004916  6F46               	movwf	(_most_recent_sort_time+1)& (0+255),b
  4749  004918  0EE7               	movlw	231
  4750  00491A  6F45               	movwf	_most_recent_sort_time& (0+255),b
  4751                           
  4752                           ;sort.c: 437: servo_timer_counter = 0;
  4753  00491C  0E00               	movlw	0
  4754  00491E  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
  4755  004920  0E00               	movlw	0
  4756  004922  6E6D               	movwf	_servo_timer_counter,c	;volatile
  4757                           
  4758                           ;sort.c: 438: servo_timer_target = 9999;
  4759  004924  0E27               	movlw	39
  4760  004926  6E70               	movwf	_servo_timer_target+1,c	;volatile
  4761  004928  0E0F               	movlw	15
  4762  00492A  6E6F               	movwf	_servo_timer_target,c	;volatile
  4763                           
  4764                           ;sort.c: 439: timer2_counter = 0;
  4765  00492C  0E00               	movlw	0
  4766  00492E  6E74               	movwf	_timer2_counter+1,c	;volatile
  4767  004930  0E00               	movlw	0
  4768  004932  6E73               	movwf	_timer2_counter,c	;volatile
  4769                           
  4770                           ;sort.c: 440: f_arm_position = 0;
  4771  004934  0E00               	movlw	0
  4772  004936  0100               	movlb	0	; () banked
  4773  004938  6FF1               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  4774  00493A  0E00               	movlw	0
  4775  00493C  6FF0               	movwf	_f_arm_position& (0+255),b	;volatile
  4776                           
  4777                           ; BSR set to: 0
  4778                           ;sort.c: 441: pan_servo_state = -1;
  4779  00493E  686B               	setf	_pan_servo_state,c	;volatile
  4780  004940  686C               	setf	_pan_servo_state+1,c	;volatile
  4781                           
  4782                           ; BSR set to: 0
  4783                           ;sort.c: 442: tilt_servo_state = -1;
  4784  004942  6871               	setf	_tilt_servo_state,c	;volatile
  4785  004944  6872               	setf	_tilt_servo_state+1,c	;volatile
  4786                           
  4787                           ;sort.c: 443: f_panning_to_bin = 0;
  4788  004946  0E00               	movlw	0
  4789  004948  6E62               	movwf	_f_panning_to_bin+1,c	;volatile
  4790  00494A  0E00               	movlw	0
  4791  00494C  6E61               	movwf	_f_panning_to_bin,c	;volatile
  4792                           
  4793                           ; BSR set to: 0
  4794  00494E  0012               	return		;funcret
  4795  004950                     __end_of_initGlobalVars:
  4796                           	opt stack 0
  4797                           tblptru	equ	0xFF8
  4798                           tblptrh	equ	0xFF7
  4799                           tblptrl	equ	0xFF6
  4800                           tablat	equ	0xFF5
  4801                           prodh	equ	0xFF4
  4802                           prodl	equ	0xFF3
  4803                           postinc0	equ	0xFEE
  4804                           wreg	equ	0xFE8
  4805                           postdec1	equ	0xFE5
  4806                           fsr1l	equ	0xFE1
  4807                           indf2	equ	0xFDF
  4808                           postinc2	equ	0xFDE
  4809                           postdec2	equ	0xFDD
  4810                           fsr2h	equ	0xFDA
  4811                           fsr2l	equ	0xFD9
  4812                           status	equ	0xFD8
  4813                           
  4814 ;; *************** function _getMAG *****************
  4815 ;; Defined at:
  4816 ;;		line 552 in file "sort.c"
  4817 ;; Parameters:    Size  Location     Type
  4818 ;;		None
  4819 ;; Auto vars:     Size  Location     Type
  4820 ;;		None
  4821 ;; Return value:  Size  Location     Type
  4822 ;;                  1    wreg      void 
  4823 ;; Registers used:
  4824 ;;		wreg, status,2, status,0, cstack
  4825 ;; Tracked objects:
  4826 ;;		On entry : 0/0
  4827 ;;		On exit  : 0/0
  4828 ;;		Unchanged: 0/0
  4829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4832 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4833 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4834 ;;Total ram usage:        2 bytes
  4835 ;; Hardware stack levels used:    1
  4836 ;; Hardware stack levels required when called:    9
  4837 ;; This function calls:
  4838 ;;		_readMAG
  4839 ;; This function is called by:
  4840 ;;		_Loading
  4841 ;; This function uses a non-reentrant model
  4842 ;;
  4843                           
  4844                           	psect	text5
  4845  005680                     __ptext5:
  4846                           	opt stack 0
  4847  005680                     _getMAG:
  4848                           	opt stack 19
  4849                           
  4850                           ;sort.c: 553: readMAG();
  4851                           
  4852                           ; BSR set to: 0
  4853                           ;incstack = 0
  4854  005680  EC29  F02A         	call	_readMAG	;wreg free
  4855                           
  4856                           ;sort.c: 555: if(MAG_signal==1){
  4857  005684  0100               	movlb	0	; () banked
  4858  005686  05EA               	decf	_MAG_signal& (0+255),w,b
  4859  005688  0100               	movlb	0	; () banked
  4860  00568A  11EB               	iorwf	(_MAG_signal+1)& (0+255),w,b
  4861  00568C  A4D8               	btfss	status,2,c
  4862  00568E  0012               	return	
  4863                           
  4864                           ; BSR set to: 0
  4865                           ;sort.c: 556: _delay((unsigned long)((500)*(32000000/4000.0)));
  4866  005690  0E15               	movlw	21
  4867  005692  0100               	movlb	0	; () banked
  4868  005694  6F87               	movwf	(??_getMAG+1)& (0+255),b
  4869  005696  0E4B               	movlw	75
  4870  005698  0100               	movlb	0	; () banked
  4871  00569A  6F86               	movwf	??_getMAG& (0+255),b
  4872  00569C  0EBE               	movlw	190
  4873  00569E                     u9987:
  4874  00569E  2EE8               	decfsz	wreg,f,c
  4875  0056A0  D7FE               	bra	u9987
  4876  0056A2  2F86               	decfsz	??_getMAG& (0+255),f,b
  4877  0056A4  D7FC               	bra	u9987
  4878  0056A6  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  4879  0056A8  D7FA               	bra	u9987
  4880  0056AA  F000               	nop	
  4881                           
  4882                           ;sort.c: 557: readMAG();
  4883  0056AC  EC29  F02A         	call	_readMAG	;wreg free
  4884  0056B0  0012               	return	
  4885  0056B2                     __end_of_getMAG:
  4886                           	opt stack 0
  4887                           tblptru	equ	0xFF8
  4888                           tblptrh	equ	0xFF7
  4889                           tblptrl	equ	0xFF6
  4890                           tablat	equ	0xFF5
  4891                           prodh	equ	0xFF4
  4892                           prodl	equ	0xFF3
  4893                           postinc0	equ	0xFEE
  4894                           wreg	equ	0xFE8
  4895                           postdec1	equ	0xFE5
  4896                           fsr1l	equ	0xFE1
  4897                           indf2	equ	0xFDF
  4898                           postinc2	equ	0xFDE
  4899                           postdec2	equ	0xFDD
  4900                           fsr2h	equ	0xFDA
  4901                           fsr2l	equ	0xFD9
  4902                           status	equ	0xFD8
  4903                           
  4904 ;; *************** function _getIR *****************
  4905 ;; Defined at:
  4906 ;;		line 536 in file "sort.c"
  4907 ;; Parameters:    Size  Location     Type
  4908 ;;		None
  4909 ;; Auto vars:     Size  Location     Type
  4910 ;;  i               2    7[BANK0 ] int 
  4911 ;; Return value:  Size  Location     Type
  4912 ;;                  1    wreg      void 
  4913 ;; Registers used:
  4914 ;;		wreg, status,2, status,0, cstack
  4915 ;; Tracked objects:
  4916 ;;		On entry : 0/0
  4917 ;;		On exit  : 0/0
  4918 ;;		Unchanged: 0/0
  4919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4921 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4922 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4923 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4924 ;;Total ram usage:        3 bytes
  4925 ;; Hardware stack levels used:    1
  4926 ;; Hardware stack levels required when called:    9
  4927 ;; This function calls:
  4928 ;;		_readIR
  4929 ;; This function is called by:
  4930 ;;		_Loading
  4931 ;; This function uses a non-reentrant model
  4932 ;;
  4933                           
  4934                           	psect	text6
  4935  004F22                     __ptext6:
  4936                           	opt stack 0
  4937  004F22                     _getIR:
  4938                           	opt stack 19
  4939                           
  4940                           ;sort.c: 537: readIR();
  4941                           
  4942                           ;incstack = 0
  4943  004F22  ECDD  F029         	call	_readIR	;wreg free
  4944                           
  4945                           ;sort.c: 538: for(int i = 0; i < 150; i++){
  4946  004F26  0E00               	movlw	0
  4947  004F28  0100               	movlb	0	; () banked
  4948  004F2A  6F88               	movwf	(getIR@i+1)& (0+255),b
  4949  004F2C  0E00               	movlw	0
  4950  004F2E  6F87               	movwf	getIR@i& (0+255),b
  4951  004F30                     l7399:
  4952                           
  4953                           ; BSR set to: 0
  4954  004F30  0100               	movlb	0	; () banked
  4955  004F32  BF88               	btfsc	(getIR@i+1)& (0+255),7,b
  4956  004F34  D008               	goto	l7403
  4957  004F36  0100               	movlb	0	; () banked
  4958  004F38  5188               	movf	(getIR@i+1)& (0+255),w,b
  4959  004F3A  E11A               	bnz	l7415
  4960  004F3C  0E96               	movlw	150
  4961  004F3E  0100               	movlb	0	; () banked
  4962  004F40  5D87               	subwf	getIR@i& (0+255),w,b
  4963  004F42  B0D8               	btfsc	status,0,c
  4964  004F44  D015               	goto	l7415
  4965  004F46                     l7403:
  4966                           
  4967                           ; BSR set to: 0
  4968                           ;sort.c: 539: _delay((unsigned long)((500)*(32000000/4000000.0)));
  4969  004F46  0E06               	movlw	6
  4970  004F48  0100               	movlb	0	; () banked
  4971  004F4A  6F86               	movwf	??_getIR& (0+255),b
  4972  004F4C  0E30               	movlw	48
  4973  004F4E                     u9997:
  4974  004F4E  2EE8               	decfsz	wreg,f,c
  4975  004F50  D7FE               	bra	u9997
  4976  004F52  2F86               	decfsz	??_getIR& (0+255),f,b
  4977  004F54  D7FC               	bra	u9997
  4978  004F56  F000               	nop	
  4979                           
  4980                           ;sort.c: 540: readIR();
  4981  004F58  ECDD  F029         	call	_readIR	;wreg free
  4982                           
  4983                           ;sort.c: 541: if(!IR_signal){
  4984  004F5C  0100               	movlb	0	; () banked
  4985  004F5E  51E8               	movf	_IR_signal& (0+255),w,b
  4986  004F60  0100               	movlb	0	; () banked
  4987  004F62  11E9               	iorwf	(_IR_signal+1)& (0+255),w,b
  4988  004F64  B4D8               	btfsc	status,2,c
  4989  004F66  D004               	goto	l7415
  4990                           
  4991                           ; BSR set to: 0
  4992                           
  4993                           ; BSR set to: 0
  4994                           
  4995                           ; BSR set to: 0
  4996                           ;sort.c: 542: break;
  4997  004F68  0100               	movlb	0	; () banked
  4998  004F6A  4B87               	infsnz	getIR@i& (0+255),f,b
  4999  004F6C  2B88               	incf	(getIR@i+1)& (0+255),f,b
  5000  004F6E  D7E0               	goto	l7399
  5001  004F70                     l7415:
  5002                           
  5003                           ; BSR set to: 0
  5004                           ;sort.c: 543: }
  5005                           ;sort.c: 544: }
  5006                           ;sort.c: 545: if(IR_signal==1){
  5007  004F70  0100               	movlb	0	; () banked
  5008  004F72  05E8               	decf	_IR_signal& (0+255),w,b
  5009  004F74  0100               	movlb	0	; () banked
  5010  004F76  11E9               	iorwf	(_IR_signal+1)& (0+255),w,b
  5011  004F78  A4D8               	btfss	status,2,c
  5012  004F7A  D006               	goto	l7419
  5013                           
  5014                           ; BSR set to: 0
  5015                           ;sort.c: 546: f_loadingNewCan = 1;
  5016  004F7C  0E00               	movlw	0
  5017  004F7E  0100               	movlb	0	; () banked
  5018  004F80  6FF3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  5019  004F82  0E01               	movlw	1
  5020  004F84  6FF2               	movwf	_f_loadingNewCan& (0+255),b
  5021                           
  5022                           ;sort.c: 547: }
  5023  004F86  0012               	return	
  5024  004F88                     l7419:
  5025                           
  5026                           ; BSR set to: 0
  5027                           ;sort.c: 548: else{
  5028                           ;sort.c: 549: f_loadingNewCan = 0;
  5029  004F88  0E00               	movlw	0
  5030  004F8A  0100               	movlb	0	; () banked
  5031  004F8C  6FF3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  5032  004F8E  0E00               	movlw	0
  5033  004F90  6FF2               	movwf	_f_loadingNewCan& (0+255),b
  5034  004F92  0012               	return	
  5035  004F94                     __end_of_getIR:
  5036                           	opt stack 0
  5037                           tblptru	equ	0xFF8
  5038                           tblptrh	equ	0xFF7
  5039                           tblptrl	equ	0xFF6
  5040                           tablat	equ	0xFF5
  5041                           prodh	equ	0xFF4
  5042                           prodl	equ	0xFF3
  5043                           postinc0	equ	0xFEE
  5044                           wreg	equ	0xFE8
  5045                           postdec1	equ	0xFE5
  5046                           fsr1l	equ	0xFE1
  5047                           indf2	equ	0xFDF
  5048                           postinc2	equ	0xFDE
  5049                           postdec2	equ	0xFDD
  5050                           fsr2h	equ	0xFDA
  5051                           fsr2l	equ	0xFD9
  5052                           status	equ	0xFD8
  5053                           
  5054 ;; *************** function _readIR *****************
  5055 ;; Defined at:
  5056 ;;		line 23 in file "ADCFunctionality.c"
  5057 ;; Parameters:    Size  Location     Type
  5058 ;;		None
  5059 ;; Auto vars:     Size  Location     Type
  5060 ;;  res             2    4[BANK0 ] int 
  5061 ;; Return value:  Size  Location     Type
  5062 ;;                  1    wreg      void 
  5063 ;; Registers used:
  5064 ;;		wreg, status,2, status,0, cstack
  5065 ;; Tracked objects:
  5066 ;;		On entry : 0/0
  5067 ;;		On exit  : 0/0
  5068 ;;		Unchanged: 0/0
  5069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5071 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5072 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5073 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5074 ;;Total ram usage:        4 bytes
  5075 ;; Hardware stack levels used:    1
  5076 ;; Hardware stack levels required when called:    8
  5077 ;; This function calls:
  5078 ;;		_readADC
  5079 ;; This function is called by:
  5080 ;;		_Loading
  5081 ;;		_getIR
  5082 ;; This function uses a non-reentrant model
  5083 ;;
  5084                           
  5085                           	psect	text7
  5086  0053BA                     __ptext7:
  5087                           	opt stack 0
  5088  0053BA                     _readIR:
  5089                           	opt stack 20
  5090                           
  5091                           ;ADCFunctionality.c: 24: readADC(0);
  5092                           
  5093                           ; BSR set to: 0
  5094                           ;incstack = 0
  5095  0053BA  0E00               	movlw	0
  5096  0053BC  ECA6  F02C         	call	_readADC
  5097                           
  5098                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  5099  0053C0  50C3               	movf	4035,w,c	;volatile
  5100  0053C2  CFC4 F082          	movff	4036,??_readIR	;volatile
  5101  0053C6  0100               	movlb	0	; () banked
  5102  0053C8  6B83               	clrf	(??_readIR+1)& (0+255),b
  5103  0053CA  C082  F083         	movff	??_readIR,??_readIR+1
  5104  0053CE  0100               	movlb	0	; () banked
  5105  0053D0  6B82               	clrf	??_readIR& (0+255),b
  5106  0053D2  0100               	movlb	0	; () banked
  5107  0053D4  1182               	iorwf	??_readIR& (0+255),w,b
  5108  0053D6  0100               	movlb	0	; () banked
  5109  0053D8  6F84               	movwf	readIR@res& (0+255),b
  5110  0053DA  0100               	movlb	0	; () banked
  5111  0053DC  5183               	movf	(??_readIR+1)& (0+255),w,b
  5112  0053DE  0100               	movlb	0	; () banked
  5113  0053E0  6F85               	movwf	(readIR@res+1)& (0+255),b
  5114                           
  5115                           ; BSR set to: 0
  5116                           ;ADCFunctionality.c: 26: IR_signal = (res > 800) ? 1 : 0;
  5117  0053E2  0100               	movlb	0	; () banked
  5118  0053E4  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  5119  0053E6  D00A               	goto	u5110
  5120  0053E8  0E21               	movlw	33
  5121  0053EA  0100               	movlb	0	; () banked
  5122  0053EC  5D84               	subwf	readIR@res& (0+255),w,b
  5123  0053EE  0E03               	movlw	3
  5124  0053F0  0100               	movlb	0	; () banked
  5125  0053F2  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  5126  0053F4  A0D8               	btfss	status,0,c
  5127  0053F6  D002               	goto	u5110
  5128  0053F8  0E01               	movlw	1
  5129  0053FA  D001               	goto	u5120
  5130  0053FC                     u5110:
  5131  0053FC  0E00               	movlw	0
  5132  0053FE                     u5120:
  5133  0053FE  0100               	movlb	0	; () banked
  5134  005400  6FE8               	movwf	_IR_signal& (0+255),b
  5135  005402  6BE9               	clrf	(_IR_signal+1)& (0+255),b
  5136                           
  5137                           ; BSR set to: 0
  5138  005404  0012               	return		;funcret
  5139  005406                     __end_of_readIR:
  5140                           	opt stack 0
  5141                           tblptru	equ	0xFF8
  5142                           tblptrh	equ	0xFF7
  5143                           tblptrl	equ	0xFF6
  5144                           tablat	equ	0xFF5
  5145                           prodh	equ	0xFF4
  5146                           prodl	equ	0xFF3
  5147                           postinc0	equ	0xFEE
  5148                           wreg	equ	0xFE8
  5149                           postdec1	equ	0xFE5
  5150                           fsr1l	equ	0xFE1
  5151                           indf2	equ	0xFDF
  5152                           postinc2	equ	0xFDE
  5153                           postdec2	equ	0xFDD
  5154                           fsr2h	equ	0xFDA
  5155                           fsr2l	equ	0xFD9
  5156                           status	equ	0xFD8
  5157                           
  5158 ;; *************** function _ID *****************
  5159 ;; Defined at:
  5160 ;;		line 273 in file "sort.c"
  5161 ;; Parameters:    Size  Location     Type
  5162 ;;		None
  5163 ;; Auto vars:     Size  Location     Type
  5164 ;;  i               2   35[BANK0 ] int 
  5165 ;;  i               2   37[BANK0 ] int 
  5166 ;;  i               2   33[BANK0 ] int 
  5167 ;;  i               2   31[BANK0 ] int 
  5168 ;;  n               2   46[BANK0 ] const int 
  5169 ;;  res3            2   43[BANK0 ] int 
  5170 ;;  res2            2   41[BANK0 ] int 
  5171 ;;  res1            2   39[BANK0 ] int 
  5172 ;;  time            1   45[BANK0 ] const unsigned char 
  5173 ;; Return value:  Size  Location     Type
  5174 ;;                  1    wreg      void 
  5175 ;; Registers used:
  5176 ;;		wreg, status,2, status,0, cstack
  5177 ;; Tracked objects:
  5178 ;;		On entry : 0/0
  5179 ;;		On exit  : 0/0
  5180 ;;		Unchanged: 0/0
  5181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5183 ;;      Locals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5184 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5185 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5186 ;;Total ram usage:       21 bytes
  5187 ;; Hardware stack levels used:    1
  5188 ;; Hardware stack levels required when called:    9
  5189 ;; This function calls:
  5190 ;;		___awdiv
  5191 ;;		___awtoft
  5192 ;;		___ftge
  5193 ;;		_delay_ms
  5194 ;;		_readCOND
  5195 ;; This function is called by:
  5196 ;;		_sort
  5197 ;; This function uses a non-reentrant model
  5198 ;;
  5199                           
  5200                           	psect	text8
  5201  001BBA                     __ptext8:
  5202                           	opt stack 0
  5203  001BBA                     _ID:
  5204                           	opt stack 20
  5205                           
  5206                           ;sort.c: 274: if(f_can_coming_to_ID){
  5207                           
  5208                           ; BSR set to: 0
  5209                           ;incstack = 0
  5210  001BBA  0101               	movlb	1	; () banked
  5211  001BBC  5131               	movf	_f_can_coming_to_ID& (0+255),w,b
  5212  001BBE  0101               	movlb	1	; () banked
  5213  001BC0  1132               	iorwf	(_f_can_coming_to_ID+1)& (0+255),w,b
  5214  001BC2  B4D8               	btfsc	status,2,c
  5215  001BC4  0012               	return	
  5216                           
  5217                           ; BSR set to: 1
  5218                           ;sort.c: 276: _delay((unsigned long)((1000)*(32000000/4000.0)));
  5219  001BC6  0E29               	movlw	41
  5220  001BC8  0100               	movlb	0	; () banked
  5221  001BCA  6F9C               	movwf	(??_ID+1)& (0+255),b
  5222  001BCC  0E96               	movlw	150
  5223  001BCE  0100               	movlb	0	; () banked
  5224  001BD0  6F9B               	movwf	??_ID& (0+255),b
  5225  001BD2  0E7F               	movlw	127
  5226  001BD4                     u10007:
  5227  001BD4  2EE8               	decfsz	wreg,f,c
  5228  001BD6  D7FE               	bra	u10007
  5229  001BD8  2F9B               	decfsz	??_ID& (0+255),f,b
  5230  001BDA  D7FC               	bra	u10007
  5231  001BDC  2F9C               	decfsz	(??_ID+1)& (0+255),f,b
  5232  001BDE  D7FA               	bra	u10007
  5233                           
  5234                           ;sort.c: 278: f_arm_position = 0;
  5235  001BE0  0E00               	movlw	0
  5236  001BE2  0100               	movlb	0	; () banked
  5237  001BE4  6FF1               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  5238  001BE6  0E00               	movlw	0
  5239  001BE8  6FF0               	movwf	_f_arm_position& (0+255),b	;volatile
  5240                           
  5241                           ; BSR set to: 0
  5242                           ;sort.c: 280: LATAbits.LATA3 = 1;
  5243  001BEA  8689               	bsf	3977,3,c	;volatile
  5244                           
  5245                           ; BSR set to: 0
  5246                           ;sort.c: 283: const int n = 10;
  5247  001BEC  0E00               	movlw	0
  5248  001BEE  0100               	movlb	0	; () banked
  5249  001BF0  6FAF               	movwf	(ID@n+1)& (0+255),b
  5250  001BF2  0E0A               	movlw	10
  5251  001BF4  6FAE               	movwf	ID@n& (0+255),b
  5252                           
  5253                           ; BSR set to: 0
  5254                           ;sort.c: 284: const unsigned char time = (600 / n);
  5255  001BF6  0E02               	movlw	2
  5256  001BF8  0100               	movlb	0	; () banked
  5257  001BFA  6F87               	movwf	(___awdiv@dividend+1)& (0+255),b
  5258  001BFC  0E58               	movlw	88
  5259  001BFE  6F86               	movwf	___awdiv@dividend& (0+255),b
  5260  001C00  C0AE  F088         	movff	ID@n,___awdiv@divisor
  5261  001C04  C0AF  F089         	movff	ID@n+1,___awdiv@divisor+1
  5262  001C08  ECA8  F024         	call	___awdiv	;wreg free
  5263  001C0C  0100               	movlb	0	; () banked
  5264  001C0E  5186               	movf	?___awdiv& (0+255),w,b
  5265  001C10  0100               	movlb	0	; () banked
  5266  001C12  6FAD               	movwf	ID@time& (0+255),b
  5267                           
  5268                           ; BSR set to: 0
  5269                           ;sort.c: 285: int res1 = 0;
  5270  001C14  0E00               	movlw	0
  5271  001C16  0100               	movlb	0	; () banked
  5272  001C18  6FA8               	movwf	(ID@res1+1)& (0+255),b
  5273  001C1A  0E00               	movlw	0
  5274  001C1C  6FA7               	movwf	ID@res1& (0+255),b
  5275                           
  5276                           ; BSR set to: 0
  5277                           ;sort.c: 286: int res2 = 0;
  5278  001C1E  0E00               	movlw	0
  5279  001C20  0100               	movlb	0	; () banked
  5280  001C22  6FAA               	movwf	(ID@res2+1)& (0+255),b
  5281  001C24  0E00               	movlw	0
  5282  001C26  6FA9               	movwf	ID@res2& (0+255),b
  5283                           
  5284                           ; BSR set to: 0
  5285                           ;sort.c: 287: int res3 = 0;
  5286  001C28  0E00               	movlw	0
  5287  001C2A  0100               	movlb	0	; () banked
  5288  001C2C  6FAC               	movwf	(ID@res3+1)& (0+255),b
  5289  001C2E  0E00               	movlw	0
  5290  001C30  6FAB               	movwf	ID@res3& (0+255),b
  5291                           
  5292                           ; BSR set to: 0
  5293                           ;sort.c: 288: for(int i = 0; i<n; i++){
  5294  001C32  0E00               	movlw	0
  5295  001C34  0100               	movlb	0	; () banked
  5296  001C36  6FA0               	movwf	(ID@i+1)& (0+255),b
  5297  001C38  0E00               	movlw	0
  5298  001C3A  6F9F               	movwf	ID@i& (0+255),b
  5299  001C3C                     l8021:
  5300                           
  5301                           ; BSR set to: 0
  5302  001C3C  0100               	movlb	0	; () banked
  5303  001C3E  51AE               	movf	ID@n& (0+255),w,b
  5304  001C40  0100               	movlb	0	; () banked
  5305  001C42  5D9F               	subwf	ID@i& (0+255),w,b
  5306  001C44  0100               	movlb	0	; () banked
  5307  001C46  51A0               	movf	(ID@i+1)& (0+255),w,b
  5308  001C48  0A80               	xorlw	128
  5309  001C4A  0100               	movlb	0	; () banked
  5310  001C4C  6F9B               	movwf	??_ID& (0+255),b
  5311  001C4E  0100               	movlb	0	; () banked
  5312  001C50  51AF               	movf	(ID@n+1)& (0+255),w,b
  5313  001C52  0A80               	xorlw	128
  5314  001C54  0100               	movlb	0	; () banked
  5315  001C56  599B               	subwfb	??_ID& (0+255),w,b
  5316  001C58  B0D8               	btfsc	status,0,c
  5317  001C5A  D012               	goto	l845
  5318                           
  5319                           ; BSR set to: 0
  5320                           ;sort.c: 289: delay_ms(time);
  5321                           
  5322                           ; BSR set to: 0
  5323                           
  5324                           ; BSR set to: 0
  5325  001C5C  0100               	movlb	0	; () banked
  5326  001C5E  51AD               	movf	ID@time& (0+255),w,b
  5327  001C60  ECD1  F02C         	call	_delay_ms
  5328                           
  5329                           ;sort.c: 290: readCOND();
  5330  001C64  EC03  F02A         	call	_readCOND	;wreg free
  5331                           
  5332                           ;sort.c: 291: res1 += COND_signal;
  5333  001C68  0100               	movlb	0	; () banked
  5334  001C6A  51E6               	movf	_COND_signal& (0+255),w,b
  5335  001C6C  0100               	movlb	0	; () banked
  5336  001C6E  27A7               	addwf	ID@res1& (0+255),f,b
  5337  001C70  0100               	movlb	0	; () banked
  5338  001C72  51E7               	movf	(_COND_signal+1)& (0+255),w,b
  5339  001C74  0100               	movlb	0	; () banked
  5340  001C76  23A8               	addwfc	(ID@res1+1)& (0+255),f,b
  5341                           
  5342                           ; BSR set to: 0
  5343  001C78  0100               	movlb	0	; () banked
  5344  001C7A  4B9F               	infsnz	ID@i& (0+255),f,b
  5345  001C7C  2BA0               	incf	(ID@i+1)& (0+255),f,b
  5346  001C7E  D7DE               	goto	l8021
  5347  001C80                     l845:
  5348                           
  5349                           ; BSR set to: 0
  5350                           ;sort.c: 292: }
  5351                           ;sort.c: 293: LATAbits.LATA3 = 0;
  5352  001C80  9689               	bcf	3977,3,c	;volatile
  5353                           
  5354                           ; BSR set to: 0
  5355                           ;sort.c: 294: _delay((unsigned long)((200)*(32000000/4000.0)));
  5356  001C82  0E09               	movlw	9
  5357  001C84  0100               	movlb	0	; () banked
  5358  001C86  6F9C               	movwf	(??_ID+1)& (0+255),b
  5359  001C88  0E1E               	movlw	30
  5360  001C8A  0100               	movlb	0	; () banked
  5361  001C8C  6F9B               	movwf	??_ID& (0+255),b
  5362  001C8E  0EE4               	movlw	228
  5363  001C90                     u10017:
  5364  001C90  2EE8               	decfsz	wreg,f,c
  5365  001C92  D7FE               	bra	u10017
  5366  001C94  2F9B               	decfsz	??_ID& (0+255),f,b
  5367  001C96  D7FC               	bra	u10017
  5368  001C98  2F9C               	decfsz	(??_ID+1)& (0+255),f,b
  5369  001C9A  D7FA               	bra	u10017
  5370  001C9C  F000               	nop	
  5371                           
  5372                           ;sort.c: 295: LATAbits.LATA3 = 1;
  5373  001C9E  8689               	bsf	3977,3,c	;volatile
  5374                           
  5375                           ;sort.c: 296: for(int i = 0; i<n; i++){
  5376  001CA0  0E00               	movlw	0
  5377  001CA2  0100               	movlb	0	; () banked
  5378  001CA4  6FA2               	movwf	(ID@i_1141+1)& (0+255),b
  5379  001CA6  0E00               	movlw	0
  5380  001CA8  6FA1               	movwf	ID@i_1141& (0+255),b
  5381  001CAA                     l8039:
  5382                           
  5383                           ; BSR set to: 0
  5384  001CAA  0100               	movlb	0	; () banked
  5385  001CAC  51AE               	movf	ID@n& (0+255),w,b
  5386  001CAE  0100               	movlb	0	; () banked
  5387  001CB0  5DA1               	subwf	ID@i_1141& (0+255),w,b
  5388  001CB2  0100               	movlb	0	; () banked
  5389  001CB4  51A2               	movf	(ID@i_1141+1)& (0+255),w,b
  5390  001CB6  0A80               	xorlw	128
  5391  001CB8  0100               	movlb	0	; () banked
  5392  001CBA  6F9B               	movwf	??_ID& (0+255),b
  5393  001CBC  0100               	movlb	0	; () banked
  5394  001CBE  51AF               	movf	(ID@n+1)& (0+255),w,b
  5395  001CC0  0A80               	xorlw	128
  5396  001CC2  0100               	movlb	0	; () banked
  5397  001CC4  599B               	subwfb	??_ID& (0+255),w,b
  5398  001CC6  B0D8               	btfsc	status,0,c
  5399  001CC8  D012               	goto	l8051
  5400                           
  5401                           ; BSR set to: 0
  5402                           ;sort.c: 297: delay_ms(time);
  5403                           
  5404                           ; BSR set to: 0
  5405                           
  5406                           ; BSR set to: 0
  5407  001CCA  0100               	movlb	0	; () banked
  5408  001CCC  51AD               	movf	ID@time& (0+255),w,b
  5409  001CCE  ECD1  F02C         	call	_delay_ms
  5410                           
  5411                           ;sort.c: 298: readCOND();
  5412  001CD2  EC03  F02A         	call	_readCOND	;wreg free
  5413                           
  5414                           ;sort.c: 299: res2 += COND_signal;
  5415  001CD6  0100               	movlb	0	; () banked
  5416  001CD8  51E6               	movf	_COND_signal& (0+255),w,b
  5417  001CDA  0100               	movlb	0	; () banked
  5418  001CDC  27A9               	addwf	ID@res2& (0+255),f,b
  5419  001CDE  0100               	movlb	0	; () banked
  5420  001CE0  51E7               	movf	(_COND_signal+1)& (0+255),w,b
  5421  001CE2  0100               	movlb	0	; () banked
  5422  001CE4  23AA               	addwfc	(ID@res2+1)& (0+255),f,b
  5423                           
  5424                           ; BSR set to: 0
  5425  001CE6  0100               	movlb	0	; () banked
  5426  001CE8  4BA1               	infsnz	ID@i_1141& (0+255),f,b
  5427  001CEA  2BA2               	incf	(ID@i_1141+1)& (0+255),f,b
  5428  001CEC  D7DE               	goto	l8039
  5429  001CEE                     l8051:
  5430                           
  5431                           ; BSR set to: 0
  5432                           ;sort.c: 300: }
  5433                           ;sort.c: 301: res1 = ((res1 / n) > 0.3) ? 1 : 0;
  5434  001CEE  0E9A               	movlw	154
  5435  001CF0  0100               	movlb	0	; () banked
  5436  001CF2  6F92               	movwf	___ftge@ff1& (0+255),b
  5437  001CF4  0E99               	movlw	153
  5438  001CF6  0100               	movlb	0	; () banked
  5439  001CF8  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  5440  001CFA  0E3E               	movlw	62
  5441  001CFC  0100               	movlb	0	; () banked
  5442  001CFE  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  5443  001D00  C0AE  F088         	movff	ID@n,___awdiv@divisor
  5444  001D04  C0AF  F089         	movff	ID@n+1,___awdiv@divisor+1
  5445  001D08  C0A7  F086         	movff	ID@res1,___awdiv@dividend
  5446  001D0C  C0A8  F087         	movff	ID@res1+1,___awdiv@dividend+1
  5447  001D10  ECA8  F024         	call	___awdiv	;wreg free
  5448  001D14  C086  F08E         	movff	?___awdiv,___awtoft@c
  5449  001D18  C087  F08F         	movff	?___awdiv+1,___awtoft@c+1
  5450  001D1C  EC72  F02A         	call	___awtoft	;wreg free
  5451  001D20  C08E  F095         	movff	?___awtoft,___ftge@ff2
  5452  001D24  C08F  F096         	movff	?___awtoft+1,___ftge@ff2+1
  5453  001D28  C090  F097         	movff	?___awtoft+2,___ftge@ff2+2
  5454  001D2C  ECE4  F023         	call	___ftge	;wreg free
  5455  001D30  0100               	movlb	0	; () banked
  5456  001D32  B0D8               	btfsc	status,0,c
  5457  001D34  D002               	goto	u6800
  5458  001D36  0E01               	movlw	1
  5459  001D38  D001               	goto	u6810
  5460  001D3A                     u6800:
  5461  001D3A  0E00               	movlw	0
  5462  001D3C                     u6810:
  5463  001D3C  0100               	movlb	0	; () banked
  5464  001D3E  6FA7               	movwf	ID@res1& (0+255),b
  5465  001D40  6BA8               	clrf	(ID@res1+1)& (0+255),b
  5466                           
  5467                           ;sort.c: 302: res2 = ((res2 / n) > 0.3) ? 1 : 0;
  5468  001D42  0E9A               	movlw	154
  5469  001D44  0100               	movlb	0	; () banked
  5470  001D46  6F92               	movwf	___ftge@ff1& (0+255),b
  5471  001D48  0E99               	movlw	153
  5472  001D4A  0100               	movlb	0	; () banked
  5473  001D4C  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  5474  001D4E  0E3E               	movlw	62
  5475  001D50  0100               	movlb	0	; () banked
  5476  001D52  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  5477  001D54  C0AE  F088         	movff	ID@n,___awdiv@divisor
  5478  001D58  C0AF  F089         	movff	ID@n+1,___awdiv@divisor+1
  5479  001D5C  C0A9  F086         	movff	ID@res2,___awdiv@dividend
  5480  001D60  C0AA  F087         	movff	ID@res2+1,___awdiv@dividend+1
  5481  001D64  ECA8  F024         	call	___awdiv	;wreg free
  5482  001D68  C086  F08E         	movff	?___awdiv,___awtoft@c
  5483  001D6C  C087  F08F         	movff	?___awdiv+1,___awtoft@c+1
  5484  001D70  EC72  F02A         	call	___awtoft	;wreg free
  5485  001D74  C08E  F095         	movff	?___awtoft,___ftge@ff2
  5486  001D78  C08F  F096         	movff	?___awtoft+1,___ftge@ff2+1
  5487  001D7C  C090  F097         	movff	?___awtoft+2,___ftge@ff2+2
  5488  001D80  ECE4  F023         	call	___ftge	;wreg free
  5489  001D84  0100               	movlb	0	; () banked
  5490  001D86  B0D8               	btfsc	status,0,c
  5491  001D88  D002               	goto	u6820
  5492  001D8A  0E01               	movlw	1
  5493  001D8C  D001               	goto	u6830
  5494  001D8E                     u6820:
  5495  001D8E  0E00               	movlw	0
  5496  001D90                     u6830:
  5497  001D90  0100               	movlb	0	; () banked
  5498  001D92  6FA9               	movwf	ID@res2& (0+255),b
  5499  001D94  6BAA               	clrf	(ID@res2+1)& (0+255),b
  5500                           
  5501                           ; BSR set to: 0
  5502                           ;sort.c: 305: sensor_outputs[1] = (res1 || res2);
  5503  001D96  0E01               	movlw	1
  5504  001D98  0100               	movlb	0	; () banked
  5505  001D9A  6F9D               	movwf	_ID$1142& (0+255),b
  5506                           
  5507                           ; BSR set to: 0
  5508  001D9C  0100               	movlb	0	; () banked
  5509  001D9E  51A7               	movf	ID@res1& (0+255),w,b
  5510  001DA0  0100               	movlb	0	; () banked
  5511  001DA2  11A8               	iorwf	(ID@res1+1)& (0+255),w,b
  5512  001DA4  A4D8               	btfss	status,2,c
  5513  001DA6  D009               	goto	l8061
  5514                           
  5515                           ; BSR set to: 0
  5516  001DA8  0100               	movlb	0	; () banked
  5517  001DAA  51A9               	movf	ID@res2& (0+255),w,b
  5518  001DAC  0100               	movlb	0	; () banked
  5519  001DAE  11AA               	iorwf	(ID@res2+1)& (0+255),w,b
  5520  001DB0  A4D8               	btfss	status,2,c
  5521  001DB2  D003               	goto	l8061
  5522                           
  5523                           ; BSR set to: 0
  5524  001DB4  0E00               	movlw	0
  5525  001DB6  0100               	movlb	0	; () banked
  5526  001DB8  6F9D               	movwf	_ID$1142& (0+255),b
  5527  001DBA                     l8061:
  5528                           
  5529                           ; BSR set to: 0
  5530  001DBA  C09D  F0E4         	movff	_ID$1142,_sensor_outputs+2
  5531  001DBE  0100               	movlb	0	; () banked
  5532  001DC0  6BE5               	clrf	(_sensor_outputs+3)& (0+255),b
  5533                           
  5534                           ; BSR set to: 0
  5535                           ;sort.c: 306: LATAbits.LATA3 = 0;
  5536  001DC2  9689               	bcf	3977,3,c	;volatile
  5537                           
  5538                           ; BSR set to: 0
  5539                           ;sort.c: 308: if(sensor_outputs[0]){
  5540  001DC4  0100               	movlb	0	; () banked
  5541  001DC6  51E2               	movf	_sensor_outputs& (0+255),w,b
  5542  001DC8  0100               	movlb	0	; () banked
  5543  001DCA  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5544  001DCC  B4D8               	btfsc	status,2,c
  5545  001DCE  D077               	goto	l8099
  5546                           
  5547                           ; BSR set to: 0
  5548                           ;sort.c: 309: _delay((unsigned long)((200)*(32000000/4000.0)));
  5549  001DD0  0E09               	movlw	9
  5550  001DD2  0100               	movlb	0	; () banked
  5551  001DD4  6F9C               	movwf	(??_ID+1)& (0+255),b
  5552  001DD6  0E1E               	movlw	30
  5553  001DD8  0100               	movlb	0	; () banked
  5554  001DDA  6F9B               	movwf	??_ID& (0+255),b
  5555  001DDC  0EE4               	movlw	228
  5556  001DDE                     u10027:
  5557  001DDE  2EE8               	decfsz	wreg,f,c
  5558  001DE0  D7FE               	bra	u10027
  5559  001DE2  2F9B               	decfsz	??_ID& (0+255),f,b
  5560  001DE4  D7FC               	bra	u10027
  5561  001DE6  2F9C               	decfsz	(??_ID+1)& (0+255),f,b
  5562  001DE8  D7FA               	bra	u10027
  5563  001DEA  F000               	nop	
  5564                           
  5565                           ;sort.c: 310: LATAbits.LATA3 = 1;
  5566  001DEC  8689               	bsf	3977,3,c	;volatile
  5567                           
  5568                           ;sort.c: 311: for(int i = 0; i<n; i++){
  5569  001DEE  0E00               	movlw	0
  5570  001DF0  0100               	movlb	0	; () banked
  5571  001DF2  6FA4               	movwf	(ID@i_1143+1)& (0+255),b
  5572  001DF4  0E00               	movlw	0
  5573  001DF6  6FA3               	movwf	ID@i_1143& (0+255),b
  5574  001DF8                     l8073:
  5575                           
  5576                           ; BSR set to: 0
  5577  001DF8  0100               	movlb	0	; () banked
  5578  001DFA  51AE               	movf	ID@n& (0+255),w,b
  5579  001DFC  0100               	movlb	0	; () banked
  5580  001DFE  5DA3               	subwf	ID@i_1143& (0+255),w,b
  5581  001E00  0100               	movlb	0	; () banked
  5582  001E02  51A4               	movf	(ID@i_1143+1)& (0+255),w,b
  5583  001E04  0A80               	xorlw	128
  5584  001E06  0100               	movlb	0	; () banked
  5585  001E08  6F9B               	movwf	??_ID& (0+255),b
  5586  001E0A  0100               	movlb	0	; () banked
  5587  001E0C  51AF               	movf	(ID@n+1)& (0+255),w,b
  5588  001E0E  0A80               	xorlw	128
  5589  001E10  0100               	movlb	0	; () banked
  5590  001E12  599B               	subwfb	??_ID& (0+255),w,b
  5591  001E14  B0D8               	btfsc	status,0,c
  5592  001E16  D012               	goto	l8085
  5593                           
  5594                           ; BSR set to: 0
  5595                           ;sort.c: 312: delay_ms(time);
  5596                           
  5597                           ; BSR set to: 0
  5598                           
  5599                           ; BSR set to: 0
  5600  001E18  0100               	movlb	0	; () banked
  5601  001E1A  51AD               	movf	ID@time& (0+255),w,b
  5602  001E1C  ECD1  F02C         	call	_delay_ms
  5603                           
  5604                           ;sort.c: 313: readCOND();
  5605  001E20  EC03  F02A         	call	_readCOND	;wreg free
  5606                           
  5607                           ;sort.c: 314: res3 += COND_signal;
  5608  001E24  0100               	movlb	0	; () banked
  5609  001E26  51E6               	movf	_COND_signal& (0+255),w,b
  5610  001E28  0100               	movlb	0	; () banked
  5611  001E2A  27AB               	addwf	ID@res3& (0+255),f,b
  5612  001E2C  0100               	movlb	0	; () banked
  5613  001E2E  51E7               	movf	(_COND_signal+1)& (0+255),w,b
  5614  001E30  0100               	movlb	0	; () banked
  5615  001E32  23AC               	addwfc	(ID@res3+1)& (0+255),f,b
  5616                           
  5617                           ; BSR set to: 0
  5618  001E34  0100               	movlb	0	; () banked
  5619  001E36  4BA3               	infsnz	ID@i_1143& (0+255),f,b
  5620  001E38  2BA4               	incf	(ID@i_1143+1)& (0+255),f,b
  5621  001E3A  D7DE               	goto	l8073
  5622  001E3C                     l8085:
  5623                           
  5624                           ; BSR set to: 0
  5625                           ;sort.c: 315: }
  5626                           ;sort.c: 316: res3 = ((res3 / n) > 0.3) ? 1 : 0;
  5627  001E3C  0E9A               	movlw	154
  5628  001E3E  0100               	movlb	0	; () banked
  5629  001E40  6F92               	movwf	___ftge@ff1& (0+255),b
  5630  001E42  0E99               	movlw	153
  5631  001E44  0100               	movlb	0	; () banked
  5632  001E46  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  5633  001E48  0E3E               	movlw	62
  5634  001E4A  0100               	movlb	0	; () banked
  5635  001E4C  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  5636  001E4E  C0AE  F088         	movff	ID@n,___awdiv@divisor
  5637  001E52  C0AF  F089         	movff	ID@n+1,___awdiv@divisor+1
  5638  001E56  C0AB  F086         	movff	ID@res3,___awdiv@dividend
  5639  001E5A  C0AC  F087         	movff	ID@res3+1,___awdiv@dividend+1
  5640  001E5E  ECA8  F024         	call	___awdiv	;wreg free
  5641  001E62  C086  F08E         	movff	?___awdiv,___awtoft@c
  5642  001E66  C087  F08F         	movff	?___awdiv+1,___awtoft@c+1
  5643  001E6A  EC72  F02A         	call	___awtoft	;wreg free
  5644  001E6E  C08E  F095         	movff	?___awtoft,___ftge@ff2
  5645  001E72  C08F  F096         	movff	?___awtoft+1,___ftge@ff2+1
  5646  001E76  C090  F097         	movff	?___awtoft+2,___ftge@ff2+2
  5647  001E7A  ECE4  F023         	call	___ftge	;wreg free
  5648  001E7E  0100               	movlb	0	; () banked
  5649  001E80  B0D8               	btfsc	status,0,c
  5650  001E82  D002               	goto	u6890
  5651  001E84  0E01               	movlw	1
  5652  001E86  D001               	goto	u6900
  5653  001E88                     u6890:
  5654  001E88  0E00               	movlw	0
  5655  001E8A                     u6900:
  5656  001E8A  0100               	movlb	0	; () banked
  5657  001E8C  6FAB               	movwf	ID@res3& (0+255),b
  5658  001E8E  6BAC               	clrf	(ID@res3+1)& (0+255),b
  5659                           
  5660                           ; BSR set to: 0
  5661                           ;sort.c: 317: sensor_outputs[1] = (sensor_outputs[1] || res3);
  5662  001E90  0E01               	movlw	1
  5663  001E92  0100               	movlb	0	; () banked
  5664  001E94  6F9E               	movwf	_ID$1144& (0+255),b
  5665                           
  5666                           ; BSR set to: 0
  5667  001E96  0100               	movlb	0	; () banked
  5668  001E98  51E4               	movf	(_sensor_outputs+2)& (0+255),w,b
  5669  001E9A  0100               	movlb	0	; () banked
  5670  001E9C  11E5               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5671  001E9E  A4D8               	btfss	status,2,c
  5672  001EA0  D009               	goto	l8095
  5673                           
  5674                           ; BSR set to: 0
  5675  001EA2  0100               	movlb	0	; () banked
  5676  001EA4  51AB               	movf	ID@res3& (0+255),w,b
  5677  001EA6  0100               	movlb	0	; () banked
  5678  001EA8  11AC               	iorwf	(ID@res3+1)& (0+255),w,b
  5679  001EAA  A4D8               	btfss	status,2,c
  5680  001EAC  D003               	goto	l8095
  5681                           
  5682                           ; BSR set to: 0
  5683  001EAE  0E00               	movlw	0
  5684  001EB0  0100               	movlb	0	; () banked
  5685  001EB2  6F9E               	movwf	_ID$1144& (0+255),b
  5686  001EB4                     l8095:
  5687                           
  5688                           ; BSR set to: 0
  5689  001EB4  C09E  F0E4         	movff	_ID$1144,_sensor_outputs+2
  5690  001EB8  0100               	movlb	0	; () banked
  5691  001EBA  6BE5               	clrf	(_sensor_outputs+3)& (0+255),b
  5692                           
  5693                           ; BSR set to: 0
  5694                           ;sort.c: 318: LATAbits.LATA3 = 0;
  5695  001EBC  9689               	bcf	3977,3,c	;volatile
  5696  001EBE                     l8099:
  5697                           
  5698                           ; BSR set to: 0
  5699                           ;sort.c: 319: }
  5700                           ;sort.c: 332: if(!sensor_outputs[0]){
  5701  001EBE  0100               	movlb	0	; () banked
  5702  001EC0  51E2               	movf	_sensor_outputs& (0+255),w,b
  5703  001EC2  0100               	movlb	0	; () banked
  5704  001EC4  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5705  001EC6  A4D8               	btfss	status,2,c
  5706  001EC8  D016               	goto	l8111
  5707                           
  5708                           ; BSR set to: 0
  5709                           ;sort.c: 333: if(!sensor_outputs[1]){
  5710  001ECA  0100               	movlb	0	; () banked
  5711  001ECC  51E4               	movf	(_sensor_outputs+2)& (0+255),w,b
  5712  001ECE  0100               	movlb	0	; () banked
  5713  001ED0  11E5               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5714  001ED2  A4D8               	btfss	status,2,c
  5715  001ED4  D008               	goto	l8107
  5716                           
  5717                           ; BSR set to: 0
  5718                           ;sort.c: 334: count_pop_no_tab++;
  5719  001ED6  0101               	movlb	1	; () banked
  5720  001ED8  4B27               	infsnz	_count_pop_no_tab& (0+255),f,b
  5721  001EDA  2B28               	incf	(_count_pop_no_tab+1)& (0+255),f,b
  5722                           
  5723                           ; BSR set to: 1
  5724                           ;sort.c: 335: cur_can = 0;
  5725  001EDC  0E00               	movlw	0
  5726  001EDE  0101               	movlb	1	; () banked
  5727  001EE0  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5728  001EE2  0E00               	movlw	0
  5729  001EE4  D007               	goto	L8
  5730  001EE6                     l8107:
  5731                           
  5732                           ;sort.c: 337: else{
  5733                           ;sort.c: 338: count_pop_w_tab++;
  5734  001EE6  0101               	movlb	1	; () banked
  5735  001EE8  4B29               	infsnz	_count_pop_w_tab& (0+255),f,b
  5736  001EEA  2B2A               	incf	(_count_pop_w_tab+1)& (0+255),f,b
  5737                           
  5738                           ; BSR set to: 1
  5739                           ;sort.c: 339: cur_can = 1;
  5740  001EEC  0E00               	movlw	0
  5741  001EEE  0101               	movlb	1	; () banked
  5742  001EF0  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5743  001EF2  0E01               	movlw	1
  5744  001EF4                     L8:
  5745  001EF4  6F2B               	movwf	_cur_can& (0+255),b
  5746  001EF6                     l8111:
  5747                           
  5748                           ;sort.c: 340: }
  5749                           ;sort.c: 341: }
  5750                           ;sort.c: 342: if(sensor_outputs[0]){
  5751  001EF6  0100               	movlb	0	; () banked
  5752  001EF8  51E2               	movf	_sensor_outputs& (0+255),w,b
  5753  001EFA  0100               	movlb	0	; () banked
  5754  001EFC  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5755  001EFE  B4D8               	btfsc	status,2,c
  5756  001F00  D016               	goto	l8123
  5757                           
  5758                           ; BSR set to: 0
  5759                           ;sort.c: 343: if(!sensor_outputs[1]){
  5760  001F02  0100               	movlb	0	; () banked
  5761  001F04  51E4               	movf	(_sensor_outputs+2)& (0+255),w,b
  5762  001F06  0100               	movlb	0	; () banked
  5763  001F08  11E5               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5764  001F0A  A4D8               	btfss	status,2,c
  5765  001F0C  D008               	goto	l8119
  5766                           
  5767                           ; BSR set to: 0
  5768                           ;sort.c: 344: count_can_w_lab++;
  5769  001F0E  0101               	movlb	1	; () banked
  5770  001F10  4B25               	infsnz	_count_can_w_lab& (0+255),f,b
  5771  001F12  2B26               	incf	(_count_can_w_lab+1)& (0+255),f,b
  5772                           
  5773                           ; BSR set to: 1
  5774                           ;sort.c: 345: cur_can = 2;
  5775  001F14  0E00               	movlw	0
  5776  001F16  0101               	movlb	1	; () banked
  5777  001F18  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5778  001F1A  0E02               	movlw	2
  5779  001F1C  D007               	goto	L9
  5780  001F1E                     l8119:
  5781                           
  5782                           ;sort.c: 347: else{
  5783                           ;sort.c: 348: count_can_no_lab++;
  5784  001F1E  0101               	movlb	1	; () banked
  5785  001F20  4B23               	infsnz	_count_can_no_lab& (0+255),f,b
  5786  001F22  2B24               	incf	(_count_can_no_lab+1)& (0+255),f,b
  5787                           
  5788                           ; BSR set to: 1
  5789                           ;sort.c: 349: cur_can = 3;
  5790  001F24  0E00               	movlw	0
  5791  001F26  0101               	movlb	1	; () banked
  5792  001F28  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5793  001F2A  0E03               	movlw	3
  5794  001F2C                     L9:
  5795  001F2C  6F2B               	movwf	_cur_can& (0+255),b
  5796  001F2E                     l8123:
  5797  001F2E  0101               	movlb	1	; () banked
  5798  001F30  5135               	movf	_f_can_distributed& (0+255),w,b
  5799  001F32  0101               	movlb	1	; () banked
  5800  001F34  1136               	iorwf	(_f_can_distributed+1)& (0+255),w,b
  5801  001F36  B4D8               	btfsc	status,2,c
  5802  001F38  D7FA               	goto	l8123
  5803                           
  5804                           ; BSR set to: 1
  5805                           ;sort.c: 355: for(int i=0;i<10000;i++)
  5806                           
  5807                           ; BSR set to: 1
  5808  001F3A  0E00               	movlw	0
  5809  001F3C  0100               	movlb	0	; () banked
  5810  001F3E  6FA6               	movwf	(ID@i_1145+1)& (0+255),b
  5811  001F40  0E00               	movlw	0
  5812  001F42  6FA5               	movwf	ID@i_1145& (0+255),b
  5813  001F44                     l8127:
  5814                           
  5815                           ; BSR set to: 0
  5816  001F44  0100               	movlb	0	; () banked
  5817  001F46  BFA6               	btfsc	(ID@i_1145+1)& (0+255),7,b
  5818  001F48  D008               	goto	l864
  5819  001F4A  0E10               	movlw	16
  5820  001F4C  0100               	movlb	0	; () banked
  5821  001F4E  5DA5               	subwf	ID@i_1145& (0+255),w,b
  5822  001F50  0E27               	movlw	39
  5823  001F52  0100               	movlb	0	; () banked
  5824  001F54  59A6               	subwfb	(ID@i_1145+1)& (0+255),w,b
  5825  001F56  B0D8               	btfsc	status,0,c
  5826  001F58  D00D               	goto	l865
  5827  001F5A                     l864:
  5828                           
  5829                           ; BSR set to: 0
  5830                           ;sort.c: 356: {
  5831                           ;sort.c: 357: LATCbits.LATC0 = 1;
  5832  001F5A  808B               	bsf	3979,0,c	;volatile
  5833                           
  5834                           ; BSR set to: 0
  5835                           ;sort.c: 358: _delay((unsigned long)((10)*(32000000/4000000.0)));
  5836  001F5C  0E1A               	movlw	26
  5837  001F5E                     u10037:
  5838  001F5E  2EE8               	decfsz	wreg,f,c
  5839  001F60  D7FE               	bra	u10037
  5840  001F62  D000               	nop2	
  5841                           
  5842                           ;sort.c: 359: LATCbits.LATC0 = 0;
  5843  001F64  908B               	bcf	3979,0,c	;volatile
  5844                           
  5845                           ;sort.c: 360: _delay((unsigned long)((90)*(32000000/4000000.0)));
  5846  001F66  0EF0               	movlw	240
  5847  001F68                     u10047:
  5848  001F68  2EE8               	decfsz	wreg,f,c
  5849  001F6A  D7FE               	bra	u10047
  5850  001F6C  0100               	movlb	0	; () banked
  5851  001F6E  4BA5               	infsnz	ID@i_1145& (0+255),f,b
  5852  001F70  2BA6               	incf	(ID@i_1145+1)& (0+255),f,b
  5853  001F72  D7E8               	goto	l8127
  5854  001F74                     l865:
  5855                           
  5856                           ; BSR set to: 0
  5857                           ;sort.c: 361: }
  5858                           ;sort.c: 363: LATCbits.LATC0 = 0;
  5859  001F74  908B               	bcf	3979,0,c	;volatile
  5860                           
  5861                           ; BSR set to: 0
  5862                           ;sort.c: 365: f_can_coming_to_distribution = 1;
  5863  001F76  0E00               	movlw	0
  5864  001F78  0101               	movlb	1	; () banked
  5865  001F7A  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  5866  001F7C  0E01               	movlw	1
  5867  001F7E  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  5868                           
  5869                           ; BSR set to: 1
  5870                           ;sort.c: 366: _delay((unsigned long)((750)*(32000000/4000.0)));
  5871  001F80  0E1F               	movlw	31
  5872  001F82  0100               	movlb	0	; () banked
  5873  001F84  6F9C               	movwf	(??_ID+1)& (0+255),b
  5874  001F86  0E71               	movlw	113
  5875  001F88  0100               	movlb	0	; () banked
  5876  001F8A  6F9B               	movwf	??_ID& (0+255),b
  5877  001F8C  0E1E               	movlw	30
  5878  001F8E                     u10057:
  5879  001F8E  2EE8               	decfsz	wreg,f,c
  5880  001F90  D7FE               	bra	u10057
  5881  001F92  2F9B               	decfsz	??_ID& (0+255),f,b
  5882  001F94  D7FC               	bra	u10057
  5883  001F96  2F9C               	decfsz	(??_ID+1)& (0+255),f,b
  5884  001F98  D7FA               	bra	u10057
  5885  001F9A  F000               	nop	
  5886                           
  5887                           ;sort.c: 367: LATCbits.LATC0 = 1;
  5888  001F9C  808B               	bsf	3979,0,c	;volatile
  5889                           
  5890                           ;sort.c: 378: f_can_coming_to_ID = 0;
  5891  001F9E  0E00               	movlw	0
  5892  001FA0  0101               	movlb	1	; () banked
  5893  001FA2  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  5894  001FA4  0E00               	movlw	0
  5895  001FA6  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  5896  001FA8  0012               	return	
  5897  001FAA                     __end_of_ID:
  5898                           	opt stack 0
  5899                           tblptru	equ	0xFF8
  5900                           tblptrh	equ	0xFF7
  5901                           tblptrl	equ	0xFF6
  5902                           tablat	equ	0xFF5
  5903                           prodh	equ	0xFF4
  5904                           prodl	equ	0xFF3
  5905                           postinc0	equ	0xFEE
  5906                           wreg	equ	0xFE8
  5907                           postdec1	equ	0xFE5
  5908                           fsr1l	equ	0xFE1
  5909                           indf2	equ	0xFDF
  5910                           postinc2	equ	0xFDE
  5911                           postdec2	equ	0xFDD
  5912                           fsr2h	equ	0xFDA
  5913                           fsr2l	equ	0xFD9
  5914                           status	equ	0xFD8
  5915                           
  5916 ;; *************** function _readCOND *****************
  5917 ;; Defined at:
  5918 ;;		line 35 in file "ADCFunctionality.c"
  5919 ;; Parameters:    Size  Location     Type
  5920 ;;		None
  5921 ;; Auto vars:     Size  Location     Type
  5922 ;;  res             2    4[BANK0 ] int 
  5923 ;; Return value:  Size  Location     Type
  5924 ;;                  1    wreg      void 
  5925 ;; Registers used:
  5926 ;;		wreg, status,2, status,0, cstack
  5927 ;; Tracked objects:
  5928 ;;		On entry : 0/0
  5929 ;;		On exit  : 0/0
  5930 ;;		Unchanged: 0/0
  5931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5933 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5934 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5935 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5936 ;;Total ram usage:        4 bytes
  5937 ;; Hardware stack levels used:    1
  5938 ;; Hardware stack levels required when called:    8
  5939 ;; This function calls:
  5940 ;;		_readADC
  5941 ;; This function is called by:
  5942 ;;		_ID
  5943 ;; This function uses a non-reentrant model
  5944 ;;
  5945                           
  5946                           	psect	text9
  5947  005406                     __ptext9:
  5948                           	opt stack 0
  5949  005406                     _readCOND:
  5950                           	opt stack 20
  5951                           
  5952                           ;ADCFunctionality.c: 36: readADC(2);
  5953                           
  5954                           ; BSR set to: 1
  5955                           ;incstack = 0
  5956  005406  0E02               	movlw	2
  5957  005408  ECA6  F02C         	call	_readADC
  5958                           
  5959                           ;ADCFunctionality.c: 37: int res = ADRESH<<8 | ADRESL;
  5960  00540C  50C3               	movf	4035,w,c	;volatile
  5961  00540E  CFC4 F082          	movff	4036,??_readCOND	;volatile
  5962  005412  0100               	movlb	0	; () banked
  5963  005414  6B83               	clrf	(??_readCOND+1)& (0+255),b
  5964  005416  C082  F083         	movff	??_readCOND,??_readCOND+1
  5965  00541A  0100               	movlb	0	; () banked
  5966  00541C  6B82               	clrf	??_readCOND& (0+255),b
  5967  00541E  0100               	movlb	0	; () banked
  5968  005420  1182               	iorwf	??_readCOND& (0+255),w,b
  5969  005422  0100               	movlb	0	; () banked
  5970  005424  6F84               	movwf	readCOND@res& (0+255),b
  5971  005426  0100               	movlb	0	; () banked
  5972  005428  5183               	movf	(??_readCOND+1)& (0+255),w,b
  5973  00542A  0100               	movlb	0	; () banked
  5974  00542C  6F85               	movwf	(readCOND@res+1)& (0+255),b
  5975                           
  5976                           ; BSR set to: 0
  5977                           ;ADCFunctionality.c: 38: COND_signal = (res > 300) ? 1 : 0;
  5978  00542E  0100               	movlb	0	; () banked
  5979  005430  BF85               	btfsc	(readCOND@res+1)& (0+255),7,b
  5980  005432  D00A               	goto	u5880
  5981  005434  0E2D               	movlw	45
  5982  005436  0100               	movlb	0	; () banked
  5983  005438  5D84               	subwf	readCOND@res& (0+255),w,b
  5984  00543A  0E01               	movlw	1
  5985  00543C  0100               	movlb	0	; () banked
  5986  00543E  5985               	subwfb	(readCOND@res+1)& (0+255),w,b
  5987  005440  A0D8               	btfss	status,0,c
  5988  005442  D002               	goto	u5880
  5989  005444  0E01               	movlw	1
  5990  005446  D001               	goto	u5890
  5991  005448                     u5880:
  5992  005448  0E00               	movlw	0
  5993  00544A                     u5890:
  5994  00544A  0100               	movlb	0	; () banked
  5995  00544C  6FE6               	movwf	_COND_signal& (0+255),b
  5996  00544E  6BE7               	clrf	(_COND_signal+1)& (0+255),b
  5997                           
  5998                           ; BSR set to: 0
  5999  005450  0012               	return		;funcret
  6000  005452                     __end_of_readCOND:
  6001                           	opt stack 0
  6002                           tblptru	equ	0xFF8
  6003                           tblptrh	equ	0xFF7
  6004                           tblptrl	equ	0xFF6
  6005                           tablat	equ	0xFF5
  6006                           prodh	equ	0xFF4
  6007                           prodl	equ	0xFF3
  6008                           postinc0	equ	0xFEE
  6009                           wreg	equ	0xFE8
  6010                           postdec1	equ	0xFE5
  6011                           fsr1l	equ	0xFE1
  6012                           indf2	equ	0xFDF
  6013                           postinc2	equ	0xFDE
  6014                           postdec2	equ	0xFDD
  6015                           fsr2h	equ	0xFDA
  6016                           fsr2l	equ	0xFD9
  6017                           status	equ	0xFD8
  6018                           
  6019 ;; *************** function _delay_ms *****************
  6020 ;; Defined at:
  6021 ;;		line 670 in file "sort.c"
  6022 ;; Parameters:    Size  Location     Type
  6023 ;;  milliseconds    1    wreg     unsigned char 
  6024 ;; Auto vars:     Size  Location     Type
  6025 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  6026 ;; Return value:  Size  Location     Type
  6027 ;;                  1    wreg      void 
  6028 ;; Registers used:
  6029 ;;		wreg, status,2, status,0, cstack
  6030 ;; Tracked objects:
  6031 ;;		On entry : 0/0
  6032 ;;		On exit  : 0/0
  6033 ;;		Unchanged: 0/0
  6034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6036 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6037 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6038 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6039 ;;Total ram usage:        2 bytes
  6040 ;; Hardware stack levels used:    1
  6041 ;; Hardware stack levels required when called:    7
  6042 ;; This function calls:
  6043 ;;		Nothing
  6044 ;; This function is called by:
  6045 ;;		_Loading
  6046 ;;		_ID
  6047 ;; This function uses a non-reentrant model
  6048 ;;
  6049                           
  6050                           	psect	text10
  6051  0059A2                     __ptext10:
  6052                           	opt stack 0
  6053  0059A2                     _delay_ms:
  6054                           	opt stack 21
  6055                           
  6056                           ; BSR set to: 0
  6057                           ;incstack = 0
  6058                           ;delay_ms@milliseconds stored from wreg
  6059  0059A2  0100               	movlb	0	; () banked
  6060  0059A4  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  6061                           
  6062                           ;sort.c: 671: while(milliseconds > 0)
  6063  0059A6  D00B               	goto	l7371
  6064  0059A8                     l7367:
  6065                           
  6066                           ;sort.c: 672: {
  6067                           ;sort.c: 673: milliseconds--;
  6068  0059A8  0100               	movlb	0	; () banked
  6069  0059AA  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  6070                           
  6071                           ; BSR set to: 0
  6072                           ;sort.c: 674: _delay((unsigned long)((990)*(32000000/4000000.0)));
  6073  0059AC  0E0B               	movlw	11
  6074  0059AE  0100               	movlb	0	; () banked
  6075  0059B0  6F80               	movwf	??_delay_ms& (0+255),b
  6076  0059B2  0E47               	movlw	71
  6077  0059B4                     u10067:
  6078  0059B4  2EE8               	decfsz	wreg,f,c
  6079  0059B6  D7FE               	bra	u10067
  6080  0059B8  2F80               	decfsz	??_delay_ms& (0+255),f,b
  6081  0059BA  D7FC               	bra	u10067
  6082  0059BC  D000               	nop2	
  6083  0059BE                     l7371:
  6084  0059BE  0100               	movlb	0	; () banked
  6085  0059C0  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  6086  0059C2  0100               	movlb	0	; () banked
  6087  0059C4  B4D8               	btfsc	status,2,c
  6088  0059C6  0012               	return	
  6089  0059C8  D7EF               	goto	l7367
  6090  0059CA                     __end_of_delay_ms:
  6091                           	opt stack 0
  6092                           tblptru	equ	0xFF8
  6093                           tblptrh	equ	0xFF7
  6094                           tblptrl	equ	0xFF6
  6095                           tablat	equ	0xFF5
  6096                           prodh	equ	0xFF4
  6097                           prodl	equ	0xFF3
  6098                           postinc0	equ	0xFEE
  6099                           wreg	equ	0xFE8
  6100                           postdec1	equ	0xFE5
  6101                           fsr1l	equ	0xFE1
  6102                           indf2	equ	0xFDF
  6103                           postinc2	equ	0xFDE
  6104                           postdec2	equ	0xFDD
  6105                           fsr2h	equ	0xFDA
  6106                           fsr2l	equ	0xFD9
  6107                           status	equ	0xFD8
  6108                           
  6109 ;; *************** function ___ftge *****************
  6110 ;; Defined at:
  6111 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  6112 ;; Parameters:    Size  Location     Type
  6113 ;;  ff1             3   18[BANK0 ] float 
  6114 ;;  ff2             3   21[BANK0 ] float 
  6115 ;; Auto vars:     Size  Location     Type
  6116 ;;		None
  6117 ;; Return value:  Size  Location     Type
  6118 ;;		None               void
  6119 ;; Registers used:
  6120 ;;		wreg, status,2, status,0
  6121 ;; Tracked objects:
  6122 ;;		On entry : 0/0
  6123 ;;		On exit  : 0/0
  6124 ;;		Unchanged: 0/0
  6125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6126 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6127 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6128 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6129 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6130 ;;Total ram usage:        9 bytes
  6131 ;; Hardware stack levels used:    1
  6132 ;; Hardware stack levels required when called:    7
  6133 ;; This function calls:
  6134 ;;		Nothing
  6135 ;; This function is called by:
  6136 ;;		_ID
  6137 ;; This function uses a non-reentrant model
  6138 ;;
  6139                           
  6140                           	psect	text11
  6141  0047C8                     __ptext11:
  6142                           	opt stack 0
  6143  0047C8                     ___ftge:
  6144                           	opt stack 21
  6145                           
  6146                           ; BSR set to: 0
  6147                           ;incstack = 0
  6148  0047C8  0100               	movlb	0	; () banked
  6149  0047CA  AF94               	btfss	(___ftge@ff1+2)& (0+255),7,b
  6150  0047CC  D01D               	goto	l7489
  6151                           
  6152                           ; BSR set to: 0
  6153  0047CE  C092  F098         	movff	___ftge@ff1,??___ftge
  6154  0047D2  C093  F099         	movff	___ftge@ff1+1,??___ftge+1
  6155  0047D6  C094  F09A         	movff	___ftge@ff1+2,??___ftge+2
  6156  0047DA  0100               	movlb	0	; () banked
  6157  0047DC  1F98               	comf	??___ftge& (0+255),f,b
  6158  0047DE  1F99               	comf	(??___ftge+1)& (0+255),f,b
  6159  0047E0  1F9A               	comf	(??___ftge+2)& (0+255),f,b
  6160  0047E2  2B98               	incf	??___ftge& (0+255),f,b
  6161  0047E4  0E00               	movlw	0
  6162  0047E6  2399               	addwfc	(??___ftge+1)& (0+255),f,b
  6163  0047E8  239A               	addwfc	(??___ftge+2)& (0+255),f,b
  6164  0047EA  0E00               	movlw	0
  6165  0047EC  0100               	movlb	0	; () banked
  6166  0047EE  2598               	addwf	??___ftge& (0+255),w,b
  6167  0047F0  0100               	movlb	0	; () banked
  6168  0047F2  6F92               	movwf	___ftge@ff1& (0+255),b
  6169  0047F4  0E00               	movlw	0
  6170  0047F6  0100               	movlb	0	; () banked
  6171  0047F8  2199               	addwfc	(??___ftge+1)& (0+255),w,b
  6172  0047FA  0100               	movlb	0	; () banked
  6173  0047FC  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  6174  0047FE  0E80               	movlw	128
  6175  004800  0100               	movlb	0	; () banked
  6176  004802  219A               	addwfc	(??___ftge+2)& (0+255),w,b
  6177  004804  0100               	movlb	0	; () banked
  6178  004806  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  6179  004808                     l7489:
  6180                           
  6181                           ; BSR set to: 0
  6182  004808  0100               	movlb	0	; () banked
  6183  00480A  AF97               	btfss	(___ftge@ff2+2)& (0+255),7,b
  6184  00480C  D01D               	goto	l7493
  6185                           
  6186                           ; BSR set to: 0
  6187  00480E  C095  F098         	movff	___ftge@ff2,??___ftge
  6188  004812  C096  F099         	movff	___ftge@ff2+1,??___ftge+1
  6189  004816  C097  F09A         	movff	___ftge@ff2+2,??___ftge+2
  6190  00481A  0100               	movlb	0	; () banked
  6191  00481C  1F98               	comf	??___ftge& (0+255),f,b
  6192  00481E  1F99               	comf	(??___ftge+1)& (0+255),f,b
  6193  004820  1F9A               	comf	(??___ftge+2)& (0+255),f,b
  6194  004822  2B98               	incf	??___ftge& (0+255),f,b
  6195  004824  0E00               	movlw	0
  6196  004826  2399               	addwfc	(??___ftge+1)& (0+255),f,b
  6197  004828  239A               	addwfc	(??___ftge+2)& (0+255),f,b
  6198  00482A  0E00               	movlw	0
  6199  00482C  0100               	movlb	0	; () banked
  6200  00482E  2598               	addwf	??___ftge& (0+255),w,b
  6201  004830  0100               	movlb	0	; () banked
  6202  004832  6F95               	movwf	___ftge@ff2& (0+255),b
  6203  004834  0E00               	movlw	0
  6204  004836  0100               	movlb	0	; () banked
  6205  004838  2199               	addwfc	(??___ftge+1)& (0+255),w,b
  6206  00483A  0100               	movlb	0	; () banked
  6207  00483C  6F96               	movwf	(___ftge@ff2+1)& (0+255),b
  6208  00483E  0E80               	movlw	128
  6209  004840  0100               	movlb	0	; () banked
  6210  004842  219A               	addwfc	(??___ftge+2)& (0+255),w,b
  6211  004844  0100               	movlb	0	; () banked
  6212  004846  6F97               	movwf	(___ftge@ff2+2)& (0+255),b
  6213  004848                     l7493:
  6214                           
  6215                           ; BSR set to: 0
  6216  004848  0E00               	movlw	0
  6217  00484A  0100               	movlb	0	; () banked
  6218  00484C  1B92               	xorwf	___ftge@ff1& (0+255),f,b
  6219  00484E  0E00               	movlw	0
  6220  004850  0100               	movlb	0	; () banked
  6221  004852  1B93               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  6222  004854  0E80               	movlw	128
  6223  004856  0100               	movlb	0	; () banked
  6224  004858  1B94               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  6225                           
  6226                           ; BSR set to: 0
  6227  00485A  0E00               	movlw	0
  6228  00485C  0100               	movlb	0	; () banked
  6229  00485E  1B95               	xorwf	___ftge@ff2& (0+255),f,b
  6230  004860  0E00               	movlw	0
  6231  004862  0100               	movlb	0	; () banked
  6232  004864  1B96               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  6233  004866  0E80               	movlw	128
  6234  004868  0100               	movlb	0	; () banked
  6235  00486A  1B97               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  6236  00486C  0100               	movlb	0	; () banked
  6237  00486E  5195               	movf	___ftge@ff2& (0+255),w,b
  6238  004870  0100               	movlb	0	; () banked
  6239  004872  5D92               	subwf	___ftge@ff1& (0+255),w,b
  6240  004874  0100               	movlb	0	; () banked
  6241  004876  5196               	movf	(___ftge@ff2+1)& (0+255),w,b
  6242  004878  0100               	movlb	0	; () banked
  6243  00487A  5993               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  6244  00487C  0100               	movlb	0	; () banked
  6245  00487E  5197               	movf	(___ftge@ff2+2)& (0+255),w,b
  6246  004880  0100               	movlb	0	; () banked
  6247  004882  5994               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  6248  004884  B0D8               	btfsc	status,0,c
  6249  004886  D002               	goto	l7499
  6250                           
  6251                           ; BSR set to: 0
  6252  004888  90D8               	bcf	status,0,c
  6253  00488A  0012               	return	
  6254  00488C                     l7499:
  6255                           
  6256                           ; BSR set to: 0
  6257  00488C  80D8               	bsf	status,0,c
  6258                           
  6259                           ; BSR set to: 0
  6260  00488E  0012               	return	
  6261  004890                     __end_of___ftge:
  6262                           	opt stack 0
  6263                           tblptru	equ	0xFF8
  6264                           tblptrh	equ	0xFF7
  6265                           tblptrl	equ	0xFF6
  6266                           tablat	equ	0xFF5
  6267                           prodh	equ	0xFF4
  6268                           prodl	equ	0xFF3
  6269                           postinc0	equ	0xFEE
  6270                           wreg	equ	0xFE8
  6271                           postdec1	equ	0xFE5
  6272                           fsr1l	equ	0xFE1
  6273                           indf2	equ	0xFDF
  6274                           postinc2	equ	0xFDE
  6275                           postdec2	equ	0xFDD
  6276                           fsr2h	equ	0xFDA
  6277                           fsr2l	equ	0xFD9
  6278                           status	equ	0xFD8
  6279                           
  6280 ;; *************** function ___awtoft *****************
  6281 ;; Defined at:
  6282 ;;		line 32 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  6283 ;; Parameters:    Size  Location     Type
  6284 ;;  c               2   14[BANK0 ] int 
  6285 ;; Auto vars:     Size  Location     Type
  6286 ;;  sign            1   17[BANK0 ] unsigned char 
  6287 ;; Return value:  Size  Location     Type
  6288 ;;                  3   14[BANK0 ] float 
  6289 ;; Registers used:
  6290 ;;		wreg, status,2, status,0, cstack
  6291 ;; Tracked objects:
  6292 ;;		On entry : 0/0
  6293 ;;		On exit  : 0/0
  6294 ;;		Unchanged: 0/0
  6295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6296 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6297 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6299 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6300 ;;Total ram usage:        4 bytes
  6301 ;; Hardware stack levels used:    1
  6302 ;; Hardware stack levels required when called:    8
  6303 ;; This function calls:
  6304 ;;		___ftpack
  6305 ;; This function is called by:
  6306 ;;		_ID
  6307 ;; This function uses a non-reentrant model
  6308 ;;
  6309                           
  6310                           	psect	text12
  6311  0054E4                     __ptext12:
  6312                           	opt stack 0
  6313  0054E4                     ___awtoft:
  6314                           	opt stack 20
  6315                           
  6316                           ; BSR set to: 0
  6317                           ;incstack = 0
  6318  0054E4  0E00               	movlw	0
  6319  0054E6  0100               	movlb	0	; () banked
  6320  0054E8  6F91               	movwf	___awtoft@sign& (0+255),b
  6321                           
  6322                           ; BSR set to: 0
  6323  0054EA  0100               	movlb	0	; () banked
  6324  0054EC  AF8F               	btfss	(___awtoft@c+1)& (0+255),7,b
  6325  0054EE  D008               	goto	l7481
  6326                           
  6327                           ; BSR set to: 0
  6328  0054F0  0100               	movlb	0	; () banked
  6329  0054F2  6D8E               	negf	___awtoft@c& (0+255),b
  6330  0054F4  1F8F               	comf	(___awtoft@c+1)& (0+255),f,b
  6331  0054F6  B0D8               	btfsc	status,0,c
  6332  0054F8  2B8F               	incf	(___awtoft@c+1)& (0+255),f,b
  6333                           
  6334                           ; BSR set to: 0
  6335  0054FA  0E01               	movlw	1
  6336  0054FC  0100               	movlb	0	; () banked
  6337  0054FE  6F91               	movwf	___awtoft@sign& (0+255),b
  6338  005500                     l7481:
  6339                           
  6340                           ; BSR set to: 0
  6341  005500  C08E  F080         	movff	___awtoft@c,___ftpack@arg
  6342  005504  C08F  F081         	movff	___awtoft@c+1,___ftpack@arg+1
  6343  005508  0100               	movlb	0	; () banked
  6344  00550A  6B82               	clrf	(___ftpack@arg+2)& (0+255),b
  6345  00550C  0E8E               	movlw	142
  6346  00550E  0100               	movlb	0	; () banked
  6347  005510  6F83               	movwf	___ftpack@exp& (0+255),b
  6348  005512  C091  F084         	movff	___awtoft@sign,___ftpack@sign
  6349  005516  ECA6  F020         	call	___ftpack	;wreg free
  6350  00551A  C080  F08E         	movff	?___ftpack,?___awtoft
  6351  00551E  C081  F08F         	movff	?___ftpack+1,?___awtoft+1
  6352  005522  C082  F090         	movff	?___ftpack+2,?___awtoft+2
  6353  005526  0012               	return	
  6354  005528                     __end_of___awtoft:
  6355                           	opt stack 0
  6356                           tblptru	equ	0xFF8
  6357                           tblptrh	equ	0xFF7
  6358                           tblptrl	equ	0xFF6
  6359                           tablat	equ	0xFF5
  6360                           prodh	equ	0xFF4
  6361                           prodl	equ	0xFF3
  6362                           postinc0	equ	0xFEE
  6363                           wreg	equ	0xFE8
  6364                           postdec1	equ	0xFE5
  6365                           fsr1l	equ	0xFE1
  6366                           indf2	equ	0xFDF
  6367                           postinc2	equ	0xFDE
  6368                           postdec2	equ	0xFDD
  6369                           fsr2h	equ	0xFDA
  6370                           fsr2l	equ	0xFD9
  6371                           status	equ	0xFD8
  6372                           
  6373 ;; *************** function ___ftpack *****************
  6374 ;; Defined at:
  6375 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  6376 ;; Parameters:    Size  Location     Type
  6377 ;;  arg             3    0[BANK0 ] unsigned um
  6378 ;;  exp             1    3[BANK0 ] unsigned char 
  6379 ;;  sign            1    4[BANK0 ] unsigned char 
  6380 ;; Auto vars:     Size  Location     Type
  6381 ;;		None
  6382 ;; Return value:  Size  Location     Type
  6383 ;;                  3    0[BANK0 ] float 
  6384 ;; Registers used:
  6385 ;;		wreg, status,2, status,0
  6386 ;; Tracked objects:
  6387 ;;		On entry : 0/0
  6388 ;;		On exit  : 0/0
  6389 ;;		Unchanged: 0/0
  6390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6391 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6393 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6394 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6395 ;;Total ram usage:        8 bytes
  6396 ;; Hardware stack levels used:    1
  6397 ;; Hardware stack levels required when called:    7
  6398 ;; This function calls:
  6399 ;;		Nothing
  6400 ;; This function is called by:
  6401 ;;		___awtoft
  6402 ;; This function uses a non-reentrant model
  6403 ;;
  6404                           
  6405                           	psect	text13
  6406  00414C                     __ptext13:
  6407                           	opt stack 0
  6408  00414C                     ___ftpack:
  6409                           	opt stack 20
  6410                           
  6411                           ;incstack = 0
  6412  00414C  0100               	movlb	0	; () banked
  6413  00414E  5183               	movf	___ftpack@exp& (0+255),w,b
  6414  004150  0100               	movlb	0	; () banked
  6415  004152  B4D8               	btfsc	status,2,c
  6416  004154  D008               	goto	l6865
  6417                           
  6418                           ; BSR set to: 0
  6419  004156  0100               	movlb	0	; () banked
  6420  004158  5180               	movf	___ftpack@arg& (0+255),w,b
  6421  00415A  0100               	movlb	0	; () banked
  6422  00415C  1181               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  6423  00415E  0100               	movlb	0	; () banked
  6424  004160  1182               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  6425  004162  A4D8               	btfss	status,2,c
  6426  004164  D011               	goto	l6871
  6427  004166                     l6865:
  6428                           
  6429                           ; BSR set to: 0
  6430  004166  0E00               	movlw	0
  6431  004168  0100               	movlb	0	; () banked
  6432  00416A  6F80               	movwf	?___ftpack& (0+255),b
  6433  00416C  0E00               	movlw	0
  6434  00416E  0100               	movlb	0	; () banked
  6435  004170  6F81               	movwf	(?___ftpack+1)& (0+255),b
  6436  004172  0E00               	movlw	0
  6437  004174  0100               	movlb	0	; () banked
  6438  004176  6F82               	movwf	(?___ftpack+2)& (0+255),b
  6439                           
  6440                           ; BSR set to: 0
  6441  004178  0012               	return	
  6442  00417A                     l6869:
  6443                           
  6444                           ; BSR set to: 0
  6445  00417A  0100               	movlb	0	; () banked
  6446  00417C  2B83               	incf	___ftpack@exp& (0+255),f,b
  6447  00417E  0100               	movlb	0	; () banked
  6448  004180  90D8               	bcf	status,0,c
  6449  004182  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  6450  004184  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  6451  004186  3380               	rrcf	___ftpack@arg& (0+255),f,b
  6452  004188                     l6871:
  6453                           
  6454                           ; BSR set to: 0
  6455  004188  0E00               	movlw	0
  6456  00418A  0100               	movlb	0	; () banked
  6457  00418C  1580               	andwf	___ftpack@arg& (0+255),w,b
  6458  00418E  0100               	movlb	0	; () banked
  6459  004190  6F85               	movwf	??___ftpack& (0+255),b
  6460  004192  0E00               	movlw	0
  6461  004194  0100               	movlb	0	; () banked
  6462  004196  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  6463  004198  0100               	movlb	0	; () banked
  6464  00419A  6F86               	movwf	(??___ftpack+1)& (0+255),b
  6465  00419C  0EFE               	movlw	254
  6466  00419E  0100               	movlb	0	; () banked
  6467  0041A0  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  6468  0041A2  0100               	movlb	0	; () banked
  6469  0041A4  6F87               	movwf	(??___ftpack+2)& (0+255),b
  6470  0041A6  0100               	movlb	0	; () banked
  6471  0041A8  5185               	movf	??___ftpack& (0+255),w,b
  6472  0041AA  0100               	movlb	0	; () banked
  6473  0041AC  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  6474  0041AE  0100               	movlb	0	; () banked
  6475  0041B0  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  6476  0041B2  B4D8               	btfsc	status,2,c
  6477  0041B4  D011               	goto	l6877
  6478  0041B6  D7E1               	goto	l6869
  6479  0041B8                     l6873:
  6480                           
  6481                           ; BSR set to: 0
  6482  0041B8  0100               	movlb	0	; () banked
  6483  0041BA  2B83               	incf	___ftpack@exp& (0+255),f,b
  6484                           
  6485                           ; BSR set to: 0
  6486  0041BC  0E01               	movlw	1
  6487  0041BE  0100               	movlb	0	; () banked
  6488  0041C0  2780               	addwf	___ftpack@arg& (0+255),f,b
  6489  0041C2  0E00               	movlw	0
  6490  0041C4  0100               	movlb	0	; () banked
  6491  0041C6  2381               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  6492  0041C8  0E00               	movlw	0
  6493  0041CA  0100               	movlb	0	; () banked
  6494  0041CC  2382               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  6495  0041CE  0100               	movlb	0	; () banked
  6496  0041D0  90D8               	bcf	status,0,c
  6497  0041D2  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  6498  0041D4  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  6499  0041D6  3380               	rrcf	___ftpack@arg& (0+255),f,b
  6500  0041D8                     l6877:
  6501                           
  6502                           ; BSR set to: 0
  6503  0041D8  0E00               	movlw	0
  6504  0041DA  0100               	movlb	0	; () banked
  6505  0041DC  1580               	andwf	___ftpack@arg& (0+255),w,b
  6506  0041DE  0100               	movlb	0	; () banked
  6507  0041E0  6F85               	movwf	??___ftpack& (0+255),b
  6508  0041E2  0E00               	movlw	0
  6509  0041E4  0100               	movlb	0	; () banked
  6510  0041E6  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  6511  0041E8  0100               	movlb	0	; () banked
  6512  0041EA  6F86               	movwf	(??___ftpack+1)& (0+255),b
  6513  0041EC  0EFF               	movlw	255
  6514  0041EE  0100               	movlb	0	; () banked
  6515  0041F0  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  6516  0041F2  0100               	movlb	0	; () banked
  6517  0041F4  6F87               	movwf	(??___ftpack+2)& (0+255),b
  6518  0041F6  0100               	movlb	0	; () banked
  6519  0041F8  5185               	movf	??___ftpack& (0+255),w,b
  6520  0041FA  0100               	movlb	0	; () banked
  6521  0041FC  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  6522  0041FE  0100               	movlb	0	; () banked
  6523  004200  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  6524  004202  B4D8               	btfsc	status,2,c
  6525  004204  D008               	goto	l6881
  6526  004206  D7D8               	goto	l6873
  6527  004208                     l6879:
  6528                           
  6529                           ; BSR set to: 0
  6530  004208  0100               	movlb	0	; () banked
  6531  00420A  0783               	decf	___ftpack@exp& (0+255),f,b
  6532  00420C  0100               	movlb	0	; () banked
  6533  00420E  90D8               	bcf	status,0,c
  6534  004210  3780               	rlcf	___ftpack@arg& (0+255),f,b
  6535  004212  3781               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  6536  004214  3782               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  6537  004216                     l6881:
  6538                           
  6539                           ; BSR set to: 0
  6540  004216  0100               	movlb	0	; () banked
  6541  004218  BF81               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  6542  00421A  D004               	goto	l1781
  6543                           
  6544                           ; BSR set to: 0
  6545  00421C  0E02               	movlw	2
  6546  00421E  0100               	movlb	0	; () banked
  6547  004220  6183               	cpfslt	___ftpack@exp& (0+255),b
  6548  004222  D7F2               	goto	l6879
  6549  004224                     l1781:
  6550                           
  6551                           ; BSR set to: 0
  6552  004224  0100               	movlb	0	; () banked
  6553  004226  B183               	btfsc	___ftpack@exp& (0+255),0,b
  6554  004228  D002               	goto	l6887
  6555                           
  6556                           ; BSR set to: 0
  6557  00422A  0100               	movlb	0	; () banked
  6558  00422C  9F81               	bcf	(___ftpack@arg+1)& (0+255),7,b
  6559  00422E                     l6887:
  6560                           
  6561                           ; BSR set to: 0
  6562  00422E  0100               	movlb	0	; () banked
  6563  004230  90D8               	bcf	status,0,c
  6564  004232  3383               	rrcf	___ftpack@exp& (0+255),f,b
  6565  004234  0100               	movlb	0	; () banked
  6566  004236  5183               	movf	___ftpack@exp& (0+255),w,b
  6567  004238  0100               	movlb	0	; () banked
  6568  00423A  1382               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  6569                           
  6570                           ; BSR set to: 0
  6571  00423C  0100               	movlb	0	; () banked
  6572  00423E  5184               	movf	___ftpack@sign& (0+255),w,b
  6573  004240  0100               	movlb	0	; () banked
  6574  004242  B4D8               	btfsc	status,2,c
  6575  004244  D002               	goto	l6893
  6576                           
  6577                           ; BSR set to: 0
  6578  004246  0100               	movlb	0	; () banked
  6579  004248  8F82               	bsf	(___ftpack@arg+2)& (0+255),7,b
  6580  00424A                     l6893:
  6581                           
  6582                           ; BSR set to: 0
  6583  00424A  C080  F080         	movff	___ftpack@arg,?___ftpack
  6584  00424E  C081  F081         	movff	___ftpack@arg+1,?___ftpack+1
  6585  004252  C082  F082         	movff	___ftpack@arg+2,?___ftpack+2
  6586  004256  0012               	return	
  6587  004258                     __end_of___ftpack:
  6588                           	opt stack 0
  6589                           tblptru	equ	0xFF8
  6590                           tblptrh	equ	0xFF7
  6591                           tblptrl	equ	0xFF6
  6592                           tablat	equ	0xFF5
  6593                           prodh	equ	0xFF4
  6594                           prodl	equ	0xFF3
  6595                           postinc0	equ	0xFEE
  6596                           wreg	equ	0xFE8
  6597                           postdec1	equ	0xFE5
  6598                           fsr1l	equ	0xFE1
  6599                           indf2	equ	0xFDF
  6600                           postinc2	equ	0xFDE
  6601                           postdec2	equ	0xFDD
  6602                           fsr2h	equ	0xFDA
  6603                           fsr2l	equ	0xFD9
  6604                           status	equ	0xFD8
  6605                           
  6606 ;; *************** function _Distribution *****************
  6607 ;; Defined at:
  6608 ;;		line 381 in file "sort.c"
  6609 ;; Parameters:    Size  Location     Type
  6610 ;;		None
  6611 ;; Auto vars:     Size  Location     Type
  6612 ;;		None
  6613 ;; Return value:  Size  Location     Type
  6614 ;;                  1    wreg      void 
  6615 ;; Registers used:
  6616 ;;		wreg, status,2, status,0, cstack
  6617 ;; Tracked objects:
  6618 ;;		On entry : 0/0
  6619 ;;		On exit  : 0/0
  6620 ;;		Unchanged: 0/0
  6621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6623 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6624 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6625 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6626 ;;Total ram usage:        2 bytes
  6627 ;; Hardware stack levels used:    1
  6628 ;; Hardware stack levels required when called:    8
  6629 ;; This function calls:
  6630 ;;		_updateServoPosition
  6631 ;; This function is called by:
  6632 ;;		_sort
  6633 ;; This function uses a non-reentrant model
  6634 ;;
  6635                           
  6636                           	psect	text14
  6637  004544                     __ptext14:
  6638                           	opt stack 0
  6639  004544                     _Distribution:
  6640                           	opt stack 21
  6641                           
  6642                           ;sort.c: 382: if(f_can_coming_to_distribution){
  6643                           
  6644                           ; BSR set to: 0
  6645                           ;incstack = 0
  6646  004544  0101               	movlb	1	; () banked
  6647  004546  5133               	movf	_f_can_coming_to_distribution& (0+255),w,b
  6648  004548  0101               	movlb	1	; () banked
  6649  00454A  1134               	iorwf	(_f_can_coming_to_distribution+1)& (0+255),w,b
  6650  00454C  B4D8               	btfsc	status,2,c
  6651  00454E  0012               	return	
  6652                           
  6653                           ; BSR set to: 1
  6654                           ;sort.c: 383: f_can_distributed = 0;
  6655  004550  0E00               	movlw	0
  6656  004552  0101               	movlb	1	; () banked
  6657  004554  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
  6658  004556  0E00               	movlw	0
  6659  004558  6F35               	movwf	_f_can_distributed& (0+255),b
  6660                           
  6661                           ;sort.c: 390: switch(cur_can){
  6662  00455A  D034               	goto	l8159
  6663  00455C                     l8149:
  6664                           
  6665                           ;sort.c: 392: updateServoPosition(500, 1);
  6666  00455C  0E01               	movlw	1
  6667  00455E  0100               	movlb	0	; () banked
  6668  004560  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6669  004562  0EF4               	movlw	244
  6670  004564  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6671  004566  0E00               	movlw	0
  6672  004568  0100               	movlb	0	; () banked
  6673  00456A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6674  00456C  0E01               	movlw	1
  6675  00456E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6676  004570  EC94  F026         	call	_updateServoPosition	;wreg free
  6677                           
  6678                           ;sort.c: 393: break;
  6679  004574  D03E               	goto	l8161
  6680  004576                     l8151:
  6681                           
  6682                           ;sort.c: 395: updateServoPosition(850, 1);
  6683  004576  0E03               	movlw	3
  6684  004578  0100               	movlb	0	; () banked
  6685  00457A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6686  00457C  0E52               	movlw	82
  6687  00457E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6688  004580  0E00               	movlw	0
  6689  004582  0100               	movlb	0	; () banked
  6690  004584  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6691  004586  0E01               	movlw	1
  6692  004588  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6693  00458A  EC94  F026         	call	_updateServoPosition	;wreg free
  6694                           
  6695                           ;sort.c: 396: break;
  6696  00458E  D031               	goto	l8161
  6697  004590                     l8153:
  6698                           
  6699                           ;sort.c: 398: updateServoPosition(1670, 1);
  6700  004590  0E06               	movlw	6
  6701  004592  0100               	movlb	0	; () banked
  6702  004594  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6703  004596  0E86               	movlw	134
  6704  004598  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6705  00459A  0E00               	movlw	0
  6706  00459C  0100               	movlb	0	; () banked
  6707  00459E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6708  0045A0  0E01               	movlw	1
  6709  0045A2  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6710  0045A4  EC94  F026         	call	_updateServoPosition	;wreg free
  6711                           
  6712                           ;sort.c: 399: break;
  6713  0045A8  D024               	goto	l8161
  6714  0045AA                     l8155:
  6715                           
  6716                           ;sort.c: 401: updateServoPosition(2400, 1);
  6717  0045AA  0E09               	movlw	9
  6718  0045AC  0100               	movlb	0	; () banked
  6719  0045AE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6720  0045B0  0E60               	movlw	96
  6721  0045B2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6722  0045B4  0E00               	movlw	0
  6723  0045B6  0100               	movlb	0	; () banked
  6724  0045B8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6725  0045BA  0E01               	movlw	1
  6726  0045BC  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6727  0045BE  EC94  F026         	call	_updateServoPosition	;wreg free
  6728                           
  6729                           ;sort.c: 405: }
  6730                           
  6731                           ;sort.c: 404: break;
  6732                           
  6733                           ;sort.c: 403: default:
  6734                           
  6735                           ;sort.c: 402: break;
  6736  0045C2  D017               	goto	l8161
  6737  0045C4                     l8159:
  6738  0045C4  C12B  F088         	movff	_cur_can,??_Distribution
  6739  0045C8  C12C  F089         	movff	_cur_can+1,??_Distribution+1
  6740                           
  6741                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6742                           ; Switch size 1, requested type "space"
  6743                           ; Number of cases is 1, Range of values is 0 to 0
  6744                           ; switch strategies available:
  6745                           ; Name         Instructions Cycles
  6746                           ; simple_byte            4     3 (average)
  6747                           ;	Chosen strategy is simple_byte
  6748  0045CC  0100               	movlb	0	; () banked
  6749  0045CE  5189               	movf	(??_Distribution+1)& (0+255),w,b
  6750  0045D0  0A00               	xorlw	0	; case 0
  6751  0045D2  A4D8               	btfss	status,2,c
  6752  0045D4  D00E               	goto	l8161
  6753                           
  6754                           ; BSR set to: 0
  6755                           ; Switch size 1, requested type "space"
  6756                           ; Number of cases is 4, Range of values is 0 to 3
  6757                           ; switch strategies available:
  6758                           ; Name         Instructions Cycles
  6759                           ; simple_byte           13     7 (average)
  6760                           ;	Chosen strategy is simple_byte
  6761  0045D6  0100               	movlb	0	; () banked
  6762  0045D8  5188               	movf	??_Distribution& (0+255),w,b
  6763  0045DA  0A00               	xorlw	0	; case 0
  6764  0045DC  B4D8               	btfsc	status,2,c
  6765  0045DE  D7BE               	goto	l8149
  6766  0045E0  0A01               	xorlw	1	; case 1
  6767  0045E2  B4D8               	btfsc	status,2,c
  6768  0045E4  D7C8               	goto	l8151
  6769  0045E6  0A03               	xorlw	3	; case 2
  6770  0045E8  B4D8               	btfsc	status,2,c
  6771  0045EA  D7D2               	goto	l8153
  6772  0045EC  0A01               	xorlw	1	; case 3
  6773  0045EE  B4D8               	btfsc	status,2,c
  6774  0045F0  D7DC               	goto	l8155
  6775  0045F2                     l8161:
  6776                           
  6777                           ;sort.c: 406: updateServoPosition(1050, 3);
  6778  0045F2  0E04               	movlw	4
  6779  0045F4  0100               	movlb	0	; () banked
  6780  0045F6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6781  0045F8  0E1A               	movlw	26
  6782  0045FA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6783  0045FC  0E00               	movlw	0
  6784  0045FE  0100               	movlb	0	; () banked
  6785  004600  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6786  004602  0E03               	movlw	3
  6787  004604  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6788  004606  EC94  F026         	call	_updateServoPosition	;wreg free
  6789                           
  6790                           ;sort.c: 407: servo_timer_target = 750;
  6791  00460A  0E02               	movlw	2
  6792  00460C  6E70               	movwf	_servo_timer_target+1,c	;volatile
  6793  00460E  0EEE               	movlw	238
  6794  004610  6E6F               	movwf	_servo_timer_target,c	;volatile
  6795                           
  6796                           ;sort.c: 408: f_panning_to_bin = 1;
  6797  004612  0E00               	movlw	0
  6798  004614  6E62               	movwf	_f_panning_to_bin+1,c	;volatile
  6799  004616  0E01               	movlw	1
  6800  004618  6E61               	movwf	_f_panning_to_bin,c	;volatile
  6801                           
  6802                           ;sort.c: 409: f_can_coming_to_distribution = 0;
  6803  00461A  0E00               	movlw	0
  6804  00461C  0101               	movlb	1	; () banked
  6805  00461E  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  6806  004620  0E00               	movlw	0
  6807  004622  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  6808  004624  0012               	return	
  6809  004626                     __end_of_Distribution:
  6810                           	opt stack 0
  6811                           tblptru	equ	0xFF8
  6812                           tblptrh	equ	0xFF7
  6813                           tblptrl	equ	0xFF6
  6814                           tablat	equ	0xFF5
  6815                           prodh	equ	0xFF4
  6816                           prodl	equ	0xFF3
  6817                           postinc0	equ	0xFEE
  6818                           wreg	equ	0xFE8
  6819                           postdec1	equ	0xFE5
  6820                           fsr1l	equ	0xFE1
  6821                           indf2	equ	0xFDF
  6822                           postinc2	equ	0xFDE
  6823                           postdec2	equ	0xFDD
  6824                           fsr2h	equ	0xFDA
  6825                           fsr2l	equ	0xFD9
  6826                           status	equ	0xFD8
  6827                           
  6828 ;; *************** function _machineConfig *****************
  6829 ;; Defined at:
  6830 ;;		line 15 in file "MachineConfig.c"
  6831 ;; Parameters:    Size  Location     Type
  6832 ;;		None
  6833 ;; Auto vars:     Size  Location     Type
  6834 ;;		None
  6835 ;; Return value:  Size  Location     Type
  6836 ;;                  1    wreg      void 
  6837 ;; Registers used:
  6838 ;;		wreg, status,2
  6839 ;; Tracked objects:
  6840 ;;		On entry : 0/0
  6841 ;;		On exit  : 0/0
  6842 ;;		Unchanged: 0/0
  6843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6845 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6847 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6848 ;;Total ram usage:        0 bytes
  6849 ;; Hardware stack levels used:    1
  6850 ;; Hardware stack levels required when called:    7
  6851 ;; This function calls:
  6852 ;;		Nothing
  6853 ;; This function is called by:
  6854 ;;		_main
  6855 ;; This function uses a non-reentrant model
  6856 ;;
  6857                           
  6858                           	psect	text15
  6859  0050E2                     __ptext15:
  6860                           	opt stack 0
  6861  0050E2                     _machineConfig:
  6862                           	opt stack 23
  6863                           
  6864                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  6865                           
  6866                           ; BSR set to: 1
  6867                           ;incstack = 0
  6868  0050E2  0EF0               	movlw	240
  6869  0050E4  6ED3               	movwf	4051,c	;volatile
  6870                           
  6871                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  6872  0050E6  8C9B               	bsf	3995,6,c	;volatile
  6873                           
  6874                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  6875  0050E8  0E07               	movlw	7
  6876  0050EA  6E92               	movwf	3986,c	;volatile
  6877                           
  6878                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  6879  0050EC  0EF2               	movlw	242
  6880  0050EE  6E93               	movwf	3987,c	;volatile
  6881                           
  6882                           ;MachineConfig.c: 27: TRISC = 0x00;
  6883  0050F0  0E00               	movlw	0
  6884  0050F2  6E94               	movwf	3988,c	;volatile
  6885                           
  6886                           ;MachineConfig.c: 31: TRISD = 0x00;
  6887  0050F4  0E00               	movlw	0
  6888  0050F6  6E95               	movwf	3989,c	;volatile
  6889                           
  6890                           ;MachineConfig.c: 34: TRISE = 0x00;
  6891  0050F8  0E00               	movlw	0
  6892  0050FA  6E96               	movwf	3990,c	;volatile
  6893                           
  6894                           ;MachineConfig.c: 37: LATA = 0x00;
  6895  0050FC  0E00               	movlw	0
  6896  0050FE  6E89               	movwf	3977,c	;volatile
  6897                           
  6898                           ;MachineConfig.c: 38: LATB = 0x00;
  6899  005100  0E00               	movlw	0
  6900  005102  6E8A               	movwf	3978,c	;volatile
  6901                           
  6902                           ;MachineConfig.c: 39: LATC = 0x00;
  6903  005104  0E00               	movlw	0
  6904  005106  6E8B               	movwf	3979,c	;volatile
  6905                           
  6906                           ;MachineConfig.c: 40: LATD = 0x00;
  6907  005108  0E00               	movlw	0
  6908  00510A  6E8C               	movwf	3980,c	;volatile
  6909                           
  6910                           ;MachineConfig.c: 41: LATE = 0x00;
  6911  00510C  0E00               	movlw	0
  6912  00510E  6E8D               	movwf	3981,c	;volatile
  6913                           
  6914                           ;MachineConfig.c: 43: nRBPU = 0;
  6915  005110  9EF1               	bcf	intcon2,7,c	;volatile
  6916                           
  6917                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  6918  005112  0E00               	movlw	0
  6919  005114  6EC2               	movwf	4034,c	;volatile
  6920                           
  6921                           ;MachineConfig.c: 47: ADCON1 = 0b00001100;
  6922  005116  0E0C               	movlw	12
  6923  005118  6EC1               	movwf	4033,c	;volatile
  6924                           
  6925                           ;MachineConfig.c: 51: CVRCON = 0x00;
  6926  00511A  0E00               	movlw	0
  6927  00511C  6EB5               	movwf	4021,c	;volatile
  6928                           
  6929                           ;MachineConfig.c: 52: CMCONbits.CIS = 0;
  6930  00511E  96B4               	bcf	4020,3,c	;volatile
  6931                           
  6932                           ;MachineConfig.c: 53: ADCON2 = 0b10110001;
  6933  005120  0EB1               	movlw	177
  6934  005122  6EC0               	movwf	4032,c	;volatile
  6935                           
  6936                           ;MachineConfig.c: 56: INT1IE = 1;
  6937  005124  86F0               	bsf	intcon3,3,c	;volatile
  6938                           
  6939                           ;MachineConfig.c: 58: TMR0IE = 1;
  6940  005126  8AF2               	bsf	intcon,5,c	;volatile
  6941                           
  6942                           ;MachineConfig.c: 59: TMR1IE = 1;
  6943  005128  809D               	bsf	3997,0,c	;volatile
  6944                           
  6945                           ;MachineConfig.c: 60: TMR2IE = 1;
  6946  00512A  829D               	bsf	3997,1,c	;volatile
  6947                           
  6948                           ;MachineConfig.c: 61: TMR3IE = 1;
  6949  00512C  82A0               	bsf	4000,1,c	;volatile
  6950                           
  6951                           ;MachineConfig.c: 63: T1CON = 0b10110000;
  6952  00512E  0EB0               	movlw	176
  6953  005130  6ECD               	movwf	4045,c	;volatile
  6954                           
  6955                           ;MachineConfig.c: 64: T2CON = 0b01111011;
  6956  005132  0E7B               	movlw	123
  6957  005134  6ECA               	movwf	4042,c	;volatile
  6958                           
  6959                           ;MachineConfig.c: 65: PR2 = 0x22;
  6960  005136  0E22               	movlw	34
  6961  005138  6ECB               	movwf	4043,c	;volatile
  6962                           
  6963                           ;MachineConfig.c: 66: T3CON = 0b10110000;
  6964  00513A  0EB0               	movlw	176
  6965  00513C  6EB1               	movwf	4017,c	;volatile
  6966                           
  6967                           ;MachineConfig.c: 67: PEIE = 1;
  6968  00513E  8CF2               	bsf	intcon,6,c	;volatile
  6969                           
  6970                           ;MachineConfig.c: 68: ADIE = 0;
  6971  005140  9C9D               	bcf	3997,6,c	;volatile
  6972                           
  6973                           ;MachineConfig.c: 69: (INTCONbits.GIE = 0);
  6974  005142  9EF2               	bcf	intcon,7,c	;volatile
  6975  005144  0012               	return		;funcret
  6976  005146                     __end_of_machineConfig:
  6977                           	opt stack 0
  6978                           tblptru	equ	0xFF8
  6979                           tblptrh	equ	0xFF7
  6980                           tblptrl	equ	0xFF6
  6981                           tablat	equ	0xFF5
  6982                           prodh	equ	0xFF4
  6983                           prodl	equ	0xFF3
  6984                           intcon	equ	0xFF2
  6985                           intcon2	equ	0xFF1
  6986                           intcon3	equ	0xFF0
  6987                           postinc0	equ	0xFEE
  6988                           wreg	equ	0xFE8
  6989                           postdec1	equ	0xFE5
  6990                           fsr1l	equ	0xFE1
  6991                           indf2	equ	0xFDF
  6992                           postinc2	equ	0xFDE
  6993                           postdec2	equ	0xFDD
  6994                           fsr2h	equ	0xFDA
  6995                           fsr2l	equ	0xFD9
  6996                           status	equ	0xFD8
  6997                           
  6998 ;; *************** function _logRun *****************
  6999 ;; Defined at:
  7000 ;;		line 89 in file "EEPROM.c"
  7001 ;; Parameters:    Size  Location     Type
  7002 ;;		None
  7003 ;; Auto vars:     Size  Location     Type
  7004 ;;  byte_i          1   53[BANK0 ] unsigned char 
  7005 ;;  i               2   55[BANK0 ] int 
  7006 ;;  num             1   49[BANK0 ] unsigned char 
  7007 ;;  addr            2   57[BANK0 ] unsigned short 
  7008 ;;  byte11          1   54[BANK0 ] unsigned char 
  7009 ;;  byte3           1   52[BANK0 ] unsigned char 
  7010 ;;  byte2           1   51[BANK0 ] unsigned char 
  7011 ;;  byte1           1   50[BANK0 ] unsigned char 
  7012 ;; Return value:  Size  Location     Type
  7013 ;;                  1    wreg      void 
  7014 ;; Registers used:
  7015 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7016 ;; Tracked objects:
  7017 ;;		On entry : 0/0
  7018 ;;		On exit  : 0/0
  7019 ;;		Unchanged: 0/0
  7020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7022 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7024 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7025 ;;Total ram usage:       10 bytes
  7026 ;; Hardware stack levels used:    1
  7027 ;; Hardware stack levels required when called:   11
  7028 ;; This function calls:
  7029 ;;		_EEPROM_read
  7030 ;;		_EEPROM_write
  7031 ;; This function is called by:
  7032 ;;		_main
  7033 ;; This function uses a non-reentrant model
  7034 ;;
  7035                           
  7036                           	psect	text16
  7037  003EEA                     __ptext16:
  7038                           	opt stack 0
  7039  003EEA                     _logRun:
  7040                           	opt stack 19
  7041                           
  7042                           ;EEPROM.c: 102: sel = EEPROM_read(0);
  7043                           
  7044                           ;incstack = 0
  7045  003EEA  0E00               	movlw	0
  7046  003EEC  0100               	movlb	0	; () banked
  7047  003EEE  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  7048  003EF0  0E00               	movlw	0
  7049  003EF2  6F80               	movwf	EEPROM_read@address& (0+255),b
  7050  003EF4  EC7E  F02D         	call	_EEPROM_read	;wreg free
  7051  003EF8  0100               	movlb	0	; () banked
  7052  003EFA  6FFD               	movwf	_sel& (0+255),b
  7053                           
  7054                           ; BSR set to: 0
  7055                           ;EEPROM.c: 103: unsigned short addr = 1 + 11 * sel;
  7056  003EFC  0100               	movlb	0	; () banked
  7057  003EFE  51FD               	movf	_sel& (0+255),w,b
  7058  003F00  0D0B               	mullw	11
  7059  003F02  0E01               	movlw	1
  7060  003F04  24F3               	addwf	prodl,w,c
  7061  003F06  0100               	movlb	0	; () banked
  7062  003F08  6FB9               	movwf	logRun@addr& (0+255),b
  7063  003F0A  0E00               	movlw	0
  7064  003F0C  20F4               	addwfc	prodh,w,c
  7065  003F0E  0100               	movlb	0	; () banked
  7066  003F10  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  7067                           
  7068                           ; BSR set to: 0
  7069                           ;EEPROM.c: 106: if (sel < 3){
  7070  003F12  0E03               	movlw	3
  7071  003F14  0100               	movlb	0	; () banked
  7072  003F16  61FD               	cpfslt	_sel& (0+255),b
  7073  003F18  D00E               	goto	l9801
  7074                           
  7075                           ; BSR set to: 0
  7076                           ;EEPROM.c: 107: unsigned char num = sel+1;
  7077  003F1A  0100               	movlb	0	; () banked
  7078  003F1C  29FD               	incf	_sel& (0+255),w,b
  7079  003F1E  0100               	movlb	0	; () banked
  7080  003F20  6FB1               	movwf	logRun@num& (0+255),b
  7081                           
  7082                           ; BSR set to: 0
  7083                           ;EEPROM.c: 108: EEPROM_write(0, num);
  7084  003F22  0E00               	movlw	0
  7085  003F24  0100               	movlb	0	; () banked
  7086  003F26  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  7087  003F28  0E00               	movlw	0
  7088  003F2A  6FAB               	movwf	EEPROM_write@address& (0+255),b
  7089  003F2C  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  7090  003F30  EC2E  F022         	call	_EEPROM_write	;wreg free
  7091                           
  7092                           ;EEPROM.c: 109: }
  7093  003F34  D00A               	goto	l9803
  7094  003F36                     l9801:
  7095                           
  7096                           ;EEPROM.c: 110: else{
  7097                           ;EEPROM.c: 111: EEPROM_write(0, 0);
  7098  003F36  0E00               	movlw	0
  7099  003F38  0100               	movlb	0	; () banked
  7100  003F3A  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  7101  003F3C  0E00               	movlw	0
  7102  003F3E  6FAB               	movwf	EEPROM_write@address& (0+255),b
  7103  003F40  0E00               	movlw	0
  7104  003F42  0100               	movlb	0	; () banked
  7105  003F44  6FAD               	movwf	EEPROM_write@data& (0+255),b
  7106  003F46  EC2E  F022         	call	_EEPROM_write	;wreg free
  7107  003F4A                     l9803:
  7108                           
  7109                           ;EEPROM.c: 112: }
  7110                           ;EEPROM.c: 115: unsigned char byte1 = 0b10000000 | count_total;
  7111  003F4A  0100               	movlb	0	; () banked
  7112  003F4C  51FE               	movf	_count_total& (0+255),w,b
  7113  003F4E  0980               	iorlw	128
  7114  003F50  0100               	movlb	0	; () banked
  7115  003F52  6FB2               	movwf	logRun@byte1& (0+255),b
  7116                           
  7117                           ; BSR set to: 0
  7118                           ;EEPROM.c: 116: EEPROM_write(addr, byte1);
  7119  003F54  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7120  003F58  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7121  003F5C  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  7122  003F60  EC2E  F022         	call	_EEPROM_write	;wreg free
  7123                           
  7124                           ;EEPROM.c: 117: addr++;
  7125  003F64  0100               	movlb	0	; () banked
  7126  003F66  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7127  003F68  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7128                           
  7129                           ; BSR set to: 0
  7130                           ;EEPROM.c: 120: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  7131  003F6A  0101               	movlb	1	; () banked
  7132  003F6C  3927               	swapf	_count_pop_no_tab& (0+255),w,b
  7133  003F6E  0BF0               	andlw	240
  7134  003F70  0101               	movlb	1	; () banked
  7135  003F72  1129               	iorwf	_count_pop_w_tab& (0+255),w,b
  7136  003F74  0100               	movlb	0	; () banked
  7137  003F76  6FB3               	movwf	logRun@byte2& (0+255),b
  7138                           
  7139                           ; BSR set to: 0
  7140                           ;EEPROM.c: 121: EEPROM_write(addr, byte2);
  7141  003F78  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7142  003F7C  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7143  003F80  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  7144  003F84  EC2E  F022         	call	_EEPROM_write	;wreg free
  7145                           
  7146                           ;EEPROM.c: 122: addr++;
  7147  003F88  0100               	movlb	0	; () banked
  7148  003F8A  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7149  003F8C  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7150                           
  7151                           ; BSR set to: 0
  7152                           ;EEPROM.c: 123: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  7153  003F8E  0101               	movlb	1	; () banked
  7154  003F90  3925               	swapf	_count_can_w_lab& (0+255),w,b
  7155  003F92  0BF0               	andlw	240
  7156  003F94  0101               	movlb	1	; () banked
  7157  003F96  1123               	iorwf	_count_can_no_lab& (0+255),w,b
  7158  003F98  0100               	movlb	0	; () banked
  7159  003F9A  6FB4               	movwf	logRun@byte3& (0+255),b
  7160                           
  7161                           ; BSR set to: 0
  7162                           ;EEPROM.c: 124: EEPROM_write(addr, byte3);
  7163  003F9C  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7164  003FA0  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7165  003FA4  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  7166  003FA8  EC2E  F022         	call	_EEPROM_write	;wreg free
  7167                           
  7168                           ;EEPROM.c: 125: addr++;
  7169  003FAC  0100               	movlb	0	; () banked
  7170  003FAE  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7171  003FB0  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7172                           
  7173                           ; BSR set to: 0
  7174                           ;EEPROM.c: 128: for(int i = 0; i < 7; i++){
  7175  003FB2  0E00               	movlw	0
  7176  003FB4  0100               	movlb	0	; () banked
  7177  003FB6  6FB8               	movwf	(logRun@i+1)& (0+255),b
  7178  003FB8  0E00               	movlw	0
  7179  003FBA  6FB7               	movwf	logRun@i& (0+255),b
  7180                           
  7181                           ; BSR set to: 0
  7182  003FBC  0100               	movlb	0	; () banked
  7183  003FBE  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  7184  003FC0  D008               	goto	l9827
  7185  003FC2  0100               	movlb	0	; () banked
  7186  003FC4  51B8               	movf	(logRun@i+1)& (0+255),w,b
  7187  003FC6  E128               	bnz	l1140
  7188  003FC8  0E07               	movlw	7
  7189  003FCA  0100               	movlb	0	; () banked
  7190  003FCC  5DB7               	subwf	logRun@i& (0+255),w,b
  7191  003FCE  B0D8               	btfsc	status,0,c
  7192  003FD0  D023               	goto	l1140
  7193  003FD2                     l9827:
  7194                           
  7195                           ; BSR set to: 0
  7196                           ;EEPROM.c: 129: unsigned char byte_i = startTime[i];
  7197  003FD2  90D8               	bcf	status,0,c
  7198  003FD4  0100               	movlb	0	; () banked
  7199  003FD6  35B7               	rlcf	logRun@i& (0+255),w,b
  7200  003FD8  6ED9               	movwf	fsr2l,c
  7201  003FDA  0100               	movlb	0	; () banked
  7202  003FDC  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  7203  003FDE  6EDA               	movwf	fsr2h,c
  7204  003FE0  0E0E               	movlw	low _startTime
  7205  003FE2  26D9               	addwf	fsr2l,f,c
  7206  003FE4  0E01               	movlw	high _startTime
  7207  003FE6  22DA               	addwfc	fsr2h,f,c
  7208  003FE8  50DF               	movf	indf2,w,c
  7209  003FEA  0100               	movlb	0	; () banked
  7210  003FEC  6FB5               	movwf	logRun@byte_i& (0+255),b
  7211                           
  7212                           ; BSR set to: 0
  7213                           ;EEPROM.c: 130: EEPROM_write(addr, byte_i);
  7214  003FEE  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7215  003FF2  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7216  003FF6  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  7217  003FFA  EC2E  F022         	call	_EEPROM_write	;wreg free
  7218                           
  7219                           ;EEPROM.c: 131: addr++;
  7220  003FFE  0100               	movlb	0	; () banked
  7221  004000  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7222  004002  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7223                           
  7224                           ; BSR set to: 0
  7225  004004  0100               	movlb	0	; () banked
  7226  004006  4BB7               	infsnz	logRun@i& (0+255),f,b
  7227  004008  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  7228                           
  7229                           ; BSR set to: 0
  7230  00400A  0100               	movlb	0	; () banked
  7231  00400C  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  7232  00400E  D7E1               	goto	l9827
  7233  004010  0100               	movlb	0	; () banked
  7234  004012  51B8               	movf	(logRun@i+1)& (0+255),w,b
  7235  004014  E101               	bnz	u9290
  7236  004016  D7D8               	goto	L10
  7237  004018                     u9290:
  7238  004018                     l1140:
  7239                           
  7240                           ; BSR set to: 0
  7241                           ;EEPROM.c: 132: }
  7242                           ;EEPROM.c: 135: unsigned char byte11 = total_time;
  7243  004018  C0FA  F0B6         	movff	_total_time,logRun@byte11
  7244                           
  7245                           ; BSR set to: 0
  7246                           ;EEPROM.c: 136: EEPROM_write(addr, byte11);
  7247  00401C  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7248  004020  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7249  004024  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  7250  004028  EC2E  F022         	call	_EEPROM_write	;wreg free
  7251  00402C  0012               	return		;funcret
  7252  00402E                     __end_of_logRun:
  7253                           	opt stack 0
  7254                           tblptru	equ	0xFF8
  7255                           tblptrh	equ	0xFF7
  7256                           tblptrl	equ	0xFF6
  7257                           tablat	equ	0xFF5
  7258                           prodh	equ	0xFF4
  7259                           prodl	equ	0xFF3
  7260                           intcon	equ	0xFF2
  7261                           intcon2	equ	0xFF1
  7262                           intcon3	equ	0xFF0
  7263                           postinc0	equ	0xFEE
  7264                           wreg	equ	0xFE8
  7265                           postdec1	equ	0xFE5
  7266                           fsr1l	equ	0xFE1
  7267                           indf2	equ	0xFDF
  7268                           postinc2	equ	0xFDE
  7269                           postdec2	equ	0xFDD
  7270                           fsr2h	equ	0xFDA
  7271                           fsr2l	equ	0xFD9
  7272                           status	equ	0xFD8
  7273                           
  7274 ;; *************** function _initUI *****************
  7275 ;; Defined at:
  7276 ;;		line 62 in file "UI.c"
  7277 ;; Parameters:    Size  Location     Type
  7278 ;;		None
  7279 ;; Auto vars:     Size  Location     Type
  7280 ;;		None
  7281 ;; Return value:  Size  Location     Type
  7282 ;;                  1    wreg      void 
  7283 ;; Registers used:
  7284 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7285 ;; Tracked objects:
  7286 ;;		On entry : 0/0
  7287 ;;		On exit  : 0/0
  7288 ;;		Unchanged: 0/0
  7289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7291 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7293 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7294 ;;Total ram usage:        0 bytes
  7295 ;; Hardware stack levels used:    1
  7296 ;; Hardware stack levels required when called:   12
  7297 ;; This function calls:
  7298 ;;		_change_state_to_menu_start
  7299 ;;		_loadRTC
  7300 ;; This function is called by:
  7301 ;;		_main
  7302 ;; This function uses a non-reentrant model
  7303 ;;
  7304                           
  7305                           	psect	text17
  7306  0056E4                     __ptext17:
  7307                           	opt stack 0
  7308  0056E4                     _initUI:
  7309                           	opt stack 18
  7310                           
  7311                           ;UI.c: 63: (INTCONbits.GIE = 1);
  7312                           
  7313                           ;incstack = 0
  7314  0056E4  8EF2               	bsf	intcon,7,c	;volatile
  7315                           
  7316                           ;UI.c: 64: machine_state = UI_state;
  7317  0056E6  0E00               	movlw	0
  7318  0056E8  0100               	movlb	0	; () banked
  7319  0056EA  6FFC               	movwf	_machine_state& (0+255),b
  7320                           
  7321                           ;UI.c: 65: logstate = 0;
  7322  0056EC  0E00               	movlw	0
  7323  0056EE  0100               	movlb	0	; () banked
  7324  0056F0  6FF9               	movwf	(_logstate+1)& (0+255),b
  7325  0056F2  0E00               	movlw	0
  7326  0056F4  6FF8               	movwf	_logstate& (0+255),b
  7327                           
  7328                           ; BSR set to: 0
  7329                           ;UI.c: 67: if(RTCflag){
  7330  0056F6  0100               	movlb	0	; () banked
  7331  0056F8  51EC               	movf	_RTCflag& (0+255),w,b
  7332  0056FA  0100               	movlb	0	; () banked
  7333  0056FC  11ED               	iorwf	(_RTCflag+1)& (0+255),w,b
  7334  0056FE  A4D8               	btfss	status,2,c
  7335                           
  7336                           ; BSR set to: 0
  7337                           ;UI.c: 68: loadRTC();
  7338  005700  EC0B  F026         	call	_loadRTC	;wreg free
  7339                           
  7340                           ;UI.c: 69: }
  7341                           ;UI.c: 71: change_state_to_menu_start();
  7342  005704  EC90  F02C         	call	_change_state_to_menu_start	;wreg free
  7343                           
  7344                           ;UI.c: 72: firstboot = 1;
  7345  005708  0E00               	movlw	0
  7346  00570A  0101               	movlb	1	; () banked
  7347  00570C  6F3E               	movwf	(_firstboot+1)& (0+255),b
  7348  00570E  0E01               	movlw	1
  7349  005710  6F3D               	movwf	_firstboot& (0+255),b
  7350                           
  7351                           ; BSR set to: 1
  7352  005712  0012               	return		;funcret
  7353  005714                     __end_of_initUI:
  7354                           	opt stack 0
  7355                           tblptru	equ	0xFF8
  7356                           tblptrh	equ	0xFF7
  7357                           tblptrl	equ	0xFF6
  7358                           tablat	equ	0xFF5
  7359                           prodh	equ	0xFF4
  7360                           prodl	equ	0xFF3
  7361                           intcon	equ	0xFF2
  7362                           intcon2	equ	0xFF1
  7363                           intcon3	equ	0xFF0
  7364                           postinc0	equ	0xFEE
  7365                           wreg	equ	0xFE8
  7366                           postdec1	equ	0xFE5
  7367                           fsr1l	equ	0xFE1
  7368                           indf2	equ	0xFDF
  7369                           postinc2	equ	0xFDE
  7370                           postdec2	equ	0xFDD
  7371                           fsr2h	equ	0xFDA
  7372                           fsr2l	equ	0xFD9
  7373                           status	equ	0xFD8
  7374                           
  7375 ;; *************** function _loadRTC *****************
  7376 ;; Defined at:
  7377 ;;		line 28 in file "RTC.c"
  7378 ;; Parameters:    Size  Location     Type
  7379 ;;		None
  7380 ;; Auto vars:     Size  Location     Type
  7381 ;;  i               2   22[BANK0 ] int 
  7382 ;; Return value:  Size  Location     Type
  7383 ;;                  1    wreg      void 
  7384 ;; Registers used:
  7385 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7386 ;; Tracked objects:
  7387 ;;		On entry : 0/0
  7388 ;;		On exit  : 0/0
  7389 ;;		Unchanged: 0/0
  7390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7392 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7393 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7394 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7395 ;;Total ram usage:        3 bytes
  7396 ;; Hardware stack levels used:    1
  7397 ;; Hardware stack levels required when called:    9
  7398 ;; This function calls:
  7399 ;;		_I2C_Master_Init
  7400 ;;		_I2C_Master_Start
  7401 ;;		_I2C_Master_Stop
  7402 ;;		_I2C_Master_Write
  7403 ;; This function is called by:
  7404 ;;		_initUI
  7405 ;; This function uses a non-reentrant model
  7406 ;;
  7407                           
  7408                           	psect	text18
  7409  004C16                     __ptext18:
  7410                           	opt stack 0
  7411  004C16                     _loadRTC:
  7412                           	opt stack 20
  7413                           
  7414                           ;RTC.c: 30: I2C_Master_Init(10000);
  7415                           
  7416                           ; BSR set to: 1
  7417                           ;incstack = 0
  7418  004C16  0E10               	movlw	16
  7419  004C18  0100               	movlb	0	; () banked
  7420  004C1A  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  7421  004C1C  0E27               	movlw	39
  7422  004C1E  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  7423  004C20  0E00               	movlw	0
  7424  004C22  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  7425  004C24  0E00               	movlw	0
  7426  004C26  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  7427  004C28  ECD4  F028         	call	_I2C_Master_Init	;wreg free
  7428                           
  7429                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  7430  004C2C  9EF2               	bcf	intcon,7,c	;volatile
  7431                           
  7432                           ;RTC.c: 34: I2C_Master_Start();
  7433  004C2E  ECE1  F02D         	call	_I2C_Master_Start	;wreg free
  7434                           
  7435                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  7436  004C32  0E00               	movlw	0
  7437  004C34  0100               	movlb	0	; () banked
  7438  004C36  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7439  004C38  0ED0               	movlw	208
  7440  004C3A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7441  004C3C  ECCF  F02D         	call	_I2C_Master_Write	;wreg free
  7442                           
  7443                           ;RTC.c: 36: I2C_Master_Write(0x00);
  7444  004C40  0E00               	movlw	0
  7445  004C42  0100               	movlb	0	; () banked
  7446  004C44  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7447  004C46  0E00               	movlw	0
  7448  004C48  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7449  004C4A  ECCF  F02D         	call	_I2C_Master_Write	;wreg free
  7450                           
  7451                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  7452  004C4E  0E00               	movlw	0
  7453  004C50  0100               	movlb	0	; () banked
  7454  004C52  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  7455  004C54  0E00               	movlw	0
  7456  004C56  6F96               	movwf	loadRTC@i& (0+255),b
  7457  004C58                     l7581:
  7458                           
  7459                           ; BSR set to: 0
  7460  004C58  0100               	movlb	0	; () banked
  7461  004C5A  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  7462  004C5C  D008               	goto	l7585
  7463  004C5E  0100               	movlb	0	; () banked
  7464  004C60  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  7465  004C62  E11B               	bnz	l7591
  7466  004C64  0E07               	movlw	7
  7467  004C66  0100               	movlb	0	; () banked
  7468  004C68  5D96               	subwf	loadRTC@i& (0+255),w,b
  7469  004C6A  B0D8               	btfsc	status,0,c
  7470  004C6C  D016               	goto	l7591
  7471  004C6E                     l7585:
  7472                           
  7473                           ; BSR set to: 0
  7474                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  7475  004C6E  0E1C               	movlw	low _time
  7476  004C70  0100               	movlb	0	; () banked
  7477  004C72  2596               	addwf	loadRTC@i& (0+255),w,b
  7478  004C74  6ED9               	movwf	fsr2l,c
  7479  004C76  0E01               	movlw	high _time
  7480  004C78  0100               	movlb	0	; () banked
  7481  004C7A  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  7482  004C7C  6EDA               	movwf	fsr2h,c
  7483  004C7E  50DF               	movf	indf2,w,c
  7484  004C80  0100               	movlb	0	; () banked
  7485  004C82  6F95               	movwf	??_loadRTC& (0+255),b
  7486  004C84  0100               	movlb	0	; () banked
  7487  004C86  5195               	movf	??_loadRTC& (0+255),w,b
  7488  004C88  0100               	movlb	0	; () banked
  7489  004C8A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7490  004C8C  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  7491  004C8E  ECCF  F02D         	call	_I2C_Master_Write	;wreg free
  7492  004C92  0100               	movlb	0	; () banked
  7493  004C94  4B96               	infsnz	loadRTC@i& (0+255),f,b
  7494  004C96  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  7495  004C98  D7DF               	goto	l7581
  7496  004C9A                     l7591:
  7497                           
  7498                           ; BSR set to: 0
  7499                           ;RTC.c: 39: }
  7500                           ;RTC.c: 40: I2C_Master_Stop();
  7501  004C9A  ECDD  F02D         	call	_I2C_Master_Stop	;wreg free
  7502                           
  7503                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  7504  004C9E  8EF2               	bsf	intcon,7,c	;volatile
  7505  004CA0  0012               	return		;funcret
  7506  004CA2                     __end_of_loadRTC:
  7507                           	opt stack 0
  7508                           tblptru	equ	0xFF8
  7509                           tblptrh	equ	0xFF7
  7510                           tblptrl	equ	0xFF6
  7511                           tablat	equ	0xFF5
  7512                           prodh	equ	0xFF4
  7513                           prodl	equ	0xFF3
  7514                           intcon	equ	0xFF2
  7515                           intcon2	equ	0xFF1
  7516                           intcon3	equ	0xFF0
  7517                           postinc0	equ	0xFEE
  7518                           wreg	equ	0xFE8
  7519                           postdec1	equ	0xFE5
  7520                           fsr1l	equ	0xFE1
  7521                           indf2	equ	0xFDF
  7522                           postinc2	equ	0xFDE
  7523                           postdec2	equ	0xFDD
  7524                           fsr2h	equ	0xFDA
  7525                           fsr2l	equ	0xFD9
  7526                           status	equ	0xFD8
  7527                           
  7528 ;; *************** function _I2C_Master_Init *****************
  7529 ;; Defined at:
  7530 ;;		line 15 in file "I2C.c"
  7531 ;; Parameters:    Size  Location     Type
  7532 ;;  c               4   13[BANK0 ] const unsigned long 
  7533 ;; Auto vars:     Size  Location     Type
  7534 ;;		None
  7535 ;; Return value:  Size  Location     Type
  7536 ;;                  1    wreg      void 
  7537 ;; Registers used:
  7538 ;;		wreg, status,2, status,0, cstack
  7539 ;; Tracked objects:
  7540 ;;		On entry : 0/0
  7541 ;;		On exit  : 0/0
  7542 ;;		Unchanged: 0/0
  7543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7544 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7546 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7547 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7548 ;;Total ram usage:        8 bytes
  7549 ;; Hardware stack levels used:    1
  7550 ;; Hardware stack levels required when called:    8
  7551 ;; This function calls:
  7552 ;;		___lldiv
  7553 ;; This function is called by:
  7554 ;;		_main
  7555 ;;		_loadRTC
  7556 ;; This function uses a non-reentrant model
  7557 ;;
  7558                           
  7559                           	psect	text19
  7560  0051A8                     __ptext19:
  7561                           	opt stack 0
  7562  0051A8                     _I2C_Master_Init:
  7563                           	opt stack 20
  7564                           
  7565                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  7566                           
  7567                           ;incstack = 0
  7568  0051A8  0E00               	movlw	0
  7569  0051AA  6EC7               	movwf	4039,c	;volatile
  7570                           
  7571                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  7572  0051AC  0E28               	movlw	40
  7573  0051AE  6EC6               	movwf	4038,c	;volatile
  7574                           
  7575                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  7576  0051B0  0E00               	movlw	0
  7577  0051B2  6EC5               	movwf	4037,c	;volatile
  7578                           
  7579                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  7580  0051B4  0E00               	movlw	0
  7581  0051B6  0100               	movlb	0	; () banked
  7582  0051B8  6F80               	movwf	___lldiv@dividend& (0+255),b
  7583  0051BA  0E48               	movlw	72
  7584  0051BC  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  7585  0051BE  0EE8               	movlw	232
  7586  0051C0  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  7587  0051C2  0E01               	movlw	1
  7588  0051C4  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  7589  0051C6  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  7590  0051CA  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  7591  0051CE  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  7592  0051D2  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  7593  0051D6  0E02               	movlw	2
  7594  0051D8                     u5905:
  7595  0051D8  90D8               	bcf	status,0,c
  7596  0051DA  0100               	movlb	0	; () banked
  7597  0051DC  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  7598  0051DE  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  7599  0051E0  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  7600  0051E2  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  7601  0051E4  2EE8               	decfsz	wreg,f,c
  7602  0051E6  D7F8               	goto	u5905
  7603  0051E8  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  7604  0051EC  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  7605  0051F0  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  7606  0051F4  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  7607  0051F8  EC07  F025         	call	___lldiv	;wreg free
  7608  0051FC  0100               	movlb	0	; () banked
  7609  0051FE  0580               	decf	?___lldiv& (0+255),w,b
  7610  005200  6EC8               	movwf	4040,c	;volatile
  7611                           
  7612                           ; BSR set to: 0
  7613                           ;I2C.c: 22: TRISC3 = 1;
  7614  005202  8694               	bsf	3988,3,c	;volatile
  7615                           
  7616                           ; BSR set to: 0
  7617                           ;I2C.c: 23: TRISC4 = 1;
  7618  005204  8894               	bsf	3988,4,c	;volatile
  7619                           
  7620                           ; BSR set to: 0
  7621  005206  0012               	return		;funcret
  7622  005208                     __end_of_I2C_Master_Init:
  7623                           	opt stack 0
  7624                           tblptru	equ	0xFF8
  7625                           tblptrh	equ	0xFF7
  7626                           tblptrl	equ	0xFF6
  7627                           tablat	equ	0xFF5
  7628                           prodh	equ	0xFF4
  7629                           prodl	equ	0xFF3
  7630                           intcon	equ	0xFF2
  7631                           intcon2	equ	0xFF1
  7632                           intcon3	equ	0xFF0
  7633                           postinc0	equ	0xFEE
  7634                           wreg	equ	0xFE8
  7635                           postdec1	equ	0xFE5
  7636                           fsr1l	equ	0xFE1
  7637                           indf2	equ	0xFDF
  7638                           postinc2	equ	0xFDE
  7639                           postdec2	equ	0xFDD
  7640                           fsr2h	equ	0xFDA
  7641                           fsr2l	equ	0xFD9
  7642                           status	equ	0xFD8
  7643                           
  7644 ;; *************** function ___lldiv *****************
  7645 ;; Defined at:
  7646 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  7647 ;; Parameters:    Size  Location     Type
  7648 ;;  dividend        4    0[BANK0 ] unsigned long 
  7649 ;;  divisor         4    4[BANK0 ] unsigned long 
  7650 ;; Auto vars:     Size  Location     Type
  7651 ;;  quotient        4    8[BANK0 ] unsigned long 
  7652 ;;  counter         1   12[BANK0 ] unsigned char 
  7653 ;; Return value:  Size  Location     Type
  7654 ;;                  4    0[BANK0 ] unsigned long 
  7655 ;; Registers used:
  7656 ;;		wreg, status,2, status,0
  7657 ;; Tracked objects:
  7658 ;;		On entry : 0/0
  7659 ;;		On exit  : 0/0
  7660 ;;		Unchanged: 0/0
  7661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7662 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7663 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7665 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7666 ;;Total ram usage:       13 bytes
  7667 ;; Hardware stack levels used:    1
  7668 ;; Hardware stack levels required when called:    7
  7669 ;; This function calls:
  7670 ;;		Nothing
  7671 ;; This function is called by:
  7672 ;;		_I2C_Master_Init
  7673 ;; This function uses a non-reentrant model
  7674 ;;
  7675                           
  7676                           	psect	text20
  7677  004A0E                     __ptext20:
  7678                           	opt stack 0
  7679  004A0E                     ___lldiv:
  7680                           	opt stack 20
  7681                           
  7682                           ; BSR set to: 0
  7683                           ;incstack = 0
  7684  004A0E  0E00               	movlw	0
  7685  004A10  0100               	movlb	0	; () banked
  7686  004A12  6F88               	movwf	___lldiv@quotient& (0+255),b
  7687  004A14  0E00               	movlw	0
  7688  004A16  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  7689  004A18  0E00               	movlw	0
  7690  004A1A  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  7691  004A1C  0E00               	movlw	0
  7692  004A1E  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  7693                           
  7694                           ; BSR set to: 0
  7695  004A20  0100               	movlb	0	; () banked
  7696  004A22  5184               	movf	___lldiv@divisor& (0+255),w,b
  7697  004A24  0100               	movlb	0	; () banked
  7698  004A26  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  7699  004A28  0100               	movlb	0	; () banked
  7700  004A2A  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  7701  004A2C  0100               	movlb	0	; () banked
  7702  004A2E  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  7703  004A30  B4D8               	btfsc	status,2,c
  7704  004A32  D042               	goto	l1911
  7705                           
  7706                           ; BSR set to: 0
  7707  004A34  0E01               	movlw	1
  7708  004A36  0100               	movlb	0	; () banked
  7709  004A38  6F8C               	movwf	___lldiv@counter& (0+255),b
  7710  004A3A  D008               	goto	l6905
  7711  004A3C                     l6903:
  7712                           
  7713                           ; BSR set to: 0
  7714  004A3C  0100               	movlb	0	; () banked
  7715  004A3E  90D8               	bcf	status,0,c
  7716  004A40  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  7717  004A42  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  7718  004A44  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  7719  004A46  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  7720  004A48  0100               	movlb	0	; () banked
  7721  004A4A  2B8C               	incf	___lldiv@counter& (0+255),f,b
  7722  004A4C                     l6905:
  7723                           
  7724                           ; BSR set to: 0
  7725  004A4C  0100               	movlb	0	; () banked
  7726  004A4E  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  7727  004A50  D7F5               	goto	l6903
  7728  004A52                     l6907:
  7729                           
  7730                           ; BSR set to: 0
  7731  004A52  0100               	movlb	0	; () banked
  7732  004A54  90D8               	bcf	status,0,c
  7733  004A56  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  7734  004A58  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  7735  004A5A  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  7736  004A5C  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  7737                           
  7738                           ; BSR set to: 0
  7739  004A5E  0100               	movlb	0	; () banked
  7740  004A60  5184               	movf	___lldiv@divisor& (0+255),w,b
  7741  004A62  0100               	movlb	0	; () banked
  7742  004A64  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  7743  004A66  0100               	movlb	0	; () banked
  7744  004A68  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7745  004A6A  0100               	movlb	0	; () banked
  7746  004A6C  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  7747  004A6E  0100               	movlb	0	; () banked
  7748  004A70  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7749  004A72  0100               	movlb	0	; () banked
  7750  004A74  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  7751  004A76  0100               	movlb	0	; () banked
  7752  004A78  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7753  004A7A  0100               	movlb	0	; () banked
  7754  004A7C  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  7755  004A7E  A0D8               	btfss	status,0,c
  7756  004A80  D012               	goto	l6915
  7757                           
  7758                           ; BSR set to: 0
  7759  004A82  0100               	movlb	0	; () banked
  7760  004A84  5184               	movf	___lldiv@divisor& (0+255),w,b
  7761  004A86  0100               	movlb	0	; () banked
  7762  004A88  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  7763  004A8A  0100               	movlb	0	; () banked
  7764  004A8C  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7765  004A8E  0100               	movlb	0	; () banked
  7766  004A90  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  7767  004A92  0100               	movlb	0	; () banked
  7768  004A94  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7769  004A96  0100               	movlb	0	; () banked
  7770  004A98  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  7771  004A9A  0100               	movlb	0	; () banked
  7772  004A9C  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7773  004A9E  0100               	movlb	0	; () banked
  7774  004AA0  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  7775                           
  7776                           ; BSR set to: 0
  7777  004AA2  0100               	movlb	0	; () banked
  7778  004AA4  8188               	bsf	___lldiv@quotient& (0+255),0,b
  7779  004AA6                     l6915:
  7780                           
  7781                           ; BSR set to: 0
  7782  004AA6  0100               	movlb	0	; () banked
  7783  004AA8  90D8               	bcf	status,0,c
  7784  004AAA  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  7785  004AAC  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  7786  004AAE  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  7787  004AB0  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  7788                           
  7789                           ; BSR set to: 0
  7790  004AB2  0100               	movlb	0	; () banked
  7791  004AB4  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  7792  004AB6  D7CD               	goto	l6907
  7793  004AB8                     l1911:
  7794                           
  7795                           ; BSR set to: 0
  7796  004AB8  C088  F080         	movff	___lldiv@quotient,?___lldiv
  7797  004ABC  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  7798  004AC0  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  7799  004AC4  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  7800                           
  7801                           ; BSR set to: 0
  7802  004AC8  0012               	return		;funcret
  7803  004ACA                     __end_of___lldiv:
  7804                           	opt stack 0
  7805                           tblptru	equ	0xFF8
  7806                           tblptrh	equ	0xFF7
  7807                           tblptrl	equ	0xFF6
  7808                           tablat	equ	0xFF5
  7809                           prodh	equ	0xFF4
  7810                           prodl	equ	0xFF3
  7811                           intcon	equ	0xFF2
  7812                           intcon2	equ	0xFF1
  7813                           intcon3	equ	0xFF0
  7814                           postinc0	equ	0xFEE
  7815                           wreg	equ	0xFE8
  7816                           postdec1	equ	0xFE5
  7817                           fsr1l	equ	0xFE1
  7818                           indf2	equ	0xFDF
  7819                           postinc2	equ	0xFDE
  7820                           postdec2	equ	0xFDD
  7821                           fsr2h	equ	0xFDA
  7822                           fsr2l	equ	0xFD9
  7823                           status	equ	0xFD8
  7824                           
  7825 ;; *************** function _change_state_to_menu_start *****************
  7826 ;; Defined at:
  7827 ;;		line 477 in file "UI.c"
  7828 ;; Parameters:    Size  Location     Type
  7829 ;;		None
  7830 ;; Auto vars:     Size  Location     Type
  7831 ;;		None
  7832 ;; Return value:  Size  Location     Type
  7833 ;;                  1    wreg      void 
  7834 ;; Registers used:
  7835 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7836 ;; Tracked objects:
  7837 ;;		On entry : 0/0
  7838 ;;		On exit  : 0/0
  7839 ;;		Unchanged: 0/0
  7840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7842 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7844 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7845 ;;Total ram usage:        0 bytes
  7846 ;; Hardware stack levels used:    1
  7847 ;; Hardware stack levels required when called:   11
  7848 ;; This function calls:
  7849 ;;		_lcdInst
  7850 ;;		_printRTC
  7851 ;;		_printf
  7852 ;; This function is called by:
  7853 ;;		_initUI
  7854 ;; This function uses a non-reentrant model
  7855 ;;
  7856                           
  7857                           	psect	text21
  7858  005920                     __ptext21:
  7859                           	opt stack 0
  7860  005920                     _change_state_to_menu_start:
  7861                           	opt stack 18
  7862                           
  7863                           ;UI.c: 478: cur_state = 0;
  7864                           
  7865                           ; BSR set to: 0
  7866                           ;incstack = 0
  7867  005920  0E00               	movlw	0
  7868  005922  0100               	movlb	0	; () banked
  7869  005924  6FEF               	movwf	(_cur_state+1)& (0+255),b
  7870  005926  0E00               	movlw	0
  7871  005928  6FEE               	movwf	_cur_state& (0+255),b
  7872                           
  7873                           ; BSR set to: 0
  7874                           ;UI.c: 480: lcdInst(0b10000000);;
  7875  00592A  0E80               	movlw	128
  7876  00592C  ECBB  F02D         	call	_lcdInst
  7877                           
  7878                           ;UI.c: 481: printRTC();
  7879  005930  EC8D  F016         	call	_printRTC	;wreg free
  7880                           
  7881                           ;UI.c: 482: lcdInst(0b11000000);;
  7882  005934  0EC0               	movlw	192
  7883  005936  ECBB  F02D         	call	_lcdInst
  7884                           
  7885                           ;UI.c: 483: printf("PUSH TO CONTINUE");
  7886  00593A  0E0B               	movlw	low STR_30
  7887  00593C  0100               	movlb	0	; () banked
  7888  00593E  6F8E               	movwf	printf@f& (0+255),b
  7889  005940  0EFE               	movlw	high STR_30
  7890  005942  0100               	movlb	0	; () banked
  7891  005944  6F8F               	movwf	(printf@f+1)& (0+255),b
  7892  005946  ECC1  F00B         	call	_printf	;wreg free
  7893  00594A  0012               	return		;funcret
  7894  00594C                     __end_of_change_state_to_menu_start:
  7895                           	opt stack 0
  7896                           tblptru	equ	0xFF8
  7897                           tblptrh	equ	0xFF7
  7898                           tblptrl	equ	0xFF6
  7899                           tablat	equ	0xFF5
  7900                           prodh	equ	0xFF4
  7901                           prodl	equ	0xFF3
  7902                           intcon	equ	0xFF2
  7903                           intcon2	equ	0xFF1
  7904                           intcon3	equ	0xFF0
  7905                           postinc0	equ	0xFEE
  7906                           wreg	equ	0xFE8
  7907                           postdec1	equ	0xFE5
  7908                           fsr1l	equ	0xFE1
  7909                           indf2	equ	0xFDF
  7910                           postinc2	equ	0xFDE
  7911                           postdec2	equ	0xFDD
  7912                           fsr2h	equ	0xFDA
  7913                           fsr2l	equ	0xFD9
  7914                           status	equ	0xFD8
  7915                           
  7916 ;; *************** function _initTime *****************
  7917 ;; Defined at:
  7918 ;;		line 17 in file "RTC.c"
  7919 ;; Parameters:    Size  Location     Type
  7920 ;;  s               1    wreg     unsigned char 
  7921 ;;  m               1    0[BANK0 ] unsigned char 
  7922 ;;  h               1    1[BANK0 ] unsigned char 
  7923 ;;  w               1    2[BANK0 ] unsigned char 
  7924 ;;  DD              1    3[BANK0 ] unsigned char 
  7925 ;;  MM              1    4[BANK0 ] unsigned char 
  7926 ;;  YY              1    5[BANK0 ] unsigned char 
  7927 ;; Auto vars:     Size  Location     Type
  7928 ;;  s               1    6[BANK0 ] unsigned char 
  7929 ;; Return value:  Size  Location     Type
  7930 ;;                  1    wreg      void 
  7931 ;; Registers used:
  7932 ;;		wreg
  7933 ;; Tracked objects:
  7934 ;;		On entry : 0/0
  7935 ;;		On exit  : 0/0
  7936 ;;		Unchanged: 0/0
  7937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7938 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7939 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7941 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7942 ;;Total ram usage:        7 bytes
  7943 ;; Hardware stack levels used:    1
  7944 ;; Hardware stack levels required when called:    7
  7945 ;; This function calls:
  7946 ;;		Nothing
  7947 ;; This function is called by:
  7948 ;;		_main
  7949 ;; This function uses a non-reentrant model
  7950 ;;
  7951                           
  7952                           	psect	text22
  7953  005A84                     __ptext22:
  7954                           	opt stack 0
  7955  005A84                     _initTime:
  7956                           	opt stack 23
  7957                           
  7958                           ;incstack = 0
  7959                           ;initTime@s stored from wreg
  7960  005A84  0100               	movlb	0	; () banked
  7961  005A86  6F86               	movwf	initTime@s& (0+255),b
  7962                           
  7963                           ;RTC.c: 19: time[0] = s;
  7964  005A88  C086  F11C         	movff	initTime@s,_time
  7965                           
  7966                           ;RTC.c: 20: time[1] = m;
  7967  005A8C  C080  F11D         	movff	initTime@m,_time+1
  7968                           
  7969                           ;RTC.c: 21: time[2] = h;
  7970  005A90  C081  F11E         	movff	initTime@h,_time+2
  7971                           
  7972                           ;RTC.c: 22: time[3] = w;
  7973  005A94  C082  F11F         	movff	initTime@w,_time+3
  7974                           
  7975                           ;RTC.c: 23: time[4] = DD;
  7976  005A98  C083  F120         	movff	initTime@DD,_time+4
  7977                           
  7978                           ;RTC.c: 24: time[5] = MM;
  7979  005A9C  C084  F121         	movff	initTime@MM,_time+5
  7980                           
  7981                           ;RTC.c: 25: time[6] = YY;
  7982  005AA0  C085  F122         	movff	initTime@YY,_time+6
  7983  005AA4  0012               	return		;funcret
  7984  005AA6                     __end_of_initTime:
  7985                           	opt stack 0
  7986                           tblptru	equ	0xFF8
  7987                           tblptrh	equ	0xFF7
  7988                           tblptrl	equ	0xFF6
  7989                           tablat	equ	0xFF5
  7990                           prodh	equ	0xFF4
  7991                           prodl	equ	0xFF3
  7992                           intcon	equ	0xFF2
  7993                           intcon2	equ	0xFF1
  7994                           intcon3	equ	0xFF0
  7995                           postinc0	equ	0xFEE
  7996                           wreg	equ	0xFE8
  7997                           postdec1	equ	0xFE5
  7998                           fsr1l	equ	0xFE1
  7999                           indf2	equ	0xFDF
  8000                           postinc2	equ	0xFDE
  8001                           postdec2	equ	0xFDD
  8002                           fsr2h	equ	0xFDA
  8003                           fsr2l	equ	0xFD9
  8004                           status	equ	0xFD8
  8005                           
  8006 ;; *************** function _initLCD *****************
  8007 ;; Defined at:
  8008 ;;		line 50 in file "lcd.c"
  8009 ;; Parameters:    Size  Location     Type
  8010 ;;		None
  8011 ;; Auto vars:     Size  Location     Type
  8012 ;;		None
  8013 ;; Return value:  Size  Location     Type
  8014 ;;                  1    wreg      void 
  8015 ;; Registers used:
  8016 ;;		wreg, status,2, status,0, cstack
  8017 ;; Tracked objects:
  8018 ;;		On entry : 0/0
  8019 ;;		On exit  : 0/0
  8020 ;;		Unchanged: 0/0
  8021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8023 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8024 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8025 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8026 ;;Total ram usage:        1 bytes
  8027 ;; Hardware stack levels used:    1
  8028 ;; Hardware stack levels required when called:    9
  8029 ;; This function calls:
  8030 ;;		_lcdInst
  8031 ;; This function is called by:
  8032 ;;		_main
  8033 ;; This function uses a non-reentrant model
  8034 ;;
  8035                           
  8036                           	psect	text23
  8037  00549E                     __ptext23:
  8038                           	opt stack 0
  8039  00549E                     _initLCD:
  8040                           	opt stack 21
  8041                           
  8042                           ;lcd.c: 51: _delay((unsigned long)((15)*(32000000/4000.0)));
  8043                           
  8044                           ;incstack = 0
  8045  00549E  0E9C               	movlw	156
  8046  0054A0  0100               	movlb	0	; () banked
  8047  0054A2  6F83               	movwf	??_initLCD& (0+255),b
  8048  0054A4  0ED7               	movlw	215
  8049  0054A6                     u10077:
  8050  0054A6  2EE8               	decfsz	wreg,f,c
  8051  0054A8  D7FE               	bra	u10077
  8052  0054AA  2F83               	decfsz	??_initLCD& (0+255),f,b
  8053  0054AC  D7FC               	bra	u10077
  8054                           
  8055                           ;lcd.c: 52: lcdInst(0b00110011);
  8056  0054AE  0E33               	movlw	51
  8057  0054B0  ECBB  F02D         	call	_lcdInst
  8058                           
  8059                           ;lcd.c: 53: lcdInst(0b00110010);
  8060  0054B4  0E32               	movlw	50
  8061  0054B6  ECBB  F02D         	call	_lcdInst
  8062                           
  8063                           ;lcd.c: 55: lcdInst(0b00101000);
  8064  0054BA  0E28               	movlw	40
  8065  0054BC  ECBB  F02D         	call	_lcdInst
  8066                           
  8067                           ;lcd.c: 56: lcdInst(0b00001100);
  8068  0054C0  0E0C               	movlw	12
  8069  0054C2  ECBB  F02D         	call	_lcdInst
  8070                           
  8071                           ;lcd.c: 57: lcdInst(0b00000110);
  8072  0054C6  0E06               	movlw	6
  8073  0054C8  ECBB  F02D         	call	_lcdInst
  8074                           
  8075                           ;lcd.c: 58: lcdInst(0b00000001);
  8076  0054CC  0E01               	movlw	1
  8077  0054CE  ECBB  F02D         	call	_lcdInst
  8078                           
  8079                           ;lcd.c: 59: _delay((unsigned long)((15)*(32000000/4000.0)));
  8080  0054D2  0E9C               	movlw	156
  8081  0054D4  0100               	movlb	0	; () banked
  8082  0054D6  6F83               	movwf	??_initLCD& (0+255),b
  8083  0054D8  0ED7               	movlw	215
  8084  0054DA                     u10087:
  8085  0054DA  2EE8               	decfsz	wreg,f,c
  8086  0054DC  D7FE               	bra	u10087
  8087  0054DE  2F83               	decfsz	??_initLCD& (0+255),f,b
  8088  0054E0  D7FC               	bra	u10087
  8089  0054E2  0012               	return		;funcret
  8090  0054E4                     __end_of_initLCD:
  8091                           	opt stack 0
  8092                           tblptru	equ	0xFF8
  8093                           tblptrh	equ	0xFF7
  8094                           tblptrl	equ	0xFF6
  8095                           tablat	equ	0xFF5
  8096                           prodh	equ	0xFF4
  8097                           prodl	equ	0xFF3
  8098                           intcon	equ	0xFF2
  8099                           intcon2	equ	0xFF1
  8100                           intcon3	equ	0xFF0
  8101                           postinc0	equ	0xFEE
  8102                           wreg	equ	0xFE8
  8103                           postdec1	equ	0xFE5
  8104                           fsr1l	equ	0xFE1
  8105                           indf2	equ	0xFDF
  8106                           postinc2	equ	0xFDE
  8107                           postdec2	equ	0xFDD
  8108                           fsr2h	equ	0xFDA
  8109                           fsr2l	equ	0xFD9
  8110                           status	equ	0xFD8
  8111                           
  8112 ;; *************** function _initEEPROM *****************
  8113 ;; Defined at:
  8114 ;;		line 32 in file "EEPROM.c"
  8115 ;; Parameters:    Size  Location     Type
  8116 ;;		None
  8117 ;; Auto vars:     Size  Location     Type
  8118 ;;		None
  8119 ;; Return value:  Size  Location     Type
  8120 ;;                  1    wreg      void 
  8121 ;; Registers used:
  8122 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8123 ;; Tracked objects:
  8124 ;;		On entry : 0/0
  8125 ;;		On exit  : 0/0
  8126 ;;		Unchanged: 0/0
  8127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8131 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8132 ;;Total ram usage:        0 bytes
  8133 ;; Hardware stack levels used:    1
  8134 ;; Hardware stack levels required when called:   11
  8135 ;; This function calls:
  8136 ;;		_EEPROM_write
  8137 ;; This function is called by:
  8138 ;;		_main
  8139 ;; This function uses a non-reentrant model
  8140 ;;
  8141                           
  8142                           	psect	text24
  8143  005B14                     __ptext24:
  8144                           	opt stack 0
  8145  005B14                     _initEEPROM:
  8146                           	opt stack 19
  8147                           
  8148                           ;EEPROM.c: 34: EEPROM_write(0, 0x01);
  8149                           
  8150                           ;incstack = 0
  8151  005B14  0E00               	movlw	0
  8152  005B16  0100               	movlb	0	; () banked
  8153  005B18  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  8154  005B1A  0E00               	movlw	0
  8155  005B1C  6FAB               	movwf	EEPROM_write@address& (0+255),b
  8156  005B1E  0E01               	movlw	1
  8157  005B20  0100               	movlb	0	; () banked
  8158  005B22  6FAD               	movwf	EEPROM_write@data& (0+255),b
  8159  005B24  EC2E  F022         	call	_EEPROM_write	;wreg free
  8160  005B28  0012               	return		;funcret
  8161  005B2A                     __end_of_initEEPROM:
  8162                           	opt stack 0
  8163                           tblptru	equ	0xFF8
  8164                           tblptrh	equ	0xFF7
  8165                           tblptrl	equ	0xFF6
  8166                           tablat	equ	0xFF5
  8167                           prodh	equ	0xFF4
  8168                           prodl	equ	0xFF3
  8169                           intcon	equ	0xFF2
  8170                           intcon2	equ	0xFF1
  8171                           intcon3	equ	0xFF0
  8172                           postinc0	equ	0xFEE
  8173                           wreg	equ	0xFE8
  8174                           postdec1	equ	0xFE5
  8175                           fsr1l	equ	0xFE1
  8176                           indf2	equ	0xFDF
  8177                           postinc2	equ	0xFDE
  8178                           postdec2	equ	0xFDD
  8179                           fsr2h	equ	0xFDA
  8180                           fsr2l	equ	0xFD9
  8181                           status	equ	0xFD8
  8182                           
  8183 ;; *************** function _EEPROM_write *****************
  8184 ;; Defined at:
  8185 ;;		line 37 in file "EEPROM.c"
  8186 ;; Parameters:    Size  Location     Type
  8187 ;;  address         2   43[BANK0 ] unsigned short 
  8188 ;;  data            1   45[BANK0 ] unsigned char 
  8189 ;; Auto vars:     Size  Location     Type
  8190 ;;  i               1   48[BANK0 ] unsigned char 
  8191 ;;  i               1   47[BANK0 ] unsigned char 
  8192 ;; Return value:  Size  Location     Type
  8193 ;;                  1    wreg      void 
  8194 ;; Registers used:
  8195 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8196 ;; Tracked objects:
  8197 ;;		On entry : 0/0
  8198 ;;		On exit  : 0/0
  8199 ;;		Unchanged: 0/0
  8200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8201 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8202 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8203 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8204 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8205 ;;Total ram usage:        6 bytes
  8206 ;; Hardware stack levels used:    1
  8207 ;; Hardware stack levels required when called:   10
  8208 ;; This function calls:
  8209 ;;		_EEPROM_read
  8210 ;;		_lcdInst
  8211 ;;		_printf
  8212 ;; This function is called by:
  8213 ;;		_Loading
  8214 ;;		_initEEPROM
  8215 ;;		_logRun
  8216 ;; This function uses a non-reentrant model
  8217 ;;
  8218                           
  8219                           	psect	text25
  8220  00445C                     __ptext25:
  8221                           	opt stack 0
  8222  00445C                     _EEPROM_write:
  8223                           	opt stack 18
  8224                           
  8225                           ;EEPROM.c: 38: EECON1bits.WREN = 1;
  8226                           
  8227                           ;incstack = 0
  8228  00445C  84A6               	bsf	4006,2,c	;volatile
  8229                           
  8230                           ;EEPROM.c: 41: EEADRH = (unsigned char)(address >> 8);
  8231  00445E  0100               	movlb	0	; () banked
  8232  004460  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  8233  004462  6EAA               	movwf	4010,c	;volatile
  8234                           
  8235                           ; BSR set to: 0
  8236                           ;EEPROM.c: 42: EEADR = (unsigned char)address;
  8237  004464  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  8238                           
  8239                           ; BSR set to: 0
  8240                           ;EEPROM.c: 44: EEDATA = data;
  8241  004468  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  8242                           
  8243                           ; BSR set to: 0
  8244                           ;EEPROM.c: 45: EECON1bits.EEPGD = 0;
  8245  00446C  9EA6               	bcf	4006,7,c	;volatile
  8246                           
  8247                           ; BSR set to: 0
  8248                           ;EEPROM.c: 46: EECON1bits.CFGS = 0;
  8249  00446E  9CA6               	bcf	4006,6,c	;volatile
  8250                           
  8251                           ; BSR set to: 0
  8252                           ;EEPROM.c: 48: (INTCONbits.GIE = 0);
  8253  004470  9EF2               	bcf	intcon,7,c	;volatile
  8254                           
  8255                           ;EEPROM.c: 50: EECON2 = 0x55;
  8256  004472  0E55               	movlw	85
  8257  004474  6EA7               	movwf	4007,c	;volatile
  8258                           
  8259                           ;EEPROM.c: 51: EECON2 = 0x0AA;
  8260  004476  0EAA               	movlw	170
  8261  004478  6EA7               	movwf	4007,c	;volatile
  8262                           
  8263                           ; BSR set to: 0
  8264                           ;EEPROM.c: 52: EECON1bits.WR = 1;
  8265  00447A  82A6               	bsf	4006,1,c	;volatile
  8266                           
  8267                           ; BSR set to: 0
  8268                           ;EEPROM.c: 53: (INTCONbits.GIE = 1);
  8269  00447C  8EF2               	bsf	intcon,7,c	;volatile
  8270  00447E                     l1118:
  8271  00447E  A8A1               	btfss	4001,4,c	;volatile
  8272  004480  D7FE               	goto	l1118
  8273                           
  8274                           ;EEPROM.c: 58: PIR2bits.EEIF = 0;
  8275  004482  98A1               	bcf	4001,4,c	;volatile
  8276                           
  8277                           ;EEPROM.c: 59: EECON1bits.WREN = 0;
  8278  004484  94A6               	bcf	4006,2,c	;volatile
  8279                           
  8280                           ;EEPROM.c: 62: if(debug){
  8281  004486  0101               	movlb	1	; () banked
  8282  004488  512D               	movf	_debug& (0+255),w,b
  8283  00448A  0101               	movlb	1	; () banked
  8284  00448C  112E               	iorwf	(_debug+1)& (0+255),w,b
  8285  00448E  B4D8               	btfsc	status,2,c
  8286  004490  0012               	return	
  8287                           
  8288                           ; BSR set to: 1
  8289                           ;EEPROM.c: 63: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8290  004492  0E01               	movlw	1
  8291  004494  ECBB  F02D         	call	_lcdInst
  8292  004498  0E68               	movlw	104
  8293  00449A  0100               	movlb	0	; () banked
  8294  00449C  6FAE               	movwf	??_EEPROM_write& (0+255),b
  8295  00449E  0EE4               	movlw	228
  8296  0044A0                     u10097:
  8297  0044A0  2EE8               	decfsz	wreg,f,c
  8298  0044A2  D7FE               	bra	u10097
  8299  0044A4  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  8300  0044A6  D7FC               	bra	u10097
  8301  0044A8  F000               	nop	
  8302                           
  8303                           ;EEPROM.c: 64: lcdInst(0b10000000);;
  8304  0044AA  0E80               	movlw	128
  8305  0044AC  ECBB  F02D         	call	_lcdInst
  8306                           
  8307                           ;EEPROM.c: 65: if(EEPROM_read(address)==data){
  8308  0044B0  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  8309  0044B4  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  8310  0044B8  EC7E  F02D         	call	_EEPROM_read	;wreg free
  8311  0044BC  0100               	movlb	0	; () banked
  8312  0044BE  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  8313  0044C0  A4D8               	btfss	status,2,c
  8314  0044C2  D024               	goto	l7353
  8315                           
  8316                           ; BSR set to: 0
  8317                           ;EEPROM.c: 66: printf("(data: %u, addr: %u)", data, address);
  8318  0044C4  0ED0               	movlw	low STR_66
  8319  0044C6  0100               	movlb	0	; () banked
  8320  0044C8  6F8E               	movwf	printf@f& (0+255),b
  8321  0044CA  0EFA               	movlw	high STR_66
  8322  0044CC  0100               	movlb	0	; () banked
  8323  0044CE  6F8F               	movwf	(printf@f+1)& (0+255),b
  8324  0044D0  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  8325  0044D4  0100               	movlb	0	; () banked
  8326  0044D6  6B91               	clrf	(?_printf+3)& (0+255),b
  8327  0044D8  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  8328  0044DC  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  8329  0044E0  ECC1  F00B         	call	_printf	;wreg free
  8330                           
  8331                           ;EEPROM.c: 67: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  8332  0044E4  0E00               	movlw	0
  8333  0044E6  0100               	movlb	0	; () banked
  8334  0044E8  6FAF               	movwf	EEPROM_write@i& (0+255),b
  8335  0044EA                     l7345:
  8336                           
  8337                           ; BSR set to: 0
  8338  0044EA  0E63               	movlw	99
  8339  0044EC  0100               	movlb	0	; () banked
  8340  0044EE  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  8341  0044F0  D001               	goto	l7349
  8342  0044F2  0012               	return	
  8343  0044F4                     l7349:
  8344                           
  8345                           ; BSR set to: 0
  8346  0044F4  0E68               	movlw	104
  8347  0044F6  0100               	movlb	0	; () banked
  8348  0044F8  6FAE               	movwf	??_EEPROM_write& (0+255),b
  8349  0044FA  0EE4               	movlw	228
  8350  0044FC                     u10107:
  8351  0044FC  2EE8               	decfsz	wreg,f,c
  8352  0044FE  D7FE               	bra	u10107
  8353  004500  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  8354  004502  D7FC               	bra	u10107
  8355  004504  F000               	nop	
  8356  004506  0100               	movlb	0	; () banked
  8357  004508  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  8358  00450A  D7EF               	goto	l7345
  8359  00450C                     l7353:
  8360                           
  8361                           ; BSR set to: 0
  8362                           ;EEPROM.c: 69: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  8363  00450C  0EBD               	movlw	low STR_67
  8364  00450E  0100               	movlb	0	; () banked
  8365  004510  6F8E               	movwf	printf@f& (0+255),b
  8366  004512  0EFF               	movlw	high STR_67
  8367  004514  0100               	movlb	0	; () banked
  8368  004516  6F8F               	movwf	(printf@f+1)& (0+255),b
  8369  004518  ECC1  F00B         	call	_printf	;wreg free
  8370  00451C  0E00               	movlw	0
  8371  00451E  0100               	movlb	0	; () banked
  8372  004520  6FB0               	movwf	EEPROM_write@i_1401& (0+255),b
  8373  004522                     l7357:
  8374                           
  8375                           ; BSR set to: 0
  8376  004522  0E63               	movlw	99
  8377  004524  0100               	movlb	0	; () banked
  8378  004526  65B0               	cpfsgt	EEPROM_write@i_1401& (0+255),b
  8379  004528  D001               	goto	l7361
  8380  00452A  0012               	return	
  8381  00452C                     l7361:
  8382                           
  8383                           ; BSR set to: 0
  8384  00452C  0E68               	movlw	104
  8385  00452E  0100               	movlb	0	; () banked
  8386  004530  6FAE               	movwf	??_EEPROM_write& (0+255),b
  8387  004532  0EE4               	movlw	228
  8388  004534                     u10117:
  8389  004534  2EE8               	decfsz	wreg,f,c
  8390  004536  D7FE               	bra	u10117
  8391  004538  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  8392  00453A  D7FC               	bra	u10117
  8393  00453C  F000               	nop	
  8394  00453E  0100               	movlb	0	; () banked
  8395  004540  2BB0               	incf	EEPROM_write@i_1401& (0+255),f,b
  8396  004542  D7EF               	goto	l7357
  8397  004544                     __end_of_EEPROM_write:
  8398                           	opt stack 0
  8399                           tblptru	equ	0xFF8
  8400                           tblptrh	equ	0xFF7
  8401                           tblptrl	equ	0xFF6
  8402                           tablat	equ	0xFF5
  8403                           prodh	equ	0xFF4
  8404                           prodl	equ	0xFF3
  8405                           intcon	equ	0xFF2
  8406                           intcon2	equ	0xFF1
  8407                           intcon3	equ	0xFF0
  8408                           postinc0	equ	0xFEE
  8409                           wreg	equ	0xFE8
  8410                           postdec1	equ	0xFE5
  8411                           fsr1l	equ	0xFE1
  8412                           indf2	equ	0xFDF
  8413                           postinc2	equ	0xFDE
  8414                           postdec2	equ	0xFDD
  8415                           fsr2h	equ	0xFDA
  8416                           fsr2l	equ	0xFD9
  8417                           status	equ	0xFD8
  8418                           
  8419 ;; *************** function _EEPROM_read *****************
  8420 ;; Defined at:
  8421 ;;		line 73 in file "EEPROM.c"
  8422 ;; Parameters:    Size  Location     Type
  8423 ;;  address         2    0[BANK0 ] unsigned short 
  8424 ;; Auto vars:     Size  Location     Type
  8425 ;;		None
  8426 ;; Return value:  Size  Location     Type
  8427 ;;                  1    wreg      unsigned char 
  8428 ;; Registers used:
  8429 ;;		wreg, status,2
  8430 ;; Tracked objects:
  8431 ;;		On entry : 0/0
  8432 ;;		On exit  : 0/0
  8433 ;;		Unchanged: 0/0
  8434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8435 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8438 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8439 ;;Total ram usage:        2 bytes
  8440 ;; Hardware stack levels used:    1
  8441 ;; Hardware stack levels required when called:    7
  8442 ;; This function calls:
  8443 ;;		Nothing
  8444 ;; This function is called by:
  8445 ;;		_Loading
  8446 ;;		_EEPROM_write
  8447 ;;		_logRun
  8448 ;; This function uses a non-reentrant model
  8449 ;;
  8450                           
  8451                           	psect	text26
  8452  005AFC                     __ptext26:
  8453                           	opt stack 0
  8454  005AFC                     _EEPROM_read:
  8455                           	opt stack 20
  8456                           
  8457                           ;EEPROM.c: 75: EEADRH = (unsigned char)(address >> 8);
  8458                           
  8459                           ;incstack = 0
  8460  005AFC  0100               	movlb	0	; () banked
  8461  005AFE  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  8462  005B00  6EAA               	movwf	4010,c	;volatile
  8463                           
  8464                           ; BSR set to: 0
  8465                           ;EEPROM.c: 76: EEADR = (unsigned char)address;
  8466  005B02  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  8467                           
  8468                           ; BSR set to: 0
  8469                           ;EEPROM.c: 78: EECON1bits.EEPGD = 0;
  8470  005B06  9EA6               	bcf	4006,7,c	;volatile
  8471                           
  8472                           ; BSR set to: 0
  8473                           ;EEPROM.c: 79: EECON1bits.CFGS = 0;
  8474  005B08  9CA6               	bcf	4006,6,c	;volatile
  8475                           
  8476                           ; BSR set to: 0
  8477                           ;EEPROM.c: 80: EECON1bits.RD = 1;
  8478  005B0A  80A6               	bsf	4006,0,c	;volatile
  8479  005B0C                     l1131:
  8480  005B0C  B0A6               	btfsc	4006,0,c	;volatile
  8481  005B0E  D7FE               	goto	l1131
  8482                           
  8483                           ;EEPROM.c: 86: return EEDATA;
  8484  005B10  50A8               	movf	4008,w,c	;volatile
  8485  005B12  0012               	return	
  8486  005B14                     __end_of_EEPROM_read:
  8487                           	opt stack 0
  8488                           tblptru	equ	0xFF8
  8489                           tblptrh	equ	0xFF7
  8490                           tblptrl	equ	0xFF6
  8491                           tablat	equ	0xFF5
  8492                           prodh	equ	0xFF4
  8493                           prodl	equ	0xFF3
  8494                           intcon	equ	0xFF2
  8495                           intcon2	equ	0xFF1
  8496                           intcon3	equ	0xFF0
  8497                           postinc0	equ	0xFEE
  8498                           wreg	equ	0xFE8
  8499                           postdec1	equ	0xFE5
  8500                           fsr1l	equ	0xFE1
  8501                           indf2	equ	0xFDF
  8502                           postinc2	equ	0xFDE
  8503                           postdec2	equ	0xFDD
  8504                           fsr2h	equ	0xFDA
  8505                           fsr2l	equ	0xFD9
  8506                           status	equ	0xFD8
  8507                           
  8508 ;; *************** function _UI *****************
  8509 ;; Defined at:
  8510 ;;		line 76 in file "UI.c"
  8511 ;; Parameters:    Size  Location     Type
  8512 ;;		None
  8513 ;; Auto vars:     Size  Location     Type
  8514 ;;  i               1   73[BANK0 ] unsigned char 
  8515 ;;  i               1   85[BANK0 ] unsigned char 
  8516 ;;  i               1   84[BANK0 ] unsigned char 
  8517 ;;  i               1   83[BANK0 ] unsigned char 
  8518 ;;  i               1   82[BANK0 ] unsigned char 
  8519 ;;  i               1   81[BANK0 ] unsigned char 
  8520 ;;  i               1   80[BANK0 ] unsigned char 
  8521 ;;  i               1   79[BANK0 ] unsigned char 
  8522 ;;  i               1   78[BANK0 ] unsigned char 
  8523 ;;  i               1   77[BANK0 ] unsigned char 
  8524 ;;  i               1   76[BANK0 ] unsigned char 
  8525 ;;  i               1   75[BANK0 ] unsigned char 
  8526 ;;  i               1   74[BANK0 ] unsigned char 
  8527 ;;  month           4   86[BANK0 ] unsigned char [4]
  8528 ;;  i               1   72[BANK0 ] unsigned char 
  8529 ;; Return value:  Size  Location     Type
  8530 ;;                  1    wreg      void 
  8531 ;; Registers used:
  8532 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8533 ;; Tracked objects:
  8534 ;;		On entry : 0/0
  8535 ;;		On exit  : 0/0
  8536 ;;		Unchanged: 0/0
  8537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8539 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8540 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8541 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8542 ;;Total ram usage:       22 bytes
  8543 ;; Hardware stack levels used:    1
  8544 ;; Hardware stack levels required when called:   11
  8545 ;; This function calls:
  8546 ;;		___awdiv
  8547 ;;		___awmod
  8548 ;;		_change_state_to_menu_12
  8549 ;;		_change_state_to_menu_22
  8550 ;;		_lcdInst
  8551 ;;		_printRTC
  8552 ;;		_printf
  8553 ;;		_strcpy
  8554 ;; This function is called by:
  8555 ;;		_main
  8556 ;; This function uses a non-reentrant model
  8557 ;;
  8558                           
  8559                           	psect	text27
  8560  000012                     __ptext27:
  8561                           	opt stack 0
  8562  000012                     _UI:
  8563                           	opt stack 19
  8564                           
  8565                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  8566                           
  8567                           ;incstack = 0
  8568  000012  0E02               	movlw	2
  8569  000014  0100               	movlb	0	; () banked
  8570  000016  19FC               	xorwf	_machine_state& (0+255),w,b
  8571  000018  A4D8               	btfss	status,2,c
  8572  00001A  D086               	goto	l9229
  8573                           
  8574                           ; BSR set to: 0
  8575                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8576  00001C  0E01               	movlw	1
  8577  00001E  ECBB  F02D         	call	_lcdInst
  8578  000022  0E68               	movlw	104
  8579  000024  0100               	movlb	0	; () banked
  8580  000026  6FC4               	movwf	??_UI& (0+255),b
  8581  000028  0EE4               	movlw	228
  8582  00002A                     u10127:
  8583  00002A  2EE8               	decfsz	wreg,f,c
  8584  00002C  D7FE               	bra	u10127
  8585  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  8586  000030  D7FC               	bra	u10127
  8587  000032  F000               	nop	
  8588                           
  8589                           ;UI.c: 79: lcdInst(0b10000000);;
  8590  000034  0E80               	movlw	128
  8591  000036  ECBB  F02D         	call	_lcdInst
  8592                           
  8593                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  8594  00003A  0E51               	movlw	low STR_1
  8595  00003C  0100               	movlb	0	; () banked
  8596  00003E  6F8E               	movwf	printf@f& (0+255),b
  8597  000040  0EFB               	movlw	high STR_1
  8598  000042  0100               	movlb	0	; () banked
  8599  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  8600  000046  0E01               	movlw	1
  8601  000048  0100               	movlb	0	; () banked
  8602  00004A  25FD               	addwf	_sel& (0+255),w,b
  8603  00004C  0100               	movlb	0	; () banked
  8604  00004E  6F90               	movwf	(?_printf+2)& (0+255),b
  8605  000050  0100               	movlb	0	; () banked
  8606  000052  6B91               	clrf	(?_printf+3)& (0+255),b
  8607  000054  0E00               	movlw	0
  8608  000056  2391               	addwfc	(?_printf+3)& (0+255),f,b
  8609  000058  ECC1  F00B         	call	_printf	;wreg free
  8610                           
  8611                           ;UI.c: 81: lcdInst(0b11000000);;
  8612  00005C  0EC0               	movlw	192
  8613  00005E  ECBB  F02D         	call	_lcdInst
  8614                           
  8615                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  8616  000062  0E0E               	movlw	14
  8617  000064  0100               	movlb	0	; () banked
  8618  000066  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8619  000068  0E10               	movlw	16
  8620  00006A  6F82               	movwf	___awmod@divisor& (0+255),b
  8621  00006C  C0FA  F080         	movff	_total_time,___awmod@dividend
  8622  000070  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  8623  000074  ECBA  F025         	call	___awmod	;wreg free
  8624  000078  C080  F0C6         	movff	?___awmod,_UI$2427
  8625  00007C  C081  F0C7         	movff	?___awmod+1,_UI$2427+1
  8626                           
  8627                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  8628  000080  0E4A               	movlw	low STR_2
  8629  000082  0100               	movlb	0	; () banked
  8630  000084  6F8E               	movwf	printf@f& (0+255),b
  8631  000086  0EFF               	movlw	high STR_2
  8632  000088  0100               	movlb	0	; () banked
  8633  00008A  6F8F               	movwf	(printf@f+1)& (0+255),b
  8634  00008C  0E0E               	movlw	14
  8635  00008E  0100               	movlb	0	; () banked
  8636  000090  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8637  000092  0E10               	movlw	16
  8638  000094  6F82               	movwf	___awmod@divisor& (0+255),b
  8639  000096  C0FA  F080         	movff	_total_time,___awmod@dividend
  8640  00009A  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  8641  00009E  ECBA  F025         	call	___awmod	;wreg free
  8642  0000A2  C080  F086         	movff	?___awmod,___awdiv@dividend
  8643  0000A6  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  8644  0000AA  0E00               	movlw	0
  8645  0000AC  0100               	movlb	0	; () banked
  8646  0000AE  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  8647  0000B0  0E3C               	movlw	60
  8648  0000B2  6F88               	movwf	___awdiv@divisor& (0+255),b
  8649  0000B4  ECA8  F024         	call	___awdiv	;wreg free
  8650  0000B8  C086  F090         	movff	?___awdiv,?_printf+2
  8651  0000BC  C087  F091         	movff	?___awdiv+1,?_printf+3
  8652  0000C0  C0C6  F080         	movff	_UI$2427,___awmod@dividend
  8653  0000C4  C0C7  F081         	movff	_UI$2427+1,___awmod@dividend+1
  8654  0000C8  0E00               	movlw	0
  8655  0000CA  0100               	movlb	0	; () banked
  8656  0000CC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8657  0000CE  0E3C               	movlw	60
  8658  0000D0  6F82               	movwf	___awmod@divisor& (0+255),b
  8659  0000D2  ECBA  F025         	call	___awmod	;wreg free
  8660  0000D6  C080  F092         	movff	?___awmod,?_printf+4
  8661  0000DA  C081  F093         	movff	?___awmod+1,?_printf+5
  8662  0000DE  ECC1  F00B         	call	_printf	;wreg free
  8663  0000E2                     l185:
  8664  0000E2  B281               	btfsc	3969,1,c	;volatile
  8665  0000E4  D7FE               	goto	l185
  8666  0000E6                     l188:
  8667  0000E6  A281               	btfss	3969,1,c	;volatile
  8668  0000E8  D7FE               	goto	l188
  8669                           
  8670                           ;UI.c: 86: }
  8671                           ;UI.c: 87: if(cur_state == 12){
  8672  0000EA  0E0C               	movlw	12
  8673  0000EC  0100               	movlb	0	; () banked
  8674  0000EE  19EE               	xorwf	_cur_state& (0+255),w,b
  8675  0000F0  0100               	movlb	0	; () banked
  8676  0000F2  11EF               	iorwf	(_cur_state+1)& (0+255),w,b
  8677  0000F4  A4D8               	btfss	status,2,c
  8678  0000F6  D003               	goto	l9223
  8679                           
  8680                           ; BSR set to: 0
  8681                           ;UI.c: 88: change_state_to_menu_12();
  8682  0000F8  ECEE  F02A         	call	_change_state_to_menu_12	;wreg free
  8683                           
  8684                           ;UI.c: 89: }
  8685  0000FC  D002               	goto	l193
  8686  0000FE                     l9223:
  8687                           
  8688                           ;UI.c: 90: else{
  8689                           ;UI.c: 91: change_state_to_menu_22();
  8690  0000FE  ECD2  F02A         	call	_change_state_to_menu_22	;wreg free
  8691  000102                     l193:
  8692  000102  B281               	btfsc	3969,1,c	;volatile
  8693  000104  D7FE               	goto	l193
  8694                           
  8695                           ;UI.c: 94: _delay((unsigned long)((100)*(32000000/4000.0)));
  8696  000106  0E05               	movlw	5
  8697  000108  0100               	movlb	0	; () banked
  8698  00010A  6FC5               	movwf	(??_UI+1)& (0+255),b
  8699  00010C  0E0F               	movlw	15
  8700  00010E  0100               	movlb	0	; () banked
  8701  000110  6FC4               	movwf	??_UI& (0+255),b
  8702  000112  0EF1               	movlw	241
  8703  000114                     u10137:
  8704  000114  2EE8               	decfsz	wreg,f,c
  8705  000116  D7FE               	bra	u10137
  8706  000118  2FC4               	decfsz	??_UI& (0+255),f,b
  8707  00011A  D7FC               	bra	u10137
  8708  00011C  2FC5               	decfsz	(??_UI+1)& (0+255),f,b
  8709  00011E  D7FA               	bra	u10137
  8710                           
  8711                           ;UI.c: 95: machine_state = UI_state;
  8712  000120  0E00               	movlw	0
  8713  000122  0100               	movlb	0	; () banked
  8714  000124  6FFC               	movwf	_machine_state& (0+255),b
  8715                           
  8716                           ;UI.c: 96: }
  8717  000126  D3D0               	goto	l9549
  8718  000128                     l9229:
  8719                           
  8720                           ; BSR set to: 0
  8721                           ;UI.c: 97: else if(cur_state == 0){
  8722  000128  0100               	movlb	0	; () banked
  8723  00012A  51EE               	movf	_cur_state& (0+255),w,b
  8724  00012C  0100               	movlb	0	; () banked
  8725  00012E  11EF               	iorwf	(_cur_state+1)& (0+255),w,b
  8726  000130  A4D8               	btfss	status,2,c
  8727  000132  D3CA               	goto	l9549
  8728                           
  8729                           ; BSR set to: 0
  8730                           ;UI.c: 98: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  8731  000134  0E00               	movlw	0
  8732  000136  0100               	movlb	0	; () banked
  8733  000138  6FC8               	movwf	UI@i& (0+255),b
  8734  00013A                     l9233:
  8735                           
  8736                           ; BSR set to: 0
  8737  00013A  0E63               	movlw	99
  8738  00013C  0100               	movlb	0	; () banked
  8739  00013E  65C8               	cpfsgt	UI@i& (0+255),b
  8740  000140  D001               	goto	l9237
  8741  000142  D00C               	goto	l9241
  8742  000144                     l9237:
  8743                           
  8744                           ; BSR set to: 0
  8745  000144  0E68               	movlw	104
  8746  000146  0100               	movlb	0	; () banked
  8747  000148  6FC4               	movwf	??_UI& (0+255),b
  8748  00014A  0EE4               	movlw	228
  8749  00014C                     u10147:
  8750  00014C  2EE8               	decfsz	wreg,f,c
  8751  00014E  D7FE               	bra	u10147
  8752  000150  2FC4               	decfsz	??_UI& (0+255),f,b
  8753  000152  D7FC               	bra	u10147
  8754  000154  F000               	nop	
  8755  000156  0100               	movlb	0	; () banked
  8756  000158  2BC8               	incf	UI@i& (0+255),f,b
  8757  00015A  D7EF               	goto	l9233
  8758  00015C                     l9241:
  8759                           
  8760                           ; BSR set to: 0
  8761                           ;UI.c: 99: if(cur_state == 0){
  8762  00015C  0100               	movlb	0	; () banked
  8763  00015E  51EE               	movf	_cur_state& (0+255),w,b
  8764  000160  0100               	movlb	0	; () banked
  8765  000162  11EF               	iorwf	(_cur_state+1)& (0+255),w,b
  8766  000164  A4D8               	btfss	status,2,c
  8767  000166  D3B0               	goto	l9549
  8768                           
  8769                           ; BSR set to: 0
  8770                           ;UI.c: 100: printRTC();
  8771  000168  EC8D  F016         	call	_printRTC	;wreg free
  8772                           
  8773                           ;UI.c: 101: }
  8774                           ;UI.c: 102: }
  8775                           ;UI.c: 103: while(logstate){
  8776  00016C  D3AD               	goto	l9549
  8777  00016E                     l9245:
  8778                           
  8779                           ;UI.c: 105: if(!log_completion){
  8780  00016E  5063               	movf	_log_completion,w,c
  8781  000170  1064               	iorwf	_log_completion+1,w,c
  8782  000172  A4D8               	btfss	status,2,c
  8783  000174  D041               	goto	l9275
  8784                           
  8785                           ;UI.c: 106: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8786  000176  0E01               	movlw	1
  8787  000178  ECBB  F02D         	call	_lcdInst
  8788  00017C  0E68               	movlw	104
  8789  00017E  0100               	movlb	0	; () banked
  8790  000180  6FC4               	movwf	??_UI& (0+255),b
  8791  000182  0EE4               	movlw	228
  8792  000184                     u10157:
  8793  000184  2EE8               	decfsz	wreg,f,c
  8794  000186  D7FE               	bra	u10157
  8795  000188  2FC4               	decfsz	??_UI& (0+255),f,b
  8796  00018A  D7FC               	bra	u10157
  8797  00018C  F000               	nop	
  8798                           
  8799                           ;UI.c: 107: lcdInst(0b10000000);;
  8800  00018E  0E80               	movlw	128
  8801  000190  ECBB  F02D         	call	_lcdInst
  8802                           
  8803                           ;UI.c: 108: printf("-- LOG %2d HERE--", log);
  8804  000194  0E3F               	movlw	low STR_3
  8805  000196  0100               	movlb	0	; () banked
  8806  000198  6F8E               	movwf	printf@f& (0+255),b
  8807  00019A  0EFB               	movlw	high STR_3
  8808  00019C  0100               	movlb	0	; () banked
  8809  00019E  6F8F               	movwf	(printf@f+1)& (0+255),b
  8810  0001A0  C0F4  F090         	movff	_log,?_printf+2
  8811  0001A4  C0F5  F091         	movff	_log+1,?_printf+3
  8812  0001A8  ECC1  F00B         	call	_printf	;wreg free
  8813                           
  8814                           ;UI.c: 109: lcdInst(0b11000000);;
  8815  0001AC  0EC0               	movlw	192
  8816  0001AE  ECBB  F02D         	call	_lcdInst
  8817                           
  8818                           ;UI.c: 110: printf("DIDN'T COMPLETE");
  8819  0001B2  0E5E               	movlw	low STR_4
  8820  0001B4  0100               	movlb	0	; () banked
  8821  0001B6  6F8E               	movwf	printf@f& (0+255),b
  8822  0001B8  0EFE               	movlw	high STR_4
  8823  0001BA  0100               	movlb	0	; () banked
  8824  0001BC  6F8F               	movwf	(printf@f+1)& (0+255),b
  8825  0001BE  ECC1  F00B         	call	_printf	;wreg free
  8826  0001C2                     l9259:
  8827  0001C2  0E00               	movlw	0
  8828  0001C4  0100               	movlb	0	; () banked
  8829  0001C6  6FC9               	movwf	UI@i_412& (0+255),b
  8830  0001C8                     l9261:
  8831                           
  8832                           ; BSR set to: 0
  8833  0001C8  0E63               	movlw	99
  8834  0001CA  0100               	movlb	0	; () banked
  8835  0001CC  65C9               	cpfsgt	UI@i_412& (0+255),b
  8836  0001CE  D001               	goto	l9265
  8837  0001D0  D00C               	goto	l9269
  8838  0001D2                     l9265:
  8839                           
  8840                           ; BSR set to: 0
  8841  0001D2  0E68               	movlw	104
  8842  0001D4  0100               	movlb	0	; () banked
  8843  0001D6  6FC4               	movwf	??_UI& (0+255),b
  8844  0001D8  0EE4               	movlw	228
  8845  0001DA                     u10167:
  8846  0001DA  2EE8               	decfsz	wreg,f,c
  8847  0001DC  D7FE               	bra	u10167
  8848  0001DE  2FC4               	decfsz	??_UI& (0+255),f,b
  8849  0001E0  D7FC               	bra	u10167
  8850  0001E2  F000               	nop	
  8851  0001E4  0100               	movlb	0	; () banked
  8852  0001E6  2BC9               	incf	UI@i_412& (0+255),f,b
  8853  0001E8  D7EF               	goto	l9261
  8854  0001EA                     l9269:
  8855                           
  8856                           ; BSR set to: 0
  8857  0001EA  0100               	movlb	0	; () banked
  8858  0001EC  51F8               	movf	_logstate& (0+255),w,b
  8859  0001EE  0100               	movlb	0	; () banked
  8860  0001F0  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8861  0001F2  B4D8               	btfsc	status,2,c
  8862  0001F4  0012               	return	
  8863  0001F6  D7E5               	goto	l9259
  8864  0001F8                     l9275:
  8865                           
  8866                           ;UI.c: 114: else{
  8867                           ;UI.c: 115: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8868  0001F8  0E01               	movlw	1
  8869  0001FA  ECBB  F02D         	call	_lcdInst
  8870  0001FE  0E68               	movlw	104
  8871  000200  0100               	movlb	0	; () banked
  8872  000202  6FC4               	movwf	??_UI& (0+255),b
  8873  000204  0EE4               	movlw	228
  8874  000206                     u10177:
  8875  000206  2EE8               	decfsz	wreg,f,c
  8876  000208  D7FE               	bra	u10177
  8877  00020A  2FC4               	decfsz	??_UI& (0+255),f,b
  8878  00020C  D7FC               	bra	u10177
  8879  00020E  F000               	nop	
  8880                           
  8881                           ;UI.c: 116: lcdInst(0b10000000);;
  8882  000210  0E80               	movlw	128
  8883  000212  ECBB  F02D         	call	_lcdInst
  8884                           
  8885                           ;UI.c: 117: printf("-- LOG %2d HERE--", log);
  8886  000216  0E3F               	movlw	low STR_3
  8887  000218  0100               	movlb	0	; () banked
  8888  00021A  6F8E               	movwf	printf@f& (0+255),b
  8889  00021C  0EFB               	movlw	high STR_3
  8890  00021E  0100               	movlb	0	; () banked
  8891  000220  6F8F               	movwf	(printf@f+1)& (0+255),b
  8892  000222  C0F4  F090         	movff	_log,?_printf+2
  8893  000226  C0F5  F091         	movff	_log+1,?_printf+3
  8894  00022A  ECC1  F00B         	call	_printf	;wreg free
  8895                           
  8896                           ;UI.c: 118: lcdInst(0b11000000);;
  8897  00022E  0EC0               	movlw	192
  8898  000230  ECBB  F02D         	call	_lcdInst
  8899                           
  8900                           ;UI.c: 119: printf("PAUSE < | BACK >");
  8901  000234  0EFA               	movlw	low STR_6
  8902  000236  0100               	movlb	0	; () banked
  8903  000238  6F8E               	movwf	printf@f& (0+255),b
  8904  00023A  0EFD               	movlw	high STR_6
  8905  00023C  0100               	movlb	0	; () banked
  8906  00023E  6F8F               	movwf	(printf@f+1)& (0+255),b
  8907  000240  ECC1  F00B         	call	_printf	;wreg free
  8908                           
  8909                           ;UI.c: 121: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8910  000244  0E00               	movlw	0
  8911  000246  0100               	movlb	0	; () banked
  8912  000248  6FCA               	movwf	UI@i_415& (0+255),b
  8913  00024A                     l9289:
  8914                           
  8915                           ; BSR set to: 0
  8916  00024A  0E63               	movlw	99
  8917  00024C  0100               	movlb	0	; () banked
  8918  00024E  65CA               	cpfsgt	UI@i_415& (0+255),b
  8919  000250  D001               	goto	l9293
  8920  000252  D00C               	goto	l9297
  8921  000254                     l9293:
  8922                           
  8923                           ; BSR set to: 0
  8924  000254  0E68               	movlw	104
  8925  000256  0100               	movlb	0	; () banked
  8926  000258  6FC4               	movwf	??_UI& (0+255),b
  8927  00025A  0EE4               	movlw	228
  8928  00025C                     u10187:
  8929  00025C  2EE8               	decfsz	wreg,f,c
  8930  00025E  D7FE               	bra	u10187
  8931  000260  2FC4               	decfsz	??_UI& (0+255),f,b
  8932  000262  D7FC               	bra	u10187
  8933  000264  F000               	nop	
  8934  000266  0100               	movlb	0	; () banked
  8935  000268  2BCA               	incf	UI@i_415& (0+255),f,b
  8936  00026A  D7EF               	goto	l9289
  8937  00026C                     l9297:
  8938                           
  8939                           ; BSR set to: 0
  8940  00026C  0100               	movlb	0	; () banked
  8941  00026E  51F8               	movf	_logstate& (0+255),w,b
  8942  000270  0100               	movlb	0	; () banked
  8943  000272  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8944  000274  B4D8               	btfsc	status,2,c
  8945  000276  0012               	return	
  8946                           
  8947                           ; BSR set to: 0
  8948                           ;UI.c: 122: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8949                           
  8950                           ; BSR set to: 0
  8951                           
  8952                           ; BSR set to: 0
  8953  000278  0E00               	movlw	0
  8954  00027A  0100               	movlb	0	; () banked
  8955  00027C  6FCB               	movwf	UI@i_416& (0+255),b
  8956  00027E                     l9303:
  8957                           
  8958                           ; BSR set to: 0
  8959  00027E  0E63               	movlw	99
  8960  000280  0100               	movlb	0	; () banked
  8961  000282  65CB               	cpfsgt	UI@i_416& (0+255),b
  8962  000284  D001               	goto	l9307
  8963  000286  D00C               	goto	l9311
  8964  000288                     l9307:
  8965                           
  8966                           ; BSR set to: 0
  8967  000288  0E68               	movlw	104
  8968  00028A  0100               	movlb	0	; () banked
  8969  00028C  6FC4               	movwf	??_UI& (0+255),b
  8970  00028E  0EE4               	movlw	228
  8971  000290                     u10197:
  8972  000290  2EE8               	decfsz	wreg,f,c
  8973  000292  D7FE               	bra	u10197
  8974  000294  2FC4               	decfsz	??_UI& (0+255),f,b
  8975  000296  D7FC               	bra	u10197
  8976  000298  F000               	nop	
  8977  00029A  0100               	movlb	0	; () banked
  8978  00029C  2BCB               	incf	UI@i_416& (0+255),f,b
  8979  00029E  D7EF               	goto	l9303
  8980  0002A0                     l9311:
  8981                           
  8982                           ; BSR set to: 0
  8983  0002A0  0100               	movlb	0	; () banked
  8984  0002A2  51F8               	movf	_logstate& (0+255),w,b
  8985  0002A4  0100               	movlb	0	; () banked
  8986  0002A6  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8987  0002A8  B4D8               	btfsc	status,2,c
  8988  0002AA  0012               	return	
  8989                           
  8990                           ; BSR set to: 0
  8991                           ;UI.c: 124: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8992                           
  8993                           ; BSR set to: 0
  8994                           
  8995                           ; BSR set to: 0
  8996  0002AC  0E01               	movlw	1
  8997  0002AE  ECBB  F02D         	call	_lcdInst
  8998  0002B2  0E68               	movlw	104
  8999  0002B4  0100               	movlb	0	; () banked
  9000  0002B6  6FC4               	movwf	??_UI& (0+255),b
  9001  0002B8  0EE4               	movlw	228
  9002  0002BA                     u10207:
  9003  0002BA  2EE8               	decfsz	wreg,f,c
  9004  0002BC  D7FE               	bra	u10207
  9005  0002BE  2FC4               	decfsz	??_UI& (0+255),f,b
  9006  0002C0  D7FC               	bra	u10207
  9007  0002C2  F000               	nop	
  9008                           
  9009                           ;UI.c: 125: lcdInst(0b10000000);;
  9010  0002C4  0E80               	movlw	128
  9011  0002C6  ECBB  F02D         	call	_lcdInst
  9012                           
  9013                           ;UI.c: 126: printf("START:");
  9014  0002CA  0EC4               	movlw	low STR_7
  9015  0002CC  0100               	movlb	0	; () banked
  9016  0002CE  6F8E               	movwf	printf@f& (0+255),b
  9017  0002D0  0EFF               	movlw	high STR_7
  9018  0002D2  0100               	movlb	0	; () banked
  9019  0002D4  6F8F               	movwf	(printf@f+1)& (0+255),b
  9020  0002D6  ECC1  F00B         	call	_printf	;wreg free
  9021                           
  9022                           ;UI.c: 127: lcdInst(0b11000000);;
  9023  0002DA  0EC0               	movlw	192
  9024  0002DC  ECBB  F02D         	call	_lcdInst
  9025                           
  9026                           ;UI.c: 128: char month[] = "MMM";
  9027  0002E0  C149  F0D6         	movff	UI@F3246,UI@month
  9028  0002E4  C14A  F0D7         	movff	UI@F3246+1,UI@month+1
  9029  0002E8  C14B  F0D8         	movff	UI@F3246+2,UI@month+2
  9030  0002EC  C14C  F0D9         	movff	UI@F3246+3,UI@month+3
  9031                           
  9032                           ;UI.c: 129: switch(log_startTime[5]){
  9033  0002F0  D0C3               	goto	l9355
  9034  0002F2                     l9327:
  9035                           
  9036                           ;UI.c: 131: strcpy(month, "JAN");
  9037  0002F2  0ED6               	movlw	low UI@month
  9038  0002F4  0100               	movlb	0	; () banked
  9039  0002F6  6F80               	movwf	strcpy@to& (0+255),b
  9040  0002F8  0E00               	movlw	high UI@month
  9041  0002FA  0100               	movlb	0	; () banked
  9042  0002FC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9043  0002FE  0EDB               	movlw	low STR_8
  9044  000300  0100               	movlb	0	; () banked
  9045  000302  6F82               	movwf	strcpy@from& (0+255),b
  9046  000304  0EFF               	movlw	high STR_8
  9047  000306  0100               	movlb	0	; () banked
  9048  000308  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9049  00030A  EC0A  F02B         	call	_strcpy	;wreg free
  9050                           
  9051                           ;UI.c: 132: break;
  9052  00030E  D0E6               	goto	l9357
  9053  000310                     l9329:
  9054                           
  9055                           ;UI.c: 134: strcpy(month, "FEB");
  9056  000310  0ED6               	movlw	low UI@month
  9057  000312  0100               	movlb	0	; () banked
  9058  000314  6F80               	movwf	strcpy@to& (0+255),b
  9059  000316  0E00               	movlw	high UI@month
  9060  000318  0100               	movlb	0	; () banked
  9061  00031A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9062  00031C  0ECB               	movlw	low STR_9
  9063  00031E  0100               	movlb	0	; () banked
  9064  000320  6F82               	movwf	strcpy@from& (0+255),b
  9065  000322  0EFF               	movlw	high STR_9
  9066  000324  0100               	movlb	0	; () banked
  9067  000326  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9068  000328  EC0A  F02B         	call	_strcpy	;wreg free
  9069                           
  9070                           ;UI.c: 135: break;
  9071  00032C  D0D7               	goto	l9357
  9072  00032E                     l9331:
  9073                           
  9074                           ;UI.c: 137: strcpy(month, "MAR");
  9075  00032E  0ED6               	movlw	low UI@month
  9076  000330  0100               	movlb	0	; () banked
  9077  000332  6F80               	movwf	strcpy@to& (0+255),b
  9078  000334  0E00               	movlw	high UI@month
  9079  000336  0100               	movlb	0	; () banked
  9080  000338  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9081  00033A  0EE7               	movlw	low STR_10
  9082  00033C  0100               	movlb	0	; () banked
  9083  00033E  6F82               	movwf	strcpy@from& (0+255),b
  9084  000340  0EFF               	movlw	high STR_10
  9085  000342  0100               	movlb	0	; () banked
  9086  000344  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9087  000346  EC0A  F02B         	call	_strcpy	;wreg free
  9088                           
  9089                           ;UI.c: 138: break;
  9090  00034A  D0C8               	goto	l9357
  9091  00034C                     l9333:
  9092                           
  9093                           ;UI.c: 140: strcpy(month, "APR");
  9094  00034C  0ED6               	movlw	low UI@month
  9095  00034E  0100               	movlb	0	; () banked
  9096  000350  6F80               	movwf	strcpy@to& (0+255),b
  9097  000352  0E00               	movlw	high UI@month
  9098  000354  0100               	movlb	0	; () banked
  9099  000356  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9100  000358  0EEB               	movlw	low STR_11
  9101  00035A  0100               	movlb	0	; () banked
  9102  00035C  6F82               	movwf	strcpy@from& (0+255),b
  9103  00035E  0EFF               	movlw	high STR_11
  9104  000360  0100               	movlb	0	; () banked
  9105  000362  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9106  000364  EC0A  F02B         	call	_strcpy	;wreg free
  9107                           
  9108                           ;UI.c: 141: break;
  9109  000368  D0B9               	goto	l9357
  9110  00036A                     l9335:
  9111                           
  9112                           ;UI.c: 143: strcpy(month, "MAY");
  9113  00036A  0ED6               	movlw	low UI@month
  9114  00036C  0100               	movlb	0	; () banked
  9115  00036E  6F80               	movwf	strcpy@to& (0+255),b
  9116  000370  0E00               	movlw	high UI@month
  9117  000372  0100               	movlb	0	; () banked
  9118  000374  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9119  000376  0EFB               	movlw	low STR_12
  9120  000378  0100               	movlb	0	; () banked
  9121  00037A  6F82               	movwf	strcpy@from& (0+255),b
  9122  00037C  0EFF               	movlw	high STR_12
  9123  00037E  0100               	movlb	0	; () banked
  9124  000380  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9125  000382  EC0A  F02B         	call	_strcpy	;wreg free
  9126                           
  9127                           ;UI.c: 144: break;
  9128  000386  D0AA               	goto	l9357
  9129  000388                     l9337:
  9130                           
  9131                           ;UI.c: 146: strcpy(month, "JUN");
  9132  000388  0ED6               	movlw	low UI@month
  9133  00038A  0100               	movlb	0	; () banked
  9134  00038C  6F80               	movwf	strcpy@to& (0+255),b
  9135  00038E  0E00               	movlw	high UI@month
  9136  000390  0100               	movlb	0	; () banked
  9137  000392  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9138  000394  0EDF               	movlw	low STR_13
  9139  000396  0100               	movlb	0	; () banked
  9140  000398  6F82               	movwf	strcpy@from& (0+255),b
  9141  00039A  0EFF               	movlw	high STR_13
  9142  00039C  0100               	movlb	0	; () banked
  9143  00039E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9144  0003A0  EC0A  F02B         	call	_strcpy	;wreg free
  9145                           
  9146                           ;UI.c: 147: break;
  9147  0003A4  D09B               	goto	l9357
  9148  0003A6                     l9339:
  9149                           
  9150                           ;UI.c: 149: strcpy(month, "JUL");
  9151  0003A6  0ED6               	movlw	low UI@month
  9152  0003A8  0100               	movlb	0	; () banked
  9153  0003AA  6F80               	movwf	strcpy@to& (0+255),b
  9154  0003AC  0E00               	movlw	high UI@month
  9155  0003AE  0100               	movlb	0	; () banked
  9156  0003B0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9157  0003B2  0ED7               	movlw	low STR_14
  9158  0003B4  0100               	movlb	0	; () banked
  9159  0003B6  6F82               	movwf	strcpy@from& (0+255),b
  9160  0003B8  0EFF               	movlw	high STR_14
  9161  0003BA  0100               	movlb	0	; () banked
  9162  0003BC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9163  0003BE  EC0A  F02B         	call	_strcpy	;wreg free
  9164                           
  9165                           ;UI.c: 150: break;
  9166  0003C2  D08C               	goto	l9357
  9167  0003C4                     l9341:
  9168                           
  9169                           ;UI.c: 152: strcpy(month, "AUG");
  9170  0003C4  0ED6               	movlw	low UI@month
  9171  0003C6  0100               	movlb	0	; () banked
  9172  0003C8  6F80               	movwf	strcpy@to& (0+255),b
  9173  0003CA  0E00               	movlw	high UI@month
  9174  0003CC  0100               	movlb	0	; () banked
  9175  0003CE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9176  0003D0  0ED3               	movlw	low STR_15
  9177  0003D2  0100               	movlb	0	; () banked
  9178  0003D4  6F82               	movwf	strcpy@from& (0+255),b
  9179  0003D6  0EFF               	movlw	high STR_15
  9180  0003D8  0100               	movlb	0	; () banked
  9181  0003DA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9182  0003DC  EC0A  F02B         	call	_strcpy	;wreg free
  9183                           
  9184                           ;UI.c: 153: break;
  9185  0003E0  D07D               	goto	l9357
  9186  0003E2                     l9343:
  9187                           
  9188                           ;UI.c: 155: strcpy(month, "SEP");
  9189  0003E2  0ED6               	movlw	low UI@month
  9190  0003E4  0100               	movlb	0	; () banked
  9191  0003E6  6F80               	movwf	strcpy@to& (0+255),b
  9192  0003E8  0E00               	movlw	high UI@month
  9193  0003EA  0100               	movlb	0	; () banked
  9194  0003EC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9195  0003EE  0EE3               	movlw	low STR_16
  9196  0003F0  0100               	movlb	0	; () banked
  9197  0003F2  6F82               	movwf	strcpy@from& (0+255),b
  9198  0003F4  0EFF               	movlw	high STR_16
  9199  0003F6  0100               	movlb	0	; () banked
  9200  0003F8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9201  0003FA  EC0A  F02B         	call	_strcpy	;wreg free
  9202                           
  9203                           ;UI.c: 156: break;
  9204  0003FE  D06E               	goto	l9357
  9205  000400                     l9345:
  9206                           
  9207                           ;UI.c: 158: strcpy(month, "OCT");
  9208  000400  0ED6               	movlw	low UI@month
  9209  000402  0100               	movlb	0	; () banked
  9210  000404  6F80               	movwf	strcpy@to& (0+255),b
  9211  000406  0E00               	movlw	high UI@month
  9212  000408  0100               	movlb	0	; () banked
  9213  00040A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9214  00040C  0EF3               	movlw	low STR_17
  9215  00040E  0100               	movlb	0	; () banked
  9216  000410  6F82               	movwf	strcpy@from& (0+255),b
  9217  000412  0EFF               	movlw	high STR_17
  9218  000414  0100               	movlb	0	; () banked
  9219  000416  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9220  000418  EC0A  F02B         	call	_strcpy	;wreg free
  9221                           
  9222                           ;UI.c: 159: break;
  9223  00041C  D05F               	goto	l9357
  9224  00041E                     l9347:
  9225                           
  9226                           ;UI.c: 161: strcpy(month, "NOV");
  9227  00041E  0ED6               	movlw	low UI@month
  9228  000420  0100               	movlb	0	; () banked
  9229  000422  6F80               	movwf	strcpy@to& (0+255),b
  9230  000424  0E00               	movlw	high UI@month
  9231  000426  0100               	movlb	0	; () banked
  9232  000428  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9233  00042A  0EF7               	movlw	low STR_18
  9234  00042C  0100               	movlb	0	; () banked
  9235  00042E  6F82               	movwf	strcpy@from& (0+255),b
  9236  000430  0EFF               	movlw	high STR_18
  9237  000432  0100               	movlb	0	; () banked
  9238  000434  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9239  000436  EC0A  F02B         	call	_strcpy	;wreg free
  9240                           
  9241                           ;UI.c: 162: break;
  9242  00043A  D050               	goto	l9357
  9243  00043C                     l9349:
  9244                           
  9245                           ;UI.c: 164: strcpy(month, "DEC");
  9246  00043C  0ED6               	movlw	low UI@month
  9247  00043E  0100               	movlb	0	; () banked
  9248  000440  6F80               	movwf	strcpy@to& (0+255),b
  9249  000442  0E00               	movlw	high UI@month
  9250  000444  0100               	movlb	0	; () banked
  9251  000446  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9252  000448  0ECF               	movlw	low STR_19
  9253  00044A  0100               	movlb	0	; () banked
  9254  00044C  6F82               	movwf	strcpy@from& (0+255),b
  9255  00044E  0EFF               	movlw	high STR_19
  9256  000450  0100               	movlb	0	; () banked
  9257  000452  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9258  000454  EC0A  F02B         	call	_strcpy	;wreg free
  9259                           
  9260                           ;UI.c: 165: break;
  9261  000458  D041               	goto	l9357
  9262  00045A                     l9351:
  9263                           
  9264                           ;UI.c: 167: strcpy(month, "ERR");
  9265  00045A  0ED6               	movlw	low UI@month
  9266  00045C  0100               	movlb	0	; () banked
  9267  00045E  6F80               	movwf	strcpy@to& (0+255),b
  9268  000460  0E00               	movlw	high UI@month
  9269  000462  0100               	movlb	0	; () banked
  9270  000464  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9271  000466  0EEF               	movlw	low STR_20
  9272  000468  0100               	movlb	0	; () banked
  9273  00046A  6F82               	movwf	strcpy@from& (0+255),b
  9274  00046C  0EFF               	movlw	high STR_20
  9275  00046E  0100               	movlb	0	; () banked
  9276  000470  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9277  000472  EC0A  F02B         	call	_strcpy	;wreg free
  9278                           
  9279                           ;UI.c: 169: }
  9280                           
  9281                           ;UI.c: 168: break;
  9282  000476  D032               	goto	l9357
  9283  000478                     l9355:
  9284  000478  EE21  F00A         	lfsr	2,_log_startTime+10
  9285  00047C  CFDE F0C4          	movff	postinc2,??_UI
  9286  000480  CFDD F0C5          	movff	postdec2,??_UI+1
  9287                           
  9288                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9289                           ; Switch size 1, requested type "space"
  9290                           ; Number of cases is 1, Range of values is 0 to 0
  9291                           ; switch strategies available:
  9292                           ; Name         Instructions Cycles
  9293                           ; simple_byte            4     3 (average)
  9294                           ;	Chosen strategy is simple_byte
  9295  000484  0100               	movlb	0	; () banked
  9296  000486  51C5               	movf	(??_UI+1)& (0+255),w,b
  9297  000488  0A00               	xorlw	0	; case 0
  9298  00048A  A4D8               	btfss	status,2,c
  9299  00048C  D7E6               	goto	l9351
  9300                           
  9301                           ; BSR set to: 0
  9302                           ; Switch size 1, requested type "space"
  9303                           ; Number of cases is 12, Range of values is 1 to 12
  9304                           ; switch strategies available:
  9305                           ; Name         Instructions Cycles
  9306                           ; simple_byte           37    19 (average)
  9307                           ;	Chosen strategy is simple_byte
  9308  00048E  0100               	movlb	0	; () banked
  9309  000490  51C4               	movf	??_UI& (0+255),w,b
  9310  000492  0A01               	xorlw	1	; case 1
  9311  000494  B4D8               	btfsc	status,2,c
  9312  000496  D72D               	goto	l9327
  9313  000498  0A03               	xorlw	3	; case 2
  9314  00049A  B4D8               	btfsc	status,2,c
  9315  00049C  D739               	goto	l9329
  9316  00049E  0A01               	xorlw	1	; case 3
  9317  0004A0  B4D8               	btfsc	status,2,c
  9318  0004A2  D745               	goto	l9331
  9319  0004A4  0A07               	xorlw	7	; case 4
  9320  0004A6  B4D8               	btfsc	status,2,c
  9321  0004A8  D751               	goto	l9333
  9322  0004AA  0A01               	xorlw	1	; case 5
  9323  0004AC  B4D8               	btfsc	status,2,c
  9324  0004AE  D75D               	goto	l9335
  9325  0004B0  0A03               	xorlw	3	; case 6
  9326  0004B2  B4D8               	btfsc	status,2,c
  9327  0004B4  D769               	goto	l9337
  9328  0004B6  0A01               	xorlw	1	; case 7
  9329  0004B8  B4D8               	btfsc	status,2,c
  9330  0004BA  D775               	goto	l9339
  9331  0004BC  0A0F               	xorlw	15	; case 8
  9332  0004BE  B4D8               	btfsc	status,2,c
  9333  0004C0  D781               	goto	l9341
  9334  0004C2  0A01               	xorlw	1	; case 9
  9335  0004C4  B4D8               	btfsc	status,2,c
  9336  0004C6  D78D               	goto	l9343
  9337  0004C8  0A03               	xorlw	3	; case 10
  9338  0004CA  B4D8               	btfsc	status,2,c
  9339  0004CC  D799               	goto	l9345
  9340  0004CE  0A01               	xorlw	1	; case 11
  9341  0004D0  B4D8               	btfsc	status,2,c
  9342  0004D2  D7A5               	goto	l9347
  9343  0004D4  0A07               	xorlw	7	; case 12
  9344  0004D6  B4D8               	btfsc	status,2,c
  9345  0004D8  D7B1               	goto	l9349
  9346  0004DA  D7BF               	goto	l9351
  9347  0004DC                     l9357:
  9348                           
  9349                           ;UI.c: 170: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  9350  0004DC  0EB8               	movlw	low STR_21
  9351  0004DE  0100               	movlb	0	; () banked
  9352  0004E0  6F8E               	movwf	printf@f& (0+255),b
  9353  0004E2  0EFA               	movlw	high STR_21
  9354  0004E4  0100               	movlb	0	; () banked
  9355  0004E6  6F8F               	movwf	(printf@f+1)& (0+255),b
  9356  0004E8  C108  F090         	movff	_log_startTime+8,?_printf+2
  9357  0004EC  C109  F091         	movff	_log_startTime+9,?_printf+3
  9358  0004F0  0ED6               	movlw	low UI@month
  9359  0004F2  0100               	movlb	0	; () banked
  9360  0004F4  6F92               	movwf	(?_printf+4)& (0+255),b
  9361  0004F6  0E00               	movlw	high UI@month
  9362  0004F8  0100               	movlb	0	; () banked
  9363  0004FA  6F93               	movwf	(?_printf+5)& (0+255),b
  9364  0004FC  C104  F094         	movff	_log_startTime+4,?_printf+6
  9365  000500  C105  F095         	movff	_log_startTime+5,?_printf+7
  9366  000504  C102  F096         	movff	_log_startTime+2,?_printf+8
  9367  000508  C103  F097         	movff	_log_startTime+3,?_printf+9
  9368  00050C  C100  F098         	movff	_log_startTime,?_printf+10
  9369  000510  C101  F099         	movff	_log_startTime+1,?_printf+11
  9370  000514  ECC1  F00B         	call	_printf	;wreg free
  9371                           
  9372                           ;UI.c: 172: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9373  000518  0E00               	movlw	0
  9374  00051A  0100               	movlb	0	; () banked
  9375  00051C  6FCC               	movwf	UI@i_434& (0+255),b
  9376  00051E                     l9361:
  9377                           
  9378                           ; BSR set to: 0
  9379  00051E  0E63               	movlw	99
  9380  000520  0100               	movlb	0	; () banked
  9381  000522  65CC               	cpfsgt	UI@i_434& (0+255),b
  9382  000524  D001               	goto	l9365
  9383  000526  D00C               	goto	l9369
  9384  000528                     l9365:
  9385                           
  9386                           ; BSR set to: 0
  9387  000528  0E68               	movlw	104
  9388  00052A  0100               	movlb	0	; () banked
  9389  00052C  6FC4               	movwf	??_UI& (0+255),b
  9390  00052E  0EE4               	movlw	228
  9391  000530                     u10217:
  9392  000530  2EE8               	decfsz	wreg,f,c
  9393  000532  D7FE               	bra	u10217
  9394  000534  2FC4               	decfsz	??_UI& (0+255),f,b
  9395  000536  D7FC               	bra	u10217
  9396  000538  F000               	nop	
  9397  00053A  0100               	movlb	0	; () banked
  9398  00053C  2BCC               	incf	UI@i_434& (0+255),f,b
  9399  00053E  D7EF               	goto	l9361
  9400  000540                     l9369:
  9401                           
  9402                           ; BSR set to: 0
  9403  000540  0100               	movlb	0	; () banked
  9404  000542  51F8               	movf	_logstate& (0+255),w,b
  9405  000544  0100               	movlb	0	; () banked
  9406  000546  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9407  000548  B4D8               	btfsc	status,2,c
  9408  00054A  0012               	return	
  9409                           
  9410                           ; BSR set to: 0
  9411                           ;UI.c: 173: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9412                           
  9413                           ; BSR set to: 0
  9414                           
  9415                           ; BSR set to: 0
  9416  00054C  0E00               	movlw	0
  9417  00054E  0100               	movlb	0	; () banked
  9418  000550  6FCD               	movwf	UI@i_435& (0+255),b
  9419  000552                     l9375:
  9420                           
  9421                           ; BSR set to: 0
  9422  000552  0E63               	movlw	99
  9423  000554  0100               	movlb	0	; () banked
  9424  000556  65CD               	cpfsgt	UI@i_435& (0+255),b
  9425  000558  D001               	goto	l9379
  9426  00055A  D00C               	goto	l9383
  9427  00055C                     l9379:
  9428                           
  9429                           ; BSR set to: 0
  9430  00055C  0E68               	movlw	104
  9431  00055E  0100               	movlb	0	; () banked
  9432  000560  6FC4               	movwf	??_UI& (0+255),b
  9433  000562  0EE4               	movlw	228
  9434  000564                     u10227:
  9435  000564  2EE8               	decfsz	wreg,f,c
  9436  000566  D7FE               	bra	u10227
  9437  000568  2FC4               	decfsz	??_UI& (0+255),f,b
  9438  00056A  D7FC               	bra	u10227
  9439  00056C  F000               	nop	
  9440  00056E  0100               	movlb	0	; () banked
  9441  000570  2BCD               	incf	UI@i_435& (0+255),f,b
  9442  000572  D7EF               	goto	l9375
  9443  000574                     l9383:
  9444                           
  9445                           ; BSR set to: 0
  9446  000574  0100               	movlb	0	; () banked
  9447  000576  51F8               	movf	_logstate& (0+255),w,b
  9448  000578  0100               	movlb	0	; () banked
  9449  00057A  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9450  00057C  B4D8               	btfsc	status,2,c
  9451  00057E  0012               	return	
  9452                           
  9453                           ; BSR set to: 0
  9454                           ;UI.c: 175: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9455                           
  9456                           ; BSR set to: 0
  9457                           
  9458                           ; BSR set to: 0
  9459  000580  0E01               	movlw	1
  9460  000582  ECBB  F02D         	call	_lcdInst
  9461  000586  0E68               	movlw	104
  9462  000588  0100               	movlb	0	; () banked
  9463  00058A  6FC4               	movwf	??_UI& (0+255),b
  9464  00058C  0EE4               	movlw	228
  9465  00058E                     u10237:
  9466  00058E  2EE8               	decfsz	wreg,f,c
  9467  000590  D7FE               	bra	u10237
  9468  000592  2FC4               	decfsz	??_UI& (0+255),f,b
  9469  000594  D7FC               	bra	u10237
  9470  000596  F000               	nop	
  9471                           
  9472                           ;UI.c: 176: lcdInst(0b10000000);;
  9473  000598  0E80               	movlw	128
  9474  00059A  ECBB  F02D         	call	_lcdInst
  9475                           
  9476                           ;UI.c: 177: printf("DURATION:");
  9477  00059E  0E9B               	movlw	low STR_22
  9478  0005A0  0100               	movlb	0	; () banked
  9479  0005A2  6F8E               	movwf	printf@f& (0+255),b
  9480  0005A4  0EFF               	movlw	high STR_22
  9481  0005A6  0100               	movlb	0	; () banked
  9482  0005A8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9483  0005AA  ECC1  F00B         	call	_printf	;wreg free
  9484                           
  9485                           ;UI.c: 178: lcdInst(0b11000000);;
  9486  0005AE  0EC0               	movlw	192
  9487  0005B0  ECBB  F02D         	call	_lcdInst
  9488                           
  9489                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  9490  0005B4  0E0E               	movlw	14
  9491  0005B6  0100               	movlb	0	; () banked
  9492  0005B8  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9493  0005BA  0E10               	movlw	16
  9494  0005BC  6F82               	movwf	___awmod@divisor& (0+255),b
  9495  0005BE  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  9496  0005C2  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  9497  0005C6  ECBA  F025         	call	___awmod	;wreg free
  9498  0005CA  C080  F0C6         	movff	?___awmod,_UI$2427
  9499  0005CE  C081  F0C7         	movff	?___awmod+1,_UI$2427+1
  9500                           
  9501                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  9502  0005D2  0E3C               	movlw	low STR_23
  9503  0005D4  0100               	movlb	0	; () banked
  9504  0005D6  6F8E               	movwf	printf@f& (0+255),b
  9505  0005D8  0EFF               	movlw	high STR_23
  9506  0005DA  0100               	movlb	0	; () banked
  9507  0005DC  6F8F               	movwf	(printf@f+1)& (0+255),b
  9508  0005DE  0E0E               	movlw	14
  9509  0005E0  0100               	movlb	0	; () banked
  9510  0005E2  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9511  0005E4  0E10               	movlw	16
  9512  0005E6  6F82               	movwf	___awmod@divisor& (0+255),b
  9513  0005E8  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  9514  0005EC  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  9515  0005F0  ECBA  F025         	call	___awmod	;wreg free
  9516  0005F4  C080  F086         	movff	?___awmod,___awdiv@dividend
  9517  0005F8  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  9518  0005FC  0E00               	movlw	0
  9519  0005FE  0100               	movlb	0	; () banked
  9520  000600  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  9521  000602  0E3C               	movlw	60
  9522  000604  6F88               	movwf	___awdiv@divisor& (0+255),b
  9523  000606  ECA8  F024         	call	___awdiv	;wreg free
  9524  00060A  C086  F090         	movff	?___awdiv,?_printf+2
  9525  00060E  C087  F091         	movff	?___awdiv+1,?_printf+3
  9526  000612  C0C6  F080         	movff	_UI$2427,___awmod@dividend
  9527  000616  C0C7  F081         	movff	_UI$2427+1,___awmod@dividend+1
  9528  00061A  0E00               	movlw	0
  9529  00061C  0100               	movlb	0	; () banked
  9530  00061E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9531  000620  0E3C               	movlw	60
  9532  000622  6F82               	movwf	___awmod@divisor& (0+255),b
  9533  000624  ECBA  F025         	call	___awmod	;wreg free
  9534  000628  C080  F092         	movff	?___awmod,?_printf+4
  9535  00062C  C081  F093         	movff	?___awmod+1,?_printf+5
  9536  000630  ECC1  F00B         	call	_printf	;wreg free
  9537                           
  9538                           ;UI.c: 181: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9539  000634  0E00               	movlw	0
  9540  000636  0100               	movlb	0	; () banked
  9541  000638  6FCE               	movwf	UI@i_438& (0+255),b
  9542  00063A                     l9403:
  9543                           
  9544                           ; BSR set to: 0
  9545  00063A  0E63               	movlw	99
  9546  00063C  0100               	movlb	0	; () banked
  9547  00063E  65CE               	cpfsgt	UI@i_438& (0+255),b
  9548  000640  D001               	goto	l9407
  9549  000642  D00C               	goto	l9411
  9550  000644                     l9407:
  9551                           
  9552                           ; BSR set to: 0
  9553  000644  0E68               	movlw	104
  9554  000646  0100               	movlb	0	; () banked
  9555  000648  6FC4               	movwf	??_UI& (0+255),b
  9556  00064A  0EE4               	movlw	228
  9557  00064C                     u10247:
  9558  00064C  2EE8               	decfsz	wreg,f,c
  9559  00064E  D7FE               	bra	u10247
  9560  000650  2FC4               	decfsz	??_UI& (0+255),f,b
  9561  000652  D7FC               	bra	u10247
  9562  000654  F000               	nop	
  9563  000656  0100               	movlb	0	; () banked
  9564  000658  2BCE               	incf	UI@i_438& (0+255),f,b
  9565  00065A  D7EF               	goto	l9403
  9566  00065C                     l9411:
  9567                           
  9568                           ; BSR set to: 0
  9569  00065C  0100               	movlb	0	; () banked
  9570  00065E  51F8               	movf	_logstate& (0+255),w,b
  9571  000660  0100               	movlb	0	; () banked
  9572  000662  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9573  000664  B4D8               	btfsc	status,2,c
  9574  000666  0012               	return	
  9575                           
  9576                           ; BSR set to: 0
  9577                           ;UI.c: 182: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9578                           
  9579                           ; BSR set to: 0
  9580                           
  9581                           ; BSR set to: 0
  9582  000668  0E00               	movlw	0
  9583  00066A  0100               	movlb	0	; () banked
  9584  00066C  6FCF               	movwf	UI@i_439& (0+255),b
  9585  00066E                     l9417:
  9586                           
  9587                           ; BSR set to: 0
  9588  00066E  0E63               	movlw	99
  9589  000670  0100               	movlb	0	; () banked
  9590  000672  65CF               	cpfsgt	UI@i_439& (0+255),b
  9591  000674  D001               	goto	l9421
  9592  000676  D00C               	goto	l9425
  9593  000678                     l9421:
  9594                           
  9595                           ; BSR set to: 0
  9596  000678  0E68               	movlw	104
  9597  00067A  0100               	movlb	0	; () banked
  9598  00067C  6FC4               	movwf	??_UI& (0+255),b
  9599  00067E  0EE4               	movlw	228
  9600  000680                     u10257:
  9601  000680  2EE8               	decfsz	wreg,f,c
  9602  000682  D7FE               	bra	u10257
  9603  000684  2FC4               	decfsz	??_UI& (0+255),f,b
  9604  000686  D7FC               	bra	u10257
  9605  000688  F000               	nop	
  9606  00068A  0100               	movlb	0	; () banked
  9607  00068C  2BCF               	incf	UI@i_439& (0+255),f,b
  9608  00068E  D7EF               	goto	l9417
  9609  000690                     l9425:
  9610                           
  9611                           ; BSR set to: 0
  9612  000690  0100               	movlb	0	; () banked
  9613  000692  51F8               	movf	_logstate& (0+255),w,b
  9614  000694  0100               	movlb	0	; () banked
  9615  000696  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9616  000698  B4D8               	btfsc	status,2,c
  9617  00069A  0012               	return	
  9618                           
  9619                           ; BSR set to: 0
  9620                           ;UI.c: 184: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9621                           
  9622                           ; BSR set to: 0
  9623                           
  9624                           ; BSR set to: 0
  9625  00069C  0E01               	movlw	1
  9626  00069E  ECBB  F02D         	call	_lcdInst
  9627  0006A2  0E68               	movlw	104
  9628  0006A4  0100               	movlb	0	; () banked
  9629  0006A6  6FC4               	movwf	??_UI& (0+255),b
  9630  0006A8  0EE4               	movlw	228
  9631  0006AA                     u10267:
  9632  0006AA  2EE8               	decfsz	wreg,f,c
  9633  0006AC  D7FE               	bra	u10267
  9634  0006AE  2FC4               	decfsz	??_UI& (0+255),f,b
  9635  0006B0  D7FC               	bra	u10267
  9636  0006B2  F000               	nop	
  9637                           
  9638                           ;UI.c: 185: lcdInst(0b10000000);;
  9639  0006B4  0E80               	movlw	128
  9640  0006B6  ECBB  F02D         	call	_lcdInst
  9641                           
  9642                           ;UI.c: 186: printf(" -- POP  CAN -- ");
  9643  0006BA  0E50               	movlw	low STR_24
  9644  0006BC  0100               	movlb	0	; () banked
  9645  0006BE  6F8E               	movwf	printf@f& (0+255),b
  9646  0006C0  0EFD               	movlw	high STR_24
  9647  0006C2  0100               	movlb	0	; () banked
  9648  0006C4  6F8F               	movwf	(printf@f+1)& (0+255),b
  9649  0006C6  ECC1  F00B         	call	_printf	;wreg free
  9650                           
  9651                           ;UI.c: 187: lcdInst(0b11000000);;
  9652  0006CA  0EC0               	movlw	192
  9653  0006CC  ECBB  F02D         	call	_lcdInst
  9654                           
  9655                           ;UI.c: 188: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  9656  0006D0  0E2D               	movlw	low STR_25
  9657  0006D2  0100               	movlb	0	; () banked
  9658  0006D4  6F8E               	movwf	printf@f& (0+255),b
  9659  0006D6  0EFE               	movlw	high STR_25
  9660  0006D8  0100               	movlb	0	; () banked
  9661  0006DA  6F8F               	movwf	(printf@f+1)& (0+255),b
  9662  0006DC  C067  F090         	movff	_log_count_pop_no_tab,?_printf+2
  9663  0006E0  C068  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  9664  0006E4  C069  F092         	movff	_log_count_pop_w_tab,?_printf+4
  9665  0006E8  C06A  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  9666  0006EC  ECC1  F00B         	call	_printf	;wreg free
  9667                           
  9668                           ;UI.c: 190: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9669  0006F0  0E00               	movlw	0
  9670  0006F2  0100               	movlb	0	; () banked
  9671  0006F4  6FD0               	movwf	UI@i_442& (0+255),b
  9672  0006F6                     l9443:
  9673                           
  9674                           ; BSR set to: 0
  9675  0006F6  0E63               	movlw	99
  9676  0006F8  0100               	movlb	0	; () banked
  9677  0006FA  65D0               	cpfsgt	UI@i_442& (0+255),b
  9678  0006FC  D001               	goto	l9447
  9679  0006FE  D00C               	goto	l9451
  9680  000700                     l9447:
  9681                           
  9682                           ; BSR set to: 0
  9683  000700  0E68               	movlw	104
  9684  000702  0100               	movlb	0	; () banked
  9685  000704  6FC4               	movwf	??_UI& (0+255),b
  9686  000706  0EE4               	movlw	228
  9687  000708                     u10277:
  9688  000708  2EE8               	decfsz	wreg,f,c
  9689  00070A  D7FE               	bra	u10277
  9690  00070C  2FC4               	decfsz	??_UI& (0+255),f,b
  9691  00070E  D7FC               	bra	u10277
  9692  000710  F000               	nop	
  9693  000712  0100               	movlb	0	; () banked
  9694  000714  2BD0               	incf	UI@i_442& (0+255),f,b
  9695  000716  D7EF               	goto	l9443
  9696  000718                     l9451:
  9697                           
  9698                           ; BSR set to: 0
  9699  000718  0100               	movlb	0	; () banked
  9700  00071A  51F8               	movf	_logstate& (0+255),w,b
  9701  00071C  0100               	movlb	0	; () banked
  9702  00071E  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9703  000720  B4D8               	btfsc	status,2,c
  9704  000722  0012               	return	
  9705                           
  9706                           ; BSR set to: 0
  9707                           ;UI.c: 191: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9708                           
  9709                           ; BSR set to: 0
  9710                           
  9711                           ; BSR set to: 0
  9712  000724  0E00               	movlw	0
  9713  000726  0100               	movlb	0	; () banked
  9714  000728  6FD1               	movwf	UI@i_443& (0+255),b
  9715  00072A                     l9457:
  9716                           
  9717                           ; BSR set to: 0
  9718  00072A  0E63               	movlw	99
  9719  00072C  0100               	movlb	0	; () banked
  9720  00072E  65D1               	cpfsgt	UI@i_443& (0+255),b
  9721  000730  D001               	goto	l9461
  9722  000732  D00C               	goto	l9465
  9723  000734                     l9461:
  9724                           
  9725                           ; BSR set to: 0
  9726  000734  0E68               	movlw	104
  9727  000736  0100               	movlb	0	; () banked
  9728  000738  6FC4               	movwf	??_UI& (0+255),b
  9729  00073A  0EE4               	movlw	228
  9730  00073C                     u10287:
  9731  00073C  2EE8               	decfsz	wreg,f,c
  9732  00073E  D7FE               	bra	u10287
  9733  000740  2FC4               	decfsz	??_UI& (0+255),f,b
  9734  000742  D7FC               	bra	u10287
  9735  000744  F000               	nop	
  9736  000746  0100               	movlb	0	; () banked
  9737  000748  2BD1               	incf	UI@i_443& (0+255),f,b
  9738  00074A  D7EF               	goto	l9457
  9739  00074C                     l9465:
  9740                           
  9741                           ; BSR set to: 0
  9742  00074C  0100               	movlb	0	; () banked
  9743  00074E  51F8               	movf	_logstate& (0+255),w,b
  9744  000750  0100               	movlb	0	; () banked
  9745  000752  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9746  000754  B4D8               	btfsc	status,2,c
  9747  000756  0012               	return	
  9748                           
  9749                           ; BSR set to: 0
  9750                           ;UI.c: 193: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9751                           
  9752                           ; BSR set to: 0
  9753                           
  9754                           ; BSR set to: 0
  9755  000758  0E01               	movlw	1
  9756  00075A  ECBB  F02D         	call	_lcdInst
  9757  00075E  0E68               	movlw	104
  9758  000760  0100               	movlb	0	; () banked
  9759  000762  6FC4               	movwf	??_UI& (0+255),b
  9760  000764  0EE4               	movlw	228
  9761  000766                     u10297:
  9762  000766  2EE8               	decfsz	wreg,f,c
  9763  000768  D7FE               	bra	u10297
  9764  00076A  2FC4               	decfsz	??_UI& (0+255),f,b
  9765  00076C  D7FC               	bra	u10297
  9766  00076E  F000               	nop	
  9767                           
  9768                           ;UI.c: 194: lcdInst(0b10000000);;
  9769  000770  0E80               	movlw	128
  9770  000772  ECBB  F02D         	call	_lcdInst
  9771                           
  9772                           ;UI.c: 195: printf(" -- SOUP CAN -- ");
  9773  000776  0E61               	movlw	low STR_26
  9774  000778  0100               	movlb	0	; () banked
  9775  00077A  6F8E               	movwf	printf@f& (0+255),b
  9776  00077C  0EFD               	movlw	high STR_26
  9777  00077E  0100               	movlb	0	; () banked
  9778  000780  6F8F               	movwf	(printf@f+1)& (0+255),b
  9779  000782  ECC1  F00B         	call	_printf	;wreg free
  9780                           
  9781                           ;UI.c: 196: lcdInst(0b11000000);;
  9782  000786  0EC0               	movlw	192
  9783  000788  ECBB  F02D         	call	_lcdInst
  9784                           
  9785                           ;UI.c: 197: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  9786  00078C  0E1C               	movlw	low STR_27
  9787  00078E  0100               	movlb	0	; () banked
  9788  000790  6F8E               	movwf	printf@f& (0+255),b
  9789  000792  0EFE               	movlw	high STR_27
  9790  000794  0100               	movlb	0	; () banked
  9791  000796  6F8F               	movwf	(printf@f+1)& (0+255),b
  9792  000798  C065  F090         	movff	_log_count_can_no_lab,?_printf+2
  9793  00079C  C066  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  9794  0007A0  C141  F092         	movff	_log_count_can_w_lab,?_printf+4
  9795  0007A4  C142  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  9796  0007A8  ECC1  F00B         	call	_printf	;wreg free
  9797                           
  9798                           ;UI.c: 199: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9799  0007AC  0E00               	movlw	0
  9800  0007AE  0100               	movlb	0	; () banked
  9801  0007B0  6FD2               	movwf	UI@i_446& (0+255),b
  9802  0007B2                     l9483:
  9803                           
  9804                           ; BSR set to: 0
  9805  0007B2  0E63               	movlw	99
  9806  0007B4  0100               	movlb	0	; () banked
  9807  0007B6  65D2               	cpfsgt	UI@i_446& (0+255),b
  9808  0007B8  D001               	goto	l9487
  9809  0007BA  D00C               	goto	l9491
  9810  0007BC                     l9487:
  9811                           
  9812                           ; BSR set to: 0
  9813  0007BC  0E68               	movlw	104
  9814  0007BE  0100               	movlb	0	; () banked
  9815  0007C0  6FC4               	movwf	??_UI& (0+255),b
  9816  0007C2  0EE4               	movlw	228
  9817  0007C4                     u10307:
  9818  0007C4  2EE8               	decfsz	wreg,f,c
  9819  0007C6  D7FE               	bra	u10307
  9820  0007C8  2FC4               	decfsz	??_UI& (0+255),f,b
  9821  0007CA  D7FC               	bra	u10307
  9822  0007CC  F000               	nop	
  9823  0007CE  0100               	movlb	0	; () banked
  9824  0007D0  2BD2               	incf	UI@i_446& (0+255),f,b
  9825  0007D2  D7EF               	goto	l9483
  9826  0007D4                     l9491:
  9827                           
  9828                           ; BSR set to: 0
  9829  0007D4  0100               	movlb	0	; () banked
  9830  0007D6  51F8               	movf	_logstate& (0+255),w,b
  9831  0007D8  0100               	movlb	0	; () banked
  9832  0007DA  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9833  0007DC  B4D8               	btfsc	status,2,c
  9834  0007DE  0012               	return	
  9835                           
  9836                           ; BSR set to: 0
  9837                           ;UI.c: 200: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9838                           
  9839                           ; BSR set to: 0
  9840                           
  9841                           ; BSR set to: 0
  9842  0007E0  0E00               	movlw	0
  9843  0007E2  0100               	movlb	0	; () banked
  9844  0007E4  6FD3               	movwf	UI@i_447& (0+255),b
  9845  0007E6                     l9497:
  9846                           
  9847                           ; BSR set to: 0
  9848  0007E6  0E63               	movlw	99
  9849  0007E8  0100               	movlb	0	; () banked
  9850  0007EA  65D3               	cpfsgt	UI@i_447& (0+255),b
  9851  0007EC  D001               	goto	l9501
  9852  0007EE  D00C               	goto	l9505
  9853  0007F0                     l9501:
  9854                           
  9855                           ; BSR set to: 0
  9856  0007F0  0E68               	movlw	104
  9857  0007F2  0100               	movlb	0	; () banked
  9858  0007F4  6FC4               	movwf	??_UI& (0+255),b
  9859  0007F6  0EE4               	movlw	228
  9860  0007F8                     u10317:
  9861  0007F8  2EE8               	decfsz	wreg,f,c
  9862  0007FA  D7FE               	bra	u10317
  9863  0007FC  2FC4               	decfsz	??_UI& (0+255),f,b
  9864  0007FE  D7FC               	bra	u10317
  9865  000800  F000               	nop	
  9866  000802  0100               	movlb	0	; () banked
  9867  000804  2BD3               	incf	UI@i_447& (0+255),f,b
  9868  000806  D7EF               	goto	l9497
  9869  000808                     l9505:
  9870                           
  9871                           ; BSR set to: 0
  9872  000808  0100               	movlb	0	; () banked
  9873  00080A  51F8               	movf	_logstate& (0+255),w,b
  9874  00080C  0100               	movlb	0	; () banked
  9875  00080E  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9876  000810  B4D8               	btfsc	status,2,c
  9877  000812  0012               	return	
  9878                           
  9879                           ; BSR set to: 0
  9880                           ;UI.c: 202: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9881                           
  9882                           ; BSR set to: 0
  9883                           
  9884                           ; BSR set to: 0
  9885  000814  0E01               	movlw	1
  9886  000816  ECBB  F02D         	call	_lcdInst
  9887  00081A  0E68               	movlw	104
  9888  00081C  0100               	movlb	0	; () banked
  9889  00081E  6FC4               	movwf	??_UI& (0+255),b
  9890  000820  0EE4               	movlw	228
  9891  000822                     u10327:
  9892  000822  2EE8               	decfsz	wreg,f,c
  9893  000824  D7FE               	bra	u10327
  9894  000826  2FC4               	decfsz	??_UI& (0+255),f,b
  9895  000828  D7FC               	bra	u10327
  9896  00082A  F000               	nop	
  9897                           
  9898                           ;UI.c: 203: lcdInst(0b10000000);;
  9899  00082C  0E80               	movlw	128
  9900  00082E  ECBB  F02D         	call	_lcdInst
  9901                           
  9902                           ;UI.c: 204: printf("-- TOTAL CANS --");
  9903  000832  0E72               	movlw	low STR_28
  9904  000834  0100               	movlb	0	; () banked
  9905  000836  6F8E               	movwf	printf@f& (0+255),b
  9906  000838  0EFD               	movlw	high STR_28
  9907  00083A  0100               	movlb	0	; () banked
  9908  00083C  6F8F               	movwf	(printf@f+1)& (0+255),b
  9909  00083E  ECC1  F00B         	call	_printf	;wreg free
  9910                           
  9911                           ;UI.c: 205: lcdInst(0b11000000);;
  9912  000842  0EC0               	movlw	192
  9913  000844  ECBB  F02D         	call	_lcdInst
  9914                           
  9915                           ;UI.c: 206: printf("%d", log_count_total);
  9916  000848  0E2A               	movlw	low (STR_27+14)
  9917  00084A  0100               	movlb	0	; () banked
  9918  00084C  6F8E               	movwf	printf@f& (0+255),b
  9919  00084E  0EFE               	movlw	high (STR_27+14)
  9920  000850  0100               	movlb	0	; () banked
  9921  000852  6F8F               	movwf	(printf@f+1)& (0+255),b
  9922  000854  C143  F090         	movff	_log_count_total,?_printf+2
  9923  000858  C144  F091         	movff	_log_count_total+1,?_printf+3
  9924  00085C  ECC1  F00B         	call	_printf	;wreg free
  9925                           
  9926                           ;UI.c: 208: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9927  000860  0E00               	movlw	0
  9928  000862  0100               	movlb	0	; () banked
  9929  000864  6FD4               	movwf	UI@i_450& (0+255),b
  9930  000866                     l9523:
  9931                           
  9932                           ; BSR set to: 0
  9933  000866  0E63               	movlw	99
  9934  000868  0100               	movlb	0	; () banked
  9935  00086A  65D4               	cpfsgt	UI@i_450& (0+255),b
  9936  00086C  D001               	goto	l9527
  9937  00086E  D00C               	goto	l9531
  9938  000870                     l9527:
  9939                           
  9940                           ; BSR set to: 0
  9941  000870  0E68               	movlw	104
  9942  000872  0100               	movlb	0	; () banked
  9943  000874  6FC4               	movwf	??_UI& (0+255),b
  9944  000876  0EE4               	movlw	228
  9945  000878                     u10337:
  9946  000878  2EE8               	decfsz	wreg,f,c
  9947  00087A  D7FE               	bra	u10337
  9948  00087C  2FC4               	decfsz	??_UI& (0+255),f,b
  9949  00087E  D7FC               	bra	u10337
  9950  000880  F000               	nop	
  9951  000882  0100               	movlb	0	; () banked
  9952  000884  2BD4               	incf	UI@i_450& (0+255),f,b
  9953  000886  D7EF               	goto	l9523
  9954  000888                     l9531:
  9955                           
  9956                           ; BSR set to: 0
  9957  000888  0100               	movlb	0	; () banked
  9958  00088A  51F8               	movf	_logstate& (0+255),w,b
  9959  00088C  0100               	movlb	0	; () banked
  9960  00088E  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9961  000890  B4D8               	btfsc	status,2,c
  9962  000892  0012               	return	
  9963                           
  9964                           ; BSR set to: 0
  9965                           ;UI.c: 209: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9966                           
  9967                           ; BSR set to: 0
  9968                           
  9969                           ; BSR set to: 0
  9970  000894  0E00               	movlw	0
  9971  000896  0100               	movlb	0	; () banked
  9972  000898  6FD5               	movwf	UI@i_451& (0+255),b
  9973  00089A                     l9537:
  9974                           
  9975                           ; BSR set to: 0
  9976  00089A  0E63               	movlw	99
  9977  00089C  0100               	movlb	0	; () banked
  9978  00089E  65D5               	cpfsgt	UI@i_451& (0+255),b
  9979  0008A0  D001               	goto	l9541
  9980  0008A2  D00C               	goto	l9545
  9981  0008A4                     l9541:
  9982                           
  9983                           ; BSR set to: 0
  9984  0008A4  0E68               	movlw	104
  9985  0008A6  0100               	movlb	0	; () banked
  9986  0008A8  6FC4               	movwf	??_UI& (0+255),b
  9987  0008AA  0EE4               	movlw	228
  9988  0008AC                     u10347:
  9989  0008AC  2EE8               	decfsz	wreg,f,c
  9990  0008AE  D7FE               	bra	u10347
  9991  0008B0  2FC4               	decfsz	??_UI& (0+255),f,b
  9992  0008B2  D7FC               	bra	u10347
  9993  0008B4  F000               	nop	
  9994  0008B6  0100               	movlb	0	; () banked
  9995  0008B8  2BD5               	incf	UI@i_451& (0+255),f,b
  9996  0008BA  D7EF               	goto	l9537
  9997  0008BC                     l9545:
  9998                           
  9999                           ; BSR set to: 0
 10000  0008BC  0100               	movlb	0	; () banked
 10001  0008BE  51F8               	movf	_logstate& (0+255),w,b
 10002  0008C0  0100               	movlb	0	; () banked
 10003  0008C2  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10004  0008C4  B4D8               	btfsc	status,2,c
 10005  0008C6  0012               	return	
 10006  0008C8                     l9549:
 10007  0008C8  0100               	movlb	0	; () banked
 10008  0008CA  51F8               	movf	_logstate& (0+255),w,b
 10009  0008CC  0100               	movlb	0	; () banked
 10010  0008CE  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10011  0008D0  B4D8               	btfsc	status,2,c
 10012  0008D2  0012               	return	
 10013  0008D4  D44C               	goto	l9245
 10014  0008D6                     __end_of_UI:
 10015                           	opt stack 0
 10016                           tblptru	equ	0xFF8
 10017                           tblptrh	equ	0xFF7
 10018                           tblptrl	equ	0xFF6
 10019                           tablat	equ	0xFF5
 10020                           prodh	equ	0xFF4
 10021                           prodl	equ	0xFF3
 10022                           intcon	equ	0xFF2
 10023                           intcon2	equ	0xFF1
 10024                           intcon3	equ	0xFF0
 10025                           postinc0	equ	0xFEE
 10026                           wreg	equ	0xFE8
 10027                           postdec1	equ	0xFE5
 10028                           fsr1l	equ	0xFE1
 10029                           indf2	equ	0xFDF
 10030                           postinc2	equ	0xFDE
 10031                           postdec2	equ	0xFDD
 10032                           fsr2h	equ	0xFDA
 10033                           fsr2l	equ	0xFD9
 10034                           status	equ	0xFD8
 10035                           
 10036 ;; *************** function _printRTC *****************
 10037 ;; Defined at:
 10038 ;;		line 63 in file "RTC.c"
 10039 ;; Parameters:    Size  Location     Type
 10040 ;;		None
 10041 ;; Auto vars:     Size  Location     Type
 10042 ;;  i               2   66[BANK0 ] int 
 10043 ;;  INT_time       14   46[BANK0 ] int [7]
 10044 ;;  month           4   62[BANK0 ] unsigned char [4]
 10045 ;;  RTC_month       2   60[BANK0 ] int 
 10046 ;; Return value:  Size  Location     Type
 10047 ;;                  1    wreg      void 
 10048 ;; Registers used:
 10049 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10050 ;; Tracked objects:
 10051 ;;		On entry : 0/0
 10052 ;;		On exit  : 0/0
 10053 ;;		Unchanged: 0/0
 10054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10056 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10057 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10058 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10059 ;;Total ram usage:       25 bytes
 10060 ;; Hardware stack levels used:    1
 10061 ;; Hardware stack levels required when called:   10
 10062 ;; This function calls:
 10063 ;;		_getRTC
 10064 ;;		_lcdInst
 10065 ;;		_printf
 10066 ;;		_strcpy
 10067 ;; This function is called by:
 10068 ;;		_UI
 10069 ;;		_change_state_to_menu_start
 10070 ;; This function uses a non-reentrant model
 10071 ;;
 10072                           
 10073                           	psect	text28
 10074  002D1A                     __ptext28:
 10075                           	opt stack 0
 10076  002D1A                     _printRTC:
 10077                           	opt stack 18
 10078                           
 10079                           ;RTC.c: 64: getRTC();
 10080                           
 10081                           ; BSR set to: 0
 10082                           ;incstack = 0
 10083  002D1A  EC51  F026         	call	_getRTC	;wreg free
 10084                           
 10085                           ;RTC.c: 65: char month[] = "MMM";
 10086  002D1E  C14D  F0BE         	movff	printRTC@F3236,printRTC@month
 10087  002D22  C14E  F0BF         	movff	printRTC@F3236+1,printRTC@month+1
 10088  002D26  C14F  F0C0         	movff	printRTC@F3236+2,printRTC@month+2
 10089  002D2A  C150  F0C1         	movff	printRTC@F3236+3,printRTC@month+3
 10090                           
 10091                           ;RTC.c: 66: int INT_time[7];
 10092                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 10093  002D2E  0E00               	movlw	0
 10094  002D30  0100               	movlb	0	; () banked
 10095  002D32  6FC3               	movwf	(printRTC@i+1)& (0+255),b
 10096  002D34  0E00               	movlw	0
 10097  002D36  6FC2               	movwf	printRTC@i& (0+255),b
 10098                           
 10099                           ; BSR set to: 0
 10100  002D38  0100               	movlb	0	; () banked
 10101  002D3A  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
 10102  002D3C  D008               	goto	l7117
 10103  002D3E  0100               	movlb	0	; () banked
 10104  002D40  51C3               	movf	(printRTC@i+1)& (0+255),w,b
 10105  002D42  E146               	bnz	l627
 10106  002D44  0E07               	movlw	7
 10107  002D46  0100               	movlb	0	; () banked
 10108  002D48  5DC2               	subwf	printRTC@i& (0+255),w,b
 10109  002D4A  B0D8               	btfsc	status,0,c
 10110  002D4C  D041               	goto	l627
 10111  002D4E                     l7117:
 10112                           
 10113                           ; BSR set to: 0
 10114                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 10115  002D4E  0E1C               	movlw	low _time
 10116  002D50  0100               	movlb	0	; () banked
 10117  002D52  25C2               	addwf	printRTC@i& (0+255),w,b
 10118  002D54  6ED9               	movwf	fsr2l,c
 10119  002D56  0E01               	movlw	high _time
 10120  002D58  0100               	movlb	0	; () banked
 10121  002D5A  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
 10122  002D5C  6EDA               	movwf	fsr2h,c
 10123  002D5E  50DF               	movf	indf2,w,c
 10124  002D60  0100               	movlb	0	; () banked
 10125  002D62  6FAB               	movwf	??_printRTC& (0+255),b
 10126  002D64  0100               	movlb	0	; () banked
 10127  002D66  3BAB               	swapf	??_printRTC& (0+255),f,b
 10128  002D68  0E0F               	movlw	15
 10129  002D6A  17AB               	andwf	??_printRTC& (0+255),f,b
 10130  002D6C  0E0F               	movlw	15
 10131  002D6E  0100               	movlb	0	; () banked
 10132  002D70  17AB               	andwf	??_printRTC& (0+255),f,b
 10133  002D72  0100               	movlb	0	; () banked
 10134  002D74  51AB               	movf	??_printRTC& (0+255),w,b
 10135  002D76  0D0A               	mullw	10
 10136  002D78  0E1C               	movlw	low _time
 10137  002D7A  0100               	movlb	0	; () banked
 10138  002D7C  25C2               	addwf	printRTC@i& (0+255),w,b
 10139  002D7E  6ED9               	movwf	fsr2l,c
 10140  002D80  0E01               	movlw	high _time
 10141  002D82  0100               	movlb	0	; () banked
 10142  002D84  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
 10143  002D86  6EDA               	movwf	fsr2h,c
 10144  002D88  50DF               	movf	indf2,w,c
 10145  002D8A  0B0F               	andlw	15
 10146  002D8C  0100               	movlb	0	; () banked
 10147  002D8E  6FAC               	movwf	(??_printRTC+1)& (0+255),b
 10148  002D90  6BAD               	clrf	(??_printRTC+2)& (0+255),b
 10149  002D92  50F3               	movf	prodl,w,c
 10150  002D94  0100               	movlb	0	; () banked
 10151  002D96  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
 10152  002D98  50F4               	movf	prodh,w,c
 10153  002D9A  0100               	movlb	0	; () banked
 10154  002D9C  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
 10155  002D9E  90D8               	bcf	status,0,c
 10156  002DA0  0100               	movlb	0	; () banked
 10157  002DA2  35C2               	rlcf	printRTC@i& (0+255),w,b
 10158  002DA4  6ED9               	movwf	fsr2l,c
 10159  002DA6  0100               	movlb	0	; () banked
 10160  002DA8  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
 10161  002DAA  6EDA               	movwf	fsr2h,c
 10162  002DAC  0EAE               	movlw	low printRTC@INT_time
 10163  002DAE  26D9               	addwf	fsr2l,f,c
 10164  002DB0  0E00               	movlw	high printRTC@INT_time
 10165  002DB2  22DA               	addwfc	fsr2h,f,c
 10166  002DB4  C0AC  FFDE         	movff	??_printRTC+1,postinc2
 10167  002DB8  C0AD  FFDD         	movff	??_printRTC+2,postdec2
 10168                           
 10169                           ; BSR set to: 0
 10170  002DBC  0100               	movlb	0	; () banked
 10171  002DBE  4BC2               	infsnz	printRTC@i& (0+255),f,b
 10172  002DC0  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
 10173                           
 10174                           ; BSR set to: 0
 10175  002DC2  0100               	movlb	0	; () banked
 10176  002DC4  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
 10177  002DC6  D7C3               	goto	l7117
 10178  002DC8  0100               	movlb	0	; () banked
 10179  002DCA  51C3               	movf	(printRTC@i+1)& (0+255),w,b
 10180  002DCC  E101               	bnz	u5920
 10181  002DCE  D7BA               	goto	L11
 10182  002DD0                     u5920:
 10183  002DD0                     l627:
 10184                           
 10185                           ; BSR set to: 0
 10186                           ;RTC.c: 69: }
 10187                           ;RTC.c: 70: int RTC_month = INT_time[5];
 10188  002DD0  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
 10189  002DD4  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
 10190                           
 10191                           ;RTC.c: 72: switch(RTC_month){
 10192  002DD8  D0B4               	goto	l7149
 10193  002DDA                     l7123:
 10194                           
 10195                           ; BSR set to: 0
 10196                           ;RTC.c: 74: strcpy(month, "JAN");
 10197  002DDA  0EBE               	movlw	low printRTC@month
 10198  002DDC  0100               	movlb	0	; () banked
 10199  002DDE  6F80               	movwf	strcpy@to& (0+255),b
 10200  002DE0  0E00               	movlw	high printRTC@month
 10201  002DE2  0100               	movlb	0	; () banked
 10202  002DE4  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10203  002DE6  0EDB               	movlw	low STR_8
 10204  002DE8  0100               	movlb	0	; () banked
 10205  002DEA  6F82               	movwf	strcpy@from& (0+255),b
 10206  002DEC  0EFF               	movlw	high STR_8
 10207  002DEE  0100               	movlb	0	; () banked
 10208  002DF0  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10209  002DF2  EC0A  F02B         	call	_strcpy	;wreg free
 10210                           
 10211                           ;RTC.c: 75: break;
 10212  002DF6  D0D4               	goto	l7151
 10213  002DF8                     l7125:
 10214                           
 10215                           ;RTC.c: 77: strcpy(month, "FEB");
 10216  002DF8  0EBE               	movlw	low printRTC@month
 10217  002DFA  0100               	movlb	0	; () banked
 10218  002DFC  6F80               	movwf	strcpy@to& (0+255),b
 10219  002DFE  0E00               	movlw	high printRTC@month
 10220  002E00  0100               	movlb	0	; () banked
 10221  002E02  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10222  002E04  0ECB               	movlw	low STR_9
 10223  002E06  0100               	movlb	0	; () banked
 10224  002E08  6F82               	movwf	strcpy@from& (0+255),b
 10225  002E0A  0EFF               	movlw	high STR_9
 10226  002E0C  0100               	movlb	0	; () banked
 10227  002E0E  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10228  002E10  EC0A  F02B         	call	_strcpy	;wreg free
 10229                           
 10230                           ;RTC.c: 78: break;
 10231  002E14  D0C5               	goto	l7151
 10232  002E16                     l7127:
 10233                           
 10234                           ;RTC.c: 80: strcpy(month, "MAR");
 10235  002E16  0EBE               	movlw	low printRTC@month
 10236  002E18  0100               	movlb	0	; () banked
 10237  002E1A  6F80               	movwf	strcpy@to& (0+255),b
 10238  002E1C  0E00               	movlw	high printRTC@month
 10239  002E1E  0100               	movlb	0	; () banked
 10240  002E20  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10241  002E22  0EE7               	movlw	low STR_10
 10242  002E24  0100               	movlb	0	; () banked
 10243  002E26  6F82               	movwf	strcpy@from& (0+255),b
 10244  002E28  0EFF               	movlw	high STR_10
 10245  002E2A  0100               	movlb	0	; () banked
 10246  002E2C  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10247  002E2E  EC0A  F02B         	call	_strcpy	;wreg free
 10248                           
 10249                           ;RTC.c: 81: break;
 10250  002E32  D0B6               	goto	l7151
 10251  002E34                     l7129:
 10252                           
 10253                           ;RTC.c: 83: strcpy(month, "APR");
 10254  002E34  0EBE               	movlw	low printRTC@month
 10255  002E36  0100               	movlb	0	; () banked
 10256  002E38  6F80               	movwf	strcpy@to& (0+255),b
 10257  002E3A  0E00               	movlw	high printRTC@month
 10258  002E3C  0100               	movlb	0	; () banked
 10259  002E3E  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10260  002E40  0EEB               	movlw	low STR_11
 10261  002E42  0100               	movlb	0	; () banked
 10262  002E44  6F82               	movwf	strcpy@from& (0+255),b
 10263  002E46  0EFF               	movlw	high STR_11
 10264  002E48  0100               	movlb	0	; () banked
 10265  002E4A  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10266  002E4C  EC0A  F02B         	call	_strcpy	;wreg free
 10267                           
 10268                           ;RTC.c: 84: break;
 10269  002E50  D0A7               	goto	l7151
 10270  002E52                     l7131:
 10271                           
 10272                           ;RTC.c: 86: strcpy(month, "MAY");
 10273  002E52  0EBE               	movlw	low printRTC@month
 10274  002E54  0100               	movlb	0	; () banked
 10275  002E56  6F80               	movwf	strcpy@to& (0+255),b
 10276  002E58  0E00               	movlw	high printRTC@month
 10277  002E5A  0100               	movlb	0	; () banked
 10278  002E5C  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10279  002E5E  0EFB               	movlw	low STR_12
 10280  002E60  0100               	movlb	0	; () banked
 10281  002E62  6F82               	movwf	strcpy@from& (0+255),b
 10282  002E64  0EFF               	movlw	high STR_12
 10283  002E66  0100               	movlb	0	; () banked
 10284  002E68  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10285  002E6A  EC0A  F02B         	call	_strcpy	;wreg free
 10286                           
 10287                           ;RTC.c: 87: break;
 10288  002E6E  D098               	goto	l7151
 10289  002E70                     l7133:
 10290                           
 10291                           ;RTC.c: 89: strcpy(month, "JUN");
 10292  002E70  0EBE               	movlw	low printRTC@month
 10293  002E72  0100               	movlb	0	; () banked
 10294  002E74  6F80               	movwf	strcpy@to& (0+255),b
 10295  002E76  0E00               	movlw	high printRTC@month
 10296  002E78  0100               	movlb	0	; () banked
 10297  002E7A  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10298  002E7C  0EDF               	movlw	low STR_13
 10299  002E7E  0100               	movlb	0	; () banked
 10300  002E80  6F82               	movwf	strcpy@from& (0+255),b
 10301  002E82  0EFF               	movlw	high STR_13
 10302  002E84  0100               	movlb	0	; () banked
 10303  002E86  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10304  002E88  EC0A  F02B         	call	_strcpy	;wreg free
 10305                           
 10306                           ;RTC.c: 90: break;
 10307  002E8C  D089               	goto	l7151
 10308  002E8E                     l7135:
 10309                           
 10310                           ;RTC.c: 92: strcpy(month, "JUL");
 10311  002E8E  0EBE               	movlw	low printRTC@month
 10312  002E90  0100               	movlb	0	; () banked
 10313  002E92  6F80               	movwf	strcpy@to& (0+255),b
 10314  002E94  0E00               	movlw	high printRTC@month
 10315  002E96  0100               	movlb	0	; () banked
 10316  002E98  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10317  002E9A  0ED7               	movlw	low STR_14
 10318  002E9C  0100               	movlb	0	; () banked
 10319  002E9E  6F82               	movwf	strcpy@from& (0+255),b
 10320  002EA0  0EFF               	movlw	high STR_14
 10321  002EA2  0100               	movlb	0	; () banked
 10322  002EA4  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10323  002EA6  EC0A  F02B         	call	_strcpy	;wreg free
 10324                           
 10325                           ;RTC.c: 93: break;
 10326  002EAA  D07A               	goto	l7151
 10327  002EAC                     l7137:
 10328                           
 10329                           ;RTC.c: 95: strcpy(month, "AUG");
 10330  002EAC  0EBE               	movlw	low printRTC@month
 10331  002EAE  0100               	movlb	0	; () banked
 10332  002EB0  6F80               	movwf	strcpy@to& (0+255),b
 10333  002EB2  0E00               	movlw	high printRTC@month
 10334  002EB4  0100               	movlb	0	; () banked
 10335  002EB6  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10336  002EB8  0ED3               	movlw	low STR_15
 10337  002EBA  0100               	movlb	0	; () banked
 10338  002EBC  6F82               	movwf	strcpy@from& (0+255),b
 10339  002EBE  0EFF               	movlw	high STR_15
 10340  002EC0  0100               	movlb	0	; () banked
 10341  002EC2  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10342  002EC4  EC0A  F02B         	call	_strcpy	;wreg free
 10343                           
 10344                           ;RTC.c: 96: break;
 10345  002EC8  D06B               	goto	l7151
 10346  002ECA                     l7139:
 10347                           
 10348                           ;RTC.c: 98: strcpy(month, "SEP");
 10349  002ECA  0EBE               	movlw	low printRTC@month
 10350  002ECC  0100               	movlb	0	; () banked
 10351  002ECE  6F80               	movwf	strcpy@to& (0+255),b
 10352  002ED0  0E00               	movlw	high printRTC@month
 10353  002ED2  0100               	movlb	0	; () banked
 10354  002ED4  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10355  002ED6  0EE3               	movlw	low STR_16
 10356  002ED8  0100               	movlb	0	; () banked
 10357  002EDA  6F82               	movwf	strcpy@from& (0+255),b
 10358  002EDC  0EFF               	movlw	high STR_16
 10359  002EDE  0100               	movlb	0	; () banked
 10360  002EE0  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10361  002EE2  EC0A  F02B         	call	_strcpy	;wreg free
 10362                           
 10363                           ;RTC.c: 99: break;
 10364  002EE6  D05C               	goto	l7151
 10365  002EE8                     l7141:
 10366                           
 10367                           ;RTC.c: 101: strcpy(month, "OCT");
 10368  002EE8  0EBE               	movlw	low printRTC@month
 10369  002EEA  0100               	movlb	0	; () banked
 10370  002EEC  6F80               	movwf	strcpy@to& (0+255),b
 10371  002EEE  0E00               	movlw	high printRTC@month
 10372  002EF0  0100               	movlb	0	; () banked
 10373  002EF2  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10374  002EF4  0EF3               	movlw	low STR_17
 10375  002EF6  0100               	movlb	0	; () banked
 10376  002EF8  6F82               	movwf	strcpy@from& (0+255),b
 10377  002EFA  0EFF               	movlw	high STR_17
 10378  002EFC  0100               	movlb	0	; () banked
 10379  002EFE  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10380  002F00  EC0A  F02B         	call	_strcpy	;wreg free
 10381                           
 10382                           ;RTC.c: 102: break;
 10383  002F04  D04D               	goto	l7151
 10384  002F06                     l7143:
 10385                           
 10386                           ;RTC.c: 104: strcpy(month, "NOV");
 10387  002F06  0EBE               	movlw	low printRTC@month
 10388  002F08  0100               	movlb	0	; () banked
 10389  002F0A  6F80               	movwf	strcpy@to& (0+255),b
 10390  002F0C  0E00               	movlw	high printRTC@month
 10391  002F0E  0100               	movlb	0	; () banked
 10392  002F10  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10393  002F12  0EF7               	movlw	low STR_18
 10394  002F14  0100               	movlb	0	; () banked
 10395  002F16  6F82               	movwf	strcpy@from& (0+255),b
 10396  002F18  0EFF               	movlw	high STR_18
 10397  002F1A  0100               	movlb	0	; () banked
 10398  002F1C  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10399  002F1E  EC0A  F02B         	call	_strcpy	;wreg free
 10400                           
 10401                           ;RTC.c: 105: break;
 10402  002F22  D03E               	goto	l7151
 10403  002F24                     l7145:
 10404                           
 10405                           ;RTC.c: 107: strcpy(month, "DEC");
 10406  002F24  0EBE               	movlw	low printRTC@month
 10407  002F26  0100               	movlb	0	; () banked
 10408  002F28  6F80               	movwf	strcpy@to& (0+255),b
 10409  002F2A  0E00               	movlw	high printRTC@month
 10410  002F2C  0100               	movlb	0	; () banked
 10411  002F2E  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10412  002F30  0ECF               	movlw	low STR_19
 10413  002F32  0100               	movlb	0	; () banked
 10414  002F34  6F82               	movwf	strcpy@from& (0+255),b
 10415  002F36  0EFF               	movlw	high STR_19
 10416  002F38  0100               	movlb	0	; () banked
 10417  002F3A  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10418  002F3C  EC0A  F02B         	call	_strcpy	;wreg free
 10419                           
 10420                           ;RTC.c: 109: }
 10421                           
 10422                           ;RTC.c: 108: break;
 10423  002F40  D02F               	goto	l7151
 10424  002F42                     l7149:
 10425  002F42  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
 10426  002F46  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
 10427                           
 10428                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10429                           ; Switch size 1, requested type "space"
 10430                           ; Number of cases is 1, Range of values is 0 to 0
 10431                           ; switch strategies available:
 10432                           ; Name         Instructions Cycles
 10433                           ; simple_byte            4     3 (average)
 10434                           ;	Chosen strategy is simple_byte
 10435  002F4A  0100               	movlb	0	; () banked
 10436  002F4C  51AC               	movf	(??_printRTC+1)& (0+255),w,b
 10437  002F4E  0A00               	xorlw	0	; case 0
 10438  002F50  A4D8               	btfss	status,2,c
 10439  002F52  D026               	goto	l7151
 10440                           
 10441                           ; BSR set to: 0
 10442                           ; Switch size 1, requested type "space"
 10443                           ; Number of cases is 12, Range of values is 1 to 12
 10444                           ; switch strategies available:
 10445                           ; Name         Instructions Cycles
 10446                           ; simple_byte           37    19 (average)
 10447                           ;	Chosen strategy is simple_byte
 10448  002F54  0100               	movlb	0	; () banked
 10449  002F56  51AB               	movf	??_printRTC& (0+255),w,b
 10450  002F58  0A01               	xorlw	1	; case 1
 10451  002F5A  B4D8               	btfsc	status,2,c
 10452  002F5C  D73E               	goto	l7123
 10453  002F5E  0A03               	xorlw	3	; case 2
 10454  002F60  B4D8               	btfsc	status,2,c
 10455  002F62  D74A               	goto	l7125
 10456  002F64  0A01               	xorlw	1	; case 3
 10457  002F66  B4D8               	btfsc	status,2,c
 10458  002F68  D756               	goto	l7127
 10459  002F6A  0A07               	xorlw	7	; case 4
 10460  002F6C  B4D8               	btfsc	status,2,c
 10461  002F6E  D762               	goto	l7129
 10462  002F70  0A01               	xorlw	1	; case 5
 10463  002F72  B4D8               	btfsc	status,2,c
 10464  002F74  D76E               	goto	l7131
 10465  002F76  0A03               	xorlw	3	; case 6
 10466  002F78  B4D8               	btfsc	status,2,c
 10467  002F7A  D77A               	goto	l7133
 10468  002F7C  0A01               	xorlw	1	; case 7
 10469  002F7E  B4D8               	btfsc	status,2,c
 10470  002F80  D786               	goto	l7135
 10471  002F82  0A0F               	xorlw	15	; case 8
 10472  002F84  B4D8               	btfsc	status,2,c
 10473  002F86  D792               	goto	l7137
 10474  002F88  0A01               	xorlw	1	; case 9
 10475  002F8A  B4D8               	btfsc	status,2,c
 10476  002F8C  D79E               	goto	l7139
 10477  002F8E  0A03               	xorlw	3	; case 10
 10478  002F90  B4D8               	btfsc	status,2,c
 10479  002F92  D7AA               	goto	l7141
 10480  002F94  0A01               	xorlw	1	; case 11
 10481  002F96  B4D8               	btfsc	status,2,c
 10482  002F98  D7B6               	goto	l7143
 10483  002F9A  0A07               	xorlw	7	; case 12
 10484  002F9C  B4D8               	btfsc	status,2,c
 10485  002F9E  D7C2               	goto	l7145
 10486  002FA0                     l7151:
 10487                           
 10488                           ;RTC.c: 110: lcdInst(0b10000000);;
 10489  002FA0  0E80               	movlw	128
 10490  002FA2  ECBB  F02D         	call	_lcdInst
 10491                           
 10492                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 10493  002FA6  0EB8               	movlw	low STR_21
 10494  002FA8  0100               	movlb	0	; () banked
 10495  002FAA  6F8E               	movwf	printf@f& (0+255),b
 10496  002FAC  0EFA               	movlw	high STR_21
 10497  002FAE  0100               	movlb	0	; () banked
 10498  002FB0  6F8F               	movwf	(printf@f+1)& (0+255),b
 10499  002FB2  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
 10500  002FB6  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
 10501  002FBA  0EBE               	movlw	low printRTC@month
 10502  002FBC  0100               	movlb	0	; () banked
 10503  002FBE  6F92               	movwf	(?_printf+4)& (0+255),b
 10504  002FC0  0E00               	movlw	high printRTC@month
 10505  002FC2  0100               	movlb	0	; () banked
 10506  002FC4  6F93               	movwf	(?_printf+5)& (0+255),b
 10507  002FC6  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
 10508  002FCA  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
 10509  002FCE  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
 10510  002FD2  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
 10511  002FD6  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
 10512  002FDA  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
 10513  002FDE  ECC1  F00B         	call	_printf	;wreg free
 10514  002FE2  0012               	return		;funcret
 10515  002FE4                     __end_of_printRTC:
 10516                           	opt stack 0
 10517                           tblptru	equ	0xFF8
 10518                           tblptrh	equ	0xFF7
 10519                           tblptrl	equ	0xFF6
 10520                           tablat	equ	0xFF5
 10521                           prodh	equ	0xFF4
 10522                           prodl	equ	0xFF3
 10523                           intcon	equ	0xFF2
 10524                           intcon2	equ	0xFF1
 10525                           intcon3	equ	0xFF0
 10526                           postinc0	equ	0xFEE
 10527                           wreg	equ	0xFE8
 10528                           postdec1	equ	0xFE5
 10529                           fsr1l	equ	0xFE1
 10530                           indf2	equ	0xFDF
 10531                           postinc2	equ	0xFDE
 10532                           postdec2	equ	0xFDD
 10533                           fsr2h	equ	0xFDA
 10534                           fsr2l	equ	0xFD9
 10535                           status	equ	0xFD8
 10536                           
 10537 ;; *************** function _strcpy *****************
 10538 ;; Defined at:
 10539 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 10540 ;; Parameters:    Size  Location     Type
 10541 ;;  to              2    0[BANK0 ] PTR unsigned char 
 10542 ;;		 -> printRTC@month(4), UI@month(4), 
 10543 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 10544 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 10545 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 10546 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 10547 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 10548 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 10549 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 10550 ;;		 -> STR_8(4), 
 10551 ;; Auto vars:     Size  Location     Type
 10552 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 10553 ;;		 -> printRTC@month(4), UI@month(4), 
 10554 ;; Return value:  Size  Location     Type
 10555 ;;                  2    0[BANK0 ] PTR unsigned char 
 10556 ;; Registers used:
 10557 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 10558 ;; Tracked objects:
 10559 ;;		On entry : 0/0
 10560 ;;		On exit  : 0/0
 10561 ;;		Unchanged: 0/0
 10562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10563 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10564 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10566 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10567 ;;Total ram usage:        6 bytes
 10568 ;; Hardware stack levels used:    1
 10569 ;; Hardware stack levels required when called:    7
 10570 ;; This function calls:
 10571 ;;		Nothing
 10572 ;; This function is called by:
 10573 ;;		_UI
 10574 ;;		_printRTC
 10575 ;; This function uses a non-reentrant model
 10576 ;;
 10577                           
 10578                           	psect	text29
 10579  005614                     __ptext29:
 10580                           	opt stack 0
 10581  005614                     _strcpy:
 10582                           	opt stack 20
 10583                           
 10584                           ;incstack = 0
 10585  005614  C080  F084         	movff	strcpy@to,strcpy@cp
 10586  005618  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
 10587  00561C  D006               	goto	l6815
 10588  00561E                     l6813:
 10589  00561E  0100               	movlb	0	; () banked
 10590  005620  4B84               	infsnz	strcpy@cp& (0+255),f,b
 10591  005622  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
 10592  005624  0100               	movlb	0	; () banked
 10593  005626  4B82               	infsnz	strcpy@from& (0+255),f,b
 10594  005628  2B83               	incf	(strcpy@from+1)& (0+255),f,b
 10595  00562A                     l6815:
 10596  00562A  C082  FFF6         	movff	strcpy@from,tblptrl
 10597  00562E  C083  FFF7         	movff	strcpy@from+1,tblptrh
 10598  005632                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 10599  005632  6AF8               	clrf	tblptru,c
 10600  005634                     	endif
 10601  005634                     	if	0	;tblptru may be non-zero
 10602  005634                     	endif
 10603  005634  C084  FFD9         	movff	strcpy@cp,fsr2l
 10604  005638  C085  FFDA         	movff	strcpy@cp+1,fsr2h
 10605  00563C  0008               	tblrd		*
 10606  00563E  CFF5 FFDF          	movff	tablat,indf2
 10607  005642  50DF               	movf	indf2,w,c
 10608  005644  B4D8               	btfsc	status,2,c
 10609  005646  0012               	return	
 10610  005648  D7EA               	goto	l6813
 10611  00564A                     __end_of_strcpy:
 10612                           	opt stack 0
 10613                           tblptru	equ	0xFF8
 10614                           tblptrh	equ	0xFF7
 10615                           tblptrl	equ	0xFF6
 10616                           tablat	equ	0xFF5
 10617                           prodh	equ	0xFF4
 10618                           prodl	equ	0xFF3
 10619                           intcon	equ	0xFF2
 10620                           intcon2	equ	0xFF1
 10621                           intcon3	equ	0xFF0
 10622                           postinc0	equ	0xFEE
 10623                           wreg	equ	0xFE8
 10624                           postdec1	equ	0xFE5
 10625                           fsr1l	equ	0xFE1
 10626                           indf2	equ	0xFDF
 10627                           postinc2	equ	0xFDE
 10628                           postdec2	equ	0xFDD
 10629                           fsr2h	equ	0xFDA
 10630                           fsr2l	equ	0xFD9
 10631                           status	equ	0xFD8
 10632                           
 10633 ;; *************** function _getRTC *****************
 10634 ;; Defined at:
 10635 ;;		line 44 in file "RTC.c"
 10636 ;; Parameters:    Size  Location     Type
 10637 ;;		None
 10638 ;; Auto vars:     Size  Location     Type
 10639 ;;  i               2    3[BANK0 ] int 
 10640 ;; Return value:  Size  Location     Type
 10641 ;;                  1    wreg      void 
 10642 ;; Registers used:
 10643 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10644 ;; Tracked objects:
 10645 ;;		On entry : 0/0
 10646 ;;		On exit  : 0/0
 10647 ;;		Unchanged: 0/0
 10648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10650 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10652 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10653 ;;Total ram usage:        2 bytes
 10654 ;; Hardware stack levels used:    1
 10655 ;; Hardware stack levels required when called:    9
 10656 ;; This function calls:
 10657 ;;		_I2C_Master_Read
 10658 ;;		_I2C_Master_Start
 10659 ;;		_I2C_Master_Stop
 10660 ;;		_I2C_Master_Write
 10661 ;; This function is called by:
 10662 ;;		_printRTC
 10663 ;;		_initSortTimer
 10664 ;; This function uses a non-reentrant model
 10665 ;;
 10666                           
 10667                           	psect	text30
 10668  004CA2                     __ptext30:
 10669                           	opt stack 0
 10670  004CA2                     _getRTC:
 10671                           	opt stack 18
 10672                           
 10673                           ;RTC.c: 48: I2C_Master_Start();
 10674                           
 10675                           ;incstack = 0
 10676  004CA2  ECE1  F02D         	call	_I2C_Master_Start	;wreg free
 10677                           
 10678                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 10679  004CA6  0E00               	movlw	0
 10680  004CA8  0100               	movlb	0	; () banked
 10681  004CAA  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 10682  004CAC  0ED0               	movlw	208
 10683  004CAE  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 10684  004CB0  ECCF  F02D         	call	_I2C_Master_Write	;wreg free
 10685                           
 10686                           ;RTC.c: 50: I2C_Master_Write(0x00);
 10687  004CB4  0E00               	movlw	0
 10688  004CB6  0100               	movlb	0	; () banked
 10689  004CB8  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 10690  004CBA  0E00               	movlw	0
 10691  004CBC  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 10692  004CBE  ECCF  F02D         	call	_I2C_Master_Write	;wreg free
 10693                           
 10694                           ;RTC.c: 51: I2C_Master_Stop();
 10695  004CC2  ECDD  F02D         	call	_I2C_Master_Stop	;wreg free
 10696                           
 10697                           ;RTC.c: 54: I2C_Master_Start();
 10698  004CC6  ECE1  F02D         	call	_I2C_Master_Start	;wreg free
 10699                           
 10700                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 10701  004CCA  0E00               	movlw	0
 10702  004CCC  0100               	movlb	0	; () banked
 10703  004CCE  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 10704  004CD0  0ED1               	movlw	209
 10705  004CD2  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 10706  004CD4  ECCF  F02D         	call	_I2C_Master_Write	;wreg free
 10707                           
 10708                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 10709  004CD8  0E00               	movlw	0
 10710  004CDA  0100               	movlb	0	; () banked
 10711  004CDC  6F84               	movwf	(getRTC@i+1)& (0+255),b
 10712  004CDE  0E00               	movlw	0
 10713  004CE0  6F83               	movwf	getRTC@i& (0+255),b
 10714  004CE2                     l6821:
 10715                           
 10716                           ; BSR set to: 0
 10717  004CE2  0100               	movlb	0	; () banked
 10718  004CE4  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
 10719  004CE6  D008               	goto	l6825
 10720  004CE8  0100               	movlb	0	; () banked
 10721  004CEA  5184               	movf	(getRTC@i+1)& (0+255),w,b
 10722  004CEC  E115               	bnz	l6831
 10723  004CEE  0E06               	movlw	6
 10724  004CF0  0100               	movlb	0	; () banked
 10725  004CF2  5D83               	subwf	getRTC@i& (0+255),w,b
 10726  004CF4  B0D8               	btfsc	status,0,c
 10727  004CF6  D010               	goto	l6831
 10728  004CF8                     l6825:
 10729                           
 10730                           ; BSR set to: 0
 10731                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 10732  004CF8  0E1C               	movlw	low _time
 10733  004CFA  0100               	movlb	0	; () banked
 10734  004CFC  2583               	addwf	getRTC@i& (0+255),w,b
 10735  004CFE  6ED9               	movwf	fsr2l,c
 10736  004D00  0E01               	movlw	high _time
 10737  004D02  0100               	movlb	0	; () banked
 10738  004D04  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
 10739  004D06  6EDA               	movwf	fsr2h,c
 10740  004D08  0E01               	movlw	1
 10741  004D0A  EC62  F02C         	call	_I2C_Master_Read
 10742  004D0E  6EDF               	movwf	indf2,c
 10743  004D10  0100               	movlb	0	; () banked
 10744  004D12  4B83               	infsnz	getRTC@i& (0+255),f,b
 10745  004D14  2B84               	incf	(getRTC@i+1)& (0+255),f,b
 10746  004D16  D7E5               	goto	l6821
 10747  004D18                     l6831:
 10748                           
 10749                           ; BSR set to: 0
 10750                           ;RTC.c: 58: }
 10751                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 10752  004D18  0E00               	movlw	0
 10753  004D1A  EC62  F02C         	call	_I2C_Master_Read
 10754  004D1E  0101               	movlb	1	; () banked
 10755  004D20  6F22               	movwf	(_time+6)& (0+255),b
 10756                           
 10757                           ;RTC.c: 60: I2C_Master_Stop();
 10758  004D22  ECDD  F02D         	call	_I2C_Master_Stop	;wreg free
 10759  004D26  0012               	return		;funcret
 10760  004D28                     __end_of_getRTC:
 10761                           	opt stack 0
 10762                           tblptru	equ	0xFF8
 10763                           tblptrh	equ	0xFF7
 10764                           tblptrl	equ	0xFF6
 10765                           tablat	equ	0xFF5
 10766                           prodh	equ	0xFF4
 10767                           prodl	equ	0xFF3
 10768                           intcon	equ	0xFF2
 10769                           intcon2	equ	0xFF1
 10770                           intcon3	equ	0xFF0
 10771                           postinc0	equ	0xFEE
 10772                           wreg	equ	0xFE8
 10773                           postdec1	equ	0xFE5
 10774                           fsr1l	equ	0xFE1
 10775                           indf2	equ	0xFDF
 10776                           postinc2	equ	0xFDE
 10777                           postdec2	equ	0xFDD
 10778                           fsr2h	equ	0xFDA
 10779                           fsr2l	equ	0xFD9
 10780                           status	equ	0xFD8
 10781                           
 10782 ;; *************** function _I2C_Master_Write *****************
 10783 ;; Defined at:
 10784 ;;		line 49 in file "I2C.c"
 10785 ;; Parameters:    Size  Location     Type
 10786 ;;  d               2    1[BANK0 ] unsigned int 
 10787 ;; Auto vars:     Size  Location     Type
 10788 ;;		None
 10789 ;; Return value:  Size  Location     Type
 10790 ;;                  1    wreg      void 
 10791 ;; Registers used:
 10792 ;;		wreg, status,2, status,0, cstack
 10793 ;; Tracked objects:
 10794 ;;		On entry : 0/0
 10795 ;;		On exit  : 0/0
 10796 ;;		Unchanged: 0/0
 10797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10798 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10801 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10802 ;;Total ram usage:        2 bytes
 10803 ;; Hardware stack levels used:    1
 10804 ;; Hardware stack levels required when called:    8
 10805 ;; This function calls:
 10806 ;;		_I2C_Master_Wait
 10807 ;; This function is called by:
 10808 ;;		_loadRTC
 10809 ;;		_getRTC
 10810 ;; This function uses a non-reentrant model
 10811 ;;
 10812                           
 10813                           	psect	text31
 10814  005B9E                     __ptext31:
 10815                           	opt stack 0
 10816  005B9E                     _I2C_Master_Write:
 10817                           	opt stack 18
 10818                           
 10819                           ;I2C.c: 51: I2C_Master_Wait();
 10820                           
 10821                           ;incstack = 0
 10822  005B9E  ECA0  F02D         	call	_I2C_Master_Wait	;wreg free
 10823                           
 10824                           ;I2C.c: 52: SSPBUF = d;
 10825  005BA2  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
 10826  005BA6  0012               	return		;funcret
 10827  005BA8                     __end_of_I2C_Master_Write:
 10828                           	opt stack 0
 10829                           tblptru	equ	0xFF8
 10830                           tblptrh	equ	0xFF7
 10831                           tblptrl	equ	0xFF6
 10832                           tablat	equ	0xFF5
 10833                           prodh	equ	0xFF4
 10834                           prodl	equ	0xFF3
 10835                           intcon	equ	0xFF2
 10836                           intcon2	equ	0xFF1
 10837                           intcon3	equ	0xFF0
 10838                           postinc0	equ	0xFEE
 10839                           wreg	equ	0xFE8
 10840                           postdec1	equ	0xFE5
 10841                           fsr1l	equ	0xFE1
 10842                           indf2	equ	0xFDF
 10843                           postinc2	equ	0xFDE
 10844                           postdec2	equ	0xFDD
 10845                           fsr2h	equ	0xFDA
 10846                           fsr2l	equ	0xFD9
 10847                           status	equ	0xFD8
 10848                           
 10849 ;; *************** function _I2C_Master_Stop *****************
 10850 ;; Defined at:
 10851 ;;		line 43 in file "I2C.c"
 10852 ;; Parameters:    Size  Location     Type
 10853 ;;		None
 10854 ;; Auto vars:     Size  Location     Type
 10855 ;;		None
 10856 ;; Return value:  Size  Location     Type
 10857 ;;                  1    wreg      void 
 10858 ;; Registers used:
 10859 ;;		wreg, status,2, status,0, cstack
 10860 ;; Tracked objects:
 10861 ;;		On entry : 0/0
 10862 ;;		On exit  : 0/0
 10863 ;;		Unchanged: 0/0
 10864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10868 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10869 ;;Total ram usage:        0 bytes
 10870 ;; Hardware stack levels used:    1
 10871 ;; Hardware stack levels required when called:    8
 10872 ;; This function calls:
 10873 ;;		_I2C_Master_Wait
 10874 ;; This function is called by:
 10875 ;;		_loadRTC
 10876 ;;		_getRTC
 10877 ;; This function uses a non-reentrant model
 10878 ;;
 10879                           
 10880                           	psect	text32
 10881  005BBA                     __ptext32:
 10882                           	opt stack 0
 10883  005BBA                     _I2C_Master_Stop:
 10884                           	opt stack 18
 10885                           
 10886                           ;I2C.c: 45: I2C_Master_Wait();
 10887                           
 10888                           ;incstack = 0
 10889  005BBA  ECA0  F02D         	call	_I2C_Master_Wait	;wreg free
 10890                           
 10891                           ;I2C.c: 46: PEN = 1;
 10892  005BBE  84C5               	bsf	4037,2,c	;volatile
 10893  005BC0  0012               	return		;funcret
 10894  005BC2                     __end_of_I2C_Master_Stop:
 10895                           	opt stack 0
 10896                           tblptru	equ	0xFF8
 10897                           tblptrh	equ	0xFF7
 10898                           tblptrl	equ	0xFF6
 10899                           tablat	equ	0xFF5
 10900                           prodh	equ	0xFF4
 10901                           prodl	equ	0xFF3
 10902                           intcon	equ	0xFF2
 10903                           intcon2	equ	0xFF1
 10904                           intcon3	equ	0xFF0
 10905                           postinc0	equ	0xFEE
 10906                           wreg	equ	0xFE8
 10907                           postdec1	equ	0xFE5
 10908                           fsr1l	equ	0xFE1
 10909                           indf2	equ	0xFDF
 10910                           postinc2	equ	0xFDE
 10911                           postdec2	equ	0xFDD
 10912                           fsr2h	equ	0xFDA
 10913                           fsr2l	equ	0xFD9
 10914                           status	equ	0xFD8
 10915                           
 10916 ;; *************** function _I2C_Master_Start *****************
 10917 ;; Defined at:
 10918 ;;		line 31 in file "I2C.c"
 10919 ;; Parameters:    Size  Location     Type
 10920 ;;		None
 10921 ;; Auto vars:     Size  Location     Type
 10922 ;;		None
 10923 ;; Return value:  Size  Location     Type
 10924 ;;                  1    wreg      void 
 10925 ;; Registers used:
 10926 ;;		wreg, status,2, status,0, cstack
 10927 ;; Tracked objects:
 10928 ;;		On entry : 0/0
 10929 ;;		On exit  : 0/0
 10930 ;;		Unchanged: 0/0
 10931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10935 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10936 ;;Total ram usage:        0 bytes
 10937 ;; Hardware stack levels used:    1
 10938 ;; Hardware stack levels required when called:    8
 10939 ;; This function calls:
 10940 ;;		_I2C_Master_Wait
 10941 ;; This function is called by:
 10942 ;;		_loadRTC
 10943 ;;		_getRTC
 10944 ;; This function uses a non-reentrant model
 10945 ;;
 10946                           
 10947                           	psect	text33
 10948  005BC2                     __ptext33:
 10949                           	opt stack 0
 10950  005BC2                     _I2C_Master_Start:
 10951                           	opt stack 18
 10952                           
 10953                           ;I2C.c: 33: I2C_Master_Wait();
 10954                           
 10955                           ;incstack = 0
 10956  005BC2  ECA0  F02D         	call	_I2C_Master_Wait	;wreg free
 10957                           
 10958                           ;I2C.c: 34: SEN = 1;
 10959  005BC6  80C5               	bsf	4037,0,c	;volatile
 10960  005BC8  0012               	return		;funcret
 10961  005BCA                     __end_of_I2C_Master_Start:
 10962                           	opt stack 0
 10963                           tblptru	equ	0xFF8
 10964                           tblptrh	equ	0xFF7
 10965                           tblptrl	equ	0xFF6
 10966                           tablat	equ	0xFF5
 10967                           prodh	equ	0xFF4
 10968                           prodl	equ	0xFF3
 10969                           intcon	equ	0xFF2
 10970                           intcon2	equ	0xFF1
 10971                           intcon3	equ	0xFF0
 10972                           postinc0	equ	0xFEE
 10973                           wreg	equ	0xFE8
 10974                           postdec1	equ	0xFE5
 10975                           fsr1l	equ	0xFE1
 10976                           indf2	equ	0xFDF
 10977                           postinc2	equ	0xFDE
 10978                           postdec2	equ	0xFDD
 10979                           fsr2h	equ	0xFDA
 10980                           fsr2l	equ	0xFD9
 10981                           status	equ	0xFD8
 10982                           
 10983 ;; *************** function _I2C_Master_Read *****************
 10984 ;; Defined at:
 10985 ;;		line 55 in file "I2C.c"
 10986 ;; Parameters:    Size  Location     Type
 10987 ;;  a               1    wreg     unsigned char 
 10988 ;; Auto vars:     Size  Location     Type
 10989 ;;  a               1    1[BANK0 ] unsigned char 
 10990 ;;  temp            1    2[BANK0 ] unsigned char 
 10991 ;; Return value:  Size  Location     Type
 10992 ;;                  1    wreg      unsigned char 
 10993 ;; Registers used:
 10994 ;;		wreg, status,2, status,0, cstack
 10995 ;; Tracked objects:
 10996 ;;		On entry : 0/0
 10997 ;;		On exit  : 0/0
 10998 ;;		Unchanged: 0/0
 10999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11001 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11003 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11004 ;;Total ram usage:        2 bytes
 11005 ;; Hardware stack levels used:    1
 11006 ;; Hardware stack levels required when called:    8
 11007 ;; This function calls:
 11008 ;;		_I2C_Master_Wait
 11009 ;; This function is called by:
 11010 ;;		_getRTC
 11011 ;; This function uses a non-reentrant model
 11012 ;;
 11013                           
 11014                           	psect	text34
 11015  0058C4                     __ptext34:
 11016                           	opt stack 0
 11017  0058C4                     _I2C_Master_Read:
 11018                           	opt stack 18
 11019                           
 11020                           ;incstack = 0
 11021                           ;I2C_Master_Read@a stored from wreg
 11022  0058C4  0100               	movlb	0	; () banked
 11023  0058C6  6F81               	movwf	I2C_Master_Read@a& (0+255),b
 11024                           
 11025                           ;I2C.c: 57: unsigned char temp;
 11026                           ;I2C.c: 58: I2C_Master_Wait();
 11027  0058C8  ECA0  F02D         	call	_I2C_Master_Wait	;wreg free
 11028                           
 11029                           ;I2C.c: 59: RCEN = 1;
 11030  0058CC  86C5               	bsf	4037,3,c	;volatile
 11031                           
 11032                           ;I2C.c: 60: I2C_Master_Wait();
 11033  0058CE  ECA0  F02D         	call	_I2C_Master_Wait	;wreg free
 11034                           
 11035                           ;I2C.c: 61: temp = SSPBUF;
 11036  0058D2  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
 11037                           
 11038                           ;I2C.c: 62: I2C_Master_Wait();
 11039  0058D6  ECA0  F02D         	call	_I2C_Master_Wait	;wreg free
 11040                           
 11041                           ;I2C.c: 63: ACKDT = (a)?0:1;
 11042  0058DA  0100               	movlb	0	; () banked
 11043  0058DC  5181               	movf	I2C_Master_Read@a& (0+255),w,b
 11044  0058DE  0100               	movlb	0	; () banked
 11045  0058E0  A4D8               	btfss	status,2,c
 11046  0058E2  D002               	goto	u4910
 11047  0058E4  8AC5               	bsf	4037,5,c	;volatile
 11048  0058E6  D001               	goto	l6509
 11049  0058E8                     u4910:
 11050  0058E8  9AC5               	bcf	4037,5,c	;volatile
 11051  0058EA                     l6509:
 11052                           
 11053                           ;I2C.c: 64: ACKEN = 1;
 11054  0058EA  88C5               	bsf	4037,4,c	;volatile
 11055                           
 11056                           ;I2C.c: 65: return temp;
 11057  0058EC  0100               	movlb	0	; () banked
 11058  0058EE  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
 11059  0058F0  0012               	return	
 11060  0058F2                     __end_of_I2C_Master_Read:
 11061                           	opt stack 0
 11062                           tblptru	equ	0xFF8
 11063                           tblptrh	equ	0xFF7
 11064                           tblptrl	equ	0xFF6
 11065                           tablat	equ	0xFF5
 11066                           prodh	equ	0xFF4
 11067                           prodl	equ	0xFF3
 11068                           intcon	equ	0xFF2
 11069                           intcon2	equ	0xFF1
 11070                           intcon3	equ	0xFF0
 11071                           postinc0	equ	0xFEE
 11072                           wreg	equ	0xFE8
 11073                           postdec1	equ	0xFE5
 11074                           fsr1l	equ	0xFE1
 11075                           indf2	equ	0xFDF
 11076                           postinc2	equ	0xFDE
 11077                           postdec2	equ	0xFDD
 11078                           fsr2h	equ	0xFDA
 11079                           fsr2l	equ	0xFD9
 11080                           status	equ	0xFD8
 11081                           
 11082 ;; *************** function _I2C_Master_Wait *****************
 11083 ;; Defined at:
 11084 ;;		line 26 in file "I2C.c"
 11085 ;; Parameters:    Size  Location     Type
 11086 ;;		None
 11087 ;; Auto vars:     Size  Location     Type
 11088 ;;		None
 11089 ;; Return value:  Size  Location     Type
 11090 ;;                  1    wreg      void 
 11091 ;; Registers used:
 11092 ;;		wreg, status,2, status,0
 11093 ;; Tracked objects:
 11094 ;;		On entry : 0/0
 11095 ;;		On exit  : 0/0
 11096 ;;		Unchanged: 0/0
 11097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11100 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11101 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11102 ;;Total ram usage:        1 bytes
 11103 ;; Hardware stack levels used:    1
 11104 ;; Hardware stack levels required when called:    7
 11105 ;; This function calls:
 11106 ;;		Nothing
 11107 ;; This function is called by:
 11108 ;;		_I2C_Master_Start
 11109 ;;		_I2C_Master_Stop
 11110 ;;		_I2C_Master_Write
 11111 ;;		_I2C_Master_Read
 11112 ;;		_I2C_Master_RepeatedStart
 11113 ;; This function uses a non-reentrant model
 11114 ;;
 11115                           
 11116                           	psect	text35
 11117  005B40                     __ptext35:
 11118                           	opt stack 0
 11119  005B40                     _I2C_Master_Wait:
 11120                           	opt stack 18
 11121  005B40                     l71:
 11122  005B40  B4C7               	btfsc	4039,2,c	;volatile
 11123  005B42  D7FE               	goto	l71
 11124  005B44  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
 11125  005B48  0E1F               	movlw	31
 11126  005B4A  0100               	movlb	0	; () banked
 11127  005B4C  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
 11128  005B4E  B4D8               	btfsc	status,2,c
 11129  005B50  0012               	return	
 11130  005B52  D7F6               	goto	l71
 11131  005B54                     __end_of_I2C_Master_Wait:
 11132                           	opt stack 0
 11133                           tblptru	equ	0xFF8
 11134                           tblptrh	equ	0xFF7
 11135                           tblptrl	equ	0xFF6
 11136                           tablat	equ	0xFF5
 11137                           prodh	equ	0xFF4
 11138                           prodl	equ	0xFF3
 11139                           intcon	equ	0xFF2
 11140                           intcon2	equ	0xFF1
 11141                           intcon3	equ	0xFF0
 11142                           postinc0	equ	0xFEE
 11143                           wreg	equ	0xFE8
 11144                           postdec1	equ	0xFE5
 11145                           fsr1l	equ	0xFE1
 11146                           indf2	equ	0xFDF
 11147                           postinc2	equ	0xFDE
 11148                           postdec2	equ	0xFDD
 11149                           fsr2h	equ	0xFDA
 11150                           fsr2l	equ	0xFD9
 11151                           status	equ	0xFD8
 11152                           
 11153 ;; *************** function _change_state_to_menu_22 *****************
 11154 ;; Defined at:
 11155 ;;		line 501 in file "UI.c"
 11156 ;; Parameters:    Size  Location     Type
 11157 ;;		None
 11158 ;; Auto vars:     Size  Location     Type
 11159 ;;		None
 11160 ;; Return value:  Size  Location     Type
 11161 ;;                  1    wreg      void 
 11162 ;; Registers used:
 11163 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11164 ;; Tracked objects:
 11165 ;;		On entry : 0/0
 11166 ;;		On exit  : 0/0
 11167 ;;		Unchanged: 0/0
 11168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11172 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11173 ;;Total ram usage:        0 bytes
 11174 ;; Hardware stack levels used:    1
 11175 ;; Hardware stack levels required when called:   10
 11176 ;; This function calls:
 11177 ;;		_lcdInst
 11178 ;;		_printf
 11179 ;; This function is called by:
 11180 ;;		_UI
 11181 ;; This function uses a non-reentrant model
 11182 ;;
 11183                           
 11184                           	psect	text36
 11185  0055A4                     __ptext36:
 11186                           	opt stack 0
 11187  0055A4                     _change_state_to_menu_22:
 11188                           	opt stack 19
 11189                           
 11190                           ;UI.c: 502: cur_state = 22;
 11191                           
 11192                           ; BSR set to: 0
 11193                           ;incstack = 0
 11194  0055A4  0E00               	movlw	0
 11195  0055A6  0100               	movlb	0	; () banked
 11196  0055A8  6FEF               	movwf	(_cur_state+1)& (0+255),b
 11197  0055AA  0E16               	movlw	22
 11198  0055AC  6FEE               	movwf	_cur_state& (0+255),b
 11199                           
 11200                           ; BSR set to: 0
 11201                           ;UI.c: 504: lcdInst(0b10000000);;
 11202  0055AE  0E80               	movlw	128
 11203  0055B0  ECBB  F02D         	call	_lcdInst
 11204                           
 11205                           ;UI.c: 505: printf("2. SORT        <");
 11206  0055B4  0ED8               	movlw	low STR_34
 11207  0055B6  0100               	movlb	0	; () banked
 11208  0055B8  6F8E               	movwf	printf@f& (0+255),b
 11209  0055BA  0EFD               	movlw	high STR_34
 11210  0055BC  0100               	movlb	0	; () banked
 11211  0055BE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11212  0055C0  ECC1  F00B         	call	_printf	;wreg free
 11213                           
 11214                           ;UI.c: 506: lcdInst(0b11000000);;
 11215  0055C4  0EC0               	movlw	192
 11216  0055C6  ECBB  F02D         	call	_lcdInst
 11217                           
 11218                           ;UI.c: 507: printf("3. LOGS         ");
 11219  0055CA  0E1D               	movlw	low STR_36
 11220  0055CC  0100               	movlb	0	; () banked
 11221  0055CE  6F8E               	movwf	printf@f& (0+255),b
 11222  0055D0  0EFD               	movlw	high STR_36
 11223  0055D2  0100               	movlb	0	; () banked
 11224  0055D4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11225  0055D6  ECC1  F00B         	call	_printf	;wreg free
 11226  0055DA  0012               	return		;funcret
 11227  0055DC                     __end_of_change_state_to_menu_22:
 11228                           	opt stack 0
 11229                           tblptru	equ	0xFF8
 11230                           tblptrh	equ	0xFF7
 11231                           tblptrl	equ	0xFF6
 11232                           tablat	equ	0xFF5
 11233                           prodh	equ	0xFF4
 11234                           prodl	equ	0xFF3
 11235                           intcon	equ	0xFF2
 11236                           intcon2	equ	0xFF1
 11237                           intcon3	equ	0xFF0
 11238                           postinc0	equ	0xFEE
 11239                           wreg	equ	0xFE8
 11240                           postdec1	equ	0xFE5
 11241                           fsr1l	equ	0xFE1
 11242                           indf2	equ	0xFDF
 11243                           postinc2	equ	0xFDE
 11244                           postdec2	equ	0xFDD
 11245                           fsr2h	equ	0xFDA
 11246                           fsr2l	equ	0xFD9
 11247                           status	equ	0xFD8
 11248                           
 11249 ;; *************** function _change_state_to_menu_12 *****************
 11250 ;; Defined at:
 11251 ;;		line 493 in file "UI.c"
 11252 ;; Parameters:    Size  Location     Type
 11253 ;;		None
 11254 ;; Auto vars:     Size  Location     Type
 11255 ;;		None
 11256 ;; Return value:  Size  Location     Type
 11257 ;;                  1    wreg      void 
 11258 ;; Registers used:
 11259 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11260 ;; Tracked objects:
 11261 ;;		On entry : 0/0
 11262 ;;		On exit  : 0/0
 11263 ;;		Unchanged: 0/0
 11264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11268 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11269 ;;Total ram usage:        0 bytes
 11270 ;; Hardware stack levels used:    1
 11271 ;; Hardware stack levels required when called:   10
 11272 ;; This function calls:
 11273 ;;		_lcdInst
 11274 ;;		_printf
 11275 ;; This function is called by:
 11276 ;;		_UI
 11277 ;; This function uses a non-reentrant model
 11278 ;;
 11279                           
 11280                           	psect	text37
 11281  0055DC                     __ptext37:
 11282                           	opt stack 0
 11283  0055DC                     _change_state_to_menu_12:
 11284                           	opt stack 19
 11285                           
 11286                           ;UI.c: 494: cur_state = 12;
 11287                           
 11288                           ;incstack = 0
 11289  0055DC  0E00               	movlw	0
 11290  0055DE  0100               	movlb	0	; () banked
 11291  0055E0  6FEF               	movwf	(_cur_state+1)& (0+255),b
 11292  0055E2  0E0C               	movlw	12
 11293  0055E4  6FEE               	movwf	_cur_state& (0+255),b
 11294                           
 11295                           ; BSR set to: 0
 11296                           ;UI.c: 496: lcdInst(0b10000000);;
 11297  0055E6  0E80               	movlw	128
 11298  0055E8  ECBB  F02D         	call	_lcdInst
 11299                           
 11300                           ;UI.c: 497: printf("1. DATE/TIME    ");
 11301  0055EC  0E3F               	movlw	low STR_33
 11302  0055EE  0100               	movlb	0	; () banked
 11303  0055F0  6F8E               	movwf	printf@f& (0+255),b
 11304  0055F2  0EFD               	movlw	high STR_33
 11305  0055F4  0100               	movlb	0	; () banked
 11306  0055F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 11307  0055F8  ECC1  F00B         	call	_printf	;wreg free
 11308                           
 11309                           ;UI.c: 498: lcdInst(0b11000000);;
 11310  0055FC  0EC0               	movlw	192
 11311  0055FE  ECBB  F02D         	call	_lcdInst
 11312                           
 11313                           ;UI.c: 499: printf("2. SORT        <");
 11314  005602  0ED8               	movlw	low STR_34
 11315  005604  0100               	movlb	0	; () banked
 11316  005606  6F8E               	movwf	printf@f& (0+255),b
 11317  005608  0EFD               	movlw	high STR_34
 11318  00560A  0100               	movlb	0	; () banked
 11319  00560C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11320  00560E  ECC1  F00B         	call	_printf	;wreg free
 11321  005612  0012               	return		;funcret
 11322  005614                     __end_of_change_state_to_menu_12:
 11323                           	opt stack 0
 11324                           tblptru	equ	0xFF8
 11325                           tblptrh	equ	0xFF7
 11326                           tblptrl	equ	0xFF6
 11327                           tablat	equ	0xFF5
 11328                           prodh	equ	0xFF4
 11329                           prodl	equ	0xFF3
 11330                           intcon	equ	0xFF2
 11331                           intcon2	equ	0xFF1
 11332                           intcon3	equ	0xFF0
 11333                           postinc0	equ	0xFEE
 11334                           wreg	equ	0xFE8
 11335                           postdec1	equ	0xFE5
 11336                           fsr1l	equ	0xFE1
 11337                           indf2	equ	0xFDF
 11338                           postinc2	equ	0xFDE
 11339                           postdec2	equ	0xFDD
 11340                           fsr2h	equ	0xFDA
 11341                           fsr2l	equ	0xFD9
 11342                           status	equ	0xFD8
 11343                           
 11344 ;; *************** function ___awmod *****************
 11345 ;; Defined at:
 11346 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 11347 ;; Parameters:    Size  Location     Type
 11348 ;;  dividend        2    0[BANK0 ] int 
 11349 ;;  divisor         2    2[BANK0 ] int 
 11350 ;; Auto vars:     Size  Location     Type
 11351 ;;  sign            1    5[BANK0 ] unsigned char 
 11352 ;;  counter         1    4[BANK0 ] unsigned char 
 11353 ;; Return value:  Size  Location     Type
 11354 ;;                  2    0[BANK0 ] int 
 11355 ;; Registers used:
 11356 ;;		wreg, status,2, status,0
 11357 ;; Tracked objects:
 11358 ;;		On entry : 0/0
 11359 ;;		On exit  : 0/0
 11360 ;;		Unchanged: 0/0
 11361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11362 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11363 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11365 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11366 ;;Total ram usage:        6 bytes
 11367 ;; Hardware stack levels used:    1
 11368 ;; Hardware stack levels required when called:    7
 11369 ;; This function calls:
 11370 ;;		Nothing
 11371 ;; This function is called by:
 11372 ;;		_UI
 11373 ;; This function uses a non-reentrant model
 11374 ;;
 11375                           
 11376                           	psect	text38
 11377  004B74                     __ptext38:
 11378                           	opt stack 0
 11379  004B74                     ___awmod:
 11380                           	opt stack 22
 11381                           
 11382                           ;incstack = 0
 11383  004B74  0E00               	movlw	0
 11384  004B76  0100               	movlb	0	; () banked
 11385  004B78  6F85               	movwf	___awmod@sign& (0+255),b
 11386                           
 11387                           ; BSR set to: 0
 11388  004B7A  0100               	movlb	0	; () banked
 11389  004B7C  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
 11390  004B7E  D008               	goto	l9131
 11391                           
 11392                           ; BSR set to: 0
 11393  004B80  0100               	movlb	0	; () banked
 11394  004B82  6D80               	negf	___awmod@dividend& (0+255),b
 11395  004B84  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 11396  004B86  B0D8               	btfsc	status,0,c
 11397  004B88  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 11398                           
 11399                           ; BSR set to: 0
 11400  004B8A  0E01               	movlw	1
 11401  004B8C  0100               	movlb	0	; () banked
 11402  004B8E  6F85               	movwf	___awmod@sign& (0+255),b
 11403  004B90                     l9131:
 11404                           
 11405                           ; BSR set to: 0
 11406  004B90  0100               	movlb	0	; () banked
 11407  004B92  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 11408  004B94  D005               	goto	l9135
 11409                           
 11410                           ; BSR set to: 0
 11411  004B96  0100               	movlb	0	; () banked
 11412  004B98  6D82               	negf	___awmod@divisor& (0+255),b
 11413  004B9A  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
 11414  004B9C  B0D8               	btfsc	status,0,c
 11415  004B9E  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
 11416  004BA0                     l9135:
 11417                           
 11418                           ; BSR set to: 0
 11419  004BA0  0100               	movlb	0	; () banked
 11420  004BA2  5182               	movf	___awmod@divisor& (0+255),w,b
 11421  004BA4  0100               	movlb	0	; () banked
 11422  004BA6  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 11423  004BA8  B4D8               	btfsc	status,2,c
 11424  004BAA  D026               	goto	l9151
 11425                           
 11426                           ; BSR set to: 0
 11427  004BAC  0E01               	movlw	1
 11428  004BAE  0100               	movlb	0	; () banked
 11429  004BB0  6F84               	movwf	___awmod@counter& (0+255),b
 11430  004BB2  D006               	goto	l9141
 11431  004BB4                     l9139:
 11432                           
 11433                           ; BSR set to: 0
 11434  004BB4  0100               	movlb	0	; () banked
 11435  004BB6  90D8               	bcf	status,0,c
 11436  004BB8  3782               	rlcf	___awmod@divisor& (0+255),f,b
 11437  004BBA  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 11438  004BBC  0100               	movlb	0	; () banked
 11439  004BBE  2B84               	incf	___awmod@counter& (0+255),f,b
 11440  004BC0                     l9141:
 11441                           
 11442                           ; BSR set to: 0
 11443  004BC0  0100               	movlb	0	; () banked
 11444  004BC2  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 11445  004BC4  D7F7               	goto	l9139
 11446  004BC6                     l9143:
 11447                           
 11448                           ; BSR set to: 0
 11449  004BC6  0100               	movlb	0	; () banked
 11450  004BC8  5182               	movf	___awmod@divisor& (0+255),w,b
 11451  004BCA  0100               	movlb	0	; () banked
 11452  004BCC  5D80               	subwf	___awmod@dividend& (0+255),w,b
 11453  004BCE  0100               	movlb	0	; () banked
 11454  004BD0  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 11455  004BD2  0100               	movlb	0	; () banked
 11456  004BD4  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 11457  004BD6  A0D8               	btfss	status,0,c
 11458  004BD8  D008               	goto	l9147
 11459                           
 11460                           ; BSR set to: 0
 11461  004BDA  0100               	movlb	0	; () banked
 11462  004BDC  5182               	movf	___awmod@divisor& (0+255),w,b
 11463  004BDE  0100               	movlb	0	; () banked
 11464  004BE0  5F80               	subwf	___awmod@dividend& (0+255),f,b
 11465  004BE2  0100               	movlb	0	; () banked
 11466  004BE4  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 11467  004BE6  0100               	movlb	0	; () banked
 11468  004BE8  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 11469  004BEA                     l9147:
 11470                           
 11471                           ; BSR set to: 0
 11472  004BEA  0100               	movlb	0	; () banked
 11473  004BEC  90D8               	bcf	status,0,c
 11474  004BEE  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 11475  004BF0  3382               	rrcf	___awmod@divisor& (0+255),f,b
 11476                           
 11477                           ; BSR set to: 0
 11478  004BF2  0100               	movlb	0	; () banked
 11479  004BF4  2F84               	decfsz	___awmod@counter& (0+255),f,b
 11480  004BF6  D7E7               	goto	l9143
 11481  004BF8                     l9151:
 11482                           
 11483                           ; BSR set to: 0
 11484  004BF8  0100               	movlb	0	; () banked
 11485  004BFA  5185               	movf	___awmod@sign& (0+255),w,b
 11486  004BFC  0100               	movlb	0	; () banked
 11487  004BFE  B4D8               	btfsc	status,2,c
 11488  004C00  D005               	goto	l9155
 11489                           
 11490                           ; BSR set to: 0
 11491  004C02  0100               	movlb	0	; () banked
 11492  004C04  6D80               	negf	___awmod@dividend& (0+255),b
 11493  004C06  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 11494  004C08  B0D8               	btfsc	status,0,c
 11495  004C0A  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 11496  004C0C                     l9155:
 11497                           
 11498                           ; BSR set to: 0
 11499  004C0C  C080  F080         	movff	___awmod@dividend,?___awmod
 11500  004C10  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
 11501  004C14  0012               	return	
 11502  004C16                     __end_of___awmod:
 11503                           	opt stack 0
 11504                           tblptru	equ	0xFF8
 11505                           tblptrh	equ	0xFF7
 11506                           tblptrl	equ	0xFF6
 11507                           tablat	equ	0xFF5
 11508                           prodh	equ	0xFF4
 11509                           prodl	equ	0xFF3
 11510                           intcon	equ	0xFF2
 11511                           intcon2	equ	0xFF1
 11512                           intcon3	equ	0xFF0
 11513                           postinc0	equ	0xFEE
 11514                           wreg	equ	0xFE8
 11515                           postdec1	equ	0xFE5
 11516                           fsr1l	equ	0xFE1
 11517                           indf2	equ	0xFDF
 11518                           postinc2	equ	0xFDE
 11519                           postdec2	equ	0xFDD
 11520                           fsr2h	equ	0xFDA
 11521                           fsr2l	equ	0xFD9
 11522                           status	equ	0xFD8
 11523                           
 11524 ;; *************** function ___awdiv *****************
 11525 ;; Defined at:
 11526 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 11527 ;; Parameters:    Size  Location     Type
 11528 ;;  dividend        2    6[BANK0 ] int 
 11529 ;;  divisor         2    8[BANK0 ] int 
 11530 ;; Auto vars:     Size  Location     Type
 11531 ;;  quotient        2   12[BANK0 ] int 
 11532 ;;  sign            1   11[BANK0 ] unsigned char 
 11533 ;;  counter         1   10[BANK0 ] unsigned char 
 11534 ;; Return value:  Size  Location     Type
 11535 ;;                  2    6[BANK0 ] int 
 11536 ;; Registers used:
 11537 ;;		wreg, status,2, status,0
 11538 ;; Tracked objects:
 11539 ;;		On entry : 0/0
 11540 ;;		On exit  : 0/0
 11541 ;;		Unchanged: 0/0
 11542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11543 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11544 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11546 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11547 ;;Total ram usage:        8 bytes
 11548 ;; Hardware stack levels used:    1
 11549 ;; Hardware stack levels required when called:    7
 11550 ;; This function calls:
 11551 ;;		Nothing
 11552 ;; This function is called by:
 11553 ;;		_UI
 11554 ;;		_ID
 11555 ;; This function uses a non-reentrant model
 11556 ;;
 11557                           
 11558                           	psect	text39
 11559  004950                     __ptext39:
 11560                           	opt stack 0
 11561  004950                     ___awdiv:
 11562                           	opt stack 21
 11563                           
 11564                           ; BSR set to: 0
 11565                           ;incstack = 0
 11566  004950  0E00               	movlw	0
 11567  004952  0100               	movlb	0	; () banked
 11568  004954  6F8B               	movwf	___awdiv@sign& (0+255),b
 11569                           
 11570                           ; BSR set to: 0
 11571  004956  0100               	movlb	0	; () banked
 11572  004958  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 11573  00495A  D008               	goto	l7437
 11574                           
 11575                           ; BSR set to: 0
 11576  00495C  0100               	movlb	0	; () banked
 11577  00495E  6D88               	negf	___awdiv@divisor& (0+255),b
 11578  004960  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
 11579  004962  B0D8               	btfsc	status,0,c
 11580  004964  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
 11581                           
 11582                           ; BSR set to: 0
 11583  004966  0E01               	movlw	1
 11584  004968  0100               	movlb	0	; () banked
 11585  00496A  6F8B               	movwf	___awdiv@sign& (0+255),b
 11586  00496C                     l7437:
 11587                           
 11588                           ; BSR set to: 0
 11589  00496C  0100               	movlb	0	; () banked
 11590  00496E  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 11591  004970  D008               	goto	l7443
 11592                           
 11593                           ; BSR set to: 0
 11594  004972  0100               	movlb	0	; () banked
 11595  004974  6D86               	negf	___awdiv@dividend& (0+255),b
 11596  004976  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
 11597  004978  B0D8               	btfsc	status,0,c
 11598  00497A  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
 11599                           
 11600                           ; BSR set to: 0
 11601  00497C  0E01               	movlw	1
 11602  00497E  0100               	movlb	0	; () banked
 11603  004980  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
 11604  004982                     l7443:
 11605                           
 11606                           ; BSR set to: 0
 11607  004982  0E00               	movlw	0
 11608  004984  0100               	movlb	0	; () banked
 11609  004986  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
 11610  004988  0E00               	movlw	0
 11611  00498A  6F8C               	movwf	___awdiv@quotient& (0+255),b
 11612                           
 11613                           ; BSR set to: 0
 11614  00498C  0100               	movlb	0	; () banked
 11615  00498E  5188               	movf	___awdiv@divisor& (0+255),w,b
 11616  004990  0100               	movlb	0	; () banked
 11617  004992  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 11618  004994  B4D8               	btfsc	status,2,c
 11619  004996  D02C               	goto	l7465
 11620                           
 11621                           ; BSR set to: 0
 11622  004998  0E01               	movlw	1
 11623  00499A  0100               	movlb	0	; () banked
 11624  00499C  6F8A               	movwf	___awdiv@counter& (0+255),b
 11625  00499E  D006               	goto	l7451
 11626  0049A0                     l7449:
 11627                           
 11628                           ; BSR set to: 0
 11629  0049A0  0100               	movlb	0	; () banked
 11630  0049A2  90D8               	bcf	status,0,c
 11631  0049A4  3788               	rlcf	___awdiv@divisor& (0+255),f,b
 11632  0049A6  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 11633  0049A8  0100               	movlb	0	; () banked
 11634  0049AA  2B8A               	incf	___awdiv@counter& (0+255),f,b
 11635  0049AC                     l7451:
 11636                           
 11637                           ; BSR set to: 0
 11638  0049AC  0100               	movlb	0	; () banked
 11639  0049AE  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 11640  0049B0  D7F7               	goto	l7449
 11641  0049B2                     l7453:
 11642                           
 11643                           ; BSR set to: 0
 11644  0049B2  0100               	movlb	0	; () banked
 11645  0049B4  90D8               	bcf	status,0,c
 11646  0049B6  378C               	rlcf	___awdiv@quotient& (0+255),f,b
 11647  0049B8  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 11648                           
 11649                           ; BSR set to: 0
 11650  0049BA  0100               	movlb	0	; () banked
 11651  0049BC  5188               	movf	___awdiv@divisor& (0+255),w,b
 11652  0049BE  0100               	movlb	0	; () banked
 11653  0049C0  5D86               	subwf	___awdiv@dividend& (0+255),w,b
 11654  0049C2  0100               	movlb	0	; () banked
 11655  0049C4  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 11656  0049C6  0100               	movlb	0	; () banked
 11657  0049C8  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 11658  0049CA  A0D8               	btfss	status,0,c
 11659  0049CC  D00A               	goto	l7461
 11660                           
 11661                           ; BSR set to: 0
 11662  0049CE  0100               	movlb	0	; () banked
 11663  0049D0  5188               	movf	___awdiv@divisor& (0+255),w,b
 11664  0049D2  0100               	movlb	0	; () banked
 11665  0049D4  5F86               	subwf	___awdiv@dividend& (0+255),f,b
 11666  0049D6  0100               	movlb	0	; () banked
 11667  0049D8  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 11668  0049DA  0100               	movlb	0	; () banked
 11669  0049DC  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 11670                           
 11671                           ; BSR set to: 0
 11672  0049DE  0100               	movlb	0	; () banked
 11673  0049E0  818C               	bsf	___awdiv@quotient& (0+255),0,b
 11674  0049E2                     l7461:
 11675                           
 11676                           ; BSR set to: 0
 11677  0049E2  0100               	movlb	0	; () banked
 11678  0049E4  90D8               	bcf	status,0,c
 11679  0049E6  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 11680  0049E8  3388               	rrcf	___awdiv@divisor& (0+255),f,b
 11681                           
 11682                           ; BSR set to: 0
 11683  0049EA  0100               	movlb	0	; () banked
 11684  0049EC  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
 11685  0049EE  D7E1               	goto	l7453
 11686  0049F0                     l7465:
 11687                           
 11688                           ; BSR set to: 0
 11689  0049F0  0100               	movlb	0	; () banked
 11690  0049F2  518B               	movf	___awdiv@sign& (0+255),w,b
 11691  0049F4  0100               	movlb	0	; () banked
 11692  0049F6  B4D8               	btfsc	status,2,c
 11693  0049F8  D005               	goto	l7469
 11694                           
 11695                           ; BSR set to: 0
 11696  0049FA  0100               	movlb	0	; () banked
 11697  0049FC  6D8C               	negf	___awdiv@quotient& (0+255),b
 11698  0049FE  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 11699  004A00  B0D8               	btfsc	status,0,c
 11700  004A02  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 11701  004A04                     l7469:
 11702                           
 11703                           ; BSR set to: 0
 11704  004A04  C08C  F086         	movff	___awdiv@quotient,?___awdiv
 11705  004A08  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
 11706  004A0C  0012               	return	
 11707  004A0E                     __end_of___awdiv:
 11708                           	opt stack 0
 11709                           tblptru	equ	0xFF8
 11710                           tblptrh	equ	0xFF7
 11711                           tblptrl	equ	0xFF6
 11712                           tablat	equ	0xFF5
 11713                           prodh	equ	0xFF4
 11714                           prodl	equ	0xFF3
 11715                           intcon	equ	0xFF2
 11716                           intcon2	equ	0xFF1
 11717                           intcon3	equ	0xFF0
 11718                           postinc0	equ	0xFEE
 11719                           wreg	equ	0xFE8
 11720                           postdec1	equ	0xFE5
 11721                           fsr1l	equ	0xFE1
 11722                           indf2	equ	0xFDF
 11723                           postinc2	equ	0xFDE
 11724                           postdec2	equ	0xFDD
 11725                           fsr2h	equ	0xFDA
 11726                           fsr2l	equ	0xFD9
 11727                           status	equ	0xFD8
 11728                           
 11729 ;; *************** function _Test *****************
 11730 ;; Defined at:
 11731 ;;		line 31 in file "Test.c"
 11732 ;; Parameters:    Size  Location     Type
 11733 ;;		None
 11734 ;; Auto vars:     Size  Location     Type
 11735 ;;		None
 11736 ;; Return value:  Size  Location     Type
 11737 ;;                  1    wreg      void 
 11738 ;; Registers used:
 11739 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11740 ;; Tracked objects:
 11741 ;;		On entry : 0/0
 11742 ;;		On exit  : 0/0
 11743 ;;		Unchanged: 0/0
 11744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11747 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11748 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11749 ;;Total ram usage:        2 bytes
 11750 ;; Hardware stack levels used:    1
 11751 ;; Hardware stack levels required when called:   11
 11752 ;; This function calls:
 11753 ;;		_BlockerTest
 11754 ;;		_BothServos
 11755 ;;		_PlatformTest
 11756 ;;		_PortTestDC
 11757 ;;		_PortTestPusher
 11758 ;;		_SpeedTest
 11759 ;;		_actuatorTest
 11760 ;;		_algorithmTest
 11761 ;;		_arm
 11762 ;;		_lcdInst
 11763 ;;		_printf
 11764 ;;		_sensorTest
 11765 ;; This function is called by:
 11766 ;;		_main
 11767 ;; This function uses a non-reentrant model
 11768 ;;
 11769                           
 11770                           	psect	text40
 11771  004258                     __ptext40:
 11772                           	opt stack 0
 11773  004258                     _Test:
 11774                           	opt stack 19
 11775                           
 11776                           ;Test.c: 33: while(machine_state == Testing_state){
 11777                           
 11778                           ; BSR set to: 0
 11779                           ;incstack = 0
 11780  004258  D07C               	goto	l9881
 11781  00425A                     l9841:
 11782                           
 11783                           ;Test.c: 34: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11784  00425A  0E01               	movlw	1
 11785  00425C  ECBB  F02D         	call	_lcdInst
 11786  004260  0E68               	movlw	104
 11787  004262  0100               	movlb	0	; () banked
 11788  004264  6FC6               	movwf	??_Test& (0+255),b
 11789  004266  0EE4               	movlw	228
 11790  004268                     u10357:
 11791  004268  2EE8               	decfsz	wreg,f,c
 11792  00426A  D7FE               	bra	u10357
 11793  00426C  2FC6               	decfsz	??_Test& (0+255),f,b
 11794  00426E  D7FC               	bra	u10357
 11795  004270  F000               	nop	
 11796  004272  0E80               	movlw	128
 11797  004274  ECBB  F02D         	call	_lcdInst
 11798                           
 11799                           ;Test.c: 35: printf("2.SNR|4.HI|5.MED");
 11800  004278  0E73               	movlw	low STR_68
 11801  00427A  0100               	movlb	0	; () banked
 11802  00427C  6F8E               	movwf	printf@f& (0+255),b
 11803  00427E  0EFC               	movlw	high STR_68
 11804  004280  0100               	movlb	0	; () banked
 11805  004282  6F8F               	movwf	(printf@f+1)& (0+255),b
 11806  004284  ECC1  F00B         	call	_printf	;wreg free
 11807                           
 11808                           ;Test.c: 36: lcdInst(0b11000000);;
 11809  004288  0EC0               	movlw	192
 11810  00428A  ECBB  F02D         	call	_lcdInst
 11811                           
 11812                           ;Test.c: 37: printf("B.PLA|8.SV|9.BLK");
 11813  00428E  0E84               	movlw	low STR_69
 11814  004290  0100               	movlb	0	; () banked
 11815  004292  6F8E               	movwf	printf@f& (0+255),b
 11816  004294  0EFC               	movlw	high STR_69
 11817  004296  0100               	movlb	0	; () banked
 11818  004298  6F8F               	movwf	(printf@f+1)& (0+255),b
 11819  00429A  ECC1  F00B         	call	_printf	;wreg free
 11820  00429E                     l1233:
 11821  00429E  A281               	btfss	3969,1,c	;volatile
 11822  0042A0  D7FE               	goto	l1233
 11823                           
 11824                           ;Test.c: 39: var = PORTB >> 4;
 11825  0042A2  CF81 F0C6          	movff	3969,??_Test	;volatile
 11826  0042A6  0100               	movlb	0	; () banked
 11827  0042A8  3BC6               	swapf	??_Test& (0+255),f,b
 11828  0042AA  0E0F               	movlw	15
 11829  0042AC  17C6               	andwf	??_Test& (0+255),f,b
 11830  0042AE  0100               	movlb	0	; () banked
 11831  0042B0  51C6               	movf	??_Test& (0+255),w,b
 11832  0042B2  0101               	movlb	1	; () banked
 11833  0042B4  6F47               	movwf	_var& (0+255),b
 11834  0042B6  6B48               	clrf	(_var+1)& (0+255),b
 11835                           
 11836                           ; BSR set to: 1
 11837                           ;Test.c: 40: var++;
 11838  0042B8  0101               	movlb	1	; () banked
 11839  0042BA  4B47               	infsnz	_var& (0+255),f,b
 11840  0042BC  2B48               	incf	(_var+1)& (0+255),f,b
 11841  0042BE                     l1236:
 11842  0042BE  A281               	btfss	3969,1,c	;volatile
 11843  0042C0  D01F               	goto	l9879
 11844  0042C2  D7FD               	goto	l1236
 11845  0042C4                     l9857:
 11846                           
 11847                           ;Test.c: 44: algorithmTest();
 11848  0042C4  EC13  F023         	call	_algorithmTest	;wreg free
 11849                           
 11850                           ;Test.c: 45: break;
 11851  0042C8  D044               	goto	l9881
 11852  0042CA                     l9859:
 11853                           
 11854                           ;Test.c: 47: sensorTest();
 11855  0042CA  EC0E  F015         	call	_sensorTest	;wreg free
 11856                           
 11857                           ;Test.c: 48: break;
 11858  0042CE  D041               	goto	l9881
 11859  0042D0                     l9861:
 11860                           
 11861                           ;Test.c: 50: actuatorTest();
 11862  0042D0  EC6B  F004         	call	_actuatorTest	;wreg free
 11863                           
 11864                           ;Test.c: 51: break;
 11865  0042D4  D03E               	goto	l9881
 11866  0042D6                     l9863:
 11867                           
 11868                           ;Test.c: 53: arm();
 11869  0042D6  ECAF  F021         	call	_arm	;wreg free
 11870                           
 11871                           ;Test.c: 54: break;
 11872  0042DA  D03B               	goto	l9881
 11873  0042DC                     l9865:
 11874                           
 11875                           ;Test.c: 56: PortTestDC();
 11876  0042DC  EC32  F029         	call	_PortTestDC	;wreg free
 11877                           
 11878                           ;Test.c: 57: break;
 11879  0042E0  D038               	goto	l9881
 11880  0042E2                     l9867:
 11881                           
 11882                           ;Test.c: 59: SpeedTest();
 11883  0042E2  ECD7  F026         	call	_SpeedTest	;wreg free
 11884                           
 11885                           ;Test.c: 60: break;
 11886  0042E6  D035               	goto	l9881
 11887  0042E8                     l9869:
 11888                           
 11889                           ;Test.c: 62: PortTestPusher();
 11890  0042E8  EC04  F029         	call	_PortTestPusher	;wreg free
 11891                           
 11892                           ;Test.c: 63: break;
 11893  0042EC  D032               	goto	l9881
 11894  0042EE                     l9871:
 11895                           
 11896                           ;Test.c: 65: PlatformTest();
 11897  0042EE  EC83  F013         	call	_PlatformTest	;wreg free
 11898                           
 11899                           ;Test.c: 66: break;
 11900  0042F2  D02F               	goto	l9881
 11901  0042F4                     l9873:
 11902                           
 11903                           ;Test.c: 68: BothServos();
 11904  0042F4  ECD5  F00F         	call	_BothServos	;wreg free
 11905                           
 11906                           ;Test.c: 69: break;
 11907  0042F8  D02C               	goto	l9881
 11908  0042FA                     l9875:
 11909                           
 11910                           ;Test.c: 71: BlockerTest();
 11911  0042FA  EC92  F01E         	call	_BlockerTest	;wreg free
 11912                           
 11913                           ;Test.c: 75: }
 11914                           
 11915                           ;Test.c: 74: break;
 11916                           
 11917                           ;Test.c: 73: default:
 11918                           
 11919                           ;Test.c: 72: break;
 11920  0042FE  D029               	goto	l9881
 11921  004300                     l9879:
 11922  004300  C147  F0C6         	movff	_var,??_Test
 11923  004304  C148  F0C7         	movff	_var+1,??_Test+1
 11924                           
 11925                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11926                           ; Switch size 1, requested type "space"
 11927                           ; Number of cases is 1, Range of values is 0 to 0
 11928                           ; switch strategies available:
 11929                           ; Name         Instructions Cycles
 11930                           ; simple_byte            4     3 (average)
 11931                           ;	Chosen strategy is simple_byte
 11932  004308  0100               	movlb	0	; () banked
 11933  00430A  51C7               	movf	(??_Test+1)& (0+255),w,b
 11934  00430C  0A00               	xorlw	0	; case 0
 11935  00430E  A4D8               	btfss	status,2,c
 11936  004310  D020               	goto	l9881
 11937                           
 11938                           ; BSR set to: 0
 11939                           ; Switch size 1, requested type "space"
 11940                           ; Number of cases is 10, Range of values is 1 to 11
 11941                           ; switch strategies available:
 11942                           ; Name         Instructions Cycles
 11943                           ; simple_byte           31    16 (average)
 11944                           ;	Chosen strategy is simple_byte
 11945  004312  0100               	movlb	0	; () banked
 11946  004314  51C6               	movf	??_Test& (0+255),w,b
 11947  004316  0A01               	xorlw	1	; case 1
 11948  004318  B4D8               	btfsc	status,2,c
 11949  00431A  D7D4               	goto	l9857
 11950  00431C  0A03               	xorlw	3	; case 2
 11951  00431E  B4D8               	btfsc	status,2,c
 11952  004320  D7D4               	goto	l9859
 11953  004322  0A01               	xorlw	1	; case 3
 11954  004324  B4D8               	btfsc	status,2,c
 11955  004326  D7D4               	goto	l9861
 11956  004328  0A07               	xorlw	7	; case 4
 11957  00432A  B4D8               	btfsc	status,2,c
 11958  00432C  D7D4               	goto	l9863
 11959  00432E  0A01               	xorlw	1	; case 5
 11960  004330  B4D8               	btfsc	status,2,c
 11961  004332  D7D4               	goto	l9865
 11962  004334  0A03               	xorlw	3	; case 6
 11963  004336  B4D8               	btfsc	status,2,c
 11964  004338  D7D4               	goto	l9867
 11965  00433A  0A01               	xorlw	1	; case 7
 11966  00433C  B4D8               	btfsc	status,2,c
 11967  00433E  D7D4               	goto	l9869
 11968  004340  0A0F               	xorlw	15	; case 8
 11969  004342  B4D8               	btfsc	status,2,c
 11970  004344  D7D4               	goto	l9871
 11971  004346  0A02               	xorlw	2	; case 10
 11972  004348  B4D8               	btfsc	status,2,c
 11973  00434A  D7D4               	goto	l9873
 11974  00434C  0A01               	xorlw	1	; case 11
 11975  00434E  B4D8               	btfsc	status,2,c
 11976  004350  D7D4               	goto	l9875
 11977  004352                     l9881:
 11978  004352  0E03               	movlw	3
 11979  004354  0100               	movlb	0	; () banked
 11980  004356  19FC               	xorwf	_machine_state& (0+255),w,b
 11981  004358  A4D8               	btfss	status,2,c
 11982  00435A  0012               	return	
 11983  00435C  D77E               	goto	l9841
 11984  00435E                     __end_of_Test:
 11985                           	opt stack 0
 11986                           tblptru	equ	0xFF8
 11987                           tblptrh	equ	0xFF7
 11988                           tblptrl	equ	0xFF6
 11989                           tablat	equ	0xFF5
 11990                           prodh	equ	0xFF4
 11991                           prodl	equ	0xFF3
 11992                           intcon	equ	0xFF2
 11993                           intcon2	equ	0xFF1
 11994                           intcon3	equ	0xFF0
 11995                           postinc0	equ	0xFEE
 11996                           wreg	equ	0xFE8
 11997                           postdec1	equ	0xFE5
 11998                           fsr1l	equ	0xFE1
 11999                           indf2	equ	0xFDF
 12000                           postinc2	equ	0xFDE
 12001                           postdec2	equ	0xFDD
 12002                           fsr2h	equ	0xFDA
 12003                           fsr2l	equ	0xFD9
 12004                           status	equ	0xFD8
 12005                           
 12006 ;; *************** function _sensorTest *****************
 12007 ;; Defined at:
 12008 ;;		line 123 in file "Test.c"
 12009 ;; Parameters:    Size  Location     Type
 12010 ;;		None
 12011 ;; Auto vars:     Size  Location     Type
 12012 ;;  res             2   45[BANK0 ] int 
 12013 ;; Return value:  Size  Location     Type
 12014 ;;                  1    wreg      void 
 12015 ;; Registers used:
 12016 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12017 ;; Tracked objects:
 12018 ;;		On entry : 0/0
 12019 ;;		On exit  : 0/0
 12020 ;;		Unchanged: 0/0
 12021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12023 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12024 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12025 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12026 ;;Total ram usage:        4 bytes
 12027 ;; Hardware stack levels used:    1
 12028 ;; Hardware stack levels required when called:   10
 12029 ;; This function calls:
 12030 ;;		_lcdInst
 12031 ;;		_printf
 12032 ;;		_readADC
 12033 ;;		_readMAG
 12034 ;; This function is called by:
 12035 ;;		_Test
 12036 ;; This function uses a non-reentrant model
 12037 ;;
 12038                           
 12039                           	psect	text41
 12040  002A1C                     __ptext41:
 12041                           	opt stack 0
 12042  002A1C                     _sensorTest:
 12043                           	opt stack 19
 12044                           
 12045                           ;Test.c: 125: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12046                           
 12047                           ; BSR set to: 0
 12048                           ;incstack = 0
 12049  002A1C  0E01               	movlw	1
 12050  002A1E  ECBB  F02D         	call	_lcdInst
 12051  002A22  0E68               	movlw	104
 12052  002A24  0100               	movlb	0	; () banked
 12053  002A26  6FAB               	movwf	??_sensorTest& (0+255),b
 12054  002A28  0EE4               	movlw	228
 12055  002A2A                     u10367:
 12056  002A2A  2EE8               	decfsz	wreg,f,c
 12057  002A2C  D7FE               	bra	u10367
 12058  002A2E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12059  002A30  D7FC               	bra	u10367
 12060  002A32  F000               	nop	
 12061  002A34  0E80               	movlw	128
 12062  002A36  ECBB  F02D         	call	_lcdInst
 12063                           
 12064                           ;Test.c: 126: printf("SENSORS");
 12065  002A3A  0EAE               	movlw	low STR_77
 12066  002A3C  0100               	movlb	0	; () banked
 12067  002A3E  6F8E               	movwf	printf@f& (0+255),b
 12068  002A40  0EFF               	movlw	high STR_77
 12069  002A42  0100               	movlb	0	; () banked
 12070  002A44  6F8F               	movwf	(printf@f+1)& (0+255),b
 12071  002A46  ECC1  F00B         	call	_printf	;wreg free
 12072                           
 12073                           ;Test.c: 127: lcdInst(0b11000000);;
 12074  002A4A  0EC0               	movlw	192
 12075  002A4C  ECBB  F02D         	call	_lcdInst
 12076                           
 12077                           ;Test.c: 128: printf("PUSH TO START");
 12078  002A50  0E2E               	movlw	low STR_71
 12079  002A52  0100               	movlb	0	; () banked
 12080  002A54  6F8E               	movwf	printf@f& (0+255),b
 12081  002A56  0EFF               	movlw	high STR_71
 12082  002A58  0100               	movlb	0	; () banked
 12083  002A5A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12084  002A5C  ECC1  F00B         	call	_printf	;wreg free
 12085                           
 12086                           ;Test.c: 129: _delay((unsigned long)((100)*(32000000/4000.0)));
 12087  002A60  0E05               	movlw	5
 12088  002A62  0100               	movlb	0	; () banked
 12089  002A64  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12090  002A66  0E0F               	movlw	15
 12091  002A68  0100               	movlb	0	; () banked
 12092  002A6A  6FAB               	movwf	??_sensorTest& (0+255),b
 12093  002A6C  0EF1               	movlw	241
 12094  002A6E                     u10377:
 12095  002A6E  2EE8               	decfsz	wreg,f,c
 12096  002A70  D7FE               	bra	u10377
 12097  002A72  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12098  002A74  D7FC               	bra	u10377
 12099  002A76  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12100  002A78  D7FA               	bra	u10377
 12101  002A7A                     l1265:
 12102  002A7A  A281               	btfss	3969,1,c	;volatile
 12103  002A7C  D7FE               	goto	l1265
 12104  002A7E                     l1268:
 12105  002A7E  B281               	btfsc	3969,1,c	;volatile
 12106  002A80  D7FE               	goto	l1268
 12107                           
 12108                           ;Test.c: 132: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12109  002A82  0E01               	movlw	1
 12110  002A84  ECBB  F02D         	call	_lcdInst
 12111  002A88  0E68               	movlw	104
 12112  002A8A  0100               	movlb	0	; () banked
 12113  002A8C  6FAB               	movwf	??_sensorTest& (0+255),b
 12114  002A8E  0EE4               	movlw	228
 12115  002A90                     u10387:
 12116  002A90  2EE8               	decfsz	wreg,f,c
 12117  002A92  D7FE               	bra	u10387
 12118  002A94  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12119  002A96  D7FC               	bra	u10387
 12120  002A98  F000               	nop	
 12121  002A9A  0E80               	movlw	128
 12122  002A9C  ECBB  F02D         	call	_lcdInst
 12123                           
 12124                           ;Test.c: 137: printf("TST: IR SNSR");
 12125  002AA0  0E58               	movlw	low STR_79
 12126  002AA2  0100               	movlb	0	; () banked
 12127  002AA4  6F8E               	movwf	printf@f& (0+255),b
 12128  002AA6  0EFF               	movlw	high STR_79
 12129  002AA8  0100               	movlb	0	; () banked
 12130  002AAA  6F8F               	movwf	(printf@f+1)& (0+255),b
 12131  002AAC  ECC1  F00B         	call	_printf	;wreg free
 12132                           
 12133                           ;Test.c: 138: _delay((unsigned long)((100)*(32000000/4000.0)));
 12134  002AB0  0E05               	movlw	5
 12135  002AB2  0100               	movlb	0	; () banked
 12136  002AB4  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12137  002AB6  0E0F               	movlw	15
 12138  002AB8  0100               	movlb	0	; () banked
 12139  002ABA  6FAB               	movwf	??_sensorTest& (0+255),b
 12140  002ABC  0EF1               	movlw	241
 12141  002ABE                     u10397:
 12142  002ABE  2EE8               	decfsz	wreg,f,c
 12143  002AC0  D7FE               	bra	u10397
 12144  002AC2  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12145  002AC4  D7FC               	bra	u10397
 12146  002AC6  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12147  002AC8  D7FA               	bra	u10397
 12148                           
 12149                           ;Test.c: 139: LATCbits.LATC5 = 1;
 12150  002ACA  8A8B               	bsf	3979,5,c	;volatile
 12151                           
 12152                           ;Test.c: 141: while(PORTBbits.RB1 == 0){
 12153  002ACC  D05C               	goto	l8247
 12154  002ACE                     l8229:
 12155                           
 12156                           ;Test.c: 142: readADC(0);
 12157  002ACE  0E00               	movlw	0
 12158  002AD0  ECA6  F02C         	call	_readADC
 12159                           
 12160                           ;Test.c: 143: int res = ADRESH<<8 | ADRESL;
 12161  002AD4  50C3               	movf	4035,w,c	;volatile
 12162  002AD6  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 12163  002ADA  0100               	movlb	0	; () banked
 12164  002ADC  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 12165  002ADE  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 12166  002AE2  0100               	movlb	0	; () banked
 12167  002AE4  6BAB               	clrf	??_sensorTest& (0+255),b
 12168  002AE6  0100               	movlb	0	; () banked
 12169  002AE8  11AB               	iorwf	??_sensorTest& (0+255),w,b
 12170  002AEA  0100               	movlb	0	; () banked
 12171  002AEC  6FAD               	movwf	sensorTest@res& (0+255),b
 12172  002AEE  0100               	movlb	0	; () banked
 12173  002AF0  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 12174  002AF2  0100               	movlb	0	; () banked
 12175  002AF4  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
 12176                           
 12177                           ; BSR set to: 0
 12178                           ;Test.c: 144: IR_signal = (res > 800) ? 1 : 0;
 12179  002AF6  0100               	movlb	0	; () banked
 12180  002AF8  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
 12181  002AFA  D00A               	goto	u7050
 12182  002AFC  0E21               	movlw	33
 12183  002AFE  0100               	movlb	0	; () banked
 12184  002B00  5DAD               	subwf	sensorTest@res& (0+255),w,b
 12185  002B02  0E03               	movlw	3
 12186  002B04  0100               	movlb	0	; () banked
 12187  002B06  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
 12188  002B08  A0D8               	btfss	status,0,c
 12189  002B0A  D002               	goto	u7050
 12190  002B0C  0E01               	movlw	1
 12191  002B0E  D001               	goto	u7060
 12192  002B10                     u7050:
 12193  002B10  0E00               	movlw	0
 12194  002B12                     u7060:
 12195  002B12  0100               	movlb	0	; () banked
 12196  002B14  6FE8               	movwf	_IR_signal& (0+255),b
 12197  002B16  6BE9               	clrf	(_IR_signal+1)& (0+255),b
 12198                           
 12199                           ;Test.c: 146: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12200  002B18  0E01               	movlw	1
 12201  002B1A  ECBB  F02D         	call	_lcdInst
 12202  002B1E  0E68               	movlw	104
 12203  002B20  0100               	movlb	0	; () banked
 12204  002B22  6FAB               	movwf	??_sensorTest& (0+255),b
 12205  002B24  0EE4               	movlw	228
 12206  002B26                     u10407:
 12207  002B26  2EE8               	decfsz	wreg,f,c
 12208  002B28  D7FE               	bra	u10407
 12209  002B2A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12210  002B2C  D7FC               	bra	u10407
 12211  002B2E  F000               	nop	
 12212  002B30  0E80               	movlw	128
 12213  002B32  ECBB  F02D         	call	_lcdInst
 12214                           
 12215                           ;Test.c: 147: printf("IR_signal: %d ", IR_signal);
 12216  002B36  0E7D               	movlw	low STR_80
 12217  002B38  0100               	movlb	0	; () banked
 12218  002B3A  6F8E               	movwf	printf@f& (0+255),b
 12219  002B3C  0EFE               	movlw	high STR_80
 12220  002B3E  0100               	movlb	0	; () banked
 12221  002B40  6F8F               	movwf	(printf@f+1)& (0+255),b
 12222  002B42  C0E8  F090         	movff	_IR_signal,?_printf+2
 12223  002B46  C0E9  F091         	movff	_IR_signal+1,?_printf+3
 12224  002B4A  ECC1  F00B         	call	_printf	;wreg free
 12225                           
 12226                           ;Test.c: 148: lcdInst(0b11000000);;
 12227  002B4E  0EC0               	movlw	192
 12228  002B50  ECBB  F02D         	call	_lcdInst
 12229                           
 12230                           ;Test.c: 149: printf("%d", res);
 12231  002B54  0E2A               	movlw	low (STR_27+14)
 12232  002B56  0100               	movlb	0	; () banked
 12233  002B58  6F8E               	movwf	printf@f& (0+255),b
 12234  002B5A  0EFE               	movlw	high (STR_27+14)
 12235  002B5C  0100               	movlb	0	; () banked
 12236  002B5E  6F8F               	movwf	(printf@f+1)& (0+255),b
 12237  002B60  C0AD  F090         	movff	sensorTest@res,?_printf+2
 12238  002B64  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
 12239  002B68  ECC1  F00B         	call	_printf	;wreg free
 12240                           
 12241                           ;Test.c: 150: _delay((unsigned long)((100)*(32000000/4000.0)));
 12242  002B6C  0E05               	movlw	5
 12243  002B6E  0100               	movlb	0	; () banked
 12244  002B70  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12245  002B72  0E0F               	movlw	15
 12246  002B74  0100               	movlb	0	; () banked
 12247  002B76  6FAB               	movwf	??_sensorTest& (0+255),b
 12248  002B78  0EF1               	movlw	241
 12249  002B7A                     u10417:
 12250  002B7A  2EE8               	decfsz	wreg,f,c
 12251  002B7C  D7FE               	bra	u10417
 12252  002B7E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12253  002B80  D7FC               	bra	u10417
 12254  002B82  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12255  002B84  D7FA               	bra	u10417
 12256  002B86                     l8247:
 12257  002B86  A281               	btfss	3969,1,c	;volatile
 12258  002B88  D7A2               	goto	l8229
 12259                           
 12260                           ;Test.c: 151: }
 12261                           ;Test.c: 152: LATCbits.LATC5 = 0;
 12262  002B8A  9A8B               	bcf	3979,5,c	;volatile
 12263                           
 12264                           ;Test.c: 160: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12265  002B8C  0E01               	movlw	1
 12266  002B8E  ECBB  F02D         	call	_lcdInst
 12267  002B92  0E68               	movlw	104
 12268  002B94  0100               	movlb	0	; () banked
 12269  002B96  6FAB               	movwf	??_sensorTest& (0+255),b
 12270  002B98  0EE4               	movlw	228
 12271  002B9A                     u10427:
 12272  002B9A  2EE8               	decfsz	wreg,f,c
 12273  002B9C  D7FE               	bra	u10427
 12274  002B9E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12275  002BA0  D7FC               	bra	u10427
 12276  002BA2  F000               	nop	
 12277  002BA4  0E80               	movlw	128
 12278  002BA6  ECBB  F02D         	call	_lcdInst
 12279                           
 12280                           ;Test.c: 161: printf("TST: MAGNETISM");
 12281  002BAA  0EAA               	movlw	low STR_82
 12282  002BAC  0100               	movlb	0	; () banked
 12283  002BAE  6F8E               	movwf	printf@f& (0+255),b
 12284  002BB0  0EFE               	movlw	high STR_82
 12285  002BB2  0100               	movlb	0	; () banked
 12286  002BB4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12287  002BB6  ECC1  F00B         	call	_printf	;wreg free
 12288                           
 12289                           ;Test.c: 162: _delay((unsigned long)((100)*(32000000/4000.0)));
 12290  002BBA  0E05               	movlw	5
 12291  002BBC  0100               	movlb	0	; () banked
 12292  002BBE  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12293  002BC0  0E0F               	movlw	15
 12294  002BC2  0100               	movlb	0	; () banked
 12295  002BC4  6FAB               	movwf	??_sensorTest& (0+255),b
 12296  002BC6  0EF1               	movlw	241
 12297  002BC8                     u10437:
 12298  002BC8  2EE8               	decfsz	wreg,f,c
 12299  002BCA  D7FE               	bra	u10437
 12300  002BCC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12301  002BCE  D7FC               	bra	u10437
 12302  002BD0  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12303  002BD2  D7FA               	bra	u10437
 12304                           
 12305                           ;Test.c: 163: while(PORTBbits.RB1 == 0){
 12306  002BD4  D021               	goto	l8265
 12307  002BD6                     l8259:
 12308                           
 12309                           ;Test.c: 164: readMAG();
 12310  002BD6  EC29  F02A         	call	_readMAG	;wreg free
 12311                           
 12312                           ;Test.c: 165: lcdInst(0b10000000);;
 12313  002BDA  0E80               	movlw	128
 12314  002BDC  ECBB  F02D         	call	_lcdInst
 12315                           
 12316                           ;Test.c: 166: lcdInst(0b11000000);;
 12317  002BE0  0EC0               	movlw	192
 12318  002BE2  ECBB  F02D         	call	_lcdInst
 12319                           
 12320                           ;Test.c: 167: printf("MAG_signal: %d ", MAG_signal);
 12321  002BE6  0E3E               	movlw	low STR_83
 12322  002BE8  0100               	movlb	0	; () banked
 12323  002BEA  6F8E               	movwf	printf@f& (0+255),b
 12324  002BEC  0EFE               	movlw	high STR_83
 12325  002BEE  0100               	movlb	0	; () banked
 12326  002BF0  6F8F               	movwf	(printf@f+1)& (0+255),b
 12327  002BF2  C0EA  F090         	movff	_MAG_signal,?_printf+2
 12328  002BF6  C0EB  F091         	movff	_MAG_signal+1,?_printf+3
 12329  002BFA  ECC1  F00B         	call	_printf	;wreg free
 12330                           
 12331                           ;Test.c: 168: _delay((unsigned long)((100)*(32000000/4000.0)));
 12332  002BFE  0E05               	movlw	5
 12333  002C00  0100               	movlb	0	; () banked
 12334  002C02  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12335  002C04  0E0F               	movlw	15
 12336  002C06  0100               	movlb	0	; () banked
 12337  002C08  6FAB               	movwf	??_sensorTest& (0+255),b
 12338  002C0A  0EF1               	movlw	241
 12339  002C0C                     u10447:
 12340  002C0C  2EE8               	decfsz	wreg,f,c
 12341  002C0E  D7FE               	bra	u10447
 12342  002C10  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12343  002C12  D7FC               	bra	u10447
 12344  002C14  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12345  002C16  D7FA               	bra	u10447
 12346  002C18                     l8265:
 12347  002C18  A281               	btfss	3969,1,c	;volatile
 12348  002C1A  D7DD               	goto	l8259
 12349                           
 12350                           ;Test.c: 169: }
 12351                           ;Test.c: 174: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12352  002C1C  0E01               	movlw	1
 12353  002C1E  ECBB  F02D         	call	_lcdInst
 12354  002C22  0E68               	movlw	104
 12355  002C24  0100               	movlb	0	; () banked
 12356  002C26  6FAB               	movwf	??_sensorTest& (0+255),b
 12357  002C28  0EE4               	movlw	228
 12358  002C2A                     u10457:
 12359  002C2A  2EE8               	decfsz	wreg,f,c
 12360  002C2C  D7FE               	bra	u10457
 12361  002C2E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12362  002C30  D7FC               	bra	u10457
 12363  002C32  F000               	nop	
 12364  002C34  0E80               	movlw	128
 12365  002C36  ECBB  F02D         	call	_lcdInst
 12366                           
 12367                           ;Test.c: 175: printf("TST: COND");
 12368  002C3A  0E87               	movlw	low STR_84
 12369  002C3C  0100               	movlb	0	; () banked
 12370  002C3E  6F8E               	movwf	printf@f& (0+255),b
 12371  002C40  0EFF               	movlw	high STR_84
 12372  002C42  0100               	movlb	0	; () banked
 12373  002C44  6F8F               	movwf	(printf@f+1)& (0+255),b
 12374  002C46  ECC1  F00B         	call	_printf	;wreg free
 12375                           
 12376                           ;Test.c: 176: _delay((unsigned long)((100)*(32000000/4000.0)));
 12377  002C4A  0E05               	movlw	5
 12378  002C4C  0100               	movlb	0	; () banked
 12379  002C4E  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12380  002C50  0E0F               	movlw	15
 12381  002C52  0100               	movlb	0	; () banked
 12382  002C54  6FAB               	movwf	??_sensorTest& (0+255),b
 12383  002C56  0EF1               	movlw	241
 12384  002C58                     u10467:
 12385  002C58  2EE8               	decfsz	wreg,f,c
 12386  002C5A  D7FE               	bra	u10467
 12387  002C5C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12388  002C5E  D7FC               	bra	u10467
 12389  002C60  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12390  002C62  D7FA               	bra	u10467
 12391  002C64                     l8277:
 12392                           
 12393                           ;Test.c: 178: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12394  002C64  0E01               	movlw	1
 12395  002C66  ECBB  F02D         	call	_lcdInst
 12396  002C6A  0E68               	movlw	104
 12397  002C6C  0100               	movlb	0	; () banked
 12398  002C6E  6FAB               	movwf	??_sensorTest& (0+255),b
 12399  002C70  0EE4               	movlw	228
 12400  002C72                     u10477:
 12401  002C72  2EE8               	decfsz	wreg,f,c
 12402  002C74  D7FE               	bra	u10477
 12403  002C76  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12404  002C78  D7FC               	bra	u10477
 12405  002C7A  F000               	nop	
 12406  002C7C  0E80               	movlw	128
 12407  002C7E  ECBB  F02D         	call	_lcdInst
 12408                           
 12409                           ;Test.c: 179: printf("TST: COND");
 12410  002C82  0E87               	movlw	low STR_84
 12411  002C84  0100               	movlb	0	; () banked
 12412  002C86  6F8E               	movwf	printf@f& (0+255),b
 12413  002C88  0EFF               	movlw	high STR_84
 12414  002C8A  0100               	movlb	0	; () banked
 12415  002C8C  6F8F               	movwf	(printf@f+1)& (0+255),b
 12416  002C8E  ECC1  F00B         	call	_printf	;wreg free
 12417                           
 12418                           ;Test.c: 180: while(PORTBbits.RB1 == 0){
 12419  002C92  D01B               	goto	l8289
 12420  002C94                     l8285:
 12421                           
 12422                           ;Test.c: 184: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12423  002C94  0E80               	movlw	128
 12424  002C96  ECBB  F02D         	call	_lcdInst
 12425  002C9A  0EC0               	movlw	192
 12426  002C9C  ECBB  F02D         	call	_lcdInst
 12427                           
 12428                           ;Test.c: 185: printf("COND: %d", PORTAbits.RA2);
 12429  002CA0  0EA5               	movlw	low STR_86
 12430  002CA2  0100               	movlb	0	; () banked
 12431  002CA4  6F8E               	movwf	printf@f& (0+255),b
 12432  002CA6  0EFF               	movlw	high STR_86
 12433  002CA8  0100               	movlb	0	; () banked
 12434  002CAA  6F8F               	movwf	(printf@f+1)& (0+255),b
 12435  002CAC  A480               	btfss	3968,2,c	;volatile
 12436  002CAE  D004               	goto	u7090
 12437  002CB0  0100               	movlb	0	; () banked
 12438  002CB2  6BAB               	clrf	??_sensorTest& (0+255),b
 12439  002CB4  2BAB               	incf	??_sensorTest& (0+255),f,b
 12440  002CB6  D002               	goto	u7098
 12441  002CB8                     u7090:
 12442  002CB8  0100               	movlb	0	; () banked
 12443  002CBA  6BAB               	clrf	??_sensorTest& (0+255),b
 12444  002CBC                     u7098:
 12445  002CBC  0100               	movlb	0	; () banked
 12446  002CBE  51AB               	movf	??_sensorTest& (0+255),w,b
 12447  002CC0  0100               	movlb	0	; () banked
 12448  002CC2  6F90               	movwf	(?_printf+2)& (0+255),b
 12449  002CC4  6B91               	clrf	(?_printf+3)& (0+255),b
 12450  002CC6  ECC1  F00B         	call	_printf	;wreg free
 12451  002CCA                     l8289:
 12452  002CCA  A281               	btfss	3969,1,c	;volatile
 12453  002CCC  D7E3               	goto	l8285
 12454                           
 12455                           ;Test.c: 186: }
 12456                           ;Test.c: 187: if(PORTB >> 4 == 0b1111){
 12457  002CCE  3881               	swapf	3969,w,c	;volatile
 12458  002CD0  0B0F               	andlw	15
 12459  002CD2  0A0F               	xorlw	15
 12460  002CD4  B4D8               	btfsc	status,2,c
 12461  002CD6  0012               	return	
 12462                           
 12463                           ;Test.c: 190: else{
 12464                           ;Test.c: 191: LATAbits.LATA3 = 1;
 12465                           
 12466                           ;Test.c: 189: }
 12467                           
 12468                           ;Test.c: 188: break;
 12469  002CD8  8689               	bsf	3977,3,c	;volatile
 12470                           
 12471                           ;Test.c: 192: while(PORTBbits.RB1 == 1){
 12472  002CDA  D01B               	goto	l8301
 12473  002CDC                     l8297:
 12474                           
 12475                           ;Test.c: 194: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12476  002CDC  0E80               	movlw	128
 12477  002CDE  ECBB  F02D         	call	_lcdInst
 12478  002CE2  0EC0               	movlw	192
 12479  002CE4  ECBB  F02D         	call	_lcdInst
 12480                           
 12481                           ;Test.c: 195: printf("COND: %d", PORTAbits.RA2);
 12482  002CE8  0EA5               	movlw	low STR_86
 12483  002CEA  0100               	movlb	0	; () banked
 12484  002CEC  6F8E               	movwf	printf@f& (0+255),b
 12485  002CEE  0EFF               	movlw	high STR_86
 12486  002CF0  0100               	movlb	0	; () banked
 12487  002CF2  6F8F               	movwf	(printf@f+1)& (0+255),b
 12488  002CF4  A480               	btfss	3968,2,c	;volatile
 12489  002CF6  D004               	goto	u7120
 12490  002CF8  0100               	movlb	0	; () banked
 12491  002CFA  6BAB               	clrf	??_sensorTest& (0+255),b
 12492  002CFC  2BAB               	incf	??_sensorTest& (0+255),f,b
 12493  002CFE  D002               	goto	u7128
 12494  002D00                     u7120:
 12495  002D00  0100               	movlb	0	; () banked
 12496  002D02  6BAB               	clrf	??_sensorTest& (0+255),b
 12497  002D04                     u7128:
 12498  002D04  0100               	movlb	0	; () banked
 12499  002D06  51AB               	movf	??_sensorTest& (0+255),w,b
 12500  002D08  0100               	movlb	0	; () banked
 12501  002D0A  6F90               	movwf	(?_printf+2)& (0+255),b
 12502  002D0C  6B91               	clrf	(?_printf+3)& (0+255),b
 12503  002D0E  ECC1  F00B         	call	_printf	;wreg free
 12504  002D12                     l8301:
 12505  002D12  B281               	btfsc	3969,1,c	;volatile
 12506  002D14  D7E3               	goto	l8297
 12507                           
 12508                           ;Test.c: 196: }
 12509                           ;Test.c: 197: LATAbits.LATA3 = !1;
 12510  002D16  9689               	bcf	3977,3,c	;volatile
 12511  002D18  D7A5               	goto	l8277
 12512  002D1A                     __end_of_sensorTest:
 12513                           	opt stack 0
 12514                           tblptru	equ	0xFF8
 12515                           tblptrh	equ	0xFF7
 12516                           tblptrl	equ	0xFF6
 12517                           tablat	equ	0xFF5
 12518                           prodh	equ	0xFF4
 12519                           prodl	equ	0xFF3
 12520                           intcon	equ	0xFF2
 12521                           intcon2	equ	0xFF1
 12522                           intcon3	equ	0xFF0
 12523                           postinc0	equ	0xFEE
 12524                           wreg	equ	0xFE8
 12525                           postdec1	equ	0xFE5
 12526                           fsr1l	equ	0xFE1
 12527                           indf2	equ	0xFDF
 12528                           postinc2	equ	0xFDE
 12529                           postdec2	equ	0xFDD
 12530                           fsr2h	equ	0xFDA
 12531                           fsr2l	equ	0xFD9
 12532                           status	equ	0xFD8
 12533                           
 12534 ;; *************** function _readMAG *****************
 12535 ;; Defined at:
 12536 ;;		line 29 in file "ADCFunctionality.c"
 12537 ;; Parameters:    Size  Location     Type
 12538 ;;		None
 12539 ;; Auto vars:     Size  Location     Type
 12540 ;;  res             2    4[BANK0 ] int 
 12541 ;; Return value:  Size  Location     Type
 12542 ;;                  1    wreg      void 
 12543 ;; Registers used:
 12544 ;;		wreg, status,2, status,0, cstack
 12545 ;; Tracked objects:
 12546 ;;		On entry : 0/0
 12547 ;;		On exit  : 0/0
 12548 ;;		Unchanged: 0/0
 12549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12551 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12552 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12553 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12554 ;;Total ram usage:        4 bytes
 12555 ;; Hardware stack levels used:    1
 12556 ;; Hardware stack levels required when called:    8
 12557 ;; This function calls:
 12558 ;;		_readADC
 12559 ;; This function is called by:
 12560 ;;		_getMAG
 12561 ;;		_sensorTest
 12562 ;; This function uses a non-reentrant model
 12563 ;;
 12564                           
 12565                           	psect	text42
 12566  005452                     __ptext42:
 12567                           	opt stack 0
 12568  005452                     _readMAG:
 12569                           	opt stack 19
 12570                           
 12571                           ;ADCFunctionality.c: 30: readADC(1);
 12572                           
 12573                           ;incstack = 0
 12574  005452  0E01               	movlw	1
 12575  005454  ECA6  F02C         	call	_readADC
 12576                           
 12577                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 12578  005458  50C3               	movf	4035,w,c	;volatile
 12579  00545A  CFC4 F082          	movff	4036,??_readMAG	;volatile
 12580  00545E  0100               	movlb	0	; () banked
 12581  005460  6B83               	clrf	(??_readMAG+1)& (0+255),b
 12582  005462  C082  F083         	movff	??_readMAG,??_readMAG+1
 12583  005466  0100               	movlb	0	; () banked
 12584  005468  6B82               	clrf	??_readMAG& (0+255),b
 12585  00546A  0100               	movlb	0	; () banked
 12586  00546C  1182               	iorwf	??_readMAG& (0+255),w,b
 12587  00546E  0100               	movlb	0	; () banked
 12588  005470  6F84               	movwf	readMAG@res& (0+255),b
 12589  005472  0100               	movlb	0	; () banked
 12590  005474  5183               	movf	(??_readMAG+1)& (0+255),w,b
 12591  005476  0100               	movlb	0	; () banked
 12592  005478  6F85               	movwf	(readMAG@res+1)& (0+255),b
 12593                           
 12594                           ; BSR set to: 0
 12595                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 12596  00547A  0100               	movlb	0	; () banked
 12597  00547C  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 12598  00547E  D008               	goto	u5131
 12599  005480  0100               	movlb	0	; () banked
 12600  005482  5185               	movf	(readMAG@res+1)& (0+255),w,b
 12601  005484  E107               	bnz	u5130
 12602  005486  0E96               	movlw	150
 12603  005488  0100               	movlb	0	; () banked
 12604  00548A  5D84               	subwf	readMAG@res& (0+255),w,b
 12605  00548C  B0D8               	btfsc	status,0,c
 12606  00548E  D002               	goto	u5130
 12607  005490                     u5131:
 12608  005490  0E01               	movlw	1
 12609  005492  D001               	goto	u5140
 12610  005494                     u5130:
 12611  005494  0E00               	movlw	0
 12612  005496                     u5140:
 12613  005496  0100               	movlb	0	; () banked
 12614  005498  6FEA               	movwf	_MAG_signal& (0+255),b
 12615  00549A  6BEB               	clrf	(_MAG_signal+1)& (0+255),b
 12616                           
 12617                           ; BSR set to: 0
 12618  00549C  0012               	return		;funcret
 12619  00549E                     __end_of_readMAG:
 12620                           	opt stack 0
 12621                           tblptru	equ	0xFF8
 12622                           tblptrh	equ	0xFF7
 12623                           tblptrl	equ	0xFF6
 12624                           tablat	equ	0xFF5
 12625                           prodh	equ	0xFF4
 12626                           prodl	equ	0xFF3
 12627                           intcon	equ	0xFF2
 12628                           intcon2	equ	0xFF1
 12629                           intcon3	equ	0xFF0
 12630                           postinc0	equ	0xFEE
 12631                           wreg	equ	0xFE8
 12632                           postdec1	equ	0xFE5
 12633                           fsr1l	equ	0xFE1
 12634                           indf2	equ	0xFDF
 12635                           postinc2	equ	0xFDE
 12636                           postdec2	equ	0xFDD
 12637                           fsr2h	equ	0xFDA
 12638                           fsr2l	equ	0xFD9
 12639                           status	equ	0xFD8
 12640                           
 12641 ;; *************** function _arm *****************
 12642 ;; Defined at:
 12643 ;;		line 639 in file "Test.c"
 12644 ;; Parameters:    Size  Location     Type
 12645 ;;		None
 12646 ;; Auto vars:     Size  Location     Type
 12647 ;;  on              2   44[BANK0 ] int 
 12648 ;; Return value:  Size  Location     Type
 12649 ;;                  1    wreg      void 
 12650 ;; Registers used:
 12651 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12652 ;; Tracked objects:
 12653 ;;		On entry : 0/0
 12654 ;;		On exit  : 0/0
 12655 ;;		Unchanged: 0/0
 12656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12658 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12659 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12660 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12661 ;;Total ram usage:        3 bytes
 12662 ;; Hardware stack levels used:    1
 12663 ;; Hardware stack levels required when called:   10
 12664 ;; This function calls:
 12665 ;;		_lcdInst
 12666 ;;		_printf
 12667 ;;		_stopSignals
 12668 ;; This function is called by:
 12669 ;;		_Test
 12670 ;; This function uses a non-reentrant model
 12671 ;;
 12672                           
 12673                           	psect	text43
 12674  00435E                     __ptext43:
 12675                           	opt stack 0
 12676  00435E                     _arm:
 12677                           	opt stack 19
 12678                           
 12679                           ;Test.c: 640: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12680                           
 12681                           ; BSR set to: 0
 12682                           ;incstack = 0
 12683  00435E  0E01               	movlw	1
 12684  004360  ECBB  F02D         	call	_lcdInst
 12685  004364  0E68               	movlw	104
 12686  004366  0100               	movlb	0	; () banked
 12687  004368  6FAB               	movwf	??_arm& (0+255),b
 12688  00436A  0EE4               	movlw	228
 12689  00436C                     u10487:
 12690  00436C  2EE8               	decfsz	wreg,f,c
 12691  00436E  D7FE               	bra	u10487
 12692  004370  2FAB               	decfsz	??_arm& (0+255),f,b
 12693  004372  D7FC               	bra	u10487
 12694  004374  F000               	nop	
 12695  004376  0E80               	movlw	128
 12696  004378  ECBB  F02D         	call	_lcdInst
 12697                           
 12698                           ;Test.c: 641: printf("D WILL RETURN   ");
 12699  00437C  0EDA               	movlw	low STR_118
 12700  00437E  0100               	movlb	0	; () banked
 12701  004380  6F8E               	movwf	printf@f& (0+255),b
 12702  004382  0EFB               	movlw	high STR_118
 12703  004384  0100               	movlb	0	; () banked
 12704  004386  6F8F               	movwf	(printf@f+1)& (0+255),b
 12705  004388  ECC1  F00B         	call	_printf	;wreg free
 12706                           
 12707                           ;Test.c: 642: lcdInst(0b11000000);;
 12708  00438C  0EC0               	movlw	192
 12709  00438E  ECBB  F02D         	call	_lcdInst
 12710                           
 12711                           ;Test.c: 643: printf("ELSE TOGGLES ARM");
 12712  004392  0E95               	movlw	low STR_127
 12713  004394  0100               	movlb	0	; () banked
 12714  004396  6F8E               	movwf	printf@f& (0+255),b
 12715  004398  0EFC               	movlw	high STR_127
 12716  00439A  0100               	movlb	0	; () banked
 12717  00439C  6F8F               	movwf	(printf@f+1)& (0+255),b
 12718  00439E  ECC1  F00B         	call	_printf	;wreg free
 12719                           
 12720                           ;Test.c: 645: (INTCONbits.GIE = 1);
 12721  0043A2  8EF2               	bsf	intcon,7,c	;volatile
 12722                           
 12723                           ;Test.c: 646: machine_state = Sorting_state;
 12724  0043A4  0E01               	movlw	1
 12725  0043A6  0100               	movlb	0	; () banked
 12726  0043A8  6FFC               	movwf	_machine_state& (0+255),b
 12727                           
 12728                           ; BSR set to: 0
 12729                           ;Test.c: 647: f_arm_position = 2;
 12730  0043AA  0E00               	movlw	0
 12731  0043AC  0100               	movlb	0	; () banked
 12732  0043AE  6FF1               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 12733  0043B0  0E02               	movlw	2
 12734  0043B2  6FF0               	movwf	_f_arm_position& (0+255),b	;volatile
 12735                           
 12736                           ; BSR set to: 0
 12737                           ;Test.c: 648: timer2_counter = 0;
 12738  0043B4  0E00               	movlw	0
 12739  0043B6  6E74               	movwf	_timer2_counter+1,c	;volatile
 12740  0043B8  0E00               	movlw	0
 12741  0043BA  6E73               	movwf	_timer2_counter,c	;volatile
 12742                           
 12743                           ; BSR set to: 0
 12744                           ;Test.c: 649: LATBbits.LATB3 = 1;
 12745  0043BC  868A               	bsf	3978,3,c	;volatile
 12746                           
 12747                           ; BSR set to: 0
 12748                           ;Test.c: 650: TMR2ON = 1;
 12749  0043BE  84CA               	bsf	4042,2,c	;volatile
 12750                           
 12751                           ; BSR set to: 0
 12752                           ;Test.c: 651: was_low_2 = 0;
 12753  0043C0  0E00               	movlw	0
 12754  0043C2  6E7A               	movwf	_was_low_2+1,c	;volatile
 12755  0043C4  0E00               	movlw	0
 12756  0043C6  6E79               	movwf	_was_low_2,c	;volatile
 12757                           
 12758                           ; BSR set to: 0
 12759                           ;Test.c: 653: int on = 0;
 12760  0043C8  0E00               	movlw	0
 12761  0043CA  0100               	movlb	0	; () banked
 12762  0043CC  6FAD               	movwf	(arm@on+1)& (0+255),b
 12763  0043CE  0E00               	movlw	0
 12764  0043D0  6FAC               	movwf	arm@on& (0+255),b
 12765  0043D2                     l8755:
 12766                           
 12767                           ;Test.c: 655: if(on){
 12768  0043D2  0100               	movlb	0	; () banked
 12769  0043D4  51AC               	movf	arm@on& (0+255),w,b
 12770  0043D6  0100               	movlb	0	; () banked
 12771  0043D8  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 12772  0043DA  B4D8               	btfsc	status,2,c
 12773  0043DC  D01C               	goto	l8767
 12774                           
 12775                           ; BSR set to: 0
 12776                           ;Test.c: 656: on = !on;
 12777  0043DE  0100               	movlb	0	; () banked
 12778  0043E0  51AC               	movf	arm@on& (0+255),w,b
 12779  0043E2  0100               	movlb	0	; () banked
 12780  0043E4  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 12781  0043E6  A4D8               	btfss	status,2,c
 12782  0043E8  D002               	goto	u7710
 12783  0043EA  0E01               	movlw	1
 12784  0043EC  D001               	goto	u7720
 12785  0043EE                     u7710:
 12786  0043EE  0E00               	movlw	0
 12787  0043F0                     u7720:
 12788  0043F0  0100               	movlb	0	; () banked
 12789  0043F2  6FAC               	movwf	arm@on& (0+255),b
 12790  0043F4  6BAD               	clrf	(arm@on+1)& (0+255),b
 12791                           
 12792                           ;Test.c: 657: while(PORTBbits.RB1 == 0){
 12793  0043F6  D005               	goto	l8761
 12794  0043F8                     l8759:
 12795                           
 12796                           ; BSR set to: 0
 12797                           ;Test.c: 658: f_arm_position = 0;
 12798  0043F8  0E00               	movlw	0
 12799  0043FA  0100               	movlb	0	; () banked
 12800  0043FC  6FF1               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 12801  0043FE  0E00               	movlw	0
 12802  004400  6FF0               	movwf	_f_arm_position& (0+255),b	;volatile
 12803  004402                     l8761:
 12804                           
 12805                           ; BSR set to: 0
 12806  004402  A281               	btfss	3969,1,c	;volatile
 12807  004404  D7F9               	goto	l8759
 12808                           
 12809                           ; BSR set to: 0
 12810                           ;Test.c: 659: }
 12811                           ;Test.c: 660: if(PORTB >> 4 == 0b1111){
 12812                           
 12813                           ; BSR set to: 0
 12814  004406  3881               	swapf	3969,w,c	;volatile
 12815  004408  0B0F               	andlw	15
 12816  00440A  0A0F               	xorlw	15
 12817  00440C  B4D8               	btfsc	status,2,c
 12818  00440E  D01F               	goto	l1460
 12819  004410                     l1461:
 12820  004410  A281               	btfss	3969,1,c	;volatile
 12821  004412  D7DF               	goto	l8755
 12822  004414  D7FD               	goto	l1461
 12823  004416                     l8767:
 12824                           
 12825                           ;Test.c: 665: else{
 12826                           ;Test.c: 666: on = !on;
 12827  004416  0100               	movlb	0	; () banked
 12828  004418  51AC               	movf	arm@on& (0+255),w,b
 12829  00441A  0100               	movlb	0	; () banked
 12830  00441C  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 12831  00441E  A4D8               	btfss	status,2,c
 12832  004420  D002               	goto	u7760
 12833  004422  0E01               	movlw	1
 12834  004424  D001               	goto	u7770
 12835  004426                     u7760:
 12836  004426  0E00               	movlw	0
 12837  004428                     u7770:
 12838  004428  0100               	movlb	0	; () banked
 12839  00442A  6FAC               	movwf	arm@on& (0+255),b
 12840  00442C  6BAD               	clrf	(arm@on+1)& (0+255),b
 12841                           
 12842                           ;Test.c: 667: while(PORTBbits.RB1 == 0){
 12843  00442E  D005               	goto	l8771
 12844  004430                     l8769:
 12845                           
 12846                           ; BSR set to: 0
 12847                           ;Test.c: 668: f_arm_position = 1;
 12848  004430  0E00               	movlw	0
 12849  004432  0100               	movlb	0	; () banked
 12850  004434  6FF1               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 12851  004436  0E01               	movlw	1
 12852  004438  6FF0               	movwf	_f_arm_position& (0+255),b	;volatile
 12853  00443A                     l8771:
 12854                           
 12855                           ; BSR set to: 0
 12856  00443A  A281               	btfss	3969,1,c	;volatile
 12857  00443C  D7F9               	goto	l8769
 12858                           
 12859                           ; BSR set to: 0
 12860                           ;Test.c: 669: }
 12861                           ;Test.c: 670: if(PORTB >> 4 == 0b1111){
 12862                           
 12863                           ; BSR set to: 0
 12864  00443E  3881               	swapf	3969,w,c	;volatile
 12865  004440  0B0F               	andlw	15
 12866  004442  0A0F               	xorlw	15
 12867  004444  B4D8               	btfsc	status,2,c
 12868  004446  D003               	goto	l1460
 12869  004448                     l1469:
 12870  004448  A281               	btfss	3969,1,c	;volatile
 12871  00444A  D7C3               	goto	l8755
 12872  00444C  D7FD               	goto	l1469
 12873  00444E                     l1460:
 12874                           
 12875                           ; BSR set to: 0
 12876                           ;Test.c: 674: }
 12877                           ;Test.c: 675: }
 12878                           ;Test.c: 677: (INTCONbits.GIE = 0);
 12879  00444E  9EF2               	bcf	intcon,7,c	;volatile
 12880                           
 12881                           ; BSR set to: 0
 12882                           ;Test.c: 678: stopSignals();
 12883  004450  EC62  F02D         	call	_stopSignals	;wreg free
 12884                           
 12885                           ;Test.c: 679: machine_state = Testing_state;
 12886  004454  0E03               	movlw	3
 12887  004456  0100               	movlb	0	; () banked
 12888  004458  6FFC               	movwf	_machine_state& (0+255),b
 12889                           
 12890                           ; BSR set to: 0
 12891  00445A  0012               	return		;funcret
 12892  00445C                     __end_of_arm:
 12893                           	opt stack 0
 12894                           tblptru	equ	0xFF8
 12895                           tblptrh	equ	0xFF7
 12896                           tblptrl	equ	0xFF6
 12897                           tablat	equ	0xFF5
 12898                           prodh	equ	0xFF4
 12899                           prodl	equ	0xFF3
 12900                           intcon	equ	0xFF2
 12901                           intcon2	equ	0xFF1
 12902                           intcon3	equ	0xFF0
 12903                           postinc0	equ	0xFEE
 12904                           wreg	equ	0xFE8
 12905                           postdec1	equ	0xFE5
 12906                           fsr1l	equ	0xFE1
 12907                           indf2	equ	0xFDF
 12908                           postinc2	equ	0xFDE
 12909                           postdec2	equ	0xFDD
 12910                           fsr2h	equ	0xFDA
 12911                           fsr2l	equ	0xFD9
 12912                           status	equ	0xFD8
 12913                           
 12914 ;; *************** function _algorithmTest *****************
 12915 ;; Defined at:
 12916 ;;		line 79 in file "Test.c"
 12917 ;; Parameters:    Size  Location     Type
 12918 ;;		None
 12919 ;; Auto vars:     Size  Location     Type
 12920 ;;		None
 12921 ;; Return value:  Size  Location     Type
 12922 ;;                  1    wreg      void 
 12923 ;; Registers used:
 12924 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12925 ;; Tracked objects:
 12926 ;;		On entry : 0/0
 12927 ;;		On exit  : 0/0
 12928 ;;		Unchanged: 0/0
 12929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12932 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12933 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12934 ;;Total ram usage:        2 bytes
 12935 ;; Hardware stack levels used:    1
 12936 ;; Hardware stack levels required when called:   10
 12937 ;; This function calls:
 12938 ;;		_lcdInst
 12939 ;;		_printf
 12940 ;; This function is called by:
 12941 ;;		_Test
 12942 ;; This function uses a non-reentrant model
 12943 ;;
 12944                           
 12945                           	psect	text44
 12946  004626                     __ptext44:
 12947                           	opt stack 0
 12948  004626                     _algorithmTest:
 12949                           	opt stack 19
 12950                           
 12951                           ;Test.c: 81: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 12952                           
 12953                           ; BSR set to: 0
 12954                           ;incstack = 0
 12955  004626  0E01               	movlw	1
 12956  004628  ECBB  F02D         	call	_lcdInst
 12957  00462C  0E68               	movlw	104
 12958  00462E  0100               	movlb	0	; () banked
 12959  004630  6FAB               	movwf	??_algorithmTest& (0+255),b
 12960  004632  0EE4               	movlw	228
 12961  004634                     u10497:
 12962  004634  2EE8               	decfsz	wreg,f,c
 12963  004636  D7FE               	bra	u10497
 12964  004638  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 12965  00463A  D7FC               	bra	u10497
 12966  00463C  F000               	nop	
 12967  00463E  0E80               	movlw	128
 12968  004640  ECBB  F02D         	call	_lcdInst
 12969                           
 12970                           ;Test.c: 82: printf("ALGORITHM TEST");
 12971  004644  0EF5               	movlw	low STR_70
 12972  004646  0100               	movlb	0	; () banked
 12973  004648  6F8E               	movwf	printf@f& (0+255),b
 12974  00464A  0EFE               	movlw	high STR_70
 12975  00464C  0100               	movlb	0	; () banked
 12976  00464E  6F8F               	movwf	(printf@f+1)& (0+255),b
 12977  004650  ECC1  F00B         	call	_printf	;wreg free
 12978                           
 12979                           ;Test.c: 83: lcdInst(0b11000000);;
 12980  004654  0EC0               	movlw	192
 12981  004656  ECBB  F02D         	call	_lcdInst
 12982                           
 12983                           ;Test.c: 84: printf("PUSH TO START");
 12984  00465A  0E2E               	movlw	low STR_71
 12985  00465C  0100               	movlb	0	; () banked
 12986  00465E  6F8E               	movwf	printf@f& (0+255),b
 12987  004660  0EFF               	movlw	high STR_71
 12988  004662  0100               	movlb	0	; () banked
 12989  004664  6F8F               	movwf	(printf@f+1)& (0+255),b
 12990  004666  ECC1  F00B         	call	_printf	;wreg free
 12991                           
 12992                           ;Test.c: 85: _delay((unsigned long)((100)*(32000000/4000.0)));
 12993  00466A  0E05               	movlw	5
 12994  00466C  0100               	movlb	0	; () banked
 12995  00466E  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 12996  004670  0E0F               	movlw	15
 12997  004672  0100               	movlb	0	; () banked
 12998  004674  6FAB               	movwf	??_algorithmTest& (0+255),b
 12999  004676  0EF1               	movlw	241
 13000  004678                     u10507:
 13001  004678  2EE8               	decfsz	wreg,f,c
 13002  00467A  D7FE               	bra	u10507
 13003  00467C  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 13004  00467E  D7FC               	bra	u10507
 13005  004680  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 13006  004682  D7FA               	bra	u10507
 13007  004684                     l1256:
 13008  004684  A281               	btfss	3969,1,c	;volatile
 13009  004686  D7FE               	goto	l1256
 13010  004688                     l1259:
 13011  004688  B281               	btfsc	3969,1,c	;volatile
 13012  00468A  D7FE               	goto	l1259
 13013                           
 13014                           ;Test.c: 88: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 13015  00468C  0E01               	movlw	1
 13016  00468E  ECBB  F02D         	call	_lcdInst
 13017  004692  0E68               	movlw	104
 13018  004694  0100               	movlb	0	; () banked
 13019  004696  6FAB               	movwf	??_algorithmTest& (0+255),b
 13020  004698  0EE4               	movlw	228
 13021  00469A                     u10517:
 13022  00469A  2EE8               	decfsz	wreg,f,c
 13023  00469C  D7FE               	bra	u10517
 13024  00469E  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 13025  0046A0  D7FC               	bra	u10517
 13026  0046A2  F000               	nop	
 13027  0046A4  0E80               	movlw	128
 13028  0046A6  ECBB  F02D         	call	_lcdInst
 13029                           
 13030                           ;Test.c: 93: printf("ALG1: 9 POPNOTAB");
 13031  0046AA  0E40               	movlw	low STR_72
 13032  0046AC  0100               	movlb	0	; () banked
 13033  0046AE  6F8E               	movwf	printf@f& (0+255),b
 13034  0046B0  0EFC               	movlw	high STR_72
 13035  0046B2  0100               	movlb	0	; () banked
 13036  0046B4  6F8F               	movwf	(printf@f+1)& (0+255),b
 13037  0046B6  ECC1  F00B         	call	_printf	;wreg free
 13038                           
 13039                           ;Test.c: 100: printf("ALG2: 12 CANS");
 13040  0046BA  0E12               	movlw	low STR_73
 13041  0046BC  0100               	movlb	0	; () banked
 13042  0046BE  6F8E               	movwf	printf@f& (0+255),b
 13043  0046C0  0EFF               	movlw	high STR_73
 13044  0046C2  0100               	movlb	0	; () banked
 13045  0046C4  6F8F               	movwf	(printf@f+1)& (0+255),b
 13046  0046C6  ECC1  F00B         	call	_printf	;wreg free
 13047                           
 13048                           ;Test.c: 109: printf("ALG3: 1 CAN");
 13049  0046CA  0E65               	movlw	low STR_74
 13050  0046CC  0100               	movlb	0	; () banked
 13051  0046CE  6F8E               	movwf	printf@f& (0+255),b
 13052  0046D0  0EFF               	movlw	high STR_74
 13053  0046D2  0100               	movlb	0	; () banked
 13054  0046D4  6F8F               	movwf	(printf@f+1)& (0+255),b
 13055  0046D6  ECC1  F00B         	call	_printf	;wreg free
 13056                           
 13057                           ;Test.c: 115: printf("ALG4: ALL CANS");
 13058  0046DA  0ED7               	movlw	low STR_75
 13059  0046DC  0100               	movlb	0	; () banked
 13060  0046DE  6F8E               	movwf	printf@f& (0+255),b
 13061  0046E0  0EFE               	movlw	high STR_75
 13062  0046E2  0100               	movlb	0	; () banked
 13063  0046E4  6F8F               	movwf	(printf@f+1)& (0+255),b
 13064  0046E6  ECC1  F00B         	call	_printf	;wreg free
 13065                           
 13066                           ;Test.c: 120: printf("ALG5: NO CANS");
 13067  0046EA  0E20               	movlw	low STR_76
 13068  0046EC  0100               	movlb	0	; () banked
 13069  0046EE  6F8E               	movwf	printf@f& (0+255),b
 13070  0046F0  0EFF               	movlw	high STR_76
 13071  0046F2  0100               	movlb	0	; () banked
 13072  0046F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 13073  0046F6  ECC1  F00B         	call	_printf	;wreg free
 13074  0046FA  0012               	return		;funcret
 13075  0046FC                     __end_of_algorithmTest:
 13076                           	opt stack 0
 13077                           tblptru	equ	0xFF8
 13078                           tblptrh	equ	0xFF7
 13079                           tblptrl	equ	0xFF6
 13080                           tablat	equ	0xFF5
 13081                           prodh	equ	0xFF4
 13082                           prodl	equ	0xFF3
 13083                           intcon	equ	0xFF2
 13084                           intcon2	equ	0xFF1
 13085                           intcon3	equ	0xFF0
 13086                           postinc0	equ	0xFEE
 13087                           wreg	equ	0xFE8
 13088                           postdec1	equ	0xFE5
 13089                           fsr1l	equ	0xFE1
 13090                           indf2	equ	0xFDF
 13091                           postinc2	equ	0xFDE
 13092                           postdec2	equ	0xFDD
 13093                           fsr2h	equ	0xFDA
 13094                           fsr2l	equ	0xFD9
 13095                           status	equ	0xFD8
 13096                           
 13097 ;; *************** function _actuatorTest *****************
 13098 ;; Defined at:
 13099 ;;		line 202 in file "Test.c"
 13100 ;; Parameters:    Size  Location     Type
 13101 ;;		None
 13102 ;; Auto vars:     Size  Location     Type
 13103 ;;  i               1   45[BANK0 ] unsigned char 
 13104 ;;  i               1   67[BANK0 ] unsigned char 
 13105 ;;  i               1   66[BANK0 ] unsigned char 
 13106 ;;  i               1   65[BANK0 ] unsigned char 
 13107 ;;  i               1   64[BANK0 ] unsigned char 
 13108 ;;  i               1   63[BANK0 ] unsigned char 
 13109 ;;  i               1   62[BANK0 ] unsigned char 
 13110 ;;  i               1   61[BANK0 ] unsigned char 
 13111 ;;  i               1   60[BANK0 ] unsigned char 
 13112 ;;  i               1   59[BANK0 ] unsigned char 
 13113 ;;  i               1   58[BANK0 ] unsigned char 
 13114 ;;  i               1   57[BANK0 ] unsigned char 
 13115 ;;  i               1   56[BANK0 ] unsigned char 
 13116 ;;  i               1   55[BANK0 ] unsigned char 
 13117 ;;  i               1   54[BANK0 ] unsigned char 
 13118 ;;  i               1   53[BANK0 ] unsigned char 
 13119 ;;  i               1   52[BANK0 ] unsigned char 
 13120 ;;  i               1   51[BANK0 ] unsigned char 
 13121 ;;  i               1   50[BANK0 ] unsigned char 
 13122 ;;  i               1   49[BANK0 ] unsigned char 
 13123 ;;  i               1   48[BANK0 ] unsigned char 
 13124 ;;  i               1   47[BANK0 ] unsigned char 
 13125 ;;  i               1   46[BANK0 ] unsigned char 
 13126 ;;  i               2   68[BANK0 ] int 
 13127 ;; Return value:  Size  Location     Type
 13128 ;;                  1    wreg      void 
 13129 ;; Registers used:
 13130 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13131 ;; Tracked objects:
 13132 ;;		On entry : 0/0
 13133 ;;		On exit  : 0/0
 13134 ;;		Unchanged: 0/0
 13135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13137 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13138 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13139 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13140 ;;Total ram usage:       27 bytes
 13141 ;; Hardware stack levels used:    1
 13142 ;; Hardware stack levels required when called:   10
 13143 ;; This function calls:
 13144 ;;		_lcdInst
 13145 ;;		_printf
 13146 ;;		_updateServoPosition
 13147 ;; This function is called by:
 13148 ;;		_Test
 13149 ;; This function uses a non-reentrant model
 13150 ;;
 13151                           
 13152                           	psect	text45
 13153  0008D6                     __ptext45:
 13154                           	opt stack 0
 13155  0008D6                     _actuatorTest:
 13156                           	opt stack 19
 13157                           
 13158                           ;Test.c: 204: int i = 0;
 13159                           
 13160                           ;incstack = 0
 13161  0008D6  0E00               	movlw	0
 13162  0008D8  0100               	movlb	0	; () banked
 13163  0008DA  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13164  0008DC  0E00               	movlw	0
 13165  0008DE  6FC4               	movwf	actuatorTest@i& (0+255),b
 13166                           
 13167                           ; BSR set to: 0
 13168                           ;Test.c: 206: (INTCONbits.GIE = 1);
 13169  0008E0  8EF2               	bsf	intcon,7,c	;volatile
 13170                           
 13171                           ; BSR set to: 0
 13172                           ;Test.c: 207: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13173  0008E2  0E01               	movlw	1
 13174  0008E4  ECBB  F02D         	call	_lcdInst
 13175  0008E8  0E68               	movlw	104
 13176  0008EA  0100               	movlb	0	; () banked
 13177  0008EC  6FAB               	movwf	??_actuatorTest& (0+255),b
 13178  0008EE  0EE4               	movlw	228
 13179  0008F0                     u10527:
 13180  0008F0  2EE8               	decfsz	wreg,f,c
 13181  0008F2  D7FE               	bra	u10527
 13182  0008F4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13183  0008F6  D7FC               	bra	u10527
 13184  0008F8  F000               	nop	
 13185  0008FA  0E80               	movlw	128
 13186  0008FC  ECBB  F02D         	call	_lcdInst
 13187                           
 13188                           ;Test.c: 208: printf("ACTUATORS");
 13189  000900  0E91               	movlw	low STR_88
 13190  000902  0100               	movlb	0	; () banked
 13191  000904  6F8E               	movwf	printf@f& (0+255),b
 13192  000906  0EFF               	movlw	high STR_88
 13193  000908  0100               	movlb	0	; () banked
 13194  00090A  6F8F               	movwf	(printf@f+1)& (0+255),b
 13195  00090C  ECC1  F00B         	call	_printf	;wreg free
 13196                           
 13197                           ;Test.c: 209: lcdInst(0b11000000);;
 13198  000910  0EC0               	movlw	192
 13199  000912  ECBB  F02D         	call	_lcdInst
 13200                           
 13201                           ;Test.c: 210: printf("PUSH TO START");
 13202  000916  0E2E               	movlw	low STR_71
 13203  000918  0100               	movlb	0	; () banked
 13204  00091A  6F8E               	movwf	printf@f& (0+255),b
 13205  00091C  0EFF               	movlw	high STR_71
 13206  00091E  0100               	movlb	0	; () banked
 13207  000920  6F8F               	movwf	(printf@f+1)& (0+255),b
 13208  000922  ECC1  F00B         	call	_printf	;wreg free
 13209                           
 13210                           ;Test.c: 211: _delay((unsigned long)((100)*(32000000/4000.0)));
 13211  000926  0E05               	movlw	5
 13212  000928  0100               	movlb	0	; () banked
 13213  00092A  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13214  00092C  0E0F               	movlw	15
 13215  00092E  0100               	movlb	0	; () banked
 13216  000930  6FAB               	movwf	??_actuatorTest& (0+255),b
 13217  000932  0EF1               	movlw	241
 13218  000934                     u10537:
 13219  000934  2EE8               	decfsz	wreg,f,c
 13220  000936  D7FE               	bra	u10537
 13221  000938  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13222  00093A  D7FC               	bra	u10537
 13223  00093C  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13224  00093E  D7FA               	bra	u10537
 13225  000940                     l1291:
 13226  000940  A281               	btfss	3969,1,c	;volatile
 13227  000942  D7FE               	goto	l1291
 13228  000944                     l1294:
 13229  000944  B281               	btfsc	3969,1,c	;volatile
 13230  000946  D7FE               	goto	l1294
 13231                           
 13232                           ;Test.c: 214: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13233  000948  0E01               	movlw	1
 13234  00094A  ECBB  F02D         	call	_lcdInst
 13235  00094E  0E68               	movlw	104
 13236  000950  0100               	movlb	0	; () banked
 13237  000952  6FAB               	movwf	??_actuatorTest& (0+255),b
 13238  000954  0EE4               	movlw	228
 13239  000956                     u10547:
 13240  000956  2EE8               	decfsz	wreg,f,c
 13241  000958  D7FE               	bra	u10547
 13242  00095A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13243  00095C  D7FC               	bra	u10547
 13244  00095E  F000               	nop	
 13245  000960  0E80               	movlw	128
 13246  000962  ECBB  F02D         	call	_lcdInst
 13247                           
 13248                           ;Test.c: 219: printf("TST: DC MOTORS");
 13249  000966  0EE6               	movlw	low STR_90
 13250  000968  0100               	movlb	0	; () banked
 13251  00096A  6F8E               	movwf	printf@f& (0+255),b
 13252  00096C  0EFE               	movlw	high STR_90
 13253  00096E  0100               	movlb	0	; () banked
 13254  000970  6F8F               	movwf	(printf@f+1)& (0+255),b
 13255  000972  ECC1  F00B         	call	_printf	;wreg free
 13256                           
 13257                           ;Test.c: 220: lcdInst(0b11000000);;
 13258  000976  0EC0               	movlw	192
 13259  000978  ECBB  F02D         	call	_lcdInst
 13260                           
 13261                           ;Test.c: 221: printf("PIN RA5 HIGH.");
 13262  00097C  0E04               	movlw	low STR_91
 13263  00097E  0100               	movlb	0	; () banked
 13264  000980  6F8E               	movwf	printf@f& (0+255),b
 13265  000982  0EFF               	movlw	high STR_91
 13266  000984  0100               	movlb	0	; () banked
 13267  000986  6F8F               	movwf	(printf@f+1)& (0+255),b
 13268  000988  ECC1  F00B         	call	_printf	;wreg free
 13269                           
 13270                           ;Test.c: 222: LATBbits.LATB2 = 1;
 13271  00098C  848A               	bsf	3978,2,c	;volatile
 13272                           
 13273                           ;Test.c: 223: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 13274  00098E  0E00               	movlw	0
 13275  000990  0100               	movlb	0	; () banked
 13276  000992  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13277  000994  0E00               	movlw	0
 13278  000996  6FC4               	movwf	actuatorTest@i& (0+255),b
 13279                           
 13280                           ; BSR set to: 0
 13281  000998  0100               	movlb	0	; () banked
 13282  00099A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13283  00099C  D008               	goto	l8341
 13284  00099E  0100               	movlb	0	; () banked
 13285  0009A0  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13286  0009A2  E123               	bnz	l1298
 13287  0009A4  0E05               	movlw	5
 13288  0009A6  0100               	movlb	0	; () banked
 13289  0009A8  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13290  0009AA  B0D8               	btfsc	status,0,c
 13291  0009AC  D01E               	goto	l1298
 13292  0009AE                     l8341:
 13293                           
 13294                           ; BSR set to: 0
 13295  0009AE  0E00               	movlw	0
 13296  0009B0  0100               	movlb	0	; () banked
 13297  0009B2  6FAD               	movwf	actuatorTest@i_1733& (0+255),b
 13298  0009B4                     l8343:
 13299                           
 13300                           ; BSR set to: 0
 13301  0009B4  0E63               	movlw	99
 13302  0009B6  0100               	movlb	0	; () banked
 13303  0009B8  65AD               	cpfsgt	actuatorTest@i_1733& (0+255),b
 13304  0009BA  D001               	goto	l8347
 13305  0009BC  D00C               	goto	l8351
 13306  0009BE                     l8347:
 13307                           
 13308                           ; BSR set to: 0
 13309  0009BE  0E68               	movlw	104
 13310  0009C0  0100               	movlb	0	; () banked
 13311  0009C2  6FAB               	movwf	??_actuatorTest& (0+255),b
 13312  0009C4  0EE4               	movlw	228
 13313  0009C6                     u10557:
 13314  0009C6  2EE8               	decfsz	wreg,f,c
 13315  0009C8  D7FE               	bra	u10557
 13316  0009CA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13317  0009CC  D7FC               	bra	u10557
 13318  0009CE  F000               	nop	
 13319  0009D0  0100               	movlb	0	; () banked
 13320  0009D2  2BAD               	incf	actuatorTest@i_1733& (0+255),f,b
 13321  0009D4  D7EF               	goto	l8343
 13322  0009D6                     l8351:
 13323                           
 13324                           ; BSR set to: 0
 13325  0009D6  0100               	movlb	0	; () banked
 13326  0009D8  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13327  0009DA  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13328                           
 13329                           ; BSR set to: 0
 13330  0009DC  0100               	movlb	0	; () banked
 13331  0009DE  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13332  0009E0  D7E6               	goto	l8341
 13333  0009E2  0100               	movlb	0	; () banked
 13334  0009E4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13335  0009E6  E101               	bnz	u7190
 13336  0009E8  D7DD               	goto	L12
 13337  0009EA                     u7190:
 13338  0009EA                     l1298:
 13339                           
 13340                           ; BSR set to: 0
 13341                           ;Test.c: 224: LATBbits.LATB2 = 0;
 13342  0009EA  948A               	bcf	3978,2,c	;volatile
 13343                           
 13344                           ; BSR set to: 0
 13345                           ;Test.c: 225: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13346  0009EC  0E01               	movlw	1
 13347  0009EE  ECBB  F02D         	call	_lcdInst
 13348  0009F2  0E68               	movlw	104
 13349  0009F4  0100               	movlb	0	; () banked
 13350  0009F6  6FAB               	movwf	??_actuatorTest& (0+255),b
 13351  0009F8  0EE4               	movlw	228
 13352  0009FA                     u10567:
 13353  0009FA  2EE8               	decfsz	wreg,f,c
 13354  0009FC  D7FE               	bra	u10567
 13355  0009FE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13356  000A00  D7FC               	bra	u10567
 13357  000A02  F000               	nop	
 13358  000A04  0E80               	movlw	128
 13359  000A06  ECBB  F02D         	call	_lcdInst
 13360                           
 13361                           ;Test.c: 231: printf("TST: COND SOLN'D");
 13362  000A0A  0E51               	movlw	low STR_92
 13363  000A0C  0100               	movlb	0	; () banked
 13364  000A0E  6F8E               	movwf	printf@f& (0+255),b
 13365  000A10  0EFC               	movlw	high STR_92
 13366  000A12  0100               	movlb	0	; () banked
 13367  000A14  6F8F               	movwf	(printf@f+1)& (0+255),b
 13368  000A16  ECC1  F00B         	call	_printf	;wreg free
 13369                           
 13370                           ;Test.c: 232: lcdInst(0b11000000);;
 13371  000A1A  0EC0               	movlw	192
 13372  000A1C  ECBB  F02D         	call	_lcdInst
 13373                           
 13374                           ;Test.c: 233: printf("PIN RA3...");
 13375  000A20  0E71               	movlw	low STR_93
 13376  000A22  0100               	movlb	0	; () banked
 13377  000A24  6F8E               	movwf	printf@f& (0+255),b
 13378  000A26  0EFF               	movlw	high STR_93
 13379  000A28  0100               	movlb	0	; () banked
 13380  000A2A  6F8F               	movwf	(printf@f+1)& (0+255),b
 13381  000A2C  ECC1  F00B         	call	_printf	;wreg free
 13382                           
 13383                           ;Test.c: 234: for(i=0;i<5;i++){
 13384  000A30  0E00               	movlw	0
 13385  000A32  0100               	movlb	0	; () banked
 13386  000A34  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13387  000A36  0E00               	movlw	0
 13388  000A38  6FC4               	movwf	actuatorTest@i& (0+255),b
 13389                           
 13390                           ; BSR set to: 0
 13391  000A3A  0100               	movlb	0	; () banked
 13392  000A3C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13393  000A3E  D008               	goto	l1301
 13394  000A40  0100               	movlb	0	; () banked
 13395  000A42  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13396  000A44  E12C               	bnz	l1302
 13397  000A46  0E05               	movlw	5
 13398  000A48  0100               	movlb	0	; () banked
 13399  000A4A  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13400  000A4C  B0D8               	btfsc	status,0,c
 13401  000A4E  D027               	goto	l1302
 13402  000A50                     l1301:
 13403                           
 13404                           ; BSR set to: 0
 13405                           ;Test.c: 235: LATAbits.LATA3 = 1;
 13406  000A50  8689               	bsf	3977,3,c	;volatile
 13407                           
 13408                           ; BSR set to: 0
 13409                           ;Test.c: 236: _delay((unsigned long)((300)*(32000000/4000.0)));
 13410  000A52  0E0D               	movlw	13
 13411  000A54  0100               	movlb	0	; () banked
 13412  000A56  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13413  000A58  0E2D               	movlw	45
 13414  000A5A  0100               	movlb	0	; () banked
 13415  000A5C  6FAB               	movwf	??_actuatorTest& (0+255),b
 13416  000A5E  0ED7               	movlw	215
 13417  000A60                     u10577:
 13418  000A60  2EE8               	decfsz	wreg,f,c
 13419  000A62  D7FE               	bra	u10577
 13420  000A64  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13421  000A66  D7FC               	bra	u10577
 13422  000A68  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13423  000A6A  D7FA               	bra	u10577
 13424  000A6C  D000               	nop2	
 13425                           
 13426                           ;Test.c: 237: LATAbits.LATA3 = !1;
 13427  000A6E  9689               	bcf	3977,3,c	;volatile
 13428                           
 13429                           ;Test.c: 238: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 13430  000A70  0E1D               	movlw	29
 13431  000A72  0100               	movlb	0	; () banked
 13432  000A74  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13433  000A76  0E69               	movlw	105
 13434  000A78  0100               	movlb	0	; () banked
 13435  000A7A  6FAB               	movwf	??_actuatorTest& (0+255),b
 13436  000A7C  0EA5               	movlw	165
 13437  000A7E                     u10587:
 13438  000A7E  2EE8               	decfsz	wreg,f,c
 13439  000A80  D7FE               	bra	u10587
 13440  000A82  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13441  000A84  D7FC               	bra	u10587
 13442  000A86  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13443  000A88  D7FA               	bra	u10587
 13444  000A8A  0100               	movlb	0	; () banked
 13445  000A8C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13446  000A8E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13447  000A90  0100               	movlb	0	; () banked
 13448  000A92  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13449  000A94  D7DD               	goto	l1301
 13450  000A96  0100               	movlb	0	; () banked
 13451  000A98  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13452  000A9A  E101               	bnz	u7210
 13453  000A9C  D7D4               	goto	L13
 13454  000A9E                     u7210:
 13455  000A9E                     l1302:
 13456                           
 13457                           ; BSR set to: 0
 13458                           ;Test.c: 239: }
 13459                           ;Test.c: 240: LATAbits.LATA3 = !1;
 13460  000A9E  9689               	bcf	3977,3,c	;volatile
 13461                           
 13462                           ; BSR set to: 0
 13463                           ;Test.c: 241: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13464  000AA0  0E01               	movlw	1
 13465  000AA2  ECBB  F02D         	call	_lcdInst
 13466  000AA6  0E68               	movlw	104
 13467  000AA8  0100               	movlb	0	; () banked
 13468  000AAA  6FAB               	movwf	??_actuatorTest& (0+255),b
 13469  000AAC  0EE4               	movlw	228
 13470  000AAE                     u10597:
 13471  000AAE  2EE8               	decfsz	wreg,f,c
 13472  000AB0  D7FE               	bra	u10597
 13473  000AB2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13474  000AB4  D7FC               	bra	u10597
 13475  000AB6  F000               	nop	
 13476  000AB8  0E80               	movlw	128
 13477  000ABA  ECBB  F02D         	call	_lcdInst
 13478                           
 13479                           ;Test.c: 247: printf("TST: PUSH SOLN'D");
 13480  000ABE  0E62               	movlw	low STR_94
 13481  000AC0  0100               	movlb	0	; () banked
 13482  000AC2  6F8E               	movwf	printf@f& (0+255),b
 13483  000AC4  0EFC               	movlw	high STR_94
 13484  000AC6  0100               	movlb	0	; () banked
 13485  000AC8  6F8F               	movwf	(printf@f+1)& (0+255),b
 13486  000ACA  ECC1  F00B         	call	_printf	;wreg free
 13487                           
 13488                           ;Test.c: 248: lcdInst(0b11000000);;
 13489  000ACE  0EC0               	movlw	192
 13490  000AD0  ECBB  F02D         	call	_lcdInst
 13491                           
 13492                           ;Test.c: 249: printf("PIN RA4...");
 13493  000AD4  0E7C               	movlw	low STR_95
 13494  000AD6  0100               	movlb	0	; () banked
 13495  000AD8  6F8E               	movwf	printf@f& (0+255),b
 13496  000ADA  0EFF               	movlw	high STR_95
 13497  000ADC  0100               	movlb	0	; () banked
 13498  000ADE  6F8F               	movwf	(printf@f+1)& (0+255),b
 13499  000AE0  ECC1  F00B         	call	_printf	;wreg free
 13500                           
 13501                           ;Test.c: 250: for(i=0;i<5;i++){
 13502  000AE4  0E00               	movlw	0
 13503  000AE6  0100               	movlb	0	; () banked
 13504  000AE8  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13505  000AEA  0E00               	movlw	0
 13506  000AEC  6FC4               	movwf	actuatorTest@i& (0+255),b
 13507                           
 13508                           ; BSR set to: 0
 13509  000AEE  0100               	movlb	0	; () banked
 13510  000AF0  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13511  000AF2  D008               	goto	l1303
 13512  000AF4  0100               	movlb	0	; () banked
 13513  000AF6  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13514  000AF8  E12C               	bnz	l1304
 13515  000AFA  0E05               	movlw	5
 13516  000AFC  0100               	movlb	0	; () banked
 13517  000AFE  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13518  000B00  B0D8               	btfsc	status,0,c
 13519  000B02  D027               	goto	l1304
 13520  000B04                     l1303:
 13521                           
 13522                           ; BSR set to: 0
 13523                           ;Test.c: 251: LATAbits.LATA4 = 1;
 13524  000B04  8889               	bsf	3977,4,c	;volatile
 13525                           
 13526                           ; BSR set to: 0
 13527                           ;Test.c: 252: _delay((unsigned long)((300)*(32000000/4000.0)));
 13528  000B06  0E0D               	movlw	13
 13529  000B08  0100               	movlb	0	; () banked
 13530  000B0A  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13531  000B0C  0E2D               	movlw	45
 13532  000B0E  0100               	movlb	0	; () banked
 13533  000B10  6FAB               	movwf	??_actuatorTest& (0+255),b
 13534  000B12  0ED7               	movlw	215
 13535  000B14                     u10607:
 13536  000B14  2EE8               	decfsz	wreg,f,c
 13537  000B16  D7FE               	bra	u10607
 13538  000B18  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13539  000B1A  D7FC               	bra	u10607
 13540  000B1C  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13541  000B1E  D7FA               	bra	u10607
 13542  000B20  D000               	nop2	
 13543                           
 13544                           ;Test.c: 253: LATAbits.LATA4 = !1;
 13545  000B22  9889               	bcf	3977,4,c	;volatile
 13546                           
 13547                           ;Test.c: 254: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 13548  000B24  0E1D               	movlw	29
 13549  000B26  0100               	movlb	0	; () banked
 13550  000B28  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13551  000B2A  0E69               	movlw	105
 13552  000B2C  0100               	movlb	0	; () banked
 13553  000B2E  6FAB               	movwf	??_actuatorTest& (0+255),b
 13554  000B30  0EA5               	movlw	165
 13555  000B32                     u10617:
 13556  000B32  2EE8               	decfsz	wreg,f,c
 13557  000B34  D7FE               	bra	u10617
 13558  000B36  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13559  000B38  D7FC               	bra	u10617
 13560  000B3A  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13561  000B3C  D7FA               	bra	u10617
 13562  000B3E  0100               	movlb	0	; () banked
 13563  000B40  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13564  000B42  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13565  000B44  0100               	movlb	0	; () banked
 13566  000B46  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13567  000B48  D7DD               	goto	l1303
 13568  000B4A  0100               	movlb	0	; () banked
 13569  000B4C  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13570  000B4E  E101               	bnz	u7230
 13571  000B50  D7D4               	goto	L14
 13572  000B52                     u7230:
 13573  000B52                     l1304:
 13574                           
 13575                           ; BSR set to: 0
 13576                           ;Test.c: 255: }
 13577                           ;Test.c: 256: LATAbits.LATA4 = !1;
 13578  000B52  9889               	bcf	3977,4,c	;volatile
 13579                           
 13580                           ; BSR set to: 0
 13581                           ;Test.c: 257: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13582  000B54  0E01               	movlw	1
 13583  000B56  ECBB  F02D         	call	_lcdInst
 13584  000B5A  0E68               	movlw	104
 13585  000B5C  0100               	movlb	0	; () banked
 13586  000B5E  6FAB               	movwf	??_actuatorTest& (0+255),b
 13587  000B60  0EE4               	movlw	228
 13588  000B62                     u10627:
 13589  000B62  2EE8               	decfsz	wreg,f,c
 13590  000B64  D7FE               	bra	u10627
 13591  000B66  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13592  000B68  D7FC               	bra	u10627
 13593  000B6A  F000               	nop	
 13594  000B6C  0E80               	movlw	128
 13595  000B6E  ECBB  F02D         	call	_lcdInst
 13596                           
 13597                           ;Test.c: 260: machine_state = Sorting_state;
 13598  000B72  0E01               	movlw	1
 13599  000B74  0100               	movlb	0	; () banked
 13600  000B76  6FFC               	movwf	_machine_state& (0+255),b
 13601                           
 13602                           ; BSR set to: 0
 13603                           ;Test.c: 261: was_low_1 = 0;
 13604  000B78  0E00               	movlw	0
 13605  000B7A  6E78               	movwf	_was_low_1+1,c	;volatile
 13606  000B7C  0E00               	movlw	0
 13607  000B7E  6E77               	movwf	_was_low_1,c	;volatile
 13608                           
 13609                           ; BSR set to: 0
 13610                           ;Test.c: 262: was_low_1 = 0;
 13611  000B80  0E00               	movlw	0
 13612  000B82  6E78               	movwf	_was_low_1+1,c	;volatile
 13613  000B84  0E00               	movlw	0
 13614  000B86  6E77               	movwf	_was_low_1,c	;volatile
 13615                           
 13616                           ; BSR set to: 0
 13617                           ;Test.c: 269: printf("TST: PAN SERVO");
 13618  000B88  0EC8               	movlw	low STR_96
 13619  000B8A  0100               	movlb	0	; () banked
 13620  000B8C  6F8E               	movwf	printf@f& (0+255),b
 13621  000B8E  0EFE               	movlw	high STR_96
 13622  000B90  0100               	movlb	0	; () banked
 13623  000B92  6F8F               	movwf	(printf@f+1)& (0+255),b
 13624  000B94  ECC1  F00B         	call	_printf	;wreg free
 13625                           
 13626                           ;Test.c: 270: lcdInst(0b11000000);;
 13627  000B98  0EC0               	movlw	192
 13628  000B9A  ECBB  F02D         	call	_lcdInst
 13629                           
 13630                           ;Test.c: 271: printf("MIDDLE -- 2s    ");
 13631  000B9E  0EB8               	movlw	low STR_97
 13632  000BA0  0100               	movlb	0	; () banked
 13633  000BA2  6F8E               	movwf	printf@f& (0+255),b
 13634  000BA4  0EFB               	movlw	high STR_97
 13635  000BA6  0100               	movlb	0	; () banked
 13636  000BA8  6F8F               	movwf	(printf@f+1)& (0+255),b
 13637  000BAA  ECC1  F00B         	call	_printf	;wreg free
 13638                           
 13639                           ;Test.c: 272: updateServoPosition(1200, 1);
 13640  000BAE  0E04               	movlw	4
 13641  000BB0  0100               	movlb	0	; () banked
 13642  000BB2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13643  000BB4  0EB0               	movlw	176
 13644  000BB6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13645  000BB8  0E00               	movlw	0
 13646  000BBA  0100               	movlb	0	; () banked
 13647  000BBC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13648  000BBE  0E01               	movlw	1
 13649  000BC0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13650  000BC2  EC94  F026         	call	_updateServoPosition	;wreg free
 13651                           
 13652                           ;Test.c: 273: TMR1ON = 1;
 13653  000BC6  80CD               	bsf	4045,0,c	;volatile
 13654                           
 13655                           ;Test.c: 274: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13656  000BC8  0E00               	movlw	0
 13657  000BCA  0100               	movlb	0	; () banked
 13658  000BCC  6FAE               	movwf	actuatorTest@i_1740& (0+255),b
 13659  000BCE                     l8427:
 13660                           
 13661                           ; BSR set to: 0
 13662  000BCE  0E63               	movlw	99
 13663  000BD0  0100               	movlb	0	; () banked
 13664  000BD2  65AE               	cpfsgt	actuatorTest@i_1740& (0+255),b
 13665  000BD4  D001               	goto	l8431
 13666  000BD6  D00C               	goto	l8435
 13667  000BD8                     l8431:
 13668                           
 13669                           ; BSR set to: 0
 13670  000BD8  0E68               	movlw	104
 13671  000BDA  0100               	movlb	0	; () banked
 13672  000BDC  6FAB               	movwf	??_actuatorTest& (0+255),b
 13673  000BDE  0EE4               	movlw	228
 13674  000BE0                     u10637:
 13675  000BE0  2EE8               	decfsz	wreg,f,c
 13676  000BE2  D7FE               	bra	u10637
 13677  000BE4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13678  000BE6  D7FC               	bra	u10637
 13679  000BE8  F000               	nop	
 13680  000BEA  0100               	movlb	0	; () banked
 13681  000BEC  2BAE               	incf	actuatorTest@i_1740& (0+255),f,b
 13682  000BEE  D7EF               	goto	l8427
 13683  000BF0                     l8435:
 13684                           
 13685                           ; BSR set to: 0
 13686  000BF0  0E00               	movlw	0
 13687  000BF2  0100               	movlb	0	; () banked
 13688  000BF4  6FAF               	movwf	actuatorTest@i_1741& (0+255),b
 13689  000BF6                     l8437:
 13690                           
 13691                           ; BSR set to: 0
 13692  000BF6  0E63               	movlw	99
 13693  000BF8  0100               	movlb	0	; () banked
 13694  000BFA  65AF               	cpfsgt	actuatorTest@i_1741& (0+255),b
 13695  000BFC  D001               	goto	l8441
 13696  000BFE  D00C               	goto	l8445
 13697  000C00                     l8441:
 13698                           
 13699                           ; BSR set to: 0
 13700  000C00  0E68               	movlw	104
 13701  000C02  0100               	movlb	0	; () banked
 13702  000C04  6FAB               	movwf	??_actuatorTest& (0+255),b
 13703  000C06  0EE4               	movlw	228
 13704  000C08                     u10647:
 13705  000C08  2EE8               	decfsz	wreg,f,c
 13706  000C0A  D7FE               	bra	u10647
 13707  000C0C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13708  000C0E  D7FC               	bra	u10647
 13709  000C10  F000               	nop	
 13710  000C12  0100               	movlb	0	; () banked
 13711  000C14  2BAF               	incf	actuatorTest@i_1741& (0+255),f,b
 13712  000C16  D7EF               	goto	l8437
 13713  000C18                     l8445:
 13714                           
 13715                           ; BSR set to: 0
 13716                           ;Test.c: 276: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13717  000C18  0E80               	movlw	128
 13718  000C1A  ECBB  F02D         	call	_lcdInst
 13719  000C1E  0EC0               	movlw	192
 13720  000C20  ECBB  F02D         	call	_lcdInst
 13721                           
 13722                           ;Test.c: 277: printf("RIGHT -- 2s     ");
 13723  000C24  0EA7               	movlw	low STR_98
 13724  000C26  0100               	movlb	0	; () banked
 13725  000C28  6F8E               	movwf	printf@f& (0+255),b
 13726  000C2A  0EFB               	movlw	high STR_98
 13727  000C2C  0100               	movlb	0	; () banked
 13728  000C2E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13729  000C30  ECC1  F00B         	call	_printf	;wreg free
 13730                           
 13731                           ;Test.c: 278: updateServoPosition(500, 1);
 13732  000C34  0E01               	movlw	1
 13733  000C36  0100               	movlb	0	; () banked
 13734  000C38  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13735  000C3A  0EF4               	movlw	244
 13736  000C3C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13737  000C3E  0E00               	movlw	0
 13738  000C40  0100               	movlb	0	; () banked
 13739  000C42  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13740  000C44  0E01               	movlw	1
 13741  000C46  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13742  000C48  EC94  F026         	call	_updateServoPosition	;wreg free
 13743                           
 13744                           ;Test.c: 279: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13745  000C4C  0E00               	movlw	0
 13746  000C4E  0100               	movlb	0	; () banked
 13747  000C50  6FB0               	movwf	actuatorTest@i_1743& (0+255),b
 13748  000C52                     l8453:
 13749                           
 13750                           ; BSR set to: 0
 13751  000C52  0E63               	movlw	99
 13752  000C54  0100               	movlb	0	; () banked
 13753  000C56  65B0               	cpfsgt	actuatorTest@i_1743& (0+255),b
 13754  000C58  D001               	goto	l8457
 13755  000C5A  D00C               	goto	l8461
 13756  000C5C                     l8457:
 13757                           
 13758                           ; BSR set to: 0
 13759  000C5C  0E68               	movlw	104
 13760  000C5E  0100               	movlb	0	; () banked
 13761  000C60  6FAB               	movwf	??_actuatorTest& (0+255),b
 13762  000C62  0EE4               	movlw	228
 13763  000C64                     u10657:
 13764  000C64  2EE8               	decfsz	wreg,f,c
 13765  000C66  D7FE               	bra	u10657
 13766  000C68  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13767  000C6A  D7FC               	bra	u10657
 13768  000C6C  F000               	nop	
 13769  000C6E  0100               	movlb	0	; () banked
 13770  000C70  2BB0               	incf	actuatorTest@i_1743& (0+255),f,b
 13771  000C72  D7EF               	goto	l8453
 13772  000C74                     l8461:
 13773                           
 13774                           ; BSR set to: 0
 13775  000C74  0E00               	movlw	0
 13776  000C76  0100               	movlb	0	; () banked
 13777  000C78  6FB1               	movwf	actuatorTest@i_1744& (0+255),b
 13778  000C7A                     l8463:
 13779                           
 13780                           ; BSR set to: 0
 13781  000C7A  0E63               	movlw	99
 13782  000C7C  0100               	movlb	0	; () banked
 13783  000C7E  65B1               	cpfsgt	actuatorTest@i_1744& (0+255),b
 13784  000C80  D001               	goto	l8467
 13785  000C82  D00C               	goto	l8471
 13786  000C84                     l8467:
 13787                           
 13788                           ; BSR set to: 0
 13789  000C84  0E68               	movlw	104
 13790  000C86  0100               	movlb	0	; () banked
 13791  000C88  6FAB               	movwf	??_actuatorTest& (0+255),b
 13792  000C8A  0EE4               	movlw	228
 13793  000C8C                     u10667:
 13794  000C8C  2EE8               	decfsz	wreg,f,c
 13795  000C8E  D7FE               	bra	u10667
 13796  000C90  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13797  000C92  D7FC               	bra	u10667
 13798  000C94  F000               	nop	
 13799  000C96  0100               	movlb	0	; () banked
 13800  000C98  2BB1               	incf	actuatorTest@i_1744& (0+255),f,b
 13801  000C9A  D7EF               	goto	l8463
 13802  000C9C                     l8471:
 13803                           
 13804                           ; BSR set to: 0
 13805                           ;Test.c: 281: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13806  000C9C  0E80               	movlw	128
 13807  000C9E  ECBB  F02D         	call	_lcdInst
 13808  000CA2  0EC0               	movlw	192
 13809  000CA4  ECBB  F02D         	call	_lcdInst
 13810                           
 13811                           ;Test.c: 282: printf("LEFT -- 2s      ");
 13812  000CA8  0E85               	movlw	low STR_99
 13813  000CAA  0100               	movlb	0	; () banked
 13814  000CAC  6F8E               	movwf	printf@f& (0+255),b
 13815  000CAE  0EFB               	movlw	high STR_99
 13816  000CB0  0100               	movlb	0	; () banked
 13817  000CB2  6F8F               	movwf	(printf@f+1)& (0+255),b
 13818  000CB4  ECC1  F00B         	call	_printf	;wreg free
 13819                           
 13820                           ;Test.c: 283: updateServoPosition(2400, 1);
 13821  000CB8  0E09               	movlw	9
 13822  000CBA  0100               	movlb	0	; () banked
 13823  000CBC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13824  000CBE  0E60               	movlw	96
 13825  000CC0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13826  000CC2  0E00               	movlw	0
 13827  000CC4  0100               	movlb	0	; () banked
 13828  000CC6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13829  000CC8  0E01               	movlw	1
 13830  000CCA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13831  000CCC  EC94  F026         	call	_updateServoPosition	;wreg free
 13832                           
 13833                           ;Test.c: 284: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13834  000CD0  0E00               	movlw	0
 13835  000CD2  0100               	movlb	0	; () banked
 13836  000CD4  6FB2               	movwf	actuatorTest@i_1746& (0+255),b
 13837  000CD6                     l8479:
 13838                           
 13839                           ; BSR set to: 0
 13840  000CD6  0E63               	movlw	99
 13841  000CD8  0100               	movlb	0	; () banked
 13842  000CDA  65B2               	cpfsgt	actuatorTest@i_1746& (0+255),b
 13843  000CDC  D001               	goto	l8483
 13844  000CDE  D00C               	goto	l8487
 13845  000CE0                     l8483:
 13846                           
 13847                           ; BSR set to: 0
 13848  000CE0  0E68               	movlw	104
 13849  000CE2  0100               	movlb	0	; () banked
 13850  000CE4  6FAB               	movwf	??_actuatorTest& (0+255),b
 13851  000CE6  0EE4               	movlw	228
 13852  000CE8                     u10677:
 13853  000CE8  2EE8               	decfsz	wreg,f,c
 13854  000CEA  D7FE               	bra	u10677
 13855  000CEC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13856  000CEE  D7FC               	bra	u10677
 13857  000CF0  F000               	nop	
 13858  000CF2  0100               	movlb	0	; () banked
 13859  000CF4  2BB2               	incf	actuatorTest@i_1746& (0+255),f,b
 13860  000CF6  D7EF               	goto	l8479
 13861  000CF8                     l8487:
 13862                           
 13863                           ; BSR set to: 0
 13864  000CF8  0E00               	movlw	0
 13865  000CFA  0100               	movlb	0	; () banked
 13866  000CFC  6FB3               	movwf	actuatorTest@i_1747& (0+255),b
 13867  000CFE                     l8489:
 13868                           
 13869                           ; BSR set to: 0
 13870  000CFE  0E63               	movlw	99
 13871  000D00  0100               	movlb	0	; () banked
 13872  000D02  65B3               	cpfsgt	actuatorTest@i_1747& (0+255),b
 13873  000D04  D001               	goto	l8493
 13874  000D06  D00C               	goto	l8497
 13875  000D08                     l8493:
 13876                           
 13877                           ; BSR set to: 0
 13878  000D08  0E68               	movlw	104
 13879  000D0A  0100               	movlb	0	; () banked
 13880  000D0C  6FAB               	movwf	??_actuatorTest& (0+255),b
 13881  000D0E  0EE4               	movlw	228
 13882  000D10                     u10687:
 13883  000D10  2EE8               	decfsz	wreg,f,c
 13884  000D12  D7FE               	bra	u10687
 13885  000D14  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13886  000D16  D7FC               	bra	u10687
 13887  000D18  F000               	nop	
 13888  000D1A  0100               	movlb	0	; () banked
 13889  000D1C  2BB3               	incf	actuatorTest@i_1747& (0+255),f,b
 13890  000D1E  D7EF               	goto	l8489
 13891  000D20                     l8497:
 13892                           
 13893                           ; BSR set to: 0
 13894                           ;Test.c: 286: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13895  000D20  0E80               	movlw	128
 13896  000D22  ECBB  F02D         	call	_lcdInst
 13897  000D26  0EC0               	movlw	192
 13898  000D28  ECBB  F02D         	call	_lcdInst
 13899                           
 13900                           ;Test.c: 287: printf("MID-LEFT -- 2s  ");
 13901  000D2C  0E0D               	movlw	low STR_100
 13902  000D2E  0100               	movlb	0	; () banked
 13903  000D30  6F8E               	movwf	printf@f& (0+255),b
 13904  000D32  0EFC               	movlw	high STR_100
 13905  000D34  0100               	movlb	0	; () banked
 13906  000D36  6F8F               	movwf	(printf@f+1)& (0+255),b
 13907  000D38  ECC1  F00B         	call	_printf	;wreg free
 13908                           
 13909                           ;Test.c: 288: updateServoPosition(1670, 1);
 13910  000D3C  0E06               	movlw	6
 13911  000D3E  0100               	movlb	0	; () banked
 13912  000D40  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13913  000D42  0E86               	movlw	134
 13914  000D44  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13915  000D46  0E00               	movlw	0
 13916  000D48  0100               	movlb	0	; () banked
 13917  000D4A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13918  000D4C  0E01               	movlw	1
 13919  000D4E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13920  000D50  EC94  F026         	call	_updateServoPosition	;wreg free
 13921                           
 13922                           ;Test.c: 289: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13923  000D54  0E00               	movlw	0
 13924  000D56  0100               	movlb	0	; () banked
 13925  000D58  6FB4               	movwf	actuatorTest@i_1749& (0+255),b
 13926  000D5A                     l8505:
 13927                           
 13928                           ; BSR set to: 0
 13929  000D5A  0E63               	movlw	99
 13930  000D5C  0100               	movlb	0	; () banked
 13931  000D5E  65B4               	cpfsgt	actuatorTest@i_1749& (0+255),b
 13932  000D60  D001               	goto	l8509
 13933  000D62  D00C               	goto	l8513
 13934  000D64                     l8509:
 13935                           
 13936                           ; BSR set to: 0
 13937  000D64  0E68               	movlw	104
 13938  000D66  0100               	movlb	0	; () banked
 13939  000D68  6FAB               	movwf	??_actuatorTest& (0+255),b
 13940  000D6A  0EE4               	movlw	228
 13941  000D6C                     u10697:
 13942  000D6C  2EE8               	decfsz	wreg,f,c
 13943  000D6E  D7FE               	bra	u10697
 13944  000D70  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13945  000D72  D7FC               	bra	u10697
 13946  000D74  F000               	nop	
 13947  000D76  0100               	movlb	0	; () banked
 13948  000D78  2BB4               	incf	actuatorTest@i_1749& (0+255),f,b
 13949  000D7A  D7EF               	goto	l8505
 13950  000D7C                     l8513:
 13951                           
 13952                           ; BSR set to: 0
 13953  000D7C  0E00               	movlw	0
 13954  000D7E  0100               	movlb	0	; () banked
 13955  000D80  6FB5               	movwf	actuatorTest@i_1750& (0+255),b
 13956  000D82                     l8515:
 13957                           
 13958                           ; BSR set to: 0
 13959  000D82  0E63               	movlw	99
 13960  000D84  0100               	movlb	0	; () banked
 13961  000D86  65B5               	cpfsgt	actuatorTest@i_1750& (0+255),b
 13962  000D88  D001               	goto	l8519
 13963  000D8A  D00C               	goto	l8523
 13964  000D8C                     l8519:
 13965                           
 13966                           ; BSR set to: 0
 13967  000D8C  0E68               	movlw	104
 13968  000D8E  0100               	movlb	0	; () banked
 13969  000D90  6FAB               	movwf	??_actuatorTest& (0+255),b
 13970  000D92  0EE4               	movlw	228
 13971  000D94                     u10707:
 13972  000D94  2EE8               	decfsz	wreg,f,c
 13973  000D96  D7FE               	bra	u10707
 13974  000D98  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13975  000D9A  D7FC               	bra	u10707
 13976  000D9C  F000               	nop	
 13977  000D9E  0100               	movlb	0	; () banked
 13978  000DA0  2BB5               	incf	actuatorTest@i_1750& (0+255),f,b
 13979  000DA2  D7EF               	goto	l8515
 13980  000DA4                     l8523:
 13981                           
 13982                           ; BSR set to: 0
 13983                           ;Test.c: 291: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13984  000DA4  0E80               	movlw	128
 13985  000DA6  ECBB  F02D         	call	_lcdInst
 13986  000DAA  0EC0               	movlw	192
 13987  000DAC  ECBB  F02D         	call	_lcdInst
 13988                           
 13989                           ;Test.c: 292: printf("MID-RIGHT -- 2s ");
 13990  000DB0  0E1E               	movlw	low STR_101
 13991  000DB2  0100               	movlb	0	; () banked
 13992  000DB4  6F8E               	movwf	printf@f& (0+255),b
 13993  000DB6  0EFC               	movlw	high STR_101
 13994  000DB8  0100               	movlb	0	; () banked
 13995  000DBA  6F8F               	movwf	(printf@f+1)& (0+255),b
 13996  000DBC  ECC1  F00B         	call	_printf	;wreg free
 13997                           
 13998                           ;Test.c: 293: updateServoPosition(850, 1);
 13999  000DC0  0E03               	movlw	3
 14000  000DC2  0100               	movlb	0	; () banked
 14001  000DC4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14002  000DC6  0E52               	movlw	82
 14003  000DC8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14004  000DCA  0E00               	movlw	0
 14005  000DCC  0100               	movlb	0	; () banked
 14006  000DCE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14007  000DD0  0E01               	movlw	1
 14008  000DD2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14009  000DD4  EC94  F026         	call	_updateServoPosition	;wreg free
 14010                           
 14011                           ;Test.c: 294: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14012  000DD8  0E00               	movlw	0
 14013  000DDA  0100               	movlb	0	; () banked
 14014  000DDC  6FB6               	movwf	actuatorTest@i_1752& (0+255),b
 14015  000DDE                     l8531:
 14016                           
 14017                           ; BSR set to: 0
 14018  000DDE  0E63               	movlw	99
 14019  000DE0  0100               	movlb	0	; () banked
 14020  000DE2  65B6               	cpfsgt	actuatorTest@i_1752& (0+255),b
 14021  000DE4  D001               	goto	l8535
 14022  000DE6  D00C               	goto	l8539
 14023  000DE8                     l8535:
 14024                           
 14025                           ; BSR set to: 0
 14026  000DE8  0E68               	movlw	104
 14027  000DEA  0100               	movlb	0	; () banked
 14028  000DEC  6FAB               	movwf	??_actuatorTest& (0+255),b
 14029  000DEE  0EE4               	movlw	228
 14030  000DF0                     u10717:
 14031  000DF0  2EE8               	decfsz	wreg,f,c
 14032  000DF2  D7FE               	bra	u10717
 14033  000DF4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14034  000DF6  D7FC               	bra	u10717
 14035  000DF8  F000               	nop	
 14036  000DFA  0100               	movlb	0	; () banked
 14037  000DFC  2BB6               	incf	actuatorTest@i_1752& (0+255),f,b
 14038  000DFE  D7EF               	goto	l8531
 14039  000E00                     l8539:
 14040                           
 14041                           ; BSR set to: 0
 14042  000E00  0E00               	movlw	0
 14043  000E02  0100               	movlb	0	; () banked
 14044  000E04  6FB7               	movwf	actuatorTest@i_1753& (0+255),b
 14045  000E06                     l8541:
 14046                           
 14047                           ; BSR set to: 0
 14048  000E06  0E63               	movlw	99
 14049  000E08  0100               	movlb	0	; () banked
 14050  000E0A  65B7               	cpfsgt	actuatorTest@i_1753& (0+255),b
 14051  000E0C  D001               	goto	l8545
 14052  000E0E  D00C               	goto	l8549
 14053  000E10                     l8545:
 14054                           
 14055                           ; BSR set to: 0
 14056  000E10  0E68               	movlw	104
 14057  000E12  0100               	movlb	0	; () banked
 14058  000E14  6FAB               	movwf	??_actuatorTest& (0+255),b
 14059  000E16  0EE4               	movlw	228
 14060  000E18                     u10727:
 14061  000E18  2EE8               	decfsz	wreg,f,c
 14062  000E1A  D7FE               	bra	u10727
 14063  000E1C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14064  000E1E  D7FC               	bra	u10727
 14065  000E20  F000               	nop	
 14066  000E22  0100               	movlb	0	; () banked
 14067  000E24  2BB7               	incf	actuatorTest@i_1753& (0+255),f,b
 14068  000E26  D7EF               	goto	l8541
 14069  000E28                     l8549:
 14070                           
 14071                           ; BSR set to: 0
 14072                           ;Test.c: 296: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14073  000E28  0E80               	movlw	128
 14074  000E2A  ECBB  F02D         	call	_lcdInst
 14075  000E2E  0EC0               	movlw	192
 14076  000E30  ECBB  F02D         	call	_lcdInst
 14077                           
 14078                           ;Test.c: 297: printf("MID -- 2s       ");
 14079  000E34  0E63               	movlw	low STR_102
 14080  000E36  0100               	movlb	0	; () banked
 14081  000E38  6F8E               	movwf	printf@f& (0+255),b
 14082  000E3A  0EFB               	movlw	high STR_102
 14083  000E3C  0100               	movlb	0	; () banked
 14084  000E3E  6F8F               	movwf	(printf@f+1)& (0+255),b
 14085  000E40  ECC1  F00B         	call	_printf	;wreg free
 14086                           
 14087                           ;Test.c: 298: updateServoPosition(1200, 1);
 14088  000E44  0E04               	movlw	4
 14089  000E46  0100               	movlb	0	; () banked
 14090  000E48  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14091  000E4A  0EB0               	movlw	176
 14092  000E4C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14093  000E4E  0E00               	movlw	0
 14094  000E50  0100               	movlb	0	; () banked
 14095  000E52  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14096  000E54  0E01               	movlw	1
 14097  000E56  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14098  000E58  EC94  F026         	call	_updateServoPosition	;wreg free
 14099                           
 14100                           ;Test.c: 299: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14101  000E5C  0E00               	movlw	0
 14102  000E5E  0100               	movlb	0	; () banked
 14103  000E60  6FB8               	movwf	actuatorTest@i_1755& (0+255),b
 14104  000E62                     l8557:
 14105                           
 14106                           ; BSR set to: 0
 14107  000E62  0E63               	movlw	99
 14108  000E64  0100               	movlb	0	; () banked
 14109  000E66  65B8               	cpfsgt	actuatorTest@i_1755& (0+255),b
 14110  000E68  D001               	goto	l8561
 14111  000E6A  D00C               	goto	l8565
 14112  000E6C                     l8561:
 14113                           
 14114                           ; BSR set to: 0
 14115  000E6C  0E68               	movlw	104
 14116  000E6E  0100               	movlb	0	; () banked
 14117  000E70  6FAB               	movwf	??_actuatorTest& (0+255),b
 14118  000E72  0EE4               	movlw	228
 14119  000E74                     u10737:
 14120  000E74  2EE8               	decfsz	wreg,f,c
 14121  000E76  D7FE               	bra	u10737
 14122  000E78  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14123  000E7A  D7FC               	bra	u10737
 14124  000E7C  F000               	nop	
 14125  000E7E  0100               	movlb	0	; () banked
 14126  000E80  2BB8               	incf	actuatorTest@i_1755& (0+255),f,b
 14127  000E82  D7EF               	goto	l8557
 14128  000E84                     l8565:
 14129                           
 14130                           ; BSR set to: 0
 14131  000E84  0E00               	movlw	0
 14132  000E86  0100               	movlb	0	; () banked
 14133  000E88  6FB9               	movwf	actuatorTest@i_1756& (0+255),b
 14134  000E8A                     l8567:
 14135                           
 14136                           ; BSR set to: 0
 14137  000E8A  0E63               	movlw	99
 14138  000E8C  0100               	movlb	0	; () banked
 14139  000E8E  65B9               	cpfsgt	actuatorTest@i_1756& (0+255),b
 14140  000E90  D001               	goto	l8571
 14141  000E92  D00C               	goto	l1328
 14142  000E94                     l8571:
 14143                           
 14144                           ; BSR set to: 0
 14145  000E94  0E68               	movlw	104
 14146  000E96  0100               	movlb	0	; () banked
 14147  000E98  6FAB               	movwf	??_actuatorTest& (0+255),b
 14148  000E9A  0EE4               	movlw	228
 14149  000E9C                     u10747:
 14150  000E9C  2EE8               	decfsz	wreg,f,c
 14151  000E9E  D7FE               	bra	u10747
 14152  000EA0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14153  000EA2  D7FC               	bra	u10747
 14154  000EA4  F000               	nop	
 14155  000EA6  0100               	movlb	0	; () banked
 14156  000EA8  2BB9               	incf	actuatorTest@i_1756& (0+255),f,b
 14157  000EAA  D7EF               	goto	l8567
 14158  000EAC                     l1328:
 14159                           
 14160                           ; BSR set to: 0
 14161                           ;Test.c: 300: TMR1ON = 0;
 14162  000EAC  90CD               	bcf	4045,0,c	;volatile
 14163                           
 14164                           ; BSR set to: 0
 14165                           ;Test.c: 307: printf("TST: TILT SERVO");
 14166  000EAE  0E4E               	movlw	low STR_103
 14167  000EB0  0100               	movlb	0	; () banked
 14168  000EB2  6F8E               	movwf	printf@f& (0+255),b
 14169  000EB4  0EFE               	movlw	high STR_103
 14170  000EB6  0100               	movlb	0	; () banked
 14171  000EB8  6F8F               	movwf	(printf@f+1)& (0+255),b
 14172  000EBA  ECC1  F00B         	call	_printf	;wreg free
 14173                           
 14174                           ;Test.c: 308: lcdInst(0b11000000);;
 14175  000EBE  0EC0               	movlw	192
 14176  000EC0  ECBB  F02D         	call	_lcdInst
 14177                           
 14178                           ;Test.c: 309: printf("LEVEL -- 2s     ");
 14179  000EC4  0E96               	movlw	low STR_104
 14180  000EC6  0100               	movlb	0	; () banked
 14181  000EC8  6F8E               	movwf	printf@f& (0+255),b
 14182  000ECA  0EFB               	movlw	high STR_104
 14183  000ECC  0100               	movlb	0	; () banked
 14184  000ECE  6F8F               	movwf	(printf@f+1)& (0+255),b
 14185  000ED0  ECC1  F00B         	call	_printf	;wreg free
 14186                           
 14187                           ;Test.c: 310: updateServoPosition(1050, 3);
 14188  000ED4  0E04               	movlw	4
 14189  000ED6  0100               	movlb	0	; () banked
 14190  000ED8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14191  000EDA  0E1A               	movlw	26
 14192  000EDC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14193  000EDE  0E00               	movlw	0
 14194  000EE0  0100               	movlb	0	; () banked
 14195  000EE2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14196  000EE4  0E03               	movlw	3
 14197  000EE6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14198  000EE8  EC94  F026         	call	_updateServoPosition	;wreg free
 14199                           
 14200                           ;Test.c: 311: TMR3ON = 1;
 14201  000EEC  80B1               	bsf	4017,0,c	;volatile
 14202                           
 14203                           ;Test.c: 312: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14204  000EEE  0E00               	movlw	0
 14205  000EF0  0100               	movlb	0	; () banked
 14206  000EF2  6FBA               	movwf	actuatorTest@i_1759& (0+255),b
 14207  000EF4                     l8585:
 14208                           
 14209                           ; BSR set to: 0
 14210  000EF4  0E63               	movlw	99
 14211  000EF6  0100               	movlb	0	; () banked
 14212  000EF8  65BA               	cpfsgt	actuatorTest@i_1759& (0+255),b
 14213  000EFA  D001               	goto	l8589
 14214  000EFC  D00C               	goto	l8593
 14215  000EFE                     l8589:
 14216                           
 14217                           ; BSR set to: 0
 14218  000EFE  0E68               	movlw	104
 14219  000F00  0100               	movlb	0	; () banked
 14220  000F02  6FAB               	movwf	??_actuatorTest& (0+255),b
 14221  000F04  0EE4               	movlw	228
 14222  000F06                     u10757:
 14223  000F06  2EE8               	decfsz	wreg,f,c
 14224  000F08  D7FE               	bra	u10757
 14225  000F0A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14226  000F0C  D7FC               	bra	u10757
 14227  000F0E  F000               	nop	
 14228  000F10  0100               	movlb	0	; () banked
 14229  000F12  2BBA               	incf	actuatorTest@i_1759& (0+255),f,b
 14230  000F14  D7EF               	goto	l8585
 14231  000F16                     l8593:
 14232                           
 14233                           ; BSR set to: 0
 14234  000F16  0E00               	movlw	0
 14235  000F18  0100               	movlb	0	; () banked
 14236  000F1A  6FBB               	movwf	actuatorTest@i_1760& (0+255),b
 14237  000F1C                     l8595:
 14238                           
 14239                           ; BSR set to: 0
 14240  000F1C  0E63               	movlw	99
 14241  000F1E  0100               	movlb	0	; () banked
 14242  000F20  65BB               	cpfsgt	actuatorTest@i_1760& (0+255),b
 14243  000F22  D001               	goto	l8599
 14244  000F24  D00C               	goto	l8603
 14245  000F26                     l8599:
 14246                           
 14247                           ; BSR set to: 0
 14248  000F26  0E68               	movlw	104
 14249  000F28  0100               	movlb	0	; () banked
 14250  000F2A  6FAB               	movwf	??_actuatorTest& (0+255),b
 14251  000F2C  0EE4               	movlw	228
 14252  000F2E                     u10767:
 14253  000F2E  2EE8               	decfsz	wreg,f,c
 14254  000F30  D7FE               	bra	u10767
 14255  000F32  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14256  000F34  D7FC               	bra	u10767
 14257  000F36  F000               	nop	
 14258  000F38  0100               	movlb	0	; () banked
 14259  000F3A  2BBB               	incf	actuatorTest@i_1760& (0+255),f,b
 14260  000F3C  D7EF               	goto	l8595
 14261  000F3E                     l8603:
 14262                           
 14263                           ; BSR set to: 0
 14264                           ;Test.c: 314: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14265  000F3E  0E80               	movlw	128
 14266  000F40  ECBB  F02D         	call	_lcdInst
 14267  000F44  0EC0               	movlw	192
 14268  000F46  ECBB  F02D         	call	_lcdInst
 14269                           
 14270                           ;Test.c: 315: printf("DROP -- 2s      ");
 14271  000F4A  0E74               	movlw	low STR_105
 14272  000F4C  0100               	movlb	0	; () banked
 14273  000F4E  6F8E               	movwf	printf@f& (0+255),b
 14274  000F50  0EFB               	movlw	high STR_105
 14275  000F52  0100               	movlb	0	; () banked
 14276  000F54  6F8F               	movwf	(printf@f+1)& (0+255),b
 14277  000F56  ECC1  F00B         	call	_printf	;wreg free
 14278                           
 14279                           ;Test.c: 316: updateServoPosition(1260, 3);
 14280  000F5A  0E04               	movlw	4
 14281  000F5C  0100               	movlb	0	; () banked
 14282  000F5E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14283  000F60  0EEC               	movlw	236
 14284  000F62  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14285  000F64  0E00               	movlw	0
 14286  000F66  0100               	movlb	0	; () banked
 14287  000F68  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14288  000F6A  0E03               	movlw	3
 14289  000F6C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14290  000F6E  EC94  F026         	call	_updateServoPosition	;wreg free
 14291                           
 14292                           ;Test.c: 317: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14293  000F72  0E00               	movlw	0
 14294  000F74  0100               	movlb	0	; () banked
 14295  000F76  6FBC               	movwf	actuatorTest@i_1762& (0+255),b
 14296  000F78                     l8611:
 14297                           
 14298                           ; BSR set to: 0
 14299  000F78  0E63               	movlw	99
 14300  000F7A  0100               	movlb	0	; () banked
 14301  000F7C  65BC               	cpfsgt	actuatorTest@i_1762& (0+255),b
 14302  000F7E  D001               	goto	l8615
 14303  000F80  D00C               	goto	l8619
 14304  000F82                     l8615:
 14305                           
 14306                           ; BSR set to: 0
 14307  000F82  0E68               	movlw	104
 14308  000F84  0100               	movlb	0	; () banked
 14309  000F86  6FAB               	movwf	??_actuatorTest& (0+255),b
 14310  000F88  0EE4               	movlw	228
 14311  000F8A                     u10777:
 14312  000F8A  2EE8               	decfsz	wreg,f,c
 14313  000F8C  D7FE               	bra	u10777
 14314  000F8E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14315  000F90  D7FC               	bra	u10777
 14316  000F92  F000               	nop	
 14317  000F94  0100               	movlb	0	; () banked
 14318  000F96  2BBC               	incf	actuatorTest@i_1762& (0+255),f,b
 14319  000F98  D7EF               	goto	l8611
 14320  000F9A                     l8619:
 14321                           
 14322                           ; BSR set to: 0
 14323  000F9A  0E00               	movlw	0
 14324  000F9C  0100               	movlb	0	; () banked
 14325  000F9E  6FBD               	movwf	actuatorTest@i_1763& (0+255),b
 14326  000FA0                     l8621:
 14327                           
 14328                           ; BSR set to: 0
 14329  000FA0  0E63               	movlw	99
 14330  000FA2  0100               	movlb	0	; () banked
 14331  000FA4  65BD               	cpfsgt	actuatorTest@i_1763& (0+255),b
 14332  000FA6  D001               	goto	l8625
 14333  000FA8  D00C               	goto	l8629
 14334  000FAA                     l8625:
 14335                           
 14336                           ; BSR set to: 0
 14337  000FAA  0E68               	movlw	104
 14338  000FAC  0100               	movlb	0	; () banked
 14339  000FAE  6FAB               	movwf	??_actuatorTest& (0+255),b
 14340  000FB0  0EE4               	movlw	228
 14341  000FB2                     u10787:
 14342  000FB2  2EE8               	decfsz	wreg,f,c
 14343  000FB4  D7FE               	bra	u10787
 14344  000FB6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14345  000FB8  D7FC               	bra	u10787
 14346  000FBA  F000               	nop	
 14347  000FBC  0100               	movlb	0	; () banked
 14348  000FBE  2BBD               	incf	actuatorTest@i_1763& (0+255),f,b
 14349  000FC0  D7EF               	goto	l8621
 14350  000FC2                     l8629:
 14351                           
 14352                           ; BSR set to: 0
 14353                           ;Test.c: 319: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14354  000FC2  0E80               	movlw	128
 14355  000FC4  ECBB  F02D         	call	_lcdInst
 14356  000FC8  0EC0               	movlw	192
 14357  000FCA  ECBB  F02D         	call	_lcdInst
 14358                           
 14359                           ;Test.c: 320: printf("LEVEL -- 2s     ");
 14360  000FCE  0E96               	movlw	low STR_104
 14361  000FD0  0100               	movlb	0	; () banked
 14362  000FD2  6F8E               	movwf	printf@f& (0+255),b
 14363  000FD4  0EFB               	movlw	high STR_104
 14364  000FD6  0100               	movlb	0	; () banked
 14365  000FD8  6F8F               	movwf	(printf@f+1)& (0+255),b
 14366  000FDA  ECC1  F00B         	call	_printf	;wreg free
 14367                           
 14368                           ;Test.c: 321: updateServoPosition(1050, 3);
 14369  000FDE  0E04               	movlw	4
 14370  000FE0  0100               	movlb	0	; () banked
 14371  000FE2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14372  000FE4  0E1A               	movlw	26
 14373  000FE6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14374  000FE8  0E00               	movlw	0
 14375  000FEA  0100               	movlb	0	; () banked
 14376  000FEC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14377  000FEE  0E03               	movlw	3
 14378  000FF0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14379  000FF2  EC94  F026         	call	_updateServoPosition	;wreg free
 14380                           
 14381                           ;Test.c: 322: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14382  000FF6  0E00               	movlw	0
 14383  000FF8  0100               	movlb	0	; () banked
 14384  000FFA  6FBE               	movwf	actuatorTest@i_1765& (0+255),b
 14385  000FFC                     l8637:
 14386                           
 14387                           ; BSR set to: 0
 14388  000FFC  0E63               	movlw	99
 14389  000FFE  0100               	movlb	0	; () banked
 14390  001000  65BE               	cpfsgt	actuatorTest@i_1765& (0+255),b
 14391  001002  D001               	goto	l8641
 14392  001004  D00C               	goto	l8645
 14393  001006                     l8641:
 14394                           
 14395                           ; BSR set to: 0
 14396  001006  0E68               	movlw	104
 14397  001008  0100               	movlb	0	; () banked
 14398  00100A  6FAB               	movwf	??_actuatorTest& (0+255),b
 14399  00100C  0EE4               	movlw	228
 14400  00100E                     u10797:
 14401  00100E  2EE8               	decfsz	wreg,f,c
 14402  001010  D7FE               	bra	u10797
 14403  001012  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14404  001014  D7FC               	bra	u10797
 14405  001016  F000               	nop	
 14406  001018  0100               	movlb	0	; () banked
 14407  00101A  2BBE               	incf	actuatorTest@i_1765& (0+255),f,b
 14408  00101C  D7EF               	goto	l8637
 14409  00101E                     l8645:
 14410                           
 14411                           ; BSR set to: 0
 14412  00101E  0E00               	movlw	0
 14413  001020  0100               	movlb	0	; () banked
 14414  001022  6FBF               	movwf	actuatorTest@i_1766& (0+255),b
 14415  001024                     l8647:
 14416                           
 14417                           ; BSR set to: 0
 14418  001024  0E63               	movlw	99
 14419  001026  0100               	movlb	0	; () banked
 14420  001028  65BF               	cpfsgt	actuatorTest@i_1766& (0+255),b
 14421  00102A  D001               	goto	l8651
 14422  00102C  D00C               	goto	l1340
 14423  00102E                     l8651:
 14424                           
 14425                           ; BSR set to: 0
 14426  00102E  0E68               	movlw	104
 14427  001030  0100               	movlb	0	; () banked
 14428  001032  6FAB               	movwf	??_actuatorTest& (0+255),b
 14429  001034  0EE4               	movlw	228
 14430  001036                     u10807:
 14431  001036  2EE8               	decfsz	wreg,f,c
 14432  001038  D7FE               	bra	u10807
 14433  00103A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14434  00103C  D7FC               	bra	u10807
 14435  00103E  F000               	nop	
 14436  001040  0100               	movlb	0	; () banked
 14437  001042  2BBF               	incf	actuatorTest@i_1766& (0+255),f,b
 14438  001044  D7EF               	goto	l8647
 14439  001046                     l1340:
 14440                           
 14441                           ; BSR set to: 0
 14442                           ;Test.c: 323: TMR3ON = 0;
 14443  001046  90B1               	bcf	4017,0,c	;volatile
 14444                           
 14445                           ;Test.c: 324: (INTCONbits.GIE = 0);
 14446  001048  9EF2               	bcf	intcon,7,c	;volatile
 14447                           
 14448                           ; BSR set to: 0
 14449                           ;Test.c: 329: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14450  00104A  0E01               	movlw	1
 14451  00104C  ECBB  F02D         	call	_lcdInst
 14452  001050  0E68               	movlw	104
 14453  001052  0100               	movlb	0	; () banked
 14454  001054  6FAB               	movwf	??_actuatorTest& (0+255),b
 14455  001056  0EE4               	movlw	228
 14456  001058                     u10817:
 14457  001058  2EE8               	decfsz	wreg,f,c
 14458  00105A  D7FE               	bra	u10817
 14459  00105C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14460  00105E  D7FC               	bra	u10817
 14461  001060  F000               	nop	
 14462  001062  0E80               	movlw	128
 14463  001064  ECBB  F02D         	call	_lcdInst
 14464                           
 14465                           ;Test.c: 330: printf("TST: CAM SERVO");
 14466  001068  0EB9               	movlw	low STR_107
 14467  00106A  0100               	movlb	0	; () banked
 14468  00106C  6F8E               	movwf	printf@f& (0+255),b
 14469  00106E  0EFE               	movlw	high STR_107
 14470  001070  0100               	movlb	0	; () banked
 14471  001072  6F8F               	movwf	(printf@f+1)& (0+255),b
 14472  001074  ECC1  F00B         	call	_printf	;wreg free
 14473                           
 14474                           ;Test.c: 331: lcdInst(0b11000000);;
 14475  001078  0EC0               	movlw	192
 14476  00107A  ECBB  F02D         	call	_lcdInst
 14477                           
 14478                           ;Test.c: 332: printf("CAM UP  |RC0=1");
 14479  00107E  0E9B               	movlw	low STR_108
 14480  001080  0100               	movlb	0	; () banked
 14481  001082  6F8E               	movwf	printf@f& (0+255),b
 14482  001084  0EFE               	movlw	high STR_108
 14483  001086  0100               	movlb	0	; () banked
 14484  001088  6F8F               	movwf	(printf@f+1)& (0+255),b
 14485  00108A  ECC1  F00B         	call	_printf	;wreg free
 14486                           
 14487                           ;Test.c: 333: LATCbits.LATC0 = 1;
 14488  00108E  808B               	bsf	3979,0,c	;volatile
 14489                           
 14490                           ;Test.c: 334: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14491  001090  0E00               	movlw	0
 14492  001092  0100               	movlb	0	; () banked
 14493  001094  6FC0               	movwf	actuatorTest@i_1769& (0+255),b
 14494  001096                     l8671:
 14495                           
 14496                           ; BSR set to: 0
 14497  001096  0E63               	movlw	99
 14498  001098  0100               	movlb	0	; () banked
 14499  00109A  65C0               	cpfsgt	actuatorTest@i_1769& (0+255),b
 14500  00109C  D001               	goto	l8675
 14501  00109E  D00C               	goto	l8679
 14502  0010A0                     l8675:
 14503                           
 14504                           ; BSR set to: 0
 14505  0010A0  0E68               	movlw	104
 14506  0010A2  0100               	movlb	0	; () banked
 14507  0010A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 14508  0010A6  0EE4               	movlw	228
 14509  0010A8                     u10827:
 14510  0010A8  2EE8               	decfsz	wreg,f,c
 14511  0010AA  D7FE               	bra	u10827
 14512  0010AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14513  0010AE  D7FC               	bra	u10827
 14514  0010B0  F000               	nop	
 14515  0010B2  0100               	movlb	0	; () banked
 14516  0010B4  2BC0               	incf	actuatorTest@i_1769& (0+255),f,b
 14517  0010B6  D7EF               	goto	l8671
 14518  0010B8                     l8679:
 14519                           
 14520                           ; BSR set to: 0
 14521  0010B8  0E00               	movlw	0
 14522  0010BA  0100               	movlb	0	; () banked
 14523  0010BC  6FC1               	movwf	actuatorTest@i_1770& (0+255),b
 14524  0010BE                     l8681:
 14525                           
 14526                           ; BSR set to: 0
 14527  0010BE  0E63               	movlw	99
 14528  0010C0  0100               	movlb	0	; () banked
 14529  0010C2  65C1               	cpfsgt	actuatorTest@i_1770& (0+255),b
 14530  0010C4  D001               	goto	l8685
 14531  0010C6  D00C               	goto	l8689
 14532  0010C8                     l8685:
 14533                           
 14534                           ; BSR set to: 0
 14535  0010C8  0E68               	movlw	104
 14536  0010CA  0100               	movlb	0	; () banked
 14537  0010CC  6FAB               	movwf	??_actuatorTest& (0+255),b
 14538  0010CE  0EE4               	movlw	228
 14539  0010D0                     u10837:
 14540  0010D0  2EE8               	decfsz	wreg,f,c
 14541  0010D2  D7FE               	bra	u10837
 14542  0010D4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14543  0010D6  D7FC               	bra	u10837
 14544  0010D8  F000               	nop	
 14545  0010DA  0100               	movlb	0	; () banked
 14546  0010DC  2BC1               	incf	actuatorTest@i_1770& (0+255),f,b
 14547  0010DE  D7EF               	goto	l8681
 14548  0010E0                     l8689:
 14549                           
 14550                           ; BSR set to: 0
 14551                           ;Test.c: 335: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14552  0010E0  0E80               	movlw	128
 14553  0010E2  ECBB  F02D         	call	_lcdInst
 14554  0010E6  0EC0               	movlw	192
 14555  0010E8  ECBB  F02D         	call	_lcdInst
 14556                           
 14557                           ;Test.c: 336: printf("CAM DWN |RC0=0");
 14558  0010EC  0E8C               	movlw	low STR_109
 14559  0010EE  0100               	movlb	0	; () banked
 14560  0010F0  6F8E               	movwf	printf@f& (0+255),b
 14561  0010F2  0EFE               	movlw	high STR_109
 14562  0010F4  0100               	movlb	0	; () banked
 14563  0010F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 14564  0010F8  ECC1  F00B         	call	_printf	;wreg free
 14565                           
 14566                           ;Test.c: 339: for(i=0;i<10000;i++)
 14567  0010FC  0E00               	movlw	0
 14568  0010FE  0100               	movlb	0	; () banked
 14569  001100  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 14570  001102  0E00               	movlw	0
 14571  001104  6FC4               	movwf	actuatorTest@i& (0+255),b
 14572  001106                     l8695:
 14573                           
 14574                           ; BSR set to: 0
 14575  001106  0100               	movlb	0	; () banked
 14576  001108  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 14577  00110A  D008               	goto	l1345
 14578  00110C  0E10               	movlw	16
 14579  00110E  0100               	movlb	0	; () banked
 14580  001110  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 14581  001112  0E27               	movlw	39
 14582  001114  0100               	movlb	0	; () banked
 14583  001116  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 14584  001118  B0D8               	btfsc	status,0,c
 14585  00111A  D00D               	goto	l8705
 14586  00111C                     l1345:
 14587                           
 14588                           ; BSR set to: 0
 14589                           ;Test.c: 340: {
 14590                           ;Test.c: 341: LATCbits.LATC0 = 1;
 14591  00111C  808B               	bsf	3979,0,c	;volatile
 14592                           
 14593                           ; BSR set to: 0
 14594                           ;Test.c: 342: _delay((unsigned long)((10)*(32000000/4000000.0)));
 14595  00111E  0E1A               	movlw	26
 14596  001120                     u10847:
 14597  001120  2EE8               	decfsz	wreg,f,c
 14598  001122  D7FE               	bra	u10847
 14599  001124  D000               	nop2	
 14600                           
 14601                           ;Test.c: 343: LATCbits.LATC0 = 0;
 14602  001126  908B               	bcf	3979,0,c	;volatile
 14603                           
 14604                           ;Test.c: 344: _delay((unsigned long)((90)*(32000000/4000000.0)));
 14605  001128  0EF0               	movlw	240
 14606  00112A                     u10857:
 14607  00112A  2EE8               	decfsz	wreg,f,c
 14608  00112C  D7FE               	bra	u10857
 14609  00112E  0100               	movlb	0	; () banked
 14610  001130  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 14611  001132  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 14612  001134  D7E8               	goto	l8695
 14613  001136                     l8705:
 14614                           
 14615                           ; BSR set to: 0
 14616                           ;Test.c: 345: }
 14617                           ;Test.c: 347: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14618  001136  0E00               	movlw	0
 14619  001138  0100               	movlb	0	; () banked
 14620  00113A  6FC2               	movwf	actuatorTest@i_1772& (0+255),b
 14621  00113C                     l8707:
 14622                           
 14623                           ; BSR set to: 0
 14624  00113C  0E63               	movlw	99
 14625  00113E  0100               	movlb	0	; () banked
 14626  001140  65C2               	cpfsgt	actuatorTest@i_1772& (0+255),b
 14627  001142  D001               	goto	l8711
 14628  001144  D00C               	goto	l8715
 14629  001146                     l8711:
 14630                           
 14631                           ; BSR set to: 0
 14632  001146  0E68               	movlw	104
 14633  001148  0100               	movlb	0	; () banked
 14634  00114A  6FAB               	movwf	??_actuatorTest& (0+255),b
 14635  00114C  0EE4               	movlw	228
 14636  00114E                     u10867:
 14637  00114E  2EE8               	decfsz	wreg,f,c
 14638  001150  D7FE               	bra	u10867
 14639  001152  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14640  001154  D7FC               	bra	u10867
 14641  001156  F000               	nop	
 14642  001158  0100               	movlb	0	; () banked
 14643  00115A  2BC2               	incf	actuatorTest@i_1772& (0+255),f,b
 14644  00115C  D7EF               	goto	l8707
 14645  00115E                     l8715:
 14646                           
 14647                           ; BSR set to: 0
 14648  00115E  0E00               	movlw	0
 14649  001160  0100               	movlb	0	; () banked
 14650  001162  6FC3               	movwf	actuatorTest@i_1773& (0+255),b
 14651  001164                     l8717:
 14652                           
 14653                           ; BSR set to: 0
 14654  001164  0E63               	movlw	99
 14655  001166  0100               	movlb	0	; () banked
 14656  001168  65C3               	cpfsgt	actuatorTest@i_1773& (0+255),b
 14657  00116A  D001               	goto	l8721
 14658  00116C  D00C               	goto	l8725
 14659  00116E                     l8721:
 14660                           
 14661                           ; BSR set to: 0
 14662  00116E  0E68               	movlw	104
 14663  001170  0100               	movlb	0	; () banked
 14664  001172  6FAB               	movwf	??_actuatorTest& (0+255),b
 14665  001174  0EE4               	movlw	228
 14666  001176                     u10877:
 14667  001176  2EE8               	decfsz	wreg,f,c
 14668  001178  D7FE               	bra	u10877
 14669  00117A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14670  00117C  D7FC               	bra	u10877
 14671  00117E  F000               	nop	
 14672  001180  0100               	movlb	0	; () banked
 14673  001182  2BC3               	incf	actuatorTest@i_1773& (0+255),f,b
 14674  001184  D7EF               	goto	l8717
 14675  001186                     l8725:
 14676                           
 14677                           ; BSR set to: 0
 14678                           ;Test.c: 348: machine_state = Testing_state;
 14679  001186  0E03               	movlw	3
 14680  001188  0100               	movlb	0	; () banked
 14681  00118A  6FFC               	movwf	_machine_state& (0+255),b
 14682                           
 14683                           ; BSR set to: 0
 14684  00118C  0012               	return		;funcret
 14685  00118E                     __end_of_actuatorTest:
 14686                           	opt stack 0
 14687                           tblptru	equ	0xFF8
 14688                           tblptrh	equ	0xFF7
 14689                           tblptrl	equ	0xFF6
 14690                           tablat	equ	0xFF5
 14691                           prodh	equ	0xFF4
 14692                           prodl	equ	0xFF3
 14693                           intcon	equ	0xFF2
 14694                           intcon2	equ	0xFF1
 14695                           intcon3	equ	0xFF0
 14696                           postinc0	equ	0xFEE
 14697                           wreg	equ	0xFE8
 14698                           postdec1	equ	0xFE5
 14699                           fsr1l	equ	0xFE1
 14700                           indf2	equ	0xFDF
 14701                           postinc2	equ	0xFDE
 14702                           postdec2	equ	0xFDD
 14703                           fsr2h	equ	0xFDA
 14704                           fsr2l	equ	0xFD9
 14705                           status	equ	0xFD8
 14706                           
 14707 ;; *************** function _SpeedTest *****************
 14708 ;; Defined at:
 14709 ;;		line 541 in file "Test.c"
 14710 ;; Parameters:    Size  Location     Type
 14711 ;;		None
 14712 ;; Auto vars:     Size  Location     Type
 14713 ;;		None
 14714 ;; Return value:  Size  Location     Type
 14715 ;;                  1    wreg      void 
 14716 ;; Registers used:
 14717 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14718 ;; Tracked objects:
 14719 ;;		On entry : 0/0
 14720 ;;		On exit  : 0/0
 14721 ;;		Unchanged: 0/0
 14722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14725 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14726 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14727 ;;Total ram usage:        1 bytes
 14728 ;; Hardware stack levels used:    1
 14729 ;; Hardware stack levels required when called:   10
 14730 ;; This function calls:
 14731 ;;		_lcdInst
 14732 ;;		_printf
 14733 ;; This function is called by:
 14734 ;;		_Test
 14735 ;; This function uses a non-reentrant model
 14736 ;;
 14737                           
 14738                           	psect	text46
 14739  004DAE                     __ptext46:
 14740                           	opt stack 0
 14741  004DAE                     _SpeedTest:
 14742                           	opt stack 19
 14743                           
 14744                           ;Test.c: 543: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14745                           
 14746                           ; BSR set to: 0
 14747                           ;incstack = 0
 14748  004DAE  0E01               	movlw	1
 14749  004DB0  ECBB  F02D         	call	_lcdInst
 14750  004DB4  0E68               	movlw	104
 14751  004DB6  0100               	movlb	0	; () banked
 14752  004DB8  6FAB               	movwf	??_SpeedTest& (0+255),b
 14753  004DBA  0EE4               	movlw	228
 14754  004DBC                     u10887:
 14755  004DBC  2EE8               	decfsz	wreg,f,c
 14756  004DBE  D7FE               	bra	u10887
 14757  004DC0  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 14758  004DC2  D7FC               	bra	u10887
 14759  004DC4  F000               	nop	
 14760  004DC6  0E80               	movlw	128
 14761  004DC8  ECBB  F02D         	call	_lcdInst
 14762                           
 14763                           ;Test.c: 544: printf("S: D WILL RETURN ");
 14764  004DCC  0E09               	movlw	low STR_120
 14765  004DCE  0100               	movlb	0	; () banked
 14766  004DD0  6F8E               	movwf	printf@f& (0+255),b
 14767  004DD2  0EFB               	movlw	high STR_120
 14768  004DD4  0100               	movlb	0	; () banked
 14769  004DD6  6F8F               	movwf	(printf@f+1)& (0+255),b
 14770  004DD8  ECC1  F00B         	call	_printf	;wreg free
 14771                           
 14772                           ;Test.c: 545: lcdInst(0b11000000);;
 14773  004DDC  0EC0               	movlw	192
 14774  004DDE  ECBB  F02D         	call	_lcdInst
 14775                           
 14776                           ;Test.c: 546: printf("OTHER SETS RA5   ");
 14777  004DE2  0EF7               	movlw	low STR_121
 14778  004DE4  0100               	movlb	0	; () banked
 14779  004DE6  6F8E               	movwf	printf@f& (0+255),b
 14780  004DE8  0EFA               	movlw	high STR_121
 14781  004DEA  0100               	movlb	0	; () banked
 14782  004DEC  6F8F               	movwf	(printf@f+1)& (0+255),b
 14783  004DEE  ECC1  F00B         	call	_printf	;wreg free
 14784  004DF2                     l1416:
 14785  004DF2  A281               	btfss	3969,1,c	;volatile
 14786  004DF4  D7FE               	goto	l1416
 14787                           
 14788                           ;Test.c: 551: }
 14789                           ;Test.c: 552: if(PORTB >> 4 == 0b1111){
 14790  004DF6  3881               	swapf	3969,w,c	;volatile
 14791  004DF8  0B0F               	andlw	15
 14792  004DFA  0A0F               	xorlw	15
 14793  004DFC  B4D8               	btfsc	status,2,c
 14794  004DFE  0012               	return	
 14795  004E00  D014               	goto	l8821
 14796  004E02                     l1423:
 14797                           
 14798                           ;Test.c: 557: LATBbits.LATB2 = 1;
 14799  004E02  848A               	bsf	3978,2,c	;volatile
 14800                           
 14801                           ;Test.c: 558: _delay((unsigned long)((5)*(32000000/4000.0)));
 14802  004E04  0E34               	movlw	52
 14803  004E06  0100               	movlb	0	; () banked
 14804  004E08  6FAB               	movwf	??_SpeedTest& (0+255),b
 14805  004E0A  0EF1               	movlw	241
 14806  004E0C                     u10897:
 14807  004E0C  2EE8               	decfsz	wreg,f,c
 14808  004E0E  D7FE               	bra	u10897
 14809  004E10  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 14810  004E12  D7FC               	bra	u10897
 14811  004E14  D000               	nop2	
 14812                           
 14813                           ;Test.c: 559: LATBbits.LATB2 = 0;
 14814  004E16  948A               	bcf	3978,2,c	;volatile
 14815                           
 14816                           ;Test.c: 560: _delay((unsigned long)((5)*(32000000/4000.0)));
 14817  004E18  0E34               	movlw	52
 14818  004E1A  0100               	movlb	0	; () banked
 14819  004E1C  6FAB               	movwf	??_SpeedTest& (0+255),b
 14820  004E1E  0EF1               	movlw	241
 14821  004E20                     u10907:
 14822  004E20  2EE8               	decfsz	wreg,f,c
 14823  004E22  D7FE               	bra	u10907
 14824  004E24  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 14825  004E26  D7FC               	bra	u10907
 14826  004E28  D000               	nop2	
 14827  004E2A                     l8821:
 14828  004E2A  B281               	btfsc	3969,1,c	;volatile
 14829  004E2C  D7EA               	goto	l1423
 14830                           
 14831                           ;Test.c: 563: }
 14832                           ;Test.c: 564: LATBbits.LATB2 = 0;
 14833  004E2E  948A               	bcf	3978,2,c	;volatile
 14834  004E30  D7E0               	goto	l1416
 14835  004E32                     __end_of_SpeedTest:
 14836                           	opt stack 0
 14837                           tblptru	equ	0xFF8
 14838                           tblptrh	equ	0xFF7
 14839                           tblptrl	equ	0xFF6
 14840                           tablat	equ	0xFF5
 14841                           prodh	equ	0xFF4
 14842                           prodl	equ	0xFF3
 14843                           intcon	equ	0xFF2
 14844                           intcon2	equ	0xFF1
 14845                           intcon3	equ	0xFF0
 14846                           postinc0	equ	0xFEE
 14847                           wreg	equ	0xFE8
 14848                           postdec1	equ	0xFE5
 14849                           fsr1l	equ	0xFE1
 14850                           indf2	equ	0xFDF
 14851                           postinc2	equ	0xFDE
 14852                           postdec2	equ	0xFDD
 14853                           fsr2h	equ	0xFDA
 14854                           fsr2l	equ	0xFD9
 14855                           status	equ	0xFD8
 14856                           
 14857 ;; *************** function _PortTestPusher *****************
 14858 ;; Defined at:
 14859 ;;		line 682 in file "Test.c"
 14860 ;; Parameters:    Size  Location     Type
 14861 ;;		None
 14862 ;; Auto vars:     Size  Location     Type
 14863 ;;		None
 14864 ;; Return value:  Size  Location     Type
 14865 ;;                  1    wreg      void 
 14866 ;; Registers used:
 14867 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14868 ;; Tracked objects:
 14869 ;;		On entry : 0/0
 14870 ;;		On exit  : 0/0
 14871 ;;		Unchanged: 0/0
 14872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14875 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14876 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14877 ;;Total ram usage:        1 bytes
 14878 ;; Hardware stack levels used:    1
 14879 ;; Hardware stack levels required when called:   10
 14880 ;; This function calls:
 14881 ;;		_lcdInst
 14882 ;;		_printf
 14883 ;; This function is called by:
 14884 ;;		_Test
 14885 ;; This function uses a non-reentrant model
 14886 ;;
 14887                           
 14888                           	psect	text47
 14889  005208                     __ptext47:
 14890                           	opt stack 0
 14891  005208                     _PortTestPusher:
 14892                           	opt stack 19
 14893                           
 14894                           ;Test.c: 683: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14895                           
 14896                           ;incstack = 0
 14897  005208  0E01               	movlw	1
 14898  00520A  ECBB  F02D         	call	_lcdInst
 14899  00520E  0E68               	movlw	104
 14900  005210  0100               	movlb	0	; () banked
 14901  005212  6FAB               	movwf	??_PortTestPusher& (0+255),b
 14902  005214  0EE4               	movlw	228
 14903  005216                     u10917:
 14904  005216  2EE8               	decfsz	wreg,f,c
 14905  005218  D7FE               	bra	u10917
 14906  00521A  2FAB               	decfsz	??_PortTestPusher& (0+255),f,b
 14907  00521C  D7FC               	bra	u10917
 14908  00521E  F000               	nop	
 14909  005220  0E80               	movlw	128
 14910  005222  ECBB  F02D         	call	_lcdInst
 14911                           
 14912                           ;Test.c: 684: printf("D WILL RETURN    ");
 14913  005226  0EE5               	movlw	low STR_111
 14914  005228  0100               	movlb	0	; () banked
 14915  00522A  6F8E               	movwf	printf@f& (0+255),b
 14916  00522C  0EFA               	movlw	high STR_111
 14917  00522E  0100               	movlb	0	; () banked
 14918  005230  6F8F               	movwf	(printf@f+1)& (0+255),b
 14919  005232  ECC1  F00B         	call	_printf	;wreg free
 14920                           
 14921                           ;Test.c: 685: lcdInst(0b11000000);;
 14922  005236  0EC0               	movlw	192
 14923  005238  ECBB  F02D         	call	_lcdInst
 14924                           
 14925                           ;Test.c: 686: printf("OTHER SETS PUSHER");
 14926  00523C  0E2D               	movlw	low STR_129
 14927  00523E  0100               	movlb	0	; () banked
 14928  005240  6F8E               	movwf	printf@f& (0+255),b
 14929  005242  0EFB               	movlw	high STR_129
 14930  005244  0100               	movlb	0	; () banked
 14931  005246  6F8F               	movwf	(printf@f+1)& (0+255),b
 14932  005248  ECC1  F00B         	call	_printf	;wreg free
 14933  00524C                     l1477:
 14934  00524C  A281               	btfss	3969,1,c	;volatile
 14935  00524E  D7FE               	goto	l1477
 14936                           
 14937                           ;Test.c: 691: }
 14938                           ;Test.c: 692: if(PORTB >> 4 == 0b1111){
 14939  005250  3881               	swapf	3969,w,c	;volatile
 14940  005252  0B0F               	andlw	15
 14941  005254  0A0F               	xorlw	15
 14942  005256  B4D8               	btfsc	status,2,c
 14943  005258  0012               	return	
 14944                           
 14945                           ;Test.c: 695: else{
 14946                           ;Test.c: 696: LATAbits.LATA4 = 1;
 14947                           
 14948                           ;Test.c: 694: }
 14949                           
 14950                           ;Test.c: 693: break;
 14951  00525A  8889               	bsf	3977,4,c	;volatile
 14952  00525C                     l1483:
 14953  00525C  B281               	btfsc	3969,1,c	;volatile
 14954  00525E  D7FE               	goto	l1483
 14955                           
 14956                           ;Test.c: 699: }
 14957                           ;Test.c: 700: LATAbits.LATA4 = 0;
 14958  005260  9889               	bcf	3977,4,c	;volatile
 14959  005262  D7F4               	goto	l1477
 14960  005264                     __end_of_PortTestPusher:
 14961                           	opt stack 0
 14962                           tblptru	equ	0xFF8
 14963                           tblptrh	equ	0xFF7
 14964                           tblptrl	equ	0xFF6
 14965                           tablat	equ	0xFF5
 14966                           prodh	equ	0xFF4
 14967                           prodl	equ	0xFF3
 14968                           intcon	equ	0xFF2
 14969                           intcon2	equ	0xFF1
 14970                           intcon3	equ	0xFF0
 14971                           postinc0	equ	0xFEE
 14972                           wreg	equ	0xFE8
 14973                           postdec1	equ	0xFE5
 14974                           fsr1l	equ	0xFE1
 14975                           indf2	equ	0xFDF
 14976                           postinc2	equ	0xFDE
 14977                           postdec2	equ	0xFDD
 14978                           fsr2h	equ	0xFDA
 14979                           fsr2l	equ	0xFD9
 14980                           status	equ	0xFD8
 14981                           
 14982 ;; *************** function _PortTestDC *****************
 14983 ;; Defined at:
 14984 ;;		line 411 in file "Test.c"
 14985 ;; Parameters:    Size  Location     Type
 14986 ;;		None
 14987 ;; Auto vars:     Size  Location     Type
 14988 ;;		None
 14989 ;; Return value:  Size  Location     Type
 14990 ;;                  1    wreg      void 
 14991 ;; Registers used:
 14992 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14993 ;; Tracked objects:
 14994 ;;		On entry : 0/0
 14995 ;;		On exit  : 0/0
 14996 ;;		Unchanged: 0/0
 14997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15000 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15001 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15002 ;;Total ram usage:        1 bytes
 15003 ;; Hardware stack levels used:    1
 15004 ;; Hardware stack levels required when called:   10
 15005 ;; This function calls:
 15006 ;;		_lcdInst
 15007 ;;		_printf
 15008 ;; This function is called by:
 15009 ;;		_Test
 15010 ;; This function uses a non-reentrant model
 15011 ;;
 15012                           
 15013                           	psect	text48
 15014  005264                     __ptext48:
 15015                           	opt stack 0
 15016  005264                     _PortTestDC:
 15017                           	opt stack 19
 15018                           
 15019                           ;Test.c: 412: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15020                           
 15021                           ;incstack = 0
 15022  005264  0E01               	movlw	1
 15023  005266  ECBB  F02D         	call	_lcdInst
 15024  00526A  0E68               	movlw	104
 15025  00526C  0100               	movlb	0	; () banked
 15026  00526E  6FAB               	movwf	??_PortTestDC& (0+255),b
 15027  005270  0EE4               	movlw	228
 15028  005272                     u10927:
 15029  005272  2EE8               	decfsz	wreg,f,c
 15030  005274  D7FE               	bra	u10927
 15031  005276  2FAB               	decfsz	??_PortTestDC& (0+255),f,b
 15032  005278  D7FC               	bra	u10927
 15033  00527A  F000               	nop	
 15034  00527C  0E80               	movlw	128
 15035  00527E  ECBB  F02D         	call	_lcdInst
 15036                           
 15037                           ;Test.c: 413: printf("D WILL RETURN    ");
 15038  005282  0EE5               	movlw	low STR_111
 15039  005284  0100               	movlb	0	; () banked
 15040  005286  6F8E               	movwf	printf@f& (0+255),b
 15041  005288  0EFA               	movlw	high STR_111
 15042  00528A  0100               	movlb	0	; () banked
 15043  00528C  6F8F               	movwf	(printf@f+1)& (0+255),b
 15044  00528E  ECC1  F00B         	call	_printf	;wreg free
 15045                           
 15046                           ;Test.c: 414: lcdInst(0b11000000);;
 15047  005292  0EC0               	movlw	192
 15048  005294  ECBB  F02D         	call	_lcdInst
 15049                           
 15050                           ;Test.c: 415: printf("OTHER SETS DC   ");
 15051  005298  0EC9               	movlw	low STR_112
 15052  00529A  0100               	movlb	0	; () banked
 15053  00529C  6F8E               	movwf	printf@f& (0+255),b
 15054  00529E  0EFB               	movlw	high STR_112
 15055  0052A0  0100               	movlb	0	; () banked
 15056  0052A2  6F8F               	movwf	(printf@f+1)& (0+255),b
 15057  0052A4  ECC1  F00B         	call	_printf	;wreg free
 15058  0052A8                     l1358:
 15059  0052A8  A281               	btfss	3969,1,c	;volatile
 15060  0052AA  D7FE               	goto	l1358
 15061                           
 15062                           ;Test.c: 420: }
 15063                           ;Test.c: 421: if(PORTB >> 4 == 0b1111){
 15064  0052AC  3881               	swapf	3969,w,c	;volatile
 15065  0052AE  0B0F               	andlw	15
 15066  0052B0  0A0F               	xorlw	15
 15067  0052B2  B4D8               	btfsc	status,2,c
 15068  0052B4  0012               	return	
 15069                           
 15070                           ;Test.c: 424: else{
 15071                           ;Test.c: 425: LATBbits.LATB2 = 1;
 15072                           
 15073                           ;Test.c: 423: }
 15074                           
 15075                           ;Test.c: 422: break;
 15076  0052B6  848A               	bsf	3978,2,c	;volatile
 15077  0052B8                     l1364:
 15078  0052B8  B281               	btfsc	3969,1,c	;volatile
 15079  0052BA  D7FE               	goto	l1364
 15080                           
 15081                           ;Test.c: 428: }
 15082                           ;Test.c: 429: LATBbits.LATB2 = 0;
 15083  0052BC  948A               	bcf	3978,2,c	;volatile
 15084  0052BE  D7F4               	goto	l1358
 15085  0052C0                     __end_of_PortTestDC:
 15086                           	opt stack 0
 15087                           tblptru	equ	0xFF8
 15088                           tblptrh	equ	0xFF7
 15089                           tblptrl	equ	0xFF6
 15090                           tablat	equ	0xFF5
 15091                           prodh	equ	0xFF4
 15092                           prodl	equ	0xFF3
 15093                           intcon	equ	0xFF2
 15094                           intcon2	equ	0xFF1
 15095                           intcon3	equ	0xFF0
 15096                           postinc0	equ	0xFEE
 15097                           wreg	equ	0xFE8
 15098                           postdec1	equ	0xFE5
 15099                           fsr1l	equ	0xFE1
 15100                           indf2	equ	0xFDF
 15101                           postinc2	equ	0xFDE
 15102                           postdec2	equ	0xFDD
 15103                           fsr2h	equ	0xFDA
 15104                           fsr2l	equ	0xFD9
 15105                           status	equ	0xFD8
 15106                           
 15107 ;; *************** function _PlatformTest *****************
 15108 ;; Defined at:
 15109 ;;		line 434 in file "Test.c"
 15110 ;; Parameters:    Size  Location     Type
 15111 ;;		None
 15112 ;; Auto vars:     Size  Location     Type
 15113 ;;  i               2   51[BANK0 ] int 
 15114 ;;  i               2   49[BANK0 ] int 
 15115 ;;  res             2   47[BANK0 ] int 
 15116 ;;  res             2   45[BANK0 ] int 
 15117 ;;  on              2   53[BANK0 ] int 
 15118 ;; Return value:  Size  Location     Type
 15119 ;;                  1    wreg      void 
 15120 ;; Registers used:
 15121 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15122 ;; Tracked objects:
 15123 ;;		On entry : 0/0
 15124 ;;		On exit  : 0/0
 15125 ;;		Unchanged: 0/0
 15126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15128 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15129 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15130 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15131 ;;Total ram usage:       12 bytes
 15132 ;; Hardware stack levels used:    1
 15133 ;; Hardware stack levels required when called:   10
 15134 ;; This function calls:
 15135 ;;		_lcdInst
 15136 ;;		_printf
 15137 ;;		_readADC
 15138 ;;		_stopSignals
 15139 ;; This function is called by:
 15140 ;;		_Test
 15141 ;; This function uses a non-reentrant model
 15142 ;;
 15143                           
 15144                           	psect	text49
 15145  002706                     __ptext49:
 15146                           	opt stack 0
 15147  002706                     _PlatformTest:
 15148                           	opt stack 19
 15149                           
 15150                           ;Test.c: 435: LATCbits.LATC5 = 1;
 15151                           
 15152                           ;incstack = 0
 15153  002706  8A8B               	bsf	3979,5,c	;volatile
 15154                           
 15155                           ;Test.c: 437: machine_state = Sorting_state;
 15156  002708  0E01               	movlw	1
 15157  00270A  0100               	movlb	0	; () banked
 15158  00270C  6FFC               	movwf	_machine_state& (0+255),b
 15159                           
 15160                           ;Test.c: 438: f_arm_position = 0;
 15161  00270E  0E00               	movlw	0
 15162  002710  0100               	movlb	0	; () banked
 15163  002712  6FF1               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 15164  002714  0E00               	movlw	0
 15165  002716  6FF0               	movwf	_f_arm_position& (0+255),b	;volatile
 15166                           
 15167                           ;Test.c: 439: timer2_counter = 0;
 15168  002718  0E00               	movlw	0
 15169  00271A  6E74               	movwf	_timer2_counter+1,c	;volatile
 15170  00271C  0E00               	movlw	0
 15171  00271E  6E73               	movwf	_timer2_counter,c	;volatile
 15172                           
 15173                           ; BSR set to: 0
 15174                           ;Test.c: 440: LATBbits.LATB3 = 0;
 15175  002720  968A               	bcf	3978,3,c	;volatile
 15176                           
 15177                           ; BSR set to: 0
 15178                           ;Test.c: 441: TMR2ON = 1;
 15179  002722  84CA               	bsf	4042,2,c	;volatile
 15180                           
 15181                           ;Test.c: 442: was_low_2 = 0;
 15182  002724  0E00               	movlw	0
 15183  002726  6E7A               	movwf	_was_low_2+1,c	;volatile
 15184  002728  0E00               	movlw	0
 15185  00272A  6E79               	movwf	_was_low_2,c	;volatile
 15186                           
 15187                           ;Test.c: 444: int on = 1;
 15188  00272C  0E00               	movlw	0
 15189  00272E  0100               	movlb	0	; () banked
 15190  002730  6FB6               	movwf	(PlatformTest@on+1)& (0+255),b
 15191  002732  0E01               	movlw	1
 15192  002734  6FB5               	movwf	PlatformTest@on& (0+255),b
 15193                           
 15194                           ; BSR set to: 0
 15195                           ;Test.c: 445: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15196  002736  0E01               	movlw	1
 15197  002738  ECBB  F02D         	call	_lcdInst
 15198  00273C  0E68               	movlw	104
 15199  00273E  0100               	movlb	0	; () banked
 15200  002740  6FAB               	movwf	??_PlatformTest& (0+255),b
 15201  002742  0EE4               	movlw	228
 15202  002744                     u10937:
 15203  002744  2EE8               	decfsz	wreg,f,c
 15204  002746  D7FE               	bra	u10937
 15205  002748  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15206  00274A  D7FC               	bra	u10937
 15207  00274C  F000               	nop	
 15208  00274E  0E80               	movlw	128
 15209  002750  ECBB  F02D         	call	_lcdInst
 15210                           
 15211                           ;Test.c: 446: printf("1: DC | A: ARM  ");
 15212  002754  0EFC               	movlw	low STR_113
 15213  002756  0100               	movlb	0	; () banked
 15214  002758  6F8E               	movwf	printf@f& (0+255),b
 15215  00275A  0EFB               	movlw	high STR_113
 15216  00275C  0100               	movlb	0	; () banked
 15217  00275E  6F8F               	movwf	(printf@f+1)& (0+255),b
 15218  002760  ECC1  F00B         	call	_printf	;wreg free
 15219                           
 15220                           ;Test.c: 448: while(PORTBbits.RB1 == 0){
 15221  002764  D058               	goto	l8875
 15222  002766                     l8857:
 15223                           
 15224                           ;Test.c: 449: readADC(0);
 15225  002766  0E00               	movlw	0
 15226  002768  ECA6  F02C         	call	_readADC
 15227                           
 15228                           ;Test.c: 450: int res = ADRESH<<8 | ADRESL;
 15229  00276C  50C3               	movf	4035,w,c	;volatile
 15230  00276E  CFC4 F0AB          	movff	4036,??_PlatformTest	;volatile
 15231  002772  0100               	movlb	0	; () banked
 15232  002774  6BAC               	clrf	(??_PlatformTest+1)& (0+255),b
 15233  002776  C0AB  F0AC         	movff	??_PlatformTest,??_PlatformTest+1
 15234  00277A  0100               	movlb	0	; () banked
 15235  00277C  6BAB               	clrf	??_PlatformTest& (0+255),b
 15236  00277E  0100               	movlb	0	; () banked
 15237  002780  11AB               	iorwf	??_PlatformTest& (0+255),w,b
 15238  002782  0100               	movlb	0	; () banked
 15239  002784  6FAD               	movwf	PlatformTest@res& (0+255),b
 15240  002786  0100               	movlb	0	; () banked
 15241  002788  51AC               	movf	(??_PlatformTest+1)& (0+255),w,b
 15242  00278A  0100               	movlb	0	; () banked
 15243  00278C  6FAE               	movwf	(PlatformTest@res+1)& (0+255),b
 15244                           
 15245                           ; BSR set to: 0
 15246                           ;Test.c: 451: IR_signal = (res > 800) ? 1 : 0;
 15247  00278E  0100               	movlb	0	; () banked
 15248  002790  BFAE               	btfsc	(PlatformTest@res+1)& (0+255),7,b
 15249  002792  D00A               	goto	u7900
 15250  002794  0E21               	movlw	33
 15251  002796  0100               	movlb	0	; () banked
 15252  002798  5DAD               	subwf	PlatformTest@res& (0+255),w,b
 15253  00279A  0E03               	movlw	3
 15254  00279C  0100               	movlb	0	; () banked
 15255  00279E  59AE               	subwfb	(PlatformTest@res+1)& (0+255),w,b
 15256  0027A0  A0D8               	btfss	status,0,c
 15257  0027A2  D002               	goto	u7900
 15258  0027A4  0E01               	movlw	1
 15259  0027A6  D001               	goto	u7910
 15260  0027A8                     u7900:
 15261  0027A8  0E00               	movlw	0
 15262  0027AA                     u7910:
 15263  0027AA  0100               	movlb	0	; () banked
 15264  0027AC  6FE8               	movwf	_IR_signal& (0+255),b
 15265  0027AE  6BE9               	clrf	(_IR_signal+1)& (0+255),b
 15266                           
 15267                           ;Test.c: 453: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15268  0027B0  0E01               	movlw	1
 15269  0027B2  ECBB  F02D         	call	_lcdInst
 15270  0027B6  0E68               	movlw	104
 15271  0027B8  0100               	movlb	0	; () banked
 15272  0027BA  6FAB               	movwf	??_PlatformTest& (0+255),b
 15273  0027BC  0EE4               	movlw	228
 15274  0027BE                     u10947:
 15275  0027BE  2EE8               	decfsz	wreg,f,c
 15276  0027C0  D7FE               	bra	u10947
 15277  0027C2  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15278  0027C4  D7FC               	bra	u10947
 15279  0027C6  F000               	nop	
 15280  0027C8  0E80               	movlw	128
 15281  0027CA  ECBB  F02D         	call	_lcdInst
 15282                           
 15283                           ;Test.c: 454: printf("1: DC | A: ARM  ");
 15284  0027CE  0EFC               	movlw	low STR_113
 15285  0027D0  0100               	movlb	0	; () banked
 15286  0027D2  6F8E               	movwf	printf@f& (0+255),b
 15287  0027D4  0EFB               	movlw	high STR_113
 15288  0027D6  0100               	movlb	0	; () banked
 15289  0027D8  6F8F               	movwf	(printf@f+1)& (0+255),b
 15290  0027DA  ECC1  F00B         	call	_printf	;wreg free
 15291                           
 15292                           ;Test.c: 455: lcdInst(0b11000000);;
 15293  0027DE  0EC0               	movlw	192
 15294  0027E0  ECBB  F02D         	call	_lcdInst
 15295                           
 15296                           ;Test.c: 456: printf("5:H|6:L|IR:%d   ", res);
 15297  0027E4  0EEB               	movlw	low STR_115
 15298  0027E6  0100               	movlb	0	; () banked
 15299  0027E8  6F8E               	movwf	printf@f& (0+255),b
 15300  0027EA  0EFB               	movlw	high STR_115
 15301  0027EC  0100               	movlb	0	; () banked
 15302  0027EE  6F8F               	movwf	(printf@f+1)& (0+255),b
 15303  0027F0  C0AD  F090         	movff	PlatformTest@res,?_printf+2
 15304  0027F4  C0AE  F091         	movff	PlatformTest@res+1,?_printf+3
 15305  0027F8  ECC1  F00B         	call	_printf	;wreg free
 15306                           
 15307                           ;Test.c: 457: _delay((unsigned long)((100)*(32000000/4000.0)));
 15308  0027FC  0E05               	movlw	5
 15309  0027FE  0100               	movlb	0	; () banked
 15310  002800  6FAC               	movwf	(??_PlatformTest+1)& (0+255),b
 15311  002802  0E0F               	movlw	15
 15312  002804  0100               	movlb	0	; () banked
 15313  002806  6FAB               	movwf	??_PlatformTest& (0+255),b
 15314  002808  0EF1               	movlw	241
 15315  00280A                     u10957:
 15316  00280A  2EE8               	decfsz	wreg,f,c
 15317  00280C  D7FE               	bra	u10957
 15318  00280E  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15319  002810  D7FC               	bra	u10957
 15320  002812  2FAC               	decfsz	(??_PlatformTest+1)& (0+255),f,b
 15321  002814  D7FA               	bra	u10957
 15322  002816                     l8875:
 15323  002816  B281               	btfsc	3969,1,c	;volatile
 15324  002818  D059               	goto	l8895
 15325  00281A  D7A5               	goto	l8857
 15326  00281C                     l8877:
 15327                           
 15328                           ;Test.c: 462: readADC(0);
 15329  00281C  0E00               	movlw	0
 15330  00281E  ECA6  F02C         	call	_readADC
 15331                           
 15332                           ;Test.c: 463: int res = ADRESH<<8 | ADRESL;
 15333  002822  50C3               	movf	4035,w,c	;volatile
 15334  002824  CFC4 F0AB          	movff	4036,??_PlatformTest	;volatile
 15335  002828  0100               	movlb	0	; () banked
 15336  00282A  6BAC               	clrf	(??_PlatformTest+1)& (0+255),b
 15337  00282C  C0AB  F0AC         	movff	??_PlatformTest,??_PlatformTest+1
 15338  002830  0100               	movlb	0	; () banked
 15339  002832  6BAB               	clrf	??_PlatformTest& (0+255),b
 15340  002834  0100               	movlb	0	; () banked
 15341  002836  11AB               	iorwf	??_PlatformTest& (0+255),w,b
 15342  002838  0100               	movlb	0	; () banked
 15343  00283A  6FAF               	movwf	PlatformTest@res_1785& (0+255),b
 15344  00283C  0100               	movlb	0	; () banked
 15345  00283E  51AC               	movf	(??_PlatformTest+1)& (0+255),w,b
 15346  002840  0100               	movlb	0	; () banked
 15347  002842  6FB0               	movwf	(PlatformTest@res_1785+1)& (0+255),b
 15348                           
 15349                           ; BSR set to: 0
 15350                           ;Test.c: 464: IR_signal = (res > 800) ? 1 : 0;
 15351  002844  0100               	movlb	0	; () banked
 15352  002846  BFB0               	btfsc	(PlatformTest@res_1785+1)& (0+255),7,b
 15353  002848  D00A               	goto	u7930
 15354  00284A  0E21               	movlw	33
 15355  00284C  0100               	movlb	0	; () banked
 15356  00284E  5DAF               	subwf	PlatformTest@res_1785& (0+255),w,b
 15357  002850  0E03               	movlw	3
 15358  002852  0100               	movlb	0	; () banked
 15359  002854  59B0               	subwfb	(PlatformTest@res_1785+1)& (0+255),w,b
 15360  002856  A0D8               	btfss	status,0,c
 15361  002858  D002               	goto	u7930
 15362  00285A  0E01               	movlw	1
 15363  00285C  D001               	goto	u7940
 15364  00285E                     u7930:
 15365  00285E  0E00               	movlw	0
 15366  002860                     u7940:
 15367  002860  0100               	movlb	0	; () banked
 15368  002862  6FE8               	movwf	_IR_signal& (0+255),b
 15369  002864  6BE9               	clrf	(_IR_signal+1)& (0+255),b
 15370                           
 15371                           ;Test.c: 466: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15372  002866  0E01               	movlw	1
 15373  002868  ECBB  F02D         	call	_lcdInst
 15374  00286C  0E68               	movlw	104
 15375  00286E  0100               	movlb	0	; () banked
 15376  002870  6FAB               	movwf	??_PlatformTest& (0+255),b
 15377  002872  0EE4               	movlw	228
 15378  002874                     u10967:
 15379  002874  2EE8               	decfsz	wreg,f,c
 15380  002876  D7FE               	bra	u10967
 15381  002878  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15382  00287A  D7FC               	bra	u10967
 15383  00287C  F000               	nop	
 15384  00287E  0E80               	movlw	128
 15385  002880  ECBB  F02D         	call	_lcdInst
 15386                           
 15387                           ;Test.c: 467: printf("1: DC | A: ARM  ");
 15388  002884  0EFC               	movlw	low STR_113
 15389  002886  0100               	movlb	0	; () banked
 15390  002888  6F8E               	movwf	printf@f& (0+255),b
 15391  00288A  0EFB               	movlw	high STR_113
 15392  00288C  0100               	movlb	0	; () banked
 15393  00288E  6F8F               	movwf	(printf@f+1)& (0+255),b
 15394  002890  ECC1  F00B         	call	_printf	;wreg free
 15395                           
 15396                           ;Test.c: 468: lcdInst(0b11000000);;
 15397  002894  0EC0               	movlw	192
 15398  002896  ECBB  F02D         	call	_lcdInst
 15399                           
 15400                           ;Test.c: 469: printf("5:H|6:L|IR:%d   ", res);
 15401  00289A  0EEB               	movlw	low STR_115
 15402  00289C  0100               	movlb	0	; () banked
 15403  00289E  6F8E               	movwf	printf@f& (0+255),b
 15404  0028A0  0EFB               	movlw	high STR_115
 15405  0028A2  0100               	movlb	0	; () banked
 15406  0028A4  6F8F               	movwf	(printf@f+1)& (0+255),b
 15407  0028A6  C0AF  F090         	movff	PlatformTest@res_1785,?_printf+2
 15408  0028AA  C0B0  F091         	movff	PlatformTest@res_1785+1,?_printf+3
 15409  0028AE  ECC1  F00B         	call	_printf	;wreg free
 15410                           
 15411                           ;Test.c: 470: _delay((unsigned long)((100)*(32000000/4000.0)));
 15412  0028B2  0E05               	movlw	5
 15413  0028B4  0100               	movlb	0	; () banked
 15414  0028B6  6FAC               	movwf	(??_PlatformTest+1)& (0+255),b
 15415  0028B8  0E0F               	movlw	15
 15416  0028BA  0100               	movlb	0	; () banked
 15417  0028BC  6FAB               	movwf	??_PlatformTest& (0+255),b
 15418  0028BE  0EF1               	movlw	241
 15419  0028C0                     u10977:
 15420  0028C0  2EE8               	decfsz	wreg,f,c
 15421  0028C2  D7FE               	bra	u10977
 15422  0028C4  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15423  0028C6  D7FC               	bra	u10977
 15424  0028C8  2FAC               	decfsz	(??_PlatformTest+1)& (0+255),f,b
 15425  0028CA  D7FA               	bra	u10977
 15426  0028CC                     l8895:
 15427  0028CC  A281               	btfss	3969,1,c	;volatile
 15428  0028CE  D7A6               	goto	l8877
 15429                           
 15430                           ;Test.c: 471: }
 15431                           ;Test.c: 472: if(PORTB >> 4 == 0b1111){
 15432  0028D0  3881               	swapf	3969,w,c	;volatile
 15433  0028D2  0B0F               	andlw	15
 15434  0028D4  0A0F               	xorlw	15
 15435  0028D6  B4D8               	btfsc	status,2,c
 15436  0028D8  D09A               	goto	l1379
 15437                           
 15438                           ;Test.c: 475: else if(PORTB >> 4 == 0b0000){
 15439                           
 15440                           ;Test.c: 474: }
 15441                           
 15442                           ;Test.c: 473: break;
 15443  0028DA  CF81 F0AB          	movff	3969,??_PlatformTest	;volatile
 15444  0028DE  0100               	movlb	0	; () banked
 15445  0028E0  3BAB               	swapf	??_PlatformTest& (0+255),f,b
 15446  0028E2  0E0F               	movlw	15
 15447  0028E4  17AB               	andwf	??_PlatformTest& (0+255),f,b
 15448  0028E6  A4D8               	btfss	status,2,c
 15449  0028E8  D012               	goto	l8907
 15450                           
 15451                           ; BSR set to: 0
 15452                           ;Test.c: 476: LATBbits.LATB2 = !LATBbits.LATB2;
 15453  0028EA  B48A               	btfsc	3978,2,c	;volatile
 15454  0028EC  D004               	goto	u7980
 15455  0028EE  0100               	movlb	0	; () banked
 15456  0028F0  6BAB               	clrf	??_PlatformTest& (0+255),b
 15457  0028F2  2BAB               	incf	??_PlatformTest& (0+255),f,b
 15458  0028F4  D002               	goto	u7998
 15459  0028F6                     u7980:
 15460  0028F6  0100               	movlb	0	; () banked
 15461  0028F8  6BAB               	clrf	??_PlatformTest& (0+255),b
 15462  0028FA                     u7998:
 15463  0028FA  0100               	movlb	0	; () banked
 15464  0028FC  47AB               	rlncf	??_PlatformTest& (0+255),f,b
 15465  0028FE  47AB               	rlncf	??_PlatformTest& (0+255),f,b
 15466  002900  508A               	movf	3978,w,c	;volatile
 15467  002902  0100               	movlb	0	; () banked
 15468  002904  19AB               	xorwf	??_PlatformTest& (0+255),w,b
 15469  002906  0BFB               	andlw	-5
 15470  002908  19AB               	xorwf	??_PlatformTest& (0+255),w,b
 15471  00290A  6E8A               	movwf	3978,c	;volatile
 15472                           
 15473                           ;Test.c: 477: }
 15474  00290C  D07D               	goto	l1394
 15475  00290E                     l8907:
 15476                           
 15477                           ; BSR set to: 0
 15478                           ;Test.c: 478: else if(PORTB >> 4 == 0b0011){
 15479  00290E  3881               	swapf	3969,w,c	;volatile
 15480  002910  0B0F               	andlw	15
 15481  002912  0A03               	xorlw	3
 15482  002914  A4D8               	btfss	status,2,c
 15483  002916  D020               	goto	l8919
 15484                           
 15485                           ; BSR set to: 0
 15486                           ;Test.c: 479: if(on){
 15487  002918  0100               	movlb	0	; () banked
 15488  00291A  51B5               	movf	PlatformTest@on& (0+255),w,b
 15489  00291C  0100               	movlb	0	; () banked
 15490  00291E  11B6               	iorwf	(PlatformTest@on+1)& (0+255),w,b
 15491  002920  B4D8               	btfsc	status,2,c
 15492  002922  D010               	goto	l8915
 15493                           
 15494                           ; BSR set to: 0
 15495                           ;Test.c: 480: f_arm_position = 1;
 15496  002924  0E00               	movlw	0
 15497  002926  0100               	movlb	0	; () banked
 15498  002928  6FF1               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 15499  00292A  0E01               	movlw	1
 15500  00292C  D00F               	goto	L15
 15501  00292E                     l8913:
 15502                           
 15503                           ; BSR set to: 0
 15504                           ;Test.c: 481: on = !on;
 15505  00292E  0100               	movlb	0	; () banked
 15506  002930  51B5               	movf	PlatformTest@on& (0+255),w,b
 15507  002932  0100               	movlb	0	; () banked
 15508  002934  11B6               	iorwf	(PlatformTest@on+1)& (0+255),w,b
 15509  002936  A4D8               	btfss	status,2,c
 15510  002938  D00D               	goto	u8040
 15511  00293A  D00A               	goto	u8041
 15512  00293C                     u8030:
 15513  00293C  0100               	movlb	0	; () banked
 15514  00293E  6FB5               	movwf	PlatformTest@on& (0+255),b
 15515  002940  6BB6               	clrf	(PlatformTest@on+1)& (0+255),b
 15516                           
 15517                           ;Test.c: 482: }
 15518  002942  D062               	goto	l1394
 15519  002944                     l8915:
 15520                           
 15521                           ; BSR set to: 0
 15522                           ;Test.c: 483: else{
 15523                           ;Test.c: 484: f_arm_position = 0;
 15524  002944  0E00               	movlw	0
 15525  002946  0100               	movlb	0	; () banked
 15526  002948  6FF1               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 15527  00294A  0E00               	movlw	0
 15528  00294C                     L15:
 15529  00294C  6FF0               	movwf	_f_arm_position& (0+255),b	;volatile
 15530  00294E  D7EF               	goto	l8913
 15531  002950                     u8041:
 15532  002950  0E01               	movlw	1
 15533  002952  D7F4               	goto	u8030
 15534  002954                     u8040:
 15535  002954  0E00               	movlw	0
 15536  002956  D7F2               	goto	u8030
 15537  002958                     l8919:
 15538                           
 15539                           ; BSR set to: 0
 15540                           ;Test.c: 488: else if(PORTB >> 4 == 0b0101){
 15541  002958  3881               	swapf	3969,w,c	;volatile
 15542  00295A  0B0F               	andlw	15
 15543  00295C  0A05               	xorlw	5
 15544  00295E  A4D8               	btfss	status,2,c
 15545  002960  D027               	goto	l8933
 15546                           
 15547                           ; BSR set to: 0
 15548                           ;Test.c: 490: for(int i = 0; i<30; i++){
 15549  002962  0E00               	movlw	0
 15550  002964  0100               	movlb	0	; () banked
 15551  002966  6FB2               	movwf	(PlatformTest@i+1)& (0+255),b
 15552  002968  0E00               	movlw	0
 15553  00296A  6FB1               	movwf	PlatformTest@i& (0+255),b
 15554  00296C                     l8923:
 15555                           
 15556                           ; BSR set to: 0
 15557  00296C  0100               	movlb	0	; () banked
 15558  00296E  BFB2               	btfsc	(PlatformTest@i+1)& (0+255),7,b
 15559  002970  D008               	goto	l1388
 15560  002972  0100               	movlb	0	; () banked
 15561  002974  51B2               	movf	(PlatformTest@i+1)& (0+255),w,b
 15562  002976  E148               	bnz	l1394
 15563  002978  0E1E               	movlw	30
 15564  00297A  0100               	movlb	0	; () banked
 15565  00297C  5DB1               	subwf	PlatformTest@i& (0+255),w,b
 15566  00297E  B0D8               	btfsc	status,0,c
 15567  002980  D043               	goto	l1394
 15568  002982                     l1388:
 15569                           
 15570                           ; BSR set to: 0
 15571                           ;Test.c: 491: LATAbits.LATA4 = 1;
 15572  002982  8889               	bsf	3977,4,c	;volatile
 15573                           
 15574                           ; BSR set to: 0
 15575                           ;Test.c: 492: _delay((unsigned long)((7500)*(32000000/4000000.0)));
 15576  002984  0E4E               	movlw	78
 15577  002986  0100               	movlb	0	; () banked
 15578  002988  6FAB               	movwf	??_PlatformTest& (0+255),b
 15579  00298A  0EEB               	movlw	235
 15580  00298C                     u10987:
 15581  00298C  2EE8               	decfsz	wreg,f,c
 15582  00298E  D7FE               	bra	u10987
 15583  002990  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15584  002992  D7FC               	bra	u10987
 15585                           
 15586                           ;Test.c: 493: LATAbits.LATA4 = 0;
 15587  002994  9889               	bcf	3977,4,c	;volatile
 15588                           
 15589                           ;Test.c: 494: _delay((unsigned long)((2500)*(32000000/4000000.0)));
 15590  002996  0E1A               	movlw	26
 15591  002998  0100               	movlb	0	; () banked
 15592  00299A  6FAB               	movwf	??_PlatformTest& (0+255),b
 15593  00299C  0EF8               	movlw	248
 15594  00299E                     u10997:
 15595  00299E  2EE8               	decfsz	wreg,f,c
 15596  0029A0  D7FE               	bra	u10997
 15597  0029A2  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15598  0029A4  D7FC               	bra	u10997
 15599  0029A6  F000               	nop	
 15600  0029A8  0100               	movlb	0	; () banked
 15601  0029AA  4BB1               	infsnz	PlatformTest@i& (0+255),f,b
 15602  0029AC  2BB2               	incf	(PlatformTest@i+1)& (0+255),f,b
 15603  0029AE  D7DE               	goto	l8923
 15604  0029B0                     l8933:
 15605                           
 15606                           ; BSR set to: 0
 15607                           ;Test.c: 497: else if (PORTB >> 4 == 0b0110){
 15608  0029B0  3881               	swapf	3969,w,c	;volatile
 15609  0029B2  0B0F               	andlw	15
 15610  0029B4  0A06               	xorlw	6
 15611  0029B6  A4D8               	btfss	status,2,c
 15612  0029B8  D027               	goto	l1394
 15613                           
 15614                           ; BSR set to: 0
 15615                           ;Test.c: 499: for(int i = 0; i<30; i++){
 15616  0029BA  0E00               	movlw	0
 15617  0029BC  0100               	movlb	0	; () banked
 15618  0029BE  6FB4               	movwf	(PlatformTest@i_1789+1)& (0+255),b
 15619  0029C0  0E00               	movlw	0
 15620  0029C2  6FB3               	movwf	PlatformTest@i_1789& (0+255),b
 15621  0029C4                     l8937:
 15622                           
 15623                           ; BSR set to: 0
 15624  0029C4  0100               	movlb	0	; () banked
 15625  0029C6  BFB4               	btfsc	(PlatformTest@i_1789+1)& (0+255),7,b
 15626  0029C8  D008               	goto	l1392
 15627  0029CA  0100               	movlb	0	; () banked
 15628  0029CC  51B4               	movf	(PlatformTest@i_1789+1)& (0+255),w,b
 15629  0029CE  E11C               	bnz	l1394
 15630  0029D0  0E1E               	movlw	30
 15631  0029D2  0100               	movlb	0	; () banked
 15632  0029D4  5DB3               	subwf	PlatformTest@i_1789& (0+255),w,b
 15633  0029D6  B0D8               	btfsc	status,0,c
 15634  0029D8  D017               	goto	l1394
 15635  0029DA                     l1392:
 15636                           
 15637                           ; BSR set to: 0
 15638                           ;Test.c: 500: LATAbits.LATA4 = 1;
 15639  0029DA  8889               	bsf	3977,4,c	;volatile
 15640                           
 15641                           ; BSR set to: 0
 15642                           ;Test.c: 501: _delay((unsigned long)((5800)*(32000000/4000000.0)));
 15643  0029DC  0E3D               	movlw	61
 15644  0029DE  0100               	movlb	0	; () banked
 15645  0029E0  6FAB               	movwf	??_PlatformTest& (0+255),b
 15646  0029E2  0E41               	movlw	65
 15647  0029E4                     u11007:
 15648  0029E4  2EE8               	decfsz	wreg,f,c
 15649  0029E6  D7FE               	bra	u11007
 15650  0029E8  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15651  0029EA  D7FC               	bra	u11007
 15652                           
 15653                           ;Test.c: 502: LATAbits.LATA4 = 0;
 15654  0029EC  9889               	bcf	3977,4,c	;volatile
 15655                           
 15656                           ;Test.c: 503: _delay((unsigned long)((4200)*(32000000/4000000.0)));
 15657  0029EE  0E2C               	movlw	44
 15658  0029F0  0100               	movlb	0	; () banked
 15659  0029F2  6FAB               	movwf	??_PlatformTest& (0+255),b
 15660  0029F4  0EA1               	movlw	161
 15661  0029F6                     u11017:
 15662  0029F6  2EE8               	decfsz	wreg,f,c
 15663  0029F8  D7FE               	bra	u11017
 15664  0029FA  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15665  0029FC  D7FC               	bra	u11017
 15666  0029FE  D000               	nop2	
 15667  002A00  0100               	movlb	0	; () banked
 15668  002A02  4BB3               	infsnz	PlatformTest@i_1789& (0+255),f,b
 15669  002A04  2BB4               	incf	(PlatformTest@i_1789+1)& (0+255),f,b
 15670  002A06  D7DE               	goto	l8937
 15671  002A08                     l1394:
 15672  002A08  A281               	btfss	3969,1,c	;volatile
 15673  002A0A  D760               	goto	l8895
 15674  002A0C  D7FD               	goto	l1394
 15675  002A0E                     l1379:
 15676                           
 15677                           ;Test.c: 508: }
 15678                           ;Test.c: 510: LATCbits.LATC5 = 0;
 15679  002A0E  9A8B               	bcf	3979,5,c	;volatile
 15680                           
 15681                           ;Test.c: 511: stopSignals();
 15682  002A10  EC62  F02D         	call	_stopSignals	;wreg free
 15683                           
 15684                           ;Test.c: 512: machine_state = Testing_state;
 15685  002A14  0E03               	movlw	3
 15686  002A16  0100               	movlb	0	; () banked
 15687  002A18  6FFC               	movwf	_machine_state& (0+255),b
 15688                           
 15689                           ; BSR set to: 0
 15690  002A1A  0012               	return		;funcret
 15691  002A1C                     __end_of_PlatformTest:
 15692                           	opt stack 0
 15693                           tblptru	equ	0xFF8
 15694                           tblptrh	equ	0xFF7
 15695                           tblptrl	equ	0xFF6
 15696                           tablat	equ	0xFF5
 15697                           prodh	equ	0xFF4
 15698                           prodl	equ	0xFF3
 15699                           intcon	equ	0xFF2
 15700                           intcon2	equ	0xFF1
 15701                           intcon3	equ	0xFF0
 15702                           postinc0	equ	0xFEE
 15703                           wreg	equ	0xFE8
 15704                           postdec1	equ	0xFE5
 15705                           fsr1l	equ	0xFE1
 15706                           indf2	equ	0xFDF
 15707                           postinc2	equ	0xFDE
 15708                           postdec2	equ	0xFDD
 15709                           fsr2h	equ	0xFDA
 15710                           fsr2l	equ	0xFD9
 15711                           status	equ	0xFD8
 15712                           
 15713 ;; *************** function _BothServos *****************
 15714 ;; Defined at:
 15715 ;;		line 351 in file "Test.c"
 15716 ;; Parameters:    Size  Location     Type
 15717 ;;		None
 15718 ;; Auto vars:     Size  Location     Type
 15719 ;;		None
 15720 ;; Return value:  Size  Location     Type
 15721 ;;                  1    wreg      void 
 15722 ;; Registers used:
 15723 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15724 ;; Tracked objects:
 15725 ;;		On entry : 0/0
 15726 ;;		On exit  : 0/0
 15727 ;;		Unchanged: 0/0
 15728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15731 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15732 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15733 ;;Total ram usage:        2 bytes
 15734 ;; Hardware stack levels used:    1
 15735 ;; Hardware stack levels required when called:   10
 15736 ;; This function calls:
 15737 ;;		_initServos
 15738 ;;		_lcdInst
 15739 ;;		_printf
 15740 ;;		_stopSignals
 15741 ;;		_updateServoPosition
 15742 ;; This function is called by:
 15743 ;;		_Test
 15744 ;; This function uses a non-reentrant model
 15745 ;;
 15746                           
 15747                           	psect	text50
 15748  001FAA                     __ptext50:
 15749                           	opt stack 0
 15750  001FAA                     _BothServos:
 15751                           	opt stack 19
 15752                           
 15753                           ;Test.c: 352: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15754                           
 15755                           ; BSR set to: 0
 15756                           ;incstack = 0
 15757  001FAA  0E01               	movlw	1
 15758  001FAC  ECBB  F02D         	call	_lcdInst
 15759  001FB0  0E68               	movlw	104
 15760  001FB2  0100               	movlb	0	; () banked
 15761  001FB4  6FAB               	movwf	??_BothServos& (0+255),b
 15762  001FB6  0EE4               	movlw	228
 15763  001FB8                     u11027:
 15764  001FB8  2EE8               	decfsz	wreg,f,c
 15765  001FBA  D7FE               	bra	u11027
 15766  001FBC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15767  001FBE  D7FC               	bra	u11027
 15768  001FC0  F000               	nop	
 15769  001FC2  0E80               	movlw	128
 15770  001FC4  ECBB  F02D         	call	_lcdInst
 15771                           
 15772                           ;Test.c: 353: printf("TST: BOTH SERVOS");
 15773  001FC8  0EA6               	movlw	low STR_110
 15774  001FCA  0100               	movlb	0	; () banked
 15775  001FCC  6F8E               	movwf	printf@f& (0+255),b
 15776  001FCE  0EFC               	movlw	high STR_110
 15777  001FD0  0100               	movlb	0	; () banked
 15778  001FD2  6F8F               	movwf	(printf@f+1)& (0+255),b
 15779  001FD4  ECC1  F00B         	call	_printf	;wreg free
 15780                           
 15781                           ;Test.c: 354: TMR1ON = 1;
 15782  001FD8  80CD               	bsf	4045,0,c	;volatile
 15783                           
 15784                           ;Test.c: 355: TMR3ON = 1;
 15785  001FDA  80B1               	bsf	4017,0,c	;volatile
 15786                           
 15787                           ;Test.c: 356: machine_state = Sorting_state;
 15788  001FDC  0E01               	movlw	1
 15789  001FDE  0100               	movlb	0	; () banked
 15790  001FE0  6FFC               	movwf	_machine_state& (0+255),b
 15791                           
 15792                           ; BSR set to: 0
 15793                           ;Test.c: 357: was_low_1 = 0;
 15794  001FE2  0E00               	movlw	0
 15795  001FE4  6E78               	movwf	_was_low_1+1,c	;volatile
 15796  001FE6  0E00               	movlw	0
 15797  001FE8  6E77               	movwf	_was_low_1,c	;volatile
 15798                           
 15799                           ; BSR set to: 0
 15800                           ;Test.c: 358: was_low_3 = 0;
 15801  001FEA  0E00               	movlw	0
 15802  001FEC  6E7C               	movwf	_was_low_3+1,c	;volatile
 15803  001FEE  0E00               	movlw	0
 15804  001FF0  6E7B               	movwf	_was_low_3,c	;volatile
 15805                           
 15806                           ; BSR set to: 0
 15807                           ;Test.c: 364: initServos();
 15808  001FF2  EC19  F027         	call	_initServos	;wreg free
 15809                           
 15810                           ;Test.c: 365: _delay((unsigned long)((1500)*(32000000/4000.0)));
 15811  001FF6  0E3D               	movlw	61
 15812  001FF8  0100               	movlb	0	; () banked
 15813  001FFA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15814  001FFC  0EE1               	movlw	225
 15815  001FFE  0100               	movlb	0	; () banked
 15816  002000  6FAB               	movwf	??_BothServos& (0+255),b
 15817  002002  0E3F               	movlw	63
 15818  002004                     u11037:
 15819  002004  2EE8               	decfsz	wreg,f,c
 15820  002006  D7FE               	bra	u11037
 15821  002008  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15822  00200A  D7FC               	bra	u11037
 15823  00200C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15824  00200E  D7FA               	bra	u11037
 15825  002010  D000               	nop2	
 15826                           
 15827                           ;Test.c: 367: updateServoPosition(500, 1);
 15828  002012  0E01               	movlw	1
 15829  002014  0100               	movlb	0	; () banked
 15830  002016  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15831  002018  0EF4               	movlw	244
 15832  00201A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15833  00201C  0E00               	movlw	0
 15834  00201E  0100               	movlb	0	; () banked
 15835  002020  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15836  002022  0E01               	movlw	1
 15837  002024  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15838  002026  EC94  F026         	call	_updateServoPosition	;wreg free
 15839                           
 15840                           ;Test.c: 368: updateServoPosition(1050, 3);
 15841  00202A  0E04               	movlw	4
 15842  00202C  0100               	movlb	0	; () banked
 15843  00202E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15844  002030  0E1A               	movlw	26
 15845  002032  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15846  002034  0E00               	movlw	0
 15847  002036  0100               	movlb	0	; () banked
 15848  002038  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15849  00203A  0E03               	movlw	3
 15850  00203C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15851  00203E  EC94  F026         	call	_updateServoPosition	;wreg free
 15852                           
 15853                           ;Test.c: 369: _delay((unsigned long)((750)*(32000000/4000.0)));
 15854  002042  0E1F               	movlw	31
 15855  002044  0100               	movlb	0	; () banked
 15856  002046  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15857  002048  0E71               	movlw	113
 15858  00204A  0100               	movlb	0	; () banked
 15859  00204C  6FAB               	movwf	??_BothServos& (0+255),b
 15860  00204E  0E1E               	movlw	30
 15861  002050                     u11047:
 15862  002050  2EE8               	decfsz	wreg,f,c
 15863  002052  D7FE               	bra	u11047
 15864  002054  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15865  002056  D7FC               	bra	u11047
 15866  002058  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15867  00205A  D7FA               	bra	u11047
 15868  00205C  F000               	nop	
 15869                           
 15870                           ;Test.c: 370: updateServoPosition(1260, 3);
 15871  00205E  0E04               	movlw	4
 15872  002060  0100               	movlb	0	; () banked
 15873  002062  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15874  002064  0EEC               	movlw	236
 15875  002066  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15876  002068  0E00               	movlw	0
 15877  00206A  0100               	movlb	0	; () banked
 15878  00206C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15879  00206E  0E03               	movlw	3
 15880  002070  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15881  002072  EC94  F026         	call	_updateServoPosition	;wreg free
 15882                           
 15883                           ;Test.c: 371: _delay((unsigned long)((700)*(32000000/4000.0)));
 15884  002076  0E1D               	movlw	29
 15885  002078  0100               	movlb	0	; () banked
 15886  00207A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15887  00207C  0E69               	movlw	105
 15888  00207E  0100               	movlb	0	; () banked
 15889  002080  6FAB               	movwf	??_BothServos& (0+255),b
 15890  002082  0EA5               	movlw	165
 15891  002084                     u11057:
 15892  002084  2EE8               	decfsz	wreg,f,c
 15893  002086  D7FE               	bra	u11057
 15894  002088  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15895  00208A  D7FC               	bra	u11057
 15896  00208C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15897  00208E  D7FA               	bra	u11057
 15898                           
 15899                           ;Test.c: 372: updateServoPosition(1050, 3);
 15900  002090  0E04               	movlw	4
 15901  002092  0100               	movlb	0	; () banked
 15902  002094  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15903  002096  0E1A               	movlw	26
 15904  002098  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15905  00209A  0E00               	movlw	0
 15906  00209C  0100               	movlb	0	; () banked
 15907  00209E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15908  0020A0  0E03               	movlw	3
 15909  0020A2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15910  0020A4  EC94  F026         	call	_updateServoPosition	;wreg free
 15911                           
 15912                           ;Test.c: 373: _delay((unsigned long)((750)*(32000000/4000.0)));
 15913  0020A8  0E1F               	movlw	31
 15914  0020AA  0100               	movlb	0	; () banked
 15915  0020AC  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15916  0020AE  0E71               	movlw	113
 15917  0020B0  0100               	movlb	0	; () banked
 15918  0020B2  6FAB               	movwf	??_BothServos& (0+255),b
 15919  0020B4  0E1E               	movlw	30
 15920  0020B6                     u11067:
 15921  0020B6  2EE8               	decfsz	wreg,f,c
 15922  0020B8  D7FE               	bra	u11067
 15923  0020BA  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15924  0020BC  D7FC               	bra	u11067
 15925  0020BE  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15926  0020C0  D7FA               	bra	u11067
 15927  0020C2  F000               	nop	
 15928                           
 15929                           ;Test.c: 375: updateServoPosition(850, 1);
 15930  0020C4  0E03               	movlw	3
 15931  0020C6  0100               	movlb	0	; () banked
 15932  0020C8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15933  0020CA  0E52               	movlw	82
 15934  0020CC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15935  0020CE  0E00               	movlw	0
 15936  0020D0  0100               	movlb	0	; () banked
 15937  0020D2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15938  0020D4  0E01               	movlw	1
 15939  0020D6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15940  0020D8  EC94  F026         	call	_updateServoPosition	;wreg free
 15941                           
 15942                           ;Test.c: 376: updateServoPosition(1050, 3);
 15943  0020DC  0E04               	movlw	4
 15944  0020DE  0100               	movlb	0	; () banked
 15945  0020E0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15946  0020E2  0E1A               	movlw	26
 15947  0020E4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15948  0020E6  0E00               	movlw	0
 15949  0020E8  0100               	movlb	0	; () banked
 15950  0020EA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15951  0020EC  0E03               	movlw	3
 15952  0020EE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15953  0020F0  EC94  F026         	call	_updateServoPosition	;wreg free
 15954                           
 15955                           ;Test.c: 377: _delay((unsigned long)((750)*(32000000/4000.0)));
 15956  0020F4  0E1F               	movlw	31
 15957  0020F6  0100               	movlb	0	; () banked
 15958  0020F8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15959  0020FA  0E71               	movlw	113
 15960  0020FC  0100               	movlb	0	; () banked
 15961  0020FE  6FAB               	movwf	??_BothServos& (0+255),b
 15962  002100  0E1E               	movlw	30
 15963  002102                     u11077:
 15964  002102  2EE8               	decfsz	wreg,f,c
 15965  002104  D7FE               	bra	u11077
 15966  002106  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15967  002108  D7FC               	bra	u11077
 15968  00210A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15969  00210C  D7FA               	bra	u11077
 15970  00210E  F000               	nop	
 15971                           
 15972                           ;Test.c: 378: updateServoPosition(1260, 3);
 15973  002110  0E04               	movlw	4
 15974  002112  0100               	movlb	0	; () banked
 15975  002114  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15976  002116  0EEC               	movlw	236
 15977  002118  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15978  00211A  0E00               	movlw	0
 15979  00211C  0100               	movlb	0	; () banked
 15980  00211E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15981  002120  0E03               	movlw	3
 15982  002122  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15983  002124  EC94  F026         	call	_updateServoPosition	;wreg free
 15984                           
 15985                           ;Test.c: 379: _delay((unsigned long)((700)*(32000000/4000.0)));
 15986  002128  0E1D               	movlw	29
 15987  00212A  0100               	movlb	0	; () banked
 15988  00212C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15989  00212E  0E69               	movlw	105
 15990  002130  0100               	movlb	0	; () banked
 15991  002132  6FAB               	movwf	??_BothServos& (0+255),b
 15992  002134  0EA5               	movlw	165
 15993  002136                     u11087:
 15994  002136  2EE8               	decfsz	wreg,f,c
 15995  002138  D7FE               	bra	u11087
 15996  00213A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15997  00213C  D7FC               	bra	u11087
 15998  00213E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15999  002140  D7FA               	bra	u11087
 16000                           
 16001                           ;Test.c: 380: updateServoPosition(1050, 3);
 16002  002142  0E04               	movlw	4
 16003  002144  0100               	movlb	0	; () banked
 16004  002146  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16005  002148  0E1A               	movlw	26
 16006  00214A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16007  00214C  0E00               	movlw	0
 16008  00214E  0100               	movlb	0	; () banked
 16009  002150  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16010  002152  0E03               	movlw	3
 16011  002154  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16012  002156  EC94  F026         	call	_updateServoPosition	;wreg free
 16013                           
 16014                           ;Test.c: 381: _delay((unsigned long)((750)*(32000000/4000.0)));
 16015  00215A  0E1F               	movlw	31
 16016  00215C  0100               	movlb	0	; () banked
 16017  00215E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16018  002160  0E71               	movlw	113
 16019  002162  0100               	movlb	0	; () banked
 16020  002164  6FAB               	movwf	??_BothServos& (0+255),b
 16021  002166  0E1E               	movlw	30
 16022  002168                     u11097:
 16023  002168  2EE8               	decfsz	wreg,f,c
 16024  00216A  D7FE               	bra	u11097
 16025  00216C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16026  00216E  D7FC               	bra	u11097
 16027  002170  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16028  002172  D7FA               	bra	u11097
 16029  002174  F000               	nop	
 16030                           
 16031                           ;Test.c: 383: updateServoPosition(500, 1);
 16032  002176  0E01               	movlw	1
 16033  002178  0100               	movlb	0	; () banked
 16034  00217A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16035  00217C  0EF4               	movlw	244
 16036  00217E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16037  002180  0E00               	movlw	0
 16038  002182  0100               	movlb	0	; () banked
 16039  002184  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16040  002186  0E01               	movlw	1
 16041  002188  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16042  00218A  EC94  F026         	call	_updateServoPosition	;wreg free
 16043                           
 16044                           ;Test.c: 384: updateServoPosition(1050, 3);
 16045  00218E  0E04               	movlw	4
 16046  002190  0100               	movlb	0	; () banked
 16047  002192  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16048  002194  0E1A               	movlw	26
 16049  002196  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16050  002198  0E00               	movlw	0
 16051  00219A  0100               	movlb	0	; () banked
 16052  00219C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16053  00219E  0E03               	movlw	3
 16054  0021A0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16055  0021A2  EC94  F026         	call	_updateServoPosition	;wreg free
 16056                           
 16057                           ;Test.c: 385: _delay((unsigned long)((750)*(32000000/4000.0)));
 16058  0021A6  0E1F               	movlw	31
 16059  0021A8  0100               	movlb	0	; () banked
 16060  0021AA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16061  0021AC  0E71               	movlw	113
 16062  0021AE  0100               	movlb	0	; () banked
 16063  0021B0  6FAB               	movwf	??_BothServos& (0+255),b
 16064  0021B2  0E1E               	movlw	30
 16065  0021B4                     u11107:
 16066  0021B4  2EE8               	decfsz	wreg,f,c
 16067  0021B6  D7FE               	bra	u11107
 16068  0021B8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16069  0021BA  D7FC               	bra	u11107
 16070  0021BC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16071  0021BE  D7FA               	bra	u11107
 16072  0021C0  F000               	nop	
 16073                           
 16074                           ;Test.c: 386: updateServoPosition(1260, 3);
 16075  0021C2  0E04               	movlw	4
 16076  0021C4  0100               	movlb	0	; () banked
 16077  0021C6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16078  0021C8  0EEC               	movlw	236
 16079  0021CA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16080  0021CC  0E00               	movlw	0
 16081  0021CE  0100               	movlb	0	; () banked
 16082  0021D0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16083  0021D2  0E03               	movlw	3
 16084  0021D4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16085  0021D6  EC94  F026         	call	_updateServoPosition	;wreg free
 16086                           
 16087                           ;Test.c: 387: _delay((unsigned long)((700)*(32000000/4000.0)));
 16088  0021DA  0E1D               	movlw	29
 16089  0021DC  0100               	movlb	0	; () banked
 16090  0021DE  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16091  0021E0  0E69               	movlw	105
 16092  0021E2  0100               	movlb	0	; () banked
 16093  0021E4  6FAB               	movwf	??_BothServos& (0+255),b
 16094  0021E6  0EA5               	movlw	165
 16095  0021E8                     u11117:
 16096  0021E8  2EE8               	decfsz	wreg,f,c
 16097  0021EA  D7FE               	bra	u11117
 16098  0021EC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16099  0021EE  D7FC               	bra	u11117
 16100  0021F0  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16101  0021F2  D7FA               	bra	u11117
 16102                           
 16103                           ;Test.c: 388: updateServoPosition(1050, 3);
 16104  0021F4  0E04               	movlw	4
 16105  0021F6  0100               	movlb	0	; () banked
 16106  0021F8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16107  0021FA  0E1A               	movlw	26
 16108  0021FC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16109  0021FE  0E00               	movlw	0
 16110  002200  0100               	movlb	0	; () banked
 16111  002202  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16112  002204  0E03               	movlw	3
 16113  002206  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16114  002208  EC94  F026         	call	_updateServoPosition	;wreg free
 16115                           
 16116                           ;Test.c: 389: _delay((unsigned long)((1500)*(32000000/4000.0)));
 16117  00220C  0E3D               	movlw	61
 16118  00220E  0100               	movlb	0	; () banked
 16119  002210  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16120  002212  0EE1               	movlw	225
 16121  002214  0100               	movlb	0	; () banked
 16122  002216  6FAB               	movwf	??_BothServos& (0+255),b
 16123  002218  0E3F               	movlw	63
 16124  00221A                     u11127:
 16125  00221A  2EE8               	decfsz	wreg,f,c
 16126  00221C  D7FE               	bra	u11127
 16127  00221E  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16128  002220  D7FC               	bra	u11127
 16129  002222  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16130  002224  D7FA               	bra	u11127
 16131  002226  D000               	nop2	
 16132                           
 16133                           ;Test.c: 391: updateServoPosition(1670, 1);
 16134  002228  0E06               	movlw	6
 16135  00222A  0100               	movlb	0	; () banked
 16136  00222C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16137  00222E  0E86               	movlw	134
 16138  002230  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16139  002232  0E00               	movlw	0
 16140  002234  0100               	movlb	0	; () banked
 16141  002236  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16142  002238  0E01               	movlw	1
 16143  00223A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16144  00223C  EC94  F026         	call	_updateServoPosition	;wreg free
 16145                           
 16146                           ;Test.c: 392: updateServoPosition(1050, 3);
 16147  002240  0E04               	movlw	4
 16148  002242  0100               	movlb	0	; () banked
 16149  002244  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16150  002246  0E1A               	movlw	26
 16151  002248  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16152  00224A  0E00               	movlw	0
 16153  00224C  0100               	movlb	0	; () banked
 16154  00224E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16155  002250  0E03               	movlw	3
 16156  002252  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16157  002254  EC94  F026         	call	_updateServoPosition	;wreg free
 16158                           
 16159                           ;Test.c: 393: _delay((unsigned long)((750)*(32000000/4000.0)));
 16160  002258  0E1F               	movlw	31
 16161  00225A  0100               	movlb	0	; () banked
 16162  00225C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16163  00225E  0E71               	movlw	113
 16164  002260  0100               	movlb	0	; () banked
 16165  002262  6FAB               	movwf	??_BothServos& (0+255),b
 16166  002264  0E1E               	movlw	30
 16167  002266                     u11137:
 16168  002266  2EE8               	decfsz	wreg,f,c
 16169  002268  D7FE               	bra	u11137
 16170  00226A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16171  00226C  D7FC               	bra	u11137
 16172  00226E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16173  002270  D7FA               	bra	u11137
 16174  002272  F000               	nop	
 16175                           
 16176                           ;Test.c: 394: updateServoPosition(1390, 3);
 16177  002274  0E05               	movlw	5
 16178  002276  0100               	movlb	0	; () banked
 16179  002278  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16180  00227A  0E6E               	movlw	110
 16181  00227C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16182  00227E  0E00               	movlw	0
 16183  002280  0100               	movlb	0	; () banked
 16184  002282  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16185  002284  0E03               	movlw	3
 16186  002286  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16187  002288  EC94  F026         	call	_updateServoPosition	;wreg free
 16188                           
 16189                           ;Test.c: 395: _delay((unsigned long)((700)*(32000000/4000.0)));
 16190  00228C  0E1D               	movlw	29
 16191  00228E  0100               	movlb	0	; () banked
 16192  002290  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16193  002292  0E69               	movlw	105
 16194  002294  0100               	movlb	0	; () banked
 16195  002296  6FAB               	movwf	??_BothServos& (0+255),b
 16196  002298  0EA5               	movlw	165
 16197  00229A                     u11147:
 16198  00229A  2EE8               	decfsz	wreg,f,c
 16199  00229C  D7FE               	bra	u11147
 16200  00229E  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16201  0022A0  D7FC               	bra	u11147
 16202  0022A2  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16203  0022A4  D7FA               	bra	u11147
 16204                           
 16205                           ;Test.c: 396: updateServoPosition(1050, 3);
 16206  0022A6  0E04               	movlw	4
 16207  0022A8  0100               	movlb	0	; () banked
 16208  0022AA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16209  0022AC  0E1A               	movlw	26
 16210  0022AE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16211  0022B0  0E00               	movlw	0
 16212  0022B2  0100               	movlb	0	; () banked
 16213  0022B4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16214  0022B6  0E03               	movlw	3
 16215  0022B8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16216  0022BA  EC94  F026         	call	_updateServoPosition	;wreg free
 16217                           
 16218                           ;Test.c: 397: _delay((unsigned long)((750)*(32000000/4000.0)));
 16219  0022BE  0E1F               	movlw	31
 16220  0022C0  0100               	movlb	0	; () banked
 16221  0022C2  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16222  0022C4  0E71               	movlw	113
 16223  0022C6  0100               	movlb	0	; () banked
 16224  0022C8  6FAB               	movwf	??_BothServos& (0+255),b
 16225  0022CA  0E1E               	movlw	30
 16226  0022CC                     u11157:
 16227  0022CC  2EE8               	decfsz	wreg,f,c
 16228  0022CE  D7FE               	bra	u11157
 16229  0022D0  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16230  0022D2  D7FC               	bra	u11157
 16231  0022D4  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16232  0022D6  D7FA               	bra	u11157
 16233  0022D8  F000               	nop	
 16234                           
 16235                           ;Test.c: 399: updateServoPosition(2400, 1);
 16236  0022DA  0E09               	movlw	9
 16237  0022DC  0100               	movlb	0	; () banked
 16238  0022DE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16239  0022E0  0E60               	movlw	96
 16240  0022E2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16241  0022E4  0E00               	movlw	0
 16242  0022E6  0100               	movlb	0	; () banked
 16243  0022E8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16244  0022EA  0E01               	movlw	1
 16245  0022EC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16246  0022EE  EC94  F026         	call	_updateServoPosition	;wreg free
 16247                           
 16248                           ;Test.c: 400: updateServoPosition(1050, 3);
 16249  0022F2  0E04               	movlw	4
 16250  0022F4  0100               	movlb	0	; () banked
 16251  0022F6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16252  0022F8  0E1A               	movlw	26
 16253  0022FA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16254  0022FC  0E00               	movlw	0
 16255  0022FE  0100               	movlb	0	; () banked
 16256  002300  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16257  002302  0E03               	movlw	3
 16258  002304  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16259  002306  EC94  F026         	call	_updateServoPosition	;wreg free
 16260                           
 16261                           ;Test.c: 401: _delay((unsigned long)((750)*(32000000/4000.0)));
 16262  00230A  0E1F               	movlw	31
 16263  00230C  0100               	movlb	0	; () banked
 16264  00230E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16265  002310  0E71               	movlw	113
 16266  002312  0100               	movlb	0	; () banked
 16267  002314  6FAB               	movwf	??_BothServos& (0+255),b
 16268  002316  0E1E               	movlw	30
 16269  002318                     u11167:
 16270  002318  2EE8               	decfsz	wreg,f,c
 16271  00231A  D7FE               	bra	u11167
 16272  00231C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16273  00231E  D7FC               	bra	u11167
 16274  002320  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16275  002322  D7FA               	bra	u11167
 16276  002324  F000               	nop	
 16277                           
 16278                           ;Test.c: 402: updateServoPosition(1390, 3);
 16279  002326  0E05               	movlw	5
 16280  002328  0100               	movlb	0	; () banked
 16281  00232A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16282  00232C  0E6E               	movlw	110
 16283  00232E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16284  002330  0E00               	movlw	0
 16285  002332  0100               	movlb	0	; () banked
 16286  002334  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16287  002336  0E03               	movlw	3
 16288  002338  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16289  00233A  EC94  F026         	call	_updateServoPosition	;wreg free
 16290                           
 16291                           ;Test.c: 403: _delay((unsigned long)((700)*(32000000/4000.0)));
 16292  00233E  0E1D               	movlw	29
 16293  002340  0100               	movlb	0	; () banked
 16294  002342  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16295  002344  0E69               	movlw	105
 16296  002346  0100               	movlb	0	; () banked
 16297  002348  6FAB               	movwf	??_BothServos& (0+255),b
 16298  00234A  0EA5               	movlw	165
 16299  00234C                     u11177:
 16300  00234C  2EE8               	decfsz	wreg,f,c
 16301  00234E  D7FE               	bra	u11177
 16302  002350  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16303  002352  D7FC               	bra	u11177
 16304  002354  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16305  002356  D7FA               	bra	u11177
 16306                           
 16307                           ;Test.c: 404: updateServoPosition(1050, 3);
 16308  002358  0E04               	movlw	4
 16309  00235A  0100               	movlb	0	; () banked
 16310  00235C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16311  00235E  0E1A               	movlw	26
 16312  002360  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16313  002362  0E00               	movlw	0
 16314  002364  0100               	movlb	0	; () banked
 16315  002366  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16316  002368  0E03               	movlw	3
 16317  00236A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16318  00236C  EC94  F026         	call	_updateServoPosition	;wreg free
 16319                           
 16320                           ;Test.c: 405: _delay((unsigned long)((750)*(32000000/4000.0)));
 16321  002370  0E1F               	movlw	31
 16322  002372  0100               	movlb	0	; () banked
 16323  002374  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16324  002376  0E71               	movlw	113
 16325  002378  0100               	movlb	0	; () banked
 16326  00237A  6FAB               	movwf	??_BothServos& (0+255),b
 16327  00237C  0E1E               	movlw	30
 16328  00237E                     u11187:
 16329  00237E  2EE8               	decfsz	wreg,f,c
 16330  002380  D7FE               	bra	u11187
 16331  002382  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16332  002384  D7FC               	bra	u11187
 16333  002386  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16334  002388  D7FA               	bra	u11187
 16335  00238A  F000               	nop	
 16336                           
 16337                           ;Test.c: 407: stopSignals();
 16338  00238C  EC62  F02D         	call	_stopSignals	;wreg free
 16339                           
 16340                           ;Test.c: 408: machine_state = Testing_state;
 16341  002390  0E03               	movlw	3
 16342  002392  0100               	movlb	0	; () banked
 16343  002394  6FFC               	movwf	_machine_state& (0+255),b
 16344                           
 16345                           ; BSR set to: 0
 16346  002396  0012               	return		;funcret
 16347  002398                     __end_of_BothServos:
 16348                           	opt stack 0
 16349                           tblptru	equ	0xFF8
 16350                           tblptrh	equ	0xFF7
 16351                           tblptrl	equ	0xFF6
 16352                           tablat	equ	0xFF5
 16353                           prodh	equ	0xFF4
 16354                           prodl	equ	0xFF3
 16355                           intcon	equ	0xFF2
 16356                           intcon2	equ	0xFF1
 16357                           intcon3	equ	0xFF0
 16358                           postinc0	equ	0xFEE
 16359                           wreg	equ	0xFE8
 16360                           postdec1	equ	0xFE5
 16361                           fsr1l	equ	0xFE1
 16362                           indf2	equ	0xFDF
 16363                           postinc2	equ	0xFDE
 16364                           postdec2	equ	0xFDD
 16365                           fsr2h	equ	0xFDA
 16366                           fsr2l	equ	0xFD9
 16367                           status	equ	0xFD8
 16368                           
 16369 ;; *************** function _stopSignals *****************
 16370 ;; Defined at:
 16371 ;;		line 72 in file "main.c"
 16372 ;; Parameters:    Size  Location     Type
 16373 ;;		None
 16374 ;; Auto vars:     Size  Location     Type
 16375 ;;		None
 16376 ;; Return value:  Size  Location     Type
 16377 ;;                  1    wreg      void 
 16378 ;; Registers used:
 16379 ;;		wreg, status,2
 16380 ;; Tracked objects:
 16381 ;;		On entry : 0/0
 16382 ;;		On exit  : 0/0
 16383 ;;		Unchanged: 0/0
 16384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16388 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16389 ;;Total ram usage:        0 bytes
 16390 ;; Hardware stack levels used:    1
 16391 ;; Hardware stack levels required when called:    7
 16392 ;; This function calls:
 16393 ;;		Nothing
 16394 ;; This function is called by:
 16395 ;;		_main
 16396 ;;		_BothServos
 16397 ;;		_PlatformTest
 16398 ;;		_arm
 16399 ;; This function uses a non-reentrant model
 16400 ;;
 16401                           
 16402                           	psect	text51
 16403  005AC4                     __ptext51:
 16404                           	opt stack 0
 16405  005AC4                     _stopSignals:
 16406                           	opt stack 23
 16407                           
 16408                           ;main.c: 73: LATA = 0x00;
 16409                           
 16410                           ; BSR set to: 0
 16411                           ;incstack = 0
 16412  005AC4  0E00               	movlw	0
 16413  005AC6  6E89               	movwf	3977,c	;volatile
 16414                           
 16415                           ;main.c: 74: LATB = 0x00;
 16416  005AC8  0E00               	movlw	0
 16417  005ACA  6E8A               	movwf	3978,c	;volatile
 16418                           
 16419                           ;main.c: 75: LATC = 0x00;
 16420  005ACC  0E00               	movlw	0
 16421  005ACE  6E8B               	movwf	3979,c	;volatile
 16422                           
 16423                           ;main.c: 76: LATD = 0x00;
 16424  005AD0  0E00               	movlw	0
 16425  005AD2  6E8C               	movwf	3980,c	;volatile
 16426                           
 16427                           ;main.c: 77: LATE = 0x00;
 16428  005AD4  0E00               	movlw	0
 16429  005AD6  6E8D               	movwf	3981,c	;volatile
 16430                           
 16431                           ;main.c: 78: TMR1ON = 0;
 16432  005AD8  90CD               	bcf	4045,0,c	;volatile
 16433                           
 16434                           ;main.c: 79: TMR2ON = 0;
 16435  005ADA  94CA               	bcf	4042,2,c	;volatile
 16436                           
 16437                           ;main.c: 80: TMR3ON = 0;
 16438  005ADC  90B1               	bcf	4017,0,c	;volatile
 16439  005ADE  0012               	return		;funcret
 16440  005AE0                     __end_of_stopSignals:
 16441                           	opt stack 0
 16442                           tblptru	equ	0xFF8
 16443                           tblptrh	equ	0xFF7
 16444                           tblptrl	equ	0xFF6
 16445                           tablat	equ	0xFF5
 16446                           prodh	equ	0xFF4
 16447                           prodl	equ	0xFF3
 16448                           intcon	equ	0xFF2
 16449                           intcon2	equ	0xFF1
 16450                           intcon3	equ	0xFF0
 16451                           postinc0	equ	0xFEE
 16452                           wreg	equ	0xFE8
 16453                           postdec1	equ	0xFE5
 16454                           fsr1l	equ	0xFE1
 16455                           indf2	equ	0xFDF
 16456                           postinc2	equ	0xFDE
 16457                           postdec2	equ	0xFDD
 16458                           fsr2h	equ	0xFDA
 16459                           fsr2l	equ	0xFD9
 16460                           status	equ	0xFD8
 16461                           
 16462 ;; *************** function _initServos *****************
 16463 ;; Defined at:
 16464 ;;		line 465 in file "sort.c"
 16465 ;; Parameters:    Size  Location     Type
 16466 ;;		None
 16467 ;; Auto vars:     Size  Location     Type
 16468 ;;		None
 16469 ;; Return value:  Size  Location     Type
 16470 ;;                  1    wreg      void 
 16471 ;; Registers used:
 16472 ;;		wreg, status,2, status,0, cstack
 16473 ;; Tracked objects:
 16474 ;;		On entry : 0/0
 16475 ;;		On exit  : 0/0
 16476 ;;		Unchanged: 0/0
 16477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16480 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16481 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16482 ;;Total ram usage:        1 bytes
 16483 ;; Hardware stack levels used:    1
 16484 ;; Hardware stack levels required when called:    8
 16485 ;; This function calls:
 16486 ;;		_updateServoPosition
 16487 ;; This function is called by:
 16488 ;;		_Loading
 16489 ;;		_BothServos
 16490 ;; This function uses a non-reentrant model
 16491 ;;
 16492                           
 16493                           	psect	text52
 16494  004E32                     __ptext52:
 16495                           	opt stack 0
 16496  004E32                     _initServos:
 16497                           	opt stack 20
 16498                           
 16499                           ;sort.c: 467: updateServoPosition(1200, 1);
 16500                           
 16501                           ;incstack = 0
 16502  004E32  0E04               	movlw	4
 16503  004E34  0100               	movlb	0	; () banked
 16504  004E36  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16505  004E38  0EB0               	movlw	176
 16506  004E3A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16507  004E3C  0E00               	movlw	0
 16508  004E3E  0100               	movlb	0	; () banked
 16509  004E40  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16510  004E42  0E01               	movlw	1
 16511  004E44  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16512  004E46  EC94  F026         	call	_updateServoPosition	;wreg free
 16513                           
 16514                           ;sort.c: 468: updateServoPosition(1050, 3);
 16515  004E4A  0E04               	movlw	4
 16516  004E4C  0100               	movlb	0	; () banked
 16517  004E4E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16518  004E50  0E1A               	movlw	26
 16519  004E52  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16520  004E54  0E00               	movlw	0
 16521  004E56  0100               	movlb	0	; () banked
 16522  004E58  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16523  004E5A  0E03               	movlw	3
 16524  004E5C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16525  004E5E  EC94  F026         	call	_updateServoPosition	;wreg free
 16526                           
 16527                           ;sort.c: 469: TMR1ON = 1;
 16528  004E62  80CD               	bsf	4045,0,c	;volatile
 16529                           
 16530                           ;sort.c: 470: was_low_1 = 0;
 16531  004E64  0E00               	movlw	0
 16532  004E66  6E78               	movwf	_was_low_1+1,c	;volatile
 16533  004E68  0E00               	movlw	0
 16534  004E6A  6E77               	movwf	_was_low_1,c	;volatile
 16535                           
 16536                           ;sort.c: 472: _delay((unsigned long)((5)*(32000000/4000.0)));
 16537  004E6C  0E34               	movlw	52
 16538  004E6E  0100               	movlb	0	; () banked
 16539  004E70  6F88               	movwf	??_initServos& (0+255),b
 16540  004E72  0EF1               	movlw	241
 16541  004E74                     u11197:
 16542  004E74  2EE8               	decfsz	wreg,f,c
 16543  004E76  D7FE               	bra	u11197
 16544  004E78  2F88               	decfsz	??_initServos& (0+255),f,b
 16545  004E7A  D7FC               	bra	u11197
 16546  004E7C  D000               	nop2	
 16547                           
 16548                           ;sort.c: 474: TMR3ON = 1;
 16549  004E7E  80B1               	bsf	4017,0,c	;volatile
 16550                           
 16551                           ;sort.c: 475: was_low_3 = 0;
 16552  004E80  0E00               	movlw	0
 16553  004E82  6E7C               	movwf	_was_low_3+1,c	;volatile
 16554  004E84  0E00               	movlw	0
 16555  004E86  6E7B               	movwf	_was_low_3,c	;volatile
 16556                           
 16557                           ;sort.c: 478: _delay((unsigned long)((1)*(32000000/4000.0)));
 16558  004E88  0E0B               	movlw	11
 16559  004E8A  0100               	movlb	0	; () banked
 16560  004E8C  6F88               	movwf	??_initServos& (0+255),b
 16561  004E8E  0E62               	movlw	98
 16562  004E90                     u11207:
 16563  004E90  2EE8               	decfsz	wreg,f,c
 16564  004E92  D7FE               	bra	u11207
 16565  004E94  2F88               	decfsz	??_initServos& (0+255),f,b
 16566  004E96  D7FC               	bra	u11207
 16567  004E98  F000               	nop	
 16568                           
 16569                           ;sort.c: 479: LATBbits.LATB3 = 0;
 16570  004E9A  968A               	bcf	3978,3,c	;volatile
 16571                           
 16572                           ;sort.c: 480: TMR2ON = 1;
 16573  004E9C  84CA               	bsf	4042,2,c	;volatile
 16574                           
 16575                           ;sort.c: 481: was_low_2 = 0;
 16576  004E9E  0E00               	movlw	0
 16577  004EA0  6E7A               	movwf	_was_low_2+1,c	;volatile
 16578  004EA2  0E00               	movlw	0
 16579  004EA4  6E79               	movwf	_was_low_2,c	;volatile
 16580                           
 16581                           ;sort.c: 483: LATCbits.LATC0 = 1;
 16582  004EA6  808B               	bsf	3979,0,c	;volatile
 16583  004EA8  0012               	return		;funcret
 16584  004EAA                     __end_of_initServos:
 16585                           	opt stack 0
 16586                           tblptru	equ	0xFF8
 16587                           tblptrh	equ	0xFF7
 16588                           tblptrl	equ	0xFF6
 16589                           tablat	equ	0xFF5
 16590                           prodh	equ	0xFF4
 16591                           prodl	equ	0xFF3
 16592                           intcon	equ	0xFF2
 16593                           intcon2	equ	0xFF1
 16594                           intcon3	equ	0xFF0
 16595                           postinc0	equ	0xFEE
 16596                           wreg	equ	0xFE8
 16597                           postdec1	equ	0xFE5
 16598                           fsr1l	equ	0xFE1
 16599                           indf2	equ	0xFDF
 16600                           postinc2	equ	0xFDE
 16601                           postdec2	equ	0xFDD
 16602                           fsr2h	equ	0xFDA
 16603                           fsr2l	equ	0xFD9
 16604                           status	equ	0xFD8
 16605                           
 16606 ;; *************** function _updateServoPosition *****************
 16607 ;; Defined at:
 16608 ;;		line 561 in file "sort.c"
 16609 ;; Parameters:    Size  Location     Type
 16610 ;;  time_us         2    0[BANK0 ] int 
 16611 ;;  timer           2    2[BANK0 ] int 
 16612 ;; Auto vars:     Size  Location     Type
 16613 ;;  my_time         2    6[BANK0 ] unsigned int 
 16614 ;; Return value:  Size  Location     Type
 16615 ;;                  1    wreg      void 
 16616 ;; Registers used:
 16617 ;;		wreg, status,2, status,0
 16618 ;; Tracked objects:
 16619 ;;		On entry : 0/0
 16620 ;;		On exit  : 0/0
 16621 ;;		Unchanged: 0/0
 16622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16623 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16624 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16625 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16626 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16627 ;;Total ram usage:        8 bytes
 16628 ;; Hardware stack levels used:    1
 16629 ;; Hardware stack levels required when called:    7
 16630 ;; This function calls:
 16631 ;;		Nothing
 16632 ;; This function is called by:
 16633 ;;		_Distribution
 16634 ;;		_initServos
 16635 ;;		_actuatorTest
 16636 ;;		_BothServos
 16637 ;; This function uses a non-reentrant model
 16638 ;;
 16639                           
 16640                           	psect	text53
 16641  004D28                     __ptext53:
 16642                           	opt stack 0
 16643  004D28                     _updateServoPosition:
 16644                           	opt stack 20
 16645                           
 16646                           ;sort.c: 562: unsigned int my_time = 65535 - time_us;
 16647                           
 16648                           ;incstack = 0
 16649  004D28  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 16650  004D2C  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 16651  004D30  0100               	movlb	0	; () banked
 16652  004D32  1F84               	comf	??_updateServoPosition& (0+255),f,b
 16653  004D34  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 16654  004D36  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 16655  004D38  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 16656  004D3A  0EFF               	movlw	255
 16657  004D3C  0100               	movlb	0	; () banked
 16658  004D3E  2584               	addwf	??_updateServoPosition& (0+255),w,b
 16659  004D40  0100               	movlb	0	; () banked
 16660  004D42  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 16661  004D44  0EFF               	movlw	255
 16662  004D46  0100               	movlb	0	; () banked
 16663  004D48  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 16664  004D4A  0100               	movlb	0	; () banked
 16665  004D4C  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 16666                           
 16667                           ;sort.c: 563: switch(timer){
 16668  004D4E  D01D               	goto	l6855
 16669  004D50                     l6849:
 16670                           
 16671                           ; BSR set to: 0
 16672                           ;sort.c: 565: servoTimes[0] = my_time >> 8;
 16673  004D50  0100               	movlb	0	; () banked
 16674  004D52  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 16675  004D54  0100               	movlb	0	; () banked
 16676  004D56  6FDA               	movwf	_servoTimes& (0+255),b
 16677  004D58  6BDB               	clrf	(_servoTimes+1)& (0+255),b
 16678                           
 16679                           ;sort.c: 566: servoTimes[1] = my_time & 0xFF;
 16680  004D5A  0100               	movlb	0	; () banked
 16681  004D5C  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 16682  004D5E  0100               	movlb	0	; () banked
 16683  004D60  6FDC               	movwf	(_servoTimes+2)& (0+255),b
 16684  004D62  6BDD               	clrf	(_servoTimes+3)& (0+255),b
 16685                           
 16686                           ; BSR set to: 0
 16687                           ;sort.c: 568: pan_servo_state = time_us;
 16688  004D64  C080  F06B         	movff	updateServoPosition@time_us,_pan_servo_state	;volatile
 16689  004D68  C081  F06C         	movff	updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 16690  004D6C                     l920:
 16691                           
 16692                           ; BSR set to: 0
 16693                           ;sort.c: 570: servoTimes[2] = my_time >> 8;
 16694  004D6C  0100               	movlb	0	; () banked
 16695  004D6E  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 16696  004D70  0100               	movlb	0	; () banked
 16697  004D72  6FDE               	movwf	(_servoTimes+4)& (0+255),b
 16698  004D74  6BDF               	clrf	(_servoTimes+5)& (0+255),b
 16699                           
 16700                           ;sort.c: 571: servoTimes[3] = my_time & 0xFF;
 16701  004D76  0100               	movlb	0	; () banked
 16702  004D78  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 16703  004D7A  0100               	movlb	0	; () banked
 16704  004D7C  6FE0               	movwf	(_servoTimes+6)& (0+255),b
 16705  004D7E  6BE1               	clrf	(_servoTimes+7)& (0+255),b
 16706                           
 16707                           ; BSR set to: 0
 16708                           ;sort.c: 573: tilt_servo_state = time_us;
 16709  004D80  C080  F071         	movff	updateServoPosition@time_us,_tilt_servo_state	;volatile
 16710  004D84  C081  F072         	movff	updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 16711                           
 16712                           ;sort.c: 574: }
 16713  004D88  0012               	return	
 16714  004D8A                     l6855:
 16715                           
 16716                           ; BSR set to: 0
 16717  004D8A  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 16718  004D8E  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 16719                           
 16720                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16721                           ; Switch size 1, requested type "space"
 16722                           ; Number of cases is 1, Range of values is 0 to 0
 16723                           ; switch strategies available:
 16724                           ; Name         Instructions Cycles
 16725                           ; simple_byte            4     3 (average)
 16726                           ;	Chosen strategy is simple_byte
 16727  004D92  0100               	movlb	0	; () banked
 16728  004D94  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 16729  004D96  0A00               	xorlw	0	; case 0
 16730  004D98  A4D8               	btfss	status,2,c
 16731  004D9A  0012               	return	
 16732                           
 16733                           ; BSR set to: 0
 16734                           ; Switch size 1, requested type "space"
 16735                           ; Number of cases is 2, Range of values is 1 to 3
 16736                           ; switch strategies available:
 16737                           ; Name         Instructions Cycles
 16738                           ; simple_byte            7     4 (average)
 16739                           ;	Chosen strategy is simple_byte
 16740  004D9C  0100               	movlb	0	; () banked
 16741  004D9E  5184               	movf	??_updateServoPosition& (0+255),w,b
 16742  004DA0  0A01               	xorlw	1	; case 1
 16743  004DA2  B4D8               	btfsc	status,2,c
 16744  004DA4  D7D5               	goto	l6849
 16745  004DA6  0A02               	xorlw	2	; case 3
 16746  004DA8  A4D8               	btfss	status,2,c
 16747  004DAA  0012               	return	
 16748  004DAC  D7DF               	goto	l920
 16749  004DAE                     __end_of_updateServoPosition:
 16750                           	opt stack 0
 16751                           tblptru	equ	0xFF8
 16752                           tblptrh	equ	0xFF7
 16753                           tblptrl	equ	0xFF6
 16754                           tablat	equ	0xFF5
 16755                           prodh	equ	0xFF4
 16756                           prodl	equ	0xFF3
 16757                           intcon	equ	0xFF2
 16758                           intcon2	equ	0xFF1
 16759                           intcon3	equ	0xFF0
 16760                           postinc0	equ	0xFEE
 16761                           wreg	equ	0xFE8
 16762                           postdec1	equ	0xFE5
 16763                           fsr1l	equ	0xFE1
 16764                           indf2	equ	0xFDF
 16765                           postinc2	equ	0xFDE
 16766                           postdec2	equ	0xFDD
 16767                           fsr2h	equ	0xFDA
 16768                           fsr2l	equ	0xFD9
 16769                           status	equ	0xFD8
 16770                           
 16771 ;; *************** function _BlockerTest *****************
 16772 ;; Defined at:
 16773 ;;		line 581 in file "Test.c"
 16774 ;; Parameters:    Size  Location     Type
 16775 ;;		None
 16776 ;; Auto vars:     Size  Location     Type
 16777 ;;  i               2   45[BANK0 ] int 
 16778 ;;  cond_flag       2   51[BANK0 ] int 
 16779 ;;  cam_flag        2   49[BANK0 ] int 
 16780 ;;  res             2   47[BANK0 ] int 
 16781 ;; Return value:  Size  Location     Type
 16782 ;;                  1    wreg      void 
 16783 ;; Registers used:
 16784 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16785 ;; Tracked objects:
 16786 ;;		On entry : 0/0
 16787 ;;		On exit  : 0/0
 16788 ;;		Unchanged: 0/0
 16789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16791 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16792 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16793 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16794 ;;Total ram usage:       10 bytes
 16795 ;; Hardware stack levels used:    1
 16796 ;; Hardware stack levels required when called:   10
 16797 ;; This function calls:
 16798 ;;		_lcdInst
 16799 ;;		_printf
 16800 ;;		_readADC
 16801 ;; This function is called by:
 16802 ;;		_Test
 16803 ;; This function uses a non-reentrant model
 16804 ;;
 16805                           
 16806                           	psect	text54
 16807  003D24                     __ptext54:
 16808                           	opt stack 0
 16809  003D24                     _BlockerTest:
 16810                           	opt stack 19
 16811                           
 16812                           ;Test.c: 582: readADC(2);
 16813                           
 16814                           ; BSR set to: 0
 16815                           ;incstack = 0
 16816  003D24  0E02               	movlw	2
 16817  003D26  ECA6  F02C         	call	_readADC
 16818                           
 16819                           ;Test.c: 583: int res = ADRESH<<8 | ADRESL;
 16820  003D2A  50C3               	movf	4035,w,c	;volatile
 16821  003D2C  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 16822  003D30  0100               	movlb	0	; () banked
 16823  003D32  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 16824  003D34  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 16825  003D38  0100               	movlb	0	; () banked
 16826  003D3A  6BAB               	clrf	??_BlockerTest& (0+255),b
 16827  003D3C  0100               	movlb	0	; () banked
 16828  003D3E  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 16829  003D40  0100               	movlb	0	; () banked
 16830  003D42  6FAF               	movwf	BlockerTest@res& (0+255),b
 16831  003D44  0100               	movlb	0	; () banked
 16832  003D46  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 16833  003D48  0100               	movlb	0	; () banked
 16834  003D4A  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 16835                           
 16836                           ; BSR set to: 0
 16837                           ;Test.c: 585: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 16838  003D4C  0E01               	movlw	1
 16839  003D4E  ECBB  F02D         	call	_lcdInst
 16840  003D52  0E68               	movlw	104
 16841  003D54  0100               	movlb	0	; () banked
 16842  003D56  6FAB               	movwf	??_BlockerTest& (0+255),b
 16843  003D58  0EE4               	movlw	228
 16844  003D5A                     u11217:
 16845  003D5A  2EE8               	decfsz	wreg,f,c
 16846  003D5C  D7FE               	bra	u11217
 16847  003D5E  2FAB               	decfsz	??_BlockerTest& (0+255),f,b
 16848  003D60  D7FC               	bra	u11217
 16849  003D62  F000               	nop	
 16850  003D64  0E80               	movlw	128
 16851  003D66  ECBB  F02D         	call	_lcdInst
 16852                           
 16853                           ;Test.c: 586: printf("D:RET|2:C %d  ", res);
 16854  003D6A  0E6E               	movlw	low STR_122
 16855  003D6C  0100               	movlb	0	; () banked
 16856  003D6E  6F8E               	movwf	printf@f& (0+255),b
 16857  003D70  0EFE               	movlw	high STR_122
 16858  003D72  0100               	movlb	0	; () banked
 16859  003D74  6F8F               	movwf	(printf@f+1)& (0+255),b
 16860  003D76  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 16861  003D7A  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 16862  003D7E  ECC1  F00B         	call	_printf	;wreg free
 16863                           
 16864                           ;Test.c: 587: lcdInst(0b11000000);;
 16865  003D82  0EC0               	movlw	192
 16866  003D84  ECBB  F02D         	call	_lcdInst
 16867                           
 16868                           ;Test.c: 588: printf("OTHER: CAM TOGGLE");
 16869  003D88  0E1B               	movlw	low STR_123
 16870  003D8A  0100               	movlb	0	; () banked
 16871  003D8C  6F8E               	movwf	printf@f& (0+255),b
 16872  003D8E  0EFB               	movlw	high STR_123
 16873  003D90  0100               	movlb	0	; () banked
 16874  003D92  6F8F               	movwf	(printf@f+1)& (0+255),b
 16875  003D94  ECC1  F00B         	call	_printf	;wreg free
 16876                           
 16877                           ;Test.c: 589: int cam_flag = 1;
 16878  003D98  0E00               	movlw	0
 16879  003D9A  0100               	movlb	0	; () banked
 16880  003D9C  6FB2               	movwf	(BlockerTest@cam_flag+1)& (0+255),b
 16881  003D9E  0E01               	movlw	1
 16882  003DA0  6FB1               	movwf	BlockerTest@cam_flag& (0+255),b
 16883                           
 16884                           ; BSR set to: 0
 16885                           ;Test.c: 590: int cond_flag = 0;
 16886  003DA2  0E00               	movlw	0
 16887  003DA4  0100               	movlb	0	; () banked
 16888  003DA6  6FB4               	movwf	(BlockerTest@cond_flag+1)& (0+255),b
 16889  003DA8  0E00               	movlw	0
 16890  003DAA  6FB3               	movwf	BlockerTest@cond_flag& (0+255),b
 16891                           
 16892                           ; BSR set to: 0
 16893                           ;Test.c: 593: while(PORTBbits.RB1 == 0){
 16894                           
 16895                           ;Test.c: 592: while(1){
 16896  003DAC  D023               	goto	l9075
 16897  003DAE                     l9067:
 16898                           
 16899                           ;Test.c: 594: readADC(2);
 16900  003DAE  0E02               	movlw	2
 16901  003DB0  ECA6  F02C         	call	_readADC
 16902                           
 16903                           ;Test.c: 595: res = ADRESH<<8 | ADRESL;
 16904  003DB4  50C3               	movf	4035,w,c	;volatile
 16905  003DB6  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 16906  003DBA  0100               	movlb	0	; () banked
 16907  003DBC  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 16908  003DBE  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 16909  003DC2  0100               	movlb	0	; () banked
 16910  003DC4  6BAB               	clrf	??_BlockerTest& (0+255),b
 16911  003DC6  0100               	movlb	0	; () banked
 16912  003DC8  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 16913  003DCA  0100               	movlb	0	; () banked
 16914  003DCC  6FAF               	movwf	BlockerTest@res& (0+255),b
 16915  003DCE  0100               	movlb	0	; () banked
 16916  003DD0  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 16917  003DD2  0100               	movlb	0	; () banked
 16918  003DD4  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 16919                           
 16920                           ; BSR set to: 0
 16921                           ;Test.c: 596: lcdInst(0b10000000);;
 16922  003DD6  0E80               	movlw	128
 16923  003DD8  ECBB  F02D         	call	_lcdInst
 16924                           
 16925                           ;Test.c: 597: printf("D:RET|2:C %d  ", res);
 16926  003DDC  0E6E               	movlw	low STR_122
 16927  003DDE  0100               	movlb	0	; () banked
 16928  003DE0  6F8E               	movwf	printf@f& (0+255),b
 16929  003DE2  0EFE               	movlw	high STR_122
 16930  003DE4  0100               	movlb	0	; () banked
 16931  003DE6  6F8F               	movwf	(printf@f+1)& (0+255),b
 16932  003DE8  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 16933  003DEC  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 16934  003DF0  ECC1  F00B         	call	_printf	;wreg free
 16935  003DF4                     l9075:
 16936  003DF4  A281               	btfss	3969,1,c	;volatile
 16937  003DF6  D7DB               	goto	l9067
 16938                           
 16939                           ;Test.c: 598: }
 16940                           ;Test.c: 599: if(PORTB >> 4 == 0b1111){
 16941  003DF8  3881               	swapf	3969,w,c	;volatile
 16942  003DFA  0B0F               	andlw	15
 16943  003DFC  0A0F               	xorlw	15
 16944  003DFE  B4D8               	btfsc	status,2,c
 16945  003E00  0012               	return	
 16946                           
 16947                           ;Test.c: 602: else if(PORTB >> 4 == 0b0001){
 16948                           
 16949                           ;Test.c: 601: }
 16950                           
 16951                           ;Test.c: 600: break;
 16952  003E02  3881               	swapf	3969,w,c	;volatile
 16953  003E04  0B0F               	andlw	15
 16954  003E06  06E8               	decf	wreg,f,c
 16955  003E08  A4D8               	btfss	status,2,c
 16956  003E0A  D016               	goto	l9093
 16957                           
 16958                           ;Test.c: 603: if(cond_flag){
 16959  003E0C  0100               	movlb	0	; () banked
 16960  003E0E  51B3               	movf	BlockerTest@cond_flag& (0+255),w,b
 16961  003E10  0100               	movlb	0	; () banked
 16962  003E12  11B4               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 16963  003E14  B4D8               	btfsc	status,2,c
 16964  003E16  D007               	goto	l1440
 16965                           
 16966                           ; BSR set to: 0
 16967                           ;Test.c: 604: LATAbits.LATA3 = 1;
 16968  003E18  8689               	bsf	3977,3,c	;volatile
 16969  003E1A  D006               	goto	l9091
 16970  003E1C                     u8171:
 16971  003E1C  0E01               	movlw	1
 16972  003E1E                     u8180:
 16973  003E1E  0100               	movlb	0	; () banked
 16974  003E20  6FB3               	movwf	BlockerTest@cond_flag& (0+255),b
 16975  003E22  6BB4               	clrf	(BlockerTest@cond_flag+1)& (0+255),b
 16976                           
 16977                           ;Test.c: 606: }
 16978  003E24  D05F               	goto	l9121
 16979  003E26                     l1440:
 16980                           
 16981                           ; BSR set to: 0
 16982                           ;Test.c: 607: else{
 16983                           ;Test.c: 608: LATAbits.LATA3 = 0;
 16984  003E26  9689               	bcf	3977,3,c	;volatile
 16985  003E28                     l9091:
 16986                           
 16987                           ; BSR set to: 0
 16988                           ;Test.c: 609: cond_flag = !cond_flag;
 16989  003E28  0100               	movlb	0	; () banked
 16990  003E2A  51B3               	movf	BlockerTest@cond_flag& (0+255),w,b
 16991  003E2C  0100               	movlb	0	; () banked
 16992  003E2E  11B4               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 16993  003E30  B4D8               	btfsc	status,2,c
 16994  003E32  D7F4               	goto	u8171
 16995  003E34  0E00               	movlw	0
 16996  003E36  D7F3               	goto	u8180
 16997  003E38                     l9093:
 16998                           
 16999                           ;Test.c: 612: else{
 17000                           ;Test.c: 613: if(cam_flag){
 17001  003E38  0100               	movlb	0	; () banked
 17002  003E3A  51B1               	movf	BlockerTest@cam_flag& (0+255),w,b
 17003  003E3C  0100               	movlb	0	; () banked
 17004  003E3E  11B2               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 17005  003E40  B4D8               	btfsc	status,2,c
 17006  003E42  D007               	goto	l9099
 17007                           
 17008                           ; BSR set to: 0
 17009                           ;Test.c: 614: LATCbits.LATC0 = 1;
 17010  003E44  808B               	bsf	3979,0,c	;volatile
 17011  003E46  D023               	goto	l9111
 17012  003E48                     u8221:
 17013  003E48  0E01               	movlw	1
 17014  003E4A                     u8230:
 17015  003E4A  0100               	movlb	0	; () banked
 17016  003E4C  6FB1               	movwf	BlockerTest@cam_flag& (0+255),b
 17017  003E4E  6BB2               	clrf	(BlockerTest@cam_flag+1)& (0+255),b
 17018                           
 17019                           ;Test.c: 616: }
 17020  003E50  D049               	goto	l9121
 17021  003E52                     l9099:
 17022                           
 17023                           ; BSR set to: 0
 17024                           ;Test.c: 617: else{
 17025                           ;Test.c: 618: for(int i=0;i<5000;i++)
 17026  003E52  0E00               	movlw	0
 17027  003E54  0100               	movlb	0	; () banked
 17028  003E56  6FAE               	movwf	(BlockerTest@i+1)& (0+255),b
 17029  003E58  0E00               	movlw	0
 17030  003E5A  6FAD               	movwf	BlockerTest@i& (0+255),b
 17031  003E5C                     l9101:
 17032                           
 17033                           ; BSR set to: 0
 17034  003E5C  0100               	movlb	0	; () banked
 17035  003E5E  BFAE               	btfsc	(BlockerTest@i+1)& (0+255),7,b
 17036  003E60  D008               	goto	l1445
 17037  003E62  0E88               	movlw	136
 17038  003E64  0100               	movlb	0	; () banked
 17039  003E66  5DAD               	subwf	BlockerTest@i& (0+255),w,b
 17040  003E68  0E13               	movlw	19
 17041  003E6A  0100               	movlb	0	; () banked
 17042  003E6C  59AE               	subwfb	(BlockerTest@i+1)& (0+255),w,b
 17043  003E6E  B0D8               	btfsc	status,0,c
 17044  003E70  D00D               	goto	l1446
 17045  003E72                     l1445:
 17046                           
 17047                           ; BSR set to: 0
 17048                           ;Test.c: 619: {
 17049                           ;Test.c: 620: LATCbits.LATC0 = 1;
 17050  003E72  808B               	bsf	3979,0,c	;volatile
 17051                           
 17052                           ; BSR set to: 0
 17053                           ;Test.c: 621: _delay((unsigned long)((10)*(32000000/4000000.0)));
 17054  003E74  0E1A               	movlw	26
 17055  003E76                     u11227:
 17056  003E76  2EE8               	decfsz	wreg,f,c
 17057  003E78  D7FE               	bra	u11227
 17058  003E7A  D000               	nop2	
 17059                           
 17060                           ;Test.c: 622: LATCbits.LATC0 = 0;
 17061  003E7C  908B               	bcf	3979,0,c	;volatile
 17062                           
 17063                           ;Test.c: 623: _delay((unsigned long)((90)*(32000000/4000000.0)));
 17064  003E7E  0EF0               	movlw	240
 17065  003E80                     u11237:
 17066  003E80  2EE8               	decfsz	wreg,f,c
 17067  003E82  D7FE               	bra	u11237
 17068  003E84  0100               	movlb	0	; () banked
 17069  003E86  4BAD               	infsnz	BlockerTest@i& (0+255),f,b
 17070  003E88  2BAE               	incf	(BlockerTest@i+1)& (0+255),f,b
 17071  003E8A  D7E8               	goto	l9101
 17072  003E8C                     l1446:
 17073                           
 17074                           ; BSR set to: 0
 17075                           ;Test.c: 624: }
 17076                           ;Test.c: 625: LATCbits.LATC0 = 0;
 17077  003E8C  908B               	bcf	3979,0,c	;volatile
 17078  003E8E                     l9111:
 17079                           
 17080                           ; BSR set to: 0
 17081                           ;Test.c: 626: cam_flag = !cam_flag;
 17082  003E8E  0100               	movlb	0	; () banked
 17083  003E90  51B1               	movf	BlockerTest@cam_flag& (0+255),w,b
 17084  003E92  0100               	movlb	0	; () banked
 17085  003E94  11B2               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 17086  003E96  B4D8               	btfsc	status,2,c
 17087  003E98  D7D7               	goto	u8221
 17088  003E9A  0E00               	movlw	0
 17089  003E9C  D7D6               	goto	u8230
 17090  003E9E                     l9113:
 17091                           
 17092                           ;Test.c: 631: readADC(2);
 17093  003E9E  0E02               	movlw	2
 17094  003EA0  ECA6  F02C         	call	_readADC
 17095                           
 17096                           ;Test.c: 632: res = ADRESH<<8 | ADRESL;
 17097  003EA4  50C3               	movf	4035,w,c	;volatile
 17098  003EA6  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 17099  003EAA  0100               	movlb	0	; () banked
 17100  003EAC  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 17101  003EAE  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 17102  003EB2  0100               	movlb	0	; () banked
 17103  003EB4  6BAB               	clrf	??_BlockerTest& (0+255),b
 17104  003EB6  0100               	movlb	0	; () banked
 17105  003EB8  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 17106  003EBA  0100               	movlb	0	; () banked
 17107  003EBC  6FAF               	movwf	BlockerTest@res& (0+255),b
 17108  003EBE  0100               	movlb	0	; () banked
 17109  003EC0  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 17110  003EC2  0100               	movlb	0	; () banked
 17111  003EC4  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 17112                           
 17113                           ; BSR set to: 0
 17114                           ;Test.c: 633: lcdInst(0b10000000);;
 17115  003EC6  0E80               	movlw	128
 17116  003EC8  ECBB  F02D         	call	_lcdInst
 17117                           
 17118                           ;Test.c: 634: printf("D:RET|2:C %d  ", res);
 17119  003ECC  0E6E               	movlw	low STR_122
 17120  003ECE  0100               	movlb	0	; () banked
 17121  003ED0  6F8E               	movwf	printf@f& (0+255),b
 17122  003ED2  0EFE               	movlw	high STR_122
 17123  003ED4  0100               	movlb	0	; () banked
 17124  003ED6  6F8F               	movwf	(printf@f+1)& (0+255),b
 17125  003ED8  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 17126  003EDC  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 17127  003EE0  ECC1  F00B         	call	_printf	;wreg free
 17128  003EE4                     l9121:
 17129  003EE4  A281               	btfss	3969,1,c	;volatile
 17130  003EE6  D786               	goto	l9075
 17131  003EE8  D7DA               	goto	l9113
 17132  003EEA                     __end_of_BlockerTest:
 17133                           	opt stack 0
 17134                           tblptru	equ	0xFF8
 17135                           tblptrh	equ	0xFF7
 17136                           tblptrl	equ	0xFF6
 17137                           tablat	equ	0xFF5
 17138                           prodh	equ	0xFF4
 17139                           prodl	equ	0xFF3
 17140                           intcon	equ	0xFF2
 17141                           intcon2	equ	0xFF1
 17142                           intcon3	equ	0xFF0
 17143                           postinc0	equ	0xFEE
 17144                           wreg	equ	0xFE8
 17145                           postdec1	equ	0xFE5
 17146                           fsr1l	equ	0xFE1
 17147                           indf2	equ	0xFDF
 17148                           postinc2	equ	0xFDE
 17149                           postdec2	equ	0xFDD
 17150                           fsr2h	equ	0xFDA
 17151                           fsr2l	equ	0xFD9
 17152                           status	equ	0xFD8
 17153                           
 17154 ;; *************** function _readADC *****************
 17155 ;; Defined at:
 17156 ;;		line 15 in file "ADCFunctionality.c"
 17157 ;; Parameters:    Size  Location     Type
 17158 ;;  channel         1    wreg     unsigned char 
 17159 ;; Auto vars:     Size  Location     Type
 17160 ;;  channel         1    1[BANK0 ] unsigned char 
 17161 ;; Return value:  Size  Location     Type
 17162 ;;                  1    wreg      void 
 17163 ;; Registers used:
 17164 ;;		wreg, status,2, status,0, cstack
 17165 ;; Tracked objects:
 17166 ;;		On entry : 0/0
 17167 ;;		On exit  : 0/0
 17168 ;;		Unchanged: 0/0
 17169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17171 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17172 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17173 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17174 ;;Total ram usage:        2 bytes
 17175 ;; Hardware stack levels used:    1
 17176 ;; Hardware stack levels required when called:    7
 17177 ;; This function calls:
 17178 ;;		Nothing
 17179 ;; This function is called by:
 17180 ;;		_readIR
 17181 ;;		_readMAG
 17182 ;;		_readCOND
 17183 ;;		_sensorTest
 17184 ;;		_PlatformTest
 17185 ;;		_BlockerTest
 17186 ;; This function uses a non-reentrant model
 17187 ;;
 17188                           
 17189                           	psect	text55
 17190  00594C                     __ptext55:
 17191                           	opt stack 0
 17192  00594C                     _readADC:
 17193                           	opt stack 20
 17194                           
 17195                           ;incstack = 0
 17196                           ;readADC@channel stored from wreg
 17197  00594C  0100               	movlb	0	; () banked
 17198  00594E  6F81               	movwf	readADC@channel& (0+255),b
 17199                           
 17200                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 17201  005950  0100               	movlb	0	; () banked
 17202  005952  4581               	rlncf	readADC@channel& (0+255),w,b
 17203  005954  46E8               	rlncf	wreg,f,c
 17204  005956  0BFC               	andlw	252
 17205  005958  6EC2               	movwf	4034,c	;volatile
 17206                           
 17207                           ; BSR set to: 0
 17208                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 17209  00595A  80C2               	bsf	4034,0,c	;volatile
 17210                           
 17211                           ; BSR set to: 0
 17212                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 17213  00595C  82C2               	bsf	4034,1,c	;volatile
 17214                           
 17215                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 17216  00595E  D009               	goto	l6487
 17217  005960                     l6485:
 17218  005960  0E34               	movlw	52
 17219  005962  0100               	movlb	0	; () banked
 17220  005964  6F80               	movwf	??_readADC& (0+255),b
 17221  005966  0EF1               	movlw	241
 17222  005968                     u11247:
 17223  005968  2EE8               	decfsz	wreg,f,c
 17224  00596A  D7FE               	bra	u11247
 17225  00596C  2F80               	decfsz	??_readADC& (0+255),f,b
 17226  00596E  D7FC               	bra	u11247
 17227  005970  D000               	nop2	
 17228  005972                     l6487:
 17229  005972  A2C2               	btfss	4034,1,c	;volatile
 17230  005974  0012               	return	
 17231  005976  D7F4               	goto	l6485
 17232  005978                     __end_of_readADC:
 17233                           	opt stack 0
 17234                           tblptru	equ	0xFF8
 17235                           tblptrh	equ	0xFF7
 17236                           tblptrl	equ	0xFF6
 17237                           tablat	equ	0xFF5
 17238                           prodh	equ	0xFF4
 17239                           prodl	equ	0xFF3
 17240                           intcon	equ	0xFF2
 17241                           intcon2	equ	0xFF1
 17242                           intcon3	equ	0xFF0
 17243                           postinc0	equ	0xFEE
 17244                           wreg	equ	0xFE8
 17245                           postdec1	equ	0xFE5
 17246                           fsr1l	equ	0xFE1
 17247                           indf2	equ	0xFDF
 17248                           postinc2	equ	0xFDE
 17249                           postdec2	equ	0xFDD
 17250                           fsr2h	equ	0xFDA
 17251                           fsr2l	equ	0xFD9
 17252                           status	equ	0xFD8
 17253                           
 17254 ;; *************** function _printf *****************
 17255 ;; Defined at:
 17256 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 17257 ;; Parameters:    Size  Location     Type
 17258 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 17259 ;;		 -> STR_129(18), STR_128(18), STR_127(17), STR_126(17), 
 17260 ;;		 -> STR_125(15), STR_124(15), STR_123(18), STR_122(15), 
 17261 ;;		 -> STR_121(18), STR_120(18), STR_119(17), STR_118(17), 
 17262 ;;		 -> STR_117(17), STR_116(17), STR_115(17), STR_114(17), 
 17263 ;;		 -> STR_113(17), STR_112(17), STR_111(18), STR_110(17), 
 17264 ;;		 -> STR_109(15), STR_108(15), STR_107(15), STR_106(17), 
 17265 ;;		 -> STR_105(17), STR_104(17), STR_103(16), STR_102(17), 
 17266 ;;		 -> STR_101(17), STR_100(17), STR_99(17), STR_98(17), 
 17267 ;;		 -> STR_97(17), STR_96(15), STR_95(11), STR_94(17), 
 17268 ;;		 -> STR_93(11), STR_92(17), STR_91(14), STR_90(15), 
 17269 ;;		 -> STR_89(14), STR_88(10), STR_87(9), STR_86(9), 
 17270 ;;		 -> STR_85(10), STR_84(10), STR_83(16), STR_82(15), 
 17271 ;;		 -> STR_81(3), STR_80(15), STR_79(13), STR_78(14), 
 17272 ;;		 -> STR_77(8), STR_76(14), STR_75(15), STR_74(12), 
 17273 ;;		 -> STR_73(14), STR_72(17), STR_71(14), STR_70(15), 
 17274 ;;		 -> STR_69(17), STR_68(17), STR_67(7), STR_66(21), 
 17275 ;;		 -> STR_65(17), STR_64(17), STR_63(24), STR_50(17), 
 17276 ;;		 -> STR_49(17), STR_48(17), STR_47(17), STR_46(17), 
 17277 ;;		 -> STR_45(17), STR_44(17), STR_43(17), STR_42(17), 
 17278 ;;		 -> STR_41(17), STR_40(17), STR_39(17), STR_38(17), 
 17279 ;;		 -> STR_37(17), STR_36(17), STR_35(17), STR_34(17), 
 17280 ;;		 -> STR_33(17), STR_32(17), STR_31(17), STR_30(17), 
 17281 ;;		 -> STR_29(3), STR_28(17), STR_27(17), STR_26(17), 
 17282 ;;		 -> STR_25(17), STR_24(17), STR_23(14), STR_22(10), 
 17283 ;;		 -> STR_21(24), STR_7(7), STR_6(17), STR_5(18), 
 17284 ;;		 -> STR_4(16), STR_3(18), STR_2(14), STR_1(18), 
 17285 ;; Auto vars:     Size  Location     Type
 17286 ;;  tmpval          4    0        struct .
 17287 ;;  width           2   41[BANK0 ] int 
 17288 ;;  val             2   37[BANK0 ] unsigned int 
 17289 ;;  len             2   35[BANK0 ] unsigned int 
 17290 ;;  ap              2   33[BANK0 ] PTR void [1]
 17291 ;;		 -> ?i2_printf(2), ?_printf(2), 
 17292 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 17293 ;;		 -> STR_130(7), count_total(2), printRTC@month(4), UI@month(4), 
 17294 ;;  c               1   40[BANK0 ] char 
 17295 ;;  flag            1   39[BANK0 ] unsigned char 
 17296 ;;  prec            1   30[BANK0 ] char 
 17297 ;; Return value:  Size  Location     Type
 17298 ;;                  2   14[BANK0 ] int 
 17299 ;; Registers used:
 17300 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17301 ;; Tracked objects:
 17302 ;;		On entry : 0/0
 17303 ;;		On exit  : 0/0
 17304 ;;		Unchanged: 0/0
 17305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17306 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17307 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17308 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17309 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17310 ;;Total ram usage:       29 bytes
 17311 ;; Hardware stack levels used:    1
 17312 ;; Hardware stack levels required when called:    9
 17313 ;; This function calls:
 17314 ;;		___lwdiv
 17315 ;;		___lwmod
 17316 ;;		___wmul
 17317 ;;		_isdigit
 17318 ;;		_putch
 17319 ;; This function is called by:
 17320 ;;		_UI
 17321 ;;		_change_state_to_menu_start
 17322 ;;		_change_state_to_menu_12
 17323 ;;		_change_state_to_menu_22
 17324 ;;		_printRTC
 17325 ;;		_EEPROM_write
 17326 ;;		_Test
 17327 ;;		_algorithmTest
 17328 ;;		_sensorTest
 17329 ;;		_actuatorTest
 17330 ;;		_BothServos
 17331 ;;		_PortTestDC
 17332 ;;		_PlatformTest
 17333 ;;		_SpeedTest
 17334 ;;		_BlockerTest
 17335 ;;		_arm
 17336 ;;		_PortTestPusher
 17337 ;;		_ToggleTestA5
 17338 ;; This function uses a non-reentrant model
 17339 ;;
 17340                           
 17341                           	psect	text56
 17342  001782                     __ptext56:
 17343                           	opt stack 0
 17344  001782                     _printf:
 17345                           	opt stack 18
 17346                           
 17347                           ;doprnt.c: 466: va_list ap;
 17348                           ;doprnt.c: 499: signed char c;
 17349                           ;doprnt.c: 501: int width;
 17350                           ;doprnt.c: 506: signed char prec;
 17351                           ;doprnt.c: 508: unsigned char flag;
 17352                           ;doprnt.c: 523: union {
 17353                           ;doprnt.c: 524: unsigned long vd;
 17354                           ;doprnt.c: 525: double integ;
 17355                           ;doprnt.c: 526: } tmpval;
 17356                           ;doprnt.c: 528: unsigned int val;
 17357                           ;doprnt.c: 529: unsigned len;
 17358                           ;doprnt.c: 530: const char * cp;
 17359                           ;doprnt.c: 533: *ap = __va_start();
 17360                           
 17361                           ;incstack = 0
 17362  001782  0E90               	movlw	low (?_printf+2)
 17363  001784  0100               	movlb	0	; () banked
 17364  001786  6FA1               	movwf	printf@ap& (0+255),b
 17365  001788  0E00               	movlw	high (?_printf+2)
 17366  00178A  0100               	movlb	0	; () banked
 17367  00178C  6FA2               	movwf	(printf@ap+1)& (0+255),b
 17368                           
 17369                           ;doprnt.c: 536: while(c = *f++) {
 17370  00178E  D205               	goto	l6809
 17371  001790                     l6679:
 17372                           
 17373                           ; BSR set to: 0
 17374                           ;doprnt.c: 538: if(c != '%')
 17375  001790  0E25               	movlw	37
 17376  001792  0100               	movlb	0	; () banked
 17377  001794  19A8               	xorwf	printf@c& (0+255),w,b
 17378  001796  B4D8               	btfsc	status,2,c
 17379  001798  D005               	goto	l6683
 17380                           
 17381                           ; BSR set to: 0
 17382                           ;doprnt.c: 540: {
 17383                           ;doprnt.c: 541: (putch(c) );
 17384  00179A  0100               	movlb	0	; () banked
 17385  00179C  51A8               	movf	printf@c& (0+255),w,b
 17386  00179E  ECB3  F02D         	call	_putch
 17387                           
 17388                           ;doprnt.c: 542: continue;
 17389  0017A2  D1FB               	goto	l6809
 17390  0017A4                     l6683:
 17391                           
 17392                           ;doprnt.c: 543: }
 17393                           ;doprnt.c: 546: width = 0;
 17394  0017A4  0E00               	movlw	0
 17395  0017A6  0100               	movlb	0	; () banked
 17396  0017A8  6FAA               	movwf	(printf@width+1)& (0+255),b
 17397  0017AA  0E00               	movlw	0
 17398  0017AC  6FA9               	movwf	printf@width& (0+255),b
 17399                           
 17400                           ;doprnt.c: 548: flag = 0;
 17401  0017AE  0E00               	movlw	0
 17402  0017B0  0100               	movlb	0	; () banked
 17403  0017B2  6FA7               	movwf	printf@flag& (0+255),b
 17404                           
 17405                           ; BSR set to: 0
 17406                           ;doprnt.c: 551: switch(*f) {
 17407                           
 17408                           ;doprnt.c: 550: for(;;) {
 17409  0017B4  D005               	goto	l6689
 17410  0017B6                     l6685:
 17411                           
 17412                           ;doprnt.c: 580: flag |= 0x04;
 17413  0017B6  0100               	movlb	0	; () banked
 17414  0017B8  85A7               	bsf	printf@flag& (0+255),2,b
 17415                           
 17416                           ;doprnt.c: 581: f++;
 17417  0017BA  0100               	movlb	0	; () banked
 17418  0017BC  4B8E               	infsnz	printf@f& (0+255),f,b
 17419  0017BE  2B8F               	incf	(printf@f+1)& (0+255),f,b
 17420  0017C0                     l6689:
 17421  0017C0  C08E  FFF6         	movff	printf@f,tblptrl
 17422  0017C4  C08F  FFF7         	movff	printf@f+1,tblptrh
 17423  0017C8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17424  0017C8  6AF8               	clrf	tblptru,c
 17425  0017CA                     	endif
 17426  0017CA                     	if	0	;tblptru may be non-zero
 17427  0017CA                     	endif
 17428  0017CA  0008               	tblrd		*
 17429  0017CC  50F5               	movf	tablat,w,c
 17430                           
 17431                           ; Switch size 1, requested type "space"
 17432                           ; Number of cases is 1, Range of values is 48 to 48
 17433                           ; switch strategies available:
 17434                           ; Name         Instructions Cycles
 17435                           ; simple_byte            4     3 (average)
 17436                           ;	Chosen strategy is simple_byte
 17437  0017CE  0A30               	xorlw	48	; case 48
 17438  0017D0  B4D8               	btfsc	status,2,c
 17439  0017D2  D7F1               	goto	l6685
 17440                           
 17441                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 17442                           
 17443                           ;doprnt.c: 586: }
 17444                           
 17445                           ;doprnt.c: 585: break;
 17446  0017D4  C08E  FFF6         	movff	printf@f,tblptrl
 17447  0017D8  C08F  FFF7         	movff	printf@f+1,tblptrh
 17448  0017DC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17449  0017DC  6AF8               	clrf	tblptru,c
 17450  0017DE                     	endif
 17451  0017DE                     	if	0	;tblptru may be non-zero
 17452  0017DE                     	endif
 17453  0017DE  0008               	tblrd		*
 17454  0017E0  50F5               	movf	tablat,w,c
 17455  0017E2  ECBC  F02C         	call	_isdigit
 17456  0017E6  A0D8               	btfss	status,0,c
 17457  0017E8  D0D2               	goto	l6737
 17458                           
 17459                           ;doprnt.c: 598: width = 0;
 17460  0017EA  0E00               	movlw	0
 17461  0017EC  0100               	movlb	0	; () banked
 17462  0017EE  6FAA               	movwf	(printf@width+1)& (0+255),b
 17463  0017F0  0E00               	movlw	0
 17464  0017F2  6FA9               	movwf	printf@width& (0+255),b
 17465  0017F4                     l6695:
 17466                           
 17467                           ;doprnt.c: 600: width *= 10;
 17468  0017F4  C0A9  F080         	movff	printf@width,___wmul@multiplier
 17469  0017F8  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 17470  0017FC  0E00               	movlw	0
 17471  0017FE  0100               	movlb	0	; () banked
 17472  001800  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 17473  001802  0E0A               	movlw	10
 17474  001804  6F82               	movwf	___wmul@multiplicand& (0+255),b
 17475  001806  EC25  F02B         	call	___wmul	;wreg free
 17476  00180A  C080  F0A9         	movff	?___wmul,printf@width
 17477  00180E  C081  F0AA         	movff	?___wmul+1,printf@width+1
 17478                           
 17479                           ;doprnt.c: 601: width += *f++ - '0';
 17480  001812  0ED0               	movlw	208
 17481  001814  0100               	movlb	0	; () banked
 17482  001816  6F9A               	movwf	??_printf& (0+255),b
 17483  001818  0EFF               	movlw	255
 17484  00181A  0100               	movlb	0	; () banked
 17485  00181C  6F9B               	movwf	(??_printf+1)& (0+255),b
 17486  00181E  C08E  FFF6         	movff	printf@f,tblptrl
 17487  001822  C08F  FFF7         	movff	printf@f+1,tblptrh
 17488  001826                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17489  001826  6AF8               	clrf	tblptru,c
 17490  001828                     	endif
 17491  001828                     	if	0	;tblptru may be non-zero
 17492  001828                     	endif
 17493  001828  0008               	tblrd		*
 17494  00182A  50F5               	movf	tablat,w,c
 17495  00182C  0100               	movlb	0	; () banked
 17496  00182E  6F9C               	movwf	(??_printf+2)& (0+255),b
 17497  001830  6B9D               	clrf	(??_printf+3)& (0+255),b
 17498  001832  0100               	movlb	0	; () banked
 17499  001834  519A               	movf	??_printf& (0+255),w,b
 17500  001836  0100               	movlb	0	; () banked
 17501  001838  279C               	addwf	(??_printf+2)& (0+255),f,b
 17502  00183A  0100               	movlb	0	; () banked
 17503  00183C  519B               	movf	(??_printf+1)& (0+255),w,b
 17504  00183E  0100               	movlb	0	; () banked
 17505  001840  239D               	addwfc	(??_printf+3)& (0+255),f,b
 17506  001842  0100               	movlb	0	; () banked
 17507  001844  519C               	movf	(??_printf+2)& (0+255),w,b
 17508  001846  0100               	movlb	0	; () banked
 17509  001848  27A9               	addwf	printf@width& (0+255),f,b
 17510  00184A  0100               	movlb	0	; () banked
 17511  00184C  519D               	movf	(??_printf+3)& (0+255),w,b
 17512  00184E  0100               	movlb	0	; () banked
 17513  001850  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 17514                           
 17515                           ; BSR set to: 0
 17516  001852  0100               	movlb	0	; () banked
 17517  001854  4B8E               	infsnz	printf@f& (0+255),f,b
 17518  001856  2B8F               	incf	(printf@f+1)& (0+255),f,b
 17519                           
 17520                           ; BSR set to: 0
 17521                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 17522  001858  C08E  FFF6         	movff	printf@f,tblptrl
 17523  00185C  C08F  FFF7         	movff	printf@f+1,tblptrh
 17524  001860                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17525  001860  6AF8               	clrf	tblptru,c
 17526  001862                     	endif
 17527  001862                     	if	0	;tblptru may be non-zero
 17528  001862                     	endif
 17529  001862  0008               	tblrd		*
 17530  001864  50F5               	movf	tablat,w,c
 17531  001866  ECBC  F02C         	call	_isdigit
 17532  00186A  A0D8               	btfss	status,0,c
 17533  00186C  D090               	goto	l6737
 17534  00186E  D7C2               	goto	l6695
 17535  001870                     l6703:
 17536                           
 17537                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 17538  001870  C0A1  FFD9         	movff	printf@ap,fsr2l
 17539  001874  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 17540  001878  CFDE F09F          	movff	postinc2,printf@cp
 17541  00187C  CFDD F0A0          	movff	postdec2,printf@cp+1
 17542  001880  0E02               	movlw	2
 17543  001882  0100               	movlb	0	; () banked
 17544  001884  27A1               	addwf	printf@ap& (0+255),f,b
 17545  001886  0E00               	movlw	0
 17546  001888  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 17547                           
 17548                           ; BSR set to: 0
 17549                           ;doprnt.c: 740: if(!cp)
 17550  00188A  0100               	movlb	0	; () banked
 17551  00188C  519F               	movf	printf@cp& (0+255),w,b
 17552  00188E  0100               	movlb	0	; () banked
 17553  001890  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 17554  001892  A4D8               	btfss	status,2,c
 17555  001894  D006               	goto	l6711
 17556                           
 17557                           ; BSR set to: 0
 17558                           ;doprnt.c: 741: cp = "(null)";
 17559  001896  0EB6               	movlw	low STR_130
 17560  001898  0100               	movlb	0	; () banked
 17561  00189A  6F9F               	movwf	printf@cp& (0+255),b
 17562  00189C  0EFF               	movlw	high STR_130
 17563  00189E  0100               	movlb	0	; () banked
 17564  0018A0  6FA0               	movwf	(printf@cp+1)& (0+255),b
 17565  0018A2                     l6711:
 17566                           
 17567                           ; BSR set to: 0
 17568                           ;doprnt.c: 745: len = 0;
 17569  0018A2  0E00               	movlw	0
 17570  0018A4  0100               	movlb	0	; () banked
 17571  0018A6  6FA4               	movwf	(printf@len+1)& (0+255),b
 17572  0018A8  0E00               	movlw	0
 17573  0018AA  6FA3               	movwf	printf@len& (0+255),b
 17574                           
 17575                           ;doprnt.c: 746: while(cp[len])
 17576  0018AC  D003               	goto	l6715
 17577  0018AE                     l6713:
 17578                           
 17579                           ;doprnt.c: 747: len++;
 17580  0018AE  0100               	movlb	0	; () banked
 17581  0018B0  4BA3               	infsnz	printf@len& (0+255),f,b
 17582  0018B2  2BA4               	incf	(printf@len+1)& (0+255),f,b
 17583  0018B4                     l6715:
 17584                           
 17585                           ; BSR set to: 0
 17586  0018B4  0100               	movlb	0	; () banked
 17587  0018B6  51A3               	movf	printf@len& (0+255),w,b
 17588  0018B8  0100               	movlb	0	; () banked
 17589  0018BA  259F               	addwf	printf@cp& (0+255),w,b
 17590  0018BC  0100               	movlb	0	; () banked
 17591  0018BE  6F9A               	movwf	??_printf& (0+255),b
 17592  0018C0  0100               	movlb	0	; () banked
 17593  0018C2  51A4               	movf	(printf@len+1)& (0+255),w,b
 17594  0018C4  0100               	movlb	0	; () banked
 17595  0018C6  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 17596  0018C8  0100               	movlb	0	; () banked
 17597  0018CA  6F9B               	movwf	(??_printf+1)& (0+255),b
 17598  0018CC  C09A  FFF6         	movff	??_printf,tblptrl
 17599  0018D0  C09B  FFF7         	movff	??_printf+1,tblptrh
 17600  0018D4  0E00               	movlw	low (__mediumconst shr (0+16))
 17601  0018D6  6EF8               	movwf	tblptru,c
 17602  0018D8  0E0F               	movlw	(high __ramtop+-1)
 17603  0018DA  64F7               	cpfsgt	tblptrh,c
 17604  0018DC  D003               	bra	u5197
 17605  0018DE  0008               	tblrd		*
 17606  0018E0  50F5               	movf	tablat,w,c
 17607  0018E2  D005               	bra	u5190
 17608  0018E4                     u5197:
 17609  0018E4  CFF6 FFE9          	movff	tblptrl,fsr0l
 17610  0018E8  CFF7 FFEA          	movff	tblptrh,fsr0h
 17611  0018EC  50EF               	movf	indf0,w,c
 17612  0018EE                     u5190:
 17613  0018EE  0900               	iorlw	0
 17614  0018F0  A4D8               	btfss	status,2,c
 17615  0018F2  D7DD               	goto	l6713
 17616                           
 17617                           ;doprnt.c: 757: if(width > len)
 17618  0018F4  0100               	movlb	0	; () banked
 17619  0018F6  51A9               	movf	printf@width& (0+255),w,b
 17620  0018F8  0100               	movlb	0	; () banked
 17621  0018FA  5DA3               	subwf	printf@len& (0+255),w,b
 17622  0018FC  0100               	movlb	0	; () banked
 17623  0018FE  51AA               	movf	(printf@width+1)& (0+255),w,b
 17624  001900  0100               	movlb	0	; () banked
 17625  001902  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 17626  001904  B0D8               	btfsc	status,0,c
 17627  001906  D009               	goto	l6721
 17628                           
 17629                           ; BSR set to: 0
 17630                           ;doprnt.c: 758: width -= len;
 17631  001908  0100               	movlb	0	; () banked
 17632  00190A  51A3               	movf	printf@len& (0+255),w,b
 17633  00190C  0100               	movlb	0	; () banked
 17634  00190E  5FA9               	subwf	printf@width& (0+255),f,b
 17635  001910  0100               	movlb	0	; () banked
 17636  001912  51A4               	movf	(printf@len+1)& (0+255),w,b
 17637  001914  0100               	movlb	0	; () banked
 17638  001916  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 17639  001918  D009               	goto	l6725
 17640  00191A                     l6721:
 17641                           
 17642                           ; BSR set to: 0
 17643                           ;doprnt.c: 759: else
 17644                           ;doprnt.c: 760: width = 0;
 17645  00191A  0E00               	movlw	0
 17646  00191C  0100               	movlb	0	; () banked
 17647  00191E  6FAA               	movwf	(printf@width+1)& (0+255),b
 17648  001920  0E00               	movlw	0
 17649  001922  6FA9               	movwf	printf@width& (0+255),b
 17650                           
 17651                           ; BSR set to: 0
 17652                           ;doprnt.c: 764: while(width--)
 17653  001924  D003               	goto	l6725
 17654  001926                     l6723:
 17655                           
 17656                           ; BSR set to: 0
 17657                           ;doprnt.c: 765: (putch(' ') );
 17658  001926  0E20               	movlw	32
 17659  001928  ECB3  F02D         	call	_putch
 17660  00192C                     l6725:
 17661  00192C  0100               	movlb	0	; () banked
 17662  00192E  07A9               	decf	printf@width& (0+255),f,b
 17663  001930  A0D8               	btfss	status,0,c
 17664  001932  07AA               	decf	(printf@width+1)& (0+255),f,b
 17665  001934  0100               	movlb	0	; () banked
 17666  001936  29A9               	incf	printf@width& (0+255),w,b
 17667  001938  E1F6               	bnz	l6723
 17668  00193A  0100               	movlb	0	; () banked
 17669  00193C  29AA               	incf	(printf@width+1)& (0+255),w,b
 17670  00193E  B4D8               	btfsc	status,2,c
 17671  001940  D017               	goto	l6731
 17672  001942  D7F1               	goto	l6723
 17673  001944                     l6727:
 17674                           
 17675                           ; BSR set to: 0
 17676                           ;doprnt.c: 768: (putch(*cp++) );
 17677  001944  C09F  FFF6         	movff	printf@cp,tblptrl
 17678  001948  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 17679  00194C  0E00               	movlw	low (__mediumconst shr (0+16))
 17680  00194E  6EF8               	movwf	tblptru,c
 17681  001950  0E0F               	movlw	(high __ramtop+-1)
 17682  001952  64F7               	cpfsgt	tblptrh,c
 17683  001954  D003               	bra	u5237
 17684  001956  0008               	tblrd		*
 17685  001958  50F5               	movf	tablat,w,c
 17686  00195A  D005               	bra	u5230
 17687  00195C                     u5237:
 17688  00195C  CFF6 FFE9          	movff	tblptrl,fsr0l
 17689  001960  CFF7 FFEA          	movff	tblptrh,fsr0h
 17690  001964  50EF               	movf	indf0,w,c
 17691  001966                     u5230:
 17692  001966  ECB3  F02D         	call	_putch
 17693  00196A  0100               	movlb	0	; () banked
 17694  00196C  4B9F               	infsnz	printf@cp& (0+255),f,b
 17695  00196E  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 17696  001970                     l6731:
 17697                           
 17698                           ; BSR set to: 0
 17699  001970  0100               	movlb	0	; () banked
 17700  001972  07A3               	decf	printf@len& (0+255),f,b
 17701  001974  A0D8               	btfss	status,0,c
 17702  001976  07A4               	decf	(printf@len+1)& (0+255),f,b
 17703  001978  0100               	movlb	0	; () banked
 17704  00197A  29A3               	incf	printf@len& (0+255),w,b
 17705  00197C  E1E3               	bnz	l6727
 17706  00197E  0100               	movlb	0	; () banked
 17707  001980  29A4               	incf	(printf@len+1)& (0+255),w,b
 17708  001982  B4D8               	btfsc	status,2,c
 17709  001984  D10A               	goto	l6809
 17710  001986  D7DE               	goto	l6727
 17711  001988                     l6733:
 17712                           
 17713                           ; BSR set to: 0
 17714                           ;doprnt.c: 818: flag |= 0x40;
 17715  001988  0100               	movlb	0	; () banked
 17716  00198A  8DA7               	bsf	printf@flag& (0+255),6,b
 17717                           
 17718                           ; BSR set to: 0
 17719                           ;doprnt.c: 822: }
 17720                           
 17721                           ;doprnt.c: 819: break;
 17722  00198C  D01D               	goto	l1517
 17723  00198E                     l6737:
 17724  00198E  C08E  FFF6         	movff	printf@f,tblptrl
 17725  001992  C08F  FFF7         	movff	printf@f+1,tblptrh
 17726  001996  0100               	movlb	0	; () banked
 17727  001998  4B8E               	infsnz	printf@f& (0+255),f,b
 17728  00199A  2B8F               	incf	(printf@f+1)& (0+255),f,b
 17729  00199C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17730  00199C  6AF8               	clrf	tblptru,c
 17731  00199E                     	endif
 17732  00199E                     	if	0	;tblptru may be non-zero
 17733  00199E                     	endif
 17734  00199E  0008               	tblrd		*
 17735  0019A0  CFF5 F0A8          	movff	tablat,printf@c
 17736  0019A4  0100               	movlb	0	; () banked
 17737  0019A6  51A8               	movf	printf@c& (0+255),w,b
 17738                           
 17739                           ; Switch size 1, requested type "space"
 17740                           ; Number of cases is 5, Range of values is 0 to 117
 17741                           ; switch strategies available:
 17742                           ; Name         Instructions Cycles
 17743                           ; simple_byte           16     9 (average)
 17744                           ;	Chosen strategy is simple_byte
 17745  0019A8  0A00               	xorlw	0	; case 0
 17746  0019AA  B4D8               	btfsc	status,2,c
 17747  0019AC  0012               	return	
 17748  0019AE  0A64               	xorlw	100	; case 100
 17749  0019B0  B4D8               	btfsc	status,2,c
 17750  0019B2  D00A               	goto	l1517
 17751  0019B4  0A0D               	xorlw	13	; case 105
 17752  0019B6  B4D8               	btfsc	status,2,c
 17753  0019B8  D007               	goto	l1517
 17754  0019BA  0A1A               	xorlw	26	; case 115
 17755  0019BC  B4D8               	btfsc	status,2,c
 17756  0019BE  D758               	goto	l6703
 17757  0019C0  0A06               	xorlw	6	; case 117
 17758  0019C2  B4D8               	btfsc	status,2,c
 17759  0019C4  D7E1               	goto	l6733
 17760  0019C6  D0E9               	goto	l6809
 17761  0019C8                     l1517:
 17762                           
 17763                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 17764  0019C8  0100               	movlb	0	; () banked
 17765  0019CA  BDA7               	btfsc	printf@flag& (0+255),6,b
 17766  0019CC  D019               	goto	l6749
 17767                           
 17768                           ; BSR set to: 0
 17769                           ;doprnt.c: 1253: {
 17770                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 17771  0019CE  C0A1  FFD9         	movff	printf@ap,fsr2l
 17772  0019D2  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 17773  0019D6  CFDE F0A5          	movff	postinc2,printf@val
 17774  0019DA  CFDD F0A6          	movff	postdec2,printf@val+1
 17775                           
 17776                           ; BSR set to: 0
 17777  0019DE  0E02               	movlw	2
 17778  0019E0  0100               	movlb	0	; () banked
 17779  0019E2  27A1               	addwf	printf@ap& (0+255),f,b
 17780  0019E4  0E00               	movlw	0
 17781  0019E6  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 17782                           
 17783                           ; BSR set to: 0
 17784                           ;doprnt.c: 1261: if((int)val < 0) {
 17785  0019E8  0100               	movlb	0	; () banked
 17786  0019EA  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 17787  0019EC  D016               	goto	l6753
 17788                           
 17789                           ; BSR set to: 0
 17790                           ;doprnt.c: 1262: flag |= 0x03;
 17791  0019EE  0E03               	movlw	3
 17792  0019F0  0100               	movlb	0	; () banked
 17793  0019F2  13A7               	iorwf	printf@flag& (0+255),f,b
 17794                           
 17795                           ; BSR set to: 0
 17796                           ;doprnt.c: 1263: val = -val;
 17797  0019F4  0100               	movlb	0	; () banked
 17798  0019F6  6DA5               	negf	printf@val& (0+255),b
 17799  0019F8  1FA6               	comf	(printf@val+1)& (0+255),f,b
 17800  0019FA  B0D8               	btfsc	status,0,c
 17801  0019FC  2BA6               	incf	(printf@val+1)& (0+255),f,b
 17802                           
 17803                           ; BSR set to: 0
 17804                           ;doprnt.c: 1264: }
 17805                           ;doprnt.c: 1266: }
 17806  0019FE  D00D               	goto	l6753
 17807  001A00                     l6749:
 17808                           
 17809                           ; BSR set to: 0
 17810                           ;doprnt.c: 1268: else
 17811                           ;doprnt.c: 1273: {
 17812                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 17813  001A00  C0A1  FFD9         	movff	printf@ap,fsr2l
 17814  001A04  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 17815  001A08  CFDE F0A5          	movff	postinc2,printf@val
 17816  001A0C  CFDD F0A6          	movff	postdec2,printf@val+1
 17817                           
 17818                           ; BSR set to: 0
 17819  001A10  0E02               	movlw	2
 17820  001A12  0100               	movlb	0	; () banked
 17821  001A14  27A1               	addwf	printf@ap& (0+255),f,b
 17822  001A16  0E00               	movlw	0
 17823  001A18  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 17824  001A1A                     l6753:
 17825                           
 17826                           ; BSR set to: 0
 17827                           ;doprnt.c: 1287: }
 17828                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 17829  001A1A  0E01               	movlw	1
 17830  001A1C  0100               	movlb	0	; () banked
 17831  001A1E  6FA8               	movwf	printf@c& (0+255),b
 17832  001A20                     l6755:
 17833                           
 17834                           ; BSR set to: 0
 17835  001A20  0E05               	movlw	5
 17836  001A22  0100               	movlb	0	; () banked
 17837  001A24  19A8               	xorwf	printf@c& (0+255),w,b
 17838  001A26  B4D8               	btfsc	status,2,c
 17839  001A28  D019               	goto	l6767
 17840                           
 17841                           ; BSR set to: 0
 17842                           ;doprnt.c: 1306: if(val < dpowers[c])
 17843                           
 17844                           ; BSR set to: 0
 17845                           
 17846                           ; BSR set to: 0
 17847  001A2A  0100               	movlb	0	; () banked
 17848  001A2C  51A8               	movf	printf@c& (0+255),w,b
 17849  001A2E  0D02               	mullw	2
 17850  001A30  0EAE               	movlw	low _dpowers
 17851  001A32  24F3               	addwf	prodl,w,c
 17852  001A34  6EF6               	movwf	tblptrl,c
 17853  001A36  0EFA               	movlw	high _dpowers
 17854  001A38  20F4               	addwfc	prodh,w,c
 17855  001A3A  6EF7               	movwf	tblptrh,c
 17856  001A3C                     	if	1	;There are 3 active tblptr bytes
 17857  001A3C  6AF8               	clrf	tblptru,c
 17858  001A3E  0E00               	movlw	low (__mediumconst shr (0+16))
 17859  001A40  22F8               	addwfc	tblptru,f,c
 17860  001A42                     	endif
 17861  001A42  0009               	tblrd		*+
 17862  001A44  50F5               	movf	tablat,w,c
 17863  001A46  0100               	movlb	0	; () banked
 17864  001A48  5DA5               	subwf	printf@val& (0+255),w,b
 17865  001A4A  0009               	tblrd		*+
 17866  001A4C  50F5               	movf	tablat,w,c
 17867  001A4E  0100               	movlb	0	; () banked
 17868  001A50  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 17869  001A52  A0D8               	btfss	status,0,c
 17870  001A54  D003               	goto	l6767
 17871                           
 17872                           ; BSR set to: 0
 17873                           
 17874                           ; BSR set to: 0
 17875                           
 17876                           ; BSR set to: 0
 17877                           ;doprnt.c: 1307: break;
 17878  001A56  0100               	movlb	0	; () banked
 17879  001A58  2BA8               	incf	printf@c& (0+255),f,b
 17880  001A5A  D7E2               	goto	l6755
 17881  001A5C                     l6767:
 17882                           
 17883                           ; BSR set to: 0
 17884                           ;doprnt.c: 1345: if(width && flag & 0x03)
 17885  001A5C  0100               	movlb	0	; () banked
 17886  001A5E  51A9               	movf	printf@width& (0+255),w,b
 17887  001A60  0100               	movlb	0	; () banked
 17888  001A62  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 17889  001A64  B4D8               	btfsc	status,2,c
 17890  001A66  D00B               	goto	l6773
 17891                           
 17892                           ; BSR set to: 0
 17893  001A68  C0A7  F09A         	movff	printf@flag,??_printf
 17894  001A6C  0E03               	movlw	3
 17895  001A6E  0100               	movlb	0	; () banked
 17896  001A70  179A               	andwf	??_printf& (0+255),f,b
 17897  001A72  B4D8               	btfsc	status,2,c
 17898  001A74  D004               	goto	l6773
 17899                           
 17900                           ; BSR set to: 0
 17901                           ;doprnt.c: 1346: width--;
 17902  001A76  0100               	movlb	0	; () banked
 17903  001A78  07A9               	decf	printf@width& (0+255),f,b
 17904  001A7A  A0D8               	btfss	status,0,c
 17905  001A7C  07AA               	decf	(printf@width+1)& (0+255),f,b
 17906  001A7E                     l6773:
 17907                           
 17908                           ; BSR set to: 0
 17909                           ;doprnt.c: 1381: if(width > c)
 17910  001A7E  0E80               	movlw	128
 17911  001A80  0100               	movlb	0	; () banked
 17912  001A82  BFA8               	btfsc	printf@c& (0+255),7,b
 17913  001A84  0E7F               	movlw	127
 17914  001A86  0100               	movlb	0	; () banked
 17915  001A88  6F9A               	movwf	??_printf& (0+255),b
 17916  001A8A  0100               	movlb	0	; () banked
 17917  001A8C  51A9               	movf	printf@width& (0+255),w,b
 17918  001A8E  0100               	movlb	0	; () banked
 17919  001A90  5DA8               	subwf	printf@c& (0+255),w,b
 17920  001A92  0100               	movlb	0	; () banked
 17921  001A94  51AA               	movf	(printf@width+1)& (0+255),w,b
 17922  001A96  0A80               	xorlw	128
 17923  001A98  0100               	movlb	0	; () banked
 17924  001A9A  599A               	subwfb	??_printf& (0+255),w,b
 17925  001A9C  B0D8               	btfsc	status,0,c
 17926  001A9E  D00B               	goto	l6777
 17927                           
 17928                           ; BSR set to: 0
 17929                           ;doprnt.c: 1382: width -= c;
 17930  001AA0  0100               	movlb	0	; () banked
 17931  001AA2  51A8               	movf	printf@c& (0+255),w,b
 17932  001AA4  0100               	movlb	0	; () banked
 17933  001AA6  5FA9               	subwf	printf@width& (0+255),f,b
 17934  001AA8  0E00               	movlw	0
 17935  001AAA  0100               	movlb	0	; () banked
 17936  001AAC  BFA8               	btfsc	printf@c& (0+255),7,b
 17937  001AAE  0EFF               	movlw	255
 17938  001AB0  0100               	movlb	0	; () banked
 17939  001AB2  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 17940  001AB4  D005               	goto	l6779
 17941  001AB6                     l6777:
 17942                           
 17943                           ; BSR set to: 0
 17944                           ;doprnt.c: 1383: else
 17945                           ;doprnt.c: 1384: width = 0;
 17946  001AB6  0E00               	movlw	0
 17947  001AB8  0100               	movlb	0	; () banked
 17948  001ABA  6FAA               	movwf	(printf@width+1)& (0+255),b
 17949  001ABC  0E00               	movlw	0
 17950  001ABE  6FA9               	movwf	printf@width& (0+255),b
 17951  001AC0                     l6779:
 17952                           
 17953                           ; BSR set to: 0
 17954                           ;doprnt.c: 1387: if(flag & 0x04) {
 17955  001AC0  0100               	movlb	0	; () banked
 17956  001AC2  A5A7               	btfss	printf@flag& (0+255),2,b
 17957  001AC4  D018               	goto	l6791
 17958                           
 17959                           ; BSR set to: 0
 17960                           ;doprnt.c: 1392: if(flag & 0x03)
 17961  001AC6  C0A7  F09A         	movff	printf@flag,??_printf
 17962  001ACA  0E03               	movlw	3
 17963  001ACC  0100               	movlb	0	; () banked
 17964  001ACE  179A               	andwf	??_printf& (0+255),f,b
 17965  001AD0  B4D8               	btfsc	status,2,c
 17966  001AD2  D003               	goto	l6785
 17967                           
 17968                           ; BSR set to: 0
 17969                           ;doprnt.c: 1393: (putch('-') );
 17970  001AD4  0E2D               	movlw	45
 17971  001AD6  ECB3  F02D         	call	_putch
 17972  001ADA                     l6785:
 17973                           
 17974                           ;doprnt.c: 1415: if(width)
 17975  001ADA  0100               	movlb	0	; () banked
 17976  001ADC  51A9               	movf	printf@width& (0+255),w,b
 17977  001ADE  0100               	movlb	0	; () banked
 17978  001AE0  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 17979  001AE2  B4D8               	btfsc	status,2,c
 17980  001AE4  D025               	goto	l6801
 17981                           
 17982                           ; BSR set to: 0
 17983                           ;doprnt.c: 1417: (putch('0') );
 17984                           
 17985                           ; BSR set to: 0
 17986                           
 17987                           ;doprnt.c: 1416: do
 17988  001AE6  0E30               	movlw	48
 17989  001AE8  ECB3  F02D         	call	_putch
 17990                           
 17991                           ;doprnt.c: 1418: while(--width);
 17992  001AEC  0100               	movlb	0	; () banked
 17993  001AEE  07A9               	decf	printf@width& (0+255),f,b
 17994  001AF0  A0D8               	btfss	status,0,c
 17995  001AF2  07AA               	decf	(printf@width+1)& (0+255),f,b
 17996  001AF4  D7F2               	goto	l6785
 17997  001AF6                     l6791:
 17998                           
 17999                           ; BSR set to: 0
 18000                           ;doprnt.c: 1422: {
 18001                           ;doprnt.c: 1424: if(width
 18002                           ;doprnt.c: 1428: )
 18003  001AF6  0100               	movlb	0	; () banked
 18004  001AF8  51A9               	movf	printf@width& (0+255),w,b
 18005  001AFA  0100               	movlb	0	; () banked
 18006  001AFC  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18007  001AFE  B4D8               	btfsc	status,2,c
 18008  001B00  D00D               	goto	l6797
 18009  001B02                     l6793:
 18010                           
 18011                           ; BSR set to: 0
 18012                           ;doprnt.c: 1430: (putch(' ') );
 18013  001B02  0E20               	movlw	32
 18014  001B04  ECB3  F02D         	call	_putch
 18015                           
 18016                           ;doprnt.c: 1431: while(--width);
 18017  001B08  0100               	movlb	0	; () banked
 18018  001B0A  07A9               	decf	printf@width& (0+255),f,b
 18019  001B0C  A0D8               	btfss	status,0,c
 18020  001B0E  07AA               	decf	(printf@width+1)& (0+255),f,b
 18021  001B10  0100               	movlb	0	; () banked
 18022  001B12  51A9               	movf	printf@width& (0+255),w,b
 18023  001B14  0100               	movlb	0	; () banked
 18024  001B16  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18025  001B18  A4D8               	btfss	status,2,c
 18026  001B1A  D7F3               	goto	l6793
 18027  001B1C                     l6797:
 18028                           
 18029                           ; BSR set to: 0
 18030                           ;doprnt.c: 1438: if(flag & 0x03)
 18031  001B1C  C0A7  F09A         	movff	printf@flag,??_printf
 18032  001B20  0E03               	movlw	3
 18033  001B22  0100               	movlb	0	; () banked
 18034  001B24  179A               	andwf	??_printf& (0+255),f,b
 18035  001B26  B4D8               	btfsc	status,2,c
 18036  001B28  D003               	goto	l6801
 18037                           
 18038                           ; BSR set to: 0
 18039                           ;doprnt.c: 1439: (putch('-') );
 18040  001B2A  0E2D               	movlw	45
 18041  001B2C  ECB3  F02D         	call	_putch
 18042  001B30                     l6801:
 18043                           
 18044                           ;doprnt.c: 1469: }
 18045                           ;doprnt.c: 1472: prec = c;
 18046  001B30  C0A8  F09E         	movff	printf@c,printf@prec
 18047                           
 18048                           ;doprnt.c: 1474: while(prec--) {
 18049  001B34  D02C               	goto	l6807
 18050  001B36                     l6803:
 18051                           
 18052                           ;doprnt.c: 1478: {
 18053                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 18054  001B36  0100               	movlb	0	; () banked
 18055  001B38  519E               	movf	printf@prec& (0+255),w,b
 18056  001B3A  0D02               	mullw	2
 18057  001B3C  0EAE               	movlw	low _dpowers
 18058  001B3E  24F3               	addwf	prodl,w,c
 18059  001B40  6EF6               	movwf	tblptrl,c
 18060  001B42  0EFA               	movlw	high _dpowers
 18061  001B44  20F4               	addwfc	prodh,w,c
 18062  001B46  6EF7               	movwf	tblptrh,c
 18063  001B48                     	if	1	;There are 3 active tblptr bytes
 18064  001B48  6AF8               	clrf	tblptru,c
 18065  001B4A  0E00               	movlw	low (__mediumconst shr (0+16))
 18066  001B4C  22F8               	addwfc	tblptru,f,c
 18067  001B4E                     	endif
 18068  001B4E  0009               	tblrd		*+
 18069  001B50  CFF5 F082          	movff	tablat,___lwdiv@divisor
 18070  001B54  000A               	tblrd		*-
 18071  001B56  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 18072  001B5A  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 18073  001B5E  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 18074  001B62  EC55  F027         	call	___lwdiv	;wreg free
 18075  001B66  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 18076  001B6A  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 18077  001B6E  0E00               	movlw	0
 18078  001B70  0100               	movlb	0	; () banked
 18079  001B72  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 18080  001B74  0E0A               	movlw	10
 18081  001B76  6F89               	movwf	___lwmod@divisor& (0+255),b
 18082  001B78  ECA3  F028         	call	___lwmod	;wreg free
 18083  001B7C  0100               	movlb	0	; () banked
 18084  001B7E  5187               	movf	?___lwmod& (0+255),w,b
 18085  001B80  0F30               	addlw	48
 18086  001B82  0100               	movlb	0	; () banked
 18087  001B84  6FA8               	movwf	printf@c& (0+255),b
 18088                           
 18089                           ; BSR set to: 0
 18090                           ;doprnt.c: 1523: }
 18091                           ;doprnt.c: 1524: (putch(c) );
 18092  001B86  0100               	movlb	0	; () banked
 18093  001B88  51A8               	movf	printf@c& (0+255),w,b
 18094  001B8A  ECB3  F02D         	call	_putch
 18095  001B8E                     l6807:
 18096  001B8E  0100               	movlb	0	; () banked
 18097  001B90  079E               	decf	printf@prec& (0+255),f,b
 18098  001B92  0100               	movlb	0	; () banked
 18099  001B94  299E               	incf	printf@prec& (0+255),w,b
 18100  001B96  A4D8               	btfss	status,2,c
 18101  001B98  D7CE               	goto	l6803
 18102  001B9A                     l6809:
 18103  001B9A  C08E  FFF6         	movff	printf@f,tblptrl
 18104  001B9E  C08F  FFF7         	movff	printf@f+1,tblptrh
 18105  001BA2  0100               	movlb	0	; () banked
 18106  001BA4  4B8E               	infsnz	printf@f& (0+255),f,b
 18107  001BA6  2B8F               	incf	(printf@f+1)& (0+255),f,b
 18108  001BA8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18109  001BA8  6AF8               	clrf	tblptru,c
 18110  001BAA                     	endif
 18111  001BAA                     	if	0	;tblptru may be non-zero
 18112  001BAA                     	endif
 18113  001BAA  0008               	tblrd		*
 18114  001BAC  CFF5 F0A8          	movff	tablat,printf@c
 18115  001BB0  0100               	movlb	0	; () banked
 18116  001BB2  51A8               	movf	printf@c& (0+255),w,b
 18117  001BB4  B4D8               	btfsc	status,2,c
 18118  001BB6  0012               	return	
 18119  001BB8  D5EB               	goto	l6679
 18120  001BBA                     __end_of_printf:
 18121                           	opt stack 0
 18122                           tblptru	equ	0xFF8
 18123                           tblptrh	equ	0xFF7
 18124                           tblptrl	equ	0xFF6
 18125                           tablat	equ	0xFF5
 18126                           prodh	equ	0xFF4
 18127                           prodl	equ	0xFF3
 18128                           intcon	equ	0xFF2
 18129                           intcon2	equ	0xFF1
 18130                           intcon3	equ	0xFF0
 18131                           indf0	equ	0xFEF
 18132                           postinc0	equ	0xFEE
 18133                           fsr0h	equ	0xFEA
 18134                           fsr0l	equ	0xFE9
 18135                           wreg	equ	0xFE8
 18136                           postdec1	equ	0xFE5
 18137                           fsr1l	equ	0xFE1
 18138                           indf2	equ	0xFDF
 18139                           postinc2	equ	0xFDE
 18140                           postdec2	equ	0xFDD
 18141                           fsr2h	equ	0xFDA
 18142                           fsr2l	equ	0xFD9
 18143                           status	equ	0xFD8
 18144                           
 18145 ;; *************** function _putch *****************
 18146 ;; Defined at:
 18147 ;;		line 20 in file "lcd.c"
 18148 ;; Parameters:    Size  Location     Type
 18149 ;;  data            1    wreg     unsigned char 
 18150 ;; Auto vars:     Size  Location     Type
 18151 ;;  data            1    2[BANK0 ] unsigned char 
 18152 ;; Return value:  Size  Location     Type
 18153 ;;                  1    wreg      void 
 18154 ;; Registers used:
 18155 ;;		wreg, status,2, status,0, cstack
 18156 ;; Tracked objects:
 18157 ;;		On entry : 0/0
 18158 ;;		On exit  : 0/0
 18159 ;;		Unchanged: 0/0
 18160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18162 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18164 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18165 ;;Total ram usage:        1 bytes
 18166 ;; Hardware stack levels used:    1
 18167 ;; Hardware stack levels required when called:    8
 18168 ;; This function calls:
 18169 ;;		_lcdNibble
 18170 ;; This function is called by:
 18171 ;;		_printf
 18172 ;; This function uses a non-reentrant model
 18173 ;;
 18174                           
 18175                           	psect	text57
 18176  005B66                     __ptext57:
 18177                           	opt stack 0
 18178  005B66                     _putch:
 18179                           	opt stack 18
 18180                           
 18181                           ;incstack = 0
 18182                           ;putch@data stored from wreg
 18183  005B66  0100               	movlb	0	; () banked
 18184  005B68  6F82               	movwf	putch@data& (0+255),b
 18185                           
 18186                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 18187  005B6A  848C               	bsf	3980,2,c	;volatile
 18188                           
 18189                           ;lcd.c: 22: lcdNibble(data);
 18190  005B6C  0100               	movlb	0	; () banked
 18191  005B6E  5182               	movf	putch@data& (0+255),w,b
 18192  005B70  EC3B  F028         	call	_lcdNibble
 18193  005B74  0012               	return		;funcret
 18194  005B76                     __end_of_putch:
 18195                           	opt stack 0
 18196                           tblptru	equ	0xFF8
 18197                           tblptrh	equ	0xFF7
 18198                           tblptrl	equ	0xFF6
 18199                           tablat	equ	0xFF5
 18200                           prodh	equ	0xFF4
 18201                           prodl	equ	0xFF3
 18202                           intcon	equ	0xFF2
 18203                           intcon2	equ	0xFF1
 18204                           intcon3	equ	0xFF0
 18205                           indf0	equ	0xFEF
 18206                           postinc0	equ	0xFEE
 18207                           fsr0h	equ	0xFEA
 18208                           fsr0l	equ	0xFE9
 18209                           wreg	equ	0xFE8
 18210                           postdec1	equ	0xFE5
 18211                           fsr1l	equ	0xFE1
 18212                           indf2	equ	0xFDF
 18213                           postinc2	equ	0xFDE
 18214                           postdec2	equ	0xFDD
 18215                           fsr2h	equ	0xFDA
 18216                           fsr2l	equ	0xFD9
 18217                           status	equ	0xFD8
 18218                           
 18219 ;; *************** function _isdigit *****************
 18220 ;; Defined at:
 18221 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 18222 ;; Parameters:    Size  Location     Type
 18223 ;;  c               1    wreg     unsigned char 
 18224 ;; Auto vars:     Size  Location     Type
 18225 ;;  c               1    2[BANK0 ] unsigned char 
 18226 ;; Return value:  Size  Location     Type
 18227 ;;		None               void
 18228 ;; Registers used:
 18229 ;;		wreg, status,2, status,0
 18230 ;; Tracked objects:
 18231 ;;		On entry : 0/0
 18232 ;;		On exit  : 0/0
 18233 ;;		Unchanged: 0/0
 18234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18236 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18237 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18238 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18239 ;;Total ram usage:        3 bytes
 18240 ;; Hardware stack levels used:    1
 18241 ;; Hardware stack levels required when called:    7
 18242 ;; This function calls:
 18243 ;;		Nothing
 18244 ;; This function is called by:
 18245 ;;		_printf
 18246 ;; This function uses a non-reentrant model
 18247 ;;
 18248                           
 18249                           	psect	text58
 18250  005978                     __ptext58:
 18251                           	opt stack 0
 18252  005978                     _isdigit:
 18253                           	opt stack 19
 18254                           
 18255                           ;incstack = 0
 18256                           ;isdigit@c stored from wreg
 18257  005978  0100               	movlb	0	; () banked
 18258  00597A  6F82               	movwf	isdigit@c& (0+255),b
 18259  00597C  0E00               	movlw	0
 18260  00597E  0100               	movlb	0	; () banked
 18261  005980  6F81               	movwf	_isdigit$2062& (0+255),b
 18262                           
 18263                           ; BSR set to: 0
 18264  005982  0E3A               	movlw	58
 18265  005984  0100               	movlb	0	; () banked
 18266  005986  6182               	cpfslt	isdigit@c& (0+255),b
 18267  005988  D007               	goto	l6527
 18268                           
 18269                           ; BSR set to: 0
 18270  00598A  0E2F               	movlw	47
 18271  00598C  0100               	movlb	0	; () banked
 18272  00598E  6582               	cpfsgt	isdigit@c& (0+255),b
 18273  005990  D003               	goto	l6527
 18274                           
 18275                           ; BSR set to: 0
 18276  005992  0E01               	movlw	1
 18277  005994  0100               	movlb	0	; () banked
 18278  005996  6F81               	movwf	_isdigit$2062& (0+255),b
 18279  005998                     l6527:
 18280                           
 18281                           ; BSR set to: 0
 18282  005998  C081  F080         	movff	_isdigit$2062,??_isdigit
 18283  00599C  0100               	movlb	0	; () banked
 18284  00599E  3180               	rrcf	??_isdigit& (0+255),w,b
 18285  0059A0  0012               	return	
 18286  0059A2                     __end_of_isdigit:
 18287                           	opt stack 0
 18288                           tblptru	equ	0xFF8
 18289                           tblptrh	equ	0xFF7
 18290                           tblptrl	equ	0xFF6
 18291                           tablat	equ	0xFF5
 18292                           prodh	equ	0xFF4
 18293                           prodl	equ	0xFF3
 18294                           intcon	equ	0xFF2
 18295                           intcon2	equ	0xFF1
 18296                           intcon3	equ	0xFF0
 18297                           indf0	equ	0xFEF
 18298                           postinc0	equ	0xFEE
 18299                           fsr0h	equ	0xFEA
 18300                           fsr0l	equ	0xFE9
 18301                           wreg	equ	0xFE8
 18302                           postdec1	equ	0xFE5
 18303                           fsr1l	equ	0xFE1
 18304                           indf2	equ	0xFDF
 18305                           postinc2	equ	0xFDE
 18306                           postdec2	equ	0xFDD
 18307                           fsr2h	equ	0xFDA
 18308                           fsr2l	equ	0xFD9
 18309                           status	equ	0xFD8
 18310                           
 18311 ;; *************** function ___wmul *****************
 18312 ;; Defined at:
 18313 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 18314 ;; Parameters:    Size  Location     Type
 18315 ;;  multiplier      2    0[BANK0 ] unsigned int 
 18316 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 18317 ;; Auto vars:     Size  Location     Type
 18318 ;;  product         2    4[BANK0 ] unsigned int 
 18319 ;; Return value:  Size  Location     Type
 18320 ;;                  2    0[BANK0 ] unsigned int 
 18321 ;; Registers used:
 18322 ;;		wreg, status,2, status,0, prodl, prodh
 18323 ;; Tracked objects:
 18324 ;;		On entry : 0/0
 18325 ;;		On exit  : 0/0
 18326 ;;		Unchanged: 0/0
 18327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18328 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18329 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18331 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18332 ;;Total ram usage:        6 bytes
 18333 ;; Hardware stack levels used:    1
 18334 ;; Hardware stack levels required when called:    7
 18335 ;; This function calls:
 18336 ;;		Nothing
 18337 ;; This function is called by:
 18338 ;;		_printf
 18339 ;; This function uses a non-reentrant model
 18340 ;;
 18341                           
 18342                           	psect	text59
 18343  00564A                     __ptext59:
 18344                           	opt stack 0
 18345  00564A                     ___wmul:
 18346                           	opt stack 19
 18347                           
 18348                           ; BSR set to: 0
 18349                           ;incstack = 0
 18350  00564A  0100               	movlb	0	; () banked
 18351  00564C  5180               	movf	___wmul@multiplier& (0+255),w,b
 18352  00564E  0100               	movlb	0	; () banked
 18353  005650  0382               	mulwf	___wmul@multiplicand& (0+255),b
 18354  005652  CFF3 F084          	movff	prodl,___wmul@product
 18355  005656  CFF4 F085          	movff	prodh,___wmul@product+1
 18356  00565A  0100               	movlb	0	; () banked
 18357  00565C  5180               	movf	___wmul@multiplier& (0+255),w,b
 18358  00565E  0100               	movlb	0	; () banked
 18359  005660  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 18360  005662  50F3               	movf	prodl,w,c
 18361  005664  0100               	movlb	0	; () banked
 18362  005666  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 18363  005668  0100               	movlb	0	; () banked
 18364  00566A  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 18365  00566C  0100               	movlb	0	; () banked
 18366  00566E  0382               	mulwf	___wmul@multiplicand& (0+255),b
 18367  005670  50F3               	movf	prodl,w,c
 18368  005672  0100               	movlb	0	; () banked
 18369  005674  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 18370                           
 18371                           ; BSR set to: 0
 18372  005676  C084  F080         	movff	___wmul@product,?___wmul
 18373  00567A  C085  F081         	movff	___wmul@product+1,?___wmul+1
 18374  00567E  0012               	return	
 18375  005680                     __end_of___wmul:
 18376                           	opt stack 0
 18377                           tblptru	equ	0xFF8
 18378                           tblptrh	equ	0xFF7
 18379                           tblptrl	equ	0xFF6
 18380                           tablat	equ	0xFF5
 18381                           prodh	equ	0xFF4
 18382                           prodl	equ	0xFF3
 18383                           intcon	equ	0xFF2
 18384                           intcon2	equ	0xFF1
 18385                           intcon3	equ	0xFF0
 18386                           indf0	equ	0xFEF
 18387                           postinc0	equ	0xFEE
 18388                           fsr0h	equ	0xFEA
 18389                           fsr0l	equ	0xFE9
 18390                           wreg	equ	0xFE8
 18391                           postdec1	equ	0xFE5
 18392                           fsr1l	equ	0xFE1
 18393                           indf2	equ	0xFDF
 18394                           postinc2	equ	0xFDE
 18395                           postdec2	equ	0xFDD
 18396                           fsr2h	equ	0xFDA
 18397                           fsr2l	equ	0xFD9
 18398                           status	equ	0xFD8
 18399                           
 18400 ;; *************** function ___lwmod *****************
 18401 ;; Defined at:
 18402 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 18403 ;; Parameters:    Size  Location     Type
 18404 ;;  dividend        2    7[BANK0 ] unsigned int 
 18405 ;;  divisor         2    9[BANK0 ] unsigned int 
 18406 ;; Auto vars:     Size  Location     Type
 18407 ;;  counter         1   11[BANK0 ] unsigned char 
 18408 ;; Return value:  Size  Location     Type
 18409 ;;                  2    7[BANK0 ] unsigned int 
 18410 ;; Registers used:
 18411 ;;		wreg, status,2, status,0
 18412 ;; Tracked objects:
 18413 ;;		On entry : 0/0
 18414 ;;		On exit  : 0/0
 18415 ;;		Unchanged: 0/0
 18416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18417 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18418 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18420 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18421 ;;Total ram usage:        5 bytes
 18422 ;; Hardware stack levels used:    1
 18423 ;; Hardware stack levels required when called:    7
 18424 ;; This function calls:
 18425 ;;		Nothing
 18426 ;; This function is called by:
 18427 ;;		_printf
 18428 ;; This function uses a non-reentrant model
 18429 ;;
 18430                           
 18431                           	psect	text60
 18432  005146                     __ptext60:
 18433                           	opt stack 0
 18434  005146                     ___lwmod:
 18435                           	opt stack 19
 18436                           
 18437                           ; BSR set to: 0
 18438                           ;incstack = 0
 18439  005146  0100               	movlb	0	; () banked
 18440  005148  5189               	movf	___lwmod@divisor& (0+255),w,b
 18441  00514A  0100               	movlb	0	; () banked
 18442  00514C  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 18443  00514E  B4D8               	btfsc	status,2,c
 18444  005150  D026               	goto	l1974
 18445                           
 18446                           ; BSR set to: 0
 18447  005152  0E01               	movlw	1
 18448  005154  0100               	movlb	0	; () banked
 18449  005156  6F8B               	movwf	___lwmod@counter& (0+255),b
 18450  005158  D006               	goto	l6565
 18451  00515A                     l6563:
 18452                           
 18453                           ; BSR set to: 0
 18454  00515A  0100               	movlb	0	; () banked
 18455  00515C  90D8               	bcf	status,0,c
 18456  00515E  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 18457  005160  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 18458  005162  0100               	movlb	0	; () banked
 18459  005164  2B8B               	incf	___lwmod@counter& (0+255),f,b
 18460  005166                     l6565:
 18461                           
 18462                           ; BSR set to: 0
 18463  005166  0100               	movlb	0	; () banked
 18464  005168  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 18465  00516A  D7F7               	goto	l6563
 18466  00516C                     l6567:
 18467                           
 18468                           ; BSR set to: 0
 18469  00516C  0100               	movlb	0	; () banked
 18470  00516E  5189               	movf	___lwmod@divisor& (0+255),w,b
 18471  005170  0100               	movlb	0	; () banked
 18472  005172  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 18473  005174  0100               	movlb	0	; () banked
 18474  005176  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 18475  005178  0100               	movlb	0	; () banked
 18476  00517A  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 18477  00517C  A0D8               	btfss	status,0,c
 18478  00517E  D008               	goto	l6571
 18479                           
 18480                           ; BSR set to: 0
 18481  005180  0100               	movlb	0	; () banked
 18482  005182  5189               	movf	___lwmod@divisor& (0+255),w,b
 18483  005184  0100               	movlb	0	; () banked
 18484  005186  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 18485  005188  0100               	movlb	0	; () banked
 18486  00518A  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 18487  00518C  0100               	movlb	0	; () banked
 18488  00518E  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 18489  005190                     l6571:
 18490                           
 18491                           ; BSR set to: 0
 18492  005190  0100               	movlb	0	; () banked
 18493  005192  90D8               	bcf	status,0,c
 18494  005194  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 18495  005196  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 18496                           
 18497                           ; BSR set to: 0
 18498  005198  0100               	movlb	0	; () banked
 18499  00519A  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 18500  00519C  D7E7               	goto	l6567
 18501  00519E                     l1974:
 18502                           
 18503                           ; BSR set to: 0
 18504  00519E  C087  F087         	movff	___lwmod@dividend,?___lwmod
 18505  0051A2  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 18506                           
 18507                           ; BSR set to: 0
 18508  0051A6  0012               	return		;funcret
 18509  0051A8                     __end_of___lwmod:
 18510                           	opt stack 0
 18511                           tblptru	equ	0xFF8
 18512                           tblptrh	equ	0xFF7
 18513                           tblptrl	equ	0xFF6
 18514                           tablat	equ	0xFF5
 18515                           prodh	equ	0xFF4
 18516                           prodl	equ	0xFF3
 18517                           intcon	equ	0xFF2
 18518                           intcon2	equ	0xFF1
 18519                           intcon3	equ	0xFF0
 18520                           indf0	equ	0xFEF
 18521                           postinc0	equ	0xFEE
 18522                           fsr0h	equ	0xFEA
 18523                           fsr0l	equ	0xFE9
 18524                           wreg	equ	0xFE8
 18525                           postdec1	equ	0xFE5
 18526                           fsr1l	equ	0xFE1
 18527                           indf2	equ	0xFDF
 18528                           postinc2	equ	0xFDE
 18529                           postdec2	equ	0xFDD
 18530                           fsr2h	equ	0xFDA
 18531                           fsr2l	equ	0xFD9
 18532                           status	equ	0xFD8
 18533                           
 18534 ;; *************** function ___lwdiv *****************
 18535 ;; Defined at:
 18536 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 18537 ;; Parameters:    Size  Location     Type
 18538 ;;  dividend        2    0[BANK0 ] unsigned int 
 18539 ;;  divisor         2    2[BANK0 ] unsigned int 
 18540 ;; Auto vars:     Size  Location     Type
 18541 ;;  quotient        2    4[BANK0 ] unsigned int 
 18542 ;;  counter         1    6[BANK0 ] unsigned char 
 18543 ;; Return value:  Size  Location     Type
 18544 ;;                  2    0[BANK0 ] unsigned int 
 18545 ;; Registers used:
 18546 ;;		wreg, status,2, status,0
 18547 ;; Tracked objects:
 18548 ;;		On entry : 0/0
 18549 ;;		On exit  : 0/0
 18550 ;;		Unchanged: 0/0
 18551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18552 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18553 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18555 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18556 ;;Total ram usage:        7 bytes
 18557 ;; Hardware stack levels used:    1
 18558 ;; Hardware stack levels required when called:    7
 18559 ;; This function calls:
 18560 ;;		Nothing
 18561 ;; This function is called by:
 18562 ;;		_printf
 18563 ;; This function uses a non-reentrant model
 18564 ;;
 18565                           
 18566                           	psect	text61
 18567  004EAA                     __ptext61:
 18568                           	opt stack 0
 18569  004EAA                     ___lwdiv:
 18570                           	opt stack 19
 18571                           
 18572                           ; BSR set to: 0
 18573                           ;incstack = 0
 18574  004EAA  0E00               	movlw	0
 18575  004EAC  0100               	movlb	0	; () banked
 18576  004EAE  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 18577  004EB0  0E00               	movlw	0
 18578  004EB2  6F84               	movwf	___lwdiv@quotient& (0+255),b
 18579                           
 18580                           ; BSR set to: 0
 18581  004EB4  0100               	movlb	0	; () banked
 18582  004EB6  5182               	movf	___lwdiv@divisor& (0+255),w,b
 18583  004EB8  0100               	movlb	0	; () banked
 18584  004EBA  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 18585  004EBC  B4D8               	btfsc	status,2,c
 18586  004EBE  D02C               	goto	l1964
 18587                           
 18588                           ; BSR set to: 0
 18589  004EC0  0E01               	movlw	1
 18590  004EC2  0100               	movlb	0	; () banked
 18591  004EC4  6F86               	movwf	___lwdiv@counter& (0+255),b
 18592  004EC6  D006               	goto	l6545
 18593  004EC8                     l6543:
 18594                           
 18595                           ; BSR set to: 0
 18596  004EC8  0100               	movlb	0	; () banked
 18597  004ECA  90D8               	bcf	status,0,c
 18598  004ECC  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 18599  004ECE  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 18600  004ED0  0100               	movlb	0	; () banked
 18601  004ED2  2B86               	incf	___lwdiv@counter& (0+255),f,b
 18602  004ED4                     l6545:
 18603                           
 18604                           ; BSR set to: 0
 18605  004ED4  0100               	movlb	0	; () banked
 18606  004ED6  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 18607  004ED8  D7F7               	goto	l6543
 18608  004EDA                     l6547:
 18609                           
 18610                           ; BSR set to: 0
 18611  004EDA  0100               	movlb	0	; () banked
 18612  004EDC  90D8               	bcf	status,0,c
 18613  004EDE  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 18614  004EE0  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 18615                           
 18616                           ; BSR set to: 0
 18617  004EE2  0100               	movlb	0	; () banked
 18618  004EE4  5182               	movf	___lwdiv@divisor& (0+255),w,b
 18619  004EE6  0100               	movlb	0	; () banked
 18620  004EE8  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 18621  004EEA  0100               	movlb	0	; () banked
 18622  004EEC  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 18623  004EEE  0100               	movlb	0	; () banked
 18624  004EF0  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 18625  004EF2  A0D8               	btfss	status,0,c
 18626  004EF4  D00A               	goto	l6555
 18627                           
 18628                           ; BSR set to: 0
 18629  004EF6  0100               	movlb	0	; () banked
 18630  004EF8  5182               	movf	___lwdiv@divisor& (0+255),w,b
 18631  004EFA  0100               	movlb	0	; () banked
 18632  004EFC  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 18633  004EFE  0100               	movlb	0	; () banked
 18634  004F00  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 18635  004F02  0100               	movlb	0	; () banked
 18636  004F04  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 18637                           
 18638                           ; BSR set to: 0
 18639  004F06  0100               	movlb	0	; () banked
 18640  004F08  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 18641  004F0A                     l6555:
 18642                           
 18643                           ; BSR set to: 0
 18644  004F0A  0100               	movlb	0	; () banked
 18645  004F0C  90D8               	bcf	status,0,c
 18646  004F0E  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 18647  004F10  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 18648                           
 18649                           ; BSR set to: 0
 18650  004F12  0100               	movlb	0	; () banked
 18651  004F14  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 18652  004F16  D7E1               	goto	l6547
 18653  004F18                     l1964:
 18654                           
 18655                           ; BSR set to: 0
 18656  004F18  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 18657  004F1C  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 18658                           
 18659                           ; BSR set to: 0
 18660  004F20  0012               	return		;funcret
 18661  004F22                     __end_of___lwdiv:
 18662                           	opt stack 0
 18663                           tblptru	equ	0xFF8
 18664                           tblptrh	equ	0xFF7
 18665                           tblptrl	equ	0xFF6
 18666                           tablat	equ	0xFF5
 18667                           prodh	equ	0xFF4
 18668                           prodl	equ	0xFF3
 18669                           intcon	equ	0xFF2
 18670                           intcon2	equ	0xFF1
 18671                           intcon3	equ	0xFF0
 18672                           indf0	equ	0xFEF
 18673                           postinc0	equ	0xFEE
 18674                           fsr0h	equ	0xFEA
 18675                           fsr0l	equ	0xFE9
 18676                           wreg	equ	0xFE8
 18677                           postdec1	equ	0xFE5
 18678                           fsr1l	equ	0xFE1
 18679                           indf2	equ	0xFDF
 18680                           postinc2	equ	0xFDE
 18681                           postdec2	equ	0xFDD
 18682                           fsr2h	equ	0xFDA
 18683                           fsr2l	equ	0xFD9
 18684                           status	equ	0xFD8
 18685                           
 18686 ;; *************** function _lcdInst *****************
 18687 ;; Defined at:
 18688 ;;		line 15 in file "lcd.c"
 18689 ;; Parameters:    Size  Location     Type
 18690 ;;  data            1    wreg     unsigned char 
 18691 ;; Auto vars:     Size  Location     Type
 18692 ;;  data            1    2[BANK0 ] unsigned char 
 18693 ;; Return value:  Size  Location     Type
 18694 ;;                  1    wreg      void 
 18695 ;; Registers used:
 18696 ;;		wreg, status,2, status,0, cstack
 18697 ;; Tracked objects:
 18698 ;;		On entry : 0/0
 18699 ;;		On exit  : 0/0
 18700 ;;		Unchanged: 0/0
 18701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18703 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18705 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18706 ;;Total ram usage:        1 bytes
 18707 ;; Hardware stack levels used:    1
 18708 ;; Hardware stack levels required when called:    8
 18709 ;; This function calls:
 18710 ;;		_lcdNibble
 18711 ;; This function is called by:
 18712 ;;		_UI
 18713 ;;		_change_state_to_menu_start
 18714 ;;		_change_state_to_menu_12
 18715 ;;		_change_state_to_menu_22
 18716 ;;		_initLCD
 18717 ;;		_printRTC
 18718 ;;		_Loading
 18719 ;;		_EEPROM_write
 18720 ;;		_Test
 18721 ;;		_algorithmTest
 18722 ;;		_sensorTest
 18723 ;;		_actuatorTest
 18724 ;;		_BothServos
 18725 ;;		_PortTestDC
 18726 ;;		_PlatformTest
 18727 ;;		_SpeedTest
 18728 ;;		_BlockerTest
 18729 ;;		_arm
 18730 ;;		_PortTestPusher
 18731 ;;		_ToggleTestA5
 18732 ;; This function uses a non-reentrant model
 18733 ;;
 18734                           
 18735                           	psect	text62
 18736  005B76                     __ptext62:
 18737                           	opt stack 0
 18738  005B76                     _lcdInst:
 18739                           	opt stack 20
 18740                           
 18741                           ; BSR set to: 0
 18742                           ;incstack = 0
 18743                           ;lcdInst@data stored from wreg
 18744  005B76  0100               	movlb	0	; () banked
 18745  005B78  6F82               	movwf	lcdInst@data& (0+255),b
 18746                           
 18747                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 18748  005B7A  948C               	bcf	3980,2,c	;volatile
 18749                           
 18750                           ;lcd.c: 17: lcdNibble(data);
 18751  005B7C  0100               	movlb	0	; () banked
 18752  005B7E  5182               	movf	lcdInst@data& (0+255),w,b
 18753  005B80  EC3B  F028         	call	_lcdNibble
 18754  005B84  0012               	return		;funcret
 18755  005B86                     __end_of_lcdInst:
 18756                           	opt stack 0
 18757                           tblptru	equ	0xFF8
 18758                           tblptrh	equ	0xFF7
 18759                           tblptrl	equ	0xFF6
 18760                           tablat	equ	0xFF5
 18761                           prodh	equ	0xFF4
 18762                           prodl	equ	0xFF3
 18763                           intcon	equ	0xFF2
 18764                           intcon2	equ	0xFF1
 18765                           intcon3	equ	0xFF0
 18766                           indf0	equ	0xFEF
 18767                           postinc0	equ	0xFEE
 18768                           fsr0h	equ	0xFEA
 18769                           fsr0l	equ	0xFE9
 18770                           wreg	equ	0xFE8
 18771                           postdec1	equ	0xFE5
 18772                           fsr1l	equ	0xFE1
 18773                           indf2	equ	0xFDF
 18774                           postinc2	equ	0xFDE
 18775                           postdec2	equ	0xFDD
 18776                           fsr2h	equ	0xFDA
 18777                           fsr2l	equ	0xFD9
 18778                           status	equ	0xFD8
 18779                           
 18780 ;; *************** function _lcdNibble *****************
 18781 ;; Defined at:
 18782 ;;		line 25 in file "lcd.c"
 18783 ;; Parameters:    Size  Location     Type
 18784 ;;  data            1    wreg     unsigned char 
 18785 ;; Auto vars:     Size  Location     Type
 18786 ;;  data            1    1[BANK0 ] unsigned char 
 18787 ;;  temp            1    0[BANK0 ] unsigned char 
 18788 ;; Return value:  Size  Location     Type
 18789 ;;                  1    wreg      void 
 18790 ;; Registers used:
 18791 ;;		wreg, status,2, status,0
 18792 ;; Tracked objects:
 18793 ;;		On entry : 0/0
 18794 ;;		On exit  : 0/0
 18795 ;;		Unchanged: 0/0
 18796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18798 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18800 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18801 ;;Total ram usage:        2 bytes
 18802 ;; Hardware stack levels used:    1
 18803 ;; Hardware stack levels required when called:    7
 18804 ;; This function calls:
 18805 ;;		Nothing
 18806 ;; This function is called by:
 18807 ;;		_lcdInst
 18808 ;;		_putch
 18809 ;; This function uses a non-reentrant model
 18810 ;;
 18811                           
 18812                           	psect	text63
 18813  005076                     __ptext63:
 18814                           	opt stack 0
 18815  005076                     _lcdNibble:
 18816                           	opt stack 20
 18817                           
 18818                           ;incstack = 0
 18819                           ;lcdNibble@data stored from wreg
 18820  005076  0100               	movlb	0	; () banked
 18821  005078  6F81               	movwf	lcdNibble@data& (0+255),b
 18822                           
 18823                           ;lcd.c: 27: (INTCONbits.GIE = 0);
 18824  00507A  9EF2               	bcf	intcon,7,c	;volatile
 18825                           
 18826                           ;lcd.c: 28: char temp = data & 0xF0;
 18827  00507C  0100               	movlb	0	; () banked
 18828  00507E  5181               	movf	lcdNibble@data& (0+255),w,b
 18829  005080  0BF0               	andlw	240
 18830  005082  0100               	movlb	0	; () banked
 18831  005084  6F80               	movwf	lcdNibble@temp& (0+255),b
 18832                           
 18833                           ;lcd.c: 29: LATD = LATD & 0x0F;
 18834  005086  508C               	movf	3980,w,c	;volatile
 18835  005088  0B0F               	andlw	15
 18836  00508A  6E8C               	movwf	3980,c	;volatile
 18837                           
 18838                           ;lcd.c: 30: LATD = temp | LATD;
 18839  00508C  0100               	movlb	0	; () banked
 18840  00508E  5180               	movf	lcdNibble@temp& (0+255),w,b
 18841  005090  108C               	iorwf	3980,w,c	;volatile
 18842  005092  6E8C               	movwf	3980,c	;volatile
 18843                           
 18844                           ; BSR set to: 0
 18845                           ;lcd.c: 32: LATDbits.LATD3 = 1;
 18846  005094  868C               	bsf	3980,3,c	;volatile
 18847                           
 18848                           ; BSR set to: 0
 18849                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
 18850  005096  0E42               	movlw	66
 18851  005098                     u11257:
 18852  005098  2EE8               	decfsz	wreg,f,c
 18853  00509A  D7FE               	bra	u11257
 18854  00509C  D000               	nop2	
 18855                           
 18856                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 18857  00509E  968C               	bcf	3980,3,c	;volatile
 18858                           
 18859                           ;lcd.c: 35: _delay((unsigned long)((25)*(32000000/4000000.0)));
 18860  0050A0  0E42               	movlw	66
 18861  0050A2                     u11267:
 18862  0050A2  2EE8               	decfsz	wreg,f,c
 18863  0050A4  D7FE               	bra	u11267
 18864  0050A6  D000               	nop2	
 18865                           
 18866                           ;lcd.c: 37: data = data << 4;
 18867  0050A8  0100               	movlb	0	; () banked
 18868  0050AA  3981               	swapf	lcdNibble@data& (0+255),w,b
 18869  0050AC  0BF0               	andlw	240
 18870  0050AE  0100               	movlb	0	; () banked
 18871  0050B0  6F81               	movwf	lcdNibble@data& (0+255),b
 18872                           
 18873                           ;lcd.c: 39: temp = data & 0xF0;
 18874  0050B2  0100               	movlb	0	; () banked
 18875  0050B4  5181               	movf	lcdNibble@data& (0+255),w,b
 18876  0050B6  0BF0               	andlw	240
 18877  0050B8  0100               	movlb	0	; () banked
 18878  0050BA  6F80               	movwf	lcdNibble@temp& (0+255),b
 18879                           
 18880                           ;lcd.c: 40: LATD = LATD & 0x0F;
 18881  0050BC  508C               	movf	3980,w,c	;volatile
 18882  0050BE  0B0F               	andlw	15
 18883  0050C0  6E8C               	movwf	3980,c	;volatile
 18884                           
 18885                           ;lcd.c: 41: LATD = temp | LATD;
 18886  0050C2  0100               	movlb	0	; () banked
 18887  0050C4  5180               	movf	lcdNibble@temp& (0+255),w,b
 18888  0050C6  108C               	iorwf	3980,w,c	;volatile
 18889  0050C8  6E8C               	movwf	3980,c	;volatile
 18890                           
 18891                           ; BSR set to: 0
 18892                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 18893  0050CA  868C               	bsf	3980,3,c	;volatile
 18894                           
 18895                           ; BSR set to: 0
 18896                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
 18897  0050CC  0E42               	movlw	66
 18898  0050CE                     u11277:
 18899  0050CE  2EE8               	decfsz	wreg,f,c
 18900  0050D0  D7FE               	bra	u11277
 18901  0050D2  D000               	nop2	
 18902                           
 18903                           ;lcd.c: 45: LATDbits.LATD3 = 0;
 18904  0050D4  968C               	bcf	3980,3,c	;volatile
 18905                           
 18906                           ;lcd.c: 46: _delay((unsigned long)((25)*(32000000/4000000.0)));
 18907  0050D6  0E42               	movlw	66
 18908  0050D8                     u11287:
 18909  0050D8  2EE8               	decfsz	wreg,f,c
 18910  0050DA  D7FE               	bra	u11287
 18911  0050DC  D000               	nop2	
 18912                           
 18913                           ;lcd.c: 47: (INTCONbits.GIE = 1);
 18914  0050DE  8EF2               	bsf	intcon,7,c	;volatile
 18915  0050E0  0012               	return		;funcret
 18916  0050E2                     __end_of_lcdNibble:
 18917                           	opt stack 0
 18918                           tblptru	equ	0xFF8
 18919                           tblptrh	equ	0xFF7
 18920                           tblptrl	equ	0xFF6
 18921                           tablat	equ	0xFF5
 18922                           prodh	equ	0xFF4
 18923                           prodl	equ	0xFF3
 18924                           intcon	equ	0xFF2
 18925                           intcon2	equ	0xFF1
 18926                           intcon3	equ	0xFF0
 18927                           indf0	equ	0xFEF
 18928                           postinc0	equ	0xFEE
 18929                           fsr0h	equ	0xFEA
 18930                           fsr0l	equ	0xFE9
 18931                           wreg	equ	0xFE8
 18932                           postdec1	equ	0xFE5
 18933                           fsr1l	equ	0xFE1
 18934                           indf2	equ	0xFDF
 18935                           postinc2	equ	0xFDE
 18936                           postdec2	equ	0xFDD
 18937                           fsr2h	equ	0xFDA
 18938                           fsr2l	equ	0xFD9
 18939                           status	equ	0xFD8
 18940                           
 18941 ;; *************** function _handler *****************
 18942 ;; Defined at:
 18943 ;;		line 16 in file "interruptHandler.c"
 18944 ;; Parameters:    Size  Location     Type
 18945 ;;		None
 18946 ;; Auto vars:     Size  Location     Type
 18947 ;;		None
 18948 ;; Return value:  Size  Location     Type
 18949 ;;                  1    wreg      void 
 18950 ;; Registers used:
 18951 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18952 ;; Tracked objects:
 18953 ;;		On entry : 0/0
 18954 ;;		On exit  : 0/0
 18955 ;;		Unchanged: 0/0
 18956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18959 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18960 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18961 ;;Total ram usage:       16 bytes
 18962 ;; Hardware stack levels used:    1
 18963 ;; Hardware stack levels required when called:    6
 18964 ;; This function calls:
 18965 ;;		_printSortTimer
 18966 ;;		_updateArmState
 18967 ;;		_updateMenu
 18968 ;;		_updateServoStates
 18969 ;;		i2_change_state_to_menu_start
 18970 ;; This function is called by:
 18971 ;;		Interrupt level 2
 18972 ;; This function uses a non-reentrant model
 18973 ;;
 18974                           
 18975                           	psect	intcode
 18976  000008                     __pintcode:
 18977                           	opt stack 0
 18978  000008                     _handler:
 18979                           	opt stack 18
 18980                           
 18981                           ;incstack = 0
 18982  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 18983  00000A  EDBF  F01B         	call	int_func,f	;refresh shadow registers
 18984                           tblptru	equ	0xFF8
 18985                           tblptrh	equ	0xFF7
 18986                           tblptrl	equ	0xFF6
 18987                           tablat	equ	0xFF5
 18988                           prodh	equ	0xFF4
 18989                           prodl	equ	0xFF3
 18990                           intcon	equ	0xFF2
 18991                           intcon2	equ	0xFF1
 18992                           intcon3	equ	0xFF0
 18993                           indf0	equ	0xFEF
 18994                           postinc0	equ	0xFEE
 18995                           fsr0h	equ	0xFEA
 18996                           fsr0l	equ	0xFE9
 18997                           wreg	equ	0xFE8
 18998                           postdec1	equ	0xFE5
 18999                           fsr1l	equ	0xFE1
 19000                           indf2	equ	0xFDF
 19001                           postinc2	equ	0xFDE
 19002                           postdec2	equ	0xFDD
 19003                           fsr2h	equ	0xFDA
 19004                           fsr2l	equ	0xFD9
 19005                           status	equ	0xFD8
 19006                           
 19007                           	psect	intcode_body
 19008  00377E                     __pintcode_body:
 19009                           	opt stack 18
 19010  00377E                     int_func:
 19011                           	opt stack 18
 19012  00377E  0006               	pop		; remove dummy address from shadow register refresh
 19013  003780  CFFA F04D          	movff	pclath,??_handler+2
 19014  003784  CFFB F04E          	movff	pclatu,??_handler+3
 19015  003788  CFE9 F04F          	movff	fsr0l,??_handler+4
 19016  00378C  CFEA F050          	movff	fsr0h,??_handler+5
 19017  003790  CFE1 F051          	movff	fsr1l,??_handler+6
 19018  003794  CFE2 F052          	movff	fsr1h,??_handler+7
 19019  003798  CFD9 F053          	movff	fsr2l,??_handler+8
 19020  00379C  CFDA F054          	movff	fsr2h,??_handler+9
 19021  0037A0  CFF3 F055          	movff	prodl,??_handler+10
 19022  0037A4  CFF4 F056          	movff	prodh,??_handler+11
 19023  0037A8  CFF6 F057          	movff	tblptrl,??_handler+12
 19024  0037AC  CFF7 F058          	movff	tblptrh,??_handler+13
 19025  0037B0  CFF8 F059          	movff	tblptru,??_handler+14
 19026  0037B4  CFF5 F05A          	movff	tablat,??_handler+15
 19027                           
 19028                           ;interruptHandler.c: 18: if(INT1IF){
 19029  0037B8  A0F0               	btfss	intcon3,0,c	;volatile
 19030  0037BA  D034               	goto	i2l10131
 19031                           
 19032                           ;interruptHandler.c: 19: INT1IF = 0;
 19033  0037BC  90F0               	bcf	intcon3,0,c	;volatile
 19034                           
 19035                           ;interruptHandler.c: 20: input = keys[(PORTB & 0xF0) >> 4];
 19036  0037BE  3881               	swapf	3969,w,c	;volatile
 19037  0037C0  0B0F               	andlw	15
 19038  0037C2  0B0F               	andlw	15
 19039  0037C4  6E4B               	movwf	??_handler& (0+255),c
 19040  0037C6  6A4C               	clrf	(??_handler+1)& (0+255),c
 19041  0037C8  0E9D               	movlw	low _keys
 19042  0037CA  244B               	addwf	??_handler,w,c
 19043  0037CC  6EF6               	movwf	tblptrl,c
 19044  0037CE  0EFA               	movlw	high _keys
 19045  0037D0  204C               	addwfc	??_handler+1,w,c
 19046  0037D2  6EF7               	movwf	tblptrh,c
 19047  0037D4                     	if	1	;There are 3 active tblptr bytes
 19048  0037D4  6AF8               	clrf	tblptru,c
 19049  0037D6  0E00               	movlw	low (__mediumconst shr (0+16))
 19050  0037D8  22F8               	addwfc	tblptru,f,c
 19051  0037DA                     	endif
 19052  0037DA  0008               	tblrd		*
 19053  0037DC  CFF5 F07D          	movff	tablat,_input	;volatile
 19054                           
 19055                           ;interruptHandler.c: 21: if(input == '*'){
 19056  0037E0  0E2A               	movlw	42
 19057  0037E2  187D               	xorwf	_input,w,c	;volatile
 19058  0037E4  B4D8               	btfsc	status,2,c
 19059  0037E6  D00D               	goto	i2l10125
 19060  0037E8  D018               	goto	i2l10127
 19061  0037EA                     i2l10115:
 19062                           
 19063                           ;interruptHandler.c: 24: machine_state = Testing_state;
 19064  0037EA  0E03               	movlw	3
 19065  0037EC  D007               	goto	L16
 19066  0037EE                     i2l10117:
 19067                           
 19068                           ; BSR set to: 0
 19069                           ;interruptHandler.c: 27: machine_state = UI_state;
 19070  0037EE  0E00               	movlw	0
 19071  0037F0  0100               	movlb	0	; () banked
 19072  0037F2  6FFC               	movwf	_machine_state& (0+255),b
 19073                           
 19074                           ; BSR set to: 0
 19075                           ;interruptHandler.c: 28: change_state_to_menu_start();
 19076  0037F4  ECE5  F02C         	call	i2_change_state_to_menu_start	;wreg free
 19077                           
 19078                           ;interruptHandler.c: 29: break;
 19079  0037F8  D015               	goto	i2l10131
 19080  0037FA                     i2l10121:
 19081                           
 19082                           ;interruptHandler.c: 31: machine_state = DoneSorting_state;
 19083  0037FA  0E02               	movlw	2
 19084  0037FC                     L16:
 19085  0037FC  0100               	movlb	0	; () banked
 19086  0037FE  6FFC               	movwf	_machine_state& (0+255),b
 19087                           
 19088                           ; BSR set to: 0
 19089                           ;interruptHandler.c: 33: }
 19090                           
 19091                           ;interruptHandler.c: 32: break;
 19092  003800  D011               	goto	i2l10131
 19093  003802                     i2l10125:
 19094  003802  0100               	movlb	0	; () banked
 19095  003804  51FC               	movf	_machine_state& (0+255),w,b
 19096                           
 19097                           ; Switch size 1, requested type "space"
 19098                           ; Number of cases is 3, Range of values is 0 to 3
 19099                           ; switch strategies available:
 19100                           ; Name         Instructions Cycles
 19101                           ; simple_byte           10     6 (average)
 19102                           ;	Chosen strategy is simple_byte
 19103  003806  0A00               	xorlw	0	; case 0
 19104  003808  B4D8               	btfsc	status,2,c
 19105  00380A  D7EF               	goto	i2l10115
 19106  00380C  0A01               	xorlw	1	; case 1
 19107  00380E  B4D8               	btfsc	status,2,c
 19108  003810  D7F4               	goto	i2l10121
 19109  003812  0A02               	xorlw	2	; case 3
 19110  003814  B4D8               	btfsc	status,2,c
 19111  003816  D7EB               	goto	i2l10117
 19112                           
 19113                           ; BSR set to: 0
 19114                           ;interruptHandler.c: 34: }
 19115  003818  D005               	goto	i2l10131
 19116  00381A                     i2l10127:
 19117                           
 19118                           ;interruptHandler.c: 35: else if(machine_state == UI_state){
 19119  00381A  0100               	movlb	0	; () banked
 19120  00381C  51FC               	movf	_machine_state& (0+255),w,b
 19121  00381E  B4D8               	btfsc	status,2,c
 19122                           
 19123                           ; BSR set to: 0
 19124                           ;interruptHandler.c: 36: updateMenu();
 19125  003820  ECF2  F017         	call	_updateMenu	;wreg free
 19126  003824                     i2l10131:
 19127                           
 19128                           ;interruptHandler.c: 37: }
 19129                           ;interruptHandler.c: 38: }
 19130                           ;interruptHandler.c: 41: if(TMR0IF){
 19131  003824  A4F2               	btfss	intcon,2,c	;volatile
 19132  003826  D00C               	goto	i2l10145
 19133                           
 19134                           ;interruptHandler.c: 42: TMR0IF = 0;
 19135  003828  94F2               	bcf	intcon,2,c	;volatile
 19136                           
 19137                           ;interruptHandler.c: 43: if(machine_state == Sorting_state){
 19138  00382A  0100               	movlb	0	; () banked
 19139  00382C  05FC               	decf	_machine_state& (0+255),w,b
 19140  00382E  A4D8               	btfss	status,2,c
 19141  003830  D007               	goto	i2l10145
 19142                           
 19143                           ; BSR set to: 0
 19144                           ;interruptHandler.c: 44: printSortTimer();
 19145  003832  EC52  F019         	call	_printSortTimer	;wreg free
 19146                           
 19147                           ;interruptHandler.c: 46: TMR0H = 0b10000101;
 19148  003836  0E85               	movlw	133
 19149  003838  6ED7               	movwf	4055,c	;volatile
 19150                           
 19151                           ;interruptHandler.c: 47: TMR0L = 0b11101110;
 19152  00383A  0EEE               	movlw	238
 19153  00383C  6ED6               	movwf	4054,c	;volatile
 19154                           
 19155                           ;interruptHandler.c: 48: TMR0ON = 1;
 19156  00383E  8ED5               	bsf	4053,7,c	;volatile
 19157  003840                     i2l10145:
 19158                           
 19159                           ;interruptHandler.c: 49: }
 19160                           ;interruptHandler.c: 50: }
 19161                           ;interruptHandler.c: 53: if(TMR1IF){
 19162  003840  A09E               	btfss	3998,0,c	;volatile
 19163  003842  D02A               	goto	i2l10173
 19164                           
 19165                           ;interruptHandler.c: 54: TMR1IF = 0;
 19166  003844  909E               	bcf	3998,0,c	;volatile
 19167                           
 19168                           ;interruptHandler.c: 55: TMR1ON = 0;
 19169  003846  90CD               	bcf	4045,0,c	;volatile
 19170                           
 19171                           ;interruptHandler.c: 56: if(machine_state == Sorting_state){
 19172  003848  0100               	movlb	0	; () banked
 19173  00384A  05FC               	decf	_machine_state& (0+255),w,b
 19174  00384C  A4D8               	btfss	status,2,c
 19175  00384E  D024               	goto	i2l10173
 19176                           
 19177                           ; BSR set to: 0
 19178                           ;interruptHandler.c: 57: if(was_low_1){
 19179  003850  5077               	movf	_was_low_1,w,c	;volatile
 19180  003852  1078               	iorwf	_was_low_1+1,w,c	;volatile
 19181  003854  B4D8               	btfsc	status,2,c
 19182  003856  D00A               	goto	i2l1039
 19183                           
 19184                           ; BSR set to: 0
 19185                           ;interruptHandler.c: 58: LATCbits.LATC1 = 1;
 19186  003858  828B               	bsf	3979,1,c	;volatile
 19187                           
 19188                           ; BSR set to: 0
 19189                           ;interruptHandler.c: 59: was_low_1 = 0;
 19190  00385A  0E00               	movlw	0
 19191  00385C  6E78               	movwf	_was_low_1+1,c	;volatile
 19192  00385E  0E00               	movlw	0
 19193  003860  6E77               	movwf	_was_low_1,c	;volatile
 19194                           
 19195                           ; BSR set to: 0
 19196                           ;interruptHandler.c: 60: TMR1H = servoTimes[0];
 19197  003862  C0DA  FFCF         	movff	_servoTimes,4047	;volatile
 19198                           
 19199                           ; BSR set to: 0
 19200                           ;interruptHandler.c: 61: TMR1L = servoTimes[1];
 19201  003866  C0DC  FFCE         	movff	_servoTimes+2,4046	;volatile
 19202                           
 19203                           ;interruptHandler.c: 62: }
 19204  00386A  D00F               	goto	i2l10167
 19205  00386C                     i2l1039:
 19206                           
 19207                           ; BSR set to: 0
 19208                           ;interruptHandler.c: 63: else{
 19209                           ;interruptHandler.c: 64: LATCbits.LATC1 = 0;
 19210  00386C  928B               	bcf	3979,1,c	;volatile
 19211                           
 19212                           ; BSR set to: 0
 19213                           ;interruptHandler.c: 65: was_low_1 = 1;
 19214  00386E  0E00               	movlw	0
 19215  003870  6E78               	movwf	_was_low_1+1,c	;volatile
 19216  003872  0E01               	movlw	1
 19217  003874  6E77               	movwf	_was_low_1,c	;volatile
 19218                           
 19219                           ; BSR set to: 0
 19220                           ;interruptHandler.c: 66: TMR1H = 20000 - servoTimes[0];
 19221  003876  0100               	movlb	0	; () banked
 19222  003878  51DA               	movf	_servoTimes& (0+255),w,b
 19223  00387A  0800               	sublw	0
 19224  00387C  0F20               	addlw	32
 19225  00387E  6ECF               	movwf	4047,c	;volatile
 19226                           
 19227                           ; BSR set to: 0
 19228                           ;interruptHandler.c: 67: TMR1L = 20000 - servoTimes[1];
 19229  003880  0100               	movlb	0	; () banked
 19230  003882  51DC               	movf	(_servoTimes+2)& (0+255),w,b
 19231  003884  0800               	sublw	0
 19232  003886  0F20               	addlw	32
 19233  003888  6ECE               	movwf	4046,c	;volatile
 19234  00388A                     i2l10167:
 19235                           
 19236                           ; BSR set to: 0
 19237                           ;interruptHandler.c: 68: }
 19238                           ;interruptHandler.c: 69: TMR1ON = 1;
 19239  00388A  80CD               	bsf	4045,0,c	;volatile
 19240                           
 19241                           ; BSR set to: 0
 19242                           ;interruptHandler.c: 70: servo_timer_counter += 10;
 19243  00388C  0E0A               	movlw	10
 19244  00388E  266D               	addwf	_servo_timer_counter,f,c	;volatile
 19245  003890  0E00               	movlw	0
 19246  003892  226E               	addwfc	_servo_timer_counter+1,f,c	;volatile
 19247                           
 19248                           ; BSR set to: 0
 19249                           ;interruptHandler.c: 72: updateServoStates();
 19250  003894  ECAE  F01D         	call	_updateServoStates	;wreg free
 19251  003898                     i2l10173:
 19252                           
 19253                           ;interruptHandler.c: 73: }
 19254                           ;interruptHandler.c: 74: }
 19255                           ;interruptHandler.c: 77: if(TMR2IF){
 19256  003898  A29E               	btfss	3998,1,c	;volatile
 19257  00389A  D026               	goto	i2l10199
 19258                           
 19259                           ;interruptHandler.c: 80: TMR2IF = 0;
 19260  00389C  929E               	bcf	3998,1,c	;volatile
 19261                           
 19262                           ;interruptHandler.c: 81: TMR2ON = 0;
 19263  00389E  94CA               	bcf	4042,2,c	;volatile
 19264                           
 19265                           ;interruptHandler.c: 82: timer2_counter++;
 19266  0038A0  4A73               	infsnz	_timer2_counter,f,c	;volatile
 19267  0038A2  2A74               	incf	_timer2_counter+1,f,c	;volatile
 19268                           
 19269                           ;interruptHandler.c: 83: if(machine_state == Sorting_state){
 19270  0038A4  0100               	movlb	0	; () banked
 19271  0038A6  05FC               	decf	_machine_state& (0+255),w,b
 19272  0038A8  A4D8               	btfss	status,2,c
 19273  0038AA  D01E               	goto	i2l10199
 19274                           
 19275                           ; BSR set to: 0
 19276                           ;interruptHandler.c: 84: if(was_low_2 && (timer2_counter == 2)){
 19277  0038AC  5079               	movf	_was_low_2,w,c	;volatile
 19278  0038AE  107A               	iorwf	_was_low_2+1,w,c	;volatile
 19279  0038B0  B4D8               	btfsc	status,2,c
 19280  0038B2  D00A               	goto	i2l10189
 19281                           
 19282                           ; BSR set to: 0
 19283  0038B4  0E02               	movlw	2
 19284  0038B6  1873               	xorwf	_timer2_counter,w,c	;volatile
 19285  0038B8  1074               	iorwf	_timer2_counter+1,w,c	;volatile
 19286  0038BA  A4D8               	btfss	status,2,c
 19287  0038BC  D005               	goto	i2l10189
 19288                           
 19289                           ; BSR set to: 0
 19290                           ;interruptHandler.c: 86: LATBbits.LATB3 = 1;
 19291  0038BE  868A               	bsf	3978,3,c	;volatile
 19292                           
 19293                           ; BSR set to: 0
 19294                           ;interruptHandler.c: 87: was_low_2 = 0;
 19295  0038C0  0E00               	movlw	0
 19296  0038C2  6E7A               	movwf	_was_low_2+1,c	;volatile
 19297  0038C4  0E00               	movlw	0
 19298  0038C6  D008               	goto	L17
 19299  0038C8                     i2l10189:
 19300                           
 19301                           ; BSR set to: 0
 19302                           ;interruptHandler.c: 90: else if(!was_low_2){
 19303  0038C8  5079               	movf	_was_low_2,w,c	;volatile
 19304  0038CA  107A               	iorwf	_was_low_2+1,w,c	;volatile
 19305  0038CC  A4D8               	btfss	status,2,c
 19306  0038CE  D009               	goto	i2l10195
 19307                           
 19308                           ; BSR set to: 0
 19309                           ;interruptHandler.c: 91: LATBbits.LATB3 = 0;
 19310  0038D0  968A               	bcf	3978,3,c	;volatile
 19311                           
 19312                           ; BSR set to: 0
 19313                           ;interruptHandler.c: 92: was_low_2 = 1;
 19314  0038D2  0E00               	movlw	0
 19315  0038D4  6E7A               	movwf	_was_low_2+1,c	;volatile
 19316  0038D6  0E01               	movlw	1
 19317  0038D8                     L17:
 19318  0038D8  6E79               	movwf	_was_low_2,c	;volatile
 19319                           
 19320                           ;interruptHandler.c: 93: timer2_counter = 0;
 19321  0038DA  0E00               	movlw	0
 19322  0038DC  6E74               	movwf	_timer2_counter+1,c	;volatile
 19323  0038DE  0E00               	movlw	0
 19324  0038E0  6E73               	movwf	_timer2_counter,c	;volatile
 19325  0038E2                     i2l10195:
 19326                           
 19327                           ; BSR set to: 0
 19328                           ;interruptHandler.c: 94: }
 19329                           ;interruptHandler.c: 95: updateArmState();
 19330  0038E2  ECB5  F02A         	call	_updateArmState	;wreg free
 19331                           
 19332                           ;interruptHandler.c: 96: TMR2ON = 1;
 19333  0038E6  84CA               	bsf	4042,2,c	;volatile
 19334  0038E8                     i2l10199:
 19335                           
 19336                           ;interruptHandler.c: 97: }
 19337                           ;interruptHandler.c: 98: }
 19338                           ;interruptHandler.c: 101: if(TMR3IF){
 19339  0038E8  A2A1               	btfss	4001,1,c	;volatile
 19340  0038EA  D024               	goto	i2l1050
 19341                           
 19342                           ;interruptHandler.c: 102: TMR3IF = 0;
 19343  0038EC  92A1               	bcf	4001,1,c	;volatile
 19344                           
 19345                           ;interruptHandler.c: 103: TMR3ON = 0;
 19346  0038EE  90B1               	bcf	4017,0,c	;volatile
 19347                           
 19348                           ;interruptHandler.c: 104: if(machine_state == Sorting_state){
 19349  0038F0  0100               	movlb	0	; () banked
 19350  0038F2  05FC               	decf	_machine_state& (0+255),w,b
 19351  0038F4  A4D8               	btfss	status,2,c
 19352  0038F6  D01E               	goto	i2l1050
 19353                           
 19354                           ; BSR set to: 0
 19355                           ;interruptHandler.c: 105: if(was_low_3){
 19356  0038F8  507B               	movf	_was_low_3,w,c	;volatile
 19357  0038FA  107C               	iorwf	_was_low_3+1,w,c	;volatile
 19358  0038FC  B4D8               	btfsc	status,2,c
 19359  0038FE  D00A               	goto	i2l1048
 19360                           
 19361                           ; BSR set to: 0
 19362                           ;interruptHandler.c: 106: LATCbits.LATC2 = 1;
 19363  003900  848B               	bsf	3979,2,c	;volatile
 19364                           
 19365                           ; BSR set to: 0
 19366                           ;interruptHandler.c: 107: was_low_3 = 0;
 19367  003902  0E00               	movlw	0
 19368  003904  6E7C               	movwf	_was_low_3+1,c	;volatile
 19369  003906  0E00               	movlw	0
 19370  003908  6E7B               	movwf	_was_low_3,c	;volatile
 19371                           
 19372                           ; BSR set to: 0
 19373                           ;interruptHandler.c: 108: TMR3H = servoTimes[2];
 19374  00390A  C0DE  FFB3         	movff	_servoTimes+4,4019	;volatile
 19375                           
 19376                           ; BSR set to: 0
 19377                           ;interruptHandler.c: 109: TMR3L = servoTimes[3];
 19378  00390E  C0E0  FFB2         	movff	_servoTimes+6,4018	;volatile
 19379                           
 19380                           ;interruptHandler.c: 110: }
 19381  003912  D00F               	goto	i2l10221
 19382  003914                     i2l1048:
 19383                           
 19384                           ; BSR set to: 0
 19385                           ;interruptHandler.c: 111: else{
 19386                           ;interruptHandler.c: 112: LATCbits.LATC2 = 0;
 19387  003914  948B               	bcf	3979,2,c	;volatile
 19388                           
 19389                           ; BSR set to: 0
 19390                           ;interruptHandler.c: 113: was_low_3 = 1;
 19391  003916  0E00               	movlw	0
 19392  003918  6E7C               	movwf	_was_low_3+1,c	;volatile
 19393  00391A  0E01               	movlw	1
 19394  00391C  6E7B               	movwf	_was_low_3,c	;volatile
 19395                           
 19396                           ; BSR set to: 0
 19397                           ;interruptHandler.c: 114: TMR3H = 20000 - servoTimes[2];
 19398  00391E  0100               	movlb	0	; () banked
 19399  003920  51DE               	movf	(_servoTimes+4)& (0+255),w,b
 19400  003922  0800               	sublw	0
 19401  003924  0F20               	addlw	32
 19402  003926  6EB3               	movwf	4019,c	;volatile
 19403                           
 19404                           ; BSR set to: 0
 19405                           ;interruptHandler.c: 115: TMR3L = 20000 - servoTimes[3];
 19406  003928  0100               	movlb	0	; () banked
 19407  00392A  51E0               	movf	(_servoTimes+6)& (0+255),w,b
 19408  00392C  0800               	sublw	0
 19409  00392E  0F20               	addlw	32
 19410  003930  6EB2               	movwf	4018,c	;volatile
 19411  003932                     i2l10221:
 19412                           
 19413                           ; BSR set to: 0
 19414                           ;interruptHandler.c: 116: }
 19415                           ;interruptHandler.c: 117: TMR3ON = 1;
 19416  003932  80B1               	bsf	4017,0,c	;volatile
 19417  003934                     i2l1050:
 19418  003934  C05A  FFF5         	movff	??_handler+15,tablat
 19419  003938  C059  FFF8         	movff	??_handler+14,tblptru
 19420  00393C  C058  FFF7         	movff	??_handler+13,tblptrh
 19421  003940  C057  FFF6         	movff	??_handler+12,tblptrl
 19422  003944  C056  FFF4         	movff	??_handler+11,prodh
 19423  003948  C055  FFF3         	movff	??_handler+10,prodl
 19424  00394C  C054  FFDA         	movff	??_handler+9,fsr2h
 19425  003950  C053  FFD9         	movff	??_handler+8,fsr2l
 19426  003954  C052  FFE2         	movff	??_handler+7,fsr1h
 19427  003958  C051  FFE1         	movff	??_handler+6,fsr1l
 19428  00395C  C050  FFEA         	movff	??_handler+5,fsr0h
 19429  003960  C04F  FFE9         	movff	??_handler+4,fsr0l
 19430  003964  C04E  FFFB         	movff	??_handler+3,pclatu
 19431  003968  C04D  FFFA         	movff	??_handler+2,pclath
 19432  00396C  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 19433  00396E  0011               	retfie		f
 19434  003970                     __end_of_handler:
 19435                           	opt stack 0
 19436                           pclatu	equ	0xFFB
 19437                           pclath	equ	0xFFA
 19438                           tblptru	equ	0xFF8
 19439                           tblptrh	equ	0xFF7
 19440                           tblptrl	equ	0xFF6
 19441                           tablat	equ	0xFF5
 19442                           prodh	equ	0xFF4
 19443                           prodl	equ	0xFF3
 19444                           intcon	equ	0xFF2
 19445                           intcon2	equ	0xFF1
 19446                           intcon3	equ	0xFF0
 19447                           indf0	equ	0xFEF
 19448                           postinc0	equ	0xFEE
 19449                           fsr0h	equ	0xFEA
 19450                           fsr0l	equ	0xFE9
 19451                           wreg	equ	0xFE8
 19452                           postdec1	equ	0xFE5
 19453                           fsr1h	equ	0xFE2
 19454                           fsr1l	equ	0xFE1
 19455                           indf2	equ	0xFDF
 19456                           postinc2	equ	0xFDE
 19457                           postdec2	equ	0xFDD
 19458                           fsr2h	equ	0xFDA
 19459                           fsr2l	equ	0xFD9
 19460                           status	equ	0xFD8
 19461                           
 19462 ;; *************** function _updateServoStates *****************
 19463 ;; Defined at:
 19464 ;;		line 576 in file "sort.c"
 19465 ;; Parameters:    Size  Location     Type
 19466 ;;		None
 19467 ;; Auto vars:     Size  Location     Type
 19468 ;;		None
 19469 ;; Return value:  Size  Location     Type
 19470 ;;                  1    wreg      void 
 19471 ;; Registers used:
 19472 ;;		wreg, status,2, status,0, cstack
 19473 ;; Tracked objects:
 19474 ;;		On entry : 0/0
 19475 ;;		On exit  : 0/0
 19476 ;;		Unchanged: 0/0
 19477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19480 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19481 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19482 ;;Total ram usage:        2 bytes
 19483 ;; Hardware stack levels used:    1
 19484 ;; Hardware stack levels required when called:    1
 19485 ;; This function calls:
 19486 ;;		i2_updateServoPosition
 19487 ;; This function is called by:
 19488 ;;		_handler
 19489 ;; This function uses a non-reentrant model
 19490 ;;
 19491                           
 19492                           	psect	text65
 19493  003B5C                     __ptext65:
 19494                           	opt stack 0
 19495  003B5C                     _updateServoStates:
 19496                           	opt stack 22
 19497                           
 19498                           ;sort.c: 578: if(servo_timer_counter >= servo_timer_target){
 19499                           
 19500                           ;incstack = 0
 19501  003B5C  506F               	movf	_servo_timer_target,w,c	;volatile
 19502  003B5E  5C6D               	subwf	_servo_timer_counter,w,c	;volatile
 19503  003B60  506E               	movf	_servo_timer_counter+1,w,c	;volatile
 19504  003B62  0A80               	xorlw	128
 19505  003B64  6E09               	movwf	??_updateServoStates& (0+255),c
 19506  003B66  5070               	movf	_servo_timer_target+1,w,c	;volatile
 19507  003B68  0A80               	xorlw	128
 19508  003B6A  5809               	subwfb	??_updateServoStates& (0+255),w,c
 19509  003B6C  A0D8               	btfss	status,0,c
 19510  003B6E  0012               	return	
 19511                           
 19512                           ;sort.c: 580: if(f_panning_to_bin){
 19513  003B70  5061               	movf	_f_panning_to_bin,w,c	;volatile
 19514  003B72  1062               	iorwf	_f_panning_to_bin+1,w,c	;volatile
 19515  003B74  A4D8               	btfss	status,2,c
 19516  003B76  D036               	goto	i2l9987
 19517  003B78  D05F               	goto	i2l9991
 19518  003B7A                     i2l9961:
 19519                           
 19520                           ;sort.c: 584: updateServoPosition(1260, 3);
 19521  003B7A  0E04               	movlw	4
 19522  003B7C  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19523  003B7E  0EEC               	movlw	236
 19524  003B80  6E01               	movwf	i2updateServoPosition@time_us,c
 19525  003B82  0E00               	movlw	0
 19526  003B84  6E04               	movwf	i2updateServoPosition@timer+1,c
 19527  003B86  0E03               	movlw	3
 19528  003B88  6E03               	movwf	i2updateServoPosition@timer,c
 19529  003B8A  EC03  F028         	call	i2_updateServoPosition	;wreg free
 19530  003B8E  D025               	goto	i2l9981
 19531  003B90                     i2l9965:
 19532                           
 19533                           ;sort.c: 586: servo_timer_target = 700;
 19534  003B90  0E02               	movlw	2
 19535  003B92  6E70               	movwf	_servo_timer_target+1,c	;volatile
 19536  003B94  0EBC               	movlw	188
 19537  003B96  6E6F               	movwf	_servo_timer_target,c	;volatile
 19538                           
 19539                           ;sort.c: 587: break;
 19540  003B98  D04A               	goto	i2l9989
 19541  003B9A                     i2l9967:
 19542                           
 19543                           ;sort.c: 589: updateServoPosition(1260, 3);
 19544  003B9A  0E04               	movlw	4
 19545  003B9C  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19546  003B9E  0EEC               	movlw	236
 19547  003BA0  6E01               	movwf	i2updateServoPosition@time_us,c
 19548  003BA2  0E00               	movlw	0
 19549  003BA4  6E04               	movwf	i2updateServoPosition@timer+1,c
 19550  003BA6  0E03               	movlw	3
 19551  003BA8  6E03               	movwf	i2updateServoPosition@timer,c
 19552  003BAA  EC03  F028         	call	i2_updateServoPosition	;wreg free
 19553  003BAE  D015               	goto	i2l9981
 19554  003BB0                     i2l9973:
 19555                           
 19556                           ;sort.c: 594: updateServoPosition(1390, 3);
 19557  003BB0  0E05               	movlw	5
 19558  003BB2  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19559  003BB4  0E6E               	movlw	110
 19560  003BB6  6E01               	movwf	i2updateServoPosition@time_us,c
 19561  003BB8  0E00               	movlw	0
 19562  003BBA  6E04               	movwf	i2updateServoPosition@timer+1,c
 19563  003BBC  0E03               	movlw	3
 19564  003BBE  6E03               	movwf	i2updateServoPosition@timer,c
 19565  003BC0  EC03  F028         	call	i2_updateServoPosition	;wreg free
 19566  003BC4  D00A               	goto	i2l9981
 19567  003BC6                     i2l9979:
 19568                           
 19569                           ;sort.c: 599: updateServoPosition(1390, 3);
 19570  003BC6  0E05               	movlw	5
 19571  003BC8  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19572  003BCA  0E6E               	movlw	110
 19573  003BCC  6E01               	movwf	i2updateServoPosition@time_us,c
 19574  003BCE  0E00               	movlw	0
 19575  003BD0  6E04               	movwf	i2updateServoPosition@timer+1,c
 19576  003BD2  0E03               	movlw	3
 19577  003BD4  6E03               	movwf	i2updateServoPosition@timer,c
 19578  003BD6  EC03  F028         	call	i2_updateServoPosition	;wreg free
 19579  003BDA                     i2l9981:
 19580                           
 19581                           ;sort.c: 600: servo_timer_counter = 0;
 19582  003BDA  0E00               	movlw	0
 19583  003BDC  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19584  003BDE  0E00               	movlw	0
 19585  003BE0  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19586  003BE2  D7D6               	goto	i2l9965
 19587  003BE4                     i2l9987:
 19588  003BE4  C06B  F009         	movff	_pan_servo_state,??_updateServoStates	;volatile
 19589  003BE8  C06C  F00A         	movff	_pan_servo_state+1,??_updateServoStates+1	;volatile
 19590                           
 19591                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 19592                           ; Switch size 1, requested type "space"
 19593                           ; Number of cases is 4, Range of values is 1 to 9
 19594                           ; switch strategies available:
 19595                           ; Name         Instructions Cycles
 19596                           ; simple_byte           13     7 (average)
 19597                           ;	Chosen strategy is simple_byte
 19598  003BEC  500A               	movf	??_updateServoStates+1,w,c
 19599  003BEE  0A01               	xorlw	1	; case 1
 19600  003BF0  B4D8               	btfsc	status,2,c
 19601  003BF2  D00A               	goto	i2l10669
 19602  003BF4  0A02               	xorlw	2	; case 3
 19603  003BF6  B4D8               	btfsc	status,2,c
 19604  003BF8  D00C               	goto	i2l10671
 19605  003BFA  0A05               	xorlw	5	; case 6
 19606  003BFC  B4D8               	btfsc	status,2,c
 19607  003BFE  D00E               	goto	i2l10673
 19608  003C00  0A0F               	xorlw	15	; case 9
 19609  003C02  B4D8               	btfsc	status,2,c
 19610  003C04  D010               	goto	i2l10675
 19611  003C06  D013               	goto	i2l9989
 19612  003C08                     i2l10669:
 19613                           
 19614                           ; Switch size 1, requested type "space"
 19615                           ; Number of cases is 1, Range of values is 244 to 244
 19616                           ; switch strategies available:
 19617                           ; Name         Instructions Cycles
 19618                           ; simple_byte            4     3 (average)
 19619                           ;	Chosen strategy is simple_byte
 19620  003C08  5009               	movf	??_updateServoStates,w,c
 19621  003C0A  0AF4               	xorlw	244	; case 244
 19622  003C0C  B4D8               	btfsc	status,2,c
 19623  003C0E  D7B5               	goto	i2l9961
 19624  003C10  D00E               	goto	i2l9989
 19625  003C12                     i2l10671:
 19626                           
 19627                           ; Switch size 1, requested type "space"
 19628                           ; Number of cases is 1, Range of values is 82 to 82
 19629                           ; switch strategies available:
 19630                           ; Name         Instructions Cycles
 19631                           ; simple_byte            4     3 (average)
 19632                           ;	Chosen strategy is simple_byte
 19633  003C12  5009               	movf	??_updateServoStates,w,c
 19634  003C14  0A52               	xorlw	82	; case 82
 19635  003C16  B4D8               	btfsc	status,2,c
 19636  003C18  D7C0               	goto	i2l9967
 19637  003C1A  D009               	goto	i2l9989
 19638  003C1C                     i2l10673:
 19639                           
 19640                           ; Switch size 1, requested type "space"
 19641                           ; Number of cases is 1, Range of values is 134 to 134
 19642                           ; switch strategies available:
 19643                           ; Name         Instructions Cycles
 19644                           ; simple_byte            4     3 (average)
 19645                           ;	Chosen strategy is simple_byte
 19646  003C1C  5009               	movf	??_updateServoStates,w,c
 19647  003C1E  0A86               	xorlw	134	; case 134
 19648  003C20  B4D8               	btfsc	status,2,c
 19649  003C22  D7C6               	goto	i2l9973
 19650  003C24  D004               	goto	i2l9989
 19651  003C26                     i2l10675:
 19652                           
 19653                           ; Switch size 1, requested type "space"
 19654                           ; Number of cases is 1, Range of values is 96 to 96
 19655                           ; switch strategies available:
 19656                           ; Name         Instructions Cycles
 19657                           ; simple_byte            4     3 (average)
 19658                           ;	Chosen strategy is simple_byte
 19659  003C26  5009               	movf	??_updateServoStates,w,c
 19660  003C28  0A60               	xorlw	96	; case 96
 19661  003C2A  B4D8               	btfsc	status,2,c
 19662  003C2C  D7CC               	goto	i2l9979
 19663  003C2E                     i2l9989:
 19664                           
 19665                           ;sort.c: 606: f_panning_to_bin = 0;
 19666  003C2E  0E00               	movlw	0
 19667  003C30  6E62               	movwf	_f_panning_to_bin+1,c	;volatile
 19668  003C32  0E00               	movlw	0
 19669  003C34  6E61               	movwf	_f_panning_to_bin,c	;volatile
 19670                           
 19671                           ;sort.c: 607: }
 19672  003C36  0012               	return	
 19673  003C38                     i2l9991:
 19674                           
 19675                           ;sort.c: 608: else if(pan_servo_state == 1200){
 19676  003C38  0EB0               	movlw	176
 19677  003C3A  186B               	xorwf	_pan_servo_state,w,c	;volatile
 19678  003C3C  E15A               	bnz	i2l10021
 19679  003C3E  0E04               	movlw	4
 19680  003C40  186C               	xorwf	_pan_servo_state+1,w,c	;volatile
 19681  003C42  A4D8               	btfss	status,2,c
 19682  003C44  D056               	goto	i2l10021
 19683                           
 19684                           ;sort.c: 610: servo_timer_counter = 0;
 19685  003C46  0E00               	movlw	0
 19686  003C48  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19687  003C4A  0E00               	movlw	0
 19688  003C4C  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19689                           
 19690                           ;sort.c: 611: }
 19691  003C4E  0012               	return	
 19692  003C50                     i2l9995:
 19693                           
 19694                           ;sort.c: 616: updateServoPosition(1050, 3);
 19695  003C50  0E04               	movlw	4
 19696  003C52  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19697  003C54  0E1A               	movlw	26
 19698  003C56  6E01               	movwf	i2updateServoPosition@time_us,c
 19699  003C58  0E00               	movlw	0
 19700  003C5A  6E04               	movwf	i2updateServoPosition@timer+1,c
 19701  003C5C  0E03               	movlw	3
 19702  003C5E  6E03               	movwf	i2updateServoPosition@timer,c
 19703  003C60  EC03  F028         	call	i2_updateServoPosition	;wreg free
 19704                           
 19705                           ;sort.c: 617: servo_timer_counter = 0;
 19706  003C64  0E00               	movlw	0
 19707  003C66  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19708  003C68  0E00               	movlw	0
 19709  003C6A  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19710                           
 19711                           ;sort.c: 618: servo_timer_target = 750;
 19712  003C6C  0E02               	movlw	2
 19713  003C6E  6E70               	movwf	_servo_timer_target+1,c	;volatile
 19714  003C70  0EEE               	movlw	238
 19715  003C72  6E6F               	movwf	_servo_timer_target,c	;volatile
 19716                           
 19717                           ;sort.c: 619: break;
 19718  003C74  0012               	return	
 19719  003C76                     i2l10001:
 19720                           
 19721                           ;sort.c: 621: updateServoPosition(1050, 3);
 19722  003C76  0E04               	movlw	4
 19723  003C78  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19724  003C7A  0E1A               	movlw	26
 19725  003C7C  6E01               	movwf	i2updateServoPosition@time_us,c
 19726  003C7E  0E00               	movlw	0
 19727  003C80  6E04               	movwf	i2updateServoPosition@timer+1,c
 19728  003C82  0E03               	movlw	3
 19729  003C84  6E03               	movwf	i2updateServoPosition@timer,c
 19730  003C86  EC03  F028         	call	i2_updateServoPosition	;wreg free
 19731                           
 19732                           ;sort.c: 622: servo_timer_counter = 0;
 19733  003C8A  0E00               	movlw	0
 19734  003C8C  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19735  003C8E  0E00               	movlw	0
 19736  003C90  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19737                           
 19738                           ;sort.c: 623: servo_timer_target = 750;
 19739  003C92  0E02               	movlw	2
 19740  003C94  6E70               	movwf	_servo_timer_target+1,c	;volatile
 19741  003C96  0EEE               	movlw	238
 19742  003C98  6E6F               	movwf	_servo_timer_target,c	;volatile
 19743                           
 19744                           ;sort.c: 624: break;
 19745  003C9A  0012               	return	
 19746  003C9C                     i2l10007:
 19747                           
 19748                           ;sort.c: 627: updateServoPosition(1200, 1);
 19749  003C9C  0E04               	movlw	4
 19750  003C9E  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19751  003CA0  0EB0               	movlw	176
 19752  003CA2  6E01               	movwf	i2updateServoPosition@time_us,c
 19753  003CA4  0E00               	movlw	0
 19754  003CA6  6E04               	movwf	i2updateServoPosition@timer+1,c
 19755  003CA8  0E01               	movlw	1
 19756  003CAA  6E03               	movwf	i2updateServoPosition@timer,c
 19757  003CAC  EC03  F028         	call	i2_updateServoPosition	;wreg free
 19758                           
 19759                           ;sort.c: 628: updateServoPosition(1050, 3);
 19760  003CB0  0E04               	movlw	4
 19761  003CB2  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19762  003CB4  0E1A               	movlw	26
 19763  003CB6  6E01               	movwf	i2updateServoPosition@time_us,c
 19764  003CB8  0E00               	movlw	0
 19765  003CBA  6E04               	movwf	i2updateServoPosition@timer+1,c
 19766  003CBC  0E03               	movlw	3
 19767  003CBE  6E03               	movwf	i2updateServoPosition@timer,c
 19768  003CC0  EC03  F028         	call	i2_updateServoPosition	;wreg free
 19769                           
 19770                           ;sort.c: 629: servo_timer_counter = 0;
 19771  003CC4  0E00               	movlw	0
 19772  003CC6  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19773  003CC8  0E00               	movlw	0
 19774  003CCA  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19775                           
 19776                           ;sort.c: 630: servo_timer_target = 9999;
 19777  003CCC  0E27               	movlw	39
 19778  003CCE  6E70               	movwf	_servo_timer_target+1,c	;volatile
 19779  003CD0  0E0F               	movlw	15
 19780  003CD2  6E6F               	movwf	_servo_timer_target,c	;volatile
 19781                           
 19782                           ;sort.c: 632: f_can_distributed = 1;
 19783  003CD4  0E00               	movlw	0
 19784  003CD6  0101               	movlb	1	; () banked
 19785  003CD8  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
 19786  003CDA  0E01               	movlw	1
 19787  003CDC  6F35               	movwf	_f_can_distributed& (0+255),b
 19788                           
 19789                           ; BSR set to: 1
 19790                           ;sort.c: 633: if(f_lastCan == 1){
 19791  003CDE  0101               	movlb	1	; () banked
 19792  003CE0  0537               	decf	_f_lastCan& (0+255),w,b
 19793  003CE2  0101               	movlb	1	; () banked
 19794  003CE4  1138               	iorwf	(_f_lastCan+1)& (0+255),w,b
 19795  003CE6  A4D8               	btfss	status,2,c
 19796  003CE8  0012               	return	
 19797                           
 19798                           ; BSR set to: 1
 19799                           ;sort.c: 634: machine_state = DoneSorting_state;
 19800  003CEA  0E02               	movlw	2
 19801  003CEC  0100               	movlb	0	; () banked
 19802  003CEE  6FFC               	movwf	_machine_state& (0+255),b
 19803                           
 19804                           ; BSR set to: 0
 19805                           ;sort.c: 640: }
 19806                           
 19807                           ; BSR set to: 0
 19808                           ;sort.c: 639: break;
 19809                           
 19810                           ;sort.c: 638: default:
 19811                           
 19812                           ; BSR set to: 0
 19813                           ;sort.c: 635: }
 19814                           ;sort.c: 636: break;
 19815  003CF0  0012               	return	
 19816  003CF2                     i2l10021:
 19817  003CF2  C071  F009         	movff	_tilt_servo_state,??_updateServoStates	;volatile
 19818  003CF6  C072  F00A         	movff	_tilt_servo_state+1,??_updateServoStates+1	;volatile
 19819                           
 19820                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 19821                           ; Switch size 1, requested type "space"
 19822                           ; Number of cases is 2, Range of values is 4 to 5
 19823                           ; switch strategies available:
 19824                           ; Name         Instructions Cycles
 19825                           ; simple_byte            7     4 (average)
 19826                           ;	Chosen strategy is simple_byte
 19827  003CFA  500A               	movf	??_updateServoStates+1,w,c
 19828  003CFC  0A04               	xorlw	4	; case 4
 19829  003CFE  B4D8               	btfsc	status,2,c
 19830  003D00  D004               	goto	i2l10677
 19831  003D02  0A01               	xorlw	1	; case 5
 19832  003D04  A4D8               	btfss	status,2,c
 19833  003D06  0012               	return	
 19834  003D08  D008               	goto	i2l10679
 19835  003D0A                     i2l10677:
 19836                           
 19837                           ; Switch size 1, requested type "space"
 19838                           ; Number of cases is 2, Range of values is 26 to 236
 19839                           ; switch strategies available:
 19840                           ; Name         Instructions Cycles
 19841                           ; simple_byte            7     4 (average)
 19842                           ;	Chosen strategy is simple_byte
 19843  003D0A  5009               	movf	??_updateServoStates,w,c
 19844  003D0C  0A1A               	xorlw	26	; case 26
 19845  003D0E  B4D8               	btfsc	status,2,c
 19846  003D10  D7C5               	goto	i2l10007
 19847  003D12  0AF6               	xorlw	246	; case 236
 19848  003D14  A4D8               	btfss	status,2,c
 19849  003D16  0012               	return	
 19850  003D18  D79B               	goto	i2l9995
 19851  003D1A                     i2l10679:
 19852                           
 19853                           ; Switch size 1, requested type "space"
 19854                           ; Number of cases is 1, Range of values is 110 to 110
 19855                           ; switch strategies available:
 19856                           ; Name         Instructions Cycles
 19857                           ; simple_byte            4     3 (average)
 19858                           ;	Chosen strategy is simple_byte
 19859  003D1A  5009               	movf	??_updateServoStates,w,c
 19860  003D1C  0A6E               	xorlw	110	; case 110
 19861  003D1E  A4D8               	btfss	status,2,c
 19862  003D20  0012               	return	
 19863  003D22  D7A9               	goto	i2l10001
 19864  003D24                     __end_of_updateServoStates:
 19865                           	opt stack 0
 19866                           pclatu	equ	0xFFB
 19867                           pclath	equ	0xFFA
 19868                           tblptru	equ	0xFF8
 19869                           tblptrh	equ	0xFF7
 19870                           tblptrl	equ	0xFF6
 19871                           tablat	equ	0xFF5
 19872                           prodh	equ	0xFF4
 19873                           prodl	equ	0xFF3
 19874                           intcon	equ	0xFF2
 19875                           intcon2	equ	0xFF1
 19876                           intcon3	equ	0xFF0
 19877                           indf0	equ	0xFEF
 19878                           postinc0	equ	0xFEE
 19879                           fsr0h	equ	0xFEA
 19880                           fsr0l	equ	0xFE9
 19881                           wreg	equ	0xFE8
 19882                           postdec1	equ	0xFE5
 19883                           fsr1h	equ	0xFE2
 19884                           fsr1l	equ	0xFE1
 19885                           indf2	equ	0xFDF
 19886                           postinc2	equ	0xFDE
 19887                           postdec2	equ	0xFDD
 19888                           fsr2h	equ	0xFDA
 19889                           fsr2l	equ	0xFD9
 19890                           status	equ	0xFD8
 19891                           
 19892 ;; *************** function i2_updateServoPosition *****************
 19893 ;; Defined at:
 19894 ;;		line 561 in file "sort.c"
 19895 ;; Parameters:    Size  Location     Type
 19896 ;;  time_us         2    0[COMRAM] int 
 19897 ;;  timer           2    2[COMRAM] int 
 19898 ;; Auto vars:     Size  Location     Type
 19899 ;;  updateServoP    2    6[COMRAM] unsigned int 
 19900 ;; Return value:  Size  Location     Type
 19901 ;;                  1    wreg      void 
 19902 ;; Registers used:
 19903 ;;		wreg, status,2, status,0
 19904 ;; Tracked objects:
 19905 ;;		On entry : 0/0
 19906 ;;		On exit  : 0/0
 19907 ;;		Unchanged: 0/0
 19908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19909 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19910 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19911 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19912 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19913 ;;Total ram usage:        8 bytes
 19914 ;; Hardware stack levels used:    1
 19915 ;; This function calls:
 19916 ;;		Nothing
 19917 ;; This function is called by:
 19918 ;;		_updateServoStates
 19919 ;; This function uses a non-reentrant model
 19920 ;;
 19921                           
 19922                           	psect	text66
 19923  005006                     __ptext66:
 19924                           	opt stack 0
 19925  005006                     i2_updateServoPosition:
 19926                           	opt stack 22
 19927                           
 19928                           ;sort.c: 562: unsigned int my_time = 65535 - time_us;
 19929                           
 19930                           ;incstack = 0
 19931  005006  C001  F005         	movff	i2updateServoPosition@time_us,??i2_updateServoPosition
 19932  00500A  C002  F006         	movff	i2updateServoPosition@time_us+1,??i2_updateServoPosition+1
 19933  00500E  1E05               	comf	??i2_updateServoPosition,f,c
 19934  005010  1E06               	comf	??i2_updateServoPosition+1,f,c
 19935  005012  4A05               	infsnz	??i2_updateServoPosition,f,c
 19936  005014  2A06               	incf	??i2_updateServoPosition+1,f,c
 19937  005016  0EFF               	movlw	255
 19938  005018  2405               	addwf	??i2_updateServoPosition,w,c
 19939  00501A  6E07               	movwf	i2updateServoPosition@my_time,c
 19940  00501C  0EFF               	movlw	255
 19941  00501E  2006               	addwfc	??i2_updateServoPosition+1,w,c
 19942  005020  6E08               	movwf	i2updateServoPosition@my_time+1,c
 19943                           
 19944                           ;sort.c: 563: switch(timer){
 19945  005022  D019               	goto	i2l9177
 19946  005024                     i2l9171:
 19947                           
 19948                           ;sort.c: 565: servoTimes[0] = my_time >> 8;
 19949  005024  5008               	movf	i2updateServoPosition@my_time+1,w,c
 19950  005026  0100               	movlb	0	; () banked
 19951  005028  6FDA               	movwf	_servoTimes& (0+255),b
 19952  00502A  6BDB               	clrf	(_servoTimes+1)& (0+255),b
 19953                           
 19954                           ;sort.c: 566: servoTimes[1] = my_time & 0xFF;
 19955  00502C  5007               	movf	i2updateServoPosition@my_time,w,c
 19956  00502E  0100               	movlb	0	; () banked
 19957  005030  6FDC               	movwf	(_servoTimes+2)& (0+255),b
 19958  005032  6BDD               	clrf	(_servoTimes+3)& (0+255),b
 19959                           
 19960                           ; BSR set to: 0
 19961                           ;sort.c: 568: pan_servo_state = time_us;
 19962  005034  C001  F06B         	movff	i2updateServoPosition@time_us,_pan_servo_state	;volatile
 19963  005038  C002  F06C         	movff	i2updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 19964  00503C                     i2l920:
 19965                           
 19966                           ;sort.c: 570: servoTimes[2] = my_time >> 8;
 19967  00503C  5008               	movf	i2updateServoPosition@my_time+1,w,c
 19968  00503E  0100               	movlb	0	; () banked
 19969  005040  6FDE               	movwf	(_servoTimes+4)& (0+255),b
 19970  005042  6BDF               	clrf	(_servoTimes+5)& (0+255),b
 19971                           
 19972                           ;sort.c: 571: servoTimes[3] = my_time & 0xFF;
 19973  005044  5007               	movf	i2updateServoPosition@my_time,w,c
 19974  005046  0100               	movlb	0	; () banked
 19975  005048  6FE0               	movwf	(_servoTimes+6)& (0+255),b
 19976  00504A  6BE1               	clrf	(_servoTimes+7)& (0+255),b
 19977                           
 19978                           ; BSR set to: 0
 19979                           ;sort.c: 573: tilt_servo_state = time_us;
 19980  00504C  C001  F071         	movff	i2updateServoPosition@time_us,_tilt_servo_state	;volatile
 19981  005050  C002  F072         	movff	i2updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 19982                           
 19983                           ;sort.c: 574: }
 19984  005054  0012               	return	
 19985  005056                     i2l9177:
 19986  005056  C003  F005         	movff	i2updateServoPosition@timer,??i2_updateServoPosition
 19987  00505A  C004  F006         	movff	i2updateServoPosition@timer+1,??i2_updateServoPosition+1
 19988                           
 19989                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 19990                           ; Switch size 1, requested type "space"
 19991                           ; Number of cases is 1, Range of values is 0 to 0
 19992                           ; switch strategies available:
 19993                           ; Name         Instructions Cycles
 19994                           ; simple_byte            4     3 (average)
 19995                           ;	Chosen strategy is simple_byte
 19996  00505E  5006               	movf	??i2_updateServoPosition+1,w,c
 19997  005060  0A00               	xorlw	0	; case 0
 19998  005062  A4D8               	btfss	status,2,c
 19999  005064  0012               	return	
 20000                           
 20001                           ; Switch size 1, requested type "space"
 20002                           ; Number of cases is 2, Range of values is 1 to 3
 20003                           ; switch strategies available:
 20004                           ; Name         Instructions Cycles
 20005                           ; simple_byte            7     4 (average)
 20006                           ;	Chosen strategy is simple_byte
 20007  005066  5005               	movf	??i2_updateServoPosition,w,c
 20008  005068  0A01               	xorlw	1	; case 1
 20009  00506A  B4D8               	btfsc	status,2,c
 20010  00506C  D7DB               	goto	i2l9171
 20011  00506E  0A02               	xorlw	2	; case 3
 20012  005070  A4D8               	btfss	status,2,c
 20013  005072  0012               	return	
 20014  005074  D7E3               	goto	i2l920
 20015  005076                     __end_ofi2_updateServoPosition:
 20016                           	opt stack 0
 20017                           pclatu	equ	0xFFB
 20018                           pclath	equ	0xFFA
 20019                           tblptru	equ	0xFF8
 20020                           tblptrh	equ	0xFF7
 20021                           tblptrl	equ	0xFF6
 20022                           tablat	equ	0xFF5
 20023                           prodh	equ	0xFF4
 20024                           prodl	equ	0xFF3
 20025                           intcon	equ	0xFF2
 20026                           intcon2	equ	0xFF1
 20027                           intcon3	equ	0xFF0
 20028                           indf0	equ	0xFEF
 20029                           postinc0	equ	0xFEE
 20030                           fsr0h	equ	0xFEA
 20031                           fsr0l	equ	0xFE9
 20032                           wreg	equ	0xFE8
 20033                           postdec1	equ	0xFE5
 20034                           fsr1h	equ	0xFE2
 20035                           fsr1l	equ	0xFE1
 20036                           indf2	equ	0xFDF
 20037                           postinc2	equ	0xFDE
 20038                           postdec2	equ	0xFDD
 20039                           fsr2h	equ	0xFDA
 20040                           fsr2l	equ	0xFD9
 20041                           status	equ	0xFD8
 20042                           
 20043 ;; *************** function _updateMenu *****************
 20044 ;; Defined at:
 20045 ;;		line 216 in file "UI.c"
 20046 ;; Parameters:    Size  Location     Type
 20047 ;;		None
 20048 ;; Auto vars:     Size  Location     Type
 20049 ;;		None
 20050 ;; Return value:  Size  Location     Type
 20051 ;;                  1    wreg      void 
 20052 ;; Registers used:
 20053 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20054 ;; Tracked objects:
 20055 ;;		On entry : 0/0
 20056 ;;		On exit  : 0/0
 20057 ;;		Unchanged: 0/0
 20058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20060 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20061 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20062 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20063 ;;Total ram usage:        2 bytes
 20064 ;; Hardware stack levels used:    1
 20065 ;; Hardware stack levels required when called:    5
 20066 ;; This function calls:
 20067 ;;		_change_state_to_logs_11
 20068 ;;		_change_state_to_logs_12
 20069 ;;		_change_state_to_logs_22
 20070 ;;		_change_state_to_logs_23
 20071 ;;		_change_state_to_logs_33
 20072 ;;		_change_state_to_logs_34
 20073 ;;		_change_state_to_menu_11
 20074 ;;		_change_state_to_menu_23
 20075 ;;		_dispLogs
 20076 ;;		_inputHandler
 20077 ;;		i2_change_state_to_menu_12
 20078 ;;		i2_change_state_to_menu_22
 20079 ;;		i2_change_state_to_menu_start
 20080 ;; This function is called by:
 20081 ;;		_handler
 20082 ;; This function uses a non-reentrant model
 20083 ;;
 20084                           
 20085                           	psect	text67
 20086  002FE4                     __ptext67:
 20087                           	opt stack 0
 20088  002FE4                     _updateMenu:
 20089                           	opt stack 18
 20090                           
 20091                           ;UI.c: 217: up = 0; down = 0; enter = 0; back = 0;
 20092                           
 20093                           ;incstack = 0
 20094  002FE4  0E00               	movlw	0
 20095  002FE6  6E76               	movwf	_up+1,c
 20096  002FE8  0E00               	movlw	0
 20097  002FEA  6E75               	movwf	_up,c
 20098  002FEC  0E00               	movlw	0
 20099  002FEE  6E5E               	movwf	_down+1,c
 20100  002FF0  0E00               	movlw	0
 20101  002FF2  6E5D               	movwf	_down,c
 20102  002FF4  0E00               	movlw	0
 20103  002FF6  6E60               	movwf	_enter+1,c
 20104  002FF8  0E00               	movlw	0
 20105  002FFA  6E5F               	movwf	_enter,c
 20106  002FFC  0E00               	movlw	0
 20107  002FFE  6E5C               	movwf	_back+1,c
 20108  003000  0E00               	movlw	0
 20109  003002  6E5B               	movwf	_back,c
 20110                           
 20111                           ;UI.c: 218: (INTCONbits.GIE = 0);
 20112  003004  9EF2               	bcf	intcon,7,c	;volatile
 20113                           
 20114                           ;UI.c: 220: if (inputHandler()
 20115                           ;UI.c: 223: ){
 20116  003006  ECB8  F01C         	call	_inputHandler	;wreg free
 20117  00300A  502A               	movf	?_inputHandler,w,c
 20118  00300C  102B               	iorwf	?_inputHandler+1,w,c
 20119  00300E  A4D8               	btfss	status,2,c
 20120  003010  D112               	goto	i2l9711
 20121  003012  D146               	goto	i2l268
 20122  003014                     i2l9563:
 20123                           
 20124                           ;UI.c: 227: change_state_to_menu_11();
 20125  003014  ECD2  F02B         	call	_change_state_to_menu_11	;wreg free
 20126                           
 20127                           ;UI.c: 228: break;
 20128  003018  D143               	goto	i2l268
 20129  00301A                     i2l9565:
 20130                           
 20131                           ;UI.c: 231: if(up){
 20132  00301A  5075               	movf	_up,w,c
 20133  00301C  1076               	iorwf	_up+1,w,c
 20134  00301E  B4D8               	btfsc	status,2,c
 20135  003020  D003               	goto	i2l9569
 20136                           
 20137                           ;UI.c: 232: change_state_to_menu_23();
 20138  003022  ECBA  F02B         	call	_change_state_to_menu_23	;wreg free
 20139                           
 20140                           ;UI.c: 233: }
 20141  003026  D13C               	goto	i2l268
 20142  003028                     i2l9569:
 20143                           
 20144                           ;UI.c: 234: else if(down){
 20145  003028  505D               	movf	_down,w,c
 20146  00302A  105E               	iorwf	_down+1,w,c
 20147  00302C  B4D8               	btfsc	status,2,c
 20148  00302E  D003               	goto	i2l9573
 20149                           
 20150                           ;UI.c: 235: change_state_to_menu_12();
 20151  003030  ECA2  F02B         	call	i2_change_state_to_menu_12	;wreg free
 20152                           
 20153                           ;UI.c: 236: }
 20154  003034  D135               	goto	i2l268
 20155  003036                     i2l9573:
 20156                           
 20157                           ;UI.c: 237: else if(enter){
 20158  003036  505F               	movf	_enter,w,c
 20159  003038  1060               	iorwf	_enter+1,w,c
 20160  00303A  B4D8               	btfsc	status,2,c
 20161  00303C  D131               	goto	i2l268
 20162                           
 20163                           ;UI.c: 238: change_state_to_menu_start();
 20164  00303E  ECE5  F02C         	call	i2_change_state_to_menu_start	;wreg free
 20165                           
 20166                           ;UI.c: 239: }
 20167                           ;UI.c: 240: break;
 20168  003042  D12E               	goto	i2l268
 20169  003044                     i2l9577:
 20170                           
 20171                           ;UI.c: 243: if(up){
 20172  003044  5075               	movf	_up,w,c
 20173  003046  1076               	iorwf	_up+1,w,c
 20174  003048  B4D8               	btfsc	status,2,c
 20175  00304A  D003               	goto	i2l9581
 20176                           
 20177                           ;UI.c: 244: change_state_to_menu_11();
 20178  00304C  ECD2  F02B         	call	_change_state_to_menu_11	;wreg free
 20179                           
 20180                           ;UI.c: 245: }
 20181  003050  D127               	goto	i2l268
 20182  003052                     i2l9581:
 20183                           
 20184                           ;UI.c: 246: else if(down){
 20185  003052  505D               	movf	_down,w,c
 20186  003054  105E               	iorwf	_down+1,w,c
 20187  003056  B4D8               	btfsc	status,2,c
 20188  003058  D011               	goto	i2l9597
 20189                           
 20190                           ;UI.c: 247: change_state_to_menu_23();
 20191  00305A  ECBA  F02B         	call	_change_state_to_menu_23	;wreg free
 20192                           
 20193                           ;UI.c: 248: }
 20194  00305E  D120               	goto	i2l268
 20195  003060                     i2l9589:
 20196                           
 20197                           ;UI.c: 255: if(up){
 20198  003060  5075               	movf	_up,w,c
 20199  003062  1076               	iorwf	_up+1,w,c
 20200  003064  B4D8               	btfsc	status,2,c
 20201  003066  D003               	goto	i2l9593
 20202                           
 20203                           ;UI.c: 256: change_state_to_menu_11();
 20204  003068  ECD2  F02B         	call	_change_state_to_menu_11	;wreg free
 20205                           
 20206                           ;UI.c: 257: }
 20207  00306C  D119               	goto	i2l268
 20208  00306E                     i2l9593:
 20209                           
 20210                           ;UI.c: 258: else if(down){
 20211  00306E  505D               	movf	_down,w,c
 20212  003070  105E               	iorwf	_down+1,w,c
 20213  003072  B4D8               	btfsc	status,2,c
 20214  003074  D003               	goto	i2l9597
 20215                           
 20216                           ;UI.c: 259: change_state_to_menu_23();
 20217  003076  ECBA  F02B         	call	_change_state_to_menu_23	;wreg free
 20218                           
 20219                           ;UI.c: 260: }
 20220  00307A  D112               	goto	i2l268
 20221  00307C                     i2l9597:
 20222                           
 20223                           ;UI.c: 261: else if(enter){
 20224  00307C  505F               	movf	_enter,w,c
 20225  00307E  1060               	iorwf	_enter+1,w,c
 20226  003080  B4D8               	btfsc	status,2,c
 20227  003082  D10E               	goto	i2l268
 20228                           
 20229                           ;UI.c: 262: machine_state = Sorting_state;
 20230  003084  0E01               	movlw	1
 20231  003086  0100               	movlb	0	; () banked
 20232  003088  6FFC               	movwf	_machine_state& (0+255),b
 20233                           
 20234                           ; BSR set to: 0
 20235                           ;UI.c: 263: }
 20236                           ;UI.c: 264: break;
 20237                           
 20238                           ; BSR set to: 0
 20239                           
 20240                           ; BSR set to: 0
 20241  00308A  D10A               	goto	i2l268
 20242  00308C                     i2l9601:
 20243                           
 20244                           ;UI.c: 267: if(up){
 20245  00308C  5075               	movf	_up,w,c
 20246  00308E  1076               	iorwf	_up+1,w,c
 20247  003090  B4D8               	btfsc	status,2,c
 20248  003092  D003               	goto	i2l9605
 20249                           
 20250                           ;UI.c: 268: change_state_to_menu_22();
 20251  003094  EC8A  F02B         	call	i2_change_state_to_menu_22	;wreg free
 20252                           
 20253                           ;UI.c: 269: }
 20254  003098  D103               	goto	i2l268
 20255  00309A                     i2l9605:
 20256                           
 20257                           ;UI.c: 270: else if(down){
 20258  00309A  505D               	movf	_down,w,c
 20259  00309C  105E               	iorwf	_down+1,w,c
 20260  00309E  B4D8               	btfsc	status,2,c
 20261  0030A0  D003               	goto	i2l9609
 20262                           
 20263                           ;UI.c: 271: change_state_to_menu_11();
 20264  0030A2  ECD2  F02B         	call	_change_state_to_menu_11	;wreg free
 20265                           
 20266                           ;UI.c: 272: }
 20267  0030A6  D0FC               	goto	i2l268
 20268  0030A8                     i2l9609:
 20269                           
 20270                           ;UI.c: 273: else if(enter){
 20271  0030A8  505F               	movf	_enter,w,c
 20272  0030AA  1060               	iorwf	_enter+1,w,c
 20273  0030AC  B4D8               	btfsc	status,2,c
 20274  0030AE  D0F8               	goto	i2l268
 20275                           
 20276                           ;UI.c: 274: change_state_to_logs_11();
 20277  0030B0  EC4A  F02C         	call	_change_state_to_logs_11	;wreg free
 20278                           
 20279                           ;UI.c: 275: }
 20280                           ;UI.c: 276: break;
 20281  0030B4  D0F5               	goto	i2l268
 20282  0030B6                     i2l9613:
 20283                           
 20284                           ;UI.c: 279: if(up){
 20285  0030B6  5075               	movf	_up,w,c
 20286  0030B8  1076               	iorwf	_up+1,w,c
 20287  0030BA  B4D8               	btfsc	status,2,c
 20288  0030BC  D003               	goto	i2l9617
 20289                           
 20290                           ;UI.c: 280: change_state_to_logs_34();
 20291  0030BE  ECEA  F02B         	call	_change_state_to_logs_34	;wreg free
 20292                           
 20293                           ;UI.c: 281: }
 20294  0030C2  D0EE               	goto	i2l268
 20295  0030C4                     i2l9617:
 20296                           
 20297                           ;UI.c: 282: else if(down){
 20298  0030C4  505D               	movf	_down,w,c
 20299  0030C6  105E               	iorwf	_down+1,w,c
 20300  0030C8  B4D8               	btfsc	status,2,c
 20301  0030CA  D003               	goto	i2l9621
 20302                           
 20303                           ;UI.c: 283: change_state_to_logs_12();
 20304  0030CC  EC32  F02C         	call	_change_state_to_logs_12	;wreg free
 20305                           
 20306                           ;UI.c: 284: }
 20307  0030D0  D0E7               	goto	i2l268
 20308  0030D2                     i2l9621:
 20309                           
 20310                           ;UI.c: 285: else if(enter){
 20311  0030D2  505F               	movf	_enter,w,c
 20312  0030D4  1060               	iorwf	_enter+1,w,c
 20313  0030D6  B4D8               	btfsc	status,2,c
 20314  0030D8  D007               	goto	i2l9625
 20315                           
 20316                           ;UI.c: 286: dispLogs(1);
 20317  0030DA  0E00               	movlw	0
 20318  0030DC  6E13               	movwf	dispLogs@myLog+1,c
 20319  0030DE  0E01               	movlw	1
 20320  0030E0  6E12               	movwf	dispLogs@myLog,c
 20321  0030E2  EC1F  F02D         	call	_dispLogs	;wreg free
 20322                           
 20323                           ;UI.c: 287: }
 20324  0030E6  D0DC               	goto	i2l268
 20325  0030E8                     i2l9625:
 20326                           
 20327                           ;UI.c: 288: else if(back){
 20328  0030E8  505B               	movf	_back,w,c
 20329  0030EA  105C               	iorwf	_back+1,w,c
 20330  0030EC  B4D8               	btfsc	status,2,c
 20331  0030EE  D0D8               	goto	i2l268
 20332                           
 20333                           ;UI.c: 289: change_state_to_menu_23();
 20334  0030F0  ECBA  F02B         	call	_change_state_to_menu_23	;wreg free
 20335                           
 20336                           ;UI.c: 290: }
 20337                           ;UI.c: 291: break;
 20338  0030F4  D0D5               	goto	i2l268
 20339  0030F6                     i2l9629:
 20340                           
 20341                           ;UI.c: 294: if(up){
 20342  0030F6  5075               	movf	_up,w,c
 20343  0030F8  1076               	iorwf	_up+1,w,c
 20344  0030FA  B4D8               	btfsc	status,2,c
 20345  0030FC  D003               	goto	i2l9633
 20346                           
 20347                           ;UI.c: 295: change_state_to_logs_11();
 20348  0030FE  EC4A  F02C         	call	_change_state_to_logs_11	;wreg free
 20349                           
 20350                           ;UI.c: 296: }
 20351  003102  D0CE               	goto	i2l268
 20352  003104                     i2l9633:
 20353                           
 20354                           ;UI.c: 297: else if(down){
 20355  003104  505D               	movf	_down,w,c
 20356  003106  105E               	iorwf	_down+1,w,c
 20357  003108  B4D8               	btfsc	status,2,c
 20358  00310A  D003               	goto	i2l9637
 20359                           
 20360                           ;UI.c: 298: change_state_to_logs_23();
 20361  00310C  EC79  F02C         	call	_change_state_to_logs_23	;wreg free
 20362                           
 20363                           ;UI.c: 299: }
 20364  003110  D0C7               	goto	i2l268
 20365  003112                     i2l9637:
 20366                           
 20367                           ;UI.c: 300: else if(enter){
 20368  003112  505F               	movf	_enter,w,c
 20369  003114  1060               	iorwf	_enter+1,w,c
 20370  003116  B4D8               	btfsc	status,2,c
 20371  003118  D007               	goto	i2l9641
 20372                           
 20373                           ;UI.c: 301: dispLogs(2);
 20374  00311A  0E00               	movlw	0
 20375  00311C  6E13               	movwf	dispLogs@myLog+1,c
 20376  00311E  0E02               	movlw	2
 20377  003120  6E12               	movwf	dispLogs@myLog,c
 20378  003122  EC1F  F02D         	call	_dispLogs	;wreg free
 20379                           
 20380                           ;UI.c: 302: }
 20381  003126  D0BC               	goto	i2l268
 20382  003128                     i2l9641:
 20383                           
 20384                           ;UI.c: 303: else if(back){
 20385  003128  505B               	movf	_back,w,c
 20386  00312A  105C               	iorwf	_back+1,w,c
 20387  00312C  B4D8               	btfsc	status,2,c
 20388  00312E  D0B8               	goto	i2l268
 20389                           
 20390                           ;UI.c: 304: change_state_to_menu_23();
 20391  003130  ECBA  F02B         	call	_change_state_to_menu_23	;wreg free
 20392                           
 20393                           ;UI.c: 305: }
 20394                           ;UI.c: 306: break;
 20395  003134  D0B5               	goto	i2l268
 20396  003136                     i2l9645:
 20397                           
 20398                           ;UI.c: 309: if(up){
 20399  003136  5075               	movf	_up,w,c
 20400  003138  1076               	iorwf	_up+1,w,c
 20401  00313A  B4D8               	btfsc	status,2,c
 20402  00313C  D003               	goto	i2l9649
 20403                           
 20404                           ;UI.c: 310: change_state_to_logs_11();
 20405  00313E  EC4A  F02C         	call	_change_state_to_logs_11	;wreg free
 20406                           
 20407                           ;UI.c: 311: }
 20408  003142  D0AE               	goto	i2l268
 20409  003144                     i2l9649:
 20410                           
 20411                           ;UI.c: 312: else if(down){
 20412  003144  505D               	movf	_down,w,c
 20413  003146  105E               	iorwf	_down+1,w,c
 20414  003148  B4D8               	btfsc	status,2,c
 20415  00314A  D003               	goto	i2l9653
 20416                           
 20417                           ;UI.c: 313: change_state_to_logs_23();
 20418  00314C  EC79  F02C         	call	_change_state_to_logs_23	;wreg free
 20419                           
 20420                           ;UI.c: 314: }
 20421  003150  D0A7               	goto	i2l268
 20422  003152                     i2l9653:
 20423                           
 20424                           ;UI.c: 315: else if(enter){
 20425  003152  505F               	movf	_enter,w,c
 20426  003154  1060               	iorwf	_enter+1,w,c
 20427  003156  B4D8               	btfsc	status,2,c
 20428  003158  D007               	goto	i2l9657
 20429                           
 20430                           ;UI.c: 316: dispLogs(2);
 20431  00315A  0E00               	movlw	0
 20432  00315C  6E13               	movwf	dispLogs@myLog+1,c
 20433  00315E  0E02               	movlw	2
 20434  003160  6E12               	movwf	dispLogs@myLog,c
 20435  003162  EC1F  F02D         	call	_dispLogs	;wreg free
 20436                           
 20437                           ;UI.c: 317: }
 20438  003166  D09C               	goto	i2l268
 20439  003168                     i2l9657:
 20440                           
 20441                           ;UI.c: 318: else if(back){
 20442  003168  505B               	movf	_back,w,c
 20443  00316A  105C               	iorwf	_back+1,w,c
 20444  00316C  B4D8               	btfsc	status,2,c
 20445  00316E  D098               	goto	i2l268
 20446                           
 20447                           ;UI.c: 319: change_state_to_menu_23();
 20448  003170  ECBA  F02B         	call	_change_state_to_menu_23	;wreg free
 20449                           
 20450                           ;UI.c: 320: }
 20451                           ;UI.c: 321: break;
 20452  003174  D095               	goto	i2l268
 20453  003176                     i2l9661:
 20454                           
 20455                           ;UI.c: 324: if(up){
 20456  003176  5075               	movf	_up,w,c
 20457  003178  1076               	iorwf	_up+1,w,c
 20458  00317A  B4D8               	btfsc	status,2,c
 20459  00317C  D003               	goto	i2l9665
 20460                           
 20461                           ;UI.c: 325: change_state_to_logs_22();
 20462  00317E  EC1A  F02C         	call	_change_state_to_logs_22	;wreg free
 20463                           
 20464                           ;UI.c: 326: }
 20465  003182  D08E               	goto	i2l268
 20466  003184                     i2l9665:
 20467                           
 20468                           ;UI.c: 327: else if(down){
 20469  003184  505D               	movf	_down,w,c
 20470  003186  105E               	iorwf	_down+1,w,c
 20471  003188  B4D8               	btfsc	status,2,c
 20472  00318A  D003               	goto	i2l9669
 20473                           
 20474                           ;UI.c: 328: change_state_to_logs_34();
 20475  00318C  ECEA  F02B         	call	_change_state_to_logs_34	;wreg free
 20476                           
 20477                           ;UI.c: 329: }
 20478  003190  D087               	goto	i2l268
 20479  003192                     i2l9669:
 20480                           
 20481                           ;UI.c: 330: else if(enter){
 20482  003192  505F               	movf	_enter,w,c
 20483  003194  1060               	iorwf	_enter+1,w,c
 20484  003196  B4D8               	btfsc	status,2,c
 20485  003198  D007               	goto	i2l9673
 20486                           
 20487                           ;UI.c: 331: dispLogs(3);
 20488  00319A  0E00               	movlw	0
 20489  00319C  6E13               	movwf	dispLogs@myLog+1,c
 20490  00319E  0E03               	movlw	3
 20491  0031A0  6E12               	movwf	dispLogs@myLog,c
 20492  0031A2  EC1F  F02D         	call	_dispLogs	;wreg free
 20493                           
 20494                           ;UI.c: 332: }
 20495  0031A6  D07C               	goto	i2l268
 20496  0031A8                     i2l9673:
 20497                           
 20498                           ;UI.c: 333: else if(back){
 20499  0031A8  505B               	movf	_back,w,c
 20500  0031AA  105C               	iorwf	_back+1,w,c
 20501  0031AC  B4D8               	btfsc	status,2,c
 20502  0031AE  D078               	goto	i2l268
 20503                           
 20504                           ;UI.c: 334: change_state_to_menu_23();
 20505  0031B0  ECBA  F02B         	call	_change_state_to_menu_23	;wreg free
 20506                           
 20507                           ;UI.c: 335: }
 20508                           ;UI.c: 336: break;
 20509  0031B4  D075               	goto	i2l268
 20510  0031B6                     i2l9677:
 20511                           
 20512                           ;UI.c: 339: if(up){
 20513  0031B6  5075               	movf	_up,w,c
 20514  0031B8  1076               	iorwf	_up+1,w,c
 20515  0031BA  B4D8               	btfsc	status,2,c
 20516  0031BC  D003               	goto	i2l9681
 20517                           
 20518                           ;UI.c: 340: change_state_to_logs_22();
 20519  0031BE  EC1A  F02C         	call	_change_state_to_logs_22	;wreg free
 20520                           
 20521                           ;UI.c: 341: }
 20522  0031C2  D06E               	goto	i2l268
 20523  0031C4                     i2l9681:
 20524                           
 20525                           ;UI.c: 342: else if(down){
 20526  0031C4  505D               	movf	_down,w,c
 20527  0031C6  105E               	iorwf	_down+1,w,c
 20528  0031C8  B4D8               	btfsc	status,2,c
 20529  0031CA  D003               	goto	i2l9685
 20530                           
 20531                           ;UI.c: 343: change_state_to_logs_34();
 20532  0031CC  ECEA  F02B         	call	_change_state_to_logs_34	;wreg free
 20533                           
 20534                           ;UI.c: 344: }
 20535  0031D0  D067               	goto	i2l268
 20536  0031D2                     i2l9685:
 20537                           
 20538                           ;UI.c: 345: else if(enter){
 20539  0031D2  505F               	movf	_enter,w,c
 20540  0031D4  1060               	iorwf	_enter+1,w,c
 20541  0031D6  B4D8               	btfsc	status,2,c
 20542  0031D8  D007               	goto	i2l9689
 20543                           
 20544                           ;UI.c: 346: dispLogs(3);
 20545  0031DA  0E00               	movlw	0
 20546  0031DC  6E13               	movwf	dispLogs@myLog+1,c
 20547  0031DE  0E03               	movlw	3
 20548  0031E0  6E12               	movwf	dispLogs@myLog,c
 20549  0031E2  EC1F  F02D         	call	_dispLogs	;wreg free
 20550                           
 20551                           ;UI.c: 347: }
 20552  0031E6  D05C               	goto	i2l268
 20553  0031E8                     i2l9689:
 20554                           
 20555                           ;UI.c: 348: else if(back){
 20556  0031E8  505B               	movf	_back,w,c
 20557  0031EA  105C               	iorwf	_back+1,w,c
 20558  0031EC  B4D8               	btfsc	status,2,c
 20559  0031EE  D058               	goto	i2l268
 20560                           
 20561                           ;UI.c: 349: change_state_to_menu_23();
 20562  0031F0  ECBA  F02B         	call	_change_state_to_menu_23	;wreg free
 20563                           
 20564                           ;UI.c: 350: }
 20565                           ;UI.c: 351: break;
 20566  0031F4  D055               	goto	i2l268
 20567  0031F6                     i2l9693:
 20568                           
 20569                           ;UI.c: 354: if(up){
 20570  0031F6  5075               	movf	_up,w,c
 20571  0031F8  1076               	iorwf	_up+1,w,c
 20572  0031FA  B4D8               	btfsc	status,2,c
 20573  0031FC  D003               	goto	i2l9697
 20574                           
 20575                           ;UI.c: 355: change_state_to_logs_33();
 20576  0031FE  EC02  F02C         	call	_change_state_to_logs_33	;wreg free
 20577                           
 20578                           ;UI.c: 356: }
 20579  003202  D04E               	goto	i2l268
 20580  003204                     i2l9697:
 20581                           
 20582                           ;UI.c: 357: else if(down){
 20583  003204  505D               	movf	_down,w,c
 20584  003206  105E               	iorwf	_down+1,w,c
 20585  003208  B4D8               	btfsc	status,2,c
 20586  00320A  D003               	goto	i2l9701
 20587                           
 20588                           ;UI.c: 358: change_state_to_logs_11();
 20589  00320C  EC4A  F02C         	call	_change_state_to_logs_11	;wreg free
 20590                           
 20591                           ;UI.c: 359: }
 20592  003210  D047               	goto	i2l268
 20593  003212                     i2l9701:
 20594                           
 20595                           ;UI.c: 360: else if(enter){
 20596  003212  505F               	movf	_enter,w,c
 20597  003214  1060               	iorwf	_enter+1,w,c
 20598  003216  B4D8               	btfsc	status,2,c
 20599  003218  D007               	goto	i2l9705
 20600                           
 20601                           ;UI.c: 361: dispLogs(4);
 20602  00321A  0E00               	movlw	0
 20603  00321C  6E13               	movwf	dispLogs@myLog+1,c
 20604  00321E  0E04               	movlw	4
 20605  003220  6E12               	movwf	dispLogs@myLog,c
 20606  003222  EC1F  F02D         	call	_dispLogs	;wreg free
 20607                           
 20608                           ;UI.c: 362: }
 20609  003226  D03C               	goto	i2l268
 20610  003228                     i2l9705:
 20611                           
 20612                           ;UI.c: 363: else if(back){
 20613  003228  505B               	movf	_back,w,c
 20614  00322A  105C               	iorwf	_back+1,w,c
 20615  00322C  B4D8               	btfsc	status,2,c
 20616  00322E  D038               	goto	i2l268
 20617                           
 20618                           ;UI.c: 364: change_state_to_menu_23();
 20619  003230  ECBA  F02B         	call	_change_state_to_menu_23	;wreg free
 20620                           
 20621                           ;UI.c: 370: }
 20622                           
 20623                           ;UI.c: 369: break;
 20624                           
 20625                           ;UI.c: 368: default:
 20626                           
 20627                           ;UI.c: 365: }
 20628                           ;UI.c: 366: break;
 20629  003234  D035               	goto	i2l268
 20630  003236                     i2l9711:
 20631  003236  C0EE  F043         	movff	_cur_state,??_updateMenu
 20632  00323A  C0EF  F044         	movff	_cur_state+1,??_updateMenu+1
 20633                           
 20634                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 20635                           ; Switch size 1, requested type "space"
 20636                           ; Number of cases is 3, Range of values is 0 to 4
 20637                           ; switch strategies available:
 20638                           ; Name         Instructions Cycles
 20639                           ; simple_byte           10     6 (average)
 20640                           ;	Chosen strategy is simple_byte
 20641  00323E  5044               	movf	??_updateMenu+1,w,c
 20642  003240  0A00               	xorlw	0	; case 0
 20643  003242  B4D8               	btfsc	status,2,c
 20644  003244  D007               	goto	i2l10683
 20645  003246  0A03               	xorlw	3	; case 3
 20646  003248  B4D8               	btfsc	status,2,c
 20647  00324A  D015               	goto	i2l10685
 20648  00324C  0A07               	xorlw	7	; case 4
 20649  00324E  B4D8               	btfsc	status,2,c
 20650  003250  D020               	goto	i2l10687
 20651  003252  D026               	goto	i2l268
 20652  003254                     i2l10683:
 20653                           
 20654                           ; Switch size 1, requested type "space"
 20655                           ; Number of cases is 5, Range of values is 0 to 23
 20656                           ; switch strategies available:
 20657                           ; Name         Instructions Cycles
 20658                           ; simple_byte           16     9 (average)
 20659                           ;	Chosen strategy is simple_byte
 20660  003254  5043               	movf	??_updateMenu,w,c
 20661  003256  0A00               	xorlw	0	; case 0
 20662  003258  B4D8               	btfsc	status,2,c
 20663  00325A  D6DC               	goto	i2l9563
 20664  00325C  0A0B               	xorlw	11	; case 11
 20665  00325E  B4D8               	btfsc	status,2,c
 20666  003260  D6DC               	goto	i2l9565
 20667  003262  0A07               	xorlw	7	; case 12
 20668  003264  B4D8               	btfsc	status,2,c
 20669  003266  D6EE               	goto	i2l9577
 20670  003268  0A1A               	xorlw	26	; case 22
 20671  00326A  B4D8               	btfsc	status,2,c
 20672  00326C  D6F9               	goto	i2l9589
 20673  00326E  0A01               	xorlw	1	; case 23
 20674  003270  B4D8               	btfsc	status,2,c
 20675  003272  D70C               	goto	i2l9601
 20676  003274  D015               	goto	i2l268
 20677  003276                     i2l10685:
 20678                           
 20679                           ; Switch size 1, requested type "space"
 20680                           ; Number of cases is 4, Range of values is 243 to 255
 20681                           ; switch strategies available:
 20682                           ; Name         Instructions Cycles
 20683                           ; simple_byte           13     7 (average)
 20684                           ;	Chosen strategy is simple_byte
 20685  003276  5043               	movf	??_updateMenu,w,c
 20686  003278  0AF3               	xorlw	243	; case 243
 20687  00327A  B4D8               	btfsc	status,2,c
 20688  00327C  D71C               	goto	i2l9613
 20689  00327E  0A07               	xorlw	7	; case 244
 20690  003280  B4D8               	btfsc	status,2,c
 20691  003282  D739               	goto	i2l9629
 20692  003284  0A0A               	xorlw	10	; case 254
 20693  003286  B4D8               	btfsc	status,2,c
 20694  003288  D756               	goto	i2l9645
 20695  00328A  0A01               	xorlw	1	; case 255
 20696  00328C  B4D8               	btfsc	status,2,c
 20697  00328E  D773               	goto	i2l9661
 20698  003290  D007               	goto	i2l268
 20699  003292                     i2l10687:
 20700                           
 20701                           ; Switch size 1, requested type "space"
 20702                           ; Number of cases is 2, Range of values is 9 to 10
 20703                           ; switch strategies available:
 20704                           ; Name         Instructions Cycles
 20705                           ; simple_byte            7     4 (average)
 20706                           ;	Chosen strategy is simple_byte
 20707  003292  5043               	movf	??_updateMenu,w,c
 20708  003294  0A09               	xorlw	9	; case 9
 20709  003296  B4D8               	btfsc	status,2,c
 20710  003298  D78E               	goto	i2l9677
 20711  00329A  0A03               	xorlw	3	; case 10
 20712  00329C  B4D8               	btfsc	status,2,c
 20713  00329E  D7AB               	goto	i2l9693
 20714  0032A0                     i2l268:
 20715                           
 20716                           ;UI.c: 371: }
 20717                           ;UI.c: 372: (INTCONbits.GIE = 1);
 20718  0032A0  8EF2               	bsf	intcon,7,c	;volatile
 20719  0032A2  0012               	return		;funcret
 20720  0032A4                     __end_of_updateMenu:
 20721                           	opt stack 0
 20722                           pclatu	equ	0xFFB
 20723                           pclath	equ	0xFFA
 20724                           tblptru	equ	0xFF8
 20725                           tblptrh	equ	0xFF7
 20726                           tblptrl	equ	0xFF6
 20727                           tablat	equ	0xFF5
 20728                           prodh	equ	0xFF4
 20729                           prodl	equ	0xFF3
 20730                           intcon	equ	0xFF2
 20731                           intcon2	equ	0xFF1
 20732                           intcon3	equ	0xFF0
 20733                           indf0	equ	0xFEF
 20734                           postinc0	equ	0xFEE
 20735                           fsr0h	equ	0xFEA
 20736                           fsr0l	equ	0xFE9
 20737                           wreg	equ	0xFE8
 20738                           postdec1	equ	0xFE5
 20739                           fsr1h	equ	0xFE2
 20740                           fsr1l	equ	0xFE1
 20741                           indf2	equ	0xFDF
 20742                           postinc2	equ	0xFDE
 20743                           postdec2	equ	0xFDD
 20744                           fsr2h	equ	0xFDA
 20745                           fsr2l	equ	0xFD9
 20746                           status	equ	0xFD8
 20747                           
 20748 ;; *************** function i2_change_state_to_menu_start *****************
 20749 ;; Defined at:
 20750 ;;		line 477 in file "UI.c"
 20751 ;; Parameters:    Size  Location     Type
 20752 ;;		None
 20753 ;; Auto vars:     Size  Location     Type
 20754 ;;		None
 20755 ;; Return value:  Size  Location     Type
 20756 ;;                  1    wreg      void 
 20757 ;; Registers used:
 20758 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20759 ;; Tracked objects:
 20760 ;;		On entry : 0/0
 20761 ;;		On exit  : 0/0
 20762 ;;		Unchanged: 0/0
 20763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20767 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20768 ;;Total ram usage:        0 bytes
 20769 ;; Hardware stack levels used:    1
 20770 ;; Hardware stack levels required when called:    4
 20771 ;; This function calls:
 20772 ;;		i2_lcdInst
 20773 ;;		i2_printRTC
 20774 ;;		i2_printf
 20775 ;; This function is called by:
 20776 ;;		_updateMenu
 20777 ;;		_handler
 20778 ;; This function uses a non-reentrant model
 20779 ;;
 20780                           
 20781                           	psect	text68
 20782  0059CA                     __ptext68:
 20783                           	opt stack 0
 20784  0059CA                     i2_change_state_to_menu_start:
 20785                           	opt stack 19
 20786                           
 20787                           ;UI.c: 478: cur_state = 0;
 20788                           
 20789                           ;incstack = 0
 20790  0059CA  0E00               	movlw	0
 20791  0059CC  0100               	movlb	0	; () banked
 20792  0059CE  6FEF               	movwf	(_cur_state+1)& (0+255),b
 20793  0059D0  0E00               	movlw	0
 20794  0059D2  6FEE               	movwf	_cur_state& (0+255),b
 20795                           
 20796                           ; BSR set to: 0
 20797                           ;UI.c: 480: lcdInst(0b10000000);;
 20798  0059D4  0E80               	movlw	128
 20799  0059D6  ECC9  F02D         	call	i2_lcdInst
 20800                           
 20801                           ;UI.c: 481: printRTC();
 20802  0059DA  ECA4  F01A         	call	i2_printRTC	;wreg free
 20803                           
 20804                           ;UI.c: 482: lcdInst(0b11000000);;
 20805  0059DE  0EC0               	movlw	192
 20806  0059E0  ECC9  F02D         	call	i2_lcdInst
 20807                           
 20808                           ;UI.c: 483: printf("PUSH TO CONTINUE");
 20809  0059E4  0E0B               	movlw	low STR_30
 20810  0059E6  6E0D               	movwf	i2printf@f,c
 20811  0059E8  0EFE               	movlw	high STR_30
 20812  0059EA  6E0E               	movwf	i2printf@f+1,c
 20813  0059EC  ECCC  F011         	call	i2_printf	;wreg free
 20814  0059F0  0012               	return		;funcret
 20815  0059F2                     __end_ofi2_change_state_to_menu_start:
 20816                           	opt stack 0
 20817                           pclatu	equ	0xFFB
 20818                           pclath	equ	0xFFA
 20819                           tblptru	equ	0xFF8
 20820                           tblptrh	equ	0xFF7
 20821                           tblptrl	equ	0xFF6
 20822                           tablat	equ	0xFF5
 20823                           prodh	equ	0xFF4
 20824                           prodl	equ	0xFF3
 20825                           intcon	equ	0xFF2
 20826                           intcon2	equ	0xFF1
 20827                           intcon3	equ	0xFF0
 20828                           indf0	equ	0xFEF
 20829                           postinc0	equ	0xFEE
 20830                           fsr0h	equ	0xFEA
 20831                           fsr0l	equ	0xFE9
 20832                           wreg	equ	0xFE8
 20833                           postdec1	equ	0xFE5
 20834                           fsr1h	equ	0xFE2
 20835                           fsr1l	equ	0xFE1
 20836                           indf2	equ	0xFDF
 20837                           postinc2	equ	0xFDE
 20838                           postdec2	equ	0xFDD
 20839                           fsr2h	equ	0xFDA
 20840                           fsr2l	equ	0xFD9
 20841                           status	equ	0xFD8
 20842                           
 20843 ;; *************** function i2_printRTC *****************
 20844 ;; Defined at:
 20845 ;;		line 63 in file "RTC.c"
 20846 ;; Parameters:    Size  Location     Type
 20847 ;;		None
 20848 ;; Auto vars:     Size  Location     Type
 20849 ;;  printRTC       14   44[COMRAM] int [7]
 20850 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 20851 ;;  printRTC        2   64[COMRAM] int 
 20852 ;;  printRTC        2   58[COMRAM] int 
 20853 ;; Return value:  Size  Location     Type
 20854 ;;                  1    wreg      void 
 20855 ;; Registers used:
 20856 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20857 ;; Tracked objects:
 20858 ;;		On entry : 0/0
 20859 ;;		On exit  : 0/0
 20860 ;;		Unchanged: 0/0
 20861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20863 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20864 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20865 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20866 ;;Total ram usage:       25 bytes
 20867 ;; Hardware stack levels used:    1
 20868 ;; Hardware stack levels required when called:    3
 20869 ;; This function calls:
 20870 ;;		i2_getRTC
 20871 ;;		i2_lcdInst
 20872 ;;		i2_printf
 20873 ;;		i2_strcpy
 20874 ;; This function is called by:
 20875 ;;		i2_change_state_to_menu_start
 20876 ;; This function uses a non-reentrant model
 20877 ;;
 20878                           
 20879                           	psect	text69
 20880  003548                     __ptext69:
 20881                           	opt stack 0
 20882  003548                     i2_printRTC:
 20883                           	opt stack 19
 20884                           
 20885                           ;RTC.c: 64: getRTC();
 20886                           
 20887                           ;incstack = 0
 20888  003548  ECCA  F027         	call	i2_getRTC	;wreg free
 20889                           
 20890                           ;RTC.c: 65: char month[] = "MMM";
 20891  00354C  C14D  F03D         	movff	printRTC@F3236,i2printRTC@month
 20892  003550  C14E  F03E         	movff	printRTC@F3236+1,i2printRTC@month+1
 20893  003554  C14F  F03F         	movff	printRTC@F3236+2,i2printRTC@month+2
 20894  003558  C150  F040         	movff	printRTC@F3236+3,i2printRTC@month+3
 20895                           
 20896                           ;RTC.c: 66: int INT_time[7];
 20897                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 20898  00355C  0E00               	movlw	0
 20899  00355E  6E42               	movwf	i2printRTC@i+1,c
 20900  003560  0E00               	movlw	0
 20901  003562  6E41               	movwf	i2printRTC@i,c
 20902  003564  BE42               	btfsc	i2printRTC@i+1,7,c
 20903  003566  D006               	goto	i2l7533
 20904  003568  5042               	movf	i2printRTC@i+1,w,c
 20905  00356A  E135               	bnz	i2l627
 20906  00356C  0E07               	movlw	7
 20907  00356E  5C41               	subwf	i2printRTC@i,w,c
 20908  003570  B0D8               	btfsc	status,0,c
 20909  003572  D031               	goto	i2l627
 20910  003574                     i2l7533:
 20911                           
 20912                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 20913  003574  0E1C               	movlw	low _time
 20914  003576  2441               	addwf	i2printRTC@i,w,c
 20915  003578  6ED9               	movwf	fsr2l,c
 20916  00357A  0E01               	movlw	high _time
 20917  00357C  2042               	addwfc	i2printRTC@i+1,w,c
 20918  00357E  6EDA               	movwf	fsr2h,c
 20919  003580  50DF               	movf	indf2,w,c
 20920  003582  6E2A               	movwf	??i2_printRTC& (0+255),c
 20921  003584  3A2A               	swapf	??i2_printRTC,f,c
 20922  003586  0E0F               	movlw	15
 20923  003588  162A               	andwf	??i2_printRTC,f,c
 20924  00358A  0E0F               	movlw	15
 20925  00358C  162A               	andwf	??i2_printRTC,f,c
 20926  00358E  502A               	movf	??i2_printRTC,w,c
 20927  003590  0D0A               	mullw	10
 20928  003592  0E1C               	movlw	low _time
 20929  003594  2441               	addwf	i2printRTC@i,w,c
 20930  003596  6ED9               	movwf	fsr2l,c
 20931  003598  0E01               	movlw	high _time
 20932  00359A  2042               	addwfc	i2printRTC@i+1,w,c
 20933  00359C  6EDA               	movwf	fsr2h,c
 20934  00359E  50DF               	movf	indf2,w,c
 20935  0035A0  0B0F               	andlw	15
 20936  0035A2  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 20937  0035A4  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 20938  0035A6  50F3               	movf	prodl,w,c
 20939  0035A8  262B               	addwf	??i2_printRTC+1,f,c
 20940  0035AA  50F4               	movf	prodh,w,c
 20941  0035AC  222C               	addwfc	??i2_printRTC+2,f,c
 20942  0035AE  90D8               	bcf	status,0,c
 20943  0035B0  3441               	rlcf	i2printRTC@i,w,c
 20944  0035B2  6ED9               	movwf	fsr2l,c
 20945  0035B4  3442               	rlcf	i2printRTC@i+1,w,c
 20946  0035B6  6EDA               	movwf	fsr2h,c
 20947  0035B8  0E2D               	movlw	low i2printRTC@INT_time
 20948  0035BA  26D9               	addwf	fsr2l,f,c
 20949  0035BC  0E00               	movlw	high i2printRTC@INT_time
 20950  0035BE  22DA               	addwfc	fsr2h,f,c
 20951  0035C0  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 20952  0035C4  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 20953  0035C8  4A41               	infsnz	i2printRTC@i,f,c
 20954  0035CA  2A42               	incf	i2printRTC@i+1,f,c
 20955  0035CC  BE42               	btfsc	i2printRTC@i+1,7,c
 20956  0035CE  D7D2               	goto	i2l7533
 20957  0035D0  5042               	movf	i2printRTC@i+1,w,c
 20958  0035D2  E101               	bnz	i2u621_40
 20959  0035D4  D7CB               	goto	L18
 20960  0035D6                     i2u621_40:
 20961  0035D6                     i2l627:
 20962                           
 20963                           ;RTC.c: 69: }
 20964                           ;RTC.c: 70: int RTC_month = INT_time[5];
 20965  0035D6  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 20966  0035DA  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 20967                           
 20968                           ;RTC.c: 72: switch(RTC_month){
 20969  0035DE  D084               	goto	i2l7565
 20970  0035E0                     i2l7539:
 20971                           
 20972                           ;RTC.c: 74: strcpy(month, "JAN");
 20973  0035E0  0E3D               	movlw	low i2printRTC@month
 20974  0035E2  6E01               	movwf	i2strcpy@to,c
 20975  0035E4  0E00               	movlw	high i2printRTC@month
 20976  0035E6  6E02               	movwf	i2strcpy@to+1,c
 20977  0035E8  0EDB               	movlw	low STR_8
 20978  0035EA  6E03               	movwf	i2strcpy@from,c
 20979  0035EC  0EFF               	movlw	high STR_8
 20980  0035EE  6E04               	movwf	i2strcpy@from+1,c
 20981  0035F0  EC59  F02B         	call	i2_strcpy	;wreg free
 20982                           
 20983                           ;RTC.c: 75: break;
 20984  0035F4  D0A6               	goto	i2l7567
 20985  0035F6                     i2l7541:
 20986                           
 20987                           ;RTC.c: 77: strcpy(month, "FEB");
 20988  0035F6  0E3D               	movlw	low i2printRTC@month
 20989  0035F8  6E01               	movwf	i2strcpy@to,c
 20990  0035FA  0E00               	movlw	high i2printRTC@month
 20991  0035FC  6E02               	movwf	i2strcpy@to+1,c
 20992  0035FE  0ECB               	movlw	low STR_9
 20993  003600  6E03               	movwf	i2strcpy@from,c
 20994  003602  0EFF               	movlw	high STR_9
 20995  003604  6E04               	movwf	i2strcpy@from+1,c
 20996  003606  EC59  F02B         	call	i2_strcpy	;wreg free
 20997                           
 20998                           ;RTC.c: 78: break;
 20999  00360A  D09B               	goto	i2l7567
 21000  00360C                     i2l7543:
 21001                           
 21002                           ;RTC.c: 80: strcpy(month, "MAR");
 21003  00360C  0E3D               	movlw	low i2printRTC@month
 21004  00360E  6E01               	movwf	i2strcpy@to,c
 21005  003610  0E00               	movlw	high i2printRTC@month
 21006  003612  6E02               	movwf	i2strcpy@to+1,c
 21007  003614  0EE7               	movlw	low STR_10
 21008  003616  6E03               	movwf	i2strcpy@from,c
 21009  003618  0EFF               	movlw	high STR_10
 21010  00361A  6E04               	movwf	i2strcpy@from+1,c
 21011  00361C  EC59  F02B         	call	i2_strcpy	;wreg free
 21012                           
 21013                           ;RTC.c: 81: break;
 21014  003620  D090               	goto	i2l7567
 21015  003622                     i2l7545:
 21016                           
 21017                           ;RTC.c: 83: strcpy(month, "APR");
 21018  003622  0E3D               	movlw	low i2printRTC@month
 21019  003624  6E01               	movwf	i2strcpy@to,c
 21020  003626  0E00               	movlw	high i2printRTC@month
 21021  003628  6E02               	movwf	i2strcpy@to+1,c
 21022  00362A  0EEB               	movlw	low STR_11
 21023  00362C  6E03               	movwf	i2strcpy@from,c
 21024  00362E  0EFF               	movlw	high STR_11
 21025  003630  6E04               	movwf	i2strcpy@from+1,c
 21026  003632  EC59  F02B         	call	i2_strcpy	;wreg free
 21027                           
 21028                           ;RTC.c: 84: break;
 21029  003636  D085               	goto	i2l7567
 21030  003638                     i2l7547:
 21031                           
 21032                           ;RTC.c: 86: strcpy(month, "MAY");
 21033  003638  0E3D               	movlw	low i2printRTC@month
 21034  00363A  6E01               	movwf	i2strcpy@to,c
 21035  00363C  0E00               	movlw	high i2printRTC@month
 21036  00363E  6E02               	movwf	i2strcpy@to+1,c
 21037  003640  0EFB               	movlw	low STR_12
 21038  003642  6E03               	movwf	i2strcpy@from,c
 21039  003644  0EFF               	movlw	high STR_12
 21040  003646  6E04               	movwf	i2strcpy@from+1,c
 21041  003648  EC59  F02B         	call	i2_strcpy	;wreg free
 21042                           
 21043                           ;RTC.c: 87: break;
 21044  00364C  D07A               	goto	i2l7567
 21045  00364E                     i2l7549:
 21046                           
 21047                           ;RTC.c: 89: strcpy(month, "JUN");
 21048  00364E  0E3D               	movlw	low i2printRTC@month
 21049  003650  6E01               	movwf	i2strcpy@to,c
 21050  003652  0E00               	movlw	high i2printRTC@month
 21051  003654  6E02               	movwf	i2strcpy@to+1,c
 21052  003656  0EDF               	movlw	low STR_13
 21053  003658  6E03               	movwf	i2strcpy@from,c
 21054  00365A  0EFF               	movlw	high STR_13
 21055  00365C  6E04               	movwf	i2strcpy@from+1,c
 21056  00365E  EC59  F02B         	call	i2_strcpy	;wreg free
 21057                           
 21058                           ;RTC.c: 90: break;
 21059  003662  D06F               	goto	i2l7567
 21060  003664                     i2l7551:
 21061                           
 21062                           ;RTC.c: 92: strcpy(month, "JUL");
 21063  003664  0E3D               	movlw	low i2printRTC@month
 21064  003666  6E01               	movwf	i2strcpy@to,c
 21065  003668  0E00               	movlw	high i2printRTC@month
 21066  00366A  6E02               	movwf	i2strcpy@to+1,c
 21067  00366C  0ED7               	movlw	low STR_14
 21068  00366E  6E03               	movwf	i2strcpy@from,c
 21069  003670  0EFF               	movlw	high STR_14
 21070  003672  6E04               	movwf	i2strcpy@from+1,c
 21071  003674  EC59  F02B         	call	i2_strcpy	;wreg free
 21072                           
 21073                           ;RTC.c: 93: break;
 21074  003678  D064               	goto	i2l7567
 21075  00367A                     i2l7553:
 21076                           
 21077                           ;RTC.c: 95: strcpy(month, "AUG");
 21078  00367A  0E3D               	movlw	low i2printRTC@month
 21079  00367C  6E01               	movwf	i2strcpy@to,c
 21080  00367E  0E00               	movlw	high i2printRTC@month
 21081  003680  6E02               	movwf	i2strcpy@to+1,c
 21082  003682  0ED3               	movlw	low STR_15
 21083  003684  6E03               	movwf	i2strcpy@from,c
 21084  003686  0EFF               	movlw	high STR_15
 21085  003688  6E04               	movwf	i2strcpy@from+1,c
 21086  00368A  EC59  F02B         	call	i2_strcpy	;wreg free
 21087                           
 21088                           ;RTC.c: 96: break;
 21089  00368E  D059               	goto	i2l7567
 21090  003690                     i2l7555:
 21091                           
 21092                           ;RTC.c: 98: strcpy(month, "SEP");
 21093  003690  0E3D               	movlw	low i2printRTC@month
 21094  003692  6E01               	movwf	i2strcpy@to,c
 21095  003694  0E00               	movlw	high i2printRTC@month
 21096  003696  6E02               	movwf	i2strcpy@to+1,c
 21097  003698  0EE3               	movlw	low STR_16
 21098  00369A  6E03               	movwf	i2strcpy@from,c
 21099  00369C  0EFF               	movlw	high STR_16
 21100  00369E  6E04               	movwf	i2strcpy@from+1,c
 21101  0036A0  EC59  F02B         	call	i2_strcpy	;wreg free
 21102                           
 21103                           ;RTC.c: 99: break;
 21104  0036A4  D04E               	goto	i2l7567
 21105  0036A6                     i2l7557:
 21106                           
 21107                           ;RTC.c: 101: strcpy(month, "OCT");
 21108  0036A6  0E3D               	movlw	low i2printRTC@month
 21109  0036A8  6E01               	movwf	i2strcpy@to,c
 21110  0036AA  0E00               	movlw	high i2printRTC@month
 21111  0036AC  6E02               	movwf	i2strcpy@to+1,c
 21112  0036AE  0EF3               	movlw	low STR_17
 21113  0036B0  6E03               	movwf	i2strcpy@from,c
 21114  0036B2  0EFF               	movlw	high STR_17
 21115  0036B4  6E04               	movwf	i2strcpy@from+1,c
 21116  0036B6  EC59  F02B         	call	i2_strcpy	;wreg free
 21117                           
 21118                           ;RTC.c: 102: break;
 21119  0036BA  D043               	goto	i2l7567
 21120  0036BC                     i2l7559:
 21121                           
 21122                           ;RTC.c: 104: strcpy(month, "NOV");
 21123  0036BC  0E3D               	movlw	low i2printRTC@month
 21124  0036BE  6E01               	movwf	i2strcpy@to,c
 21125  0036C0  0E00               	movlw	high i2printRTC@month
 21126  0036C2  6E02               	movwf	i2strcpy@to+1,c
 21127  0036C4  0EF7               	movlw	low STR_18
 21128  0036C6  6E03               	movwf	i2strcpy@from,c
 21129  0036C8  0EFF               	movlw	high STR_18
 21130  0036CA  6E04               	movwf	i2strcpy@from+1,c
 21131  0036CC  EC59  F02B         	call	i2_strcpy	;wreg free
 21132                           
 21133                           ;RTC.c: 105: break;
 21134  0036D0  D038               	goto	i2l7567
 21135  0036D2                     i2l7561:
 21136                           
 21137                           ;RTC.c: 107: strcpy(month, "DEC");
 21138  0036D2  0E3D               	movlw	low i2printRTC@month
 21139  0036D4  6E01               	movwf	i2strcpy@to,c
 21140  0036D6  0E00               	movlw	high i2printRTC@month
 21141  0036D8  6E02               	movwf	i2strcpy@to+1,c
 21142  0036DA  0ECF               	movlw	low STR_19
 21143  0036DC  6E03               	movwf	i2strcpy@from,c
 21144  0036DE  0EFF               	movlw	high STR_19
 21145  0036E0  6E04               	movwf	i2strcpy@from+1,c
 21146  0036E2  EC59  F02B         	call	i2_strcpy	;wreg free
 21147                           
 21148                           ;RTC.c: 109: }
 21149                           
 21150                           ;RTC.c: 108: break;
 21151  0036E6  D02D               	goto	i2l7567
 21152  0036E8                     i2l7565:
 21153  0036E8  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 21154  0036EC  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 21155                           
 21156                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 21157                           ; Switch size 1, requested type "space"
 21158                           ; Number of cases is 1, Range of values is 0 to 0
 21159                           ; switch strategies available:
 21160                           ; Name         Instructions Cycles
 21161                           ; simple_byte            4     3 (average)
 21162                           ;	Chosen strategy is simple_byte
 21163  0036F0  502B               	movf	??i2_printRTC+1,w,c
 21164  0036F2  0A00               	xorlw	0	; case 0
 21165  0036F4  A4D8               	btfss	status,2,c
 21166  0036F6  D025               	goto	i2l7567
 21167                           
 21168                           ; Switch size 1, requested type "space"
 21169                           ; Number of cases is 12, Range of values is 1 to 12
 21170                           ; switch strategies available:
 21171                           ; Name         Instructions Cycles
 21172                           ; simple_byte           37    19 (average)
 21173                           ;	Chosen strategy is simple_byte
 21174  0036F8  502A               	movf	??i2_printRTC,w,c
 21175  0036FA  0A01               	xorlw	1	; case 1
 21176  0036FC  B4D8               	btfsc	status,2,c
 21177  0036FE  D770               	goto	i2l7539
 21178  003700  0A03               	xorlw	3	; case 2
 21179  003702  B4D8               	btfsc	status,2,c
 21180  003704  D778               	goto	i2l7541
 21181  003706  0A01               	xorlw	1	; case 3
 21182  003708  B4D8               	btfsc	status,2,c
 21183  00370A  D780               	goto	i2l7543
 21184  00370C  0A07               	xorlw	7	; case 4
 21185  00370E  B4D8               	btfsc	status,2,c
 21186  003710  D788               	goto	i2l7545
 21187  003712  0A01               	xorlw	1	; case 5
 21188  003714  B4D8               	btfsc	status,2,c
 21189  003716  D790               	goto	i2l7547
 21190  003718  0A03               	xorlw	3	; case 6
 21191  00371A  B4D8               	btfsc	status,2,c
 21192  00371C  D798               	goto	i2l7549
 21193  00371E  0A01               	xorlw	1	; case 7
 21194  003720  B4D8               	btfsc	status,2,c
 21195  003722  D7A0               	goto	i2l7551
 21196  003724  0A0F               	xorlw	15	; case 8
 21197  003726  B4D8               	btfsc	status,2,c
 21198  003728  D7A8               	goto	i2l7553
 21199  00372A  0A01               	xorlw	1	; case 9
 21200  00372C  B4D8               	btfsc	status,2,c
 21201  00372E  D7B0               	goto	i2l7555
 21202  003730  0A03               	xorlw	3	; case 10
 21203  003732  B4D8               	btfsc	status,2,c
 21204  003734  D7B8               	goto	i2l7557
 21205  003736  0A01               	xorlw	1	; case 11
 21206  003738  B4D8               	btfsc	status,2,c
 21207  00373A  D7C0               	goto	i2l7559
 21208  00373C  0A07               	xorlw	7	; case 12
 21209  00373E  B4D8               	btfsc	status,2,c
 21210  003740  D7C8               	goto	i2l7561
 21211  003742                     i2l7567:
 21212                           
 21213                           ;RTC.c: 110: lcdInst(0b10000000);;
 21214  003742  0E80               	movlw	128
 21215  003744  ECC9  F02D         	call	i2_lcdInst
 21216                           
 21217                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 21218  003748  0EB8               	movlw	low STR_21
 21219  00374A  6E0D               	movwf	i2printf@f,c
 21220  00374C  0EFA               	movlw	high STR_21
 21221  00374E  6E0E               	movwf	i2printf@f+1,c
 21222  003750  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 21223  003754  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 21224  003758  0E3D               	movlw	low i2printRTC@month
 21225  00375A  6E11               	movwf	?i2_printf+4,c
 21226  00375C  0E00               	movlw	high i2printRTC@month
 21227  00375E  6E12               	movwf	?i2_printf+5,c
 21228  003760  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 21229  003764  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 21230  003768  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 21231  00376C  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 21232  003770  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 21233  003774  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 21234  003778  ECCC  F011         	call	i2_printf	;wreg free
 21235  00377C  0012               	return		;funcret
 21236  00377E                     __end_ofi2_printRTC:
 21237                           	opt stack 0
 21238                           pclatu	equ	0xFFB
 21239                           pclath	equ	0xFFA
 21240                           tblptru	equ	0xFF8
 21241                           tblptrh	equ	0xFF7
 21242                           tblptrl	equ	0xFF6
 21243                           tablat	equ	0xFF5
 21244                           prodh	equ	0xFF4
 21245                           prodl	equ	0xFF3
 21246                           intcon	equ	0xFF2
 21247                           intcon2	equ	0xFF1
 21248                           intcon3	equ	0xFF0
 21249                           indf0	equ	0xFEF
 21250                           postinc0	equ	0xFEE
 21251                           fsr0h	equ	0xFEA
 21252                           fsr0l	equ	0xFE9
 21253                           wreg	equ	0xFE8
 21254                           postdec1	equ	0xFE5
 21255                           fsr1h	equ	0xFE2
 21256                           fsr1l	equ	0xFE1
 21257                           indf2	equ	0xFDF
 21258                           postinc2	equ	0xFDE
 21259                           postdec2	equ	0xFDD
 21260                           fsr2h	equ	0xFDA
 21261                           fsr2l	equ	0xFD9
 21262                           status	equ	0xFD8
 21263                           
 21264 ;; *************** function i2_strcpy *****************
 21265 ;; Defined at:
 21266 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 21267 ;; Parameters:    Size  Location     Type
 21268 ;;  to              2    0[COMRAM] PTR unsigned char 
 21269 ;;		 -> printRTC@month(4), UI@month(4), 
 21270 ;;  from            2    2[COMRAM] PTR const unsigned char 
 21271 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 21272 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 21273 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 21274 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 21275 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 21276 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 21277 ;;		 -> STR_8(4), 
 21278 ;; Auto vars:     Size  Location     Type
 21279 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 21280 ;;		 -> printRTC@month(4), UI@month(4), 
 21281 ;; Return value:  Size  Location     Type
 21282 ;;                  2    0[COMRAM] PTR unsigned char 
 21283 ;; Registers used:
 21284 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 21285 ;; Tracked objects:
 21286 ;;		On entry : 0/0
 21287 ;;		On exit  : 0/0
 21288 ;;		Unchanged: 0/0
 21289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21290 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21291 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21293 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21294 ;;Total ram usage:        6 bytes
 21295 ;; Hardware stack levels used:    1
 21296 ;; This function calls:
 21297 ;;		Nothing
 21298 ;; This function is called by:
 21299 ;;		i2_printRTC
 21300 ;; This function uses a non-reentrant model
 21301 ;;
 21302                           
 21303                           	psect	text70
 21304  0056B2                     __ptext70:
 21305                           	opt stack 0
 21306  0056B2                     i2_strcpy:
 21307                           	opt stack 21
 21308                           
 21309                           ;incstack = 0
 21310  0056B2  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 21311  0056B6  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 21312  0056BA  D004               	goto	i2l7091
 21313  0056BC                     i2l7089:
 21314  0056BC  4A05               	infsnz	i2strcpy@cp,f,c
 21315  0056BE  2A06               	incf	i2strcpy@cp+1,f,c
 21316  0056C0  4A03               	infsnz	i2strcpy@from,f,c
 21317  0056C2  2A04               	incf	i2strcpy@from+1,f,c
 21318  0056C4                     i2l7091:
 21319  0056C4  C003  FFF6         	movff	i2strcpy@from,tblptrl
 21320  0056C8  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 21321  0056CC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21322  0056CC  6AF8               	clrf	tblptru,c
 21323  0056CE                     	endif
 21324  0056CE                     	if	0	;tblptru may be non-zero
 21325  0056CE                     	endif
 21326  0056CE  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 21327  0056D2  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 21328  0056D6  0008               	tblrd		*
 21329  0056D8  CFF5 FFDF          	movff	tablat,indf2
 21330  0056DC  50DF               	movf	indf2,w,c
 21331  0056DE  B4D8               	btfsc	status,2,c
 21332  0056E0  0012               	return	
 21333  0056E2  D7EC               	goto	i2l7089
 21334  0056E4                     __end_ofi2_strcpy:
 21335                           	opt stack 0
 21336                           pclatu	equ	0xFFB
 21337                           pclath	equ	0xFFA
 21338                           tblptru	equ	0xFF8
 21339                           tblptrh	equ	0xFF7
 21340                           tblptrl	equ	0xFF6
 21341                           tablat	equ	0xFF5
 21342                           prodh	equ	0xFF4
 21343                           prodl	equ	0xFF3
 21344                           intcon	equ	0xFF2
 21345                           intcon2	equ	0xFF1
 21346                           intcon3	equ	0xFF0
 21347                           indf0	equ	0xFEF
 21348                           postinc0	equ	0xFEE
 21349                           fsr0h	equ	0xFEA
 21350                           fsr0l	equ	0xFE9
 21351                           wreg	equ	0xFE8
 21352                           postdec1	equ	0xFE5
 21353                           fsr1h	equ	0xFE2
 21354                           fsr1l	equ	0xFE1
 21355                           indf2	equ	0xFDF
 21356                           postinc2	equ	0xFDE
 21357                           postdec2	equ	0xFDD
 21358                           fsr2h	equ	0xFDA
 21359                           fsr2l	equ	0xFD9
 21360                           status	equ	0xFD8
 21361                           
 21362 ;; *************** function _inputHandler *****************
 21363 ;; Defined at:
 21364 ;;		line 375 in file "UI.c"
 21365 ;; Parameters:    Size  Location     Type
 21366 ;;		None
 21367 ;; Auto vars:     Size  Location     Type
 21368 ;;		None
 21369 ;; Return value:  Size  Location     Type
 21370 ;;                  2   41[COMRAM] int 
 21371 ;; Registers used:
 21372 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21373 ;; Tracked objects:
 21374 ;;		On entry : 0/0
 21375 ;;		On exit  : 0/0
 21376 ;;		Unchanged: 0/0
 21377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21378 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21380 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21381 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21382 ;;Total ram usage:        4 bytes
 21383 ;; Hardware stack levels used:    1
 21384 ;; Hardware stack levels required when called:    4
 21385 ;; This function calls:
 21386 ;;		_change_state_to_logs_11
 21387 ;;		_change_state_to_logs_12
 21388 ;;		_change_state_to_logs_22
 21389 ;;		_change_state_to_logs_23
 21390 ;;		_change_state_to_logs_33
 21391 ;;		_change_state_to_logs_34
 21392 ;;		_change_state_to_menu_11
 21393 ;;		_change_state_to_menu_23
 21394 ;;		i2_change_state_to_menu_12
 21395 ;;		i2_change_state_to_menu_22
 21396 ;; This function is called by:
 21397 ;;		_updateMenu
 21398 ;; This function uses a non-reentrant model
 21399 ;;
 21400                           
 21401                           	psect	text71
 21402  003970                     __ptext71:
 21403                           	opt stack 0
 21404  003970                     _inputHandler:
 21405                           	opt stack 18
 21406                           
 21407                           ;UI.c: 380: if(firstboot){
 21408                           
 21409                           ;incstack = 0
 21410  003970  0101               	movlb	1	; () banked
 21411  003972  513D               	movf	_firstboot& (0+255),w,b
 21412  003974  0101               	movlb	1	; () banked
 21413  003976  113E               	iorwf	(_firstboot+1)& (0+255),w,b
 21414  003978  B4D8               	btfsc	status,2,c
 21415  00397A  D00C               	goto	i2l7635
 21416                           
 21417                           ; BSR set to: 1
 21418                           ;UI.c: 381: change_state_to_menu_11();
 21419  00397C  ECD2  F02B         	call	_change_state_to_menu_11	;wreg free
 21420                           
 21421                           ;UI.c: 382: firstboot = 0;
 21422  003980  0E00               	movlw	0
 21423  003982  0101               	movlb	1	; () banked
 21424  003984  6F3E               	movwf	(_firstboot+1)& (0+255),b
 21425  003986  0E00               	movlw	0
 21426  003988  6F3D               	movwf	_firstboot& (0+255),b
 21427                           
 21428                           ; BSR set to: 1
 21429                           ;UI.c: 383: return 0;
 21430  00398A  0E00               	movlw	0
 21431  00398C  6E2B               	movwf	?_inputHandler+1,c
 21432  00398E  0E00               	movlw	0
 21433  003990  6E2A               	movwf	?_inputHandler,c
 21434                           
 21435                           ; BSR set to: 1
 21436  003992  0012               	return	
 21437  003994                     i2l7635:
 21438                           
 21439                           ; BSR set to: 1
 21440                           ;UI.c: 384: }
 21441                           ;UI.c: 385: if (logstate){
 21442  003994  0100               	movlb	0	; () banked
 21443  003996  51F8               	movf	_logstate& (0+255),w,b
 21444  003998  0100               	movlb	0	; () banked
 21445  00399A  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 21446  00399C  B4D8               	btfsc	status,2,c
 21447  00399E  D0C7               	goto	i2l7753
 21448                           
 21449                           ; BSR set to: 0
 21450                           ;UI.c: 386: if(input == 'C' && PORTBbits.RB1 == 1){
 21451  0039A0  0E43               	movlw	67
 21452  0039A2  187D               	xorwf	_input,w,c	;volatile
 21453  0039A4  A4D8               	btfss	status,2,c
 21454  0039A6  D012               	goto	i2l7653
 21455                           
 21456                           ; BSR set to: 0
 21457  0039A8  B281               	btfsc	3969,1,c	;volatile
 21458  0039AA  D009               	goto	i2l7645
 21459  0039AC  D00F               	goto	i2l7653
 21460  0039AE                     i2l7643:
 21461                           
 21462                           ;UI.c: 389: _delay((unsigned long)((10)*(32000000/4000.0)));
 21463  0039AE  0E68               	movlw	104
 21464  0039B0  6E2C               	movwf	??_inputHandler& (0+255),c
 21465  0039B2  0EE4               	movlw	228
 21466  0039B4                     i2u1129_47:
 21467  0039B4  2EE8               	decfsz	wreg,f,c
 21468  0039B6  D7FE               	bra	i2u1129_47
 21469  0039B8  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 21470  0039BA  D7FC               	bra	i2u1129_47
 21471  0039BC  D000               	nop2	
 21472  0039BE                     i2l7645:
 21473  0039BE  B281               	btfsc	3969,1,c	;volatile
 21474  0039C0  D7F6               	goto	i2l7643
 21475  0039C2                     i2l7647:
 21476                           
 21477                           ;UI.c: 390: }
 21478                           ;UI.c: 391: return 0;
 21479  0039C2  0E00               	movlw	0
 21480  0039C4  6E2B               	movwf	?_inputHandler+1,c
 21481  0039C6  0E00               	movlw	0
 21482  0039C8  6E2A               	movwf	?_inputHandler,c
 21483  0039CA  0012               	return	
 21484  0039CC                     i2l7653:
 21485                           
 21486                           ;UI.c: 393: else if (input == 'D'){
 21487  0039CC  0E44               	movlw	68
 21488  0039CE  187D               	xorwf	_input,w,c	;volatile
 21489  0039D0  A4D8               	btfss	status,2,c
 21490  0039D2  D7F7               	goto	i2l7647
 21491                           
 21492                           ;UI.c: 395: logstate = 0;
 21493  0039D4  0E00               	movlw	0
 21494  0039D6  0100               	movlb	0	; () banked
 21495  0039D8  6FF9               	movwf	(_logstate+1)& (0+255),b
 21496  0039DA  0E00               	movlw	0
 21497  0039DC  6FF8               	movwf	_logstate& (0+255),b
 21498                           
 21499                           ;UI.c: 396: switch(cur_state){
 21500  0039DE  D012               	goto	i2l7671
 21501  0039E0                     i2l7657:
 21502                           
 21503                           ;UI.c: 398: change_state_to_logs_11();
 21504  0039E0  EC4A  F02C         	call	_change_state_to_logs_11	;wreg free
 21505                           
 21506                           ;UI.c: 399: break;
 21507  0039E4  D7EE               	goto	i2l7647
 21508  0039E6                     i2l7659:
 21509                           
 21510                           ;UI.c: 401: change_state_to_logs_12();
 21511  0039E6  EC32  F02C         	call	_change_state_to_logs_12	;wreg free
 21512                           
 21513                           ;UI.c: 402: break;
 21514  0039EA  D7EB               	goto	i2l7647
 21515  0039EC                     i2l7661:
 21516                           
 21517                           ;UI.c: 404: change_state_to_logs_22();
 21518  0039EC  EC1A  F02C         	call	_change_state_to_logs_22	;wreg free
 21519                           
 21520                           ;UI.c: 405: break;
 21521  0039F0  D7E8               	goto	i2l7647
 21522  0039F2                     i2l7663:
 21523                           
 21524                           ;UI.c: 407: change_state_to_logs_23();
 21525  0039F2  EC79  F02C         	call	_change_state_to_logs_23	;wreg free
 21526                           
 21527                           ;UI.c: 408: break;
 21528  0039F6  D7E5               	goto	i2l7647
 21529  0039F8                     i2l7665:
 21530                           
 21531                           ;UI.c: 410: change_state_to_logs_33();
 21532  0039F8  EC02  F02C         	call	_change_state_to_logs_33	;wreg free
 21533                           
 21534                           ;UI.c: 411: break;
 21535  0039FC  D7E2               	goto	i2l7647
 21536  0039FE                     i2l7667:
 21537                           
 21538                           ;UI.c: 413: change_state_to_logs_34();
 21539  0039FE  ECEA  F02B         	call	_change_state_to_logs_34	;wreg free
 21540                           
 21541                           ;UI.c: 415: }
 21542                           
 21543                           ;UI.c: 414: break;
 21544  003A02  D7DF               	goto	i2l7647
 21545  003A04                     i2l7671:
 21546  003A04  C0EE  F02C         	movff	_cur_state,??_inputHandler
 21547  003A08  C0EF  F02D         	movff	_cur_state+1,??_inputHandler+1
 21548                           
 21549                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 21550                           ; Switch size 1, requested type "space"
 21551                           ; Number of cases is 2, Range of values is 3 to 4
 21552                           ; switch strategies available:
 21553                           ; Name         Instructions Cycles
 21554                           ; simple_byte            7     4 (average)
 21555                           ;	Chosen strategy is simple_byte
 21556  003A0C  502D               	movf	??_inputHandler+1,w,c
 21557  003A0E  0A03               	xorlw	3	; case 3
 21558  003A10  B4D8               	btfsc	status,2,c
 21559  003A12  D004               	goto	i2l10691
 21560  003A14  0A07               	xorlw	7	; case 4
 21561  003A16  B4D8               	btfsc	status,2,c
 21562  003A18  D00F               	goto	i2l10693
 21563  003A1A  D7D3               	goto	i2l7647
 21564  003A1C                     i2l10691:
 21565                           
 21566                           ; Switch size 1, requested type "space"
 21567                           ; Number of cases is 4, Range of values is 243 to 255
 21568                           ; switch strategies available:
 21569                           ; Name         Instructions Cycles
 21570                           ; simple_byte           13     7 (average)
 21571                           ;	Chosen strategy is simple_byte
 21572  003A1C  502C               	movf	??_inputHandler,w,c
 21573  003A1E  0AF3               	xorlw	243	; case 243
 21574  003A20  B4D8               	btfsc	status,2,c
 21575  003A22  D7DE               	goto	i2l7657
 21576  003A24  0A07               	xorlw	7	; case 244
 21577  003A26  B4D8               	btfsc	status,2,c
 21578  003A28  D7DE               	goto	i2l7659
 21579  003A2A  0A0A               	xorlw	10	; case 254
 21580  003A2C  B4D8               	btfsc	status,2,c
 21581  003A2E  D7DE               	goto	i2l7661
 21582  003A30  0A01               	xorlw	1	; case 255
 21583  003A32  B4D8               	btfsc	status,2,c
 21584  003A34  D7DE               	goto	i2l7663
 21585  003A36  D7C5               	goto	i2l7647
 21586  003A38                     i2l10693:
 21587                           
 21588                           ; Switch size 1, requested type "space"
 21589                           ; Number of cases is 2, Range of values is 9 to 10
 21590                           ; switch strategies available:
 21591                           ; Name         Instructions Cycles
 21592                           ; simple_byte            7     4 (average)
 21593                           ;	Chosen strategy is simple_byte
 21594  003A38  502C               	movf	??_inputHandler,w,c
 21595  003A3A  0A09               	xorlw	9	; case 9
 21596  003A3C  B4D8               	btfsc	status,2,c
 21597  003A3E  D7DC               	goto	i2l7665
 21598  003A40  0A03               	xorlw	3	; case 10
 21599  003A42  B4D8               	btfsc	status,2,c
 21600  003A44  D7DC               	goto	i2l7667
 21601  003A46  D7BD               	goto	i2l7647
 21602  003A48                     i2l7683:
 21603                           
 21604                           ;UI.c: 425: if(cur_state == 11){
 21605  003A48  0E0B               	movlw	11
 21606  003A4A  0100               	movlb	0	; () banked
 21607  003A4C  19EE               	xorwf	_cur_state& (0+255),w,b
 21608  003A4E  0100               	movlb	0	; () banked
 21609  003A50  11EF               	iorwf	(_cur_state+1)& (0+255),w,b
 21610  003A52  A4D8               	btfss	status,2,c
 21611  003A54  D005               	goto	i2l7691
 21612                           
 21613                           ; BSR set to: 0
 21614                           ;UI.c: 426: return 0;
 21615  003A56  0E00               	movlw	0
 21616  003A58  6E2B               	movwf	?_inputHandler+1,c
 21617  003A5A  0E00               	movlw	0
 21618  003A5C  6E2A               	movwf	?_inputHandler,c
 21619                           
 21620                           ; BSR set to: 0
 21621  003A5E  0012               	return	
 21622  003A60                     i2l7691:
 21623                           
 21624                           ; BSR set to: 0
 21625                           ;UI.c: 428: else{
 21626                           ;UI.c: 429: change_state_to_menu_11();
 21627  003A60  ECD2  F02B         	call	_change_state_to_menu_11	;wreg free
 21628                           
 21629                           ;UI.c: 430: }
 21630                           ;UI.c: 431: return 0;
 21631  003A64  0E00               	movlw	0
 21632  003A66  6E2B               	movwf	?_inputHandler+1,c
 21633  003A68  0E00               	movlw	0
 21634  003A6A  6E2A               	movwf	?_inputHandler,c
 21635  003A6C  0012               	return	
 21636  003A6E                     i2l7697:
 21637                           
 21638                           ;UI.c: 433: if(cur_state == 22 || cur_state == 12){
 21639  003A6E  0E16               	movlw	22
 21640  003A70  0100               	movlb	0	; () banked
 21641  003A72  19EE               	xorwf	_cur_state& (0+255),w,b
 21642  003A74  0100               	movlb	0	; () banked
 21643  003A76  11EF               	iorwf	(_cur_state+1)& (0+255),w,b
 21644  003A78  B4D8               	btfsc	status,2,c
 21645  003A7A  D007               	goto	i2l7701
 21646                           
 21647                           ; BSR set to: 0
 21648  003A7C  0E0C               	movlw	12
 21649  003A7E  0100               	movlb	0	; () banked
 21650  003A80  19EE               	xorwf	_cur_state& (0+255),w,b
 21651  003A82  0100               	movlb	0	; () banked
 21652  003A84  11EF               	iorwf	(_cur_state+1)& (0+255),w,b
 21653  003A86  A4D8               	btfss	status,2,c
 21654  003A88  D005               	goto	i2l7707
 21655  003A8A                     i2l7701:
 21656                           
 21657                           ; BSR set to: 0
 21658                           ;UI.c: 434: return 0;
 21659  003A8A  0E00               	movlw	0
 21660  003A8C  6E2B               	movwf	?_inputHandler+1,c
 21661  003A8E  0E00               	movlw	0
 21662  003A90  6E2A               	movwf	?_inputHandler,c
 21663                           
 21664                           ; BSR set to: 0
 21665  003A92  0012               	return	
 21666  003A94                     i2l7707:
 21667                           
 21668                           ; BSR set to: 0
 21669                           ;UI.c: 436: else if(cur_state == 23){
 21670  003A94  0E17               	movlw	23
 21671  003A96  0100               	movlb	0	; () banked
 21672  003A98  19EE               	xorwf	_cur_state& (0+255),w,b
 21673  003A9A  0100               	movlb	0	; () banked
 21674  003A9C  11EF               	iorwf	(_cur_state+1)& (0+255),w,b
 21675  003A9E  A4D8               	btfss	status,2,c
 21676  003AA0  D003               	goto	i2l7711
 21677                           
 21678                           ; BSR set to: 0
 21679                           ;UI.c: 437: change_state_to_menu_22();
 21680  003AA2  EC8A  F02B         	call	i2_change_state_to_menu_22	;wreg free
 21681                           
 21682                           ;UI.c: 438: }
 21683  003AA6  D002               	goto	i2l7713
 21684  003AA8                     i2l7711:
 21685                           
 21686                           ;UI.c: 439: else{
 21687                           ;UI.c: 440: change_state_to_menu_12();
 21688  003AA8  ECA2  F02B         	call	i2_change_state_to_menu_12	;wreg free
 21689  003AAC                     i2l7713:
 21690                           
 21691                           ;UI.c: 441: }
 21692                           ;UI.c: 442: return 0;
 21693  003AAC  0E00               	movlw	0
 21694  003AAE  6E2B               	movwf	?_inputHandler+1,c
 21695  003AB0  0E00               	movlw	0
 21696  003AB2  6E2A               	movwf	?_inputHandler,c
 21697  003AB4  0012               	return	
 21698  003AB6                     i2l7717:
 21699                           
 21700                           ;UI.c: 444: if(cur_state == 23){
 21701  003AB6  0E17               	movlw	23
 21702  003AB8  0100               	movlb	0	; () banked
 21703  003ABA  19EE               	xorwf	_cur_state& (0+255),w,b
 21704  003ABC  0100               	movlb	0	; () banked
 21705  003ABE  11EF               	iorwf	(_cur_state+1)& (0+255),w,b
 21706  003AC0  A4D8               	btfss	status,2,c
 21707  003AC2  D005               	goto	i2l7725
 21708                           
 21709                           ; BSR set to: 0
 21710                           ;UI.c: 445: return 0;
 21711  003AC4  0E00               	movlw	0
 21712  003AC6  6E2B               	movwf	?_inputHandler+1,c
 21713  003AC8  0E00               	movlw	0
 21714  003ACA  6E2A               	movwf	?_inputHandler,c
 21715                           
 21716                           ; BSR set to: 0
 21717  003ACC  0012               	return	
 21718  003ACE                     i2l7725:
 21719                           
 21720                           ; BSR set to: 0
 21721                           ;UI.c: 447: else{
 21722                           ;UI.c: 448: change_state_to_menu_23();
 21723  003ACE  ECBA  F02B         	call	_change_state_to_menu_23	;wreg free
 21724                           
 21725                           ;UI.c: 449: }
 21726                           ;UI.c: 450: return 0;
 21727  003AD2  0E00               	movlw	0
 21728  003AD4  6E2B               	movwf	?_inputHandler+1,c
 21729  003AD6  0E00               	movlw	0
 21730  003AD8  6E2A               	movwf	?_inputHandler,c
 21731  003ADA  0012               	return	
 21732  003ADC                     i2l7731:
 21733                           
 21734                           ;UI.c: 453: up = 1;
 21735  003ADC  0E00               	movlw	0
 21736  003ADE  6E76               	movwf	_up+1,c
 21737  003AE0  0E01               	movlw	1
 21738  003AE2  6E75               	movwf	_up,c
 21739                           
 21740                           ;UI.c: 454: return 1;
 21741  003AE4  0E00               	movlw	0
 21742  003AE6  6E2B               	movwf	?_inputHandler+1,c
 21743  003AE8  0E01               	movlw	1
 21744  003AEA  6E2A               	movwf	?_inputHandler,c
 21745  003AEC  0012               	return	
 21746  003AEE                     i2l7735:
 21747                           
 21748                           ;UI.c: 456: down = 1;
 21749  003AEE  0E00               	movlw	0
 21750  003AF0  6E5E               	movwf	_down+1,c
 21751  003AF2  0E01               	movlw	1
 21752  003AF4  6E5D               	movwf	_down,c
 21753                           
 21754                           ;UI.c: 457: return 1;
 21755  003AF6  0E00               	movlw	0
 21756  003AF8  6E2B               	movwf	?_inputHandler+1,c
 21757  003AFA  0E01               	movlw	1
 21758  003AFC  6E2A               	movwf	?_inputHandler,c
 21759  003AFE  0012               	return	
 21760  003B00                     i2l7739:
 21761                           
 21762                           ;UI.c: 459: enter = 1;
 21763  003B00  0E00               	movlw	0
 21764  003B02  6E60               	movwf	_enter+1,c
 21765  003B04  0E01               	movlw	1
 21766  003B06  6E5F               	movwf	_enter,c
 21767                           
 21768                           ;UI.c: 460: return 1;
 21769  003B08  0E00               	movlw	0
 21770  003B0A  6E2B               	movwf	?_inputHandler+1,c
 21771  003B0C  0E01               	movlw	1
 21772  003B0E  6E2A               	movwf	?_inputHandler,c
 21773  003B10  0012               	return	
 21774  003B12                     i2l7743:
 21775                           
 21776                           ;UI.c: 462: back = 1;
 21777  003B12  0E00               	movlw	0
 21778  003B14  6E5C               	movwf	_back+1,c
 21779  003B16  0E01               	movlw	1
 21780  003B18  6E5B               	movwf	_back,c
 21781                           
 21782                           ;UI.c: 463: return 1;
 21783  003B1A  0E00               	movlw	0
 21784  003B1C  6E2B               	movwf	?_inputHandler+1,c
 21785  003B1E  0E01               	movlw	1
 21786  003B20  6E2A               	movwf	?_inputHandler,c
 21787  003B22  0012               	return	
 21788  003B24                     i2l7747:
 21789                           
 21790                           ;UI.c: 466: return 1;
 21791  003B24  0E00               	movlw	0
 21792  003B26  6E2B               	movwf	?_inputHandler+1,c
 21793  003B28  0E01               	movlw	1
 21794  003B2A  6E2A               	movwf	?_inputHandler,c
 21795                           
 21796                           ;UI.c: 467: }
 21797  003B2C  0012               	return	
 21798  003B2E                     i2l7753:
 21799  003B2E  507D               	movf	_input,w,c	;volatile
 21800                           
 21801                           ; Switch size 1, requested type "space"
 21802                           ; Number of cases is 7, Range of values is 49 to 68
 21803                           ; switch strategies available:
 21804                           ; Name         Instructions Cycles
 21805                           ; simple_byte           22    12 (average)
 21806                           ;	Chosen strategy is simple_byte
 21807  003B30  0A31               	xorlw	49	; case 49
 21808  003B32  B4D8               	btfsc	status,2,c
 21809  003B34  D789               	goto	i2l7683
 21810  003B36  0A03               	xorlw	3	; case 50
 21811  003B38  B4D8               	btfsc	status,2,c
 21812  003B3A  D799               	goto	i2l7697
 21813  003B3C  0A01               	xorlw	1	; case 51
 21814  003B3E  B4D8               	btfsc	status,2,c
 21815  003B40  D7BA               	goto	i2l7717
 21816  003B42  0A72               	xorlw	114	; case 65
 21817  003B44  B4D8               	btfsc	status,2,c
 21818  003B46  D7CA               	goto	i2l7731
 21819  003B48  0A03               	xorlw	3	; case 66
 21820  003B4A  B4D8               	btfsc	status,2,c
 21821  003B4C  D7D0               	goto	i2l7735
 21822  003B4E  0A01               	xorlw	1	; case 67
 21823  003B50  B4D8               	btfsc	status,2,c
 21824  003B52  D7D6               	goto	i2l7739
 21825  003B54  0A07               	xorlw	7	; case 68
 21826  003B56  B4D8               	btfsc	status,2,c
 21827  003B58  D7DC               	goto	i2l7743
 21828  003B5A  D7E4               	goto	i2l7747
 21829  003B5C                     __end_of_inputHandler:
 21830                           	opt stack 0
 21831                           pclatu	equ	0xFFB
 21832                           pclath	equ	0xFFA
 21833                           tblptru	equ	0xFF8
 21834                           tblptrh	equ	0xFF7
 21835                           tblptrl	equ	0xFF6
 21836                           tablat	equ	0xFF5
 21837                           prodh	equ	0xFF4
 21838                           prodl	equ	0xFF3
 21839                           intcon	equ	0xFF2
 21840                           intcon2	equ	0xFF1
 21841                           intcon3	equ	0xFF0
 21842                           indf0	equ	0xFEF
 21843                           postinc0	equ	0xFEE
 21844                           fsr0h	equ	0xFEA
 21845                           fsr0l	equ	0xFE9
 21846                           wreg	equ	0xFE8
 21847                           postdec1	equ	0xFE5
 21848                           fsr1h	equ	0xFE2
 21849                           fsr1l	equ	0xFE1
 21850                           indf2	equ	0xFDF
 21851                           postinc2	equ	0xFDE
 21852                           postdec2	equ	0xFDD
 21853                           fsr2h	equ	0xFDA
 21854                           fsr2l	equ	0xFD9
 21855                           status	equ	0xFD8
 21856                           
 21857 ;; *************** function i2_change_state_to_menu_22 *****************
 21858 ;; Defined at:
 21859 ;;		line 501 in file "UI.c"
 21860 ;; Parameters:    Size  Location     Type
 21861 ;;		None
 21862 ;; Auto vars:     Size  Location     Type
 21863 ;;		None
 21864 ;; Return value:  Size  Location     Type
 21865 ;;                  1    wreg      void 
 21866 ;; Registers used:
 21867 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21868 ;; Tracked objects:
 21869 ;;		On entry : 0/0
 21870 ;;		On exit  : 0/0
 21871 ;;		Unchanged: 0/0
 21872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21876 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21877 ;;Total ram usage:        0 bytes
 21878 ;; Hardware stack levels used:    1
 21879 ;; Hardware stack levels required when called:    3
 21880 ;; This function calls:
 21881 ;;		i2_lcdInst
 21882 ;;		i2_printf
 21883 ;; This function is called by:
 21884 ;;		_updateMenu
 21885 ;;		_inputHandler
 21886 ;; This function uses a non-reentrant model
 21887 ;;
 21888                           
 21889                           	psect	text72
 21890  005714                     __ptext72:
 21891                           	opt stack 0
 21892  005714                     i2_change_state_to_menu_22:
 21893                           	opt stack 19
 21894                           
 21895                           ;UI.c: 502: cur_state = 22;
 21896                           
 21897                           ;incstack = 0
 21898  005714  0E00               	movlw	0
 21899  005716  0100               	movlb	0	; () banked
 21900  005718  6FEF               	movwf	(_cur_state+1)& (0+255),b
 21901  00571A  0E16               	movlw	22
 21902  00571C  6FEE               	movwf	_cur_state& (0+255),b
 21903                           
 21904                           ; BSR set to: 0
 21905                           ;UI.c: 504: lcdInst(0b10000000);;
 21906  00571E  0E80               	movlw	128
 21907  005720  ECC9  F02D         	call	i2_lcdInst
 21908                           
 21909                           ;UI.c: 505: printf("2. SORT        <");
 21910  005724  0ED8               	movlw	low STR_34
 21911  005726  6E0D               	movwf	i2printf@f,c
 21912  005728  0EFD               	movlw	high STR_34
 21913  00572A  6E0E               	movwf	i2printf@f+1,c
 21914  00572C  ECCC  F011         	call	i2_printf	;wreg free
 21915                           
 21916                           ;UI.c: 506: lcdInst(0b11000000);;
 21917  005730  0EC0               	movlw	192
 21918  005732  ECC9  F02D         	call	i2_lcdInst
 21919                           
 21920                           ;UI.c: 507: printf("3. LOGS         ");
 21921  005736  0E1D               	movlw	low STR_36
 21922  005738  6E0D               	movwf	i2printf@f,c
 21923  00573A  0EFD               	movlw	high STR_36
 21924  00573C  6E0E               	movwf	i2printf@f+1,c
 21925  00573E  ECCC  F011         	call	i2_printf	;wreg free
 21926  005742  0012               	return		;funcret
 21927  005744                     __end_ofi2_change_state_to_menu_22:
 21928                           	opt stack 0
 21929                           pclatu	equ	0xFFB
 21930                           pclath	equ	0xFFA
 21931                           tblptru	equ	0xFF8
 21932                           tblptrh	equ	0xFF7
 21933                           tblptrl	equ	0xFF6
 21934                           tablat	equ	0xFF5
 21935                           prodh	equ	0xFF4
 21936                           prodl	equ	0xFF3
 21937                           intcon	equ	0xFF2
 21938                           intcon2	equ	0xFF1
 21939                           intcon3	equ	0xFF0
 21940                           indf0	equ	0xFEF
 21941                           postinc0	equ	0xFEE
 21942                           fsr0h	equ	0xFEA
 21943                           fsr0l	equ	0xFE9
 21944                           wreg	equ	0xFE8
 21945                           postdec1	equ	0xFE5
 21946                           fsr1h	equ	0xFE2
 21947                           fsr1l	equ	0xFE1
 21948                           indf2	equ	0xFDF
 21949                           postinc2	equ	0xFDE
 21950                           postdec2	equ	0xFDD
 21951                           fsr2h	equ	0xFDA
 21952                           fsr2l	equ	0xFD9
 21953                           status	equ	0xFD8
 21954                           
 21955 ;; *************** function i2_change_state_to_menu_12 *****************
 21956 ;; Defined at:
 21957 ;;		line 493 in file "UI.c"
 21958 ;; Parameters:    Size  Location     Type
 21959 ;;		None
 21960 ;; Auto vars:     Size  Location     Type
 21961 ;;		None
 21962 ;; Return value:  Size  Location     Type
 21963 ;;                  1    wreg      void 
 21964 ;; Registers used:
 21965 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21966 ;; Tracked objects:
 21967 ;;		On entry : 0/0
 21968 ;;		On exit  : 0/0
 21969 ;;		Unchanged: 0/0
 21970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21972 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21974 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21975 ;;Total ram usage:        0 bytes
 21976 ;; Hardware stack levels used:    1
 21977 ;; Hardware stack levels required when called:    3
 21978 ;; This function calls:
 21979 ;;		i2_lcdInst
 21980 ;;		i2_printf
 21981 ;; This function is called by:
 21982 ;;		_updateMenu
 21983 ;;		_inputHandler
 21984 ;; This function uses a non-reentrant model
 21985 ;;
 21986                           
 21987                           	psect	text73
 21988  005744                     __ptext73:
 21989                           	opt stack 0
 21990  005744                     i2_change_state_to_menu_12:
 21991                           	opt stack 19
 21992                           
 21993                           ;UI.c: 494: cur_state = 12;
 21994                           
 21995                           ;incstack = 0
 21996  005744  0E00               	movlw	0
 21997  005746  0100               	movlb	0	; () banked
 21998  005748  6FEF               	movwf	(_cur_state+1)& (0+255),b
 21999  00574A  0E0C               	movlw	12
 22000  00574C  6FEE               	movwf	_cur_state& (0+255),b
 22001                           
 22002                           ; BSR set to: 0
 22003                           ;UI.c: 496: lcdInst(0b10000000);;
 22004  00574E  0E80               	movlw	128
 22005  005750  ECC9  F02D         	call	i2_lcdInst
 22006                           
 22007                           ;UI.c: 497: printf("1. DATE/TIME    ");
 22008  005754  0E3F               	movlw	low STR_33
 22009  005756  6E0D               	movwf	i2printf@f,c
 22010  005758  0EFD               	movlw	high STR_33
 22011  00575A  6E0E               	movwf	i2printf@f+1,c
 22012  00575C  ECCC  F011         	call	i2_printf	;wreg free
 22013                           
 22014                           ;UI.c: 498: lcdInst(0b11000000);;
 22015  005760  0EC0               	movlw	192
 22016  005762  ECC9  F02D         	call	i2_lcdInst
 22017                           
 22018                           ;UI.c: 499: printf("2. SORT        <");
 22019  005766  0ED8               	movlw	low STR_34
 22020  005768  6E0D               	movwf	i2printf@f,c
 22021  00576A  0EFD               	movlw	high STR_34
 22022  00576C  6E0E               	movwf	i2printf@f+1,c
 22023  00576E  ECCC  F011         	call	i2_printf	;wreg free
 22024  005772  0012               	return		;funcret
 22025  005774                     __end_ofi2_change_state_to_menu_12:
 22026                           	opt stack 0
 22027                           pclatu	equ	0xFFB
 22028                           pclath	equ	0xFFA
 22029                           tblptru	equ	0xFF8
 22030                           tblptrh	equ	0xFF7
 22031                           tblptrl	equ	0xFF6
 22032                           tablat	equ	0xFF5
 22033                           prodh	equ	0xFF4
 22034                           prodl	equ	0xFF3
 22035                           intcon	equ	0xFF2
 22036                           intcon2	equ	0xFF1
 22037                           intcon3	equ	0xFF0
 22038                           indf0	equ	0xFEF
 22039                           postinc0	equ	0xFEE
 22040                           fsr0h	equ	0xFEA
 22041                           fsr0l	equ	0xFE9
 22042                           wreg	equ	0xFE8
 22043                           postdec1	equ	0xFE5
 22044                           fsr1h	equ	0xFE2
 22045                           fsr1l	equ	0xFE1
 22046                           indf2	equ	0xFDF
 22047                           postinc2	equ	0xFDE
 22048                           postdec2	equ	0xFDD
 22049                           fsr2h	equ	0xFDA
 22050                           fsr2l	equ	0xFD9
 22051                           status	equ	0xFD8
 22052                           
 22053 ;; *************** function _change_state_to_menu_23 *****************
 22054 ;; Defined at:
 22055 ;;		line 509 in file "UI.c"
 22056 ;; Parameters:    Size  Location     Type
 22057 ;;		None
 22058 ;; Auto vars:     Size  Location     Type
 22059 ;;		None
 22060 ;; Return value:  Size  Location     Type
 22061 ;;                  1    wreg      void 
 22062 ;; Registers used:
 22063 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22064 ;; Tracked objects:
 22065 ;;		On entry : 0/0
 22066 ;;		On exit  : 0/0
 22067 ;;		Unchanged: 0/0
 22068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22072 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22073 ;;Total ram usage:        0 bytes
 22074 ;; Hardware stack levels used:    1
 22075 ;; Hardware stack levels required when called:    3
 22076 ;; This function calls:
 22077 ;;		i2_lcdInst
 22078 ;;		i2_printf
 22079 ;; This function is called by:
 22080 ;;		_updateMenu
 22081 ;;		_inputHandler
 22082 ;; This function uses a non-reentrant model
 22083 ;;
 22084                           
 22085                           	psect	text74
 22086  005774                     __ptext74:
 22087                           	opt stack 0
 22088  005774                     _change_state_to_menu_23:
 22089                           	opt stack 18
 22090                           
 22091                           ;UI.c: 510: cur_state = 23;
 22092                           
 22093                           ;incstack = 0
 22094  005774  0E00               	movlw	0
 22095  005776  0100               	movlb	0	; () banked
 22096  005778  6FEF               	movwf	(_cur_state+1)& (0+255),b
 22097  00577A  0E17               	movlw	23
 22098  00577C  6FEE               	movwf	_cur_state& (0+255),b
 22099                           
 22100                           ; BSR set to: 0
 22101                           ;UI.c: 512: lcdInst(0b10000000);;
 22102  00577E  0E80               	movlw	128
 22103  005780  ECC9  F02D         	call	i2_lcdInst
 22104                           
 22105                           ;UI.c: 513: printf("2. SORT         ");
 22106  005784  0E2E               	movlw	low STR_32
 22107  005786  6E0D               	movwf	i2printf@f,c
 22108  005788  0EFD               	movlw	high STR_32
 22109  00578A  6E0E               	movwf	i2printf@f+1,c
 22110  00578C  ECCC  F011         	call	i2_printf	;wreg free
 22111                           
 22112                           ;UI.c: 514: lcdInst(0b11000000);;
 22113  005790  0EC0               	movlw	192
 22114  005792  ECC9  F02D         	call	i2_lcdInst
 22115                           
 22116                           ;UI.c: 515: printf("3. LOGS        <");
 22117  005796  0EC7               	movlw	low STR_38
 22118  005798  6E0D               	movwf	i2printf@f,c
 22119  00579A  0EFD               	movlw	high STR_38
 22120  00579C  6E0E               	movwf	i2printf@f+1,c
 22121  00579E  ECCC  F011         	call	i2_printf	;wreg free
 22122  0057A2  0012               	return		;funcret
 22123  0057A4                     __end_of_change_state_to_menu_23:
 22124                           	opt stack 0
 22125                           pclatu	equ	0xFFB
 22126                           pclath	equ	0xFFA
 22127                           tblptru	equ	0xFF8
 22128                           tblptrh	equ	0xFF7
 22129                           tblptrl	equ	0xFF6
 22130                           tablat	equ	0xFF5
 22131                           prodh	equ	0xFF4
 22132                           prodl	equ	0xFF3
 22133                           intcon	equ	0xFF2
 22134                           intcon2	equ	0xFF1
 22135                           intcon3	equ	0xFF0
 22136                           indf0	equ	0xFEF
 22137                           postinc0	equ	0xFEE
 22138                           fsr0h	equ	0xFEA
 22139                           fsr0l	equ	0xFE9
 22140                           wreg	equ	0xFE8
 22141                           postdec1	equ	0xFE5
 22142                           fsr1h	equ	0xFE2
 22143                           fsr1l	equ	0xFE1
 22144                           indf2	equ	0xFDF
 22145                           postinc2	equ	0xFDE
 22146                           postdec2	equ	0xFDD
 22147                           fsr2h	equ	0xFDA
 22148                           fsr2l	equ	0xFD9
 22149                           status	equ	0xFD8
 22150                           
 22151 ;; *************** function _change_state_to_menu_11 *****************
 22152 ;; Defined at:
 22153 ;;		line 485 in file "UI.c"
 22154 ;; Parameters:    Size  Location     Type
 22155 ;;		None
 22156 ;; Auto vars:     Size  Location     Type
 22157 ;;		None
 22158 ;; Return value:  Size  Location     Type
 22159 ;;                  1    wreg      void 
 22160 ;; Registers used:
 22161 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22162 ;; Tracked objects:
 22163 ;;		On entry : 0/0
 22164 ;;		On exit  : 0/0
 22165 ;;		Unchanged: 0/0
 22166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22170 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22171 ;;Total ram usage:        0 bytes
 22172 ;; Hardware stack levels used:    1
 22173 ;; Hardware stack levels required when called:    3
 22174 ;; This function calls:
 22175 ;;		i2_lcdInst
 22176 ;;		i2_printf
 22177 ;; This function is called by:
 22178 ;;		_updateMenu
 22179 ;;		_inputHandler
 22180 ;; This function uses a non-reentrant model
 22181 ;;
 22182                           
 22183                           	psect	text75
 22184  0057A4                     __ptext75:
 22185                           	opt stack 0
 22186  0057A4                     _change_state_to_menu_11:
 22187                           	opt stack 18
 22188                           
 22189                           ;UI.c: 486: cur_state = 11;
 22190                           
 22191                           ;incstack = 0
 22192  0057A4  0E00               	movlw	0
 22193  0057A6  0100               	movlb	0	; () banked
 22194  0057A8  6FEF               	movwf	(_cur_state+1)& (0+255),b
 22195  0057AA  0E0B               	movlw	11
 22196  0057AC  6FEE               	movwf	_cur_state& (0+255),b
 22197                           
 22198                           ; BSR set to: 0
 22199                           ;UI.c: 488: lcdInst(0b10000000);;
 22200  0057AE  0E80               	movlw	128
 22201  0057B0  ECC9  F02D         	call	i2_lcdInst
 22202                           
 22203                           ;UI.c: 489: printf("1. DATE/TIME   <");
 22204  0057B4  0EE9               	movlw	low STR_31
 22205  0057B6  6E0D               	movwf	i2printf@f,c
 22206  0057B8  0EFD               	movlw	high STR_31
 22207  0057BA  6E0E               	movwf	i2printf@f+1,c
 22208  0057BC  ECCC  F011         	call	i2_printf	;wreg free
 22209                           
 22210                           ;UI.c: 490: lcdInst(0b11000000);;
 22211  0057C0  0EC0               	movlw	192
 22212  0057C2  ECC9  F02D         	call	i2_lcdInst
 22213                           
 22214                           ;UI.c: 491: printf("2. SORT         ");
 22215  0057C6  0E2E               	movlw	low STR_32
 22216  0057C8  6E0D               	movwf	i2printf@f,c
 22217  0057CA  0EFD               	movlw	high STR_32
 22218  0057CC  6E0E               	movwf	i2printf@f+1,c
 22219  0057CE  ECCC  F011         	call	i2_printf	;wreg free
 22220  0057D2  0012               	return		;funcret
 22221  0057D4                     __end_of_change_state_to_menu_11:
 22222                           	opt stack 0
 22223                           pclatu	equ	0xFFB
 22224                           pclath	equ	0xFFA
 22225                           tblptru	equ	0xFF8
 22226                           tblptrh	equ	0xFF7
 22227                           tblptrl	equ	0xFF6
 22228                           tablat	equ	0xFF5
 22229                           prodh	equ	0xFF4
 22230                           prodl	equ	0xFF3
 22231                           intcon	equ	0xFF2
 22232                           intcon2	equ	0xFF1
 22233                           intcon3	equ	0xFF0
 22234                           indf0	equ	0xFEF
 22235                           postinc0	equ	0xFEE
 22236                           fsr0h	equ	0xFEA
 22237                           fsr0l	equ	0xFE9
 22238                           wreg	equ	0xFE8
 22239                           postdec1	equ	0xFE5
 22240                           fsr1h	equ	0xFE2
 22241                           fsr1l	equ	0xFE1
 22242                           indf2	equ	0xFDF
 22243                           postinc2	equ	0xFDE
 22244                           postdec2	equ	0xFDD
 22245                           fsr2h	equ	0xFDA
 22246                           fsr2l	equ	0xFD9
 22247                           status	equ	0xFD8
 22248                           
 22249 ;; *************** function _change_state_to_logs_34 *****************
 22250 ;; Defined at:
 22251 ;;		line 552 in file "UI.c"
 22252 ;; Parameters:    Size  Location     Type
 22253 ;;		None
 22254 ;; Auto vars:     Size  Location     Type
 22255 ;;		None
 22256 ;; Return value:  Size  Location     Type
 22257 ;;                  1    wreg      void 
 22258 ;; Registers used:
 22259 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22260 ;; Tracked objects:
 22261 ;;		On entry : 0/0
 22262 ;;		On exit  : 0/0
 22263 ;;		Unchanged: 0/0
 22264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22268 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22269 ;;Total ram usage:        0 bytes
 22270 ;; Hardware stack levels used:    1
 22271 ;; Hardware stack levels required when called:    3
 22272 ;; This function calls:
 22273 ;;		i2_lcdInst
 22274 ;;		i2_printf
 22275 ;; This function is called by:
 22276 ;;		_updateMenu
 22277 ;;		_inputHandler
 22278 ;; This function uses a non-reentrant model
 22279 ;;
 22280                           
 22281                           	psect	text76
 22282  0057D4                     __ptext76:
 22283                           	opt stack 0
 22284  0057D4                     _change_state_to_logs_34:
 22285                           	opt stack 18
 22286                           
 22287                           ;UI.c: 553: cur_state = 1034;
 22288                           
 22289                           ;incstack = 0
 22290  0057D4  0E04               	movlw	4
 22291  0057D6  0100               	movlb	0	; () banked
 22292  0057D8  6FEF               	movwf	(_cur_state+1)& (0+255),b
 22293  0057DA  0E0A               	movlw	10
 22294  0057DC  6FEE               	movwf	_cur_state& (0+255),b
 22295                           
 22296                           ; BSR set to: 0
 22297                           ;UI.c: 554: lcdInst(0b10000000);;
 22298  0057DE  0E80               	movlw	128
 22299  0057E0  ECC9  F02D         	call	i2_lcdInst
 22300                           
 22301                           ;UI.c: 555: printf("LOG 3           ");
 22302  0057E4  0EFB               	movlw	low STR_44
 22303  0057E6  6E0D               	movwf	i2printf@f,c
 22304  0057E8  0EFC               	movlw	high STR_44
 22305  0057EA  6E0E               	movwf	i2printf@f+1,c
 22306  0057EC  ECCC  F011         	call	i2_printf	;wreg free
 22307                           
 22308                           ;UI.c: 556: lcdInst(0b11000000);;
 22309  0057F0  0EC0               	movlw	192
 22310  0057F2  ECC9  F02D         	call	i2_lcdInst
 22311                           
 22312                           ;UI.c: 557: printf("LOG 4          <");
 22313  0057F6  0EB6               	movlw	low STR_50
 22314  0057F8  6E0D               	movwf	i2printf@f,c
 22315  0057FA  0EFD               	movlw	high STR_50
 22316  0057FC  6E0E               	movwf	i2printf@f+1,c
 22317  0057FE  ECCC  F011         	call	i2_printf	;wreg free
 22318  005802  0012               	return		;funcret
 22319  005804                     __end_of_change_state_to_logs_34:
 22320                           	opt stack 0
 22321                           pclatu	equ	0xFFB
 22322                           pclath	equ	0xFFA
 22323                           tblptru	equ	0xFF8
 22324                           tblptrh	equ	0xFF7
 22325                           tblptrl	equ	0xFF6
 22326                           tablat	equ	0xFF5
 22327                           prodh	equ	0xFF4
 22328                           prodl	equ	0xFF3
 22329                           intcon	equ	0xFF2
 22330                           intcon2	equ	0xFF1
 22331                           intcon3	equ	0xFF0
 22332                           indf0	equ	0xFEF
 22333                           postinc0	equ	0xFEE
 22334                           fsr0h	equ	0xFEA
 22335                           fsr0l	equ	0xFE9
 22336                           wreg	equ	0xFE8
 22337                           postdec1	equ	0xFE5
 22338                           fsr1h	equ	0xFE2
 22339                           fsr1l	equ	0xFE1
 22340                           indf2	equ	0xFDF
 22341                           postinc2	equ	0xFDE
 22342                           postdec2	equ	0xFDD
 22343                           fsr2h	equ	0xFDA
 22344                           fsr2l	equ	0xFD9
 22345                           status	equ	0xFD8
 22346                           
 22347 ;; *************** function _change_state_to_logs_33 *****************
 22348 ;; Defined at:
 22349 ;;		line 545 in file "UI.c"
 22350 ;; Parameters:    Size  Location     Type
 22351 ;;		None
 22352 ;; Auto vars:     Size  Location     Type
 22353 ;;		None
 22354 ;; Return value:  Size  Location     Type
 22355 ;;                  1    wreg      void 
 22356 ;; Registers used:
 22357 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22358 ;; Tracked objects:
 22359 ;;		On entry : 0/0
 22360 ;;		On exit  : 0/0
 22361 ;;		Unchanged: 0/0
 22362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22364 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22366 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22367 ;;Total ram usage:        0 bytes
 22368 ;; Hardware stack levels used:    1
 22369 ;; Hardware stack levels required when called:    3
 22370 ;; This function calls:
 22371 ;;		i2_lcdInst
 22372 ;;		i2_printf
 22373 ;; This function is called by:
 22374 ;;		_updateMenu
 22375 ;;		_inputHandler
 22376 ;; This function uses a non-reentrant model
 22377 ;;
 22378                           
 22379                           	psect	text77
 22380  005804                     __ptext77:
 22381                           	opt stack 0
 22382  005804                     _change_state_to_logs_33:
 22383                           	opt stack 18
 22384                           
 22385                           ;UI.c: 546: cur_state = 1033;
 22386                           
 22387                           ;incstack = 0
 22388  005804  0E04               	movlw	4
 22389  005806  0100               	movlb	0	; () banked
 22390  005808  6FEF               	movwf	(_cur_state+1)& (0+255),b
 22391  00580A  0E09               	movlw	9
 22392  00580C  6FEE               	movwf	_cur_state& (0+255),b
 22393                           
 22394                           ; BSR set to: 0
 22395                           ;UI.c: 547: lcdInst(0b10000000);;
 22396  00580E  0E80               	movlw	128
 22397  005810  ECC9  F02D         	call	i2_lcdInst
 22398                           
 22399                           ;UI.c: 548: printf("LOG 3          <");
 22400  005814  0EA5               	movlw	low STR_46
 22401  005816  6E0D               	movwf	i2printf@f,c
 22402  005818  0EFD               	movlw	high STR_46
 22403  00581A  6E0E               	movwf	i2printf@f+1,c
 22404  00581C  ECCC  F011         	call	i2_printf	;wreg free
 22405                           
 22406                           ;UI.c: 549: lcdInst(0b11000000);;
 22407  005820  0EC0               	movlw	192
 22408  005822  ECC9  F02D         	call	i2_lcdInst
 22409                           
 22410                           ;UI.c: 550: printf("LOG 4           ");
 22411  005826  0E0C               	movlw	low STR_48
 22412  005828  6E0D               	movwf	i2printf@f,c
 22413  00582A  0EFD               	movlw	high STR_48
 22414  00582C  6E0E               	movwf	i2printf@f+1,c
 22415  00582E  ECCC  F011         	call	i2_printf	;wreg free
 22416  005832  0012               	return		;funcret
 22417  005834                     __end_of_change_state_to_logs_33:
 22418                           	opt stack 0
 22419                           pclatu	equ	0xFFB
 22420                           pclath	equ	0xFFA
 22421                           tblptru	equ	0xFF8
 22422                           tblptrh	equ	0xFF7
 22423                           tblptrl	equ	0xFF6
 22424                           tablat	equ	0xFF5
 22425                           prodh	equ	0xFF4
 22426                           prodl	equ	0xFF3
 22427                           intcon	equ	0xFF2
 22428                           intcon2	equ	0xFF1
 22429                           intcon3	equ	0xFF0
 22430                           indf0	equ	0xFEF
 22431                           postinc0	equ	0xFEE
 22432                           fsr0h	equ	0xFEA
 22433                           fsr0l	equ	0xFE9
 22434                           wreg	equ	0xFE8
 22435                           postdec1	equ	0xFE5
 22436                           fsr1h	equ	0xFE2
 22437                           fsr1l	equ	0xFE1
 22438                           indf2	equ	0xFDF
 22439                           postinc2	equ	0xFDE
 22440                           postdec2	equ	0xFDD
 22441                           fsr2h	equ	0xFDA
 22442                           fsr2l	equ	0xFD9
 22443                           status	equ	0xFD8
 22444                           
 22445 ;; *************** function _change_state_to_logs_23 *****************
 22446 ;; Defined at:
 22447 ;;		line 538 in file "UI.c"
 22448 ;; Parameters:    Size  Location     Type
 22449 ;;		None
 22450 ;; Auto vars:     Size  Location     Type
 22451 ;;		None
 22452 ;; Return value:  Size  Location     Type
 22453 ;;                  1    wreg      void 
 22454 ;; Registers used:
 22455 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22456 ;; Tracked objects:
 22457 ;;		On entry : 0/0
 22458 ;;		On exit  : 0/0
 22459 ;;		Unchanged: 0/0
 22460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22464 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22465 ;;Total ram usage:        0 bytes
 22466 ;; Hardware stack levels used:    1
 22467 ;; Hardware stack levels required when called:    3
 22468 ;; This function calls:
 22469 ;;		i2_lcdInst
 22470 ;;		i2_printf
 22471 ;; This function is called by:
 22472 ;;		_updateMenu
 22473 ;;		_inputHandler
 22474 ;; This function uses a non-reentrant model
 22475 ;;
 22476                           
 22477                           	psect	text78
 22478  0058F2                     __ptext78:
 22479                           	opt stack 0
 22480  0058F2                     _change_state_to_logs_23:
 22481                           	opt stack 18
 22482                           
 22483                           ;UI.c: 539: cur_state = 1023;
 22484                           
 22485                           ;incstack = 0
 22486  0058F2  0E03               	movlw	3
 22487  0058F4  0100               	movlb	0	; () banked
 22488  0058F6  6FEF               	movwf	(_cur_state+1)& (0+255),b
 22489  0058F8  69EE               	setf	_cur_state& (0+255),b
 22490                           
 22491                           ; BSR set to: 0
 22492                           ;UI.c: 540: lcdInst(0b10000000);;
 22493  0058FA  0E80               	movlw	128
 22494  0058FC  ECC9  F02D         	call	i2_lcdInst
 22495                           
 22496                           ;UI.c: 541: printf("LOG 2           ");
 22497  005900  0EEA               	movlw	low STR_40
 22498  005902  6E0D               	movwf	i2printf@f,c
 22499  005904  0EFC               	movlw	high STR_40
 22500  005906  6E0E               	movwf	i2printf@f+1,c
 22501  005908  ECCC  F011         	call	i2_printf	;wreg free
 22502                           
 22503                           ;UI.c: 542: lcdInst(0b11000000);;
 22504  00590C  0EC0               	movlw	192
 22505  00590E  ECC9  F02D         	call	i2_lcdInst
 22506                           
 22507                           ;UI.c: 543: printf("LOG 3          <");
 22508  005912  0EA5               	movlw	low STR_46
 22509  005914  6E0D               	movwf	i2printf@f,c
 22510  005916  0EFD               	movlw	high STR_46
 22511  005918  6E0E               	movwf	i2printf@f+1,c
 22512  00591A  ECCC  F011         	call	i2_printf	;wreg free
 22513  00591E  0012               	return		;funcret
 22514  005920                     __end_of_change_state_to_logs_23:
 22515                           	opt stack 0
 22516                           pclatu	equ	0xFFB
 22517                           pclath	equ	0xFFA
 22518                           tblptru	equ	0xFF8
 22519                           tblptrh	equ	0xFF7
 22520                           tblptrl	equ	0xFF6
 22521                           tablat	equ	0xFF5
 22522                           prodh	equ	0xFF4
 22523                           prodl	equ	0xFF3
 22524                           intcon	equ	0xFF2
 22525                           intcon2	equ	0xFF1
 22526                           intcon3	equ	0xFF0
 22527                           indf0	equ	0xFEF
 22528                           postinc0	equ	0xFEE
 22529                           fsr0h	equ	0xFEA
 22530                           fsr0l	equ	0xFE9
 22531                           wreg	equ	0xFE8
 22532                           postdec1	equ	0xFE5
 22533                           fsr1h	equ	0xFE2
 22534                           fsr1l	equ	0xFE1
 22535                           indf2	equ	0xFDF
 22536                           postinc2	equ	0xFDE
 22537                           postdec2	equ	0xFDD
 22538                           fsr2h	equ	0xFDA
 22539                           fsr2l	equ	0xFD9
 22540                           status	equ	0xFD8
 22541                           
 22542 ;; *************** function _change_state_to_logs_22 *****************
 22543 ;; Defined at:
 22544 ;;		line 531 in file "UI.c"
 22545 ;; Parameters:    Size  Location     Type
 22546 ;;		None
 22547 ;; Auto vars:     Size  Location     Type
 22548 ;;		None
 22549 ;; Return value:  Size  Location     Type
 22550 ;;                  1    wreg      void 
 22551 ;; Registers used:
 22552 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22553 ;; Tracked objects:
 22554 ;;		On entry : 0/0
 22555 ;;		On exit  : 0/0
 22556 ;;		Unchanged: 0/0
 22557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22559 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22561 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22562 ;;Total ram usage:        0 bytes
 22563 ;; Hardware stack levels used:    1
 22564 ;; Hardware stack levels required when called:    3
 22565 ;; This function calls:
 22566 ;;		i2_lcdInst
 22567 ;;		i2_printf
 22568 ;; This function is called by:
 22569 ;;		_updateMenu
 22570 ;;		_inputHandler
 22571 ;; This function uses a non-reentrant model
 22572 ;;
 22573                           
 22574                           	psect	text79
 22575  005834                     __ptext79:
 22576                           	opt stack 0
 22577  005834                     _change_state_to_logs_22:
 22578                           	opt stack 18
 22579                           
 22580                           ;UI.c: 532: cur_state = 1022;
 22581                           
 22582                           ;incstack = 0
 22583  005834  0E03               	movlw	3
 22584  005836  0100               	movlb	0	; () banked
 22585  005838  6FEF               	movwf	(_cur_state+1)& (0+255),b
 22586  00583A  0EFE               	movlw	254
 22587  00583C  6FEE               	movwf	_cur_state& (0+255),b
 22588                           
 22589                           ; BSR set to: 0
 22590                           ;UI.c: 533: lcdInst(0b10000000);;
 22591  00583E  0E80               	movlw	128
 22592  005840  ECC9  F02D         	call	i2_lcdInst
 22593                           
 22594                           ;UI.c: 534: printf("LOG 2          <");
 22595  005844  0E94               	movlw	low STR_42
 22596  005846  6E0D               	movwf	i2printf@f,c
 22597  005848  0EFD               	movlw	high STR_42
 22598  00584A  6E0E               	movwf	i2printf@f+1,c
 22599  00584C  ECCC  F011         	call	i2_printf	;wreg free
 22600                           
 22601                           ;UI.c: 535: lcdInst(0b11000000);;
 22602  005850  0EC0               	movlw	192
 22603  005852  ECC9  F02D         	call	i2_lcdInst
 22604                           
 22605                           ;UI.c: 536: printf("LOG 3           ");
 22606  005856  0EFB               	movlw	low STR_44
 22607  005858  6E0D               	movwf	i2printf@f,c
 22608  00585A  0EFC               	movlw	high STR_44
 22609  00585C  6E0E               	movwf	i2printf@f+1,c
 22610  00585E  ECCC  F011         	call	i2_printf	;wreg free
 22611  005862  0012               	return		;funcret
 22612  005864                     __end_of_change_state_to_logs_22:
 22613                           	opt stack 0
 22614                           pclatu	equ	0xFFB
 22615                           pclath	equ	0xFFA
 22616                           tblptru	equ	0xFF8
 22617                           tblptrh	equ	0xFF7
 22618                           tblptrl	equ	0xFF6
 22619                           tablat	equ	0xFF5
 22620                           prodh	equ	0xFF4
 22621                           prodl	equ	0xFF3
 22622                           intcon	equ	0xFF2
 22623                           intcon2	equ	0xFF1
 22624                           intcon3	equ	0xFF0
 22625                           indf0	equ	0xFEF
 22626                           postinc0	equ	0xFEE
 22627                           fsr0h	equ	0xFEA
 22628                           fsr0l	equ	0xFE9
 22629                           wreg	equ	0xFE8
 22630                           postdec1	equ	0xFE5
 22631                           fsr1h	equ	0xFE2
 22632                           fsr1l	equ	0xFE1
 22633                           indf2	equ	0xFDF
 22634                           postinc2	equ	0xFDE
 22635                           postdec2	equ	0xFDD
 22636                           fsr2h	equ	0xFDA
 22637                           fsr2l	equ	0xFD9
 22638                           status	equ	0xFD8
 22639                           
 22640 ;; *************** function _change_state_to_logs_12 *****************
 22641 ;; Defined at:
 22642 ;;		line 524 in file "UI.c"
 22643 ;; Parameters:    Size  Location     Type
 22644 ;;		None
 22645 ;; Auto vars:     Size  Location     Type
 22646 ;;		None
 22647 ;; Return value:  Size  Location     Type
 22648 ;;                  1    wreg      void 
 22649 ;; Registers used:
 22650 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22651 ;; Tracked objects:
 22652 ;;		On entry : 0/0
 22653 ;;		On exit  : 0/0
 22654 ;;		Unchanged: 0/0
 22655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22659 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22660 ;;Total ram usage:        0 bytes
 22661 ;; Hardware stack levels used:    1
 22662 ;; Hardware stack levels required when called:    3
 22663 ;; This function calls:
 22664 ;;		i2_lcdInst
 22665 ;;		i2_printf
 22666 ;; This function is called by:
 22667 ;;		_updateMenu
 22668 ;;		_inputHandler
 22669 ;; This function uses a non-reentrant model
 22670 ;;
 22671                           
 22672                           	psect	text80
 22673  005864                     __ptext80:
 22674                           	opt stack 0
 22675  005864                     _change_state_to_logs_12:
 22676                           	opt stack 18
 22677                           
 22678                           ;UI.c: 525: cur_state = 1012;
 22679                           
 22680                           ;incstack = 0
 22681  005864  0E03               	movlw	3
 22682  005866  0100               	movlb	0	; () banked
 22683  005868  6FEF               	movwf	(_cur_state+1)& (0+255),b
 22684  00586A  0EF4               	movlw	244
 22685  00586C  6FEE               	movwf	_cur_state& (0+255),b
 22686                           
 22687                           ; BSR set to: 0
 22688                           ;UI.c: 526: lcdInst(0b10000000);;
 22689  00586E  0E80               	movlw	128
 22690  005870  ECC9  F02D         	call	i2_lcdInst
 22691                           
 22692                           ;UI.c: 527: printf("LOG 1           ");
 22693  005874  0ED9               	movlw	low STR_41
 22694  005876  6E0D               	movwf	i2printf@f,c
 22695  005878  0EFC               	movlw	high STR_41
 22696  00587A  6E0E               	movwf	i2printf@f+1,c
 22697  00587C  ECCC  F011         	call	i2_printf	;wreg free
 22698                           
 22699                           ;UI.c: 528: lcdInst(0b11000000);;
 22700  005880  0EC0               	movlw	192
 22701  005882  ECC9  F02D         	call	i2_lcdInst
 22702                           
 22703                           ;UI.c: 529: printf("LOG 2          <");
 22704  005886  0E94               	movlw	low STR_42
 22705  005888  6E0D               	movwf	i2printf@f,c
 22706  00588A  0EFD               	movlw	high STR_42
 22707  00588C  6E0E               	movwf	i2printf@f+1,c
 22708  00588E  ECCC  F011         	call	i2_printf	;wreg free
 22709  005892  0012               	return		;funcret
 22710  005894                     __end_of_change_state_to_logs_12:
 22711                           	opt stack 0
 22712                           pclatu	equ	0xFFB
 22713                           pclath	equ	0xFFA
 22714                           tblptru	equ	0xFF8
 22715                           tblptrh	equ	0xFF7
 22716                           tblptrl	equ	0xFF6
 22717                           tablat	equ	0xFF5
 22718                           prodh	equ	0xFF4
 22719                           prodl	equ	0xFF3
 22720                           intcon	equ	0xFF2
 22721                           intcon2	equ	0xFF1
 22722                           intcon3	equ	0xFF0
 22723                           indf0	equ	0xFEF
 22724                           postinc0	equ	0xFEE
 22725                           fsr0h	equ	0xFEA
 22726                           fsr0l	equ	0xFE9
 22727                           wreg	equ	0xFE8
 22728                           postdec1	equ	0xFE5
 22729                           fsr1h	equ	0xFE2
 22730                           fsr1l	equ	0xFE1
 22731                           indf2	equ	0xFDF
 22732                           postinc2	equ	0xFDE
 22733                           postdec2	equ	0xFDD
 22734                           fsr2h	equ	0xFDA
 22735                           fsr2l	equ	0xFD9
 22736                           status	equ	0xFD8
 22737                           
 22738 ;; *************** function _change_state_to_logs_11 *****************
 22739 ;; Defined at:
 22740 ;;		line 517 in file "UI.c"
 22741 ;; Parameters:    Size  Location     Type
 22742 ;;		None
 22743 ;; Auto vars:     Size  Location     Type
 22744 ;;		None
 22745 ;; Return value:  Size  Location     Type
 22746 ;;                  1    wreg      void 
 22747 ;; Registers used:
 22748 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22749 ;; Tracked objects:
 22750 ;;		On entry : 0/0
 22751 ;;		On exit  : 0/0
 22752 ;;		Unchanged: 0/0
 22753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22757 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22758 ;;Total ram usage:        0 bytes
 22759 ;; Hardware stack levels used:    1
 22760 ;; Hardware stack levels required when called:    3
 22761 ;; This function calls:
 22762 ;;		i2_lcdInst
 22763 ;;		i2_printf
 22764 ;; This function is called by:
 22765 ;;		_updateMenu
 22766 ;;		_inputHandler
 22767 ;; This function uses a non-reentrant model
 22768 ;;
 22769                           
 22770                           	psect	text81
 22771  005894                     __ptext81:
 22772                           	opt stack 0
 22773  005894                     _change_state_to_logs_11:
 22774                           	opt stack 18
 22775                           
 22776                           ;UI.c: 518: cur_state = 1011;
 22777                           
 22778                           ;incstack = 0
 22779  005894  0E03               	movlw	3
 22780  005896  0100               	movlb	0	; () banked
 22781  005898  6FEF               	movwf	(_cur_state+1)& (0+255),b
 22782  00589A  0EF3               	movlw	243
 22783  00589C  6FEE               	movwf	_cur_state& (0+255),b
 22784                           
 22785                           ; BSR set to: 0
 22786                           ;UI.c: 519: lcdInst(0b10000000);;
 22787  00589E  0E80               	movlw	128
 22788  0058A0  ECC9  F02D         	call	i2_lcdInst
 22789                           
 22790                           ;UI.c: 520: printf("LOG 1          <");
 22791  0058A4  0E83               	movlw	low STR_39
 22792  0058A6  6E0D               	movwf	i2printf@f,c
 22793  0058A8  0EFD               	movlw	high STR_39
 22794  0058AA  6E0E               	movwf	i2printf@f+1,c
 22795  0058AC  ECCC  F011         	call	i2_printf	;wreg free
 22796                           
 22797                           ;UI.c: 521: lcdInst(0b11000000);;
 22798  0058B0  0EC0               	movlw	192
 22799  0058B2  ECC9  F02D         	call	i2_lcdInst
 22800                           
 22801                           ;UI.c: 522: printf("LOG 2           ");
 22802  0058B6  0EEA               	movlw	low STR_40
 22803  0058B8  6E0D               	movwf	i2printf@f,c
 22804  0058BA  0EFC               	movlw	high STR_40
 22805  0058BC  6E0E               	movwf	i2printf@f+1,c
 22806  0058BE  ECCC  F011         	call	i2_printf	;wreg free
 22807  0058C2  0012               	return		;funcret
 22808  0058C4                     __end_of_change_state_to_logs_11:
 22809                           	opt stack 0
 22810                           pclatu	equ	0xFFB
 22811                           pclath	equ	0xFFA
 22812                           tblptru	equ	0xFF8
 22813                           tblptrh	equ	0xFF7
 22814                           tblptrl	equ	0xFF6
 22815                           tablat	equ	0xFF5
 22816                           prodh	equ	0xFF4
 22817                           prodl	equ	0xFF3
 22818                           intcon	equ	0xFF2
 22819                           intcon2	equ	0xFF1
 22820                           intcon3	equ	0xFF0
 22821                           indf0	equ	0xFEF
 22822                           postinc0	equ	0xFEE
 22823                           fsr0h	equ	0xFEA
 22824                           fsr0l	equ	0xFE9
 22825                           wreg	equ	0xFE8
 22826                           postdec1	equ	0xFE5
 22827                           fsr1h	equ	0xFE2
 22828                           fsr1l	equ	0xFE1
 22829                           indf2	equ	0xFDF
 22830                           postinc2	equ	0xFDE
 22831                           postdec2	equ	0xFDD
 22832                           fsr2h	equ	0xFDA
 22833                           fsr2l	equ	0xFD9
 22834                           status	equ	0xFD8
 22835                           
 22836 ;; *************** function _dispLogs *****************
 22837 ;; Defined at:
 22838 ;;		line 470 in file "UI.c"
 22839 ;; Parameters:    Size  Location     Type
 22840 ;;  myLog           2   17[COMRAM] int 
 22841 ;; Auto vars:     Size  Location     Type
 22842 ;;		None
 22843 ;; Return value:  Size  Location     Type
 22844 ;;                  1    wreg      void 
 22845 ;; Registers used:
 22846 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22847 ;; Tracked objects:
 22848 ;;		On entry : 0/0
 22849 ;;		On exit  : 0/0
 22850 ;;		Unchanged: 0/0
 22851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22852 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22855 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22856 ;;Total ram usage:        2 bytes
 22857 ;; Hardware stack levels used:    1
 22858 ;; Hardware stack levels required when called:    2
 22859 ;; This function calls:
 22860 ;;		_retrieveLog
 22861 ;; This function is called by:
 22862 ;;		_updateMenu
 22863 ;; This function uses a non-reentrant model
 22864 ;;
 22865                           
 22866                           	psect	text82
 22867  005A3E                     __ptext82:
 22868                           	opt stack 0
 22869  005A3E                     _dispLogs:
 22870                           	opt stack 20
 22871                           
 22872                           ;UI.c: 471: logstate = 1;
 22873                           
 22874                           ;incstack = 0
 22875  005A3E  0E00               	movlw	0
 22876  005A40  0100               	movlb	0	; () banked
 22877  005A42  6FF9               	movwf	(_logstate+1)& (0+255),b
 22878  005A44  0E01               	movlw	1
 22879  005A46  6FF8               	movwf	_logstate& (0+255),b
 22880                           
 22881                           ; BSR set to: 0
 22882                           ;UI.c: 472: log = myLog;
 22883  005A48  C012  F0F4         	movff	dispLogs@myLog,_log
 22884  005A4C  C013  F0F5         	movff	dispLogs@myLog+1,_log+1
 22885                           
 22886                           ; BSR set to: 0
 22887                           ;UI.c: 473: retrieveLog(myLog - 1);
 22888  005A50  0EFF               	movlw	255
 22889  005A52  2412               	addwf	dispLogs@myLog,w,c
 22890  005A54  6E07               	movwf	retrieveLog@logNum,c
 22891  005A56  0EFF               	movlw	255
 22892  005A58  2013               	addwfc	dispLogs@myLog+1,w,c
 22893  005A5A  6E08               	movwf	retrieveLog@logNum+1,c
 22894  005A5C  EC17  F020         	call	_retrieveLog	;wreg free
 22895  005A60  0012               	return		;funcret
 22896  005A62                     __end_of_dispLogs:
 22897                           	opt stack 0
 22898                           pclatu	equ	0xFFB
 22899                           pclath	equ	0xFFA
 22900                           tblptru	equ	0xFF8
 22901                           tblptrh	equ	0xFF7
 22902                           tblptrl	equ	0xFF6
 22903                           tablat	equ	0xFF5
 22904                           prodh	equ	0xFF4
 22905                           prodl	equ	0xFF3
 22906                           intcon	equ	0xFF2
 22907                           intcon2	equ	0xFF1
 22908                           intcon3	equ	0xFF0
 22909                           indf0	equ	0xFEF
 22910                           postinc0	equ	0xFEE
 22911                           fsr0h	equ	0xFEA
 22912                           fsr0l	equ	0xFE9
 22913                           wreg	equ	0xFE8
 22914                           postdec1	equ	0xFE5
 22915                           fsr1h	equ	0xFE2
 22916                           fsr1l	equ	0xFE1
 22917                           indf2	equ	0xFDF
 22918                           postinc2	equ	0xFDE
 22919                           postdec2	equ	0xFDD
 22920                           fsr2h	equ	0xFDA
 22921                           fsr2l	equ	0xFD9
 22922                           status	equ	0xFD8
 22923                           
 22924 ;; *************** function _retrieveLog *****************
 22925 ;; Defined at:
 22926 ;;		line 139 in file "EEPROM.c"
 22927 ;; Parameters:    Size  Location     Type
 22928 ;;  logNum          2    6[COMRAM] int 
 22929 ;; Auto vars:     Size  Location     Type
 22930 ;;  i               2   13[COMRAM] int 
 22931 ;;  addr            2   15[COMRAM] unsigned short 
 22932 ;;  byte3           1   12[COMRAM] unsigned char 
 22933 ;;  byte2           1   11[COMRAM] unsigned char 
 22934 ;;  byte1           1   10[COMRAM] unsigned char 
 22935 ;; Return value:  Size  Location     Type
 22936 ;;                  1    wreg      void 
 22937 ;; Registers used:
 22938 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22939 ;; Tracked objects:
 22940 ;;		On entry : 0/0
 22941 ;;		On exit  : 0/0
 22942 ;;		Unchanged: 0/0
 22943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22944 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22945 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22946 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22947 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22948 ;;Total ram usage:       11 bytes
 22949 ;; Hardware stack levels used:    1
 22950 ;; Hardware stack levels required when called:    1
 22951 ;; This function calls:
 22952 ;;		i2_EEPROM_read
 22953 ;;		i2___wmul
 22954 ;; This function is called by:
 22955 ;;		_dispLogs
 22956 ;; This function uses a non-reentrant model
 22957 ;;
 22958                           
 22959                           	psect	text83
 22960  00402E                     __ptext83:
 22961                           	opt stack 0
 22962  00402E                     _retrieveLog:
 22963                           	opt stack 20
 22964                           
 22965                           ;EEPROM.c: 145: unsigned short addr = 1 + logNum * 11;
 22966                           
 22967                           ;incstack = 0
 22968  00402E  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 22969  004032  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 22970  004036  0E00               	movlw	0
 22971  004038  6E04               	movwf	i2___wmul@multiplicand+1,c
 22972  00403A  0E0B               	movlw	11
 22973  00403C  6E03               	movwf	i2___wmul@multiplicand,c
 22974  00403E  ECF9  F02C         	call	i2___wmul	;wreg free
 22975  004042  0E01               	movlw	1
 22976  004044  2401               	addwf	?i2___wmul,w,c
 22977  004046  6E10               	movwf	retrieveLog@addr,c
 22978  004048  0E00               	movlw	0
 22979  00404A  2002               	addwfc	?i2___wmul+1,w,c
 22980  00404C  6E11               	movwf	retrieveLog@addr+1,c
 22981                           
 22982                           ;EEPROM.c: 148: unsigned char byte1 = EEPROM_read(addr);
 22983  00404E  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 22984  004052  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 22985  004056  EC95  F02D         	call	i2_EEPROM_read	;wreg free
 22986  00405A  6E0B               	movwf	retrieveLog@byte1,c
 22987                           
 22988                           ;EEPROM.c: 149: log_completion = (int)(byte1 & 0b10000000);
 22989  00405C  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 22990  004060  0E80               	movlw	128
 22991  004062  1609               	andwf	??_retrieveLog,f,c
 22992  004064  5009               	movf	??_retrieveLog,w,c
 22993  004066  6E63               	movwf	_log_completion,c
 22994  004068  6A64               	clrf	_log_completion+1,c
 22995                           
 22996                           ;EEPROM.c: 150: log_count_total = (int)(byte1 & 0b00001111);
 22997  00406A  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 22998  00406E  0E0F               	movlw	15
 22999  004070  1609               	andwf	??_retrieveLog,f,c
 23000  004072  5009               	movf	??_retrieveLog,w,c
 23001  004074  0101               	movlb	1	; () banked
 23002  004076  6F43               	movwf	_log_count_total& (0+255),b
 23003  004078  6B44               	clrf	(_log_count_total+1)& (0+255),b
 23004                           
 23005                           ; BSR set to: 1
 23006                           ;EEPROM.c: 151: addr++;
 23007  00407A  4A10               	infsnz	retrieveLog@addr,f,c
 23008  00407C  2A11               	incf	retrieveLog@addr+1,f,c
 23009                           
 23010                           ; BSR set to: 1
 23011                           ;EEPROM.c: 154: unsigned char byte2 = EEPROM_read(addr);
 23012  00407E  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23013  004082  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23014  004086  EC95  F02D         	call	i2_EEPROM_read	;wreg free
 23015  00408A  6E0C               	movwf	retrieveLog@byte2,c
 23016                           
 23017                           ;EEPROM.c: 155: log_count_pop_no_tab = (int)((byte2 & 0b11110000)>> 4);
 23018  00408C  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 23019  004090  3A09               	swapf	??_retrieveLog,f,c
 23020  004092  0E0F               	movlw	15
 23021  004094  1609               	andwf	??_retrieveLog,f,c
 23022  004096  0E0F               	movlw	15
 23023  004098  1609               	andwf	??_retrieveLog,f,c
 23024  00409A  5009               	movf	??_retrieveLog,w,c
 23025  00409C  6E67               	movwf	_log_count_pop_no_tab,c
 23026  00409E  6A68               	clrf	_log_count_pop_no_tab+1,c
 23027                           
 23028                           ;EEPROM.c: 156: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 23029  0040A0  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 23030  0040A4  0E0F               	movlw	15
 23031  0040A6  1609               	andwf	??_retrieveLog,f,c
 23032  0040A8  5009               	movf	??_retrieveLog,w,c
 23033  0040AA  6E69               	movwf	_log_count_pop_w_tab,c
 23034  0040AC  6A6A               	clrf	_log_count_pop_w_tab+1,c
 23035                           
 23036                           ;EEPROM.c: 157: addr++;
 23037  0040AE  4A10               	infsnz	retrieveLog@addr,f,c
 23038  0040B0  2A11               	incf	retrieveLog@addr+1,f,c
 23039                           
 23040                           ;EEPROM.c: 158: unsigned char byte3 = EEPROM_read(addr);
 23041  0040B2  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23042  0040B6  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23043  0040BA  EC95  F02D         	call	i2_EEPROM_read	;wreg free
 23044  0040BE  6E0D               	movwf	retrieveLog@byte3,c
 23045                           
 23046                           ;EEPROM.c: 159: log_count_can_w_lab = (int)((byte3 & 0b11110000)>> 4);
 23047  0040C0  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 23048  0040C4  3A09               	swapf	??_retrieveLog,f,c
 23049  0040C6  0E0F               	movlw	15
 23050  0040C8  1609               	andwf	??_retrieveLog,f,c
 23051  0040CA  0E0F               	movlw	15
 23052  0040CC  1609               	andwf	??_retrieveLog,f,c
 23053  0040CE  5009               	movf	??_retrieveLog,w,c
 23054  0040D0  0101               	movlb	1	; () banked
 23055  0040D2  6F41               	movwf	_log_count_can_w_lab& (0+255),b
 23056  0040D4  6B42               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 23057                           
 23058                           ; BSR set to: 1
 23059                           ;EEPROM.c: 160: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 23060  0040D6  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 23061  0040DA  0E0F               	movlw	15
 23062  0040DC  1609               	andwf	??_retrieveLog,f,c
 23063  0040DE  5009               	movf	??_retrieveLog,w,c
 23064  0040E0  6E65               	movwf	_log_count_can_no_lab,c
 23065  0040E2  6A66               	clrf	_log_count_can_no_lab+1,c
 23066                           
 23067                           ; BSR set to: 1
 23068                           ;EEPROM.c: 161: addr++;
 23069  0040E4  4A10               	infsnz	retrieveLog@addr,f,c
 23070  0040E6  2A11               	incf	retrieveLog@addr+1,f,c
 23071                           
 23072                           ; BSR set to: 1
 23073                           ;EEPROM.c: 164: for(int i = 0; i < 7; i++){
 23074  0040E8  0E00               	movlw	0
 23075  0040EA  6E0F               	movwf	retrieveLog@i+1,c
 23076  0040EC  0E00               	movlw	0
 23077  0040EE  6E0E               	movwf	retrieveLog@i,c
 23078  0040F0                     i2l7267:
 23079                           
 23080                           ; BSR set to: 1
 23081  0040F0  BE0F               	btfsc	retrieveLog@i+1,7,c
 23082  0040F2  D006               	goto	i2l7271
 23083  0040F4  500F               	movf	retrieveLog@i+1,w,c
 23084  0040F6  E11E               	bnz	i2l7279
 23085  0040F8  0E07               	movlw	7
 23086  0040FA  5C0E               	subwf	retrieveLog@i,w,c
 23087  0040FC  B0D8               	btfsc	status,0,c
 23088  0040FE  D01A               	goto	i2l7279
 23089  004100                     i2l7271:
 23090                           
 23091                           ;EEPROM.c: 165: log_startTime[i] = (int)EEPROM_read(addr);
 23092  004100  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23093  004104  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23094  004108  EC95  F02D         	call	i2_EEPROM_read	;wreg free
 23095  00410C  6E09               	movwf	??_retrieveLog& (0+255),c
 23096  00410E  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 23097  004110  90D8               	bcf	status,0,c
 23098  004112  340E               	rlcf	retrieveLog@i,w,c
 23099  004114  6ED9               	movwf	fsr2l,c
 23100  004116  340F               	rlcf	retrieveLog@i+1,w,c
 23101  004118  6EDA               	movwf	fsr2h,c
 23102  00411A  0E00               	movlw	low _log_startTime
 23103  00411C  26D9               	addwf	fsr2l,f,c
 23104  00411E  0E01               	movlw	high _log_startTime
 23105  004120  22DA               	addwfc	fsr2h,f,c
 23106  004122  C009  FFDE         	movff	??_retrieveLog,postinc2
 23107  004126  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 23108                           
 23109                           ;EEPROM.c: 166: addr++;
 23110  00412A  4A10               	infsnz	retrieveLog@addr,f,c
 23111  00412C  2A11               	incf	retrieveLog@addr+1,f,c
 23112  00412E  4A0E               	infsnz	retrieveLog@i,f,c
 23113  004130  2A0F               	incf	retrieveLog@i+1,f,c
 23114  004132  D7DE               	goto	i2l7267
 23115  004134                     i2l7279:
 23116                           
 23117                           ;EEPROM.c: 167: }
 23118                           ;EEPROM.c: 170: log_total_time = (int)EEPROM_read(addr);
 23119  004134  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23120  004138  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23121  00413C  EC95  F02D         	call	i2_EEPROM_read	;wreg free
 23122  004140  6E09               	movwf	??_retrieveLog& (0+255),c
 23123  004142  5009               	movf	??_retrieveLog,w,c
 23124  004144  0100               	movlb	0	; () banked
 23125  004146  6FF6               	movwf	_log_total_time& (0+255),b
 23126  004148  6BF7               	clrf	(_log_total_time+1)& (0+255),b
 23127                           
 23128                           ; BSR set to: 0
 23129  00414A  0012               	return		;funcret
 23130  00414C                     __end_of_retrieveLog:
 23131                           	opt stack 0
 23132                           pclatu	equ	0xFFB
 23133                           pclath	equ	0xFFA
 23134                           tblptru	equ	0xFF8
 23135                           tblptrh	equ	0xFF7
 23136                           tblptrl	equ	0xFF6
 23137                           tablat	equ	0xFF5
 23138                           prodh	equ	0xFF4
 23139                           prodl	equ	0xFF3
 23140                           intcon	equ	0xFF2
 23141                           intcon2	equ	0xFF1
 23142                           intcon3	equ	0xFF0
 23143                           indf0	equ	0xFEF
 23144                           postinc0	equ	0xFEE
 23145                           fsr0h	equ	0xFEA
 23146                           fsr0l	equ	0xFE9
 23147                           wreg	equ	0xFE8
 23148                           postdec1	equ	0xFE5
 23149                           fsr1h	equ	0xFE2
 23150                           fsr1l	equ	0xFE1
 23151                           indf2	equ	0xFDF
 23152                           postinc2	equ	0xFDE
 23153                           postdec2	equ	0xFDD
 23154                           fsr2h	equ	0xFDA
 23155                           fsr2l	equ	0xFD9
 23156                           status	equ	0xFD8
 23157                           
 23158 ;; *************** function i2_EEPROM_read *****************
 23159 ;; Defined at:
 23160 ;;		line 73 in file "EEPROM.c"
 23161 ;; Parameters:    Size  Location     Type
 23162 ;;  address         2    0[COMRAM] unsigned short 
 23163 ;; Auto vars:     Size  Location     Type
 23164 ;;		None
 23165 ;; Return value:  Size  Location     Type
 23166 ;;                  1    wreg      unsigned char 
 23167 ;; Registers used:
 23168 ;;		wreg, status,2
 23169 ;; Tracked objects:
 23170 ;;		On entry : 0/0
 23171 ;;		On exit  : 0/0
 23172 ;;		Unchanged: 0/0
 23173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23174 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23177 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23178 ;;Total ram usage:        2 bytes
 23179 ;; Hardware stack levels used:    1
 23180 ;; This function calls:
 23181 ;;		Nothing
 23182 ;; This function is called by:
 23183 ;;		_retrieveLog
 23184 ;; This function uses a non-reentrant model
 23185 ;;
 23186                           
 23187                           	psect	text84
 23188  005B2A                     __ptext84:
 23189                           	opt stack 0
 23190  005B2A                     i2_EEPROM_read:
 23191                           	opt stack 20
 23192                           
 23193                           ;EEPROM.c: 75: EEADRH = (unsigned char)(address >> 8);
 23194                           
 23195                           ; BSR set to: 0
 23196                           ;incstack = 0
 23197  005B2A  5002               	movf	i2EEPROM_read@address+1,w,c
 23198  005B2C  6EAA               	movwf	4010,c	;volatile
 23199                           
 23200                           ;EEPROM.c: 76: EEADR = (unsigned char)address;
 23201  005B2E  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 23202                           
 23203                           ;EEPROM.c: 78: EECON1bits.EEPGD = 0;
 23204  005B32  9EA6               	bcf	4006,7,c	;volatile
 23205                           
 23206                           ;EEPROM.c: 79: EECON1bits.CFGS = 0;
 23207  005B34  9CA6               	bcf	4006,6,c	;volatile
 23208                           
 23209                           ;EEPROM.c: 80: EECON1bits.RD = 1;
 23210  005B36  80A6               	bsf	4006,0,c	;volatile
 23211  005B38                     i2l1131:
 23212  005B38  B0A6               	btfsc	4006,0,c	;volatile
 23213  005B3A  D7FE               	goto	i2l1131
 23214                           
 23215                           ;EEPROM.c: 86: return EEDATA;
 23216  005B3C  50A8               	movf	4008,w,c	;volatile
 23217  005B3E  0012               	return	
 23218  005B40                     __end_ofi2_EEPROM_read:
 23219                           	opt stack 0
 23220                           pclatu	equ	0xFFB
 23221                           pclath	equ	0xFFA
 23222                           tblptru	equ	0xFF8
 23223                           tblptrh	equ	0xFF7
 23224                           tblptrl	equ	0xFF6
 23225                           tablat	equ	0xFF5
 23226                           prodh	equ	0xFF4
 23227                           prodl	equ	0xFF3
 23228                           intcon	equ	0xFF2
 23229                           intcon2	equ	0xFF1
 23230                           intcon3	equ	0xFF0
 23231                           indf0	equ	0xFEF
 23232                           postinc0	equ	0xFEE
 23233                           fsr0h	equ	0xFEA
 23234                           fsr0l	equ	0xFE9
 23235                           wreg	equ	0xFE8
 23236                           postdec1	equ	0xFE5
 23237                           fsr1h	equ	0xFE2
 23238                           fsr1l	equ	0xFE1
 23239                           indf2	equ	0xFDF
 23240                           postinc2	equ	0xFDE
 23241                           postdec2	equ	0xFDD
 23242                           fsr2h	equ	0xFDA
 23243                           fsr2l	equ	0xFD9
 23244                           status	equ	0xFD8
 23245                           
 23246 ;; *************** function _updateArmState *****************
 23247 ;; Defined at:
 23248 ;;		line 644 in file "sort.c"
 23249 ;; Parameters:    Size  Location     Type
 23250 ;;		None
 23251 ;; Auto vars:     Size  Location     Type
 23252 ;;		None
 23253 ;; Return value:  Size  Location     Type
 23254 ;;                  1    wreg      void 
 23255 ;; Registers used:
 23256 ;;		wreg, status,2, status,0
 23257 ;; Tracked objects:
 23258 ;;		On entry : 0/0
 23259 ;;		On exit  : 0/0
 23260 ;;		Unchanged: 0/0
 23261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23263 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23264 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23265 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23266 ;;Total ram usage:        2 bytes
 23267 ;; Hardware stack levels used:    1
 23268 ;; This function calls:
 23269 ;;		Nothing
 23270 ;; This function is called by:
 23271 ;;		_handler
 23272 ;; This function uses a non-reentrant model
 23273 ;;
 23274                           
 23275                           	psect	text85
 23276  00556A                     __ptext85:
 23277                           	opt stack 0
 23278  00556A                     _updateArmState:
 23279                           	opt stack 23
 23280                           
 23281                           ;sort.c: 651: if(!was_low_2){
 23282                           
 23283                           ;incstack = 0
 23284  00556A  5079               	movf	_was_low_2,w,c	;volatile
 23285  00556C  107A               	iorwf	_was_low_2+1,w,c	;volatile
 23286  00556E  B4D8               	btfsc	status,2,c
 23287  005570  D007               	goto	i2l10057
 23288  005572  D016               	goto	i2l947
 23289  005574                     i2l10051:
 23290                           
 23291                           ;sort.c: 656: PR2 = 0x20;
 23292  005574  0E20               	movlw	32
 23293  005576  6ECB               	movwf	4043,c	;volatile
 23294                           
 23295                           ;sort.c: 657: break;
 23296  005578  0012               	return	
 23297  00557A                     i2l10053:
 23298                           
 23299                           ;sort.c: 660: PR2 = 0x40;
 23300  00557A  0E40               	movlw	64
 23301  00557C  6ECB               	movwf	4043,c	;volatile
 23302                           
 23303                           ;sort.c: 662: }
 23304                           
 23305                           ;sort.c: 661: break;
 23306  00557E  0012               	return	
 23307  005580                     i2l10057:
 23308  005580  C0F0  F001         	movff	_f_arm_position,??_updateArmState	;volatile
 23309  005584  C0F1  F002         	movff	_f_arm_position+1,??_updateArmState+1	;volatile
 23310                           
 23311                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 23312                           ; Switch size 1, requested type "space"
 23313                           ; Number of cases is 1, Range of values is 0 to 0
 23314                           ; switch strategies available:
 23315                           ; Name         Instructions Cycles
 23316                           ; simple_byte            4     3 (average)
 23317                           ;	Chosen strategy is simple_byte
 23318  005588  5002               	movf	??_updateArmState+1,w,c
 23319  00558A  0A00               	xorlw	0	; case 0
 23320  00558C  A4D8               	btfss	status,2,c
 23321  00558E  0012               	return	
 23322                           
 23323                           ; Switch size 1, requested type "space"
 23324                           ; Number of cases is 2, Range of values is 0 to 1
 23325                           ; switch strategies available:
 23326                           ; Name         Instructions Cycles
 23327                           ; simple_byte            7     4 (average)
 23328                           ;	Chosen strategy is simple_byte
 23329  005590  5001               	movf	??_updateArmState,w,c
 23330  005592  0A00               	xorlw	0	; case 0
 23331  005594  B4D8               	btfsc	status,2,c
 23332  005596  D7EE               	goto	i2l10051
 23333  005598  0A01               	xorlw	1	; case 1
 23334  00559A  A4D8               	btfss	status,2,c
 23335                           
 23336                           ;sort.c: 663: }
 23337  00559C  0012               	return	
 23338  00559E  D7ED               	goto	i2l10053
 23339  0055A0                     i2l947:
 23340                           
 23341                           ;sort.c: 664: else{
 23342                           ;sort.c: 666: PR2 = 0xFF;
 23343  0055A0  68CB               	setf	4043,c	;volatile
 23344  0055A2  0012               	return	
 23345  0055A4                     __end_of_updateArmState:
 23346                           	opt stack 0
 23347                           pclatu	equ	0xFFB
 23348                           pclath	equ	0xFFA
 23349                           tblptru	equ	0xFF8
 23350                           tblptrh	equ	0xFF7
 23351                           tblptrl	equ	0xFF6
 23352                           tablat	equ	0xFF5
 23353                           prodh	equ	0xFF4
 23354                           prodl	equ	0xFF3
 23355                           intcon	equ	0xFF2
 23356                           intcon2	equ	0xFF1
 23357                           intcon3	equ	0xFF0
 23358                           indf0	equ	0xFEF
 23359                           postinc0	equ	0xFEE
 23360                           fsr0h	equ	0xFEA
 23361                           fsr0l	equ	0xFE9
 23362                           wreg	equ	0xFE8
 23363                           postdec1	equ	0xFE5
 23364                           fsr1h	equ	0xFE2
 23365                           fsr1l	equ	0xFE1
 23366                           indf2	equ	0xFDF
 23367                           postinc2	equ	0xFDE
 23368                           postdec2	equ	0xFDD
 23369                           fsr2h	equ	0xFDA
 23370                           fsr2l	equ	0xFD9
 23371                           status	equ	0xFD8
 23372                           
 23373 ;; *************** function _printSortTimer *****************
 23374 ;; Defined at:
 23375 ;;		line 485 in file "sort.c"
 23376 ;; Parameters:    Size  Location     Type
 23377 ;;		None
 23378 ;; Auto vars:     Size  Location     Type
 23379 ;;  i               2   70[COMRAM] int 
 23380 ;;  i               2   72[COMRAM] int 
 23381 ;;  curTime        14   44[COMRAM] int [7]
 23382 ;;  timeDiff        2   68[COMRAM] unsigned int 
 23383 ;;  sec             2   64[COMRAM] int 
 23384 ;;  min             2   62[COMRAM] int 
 23385 ;;  cur_sec         2   60[COMRAM] unsigned int 
 23386 ;;  start_sec       2   58[COMRAM] unsigned int 
 23387 ;; Return value:  Size  Location     Type
 23388 ;;                  1    wreg      void 
 23389 ;; Registers used:
 23390 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23391 ;; Tracked objects:
 23392 ;;		On entry : 0/0
 23393 ;;		On exit  : 0/0
 23394 ;;		Unchanged: 0/0
 23395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23397 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23398 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23399 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23400 ;;Total ram usage:       33 bytes
 23401 ;; Hardware stack levels used:    1
 23402 ;; Hardware stack levels required when called:    3
 23403 ;; This function calls:
 23404 ;;		i2___lwdiv
 23405 ;;		i2___lwmod
 23406 ;;		i2___wmul
 23407 ;;		i2_delay_ms
 23408 ;;		i2_getRTC
 23409 ;;		i2_lcdInst
 23410 ;;		i2_printf
 23411 ;; This function is called by:
 23412 ;;		_handler
 23413 ;; This function uses a non-reentrant model
 23414 ;;
 23415                           
 23416                           	psect	text86
 23417  0032A4                     __ptext86:
 23418                           	opt stack 0
 23419  0032A4                     _printSortTimer:
 23420                           	opt stack 20
 23421                           
 23422                           ;sort.c: 486: getRTC();
 23423                           
 23424                           ;incstack = 0
 23425  0032A4  ECCA  F027         	call	i2_getRTC	;wreg free
 23426                           
 23427                           ;sort.c: 487: int curTime[7];
 23428                           ;sort.c: 488: for(int i = 0; i < 7; i++){
 23429  0032A8  0E00               	movlw	0
 23430  0032AA  6E4A               	movwf	printSortTimer@i+1,c
 23431  0032AC  0E00               	movlw	0
 23432  0032AE  6E49               	movwf	printSortTimer@i,c
 23433  0032B0                     i2l9891:
 23434  0032B0  BE4A               	btfsc	printSortTimer@i+1,7,c
 23435  0032B2  D006               	goto	i2l9895
 23436  0032B4  504A               	movf	printSortTimer@i+1,w,c
 23437  0032B6  E131               	bnz	i2l9901
 23438  0032B8  0E07               	movlw	7
 23439  0032BA  5C49               	subwf	printSortTimer@i,w,c
 23440  0032BC  B0D8               	btfsc	status,0,c
 23441  0032BE  D02D               	goto	i2l9901
 23442  0032C0                     i2l9895:
 23443                           
 23444                           ;sort.c: 489: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 23445  0032C0  0E1C               	movlw	low _time
 23446  0032C2  2449               	addwf	printSortTimer@i,w,c
 23447  0032C4  6ED9               	movwf	fsr2l,c
 23448  0032C6  0E01               	movlw	high _time
 23449  0032C8  204A               	addwfc	printSortTimer@i+1,w,c
 23450  0032CA  6EDA               	movwf	fsr2h,c
 23451  0032CC  50DF               	movf	indf2,w,c
 23452  0032CE  6E2A               	movwf	??_printSortTimer& (0+255),c
 23453  0032D0  3A2A               	swapf	??_printSortTimer,f,c
 23454  0032D2  0E0F               	movlw	15
 23455  0032D4  162A               	andwf	??_printSortTimer,f,c
 23456  0032D6  0E0F               	movlw	15
 23457  0032D8  162A               	andwf	??_printSortTimer,f,c
 23458  0032DA  502A               	movf	??_printSortTimer,w,c
 23459  0032DC  0D0A               	mullw	10
 23460  0032DE  0E1C               	movlw	low _time
 23461  0032E0  2449               	addwf	printSortTimer@i,w,c
 23462  0032E2  6ED9               	movwf	fsr2l,c
 23463  0032E4  0E01               	movlw	high _time
 23464  0032E6  204A               	addwfc	printSortTimer@i+1,w,c
 23465  0032E8  6EDA               	movwf	fsr2h,c
 23466  0032EA  50DF               	movf	indf2,w,c
 23467  0032EC  0B0F               	andlw	15
 23468  0032EE  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 23469  0032F0  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 23470  0032F2  50F3               	movf	prodl,w,c
 23471  0032F4  262B               	addwf	??_printSortTimer+1,f,c
 23472  0032F6  50F4               	movf	prodh,w,c
 23473  0032F8  222C               	addwfc	??_printSortTimer+2,f,c
 23474  0032FA  90D8               	bcf	status,0,c
 23475  0032FC  3449               	rlcf	printSortTimer@i,w,c
 23476  0032FE  6ED9               	movwf	fsr2l,c
 23477  003300  344A               	rlcf	printSortTimer@i+1,w,c
 23478  003302  6EDA               	movwf	fsr2h,c
 23479  003304  0E2D               	movlw	low printSortTimer@curTime
 23480  003306  26D9               	addwf	fsr2l,f,c
 23481  003308  0E00               	movlw	high printSortTimer@curTime
 23482  00330A  22DA               	addwfc	fsr2h,f,c
 23483  00330C  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 23484  003310  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 23485  003314  4A49               	infsnz	printSortTimer@i,f,c
 23486  003316  2A4A               	incf	printSortTimer@i+1,f,c
 23487  003318  D7CB               	goto	i2l9891
 23488  00331A                     i2l9901:
 23489                           
 23490                           ;sort.c: 490: }
 23491                           ;sort.c: 491: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 23492  00331A  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 23493  00331E  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 23494  003322  0E00               	movlw	0
 23495  003324  6E04               	movwf	i2___wmul@multiplicand+1,c
 23496  003326  0E3C               	movlw	60
 23497  003328  6E03               	movwf	i2___wmul@multiplicand,c
 23498  00332A  ECF9  F02C         	call	i2___wmul	;wreg free
 23499  00332E  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 23500  003332  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 23501  003336  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 23502  00333A  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 23503  00333E  0E0E               	movlw	14
 23504  003340  6E04               	movwf	i2___wmul@multiplicand+1,c
 23505  003342  0E10               	movlw	16
 23506  003344  6E03               	movwf	i2___wmul@multiplicand,c
 23507  003346  ECF9  F02C         	call	i2___wmul	;wreg free
 23508  00334A  5001               	movf	?i2___wmul,w,c
 23509  00334C  262A               	addwf	??_printSortTimer,f,c
 23510  00334E  5002               	movf	?i2___wmul+1,w,c
 23511  003350  222B               	addwfc	??_printSortTimer+1,f,c
 23512  003352  0101               	movlb	1	; () banked
 23513  003354  510E               	movf	_startTime& (0+255),w,b
 23514  003356  242A               	addwf	??_printSortTimer,w,c
 23515  003358  6E3B               	movwf	printSortTimer@start_sec,c
 23516  00335A  0101               	movlb	1	; () banked
 23517  00335C  510F               	movf	(_startTime+1)& (0+255),w,b
 23518  00335E  202B               	addwfc	??_printSortTimer+1,w,c
 23519  003360  6E3C               	movwf	printSortTimer@start_sec+1,c
 23520                           
 23521                           ;sort.c: 492: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 23522  003362  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 23523  003366  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 23524  00336A  0E00               	movlw	0
 23525  00336C  6E04               	movwf	i2___wmul@multiplicand+1,c
 23526  00336E  0E3C               	movlw	60
 23527  003370  6E03               	movwf	i2___wmul@multiplicand,c
 23528  003372  ECF9  F02C         	call	i2___wmul	;wreg free
 23529  003376  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 23530  00337A  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 23531  00337E  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 23532  003382  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 23533  003386  0E0E               	movlw	14
 23534  003388  6E04               	movwf	i2___wmul@multiplicand+1,c
 23535  00338A  0E10               	movlw	16
 23536  00338C  6E03               	movwf	i2___wmul@multiplicand,c
 23537  00338E  ECF9  F02C         	call	i2___wmul	;wreg free
 23538  003392  5001               	movf	?i2___wmul,w,c
 23539  003394  262A               	addwf	??_printSortTimer,f,c
 23540  003396  5002               	movf	?i2___wmul+1,w,c
 23541  003398  222B               	addwfc	??_printSortTimer+1,f,c
 23542  00339A  502D               	movf	printSortTimer@curTime,w,c
 23543  00339C  242A               	addwf	??_printSortTimer,w,c
 23544  00339E  6E3D               	movwf	printSortTimer@cur_sec,c
 23545  0033A0  502E               	movf	printSortTimer@curTime+1,w,c
 23546  0033A2  202B               	addwfc	??_printSortTimer+1,w,c
 23547  0033A4  6E3E               	movwf	printSortTimer@cur_sec+1,c
 23548                           
 23549                           ;sort.c: 493: unsigned int timeDiff = cur_sec - start_sec;
 23550  0033A6  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 23551  0033AA  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 23552  0033AE  1E2A               	comf	??_printSortTimer,f,c
 23553  0033B0  1E2B               	comf	??_printSortTimer+1,f,c
 23554  0033B2  4A2A               	infsnz	??_printSortTimer,f,c
 23555  0033B4  2A2B               	incf	??_printSortTimer+1,f,c
 23556  0033B6  503D               	movf	printSortTimer@cur_sec,w,c
 23557  0033B8  242A               	addwf	??_printSortTimer,w,c
 23558  0033BA  6E45               	movwf	printSortTimer@timeDiff,c
 23559  0033BC  503E               	movf	printSortTimer@cur_sec+1,w,c
 23560  0033BE  202B               	addwfc	??_printSortTimer+1,w,c
 23561  0033C0  6E46               	movwf	printSortTimer@timeDiff+1,c
 23562                           
 23563                           ;sort.c: 495: total_time = timeDiff;
 23564  0033C2  C045  F0FA         	movff	printSortTimer@timeDiff,_total_time
 23565  0033C6  C046  F0FB         	movff	printSortTimer@timeDiff+1,_total_time+1
 23566                           
 23567                           ;sort.c: 497: if(f_most_recent_sort_time){
 23568  0033CA  0101               	movlb	1	; () banked
 23569  0033CC  5139               	movf	_f_most_recent_sort_time& (0+255),w,b
 23570  0033CE  0101               	movlb	1	; () banked
 23571  0033D0  113A               	iorwf	(_f_most_recent_sort_time+1)& (0+255),w,b
 23572  0033D2  B4D8               	btfsc	status,2,c
 23573  0033D4  D009               	goto	i2l9913
 23574                           
 23575                           ; BSR set to: 1
 23576                           ;sort.c: 498: most_recent_sort_time = total_time;
 23577  0033D6  C0FA  F145         	movff	_total_time,_most_recent_sort_time
 23578  0033DA  C0FB  F146         	movff	_total_time+1,_most_recent_sort_time+1
 23579                           
 23580                           ; BSR set to: 1
 23581                           ;sort.c: 499: f_most_recent_sort_time = 0;
 23582  0033DE  0E00               	movlw	0
 23583  0033E0  0101               	movlb	1	; () banked
 23584  0033E2  6F3A               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
 23585  0033E4  0E00               	movlw	0
 23586  0033E6  6F39               	movwf	_f_most_recent_sort_time& (0+255),b
 23587  0033E8                     i2l9913:
 23588                           
 23589                           ; BSR set to: 1
 23590                           ;sort.c: 500: }
 23591                           ;sort.c: 502: if((total_time - most_recent_sort_time == 42) || (total_time == 179)){
 23592  0033E8  C145  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 23593  0033EC  C146  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 23594  0033F0  1E2A               	comf	??_printSortTimer,f,c
 23595  0033F2  1E2B               	comf	??_printSortTimer+1,f,c
 23596  0033F4  4A2A               	infsnz	??_printSortTimer,f,c
 23597  0033F6  2A2B               	incf	??_printSortTimer+1,f,c
 23598  0033F8  0100               	movlb	0	; () banked
 23599  0033FA  51FA               	movf	_total_time& (0+255),w,b
 23600  0033FC  262A               	addwf	??_printSortTimer,f,c
 23601  0033FE  0100               	movlb	0	; () banked
 23602  003400  51FB               	movf	(_total_time+1)& (0+255),w,b
 23603  003402  222B               	addwfc	??_printSortTimer+1,f,c
 23604  003404  0E2A               	movlw	42
 23605  003406  182A               	xorwf	??_printSortTimer,w,c
 23606  003408  102B               	iorwf	??_printSortTimer+1,w,c
 23607  00340A  B4D8               	btfsc	status,2,c
 23608  00340C  D007               	goto	i2l9917
 23609                           
 23610                           ; BSR set to: 0
 23611  00340E  0EB3               	movlw	179
 23612  003410  0100               	movlb	0	; () banked
 23613  003412  19FA               	xorwf	_total_time& (0+255),w,b
 23614  003414  0100               	movlb	0	; () banked
 23615  003416  11FB               	iorwf	(_total_time+1)& (0+255),w,b
 23616  003418  A4D8               	btfss	status,2,c
 23617  00341A  D003               	goto	i2l9919
 23618  00341C                     i2l9917:
 23619                           
 23620                           ; BSR set to: 0
 23621                           ;sort.c: 503: machine_state = DoneSorting_state;
 23622  00341C  0E02               	movlw	2
 23623  00341E  0100               	movlb	0	; () banked
 23624  003420  6FFC               	movwf	_machine_state& (0+255),b
 23625  003422                     i2l9919:
 23626                           
 23627                           ; BSR set to: 0
 23628                           ;sort.c: 505: }
 23629                           ;sort.c: 507: int min = (timeDiff % 3600) / 60;
 23630  003422  0E0E               	movlw	14
 23631  003424  6E04               	movwf	i2___lwmod@divisor+1,c
 23632  003426  0E10               	movlw	16
 23633  003428  6E03               	movwf	i2___lwmod@divisor,c
 23634  00342A  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 23635  00342E  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 23636  003432  EC94  F02A         	call	i2___lwmod	;wreg free
 23637  003436  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 23638  00343A  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 23639  00343E  0E00               	movlw	0
 23640  003440  6E09               	movwf	i2___lwdiv@divisor+1,c
 23641  003442  0E3C               	movlw	60
 23642  003444  6E08               	movwf	i2___lwdiv@divisor,c
 23643  003446  EC8D  F029         	call	i2___lwdiv	;wreg free
 23644  00344A  C006  F03F         	movff	?i2___lwdiv,printSortTimer@min
 23645  00344E  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@min+1
 23646                           
 23647                           ;sort.c: 508: int sec = (timeDiff % 3600) % 60;
 23648  003452  0E0E               	movlw	14
 23649  003454  6E04               	movwf	i2___lwmod@divisor+1,c
 23650  003456  0E10               	movlw	16
 23651  003458  6E03               	movwf	i2___lwmod@divisor,c
 23652  00345A  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 23653  00345E  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 23654  003462  EC94  F02A         	call	i2___lwmod	;wreg free
 23655  003466  C001  F043         	movff	?i2___lwmod,_printSortTimer$2559
 23656  00346A  C002  F044         	movff	?i2___lwmod+1,_printSortTimer$2559+1
 23657                           
 23658                           ;sort.c: 508: int sec = (timeDiff % 3600) % 60;
 23659  00346E  C043  F001         	movff	_printSortTimer$2559,i2___lwmod@dividend
 23660  003472  C044  F002         	movff	_printSortTimer$2559+1,i2___lwmod@dividend+1
 23661  003476  0E00               	movlw	0
 23662  003478  6E04               	movwf	i2___lwmod@divisor+1,c
 23663  00347A  0E3C               	movlw	60
 23664  00347C  6E03               	movwf	i2___lwmod@divisor,c
 23665  00347E  EC94  F02A         	call	i2___lwmod	;wreg free
 23666  003482  C001  F041         	movff	?i2___lwmod,printSortTimer@sec
 23667  003486  C002  F042         	movff	?i2___lwmod+1,printSortTimer@sec+1
 23668                           
 23669                           ;sort.c: 510: lcdInst(0b10000000);;
 23670  00348A  0E80               	movlw	128
 23671  00348C  ECC9  F02D         	call	i2_lcdInst
 23672                           
 23673                           ;sort.c: 511: printf("SORTING...      ");
 23674  003490  0EB7               	movlw	low STR_64
 23675  003492  6E0D               	movwf	i2printf@f,c
 23676  003494  0EFC               	movlw	high STR_64
 23677  003496  6E0E               	movwf	i2printf@f+1,c
 23678  003498  ECCC  F011         	call	i2_printf	;wreg free
 23679                           
 23680                           ;sort.c: 512: lcdInst(0b11000000);;
 23681  00349C  0EC0               	movlw	192
 23682  00349E  ECC9  F02D         	call	i2_lcdInst
 23683                           
 23684                           ;sort.c: 513: printf("TIME %d:%02d    ", min, sec);
 23685  0034A2  0EC8               	movlw	low STR_65
 23686  0034A4  6E0D               	movwf	i2printf@f,c
 23687  0034A6  0EFC               	movlw	high STR_65
 23688  0034A8  6E0E               	movwf	i2printf@f+1,c
 23689  0034AA  C03F  F00F         	movff	printSortTimer@min,?i2_printf+2
 23690  0034AE  C040  F010         	movff	printSortTimer@min+1,?i2_printf+3
 23691  0034B2  C041  F011         	movff	printSortTimer@sec,?i2_printf+4
 23692  0034B6  C042  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 23693  0034BA  ECCC  F011         	call	i2_printf	;wreg free
 23694                           
 23695                           ;sort.c: 516: if(total_time >= 2){
 23696  0034BE  0100               	movlb	0	; () banked
 23697  0034C0  BFFB               	btfsc	(_total_time+1)& (0+255),7,b
 23698  0034C2  0012               	return	
 23699  0034C4  0100               	movlb	0	; () banked
 23700  0034C6  51FB               	movf	(_total_time+1)& (0+255),w,b
 23701  0034C8  E105               	bnz	i2u938_40
 23702  0034CA  0E02               	movlw	2
 23703  0034CC  0100               	movlb	0	; () banked
 23704  0034CE  5DFA               	subwf	_total_time& (0+255),w,b
 23705  0034D0  A0D8               	btfss	status,0,c
 23706  0034D2  0012               	return	
 23707  0034D4                     i2u938_40:
 23708                           
 23709                           ; BSR set to: 0
 23710                           ;sort.c: 518: if(total_time % 2 == 0){
 23711  0034D4  0100               	movlb	0	; () banked
 23712  0034D6  B1FA               	btfsc	_total_time& (0+255),0,b
 23713  0034D8  0012               	return	
 23714                           
 23715                           ; BSR set to: 0
 23716                           ;sort.c: 520: if(LATBbits.LATB2){
 23717  0034DA  A48A               	btfss	3978,2,c	;volatile
 23718  0034DC  D00E               	goto	i2l9941
 23719                           
 23720                           ; BSR set to: 0
 23721                           ;sort.c: 522: LATBbits.LATB2 = !LATBbits.LATB2;
 23722  0034DE  B48A               	btfsc	3978,2,c	;volatile
 23723  0034E0  D003               	goto	i2u941_40
 23724  0034E2  6A2A               	clrf	??_printSortTimer& (0+255),c
 23725  0034E4  2A2A               	incf	??_printSortTimer& (0+255),f,c
 23726  0034E6  D001               	goto	i2u942_48
 23727  0034E8                     i2u941_40:
 23728  0034E8  6A2A               	clrf	??_printSortTimer& (0+255),c
 23729  0034EA                     i2u942_48:
 23730  0034EA  462A               	rlncf	??_printSortTimer,f,c
 23731  0034EC  462A               	rlncf	??_printSortTimer,f,c
 23732  0034EE  508A               	movf	3978,w,c	;volatile
 23733  0034F0  182A               	xorwf	??_printSortTimer,w,c
 23734  0034F2  0BFB               	andlw	-5
 23735  0034F4  182A               	xorwf	??_printSortTimer,w,c
 23736  0034F6  6E8A               	movwf	3978,c	;volatile
 23737                           
 23738                           ;sort.c: 523: }
 23739  0034F8  0012               	return	
 23740  0034FA                     i2l9941:
 23741                           
 23742                           ;sort.c: 524: else{
 23743                           ;sort.c: 526: for(int i=0; i<46; i++){
 23744  0034FA  0E00               	movlw	0
 23745  0034FC  6E48               	movwf	printSortTimer@i_1161+1,c
 23746  0034FE  0E00               	movlw	0
 23747  003500  6E47               	movwf	printSortTimer@i_1161,c
 23748  003502  BE48               	btfsc	printSortTimer@i_1161+1,7,c
 23749  003504  D006               	goto	i2l9947
 23750  003506  5048               	movf	printSortTimer@i_1161+1,w,c
 23751  003508  E11D               	bnz	i2l902
 23752  00350A  0E2E               	movlw	46
 23753  00350C  5C47               	subwf	printSortTimer@i_1161,w,c
 23754  00350E  B0D8               	btfsc	status,0,c
 23755  003510  D019               	goto	i2l902
 23756  003512                     i2l9947:
 23757                           
 23758                           ;sort.c: 527: LATBbits.LATB2 = !LATBbits.LATB2;
 23759  003512  B48A               	btfsc	3978,2,c	;volatile
 23760  003514  D003               	goto	i2u944_40
 23761  003516  6A2A               	clrf	??_printSortTimer& (0+255),c
 23762  003518  2A2A               	incf	??_printSortTimer& (0+255),f,c
 23763  00351A  D001               	goto	i2u945_48
 23764  00351C                     i2u944_40:
 23765  00351C  6A2A               	clrf	??_printSortTimer& (0+255),c
 23766  00351E                     i2u945_48:
 23767  00351E  462A               	rlncf	??_printSortTimer,f,c
 23768  003520  462A               	rlncf	??_printSortTimer,f,c
 23769  003522  508A               	movf	3978,w,c	;volatile
 23770  003524  182A               	xorwf	??_printSortTimer,w,c
 23771  003526  0BFB               	andlw	-5
 23772  003528  182A               	xorwf	??_printSortTimer,w,c
 23773  00352A  6E8A               	movwf	3978,c	;volatile
 23774                           
 23775                           ;sort.c: 528: delay_ms(45-i);
 23776  00352C  5047               	movf	printSortTimer@i_1161,w,c
 23777  00352E  0800               	sublw	0
 23778  003530  0F2D               	addlw	45
 23779  003532  EC70  F02D         	call	i2_delay_ms
 23780  003536  4A47               	infsnz	printSortTimer@i_1161,f,c
 23781  003538  2A48               	incf	printSortTimer@i_1161+1,f,c
 23782  00353A  BE48               	btfsc	printSortTimer@i_1161+1,7,c
 23783  00353C  D7EA               	goto	i2l9947
 23784  00353E  5048               	movf	printSortTimer@i_1161+1,w,c
 23785  003540  E101               	bnz	i2u946_40
 23786  003542  D7E3               	goto	L19
 23787  003544                     i2u946_40:
 23788  003544                     i2l902:
 23789                           
 23790                           ;sort.c: 529: }
 23791                           ;sort.c: 530: LATBbits.LATB2 = 1;
 23792  003544  848A               	bsf	3978,2,c	;volatile
 23793  003546  0012               	return	
 23794  003548                     __end_of_printSortTimer:
 23795                           	opt stack 0
 23796                           pclatu	equ	0xFFB
 23797                           pclath	equ	0xFFA
 23798                           tblptru	equ	0xFF8
 23799                           tblptrh	equ	0xFF7
 23800                           tblptrl	equ	0xFF6
 23801                           tablat	equ	0xFF5
 23802                           prodh	equ	0xFF4
 23803                           prodl	equ	0xFF3
 23804                           intcon	equ	0xFF2
 23805                           intcon2	equ	0xFF1
 23806                           intcon3	equ	0xFF0
 23807                           indf0	equ	0xFEF
 23808                           postinc0	equ	0xFEE
 23809                           fsr0h	equ	0xFEA
 23810                           fsr0l	equ	0xFE9
 23811                           wreg	equ	0xFE8
 23812                           postdec1	equ	0xFE5
 23813                           fsr1h	equ	0xFE2
 23814                           fsr1l	equ	0xFE1
 23815                           indf2	equ	0xFDF
 23816                           postinc2	equ	0xFDE
 23817                           postdec2	equ	0xFDD
 23818                           fsr2h	equ	0xFDA
 23819                           fsr2l	equ	0xFD9
 23820                           status	equ	0xFD8
 23821                           
 23822 ;; *************** function i2_printf *****************
 23823 ;; Defined at:
 23824 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 23825 ;; Parameters:    Size  Location     Type
 23826 ;;  f               2   12[COMRAM] PTR const unsigned char 
 23827 ;;		 -> STR_129(18), STR_128(18), STR_127(17), STR_126(17), 
 23828 ;;		 -> STR_125(15), STR_124(15), STR_123(18), STR_122(15), 
 23829 ;;		 -> STR_121(18), STR_120(18), STR_119(17), STR_118(17), 
 23830 ;;		 -> STR_117(17), STR_116(17), STR_115(17), STR_114(17), 
 23831 ;;		 -> STR_113(17), STR_112(17), STR_111(18), STR_110(17), 
 23832 ;;		 -> STR_109(15), STR_108(15), STR_107(15), STR_106(17), 
 23833 ;;		 -> STR_105(17), STR_104(17), STR_103(16), STR_102(17), 
 23834 ;;		 -> STR_101(17), STR_100(17), STR_99(17), STR_98(17), 
 23835 ;;		 -> STR_97(17), STR_96(15), STR_95(11), STR_94(17), 
 23836 ;;		 -> STR_93(11), STR_92(17), STR_91(14), STR_90(15), 
 23837 ;;		 -> STR_89(14), STR_88(10), STR_87(9), STR_86(9), 
 23838 ;;		 -> STR_85(10), STR_84(10), STR_83(16), STR_82(15), 
 23839 ;;		 -> STR_81(3), STR_80(15), STR_79(13), STR_78(14), 
 23840 ;;		 -> STR_77(8), STR_76(14), STR_75(15), STR_74(12), 
 23841 ;;		 -> STR_73(14), STR_72(17), STR_71(14), STR_70(15), 
 23842 ;;		 -> STR_69(17), STR_68(17), STR_67(7), STR_66(21), 
 23843 ;;		 -> STR_65(17), STR_64(17), STR_63(24), STR_50(17), 
 23844 ;;		 -> STR_49(17), STR_48(17), STR_47(17), STR_46(17), 
 23845 ;;		 -> STR_45(17), STR_44(17), STR_43(17), STR_42(17), 
 23846 ;;		 -> STR_41(17), STR_40(17), STR_39(17), STR_38(17), 
 23847 ;;		 -> STR_37(17), STR_36(17), STR_35(17), STR_34(17), 
 23848 ;;		 -> STR_33(17), STR_32(17), STR_31(17), STR_30(17), 
 23849 ;;		 -> STR_29(3), STR_28(17), STR_27(17), STR_26(17), 
 23850 ;;		 -> STR_25(17), STR_24(17), STR_23(14), STR_22(10), 
 23851 ;;		 -> STR_21(24), STR_7(7), STR_6(17), STR_5(18), 
 23852 ;;		 -> STR_4(16), STR_3(18), STR_2(14), STR_1(18), 
 23853 ;; Auto vars:     Size  Location     Type
 23854 ;;  printf          4    0        struct .
 23855 ;;  printf          2   39[COMRAM] int 
 23856 ;;  printf          2   35[COMRAM] unsigned int 
 23857 ;;  printf          2   33[COMRAM] unsigned int 
 23858 ;;  printf          2   31[COMRAM] PTR void [1]
 23859 ;;		 -> ?i2_printf(2), ?_printf(2), 
 23860 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 23861 ;;		 -> STR_130(7), count_total(2), printRTC@month(4), UI@month(4), 
 23862 ;;  printf          1   38[COMRAM] char 
 23863 ;;  printf          1   37[COMRAM] unsigned char 
 23864 ;;  printf          1   28[COMRAM] char 
 23865 ;; Return value:  Size  Location     Type
 23866 ;;                  2   12[COMRAM] int 
 23867 ;; Registers used:
 23868 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23869 ;; Tracked objects:
 23870 ;;		On entry : 0/0
 23871 ;;		On exit  : 0/0
 23872 ;;		Unchanged: 0/0
 23873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23874 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23875 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23876 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23877 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23878 ;;Total ram usage:       29 bytes
 23879 ;; Hardware stack levels used:    1
 23880 ;; Hardware stack levels required when called:    2
 23881 ;; This function calls:
 23882 ;;		i2___lwdiv
 23883 ;;		i2___lwmod
 23884 ;;		i2___wmul
 23885 ;;		i2_isdigit
 23886 ;;		i2_putch
 23887 ;; This function is called by:
 23888 ;;		_change_state_to_menu_11
 23889 ;;		_change_state_to_menu_23
 23890 ;;		_change_state_to_logs_11
 23891 ;;		_change_state_to_logs_12
 23892 ;;		_change_state_to_logs_22
 23893 ;;		_change_state_to_logs_23
 23894 ;;		_change_state_to_logs_33
 23895 ;;		_change_state_to_logs_34
 23896 ;;		_printSortTimer
 23897 ;;		i2_change_state_to_menu_start
 23898 ;;		i2_change_state_to_menu_12
 23899 ;;		i2_change_state_to_menu_22
 23900 ;;		i2_printRTC
 23901 ;; This function uses a non-reentrant model
 23902 ;;
 23903                           
 23904                           	psect	text87
 23905  002398                     __ptext87:
 23906                           	opt stack 0
 23907  002398                     i2_printf:
 23908                           	opt stack 20
 23909                           
 23910                           ;doprnt.c: 466: va_list ap;
 23911                           ;doprnt.c: 499: signed char c;
 23912                           ;doprnt.c: 501: int width;
 23913                           ;doprnt.c: 506: signed char prec;
 23914                           ;doprnt.c: 508: unsigned char flag;
 23915                           ;doprnt.c: 523: union {
 23916                           ;doprnt.c: 524: unsigned long vd;
 23917                           ;doprnt.c: 525: double integ;
 23918                           ;doprnt.c: 526: } tmpval;
 23919                           ;doprnt.c: 528: unsigned int val;
 23920                           ;doprnt.c: 529: unsigned len;
 23921                           ;doprnt.c: 530: const char * cp;
 23922                           ;doprnt.c: 533: *ap = __va_start();
 23923                           
 23924                           ;incstack = 0
 23925  002398  0E0F               	movlw	low (?i2_printf+2)
 23926  00239A  6E20               	movwf	i2printf@ap,c
 23927  00239C  0E00               	movlw	high (?i2_printf+2)
 23928  00239E  6E21               	movwf	i2printf@ap+1,c
 23929                           
 23930                           ;doprnt.c: 536: while(c = *f++) {
 23931  0023A0  D1A4               	goto	i2l7085
 23932  0023A2                     i2l6955:
 23933                           
 23934                           ;doprnt.c: 538: if(c != '%')
 23935  0023A2  0E25               	movlw	37
 23936  0023A4  1827               	xorwf	i2printf@c,w,c
 23937  0023A6  B4D8               	btfsc	status,2,c
 23938  0023A8  D004               	goto	i2l6959
 23939                           
 23940                           ;doprnt.c: 540: {
 23941                           ;doprnt.c: 541: (putch(c) );
 23942  0023AA  5027               	movf	i2printf@c,w,c
 23943  0023AC  ECC3  F02D         	call	i2_putch
 23944                           
 23945                           ;doprnt.c: 542: continue;
 23946  0023B0  D19C               	goto	i2l7085
 23947  0023B2                     i2l6959:
 23948                           
 23949                           ;doprnt.c: 543: }
 23950                           ;doprnt.c: 546: width = 0;
 23951  0023B2  0E00               	movlw	0
 23952  0023B4  6E29               	movwf	i2printf@width+1,c
 23953  0023B6  0E00               	movlw	0
 23954  0023B8  6E28               	movwf	i2printf@width,c
 23955                           
 23956                           ;doprnt.c: 548: flag = 0;
 23957  0023BA  0E00               	movlw	0
 23958  0023BC  6E26               	movwf	i2printf@flag,c
 23959                           
 23960                           ;doprnt.c: 551: switch(*f) {
 23961                           
 23962                           ;doprnt.c: 550: for(;;) {
 23963  0023BE  D003               	goto	i2l6965
 23964  0023C0                     i2l6961:
 23965                           
 23966                           ;doprnt.c: 580: flag |= 0x04;
 23967  0023C0  8426               	bsf	i2printf@flag,2,c
 23968                           
 23969                           ;doprnt.c: 581: f++;
 23970  0023C2  4A0D               	infsnz	i2printf@f,f,c
 23971  0023C4  2A0E               	incf	i2printf@f+1,f,c
 23972  0023C6                     i2l6965:
 23973  0023C6  C00D  FFF6         	movff	i2printf@f,tblptrl
 23974  0023CA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 23975  0023CE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 23976  0023CE  6AF8               	clrf	tblptru,c
 23977  0023D0                     	endif
 23978  0023D0                     	if	0	;tblptru may be non-zero
 23979  0023D0                     	endif
 23980  0023D0  0008               	tblrd		*
 23981  0023D2  50F5               	movf	tablat,w,c
 23982                           
 23983                           ; Switch size 1, requested type "space"
 23984                           ; Number of cases is 1, Range of values is 48 to 48
 23985                           ; switch strategies available:
 23986                           ; Name         Instructions Cycles
 23987                           ; simple_byte            4     3 (average)
 23988                           ;	Chosen strategy is simple_byte
 23989  0023D4  0A30               	xorlw	48	; case 48
 23990  0023D6  B4D8               	btfsc	status,2,c
 23991  0023D8  D7F3               	goto	i2l6961
 23992                           
 23993                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 23994                           
 23995                           ;doprnt.c: 586: }
 23996                           
 23997                           ;doprnt.c: 585: break;
 23998  0023DA  C00D  FFF6         	movff	i2printf@f,tblptrl
 23999  0023DE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24000  0023E2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24001  0023E2  6AF8               	clrf	tblptru,c
 24002  0023E4                     	endif
 24003  0023E4                     	if	0	;tblptru may be non-zero
 24004  0023E4                     	endif
 24005  0023E4  0008               	tblrd		*
 24006  0023E6  50F5               	movf	tablat,w,c
 24007  0023E8  EC53  F02D         	call	i2_isdigit
 24008  0023EC  A0D8               	btfss	status,0,c
 24009  0023EE  D0A6               	goto	i2l7013
 24010                           
 24011                           ;doprnt.c: 598: width = 0;
 24012  0023F0  0E00               	movlw	0
 24013  0023F2  6E29               	movwf	i2printf@width+1,c
 24014  0023F4  0E00               	movlw	0
 24015  0023F6  6E28               	movwf	i2printf@width,c
 24016  0023F8                     i2l6971:
 24017                           
 24018                           ;doprnt.c: 600: width *= 10;
 24019  0023F8  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 24020  0023FC  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 24021  002400  0E00               	movlw	0
 24022  002402  6E04               	movwf	i2___wmul@multiplicand+1,c
 24023  002404  0E0A               	movlw	10
 24024  002406  6E03               	movwf	i2___wmul@multiplicand,c
 24025  002408  ECF9  F02C         	call	i2___wmul	;wreg free
 24026  00240C  C001  F028         	movff	?i2___wmul,i2printf@width
 24027  002410  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 24028                           
 24029                           ;doprnt.c: 601: width += *f++ - '0';
 24030  002414  0ED0               	movlw	208
 24031  002416  6E19               	movwf	??i2_printf& (0+255),c
 24032  002418  0EFF               	movlw	255
 24033  00241A  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 24034  00241C  C00D  FFF6         	movff	i2printf@f,tblptrl
 24035  002420  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24036  002424                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24037  002424  6AF8               	clrf	tblptru,c
 24038  002426                     	endif
 24039  002426                     	if	0	;tblptru may be non-zero
 24040  002426                     	endif
 24041  002426  0008               	tblrd		*
 24042  002428  50F5               	movf	tablat,w,c
 24043  00242A  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 24044  00242C  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 24045  00242E  5019               	movf	??i2_printf,w,c
 24046  002430  261B               	addwf	??i2_printf+2,f,c
 24047  002432  501A               	movf	??i2_printf+1,w,c
 24048  002434  221C               	addwfc	??i2_printf+3,f,c
 24049  002436  501B               	movf	??i2_printf+2,w,c
 24050  002438  2628               	addwf	i2printf@width,f,c
 24051  00243A  501C               	movf	??i2_printf+3,w,c
 24052  00243C  2229               	addwfc	i2printf@width+1,f,c
 24053  00243E  4A0D               	infsnz	i2printf@f,f,c
 24054  002440  2A0E               	incf	i2printf@f+1,f,c
 24055                           
 24056                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 24057  002442  C00D  FFF6         	movff	i2printf@f,tblptrl
 24058  002446  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24059  00244A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24060  00244A  6AF8               	clrf	tblptru,c
 24061  00244C                     	endif
 24062  00244C                     	if	0	;tblptru may be non-zero
 24063  00244C                     	endif
 24064  00244C  0008               	tblrd		*
 24065  00244E  50F5               	movf	tablat,w,c
 24066  002450  EC53  F02D         	call	i2_isdigit
 24067  002454  A0D8               	btfss	status,0,c
 24068  002456  D072               	goto	i2l7013
 24069  002458  D7CF               	goto	i2l6971
 24070  00245A                     i2l6979:
 24071                           
 24072                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 24073  00245A  C020  FFD9         	movff	i2printf@ap,fsr2l
 24074  00245E  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 24075  002462  CFDE F01E          	movff	postinc2,i2printf@cp
 24076  002466  CFDD F01F          	movff	postdec2,i2printf@cp+1
 24077  00246A  0E02               	movlw	2
 24078  00246C  2620               	addwf	i2printf@ap,f,c
 24079  00246E  0E00               	movlw	0
 24080  002470  2221               	addwfc	i2printf@ap+1,f,c
 24081                           
 24082                           ;doprnt.c: 740: if(!cp)
 24083  002472  501E               	movf	i2printf@cp,w,c
 24084  002474  101F               	iorwf	i2printf@cp+1,w,c
 24085  002476  A4D8               	btfss	status,2,c
 24086  002478  D004               	goto	i2l6987
 24087                           
 24088                           ;doprnt.c: 741: cp = "(null)";
 24089  00247A  0EB6               	movlw	low STR_130
 24090  00247C  6E1E               	movwf	i2printf@cp,c
 24091  00247E  0EFF               	movlw	high STR_130
 24092  002480  6E1F               	movwf	i2printf@cp+1,c
 24093  002482                     i2l6987:
 24094                           
 24095                           ;doprnt.c: 745: len = 0;
 24096  002482  0E00               	movlw	0
 24097  002484  6E23               	movwf	i2printf@len+1,c
 24098  002486  0E00               	movlw	0
 24099  002488  6E22               	movwf	i2printf@len,c
 24100                           
 24101                           ;doprnt.c: 746: while(cp[len])
 24102  00248A  D002               	goto	i2l6991
 24103  00248C                     i2l6989:
 24104                           
 24105                           ;doprnt.c: 747: len++;
 24106  00248C  4A22               	infsnz	i2printf@len,f,c
 24107  00248E  2A23               	incf	i2printf@len+1,f,c
 24108  002490                     i2l6991:
 24109  002490  5022               	movf	i2printf@len,w,c
 24110  002492  241E               	addwf	i2printf@cp,w,c
 24111  002494  6E19               	movwf	??i2_printf& (0+255),c
 24112  002496  5023               	movf	i2printf@len+1,w,c
 24113  002498  201F               	addwfc	i2printf@cp+1,w,c
 24114  00249A  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 24115  00249C  C019  FFF6         	movff	??i2_printf,tblptrl
 24116  0024A0  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 24117  0024A4  0E00               	movlw	low (__mediumconst shr (0+16))
 24118  0024A6  6EF8               	movwf	tblptru,c
 24119  0024A8  0E0F               	movlw	(high __ramtop+-1)
 24120  0024AA  64F7               	cpfsgt	tblptrh,c
 24121  0024AC  D003               	bra	i2u564_47
 24122  0024AE  0008               	tblrd		*
 24123  0024B0  50F5               	movf	tablat,w,c
 24124  0024B2  D005               	bra	i2u564_40
 24125  0024B4                     i2u564_47:
 24126  0024B4  CFF6 FFE9          	movff	tblptrl,fsr0l
 24127  0024B8  CFF7 FFEA          	movff	tblptrh,fsr0h
 24128  0024BC  50EF               	movf	indf0,w,c
 24129  0024BE                     i2u564_40:
 24130  0024BE  0900               	iorlw	0
 24131  0024C0  A4D8               	btfss	status,2,c
 24132  0024C2  D7E4               	goto	i2l6989
 24133                           
 24134                           ;doprnt.c: 757: if(width > len)
 24135  0024C4  5028               	movf	i2printf@width,w,c
 24136  0024C6  5C22               	subwf	i2printf@len,w,c
 24137  0024C8  5029               	movf	i2printf@width+1,w,c
 24138  0024CA  5823               	subwfb	i2printf@len+1,w,c
 24139  0024CC  B0D8               	btfsc	status,0,c
 24140  0024CE  D005               	goto	i2l6997
 24141                           
 24142                           ;doprnt.c: 758: width -= len;
 24143  0024D0  5022               	movf	i2printf@len,w,c
 24144  0024D2  5E28               	subwf	i2printf@width,f,c
 24145  0024D4  5023               	movf	i2printf@len+1,w,c
 24146  0024D6  5A29               	subwfb	i2printf@width+1,f,c
 24147  0024D8  D008               	goto	i2l7001
 24148  0024DA                     i2l6997:
 24149                           
 24150                           ;doprnt.c: 759: else
 24151                           ;doprnt.c: 760: width = 0;
 24152  0024DA  0E00               	movlw	0
 24153  0024DC  6E29               	movwf	i2printf@width+1,c
 24154  0024DE  0E00               	movlw	0
 24155  0024E0  6E28               	movwf	i2printf@width,c
 24156                           
 24157                           ;doprnt.c: 764: while(width--)
 24158  0024E2  D003               	goto	i2l7001
 24159  0024E4                     i2l6999:
 24160                           
 24161                           ;doprnt.c: 765: (putch(' ') );
 24162  0024E4  0E20               	movlw	32
 24163  0024E6  ECC3  F02D         	call	i2_putch
 24164  0024EA                     i2l7001:
 24165  0024EA  0628               	decf	i2printf@width,f,c
 24166  0024EC  A0D8               	btfss	status,0,c
 24167  0024EE  0629               	decf	i2printf@width+1,f,c
 24168  0024F0  2828               	incf	i2printf@width,w,c
 24169  0024F2  E1F8               	bnz	i2l6999
 24170  0024F4  2829               	incf	i2printf@width+1,w,c
 24171  0024F6  B4D8               	btfsc	status,2,c
 24172  0024F8  D016               	goto	i2l7007
 24173  0024FA  D7F4               	goto	i2l6999
 24174  0024FC                     i2l7003:
 24175                           
 24176                           ;doprnt.c: 768: (putch(*cp++) );
 24177  0024FC  C01E  FFF6         	movff	i2printf@cp,tblptrl
 24178  002500  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 24179  002504  0E00               	movlw	low (__mediumconst shr (0+16))
 24180  002506  6EF8               	movwf	tblptru,c
 24181  002508  0E0F               	movlw	(high __ramtop+-1)
 24182  00250A  64F7               	cpfsgt	tblptrh,c
 24183  00250C  D003               	bra	i2u568_47
 24184  00250E  0008               	tblrd		*
 24185  002510  50F5               	movf	tablat,w,c
 24186  002512  D005               	bra	i2u568_40
 24187  002514                     i2u568_47:
 24188  002514  CFF6 FFE9          	movff	tblptrl,fsr0l
 24189  002518  CFF7 FFEA          	movff	tblptrh,fsr0h
 24190  00251C  50EF               	movf	indf0,w,c
 24191  00251E                     i2u568_40:
 24192  00251E  ECC3  F02D         	call	i2_putch
 24193  002522  4A1E               	infsnz	i2printf@cp,f,c
 24194  002524  2A1F               	incf	i2printf@cp+1,f,c
 24195  002526                     i2l7007:
 24196  002526  0622               	decf	i2printf@len,f,c
 24197  002528  A0D8               	btfss	status,0,c
 24198  00252A  0623               	decf	i2printf@len+1,f,c
 24199  00252C  2822               	incf	i2printf@len,w,c
 24200  00252E  E1E6               	bnz	i2l7003
 24201  002530  2823               	incf	i2printf@len+1,w,c
 24202  002532  B4D8               	btfsc	status,2,c
 24203  002534  D0DA               	goto	i2l7085
 24204  002536  D7E2               	goto	i2l7003
 24205  002538                     i2l7009:
 24206                           
 24207                           ;doprnt.c: 818: flag |= 0x40;
 24208  002538  8C26               	bsf	i2printf@flag,6,c
 24209                           
 24210                           ;doprnt.c: 822: }
 24211                           
 24212                           ;doprnt.c: 819: break;
 24213  00253A  D01B               	goto	i2l1517
 24214  00253C                     i2l7013:
 24215  00253C  C00D  FFF6         	movff	i2printf@f,tblptrl
 24216  002540  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24217  002544  4A0D               	infsnz	i2printf@f,f,c
 24218  002546  2A0E               	incf	i2printf@f+1,f,c
 24219  002548                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24220  002548  6AF8               	clrf	tblptru,c
 24221  00254A                     	endif
 24222  00254A                     	if	0	;tblptru may be non-zero
 24223  00254A                     	endif
 24224  00254A  0008               	tblrd		*
 24225  00254C  CFF5 F027          	movff	tablat,i2printf@c
 24226  002550  5027               	movf	i2printf@c,w,c
 24227                           
 24228                           ; Switch size 1, requested type "space"
 24229                           ; Number of cases is 5, Range of values is 0 to 117
 24230                           ; switch strategies available:
 24231                           ; Name         Instructions Cycles
 24232                           ; simple_byte           16     9 (average)
 24233                           ;	Chosen strategy is simple_byte
 24234  002552  0A00               	xorlw	0	; case 0
 24235  002554  B4D8               	btfsc	status,2,c
 24236  002556  0012               	return	
 24237  002558  0A64               	xorlw	100	; case 100
 24238  00255A  B4D8               	btfsc	status,2,c
 24239  00255C  D00A               	goto	i2l1517
 24240  00255E  0A0D               	xorlw	13	; case 105
 24241  002560  B4D8               	btfsc	status,2,c
 24242  002562  D007               	goto	i2l1517
 24243  002564  0A1A               	xorlw	26	; case 115
 24244  002566  B4D8               	btfsc	status,2,c
 24245  002568  D778               	goto	i2l6979
 24246  00256A  0A06               	xorlw	6	; case 117
 24247  00256C  B4D8               	btfsc	status,2,c
 24248  00256E  D7E4               	goto	i2l7009
 24249  002570  D0BC               	goto	i2l7085
 24250  002572                     i2l1517:
 24251                           
 24252                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 24253  002572  BC26               	btfsc	i2printf@flag,6,c
 24254  002574  D015               	goto	i2l7025
 24255                           
 24256                           ;doprnt.c: 1253: {
 24257                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 24258  002576  C020  FFD9         	movff	i2printf@ap,fsr2l
 24259  00257A  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 24260  00257E  CFDE F024          	movff	postinc2,i2printf@val
 24261  002582  CFDD F025          	movff	postdec2,i2printf@val+1
 24262  002586  0E02               	movlw	2
 24263  002588  2620               	addwf	i2printf@ap,f,c
 24264  00258A  0E00               	movlw	0
 24265  00258C  2221               	addwfc	i2printf@ap+1,f,c
 24266                           
 24267                           ;doprnt.c: 1261: if((int)val < 0) {
 24268  00258E  AE25               	btfss	i2printf@val+1,7,c
 24269  002590  D013               	goto	i2l7029
 24270                           
 24271                           ;doprnt.c: 1262: flag |= 0x03;
 24272  002592  0E03               	movlw	3
 24273  002594  1226               	iorwf	i2printf@flag,f,c
 24274                           
 24275                           ;doprnt.c: 1263: val = -val;
 24276  002596  6C24               	negf	i2printf@val,c
 24277  002598  1E25               	comf	i2printf@val+1,f,c
 24278  00259A  B0D8               	btfsc	status,0,c
 24279  00259C  2A25               	incf	i2printf@val+1,f,c
 24280                           
 24281                           ;doprnt.c: 1264: }
 24282                           ;doprnt.c: 1266: }
 24283  00259E  D00C               	goto	i2l7029
 24284  0025A0                     i2l7025:
 24285                           
 24286                           ;doprnt.c: 1268: else
 24287                           ;doprnt.c: 1273: {
 24288                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 24289  0025A0  C020  FFD9         	movff	i2printf@ap,fsr2l
 24290  0025A4  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 24291  0025A8  CFDE F024          	movff	postinc2,i2printf@val
 24292  0025AC  CFDD F025          	movff	postdec2,i2printf@val+1
 24293  0025B0  0E02               	movlw	2
 24294  0025B2  2620               	addwf	i2printf@ap,f,c
 24295  0025B4  0E00               	movlw	0
 24296  0025B6  2221               	addwfc	i2printf@ap+1,f,c
 24297  0025B8                     i2l7029:
 24298                           
 24299                           ;doprnt.c: 1287: }
 24300                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 24301  0025B8  0E01               	movlw	1
 24302  0025BA  6E27               	movwf	i2printf@c,c
 24303  0025BC                     i2l7031:
 24304  0025BC  0E05               	movlw	5
 24305  0025BE  1827               	xorwf	i2printf@c,w,c
 24306  0025C0  B4D8               	btfsc	status,2,c
 24307  0025C2  D015               	goto	i2l7043
 24308                           
 24309                           ;doprnt.c: 1306: if(val < dpowers[c])
 24310  0025C4  5027               	movf	i2printf@c,w,c
 24311  0025C6  0D02               	mullw	2
 24312  0025C8  0EAE               	movlw	low _dpowers
 24313  0025CA  24F3               	addwf	prodl,w,c
 24314  0025CC  6EF6               	movwf	tblptrl,c
 24315  0025CE  0EFA               	movlw	high _dpowers
 24316  0025D0  20F4               	addwfc	prodh,w,c
 24317  0025D2  6EF7               	movwf	tblptrh,c
 24318  0025D4                     	if	1	;There are 3 active tblptr bytes
 24319  0025D4  6AF8               	clrf	tblptru,c
 24320  0025D6  0E00               	movlw	low (__mediumconst shr (0+16))
 24321  0025D8  22F8               	addwfc	tblptru,f,c
 24322  0025DA                     	endif
 24323  0025DA  0009               	tblrd		*+
 24324  0025DC  50F5               	movf	tablat,w,c
 24325  0025DE  5C24               	subwf	i2printf@val,w,c
 24326  0025E0  0009               	tblrd		*+
 24327  0025E2  50F5               	movf	tablat,w,c
 24328  0025E4  5825               	subwfb	i2printf@val+1,w,c
 24329  0025E6  A0D8               	btfss	status,0,c
 24330  0025E8  D002               	goto	i2l7043
 24331                           
 24332                           ;doprnt.c: 1307: break;
 24333  0025EA  2A27               	incf	i2printf@c,f,c
 24334  0025EC  D7E7               	goto	i2l7031
 24335  0025EE                     i2l7043:
 24336                           
 24337                           ;doprnt.c: 1345: if(width && flag & 0x03)
 24338  0025EE  5028               	movf	i2printf@width,w,c
 24339  0025F0  1029               	iorwf	i2printf@width+1,w,c
 24340  0025F2  B4D8               	btfsc	status,2,c
 24341  0025F4  D009               	goto	i2l7049
 24342  0025F6  C026  F019         	movff	i2printf@flag,??i2_printf
 24343  0025FA  0E03               	movlw	3
 24344  0025FC  1619               	andwf	??i2_printf,f,c
 24345  0025FE  B4D8               	btfsc	status,2,c
 24346  002600  D003               	goto	i2l7049
 24347                           
 24348                           ;doprnt.c: 1346: width--;
 24349  002602  0628               	decf	i2printf@width,f,c
 24350  002604  A0D8               	btfss	status,0,c
 24351  002606  0629               	decf	i2printf@width+1,f,c
 24352  002608                     i2l7049:
 24353                           
 24354                           ;doprnt.c: 1381: if(width > c)
 24355  002608  0E80               	movlw	128
 24356  00260A  BE27               	btfsc	i2printf@c,7,c
 24357  00260C  0E7F               	movlw	127
 24358  00260E  6E19               	movwf	??i2_printf& (0+255),c
 24359  002610  5028               	movf	i2printf@width,w,c
 24360  002612  5C27               	subwf	i2printf@c,w,c
 24361  002614  5029               	movf	i2printf@width+1,w,c
 24362  002616  0A80               	xorlw	128
 24363  002618  5819               	subwfb	??i2_printf& (0+255),w,c
 24364  00261A  B0D8               	btfsc	status,0,c
 24365  00261C  D007               	goto	i2l7053
 24366                           
 24367                           ;doprnt.c: 1382: width -= c;
 24368  00261E  5027               	movf	i2printf@c,w,c
 24369  002620  5E28               	subwf	i2printf@width,f,c
 24370  002622  0E00               	movlw	0
 24371  002624  BE27               	btfsc	i2printf@c,7,c
 24372  002626  0EFF               	movlw	255
 24373  002628  5A29               	subwfb	i2printf@width+1,f,c
 24374  00262A  D004               	goto	i2l7055
 24375  00262C                     i2l7053:
 24376                           
 24377                           ;doprnt.c: 1383: else
 24378                           ;doprnt.c: 1384: width = 0;
 24379  00262C  0E00               	movlw	0
 24380  00262E  6E29               	movwf	i2printf@width+1,c
 24381  002630  0E00               	movlw	0
 24382  002632  6E28               	movwf	i2printf@width,c
 24383  002634                     i2l7055:
 24384                           
 24385                           ;doprnt.c: 1387: if(flag & 0x04) {
 24386  002634  A426               	btfss	i2printf@flag,2,c
 24387  002636  D014               	goto	i2l7067
 24388                           
 24389                           ;doprnt.c: 1392: if(flag & 0x03)
 24390  002638  C026  F019         	movff	i2printf@flag,??i2_printf
 24391  00263C  0E03               	movlw	3
 24392  00263E  1619               	andwf	??i2_printf,f,c
 24393  002640  B4D8               	btfsc	status,2,c
 24394  002642  D003               	goto	i2l7061
 24395                           
 24396                           ;doprnt.c: 1393: (putch('-') );
 24397  002644  0E2D               	movlw	45
 24398  002646  ECC3  F02D         	call	i2_putch
 24399  00264A                     i2l7061:
 24400                           
 24401                           ;doprnt.c: 1415: if(width)
 24402  00264A  5028               	movf	i2printf@width,w,c
 24403  00264C  1029               	iorwf	i2printf@width+1,w,c
 24404  00264E  B4D8               	btfsc	status,2,c
 24405  002650  D01E               	goto	i2l7077
 24406                           
 24407                           ;doprnt.c: 1417: (putch('0') );
 24408                           
 24409                           ;doprnt.c: 1416: do
 24410  002652  0E30               	movlw	48
 24411  002654  ECC3  F02D         	call	i2_putch
 24412                           
 24413                           ;doprnt.c: 1418: while(--width);
 24414  002658  0628               	decf	i2printf@width,f,c
 24415  00265A  A0D8               	btfss	status,0,c
 24416  00265C  0629               	decf	i2printf@width+1,f,c
 24417  00265E  D7F5               	goto	i2l7061
 24418  002660                     i2l7067:
 24419                           
 24420                           ;doprnt.c: 1422: {
 24421                           ;doprnt.c: 1424: if(width
 24422                           ;doprnt.c: 1428: )
 24423  002660  5028               	movf	i2printf@width,w,c
 24424  002662  1029               	iorwf	i2printf@width+1,w,c
 24425  002664  B4D8               	btfsc	status,2,c
 24426  002666  D00A               	goto	i2l7073
 24427  002668                     i2l7069:
 24428                           
 24429                           ;doprnt.c: 1430: (putch(' ') );
 24430  002668  0E20               	movlw	32
 24431  00266A  ECC3  F02D         	call	i2_putch
 24432                           
 24433                           ;doprnt.c: 1431: while(--width);
 24434  00266E  0628               	decf	i2printf@width,f,c
 24435  002670  A0D8               	btfss	status,0,c
 24436  002672  0629               	decf	i2printf@width+1,f,c
 24437  002674  5028               	movf	i2printf@width,w,c
 24438  002676  1029               	iorwf	i2printf@width+1,w,c
 24439  002678  A4D8               	btfss	status,2,c
 24440  00267A  D7F6               	goto	i2l7069
 24441  00267C                     i2l7073:
 24442                           
 24443                           ;doprnt.c: 1438: if(flag & 0x03)
 24444  00267C  C026  F019         	movff	i2printf@flag,??i2_printf
 24445  002680  0E03               	movlw	3
 24446  002682  1619               	andwf	??i2_printf,f,c
 24447  002684  B4D8               	btfsc	status,2,c
 24448  002686  D003               	goto	i2l7077
 24449                           
 24450                           ;doprnt.c: 1439: (putch('-') );
 24451  002688  0E2D               	movlw	45
 24452  00268A  ECC3  F02D         	call	i2_putch
 24453  00268E                     i2l7077:
 24454                           
 24455                           ;doprnt.c: 1469: }
 24456                           ;doprnt.c: 1472: prec = c;
 24457  00268E  C027  F01D         	movff	i2printf@c,i2printf@prec
 24458                           
 24459                           ;doprnt.c: 1474: while(prec--) {
 24460  002692  D027               	goto	i2l7083
 24461  002694                     i2l7079:
 24462                           
 24463                           ;doprnt.c: 1478: {
 24464                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 24465  002694  501D               	movf	i2printf@prec,w,c
 24466  002696  0D02               	mullw	2
 24467  002698  0EAE               	movlw	low _dpowers
 24468  00269A  24F3               	addwf	prodl,w,c
 24469  00269C  6EF6               	movwf	tblptrl,c
 24470  00269E  0EFA               	movlw	high _dpowers
 24471  0026A0  20F4               	addwfc	prodh,w,c
 24472  0026A2  6EF7               	movwf	tblptrh,c
 24473  0026A4                     	if	1	;There are 3 active tblptr bytes
 24474  0026A4  6AF8               	clrf	tblptru,c
 24475  0026A6  0E00               	movlw	low (__mediumconst shr (0+16))
 24476  0026A8  22F8               	addwfc	tblptru,f,c
 24477  0026AA                     	endif
 24478  0026AA  0009               	tblrd		*+
 24479  0026AC  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 24480  0026B0  000A               	tblrd		*-
 24481  0026B2  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 24482  0026B6  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 24483  0026BA  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 24484  0026BE  EC8D  F029         	call	i2___lwdiv	;wreg free
 24485  0026C2  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 24486  0026C6  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 24487  0026CA  0E00               	movlw	0
 24488  0026CC  6E04               	movwf	i2___lwmod@divisor+1,c
 24489  0026CE  0E0A               	movlw	10
 24490  0026D0  6E03               	movwf	i2___lwmod@divisor,c
 24491  0026D2  EC94  F02A         	call	i2___lwmod	;wreg free
 24492  0026D6  5001               	movf	?i2___lwmod,w,c
 24493  0026D8  0F30               	addlw	48
 24494  0026DA  6E27               	movwf	i2printf@c,c
 24495                           
 24496                           ;doprnt.c: 1523: }
 24497                           ;doprnt.c: 1524: (putch(c) );
 24498  0026DC  5027               	movf	i2printf@c,w,c
 24499  0026DE  ECC3  F02D         	call	i2_putch
 24500  0026E2                     i2l7083:
 24501  0026E2  061D               	decf	i2printf@prec,f,c
 24502  0026E4  281D               	incf	i2printf@prec,w,c
 24503  0026E6  A4D8               	btfss	status,2,c
 24504  0026E8  D7D5               	goto	i2l7079
 24505  0026EA                     i2l7085:
 24506  0026EA  C00D  FFF6         	movff	i2printf@f,tblptrl
 24507  0026EE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24508  0026F2  4A0D               	infsnz	i2printf@f,f,c
 24509  0026F4  2A0E               	incf	i2printf@f+1,f,c
 24510  0026F6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24511  0026F6  6AF8               	clrf	tblptru,c
 24512  0026F8                     	endif
 24513  0026F8                     	if	0	;tblptru may be non-zero
 24514  0026F8                     	endif
 24515  0026F8  0008               	tblrd		*
 24516  0026FA  CFF5 F027          	movff	tablat,i2printf@c
 24517  0026FE  5027               	movf	i2printf@c,w,c
 24518  002700  B4D8               	btfsc	status,2,c
 24519  002702  0012               	return	
 24520  002704  D64E               	goto	i2l6955
 24521  002706                     __end_ofi2_printf:
 24522                           	opt stack 0
 24523                           pclatu	equ	0xFFB
 24524                           pclath	equ	0xFFA
 24525                           tblptru	equ	0xFF8
 24526                           tblptrh	equ	0xFF7
 24527                           tblptrl	equ	0xFF6
 24528                           tablat	equ	0xFF5
 24529                           prodh	equ	0xFF4
 24530                           prodl	equ	0xFF3
 24531                           intcon	equ	0xFF2
 24532                           intcon2	equ	0xFF1
 24533                           intcon3	equ	0xFF0
 24534                           indf0	equ	0xFEF
 24535                           postinc0	equ	0xFEE
 24536                           fsr0h	equ	0xFEA
 24537                           fsr0l	equ	0xFE9
 24538                           wreg	equ	0xFE8
 24539                           postdec1	equ	0xFE5
 24540                           fsr1h	equ	0xFE2
 24541                           fsr1l	equ	0xFE1
 24542                           indf2	equ	0xFDF
 24543                           postinc2	equ	0xFDE
 24544                           postdec2	equ	0xFDD
 24545                           fsr2h	equ	0xFDA
 24546                           fsr2l	equ	0xFD9
 24547                           status	equ	0xFD8
 24548                           
 24549 ;; *************** function i2_putch *****************
 24550 ;; Defined at:
 24551 ;;		line 20 in file "lcd.c"
 24552 ;; Parameters:    Size  Location     Type
 24553 ;;  data            1    wreg     unsigned char 
 24554 ;; Auto vars:     Size  Location     Type
 24555 ;;  data            1    2[COMRAM] unsigned char 
 24556 ;; Return value:  Size  Location     Type
 24557 ;;                  1    wreg      void 
 24558 ;; Registers used:
 24559 ;;		wreg, status,2, status,0, cstack
 24560 ;; Tracked objects:
 24561 ;;		On entry : 0/0
 24562 ;;		On exit  : 0/0
 24563 ;;		Unchanged: 0/0
 24564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24566 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24567 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24568 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24569 ;;Total ram usage:        1 bytes
 24570 ;; Hardware stack levels used:    1
 24571 ;; Hardware stack levels required when called:    1
 24572 ;; This function calls:
 24573 ;;		i2_lcdNibble
 24574 ;; This function is called by:
 24575 ;;		i2_printf
 24576 ;; This function uses a non-reentrant model
 24577 ;;
 24578                           
 24579                           	psect	text88
 24580  005B86                     __ptext88:
 24581                           	opt stack 0
 24582  005B86                     i2_putch:
 24583                           	opt stack 20
 24584                           
 24585                           ;incstack = 0
 24586                           ;i2putch@data stored from wreg
 24587  005B86  6E03               	movwf	i2putch@data,c
 24588                           
 24589                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 24590  005B88  848C               	bsf	3980,2,c	;volatile
 24591                           
 24592                           ;lcd.c: 22: lcdNibble(data);
 24593  005B8A  5003               	movf	i2putch@data,w,c
 24594  005B8C  EC60  F029         	call	i2_lcdNibble
 24595  005B90  0012               	return		;funcret
 24596  005B92                     __end_ofi2_putch:
 24597                           	opt stack 0
 24598                           pclatu	equ	0xFFB
 24599                           pclath	equ	0xFFA
 24600                           tblptru	equ	0xFF8
 24601                           tblptrh	equ	0xFF7
 24602                           tblptrl	equ	0xFF6
 24603                           tablat	equ	0xFF5
 24604                           prodh	equ	0xFF4
 24605                           prodl	equ	0xFF3
 24606                           intcon	equ	0xFF2
 24607                           intcon2	equ	0xFF1
 24608                           intcon3	equ	0xFF0
 24609                           indf0	equ	0xFEF
 24610                           postinc0	equ	0xFEE
 24611                           fsr0h	equ	0xFEA
 24612                           fsr0l	equ	0xFE9
 24613                           wreg	equ	0xFE8
 24614                           postdec1	equ	0xFE5
 24615                           fsr1h	equ	0xFE2
 24616                           fsr1l	equ	0xFE1
 24617                           indf2	equ	0xFDF
 24618                           postinc2	equ	0xFDE
 24619                           postdec2	equ	0xFDD
 24620                           fsr2h	equ	0xFDA
 24621                           fsr2l	equ	0xFD9
 24622                           status	equ	0xFD8
 24623                           
 24624 ;; *************** function i2_isdigit *****************
 24625 ;; Defined at:
 24626 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 24627 ;; Parameters:    Size  Location     Type
 24628 ;;  c               1    wreg     unsigned char 
 24629 ;; Auto vars:     Size  Location     Type
 24630 ;;  c               1    2[COMRAM] unsigned char 
 24631 ;; Return value:  Size  Location     Type
 24632 ;;		None               void
 24633 ;; Registers used:
 24634 ;;		wreg, status,2, status,0
 24635 ;; Tracked objects:
 24636 ;;		On entry : 0/0
 24637 ;;		On exit  : 0/0
 24638 ;;		Unchanged: 0/0
 24639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24641 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24642 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24643 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24644 ;;Total ram usage:        3 bytes
 24645 ;; Hardware stack levels used:    1
 24646 ;; This function calls:
 24647 ;;		Nothing
 24648 ;; This function is called by:
 24649 ;;		i2_printf
 24650 ;; This function uses a non-reentrant model
 24651 ;;
 24652                           
 24653                           	psect	text89
 24654  005AA6                     __ptext89:
 24655                           	opt stack 0
 24656  005AA6                     i2_isdigit:
 24657                           	opt stack 21
 24658                           
 24659                           ;incstack = 0
 24660                           ;i2isdigit@c stored from wreg
 24661  005AA6  6E03               	movwf	i2isdigit@c,c
 24662  005AA8  0E00               	movlw	0
 24663  005AAA  6E02               	movwf	i2_isdigit$2062,c
 24664  005AAC  0E3A               	movlw	58
 24665  005AAE  6003               	cpfslt	i2isdigit@c,c
 24666  005AB0  D005               	goto	i2l6619
 24667  005AB2  0E2F               	movlw	47
 24668  005AB4  6403               	cpfsgt	i2isdigit@c,c
 24669  005AB6  D002               	goto	i2l6619
 24670  005AB8  0E01               	movlw	1
 24671  005ABA  6E02               	movwf	i2_isdigit$2062,c
 24672  005ABC                     i2l6619:
 24673  005ABC  C002  F001         	movff	i2_isdigit$2062,??i2_isdigit
 24674  005AC0  3001               	rrcf	??i2_isdigit,w,c
 24675  005AC2  0012               	return	
 24676  005AC4                     __end_ofi2_isdigit:
 24677                           	opt stack 0
 24678                           pclatu	equ	0xFFB
 24679                           pclath	equ	0xFFA
 24680                           tblptru	equ	0xFF8
 24681                           tblptrh	equ	0xFF7
 24682                           tblptrl	equ	0xFF6
 24683                           tablat	equ	0xFF5
 24684                           prodh	equ	0xFF4
 24685                           prodl	equ	0xFF3
 24686                           intcon	equ	0xFF2
 24687                           intcon2	equ	0xFF1
 24688                           intcon3	equ	0xFF0
 24689                           indf0	equ	0xFEF
 24690                           postinc0	equ	0xFEE
 24691                           fsr0h	equ	0xFEA
 24692                           fsr0l	equ	0xFE9
 24693                           wreg	equ	0xFE8
 24694                           postdec1	equ	0xFE5
 24695                           fsr1h	equ	0xFE2
 24696                           fsr1l	equ	0xFE1
 24697                           indf2	equ	0xFDF
 24698                           postinc2	equ	0xFDE
 24699                           postdec2	equ	0xFDD
 24700                           fsr2h	equ	0xFDA
 24701                           fsr2l	equ	0xFD9
 24702                           status	equ	0xFD8
 24703                           
 24704 ;; *************** function i2___wmul *****************
 24705 ;; Defined at:
 24706 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 24707 ;; Parameters:    Size  Location     Type
 24708 ;;  multiplier      2    0[COMRAM] unsigned int 
 24709 ;;  multiplicand    2    2[COMRAM] unsigned int 
 24710 ;; Auto vars:     Size  Location     Type
 24711 ;;  __wmul          2    4[COMRAM] unsigned int 
 24712 ;; Return value:  Size  Location     Type
 24713 ;;                  2    0[COMRAM] unsigned int 
 24714 ;; Registers used:
 24715 ;;		wreg, status,2, status,0, prodl, prodh
 24716 ;; Tracked objects:
 24717 ;;		On entry : 0/0
 24718 ;;		On exit  : 0/0
 24719 ;;		Unchanged: 0/0
 24720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24721 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24722 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24724 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24725 ;;Total ram usage:        6 bytes
 24726 ;; Hardware stack levels used:    1
 24727 ;; This function calls:
 24728 ;;		Nothing
 24729 ;; This function is called by:
 24730 ;;		_printSortTimer
 24731 ;;		_retrieveLog
 24732 ;;		i2_printf
 24733 ;; This function uses a non-reentrant model
 24734 ;;
 24735                           
 24736                           	psect	text90
 24737  0059F2                     __ptext90:
 24738                           	opt stack 0
 24739  0059F2                     i2___wmul:
 24740                           	opt stack 21
 24741                           
 24742                           ;incstack = 0
 24743  0059F2  5001               	movf	i2___wmul@multiplier,w,c
 24744  0059F4  0203               	mulwf	i2___wmul@multiplicand,c
 24745  0059F6  CFF3 F005          	movff	prodl,i2___wmul@product
 24746  0059FA  CFF4 F006          	movff	prodh,i2___wmul@product+1
 24747  0059FE  5001               	movf	i2___wmul@multiplier,w,c
 24748  005A00  0204               	mulwf	i2___wmul@multiplicand+1,c
 24749  005A02  50F3               	movf	prodl,w,c
 24750  005A04  2606               	addwf	i2___wmul@product+1,f,c
 24751  005A06  5002               	movf	i2___wmul@multiplier+1,w,c
 24752  005A08  0203               	mulwf	i2___wmul@multiplicand,c
 24753  005A0A  50F3               	movf	prodl,w,c
 24754  005A0C  2606               	addwf	i2___wmul@product+1,f,c
 24755  005A0E  C005  F001         	movff	i2___wmul@product,?i2___wmul
 24756  005A12  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 24757  005A16  0012               	return	
 24758  005A18                     __end_ofi2___wmul:
 24759                           	opt stack 0
 24760                           pclatu	equ	0xFFB
 24761                           pclath	equ	0xFFA
 24762                           tblptru	equ	0xFF8
 24763                           tblptrh	equ	0xFF7
 24764                           tblptrl	equ	0xFF6
 24765                           tablat	equ	0xFF5
 24766                           prodh	equ	0xFF4
 24767                           prodl	equ	0xFF3
 24768                           intcon	equ	0xFF2
 24769                           intcon2	equ	0xFF1
 24770                           intcon3	equ	0xFF0
 24771                           indf0	equ	0xFEF
 24772                           postinc0	equ	0xFEE
 24773                           fsr0h	equ	0xFEA
 24774                           fsr0l	equ	0xFE9
 24775                           wreg	equ	0xFE8
 24776                           postdec1	equ	0xFE5
 24777                           fsr1h	equ	0xFE2
 24778                           fsr1l	equ	0xFE1
 24779                           indf2	equ	0xFDF
 24780                           postinc2	equ	0xFDE
 24781                           postdec2	equ	0xFDD
 24782                           fsr2h	equ	0xFDA
 24783                           fsr2l	equ	0xFD9
 24784                           status	equ	0xFD8
 24785                           
 24786 ;; *************** function i2___lwmod *****************
 24787 ;; Defined at:
 24788 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 24789 ;; Parameters:    Size  Location     Type
 24790 ;;  dividend        2    0[COMRAM] unsigned int 
 24791 ;;  divisor         2    2[COMRAM] unsigned int 
 24792 ;; Auto vars:     Size  Location     Type
 24793 ;;  __lwmod         1    4[COMRAM] unsigned char 
 24794 ;; Return value:  Size  Location     Type
 24795 ;;                  2    0[COMRAM] unsigned int 
 24796 ;; Registers used:
 24797 ;;		wreg, status,2, status,0
 24798 ;; Tracked objects:
 24799 ;;		On entry : 0/0
 24800 ;;		On exit  : 0/0
 24801 ;;		Unchanged: 0/0
 24802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24803 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24804 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24806 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24807 ;;Total ram usage:        5 bytes
 24808 ;; Hardware stack levels used:    1
 24809 ;; This function calls:
 24810 ;;		Nothing
 24811 ;; This function is called by:
 24812 ;;		_printSortTimer
 24813 ;;		i2_printf
 24814 ;; This function uses a non-reentrant model
 24815 ;;
 24816                           
 24817                           	psect	text91
 24818  005528                     __ptext91:
 24819                           	opt stack 0
 24820  005528                     i2___lwmod:
 24821                           	opt stack 21
 24822                           
 24823                           ;incstack = 0
 24824  005528  5003               	movf	i2___lwmod@divisor,w,c
 24825  00552A  1004               	iorwf	i2___lwmod@divisor+1,w,c
 24826  00552C  B4D8               	btfsc	status,2,c
 24827  00552E  D018               	goto	i2l1974
 24828  005530  0E01               	movlw	1
 24829  005532  6E05               	movwf	i2___lwmod@counter,c
 24830  005534  D004               	goto	i2l6651
 24831  005536                     i2l6649:
 24832  005536  90D8               	bcf	status,0,c
 24833  005538  3603               	rlcf	i2___lwmod@divisor,f,c
 24834  00553A  3604               	rlcf	i2___lwmod@divisor+1,f,c
 24835  00553C  2A05               	incf	i2___lwmod@counter,f,c
 24836  00553E                     i2l6651:
 24837  00553E  AE04               	btfss	i2___lwmod@divisor+1,7,c
 24838  005540  D7FA               	goto	i2l6649
 24839  005542                     i2l6653:
 24840  005542  5003               	movf	i2___lwmod@divisor,w,c
 24841  005544  5C01               	subwf	i2___lwmod@dividend,w,c
 24842  005546  5004               	movf	i2___lwmod@divisor+1,w,c
 24843  005548  5802               	subwfb	i2___lwmod@dividend+1,w,c
 24844  00554A  A0D8               	btfss	status,0,c
 24845  00554C  D004               	goto	i2l6657
 24846  00554E  5003               	movf	i2___lwmod@divisor,w,c
 24847  005550  5E01               	subwf	i2___lwmod@dividend,f,c
 24848  005552  5004               	movf	i2___lwmod@divisor+1,w,c
 24849  005554  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 24850  005556                     i2l6657:
 24851  005556  90D8               	bcf	status,0,c
 24852  005558  3204               	rrcf	i2___lwmod@divisor+1,f,c
 24853  00555A  3203               	rrcf	i2___lwmod@divisor,f,c
 24854  00555C  2E05               	decfsz	i2___lwmod@counter,f,c
 24855  00555E  D7F1               	goto	i2l6653
 24856  005560                     i2l1974:
 24857  005560  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 24858  005564  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 24859  005568  0012               	return		;funcret
 24860  00556A                     __end_ofi2___lwmod:
 24861                           	opt stack 0
 24862                           pclatu	equ	0xFFB
 24863                           pclath	equ	0xFFA
 24864                           tblptru	equ	0xFF8
 24865                           tblptrh	equ	0xFF7
 24866                           tblptrl	equ	0xFF6
 24867                           tablat	equ	0xFF5
 24868                           prodh	equ	0xFF4
 24869                           prodl	equ	0xFF3
 24870                           intcon	equ	0xFF2
 24871                           intcon2	equ	0xFF1
 24872                           intcon3	equ	0xFF0
 24873                           indf0	equ	0xFEF
 24874                           postinc0	equ	0xFEE
 24875                           fsr0h	equ	0xFEA
 24876                           fsr0l	equ	0xFE9
 24877                           wreg	equ	0xFE8
 24878                           postdec1	equ	0xFE5
 24879                           fsr1h	equ	0xFE2
 24880                           fsr1l	equ	0xFE1
 24881                           indf2	equ	0xFDF
 24882                           postinc2	equ	0xFDE
 24883                           postdec2	equ	0xFDD
 24884                           fsr2h	equ	0xFDA
 24885                           fsr2l	equ	0xFD9
 24886                           status	equ	0xFD8
 24887                           
 24888 ;; *************** function i2___lwdiv *****************
 24889 ;; Defined at:
 24890 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 24891 ;; Parameters:    Size  Location     Type
 24892 ;;  dividend        2    5[COMRAM] unsigned int 
 24893 ;;  divisor         2    7[COMRAM] unsigned int 
 24894 ;; Auto vars:     Size  Location     Type
 24895 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 24896 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 24897 ;; Return value:  Size  Location     Type
 24898 ;;                  2    5[COMRAM] unsigned int 
 24899 ;; Registers used:
 24900 ;;		wreg, status,2, status,0
 24901 ;; Tracked objects:
 24902 ;;		On entry : 0/0
 24903 ;;		On exit  : 0/0
 24904 ;;		Unchanged: 0/0
 24905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24906 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24907 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24909 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24910 ;;Total ram usage:        7 bytes
 24911 ;; Hardware stack levels used:    1
 24912 ;; This function calls:
 24913 ;;		Nothing
 24914 ;; This function is called by:
 24915 ;;		_printSortTimer
 24916 ;;		i2_printf
 24917 ;; This function uses a non-reentrant model
 24918 ;;
 24919                           
 24920                           	psect	text92
 24921  00531A                     __ptext92:
 24922                           	opt stack 0
 24923  00531A                     i2___lwdiv:
 24924                           	opt stack 21
 24925                           
 24926                           ;incstack = 0
 24927  00531A  0E00               	movlw	0
 24928  00531C  6E0B               	movwf	i2___lwdiv@quotient+1,c
 24929  00531E  0E00               	movlw	0
 24930  005320  6E0A               	movwf	i2___lwdiv@quotient,c
 24931  005322  5008               	movf	i2___lwdiv@divisor,w,c
 24932  005324  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 24933  005326  B4D8               	btfsc	status,2,c
 24934  005328  D01C               	goto	i2l1964
 24935  00532A  0E01               	movlw	1
 24936  00532C  6E0C               	movwf	i2___lwdiv@counter,c
 24937  00532E  D004               	goto	i2l6631
 24938  005330                     i2l6629:
 24939  005330  90D8               	bcf	status,0,c
 24940  005332  3608               	rlcf	i2___lwdiv@divisor,f,c
 24941  005334  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 24942  005336  2A0C               	incf	i2___lwdiv@counter,f,c
 24943  005338                     i2l6631:
 24944  005338  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 24945  00533A  D7FA               	goto	i2l6629
 24946  00533C                     i2l6633:
 24947  00533C  90D8               	bcf	status,0,c
 24948  00533E  360A               	rlcf	i2___lwdiv@quotient,f,c
 24949  005340  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 24950  005342  5008               	movf	i2___lwdiv@divisor,w,c
 24951  005344  5C06               	subwf	i2___lwdiv@dividend,w,c
 24952  005346  5009               	movf	i2___lwdiv@divisor+1,w,c
 24953  005348  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 24954  00534A  A0D8               	btfss	status,0,c
 24955  00534C  D005               	goto	i2l6641
 24956  00534E  5008               	movf	i2___lwdiv@divisor,w,c
 24957  005350  5E06               	subwf	i2___lwdiv@dividend,f,c
 24958  005352  5009               	movf	i2___lwdiv@divisor+1,w,c
 24959  005354  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 24960  005356  800A               	bsf	i2___lwdiv@quotient,0,c
 24961  005358                     i2l6641:
 24962  005358  90D8               	bcf	status,0,c
 24963  00535A  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 24964  00535C  3208               	rrcf	i2___lwdiv@divisor,f,c
 24965  00535E  2E0C               	decfsz	i2___lwdiv@counter,f,c
 24966  005360  D7ED               	goto	i2l6633
 24967  005362                     i2l1964:
 24968  005362  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 24969  005366  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 24970  00536A  0012               	return		;funcret
 24971  00536C                     __end_ofi2___lwdiv:
 24972                           	opt stack 0
 24973                           pclatu	equ	0xFFB
 24974                           pclath	equ	0xFFA
 24975                           tblptru	equ	0xFF8
 24976                           tblptrh	equ	0xFF7
 24977                           tblptrl	equ	0xFF6
 24978                           tablat	equ	0xFF5
 24979                           prodh	equ	0xFF4
 24980                           prodl	equ	0xFF3
 24981                           intcon	equ	0xFF2
 24982                           intcon2	equ	0xFF1
 24983                           intcon3	equ	0xFF0
 24984                           indf0	equ	0xFEF
 24985                           postinc0	equ	0xFEE
 24986                           fsr0h	equ	0xFEA
 24987                           fsr0l	equ	0xFE9
 24988                           wreg	equ	0xFE8
 24989                           postdec1	equ	0xFE5
 24990                           fsr1h	equ	0xFE2
 24991                           fsr1l	equ	0xFE1
 24992                           indf2	equ	0xFDF
 24993                           postinc2	equ	0xFDE
 24994                           postdec2	equ	0xFDD
 24995                           fsr2h	equ	0xFDA
 24996                           fsr2l	equ	0xFD9
 24997                           status	equ	0xFD8
 24998                           
 24999 ;; *************** function i2_lcdInst *****************
 25000 ;; Defined at:
 25001 ;;		line 15 in file "lcd.c"
 25002 ;; Parameters:    Size  Location     Type
 25003 ;;  data            1    wreg     unsigned char 
 25004 ;; Auto vars:     Size  Location     Type
 25005 ;;  data            1    2[COMRAM] unsigned char 
 25006 ;; Return value:  Size  Location     Type
 25007 ;;                  1    wreg      void 
 25008 ;; Registers used:
 25009 ;;		wreg, status,2, status,0, cstack
 25010 ;; Tracked objects:
 25011 ;;		On entry : 0/0
 25012 ;;		On exit  : 0/0
 25013 ;;		Unchanged: 0/0
 25014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25016 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25018 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25019 ;;Total ram usage:        1 bytes
 25020 ;; Hardware stack levels used:    1
 25021 ;; Hardware stack levels required when called:    1
 25022 ;; This function calls:
 25023 ;;		i2_lcdNibble
 25024 ;; This function is called by:
 25025 ;;		_change_state_to_menu_11
 25026 ;;		_change_state_to_menu_23
 25027 ;;		_change_state_to_logs_11
 25028 ;;		_change_state_to_logs_12
 25029 ;;		_change_state_to_logs_22
 25030 ;;		_change_state_to_logs_23
 25031 ;;		_change_state_to_logs_33
 25032 ;;		_change_state_to_logs_34
 25033 ;;		_printSortTimer
 25034 ;;		i2_change_state_to_menu_start
 25035 ;;		i2_change_state_to_menu_12
 25036 ;;		i2_change_state_to_menu_22
 25037 ;;		i2_printRTC
 25038 ;; This function uses a non-reentrant model
 25039 ;;
 25040                           
 25041                           	psect	text93
 25042  005B92                     __ptext93:
 25043                           	opt stack 0
 25044  005B92                     i2_lcdInst:
 25045                           	opt stack 20
 25046                           
 25047                           ;incstack = 0
 25048                           ;i2lcdInst@data stored from wreg
 25049  005B92  6E03               	movwf	i2lcdInst@data,c
 25050                           
 25051                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 25052  005B94  948C               	bcf	3980,2,c	;volatile
 25053                           
 25054                           ;lcd.c: 17: lcdNibble(data);
 25055  005B96  5003               	movf	i2lcdInst@data,w,c
 25056  005B98  EC60  F029         	call	i2_lcdNibble
 25057  005B9C  0012               	return		;funcret
 25058  005B9E                     __end_ofi2_lcdInst:
 25059                           	opt stack 0
 25060                           pclatu	equ	0xFFB
 25061                           pclath	equ	0xFFA
 25062                           tblptru	equ	0xFF8
 25063                           tblptrh	equ	0xFF7
 25064                           tblptrl	equ	0xFF6
 25065                           tablat	equ	0xFF5
 25066                           prodh	equ	0xFF4
 25067                           prodl	equ	0xFF3
 25068                           intcon	equ	0xFF2
 25069                           intcon2	equ	0xFF1
 25070                           intcon3	equ	0xFF0
 25071                           indf0	equ	0xFEF
 25072                           postinc0	equ	0xFEE
 25073                           fsr0h	equ	0xFEA
 25074                           fsr0l	equ	0xFE9
 25075                           wreg	equ	0xFE8
 25076                           postdec1	equ	0xFE5
 25077                           fsr1h	equ	0xFE2
 25078                           fsr1l	equ	0xFE1
 25079                           indf2	equ	0xFDF
 25080                           postinc2	equ	0xFDE
 25081                           postdec2	equ	0xFDD
 25082                           fsr2h	equ	0xFDA
 25083                           fsr2l	equ	0xFD9
 25084                           status	equ	0xFD8
 25085                           
 25086 ;; *************** function i2_lcdNibble *****************
 25087 ;; Defined at:
 25088 ;;		line 25 in file "lcd.c"
 25089 ;; Parameters:    Size  Location     Type
 25090 ;;  data            1    wreg     unsigned char 
 25091 ;; Auto vars:     Size  Location     Type
 25092 ;;  data            1    1[COMRAM] unsigned char 
 25093 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 25094 ;; Return value:  Size  Location     Type
 25095 ;;                  1    wreg      void 
 25096 ;; Registers used:
 25097 ;;		wreg, status,2, status,0
 25098 ;; Tracked objects:
 25099 ;;		On entry : 0/0
 25100 ;;		On exit  : 0/0
 25101 ;;		Unchanged: 0/0
 25102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25104 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25106 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25107 ;;Total ram usage:        2 bytes
 25108 ;; Hardware stack levels used:    1
 25109 ;; This function calls:
 25110 ;;		Nothing
 25111 ;; This function is called by:
 25112 ;;		i2_lcdInst
 25113 ;;		i2_putch
 25114 ;; This function uses a non-reentrant model
 25115 ;;
 25116                           
 25117                           	psect	text94
 25118  0052C0                     __ptext94:
 25119                           	opt stack 0
 25120  0052C0                     i2_lcdNibble:
 25121                           	opt stack 20
 25122                           
 25123                           ;incstack = 0
 25124                           ;i2lcdNibble@data stored from wreg
 25125  0052C0  6E02               	movwf	i2lcdNibble@data,c
 25126                           
 25127                           ;lcd.c: 27: (INTCONbits.GIE = 0);
 25128  0052C2  9EF2               	bcf	intcon,7,c	;volatile
 25129                           
 25130                           ;lcd.c: 28: char temp = data & 0xF0;
 25131  0052C4  5002               	movf	i2lcdNibble@data,w,c
 25132  0052C6  0BF0               	andlw	240
 25133  0052C8  6E01               	movwf	i2lcdNibble@temp,c
 25134                           
 25135                           ;lcd.c: 29: LATD = LATD & 0x0F;
 25136  0052CA  508C               	movf	3980,w,c	;volatile
 25137  0052CC  0B0F               	andlw	15
 25138  0052CE  6E8C               	movwf	3980,c	;volatile
 25139                           
 25140                           ;lcd.c: 30: LATD = temp | LATD;
 25141  0052D0  5001               	movf	i2lcdNibble@temp,w,c
 25142  0052D2  108C               	iorwf	3980,w,c	;volatile
 25143  0052D4  6E8C               	movwf	3980,c	;volatile
 25144                           
 25145                           ;lcd.c: 32: LATDbits.LATD3 = 1;
 25146  0052D6  868C               	bsf	3980,3,c	;volatile
 25147                           
 25148                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25149  0052D8  0E42               	movlw	66
 25150  0052DA                     i2u1130_47:
 25151  0052DA  2EE8               	decfsz	wreg,f,c
 25152  0052DC  D7FE               	bra	i2u1130_47
 25153  0052DE  D000               	nop2	
 25154                           
 25155                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 25156  0052E0  968C               	bcf	3980,3,c	;volatile
 25157                           
 25158                           ;lcd.c: 35: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25159  0052E2  0E42               	movlw	66
 25160  0052E4                     i2u1131_47:
 25161  0052E4  2EE8               	decfsz	wreg,f,c
 25162  0052E6  D7FE               	bra	i2u1131_47
 25163  0052E8  D000               	nop2	
 25164                           
 25165                           ;lcd.c: 37: data = data << 4;
 25166  0052EA  3802               	swapf	i2lcdNibble@data,w,c
 25167  0052EC  0BF0               	andlw	240
 25168  0052EE  6E02               	movwf	i2lcdNibble@data,c
 25169                           
 25170                           ;lcd.c: 39: temp = data & 0xF0;
 25171  0052F0  5002               	movf	i2lcdNibble@data,w,c
 25172  0052F2  0BF0               	andlw	240
 25173  0052F4  6E01               	movwf	i2lcdNibble@temp,c
 25174                           
 25175                           ;lcd.c: 40: LATD = LATD & 0x0F;
 25176  0052F6  508C               	movf	3980,w,c	;volatile
 25177  0052F8  0B0F               	andlw	15
 25178  0052FA  6E8C               	movwf	3980,c	;volatile
 25179                           
 25180                           ;lcd.c: 41: LATD = temp | LATD;
 25181  0052FC  5001               	movf	i2lcdNibble@temp,w,c
 25182  0052FE  108C               	iorwf	3980,w,c	;volatile
 25183  005300  6E8C               	movwf	3980,c	;volatile
 25184                           
 25185                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 25186  005302  868C               	bsf	3980,3,c	;volatile
 25187                           
 25188                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25189  005304  0E42               	movlw	66
 25190  005306                     i2u1132_47:
 25191  005306  2EE8               	decfsz	wreg,f,c
 25192  005308  D7FE               	bra	i2u1132_47
 25193  00530A  D000               	nop2	
 25194                           
 25195                           ;lcd.c: 45: LATDbits.LATD3 = 0;
 25196  00530C  968C               	bcf	3980,3,c	;volatile
 25197                           
 25198                           ;lcd.c: 46: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25199  00530E  0E42               	movlw	66
 25200  005310                     i2u1133_47:
 25201  005310  2EE8               	decfsz	wreg,f,c
 25202  005312  D7FE               	bra	i2u1133_47
 25203  005314  D000               	nop2	
 25204                           
 25205                           ;lcd.c: 47: (INTCONbits.GIE = 1);
 25206  005316  8EF2               	bsf	intcon,7,c	;volatile
 25207  005318  0012               	return		;funcret
 25208  00531A                     __end_ofi2_lcdNibble:
 25209                           	opt stack 0
 25210                           pclatu	equ	0xFFB
 25211                           pclath	equ	0xFFA
 25212                           tblptru	equ	0xFF8
 25213                           tblptrh	equ	0xFF7
 25214                           tblptrl	equ	0xFF6
 25215                           tablat	equ	0xFF5
 25216                           prodh	equ	0xFF4
 25217                           prodl	equ	0xFF3
 25218                           intcon	equ	0xFF2
 25219                           intcon2	equ	0xFF1
 25220                           intcon3	equ	0xFF0
 25221                           indf0	equ	0xFEF
 25222                           postinc0	equ	0xFEE
 25223                           fsr0h	equ	0xFEA
 25224                           fsr0l	equ	0xFE9
 25225                           wreg	equ	0xFE8
 25226                           postdec1	equ	0xFE5
 25227                           fsr1h	equ	0xFE2
 25228                           fsr1l	equ	0xFE1
 25229                           indf2	equ	0xFDF
 25230                           postinc2	equ	0xFDE
 25231                           postdec2	equ	0xFDD
 25232                           fsr2h	equ	0xFDA
 25233                           fsr2l	equ	0xFD9
 25234                           status	equ	0xFD8
 25235                           
 25236 ;; *************** function i2_getRTC *****************
 25237 ;; Defined at:
 25238 ;;		line 44 in file "RTC.c"
 25239 ;; Parameters:    Size  Location     Type
 25240 ;;		None
 25241 ;; Auto vars:     Size  Location     Type
 25242 ;;  getRTC          2    3[COMRAM] int 
 25243 ;; Return value:  Size  Location     Type
 25244 ;;                  1    wreg      void 
 25245 ;; Registers used:
 25246 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25247 ;; Tracked objects:
 25248 ;;		On entry : 0/0
 25249 ;;		On exit  : 0/0
 25250 ;;		Unchanged: 0/0
 25251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25253 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25255 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25256 ;;Total ram usage:        2 bytes
 25257 ;; Hardware stack levels used:    1
 25258 ;; Hardware stack levels required when called:    2
 25259 ;; This function calls:
 25260 ;;		i2_I2C_Master_Read
 25261 ;;		i2_I2C_Master_Start
 25262 ;;		i2_I2C_Master_Stop
 25263 ;;		i2_I2C_Master_Write
 25264 ;; This function is called by:
 25265 ;;		_printSortTimer
 25266 ;;		i2_printRTC
 25267 ;; This function uses a non-reentrant model
 25268 ;;
 25269                           
 25270                           	psect	text95
 25271  004F94                     __ptext95:
 25272                           	opt stack 0
 25273  004F94                     i2_getRTC:
 25274                           	opt stack 19
 25275                           
 25276                           ;RTC.c: 48: I2C_Master_Start();
 25277                           
 25278                           ;incstack = 0
 25279  004F94  ECE9  F02D         	call	i2_I2C_Master_Start	;wreg free
 25280                           
 25281                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 25282  004F98  0E00               	movlw	0
 25283  004F9A  6E03               	movwf	i2I2C_Master_Write@d+1,c
 25284  004F9C  0ED0               	movlw	208
 25285  004F9E  6E02               	movwf	i2I2C_Master_Write@d,c
 25286  004FA0  ECD4  F02D         	call	i2_I2C_Master_Write	;wreg free
 25287                           
 25288                           ;RTC.c: 50: I2C_Master_Write(0x00);
 25289  004FA4  0E00               	movlw	0
 25290  004FA6  6E03               	movwf	i2I2C_Master_Write@d+1,c
 25291  004FA8  0E00               	movlw	0
 25292  004FAA  6E02               	movwf	i2I2C_Master_Write@d,c
 25293  004FAC  ECD4  F02D         	call	i2_I2C_Master_Write	;wreg free
 25294                           
 25295                           ;RTC.c: 51: I2C_Master_Stop();
 25296  004FB0  ECE5  F02D         	call	i2_I2C_Master_Stop	;wreg free
 25297                           
 25298                           ;RTC.c: 54: I2C_Master_Start();
 25299  004FB4  ECE9  F02D         	call	i2_I2C_Master_Start	;wreg free
 25300                           
 25301                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 25302  004FB8  0E00               	movlw	0
 25303  004FBA  6E03               	movwf	i2I2C_Master_Write@d+1,c
 25304  004FBC  0ED1               	movlw	209
 25305  004FBE  6E02               	movwf	i2I2C_Master_Write@d,c
 25306  004FC0  ECD4  F02D         	call	i2_I2C_Master_Write	;wreg free
 25307                           
 25308                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 25309  004FC4  0E00               	movlw	0
 25310  004FC6  6E05               	movwf	i2getRTC@i+1,c
 25311  004FC8  0E00               	movlw	0
 25312  004FCA  6E04               	movwf	i2getRTC@i,c
 25313  004FCC                     i2l6927:
 25314  004FCC  BE05               	btfsc	i2getRTC@i+1,7,c
 25315  004FCE  D006               	goto	i2l6931
 25316  004FD0  5005               	movf	i2getRTC@i+1,w,c
 25317  004FD2  E111               	bnz	i2l6937
 25318  004FD4  0E06               	movlw	6
 25319  004FD6  5C04               	subwf	i2getRTC@i,w,c
 25320  004FD8  B0D8               	btfsc	status,0,c
 25321  004FDA  D00D               	goto	i2l6937
 25322  004FDC                     i2l6931:
 25323                           
 25324                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 25325  004FDC  0E1C               	movlw	low _time
 25326  004FDE  2404               	addwf	i2getRTC@i,w,c
 25327  004FE0  6ED9               	movwf	fsr2l,c
 25328  004FE2  0E01               	movlw	high _time
 25329  004FE4  2005               	addwfc	i2getRTC@i+1,w,c
 25330  004FE6  6EDA               	movwf	fsr2h,c
 25331  004FE8  0E01               	movlw	1
 25332  004FEA  EC0C  F02D         	call	i2_I2C_Master_Read
 25333  004FEE  6EDF               	movwf	indf2,c
 25334  004FF0  4A04               	infsnz	i2getRTC@i,f,c
 25335  004FF2  2A05               	incf	i2getRTC@i+1,f,c
 25336  004FF4  D7EB               	goto	i2l6927
 25337  004FF6                     i2l6937:
 25338                           
 25339                           ;RTC.c: 58: }
 25340                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 25341  004FF6  0E00               	movlw	0
 25342  004FF8  EC0C  F02D         	call	i2_I2C_Master_Read
 25343  004FFC  0101               	movlb	1	; () banked
 25344  004FFE  6F22               	movwf	(_time+6)& (0+255),b
 25345                           
 25346                           ;RTC.c: 60: I2C_Master_Stop();
 25347  005000  ECE5  F02D         	call	i2_I2C_Master_Stop	;wreg free
 25348  005004  0012               	return		;funcret
 25349  005006                     __end_ofi2_getRTC:
 25350                           	opt stack 0
 25351                           pclatu	equ	0xFFB
 25352                           pclath	equ	0xFFA
 25353                           tblptru	equ	0xFF8
 25354                           tblptrh	equ	0xFF7
 25355                           tblptrl	equ	0xFF6
 25356                           tablat	equ	0xFF5
 25357                           prodh	equ	0xFF4
 25358                           prodl	equ	0xFF3
 25359                           intcon	equ	0xFF2
 25360                           intcon2	equ	0xFF1
 25361                           intcon3	equ	0xFF0
 25362                           indf0	equ	0xFEF
 25363                           postinc0	equ	0xFEE
 25364                           fsr0h	equ	0xFEA
 25365                           fsr0l	equ	0xFE9
 25366                           wreg	equ	0xFE8
 25367                           postdec1	equ	0xFE5
 25368                           fsr1h	equ	0xFE2
 25369                           fsr1l	equ	0xFE1
 25370                           indf2	equ	0xFDF
 25371                           postinc2	equ	0xFDE
 25372                           postdec2	equ	0xFDD
 25373                           fsr2h	equ	0xFDA
 25374                           fsr2l	equ	0xFD9
 25375                           status	equ	0xFD8
 25376                           
 25377 ;; *************** function i2_I2C_Master_Write *****************
 25378 ;; Defined at:
 25379 ;;		line 49 in file "I2C.c"
 25380 ;; Parameters:    Size  Location     Type
 25381 ;;  d               2    1[COMRAM] unsigned int 
 25382 ;; Auto vars:     Size  Location     Type
 25383 ;;		None
 25384 ;; Return value:  Size  Location     Type
 25385 ;;                  1    wreg      void 
 25386 ;; Registers used:
 25387 ;;		wreg, status,2, status,0, cstack
 25388 ;; Tracked objects:
 25389 ;;		On entry : 0/0
 25390 ;;		On exit  : 0/0
 25391 ;;		Unchanged: 0/0
 25392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25393 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25396 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25397 ;;Total ram usage:        2 bytes
 25398 ;; Hardware stack levels used:    1
 25399 ;; Hardware stack levels required when called:    1
 25400 ;; This function calls:
 25401 ;;		i2_I2C_Master_Wait
 25402 ;; This function is called by:
 25403 ;;		i2_getRTC
 25404 ;; This function uses a non-reentrant model
 25405 ;;
 25406                           
 25407                           	psect	text96
 25408  005BA8                     __ptext96:
 25409                           	opt stack 0
 25410  005BA8                     i2_I2C_Master_Write:
 25411                           	opt stack 19
 25412                           
 25413                           ;I2C.c: 51: I2C_Master_Wait();
 25414                           
 25415                           ;incstack = 0
 25416  005BA8  ECAA  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25417                           
 25418                           ;I2C.c: 52: SSPBUF = d;
 25419  005BAC  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 25420  005BB0  0012               	return		;funcret
 25421  005BB2                     __end_ofi2_I2C_Master_Write:
 25422                           	opt stack 0
 25423                           pclatu	equ	0xFFB
 25424                           pclath	equ	0xFFA
 25425                           tblptru	equ	0xFF8
 25426                           tblptrh	equ	0xFF7
 25427                           tblptrl	equ	0xFF6
 25428                           tablat	equ	0xFF5
 25429                           prodh	equ	0xFF4
 25430                           prodl	equ	0xFF3
 25431                           intcon	equ	0xFF2
 25432                           intcon2	equ	0xFF1
 25433                           intcon3	equ	0xFF0
 25434                           indf0	equ	0xFEF
 25435                           postinc0	equ	0xFEE
 25436                           fsr0h	equ	0xFEA
 25437                           fsr0l	equ	0xFE9
 25438                           wreg	equ	0xFE8
 25439                           postdec1	equ	0xFE5
 25440                           fsr1h	equ	0xFE2
 25441                           fsr1l	equ	0xFE1
 25442                           indf2	equ	0xFDF
 25443                           postinc2	equ	0xFDE
 25444                           postdec2	equ	0xFDD
 25445                           fsr2h	equ	0xFDA
 25446                           fsr2l	equ	0xFD9
 25447                           status	equ	0xFD8
 25448                           
 25449 ;; *************** function i2_I2C_Master_Stop *****************
 25450 ;; Defined at:
 25451 ;;		line 43 in file "I2C.c"
 25452 ;; Parameters:    Size  Location     Type
 25453 ;;		None
 25454 ;; Auto vars:     Size  Location     Type
 25455 ;;		None
 25456 ;; Return value:  Size  Location     Type
 25457 ;;                  1    wreg      void 
 25458 ;; Registers used:
 25459 ;;		wreg, status,2, status,0, cstack
 25460 ;; Tracked objects:
 25461 ;;		On entry : 0/0
 25462 ;;		On exit  : 0/0
 25463 ;;		Unchanged: 0/0
 25464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25468 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25469 ;;Total ram usage:        0 bytes
 25470 ;; Hardware stack levels used:    1
 25471 ;; Hardware stack levels required when called:    1
 25472 ;; This function calls:
 25473 ;;		i2_I2C_Master_Wait
 25474 ;; This function is called by:
 25475 ;;		i2_getRTC
 25476 ;; This function uses a non-reentrant model
 25477 ;;
 25478                           
 25479                           	psect	text97
 25480  005BCA                     __ptext97:
 25481                           	opt stack 0
 25482  005BCA                     i2_I2C_Master_Stop:
 25483                           	opt stack 19
 25484                           
 25485                           ;I2C.c: 45: I2C_Master_Wait();
 25486                           
 25487                           ;incstack = 0
 25488  005BCA  ECAA  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25489                           
 25490                           ;I2C.c: 46: PEN = 1;
 25491  005BCE  84C5               	bsf	4037,2,c	;volatile
 25492  005BD0  0012               	return		;funcret
 25493  005BD2                     __end_ofi2_I2C_Master_Stop:
 25494                           	opt stack 0
 25495                           pclatu	equ	0xFFB
 25496                           pclath	equ	0xFFA
 25497                           tblptru	equ	0xFF8
 25498                           tblptrh	equ	0xFF7
 25499                           tblptrl	equ	0xFF6
 25500                           tablat	equ	0xFF5
 25501                           prodh	equ	0xFF4
 25502                           prodl	equ	0xFF3
 25503                           intcon	equ	0xFF2
 25504                           intcon2	equ	0xFF1
 25505                           intcon3	equ	0xFF0
 25506                           indf0	equ	0xFEF
 25507                           postinc0	equ	0xFEE
 25508                           fsr0h	equ	0xFEA
 25509                           fsr0l	equ	0xFE9
 25510                           wreg	equ	0xFE8
 25511                           postdec1	equ	0xFE5
 25512                           fsr1h	equ	0xFE2
 25513                           fsr1l	equ	0xFE1
 25514                           indf2	equ	0xFDF
 25515                           postinc2	equ	0xFDE
 25516                           postdec2	equ	0xFDD
 25517                           fsr2h	equ	0xFDA
 25518                           fsr2l	equ	0xFD9
 25519                           status	equ	0xFD8
 25520                           
 25521 ;; *************** function i2_I2C_Master_Start *****************
 25522 ;; Defined at:
 25523 ;;		line 31 in file "I2C.c"
 25524 ;; Parameters:    Size  Location     Type
 25525 ;;		None
 25526 ;; Auto vars:     Size  Location     Type
 25527 ;;		None
 25528 ;; Return value:  Size  Location     Type
 25529 ;;                  1    wreg      void 
 25530 ;; Registers used:
 25531 ;;		wreg, status,2, status,0, cstack
 25532 ;; Tracked objects:
 25533 ;;		On entry : 0/0
 25534 ;;		On exit  : 0/0
 25535 ;;		Unchanged: 0/0
 25536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25538 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25540 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25541 ;;Total ram usage:        0 bytes
 25542 ;; Hardware stack levels used:    1
 25543 ;; Hardware stack levels required when called:    1
 25544 ;; This function calls:
 25545 ;;		i2_I2C_Master_Wait
 25546 ;; This function is called by:
 25547 ;;		i2_getRTC
 25548 ;; This function uses a non-reentrant model
 25549 ;;
 25550                           
 25551                           	psect	text98
 25552  005BD2                     __ptext98:
 25553                           	opt stack 0
 25554  005BD2                     i2_I2C_Master_Start:
 25555                           	opt stack 19
 25556                           
 25557                           ;I2C.c: 33: I2C_Master_Wait();
 25558                           
 25559                           ;incstack = 0
 25560  005BD2  ECAA  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25561                           
 25562                           ;I2C.c: 34: SEN = 1;
 25563  005BD6  80C5               	bsf	4037,0,c	;volatile
 25564  005BD8  0012               	return		;funcret
 25565  005BDA                     __end_ofi2_I2C_Master_Start:
 25566                           	opt stack 0
 25567                           pclatu	equ	0xFFB
 25568                           pclath	equ	0xFFA
 25569                           tblptru	equ	0xFF8
 25570                           tblptrh	equ	0xFF7
 25571                           tblptrl	equ	0xFF6
 25572                           tablat	equ	0xFF5
 25573                           prodh	equ	0xFF4
 25574                           prodl	equ	0xFF3
 25575                           intcon	equ	0xFF2
 25576                           intcon2	equ	0xFF1
 25577                           intcon3	equ	0xFF0
 25578                           indf0	equ	0xFEF
 25579                           postinc0	equ	0xFEE
 25580                           fsr0h	equ	0xFEA
 25581                           fsr0l	equ	0xFE9
 25582                           wreg	equ	0xFE8
 25583                           postdec1	equ	0xFE5
 25584                           fsr1h	equ	0xFE2
 25585                           fsr1l	equ	0xFE1
 25586                           indf2	equ	0xFDF
 25587                           postinc2	equ	0xFDE
 25588                           postdec2	equ	0xFDD
 25589                           fsr2h	equ	0xFDA
 25590                           fsr2l	equ	0xFD9
 25591                           status	equ	0xFD8
 25592                           
 25593 ;; *************** function i2_I2C_Master_Read *****************
 25594 ;; Defined at:
 25595 ;;		line 55 in file "I2C.c"
 25596 ;; Parameters:    Size  Location     Type
 25597 ;;  a               1    wreg     unsigned char 
 25598 ;; Auto vars:     Size  Location     Type
 25599 ;;  a               1    1[COMRAM] unsigned char 
 25600 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 25601 ;; Return value:  Size  Location     Type
 25602 ;;                  1    wreg      unsigned char 
 25603 ;; Registers used:
 25604 ;;		wreg, status,2, status,0, cstack
 25605 ;; Tracked objects:
 25606 ;;		On entry : 0/0
 25607 ;;		On exit  : 0/0
 25608 ;;		Unchanged: 0/0
 25609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25611 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25613 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25614 ;;Total ram usage:        2 bytes
 25615 ;; Hardware stack levels used:    1
 25616 ;; Hardware stack levels required when called:    1
 25617 ;; This function calls:
 25618 ;;		i2_I2C_Master_Wait
 25619 ;; This function is called by:
 25620 ;;		i2_getRTC
 25621 ;; This function uses a non-reentrant model
 25622 ;;
 25623                           
 25624                           	psect	text99
 25625  005A18                     __ptext99:
 25626                           	opt stack 0
 25627  005A18                     i2_I2C_Master_Read:
 25628                           	opt stack 19
 25629                           
 25630                           ;incstack = 0
 25631                           ;i2I2C_Master_Read@a stored from wreg
 25632  005A18  6E02               	movwf	i2I2C_Master_Read@a,c
 25633                           
 25634                           ;I2C.c: 57: unsigned char temp;
 25635                           ;I2C.c: 58: I2C_Master_Wait();
 25636  005A1A  ECAA  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25637                           
 25638                           ;I2C.c: 59: RCEN = 1;
 25639  005A1E  86C5               	bsf	4037,3,c	;volatile
 25640                           
 25641                           ;I2C.c: 60: I2C_Master_Wait();
 25642  005A20  ECAA  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25643                           
 25644                           ;I2C.c: 61: temp = SSPBUF;
 25645  005A24  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 25646                           
 25647                           ;I2C.c: 62: I2C_Master_Wait();
 25648  005A28  ECAA  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25649                           
 25650                           ;I2C.c: 63: ACKDT = (a)?0:1;
 25651  005A2C  5002               	movf	i2I2C_Master_Read@a,w,c
 25652  005A2E  A4D8               	btfss	status,2,c
 25653  005A30  D002               	goto	i2u501_40
 25654  005A32  8AC5               	bsf	4037,5,c	;volatile
 25655  005A34  D001               	goto	i2l6595
 25656  005A36                     i2u501_40:
 25657  005A36  9AC5               	bcf	4037,5,c	;volatile
 25658  005A38                     i2l6595:
 25659                           
 25660                           ;I2C.c: 64: ACKEN = 1;
 25661  005A38  88C5               	bsf	4037,4,c	;volatile
 25662                           
 25663                           ;I2C.c: 65: return temp;
 25664  005A3A  5003               	movf	i2I2C_Master_Read@temp,w,c
 25665  005A3C  0012               	return	
 25666  005A3E                     __end_ofi2_I2C_Master_Read:
 25667                           	opt stack 0
 25668                           pclatu	equ	0xFFB
 25669                           pclath	equ	0xFFA
 25670                           tblptru	equ	0xFF8
 25671                           tblptrh	equ	0xFF7
 25672                           tblptrl	equ	0xFF6
 25673                           tablat	equ	0xFF5
 25674                           prodh	equ	0xFF4
 25675                           prodl	equ	0xFF3
 25676                           intcon	equ	0xFF2
 25677                           intcon2	equ	0xFF1
 25678                           intcon3	equ	0xFF0
 25679                           indf0	equ	0xFEF
 25680                           postinc0	equ	0xFEE
 25681                           fsr0h	equ	0xFEA
 25682                           fsr0l	equ	0xFE9
 25683                           wreg	equ	0xFE8
 25684                           postdec1	equ	0xFE5
 25685                           fsr1h	equ	0xFE2
 25686                           fsr1l	equ	0xFE1
 25687                           indf2	equ	0xFDF
 25688                           postinc2	equ	0xFDE
 25689                           postdec2	equ	0xFDD
 25690                           fsr2h	equ	0xFDA
 25691                           fsr2l	equ	0xFD9
 25692                           status	equ	0xFD8
 25693                           
 25694 ;; *************** function i2_I2C_Master_Wait *****************
 25695 ;; Defined at:
 25696 ;;		line 26 in file "I2C.c"
 25697 ;; Parameters:    Size  Location     Type
 25698 ;;		None
 25699 ;; Auto vars:     Size  Location     Type
 25700 ;;		None
 25701 ;; Return value:  Size  Location     Type
 25702 ;;                  1    wreg      void 
 25703 ;; Registers used:
 25704 ;;		wreg, status,2, status,0
 25705 ;; Tracked objects:
 25706 ;;		On entry : 0/0
 25707 ;;		On exit  : 0/0
 25708 ;;		Unchanged: 0/0
 25709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25712 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25713 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25714 ;;Total ram usage:        1 bytes
 25715 ;; Hardware stack levels used:    1
 25716 ;; This function calls:
 25717 ;;		Nothing
 25718 ;; This function is called by:
 25719 ;;		i2_I2C_Master_Start
 25720 ;;		i2_I2C_Master_Stop
 25721 ;;		i2_I2C_Master_Write
 25722 ;;		i2_I2C_Master_Read
 25723 ;; This function uses a non-reentrant model
 25724 ;;
 25725                           
 25726                           	psect	text100
 25727  005B54                     __ptext100:
 25728                           	opt stack 0
 25729  005B54                     i2_I2C_Master_Wait:
 25730                           	opt stack 19
 25731  005B54                     i2l71:
 25732  005B54  B4C7               	btfsc	4039,2,c	;volatile
 25733  005B56  D7FE               	goto	i2l71
 25734  005B58  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 25735  005B5C  0E1F               	movlw	31
 25736  005B5E  1601               	andwf	??i2_I2C_Master_Wait,f,c
 25737  005B60  B4D8               	btfsc	status,2,c
 25738  005B62  0012               	return	
 25739  005B64  D7F7               	goto	i2l71
 25740  005B66                     __end_ofi2_I2C_Master_Wait:
 25741                           	opt stack 0
 25742                           pclatu	equ	0xFFB
 25743                           pclath	equ	0xFFA
 25744                           tblptru	equ	0xFF8
 25745                           tblptrh	equ	0xFF7
 25746                           tblptrl	equ	0xFF6
 25747                           tablat	equ	0xFF5
 25748                           prodh	equ	0xFF4
 25749                           prodl	equ	0xFF3
 25750                           intcon	equ	0xFF2
 25751                           intcon2	equ	0xFF1
 25752                           intcon3	equ	0xFF0
 25753                           indf0	equ	0xFEF
 25754                           postinc0	equ	0xFEE
 25755                           fsr0h	equ	0xFEA
 25756                           fsr0l	equ	0xFE9
 25757                           wreg	equ	0xFE8
 25758                           postdec1	equ	0xFE5
 25759                           fsr1h	equ	0xFE2
 25760                           fsr1l	equ	0xFE1
 25761                           indf2	equ	0xFDF
 25762                           postinc2	equ	0xFDE
 25763                           postdec2	equ	0xFDD
 25764                           fsr2h	equ	0xFDA
 25765                           fsr2l	equ	0xFD9
 25766                           status	equ	0xFD8
 25767                           
 25768 ;; *************** function i2_delay_ms *****************
 25769 ;; Defined at:
 25770 ;;		line 670 in file "sort.c"
 25771 ;; Parameters:    Size  Location     Type
 25772 ;;  milliseconds    1    wreg     unsigned char 
 25773 ;; Auto vars:     Size  Location     Type
 25774 ;;  milliseconds    1    1[COMRAM] unsigned char 
 25775 ;; Return value:  Size  Location     Type
 25776 ;;                  1    wreg      void 
 25777 ;; Registers used:
 25778 ;;		wreg, status,2, status,0, cstack
 25779 ;; Tracked objects:
 25780 ;;		On entry : 0/0
 25781 ;;		On exit  : 0/0
 25782 ;;		Unchanged: 0/0
 25783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25785 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25786 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25787 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25788 ;;Total ram usage:        2 bytes
 25789 ;; Hardware stack levels used:    1
 25790 ;; This function calls:
 25791 ;;		Nothing
 25792 ;; This function is called by:
 25793 ;;		_printSortTimer
 25794 ;; This function uses a non-reentrant model
 25795 ;;
 25796                           
 25797                           	psect	text101
 25798  005AE0                     __ptext101:
 25799                           	opt stack 0
 25800  005AE0                     i2_delay_ms:
 25801                           	opt stack 22
 25802                           
 25803                           ;incstack = 0
 25804                           ;i2delay_ms@milliseconds stored from wreg
 25805  005AE0  6E02               	movwf	i2delay_ms@milliseconds,c
 25806                           
 25807                           ;sort.c: 671: while(milliseconds > 0)
 25808  005AE2  D008               	goto	i2l9189
 25809  005AE4                     i2l9185:
 25810                           
 25811                           ;sort.c: 672: {
 25812                           ;sort.c: 673: milliseconds--;
 25813  005AE4  0602               	decf	i2delay_ms@milliseconds,f,c
 25814                           
 25815                           ;sort.c: 674: _delay((unsigned long)((990)*(32000000/4000000.0)));
 25816  005AE6  0E0B               	movlw	11
 25817  005AE8  6E01               	movwf	??i2_delay_ms& (0+255),c
 25818  005AEA  0E48               	movlw	72
 25819  005AEC                     i2u1134_47:
 25820  005AEC  2EE8               	decfsz	wreg,f,c
 25821  005AEE  D7FE               	bra	i2u1134_47
 25822  005AF0  2E01               	decfsz	??i2_delay_ms& (0+255),f,c
 25823  005AF2  D7FC               	bra	i2u1134_47
 25824  005AF4                     i2l9189:
 25825  005AF4  5002               	movf	i2delay_ms@milliseconds,w,c
 25826  005AF6  B4D8               	btfsc	status,2,c
 25827  005AF8  0012               	return	
 25828  005AFA  D7F4               	goto	i2l9185
 25829  005AFC                     __end_ofi2_delay_ms:
 25830                           	opt stack 0
 25831                           pclatu	equ	0xFFB
 25832                           pclath	equ	0xFFA
 25833                           tblptru	equ	0xFF8
 25834                           tblptrh	equ	0xFF7
 25835                           tblptrl	equ	0xFF6
 25836                           tablat	equ	0xFF5
 25837                           prodh	equ	0xFF4
 25838                           prodl	equ	0xFF3
 25839                           intcon	equ	0xFF2
 25840                           intcon2	equ	0xFF1
 25841                           intcon3	equ	0xFF0
 25842                           indf0	equ	0xFEF
 25843                           postinc0	equ	0xFEE
 25844                           fsr0h	equ	0xFEA
 25845                           fsr0l	equ	0xFE9
 25846                           wreg	equ	0xFE8
 25847                           postdec1	equ	0xFE5
 25848                           fsr1h	equ	0xFE2
 25849                           fsr1l	equ	0xFE1
 25850                           indf2	equ	0xFDF
 25851                           postinc2	equ	0xFDE
 25852                           postdec2	equ	0xFDD
 25853                           fsr2h	equ	0xFDA
 25854                           fsr2l	equ	0xFD9
 25855                           status	equ	0xFD8
 25856                           pclatu	equ	0xFFB
 25857                           pclath	equ	0xFFA
 25858                           tblptru	equ	0xFF8
 25859                           tblptrh	equ	0xFF7
 25860                           tblptrl	equ	0xFF6
 25861                           tablat	equ	0xFF5
 25862                           prodh	equ	0xFF4
 25863                           prodl	equ	0xFF3
 25864                           intcon	equ	0xFF2
 25865                           intcon2	equ	0xFF1
 25866                           intcon3	equ	0xFF0
 25867                           indf0	equ	0xFEF
 25868                           postinc0	equ	0xFEE
 25869                           fsr0h	equ	0xFEA
 25870                           fsr0l	equ	0xFE9
 25871                           wreg	equ	0xFE8
 25872                           postdec1	equ	0xFE5
 25873                           fsr1h	equ	0xFE2
 25874                           fsr1l	equ	0xFE1
 25875                           indf2	equ	0xFDF
 25876                           postinc2	equ	0xFDE
 25877                           postdec2	equ	0xFDD
 25878                           fsr2h	equ	0xFDA
 25879                           fsr2l	equ	0xFD9
 25880                           status	equ	0xFD8
 25881                           
 25882                           	psect	rparam
 25883  0000                     pclatu	equ	0xFFB
 25884                           pclath	equ	0xFFA
 25885                           tblptru	equ	0xFF8
 25886                           tblptrh	equ	0xFF7
 25887                           tblptrl	equ	0xFF6
 25888                           tablat	equ	0xFF5
 25889                           prodh	equ	0xFF4
 25890                           prodl	equ	0xFF3
 25891                           intcon	equ	0xFF2
 25892                           intcon2	equ	0xFF1
 25893                           intcon3	equ	0xFF0
 25894                           indf0	equ	0xFEF
 25895                           postinc0	equ	0xFEE
 25896                           fsr0h	equ	0xFEA
 25897                           fsr0l	equ	0xFE9
 25898                           wreg	equ	0xFE8
 25899                           postdec1	equ	0xFE5
 25900                           fsr1h	equ	0xFE2
 25901                           fsr1l	equ	0xFE1
 25902                           indf2	equ	0xFDF
 25903                           postinc2	equ	0xFDE
 25904                           postdec2	equ	0xFDD
 25905                           fsr2h	equ	0xFDA
 25906                           fsr2l	equ	0xFD9
 25907                           status	equ	0xFD8
 25908                           
 25909                           	psect	temp
 25910  00007E                     btemp:
 25911                           	opt stack 0
 25912  00007E                     	ds	1
 25913  0000                     int$flags	set	btemp
 25914                           pclatu	equ	0xFFB
 25915                           pclath	equ	0xFFA
 25916                           tblptru	equ	0xFF8
 25917                           tblptrh	equ	0xFF7
 25918                           tblptrl	equ	0xFF6
 25919                           tablat	equ	0xFF5
 25920                           prodh	equ	0xFF4
 25921                           prodl	equ	0xFF3
 25922                           intcon	equ	0xFF2
 25923                           intcon2	equ	0xFF1
 25924                           intcon3	equ	0xFF0
 25925                           indf0	equ	0xFEF
 25926                           postinc0	equ	0xFEE
 25927                           fsr0h	equ	0xFEA
 25928                           fsr0l	equ	0xFE9
 25929                           wreg	equ	0xFE8
 25930                           postdec1	equ	0xFE5
 25931                           fsr1h	equ	0xFE2
 25932                           fsr1l	equ	0xFE1
 25933                           indf2	equ	0xFDF
 25934                           postinc2	equ	0xFDE
 25935                           postdec2	equ	0xFDD
 25936                           fsr2h	equ	0xFDA
 25937                           fsr2l	equ	0xFD9
 25938                           status	equ	0xFD8


Data Sizes:
    Strings     1351
    Constant    27
    Data        8
    BSS         146
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      81
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_130(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_129(CODE[18]), STR_128(CODE[18]), STR_127(CODE[17]), STR_126(CODE[17]), 
		 -> STR_125(CODE[15]), STR_124(CODE[15]), STR_123(CODE[18]), STR_122(CODE[15]), 
		 -> STR_121(CODE[18]), STR_120(CODE[18]), STR_119(CODE[17]), STR_118(CODE[17]), 
		 -> STR_117(CODE[17]), STR_116(CODE[17]), STR_115(CODE[17]), STR_114(CODE[17]), 
		 -> STR_113(CODE[17]), STR_112(CODE[17]), STR_111(CODE[18]), STR_110(CODE[17]), 
		 -> STR_109(CODE[15]), STR_108(CODE[15]), STR_107(CODE[15]), STR_106(CODE[17]), 
		 -> STR_105(CODE[17]), STR_104(CODE[17]), STR_103(CODE[16]), STR_102(CODE[17]), 
		 -> STR_101(CODE[17]), STR_100(CODE[17]), STR_99(CODE[17]), STR_98(CODE[17]), 
		 -> STR_97(CODE[17]), STR_96(CODE[15]), STR_95(CODE[11]), STR_94(CODE[17]), 
		 -> STR_93(CODE[11]), STR_92(CODE[17]), STR_91(CODE[14]), STR_90(CODE[15]), 
		 -> STR_89(CODE[14]), STR_88(CODE[10]), STR_87(CODE[9]), STR_86(CODE[9]), 
		 -> STR_85(CODE[10]), STR_84(CODE[10]), STR_83(CODE[16]), STR_82(CODE[15]), 
		 -> STR_81(CODE[3]), STR_80(CODE[15]), STR_79(CODE[13]), STR_78(CODE[14]), 
		 -> STR_77(CODE[8]), STR_76(CODE[14]), STR_75(CODE[15]), STR_74(CODE[12]), 
		 -> STR_73(CODE[14]), STR_72(CODE[17]), STR_71(CODE[14]), STR_70(CODE[15]), 
		 -> STR_69(CODE[17]), STR_68(CODE[17]), STR_67(CODE[7]), STR_66(CODE[21]), 
		 -> STR_65(CODE[17]), STR_64(CODE[17]), STR_63(CODE[24]), STR_50(CODE[17]), 
		 -> STR_49(CODE[17]), STR_48(CODE[17]), STR_47(CODE[17]), STR_46(CODE[17]), 
		 -> STR_45(CODE[17]), STR_44(CODE[17]), STR_43(CODE[17]), STR_42(CODE[17]), 
		 -> STR_41(CODE[17]), STR_40(CODE[17]), STR_39(CODE[17]), STR_38(CODE[17]), 
		 -> STR_37(CODE[17]), STR_36(CODE[17]), STR_35(CODE[17]), STR_34(CODE[17]), 
		 -> STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), STR_30(CODE[17]), 
		 -> STR_29(CODE[3]), STR_28(CODE[17]), STR_27(CODE[17]), STR_26(CODE[17]), 
		 -> STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[14]), STR_22(CODE[10]), 
		 -> STR_21(CODE[24]), STR_7(CODE[7]), STR_6(CODE[17]), STR_5(CODE[18]), 
		 -> STR_4(CODE[16]), STR_3(CODE[18]), STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    _updateServoStates->i2_updateServoPosition
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getMAG->_readMAG
    _getIR->_readIR
    _readIR->_readADC
    _ID->___ftge
    _readCOND->_readADC
    ___ftge->___awtoft
    ___awtoft->___awdiv
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _initEEPROM->_EEPROM_write
    _EEPROM_write->_printf
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _arm->_printf
    _algorithmTest->_printf
    _actuatorTest->_printf
    _SpeedTest->_printf
    _PortTestPusher->_printf
    _PortTestDC->_printf
    _PlatformTest->_printf
    _BothServos->_printf
    _initServos->_updateServoPosition
    _BlockerTest->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  240830
                    _I2C_Master_Init
                               _Test
                                 _UI
                         _initEEPROM
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   28180
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                             19    19      0   18234
                                             49 BANK0     19    19      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                             _getMAG
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _getIR                                                3     3      0      91
                                              6 BANK0      3     3      0
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _ID                                                  21    21      0    4553
                                             27 BANK0     21    21      0
                            ___awdiv
                           ___awtoft
                             ___ftge
                           _delay_ms
                           _readCOND
 ---------------------------------------------------------------------------------
 (3) _readCOND                                             4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     520
                                             18 BANK0      9     3      6
                            ___awdiv (ARG)
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2236
                                             14 BANK0      4     1      3
                            ___awdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1953
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    5393
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   11670
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   23480
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   22566
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _initEEPROM                                           0     0      0   10923
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   10923
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   47224
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   13467
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    9099
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    9099
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1068
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0  118240
                                             70 BANK0      2     2      0
                        _BlockerTest
                         _BothServos
                       _PlatformTest
                         _PortTestDC
                     _PortTestPusher
                          _SpeedTest
                       _actuatorTest
                      _algorithmTest
                                _arm
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    9211
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _arm                                                  3     3      0    9168
                                             43 BANK0      3     3      0
                            _lcdInst
                             _printf
                        _stopSignals
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    9099
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   15735
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _SpeedTest                                            1     1      0    9099
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTestPusher                                       1     1      0    9099
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTestDC                                           1     1      0    9099
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PlatformTest                                        12    12      0    9372
                                             43 BANK0     12    12      0
                            _lcdInst
                             _printf
                            _readADC
                        _stopSignals
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   19885
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                        _stopSignals
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    5393
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    5393
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _BlockerTest                                         10    10      0    9374
                                             43 BANK0     10    10      0
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    8964
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     366
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   83967
                                             74 COMRAM    16    16      0
                     _printSortTimer
                     _updateArmState
                         _updateMenu
                  _updateServoStates
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) _updateServoStates                                    2     2      0     593
                                              8 COMRAM     2     2      0
              i2_updateServoPosition
 ---------------------------------------------------------------------------------
 (9) i2_updateServoPosition                                8     4      4     593
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   70855
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) i2_change_state_to_menu_start                         0     0      0    7640
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printRTC                                          25    25      0    4553
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (10) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30870
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _updateArmState                                       2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4879
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                         i2_delay_ms
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printf                                            33    21     12    2952
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (10) i2___lwdiv                                           7     3      4     266
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (10) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i2_delay_ms                                           2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BlockerTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _stopSignals
       _updateServoPosition
     _PlatformTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _stopSignals
     _PortTestDC
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTestPusher
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _SpeedTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _arm
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _stopSignals
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initEEPROM
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       ___awdiv
         ___awmod (ARG)
       ___awtoft
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       ___ftge
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
       _delay_ms
       _readCOND
         _readADC
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _getMAG
         _readMAG
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _readIR
         _readADC
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_delay_ms
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateArmState
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
   _updateServoStates
     i2_updateServoPosition
   i2_change_state_to_menu_start
     i2_lcdInst
       i2_lcdNibble
     i2_printRTC
       i2_getRTC
         i2_I2C_Master_Read
           i2_I2C_Master_Wait
         i2_I2C_Master_Start
           i2_I2C_Master_Wait
         i2_I2C_Master_Stop
           i2_I2C_Master_Wait
         i2_I2C_Master_Write
           i2_I2C_Master_Wait
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
       i2_strcpy
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      51       7       31.6%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     14E      34        0.0%
DATA                 0      0     14E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Apr 10 10:56:52 2017

                                    _i 013F                     i2_I2C_Master_Start 5BD2  
                   i2_I2C_Master_Write 5BA8                                     l71 5B40  
                                   _ID 1BBA                       _f_panning_to_bin 0061  
                          __CFG_CPD$ON 000000                                     _UI 0012  
                         ___awdiv@sign 008B                                     _up 0075  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                     EEPROM_read@address 0080  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
               __end_of_updateArmState 55A4                                    ID@i 009F  
                                  ID@n 00AE                                    ?_ID 0001  
                                  ?_UI 0001                                    UI@i 00C8  
                                  l193 0102                                    l185 00E2  
                                  l188 00E6                                    l508 47A2  
                                  l627 2DD0                                    l803 1424  
                                  l813 1578                                    l830 1600  
                                  l806 1472                                    l920 4D6C  
                                  l840 1774                                    l832 1626  
                                  l824 1728                                    l816 150C  
                                  l833 164E                                    l834 1676  
                                  l818 1538                                    l835 169E  
                                  l836 16C8                                    l845 1C80  
                                  l864 1F5A                                    l865 1F74  
                                  l785 125E                                    l795 1326  
                                  l798 1374                           __CFG_CPB$OFF 000000  
                                  _PR2 000FCB                                    _PEN 007E2A  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
            __end_of_updateServoStates 3D24                         ?_machineConfig 0001  
                  ?i2_I2C_Master_Write 0002                                    _arm 435E  
                                  _log 00F4                                    _sel 00FD  
                                  _var 0147                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
                  __end_of_BlockerTest 3EEA                    _log_count_can_w_lab 0141  
                           i2_delay_ms 5AE0        __end_of_change_state_to_menu_11 57D4  
      __end_of_change_state_to_menu_12 5614        __end_of_change_state_to_menu_22 55DC  
      __end_of_change_state_to_menu_23 57A4           _f_can_coming_to_distribution 0133  
                       ??_Distribution 0088        __end_of_change_state_to_logs_11 58C4  
      __end_of_change_state_to_logs_12 5894        __end_of_change_state_to_logs_22 5864  
      __end_of_change_state_to_logs_23 5920        __end_of_change_state_to_logs_33 5834  
      __end_of_change_state_to_logs_34 5804                                   ??_ID 009B  
                                 ??_UI 00C4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1131 5B0C  
                                 l1140 4018                                   l1301 0A50  
                                 l1302 0A9E                                   l1118 447E  
                                 l1303 0B04                                   l1304 0B52  
                                 l1233 429E                                   l1340 1046  
                                 l1236 42BE                                   l1423 4E02  
                                 l1440 3E26                                   l1416 4DF2  
                                 l1328 0EAC                                   l1256 4684  
                                 l1345 111C                                   l1265 2A7A  
                                 l1291 0940                                   l1259 4688  
                                 l1364 52B8                                   l1460 444E  
                                 l1268 2A7E                                   l1517 19C8  
                                 l1445 3E72                                   l1461 4410  
                                 l1446 3E8C                                   l1358 52A8  
                                 l1294 0944                                   l1392 29DA  
                                 l1394 2A08                                   l1298 09EA  
                                 l1379 2A0E                                   l1483 525C  
                                 l1388 2982                                   l1477 524C  
                                 l1469 4448                                   ?_arm 0001  
                                 l1911 4AB8                                   l1781 4224  
                                 l1964 4F18                                   l1974 519E  
                                 l7131 2E52                                   l7123 2DDA  
                                 l7141 2EE8                                   l7133 2E70  
                                 l7125 2DF8                                   l7117 2D4E  
                                 l8021 1C3C                                   l7143 2F06  
                                 l7135 2E8E                                   l7127 2E16  
                                 l7151 2FA0                                   l8111 1EF6  
                                 l7303 4AEE                                   l7145 2F24  
                                 l7137 2EAC                                   l7129 2E34  
                                 l7139 2ECA                                   l8123 1F2E  
                                 l8107 1EE6                                   l8051 1CEE  
                                 l7403 4F46                                   l9101 3E5C  
                                 l8301 2D12                                   l6509 58EA  
                                 l7149 2F42                                   l8061 1DBA  
                                 l7309 4B64                                   l6543 4EC8  
                                 l6527 5998                                   l6711 18A2  
                                 l6703 1870                                   l9111 3E8E  
                                 l8151 4576                                   l8127 1F44  
                                 l8119 1F1E                                   l8039 1CAA  
                                 l7415 4F70                                   _ADIE 007CEE  
                                 l6545 4ED4                                   l6801 1B30  
                                 l6721 191A                                   l6713 18AE  
                                 l9113 3E9E                                   l9121 3EE4  
                                 l7361 452C                                   l7345 44EA  
                                 l7353 450C                                   l8153 4590  
                                 l8161 45F2                                   l8073 1DF8  
                                 l6555 4F0A                                   l6547 4EDA  
                                 l6571 5190                                   l6563 515A  
                                 l6803 1B36                                   l6731 1970  
                                 l6723 1926                                   l6715 18B4  
                                 l7451 49AC                                   l7443 4982  
                                 l9131 4B90                                   l8155 45AA  
                                 l7371 59BE                                   l7419 4F88  
                                 l6565 5166                                   l6733 1988  
                                 l6725 192C                                   l6485 5960  
                                 l8341 09AE                                   l8229 2ACE  
                                 l7461 49E2                                   l7453 49B2  
                                 l7437 496C                                   l9141 4BC0  
                                 l6821 4CE2                                   l6813 561E  
                                 l7357 4522                                   l7349 44F4  
                                 l8149 455C                                   l8085 1E3C  
                                 l6567 516C                                   l6807 1B8E  
                                 l6727 1944                                   l6487 5972  
                                 l8431 0BD8                                   l8351 09D6  
                                 l8343 09B4                                   l8247 2B86  
                                 l9143 4BC6                                   l9151 4BF8  
                                 l9135 4BA0                                   l6831 4D18  
                                 l6815 562A                                   l9311 02A0  
                                 l9303 027E                                   l9223 00FE  
                                 l6903 4A3C                                   l8159 45C4  
                                 l7367 59A8                                   l8095 1EB4  
                                 l6753 1A1A                                   l6737 198E  
                                 l6809 1B9A                                   l8513 0D7C  
                                 l8505 0D5A                                   l8441 0C00  
                                 l8265 2C18                                   l7449 49A0  
                                 l7465 49F0                                   l6825 4CF8  
                                 l9241 015C                                   l9233 013A  
                                 l6905 4A4C                                   l7481 5500  
                                 l6755 1A20                                   l6683 17A4  
                                 l9091 3E28                                   l9067 3DAE  
                                 l9075 3DF4                                   l8611 0F78  
                                 l8603 0F3E                                   l8531 0DDE  
                                 l8523 0DA4                                   l8515 0D82  
                                 l8435 0BF0                                   l8427 0BCE  
                                 l8347 09BE                                   l8259 2BD6  
                                 l9155 4C0C                                   l9147 4BEA  
                                 l9139 4BB4                                   l9411 065C  
                                 l9403 063A                                   l9331 032E  
                                 l9307 0288                                   l6915 4AA6  
                                 l6907 4A52                                   l8099 1EBE  
                                 l7299 4AD8                                   l6773 1A7E  
                                 l6749 1A00                                   l6685 17B6  
                                 l9093 3E38                                   l8621 0FA0  
                                 l8541 0E06                                   l8509 0D64  
                                 l8461 0C74                                   l8453 0C52  
                                 l8445 0C18                                   l8437 0BF6  
                                 l8285 2C94                                   l8277 2C64  
                                 l7469 4A04                                   l9501 07F0  
                                 l9421 0678                                   l9341 03C4  
                                 l9333 034C                                   l9261 01C8  
                                 l9245 016E                                   l9237 0144  
                                 l9229 0128                                   l7581 4C58  
                                 l7493 4848                                   l6791 1AF6  
                                 l6767 1A5C                                   l6695 17F4  
                                 l6679 1790                                   l6855 4D8A  
                                 l8711 1146                                   l8615 0F82  
                                 l8535 0DE8                                   l8519 0D8C  
                                 l8471 0C9C                                   l8463 0C7A  
                                 l9407 0644                                   l9351 045A  
                                 l9343 03E2                                   l9335 036A  
                                 l9327 02F2                                   l7591 4C9A  
                                 l6871 4188                                   l7399 4F30  
                                 l7903 14A0                                   l7823 12A2  
                                 l7807 1266                                   l6793 1B02  
                                 l6785 1ADA                                   l6777 1AB6  
                                 l6689 17C0                                   l6849 4D50  
                                 l8721 116E                                   l8705 1136  
                                 l8641 1006                                   l8625 0FAA  
                                 l8561 0E6C                                   l8545 0E10  
                                 l8457 0C5C                                   l8297 2CDC  
                                 l8289 2CCA                                   l9505 0808  
                                 l9425 0690                                   l9417 066E  
                                 l9361 051E                                   l9345 0400  
                                 l9337 0388                                   l9329 0310  
                                 l9265 01D2                                   l7585 4C6E  
                                 l6881 4216                                   l6873 41B8  
                                 l6865 4166                                   l7489 4808  
                                 l7913 14E6                                   l6779 1AC0  
                                 l9099 3E52                                   l8715 115E  
                                 l8707 113C                                   l8651 102E  
                                 l8619 0F9A                                   l8571 0E94  
                                 l8539 0E00                                   l8483 0CE0  
                                 l8467 0C84                                   l9531 0888  
                                 l9523 0866                                   l9451 0718  
                                 l9443 06F6                                   l9347 041E  
                                 l9339 03A6                                   l9355 0478  
                                 l9259 01C2                                   l9275 01F8  
                                 l7499 488C                                   l7923 152C  
                                 l7915 14F0                                   l7907 14C6  
                                 l7843 1310                                   l6797 1B1C  
                                 l8821 4E2A                                   l8725 1186  
                                 l8717 1164                                   l8645 101E  
                                 l8637 0FFC                                   l8629 0FC2  
                                 l8565 0E84                                   l8557 0E62  
                                 l8549 0E28                                   l8493 0D08  
                                 l9541 08A4                                   l9461 0734  
                                 l9365 0528                                   l9349 043C  
                                 l9357 04DC                                   l9293 0254  
                                 l9269 01EA                                   l6893 424A  
                                 l6877 41D8                                   l6869 417A  
                                 l7941 15DC                                   l7853 1354  
                                 l8671 1096                                   l8647 1024  
                                 l8567 0E8A                                   l8487 0CF8  
                                 l8479 0CD6                                   l9527 0870  
                                 l9447 0700                                   l9383 0574  
                                 l9375 0552                                   l6887 422E  
                                 l6879 4208                                   l7919 1510  
                                 l7855 135E                                   l8913 292E  
                                 l8681 10BE                                   l8593 0F16  
                                 l8585 0EF4                                   l8497 0D20  
                                 l8489 0CFE                                   l8761 4402  
                                 l9545 08BC                                   l9537 089A  
                                 l9465 074C                                   l9457 072A  
                                 l9369 0540                                   l9297 026C  
                                 l9289 024A                                   l9801 3F36  
                                 l7881 140E                                   l7865 13A2  
                                 l8923 296C                                   l8915 2944  
                                 l8907 290E                                   l8675 10A0  
                                 l8595 0F1C                                   l8771 443A  
                                 l8755 43D2                                   l9491 07D4  
                                 l9483 07B2                                   l9379 055C  
                                 l9803 3F4A                                   l7971 16DE  
                                 l7891 1452                                   l8933 29B0  
                                 l8685 10C8                                   l8589 0EFE  
                                 l9549 08C8                                   l7973 1714  
                                 l7893 145C                                   l7797 121C  
                                 l8919 2958                                   l8695 1106  
                                 l8679 10B8                                   l8599 0F26  
                                 l8759 43F8                                   l8767 4416  
                                 l9487 07BC                                   l7991 1768  
                                 l8937 29C4                                   l8857 2766  
                                 l8689 10E0                                   l8769 4430  
                                 l9841 425A                                   l9497 07E6  
                                 l7993 1776                                   l8875 2816  
                                 l9827 3FD2                                   l7979 1730  
                                 l8877 281C                                   l9861 42D0  
                                 l8895 28CC                                   l9871 42EE  
                                 l9863 42D6                                   STR_1 FB51  
                                 STR_2 FF4A                                   l9873 42F4  
                                 l9865 42DC                                   l9857 42C4  
                                 l9881 4352                                   STR_3 FB3F  
                                 STR_4 FE5E                                   l9875 42FA  
                                 l9867 42E2                                   l9859 42CA  
                                 STR_5 FB3F                                   STR_6 FDFA  
                                 l9869 42E8                                   STR_7 FFC4  
                                 STR_8 FFDB                                   l9879 4300  
                                 STR_9 FFCB                ??i2_updateServoPosition 0005  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u5110 53FC  
                                 u5120 53FE                                   u5130 5494  
                                 u5131 5490                                   u5140 5496  
                                 u5230 1966                                   _PEIE 007F96  
                                 u5237 195C                                   u5190 18EE  
                                 u7120 2D00                                   u7210 0A9E  
                                 u7050 2B10                                   u7060 2B12  
                                 _RCEN 007E2B                                   u5197 18E4  
                                 u8030 293C                                   u7230 0B52  
                                 u4910 58E8                                   u8040 2954  
                                 u7128 2D04                                   u8041 2950  
                                 u7090 2CB8                                   u6370 1228  
                                 u6700 15FE                                   u8221 3E48  
                                 u8230 3E4A                                   u7190 09EA  
                                 u6630 154A                                   u6390 125E  
                                 i2l71 5B54                                   u5920 2DD0  
                                 u6800 1D3A                                   u5905 51D8  
                                 u7098 2CBC                                   u6810 1D3C  
                                 u6650 1570                                   u8171 3E1C  
                                 u8180 3E1E                                   u6900 1E8A  
                                 u6820 1D8E                                   u6660 1572  
                                 u6388 122C                                   u7710 43EE  
                                 u6830 1D90                                   u7720 43F0  
                                 u5880 5448                                   u6648 154E  
                                 u5890 544A                                   u7900 27A8  
                                 u7910 27AA                                   u7760 4426  
                                 u7930 285E                                   u7770 4428  
                                 u9290 4018                                   u6890 1E88  
                                 u7940 2860                                   u7980 28F6  
                                 u9717 11AC                                   u9807 1440  
                                 u9727 12D0                                   u9817 147C  
                                 u9737 1330                                   u9907 1658  
                                 u9827 148E                                   u9747 1342  
                                 u9917 166C                                   u9837 14AE  
                                 u9757 137E                                   u7998 28FA  
                                 u9927 1680                                   u9847 1592  
                                 u9767 1390                                   u9937 1694  
                                 u9857 15CA                                   u9777 13B0  
                                 u9947 16A8                                   u9867 160A  
                                 u9787 13DA                                   u9957 16BC  
                                 u9877 161C                                   u9797 142E  
                                 u9967 16D2                                   u9887 1630  
                                 u9977 174A                                   u9897 1644  
                                 u9987 569E                                   _RSEN 007E29  
                                 u9997 4F4E                            _stopSignals 5AC4  
                                 _Test 4258                                   _back 005B  
                                 _main 46FC                                   _down 005D  
                         ___ftpack@arg 0080                                   _keys FA9D  
                         ___ftpack@exp 0083                                   _time 011C  
                                 fsr0h 000FEA                                   fsr1h 000FE2  
                   i2___lwdiv@quotient 000A                                   indf0 000FEF  
                                 fsr2h 000FDA                                   fsr0l 000FE9  
                                 indf2 000FDF                                   fsr1l 000FE1  
                                 fsr2l 000FD9                                   _sort 5A62  
                                 btemp 007E                   ??i2_I2C_Master_Start 0002  
                 ??i2_I2C_Master_Write 0004                                   prodh 000FF4  
                                 prodl 000FF3                                   start 000E  
                        __CFG_IESO$OFF 000000                   _log_count_can_no_lab 0065  
                      __end_ofi2_putch 5B92                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                             i2_printRTC 3548  
                          i2_lcdNibble 52C0                        __end_of_Loading 1782  
                 __end_of_actuatorTest 118E                                  ??_arm 00AB  
           i2updateServoPosition@timer 0003                       ?_I2C_Master_Init 008D  
                     ?_I2C_Master_Read 0001                       ?_I2C_Master_Wait 0001  
          ??i2_change_state_to_menu_12 002A            ??i2_change_state_to_menu_22 002A  
                     ?_I2C_Master_Stop 0001                                  ?_Test 0001  
                                l10103 47A4                                  l10083 4770  
                                l10075 4746                                  l10085 4776  
                                l10077 475C                                  l10087 477C  
                                l10097 4798                                  l10099 479E  
                 __end_of_EEPROM_write 4544                                  ?_main 0001  
                                _ACKEN 007E2C                                  _ACKDT 007E2D  
                      __end_of___awdiv 4A0E                        ?_updateArmState 0001  
                                _EEADR 000FA9                                  STR_10 FFE7  
                                STR_11 FFEB                                  STR_12 FFFB  
                                STR_20 FFEF                                  STR_13 FFDF  
                                STR_21 FAB8                                  STR_14 FFD7  
                                STR_22 FF9B                                  STR_30 FE0B  
                                STR_15 FFD3                                  STR_23 FF3C  
                                STR_31 FDE9                                  STR_16 FFE3  
                                STR_24 FD50                                  STR_32 FD2E  
                                STR_40 FCEA                                  STR_17 FFF3  
                                STR_25 FE2D                                  STR_33 FD3F  
                                STR_41 FCD9                                  STR_18 FFF7  
                                STR_34 FDD8                                  STR_50 FDB6  
                                STR_42 FD94                                  STR_26 FD61  
                                STR_43 FD94                                  STR_35 FDD8  
                                STR_51 FFDB                                  STR_19 FFCF  
                                STR_27 FE1C                                  STR_52 FFCB  
                                STR_60 FFF3                                  STR_28 FD72  
                                STR_36 FD1D                                  STR_44 FCFB  
                      __end_of___awmod 4C16                                  STR_45 FCEA  
                                STR_37 FD2E                                  STR_53 FFE7  
                                STR_61 FFF7                                  STR_29 FE2A  
                                STR_62 FFCF                                  STR_54 FFEB  
                                STR_70 FEF5                                  STR_38 FDC7  
                                STR_46 FDA5                                  STR_47 FDA5  
                                STR_55 FFFB                                  STR_63 FAB8  
                                STR_71 FF2E                                  STR_39 FD83  
                                STR_56 FFDF                                  STR_80 FE7D  
                                STR_48 FD0C                                  STR_64 FCB7  
                                STR_72 FC40                                  STR_49 FCFB  
                                STR_57 FFD7                                  STR_81 FE2A  
                                STR_73 FF12                                  STR_65 FCC8  
                                STR_58 FFD3                                  STR_74 FF65  
                                STR_90 FEE6                                  STR_82 FEAA  
                                STR_66 FAD0                                  STR_59 FFE3  
                                STR_67 FFBD                                  STR_91 FF04  
                                STR_75 FED7                                  STR_83 FE3E  
                                STR_84 FF87                                  STR_76 FF20  
                                STR_68 FC73                                  STR_92 FC51  
                                STR_85 FF87                                  STR_77 FFAE  
                                STR_93 FF71                                  STR_69 FC84  
                                STR_78 FF2E                                  STR_86 FFA5  
                                STR_94 FC62                                  STR_87 FFA5  
                                STR_95 FF7C                                  STR_79 FF58  
                                STR_88 FF91                                  STR_96 FEC8  
                                STR_89 FF2E                                  STR_97 FBB8  
                                STR_98 FBA7                                  STR_99 FB85  
         i2updateServoPosition@my_time 0007                                  ?_sort 0001  
                      __end_of___lldiv 4ACA           i2updateServoPosition@time_us 0001  
                                u10007 1BD4                                  u10017 1C90  
                                u10107 44FC                                  u10027 1DDE  
                                u10117 4534                                  u10037 1F5E  
                                u11007 29E4                                  u10207 02BA  
                                u10127 002A                                  u10047 1F68  
                                u11017 29F6                                  u10217 0530  
                                u10137 0114                                  u10057 1F8E  
                                u11107 21B4                                  u11027 1FB8  
                                u10307 07C4                                  u10227 0564  
                                u10147 014C                                  u10067 59B4  
                                u11117 21E8                                  u11037 2004  
                                u10317 07F8                                  u10237 058E  
                                u10157 0184                                  u10077 54A6  
                                u11207 4E90                                  u11127 221A  
                                u11047 2050                                  u10407 2B26  
                                u10327 0822                                  u10247 064C  
                                u10167 01DA                                  u10087 54DA  
                                _T0CON 000FD5                                  u11217 3D5A  
                                u11137 2266                                  u11057 2084  
                                u10417 2B7A                                  u10337 0878  
                                u10257 0680                                  u10177 0206  
                                u10097 44A0                                  u11227 3E76  
                                u11147 229A                                  u11067 20B6  
                                u10507 4678                                  u10427 2B9A  
                                u10347 08AC                                  u10267 06AA  
                                u10187 025C                        ___awdiv@divisor 0088  
                                u11237 3E80                                  u11157 22CC  
                                u11077 2102                                  u10517 469A  
                                u10437 2BC8                                  u10357 4268  
                                u10277 0708                                  u10197 0290  
                                u11247 5968                                  u11167 2318  
                                u11087 2136                                  u10607 0B14  
                                u10527 08F0                                  u10447 2C0C  
                                u10367 2A2A                                  u10287 073C  
                                _T1CON 000FCD                                  u11257 5098  
                                u11177 234C                                  u11097 2168  
                                u10617 0B32                                  u10537 0934  
                                u10457 2C2A                                  u10377 2A6E  
                                u10297 0766                                  u11267 50A2  
                                u11187 237E                                  u10707 0D94  
                                u10627 0B62                                  u10547 0956  
                                u10467 2C58                                  u10387 2A90  
                                u11277 50CE                                  u11197 4E74  
                                u10717 0DF0                                  u10637 0BE0  
                                u10557 09C6                                  u10477 2C72  
                                u10397 2ABE                                  u11287 50D8  
                                u10807 1036                                  u10727 0E18  
                                u10647 0C08                                  u10567 09FA  
                                u10487 436C                                  _T2CON 000FCA  
                                u10817 1058                                  u10737 0E74  
                                u10657 0C64                                  u10577 0A60  
                                u10497 4634                                  u10907 4E20  
                                u10827 10A8                                  u10747 0E9C  
                                u10667 0C8C                                  u10587 0A7E  
                                u10917 5216                                  u10837 10D0  
                                u10757 0F06                                  u10677 0CE8  
                                u10597 0AAE                                  u10927 5272  
                                u10847 1120                                  u10767 0F2E  
                                u10687 0D10                                  _T3CON 000FB1  
                                u10937 2744                                  u10857 112A  
                                u10777 0F8A                                  u10697 0D6C  
                                u10947 27BE                                  u10867 114E  
                                u10787 0FB2                                  u10957 280A  
                                u10877 1176                                  u10797 100E  
                                u10967 2874                                  u10887 4DBC  
                                u10977 28C0                                  u10897 4E0C  
                                u10987 298C                                  u10997 299E  
                      __end_of___lwdiv 4F22                        __end_of___lwmod 51A8  
                                i2l268 32A0                                  i2l627 35D6  
                                i2l902 3544                                  i2l920 503C  
                                i2l947 55A0                        ___awdiv@counter 008A  
                                _TMR0H 000FD7                                  _TMR1H 000FCF  
                                _TMR0L 000FD6                                  _TMR3H 000FB3  
                                _TMR1L 000FCE                                  _TMR3L 000FB2  
                           _BothServos 1FAA                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst 5B86                        __end_of_handler 3970  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _nRBPU 007F8F  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_readADC 5978  
                      __end_of_initLCD 54E4                         __CFG_EBTRB$OFF 000000  
                                _debug 012D                             i2isdigit@c 0003  
                        ___awtoft@sign 0091                                  _getIR 4F22  
                      __end_of_loadRTC 4CA2                        __end_of_readMAG 549E  
                      __end_of_dpowers FAB8                                  _first 013B  
                                _enter 005F                                  arm@on 00AC  
                      __end_of_isdigit 59A2                                  _input 007D  
                        ___ftpack@sign 0084                                  _putch 5B66  
                                pclath 000FFA                                  tablat 000FF5  
                     __end_ofi2___wmul 5A18                       __end_ofi2_getRTC 5006  
                  _log_count_pop_w_tab 0069                                  status 000FD8  
                          readCOND@res 0084                         __CFG_PBADEN$ON 000000  
                        i2printf@width 0028                       __end_ofi2_printf 2706  
                   __size_ofi2___lwdiv 0052                     __size_ofi2___lwmod 0042  
                     __end_ofi2_strcpy 56E4                            Loading@addr 00B3  
                     _count_can_no_lab 0123                   printSortTimer@i_1161 0047  
                 __size_of_EEPROM_read 0018                        __initialization 536C  
                         __end_of_Test 435E                     __size_ofi2_lcdInst 000C  
                         __end_of_main 47C8                           __end_of_keys FAAE  
                         __end_of_sort 5A84                             i2printf@ap 0020  
                           i2printf@cp 001E                     __size_ofi2_isdigit 001E  
                          _BlockerTest 3D24                                 ??_Test 00C6  
  __size_of_change_state_to_menu_start 002C                        ??_machineConfig 0080  
                               ??_main 00DA                                 ??_sort 00C4  
                        __activetblptr 000003                                 ID@res1 00A7  
                               ID@res2 00A9             __size_of_updateServoStates 01C8  
                               ID@res3 00AB                                 ID@time 00AD  
           updateServoPosition@my_time 0086             updateServoPosition@time_us 0080  
                           i2strcpy@cp 0005                             i2strcpy@to 0001  
                    ?_I2C_Master_Start 0001                    EEPROM_write@address 00AB  
               __size_ofi2_EEPROM_read 0016                      ?_I2C_Master_Write 0081  
                          ?i2_delay_ms 0001                                 ?_getIR 0001  
                   ??_I2C_Master_Start 0081                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 0083  
                               _ADCON2 000FC0                                 STR_100 FC0D  
                               STR_101 FC1E                                 STR_110 FCA6  
                               STR_102 FB63                                 STR_103 FE4E  
                               STR_111 FAE5                                 STR_112 FBC9  
                               STR_104 FB96                                 STR_120 FB09  
                               STR_113 FBFC                                 STR_105 FB74  
                               STR_121 FAF7                                 STR_106 FB96  
                               STR_114 FBFC                                 STR_130 FFB6  
                               STR_122 FE6E                                 _ADRESH 000FC4  
                               STR_107 FEB9                                 STR_115 FBEB  
                               STR_123 FB1B                                 STR_116 FBFC  
                               STR_124 FE6E                                 STR_108 FE9B  
                               _EEADRH 000FAA                                 STR_117 FBEB  
                               STR_125 FE6E                                 STR_109 FE8C  
                               STR_126 FBDA                                 STR_118 FBDA  
                               _ADRESL 000FC3                                 STR_127 FC95  
                               STR_119 FC2F                                 STR_128 FAE5  
                               STR_129 FB2D                                 _EEDATA 000FA8  
                               _EECON2 000FA7                       ___awdiv@dividend 0086  
                      i2lcdNibble@data 0002                       __end_of___awtoft 5528  
                               ?_putch 0001                       __end_of___ftpack 4258  
               __size_of_initSortTimer 00AA                        i2lcdNibble@temp 0001  
            i2_change_state_to_menu_12 5744              i2_change_state_to_menu_22 5714  
                               _INT1IE 007F83                                 _INT1IF 007F80  
                               _CVRCON 000FB5                                 i2l1050 3934  
                               i2l1131 5B38                                 i2l1039 386C  
                               i2l1048 3914                                 i2l1517 2572  
                               i2l7001 24EA                                 i2l7003 24FC  
                               i2l1964 5362                                 i2l7013 253C  
                               i2l1974 5560                                 i2l7031 25BC  
                               i2l7007 2526                                 i2l7025 25A0  
                               i2l7009 2538                                 i2l7043 25EE  
                               i2l7061 264A                                 i2l7053 262C  
                               i2l7029 25B8                                 i2l7055 2634  
                               i2l7073 267C                                 i2l7049 2608  
                               i2l7083 26E2                                 i2l7067 2660  
                               i2l7091 56C4                                 i2l7069 2668  
                               i2l7077 268E                                 i2l7085 26EA  
                               i2l6631 5338                                 i2l7079 2694  
                               i2l7271 4100                                 i2l6641 5358  
                               i2l6633 533C                                 i2l7089 56BC  
                               i2l6651 553E                                 i2l6619 5ABC  
                               i2l7267 40F0                                 i2l6629 5330  
                               i2l6653 5542                                 i2l7701 3A8A  
                               i2l7541 35F6                                 i2l7533 3574  
                               i2l7279 4134                                 i2l7711 3AA8  
                               i2l7551 3664                                 i2l7543 360C  
                               i2l6657 5556                                 i2l6649 5536  
                               i2l7713 3AAC                                 i2l7561 36D2  
                               i2l7553 367A                                 i2l7545 3622  
                               i2l6595 5A38                                 i2l6931 4FDC  
                               i2l7731 3ADC                                 i2l7707 3A94  
                               i2l7643 39AE                                 i2l7635 3994  
                               i2l7555 3690                                 i2l7547 3638  
                               i2l7539 35E0                                 i2l9171 5024  
                               i2l7725 3ACE                                 i2l7717 3AB6  
                               i2l7661 39EC                                 i2l7645 39BE  
                               i2l7653 39CC                                 i2l7557 36A6  
                               i2l7549 364E                                 i2l7565 36E8  
                               i2l6927 4FCC                                 i2l7743 3B12  
                               i2l7735 3AEE                                 i2l7663 39F2  
                               i2l7671 3A04                                 i2l7647 39C2  
                               i2l7559 36BC                                 i2l7567 3742  
                               i2l9185 5AE4                                 i2l6937 4FF6  
                               i2l6961 23C0                                 i2l7665 39F8  
                               i2l7657 39E0                                 i2l7753 3B2E  
                               i2l9601 308C                                 i2l9177 5056  
                               i2l6971 23F8                                 i2l6955 23A2  
                               i2l7747 3B24                                 i2l7739 3B00  
                               i2l7691 3A60                                 i2l7683 3A48  
                               i2l7667 39FE                                 i2l7659 39E6  
                               i2l9189 5AF4                                 i2l6965 23C6  
                               i2l9701 3212                                 i2l9621 30D2  
                               i2l9613 30B6                                 i2l9605 309A  
                               i2l6991 2490                                 i2l6959 23B2  
                               i2l9711 3236                                 i2l7697 3A6E  
                               i2l9705 3228                                 i2l9641 3128  
                               i2l9633 3104                                 i2l9625 30E8  
                               i2l9617 30C4                                 i2l9609 30A8  
                               i2l6987 2482                                 i2l6979 245A  
                               i2l9563 3014                                 i2l6997 24DA  
                               i2l6989 248C                                 i2l9901 331A  
                               i2l9661 3176                                 i2l9653 3152  
                               i2l9645 3136                                 i2l9637 3112  
                               i2l9629 30F6                                 i2l9581 3052  
                               i2l9573 3036                                 i2l9565 301A  
                               i2l6999 24E4                                 i2l9913 33E8  
                               i2l9681 31C4                                 i2l9673 31A8  
                               i2l9665 3184                                 i2l9657 3168  
                               i2l9649 3144                                 i2l9593 306E  
                               i2l9577 3044                                 i2l9569 3028  
                               i2l9941 34FA                                 i2l9917 341C  
                               i2l9693 31F6                                 i2l9685 31D2  
                               i2l9677 31B6                                 i2l9669 3192  
                               i2l9597 307C                                 i2l9589 3060  
                               i2l9919 3422                                 i2l9697 3204  
                               i2l9689 31E8                                 i2l9961 3B7A  
                               i2l9947 3512                                 i2l9891 32B0  
                               i2l9981 3BDA                                 i2l9973 3BB0  
                               i2l9965 3B90                                 i2l9895 32C0  
                               i2l9967 3B9A                                 i2l9991 3C38  
                               i2l9995 3C50                                 i2l9979 3BC6  
                               i2l9987 3BE4                _f_most_recent_sort_time 0139  
                               i2l9989 3C2E                          PlatformTest@i 00B1  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                              ??i2_putch 0003  
                               _TMR1IE 007CE8                                 _TMR1IF 007CF0  
                               _TMR2IE 007CE9                                 _TMR2IF 007CF1  
                               _TMR3IE 007D01                                 _TMR3IF 007D09  
                               _TMR0ON 007EAF                                 _TMR1ON 007E68  
                               _TMR2ON 007E52                                 _TMR3ON 007D88  
                               _SSPADD 000FC8                                 _TRISC3 007CA3  
                               _TRISC4 007CA4                                 _SSPBUF 000FC9  
                            ??_Loading 00B1                       __end_of_delay_ms 59CA  
                 delay_ms@milliseconds 0081                         __CFG_XINST$OFF 000000  
                     __end_of_dispLogs 5A62                                 ___ftge 47C8  
                          ?i2_printRTC 0001                       retrieveLog@byte1 000B  
                     retrieveLog@byte2 000C                       retrieveLog@byte3 000D  
                 __end_of_Distribution 4626                                 ___wmul 564A  
                            ??___awdiv 008A                         __CFG_STVREN$ON 000000  
                               _getMAG 5680                              ??___awmod 0084  
                          logRun@byte1 00B2                            logRun@byte2 00B3  
                          logRun@byte3 00B4                       __end_of_readCOND 5452  
                               _getRTC 4CA2                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 5AA6  
                               _initUI 56E4                                 _readIR 53BA  
                               _logRun 3EEA                                 getIR@i 0087  
                               clear_0 5392                                 clear_1 539E  
                               clear_2 53AA                       ___awdiv@quotient 008C  
                      ___awmod@divisor 0082                             _PortTestDC 5264  
                      ___awmod@counter 0084                              ??_lcdInst 0082  
                               _printf 1782                              ??_handler 004B  
              __size_of_initGlobalVars 00C0                           ?_retrieveLog 0007  
                               _strcpy 5614                     __size_of_SpeedTest 0084  
                            ??_readADC 0080                              ??_initLCD 0083  
                            ??_loadRTC 0095                              ??_readMAG 0082  
 __end_ofi2_change_state_to_menu_start 59F2  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 59CA                            ?_BothServos 0001  
                            ??_isdigit 0080                      __end_ofi2___lwdiv 536C  
                     __end_of_printRTC 2FE4                           __mediumconst FA9C  
                    __end_ofi2___lwmod 556A                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                 _log_count_pop_no_tab 0067                  __end_of_algorithmTest 46FC  
                    __end_ofi2_lcdInst 5B9E                      __end_ofi2_isdigit 5AC4  
                           __accesstop 0080                __end_of__initialization 53B0  
                        ?_inputHandler 002A                             ___ftge@ff1 0092  
                           ___ftge@ff2 0095                  _most_recent_sort_time 0145  
                        ___rparam_used 000001                          ?_PlatformTest 0001  
              printSortTimer@start_sec 003B                  __size_of_actuatorTest 08B8  
                           ___awtoft@c 008E                          i2_EEPROM_read 5B2A  
                         Loading@byte1 00B5                     i2___lwmod@dividend 0001  
                       __pcstackCOMRAM 0001                  __size_of_EEPROM_write 00E8  
                  __size_ofi2_delay_ms 001C                           __pidataBANK1 5BB2  
                  BlockerTest@cam_flag 00B1                          __end_of_getIR 4F94  
                          i2printRTC@i 0041                          _initSortTimer 4ACA  
          __end_of_updateServoPosition 4DAE                          __end_of_putch 5B76  
                          i2printf@len 0022                            i2printf@val 0024  
                           __end_of_ID 1FAA                             __end_of_UI 08D6  
                            ?i2___wmul 0001                     __size_of_lcdNibble 006C  
                            ?i2_getRTC 0001                            i2putch@data 0003  
                printSortTimer@curTime 002D     __end_of_change_state_to_menu_start 594C  
        ?i2_change_state_to_menu_start 0001             _change_state_to_menu_start 5920  
                printSortTimer@cur_sec 003D                              ?i2_printf 000D  
                              ??_getIR 0086                              ?i2_strcpy 0001  
                     _count_pop_no_tab 0127                    __size_ofi2_printRTC 0236  
                              ??_putch 0082                           _actuatorTest 08D6  
              __size_of_PortTestPusher 005C                             __pbssBANK0 00DA  
                           __pbssBANK1 0100                           ?_stopSignals 0001  
                       ??_inputHandler 002C         __size_ofi2_updateServoPosition 0070  
        __end_ofi2_updateServoPosition 5076                           _EEPROM_write 445C  
                       ??_PlatformTest 00AB               ?_change_state_to_menu_11 0001  
             ?_change_state_to_menu_12 0001               ?_change_state_to_menu_22 0001  
             ?_change_state_to_menu_23 0001                                UI@F3246 0149  
                    __end_of_SpeedTest 4E32                         ?i2_EEPROM_read 0001  
             ?_change_state_to_logs_11 0001               ?_change_state_to_logs_12 0001  
             ?_change_state_to_logs_22 0001               ?_change_state_to_logs_23 0001  
             ?_change_state_to_logs_33 0001               ?_change_state_to_logs_34 0001  
                  __size_of_BothServos 03EE                      printRTC@RTC_month 00BC  
                              ?___ftge 0092                                _ID$1142 009D  
                              _ID$1144 009E                           ?i2_lcdNibble 0001  
                              UI@i_412 00C9                                UI@i_415 00CA  
                              UI@i_416 00CB                                UI@i_450 00D4  
                              UI@i_442 00D0                                UI@i_434 00CC  
                              UI@i_451 00D5                                UI@i_443 00D1  
                              UI@i_435 00CD                                UI@i_446 00D2  
                              UI@i_438 00CE                                UI@i_447 00D3  
                              UI@i_439 00CF                       ??_updateArmState 0001  
                       ?_initSortTimer 0001                                ?___wmul 0080  
                              ?_getMAG 0001                                ?_getRTC 0001  
                              ?_initUI 0001                                ?_readIR 0001  
                              ?_logRun 0001               updateServoPosition@timer 0082  
                              UI@month 00D6                              ?___awtoft 008E  
                            ?___ftpack 0080                            ?_PortTestDC 0001  
                              ?_printf 008E                                _UI$2427 00C6  
                              ?_strcpy 0080                        _pan_servo_state 006B  
                           ??i2___wmul 0005                             ??i2_getRTC 0004  
                              i2l10001 3C76                                i2l10021 3CF2  
                              i2l10007 3C9C                                i2l10121 37FA  
                              i2l10051 5574                                i2l10115 37EA  
                              i2l10131 3824                                i2l10053 557A  
                              i2l10221 3932                                i2l10117 37EE  
                              i2l10125 3802                                i2l10127 381A  
                              i2l10057 5580                                i2l10145 3840  
                              i2l10173 3898                                i2l10167 388A  
                              i2l10195 38E2                                i2l10189 38C8  
                              i2l10199 38E8                                i2l10671 3C12  
                              i2l10673 3C1C                                i2l10691 3A1C  
                              i2l10683 3254                                i2l10675 3C26  
                              i2l10693 3A38                                i2l10685 3276  
                              i2l10677 3D0A                                i2l10669 3C08  
                              i2l10687 3292                                i2l10679 3D1A  
                            ?_delay_ms 0001                         PlatformTest@on 00B5  
                           ??i2_printf 0019                             ??i2_strcpy 0005  
                            ?_dispLogs 0012                                _SSPCON1 000FC6  
                              _SSPCON2 000FC5                                _SSPSTAT 000FC7  
                              _RTCflag 00EC                              ?_readCOND 0001  
                           _initEEPROM 5B14                                i2_putch 5B86  
                            ?_initTime 0080                        _f_loadingNewCan 00F2  
                      i2printRTC@month 003D                  __size_of_Distribution 00E2  
          __size_ofi2_I2C_Master_Start 0008                      __end_of_lcdNibble 50E2  
                              _Loading 118E            __size_ofi2_I2C_Master_Write 000A  
                     EEPROM_write@data 00AD                                __Hparam 0000  
                              __Lparam 0000     __size_ofi2_change_state_to_menu_12 0030  
   __size_ofi2_change_state_to_menu_22 0030                              ?_printRTC 0001  
                      __size_of___ftge 00C8                                ___awdiv 4950  
                              ___awmod 4B74                             _initServos 4E32  
                              ___lldiv 4A0E                        __size_of___wmul 0036  
                      __size_of_getMAG 0032                                ___lwdiv 4EAA  
                              ___lwmod 5146                        __size_of_getRTC 0086  
                      printSortTimer@i 0049                              _CMCONbits 000FB4  
                    retrieveLog@logNum 0007                           logRun@byte11 00B6  
                         ?_BlockerTest 0001                        __size_of_initUI 0030  
                      __size_of_readIR 004C                                __pcinit 536C  
                           ??___awtoft 0091                   i2EEPROM_read@address 0001  
                      __size_of_logRun 0144                             ??___ftpack 0085  
                         logRun@byte_i 00B5                                __ramtop 1000  
                       _initGlobalVars 4890                                _lcdInst 5B76  
                              _handler 0008                                __ptext0 46FC  
                              __ptext1 5A62                                __ptext2 118E  
                              __ptext3 4ACA                                __ptext4 4890  
                              __ptext5 5680                                __ptext6 4F22  
                              __ptext7 53BA                                __ptext8 1BBA  
                              __ptext9 5406                        __size_of_printf 0438  
                              _readADC 594C                        __size_of_strcpy 0036  
                              _initLCD 549E                                _cur_can 012B  
                              _loadRTC 4C16                                _readMAG 5452  
                              _dpowers FAAE                     actuatorTest@i_1740 00AE  
                   actuatorTest@i_1741 00AF                     actuatorTest@i_1733 00AD  
                   actuatorTest@i_1750 00B5                     actuatorTest@i_1743 00B0  
                   actuatorTest@i_1760 00BB                     actuatorTest@i_1752 00B6  
                   actuatorTest@i_1744 00B1                     actuatorTest@i_1753 00B7  
                   actuatorTest@i_1770 00C1                     actuatorTest@i_1762 00BC  
                   actuatorTest@i_1746 00B2                     actuatorTest@i_1763 00BD  
                   actuatorTest@i_1755 00B8                     actuatorTest@i_1747 00B3  
                         __size_of_arm 00FE                     actuatorTest@i_1772 00C2  
                   actuatorTest@i_1756 00B9                     actuatorTest@i_1773 00C3  
                   actuatorTest@i_1765 00BE                     actuatorTest@i_1749 00B4  
                   actuatorTest@i_1766 00BF                     actuatorTest@i_1759 00BA  
                   actuatorTest@i_1769 00C0                                _isdigit 5978  
                     ___awmod@dividend 0080                                getRTC@i 0083  
                 __size_of_retrieveLog 011E                           ??i2_delay_ms 0001  
                           ??_delay_ms 0080               __size_of_I2C_Master_Init 0060  
             __size_of_I2C_Master_Read 002E                          _log_startTime 0100  
             __size_of_I2C_Master_Wait 0014               __size_of_I2C_Master_Stop 0008  
                           ??_dispLogs 0014                           _Distribution 4544  
                       __pintcode_body 377E                   PlatformTest@res_1785 00AF  
                 end_of_initialization 53B0                             ??_readCOND 0082  
                              logRun@i 00B7                             ??_initTime 0086  
                      ??i2_EEPROM_read 0003                                int_func 377E  
                  i2___wmul@multiplier 0001                          ??_EEPROM_read 0082  
                  __size_of_PortTestDC 005C                              i2u1130_47 52DA  
                            i2u1131_47 52E4                              i2u1132_47 5306  
                            i2u1133_47 5310                              i2u1134_47 5AEC  
                            i2u1129_47 39B4              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 0084  
                      ___lldiv@counter 008C                        ??_initSortTimer 0085  
                              printf@c 00A8                           ??i2_printRTC 002A  
                              printf@f 008E                             ??_printRTC 00AB  
                     I2C_Master_Init@c 008D                       I2C_Master_Read@a 0081  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
                   __end_ofi2_delay_ms 5AFC                 __end_of_initGlobalVars 4950  
                           _sensorTest 2A1C                             _servoTimes 00DA  
                            _PORTAbits 000F80                              _PORTBbits 000F81  
                 __end_of_inputHandler 3B5C                           ??_BothServos 00AB  
                __end_of_machineConfig 5146                   __end_of_PlatformTest 2A1C  
                           _updateMenu 2FE4                      i2_I2C_Master_Read 5A18  
                            _IR_signal 00E8                      i2_I2C_Master_Wait 5B54  
                    i2_I2C_Master_Stop 5BCA                      i2___lwdiv@divisor 0008  
                      _log_count_total 0143                         _PortTestPusher 5208  
                            i2___lwdiv 531A                              i2___lwmod 5528  
                    i2___lwdiv@counter 000C                     ?i2_I2C_Master_Read 0001  
                   ?i2_I2C_Master_Wait 0001                     __end_ofi2_printRTC 377E  
                   ?i2_I2C_Master_Stop 0001                          actuatorTest@i 00C4  
         ??_change_state_to_menu_start 00C4                            ?_initEEPROM 0001  
                            i2_lcdInst 5B92                          Loading@i_1130 00BC  
                        Loading@i_1132 00BE                          Loading@i_1118 00B6  
                        Loading@i_1127 00B8                          Loading@i_1129 00BA  
                           _total_time 00FA                            printf@width 00A9  
                 __size_of_stopSignals 001C                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 5AA6                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002                              i2getRTC@i 0004  
                   __end_of_BothServos 2398                    __end_of_EEPROM_read 5B14  
                          ?_initServos 0001                        ?_initGlobalVars 0001  
                       __end_of___ftge 4890                         __end_of___wmul 5680  
                       __end_of_getMAG 56B2                         __end_of_getRTC 4D28  
                 __size_ofi2_lcdNibble 005A                         _timer2_counter 0073  
                        EEPROM_write@i 00AF                          i2lcdInst@data 0003  
                       __end_of_initUI 5714                         __end_of_readIR 5406  
                       __end_of_logRun 402E                       i2___wmul@product 0005  
                       __end_of_printf 1BBA                           i2printf@flag 0026  
                       __end_of_strcpy 564A              __end_ofi2_I2C_Master_Read 5A3E  
            __end_ofi2_I2C_Master_Wait 5B66                           i2printf@prec 001D  
                  start_initialization 536C              __end_ofi2_I2C_Master_Stop 5BD2  
                           readMAG@res 0084                      __size_ofi2___wmul 0026  
                      _count_can_w_lab 0125            ?_change_state_to_menu_start 0001  
                    __size_ofi2_getRTC 0072                 __end_of_PortTestPusher 5264  
                          __end_of_arm 445C                              i2printf@c 0027  
                            i2printf@f 000D                     EEPROM_write@i_1401 00B0  
                i2I2C_Master_Read@temp 0003                   BlockerTest@cond_flag 00B3  
                           ?i2___lwdiv 0006                             ?i2___lwmod 0001  
                    __size_ofi2_printf 036E                      __size_ofi2_strcpy 0032  
                    ??_I2C_Master_Init 0091                      ??_I2C_Master_Read 0081  
                    ??_I2C_Master_Wait 0080                             ?i2_lcdInst 0001  
                    ??_I2C_Master_Stop 0081                       __CFG_OSC$INTIO67 000000  
                           ?i2_isdigit 0001                             initTime@DD 0083  
                           initTime@MM 0084                             initTime@YY 0085  
                      retrieveLog@addr 0010                             logRun@addr 00B9  
                             ??___ftge 0098                              _SpeedTest 4DAE  
                             ??___wmul 0084                               ??_getMAG 0086  
                             ??_getRTC 0083                 __size_of_algorithmTest 00D6  
                          ?_sensorTest 0001                            __pdataBANK1 0149  
                     __CFG_LPT1OSC$OFF 000000                               ??_initUI 00C4  
                             ??_readIR 0082                               ??_logRun 00B1  
                             ID@i_1141 00A1                               ID@i_1143 00A3  
                             ID@i_1145 00A5                           ??_PortTestDC 00AB  
               printSortTimer@timeDiff 0045       __size_of_change_state_to_menu_11 0030  
     __size_of_change_state_to_menu_12 0038       __size_of_change_state_to_menu_22 0038  
     __size_of_change_state_to_menu_23 0030                               ??_printf 009A  
     __size_of_change_state_to_logs_11 0030       __size_of_change_state_to_logs_12 0030  
     __size_of_change_state_to_logs_22 0030       __size_of_change_state_to_logs_23 002E  
     __size_of_change_state_to_logs_33 0030       __size_of_change_state_to_logs_34 0030  
                             ??_strcpy 0084                    __size_of_initEEPROM 0016  
                 __size_of_BlockerTest 01C6                    _printSortTimer$2559 0043  
                    __size_of___awtoft 0044                      __size_of___ftpack 010C  
                          __pbssCOMRAM 005B           __size_of_updateServoPosition 0086  
                          ?_updateMenu 0001                          __pcstackBANK0 0080  
                      ?_PortTestPusher 0001                __size_of_printSortTimer 02A4  
                    i2___lwmod@divisor 0003                      i2___lwmod@counter 0005  
                         _isdigit$2062 0081                      __size_of_delay_ms 0028  
                       initSortTimer@i 0088                      printSortTimer@min 003F  
                    printSortTimer@sec 0041                    __size_of_initServos 0078  
                    __size_of_dispLogs 0024                       printRTC@INT_time 00AE  
                     _tilt_servo_state 0071                           i2strcpy@from 0003  
                             ?i2_putch 0001                        _count_pop_w_tab 0129  
                    __size_of_readCOND 004C                            _EEPROM_read 5AFC  
                     _I2C_Master_Start 5BC2                     __end_of_PortTestDC 52C0  
                            _f_lastCan 0137                               ?_Loading 0001  
                  i2I2C_Master_Write@d 0002                       _I2C_Master_Write 5B9E  
                    __size_of_initTime 0022                  i2_updateServoPosition 5006  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                             ?_SpeedTest 0001  
                        __pmediumconst FA9C                              _lcdNibble 5076  
                __size_of_inputHandler 01EC                               ?___awdiv 0086  
                            __ptext100 5B54                              __ptext101 5AE0  
                             ?___awmod 0080                               ?___lldiv 0080  
                       _sensor_outputs 00E2                               ?___lwdiv 0080  
                             ?___lwmod 0087                  __size_of_PlatformTest 0316  
                    __size_of_printRTC 02CA                               ?_lcdInst 0001  
                             ?_handler 0001                               ?_readADC 0001  
                             ?_initLCD 0001                               ?_loadRTC 0001  
                             ?_readMAG 0001                               ?_isdigit 0001  
           __size_ofi2_I2C_Master_Read 0026             __size_ofi2_I2C_Master_Wait 0012  
           __size_ofi2_I2C_Master_Stop 0008                              _firstboot 013D  
                            _cur_state 00EE                       ___lwdiv@quotient 0084  
                       __size_of_getIR 0072                          _algorithmTest 4626  
                          ??i2___lwdiv 000A                            _COND_signal 00E6  
                          ??i2___lwmod 0005                         __size_of_putch 0010  
                          __size_of_ID 03F0                            __size_of_UI 08C4  
                  __size_of_sensorTest 02FE             __end_ofi2_I2C_Master_Start 5BDA  
           __end_ofi2_I2C_Master_Write 5BB2                            ??i2_lcdInst 0003  
                       ___wmul@product 0084                               _LATAbits 000F89  
                             _LATBbits 000F8A                               _LATCbits 000F8B  
                             _LATDbits 000F8C                           _inputHandler 3970  
                          ??i2_isdigit 0001                           _PlatformTest 2706  
                         BlockerTest@i 00AD                               i2u501_40 5A36  
                             _PIR2bits 000FA1                               i2u621_40 35D6  
                      PlatformTest@res 00AD                               i2u564_40 24BE  
                             i2u564_47 24B4                               i2u568_40 251E  
                             i2u568_47 2514                               i2u941_40 34E8  
                             i2u942_48 34EA                               i2u944_40 351C  
                             i2u946_40 3544                               i2u945_48 351E  
                             i2u938_40 34D4                    __size_of_updateMenu 02C0  
                       _log_completion 0063                       __CFG_WDTPS$32768 000000  
                           ?_lcdNibble 0001                              _was_low_1 0077  
                            _was_low_2 0079                              _was_low_3 007B  
                        ??_retrieveLog 0009                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 0080                              _startTime 010E  
                             i2___wmul 59F2                          lcdNibble@data 0081  
                             i2_getRTC 4F94                             printf@flag 00A7  
                        lcdNibble@temp 0080                             printf@prec 009E  
              __size_of_updateArmState 003A                               Loading@i 00C0  
                             Loading@j 00C2                               i2_printf 2398  
                             i2_strcpy 56B2                         ?_algorithmTest 0001  
                  I2C_Master_Read@temp 0082                              copy_data0 5380  
                         ??_initEEPROM 00B1                              readIR@res 0084  
               ?i2_updateServoPosition 0001                       __size_ofi2_putch 000C  
                           _EECON1bits 000FA6                  __end_ofi2_EEPROM_read 5B40  
                          _count_total 00FE                 i2delay_ms@milliseconds 0002  
                     ??_initGlobalVars 0080                               __Hrparam 0000  
                     __size_of_Loading 05F4                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                              logRun@num 00B1  
                          ??_SpeedTest 00AB                  __end_of_initSortTimer 4B74  
                         ??_initServos 0088                       __size_of___awdiv 00BE  
                     __size_of___awmod 00A2                _change_state_to_menu_11 57A4  
           ?i2_change_state_to_menu_12 0001                _change_state_to_menu_12 55DC  
           ?i2_change_state_to_menu_22 0001                _change_state_to_menu_22 55A4  
              _change_state_to_menu_23 5774                  i2___wmul@multiplicand 0003  
                     __size_of___lldiv 00BC                       __size_of___lwdiv 0078  
              _change_state_to_logs_11 5894                _change_state_to_logs_12 5864  
              _change_state_to_logs_22 5834                _change_state_to_logs_23 58F2  
              _change_state_to_logs_33 5804                _change_state_to_logs_34 57D4  
                     __size_of___lwmod 0062                         readADC@channel 0081  
                             ___awtoft 54E4                               ___ftpack 414C  
                   i2I2C_Master_Read@a 0002                       __size_of_lcdInst 0010  
                     __size_of_handler 3968                     __end_of_initEEPROM 5B2A  
                      _I2C_Master_Init 51A8                       __size_of_readADC 002C  
                      _I2C_Master_Read 58C4                       __size_of_initLCD 0046  
                         _f_ID_receive 012F                       __size_of_loadRTC 008C  
                     __size_of_readMAG 004C                        _I2C_Master_Wait 5B40  
                      _I2C_Master_Stop 5BBA                       __size_of_isdigit 002A  
                             _delay_ms 59A2                         _printSortTimer 32A4  
                      ___lwdiv@divisor 0082                        ___lwdiv@counter 0086  
                  __end_of_retrieveLog 414C                               __ptext10 59A2  
                             __ptext11 47C8                               __ptext20 4A0E  
                             __ptext12 54E4                               __ptext21 5920  
                             __ptext13 414C                               __ptext30 4CA2  
                             __ptext22 5A84                               __ptext14 4544  
                             __ptext31 5B9E                               __ptext23 549E  
                             __ptext15 50E2                               __ptext40 4258  
                             __ptext32 5BBA                               __ptext24 5B14  
                             __ptext16 3EEA                               __ptext41 2A1C  
                             __ptext33 5BC2                               __ptext25 445C  
                             __ptext17 56E4                               __ptext50 1FAA  
                             __ptext42 5452                               __ptext34 58C4  
                             __ptext26 5AFC                               __ptext18 4C16  
                             __ptext51 5AC4                               __ptext43 435E  
                             __ptext35 5B40                               __ptext27 0012  
                             __ptext19 51A8                               __ptext60 5146  
                             __ptext52 4E32                               __ptext44 4626  
                             __ptext36 55A4                               __ptext28 2D1A  
                             __ptext61 4EAA                               __ptext53 4D28  
                             __ptext45 08D6                               __ptext37 55DC  
                             __ptext29 5614                               __ptext70 56B2  
                             __ptext62 5B76                               __ptext54 3D24  
                             __ptext46 4DAE                               __ptext38 4B74  
                             __ptext71 3970                               __ptext63 5076  
                             __ptext55 594C                               __ptext47 5208  
                             __ptext39 4950                               __ptext80 5864  
                             __ptext72 5714                               __ptext56 1782  
                             __ptext48 5264                               __ptext81 5894  
                             __ptext73 5744                               __ptext65 3B5C  
                             __ptext57 5B66                               __ptext49 2706  
                             __ptext90 59F2                               __ptext82 5A3E  
                             __ptext74 5774                               __ptext66 5006  
                             __ptext58 5978                               __ptext91 5528  
                             __ptext83 402E                               __ptext75 57A4  
                             __ptext67 2FE4                               __ptext59 564A  
                             __ptext92 531A                               __ptext84 5B2A  
                             __ptext76 57D4                               __ptext68 59CA  
                             __ptext93 5B92                               __ptext85 556A  
                             __ptext77 5804                               __ptext69 3548  
                             __ptext94 52C0                               __ptext86 32A4  
                             __ptext78 58F2                               __ptext95 4F94  
                             __ptext87 2398                               __ptext79 5834  
                             __ptext96 5BA8                               __ptext88 5B86  
                             __ptext97 5BCA                               __ptext89 5AA6  
                             __ptext98 5BD2                               __ptext99 5A18  
                             _dispLogs 5A3E                          ?_actuatorTest 0001  
                   PlatformTest@i_1789 00B3                               _readCOND 5406  
                        ??_stopSignals 0080                             strcpy@from 0082  
                       i2_isdigit$2062 0002                     __end_of_initServos 4EAA  
                        __size_of_Test 0106                          ?_EEPROM_write 00AB  
                             _initTime 5A84                          __size_of_main 00CC  
                        __size_of_sort 0022         ??i2_change_state_to_menu_start 0043  
                             _logstate 00F8                    _updateServoPosition 4D28  
               __size_of_machineConfig 0064                          ??i2_lcdNibble 0001  
                             _printRTC 2D1A                            ??_lcdNibble 0080  
                            printRTC@i 00C2                               int$flags 007E  
                         ??_sensorTest 00AB                         _log_total_time 00F6  
                   _f_can_coming_to_ID 0131                              printf@len 00A3  
                            printf@val 00A5      __end_ofi2_change_state_to_menu_12 5774  
    __end_ofi2_change_state_to_menu_22 5744                       ??_PortTestPusher 00AB  
                             loadRTC@i 0096                 __end_of_printSortTimer 3548  
                            putch@data 0082               __end_of_I2C_Master_Start 5BCA  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 5BA8  
                           _INTCONbits 000FF2                   ?_updateServoPosition 0080  
                         ??_updateMenu 0043                        ??_algorithmTest 00AB  
                           _MAG_signal 00EA                               isdigit@c 0082  
                        sensorTest@res 00AD                         ??_actuatorTest 00AB  
                  _servo_timer_counter 006D                               intlevel2 0000  
                       ??_EEPROM_write 00AE                         BlockerTest@res 00AF  
                   __end_of_sensorTest 2D1A                       ___lwmod@dividend 0087  
                     ___lldiv@dividend 0080                           ?_EEPROM_read 0080  
                  __end_of_stopSignals 5AE0              ??_change_state_to_menu_11 002A  
            ??_change_state_to_menu_12 00AB              ??_change_state_to_menu_22 00AB  
            ??_change_state_to_menu_23 002A              ??_change_state_to_logs_11 002A  
            ??_change_state_to_logs_12 002A              ??_change_state_to_logs_22 002A  
            ??_change_state_to_logs_23 002A              ??_change_state_to_logs_33 002A  
            ??_change_state_to_logs_34 002A                               printf@ap 00A1  
                             printf@cp 009F                     __end_of_updateMenu 32A4  
              __end_of_I2C_Master_Init 5208                __end_of_I2C_Master_Read 58F2  
              __end_of_I2C_Master_Wait 5B54                          ??_BlockerTest 00AB  
              __end_of_I2C_Master_Stop 5BC2                            lcdInst@data 0082  
                        printRTC@F3236 014D                           retrieveLog@i 000E  
                          _retrieveLog 402E                    __end_ofi2_lcdNibble 531A  
                ??_updateServoPosition 0084                        ?_printSortTimer 0001  
                   _servo_timer_target 006F                       ___lldiv@quotient 0088  
                    I2C_Master_Write@d 0081                        ___lwmod@divisor 0089  
                       _updateArmState 556A                      _f_can_distributed 0135  
                             strcpy@cp 0084                               strcpy@to 0080  
                        _machineConfig 50E2                        ___lwmod@counter 008B  
                    _updateServoStates 3B5C                          printRTC@month 00BE  
                        ?_Distribution 0001                     ?_updateServoStates 0001  
                        _machine_state 00FC                          dispLogs@myLog 0012  
                       _f_arm_position 00F0                    ??_updateServoStates 0009  
                   i2printRTC@INT_time 002D  
