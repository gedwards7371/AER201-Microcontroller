

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Fri Mar 10 22:33:40 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    72                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   107                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   108                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   109  0000                     
   110                           ; Version 1.40
   111                           ; Generated 01/12/2016 GMT
   112                           ; 
   113                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   114                           ; All rights reserved.
   115                           ; 
   116                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   117                           ; 
   118                           ; Redistribution and use in source and binary forms, with or without modification, are
   119                           ; permitted provided that the following conditions are met:
   120                           ; 
   121                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   122                           ;        conditions and the following disclaimer.
   123                           ; 
   124                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   125                           ;        of conditions and the following disclaimer in the documentation and/or other
   126                           ;        materials provided with the distribution.
   127                           ; 
   128                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   129                           ;        software without specific prior written permission.
   130                           ; 
   131                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   132                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   133                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   134                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   135                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   136                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   137                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   138                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   139                           ; 
   140                           ; 
   141                           ; Code-generator required, PIC18F4620 Definitions
   142                           ; 
   143                           ; SFR Addresses
   144  0000                     
   145                           	psect	idataBANK1
   146  0045A6                     __pidataBANK1:
   147                           	opt stack 0
   148                           
   149                           ;initializer for UI@F3222
   150  0045A6  4D                 	db	77
   151  0045A7  4D                 	db	77
   152  0045A8  4D                 	db	77
   153  0045A9  00                 	db	0
   154                           
   155                           ;initializer for printRTC@F3213
   156  0045AA  4D                 	db	77
   157  0045AB  4D                 	db	77
   158  0045AC  4D                 	db	77
   159  0045AD  00                 	db	0
   160                           
   161                           	psect	mediumconst
   162  00FB26                     __pmediumconst:
   163                           	opt stack 0
   164  00FB26  00                 	db	0
   165  00FB27                     _keys:
   166                           	opt stack 0
   167  00FB27  31                 	db	49
   168  00FB28  32                 	db	50
   169  00FB29  33                 	db	51
   170  00FB2A  41                 	db	65
   171  00FB2B  34                 	db	52
   172  00FB2C  35                 	db	53
   173  00FB2D  36                 	db	54
   174  00FB2E  42                 	db	66
   175  00FB2F  37                 	db	55
   176  00FB30  38                 	db	56
   177  00FB31  39                 	db	57
   178  00FB32  43                 	db	67
   179  00FB33  2A                 	db	42
   180  00FB34  30                 	db	48
   181  00FB35  23                 	db	35
   182  00FB36  44                 	db	68
   183  00FB37  00                 	db	0
   184  00FB38                     __end_of_keys:
   185                           	opt stack 0
   186  00FB38                     _dpowers:
   187                           	opt stack 0
   188  00FB38  0001               	dw	1
   189  00FB3A  000A               	dw	10
   190  00FB3C  0064               	dw	100
   191  00FB3E  03E8               	dw	1000
   192  00FB40  2710               	dw	10000
   193  00FB42                     __end_of_dpowers:
   194                           	opt stack 0
   195  0000                     _ADCON0	set	4034
   196  0000                     _ADCON0bits	set	4034
   197  0000                     _ADCON1	set	4033
   198  0000                     _ADCON2	set	4032
   199  0000                     _ADRESH	set	4036
   200  0000                     _ADRESL	set	4035
   201  0000                     _CMCONbits	set	4020
   202  0000                     _CVRCON	set	4021
   203  0000                     _EEADR	set	4009
   204  0000                     _EEADRH	set	4010
   205  0000                     _EECON1bits	set	4006
   206  0000                     _EECON2	set	4007
   207  0000                     _EEDATA	set	4008
   208  0000                     _INTCONbits	set	4082
   209  0000                     _LATA	set	3977
   210  0000                     _LATAbits	set	3977
   211  0000                     _LATB	set	3978
   212  0000                     _LATC	set	3979
   213  0000                     _LATCbits	set	3979
   214  0000                     _LATD	set	3980
   215  0000                     _LATDbits	set	3980
   216  0000                     _LATE	set	3981
   217  0000                     _LATEbits	set	3981
   218  0000                     _OSCCON	set	4051
   219  0000                     _OSCTUNEbits	set	3995
   220  0000                     _PIR2bits	set	4001
   221  0000                     _PORTAbits	set	3968
   222  0000                     _PORTB	set	3969
   223  0000                     _PORTBbits	set	3969
   224  0000                     _SSPADD	set	4040
   225  0000                     _SSPBUF	set	4041
   226  0000                     _SSPCON1	set	4038
   227  0000                     _SSPCON2	set	4037
   228  0000                     _SSPSTAT	set	4039
   229  0000                     _T0CON	set	4053
   230  0000                     _T1CON	set	4045
   231  0000                     _T3CON	set	4017
   232  0000                     _TMR0H	set	4055
   233  0000                     _TMR0L	set	4054
   234  0000                     _TMR1H	set	4047
   235  0000                     _TMR1L	set	4046
   236  0000                     _TMR3H	set	4019
   237  0000                     _TMR3L	set	4018
   238  0000                     _TRISA	set	3986
   239  0000                     _TRISB	set	3987
   240  0000                     _TRISC	set	3988
   241  0000                     _TRISD	set	3989
   242  0000                     _TRISE	set	3990
   243  0000                     _ACKDT	set	32301
   244  0000                     _ACKEN	set	32300
   245  0000                     _ADIE	set	31982
   246  0000                     _INT1IE	set	32643
   247  0000                     _INT1IF	set	32640
   248  0000                     _PEIE	set	32662
   249  0000                     _PEN	set	32298
   250  0000                     _RCEN	set	32299
   251  0000                     _RSEN	set	32297
   252  0000                     _SEN	set	32296
   253  0000                     _TMR0IE	set	32661
   254  0000                     _TMR0IF	set	32658
   255  0000                     _TMR0ON	set	32431
   256  0000                     _TMR1IE	set	31976
   257  0000                     _TMR1IF	set	31984
   258  0000                     _TMR1ON	set	32360
   259  0000                     _TMR2IE	set	31977
   260  0000                     _TMR3IE	set	32001
   261  0000                     _TMR3IF	set	32009
   262  0000                     _TMR3ON	set	32136
   263  0000                     _TRISC3	set	31907
   264  0000                     _TRISC4	set	31908
   265  0000                     _nRBPU	set	32655
   266  00FB42                     STR_21:
   267  00FB42  25                 	db	37
   268  00FB43  30                 	db	48	;'0'
   269  00FB44  32                 	db	50	;'2'
   270  00FB45  64                 	db	100	;'d'
   271  00FB46  25                 	db	37
   272  00FB47  73                 	db	115	;'s'
   273  00FB48  20                 	db	32
   274  00FB49  7C                 	db	124
   275  00FB4A  20                 	db	32
   276  00FB4B  25                 	db	37
   277  00FB4C  30                 	db	48	;'0'
   278  00FB4D  32                 	db	50	;'2'
   279  00FB4E  64                 	db	100	;'d'
   280  00FB4F  3A                 	db	58	;':'
   281  00FB50  25                 	db	37
   282  00FB51  30                 	db	48	;'0'
   283  00FB52  32                 	db	50	;'2'
   284  00FB53  64                 	db	100	;'d'
   285  00FB54  3A                 	db	58	;':'
   286  00FB55  25                 	db	37
   287  00FB56  30                 	db	48	;'0'
   288  00FB57  32                 	db	50	;'2'
   289  00FB58  64                 	db	100	;'d'
   290  00FB59  00                 	db	0
   291  00FB5A                     STR_66:
   292  00FB5A  28                 	db	40
   293  00FB5B  64                 	db	100	;'d'
   294  00FB5C  61                 	db	97	;'a'
   295  00FB5D  74                 	db	116	;'t'
   296  00FB5E  61                 	db	97	;'a'
   297  00FB5F  3A                 	db	58	;':'
   298  00FB60  20                 	db	32
   299  00FB61  25                 	db	37
   300  00FB62  75                 	db	117	;'u'
   301  00FB63  2C                 	db	44
   302  00FB64  20                 	db	32
   303  00FB65  61                 	db	97	;'a'
   304  00FB66  64                 	db	100	;'d'
   305  00FB67  64                 	db	100	;'d'
   306  00FB68  72                 	db	114	;'r'
   307  00FB69  3A                 	db	58	;':'
   308  00FB6A  20                 	db	32
   309  00FB6B  25                 	db	37
   310  00FB6C  75                 	db	117	;'u'
   311  00FB6D  29                 	db	41
   312  00FB6E  00                 	db	0
   313  00FB6F                     STR_27:
   314  00FB6F  4E                 	db	78	;'N'
   315  00FB70  4F                 	db	79	;'O'
   316  00FB71  20                 	db	32
   317  00FB72  4C                 	db	76	;'L'
   318  00FB73  41                 	db	65	;'A'
   319  00FB74  42                 	db	66	;'B'
   320  00FB75  3A                 	db	58	;':'
   321  00FB76  20                 	db	32
   322  00FB77  25                 	db	37
   323  00FB78  64                 	db	100	;'d'
   324  00FB79  7C                 	db	124
   325  00FB7A  4C                 	db	76	;'L'
   326  00FB7B  41                 	db	65	;'A'
   327  00FB7C  42                 	db	66	;'B'
   328  00FB7D  3A                 	db	58	;':'
   329  00FB7E  20                 	db	32
   330  00FB7F  25                 	db	37
   331  00FB80  64                 	db	100	;'d'
   332  00FB81  00                 	db	0
   333  00FB82                     STR_25:
   334  00FB82  4E                 	db	78	;'N'
   335  00FB83  4F                 	db	79	;'O'
   336  00FB84  20                 	db	32
   337  00FB85  54                 	db	84	;'T'
   338  00FB86  41                 	db	65	;'A'
   339  00FB87  42                 	db	66	;'B'
   340  00FB88  3A                 	db	58	;':'
   341  00FB89  20                 	db	32
   342  00FB8A  25                 	db	37
   343  00FB8B  64                 	db	100	;'d'
   344  00FB8C  7C                 	db	124
   345  00FB8D  54                 	db	84	;'T'
   346  00FB8E  41                 	db	65	;'A'
   347  00FB8F  42                 	db	66	;'B'
   348  00FB90  3A                 	db	58	;':'
   349  00FB91  20                 	db	32
   350  00FB92  25                 	db	37
   351  00FB93  64                 	db	100	;'d'
   352  00FB94  00                 	db	0
   353  00FB95                     STR_106:
   354  00FB95  44                 	db	68	;'D'
   355  00FB96  20                 	db	32
   356  00FB97  57                 	db	87	;'W'
   357  00FB98  49                 	db	73	;'I'
   358  00FB99  4C                 	db	76	;'L'
   359  00FB9A  4C                 	db	76	;'L'
   360  00FB9B  20                 	db	32
   361  00FB9C  52                 	db	82	;'R'
   362  00FB9D  45                 	db	69	;'E'
   363  00FB9E  54                 	db	84	;'T'
   364  00FB9F  55                 	db	85	;'U'
   365  00FBA0  52                 	db	82	;'R'
   366  00FBA1  4E                 	db	78	;'N'
   367  00FBA2  20                 	db	32
   368  00FBA3  20                 	db	32
   369  00FBA4  20                 	db	32
   370  00FBA5  20                 	db	32
   371  00FBA6  00                 	db	0
   372  00FBA7                     STR_107:
   373  00FBA7  4F                 	db	79	;'O'
   374  00FBA8  54                 	db	84	;'T'
   375  00FBA9  48                 	db	72	;'H'
   376  00FBAA  45                 	db	69	;'E'
   377  00FBAB  52                 	db	82	;'R'
   378  00FBAC  20                 	db	32
   379  00FBAD  53                 	db	83	;'S'
   380  00FBAE  45                 	db	69	;'E'
   381  00FBAF  54                 	db	84	;'T'
   382  00FBB0  53                 	db	83	;'S'
   383  00FBB1  20                 	db	32
   384  00FBB2  52                 	db	82	;'R'
   385  00FBB3  41                 	db	65	;'A'
   386  00FBB4  35                 	db	53	;'5'
   387  00FBB5  20                 	db	32
   388  00FBB6  20                 	db	32
   389  00FBB7  20                 	db	32
   390  00FBB8  00                 	db	0
   391  00FBB9                     STR_3:
   392  00FBB9  2D                 	db	45
   393  00FBBA  2D                 	db	45
   394  00FBBB  20                 	db	32
   395  00FBBC  4C                 	db	76	;'L'
   396  00FBBD  4F                 	db	79	;'O'
   397  00FBBE  47                 	db	71	;'G'
   398  00FBBF  20                 	db	32
   399  00FBC0  25                 	db	37
   400  00FBC1  32                 	db	50	;'2'
   401  00FBC2  64                 	db	100	;'d'
   402  00FBC3  20                 	db	32
   403  00FBC4  48                 	db	72	;'H'
   404  00FBC5  45                 	db	69	;'E'
   405  00FBC6  52                 	db	82	;'R'
   406  00FBC7  45                 	db	69	;'E'
   407  00FBC8  2D                 	db	45
   408  00FBC9  2D                 	db	45
   409  00FBCA  00                 	db	0
   410  00FBCB                     STR_1:
   411  00FBCB  52                 	db	82	;'R'
   412  00FBCC  45                 	db	69	;'E'
   413  00FBCD  53                 	db	83	;'S'
   414  00FBCE  55                 	db	85	;'U'
   415  00FBCF  4C                 	db	76	;'L'
   416  00FBD0  54                 	db	84	;'T'
   417  00FBD1  53                 	db	83	;'S'
   418  00FBD2  20                 	db	32
   419  00FBD3  49                 	db	73	;'I'
   420  00FBD4  4E                 	db	78	;'N'
   421  00FBD5  20                 	db	32
   422  00FBD6  4C                 	db	76	;'L'
   423  00FBD7  4F                 	db	79	;'O'
   424  00FBD8  47                 	db	71	;'G'
   425  00FBD9  20                 	db	32
   426  00FBDA  25                 	db	37
   427  00FBDB  64                 	db	100	;'d'
   428  00FBDC  00                 	db	0
   429  00FBDD                     STR_97:
   430  00FBDD  4D                 	db	77	;'M'
   431  00FBDE  49                 	db	73	;'I'
   432  00FBDF  44                 	db	68	;'D'
   433  00FBE0  20                 	db	32
   434  00FBE1  2D                 	db	45
   435  00FBE2  2D                 	db	45
   436  00FBE3  20                 	db	32
   437  00FBE4  32                 	db	50	;'2'
   438  00FBE5  73                 	db	115	;'s'
   439  00FBE6  20                 	db	32
   440  00FBE7  20                 	db	32
   441  00FBE8  20                 	db	32
   442  00FBE9  20                 	db	32
   443  00FBEA  20                 	db	32
   444  00FBEB  20                 	db	32
   445  00FBEC  20                 	db	32
   446  00FBED  00                 	db	0
   447  00FBEE                     STR_100:
   448  00FBEE  44                 	db	68	;'D'
   449  00FBEF  52                 	db	82	;'R'
   450  00FBF0  4F                 	db	79	;'O'
   451  00FBF1  50                 	db	80	;'P'
   452  00FBF2  20                 	db	32
   453  00FBF3  2D                 	db	45
   454  00FBF4  2D                 	db	45
   455  00FBF5  20                 	db	32
   456  00FBF6  32                 	db	50	;'2'
   457  00FBF7  73                 	db	115	;'s'
   458  00FBF8  20                 	db	32
   459  00FBF9  20                 	db	32
   460  00FBFA  20                 	db	32
   461  00FBFB  20                 	db	32
   462  00FBFC  20                 	db	32
   463  00FBFD  20                 	db	32
   464  00FBFE  00                 	db	0
   465  00FBFF                     STR_94:
   466  00FBFF  4C                 	db	76	;'L'
   467  00FC00  45                 	db	69	;'E'
   468  00FC01  46                 	db	70	;'F'
   469  00FC02  54                 	db	84	;'T'
   470  00FC03  20                 	db	32
   471  00FC04  2D                 	db	45
   472  00FC05  2D                 	db	45
   473  00FC06  20                 	db	32
   474  00FC07  32                 	db	50	;'2'
   475  00FC08  73                 	db	115	;'s'
   476  00FC09  20                 	db	32
   477  00FC0A  20                 	db	32
   478  00FC0B  20                 	db	32
   479  00FC0C  20                 	db	32
   480  00FC0D  20                 	db	32
   481  00FC0E  20                 	db	32
   482  00FC0F  00                 	db	0
   483  00FC10                     STR_99:
   484  00FC10  4C                 	db	76	;'L'
   485  00FC11  45                 	db	69	;'E'
   486  00FC12  56                 	db	86	;'V'
   487  00FC13  45                 	db	69	;'E'
   488  00FC14  4C                 	db	76	;'L'
   489  00FC15  20                 	db	32
   490  00FC16  2D                 	db	45
   491  00FC17  2D                 	db	45
   492  00FC18  20                 	db	32
   493  00FC19  32                 	db	50	;'2'
   494  00FC1A  73                 	db	115	;'s'
   495  00FC1B  20                 	db	32
   496  00FC1C  20                 	db	32
   497  00FC1D  20                 	db	32
   498  00FC1E  20                 	db	32
   499  00FC1F  20                 	db	32
   500  00FC20  00                 	db	0
   501  00FC21                     STR_93:
   502  00FC21  52                 	db	82	;'R'
   503  00FC22  49                 	db	73	;'I'
   504  00FC23  47                 	db	71	;'G'
   505  00FC24  48                 	db	72	;'H'
   506  00FC25  54                 	db	84	;'T'
   507  00FC26  20                 	db	32
   508  00FC27  2D                 	db	45
   509  00FC28  2D                 	db	45
   510  00FC29  20                 	db	32
   511  00FC2A  32                 	db	50	;'2'
   512  00FC2B  73                 	db	115	;'s'
   513  00FC2C  20                 	db	32
   514  00FC2D  20                 	db	32
   515  00FC2E  20                 	db	32
   516  00FC2F  20                 	db	32
   517  00FC30  20                 	db	32
   518  00FC31  00                 	db	0
   519  00FC32                     STR_92:
   520  00FC32  4D                 	db	77	;'M'
   521  00FC33  49                 	db	73	;'I'
   522  00FC34  44                 	db	68	;'D'
   523  00FC35  44                 	db	68	;'D'
   524  00FC36  4C                 	db	76	;'L'
   525  00FC37  45                 	db	69	;'E'
   526  00FC38  20                 	db	32
   527  00FC39  2D                 	db	45
   528  00FC3A  2D                 	db	45
   529  00FC3B  20                 	db	32
   530  00FC3C  32                 	db	50	;'2'
   531  00FC3D  73                 	db	115	;'s'
   532  00FC3E  20                 	db	32
   533  00FC3F  20                 	db	32
   534  00FC40  20                 	db	32
   535  00FC41  20                 	db	32
   536  00FC42  00                 	db	0
   537  00FC43                     STR_110:
   538  00FC43  44                 	db	68	;'D'
   539  00FC44  20                 	db	32
   540  00FC45  57                 	db	87	;'W'
   541  00FC46  49                 	db	73	;'I'
   542  00FC47  4C                 	db	76	;'L'
   543  00FC48  4C                 	db	76	;'L'
   544  00FC49  20                 	db	32
   545  00FC4A  52                 	db	82	;'R'
   546  00FC4B  45                 	db	69	;'E'
   547  00FC4C  54                 	db	84	;'T'
   548  00FC4D  55                 	db	85	;'U'
   549  00FC4E  52                 	db	82	;'R'
   550  00FC4F  4E                 	db	78	;'N'
   551  00FC50  20                 	db	32
   552  00FC51  20                 	db	32
   553  00FC52  20                 	db	32
   554  00FC53  00                 	db	0
   555  00FC54                     STR_95:
   556  00FC54  4D                 	db	77	;'M'
   557  00FC55  49                 	db	73	;'I'
   558  00FC56  44                 	db	68	;'D'
   559  00FC57  2D                 	db	45
   560  00FC58  4C                 	db	76	;'L'
   561  00FC59  45                 	db	69	;'E'
   562  00FC5A  46                 	db	70	;'F'
   563  00FC5B  54                 	db	84	;'T'
   564  00FC5C  20                 	db	32
   565  00FC5D  2D                 	db	45
   566  00FC5E  2D                 	db	45
   567  00FC5F  20                 	db	32
   568  00FC60  32                 	db	50	;'2'
   569  00FC61  73                 	db	115	;'s'
   570  00FC62  20                 	db	32
   571  00FC63  20                 	db	32
   572  00FC64  00                 	db	0
   573  00FC65                     STR_96:
   574  00FC65  4D                 	db	77	;'M'
   575  00FC66  49                 	db	73	;'I'
   576  00FC67  44                 	db	68	;'D'
   577  00FC68  2D                 	db	45
   578  00FC69  52                 	db	82	;'R'
   579  00FC6A  49                 	db	73	;'I'
   580  00FC6B  47                 	db	71	;'G'
   581  00FC6C  48                 	db	72	;'H'
   582  00FC6D  54                 	db	84	;'T'
   583  00FC6E  20                 	db	32
   584  00FC6F  2D                 	db	45
   585  00FC70  2D                 	db	45
   586  00FC71  20                 	db	32
   587  00FC72  32                 	db	50	;'2'
   588  00FC73  73                 	db	115	;'s'
   589  00FC74  20                 	db	32
   590  00FC75  00                 	db	0
   591  00FC76                     STR_111:
   592  00FC76  45                 	db	69	;'E'
   593  00FC77  4C                 	db	76	;'L'
   594  00FC78  53                 	db	83	;'S'
   595  00FC79  45                 	db	69	;'E'
   596  00FC7A  20                 	db	32
   597  00FC7B  54                 	db	84	;'T'
   598  00FC7C  4F                 	db	79	;'O'
   599  00FC7D  47                 	db	71	;'G'
   600  00FC7E  47                 	db	71	;'G'
   601  00FC7F  4C                 	db	76	;'L'
   602  00FC80  45                 	db	69	;'E'
   603  00FC81  53                 	db	83	;'S'
   604  00FC82  20                 	db	32
   605  00FC83  52                 	db	82	;'R'
   606  00FC84  41                 	db	65	;'A'
   607  00FC85  35                 	db	53	;'5'
   608  00FC86  00                 	db	0
   609  00FC87                     STR_72:
   610  00FC87  41                 	db	65	;'A'
   611  00FC88  4C                 	db	76	;'L'
   612  00FC89  47                 	db	71	;'G'
   613  00FC8A  31                 	db	49	;'1'
   614  00FC8B  3A                 	db	58	;':'
   615  00FC8C  20                 	db	32
   616  00FC8D  39                 	db	57	;'9'
   617  00FC8E  20                 	db	32
   618  00FC8F  50                 	db	80	;'P'
   619  00FC90  4F                 	db	79	;'O'
   620  00FC91  50                 	db	80	;'P'
   621  00FC92  4E                 	db	78	;'N'
   622  00FC93  4F                 	db	79	;'O'
   623  00FC94  54                 	db	84	;'T'
   624  00FC95  41                 	db	65	;'A'
   625  00FC96  42                 	db	66	;'B'
   626  00FC97  00                 	db	0
   627  00FC98                     STR_68:
   628  00FC98  31                 	db	49	;'1'
   629  00FC99  2E                 	db	46
   630  00FC9A  41                 	db	65	;'A'
   631  00FC9B  4C                 	db	76	;'L'
   632  00FC9C  47                 	db	71	;'G'
   633  00FC9D  7C                 	db	124
   634  00FC9E  32                 	db	50	;'2'
   635  00FC9F  2E                 	db	46
   636  00FCA0  53                 	db	83	;'S'
   637  00FCA1  4E                 	db	78	;'N'
   638  00FCA2  52                 	db	82	;'R'
   639  00FCA3  7C                 	db	124
   640  00FCA4  33                 	db	51	;'3'
   641  00FCA5  2E                 	db	46
   642  00FCA6  41                 	db	65	;'A'
   643  00FCA7  43                 	db	67	;'C'
   644  00FCA8  00                 	db	0
   645  00FCA9                     STR_87:
   646  00FCA9  54                 	db	84	;'T'
   647  00FCAA  53                 	db	83	;'S'
   648  00FCAB  54                 	db	84	;'T'
   649  00FCAC  3A                 	db	58	;':'
   650  00FCAD  20                 	db	32
   651  00FCAE  43                 	db	67	;'C'
   652  00FCAF  4F                 	db	79	;'O'
   653  00FCB0  4E                 	db	78	;'N'
   654  00FCB1  44                 	db	68	;'D'
   655  00FCB2  20                 	db	32
   656  00FCB3  53                 	db	83	;'S'
   657  00FCB4  4F                 	db	79	;'O'
   658  00FCB5  4C                 	db	76	;'L'
   659  00FCB6  4E                 	db	78	;'N'
   660  00FCB7  27                 	db	39
   661  00FCB8  44                 	db	68	;'D'
   662  00FCB9  00                 	db	0
   663  00FCBA                     STR_89:
   664  00FCBA  54                 	db	84	;'T'
   665  00FCBB  53                 	db	83	;'S'
   666  00FCBC  54                 	db	84	;'T'
   667  00FCBD  3A                 	db	58	;':'
   668  00FCBE  20                 	db	32
   669  00FCBF  50                 	db	80	;'P'
   670  00FCC0  55                 	db	85	;'U'
   671  00FCC1  53                 	db	83	;'S'
   672  00FCC2  48                 	db	72	;'H'
   673  00FCC3  20                 	db	32
   674  00FCC4  53                 	db	83	;'S'
   675  00FCC5  4F                 	db	79	;'O'
   676  00FCC6  4C                 	db	76	;'L'
   677  00FCC7  4E                 	db	78	;'N'
   678  00FCC8  27                 	db	39
   679  00FCC9  44                 	db	68	;'D'
   680  00FCCA  00                 	db	0
   681  00FCCB                     STR_69:
   682  00FCCB  34                 	db	52	;'4'
   683  00FCCC  2E                 	db	46
   684  00FCCD  48                 	db	72	;'H'
   685  00FCCE  49                 	db	73	;'I'
   686  00FCCF  7C                 	db	124
   687  00FCD0  35                 	db	53	;'5'
   688  00FCD1  2E                 	db	46
   689  00FCD2  54                 	db	84	;'T'
   690  00FCD3  4F                 	db	79	;'O'
   691  00FCD4  47                 	db	71	;'G'
   692  00FCD5  7C                 	db	124
   693  00FCD6  36                 	db	54	;'6'
   694  00FCD7  2E                 	db	46
   695  00FCD8  45                 	db	69	;'E'
   696  00FCD9  45                 	db	69	;'E'
   697  00FCDA  50                 	db	80	;'P'
   698  00FCDB  00                 	db	0
   699  00FCDC                     STR_105:
   700  00FCDC  54                 	db	84	;'T'
   701  00FCDD  53                 	db	83	;'S'
   702  00FCDE  54                 	db	84	;'T'
   703  00FCDF  3A                 	db	58	;':'
   704  00FCE0  20                 	db	32
   705  00FCE1  42                 	db	66	;'B'
   706  00FCE2  4F                 	db	79	;'O'
   707  00FCE3  54                 	db	84	;'T'
   708  00FCE4  48                 	db	72	;'H'
   709  00FCE5  20                 	db	32
   710  00FCE6  53                 	db	83	;'S'
   711  00FCE7  45                 	db	69	;'E'
   712  00FCE8  52                 	db	82	;'R'
   713  00FCE9  56                 	db	86	;'V'
   714  00FCEA  4F                 	db	79	;'O'
   715  00FCEB  53                 	db	83	;'S'
   716  00FCEC  00                 	db	0
   717  00FCED                     STR_41:
   718  00FCED  4C                 	db	76	;'L'
   719  00FCEE  4F                 	db	79	;'O'
   720  00FCEF  47                 	db	71	;'G'
   721  00FCF0  20                 	db	32
   722  00FCF1  31                 	db	49	;'1'
   723  00FCF2  20                 	db	32
   724  00FCF3  20                 	db	32
   725  00FCF4  20                 	db	32
   726  00FCF5  20                 	db	32
   727  00FCF6  20                 	db	32
   728  00FCF7  20                 	db	32
   729  00FCF8  20                 	db	32
   730  00FCF9  20                 	db	32
   731  00FCFA  20                 	db	32
   732  00FCFB  20                 	db	32
   733  00FCFC  20                 	db	32
   734  00FCFD  00                 	db	0
   735  00FCFE                     STR_40:
   736  00FCFE  4C                 	db	76	;'L'
   737  00FCFF  4F                 	db	79	;'O'
   738  00FD00  47                 	db	71	;'G'
   739  00FD01  20                 	db	32
   740  00FD02  32                 	db	50	;'2'
   741  00FD03  20                 	db	32
   742  00FD04  20                 	db	32
   743  00FD05  20                 	db	32
   744  00FD06  20                 	db	32
   745  00FD07  20                 	db	32
   746  00FD08  20                 	db	32
   747  00FD09  20                 	db	32
   748  00FD0A  20                 	db	32
   749  00FD0B  20                 	db	32
   750  00FD0C  20                 	db	32
   751  00FD0D  20                 	db	32
   752  00FD0E  00                 	db	0
   753  00FD0F                     STR_44:
   754  00FD0F  4C                 	db	76	;'L'
   755  00FD10  4F                 	db	79	;'O'
   756  00FD11  47                 	db	71	;'G'
   757  00FD12  20                 	db	32
   758  00FD13  33                 	db	51	;'3'
   759  00FD14  20                 	db	32
   760  00FD15  20                 	db	32
   761  00FD16  20                 	db	32
   762  00FD17  20                 	db	32
   763  00FD18  20                 	db	32
   764  00FD19  20                 	db	32
   765  00FD1A  20                 	db	32
   766  00FD1B  20                 	db	32
   767  00FD1C  20                 	db	32
   768  00FD1D  20                 	db	32
   769  00FD1E  20                 	db	32
   770  00FD1F  00                 	db	0
   771  00FD20                     STR_48:
   772  00FD20  4C                 	db	76	;'L'
   773  00FD21  4F                 	db	79	;'O'
   774  00FD22  47                 	db	71	;'G'
   775  00FD23  20                 	db	32
   776  00FD24  34                 	db	52	;'4'
   777  00FD25  20                 	db	32
   778  00FD26  20                 	db	32
   779  00FD27  20                 	db	32
   780  00FD28  20                 	db	32
   781  00FD29  20                 	db	32
   782  00FD2A  20                 	db	32
   783  00FD2B  20                 	db	32
   784  00FD2C  20                 	db	32
   785  00FD2D  20                 	db	32
   786  00FD2E  20                 	db	32
   787  00FD2F  20                 	db	32
   788  00FD30  00                 	db	0
   789  00FD31                     STR_36:
   790  00FD31  33                 	db	51	;'3'
   791  00FD32  2E                 	db	46
   792  00FD33  20                 	db	32
   793  00FD34  4C                 	db	76	;'L'
   794  00FD35  4F                 	db	79	;'O'
   795  00FD36  47                 	db	71	;'G'
   796  00FD37  53                 	db	83	;'S'
   797  00FD38  20                 	db	32
   798  00FD39  20                 	db	32
   799  00FD3A  20                 	db	32
   800  00FD3B  20                 	db	32
   801  00FD3C  20                 	db	32
   802  00FD3D  20                 	db	32
   803  00FD3E  20                 	db	32
   804  00FD3F  20                 	db	32
   805  00FD40  20                 	db	32
   806  00FD41  00                 	db	0
   807  00FD42                     STR_32:
   808  00FD42  32                 	db	50	;'2'
   809  00FD43  2E                 	db	46
   810  00FD44  20                 	db	32
   811  00FD45  53                 	db	83	;'S'
   812  00FD46  4F                 	db	79	;'O'
   813  00FD47  52                 	db	82	;'R'
   814  00FD48  54                 	db	84	;'T'
   815  00FD49  20                 	db	32
   816  00FD4A  20                 	db	32
   817  00FD4B  20                 	db	32
   818  00FD4C  20                 	db	32
   819  00FD4D  20                 	db	32
   820  00FD4E  20                 	db	32
   821  00FD4F  20                 	db	32
   822  00FD50  20                 	db	32
   823  00FD51  20                 	db	32
   824  00FD52  00                 	db	0
   825  00FD53                     STR_33:
   826  00FD53  31                 	db	49	;'1'
   827  00FD54  2E                 	db	46
   828  00FD55  20                 	db	32
   829  00FD56  44                 	db	68	;'D'
   830  00FD57  41                 	db	65	;'A'
   831  00FD58  54                 	db	84	;'T'
   832  00FD59  45                 	db	69	;'E'
   833  00FD5A  2F                 	db	47
   834  00FD5B  54                 	db	84	;'T'
   835  00FD5C  49                 	db	73	;'I'
   836  00FD5D  4D                 	db	77	;'M'
   837  00FD5E  45                 	db	69	;'E'
   838  00FD5F  20                 	db	32
   839  00FD60  20                 	db	32
   840  00FD61  20                 	db	32
   841  00FD62  20                 	db	32
   842  00FD63  00                 	db	0
   843  00FD64                     STR_24:
   844  00FD64  20                 	db	32
   845  00FD65  2D                 	db	45
   846  00FD66  2D                 	db	45
   847  00FD67  20                 	db	32
   848  00FD68  50                 	db	80	;'P'
   849  00FD69  4F                 	db	79	;'O'
   850  00FD6A  50                 	db	80	;'P'
   851  00FD6B  20                 	db	32
   852  00FD6C  20                 	db	32
   853  00FD6D  43                 	db	67	;'C'
   854  00FD6E  41                 	db	65	;'A'
   855  00FD6F  4E                 	db	78	;'N'
   856  00FD70  20                 	db	32
   857  00FD71  2D                 	db	45
   858  00FD72  2D                 	db	45
   859  00FD73  20                 	db	32
   860  00FD74  00                 	db	0
   861  00FD75                     STR_26:
   862  00FD75  20                 	db	32
   863  00FD76  2D                 	db	45
   864  00FD77  2D                 	db	45
   865  00FD78  20                 	db	32
   866  00FD79  53                 	db	83	;'S'
   867  00FD7A  4F                 	db	79	;'O'
   868  00FD7B  55                 	db	85	;'U'
   869  00FD7C  50                 	db	80	;'P'
   870  00FD7D  20                 	db	32
   871  00FD7E  43                 	db	67	;'C'
   872  00FD7F  41                 	db	65	;'A'
   873  00FD80  4E                 	db	78	;'N'
   874  00FD81  20                 	db	32
   875  00FD82  2D                 	db	45
   876  00FD83  2D                 	db	45
   877  00FD84  20                 	db	32
   878  00FD85  00                 	db	0
   879  00FD86                     STR_28:
   880  00FD86  2D                 	db	45
   881  00FD87  2D                 	db	45
   882  00FD88  20                 	db	32
   883  00FD89  54                 	db	84	;'T'
   884  00FD8A  4F                 	db	79	;'O'
   885  00FD8B  54                 	db	84	;'T'
   886  00FD8C  41                 	db	65	;'A'
   887  00FD8D  4C                 	db	76	;'L'
   888  00FD8E  20                 	db	32
   889  00FD8F  43                 	db	67	;'C'
   890  00FD90  41                 	db	65	;'A'
   891  00FD91  4E                 	db	78	;'N'
   892  00FD92  53                 	db	83	;'S'
   893  00FD93  20                 	db	32
   894  00FD94  2D                 	db	45
   895  00FD95  2D                 	db	45
   896  00FD96  00                 	db	0
   897  00FD97                     STR_39:
   898  00FD97  4C                 	db	76	;'L'
   899  00FD98  4F                 	db	79	;'O'
   900  00FD99  47                 	db	71	;'G'
   901  00FD9A  20                 	db	32
   902  00FD9B  31                 	db	49	;'1'
   903  00FD9C  20                 	db	32
   904  00FD9D  20                 	db	32
   905  00FD9E  20                 	db	32
   906  00FD9F  20                 	db	32
   907  00FDA0  20                 	db	32
   908  00FDA1  20                 	db	32
   909  00FDA2  20                 	db	32
   910  00FDA3  20                 	db	32
   911  00FDA4  20                 	db	32
   912  00FDA5  20                 	db	32
   913  00FDA6  3C                 	db	60	;'<'
   914  00FDA7  00                 	db	0
   915  00FDA8                     STR_42:
   916  00FDA8  4C                 	db	76	;'L'
   917  00FDA9  4F                 	db	79	;'O'
   918  00FDAA  47                 	db	71	;'G'
   919  00FDAB  20                 	db	32
   920  00FDAC  32                 	db	50	;'2'
   921  00FDAD  20                 	db	32
   922  00FDAE  20                 	db	32
   923  00FDAF  20                 	db	32
   924  00FDB0  20                 	db	32
   925  00FDB1  20                 	db	32
   926  00FDB2  20                 	db	32
   927  00FDB3  20                 	db	32
   928  00FDB4  20                 	db	32
   929  00FDB5  20                 	db	32
   930  00FDB6  20                 	db	32
   931  00FDB7  3C                 	db	60	;'<'
   932  00FDB8  00                 	db	0
   933  00FDB9                     STR_46:
   934  00FDB9  4C                 	db	76	;'L'
   935  00FDBA  4F                 	db	79	;'O'
   936  00FDBB  47                 	db	71	;'G'
   937  00FDBC  20                 	db	32
   938  00FDBD  33                 	db	51	;'3'
   939  00FDBE  20                 	db	32
   940  00FDBF  20                 	db	32
   941  00FDC0  20                 	db	32
   942  00FDC1  20                 	db	32
   943  00FDC2  20                 	db	32
   944  00FDC3  20                 	db	32
   945  00FDC4  20                 	db	32
   946  00FDC5  20                 	db	32
   947  00FDC6  20                 	db	32
   948  00FDC7  20                 	db	32
   949  00FDC8  3C                 	db	60	;'<'
   950  00FDC9  00                 	db	0
   951  00FDCA                     STR_50:
   952  00FDCA  4C                 	db	76	;'L'
   953  00FDCB  4F                 	db	79	;'O'
   954  00FDCC  47                 	db	71	;'G'
   955  00FDCD  20                 	db	32
   956  00FDCE  34                 	db	52	;'4'
   957  00FDCF  20                 	db	32
   958  00FDD0  20                 	db	32
   959  00FDD1  20                 	db	32
   960  00FDD2  20                 	db	32
   961  00FDD3  20                 	db	32
   962  00FDD4  20                 	db	32
   963  00FDD5  20                 	db	32
   964  00FDD6  20                 	db	32
   965  00FDD7  20                 	db	32
   966  00FDD8  20                 	db	32
   967  00FDD9  3C                 	db	60	;'<'
   968  00FDDA  00                 	db	0
   969  00FDDB                     STR_38:
   970  00FDDB  33                 	db	51	;'3'
   971  00FDDC  2E                 	db	46
   972  00FDDD  20                 	db	32
   973  00FDDE  4C                 	db	76	;'L'
   974  00FDDF  4F                 	db	79	;'O'
   975  00FDE0  47                 	db	71	;'G'
   976  00FDE1  53                 	db	83	;'S'
   977  00FDE2  20                 	db	32
   978  00FDE3  20                 	db	32
   979  00FDE4  20                 	db	32
   980  00FDE5  20                 	db	32
   981  00FDE6  20                 	db	32
   982  00FDE7  20                 	db	32
   983  00FDE8  20                 	db	32
   984  00FDE9  20                 	db	32
   985  00FDEA  3C                 	db	60	;'<'
   986  00FDEB  00                 	db	0
   987  00FDEC                     STR_34:
   988  00FDEC  32                 	db	50	;'2'
   989  00FDED  2E                 	db	46
   990  00FDEE  20                 	db	32
   991  00FDEF  53                 	db	83	;'S'
   992  00FDF0  4F                 	db	79	;'O'
   993  00FDF1  52                 	db	82	;'R'
   994  00FDF2  54                 	db	84	;'T'
   995  00FDF3  20                 	db	32
   996  00FDF4  20                 	db	32
   997  00FDF5  20                 	db	32
   998  00FDF6  20                 	db	32
   999  00FDF7  20                 	db	32
  1000  00FDF8  20                 	db	32
  1001  00FDF9  20                 	db	32
  1002  00FDFA  20                 	db	32
  1003  00FDFB  3C                 	db	60	;'<'
  1004  00FDFC  00                 	db	0
  1005  00FDFD                     STR_31:
  1006  00FDFD  31                 	db	49	;'1'
  1007  00FDFE  2E                 	db	46
  1008  00FDFF  20                 	db	32
  1009  00FE00  44                 	db	68	;'D'
  1010  00FE01  41                 	db	65	;'A'
  1011  00FE02  54                 	db	84	;'T'
  1012  00FE03  45                 	db	69	;'E'
  1013  00FE04  2F                 	db	47
  1014  00FE05  54                 	db	84	;'T'
  1015  00FE06  49                 	db	73	;'I'
  1016  00FE07  4D                 	db	77	;'M'
  1017  00FE08  45                 	db	69	;'E'
  1018  00FE09  20                 	db	32
  1019  00FE0A  20                 	db	32
  1020  00FE0B  20                 	db	32
  1021  00FE0C  3C                 	db	60	;'<'
  1022  00FE0D  00                 	db	0
  1023  00FE0E                     STR_6:
  1024  00FE0E  50                 	db	80	;'P'
  1025  00FE0F  41                 	db	65	;'A'
  1026  00FE10  55                 	db	85	;'U'
  1027  00FE11  53                 	db	83	;'S'
  1028  00FE12  45                 	db	69	;'E'
  1029  00FE13  20                 	db	32
  1030  00FE14  3C                 	db	60	;'<'
  1031  00FE15  20                 	db	32
  1032  00FE16  7C                 	db	124
  1033  00FE17  20                 	db	32
  1034  00FE18  42                 	db	66	;'B'
  1035  00FE19  41                 	db	65	;'A'
  1036  00FE1A  43                 	db	67	;'C'
  1037  00FE1B  4B                 	db	75	;'K'
  1038  00FE1C  20                 	db	32
  1039  00FE1D  3E                 	db	62	;'>'
  1040  00FE1E  00                 	db	0
  1041  00FE1F                     STR_30:
  1042  00FE1F  50                 	db	80	;'P'
  1043  00FE20  55                 	db	85	;'U'
  1044  00FE21  53                 	db	83	;'S'
  1045  00FE22  48                 	db	72	;'H'
  1046  00FE23  20                 	db	32
  1047  00FE24  54                 	db	84	;'T'
  1048  00FE25  4F                 	db	79	;'O'
  1049  00FE26  20                 	db	32
  1050  00FE27  43                 	db	67	;'C'
  1051  00FE28  4F                 	db	79	;'O'
  1052  00FE29  4E                 	db	78	;'N'
  1053  00FE2A  54                 	db	84	;'T'
  1054  00FE2B  49                 	db	73	;'I'
  1055  00FE2C  4E                 	db	78	;'N'
  1056  00FE2D  55                 	db	85	;'U'
  1057  00FE2E  45                 	db	69	;'E'
  1058  00FE2F  00                 	db	0
  1059  00FE30                     STR_82:
  1060  00FE30  4D                 	db	77	;'M'
  1061  00FE31  41                 	db	65	;'A'
  1062  00FE32  47                 	db	71	;'G'
  1063  00FE33  5F                 	db	95	;'_'
  1064  00FE34  73                 	db	115	;'s'
  1065  00FE35  69                 	db	105	;'i'
  1066  00FE36  67                 	db	103	;'g'
  1067  00FE37  6E                 	db	110	;'n'
  1068  00FE38  61                 	db	97	;'a'
  1069  00FE39  6C                 	db	108	;'l'
  1070  00FE3A  3A                 	db	58	;':'
  1071  00FE3B  20                 	db	32
  1072  00FE3C  25                 	db	37
  1073  00FE3D  64                 	db	100	;'d'
  1074  00FE3E  20                 	db	32
  1075  00FE3F  00                 	db	0
  1076  00FE40                     STR_98:
  1077  00FE40  54                 	db	84	;'T'
  1078  00FE41  53                 	db	83	;'S'
  1079  00FE42  54                 	db	84	;'T'
  1080  00FE43  3A                 	db	58	;':'
  1081  00FE44  20                 	db	32
  1082  00FE45  54                 	db	84	;'T'
  1083  00FE46  49                 	db	73	;'I'
  1084  00FE47  4C                 	db	76	;'L'
  1085  00FE48  54                 	db	84	;'T'
  1086  00FE49  20                 	db	32
  1087  00FE4A  53                 	db	83	;'S'
  1088  00FE4B  45                 	db	69	;'E'
  1089  00FE4C  52                 	db	82	;'R'
  1090  00FE4D  56                 	db	86	;'V'
  1091  00FE4E  4F                 	db	79	;'O'
  1092  00FE4F  00                 	db	0
  1093  00FE50                     STR_4:
  1094  00FE50  44                 	db	68	;'D'
  1095  00FE51  49                 	db	73	;'I'
  1096  00FE52  44                 	db	68	;'D'
  1097  00FE53  4E                 	db	78	;'N'
  1098  00FE54  27                 	db	39
  1099  00FE55  54                 	db	84	;'T'
  1100  00FE56  20                 	db	32
  1101  00FE57  43                 	db	67	;'C'
  1102  00FE58  4F                 	db	79	;'O'
  1103  00FE59  4D                 	db	77	;'M'
  1104  00FE5A  50                 	db	80	;'P'
  1105  00FE5B  4C                 	db	76	;'L'
  1106  00FE5C  45                 	db	69	;'E'
  1107  00FE5D  54                 	db	84	;'T'
  1108  00FE5E  45                 	db	69	;'E'
  1109  00FE5F  00                 	db	0
  1110  00FE60                     STR_80:
  1111  00FE60  49                 	db	73	;'I'
  1112  00FE61  52                 	db	82	;'R'
  1113  00FE62  5F                 	db	95	;'_'
  1114  00FE63  73                 	db	115	;'s'
  1115  00FE64  69                 	db	105	;'i'
  1116  00FE65  67                 	db	103	;'g'
  1117  00FE66  6E                 	db	110	;'n'
  1118  00FE67  61                 	db	97	;'a'
  1119  00FE68  6C                 	db	108	;'l'
  1120  00FE69  3A                 	db	58	;':'
  1121  00FE6A  20                 	db	32
  1122  00FE6B  25                 	db	37
  1123  00FE6C  64                 	db	100	;'d'
  1124  00FE6D  20                 	db	32
  1125  00FE6E  00                 	db	0
  1126  00FE6F                     STR_104:
  1127  00FE6F  43                 	db	67	;'C'
  1128  00FE70  41                 	db	65	;'A'
  1129  00FE71  4D                 	db	77	;'M'
  1130  00FE72  20                 	db	32
  1131  00FE73  44                 	db	68	;'D'
  1132  00FE74  57                 	db	87	;'W'
  1133  00FE75  4E                 	db	78	;'N'
  1134  00FE76  20                 	db	32
  1135  00FE77  7C                 	db	124
  1136  00FE78  52                 	db	82	;'R'
  1137  00FE79  43                 	db	67	;'C'
  1138  00FE7A  30                 	db	48	;'0'
  1139  00FE7B  3D                 	db	61	;'='
  1140  00FE7C  30                 	db	48	;'0'
  1141  00FE7D  00                 	db	0
  1142  00FE7E                     STR_103:
  1143  00FE7E  43                 	db	67	;'C'
  1144  00FE7F  41                 	db	65	;'A'
  1145  00FE80  4D                 	db	77	;'M'
  1146  00FE81  20                 	db	32
  1147  00FE82  55                 	db	85	;'U'
  1148  00FE83  50                 	db	80	;'P'
  1149  00FE84  20                 	db	32
  1150  00FE85  20                 	db	32
  1151  00FE86  7C                 	db	124
  1152  00FE87  52                 	db	82	;'R'
  1153  00FE88  43                 	db	67	;'C'
  1154  00FE89  30                 	db	48	;'0'
  1155  00FE8A  3D                 	db	61	;'='
  1156  00FE8B  31                 	db	49	;'1'
  1157  00FE8C  00                 	db	0
  1158  00FE8D                     STR_81:
  1159  00FE8D  54                 	db	84	;'T'
  1160  00FE8E  53                 	db	83	;'S'
  1161  00FE8F  54                 	db	84	;'T'
  1162  00FE90  3A                 	db	58	;':'
  1163  00FE91  20                 	db	32
  1164  00FE92  4D                 	db	77	;'M'
  1165  00FE93  41                 	db	65	;'A'
  1166  00FE94  47                 	db	71	;'G'
  1167  00FE95  4E                 	db	78	;'N'
  1168  00FE96  45                 	db	69	;'E'
  1169  00FE97  54                 	db	84	;'T'
  1170  00FE98  49                 	db	73	;'I'
  1171  00FE99  53                 	db	83	;'S'
  1172  00FE9A  4D                 	db	77	;'M'
  1173  00FE9B  00                 	db	0
  1174  00FE9C                     STR_102:
  1175  00FE9C  54                 	db	84	;'T'
  1176  00FE9D  53                 	db	83	;'S'
  1177  00FE9E  54                 	db	84	;'T'
  1178  00FE9F  3A                 	db	58	;':'
  1179  00FEA0  20                 	db	32
  1180  00FEA1  43                 	db	67	;'C'
  1181  00FEA2  41                 	db	65	;'A'
  1182  00FEA3  4D                 	db	77	;'M'
  1183  00FEA4  20                 	db	32
  1184  00FEA5  53                 	db	83	;'S'
  1185  00FEA6  45                 	db	69	;'E'
  1186  00FEA7  52                 	db	82	;'R'
  1187  00FEA8  56                 	db	86	;'V'
  1188  00FEA9  4F                 	db	79	;'O'
  1189  00FEAA  00                 	db	0
  1190  00FEAB                     STR_91:
  1191  00FEAB  54                 	db	84	;'T'
  1192  00FEAC  53                 	db	83	;'S'
  1193  00FEAD  54                 	db	84	;'T'
  1194  00FEAE  3A                 	db	58	;':'
  1195  00FEAF  20                 	db	32
  1196  00FEB0  50                 	db	80	;'P'
  1197  00FEB1  41                 	db	65	;'A'
  1198  00FEB2  4E                 	db	78	;'N'
  1199  00FEB3  20                 	db	32
  1200  00FEB4  53                 	db	83	;'S'
  1201  00FEB5  45                 	db	69	;'E'
  1202  00FEB6  52                 	db	82	;'R'
  1203  00FEB7  56                 	db	86	;'V'
  1204  00FEB8  4F                 	db	79	;'O'
  1205  00FEB9  00                 	db	0
  1206  00FEBA                     STR_75:
  1207  00FEBA  41                 	db	65	;'A'
  1208  00FEBB  4C                 	db	76	;'L'
  1209  00FEBC  47                 	db	71	;'G'
  1210  00FEBD  34                 	db	52	;'4'
  1211  00FEBE  3A                 	db	58	;':'
  1212  00FEBF  20                 	db	32
  1213  00FEC0  41                 	db	65	;'A'
  1214  00FEC1  4C                 	db	76	;'L'
  1215  00FEC2  4C                 	db	76	;'L'
  1216  00FEC3  20                 	db	32
  1217  00FEC4  43                 	db	67	;'C'
  1218  00FEC5  41                 	db	65	;'A'
  1219  00FEC6  4E                 	db	78	;'N'
  1220  00FEC7  53                 	db	83	;'S'
  1221  00FEC8  00                 	db	0
  1222  00FEC9                     STR_85:
  1223  00FEC9  54                 	db	84	;'T'
  1224  00FECA  53                 	db	83	;'S'
  1225  00FECB  54                 	db	84	;'T'
  1226  00FECC  3A                 	db	58	;':'
  1227  00FECD  20                 	db	32
  1228  00FECE  44                 	db	68	;'D'
  1229  00FECF  43                 	db	67	;'C'
  1230  00FED0  20                 	db	32
  1231  00FED1  4D                 	db	77	;'M'
  1232  00FED2  4F                 	db	79	;'O'
  1233  00FED3  54                 	db	84	;'T'
  1234  00FED4  4F                 	db	79	;'O'
  1235  00FED5  52                 	db	82	;'R'
  1236  00FED6  53                 	db	83	;'S'
  1237  00FED7  00                 	db	0
  1238  00FED8                     STR_70:
  1239  00FED8  41                 	db	65	;'A'
  1240  00FED9  4C                 	db	76	;'L'
  1241  00FEDA  47                 	db	71	;'G'
  1242  00FEDB  4F                 	db	79	;'O'
  1243  00FEDC  52                 	db	82	;'R'
  1244  00FEDD  49                 	db	73	;'I'
  1245  00FEDE  54                 	db	84	;'T'
  1246  00FEDF  48                 	db	72	;'H'
  1247  00FEE0  4D                 	db	77	;'M'
  1248  00FEE1  20                 	db	32
  1249  00FEE2  54                 	db	84	;'T'
  1250  00FEE3  45                 	db	69	;'E'
  1251  00FEE4  53                 	db	83	;'S'
  1252  00FEE5  54                 	db	84	;'T'
  1253  00FEE6  00                 	db	0
  1254  00FEE7                     STR_86:
  1255  00FEE7  50                 	db	80	;'P'
  1256  00FEE8  49                 	db	73	;'I'
  1257  00FEE9  4E                 	db	78	;'N'
  1258  00FEEA  20                 	db	32
  1259  00FEEB  52                 	db	82	;'R'
  1260  00FEEC  41                 	db	65	;'A'
  1261  00FEED  35                 	db	53	;'5'
  1262  00FEEE  20                 	db	32
  1263  00FEEF  48                 	db	72	;'H'
  1264  00FEF0  49                 	db	73	;'I'
  1265  00FEF1  47                 	db	71	;'G'
  1266  00FEF2  48                 	db	72	;'H'
  1267  00FEF3  2E                 	db	46
  1268  00FEF4  00                 	db	0
  1269  00FEF5                     STR_73:
  1270  00FEF5  41                 	db	65	;'A'
  1271  00FEF6  4C                 	db	76	;'L'
  1272  00FEF7  47                 	db	71	;'G'
  1273  00FEF8  32                 	db	50	;'2'
  1274  00FEF9  3A                 	db	58	;':'
  1275  00FEFA  20                 	db	32
  1276  00FEFB  31                 	db	49	;'1'
  1277  00FEFC  32                 	db	50	;'2'
  1278  00FEFD  20                 	db	32
  1279  00FEFE  43                 	db	67	;'C'
  1280  00FEFF  41                 	db	65	;'A'
  1281  00FF00  4E                 	db	78	;'N'
  1282  00FF01  53                 	db	83	;'S'
  1283  00FF02  00                 	db	0
  1284  00FF03                     STR_76:
  1285  00FF03  41                 	db	65	;'A'
  1286  00FF04  4C                 	db	76	;'L'
  1287  00FF05  47                 	db	71	;'G'
  1288  00FF06  35                 	db	53	;'5'
  1289  00FF07  3A                 	db	58	;':'
  1290  00FF08  20                 	db	32
  1291  00FF09  4E                 	db	78	;'N'
  1292  00FF0A  4F                 	db	79	;'O'
  1293  00FF0B  20                 	db	32
  1294  00FF0C  43                 	db	67	;'C'
  1295  00FF0D  41                 	db	65	;'A'
  1296  00FF0E  4E                 	db	78	;'N'
  1297  00FF0F  53                 	db	83	;'S'
  1298  00FF10  00                 	db	0
  1299  00FF11                     STR_71:
  1300  00FF11  50                 	db	80	;'P'
  1301  00FF12  55                 	db	85	;'U'
  1302  00FF13  53                 	db	83	;'S'
  1303  00FF14  48                 	db	72	;'H'
  1304  00FF15  20                 	db	32
  1305  00FF16  54                 	db	84	;'T'
  1306  00FF17  4F                 	db	79	;'O'
  1307  00FF18  20                 	db	32
  1308  00FF19  53                 	db	83	;'S'
  1309  00FF1A  54                 	db	84	;'T'
  1310  00FF1B  41                 	db	65	;'A'
  1311  00FF1C  52                 	db	82	;'R'
  1312  00FF1D  54                 	db	84	;'T'
  1313  00FF1E  00                 	db	0
  1314  00FF1F                     STR_23:
  1315  00FF1F  25                 	db	37
  1316  00FF20  64                 	db	100	;'d'
  1317  00FF21  20                 	db	32
  1318  00FF22  4D                 	db	77	;'M'
  1319  00FF23  49                 	db	73	;'I'
  1320  00FF24  4E                 	db	78	;'N'
  1321  00FF25  20                 	db	32
  1322  00FF26  25                 	db	37
  1323  00FF27  64                 	db	100	;'d'
  1324  00FF28  20                 	db	32
  1325  00FF29  53                 	db	83	;'S'
  1326  00FF2A  45                 	db	69	;'E'
  1327  00FF2B  43                 	db	67	;'C'
  1328  00FF2C  00                 	db	0
  1329  00FF2D                     STR_2:
  1330  00FF2D  54                 	db	84	;'T'
  1331  00FF2E  49                 	db	73	;'I'
  1332  00FF2F  4D                 	db	77	;'M'
  1333  00FF30  45                 	db	69	;'E'
  1334  00FF31  3A                 	db	58	;':'
  1335  00FF32  20                 	db	32
  1336  00FF33  25                 	db	37
  1337  00FF34  64                 	db	100	;'d'
  1338  00FF35  3A                 	db	58	;':'
  1339  00FF36  25                 	db	37
  1340  00FF37  30                 	db	48	;'0'
  1341  00FF38  32                 	db	50	;'2'
  1342  00FF39  64                 	db	100	;'d'
  1343  00FF3A  00                 	db	0
  1344  00FF3B                     STR_79:
  1345  00FF3B  54                 	db	84	;'T'
  1346  00FF3C  53                 	db	83	;'S'
  1347  00FF3D  54                 	db	84	;'T'
  1348  00FF3E  3A                 	db	58	;':'
  1349  00FF3F  20                 	db	32
  1350  00FF40  49                 	db	73	;'I'
  1351  00FF41  52                 	db	82	;'R'
  1352  00FF42  20                 	db	32
  1353  00FF43  53                 	db	83	;'S'
  1354  00FF44  4E                 	db	78	;'N'
  1355  00FF45  53                 	db	83	;'S'
  1356  00FF46  52                 	db	82	;'R'
  1357  00FF47  00                 	db	0
  1358  00FF48                     STR_108:
  1359  00FF48  53                 	db	83	;'S'
  1360  00FF49  4F                 	db	79	;'O'
  1361  00FF4A  4C                 	db	76	;'L'
  1362  00FF4B  45                 	db	69	;'E'
  1363  00FF4C  4E                 	db	78	;'N'
  1364  00FF4D  4F                 	db	79	;'O'
  1365  00FF4E  49                 	db	73	;'I'
  1366  00FF4F  44                 	db	68	;'D'
  1367  00FF50  20                 	db	32
  1368  00FF51  54                 	db	84	;'T'
  1369  00FF52  53                 	db	83	;'S'
  1370  00FF53  54                 	db	84	;'T'
  1371  00FF54  00                 	db	0
  1372  00FF55                     STR_65:
  1373  00FF55  54                 	db	84	;'T'
  1374  00FF56  49                 	db	73	;'I'
  1375  00FF57  4D                 	db	77	;'M'
  1376  00FF58  45                 	db	69	;'E'
  1377  00FF59  20                 	db	32
  1378  00FF5A  25                 	db	37
  1379  00FF5B  64                 	db	100	;'d'
  1380  00FF5C  3A                 	db	58	;':'
  1381  00FF5D  25                 	db	37
  1382  00FF5E  30                 	db	48	;'0'
  1383  00FF5F  32                 	db	50	;'2'
  1384  00FF60  64                 	db	100	;'d'
  1385  00FF61  00                 	db	0
  1386  00FF62                     STR_74:
  1387  00FF62  41                 	db	65	;'A'
  1388  00FF63  4C                 	db	76	;'L'
  1389  00FF64  47                 	db	71	;'G'
  1390  00FF65  33                 	db	51	;'3'
  1391  00FF66  3A                 	db	58	;':'
  1392  00FF67  20                 	db	32
  1393  00FF68  31                 	db	49	;'1'
  1394  00FF69  20                 	db	32
  1395  00FF6A  43                 	db	67	;'C'
  1396  00FF6B  41                 	db	65	;'A'
  1397  00FF6C  4E                 	db	78	;'N'
  1398  00FF6D  00                 	db	0
  1399  00FF6E                     STR_88:
  1400  00FF6E  50                 	db	80	;'P'
  1401  00FF6F  49                 	db	73	;'I'
  1402  00FF70  4E                 	db	78	;'N'
  1403  00FF71  20                 	db	32
  1404  00FF72  52                 	db	82	;'R'
  1405  00FF73  41                 	db	65	;'A'
  1406  00FF74  33                 	db	51	;'3'
  1407  00FF75  2E                 	db	46
  1408  00FF76  2E                 	db	46
  1409  00FF77  2E                 	db	46
  1410  00FF78  00                 	db	0
  1411  00FF79                     STR_90:
  1412  00FF79  50                 	db	80	;'P'
  1413  00FF7A  49                 	db	73	;'I'
  1414  00FF7B  4E                 	db	78	;'N'
  1415  00FF7C  20                 	db	32
  1416  00FF7D  52                 	db	82	;'R'
  1417  00FF7E  41                 	db	65	;'A'
  1418  00FF7F  34                 	db	52	;'4'
  1419  00FF80  2E                 	db	46
  1420  00FF81  2E                 	db	46
  1421  00FF82  2E                 	db	46
  1422  00FF83  00                 	db	0
  1423  00FF84                     STR_64:
  1424  00FF84  53                 	db	83	;'S'
  1425  00FF85  4F                 	db	79	;'O'
  1426  00FF86  52                 	db	82	;'R'
  1427  00FF87  54                 	db	84	;'T'
  1428  00FF88  49                 	db	73	;'I'
  1429  00FF89  4E                 	db	78	;'N'
  1430  00FF8A  47                 	db	71	;'G'
  1431  00FF8B  2E                 	db	46
  1432  00FF8C  2E                 	db	46
  1433  00FF8D  2E                 	db	46
  1434  00FF8E  00                 	db	0
  1435  00FF8F                     STR_109:
  1436  00FF8F  50                 	db	80	;'P'
  1437  00FF90  55                 	db	85	;'U'
  1438  00FF91  53                 	db	83	;'S'
  1439  00FF92  48                 	db	72	;'H'
  1440  00FF93  20                 	db	32
  1441  00FF94  44                 	db	68	;'D'
  1442  00FF95  4F                 	db	79	;'O'
  1443  00FF96  4E                 	db	78	;'N'
  1444  00FF97  45                 	db	69	;'E'
  1445  00FF98  00                 	db	0
  1446  00FF99                     STR_83:
  1447  00FF99  41                 	db	65	;'A'
  1448  00FF9A  43                 	db	67	;'C'
  1449  00FF9B  54                 	db	84	;'T'
  1450  00FF9C  55                 	db	85	;'U'
  1451  00FF9D  41                 	db	65	;'A'
  1452  00FF9E  54                 	db	84	;'T'
  1453  00FF9F  4F                 	db	79	;'O'
  1454  00FFA0  52                 	db	82	;'R'
  1455  00FFA1  53                 	db	83	;'S'
  1456  00FFA2  00                 	db	0
  1457  00FFA3                     STR_22:
  1458  00FFA3  44                 	db	68	;'D'
  1459  00FFA4  55                 	db	85	;'U'
  1460  00FFA5  52                 	db	82	;'R'
  1461  00FFA6  41                 	db	65	;'A'
  1462  00FFA7  54                 	db	84	;'T'
  1463  00FFA8  49                 	db	73	;'I'
  1464  00FFA9  4F                 	db	79	;'O'
  1465  00FFAA  4E                 	db	78	;'N'
  1466  00FFAB  3A                 	db	58	;':'
  1467  00FFAC  00                 	db	0
  1468  00FFAD                     STR_77:
  1469  00FFAD  53                 	db	83	;'S'
  1470  00FFAE  45                 	db	69	;'E'
  1471  00FFAF  4E                 	db	78	;'N'
  1472  00FFB0  53                 	db	83	;'S'
  1473  00FFB1  4F                 	db	79	;'O'
  1474  00FFB2  52                 	db	82	;'R'
  1475  00FFB3  53                 	db	83	;'S'
  1476  00FFB4  00                 	db	0
  1477  00FFB5                     STR_112:
  1478  00FFB5  28                 	db	40
  1479  00FFB6  6E                 	db	110	;'n'
  1480  00FFB7  75                 	db	117	;'u'
  1481  00FFB8  6C                 	db	108	;'l'
  1482  00FFB9  6C                 	db	108	;'l'
  1483  00FFBA  29                 	db	41
  1484  00FFBB  00                 	db	0
  1485  00FFBC                     STR_67:
  1486  00FFBC  46                 	db	70	;'F'
  1487  00FFBD  41                 	db	65	;'A'
  1488  00FFBE  49                 	db	73	;'I'
  1489  00FFBF  4C                 	db	76	;'L'
  1490  00FFC0  45                 	db	69	;'E'
  1491  00FFC1  44                 	db	68	;'D'
  1492  00FFC2  00                 	db	0
  1493  00FFC3                     STR_7:
  1494  00FFC3  53                 	db	83	;'S'
  1495  00FFC4  54                 	db	84	;'T'
  1496  00FFC5  41                 	db	65	;'A'
  1497  00FFC6  52                 	db	82	;'R'
  1498  00FFC7  54                 	db	84	;'T'
  1499  00FFC8  3A                 	db	58	;':'
  1500  00FFC9  00                 	db	0
  1501  00FFCA                     STR_9:
  1502  00FFCA  46                 	db	70	;'F'
  1503  00FFCB  45                 	db	69	;'E'
  1504  00FFCC  42                 	db	66	;'B'
  1505  00FFCD  00                 	db	0
  1506  00FFCE                     STR_19:
  1507  00FFCE  44                 	db	68	;'D'
  1508  00FFCF  45                 	db	69	;'E'
  1509  00FFD0  43                 	db	67	;'C'
  1510  00FFD1  00                 	db	0
  1511  00FFD2                     STR_15:
  1512  00FFD2  41                 	db	65	;'A'
  1513  00FFD3  55                 	db	85	;'U'
  1514  00FFD4  47                 	db	71	;'G'
  1515  00FFD5  00                 	db	0
  1516  00FFD6                     STR_14:
  1517  00FFD6  4A                 	db	74	;'J'
  1518  00FFD7  55                 	db	85	;'U'
  1519  00FFD8  4C                 	db	76	;'L'
  1520  00FFD9  00                 	db	0
  1521  00FFDA                     STR_8:
  1522  00FFDA  4A                 	db	74	;'J'
  1523  00FFDB  41                 	db	65	;'A'
  1524  00FFDC  4E                 	db	78	;'N'
  1525  00FFDD  00                 	db	0
  1526  00FFDE                     STR_13:
  1527  00FFDE  4A                 	db	74	;'J'
  1528  00FFDF  55                 	db	85	;'U'
  1529  00FFE0  4E                 	db	78	;'N'
  1530  00FFE1  00                 	db	0
  1531  00FFE2                     STR_16:
  1532  00FFE2  53                 	db	83	;'S'
  1533  00FFE3  45                 	db	69	;'E'
  1534  00FFE4  50                 	db	80	;'P'
  1535  00FFE5  00                 	db	0
  1536  00FFE6                     STR_10:
  1537  00FFE6  4D                 	db	77	;'M'
  1538  00FFE7  41                 	db	65	;'A'
  1539  00FFE8  52                 	db	82	;'R'
  1540  00FFE9  00                 	db	0
  1541  00FFEA                     STR_11:
  1542  00FFEA  41                 	db	65	;'A'
  1543  00FFEB  50                 	db	80	;'P'
  1544  00FFEC  52                 	db	82	;'R'
  1545  00FFED  00                 	db	0
  1546  00FFEE                     STR_20:
  1547  00FFEE  45                 	db	69	;'E'
  1548  00FFEF  52                 	db	82	;'R'
  1549  00FFF0  52                 	db	82	;'R'
  1550  00FFF1  00                 	db	0
  1551  00FFF2                     STR_17:
  1552  00FFF2  4F                 	db	79	;'O'
  1553  00FFF3  43                 	db	67	;'C'
  1554  00FFF4  54                 	db	84	;'T'
  1555  00FFF5  00                 	db	0
  1556  00FFF6                     STR_18:
  1557  00FFF6  4E                 	db	78	;'N'
  1558  00FFF7  4F                 	db	79	;'O'
  1559  00FFF8  56                 	db	86	;'V'
  1560  00FFF9  00                 	db	0
  1561  00FFFA                     STR_12:
  1562  00FFFA  4D                 	db	77	;'M'
  1563  00FFFB  41                 	db	65	;'A'
  1564  00FFFC  59                 	db	89	;'Y'
  1565  00FFFD  00                 	db	0
  1566  0000                     
  1567                           ; #config settings
  1568  00FFFE  00                 	db	0	; dummy byte at the end
  1569  0000                     
  1570                           	psect	cinit
  1571  003E52                     __pcinit:
  1572                           	opt stack 0
  1573  003E52                     start_initialization:
  1574                           	opt stack 0
  1575  003E52                     __initialization:
  1576                           	opt stack 0
  1577                           
  1578                           ; Initialize objects allocated to BANK1 (8 bytes)
  1579                           ; load TBLPTR registers with __pidataBANK1
  1580  003E52  0EA6               	movlw	low __pidataBANK1
  1581  003E54  6EF6               	movwf	tblptrl,c
  1582  003E56  0E45               	movlw	high __pidataBANK1
  1583  003E58  6EF7               	movwf	tblptrh,c
  1584  003E5A  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1585  003E5C  6EF8               	movwf	tblptru,c
  1586  003E5E  EE01  F02D         	lfsr	0,__pdataBANK1
  1587  003E62  EE10 F008          	lfsr	1,8
  1588  003E66                     copy_data0:
  1589  003E66  0009               	tblrd		*+
  1590  003E68  CFF5 FFEE          	movff	tablat,postinc0
  1591  003E6C  50E5               	movf	postdec1,w,c
  1592  003E6E  50E1               	movf	fsr1l,w,c
  1593  003E70  E1FA               	bnz	copy_data0
  1594                           
  1595                           ; Clear objects allocated to BANK1 (45 bytes)
  1596  003E72  EE01  F000         	lfsr	0,__pbssBANK1
  1597  003E76  0E2D               	movlw	45
  1598  003E78                     clear_0:
  1599  003E78  6AEE               	clrf	postinc0,c
  1600  003E7A  06E8               	decf	wreg,f,c
  1601  003E7C  E1FD               	bnz	clear_0
  1602                           
  1603                           ; Clear objects allocated to BANK0 (38 bytes)
  1604  003E7E  EE00  F0DA         	lfsr	0,__pbssBANK0
  1605  003E82  0E26               	movlw	38
  1606  003E84                     clear_1:
  1607  003E84  6AEE               	clrf	postinc0,c
  1608  003E86  06E8               	decf	wreg,f,c
  1609  003E88  E1FD               	bnz	clear_1
  1610                           
  1611                           ; Clear objects allocated to COMRAM (35 bytes)
  1612  003E8A  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1613  003E8E  0E23               	movlw	35
  1614  003E90                     clear_2:
  1615  003E90  6AEE               	clrf	postinc0,c
  1616  003E92  06E8               	decf	wreg,f,c
  1617  003E94  E1FD               	bnz	clear_2
  1618  003E96                     end_of_initialization:
  1619                           	opt stack 0
  1620  003E96                     __end_of__initialization:
  1621                           	opt stack 0
  1622  003E96  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1623  003E98  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1624  003E9A  0100               	movlb	0
  1625  003E9C  EF79  F01B         	goto	_main	;jump to C main() function
  1626                           tblptru	equ	0xFF8
  1627                           tblptrh	equ	0xFF7
  1628                           tblptrl	equ	0xFF6
  1629                           tablat	equ	0xFF5
  1630                           postinc0	equ	0xFEE
  1631                           wreg	equ	0xFE8
  1632                           postdec1	equ	0xFE5
  1633                           fsr1l	equ	0xFE1
  1634                           
  1635                           	psect	bssCOMRAM
  1636  00005B                     __pbssCOMRAM:
  1637                           	opt stack 0
  1638  00005B                     _back:
  1639                           	opt stack 0
  1640  00005B                     	ds	2
  1641  00005D                     _count_can_no_lab:
  1642                           	opt stack 0
  1643  00005D                     	ds	2
  1644  00005F                     _count_can_w_lab:
  1645                           	opt stack 0
  1646  00005F                     	ds	2
  1647  000061                     _count_pop_no_tab:
  1648                           	opt stack 0
  1649  000061                     	ds	2
  1650  000063                     _count_pop_w_tab:
  1651                           	opt stack 0
  1652  000063                     	ds	2
  1653  000065                     _cur_can:
  1654                           	opt stack 0
  1655  000065                     	ds	2
  1656  000067                     _down:
  1657                           	opt stack 0
  1658  000067                     	ds	2
  1659  000069                     _enter:
  1660                           	opt stack 0
  1661  000069                     	ds	2
  1662  00006B                     _f_ID_receive:
  1663                           	opt stack 0
  1664  00006B                     	ds	2
  1665  00006D                     _f_can_coming_to_ID:
  1666                           	opt stack 0
  1667  00006D                     	ds	2
  1668  00006F                     _f_can_coming_to_distribution:
  1669                           	opt stack 0
  1670  00006F                     	ds	2
  1671  000071                     _f_can_distributed:
  1672                           	opt stack 0
  1673  000071                     	ds	2
  1674  000073                     _f_lastCan:
  1675                           	opt stack 0
  1676  000073                     	ds	2
  1677  000075                     _firstboot:
  1678                           	opt stack 0
  1679  000075                     	ds	2
  1680  000077                     _up:
  1681                           	opt stack 0
  1682  000077                     	ds	2
  1683  000079                     _was_low_1:
  1684                           	opt stack 0
  1685  000079                     	ds	2
  1686  00007B                     _was_low_3:
  1687                           	opt stack 0
  1688  00007B                     	ds	2
  1689  00007D                     _input:
  1690                           	opt stack 0
  1691  00007D                     	ds	1
  1692                           tblptru	equ	0xFF8
  1693                           tblptrh	equ	0xFF7
  1694                           tblptrl	equ	0xFF6
  1695                           tablat	equ	0xFF5
  1696                           postinc0	equ	0xFEE
  1697                           wreg	equ	0xFE8
  1698                           postdec1	equ	0xFE5
  1699                           fsr1l	equ	0xFE1
  1700                           
  1701                           	psect	bssBANK0
  1702  0000DA                     __pbssBANK0:
  1703                           	opt stack 0
  1704  0000DA                     _IR_signal:
  1705                           	opt stack 0
  1706  0000DA                     	ds	2
  1707  0000DC                     _MAG_signal:
  1708                           	opt stack 0
  1709  0000DC                     	ds	2
  1710  0000DE                     _cur_state:
  1711                           	opt stack 0
  1712  0000DE                     	ds	2
  1713  0000E0                     _debug:
  1714                           	opt stack 0
  1715  0000E0                     	ds	2
  1716  0000E2                     _f_loadingNewCan:
  1717                           	opt stack 0
  1718  0000E2                     	ds	2
  1719  0000E4                     _first:
  1720                           	opt stack 0
  1721  0000E4                     	ds	2
  1722  0000E6                     _log:
  1723                           	opt stack 0
  1724  0000E6                     	ds	2
  1725  0000E8                     _log_completion:
  1726                           	opt stack 0
  1727  0000E8                     	ds	2
  1728  0000EA                     _log_count_can_no_lab:
  1729                           	opt stack 0
  1730  0000EA                     	ds	2
  1731  0000EC                     _log_count_can_w_lab:
  1732                           	opt stack 0
  1733  0000EC                     	ds	2
  1734  0000EE                     _log_count_pop_no_tab:
  1735                           	opt stack 0
  1736  0000EE                     	ds	2
  1737  0000F0                     _log_count_pop_w_tab:
  1738                           	opt stack 0
  1739  0000F0                     	ds	2
  1740  0000F2                     _log_count_total:
  1741                           	opt stack 0
  1742  0000F2                     	ds	2
  1743  0000F4                     _log_total_time:
  1744                           	opt stack 0
  1745  0000F4                     	ds	2
  1746  0000F6                     _logstate:
  1747                           	opt stack 0
  1748  0000F6                     	ds	2
  1749  0000F8                     _total_time:
  1750                           	opt stack 0
  1751  0000F8                     	ds	2
  1752  0000FA                     _var:
  1753                           	opt stack 0
  1754  0000FA                     	ds	2
  1755  0000FC                     _machine_state:
  1756                           	opt stack 0
  1757  0000FC                     	ds	1
  1758  0000FD                     _sel:
  1759                           	opt stack 0
  1760  0000FD                     	ds	1
  1761  0000FE                     _count_total:
  1762                           	opt stack 0
  1763  0000FE                     	ds	2
  1764                           tblptru	equ	0xFF8
  1765                           tblptrh	equ	0xFF7
  1766                           tblptrl	equ	0xFF6
  1767                           tablat	equ	0xFF5
  1768                           postinc0	equ	0xFEE
  1769                           wreg	equ	0xFE8
  1770                           postdec1	equ	0xFE5
  1771                           fsr1l	equ	0xFE1
  1772                           
  1773                           	psect	bssBANK1
  1774  000100                     __pbssBANK1:
  1775                           	opt stack 0
  1776  000100                     _log_startTime:
  1777                           	opt stack 0
  1778  000100                     	ds	14
  1779  00010E                     _startTime:
  1780                           	opt stack 0
  1781  00010E                     	ds	14
  1782  00011C                     _servoTimes:
  1783                           	opt stack 0
  1784  00011C                     	ds	8
  1785  000124                     _time:
  1786                           	opt stack 0
  1787  000124                     	ds	7
  1788  00012B                     _i:
  1789                           	opt stack 0
  1790  00012B                     	ds	2
  1791                           tblptru	equ	0xFF8
  1792                           tblptrh	equ	0xFF7
  1793                           tblptrl	equ	0xFF6
  1794                           tablat	equ	0xFF5
  1795                           postinc0	equ	0xFEE
  1796                           wreg	equ	0xFE8
  1797                           postdec1	equ	0xFE5
  1798                           fsr1l	equ	0xFE1
  1799                           
  1800                           	psect	dataBANK1
  1801  00012D                     __pdataBANK1:
  1802                           	opt stack 0
  1803  00012D                     UI@F3222:
  1804                           	opt stack 0
  1805  00012D                     	ds	4
  1806  000131                     printRTC@F3213:
  1807                           	opt stack 0
  1808  000131                     	ds	4
  1809                           tblptru	equ	0xFF8
  1810                           tblptrh	equ	0xFF7
  1811                           tblptrl	equ	0xFF6
  1812                           tablat	equ	0xFF5
  1813                           postinc0	equ	0xFEE
  1814                           wreg	equ	0xFE8
  1815                           postdec1	equ	0xFE5
  1816                           fsr1l	equ	0xFE1
  1817                           
  1818                           	psect	cstackBANK0
  1819  000080                     __pcstackBANK0:
  1820                           	opt stack 0
  1821  000080                     ??_delay_ms:
  1822  000080                     ??_PortTests:
  1823  000080                     ??_isdigit:
  1824  000080                     ??_readADC:
  1825  000080                     ??_I2C_Master_Wait:
  1826  000080                     ?___wmul:
  1827                           	opt stack 0
  1828  000080                     ?___awmod:
  1829                           	opt stack 0
  1830  000080                     ?___lwdiv:
  1831                           	opt stack 0
  1832  000080                     ?___lldiv:
  1833                           	opt stack 0
  1834  000080                     lcdNibble@temp:
  1835                           	opt stack 0
  1836  000080                     initTime@m:
  1837                           	opt stack 0
  1838  000080                     updateServoPosition@time_us:
  1839                           	opt stack 0
  1840  000080                     EEPROM_read@address:
  1841                           	opt stack 0
  1842  000080                     ___wmul@multiplier:
  1843                           	opt stack 0
  1844  000080                     ___awmod@dividend:
  1845                           	opt stack 0
  1846  000080                     ___lwdiv@dividend:
  1847                           	opt stack 0
  1848  000080                     strcpy@to:
  1849                           	opt stack 0
  1850  000080                     ___lldiv@dividend:
  1851                           	opt stack 0
  1852                           
  1853                           ; 4 bytes @ 0x0
  1854  000080                     	ds	1
  1855  000081                     readADC@channel:
  1856                           	opt stack 0
  1857  000081                     I2C_Master_Read@a:
  1858                           	opt stack 0
  1859  000081                     lcdNibble@data:
  1860                           	opt stack 0
  1861  000081                     initTime@h:
  1862                           	opt stack 0
  1863  000081                     delay_ms@milliseconds:
  1864                           	opt stack 0
  1865  000081                     _isdigit$1888:
  1866                           	opt stack 0
  1867  000081                     I2C_Master_Write@d:
  1868                           	opt stack 0
  1869                           
  1870                           ; 2 bytes @ 0x1
  1871  000081                     	ds	1
  1872  000082                     ??_readIR:
  1873  000082                     ??_readMAG:
  1874  000082                     I2C_Master_Read@temp:
  1875                           	opt stack 0
  1876  000082                     lcdInst@data:
  1877                           	opt stack 0
  1878  000082                     putch@data:
  1879                           	opt stack 0
  1880  000082                     initTime@w:
  1881                           	opt stack 0
  1882  000082                     isdigit@c:
  1883                           	opt stack 0
  1884  000082                     updateServoPosition@timer:
  1885                           	opt stack 0
  1886  000082                     ___wmul@multiplicand:
  1887                           	opt stack 0
  1888  000082                     ___awmod@divisor:
  1889                           	opt stack 0
  1890  000082                     ___lwdiv@divisor:
  1891                           	opt stack 0
  1892  000082                     strcpy@from:
  1893                           	opt stack 0
  1894                           
  1895                           ; 2 bytes @ 0x2
  1896  000082                     	ds	1
  1897  000083                     ??_initLCD:
  1898  000083                     initTime@DD:
  1899                           	opt stack 0
  1900  000083                     getRTC@i:
  1901                           	opt stack 0
  1902                           
  1903                           ; 2 bytes @ 0x3
  1904  000083                     	ds	1
  1905  000084                     ??_updateServoPosition:
  1906  000084                     initTime@MM:
  1907                           	opt stack 0
  1908  000084                     ___awmod@counter:
  1909                           	opt stack 0
  1910  000084                     readIR@res:
  1911                           	opt stack 0
  1912  000084                     readMAG@res:
  1913                           	opt stack 0
  1914  000084                     ___wmul@product:
  1915                           	opt stack 0
  1916  000084                     ___lwdiv@quotient:
  1917                           	opt stack 0
  1918  000084                     strcpy@cp:
  1919                           	opt stack 0
  1920  000084                     ___lldiv@divisor:
  1921                           	opt stack 0
  1922                           
  1923                           ; 4 bytes @ 0x4
  1924  000084                     	ds	1
  1925  000085                     ??_initSortTimer:
  1926  000085                     initTime@YY:
  1927                           	opt stack 0
  1928  000085                     ___awmod@sign:
  1929                           	opt stack 0
  1930                           
  1931                           ; 1 bytes @ 0x5
  1932  000085                     	ds	1
  1933  000086                     ??_ID:
  1934  000086                     ??_getIR:
  1935  000086                     ?___awdiv:
  1936                           	opt stack 0
  1937  000086                     initTime@s:
  1938                           	opt stack 0
  1939  000086                     ___lwdiv@counter:
  1940                           	opt stack 0
  1941  000086                     updateServoPosition@my_time:
  1942                           	opt stack 0
  1943  000086                     ___awdiv@dividend:
  1944                           	opt stack 0
  1945                           
  1946                           ; 2 bytes @ 0x6
  1947  000086                     	ds	1
  1948  000087                     ?___lwmod:
  1949                           	opt stack 0
  1950  000087                     ___lwmod@dividend:
  1951                           	opt stack 0
  1952                           
  1953                           ; 2 bytes @ 0x7
  1954  000087                     	ds	1
  1955  000088                     ??_Distribution:
  1956  000088                     ??_initServos:
  1957  000088                     initSortTimer@i:
  1958                           	opt stack 0
  1959  000088                     ___awdiv@divisor:
  1960                           	opt stack 0
  1961  000088                     ___lldiv@quotient:
  1962                           	opt stack 0
  1963  000088                     ID@sensor_outputs:
  1964                           	opt stack 0
  1965                           
  1966                           ; 6 bytes @ 0x8
  1967  000088                     	ds	1
  1968  000089                     ___lwmod@divisor:
  1969                           	opt stack 0
  1970                           
  1971                           ; 2 bytes @ 0x9
  1972  000089                     	ds	1
  1973  00008A                     ___awdiv@counter:
  1974                           	opt stack 0
  1975                           
  1976                           ; 1 bytes @ 0xA
  1977  00008A                     	ds	1
  1978  00008B                     ___awdiv@sign:
  1979                           	opt stack 0
  1980  00008B                     ___lwmod@counter:
  1981                           	opt stack 0
  1982                           
  1983                           ; 1 bytes @ 0xB
  1984  00008B                     	ds	1
  1985  00008C                     ___lldiv@counter:
  1986                           	opt stack 0
  1987  00008C                     ___awdiv@quotient:
  1988                           	opt stack 0
  1989                           
  1990                           ; 2 bytes @ 0xC
  1991  00008C                     	ds	1
  1992  00008D                     I2C_Master_Init@c:
  1993                           	opt stack 0
  1994                           
  1995                           ; 4 bytes @ 0xD
  1996  00008D                     	ds	1
  1997  00008E                     ?_printf:
  1998                           	opt stack 0
  1999  00008E                     printf@f:
  2000                           	opt stack 0
  2001                           
  2002                           ; 2 bytes @ 0xE
  2003  00008E                     	ds	3
  2004  000091                     ??_I2C_Master_Init:
  2005                           
  2006                           ; 1 bytes @ 0x11
  2007  000091                     	ds	4
  2008  000095                     ??_loadRTC:
  2009                           
  2010                           ; 1 bytes @ 0x15
  2011  000095                     	ds	1
  2012  000096                     loadRTC@i:
  2013                           	opt stack 0
  2014                           
  2015                           ; 2 bytes @ 0x16
  2016  000096                     	ds	4
  2017  00009A                     ??_printf:
  2018                           
  2019                           ; 1 bytes @ 0x1A
  2020  00009A                     	ds	4
  2021  00009E                     printf@prec:
  2022                           	opt stack 0
  2023                           
  2024                           ; 1 bytes @ 0x1E
  2025  00009E                     	ds	1
  2026  00009F                     printf@cp:
  2027                           	opt stack 0
  2028                           
  2029                           ; 2 bytes @ 0x1F
  2030  00009F                     	ds	2
  2031  0000A1                     printf@ap:
  2032                           	opt stack 0
  2033                           
  2034                           ; 2 bytes @ 0x21
  2035  0000A1                     	ds	2
  2036  0000A3                     printf@len:
  2037                           	opt stack 0
  2038                           
  2039                           ; 2 bytes @ 0x23
  2040  0000A3                     	ds	2
  2041  0000A5                     printf@val:
  2042                           	opt stack 0
  2043                           
  2044                           ; 2 bytes @ 0x25
  2045  0000A5                     	ds	2
  2046  0000A7                     printf@flag:
  2047                           	opt stack 0
  2048                           
  2049                           ; 1 bytes @ 0x27
  2050  0000A7                     	ds	1
  2051  0000A8                     printf@c:
  2052                           	opt stack 0
  2053                           
  2054                           ; 1 bytes @ 0x28
  2055  0000A8                     	ds	1
  2056  0000A9                     printf@width:
  2057                           	opt stack 0
  2058                           
  2059                           ; 2 bytes @ 0x29
  2060  0000A9                     	ds	2
  2061  0000AB                     ??_printRTC:
  2062  0000AB                     ??_algorithmTest:
  2063  0000AB                     ??_sensorTest:
  2064  0000AB                     ??_actuatorTest:
  2065  0000AB                     ??_PortTestA5:
  2066  0000AB                     ??_ToggleTestA5:
  2067  0000AB                     ??_SolenoidTestA5:
  2068  0000AB                     ??_BothServos:
  2069  0000AB                     EEPROM_write@address:
  2070                           	opt stack 0
  2071                           
  2072                           ; 2 bytes @ 0x2B
  2073  0000AB                     	ds	1
  2074  0000AC                     ToggleTestA5@on:
  2075                           	opt stack 0
  2076                           
  2077                           ; 2 bytes @ 0x2C
  2078  0000AC                     	ds	1
  2079  0000AD                     EEPROM_write@data:
  2080                           	opt stack 0
  2081  0000AD                     actuatorTest@i_1579:
  2082                           	opt stack 0
  2083  0000AD                     sensorTest@on:
  2084                           	opt stack 0
  2085  0000AD                     SolenoidTestA5@i:
  2086                           	opt stack 0
  2087                           
  2088                           ; 2 bytes @ 0x2D
  2089  0000AD                     	ds	1
  2090  0000AE                     ??_EEPROM_write:
  2091  0000AE                     actuatorTest@i_1586:
  2092                           	opt stack 0
  2093  0000AE                     printRTC@INT_time:
  2094                           	opt stack 0
  2095                           
  2096                           ; 14 bytes @ 0x2E
  2097  0000AE                     	ds	1
  2098  0000AF                     EEPROM_write@i:
  2099                           	opt stack 0
  2100  0000AF                     actuatorTest@i_1587:
  2101                           	opt stack 0
  2102  0000AF                     SolenoidTestA5@i_1632:
  2103                           	opt stack 0
  2104                           
  2105                           ; 1 bytes @ 0x2F
  2106  0000AF                     	ds	1
  2107  0000B0                     EEPROM_write@i_1319:
  2108                           	opt stack 0
  2109  0000B0                     actuatorTest@i_1589:
  2110                           	opt stack 0
  2111  0000B0                     SolenoidTestA5@i_1634:
  2112                           	opt stack 0
  2113                           
  2114                           ; 1 bytes @ 0x30
  2115  0000B0                     	ds	1
  2116  0000B1                     ??_Loading:
  2117  0000B1                     logRun@num:
  2118                           	opt stack 0
  2119  0000B1                     actuatorTest@i_1590:
  2120                           	opt stack 0
  2121                           
  2122                           ; 1 bytes @ 0x31
  2123  0000B1                     	ds	1
  2124  0000B2                     logRun@byte1:
  2125                           	opt stack 0
  2126  0000B2                     actuatorTest@i_1592:
  2127                           	opt stack 0
  2128                           
  2129                           ; 1 bytes @ 0x32
  2130  0000B2                     	ds	1
  2131  0000B3                     logRun@byte2:
  2132                           	opt stack 0
  2133  0000B3                     actuatorTest@i_1593:
  2134                           	opt stack 0
  2135  0000B3                     Loading@addr:
  2136                           	opt stack 0
  2137                           
  2138                           ; 2 bytes @ 0x33
  2139  0000B3                     	ds	1
  2140  0000B4                     logRun@byte3:
  2141                           	opt stack 0
  2142  0000B4                     actuatorTest@i_1595:
  2143                           	opt stack 0
  2144                           
  2145                           ; 1 bytes @ 0x34
  2146  0000B4                     	ds	1
  2147  0000B5                     Loading@byte1:
  2148                           	opt stack 0
  2149  0000B5                     logRun@byte_i:
  2150                           	opt stack 0
  2151  0000B5                     actuatorTest@i_1596:
  2152                           	opt stack 0
  2153                           
  2154                           ; 1 bytes @ 0x35
  2155  0000B5                     	ds	1
  2156  0000B6                     logRun@byte11:
  2157                           	opt stack 0
  2158  0000B6                     actuatorTest@i_1598:
  2159                           	opt stack 0
  2160  0000B6                     Loading@i:
  2161                           	opt stack 0
  2162                           
  2163                           ; 2 bytes @ 0x36
  2164  0000B6                     	ds	1
  2165  0000B7                     actuatorTest@i_1599:
  2166                           	opt stack 0
  2167  0000B7                     logRun@i:
  2168                           	opt stack 0
  2169                           
  2170                           ; 2 bytes @ 0x37
  2171  0000B7                     	ds	1
  2172  0000B8                     actuatorTest@i_1601:
  2173                           	opt stack 0
  2174                           
  2175                           ; 1 bytes @ 0x38
  2176  0000B8                     	ds	1
  2177  0000B9                     actuatorTest@i_1602:
  2178                           	opt stack 0
  2179  0000B9                     logRun@addr:
  2180                           	opt stack 0
  2181                           
  2182                           ; 2 bytes @ 0x39
  2183  0000B9                     	ds	1
  2184  0000BA                     actuatorTest@i_1605:
  2185                           	opt stack 0
  2186                           
  2187                           ; 1 bytes @ 0x3A
  2188  0000BA                     	ds	1
  2189  0000BB                     actuatorTest@i_1606:
  2190                           	opt stack 0
  2191                           
  2192                           ; 1 bytes @ 0x3B
  2193  0000BB                     	ds	1
  2194  0000BC                     actuatorTest@i_1608:
  2195                           	opt stack 0
  2196  0000BC                     printRTC@RTC_month:
  2197                           	opt stack 0
  2198                           
  2199                           ; 2 bytes @ 0x3C
  2200  0000BC                     	ds	1
  2201  0000BD                     actuatorTest@i_1609:
  2202                           	opt stack 0
  2203                           
  2204                           ; 1 bytes @ 0x3D
  2205  0000BD                     	ds	1
  2206  0000BE                     actuatorTest@i_1611:
  2207                           	opt stack 0
  2208  0000BE                     printRTC@month:
  2209                           	opt stack 0
  2210                           
  2211                           ; 4 bytes @ 0x3E
  2212  0000BE                     	ds	1
  2213  0000BF                     actuatorTest@i_1612:
  2214                           	opt stack 0
  2215                           
  2216                           ; 1 bytes @ 0x3F
  2217  0000BF                     	ds	1
  2218  0000C0                     actuatorTest@i_1615:
  2219                           	opt stack 0
  2220                           
  2221                           ; 1 bytes @ 0x40
  2222  0000C0                     	ds	1
  2223  0000C1                     actuatorTest@i_1616:
  2224                           	opt stack 0
  2225                           
  2226                           ; 1 bytes @ 0x41
  2227  0000C1                     	ds	1
  2228  0000C2                     actuatorTest@i_1618:
  2229                           	opt stack 0
  2230  0000C2                     printRTC@i:
  2231                           	opt stack 0
  2232                           
  2233                           ; 2 bytes @ 0x42
  2234  0000C2                     	ds	1
  2235  0000C3                     actuatorTest@i_1619:
  2236                           	opt stack 0
  2237                           
  2238                           ; 1 bytes @ 0x43
  2239  0000C3                     	ds	1
  2240  0000C4                     ??_UI:
  2241  0000C4                     actuatorTest@i:
  2242                           	opt stack 0
  2243                           
  2244                           ; 2 bytes @ 0x44
  2245  0000C4                     	ds	2
  2246  0000C6                     ??_Test:
  2247  0000C6                     _UI$2241:
  2248                           	opt stack 0
  2249                           
  2250                           ; 2 bytes @ 0x46
  2251  0000C6                     	ds	2
  2252  0000C8                     UI@i:
  2253                           	opt stack 0
  2254                           
  2255                           ; 1 bytes @ 0x48
  2256  0000C8                     	ds	1
  2257  0000C9                     UI@i_408:
  2258                           	opt stack 0
  2259                           
  2260                           ; 1 bytes @ 0x49
  2261  0000C9                     	ds	1
  2262  0000CA                     UI@i_411:
  2263                           	opt stack 0
  2264                           
  2265                           ; 1 bytes @ 0x4A
  2266  0000CA                     	ds	1
  2267  0000CB                     UI@i_412:
  2268                           	opt stack 0
  2269                           
  2270                           ; 1 bytes @ 0x4B
  2271  0000CB                     	ds	1
  2272  0000CC                     UI@i_430:
  2273                           	opt stack 0
  2274                           
  2275                           ; 1 bytes @ 0x4C
  2276  0000CC                     	ds	1
  2277  0000CD                     UI@i_431:
  2278                           	opt stack 0
  2279                           
  2280                           ; 1 bytes @ 0x4D
  2281  0000CD                     	ds	1
  2282  0000CE                     UI@i_434:
  2283                           	opt stack 0
  2284                           
  2285                           ; 1 bytes @ 0x4E
  2286  0000CE                     	ds	1
  2287  0000CF                     UI@i_435:
  2288                           	opt stack 0
  2289                           
  2290                           ; 1 bytes @ 0x4F
  2291  0000CF                     	ds	1
  2292  0000D0                     UI@i_438:
  2293                           	opt stack 0
  2294                           
  2295                           ; 1 bytes @ 0x50
  2296  0000D0                     	ds	1
  2297  0000D1                     UI@i_439:
  2298                           	opt stack 0
  2299                           
  2300                           ; 1 bytes @ 0x51
  2301  0000D1                     	ds	1
  2302  0000D2                     UI@i_442:
  2303                           	opt stack 0
  2304                           
  2305                           ; 1 bytes @ 0x52
  2306  0000D2                     	ds	1
  2307  0000D3                     UI@i_443:
  2308                           	opt stack 0
  2309                           
  2310                           ; 1 bytes @ 0x53
  2311  0000D3                     	ds	1
  2312  0000D4                     UI@i_446:
  2313                           	opt stack 0
  2314                           
  2315                           ; 1 bytes @ 0x54
  2316  0000D4                     	ds	1
  2317  0000D5                     UI@i_447:
  2318                           	opt stack 0
  2319                           
  2320                           ; 1 bytes @ 0x55
  2321  0000D5                     	ds	1
  2322  0000D6                     UI@month:
  2323                           	opt stack 0
  2324                           
  2325                           ; 4 bytes @ 0x56
  2326  0000D6                     	ds	4
  2327  0000DA                     tblptru	equ	0xFF8
  2328                           tblptrh	equ	0xFF7
  2329                           tblptrl	equ	0xFF6
  2330                           tablat	equ	0xFF5
  2331                           postinc0	equ	0xFEE
  2332                           wreg	equ	0xFE8
  2333                           postdec1	equ	0xFE5
  2334                           fsr1l	equ	0xFE1
  2335                           
  2336                           ; 1 bytes @ 0x5A
  2337                           
  2338                           	psect	cstackCOMRAM
  2339  000001                     __pcstackCOMRAM:
  2340                           	opt stack 0
  2341  000001                     ??i2_I2C_Master_Wait:
  2342  000001                     ??i2_isdigit:
  2343  000001                     ?i2___wmul:
  2344                           	opt stack 0
  2345  000001                     ?i2___lwmod:
  2346                           	opt stack 0
  2347  000001                     i2lcdNibble@temp:
  2348                           	opt stack 0
  2349  000001                     i2EEPROM_read@address:
  2350                           	opt stack 0
  2351  000001                     i2___wmul@multiplier:
  2352                           	opt stack 0
  2353  000001                     i2___lwmod@dividend:
  2354                           	opt stack 0
  2355  000001                     i2strcpy@to:
  2356                           	opt stack 0
  2357                           
  2358                           ; 2 bytes @ 0x0
  2359  000001                     	ds	1
  2360  000002                     i2I2C_Master_Read@a:
  2361                           	opt stack 0
  2362  000002                     i2lcdNibble@data:
  2363                           	opt stack 0
  2364  000002                     i2_isdigit$1888:
  2365                           	opt stack 0
  2366  000002                     i2I2C_Master_Write@d:
  2367                           	opt stack 0
  2368                           
  2369                           ; 2 bytes @ 0x1
  2370  000002                     	ds	1
  2371  000003                     i2I2C_Master_Read@temp:
  2372                           	opt stack 0
  2373  000003                     i2lcdInst@data:
  2374                           	opt stack 0
  2375  000003                     i2putch@data:
  2376                           	opt stack 0
  2377  000003                     i2isdigit@c:
  2378                           	opt stack 0
  2379  000003                     i2___wmul@multiplicand:
  2380                           	opt stack 0
  2381  000003                     i2___lwmod@divisor:
  2382                           	opt stack 0
  2383  000003                     i2strcpy@from:
  2384                           	opt stack 0
  2385                           
  2386                           ; 2 bytes @ 0x2
  2387  000003                     	ds	1
  2388  000004                     i2getRTC@i:
  2389                           	opt stack 0
  2390                           
  2391                           ; 2 bytes @ 0x3
  2392  000004                     	ds	1
  2393  000005                     i2___lwmod@counter:
  2394                           	opt stack 0
  2395  000005                     i2___wmul@product:
  2396                           	opt stack 0
  2397  000005                     i2strcpy@cp:
  2398                           	opt stack 0
  2399                           
  2400                           ; 2 bytes @ 0x4
  2401  000005                     	ds	1
  2402  000006                     ?i2___lwdiv:
  2403                           	opt stack 0
  2404  000006                     i2___lwdiv@dividend:
  2405                           	opt stack 0
  2406                           
  2407                           ; 2 bytes @ 0x5
  2408  000006                     	ds	1
  2409  000007                     retrieveLog@logNum:
  2410                           	opt stack 0
  2411                           
  2412                           ; 2 bytes @ 0x6
  2413  000007                     	ds	1
  2414  000008                     i2___lwdiv@divisor:
  2415                           	opt stack 0
  2416                           
  2417                           ; 2 bytes @ 0x7
  2418  000008                     	ds	1
  2419  000009                     ??_retrieveLog:
  2420                           
  2421                           ; 1 bytes @ 0x8
  2422  000009                     	ds	1
  2423  00000A                     i2___lwdiv@quotient:
  2424                           	opt stack 0
  2425                           
  2426                           ; 2 bytes @ 0x9
  2427  00000A                     	ds	1
  2428  00000B                     retrieveLog@byte1:
  2429                           	opt stack 0
  2430                           
  2431                           ; 1 bytes @ 0xA
  2432  00000B                     	ds	1
  2433  00000C                     retrieveLog@byte2:
  2434                           	opt stack 0
  2435  00000C                     i2___lwdiv@counter:
  2436                           	opt stack 0
  2437                           
  2438                           ; 1 bytes @ 0xB
  2439  00000C                     	ds	1
  2440  00000D                     ?i2_printf:
  2441                           	opt stack 0
  2442  00000D                     retrieveLog@byte3:
  2443                           	opt stack 0
  2444  00000D                     i2printf@f:
  2445                           	opt stack 0
  2446                           
  2447                           ; 2 bytes @ 0xC
  2448  00000D                     	ds	1
  2449  00000E                     retrieveLog@i:
  2450                           	opt stack 0
  2451                           
  2452                           ; 2 bytes @ 0xD
  2453  00000E                     	ds	2
  2454  000010                     retrieveLog@addr:
  2455                           	opt stack 0
  2456                           
  2457                           ; 2 bytes @ 0xF
  2458  000010                     	ds	2
  2459  000012                     dispLogs@myLog:
  2460                           	opt stack 0
  2461                           
  2462                           ; 2 bytes @ 0x11
  2463  000012                     	ds	2
  2464  000014                     
  2465                           ; 1 bytes @ 0x13
  2466  000014                     	ds	5
  2467  000019                     ??i2_printf:
  2468                           
  2469                           ; 1 bytes @ 0x18
  2470  000019                     	ds	4
  2471  00001D                     i2printf@prec:
  2472                           	opt stack 0
  2473                           
  2474                           ; 1 bytes @ 0x1C
  2475  00001D                     	ds	1
  2476  00001E                     i2printf@cp:
  2477                           	opt stack 0
  2478                           
  2479                           ; 2 bytes @ 0x1D
  2480  00001E                     	ds	2
  2481  000020                     i2printf@ap:
  2482                           	opt stack 0
  2483                           
  2484                           ; 2 bytes @ 0x1F
  2485  000020                     	ds	2
  2486  000022                     i2printf@len:
  2487                           	opt stack 0
  2488                           
  2489                           ; 2 bytes @ 0x21
  2490  000022                     	ds	2
  2491  000024                     i2printf@val:
  2492                           	opt stack 0
  2493                           
  2494                           ; 2 bytes @ 0x23
  2495  000024                     	ds	2
  2496  000026                     i2printf@flag:
  2497                           	opt stack 0
  2498                           
  2499                           ; 1 bytes @ 0x25
  2500  000026                     	ds	1
  2501  000027                     i2printf@c:
  2502                           	opt stack 0
  2503                           
  2504                           ; 1 bytes @ 0x26
  2505  000027                     	ds	1
  2506  000028                     i2printf@width:
  2507                           	opt stack 0
  2508                           
  2509                           ; 2 bytes @ 0x27
  2510  000028                     	ds	2
  2511  00002A                     ??_printSortTimer:
  2512  00002A                     ??i2_printRTC:
  2513  00002A                     ?_inputHandler:
  2514                           	opt stack 0
  2515                           
  2516                           ; 2 bytes @ 0x29
  2517  00002A                     	ds	2
  2518  00002C                     ??_inputHandler:
  2519                           
  2520                           ; 1 bytes @ 0x2B
  2521  00002C                     	ds	1
  2522  00002D                     printSortTimer@hour:
  2523                           	opt stack 0
  2524  00002D                     i2printRTC@INT_time:
  2525                           	opt stack 0
  2526                           
  2527                           ; 14 bytes @ 0x2C
  2528  00002D                     	ds	2
  2529  00002F                     printSortTimer@curTime:
  2530                           	opt stack 0
  2531                           
  2532                           ; 14 bytes @ 0x2E
  2533  00002F                     	ds	12
  2534  00003B                     i2printRTC@RTC_month:
  2535                           	opt stack 0
  2536                           
  2537                           ; 2 bytes @ 0x3A
  2538  00003B                     	ds	2
  2539  00003D                     printSortTimer@start_sec:
  2540                           	opt stack 0
  2541  00003D                     i2printRTC@month:
  2542                           	opt stack 0
  2543                           
  2544                           ; 4 bytes @ 0x3C
  2545  00003D                     	ds	2
  2546  00003F                     printSortTimer@cur_sec:
  2547                           	opt stack 0
  2548                           
  2549                           ; 2 bytes @ 0x3E
  2550  00003F                     	ds	2
  2551  000041                     printSortTimer@min:
  2552                           	opt stack 0
  2553  000041                     i2printRTC@i:
  2554                           	opt stack 0
  2555                           
  2556                           ; 2 bytes @ 0x40
  2557  000041                     	ds	2
  2558  000043                     ??_updateMenu:
  2559  000043                     printSortTimer@sec:
  2560                           	opt stack 0
  2561                           
  2562                           ; 2 bytes @ 0x42
  2563  000043                     	ds	2
  2564  000045                     _printSortTimer$2361:
  2565                           	opt stack 0
  2566                           
  2567                           ; 2 bytes @ 0x44
  2568  000045                     	ds	2
  2569  000047                     printSortTimer@timeDiff:
  2570                           	opt stack 0
  2571                           
  2572                           ; 2 bytes @ 0x46
  2573  000047                     	ds	2
  2574  000049                     printSortTimer@i:
  2575                           	opt stack 0
  2576                           
  2577                           ; 2 bytes @ 0x48
  2578  000049                     	ds	2
  2579  00004B                     ??_handler:
  2580                           
  2581                           ; 1 bytes @ 0x4A
  2582  00004B                     	ds	16
  2583                           tblptru	equ	0xFF8
  2584                           tblptrh	equ	0xFF7
  2585                           tblptrl	equ	0xFF6
  2586                           tablat	equ	0xFF5
  2587                           postinc0	equ	0xFEE
  2588                           wreg	equ	0xFE8
  2589                           postdec1	equ	0xFE5
  2590                           fsr1l	equ	0xFE1
  2591                           
  2592 ;;
  2593 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2594 ;;
  2595 ;; *************** function _main *****************
  2596 ;; Defined at:
  2597 ;;		line 18 in file "main.c"
  2598 ;; Parameters:    Size  Location     Type
  2599 ;;		None
  2600 ;; Auto vars:     Size  Location     Type
  2601 ;;		None
  2602 ;; Return value:  Size  Location     Type
  2603 ;;                  1    wreg      void 
  2604 ;; Registers used:
  2605 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2606 ;; Tracked objects:
  2607 ;;		On entry : 0/0
  2608 ;;		On exit  : 0/0
  2609 ;;		Unchanged: 0/0
  2610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2612 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2614 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2615 ;;Total ram usage:        0 bytes
  2616 ;; Hardware stack levels required when called:   13
  2617 ;; This function calls:
  2618 ;;		_Test
  2619 ;;		_UI
  2620 ;;		_initLCD
  2621 ;;		_initTime
  2622 ;;		_initUI
  2623 ;;		_logRun
  2624 ;;		_machineConfig
  2625 ;;		_sort
  2626 ;;		_stopSignals
  2627 ;; This function is called by:
  2628 ;;		Startup code after reset
  2629 ;; This function uses a non-reentrant model
  2630 ;;
  2631                           
  2632                           	psect	text0
  2633  0036F2                     __ptext0:
  2634                           	opt stack 0
  2635  0036F2                     _main:
  2636                           	opt stack 18
  2637                           
  2638                           ;main.c: 19: machineConfig();
  2639                           
  2640                           ;incstack = 0
  2641  0036F2  EC4C  F01E         	call	_machineConfig	;wreg free
  2642                           
  2643                           ;main.c: 20: initLCD();
  2644  0036F6  ECC3  F01F         	call	_initLCD	;wreg free
  2645                           
  2646                           ;main.c: 21: initTime(0x42, 0x20, 0x13, 0x04, 0x01, 0x03, 0x17);
  2647  0036FA  0E20               	movlw	32
  2648  0036FC  0100               	movlb	0	; () banked
  2649  0036FE  6F80               	movwf	initTime@m& (0+255),b
  2650  003700  0E13               	movlw	19
  2651  003702  0100               	movlb	0	; () banked
  2652  003704  6F81               	movwf	initTime@h& (0+255),b
  2653  003706  0E04               	movlw	4
  2654  003708  0100               	movlb	0	; () banked
  2655  00370A  6F82               	movwf	initTime@w& (0+255),b
  2656  00370C  0E01               	movlw	1
  2657  00370E  0100               	movlb	0	; () banked
  2658  003710  6F83               	movwf	initTime@DD& (0+255),b
  2659  003712  0E03               	movlw	3
  2660  003714  0100               	movlb	0	; () banked
  2661  003716  6F84               	movwf	initTime@MM& (0+255),b
  2662  003718  0E17               	movlw	23
  2663  00371A  0100               	movlb	0	; () banked
  2664  00371C  6F85               	movwf	initTime@YY& (0+255),b
  2665  00371E  0E42               	movlw	66
  2666  003720  EC58  F022         	call	_initTime
  2667                           
  2668                           ;main.c: 22: initUI();
  2669  003724  EC23  F022         	call	_initUI	;wreg free
  2670                           
  2671                           ;main.c: 23: first = 1;
  2672  003728  0E00               	movlw	0
  2673  00372A  0100               	movlb	0	; () banked
  2674  00372C  6FE5               	movwf	(_first+1)& (0+255),b
  2675  00372E  0E01               	movlw	1
  2676  003730  6FE4               	movwf	_first& (0+255),b
  2677                           
  2678                           ; BSR set to: 0
  2679                           ;main.c: 34: switch(machine_state){
  2680                           
  2681                           ;main.c: 33: while(1){
  2682  003732  D018               	goto	l7948
  2683  003734                     l7930:
  2684                           
  2685                           ; BSR set to: 0
  2686                           ;main.c: 36: UI();
  2687  003734  EC09  F000         	call	_UI	;wreg free
  2688                           
  2689                           ;main.c: 37: break;
  2690  003738  D015               	goto	l7948
  2691  00373A                     l7932:
  2692                           
  2693                           ;main.c: 39: sort();
  2694  00373A  EC47  F022         	call	_sort	;wreg free
  2695                           
  2696                           ;main.c: 40: break;
  2697  00373E  D012               	goto	l7948
  2698  003740                     l7934:
  2699                           
  2700                           ;main.c: 42: stopSignals();
  2701  003740  EC84  F022         	call	_stopSignals	;wreg free
  2702                           
  2703                           ;main.c: 43: logRun();
  2704  003744  EC78  F016         	call	_logRun	;wreg free
  2705                           
  2706                           ;main.c: 44: first = 1;
  2707  003748  0E00               	movlw	0
  2708  00374A  0100               	movlb	0	; () banked
  2709  00374C  6FE5               	movwf	(_first+1)& (0+255),b
  2710  00374E  0E01               	movlw	1
  2711  003750  6FE4               	movwf	_first& (0+255),b
  2712                           
  2713                           ; BSR set to: 0
  2714                           ;main.c: 45: UI();
  2715  003752  EC09  F000         	call	_UI	;wreg free
  2716                           
  2717                           ;main.c: 46: break;
  2718  003756  D006               	goto	l7948
  2719  003758                     l7942:
  2720                           
  2721                           ;main.c: 48: Test();
  2722  003758  EC34  F018         	call	_Test	;wreg free
  2723                           
  2724                           ;main.c: 49: break;
  2725  00375C  D003               	goto	l7948
  2726  00375E                     l7944:
  2727                           
  2728                           ;main.c: 51: stopSignals();
  2729  00375E  EC84  F022         	call	_stopSignals	;wreg free
  2730  003762                     l478:
  2731  003762  D7FF               	goto	l478
  2732  003764                     l7948:
  2733  003764  0100               	movlb	0	; () banked
  2734  003766  51FC               	movf	_machine_state& (0+255),w,b
  2735                           
  2736                           ; Switch size 1, requested type "space"
  2737                           ; Number of cases is 5, Range of values is 0 to 4
  2738                           ; switch strategies available:
  2739                           ; Name         Instructions Cycles
  2740                           ; simple_byte           16     9 (average)
  2741                           ;	Chosen strategy is simple_byte
  2742  003768  0A00               	xorlw	0	; case 0
  2743  00376A  B4D8               	btfsc	status,2,c
  2744  00376C  D7E3               	goto	l7930
  2745  00376E  0A01               	xorlw	1	; case 1
  2746  003770  B4D8               	btfsc	status,2,c
  2747  003772  D7E3               	goto	l7932
  2748  003774  0A03               	xorlw	3	; case 2
  2749  003776  B4D8               	btfsc	status,2,c
  2750  003778  D7E3               	goto	l7934
  2751  00377A  0A01               	xorlw	1	; case 3
  2752  00377C  B4D8               	btfsc	status,2,c
  2753  00377E  D7EC               	goto	l7942
  2754  003780  0A07               	xorlw	7	; case 4
  2755  003782  B4D8               	btfsc	status,2,c
  2756  003784  D7EC               	goto	l7944
  2757                           
  2758                           ; BSR set to: 0
  2759                           
  2760                           ; BSR set to: 0
  2761  003786  D7EE               	goto	l7948
  2762  003788                     __end_of_main:
  2763                           	opt stack 0
  2764                           tblptru	equ	0xFF8
  2765                           tblptrh	equ	0xFF7
  2766                           tblptrl	equ	0xFF6
  2767                           tablat	equ	0xFF5
  2768                           postinc0	equ	0xFEE
  2769                           wreg	equ	0xFE8
  2770                           postdec1	equ	0xFE5
  2771                           fsr1l	equ	0xFE1
  2772                           status	equ	0xFD8
  2773                           
  2774 ;; *************** function _stopSignals *****************
  2775 ;; Defined at:
  2776 ;;		line 60 in file "main.c"
  2777 ;; Parameters:    Size  Location     Type
  2778 ;;		None
  2779 ;; Auto vars:     Size  Location     Type
  2780 ;;		None
  2781 ;; Return value:  Size  Location     Type
  2782 ;;                  1    wreg      void 
  2783 ;; Registers used:
  2784 ;;		wreg, status,2
  2785 ;; Tracked objects:
  2786 ;;		On entry : 0/0
  2787 ;;		On exit  : 0/0
  2788 ;;		Unchanged: 0/0
  2789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2793 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2794 ;;Total ram usage:        0 bytes
  2795 ;; Hardware stack levels used:    1
  2796 ;; Hardware stack levels required when called:    7
  2797 ;; This function calls:
  2798 ;;		Nothing
  2799 ;; This function is called by:
  2800 ;;		_main
  2801 ;; This function uses a non-reentrant model
  2802 ;;
  2803                           
  2804                           	psect	text1
  2805  004508                     __ptext1:
  2806                           	opt stack 0
  2807  004508                     _stopSignals:
  2808                           	opt stack 23
  2809                           
  2810                           ;main.c: 61: LATA = 0x00;
  2811                           
  2812                           ; BSR set to: 0
  2813                           ;incstack = 0
  2814  004508  0E00               	movlw	0
  2815  00450A  6E89               	movwf	3977,c	;volatile
  2816                           
  2817                           ;main.c: 62: LATB = 0x00;
  2818  00450C  0E00               	movlw	0
  2819  00450E  6E8A               	movwf	3978,c	;volatile
  2820                           
  2821                           ;main.c: 63: LATC = 0x00;
  2822  004510  0E00               	movlw	0
  2823  004512  6E8B               	movwf	3979,c	;volatile
  2824                           
  2825                           ;main.c: 64: LATD = 0x00;
  2826  004514  0E00               	movlw	0
  2827  004516  6E8C               	movwf	3980,c	;volatile
  2828                           
  2829                           ;main.c: 65: LATE = 0x00;
  2830  004518  0E00               	movlw	0
  2831  00451A  6E8D               	movwf	3981,c	;volatile
  2832  00451C  0012               	return		;funcret
  2833  00451E                     __end_of_stopSignals:
  2834                           	opt stack 0
  2835                           tblptru	equ	0xFF8
  2836                           tblptrh	equ	0xFF7
  2837                           tblptrl	equ	0xFF6
  2838                           tablat	equ	0xFF5
  2839                           postinc0	equ	0xFEE
  2840                           wreg	equ	0xFE8
  2841                           postdec1	equ	0xFE5
  2842                           fsr1l	equ	0xFE1
  2843                           status	equ	0xFD8
  2844                           
  2845 ;; *************** function _sort *****************
  2846 ;; Defined at:
  2847 ;;		line 55 in file "sort.c"
  2848 ;; Parameters:    Size  Location     Type
  2849 ;;		None
  2850 ;; Auto vars:     Size  Location     Type
  2851 ;;		None
  2852 ;; Return value:  Size  Location     Type
  2853 ;;                  1    wreg      void 
  2854 ;; Registers used:
  2855 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2856 ;; Tracked objects:
  2857 ;;		On entry : 0/0
  2858 ;;		On exit  : 0/0
  2859 ;;		Unchanged: 0/0
  2860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2864 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2865 ;;Total ram usage:        0 bytes
  2866 ;; Hardware stack levels used:    1
  2867 ;; Hardware stack levels required when called:   12
  2868 ;; This function calls:
  2869 ;;		_Distribution
  2870 ;;		_ID
  2871 ;;		_Loading
  2872 ;; This function is called by:
  2873 ;;		_main
  2874 ;; This function uses a non-reentrant model
  2875 ;;
  2876                           
  2877                           	psect	text2
  2878  00448E                     __ptext2:
  2879                           	opt stack 0
  2880  00448E                     _sort:
  2881                           	opt stack 18
  2882                           
  2883                           ;sort.c: 56: if(machine_state == Sorting_state){
  2884                           
  2885                           ;incstack = 0
  2886  00448E  0100               	movlb	0	; () banked
  2887  004490  05FC               	decf	_machine_state& (0+255),w,b
  2888  004492  B4D8               	btfsc	status,2,c
  2889                           
  2890                           ; BSR set to: 0
  2891                           ;sort.c: 57: Loading();
  2892  004494  EC32  F015         	call	_Loading	;wreg free
  2893                           
  2894                           ;sort.c: 58: }
  2895                           ;sort.c: 59: if(machine_state == Sorting_state){
  2896  004498  0100               	movlb	0	; () banked
  2897  00449A  05FC               	decf	_machine_state& (0+255),w,b
  2898  00449C  B4D8               	btfsc	status,2,c
  2899                           
  2900                           ; BSR set to: 0
  2901                           ;sort.c: 60: ID();
  2902  00449E  EC16  F017         	call	_ID	;wreg free
  2903                           
  2904                           ;sort.c: 61: }
  2905                           ;sort.c: 62: if(machine_state == Sorting_state){
  2906  0044A2  0100               	movlb	0	; () banked
  2907  0044A4  05FC               	decf	_machine_state& (0+255),w,b
  2908  0044A6  A4D8               	btfss	status,2,c
  2909  0044A8  0012               	return	
  2910                           
  2911                           ; BSR set to: 0
  2912                           ;sort.c: 63: Distribution();
  2913  0044AA  ECD8  F015         	call	_Distribution	;wreg free
  2914  0044AE  0012               	return	
  2915  0044B0                     __end_of_sort:
  2916                           	opt stack 0
  2917                           tblptru	equ	0xFF8
  2918                           tblptrh	equ	0xFF7
  2919                           tblptrl	equ	0xFF6
  2920                           tablat	equ	0xFF5
  2921                           postinc0	equ	0xFEE
  2922                           wreg	equ	0xFE8
  2923                           postdec1	equ	0xFE5
  2924                           fsr1l	equ	0xFE1
  2925                           status	equ	0xFD8
  2926                           
  2927 ;; *************** function _Loading *****************
  2928 ;; Defined at:
  2929 ;;		line 67 in file "sort.c"
  2930 ;; Parameters:    Size  Location     Type
  2931 ;;		None
  2932 ;; Auto vars:     Size  Location     Type
  2933 ;;  i               2   54[BANK0 ] int 
  2934 ;;  addr            2   51[BANK0 ] unsigned short 
  2935 ;;  byte1           1   53[BANK0 ] unsigned char 
  2936 ;; Return value:  Size  Location     Type
  2937 ;;                  1    wreg      void 
  2938 ;; Registers used:
  2939 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2940 ;; Tracked objects:
  2941 ;;		On entry : 0/0
  2942 ;;		On exit  : 0/0
  2943 ;;		Unchanged: 0/0
  2944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2946 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2947 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2948 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2949 ;;Total ram usage:        7 bytes
  2950 ;; Hardware stack levels used:    1
  2951 ;; Hardware stack levels required when called:   11
  2952 ;; This function calls:
  2953 ;;		_EEPROM_read
  2954 ;;		_EEPROM_write
  2955 ;;		_delay_ms
  2956 ;;		_getIR
  2957 ;;		_initGlobalVars
  2958 ;;		_initServos
  2959 ;;		_initSortTimer
  2960 ;;		_lcdInst
  2961 ;; This function is called by:
  2962 ;;		_sort
  2963 ;; This function uses a non-reentrant model
  2964 ;;
  2965                           
  2966                           	psect	text3
  2967  002A64                     __ptext3:
  2968                           	opt stack 0
  2969  002A64                     _Loading:
  2970                           	opt stack 18
  2971                           
  2972                           ;sort.c: 68: if(first){
  2973                           
  2974                           ;incstack = 0
  2975  002A64  0100               	movlb	0	; () banked
  2976  002A66  51E4               	movf	_first& (0+255),w,b
  2977  002A68  0100               	movlb	0	; () banked
  2978  002A6A  11E5               	iorwf	(_first+1)& (0+255),w,b
  2979  002A6C  B4D8               	btfsc	status,2,c
  2980  002A6E  D065               	goto	l6294
  2981                           
  2982                           ; BSR set to: 0
  2983                           ;sort.c: 69: initGlobalVars();
  2984  002A70  EC83  F01D         	call	_initGlobalVars	;wreg free
  2985                           
  2986                           ;sort.c: 70: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  2987  002A74  0E01               	movlw	1
  2988  002A76  ECB5  F022         	call	_lcdInst
  2989  002A7A  0E68               	movlw	104
  2990  002A7C  0100               	movlb	0	; () banked
  2991  002A7E  6FB1               	movwf	??_Loading& (0+255),b
  2992  002A80  0EE4               	movlw	228
  2993  002A82                     u6857:
  2994  002A82  2EE8               	decfsz	wreg,f,c
  2995  002A84  D7FE               	bra	u6857
  2996  002A86  2FB1               	decfsz	??_Loading& (0+255),f,b
  2997  002A88  D7FC               	bra	u6857
  2998  002A8A  F000               	nop	
  2999                           
  3000                           ;sort.c: 71: initSortTimer();
  3001  002A8C  ECD3  F01A         	call	_initSortTimer	;wreg free
  3002                           
  3003                           ;sort.c: 76: sel = EEPROM_read(0);
  3004  002A90  0E00               	movlw	0
  3005  002A92  0100               	movlb	0	; () banked
  3006  002A94  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3007  002A96  0E00               	movlw	0
  3008  002A98  6F80               	movwf	EEPROM_read@address& (0+255),b
  3009  002A9A  EC78  F022         	call	_EEPROM_read	;wreg free
  3010  002A9E  0100               	movlb	0	; () banked
  3011  002AA0  6FFD               	movwf	_sel& (0+255),b
  3012                           
  3013                           ; BSR set to: 0
  3014                           ;sort.c: 77: unsigned short addr = 1 + 11 * sel;
  3015  002AA2  0100               	movlb	0	; () banked
  3016  002AA4  51FD               	movf	_sel& (0+255),w,b
  3017  002AA6  0D0B               	mullw	11
  3018  002AA8  0E01               	movlw	1
  3019  002AAA  24F3               	addwf	prodl,w,c
  3020  002AAC  0100               	movlb	0	; () banked
  3021  002AAE  6FB3               	movwf	Loading@addr& (0+255),b
  3022  002AB0  0E00               	movlw	0
  3023  002AB2  20F4               	addwfc	prodh,w,c
  3024  002AB4  0100               	movlb	0	; () banked
  3025  002AB6  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3026                           
  3027                           ; BSR set to: 0
  3028                           ;sort.c: 78: unsigned char byte1 = 0b01111111;
  3029  002AB8  0E7F               	movlw	127
  3030  002ABA  0100               	movlb	0	; () banked
  3031  002ABC  6FB5               	movwf	Loading@byte1& (0+255),b
  3032                           
  3033                           ; BSR set to: 0
  3034                           ;sort.c: 79: EEPROM_write(addr, byte1);
  3035  002ABE  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3036  002AC2  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3037  002AC6  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3038  002ACA  EC37  F019         	call	_EEPROM_write	;wreg free
  3039                           
  3040                           ;sort.c: 82: LATAbits.LATA5 = 0;
  3041  002ACE  9A89               	bcf	3977,5,c	;volatile
  3042                           
  3043                           ;sort.c: 83: for(int i=0; i<46; i++){
  3044  002AD0  0E00               	movlw	0
  3045  002AD2  0100               	movlb	0	; () banked
  3046  002AD4  6FB7               	movwf	(Loading@i+1)& (0+255),b
  3047  002AD6  0E00               	movlw	0
  3048  002AD8  6FB6               	movwf	Loading@i& (0+255),b
  3049                           
  3050                           ; BSR set to: 0
  3051  002ADA  0100               	movlb	0	; () banked
  3052  002ADC  BFB7               	btfsc	(Loading@i+1)& (0+255),7,b
  3053  002ADE  D008               	goto	l6284
  3054  002AE0  0100               	movlb	0	; () banked
  3055  002AE2  51B7               	movf	(Loading@i+1)& (0+255),w,b
  3056  002AE4  E126               	bnz	l719
  3057  002AE6  0E2E               	movlw	46
  3058  002AE8  0100               	movlb	0	; () banked
  3059  002AEA  5DB6               	subwf	Loading@i& (0+255),w,b
  3060  002AEC  B0D8               	btfsc	status,0,c
  3061  002AEE  D021               	goto	l719
  3062  002AF0                     l6284:
  3063                           
  3064                           ; BSR set to: 0
  3065                           ;sort.c: 84: LATAbits.LATA5 = !LATAbits.LATA5;
  3066  002AF0  BA89               	btfsc	3977,5,c	;volatile
  3067  002AF2  D004               	goto	u4710
  3068  002AF4  0100               	movlb	0	; () banked
  3069  002AF6  6BB1               	clrf	??_Loading& (0+255),b
  3070  002AF8  2BB1               	incf	??_Loading& (0+255),f,b
  3071  002AFA  D002               	goto	u4728
  3072  002AFC                     u4710:
  3073  002AFC  0100               	movlb	0	; () banked
  3074  002AFE  6BB1               	clrf	??_Loading& (0+255),b
  3075  002B00                     u4728:
  3076  002B00  0100               	movlb	0	; () banked
  3077  002B02  3BB1               	swapf	??_Loading& (0+255),f,b
  3078  002B04  47B1               	rlncf	??_Loading& (0+255),f,b
  3079  002B06  5089               	movf	3977,w,c	;volatile
  3080  002B08  0100               	movlb	0	; () banked
  3081  002B0A  19B1               	xorwf	??_Loading& (0+255),w,b
  3082  002B0C  0BDF               	andlw	-33
  3083  002B0E  19B1               	xorwf	??_Loading& (0+255),w,b
  3084  002B10  6E89               	movwf	3977,c	;volatile
  3085                           
  3086                           ; BSR set to: 0
  3087                           ;sort.c: 85: delay_ms(45-i);
  3088  002B12  0100               	movlb	0	; () banked
  3089  002B14  51B6               	movf	Loading@i& (0+255),w,b
  3090  002B16  0800               	sublw	0
  3091  002B18  0F2D               	addlw	45
  3092  002B1A  ECD5  F021         	call	_delay_ms
  3093  002B1E  0100               	movlb	0	; () banked
  3094  002B20  4BB6               	infsnz	Loading@i& (0+255),f,b
  3095  002B22  2BB7               	incf	(Loading@i+1)& (0+255),f,b
  3096                           
  3097                           ; BSR set to: 0
  3098  002B24  0100               	movlb	0	; () banked
  3099  002B26  BFB7               	btfsc	(Loading@i+1)& (0+255),7,b
  3100  002B28  D7E3               	goto	l6284
  3101  002B2A  0100               	movlb	0	; () banked
  3102  002B2C  51B7               	movf	(Loading@i+1)& (0+255),w,b
  3103  002B2E  E101               	bnz	u4730
  3104  002B30  D7DA               	goto	L1
  3105  002B32                     u4730:
  3106  002B32                     l719:
  3107                           
  3108                           ; BSR set to: 0
  3109                           ;sort.c: 86: }
  3110                           ;sort.c: 87: LATAbits.LATA5 = 1;
  3111  002B32  8A89               	bsf	3977,5,c	;volatile
  3112                           
  3113                           ; BSR set to: 0
  3114                           ;sort.c: 90: initServos();
  3115  002B34  ECA8  F01E         	call	_initServos	;wreg free
  3116                           
  3117                           ;sort.c: 91: }
  3118  002B38  0012               	return	
  3119  002B3A                     l6294:
  3120                           
  3121                           ;sort.c: 92: else{
  3122                           ;sort.c: 95: if(!f_loadingNewCan){
  3123  002B3A  0100               	movlb	0	; () banked
  3124  002B3C  51E2               	movf	_f_loadingNewCan& (0+255),w,b
  3125  002B3E  0100               	movlb	0	; () banked
  3126  002B40  11E3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3127  002B42  A4D8               	btfss	status,2,c
  3128  002B44  D017               	goto	l6310
  3129                           
  3130                           ; BSR set to: 0
  3131                           ;sort.c: 97: getIR();
  3132  002B46  EC50  F01F         	call	_getIR	;wreg free
  3133                           
  3134                           ;sort.c: 99: if(!f_loadingNewCan){
  3135  002B4A  0100               	movlb	0	; () banked
  3136  002B4C  51E2               	movf	_f_loadingNewCan& (0+255),w,b
  3137  002B4E  0100               	movlb	0	; () banked
  3138  002B50  11E3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3139  002B52  B4D8               	btfsc	status,2,c
  3140  002B54  0012               	return	
  3141                           
  3142                           ; BSR set to: 0
  3143                           ;sort.c: 103: else{
  3144                           ;sort.c: 104: count_total++;
  3145                           
  3146                           ; BSR set to: 0
  3147                           
  3148                           ; BSR set to: 0
  3149                           ;sort.c: 101: }
  3150                           
  3151                           ; BSR set to: 0
  3152                           ;sort.c: 100: return;
  3153  002B56  0100               	movlb	0	; () banked
  3154  002B58  4BFE               	infsnz	_count_total& (0+255),f,b
  3155  002B5A  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3156                           
  3157                           ; BSR set to: 0
  3158                           ;sort.c: 105: if(count_total == 12){
  3159  002B5C  0E0C               	movlw	12
  3160  002B5E  0100               	movlb	0	; () banked
  3161  002B60  19FE               	xorwf	_count_total& (0+255),w,b
  3162  002B62  0100               	movlb	0	; () banked
  3163  002B64  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3164  002B66  A4D8               	btfss	status,2,c
  3165  002B68  0012               	return	
  3166                           
  3167                           ; BSR set to: 0
  3168                           ;sort.c: 106: f_lastCan = 1;
  3169  002B6A  0E00               	movlw	0
  3170  002B6C  6E74               	movwf	_f_lastCan+1,c
  3171  002B6E  0E01               	movlw	1
  3172  002B70  6E73               	movwf	_f_lastCan,c
  3173                           
  3174                           ; BSR set to: 0
  3175                           ;sort.c: 107: }
  3176                           ;sort.c: 108: }
  3177                           ;sort.c: 109: }
  3178                           
  3179                           ; BSR set to: 0
  3180  002B72  0012               	return	
  3181  002B74                     l6310:
  3182                           
  3183                           ; BSR set to: 0
  3184                           ;sort.c: 112: else if(f_ID_receive){
  3185  002B74  506B               	movf	_f_ID_receive,w,c
  3186  002B76  106C               	iorwf	_f_ID_receive+1,w,c
  3187  002B78  B4D8               	btfsc	status,2,c
  3188  002B7A  0012               	return	
  3189                           
  3190                           ; BSR set to: 0
  3191                           ;sort.c: 113: f_loadingNewCan = 0;
  3192  002B7C  0E00               	movlw	0
  3193  002B7E  0100               	movlb	0	; () banked
  3194  002B80  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3195  002B82  0E00               	movlw	0
  3196  002B84  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3197                           
  3198                           ; BSR set to: 0
  3199                           ;sort.c: 114: LATAbits.LATA4 = 1;
  3200  002B86  8889               	bsf	3977,4,c	;volatile
  3201                           
  3202                           ;sort.c: 115: f_can_coming_to_ID = 1;
  3203  002B88  0E00               	movlw	0
  3204  002B8A  6E6E               	movwf	_f_can_coming_to_ID+1,c
  3205  002B8C  0E01               	movlw	1
  3206  002B8E  6E6D               	movwf	_f_can_coming_to_ID,c
  3207                           
  3208                           ; BSR set to: 0
  3209                           ;sort.c: 116: _delay((unsigned long)((300)*(32000000/4000.0)));
  3210  002B90  0E0D               	movlw	13
  3211  002B92  0100               	movlb	0	; () banked
  3212  002B94  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3213  002B96  0E2D               	movlw	45
  3214  002B98  0100               	movlb	0	; () banked
  3215  002B9A  6FB1               	movwf	??_Loading& (0+255),b
  3216  002B9C  0ED7               	movlw	215
  3217  002B9E                     u6867:
  3218  002B9E  2EE8               	decfsz	wreg,f,c
  3219  002BA0  D7FE               	bra	u6867
  3220  002BA2  2FB1               	decfsz	??_Loading& (0+255),f,b
  3221  002BA4  D7FC               	bra	u6867
  3222  002BA6  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3223  002BA8  D7FA               	bra	u6867
  3224  002BAA  D000               	nop2	
  3225                           
  3226                           ;sort.c: 117: LATAbits.LATA4 = 0;
  3227  002BAC  9889               	bcf	3977,4,c	;volatile
  3228  002BAE  0012               	return	
  3229  002BB0                     __end_of_Loading:
  3230                           	opt stack 0
  3231                           tblptru	equ	0xFF8
  3232                           tblptrh	equ	0xFF7
  3233                           tblptrl	equ	0xFF6
  3234                           tablat	equ	0xFF5
  3235                           prodh	equ	0xFF4
  3236                           prodl	equ	0xFF3
  3237                           postinc0	equ	0xFEE
  3238                           wreg	equ	0xFE8
  3239                           postdec1	equ	0xFE5
  3240                           fsr1l	equ	0xFE1
  3241                           status	equ	0xFD8
  3242                           
  3243 ;; *************** function _initSortTimer *****************
  3244 ;; Defined at:
  3245 ;;		line 233 in file "sort.c"
  3246 ;; Parameters:    Size  Location     Type
  3247 ;;		None
  3248 ;; Auto vars:     Size  Location     Type
  3249 ;;  i               2    8[BANK0 ] int 
  3250 ;; Return value:  Size  Location     Type
  3251 ;;                  1    wreg      void 
  3252 ;; Registers used:
  3253 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3254 ;; Tracked objects:
  3255 ;;		On entry : 0/0
  3256 ;;		On exit  : 0/0
  3257 ;;		Unchanged: 0/0
  3258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3260 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3261 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3262 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3263 ;;Total ram usage:        5 bytes
  3264 ;; Hardware stack levels used:    1
  3265 ;; Hardware stack levels required when called:   10
  3266 ;; This function calls:
  3267 ;;		_getRTC
  3268 ;; This function is called by:
  3269 ;;		_Loading
  3270 ;; This function uses a non-reentrant model
  3271 ;;
  3272                           
  3273                           	psect	text4
  3274  0035A6                     __ptext4:
  3275                           	opt stack 0
  3276  0035A6                     _initSortTimer:
  3277                           	opt stack 18
  3278                           
  3279                           ;sort.c: 235: getRTC();
  3280                           
  3281                           ;incstack = 0
  3282  0035A6  EC4E  F01C         	call	_getRTC	;wreg free
  3283                           
  3284                           ;sort.c: 236: for(int i = 0; i < 7; i++){
  3285  0035AA  0E00               	movlw	0
  3286  0035AC  0100               	movlb	0	; () banked
  3287  0035AE  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  3288  0035B0  0E00               	movlw	0
  3289  0035B2  6F88               	movwf	initSortTimer@i& (0+255),b
  3290  0035B4                     l5892:
  3291                           
  3292                           ; BSR set to: 0
  3293  0035B4  0100               	movlb	0	; () banked
  3294  0035B6  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  3295  0035B8  D008               	goto	l5896
  3296  0035BA  0100               	movlb	0	; () banked
  3297  0035BC  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  3298  0035BE  E140               	bnz	l5902
  3299  0035C0  0E07               	movlw	7
  3300  0035C2  0100               	movlb	0	; () banked
  3301  0035C4  5D88               	subwf	initSortTimer@i& (0+255),w,b
  3302  0035C6  B0D8               	btfsc	status,0,c
  3303  0035C8  D03B               	goto	l5902
  3304  0035CA                     l5896:
  3305                           
  3306                           ; BSR set to: 0
  3307                           ;sort.c: 237: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  3308  0035CA  0E24               	movlw	low _time
  3309  0035CC  0100               	movlb	0	; () banked
  3310  0035CE  2588               	addwf	initSortTimer@i& (0+255),w,b
  3311  0035D0  6ED9               	movwf	fsr2l,c
  3312  0035D2  0E01               	movlw	high _time
  3313  0035D4  0100               	movlb	0	; () banked
  3314  0035D6  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3315  0035D8  6EDA               	movwf	fsr2h,c
  3316  0035DA  50DF               	movf	indf2,w,c
  3317  0035DC  0100               	movlb	0	; () banked
  3318  0035DE  6F85               	movwf	??_initSortTimer& (0+255),b
  3319  0035E0  0100               	movlb	0	; () banked
  3320  0035E2  3B85               	swapf	??_initSortTimer& (0+255),f,b
  3321  0035E4  0E0F               	movlw	15
  3322  0035E6  1785               	andwf	??_initSortTimer& (0+255),f,b
  3323  0035E8  0E0F               	movlw	15
  3324  0035EA  0100               	movlb	0	; () banked
  3325  0035EC  1785               	andwf	??_initSortTimer& (0+255),f,b
  3326  0035EE  0100               	movlb	0	; () banked
  3327  0035F0  5185               	movf	??_initSortTimer& (0+255),w,b
  3328  0035F2  0D0A               	mullw	10
  3329  0035F4  0E24               	movlw	low _time
  3330  0035F6  0100               	movlb	0	; () banked
  3331  0035F8  2588               	addwf	initSortTimer@i& (0+255),w,b
  3332  0035FA  6ED9               	movwf	fsr2l,c
  3333  0035FC  0E01               	movlw	high _time
  3334  0035FE  0100               	movlb	0	; () banked
  3335  003600  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3336  003602  6EDA               	movwf	fsr2h,c
  3337  003604  50DF               	movf	indf2,w,c
  3338  003606  0B0F               	andlw	15
  3339  003608  0100               	movlb	0	; () banked
  3340  00360A  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  3341  00360C  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  3342  00360E  50F3               	movf	prodl,w,c
  3343  003610  0100               	movlb	0	; () banked
  3344  003612  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  3345  003614  50F4               	movf	prodh,w,c
  3346  003616  0100               	movlb	0	; () banked
  3347  003618  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  3348  00361A  90D8               	bcf	status,0,c
  3349  00361C  0100               	movlb	0	; () banked
  3350  00361E  3588               	rlcf	initSortTimer@i& (0+255),w,b
  3351  003620  6ED9               	movwf	fsr2l,c
  3352  003622  0100               	movlb	0	; () banked
  3353  003624  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  3354  003626  6EDA               	movwf	fsr2h,c
  3355  003628  0E0E               	movlw	low _startTime
  3356  00362A  26D9               	addwf	fsr2l,f,c
  3357  00362C  0E01               	movlw	high _startTime
  3358  00362E  22DA               	addwfc	fsr2h,f,c
  3359  003630  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  3360  003634  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  3361                           
  3362                           ; BSR set to: 0
  3363  003638  0100               	movlb	0	; () banked
  3364  00363A  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  3365  00363C  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  3366  00363E  D7BA               	goto	l5892
  3367  003640                     l5902:
  3368                           
  3369                           ; BSR set to: 0
  3370                           ;sort.c: 238: }
  3371                           ;sort.c: 240: T0CON = 0b00010111;
  3372  003640  0E17               	movlw	23
  3373  003642  6ED5               	movwf	4053,c	;volatile
  3374                           
  3375                           ;sort.c: 249: TMR0H = 0b10000101;
  3376  003644  0E85               	movlw	133
  3377  003646  6ED7               	movwf	4055,c	;volatile
  3378                           
  3379                           ;sort.c: 250: TMR0L = 0b11101110;
  3380  003648  0EEE               	movlw	238
  3381  00364A  6ED6               	movwf	4054,c	;volatile
  3382                           
  3383                           ; BSR set to: 0
  3384                           ;sort.c: 251: TMR0ON = 1;
  3385  00364C  8ED5               	bsf	4053,7,c	;volatile
  3386                           
  3387                           ; BSR set to: 0
  3388  00364E  0012               	return		;funcret
  3389  003650                     __end_of_initSortTimer:
  3390                           	opt stack 0
  3391                           tblptru	equ	0xFF8
  3392                           tblptrh	equ	0xFF7
  3393                           tblptrl	equ	0xFF6
  3394                           tablat	equ	0xFF5
  3395                           prodh	equ	0xFF4
  3396                           prodl	equ	0xFF3
  3397                           postinc0	equ	0xFEE
  3398                           wreg	equ	0xFE8
  3399                           postdec1	equ	0xFE5
  3400                           fsr1l	equ	0xFE1
  3401                           indf2	equ	0xFDF
  3402                           postinc2	equ	0xFDE
  3403                           postdec2	equ	0xFDD
  3404                           fsr2h	equ	0xFDA
  3405                           fsr2l	equ	0xFD9
  3406                           status	equ	0xFD8
  3407                           
  3408 ;; *************** function _initGlobalVars *****************
  3409 ;; Defined at:
  3410 ;;		line 214 in file "sort.c"
  3411 ;; Parameters:    Size  Location     Type
  3412 ;;		None
  3413 ;; Auto vars:     Size  Location     Type
  3414 ;;		None
  3415 ;; Return value:  Size  Location     Type
  3416 ;;                  1    wreg      void 
  3417 ;; Registers used:
  3418 ;;		wreg, status,2
  3419 ;; Tracked objects:
  3420 ;;		On entry : 0/0
  3421 ;;		On exit  : 0/0
  3422 ;;		Unchanged: 0/0
  3423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3425 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3427 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3428 ;;Total ram usage:        0 bytes
  3429 ;; Hardware stack levels used:    1
  3430 ;; Hardware stack levels required when called:    7
  3431 ;; This function calls:
  3432 ;;		Nothing
  3433 ;; This function is called by:
  3434 ;;		_Loading
  3435 ;; This function uses a non-reentrant model
  3436 ;;
  3437                           
  3438                           	psect	text5
  3439  003B06                     __ptext5:
  3440                           	opt stack 0
  3441  003B06                     _initGlobalVars:
  3442                           	opt stack 21
  3443                           
  3444                           ;sort.c: 216: first = 0;
  3445                           
  3446                           ; BSR set to: 0
  3447                           ;incstack = 0
  3448  003B06  0E00               	movlw	0
  3449  003B08  0100               	movlb	0	; () banked
  3450  003B0A  6FE5               	movwf	(_first+1)& (0+255),b
  3451  003B0C  0E00               	movlw	0
  3452  003B0E  6FE4               	movwf	_first& (0+255),b
  3453                           
  3454                           ;sort.c: 219: f_loadingNewCan = 0;
  3455  003B10  0E00               	movlw	0
  3456  003B12  0100               	movlb	0	; () banked
  3457  003B14  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3458  003B16  0E00               	movlw	0
  3459  003B18  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3460                           
  3461                           ;sort.c: 220: f_lastCan = 0;
  3462  003B1A  0E00               	movlw	0
  3463  003B1C  6E74               	movwf	_f_lastCan+1,c
  3464  003B1E  0E00               	movlw	0
  3465  003B20  6E73               	movwf	_f_lastCan,c
  3466                           
  3467                           ;sort.c: 221: f_ID_receive = 1;
  3468  003B22  0E00               	movlw	0
  3469  003B24  6E6C               	movwf	_f_ID_receive+1,c
  3470  003B26  0E01               	movlw	1
  3471  003B28  6E6B               	movwf	_f_ID_receive,c
  3472                           
  3473                           ;sort.c: 222: f_can_coming_to_ID = 0;
  3474  003B2A  0E00               	movlw	0
  3475  003B2C  6E6E               	movwf	_f_can_coming_to_ID+1,c
  3476  003B2E  0E00               	movlw	0
  3477  003B30  6E6D               	movwf	_f_can_coming_to_ID,c
  3478                           
  3479                           ;sort.c: 223: f_can_coming_to_distribution = 0;
  3480  003B32  0E00               	movlw	0
  3481  003B34  6E70               	movwf	_f_can_coming_to_distribution+1,c
  3482  003B36  0E00               	movlw	0
  3483  003B38  6E6F               	movwf	_f_can_coming_to_distribution,c
  3484                           
  3485                           ;sort.c: 224: f_can_distributed = 0;
  3486  003B3A  0E00               	movlw	0
  3487  003B3C  6E72               	movwf	_f_can_distributed+1,c
  3488  003B3E  0E00               	movlw	0
  3489  003B40  6E71               	movwf	_f_can_distributed,c
  3490                           
  3491                           ;sort.c: 227: count_total = 0;
  3492  003B42  0E00               	movlw	0
  3493  003B44  0100               	movlb	0	; () banked
  3494  003B46  6FFF               	movwf	(_count_total+1)& (0+255),b
  3495  003B48  0E00               	movlw	0
  3496  003B4A  6FFE               	movwf	_count_total& (0+255),b
  3497                           
  3498                           ;sort.c: 228: count_pop_no_tab = 0;
  3499  003B4C  0E00               	movlw	0
  3500  003B4E  6E62               	movwf	_count_pop_no_tab+1,c
  3501  003B50  0E00               	movlw	0
  3502  003B52  6E61               	movwf	_count_pop_no_tab,c
  3503                           
  3504                           ;sort.c: 229: count_pop_w_tab = 0;
  3505  003B54  0E00               	movlw	0
  3506  003B56  6E64               	movwf	_count_pop_w_tab+1,c
  3507  003B58  0E00               	movlw	0
  3508  003B5A  6E63               	movwf	_count_pop_w_tab,c
  3509                           
  3510                           ;sort.c: 230: count_can_w_lab = 0;
  3511  003B5C  0E00               	movlw	0
  3512  003B5E  6E60               	movwf	_count_can_w_lab+1,c
  3513  003B60  0E00               	movlw	0
  3514  003B62  6E5F               	movwf	_count_can_w_lab,c
  3515                           
  3516                           ;sort.c: 231: count_can_no_lab = 0;
  3517  003B64  0E00               	movlw	0
  3518  003B66  6E5E               	movwf	_count_can_no_lab+1,c
  3519  003B68  0E00               	movlw	0
  3520  003B6A  6E5D               	movwf	_count_can_no_lab,c
  3521                           
  3522                           ; BSR set to: 0
  3523  003B6C  0012               	return		;funcret
  3524  003B6E                     __end_of_initGlobalVars:
  3525                           	opt stack 0
  3526                           tblptru	equ	0xFF8
  3527                           tblptrh	equ	0xFF7
  3528                           tblptrl	equ	0xFF6
  3529                           tablat	equ	0xFF5
  3530                           prodh	equ	0xFF4
  3531                           prodl	equ	0xFF3
  3532                           postinc0	equ	0xFEE
  3533                           wreg	equ	0xFE8
  3534                           postdec1	equ	0xFE5
  3535                           fsr1l	equ	0xFE1
  3536                           indf2	equ	0xFDF
  3537                           postinc2	equ	0xFDE
  3538                           postdec2	equ	0xFDD
  3539                           fsr2h	equ	0xFDA
  3540                           fsr2l	equ	0xFD9
  3541                           status	equ	0xFD8
  3542                           
  3543 ;; *************** function _getIR *****************
  3544 ;; Defined at:
  3545 ;;		line 290 in file "sort.c"
  3546 ;; Parameters:    Size  Location     Type
  3547 ;;		None
  3548 ;; Auto vars:     Size  Location     Type
  3549 ;;		None
  3550 ;; Return value:  Size  Location     Type
  3551 ;;                  1    wreg      void 
  3552 ;; Registers used:
  3553 ;;		wreg, status,2, status,0, cstack
  3554 ;; Tracked objects:
  3555 ;;		On entry : 0/0
  3556 ;;		On exit  : 0/0
  3557 ;;		Unchanged: 0/0
  3558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3560 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3561 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3562 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3563 ;;Total ram usage:        2 bytes
  3564 ;; Hardware stack levels used:    1
  3565 ;; Hardware stack levels required when called:    9
  3566 ;; This function calls:
  3567 ;;		_readIR
  3568 ;; This function is called by:
  3569 ;;		_Loading
  3570 ;; This function uses a non-reentrant model
  3571 ;;
  3572                           
  3573                           	psect	text6
  3574  003EA0                     __ptext6:
  3575                           	opt stack 0
  3576  003EA0                     _getIR:
  3577                           	opt stack 19
  3578                           
  3579                           ;sort.c: 291: readIR();
  3580                           
  3581                           ; BSR set to: 0
  3582                           ;incstack = 0
  3583  003EA0  EC9D  F01F         	call	_readIR	;wreg free
  3584                           
  3585                           ;sort.c: 292: if(IR_signal==1){
  3586  003EA4  0100               	movlb	0	; () banked
  3587  003EA6  05DA               	decf	_IR_signal& (0+255),w,b
  3588  003EA8  0100               	movlb	0	; () banked
  3589  003EAA  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3590  003EAC  A4D8               	btfss	status,2,c
  3591  003EAE  0012               	return	
  3592                           
  3593                           ; BSR set to: 0
  3594                           ;sort.c: 293: _delay((unsigned long)((100)*(32000000/4000.0)));
  3595  003EB0  0E05               	movlw	5
  3596  003EB2  0100               	movlb	0	; () banked
  3597  003EB4  6F87               	movwf	(??_getIR+1)& (0+255),b
  3598  003EB6  0E0F               	movlw	15
  3599  003EB8  0100               	movlb	0	; () banked
  3600  003EBA  6F86               	movwf	??_getIR& (0+255),b
  3601  003EBC  0EF1               	movlw	241
  3602  003EBE                     u6877:
  3603  003EBE  2EE8               	decfsz	wreg,f,c
  3604  003EC0  D7FE               	bra	u6877
  3605  003EC2  2F86               	decfsz	??_getIR& (0+255),f,b
  3606  003EC4  D7FC               	bra	u6877
  3607  003EC6  2F87               	decfsz	(??_getIR+1)& (0+255),f,b
  3608  003EC8  D7FA               	bra	u6877
  3609                           
  3610                           ;sort.c: 294: if(IR_signal==1){
  3611  003ECA  0100               	movlb	0	; () banked
  3612  003ECC  05DA               	decf	_IR_signal& (0+255),w,b
  3613  003ECE  0100               	movlb	0	; () banked
  3614  003ED0  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3615  003ED2  A4D8               	btfss	status,2,c
  3616  003ED4  D006               	goto	l5990
  3617                           
  3618                           ; BSR set to: 0
  3619                           ;sort.c: 295: f_loadingNewCan = 1;
  3620  003ED6  0E00               	movlw	0
  3621  003ED8  0100               	movlb	0	; () banked
  3622  003EDA  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3623  003EDC  0E01               	movlw	1
  3624  003EDE  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3625                           
  3626                           ;sort.c: 296: }
  3627  003EE0  0012               	return	
  3628  003EE2                     l5990:
  3629                           
  3630                           ; BSR set to: 0
  3631                           ;sort.c: 297: else{
  3632                           ;sort.c: 298: f_loadingNewCan = 0;
  3633  003EE2  0E00               	movlw	0
  3634  003EE4  0100               	movlb	0	; () banked
  3635  003EE6  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3636  003EE8  0E00               	movlw	0
  3637  003EEA  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3638                           
  3639                           ; BSR set to: 0
  3640  003EEC  0012               	return	
  3641  003EEE                     __end_of_getIR:
  3642                           	opt stack 0
  3643                           tblptru	equ	0xFF8
  3644                           tblptrh	equ	0xFF7
  3645                           tblptrl	equ	0xFF6
  3646                           tablat	equ	0xFF5
  3647                           prodh	equ	0xFF4
  3648                           prodl	equ	0xFF3
  3649                           postinc0	equ	0xFEE
  3650                           wreg	equ	0xFE8
  3651                           postdec1	equ	0xFE5
  3652                           fsr1l	equ	0xFE1
  3653                           indf2	equ	0xFDF
  3654                           postinc2	equ	0xFDE
  3655                           postdec2	equ	0xFDD
  3656                           fsr2h	equ	0xFDA
  3657                           fsr2l	equ	0xFD9
  3658                           status	equ	0xFD8
  3659                           
  3660 ;; *************** function _delay_ms *****************
  3661 ;; Defined at:
  3662 ;;		line 315 in file "sort.c"
  3663 ;; Parameters:    Size  Location     Type
  3664 ;;  milliseconds    1    wreg     unsigned char 
  3665 ;; Auto vars:     Size  Location     Type
  3666 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  3667 ;; Return value:  Size  Location     Type
  3668 ;;                  1    wreg      void 
  3669 ;; Registers used:
  3670 ;;		wreg, status,2, status,0, cstack
  3671 ;; Tracked objects:
  3672 ;;		On entry : 0/0
  3673 ;;		On exit  : 0/0
  3674 ;;		Unchanged: 0/0
  3675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3677 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3678 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3679 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3680 ;;Total ram usage:        2 bytes
  3681 ;; Hardware stack levels used:    1
  3682 ;; Hardware stack levels required when called:    7
  3683 ;; This function calls:
  3684 ;;		Nothing
  3685 ;; This function is called by:
  3686 ;;		_Loading
  3687 ;; This function uses a non-reentrant model
  3688 ;;
  3689                           
  3690                           	psect	text7
  3691  0043AA                     __ptext7:
  3692                           	opt stack 0
  3693  0043AA                     _delay_ms:
  3694                           	opt stack 21
  3695                           
  3696                           ; BSR set to: 0
  3697                           ;incstack = 0
  3698                           ;delay_ms@milliseconds stored from wreg
  3699  0043AA  0100               	movlb	0	; () banked
  3700  0043AC  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  3701                           
  3702                           ;sort.c: 316: while(milliseconds > 0)
  3703  0043AE  D00B               	goto	l5964
  3704  0043B0                     l5960:
  3705                           
  3706                           ;sort.c: 317: {
  3707                           ;sort.c: 318: milliseconds--;
  3708  0043B0  0100               	movlb	0	; () banked
  3709  0043B2  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  3710                           
  3711                           ; BSR set to: 0
  3712                           ;sort.c: 319: _delay((unsigned long)((990)*(32000000/4000000.0)));
  3713  0043B4  0E0B               	movlw	11
  3714  0043B6  0100               	movlb	0	; () banked
  3715  0043B8  6F80               	movwf	??_delay_ms& (0+255),b
  3716  0043BA  0E47               	movlw	71
  3717  0043BC                     u6887:
  3718  0043BC  2EE8               	decfsz	wreg,f,c
  3719  0043BE  D7FE               	bra	u6887
  3720  0043C0  2F80               	decfsz	??_delay_ms& (0+255),f,b
  3721  0043C2  D7FC               	bra	u6887
  3722  0043C4  D000               	nop2	
  3723  0043C6                     l5964:
  3724  0043C6  0100               	movlb	0	; () banked
  3725  0043C8  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  3726  0043CA  0100               	movlb	0	; () banked
  3727  0043CC  B4D8               	btfsc	status,2,c
  3728  0043CE  0012               	return	
  3729  0043D0  D7EF               	goto	l5960
  3730  0043D2                     __end_of_delay_ms:
  3731                           	opt stack 0
  3732                           tblptru	equ	0xFF8
  3733                           tblptrh	equ	0xFF7
  3734                           tblptrl	equ	0xFF6
  3735                           tablat	equ	0xFF5
  3736                           prodh	equ	0xFF4
  3737                           prodl	equ	0xFF3
  3738                           postinc0	equ	0xFEE
  3739                           wreg	equ	0xFE8
  3740                           postdec1	equ	0xFE5
  3741                           fsr1l	equ	0xFE1
  3742                           indf2	equ	0xFDF
  3743                           postinc2	equ	0xFDE
  3744                           postdec2	equ	0xFDD
  3745                           fsr2h	equ	0xFDA
  3746                           fsr2l	equ	0xFD9
  3747                           status	equ	0xFD8
  3748                           
  3749 ;; *************** function _ID *****************
  3750 ;; Defined at:
  3751 ;;		line 121 in file "sort.c"
  3752 ;; Parameters:    Size  Location     Type
  3753 ;;		None
  3754 ;; Auto vars:     Size  Location     Type
  3755 ;;  sensor_outpu    6    8[BANK0 ] int [3]
  3756 ;; Return value:  Size  Location     Type
  3757 ;;                  1    wreg      void 
  3758 ;; Registers used:
  3759 ;;		wreg, status,2, status,0, cstack
  3760 ;; Tracked objects:
  3761 ;;		On entry : 0/0
  3762 ;;		On exit  : 0/0
  3763 ;;		Unchanged: 0/0
  3764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3766 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3767 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3768 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3769 ;;Total ram usage:        8 bytes
  3770 ;; Hardware stack levels used:    1
  3771 ;; Hardware stack levels required when called:    9
  3772 ;; This function calls:
  3773 ;;		_readMAG
  3774 ;; This function is called by:
  3775 ;;		_sort
  3776 ;; This function uses a non-reentrant model
  3777 ;;
  3778                           
  3779                           	psect	text8
  3780  002E2C                     __ptext8:
  3781                           	opt stack 0
  3782  002E2C                     _ID:
  3783                           	opt stack 20
  3784                           
  3785                           ;sort.c: 122: if(f_can_coming_to_ID){
  3786                           
  3787                           ; BSR set to: 0
  3788                           ;incstack = 0
  3789  002E2C  506D               	movf	_f_can_coming_to_ID,w,c
  3790  002E2E  106E               	iorwf	_f_can_coming_to_ID+1,w,c
  3791  002E30  B4D8               	btfsc	status,2,c
  3792  002E32  0012               	return	
  3793                           
  3794                           ;sort.c: 124: _delay((unsigned long)((500)*(32000000/4000.0)));
  3795  002E34  0E15               	movlw	21
  3796  002E36  0100               	movlb	0	; () banked
  3797  002E38  6F87               	movwf	(??_ID+1)& (0+255),b
  3798  002E3A  0E4B               	movlw	75
  3799  002E3C  0100               	movlb	0	; () banked
  3800  002E3E  6F86               	movwf	??_ID& (0+255),b
  3801  002E40  0EBE               	movlw	190
  3802  002E42                     u6897:
  3803  002E42  2EE8               	decfsz	wreg,f,c
  3804  002E44  D7FE               	bra	u6897
  3805  002E46  2F86               	decfsz	??_ID& (0+255),f,b
  3806  002E48  D7FC               	bra	u6897
  3807  002E4A  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  3808  002E4C  D7FA               	bra	u6897
  3809  002E4E  F000               	nop	
  3810                           
  3811                           ;sort.c: 129: int sensor_outputs[3];
  3812                           ;sort.c: 133: sensor_outputs[0] = PORTAbits.RA2;
  3813  002E50  A480               	btfss	3968,2,c	;volatile
  3814  002E52  D004               	goto	u4790
  3815  002E54  0100               	movlb	0	; () banked
  3816  002E56  6B86               	clrf	??_ID& (0+255),b
  3817  002E58  2B86               	incf	??_ID& (0+255),f,b
  3818  002E5A  D002               	goto	u4798
  3819  002E5C                     u4790:
  3820  002E5C  0100               	movlb	0	; () banked
  3821  002E5E  6B86               	clrf	??_ID& (0+255),b
  3822  002E60                     u4798:
  3823  002E60  0100               	movlb	0	; () banked
  3824  002E62  5186               	movf	??_ID& (0+255),w,b
  3825  002E64  0100               	movlb	0	; () banked
  3826  002E66  6F88               	movwf	ID@sensor_outputs& (0+255),b
  3827  002E68  6B89               	clrf	(ID@sensor_outputs+1)& (0+255),b
  3828                           
  3829                           ; BSR set to: 0
  3830                           ;sort.c: 135: if(!sensor_outputs[0]){
  3831  002E6A  0100               	movlb	0	; () banked
  3832  002E6C  5188               	movf	ID@sensor_outputs& (0+255),w,b
  3833  002E6E  0100               	movlb	0	; () banked
  3834  002E70  1189               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  3835  002E72  A4D8               	btfss	status,2,c
  3836  002E74  D029               	goto	l6342
  3837                           
  3838                           ; BSR set to: 0
  3839                           ;sort.c: 136: readMAG();
  3840  002E76  EC77  F01F         	call	_readMAG	;wreg free
  3841                           
  3842                           ;sort.c: 137: sensor_outputs[1] = MAG_signal;
  3843  002E7A  C0DC  F08A         	movff	_MAG_signal,ID@sensor_outputs+2
  3844  002E7E  C0DD  F08B         	movff	_MAG_signal+1,ID@sensor_outputs+3
  3845                           
  3846                           ;sort.c: 138: if(!sensor_outputs[1]){
  3847  002E82  0100               	movlb	0	; () banked
  3848  002E84  518A               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  3849  002E86  0100               	movlb	0	; () banked
  3850  002E88  118B               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  3851  002E8A  A4D8               	btfss	status,2,c
  3852  002E8C  D01D               	goto	l6342
  3853                           
  3854                           ; BSR set to: 0
  3855                           ;sort.c: 139: LATAbits.LATA3 = 1;
  3856  002E8E  8689               	bsf	3977,3,c	;volatile
  3857                           
  3858                           ; BSR set to: 0
  3859                           ;sort.c: 141: _delay((unsigned long)((300)*(32000000/4000.0)));
  3860  002E90  0E0D               	movlw	13
  3861  002E92  0100               	movlb	0	; () banked
  3862  002E94  6F87               	movwf	(??_ID+1)& (0+255),b
  3863  002E96  0E2D               	movlw	45
  3864  002E98  0100               	movlb	0	; () banked
  3865  002E9A  6F86               	movwf	??_ID& (0+255),b
  3866  002E9C  0ED7               	movlw	215
  3867  002E9E                     u6907:
  3868  002E9E  2EE8               	decfsz	wreg,f,c
  3869  002EA0  D7FE               	bra	u6907
  3870  002EA2  2F86               	decfsz	??_ID& (0+255),f,b
  3871  002EA4  D7FC               	bra	u6907
  3872  002EA6  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  3873  002EA8  D7FA               	bra	u6907
  3874  002EAA  D000               	nop2	
  3875                           
  3876                           ;sort.c: 142: sensor_outputs[2] = PORTAbits.RA2;
  3877  002EAC  A480               	btfss	3968,2,c	;volatile
  3878  002EAE  D004               	goto	u4820
  3879  002EB0  0100               	movlb	0	; () banked
  3880  002EB2  6B86               	clrf	??_ID& (0+255),b
  3881  002EB4  2B86               	incf	??_ID& (0+255),f,b
  3882  002EB6  D002               	goto	u4828
  3883  002EB8                     u4820:
  3884  002EB8  0100               	movlb	0	; () banked
  3885  002EBA  6B86               	clrf	??_ID& (0+255),b
  3886  002EBC                     u4828:
  3887  002EBC  0100               	movlb	0	; () banked
  3888  002EBE  5186               	movf	??_ID& (0+255),w,b
  3889  002EC0  0100               	movlb	0	; () banked
  3890  002EC2  6F8C               	movwf	(ID@sensor_outputs+4)& (0+255),b
  3891  002EC4  6B8D               	clrf	(ID@sensor_outputs+5)& (0+255),b
  3892                           
  3893                           ; BSR set to: 0
  3894                           ;sort.c: 143: LATAbits.LATA3 = 0;
  3895  002EC6  9689               	bcf	3977,3,c	;volatile
  3896  002EC8                     l6342:
  3897                           
  3898                           ; BSR set to: 0
  3899                           ;sort.c: 144: }
  3900                           ;sort.c: 145: }
  3901                           ;sort.c: 148: if(!sensor_outputs[0]){
  3902  002EC8  0100               	movlb	0	; () banked
  3903  002ECA  5188               	movf	ID@sensor_outputs& (0+255),w,b
  3904  002ECC  0100               	movlb	0	; () banked
  3905  002ECE  1189               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  3906  002ED0  A4D8               	btfss	status,2,c
  3907  002ED2  D01E               	goto	l6360
  3908                           
  3909                           ; BSR set to: 0
  3910                           ;sort.c: 149: if(!sensor_outputs[1]){
  3911  002ED4  0100               	movlb	0	; () banked
  3912  002ED6  518A               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  3913  002ED8  0100               	movlb	0	; () banked
  3914  002EDA  118B               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  3915  002EDC  A4D8               	btfss	status,2,c
  3916  002EDE  D012               	goto	l6356
  3917                           
  3918                           ; BSR set to: 0
  3919                           ;sort.c: 150: if(!sensor_outputs[2]){
  3920  002EE0  0100               	movlb	0	; () banked
  3921  002EE2  518C               	movf	(ID@sensor_outputs+4)& (0+255),w,b
  3922  002EE4  0100               	movlb	0	; () banked
  3923  002EE6  118D               	iorwf	(ID@sensor_outputs+5)& (0+255),w,b
  3924  002EE8  A4D8               	btfss	status,2,c
  3925  002EEA  D006               	goto	l6352
  3926                           
  3927                           ; BSR set to: 0
  3928                           ;sort.c: 151: count_pop_no_tab++;
  3929  002EEC  4A61               	infsnz	_count_pop_no_tab,f,c
  3930  002EEE  2A62               	incf	_count_pop_no_tab+1,f,c
  3931                           
  3932                           ; BSR set to: 0
  3933                           ;sort.c: 152: cur_can = 0;
  3934  002EF0  0E00               	movlw	0
  3935  002EF2  6E66               	movwf	_cur_can+1,c
  3936  002EF4  0E00               	movlw	0
  3937  002EF6  D011               	goto	L4
  3938  002EF8                     l6352:
  3939                           
  3940                           ; BSR set to: 0
  3941                           ;sort.c: 154: else{
  3942                           ;sort.c: 155: count_pop_w_tab++;
  3943  002EF8  4A63               	infsnz	_count_pop_w_tab,f,c
  3944  002EFA  2A64               	incf	_count_pop_w_tab+1,f,c
  3945                           
  3946                           ; BSR set to: 0
  3947                           ;sort.c: 156: cur_can = 1;
  3948  002EFC  0E00               	movlw	0
  3949  002EFE  6E66               	movwf	_cur_can+1,c
  3950  002F00  0E01               	movlw	1
  3951  002F02  D00B               	goto	L4
  3952  002F04                     l6356:
  3953                           
  3954                           ; BSR set to: 0
  3955                           ;sort.c: 159: else{
  3956                           ;sort.c: 160: count_can_w_lab++;
  3957  002F04  4A5F               	infsnz	_count_can_w_lab,f,c
  3958  002F06  2A60               	incf	_count_can_w_lab+1,f,c
  3959                           
  3960                           ; BSR set to: 0
  3961                           ;sort.c: 161: cur_can = 2;
  3962  002F08  0E00               	movlw	0
  3963  002F0A  6E66               	movwf	_cur_can+1,c
  3964  002F0C  0E02               	movlw	2
  3965  002F0E  D005               	goto	L4
  3966  002F10                     l6360:
  3967                           
  3968                           ; BSR set to: 0
  3969                           ;sort.c: 164: else{
  3970                           ;sort.c: 165: count_can_no_lab++;
  3971  002F10  4A5D               	infsnz	_count_can_no_lab,f,c
  3972  002F12  2A5E               	incf	_count_can_no_lab+1,f,c
  3973                           
  3974                           ; BSR set to: 0
  3975                           ;sort.c: 166: cur_can = 3;
  3976  002F14  0E00               	movlw	0
  3977  002F16  6E66               	movwf	_cur_can+1,c
  3978  002F18  0E03               	movlw	3
  3979  002F1A                     L4:
  3980  002F1A  6E65               	movwf	_cur_can,c
  3981                           
  3982                           ; BSR set to: 0
  3983                           ;sort.c: 167: }
  3984                           ;sort.c: 169: LATCbits.LATC0 = 1;
  3985                           
  3986                           ; BSR set to: 0
  3987  002F1C  808B               	bsf	3979,0,c	;volatile
  3988                           
  3989                           ; BSR set to: 0
  3990                           ;sort.c: 170: f_can_coming_to_distribution = 1;
  3991  002F1E  0E00               	movlw	0
  3992  002F20  6E70               	movwf	_f_can_coming_to_distribution+1,c
  3993  002F22  0E01               	movlw	1
  3994  002F24  6E6F               	movwf	_f_can_coming_to_distribution,c
  3995                           
  3996                           ; BSR set to: 0
  3997                           ;sort.c: 171: _delay((unsigned long)((500)*(32000000/4000.0)));
  3998  002F26  0E15               	movlw	21
  3999  002F28  0100               	movlb	0	; () banked
  4000  002F2A  6F87               	movwf	(??_ID+1)& (0+255),b
  4001  002F2C  0E4B               	movlw	75
  4002  002F2E  0100               	movlb	0	; () banked
  4003  002F30  6F86               	movwf	??_ID& (0+255),b
  4004  002F32  0EBE               	movlw	190
  4005  002F34                     u6917:
  4006  002F34  2EE8               	decfsz	wreg,f,c
  4007  002F36  D7FE               	bra	u6917
  4008  002F38  2F86               	decfsz	??_ID& (0+255),f,b
  4009  002F3A  D7FC               	bra	u6917
  4010  002F3C  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  4011  002F3E  D7FA               	bra	u6917
  4012  002F40  F000               	nop	
  4013                           
  4014                           ;sort.c: 172: LATCbits.LATC0 = 0;
  4015  002F42  908B               	bcf	3979,0,c	;volatile
  4016                           
  4017                           ;sort.c: 174: f_can_coming_to_ID = 0;
  4018  002F44  0E00               	movlw	0
  4019  002F46  6E6E               	movwf	_f_can_coming_to_ID+1,c
  4020  002F48  0E00               	movlw	0
  4021  002F4A  6E6D               	movwf	_f_can_coming_to_ID,c
  4022  002F4C  0012               	return	
  4023  002F4E                     __end_of_ID:
  4024                           	opt stack 0
  4025                           tblptru	equ	0xFF8
  4026                           tblptrh	equ	0xFF7
  4027                           tblptrl	equ	0xFF6
  4028                           tablat	equ	0xFF5
  4029                           prodh	equ	0xFF4
  4030                           prodl	equ	0xFF3
  4031                           postinc0	equ	0xFEE
  4032                           wreg	equ	0xFE8
  4033                           postdec1	equ	0xFE5
  4034                           fsr1l	equ	0xFE1
  4035                           indf2	equ	0xFDF
  4036                           postinc2	equ	0xFDE
  4037                           postdec2	equ	0xFDD
  4038                           fsr2h	equ	0xFDA
  4039                           fsr2l	equ	0xFD9
  4040                           status	equ	0xFD8
  4041                           
  4042 ;; *************** function _Distribution *****************
  4043 ;; Defined at:
  4044 ;;		line 177 in file "sort.c"
  4045 ;; Parameters:    Size  Location     Type
  4046 ;;		None
  4047 ;; Auto vars:     Size  Location     Type
  4048 ;;		None
  4049 ;; Return value:  Size  Location     Type
  4050 ;;                  1    wreg      void 
  4051 ;; Registers used:
  4052 ;;		wreg, status,2, status,0, cstack
  4053 ;; Tracked objects:
  4054 ;;		On entry : 0/0
  4055 ;;		On exit  : 0/0
  4056 ;;		Unchanged: 0/0
  4057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4060 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4061 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4062 ;;Total ram usage:        2 bytes
  4063 ;; Hardware stack levels used:    1
  4064 ;; Hardware stack levels required when called:    8
  4065 ;; This function calls:
  4066 ;;		_updateServoPosition
  4067 ;; This function is called by:
  4068 ;;		_sort
  4069 ;; This function uses a non-reentrant model
  4070 ;;
  4071                           
  4072                           	psect	text9
  4073  002BB0                     __ptext9:
  4074                           	opt stack 0
  4075  002BB0                     _Distribution:
  4076                           	opt stack 21
  4077                           
  4078                           ;sort.c: 178: if(f_can_coming_to_distribution){
  4079                           
  4080                           ;incstack = 0
  4081  002BB0  506F               	movf	_f_can_coming_to_distribution,w,c
  4082  002BB2  1070               	iorwf	_f_can_coming_to_distribution+1,w,c
  4083  002BB4  B4D8               	btfsc	status,2,c
  4084  002BB6  0012               	return	
  4085  002BB8  D034               	goto	l6388
  4086  002BBA                     l6378:
  4087                           
  4088                           ;sort.c: 183: updateServoPosition(500, 1);
  4089  002BBA  0E01               	movlw	1
  4090  002BBC  0100               	movlb	0	; () banked
  4091  002BBE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4092  002BC0  0EF4               	movlw	244
  4093  002BC2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4094  002BC4  0E00               	movlw	0
  4095  002BC6  0100               	movlb	0	; () banked
  4096  002BC8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4097  002BCA  0E01               	movlw	1
  4098  002BCC  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4099  002BCE  EC0F  F01D         	call	_updateServoPosition	;wreg free
  4100                           
  4101                           ;sort.c: 184: break;
  4102  002BD2  D03E               	goto	l6390
  4103  002BD4                     l6380:
  4104                           
  4105                           ;sort.c: 186: updateServoPosition(700, 1);
  4106  002BD4  0E02               	movlw	2
  4107  002BD6  0100               	movlb	0	; () banked
  4108  002BD8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4109  002BDA  0EBC               	movlw	188
  4110  002BDC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4111  002BDE  0E00               	movlw	0
  4112  002BE0  0100               	movlb	0	; () banked
  4113  002BE2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4114  002BE4  0E01               	movlw	1
  4115  002BE6  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4116  002BE8  EC0F  F01D         	call	_updateServoPosition	;wreg free
  4117                           
  4118                           ;sort.c: 187: break;
  4119  002BEC  D031               	goto	l6390
  4120  002BEE                     l6382:
  4121                           
  4122                           ;sort.c: 189: updateServoPosition(1650, 1);
  4123  002BEE  0E06               	movlw	6
  4124  002BF0  0100               	movlb	0	; () banked
  4125  002BF2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4126  002BF4  0E72               	movlw	114
  4127  002BF6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4128  002BF8  0E00               	movlw	0
  4129  002BFA  0100               	movlb	0	; () banked
  4130  002BFC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4131  002BFE  0E01               	movlw	1
  4132  002C00  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4133  002C02  EC0F  F01D         	call	_updateServoPosition	;wreg free
  4134                           
  4135                           ;sort.c: 190: break;
  4136  002C06  D024               	goto	l6390
  4137  002C08                     l6384:
  4138                           
  4139                           ;sort.c: 192: updateServoPosition(2000, 1);
  4140  002C08  0E07               	movlw	7
  4141  002C0A  0100               	movlb	0	; () banked
  4142  002C0C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4143  002C0E  0ED0               	movlw	208
  4144  002C10  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4145  002C12  0E00               	movlw	0
  4146  002C14  0100               	movlb	0	; () banked
  4147  002C16  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4148  002C18  0E01               	movlw	1
  4149  002C1A  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4150  002C1C  EC0F  F01D         	call	_updateServoPosition	;wreg free
  4151                           
  4152                           ;sort.c: 196: }
  4153                           
  4154                           ;sort.c: 195: break;
  4155                           
  4156                           ;sort.c: 194: default:
  4157                           
  4158                           ;sort.c: 193: break;
  4159  002C20  D017               	goto	l6390
  4160  002C22                     l6388:
  4161  002C22  C065  F088         	movff	_cur_can,??_Distribution
  4162  002C26  C066  F089         	movff	_cur_can+1,??_Distribution+1
  4163                           
  4164                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4165                           ; Switch size 1, requested type "space"
  4166                           ; Number of cases is 1, Range of values is 0 to 0
  4167                           ; switch strategies available:
  4168                           ; Name         Instructions Cycles
  4169                           ; simple_byte            4     3 (average)
  4170                           ;	Chosen strategy is simple_byte
  4171  002C2A  0100               	movlb	0	; () banked
  4172  002C2C  5189               	movf	(??_Distribution+1)& (0+255),w,b
  4173  002C2E  0A00               	xorlw	0	; case 0
  4174  002C30  A4D8               	btfss	status,2,c
  4175  002C32  D00E               	goto	l6390
  4176                           
  4177                           ; BSR set to: 0
  4178                           ; Switch size 1, requested type "space"
  4179                           ; Number of cases is 4, Range of values is 0 to 3
  4180                           ; switch strategies available:
  4181                           ; Name         Instructions Cycles
  4182                           ; simple_byte           13     7 (average)
  4183                           ;	Chosen strategy is simple_byte
  4184  002C34  0100               	movlb	0	; () banked
  4185  002C36  5188               	movf	??_Distribution& (0+255),w,b
  4186  002C38  0A00               	xorlw	0	; case 0
  4187  002C3A  B4D8               	btfsc	status,2,c
  4188  002C3C  D7BE               	goto	l6378
  4189  002C3E  0A01               	xorlw	1	; case 1
  4190  002C40  B4D8               	btfsc	status,2,c
  4191  002C42  D7C8               	goto	l6380
  4192  002C44  0A03               	xorlw	3	; case 2
  4193  002C46  B4D8               	btfsc	status,2,c
  4194  002C48  D7D2               	goto	l6382
  4195  002C4A  0A01               	xorlw	1	; case 3
  4196  002C4C  B4D8               	btfsc	status,2,c
  4197  002C4E  D7DC               	goto	l6384
  4198  002C50                     l6390:
  4199                           
  4200                           ;sort.c: 197: _delay((unsigned long)((500)*(32000000/4000.0)));
  4201  002C50  0E15               	movlw	21
  4202  002C52  0100               	movlb	0	; () banked
  4203  002C54  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4204  002C56  0E4B               	movlw	75
  4205  002C58  0100               	movlb	0	; () banked
  4206  002C5A  6F88               	movwf	??_Distribution& (0+255),b
  4207  002C5C  0EBE               	movlw	190
  4208  002C5E                     u6927:
  4209  002C5E  2EE8               	decfsz	wreg,f,c
  4210  002C60  D7FE               	bra	u6927
  4211  002C62  2F88               	decfsz	??_Distribution& (0+255),f,b
  4212  002C64  D7FC               	bra	u6927
  4213  002C66  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4214  002C68  D7FA               	bra	u6927
  4215  002C6A  F000               	nop	
  4216                           
  4217                           ;sort.c: 200: updateServoPosition(1350, 3);
  4218  002C6C  0E05               	movlw	5
  4219  002C6E  0100               	movlb	0	; () banked
  4220  002C70  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4221  002C72  0E46               	movlw	70
  4222  002C74  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4223  002C76  0E00               	movlw	0
  4224  002C78  0100               	movlb	0	; () banked
  4225  002C7A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4226  002C7C  0E03               	movlw	3
  4227  002C7E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4228  002C80  EC0F  F01D         	call	_updateServoPosition	;wreg free
  4229                           
  4230                           ;sort.c: 201: _delay((unsigned long)((500)*(32000000/4000.0)));
  4231  002C84  0E15               	movlw	21
  4232  002C86  0100               	movlb	0	; () banked
  4233  002C88  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4234  002C8A  0E4B               	movlw	75
  4235  002C8C  0100               	movlb	0	; () banked
  4236  002C8E  6F88               	movwf	??_Distribution& (0+255),b
  4237  002C90  0EBE               	movlw	190
  4238  002C92                     u6937:
  4239  002C92  2EE8               	decfsz	wreg,f,c
  4240  002C94  D7FE               	bra	u6937
  4241  002C96  2F88               	decfsz	??_Distribution& (0+255),f,b
  4242  002C98  D7FC               	bra	u6937
  4243  002C9A  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4244  002C9C  D7FA               	bra	u6937
  4245  002C9E  F000               	nop	
  4246                           
  4247                           ;sort.c: 204: updateServoPosition(1250, 1);
  4248  002CA0  0E04               	movlw	4
  4249  002CA2  0100               	movlb	0	; () banked
  4250  002CA4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4251  002CA6  0EE2               	movlw	226
  4252  002CA8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4253  002CAA  0E00               	movlw	0
  4254  002CAC  0100               	movlb	0	; () banked
  4255  002CAE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4256  002CB0  0E01               	movlw	1
  4257  002CB2  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4258  002CB4  EC0F  F01D         	call	_updateServoPosition	;wreg free
  4259                           
  4260                           ;sort.c: 205: updateServoPosition(1150, 3);
  4261  002CB8  0E04               	movlw	4
  4262  002CBA  0100               	movlb	0	; () banked
  4263  002CBC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4264  002CBE  0E7E               	movlw	126
  4265  002CC0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4266  002CC2  0E00               	movlw	0
  4267  002CC4  0100               	movlb	0	; () banked
  4268  002CC6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4269  002CC8  0E03               	movlw	3
  4270  002CCA  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4271  002CCC  EC0F  F01D         	call	_updateServoPosition	;wreg free
  4272                           
  4273                           ;sort.c: 206: f_can_coming_to_distribution = 0;
  4274  002CD0  0E00               	movlw	0
  4275  002CD2  6E70               	movwf	_f_can_coming_to_distribution+1,c
  4276  002CD4  0E00               	movlw	0
  4277  002CD6  6E6F               	movwf	_f_can_coming_to_distribution,c
  4278                           
  4279                           ;sort.c: 207: f_can_distributed = 1;
  4280  002CD8  0E00               	movlw	0
  4281  002CDA  6E72               	movwf	_f_can_distributed+1,c
  4282  002CDC  0E01               	movlw	1
  4283  002CDE  6E71               	movwf	_f_can_distributed,c
  4284                           
  4285                           ;sort.c: 208: if(f_lastCan == 1){
  4286  002CE0  0473               	decf	_f_lastCan,w,c
  4287  002CE2  1074               	iorwf	_f_lastCan+1,w,c
  4288  002CE4  A4D8               	btfss	status,2,c
  4289  002CE6  0012               	return	
  4290                           
  4291                           ;sort.c: 209: machine_state = DoneSorting_state;
  4292  002CE8  0E02               	movlw	2
  4293  002CEA  0100               	movlb	0	; () banked
  4294  002CEC  6FFC               	movwf	_machine_state& (0+255),b
  4295                           
  4296                           ; BSR set to: 0
  4297  002CEE  0012               	return	
  4298  002CF0                     __end_of_Distribution:
  4299                           	opt stack 0
  4300                           tblptru	equ	0xFF8
  4301                           tblptrh	equ	0xFF7
  4302                           tblptrl	equ	0xFF6
  4303                           tablat	equ	0xFF5
  4304                           prodh	equ	0xFF4
  4305                           prodl	equ	0xFF3
  4306                           postinc0	equ	0xFEE
  4307                           wreg	equ	0xFE8
  4308                           postdec1	equ	0xFE5
  4309                           fsr1l	equ	0xFE1
  4310                           indf2	equ	0xFDF
  4311                           postinc2	equ	0xFDE
  4312                           postdec2	equ	0xFDD
  4313                           fsr2h	equ	0xFDA
  4314                           fsr2l	equ	0xFD9
  4315                           status	equ	0xFD8
  4316                           
  4317 ;; *************** function _machineConfig *****************
  4318 ;; Defined at:
  4319 ;;		line 15 in file "MachineConfig.c"
  4320 ;; Parameters:    Size  Location     Type
  4321 ;;		None
  4322 ;; Auto vars:     Size  Location     Type
  4323 ;;		None
  4324 ;; Return value:  Size  Location     Type
  4325 ;;                  1    wreg      void 
  4326 ;; Registers used:
  4327 ;;		wreg, status,2
  4328 ;; Tracked objects:
  4329 ;;		On entry : 0/0
  4330 ;;		On exit  : 0/0
  4331 ;;		Unchanged: 0/0
  4332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4334 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4336 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4337 ;;Total ram usage:        0 bytes
  4338 ;; Hardware stack levels used:    1
  4339 ;; Hardware stack levels required when called:    7
  4340 ;; This function calls:
  4341 ;;		Nothing
  4342 ;; This function is called by:
  4343 ;;		_main
  4344 ;; This function uses a non-reentrant model
  4345 ;;
  4346                           
  4347                           	psect	text10
  4348  003C98                     __ptext10:
  4349                           	opt stack 0
  4350  003C98                     _machineConfig:
  4351                           	opt stack 23
  4352                           
  4353                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  4354                           
  4355                           ;incstack = 0
  4356  003C98  0EF0               	movlw	240
  4357  003C9A  6ED3               	movwf	4051,c	;volatile
  4358                           
  4359                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  4360  003C9C  8C9B               	bsf	3995,6,c	;volatile
  4361                           
  4362                           ;MachineConfig.c: 22: TRISA = 0b01000111;
  4363  003C9E  0E47               	movlw	71
  4364  003CA0  6E92               	movwf	3986,c	;volatile
  4365                           
  4366                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  4367  003CA2  0EF2               	movlw	242
  4368  003CA4  6E93               	movwf	3987,c	;volatile
  4369                           
  4370                           ;MachineConfig.c: 27: TRISC = 0x00;
  4371  003CA6  0E00               	movlw	0
  4372  003CA8  6E94               	movwf	3988,c	;volatile
  4373                           
  4374                           ;MachineConfig.c: 31: TRISD = 0x00;
  4375  003CAA  0E00               	movlw	0
  4376  003CAC  6E95               	movwf	3989,c	;volatile
  4377                           
  4378                           ;MachineConfig.c: 34: TRISE = 0x00;
  4379  003CAE  0E00               	movlw	0
  4380  003CB0  6E96               	movwf	3990,c	;volatile
  4381                           
  4382                           ;MachineConfig.c: 37: LATA = 0x00;
  4383  003CB2  0E00               	movlw	0
  4384  003CB4  6E89               	movwf	3977,c	;volatile
  4385                           
  4386                           ;MachineConfig.c: 38: LATB = 0x00;
  4387  003CB6  0E00               	movlw	0
  4388  003CB8  6E8A               	movwf	3978,c	;volatile
  4389                           
  4390                           ;MachineConfig.c: 39: LATC = 0x00;
  4391  003CBA  0E00               	movlw	0
  4392  003CBC  6E8B               	movwf	3979,c	;volatile
  4393                           
  4394                           ;MachineConfig.c: 40: LATD = 0x00;
  4395  003CBE  0E00               	movlw	0
  4396  003CC0  6E8C               	movwf	3980,c	;volatile
  4397                           
  4398                           ;MachineConfig.c: 41: LATE = 0x00;
  4399  003CC2  0E00               	movlw	0
  4400  003CC4  6E8D               	movwf	3981,c	;volatile
  4401                           
  4402                           ;MachineConfig.c: 43: nRBPU = 0;
  4403  003CC6  9EF1               	bcf	intcon2,7,c	;volatile
  4404                           
  4405                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  4406  003CC8  0E00               	movlw	0
  4407  003CCA  6EC2               	movwf	4034,c	;volatile
  4408                           
  4409                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  4410  003CCC  0E0D               	movlw	13
  4411  003CCE  6EC1               	movwf	4033,c	;volatile
  4412                           
  4413                           ;MachineConfig.c: 50: CVRCON = 0x00;
  4414  003CD0  0E00               	movlw	0
  4415  003CD2  6EB5               	movwf	4021,c	;volatile
  4416                           
  4417                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  4418  003CD4  96B4               	bcf	4020,3,c	;volatile
  4419                           
  4420                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  4421  003CD6  0EB1               	movlw	177
  4422  003CD8  6EC0               	movwf	4032,c	;volatile
  4423                           
  4424                           ;MachineConfig.c: 55: INT1IE = 1;
  4425  003CDA  86F0               	bsf	intcon3,3,c	;volatile
  4426                           
  4427                           ;MachineConfig.c: 57: TMR0IE = 1;
  4428  003CDC  8AF2               	bsf	intcon,5,c	;volatile
  4429                           
  4430                           ;MachineConfig.c: 58: TMR1IE = 1;
  4431  003CDE  809D               	bsf	3997,0,c	;volatile
  4432                           
  4433                           ;MachineConfig.c: 59: T1CON = 0b10110000;
  4434  003CE0  0EB0               	movlw	176
  4435  003CE2  6ECD               	movwf	4045,c	;volatile
  4436                           
  4437                           ;MachineConfig.c: 60: T3CON = 0b10110000;
  4438  003CE4  0EB0               	movlw	176
  4439  003CE6  6EB1               	movwf	4017,c	;volatile
  4440                           
  4441                           ;MachineConfig.c: 61: TMR2IE = 1;
  4442  003CE8  829D               	bsf	3997,1,c	;volatile
  4443                           
  4444                           ;MachineConfig.c: 62: TMR3IE = 1;
  4445  003CEA  82A0               	bsf	4000,1,c	;volatile
  4446                           
  4447                           ;MachineConfig.c: 63: PEIE = 1;
  4448  003CEC  8CF2               	bsf	intcon,6,c	;volatile
  4449                           
  4450                           ;MachineConfig.c: 64: ADIE = 0;
  4451  003CEE  9C9D               	bcf	3997,6,c	;volatile
  4452                           
  4453                           ;MachineConfig.c: 65: (INTCONbits.GIE = 0);
  4454  003CF0  9EF2               	bcf	intcon,7,c	;volatile
  4455  003CF2  0012               	return		;funcret
  4456  003CF4                     __end_of_machineConfig:
  4457                           	opt stack 0
  4458                           tblptru	equ	0xFF8
  4459                           tblptrh	equ	0xFF7
  4460                           tblptrl	equ	0xFF6
  4461                           tablat	equ	0xFF5
  4462                           prodh	equ	0xFF4
  4463                           prodl	equ	0xFF3
  4464                           intcon	equ	0xFF2
  4465                           intcon2	equ	0xFF1
  4466                           intcon3	equ	0xFF0
  4467                           postinc0	equ	0xFEE
  4468                           wreg	equ	0xFE8
  4469                           postdec1	equ	0xFE5
  4470                           fsr1l	equ	0xFE1
  4471                           indf2	equ	0xFDF
  4472                           postinc2	equ	0xFDE
  4473                           postdec2	equ	0xFDD
  4474                           fsr2h	equ	0xFDA
  4475                           fsr2l	equ	0xFD9
  4476                           status	equ	0xFD8
  4477                           
  4478 ;; *************** function _logRun *****************
  4479 ;; Defined at:
  4480 ;;		line 84 in file "EEPROM.c"
  4481 ;; Parameters:    Size  Location     Type
  4482 ;;		None
  4483 ;; Auto vars:     Size  Location     Type
  4484 ;;  byte_i          1   53[BANK0 ] unsigned char 
  4485 ;;  i               2   55[BANK0 ] int 
  4486 ;;  num             1   49[BANK0 ] unsigned char 
  4487 ;;  addr            2   57[BANK0 ] unsigned short 
  4488 ;;  byte11          1   54[BANK0 ] unsigned char 
  4489 ;;  byte3           1   52[BANK0 ] unsigned char 
  4490 ;;  byte2           1   51[BANK0 ] unsigned char 
  4491 ;;  byte1           1   50[BANK0 ] unsigned char 
  4492 ;; Return value:  Size  Location     Type
  4493 ;;                  1    wreg      void 
  4494 ;; Registers used:
  4495 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4496 ;; Tracked objects:
  4497 ;;		On entry : 0/0
  4498 ;;		On exit  : 0/0
  4499 ;;		Unchanged: 0/0
  4500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4502 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4504 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4505 ;;Total ram usage:       10 bytes
  4506 ;; Hardware stack levels used:    1
  4507 ;; Hardware stack levels required when called:   11
  4508 ;; This function calls:
  4509 ;;		_EEPROM_read
  4510 ;;		_EEPROM_write
  4511 ;; This function is called by:
  4512 ;;		_main
  4513 ;; This function uses a non-reentrant model
  4514 ;;
  4515                           
  4516                           	psect	text11
  4517  002CF0                     __ptext11:
  4518                           	opt stack 0
  4519  002CF0                     _logRun:
  4520                           	opt stack 19
  4521                           
  4522                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  4523                           
  4524                           ;incstack = 0
  4525  002CF0  0E00               	movlw	0
  4526  002CF2  0100               	movlb	0	; () banked
  4527  002CF4  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  4528  002CF6  0E00               	movlw	0
  4529  002CF8  6F80               	movwf	EEPROM_read@address& (0+255),b
  4530  002CFA  EC78  F022         	call	_EEPROM_read	;wreg free
  4531  002CFE  0100               	movlb	0	; () banked
  4532  002D00  6FFD               	movwf	_sel& (0+255),b
  4533                           
  4534                           ; BSR set to: 0
  4535                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  4536  002D02  0100               	movlb	0	; () banked
  4537  002D04  51FD               	movf	_sel& (0+255),w,b
  4538  002D06  0D0B               	mullw	11
  4539  002D08  0E01               	movlw	1
  4540  002D0A  24F3               	addwf	prodl,w,c
  4541  002D0C  0100               	movlb	0	; () banked
  4542  002D0E  6FB9               	movwf	logRun@addr& (0+255),b
  4543  002D10  0E00               	movlw	0
  4544  002D12  20F4               	addwfc	prodh,w,c
  4545  002D14  0100               	movlb	0	; () banked
  4546  002D16  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  4547                           
  4548                           ; BSR set to: 0
  4549                           ;EEPROM.c: 101: if (sel < 3){
  4550  002D18  0E03               	movlw	3
  4551  002D1A  0100               	movlb	0	; () banked
  4552  002D1C  61FD               	cpfslt	_sel& (0+255),b
  4553  002D1E  D00E               	goto	l7794
  4554                           
  4555                           ; BSR set to: 0
  4556                           ;EEPROM.c: 102: unsigned char num = sel+1;
  4557  002D20  0100               	movlb	0	; () banked
  4558  002D22  29FD               	incf	_sel& (0+255),w,b
  4559  002D24  0100               	movlb	0	; () banked
  4560  002D26  6FB1               	movwf	logRun@num& (0+255),b
  4561                           
  4562                           ; BSR set to: 0
  4563                           ;EEPROM.c: 103: EEPROM_write(0, num);
  4564  002D28  0E00               	movlw	0
  4565  002D2A  0100               	movlb	0	; () banked
  4566  002D2C  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  4567  002D2E  0E00               	movlw	0
  4568  002D30  6FAB               	movwf	EEPROM_write@address& (0+255),b
  4569  002D32  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  4570  002D36  EC37  F019         	call	_EEPROM_write	;wreg free
  4571                           
  4572                           ;EEPROM.c: 104: }
  4573  002D3A  D00A               	goto	l7796
  4574  002D3C                     l7794:
  4575                           
  4576                           ;EEPROM.c: 105: else{
  4577                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  4578  002D3C  0E00               	movlw	0
  4579  002D3E  0100               	movlb	0	; () banked
  4580  002D40  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  4581  002D42  0E00               	movlw	0
  4582  002D44  6FAB               	movwf	EEPROM_write@address& (0+255),b
  4583  002D46  0E00               	movlw	0
  4584  002D48  0100               	movlb	0	; () banked
  4585  002D4A  6FAD               	movwf	EEPROM_write@data& (0+255),b
  4586  002D4C  EC37  F019         	call	_EEPROM_write	;wreg free
  4587  002D50                     l7796:
  4588                           
  4589                           ;EEPROM.c: 107: }
  4590                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  4591  002D50  0100               	movlb	0	; () banked
  4592  002D52  51FE               	movf	_count_total& (0+255),w,b
  4593  002D54  0980               	iorlw	128
  4594  002D56  0100               	movlb	0	; () banked
  4595  002D58  6FB2               	movwf	logRun@byte1& (0+255),b
  4596                           
  4597                           ; BSR set to: 0
  4598                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  4599  002D5A  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4600  002D5E  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4601  002D62  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  4602  002D66  EC37  F019         	call	_EEPROM_write	;wreg free
  4603                           
  4604                           ;EEPROM.c: 112: addr++;
  4605  002D6A  0100               	movlb	0	; () banked
  4606  002D6C  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4607  002D6E  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4608                           
  4609                           ; BSR set to: 0
  4610                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  4611  002D70  3861               	swapf	_count_pop_no_tab,w,c
  4612  002D72  0BF0               	andlw	240
  4613  002D74  1063               	iorwf	_count_pop_w_tab,w,c
  4614  002D76  0100               	movlb	0	; () banked
  4615  002D78  6FB3               	movwf	logRun@byte2& (0+255),b
  4616                           
  4617                           ; BSR set to: 0
  4618                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  4619  002D7A  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4620  002D7E  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4621  002D82  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  4622  002D86  EC37  F019         	call	_EEPROM_write	;wreg free
  4623                           
  4624                           ;EEPROM.c: 117: addr++;
  4625  002D8A  0100               	movlb	0	; () banked
  4626  002D8C  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4627  002D8E  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4628                           
  4629                           ; BSR set to: 0
  4630                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  4631  002D90  385F               	swapf	_count_can_w_lab,w,c
  4632  002D92  0BF0               	andlw	240
  4633  002D94  105D               	iorwf	_count_can_no_lab,w,c
  4634  002D96  0100               	movlb	0	; () banked
  4635  002D98  6FB4               	movwf	logRun@byte3& (0+255),b
  4636                           
  4637                           ; BSR set to: 0
  4638                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  4639  002D9A  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4640  002D9E  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4641  002DA2  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  4642  002DA6  EC37  F019         	call	_EEPROM_write	;wreg free
  4643                           
  4644                           ;EEPROM.c: 120: addr++;
  4645  002DAA  0100               	movlb	0	; () banked
  4646  002DAC  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4647  002DAE  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4648                           
  4649                           ; BSR set to: 0
  4650                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  4651  002DB0  0E00               	movlw	0
  4652  002DB2  0100               	movlb	0	; () banked
  4653  002DB4  6FB8               	movwf	(logRun@i+1)& (0+255),b
  4654  002DB6  0E00               	movlw	0
  4655  002DB8  6FB7               	movwf	logRun@i& (0+255),b
  4656                           
  4657                           ; BSR set to: 0
  4658  002DBA  0100               	movlb	0	; () banked
  4659  002DBC  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  4660  002DBE  D008               	goto	l7820
  4661  002DC0  0100               	movlb	0	; () banked
  4662  002DC2  51B8               	movf	(logRun@i+1)& (0+255),w,b
  4663  002DC4  E128               	bnz	l935
  4664  002DC6  0E07               	movlw	7
  4665  002DC8  0100               	movlb	0	; () banked
  4666  002DCA  5DB7               	subwf	logRun@i& (0+255),w,b
  4667  002DCC  B0D8               	btfsc	status,0,c
  4668  002DCE  D023               	goto	l935
  4669  002DD0                     l7820:
  4670                           
  4671                           ; BSR set to: 0
  4672                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  4673  002DD0  90D8               	bcf	status,0,c
  4674  002DD2  0100               	movlb	0	; () banked
  4675  002DD4  35B7               	rlcf	logRun@i& (0+255),w,b
  4676  002DD6  6ED9               	movwf	fsr2l,c
  4677  002DD8  0100               	movlb	0	; () banked
  4678  002DDA  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  4679  002DDC  6EDA               	movwf	fsr2h,c
  4680  002DDE  0E0E               	movlw	low _startTime
  4681  002DE0  26D9               	addwf	fsr2l,f,c
  4682  002DE2  0E01               	movlw	high _startTime
  4683  002DE4  22DA               	addwfc	fsr2h,f,c
  4684  002DE6  50DF               	movf	indf2,w,c
  4685  002DE8  0100               	movlb	0	; () banked
  4686  002DEA  6FB5               	movwf	logRun@byte_i& (0+255),b
  4687                           
  4688                           ; BSR set to: 0
  4689                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  4690  002DEC  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4691  002DF0  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4692  002DF4  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  4693  002DF8  EC37  F019         	call	_EEPROM_write	;wreg free
  4694                           
  4695                           ;EEPROM.c: 126: addr++;
  4696  002DFC  0100               	movlb	0	; () banked
  4697  002DFE  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4698  002E00  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4699                           
  4700                           ; BSR set to: 0
  4701  002E02  0100               	movlb	0	; () banked
  4702  002E04  4BB7               	infsnz	logRun@i& (0+255),f,b
  4703  002E06  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  4704                           
  4705                           ; BSR set to: 0
  4706  002E08  0100               	movlb	0	; () banked
  4707  002E0A  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  4708  002E0C  D7E1               	goto	l7820
  4709  002E0E  0100               	movlb	0	; () banked
  4710  002E10  51B8               	movf	(logRun@i+1)& (0+255),w,b
  4711  002E12  E101               	bnz	u6680
  4712  002E14  D7D8               	goto	L5
  4713  002E16                     u6680:
  4714  002E16                     l935:
  4715                           
  4716                           ; BSR set to: 0
  4717                           ;EEPROM.c: 127: }
  4718                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  4719  002E16  C0F8  F0B6         	movff	_total_time,logRun@byte11
  4720                           
  4721                           ; BSR set to: 0
  4722                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  4723  002E1A  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4724  002E1E  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4725  002E22  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  4726  002E26  EC37  F019         	call	_EEPROM_write	;wreg free
  4727  002E2A  0012               	return		;funcret
  4728  002E2C                     __end_of_logRun:
  4729                           	opt stack 0
  4730                           tblptru	equ	0xFF8
  4731                           tblptrh	equ	0xFF7
  4732                           tblptrl	equ	0xFF6
  4733                           tablat	equ	0xFF5
  4734                           prodh	equ	0xFF4
  4735                           prodl	equ	0xFF3
  4736                           intcon	equ	0xFF2
  4737                           intcon2	equ	0xFF1
  4738                           intcon3	equ	0xFF0
  4739                           postinc0	equ	0xFEE
  4740                           wreg	equ	0xFE8
  4741                           postdec1	equ	0xFE5
  4742                           fsr1l	equ	0xFE1
  4743                           indf2	equ	0xFDF
  4744                           postinc2	equ	0xFDE
  4745                           postdec2	equ	0xFDD
  4746                           fsr2h	equ	0xFDA
  4747                           fsr2l	equ	0xFD9
  4748                           status	equ	0xFD8
  4749                           
  4750 ;; *************** function _EEPROM_write *****************
  4751 ;; Defined at:
  4752 ;;		line 32 in file "EEPROM.c"
  4753 ;; Parameters:    Size  Location     Type
  4754 ;;  address         2   43[BANK0 ] unsigned short 
  4755 ;;  data            1   45[BANK0 ] unsigned char 
  4756 ;; Auto vars:     Size  Location     Type
  4757 ;;  i               1   48[BANK0 ] unsigned char 
  4758 ;;  i               1   47[BANK0 ] unsigned char 
  4759 ;; Return value:  Size  Location     Type
  4760 ;;                  1    wreg      void 
  4761 ;; Registers used:
  4762 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4763 ;; Tracked objects:
  4764 ;;		On entry : 0/0
  4765 ;;		On exit  : 0/0
  4766 ;;		Unchanged: 0/0
  4767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4768 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4769 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4770 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4771 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4772 ;;Total ram usage:        6 bytes
  4773 ;; Hardware stack levels used:    1
  4774 ;; Hardware stack levels required when called:   10
  4775 ;; This function calls:
  4776 ;;		_EEPROM_read
  4777 ;;		_lcdInst
  4778 ;;		_printf
  4779 ;; This function is called by:
  4780 ;;		_Loading
  4781 ;;		_logRun
  4782 ;; This function uses a non-reentrant model
  4783 ;;
  4784                           
  4785                           	psect	text12
  4786  00326E                     __ptext12:
  4787                           	opt stack 0
  4788  00326E                     _EEPROM_write:
  4789                           	opt stack 18
  4790                           
  4791                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  4792                           
  4793                           ;incstack = 0
  4794  00326E  84A6               	bsf	4006,2,c	;volatile
  4795                           
  4796                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  4797  003270  0100               	movlb	0	; () banked
  4798  003272  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  4799  003274  6EAA               	movwf	4010,c	;volatile
  4800                           
  4801                           ; BSR set to: 0
  4802                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  4803  003276  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  4804                           
  4805                           ; BSR set to: 0
  4806                           ;EEPROM.c: 39: EEDATA = data;
  4807  00327A  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  4808                           
  4809                           ; BSR set to: 0
  4810                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  4811  00327E  9EA6               	bcf	4006,7,c	;volatile
  4812                           
  4813                           ; BSR set to: 0
  4814                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  4815  003280  9CA6               	bcf	4006,6,c	;volatile
  4816                           
  4817                           ; BSR set to: 0
  4818                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  4819  003282  9EF2               	bcf	intcon,7,c	;volatile
  4820                           
  4821                           ;EEPROM.c: 45: EECON2 = 0x55;
  4822  003284  0E55               	movlw	85
  4823  003286  6EA7               	movwf	4007,c	;volatile
  4824                           
  4825                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  4826  003288  0EAA               	movlw	170
  4827  00328A  6EA7               	movwf	4007,c	;volatile
  4828                           
  4829                           ; BSR set to: 0
  4830                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  4831  00328C  82A6               	bsf	4006,1,c	;volatile
  4832                           
  4833                           ; BSR set to: 0
  4834                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  4835  00328E  8EF2               	bsf	intcon,7,c	;volatile
  4836  003290                     l913:
  4837  003290  A8A1               	btfss	4001,4,c	;volatile
  4838  003292  D7FE               	goto	l913
  4839                           
  4840                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  4841  003294  98A1               	bcf	4001,4,c	;volatile
  4842                           
  4843                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  4844  003296  94A6               	bcf	4006,2,c	;volatile
  4845                           
  4846                           ;EEPROM.c: 57: if(debug){
  4847  003298  0100               	movlb	0	; () banked
  4848  00329A  51E0               	movf	_debug& (0+255),w,b
  4849  00329C  0100               	movlb	0	; () banked
  4850  00329E  11E1               	iorwf	(_debug+1)& (0+255),w,b
  4851  0032A0  B4D8               	btfsc	status,2,c
  4852  0032A2  0012               	return	
  4853                           
  4854                           ; BSR set to: 0
  4855                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4856  0032A4  0E01               	movlw	1
  4857  0032A6  ECB5  F022         	call	_lcdInst
  4858  0032AA  0E68               	movlw	104
  4859  0032AC  0100               	movlb	0	; () banked
  4860  0032AE  6FAE               	movwf	??_EEPROM_write& (0+255),b
  4861  0032B0  0EE4               	movlw	228
  4862  0032B2                     u6947:
  4863  0032B2  2EE8               	decfsz	wreg,f,c
  4864  0032B4  D7FE               	bra	u6947
  4865  0032B6  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  4866  0032B8  D7FC               	bra	u6947
  4867  0032BA  F000               	nop	
  4868                           
  4869                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  4870  0032BC  0E80               	movlw	128
  4871  0032BE  ECB5  F022         	call	_lcdInst
  4872                           
  4873                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  4874  0032C2  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  4875  0032C6  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  4876  0032CA  EC78  F022         	call	_EEPROM_read	;wreg free
  4877  0032CE  0100               	movlb	0	; () banked
  4878  0032D0  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  4879  0032D2  A4D8               	btfss	status,2,c
  4880  0032D4  D024               	goto	l5946
  4881                           
  4882                           ; BSR set to: 0
  4883                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  4884  0032D6  0E5A               	movlw	low STR_66
  4885  0032D8  0100               	movlb	0	; () banked
  4886  0032DA  6F8E               	movwf	printf@f& (0+255),b
  4887  0032DC  0EFB               	movlw	high STR_66
  4888  0032DE  0100               	movlb	0	; () banked
  4889  0032E0  6F8F               	movwf	(printf@f+1)& (0+255),b
  4890  0032E2  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  4891  0032E6  0100               	movlb	0	; () banked
  4892  0032E8  6B91               	clrf	(?_printf+3)& (0+255),b
  4893  0032EA  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  4894  0032EE  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  4895  0032F2  EC9C  F008         	call	_printf	;wreg free
  4896                           
  4897                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  4898  0032F6  0E00               	movlw	0
  4899  0032F8  0100               	movlb	0	; () banked
  4900  0032FA  6FAF               	movwf	EEPROM_write@i& (0+255),b
  4901  0032FC                     l5938:
  4902                           
  4903                           ; BSR set to: 0
  4904  0032FC  0E63               	movlw	99
  4905  0032FE  0100               	movlb	0	; () banked
  4906  003300  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  4907  003302  D001               	goto	l5942
  4908  003304  0012               	return	
  4909  003306                     l5942:
  4910                           
  4911                           ; BSR set to: 0
  4912  003306  0E68               	movlw	104
  4913  003308  0100               	movlb	0	; () banked
  4914  00330A  6FAE               	movwf	??_EEPROM_write& (0+255),b
  4915  00330C  0EE4               	movlw	228
  4916  00330E                     u6957:
  4917  00330E  2EE8               	decfsz	wreg,f,c
  4918  003310  D7FE               	bra	u6957
  4919  003312  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  4920  003314  D7FC               	bra	u6957
  4921  003316  F000               	nop	
  4922  003318  0100               	movlb	0	; () banked
  4923  00331A  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  4924  00331C  D7EF               	goto	l5938
  4925  00331E                     l5946:
  4926                           
  4927                           ; BSR set to: 0
  4928                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  4929  00331E  0EBC               	movlw	low STR_67
  4930  003320  0100               	movlb	0	; () banked
  4931  003322  6F8E               	movwf	printf@f& (0+255),b
  4932  003324  0EFF               	movlw	high STR_67
  4933  003326  0100               	movlb	0	; () banked
  4934  003328  6F8F               	movwf	(printf@f+1)& (0+255),b
  4935  00332A  EC9C  F008         	call	_printf	;wreg free
  4936  00332E  0E00               	movlw	0
  4937  003330  0100               	movlb	0	; () banked
  4938  003332  6FB0               	movwf	EEPROM_write@i_1319& (0+255),b
  4939  003334                     l5950:
  4940                           
  4941                           ; BSR set to: 0
  4942  003334  0E63               	movlw	99
  4943  003336  0100               	movlb	0	; () banked
  4944  003338  65B0               	cpfsgt	EEPROM_write@i_1319& (0+255),b
  4945  00333A  D001               	goto	l5954
  4946  00333C  0012               	return	
  4947  00333E                     l5954:
  4948                           
  4949                           ; BSR set to: 0
  4950  00333E  0E68               	movlw	104
  4951  003340  0100               	movlb	0	; () banked
  4952  003342  6FAE               	movwf	??_EEPROM_write& (0+255),b
  4953  003344  0EE4               	movlw	228
  4954  003346                     u6967:
  4955  003346  2EE8               	decfsz	wreg,f,c
  4956  003348  D7FE               	bra	u6967
  4957  00334A  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  4958  00334C  D7FC               	bra	u6967
  4959  00334E  F000               	nop	
  4960  003350  0100               	movlb	0	; () banked
  4961  003352  2BB0               	incf	EEPROM_write@i_1319& (0+255),f,b
  4962  003354  D7EF               	goto	l5950
  4963  003356                     __end_of_EEPROM_write:
  4964                           	opt stack 0
  4965                           tblptru	equ	0xFF8
  4966                           tblptrh	equ	0xFF7
  4967                           tblptrl	equ	0xFF6
  4968                           tablat	equ	0xFF5
  4969                           prodh	equ	0xFF4
  4970                           prodl	equ	0xFF3
  4971                           intcon	equ	0xFF2
  4972                           intcon2	equ	0xFF1
  4973                           intcon3	equ	0xFF0
  4974                           postinc0	equ	0xFEE
  4975                           wreg	equ	0xFE8
  4976                           postdec1	equ	0xFE5
  4977                           fsr1l	equ	0xFE1
  4978                           indf2	equ	0xFDF
  4979                           postinc2	equ	0xFDE
  4980                           postdec2	equ	0xFDD
  4981                           fsr2h	equ	0xFDA
  4982                           fsr2l	equ	0xFD9
  4983                           status	equ	0xFD8
  4984                           
  4985 ;; *************** function _EEPROM_read *****************
  4986 ;; Defined at:
  4987 ;;		line 68 in file "EEPROM.c"
  4988 ;; Parameters:    Size  Location     Type
  4989 ;;  address         2    0[BANK0 ] unsigned short 
  4990 ;; Auto vars:     Size  Location     Type
  4991 ;;		None
  4992 ;; Return value:  Size  Location     Type
  4993 ;;                  1    wreg      unsigned char 
  4994 ;; Registers used:
  4995 ;;		wreg, status,2
  4996 ;; Tracked objects:
  4997 ;;		On entry : 0/0
  4998 ;;		On exit  : 0/0
  4999 ;;		Unchanged: 0/0
  5000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5001 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5004 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5005 ;;Total ram usage:        2 bytes
  5006 ;; Hardware stack levels used:    1
  5007 ;; Hardware stack levels required when called:    7
  5008 ;; This function calls:
  5009 ;;		Nothing
  5010 ;; This function is called by:
  5011 ;;		_Loading
  5012 ;;		_EEPROM_write
  5013 ;;		_logRun
  5014 ;; This function uses a non-reentrant model
  5015 ;;
  5016                           
  5017                           	psect	text13
  5018  0044F0                     __ptext13:
  5019                           	opt stack 0
  5020  0044F0                     _EEPROM_read:
  5021                           	opt stack 20
  5022                           
  5023                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  5024                           
  5025                           ; BSR set to: 0
  5026                           ;incstack = 0
  5027  0044F0  0100               	movlb	0	; () banked
  5028  0044F2  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  5029  0044F4  6EAA               	movwf	4010,c	;volatile
  5030                           
  5031                           ; BSR set to: 0
  5032                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  5033  0044F6  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  5034                           
  5035                           ; BSR set to: 0
  5036                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  5037  0044FA  9EA6               	bcf	4006,7,c	;volatile
  5038                           
  5039                           ; BSR set to: 0
  5040                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  5041  0044FC  9CA6               	bcf	4006,6,c	;volatile
  5042                           
  5043                           ; BSR set to: 0
  5044                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  5045  0044FE  80A6               	bsf	4006,0,c	;volatile
  5046  004500                     l926:
  5047  004500  B0A6               	btfsc	4006,0,c	;volatile
  5048  004502  D7FE               	goto	l926
  5049                           
  5050                           ;EEPROM.c: 81: return EEDATA;
  5051  004504  50A8               	movf	4008,w,c	;volatile
  5052  004506  0012               	return	
  5053  004508                     __end_of_EEPROM_read:
  5054                           	opt stack 0
  5055                           tblptru	equ	0xFF8
  5056                           tblptrh	equ	0xFF7
  5057                           tblptrl	equ	0xFF6
  5058                           tablat	equ	0xFF5
  5059                           prodh	equ	0xFF4
  5060                           prodl	equ	0xFF3
  5061                           intcon	equ	0xFF2
  5062                           intcon2	equ	0xFF1
  5063                           intcon3	equ	0xFF0
  5064                           postinc0	equ	0xFEE
  5065                           wreg	equ	0xFE8
  5066                           postdec1	equ	0xFE5
  5067                           fsr1l	equ	0xFE1
  5068                           indf2	equ	0xFDF
  5069                           postinc2	equ	0xFDE
  5070                           postdec2	equ	0xFDD
  5071                           fsr2h	equ	0xFDA
  5072                           fsr2l	equ	0xFD9
  5073                           status	equ	0xFD8
  5074                           
  5075 ;; *************** function _initUI *****************
  5076 ;; Defined at:
  5077 ;;		line 62 in file "UI.c"
  5078 ;; Parameters:    Size  Location     Type
  5079 ;;		None
  5080 ;; Auto vars:     Size  Location     Type
  5081 ;;		None
  5082 ;; Return value:  Size  Location     Type
  5083 ;;                  1    wreg      void 
  5084 ;; Registers used:
  5085 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5086 ;; Tracked objects:
  5087 ;;		On entry : 0/0
  5088 ;;		On exit  : 0/0
  5089 ;;		Unchanged: 0/0
  5090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5094 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5095 ;;Total ram usage:        0 bytes
  5096 ;; Hardware stack levels used:    1
  5097 ;; Hardware stack levels required when called:   12
  5098 ;; This function calls:
  5099 ;;		_change_state_to_menu_start
  5100 ;;		_loadRTC
  5101 ;; This function is called by:
  5102 ;;		_main
  5103 ;; This function uses a non-reentrant model
  5104 ;;
  5105                           
  5106                           	psect	text14
  5107  004446                     __ptext14:
  5108                           	opt stack 0
  5109  004446                     _initUI:
  5110                           	opt stack 18
  5111                           
  5112                           ;UI.c: 63: (INTCONbits.GIE = 1);
  5113                           
  5114                           ;incstack = 0
  5115  004446  8EF2               	bsf	intcon,7,c	;volatile
  5116                           
  5117                           ;UI.c: 64: machine_state = UI_state;
  5118  004448  0E00               	movlw	0
  5119  00444A  0100               	movlb	0	; () banked
  5120  00444C  6FFC               	movwf	_machine_state& (0+255),b
  5121                           
  5122                           ;UI.c: 65: logstate = 0;
  5123  00444E  0E00               	movlw	0
  5124  004450  0100               	movlb	0	; () banked
  5125  004452  6FF7               	movwf	(_logstate+1)& (0+255),b
  5126  004454  0E00               	movlw	0
  5127  004456  6FF6               	movwf	_logstate& (0+255),b
  5128                           
  5129                           ; BSR set to: 0
  5130                           ;UI.c: 67: loadRTC();
  5131  004458  ECC4  F01B         	call	_loadRTC	;wreg free
  5132                           
  5133                           ;UI.c: 69: change_state_to_menu_start();
  5134  00445C  EC94  F021         	call	_change_state_to_menu_start	;wreg free
  5135                           
  5136                           ;UI.c: 70: firstboot = 1;
  5137  004460  0E00               	movlw	0
  5138  004462  6E76               	movwf	_firstboot+1,c
  5139  004464  0E01               	movlw	1
  5140  004466  6E75               	movwf	_firstboot,c
  5141  004468  0012               	return		;funcret
  5142  00446A                     __end_of_initUI:
  5143                           	opt stack 0
  5144                           tblptru	equ	0xFF8
  5145                           tblptrh	equ	0xFF7
  5146                           tblptrl	equ	0xFF6
  5147                           tablat	equ	0xFF5
  5148                           prodh	equ	0xFF4
  5149                           prodl	equ	0xFF3
  5150                           intcon	equ	0xFF2
  5151                           intcon2	equ	0xFF1
  5152                           intcon3	equ	0xFF0
  5153                           postinc0	equ	0xFEE
  5154                           wreg	equ	0xFE8
  5155                           postdec1	equ	0xFE5
  5156                           fsr1l	equ	0xFE1
  5157                           indf2	equ	0xFDF
  5158                           postinc2	equ	0xFDE
  5159                           postdec2	equ	0xFDD
  5160                           fsr2h	equ	0xFDA
  5161                           fsr2l	equ	0xFD9
  5162                           status	equ	0xFD8
  5163                           
  5164 ;; *************** function _loadRTC *****************
  5165 ;; Defined at:
  5166 ;;		line 28 in file "RTC.c"
  5167 ;; Parameters:    Size  Location     Type
  5168 ;;		None
  5169 ;; Auto vars:     Size  Location     Type
  5170 ;;  i               2   22[BANK0 ] int 
  5171 ;; Return value:  Size  Location     Type
  5172 ;;                  1    wreg      void 
  5173 ;; Registers used:
  5174 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5175 ;; Tracked objects:
  5176 ;;		On entry : 0/0
  5177 ;;		On exit  : 0/0
  5178 ;;		Unchanged: 0/0
  5179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5181 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5182 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5183 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5184 ;;Total ram usage:        3 bytes
  5185 ;; Hardware stack levels used:    1
  5186 ;; Hardware stack levels required when called:    9
  5187 ;; This function calls:
  5188 ;;		_I2C_Master_Init
  5189 ;;		_I2C_Master_Start
  5190 ;;		_I2C_Master_Stop
  5191 ;;		_I2C_Master_Write
  5192 ;; This function is called by:
  5193 ;;		_initUI
  5194 ;; This function uses a non-reentrant model
  5195 ;;
  5196                           
  5197                           	psect	text15
  5198  003788                     __ptext15:
  5199                           	opt stack 0
  5200  003788                     _loadRTC:
  5201                           	opt stack 20
  5202                           
  5203                           ;RTC.c: 30: I2C_Master_Init(10000);
  5204                           
  5205                           ;incstack = 0
  5206  003788  0E10               	movlw	16
  5207  00378A  0100               	movlb	0	; () banked
  5208  00378C  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  5209  00378E  0E27               	movlw	39
  5210  003790  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  5211  003792  0E00               	movlw	0
  5212  003794  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  5213  003796  0E00               	movlw	0
  5214  003798  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  5215  00379A  EC1C  F01E         	call	_I2C_Master_Init	;wreg free
  5216                           
  5217                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  5218  00379E  9EF2               	bcf	intcon,7,c	;volatile
  5219                           
  5220                           ;RTC.c: 34: I2C_Master_Start();
  5221  0037A0  ECDB  F022         	call	_I2C_Master_Start	;wreg free
  5222                           
  5223                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  5224  0037A4  0E00               	movlw	0
  5225  0037A6  0100               	movlb	0	; () banked
  5226  0037A8  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5227  0037AA  0ED0               	movlw	208
  5228  0037AC  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5229  0037AE  ECC9  F022         	call	_I2C_Master_Write	;wreg free
  5230                           
  5231                           ;RTC.c: 36: I2C_Master_Write(0x00);
  5232  0037B2  0E00               	movlw	0
  5233  0037B4  0100               	movlb	0	; () banked
  5234  0037B6  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5235  0037B8  0E00               	movlw	0
  5236  0037BA  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5237  0037BC  ECC9  F022         	call	_I2C_Master_Write	;wreg free
  5238                           
  5239                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  5240  0037C0  0E00               	movlw	0
  5241  0037C2  0100               	movlb	0	; () banked
  5242  0037C4  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  5243  0037C6  0E00               	movlw	0
  5244  0037C8  6F96               	movwf	loadRTC@i& (0+255),b
  5245  0037CA                     l6070:
  5246                           
  5247                           ; BSR set to: 0
  5248  0037CA  0100               	movlb	0	; () banked
  5249  0037CC  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  5250  0037CE  D008               	goto	l6074
  5251  0037D0  0100               	movlb	0	; () banked
  5252  0037D2  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  5253  0037D4  E11B               	bnz	l6080
  5254  0037D6  0E07               	movlw	7
  5255  0037D8  0100               	movlb	0	; () banked
  5256  0037DA  5D96               	subwf	loadRTC@i& (0+255),w,b
  5257  0037DC  B0D8               	btfsc	status,0,c
  5258  0037DE  D016               	goto	l6080
  5259  0037E0                     l6074:
  5260                           
  5261                           ; BSR set to: 0
  5262                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  5263  0037E0  0E24               	movlw	low _time
  5264  0037E2  0100               	movlb	0	; () banked
  5265  0037E4  2596               	addwf	loadRTC@i& (0+255),w,b
  5266  0037E6  6ED9               	movwf	fsr2l,c
  5267  0037E8  0E01               	movlw	high _time
  5268  0037EA  0100               	movlb	0	; () banked
  5269  0037EC  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  5270  0037EE  6EDA               	movwf	fsr2h,c
  5271  0037F0  50DF               	movf	indf2,w,c
  5272  0037F2  0100               	movlb	0	; () banked
  5273  0037F4  6F95               	movwf	??_loadRTC& (0+255),b
  5274  0037F6  0100               	movlb	0	; () banked
  5275  0037F8  5195               	movf	??_loadRTC& (0+255),w,b
  5276  0037FA  0100               	movlb	0	; () banked
  5277  0037FC  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5278  0037FE  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  5279  003800  ECC9  F022         	call	_I2C_Master_Write	;wreg free
  5280  003804  0100               	movlb	0	; () banked
  5281  003806  4B96               	infsnz	loadRTC@i& (0+255),f,b
  5282  003808  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  5283  00380A  D7DF               	goto	l6070
  5284  00380C                     l6080:
  5285                           
  5286                           ; BSR set to: 0
  5287                           ;RTC.c: 39: }
  5288                           ;RTC.c: 40: I2C_Master_Stop();
  5289  00380C  ECD7  F022         	call	_I2C_Master_Stop	;wreg free
  5290                           
  5291                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  5292  003810  8EF2               	bsf	intcon,7,c	;volatile
  5293  003812  0012               	return		;funcret
  5294  003814                     __end_of_loadRTC:
  5295                           	opt stack 0
  5296                           tblptru	equ	0xFF8
  5297                           tblptrh	equ	0xFF7
  5298                           tblptrl	equ	0xFF6
  5299                           tablat	equ	0xFF5
  5300                           prodh	equ	0xFF4
  5301                           prodl	equ	0xFF3
  5302                           intcon	equ	0xFF2
  5303                           intcon2	equ	0xFF1
  5304                           intcon3	equ	0xFF0
  5305                           postinc0	equ	0xFEE
  5306                           wreg	equ	0xFE8
  5307                           postdec1	equ	0xFE5
  5308                           fsr1l	equ	0xFE1
  5309                           indf2	equ	0xFDF
  5310                           postinc2	equ	0xFDE
  5311                           postdec2	equ	0xFDD
  5312                           fsr2h	equ	0xFDA
  5313                           fsr2l	equ	0xFD9
  5314                           status	equ	0xFD8
  5315                           
  5316 ;; *************** function _I2C_Master_Init *****************
  5317 ;; Defined at:
  5318 ;;		line 15 in file "I2C.c"
  5319 ;; Parameters:    Size  Location     Type
  5320 ;;  c               4   13[BANK0 ] const unsigned long 
  5321 ;; Auto vars:     Size  Location     Type
  5322 ;;		None
  5323 ;; Return value:  Size  Location     Type
  5324 ;;                  1    wreg      void 
  5325 ;; Registers used:
  5326 ;;		wreg, status,2, status,0, cstack
  5327 ;; Tracked objects:
  5328 ;;		On entry : 0/0
  5329 ;;		On exit  : 0/0
  5330 ;;		Unchanged: 0/0
  5331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5332 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5334 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5335 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5336 ;;Total ram usage:        8 bytes
  5337 ;; Hardware stack levels used:    1
  5338 ;; Hardware stack levels required when called:    8
  5339 ;; This function calls:
  5340 ;;		___lldiv
  5341 ;; This function is called by:
  5342 ;;		_loadRTC
  5343 ;; This function uses a non-reentrant model
  5344 ;;
  5345                           
  5346                           	psect	text16
  5347  003C38                     __ptext16:
  5348                           	opt stack 0
  5349  003C38                     _I2C_Master_Init:
  5350                           	opt stack 20
  5351                           
  5352                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  5353                           
  5354                           ;incstack = 0
  5355  003C38  0E00               	movlw	0
  5356  003C3A  6EC7               	movwf	4039,c	;volatile
  5357                           
  5358                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  5359  003C3C  0E28               	movlw	40
  5360  003C3E  6EC6               	movwf	4038,c	;volatile
  5361                           
  5362                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  5363  003C40  0E00               	movlw	0
  5364  003C42  6EC5               	movwf	4037,c	;volatile
  5365                           
  5366                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  5367  003C44  0E00               	movlw	0
  5368  003C46  0100               	movlb	0	; () banked
  5369  003C48  6F80               	movwf	___lldiv@dividend& (0+255),b
  5370  003C4A  0E48               	movlw	72
  5371  003C4C  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  5372  003C4E  0EE8               	movlw	232
  5373  003C50  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  5374  003C52  0E01               	movlw	1
  5375  003C54  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  5376  003C56  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  5377  003C5A  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  5378  003C5E  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  5379  003C62  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  5380  003C66  0E02               	movlw	2
  5381  003C68                     u4375:
  5382  003C68  90D8               	bcf	status,0,c
  5383  003C6A  0100               	movlb	0	; () banked
  5384  003C6C  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  5385  003C6E  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  5386  003C70  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  5387  003C72  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  5388  003C74  2EE8               	decfsz	wreg,f,c
  5389  003C76  D7F8               	goto	u4375
  5390  003C78  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  5391  003C7C  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5392  003C80  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5393  003C84  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5394  003C88  EC75  F01A         	call	___lldiv	;wreg free
  5395  003C8C  0100               	movlb	0	; () banked
  5396  003C8E  0580               	decf	?___lldiv& (0+255),w,b
  5397  003C90  6EC8               	movwf	4040,c	;volatile
  5398                           
  5399                           ; BSR set to: 0
  5400                           ;I2C.c: 22: TRISC3 = 1;
  5401  003C92  8694               	bsf	3988,3,c	;volatile
  5402                           
  5403                           ; BSR set to: 0
  5404                           ;I2C.c: 23: TRISC4 = 1;
  5405  003C94  8894               	bsf	3988,4,c	;volatile
  5406                           
  5407                           ; BSR set to: 0
  5408  003C96  0012               	return		;funcret
  5409  003C98                     __end_of_I2C_Master_Init:
  5410                           	opt stack 0
  5411                           tblptru	equ	0xFF8
  5412                           tblptrh	equ	0xFF7
  5413                           tblptrl	equ	0xFF6
  5414                           tablat	equ	0xFF5
  5415                           prodh	equ	0xFF4
  5416                           prodl	equ	0xFF3
  5417                           intcon	equ	0xFF2
  5418                           intcon2	equ	0xFF1
  5419                           intcon3	equ	0xFF0
  5420                           postinc0	equ	0xFEE
  5421                           wreg	equ	0xFE8
  5422                           postdec1	equ	0xFE5
  5423                           fsr1l	equ	0xFE1
  5424                           indf2	equ	0xFDF
  5425                           postinc2	equ	0xFDE
  5426                           postdec2	equ	0xFDD
  5427                           fsr2h	equ	0xFDA
  5428                           fsr2l	equ	0xFD9
  5429                           status	equ	0xFD8
  5430                           
  5431 ;; *************** function ___lldiv *****************
  5432 ;; Defined at:
  5433 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5434 ;; Parameters:    Size  Location     Type
  5435 ;;  dividend        4    0[BANK0 ] unsigned long 
  5436 ;;  divisor         4    4[BANK0 ] unsigned long 
  5437 ;; Auto vars:     Size  Location     Type
  5438 ;;  quotient        4    8[BANK0 ] unsigned long 
  5439 ;;  counter         1   12[BANK0 ] unsigned char 
  5440 ;; Return value:  Size  Location     Type
  5441 ;;                  4    0[BANK0 ] unsigned long 
  5442 ;; Registers used:
  5443 ;;		wreg, status,2, status,0
  5444 ;; Tracked objects:
  5445 ;;		On entry : 0/0
  5446 ;;		On exit  : 0/0
  5447 ;;		Unchanged: 0/0
  5448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5449 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5450 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5452 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5453 ;;Total ram usage:       13 bytes
  5454 ;; Hardware stack levels used:    1
  5455 ;; Hardware stack levels required when called:    7
  5456 ;; This function calls:
  5457 ;;		Nothing
  5458 ;; This function is called by:
  5459 ;;		_I2C_Master_Init
  5460 ;; This function uses a non-reentrant model
  5461 ;;
  5462                           
  5463                           	psect	text17
  5464  0034EA                     __ptext17:
  5465                           	opt stack 0
  5466  0034EA                     ___lldiv:
  5467                           	opt stack 20
  5468                           
  5469                           ; BSR set to: 0
  5470                           ;incstack = 0
  5471  0034EA  0E00               	movlw	0
  5472  0034EC  0100               	movlb	0	; () banked
  5473  0034EE  6F88               	movwf	___lldiv@quotient& (0+255),b
  5474  0034F0  0E00               	movlw	0
  5475  0034F2  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  5476  0034F4  0E00               	movlw	0
  5477  0034F6  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  5478  0034F8  0E00               	movlw	0
  5479  0034FA  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  5480                           
  5481                           ; BSR set to: 0
  5482  0034FC  0100               	movlb	0	; () banked
  5483  0034FE  5184               	movf	___lldiv@divisor& (0+255),w,b
  5484  003500  0100               	movlb	0	; () banked
  5485  003502  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  5486  003504  0100               	movlb	0	; () banked
  5487  003506  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  5488  003508  0100               	movlb	0	; () banked
  5489  00350A  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  5490  00350C  B4D8               	btfsc	status,2,c
  5491  00350E  D042               	goto	l1626
  5492                           
  5493                           ; BSR set to: 0
  5494  003510  0E01               	movlw	1
  5495  003512  0100               	movlb	0	; () banked
  5496  003514  6F8C               	movwf	___lldiv@counter& (0+255),b
  5497  003516  D008               	goto	l5510
  5498  003518                     l5508:
  5499                           
  5500                           ; BSR set to: 0
  5501  003518  0100               	movlb	0	; () banked
  5502  00351A  90D8               	bcf	status,0,c
  5503  00351C  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  5504  00351E  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  5505  003520  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  5506  003522  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  5507  003524  0100               	movlb	0	; () banked
  5508  003526  2B8C               	incf	___lldiv@counter& (0+255),f,b
  5509  003528                     l5510:
  5510                           
  5511                           ; BSR set to: 0
  5512  003528  0100               	movlb	0	; () banked
  5513  00352A  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  5514  00352C  D7F5               	goto	l5508
  5515  00352E                     l5512:
  5516                           
  5517                           ; BSR set to: 0
  5518  00352E  0100               	movlb	0	; () banked
  5519  003530  90D8               	bcf	status,0,c
  5520  003532  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  5521  003534  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  5522  003536  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  5523  003538  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  5524                           
  5525                           ; BSR set to: 0
  5526  00353A  0100               	movlb	0	; () banked
  5527  00353C  5184               	movf	___lldiv@divisor& (0+255),w,b
  5528  00353E  0100               	movlb	0	; () banked
  5529  003540  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  5530  003542  0100               	movlb	0	; () banked
  5531  003544  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5532  003546  0100               	movlb	0	; () banked
  5533  003548  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  5534  00354A  0100               	movlb	0	; () banked
  5535  00354C  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5536  00354E  0100               	movlb	0	; () banked
  5537  003550  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  5538  003552  0100               	movlb	0	; () banked
  5539  003554  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5540  003556  0100               	movlb	0	; () banked
  5541  003558  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  5542  00355A  A0D8               	btfss	status,0,c
  5543  00355C  D012               	goto	l5520
  5544                           
  5545                           ; BSR set to: 0
  5546  00355E  0100               	movlb	0	; () banked
  5547  003560  5184               	movf	___lldiv@divisor& (0+255),w,b
  5548  003562  0100               	movlb	0	; () banked
  5549  003564  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  5550  003566  0100               	movlb	0	; () banked
  5551  003568  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5552  00356A  0100               	movlb	0	; () banked
  5553  00356C  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  5554  00356E  0100               	movlb	0	; () banked
  5555  003570  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5556  003572  0100               	movlb	0	; () banked
  5557  003574  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  5558  003576  0100               	movlb	0	; () banked
  5559  003578  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5560  00357A  0100               	movlb	0	; () banked
  5561  00357C  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  5562                           
  5563                           ; BSR set to: 0
  5564  00357E  0100               	movlb	0	; () banked
  5565  003580  8188               	bsf	___lldiv@quotient& (0+255),0,b
  5566  003582                     l5520:
  5567                           
  5568                           ; BSR set to: 0
  5569  003582  0100               	movlb	0	; () banked
  5570  003584  90D8               	bcf	status,0,c
  5571  003586  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  5572  003588  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  5573  00358A  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  5574  00358C  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  5575                           
  5576                           ; BSR set to: 0
  5577  00358E  0100               	movlb	0	; () banked
  5578  003590  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  5579  003592  D7CD               	goto	l5512
  5580  003594                     l1626:
  5581                           
  5582                           ; BSR set to: 0
  5583  003594  C088  F080         	movff	___lldiv@quotient,?___lldiv
  5584  003598  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  5585  00359C  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  5586  0035A0  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  5587                           
  5588                           ; BSR set to: 0
  5589  0035A4  0012               	return		;funcret
  5590  0035A6                     __end_of___lldiv:
  5591                           	opt stack 0
  5592                           tblptru	equ	0xFF8
  5593                           tblptrh	equ	0xFF7
  5594                           tblptrl	equ	0xFF6
  5595                           tablat	equ	0xFF5
  5596                           prodh	equ	0xFF4
  5597                           prodl	equ	0xFF3
  5598                           intcon	equ	0xFF2
  5599                           intcon2	equ	0xFF1
  5600                           intcon3	equ	0xFF0
  5601                           postinc0	equ	0xFEE
  5602                           wreg	equ	0xFE8
  5603                           postdec1	equ	0xFE5
  5604                           fsr1l	equ	0xFE1
  5605                           indf2	equ	0xFDF
  5606                           postinc2	equ	0xFDE
  5607                           postdec2	equ	0xFDD
  5608                           fsr2h	equ	0xFDA
  5609                           fsr2l	equ	0xFD9
  5610                           status	equ	0xFD8
  5611                           
  5612 ;; *************** function _change_state_to_menu_start *****************
  5613 ;; Defined at:
  5614 ;;		line 472 in file "UI.c"
  5615 ;; Parameters:    Size  Location     Type
  5616 ;;		None
  5617 ;; Auto vars:     Size  Location     Type
  5618 ;;		None
  5619 ;; Return value:  Size  Location     Type
  5620 ;;                  1    wreg      void 
  5621 ;; Registers used:
  5622 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5623 ;; Tracked objects:
  5624 ;;		On entry : 0/0
  5625 ;;		On exit  : 0/0
  5626 ;;		Unchanged: 0/0
  5627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5631 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5632 ;;Total ram usage:        0 bytes
  5633 ;; Hardware stack levels used:    1
  5634 ;; Hardware stack levels required when called:   11
  5635 ;; This function calls:
  5636 ;;		_lcdInst
  5637 ;;		_printRTC
  5638 ;;		_printf
  5639 ;; This function is called by:
  5640 ;;		_initUI
  5641 ;; This function uses a non-reentrant model
  5642 ;;
  5643                           
  5644                           	psect	text18
  5645  004328                     __ptext18:
  5646                           	opt stack 0
  5647  004328                     _change_state_to_menu_start:
  5648                           	opt stack 18
  5649                           
  5650                           ;UI.c: 473: cur_state = 0;
  5651                           
  5652                           ; BSR set to: 0
  5653                           ;incstack = 0
  5654  004328  0E00               	movlw	0
  5655  00432A  0100               	movlb	0	; () banked
  5656  00432C  6FDF               	movwf	(_cur_state+1)& (0+255),b
  5657  00432E  0E00               	movlw	0
  5658  004330  6FDE               	movwf	_cur_state& (0+255),b
  5659                           
  5660                           ; BSR set to: 0
  5661                           ;UI.c: 475: lcdInst(0b10000000);;
  5662  004332  0E80               	movlw	128
  5663  004334  ECB5  F022         	call	_lcdInst
  5664                           
  5665                           ;UI.c: 476: printRTC();
  5666  004338  ECE7  F00D         	call	_printRTC	;wreg free
  5667                           
  5668                           ;UI.c: 477: lcdInst(0b11000000);;
  5669  00433C  0EC0               	movlw	192
  5670  00433E  ECB5  F022         	call	_lcdInst
  5671                           
  5672                           ;UI.c: 478: printf("PUSH TO CONTINUE");
  5673  004342  0E1F               	movlw	low STR_30
  5674  004344  0100               	movlb	0	; () banked
  5675  004346  6F8E               	movwf	printf@f& (0+255),b
  5676  004348  0EFE               	movlw	high STR_30
  5677  00434A  0100               	movlb	0	; () banked
  5678  00434C  6F8F               	movwf	(printf@f+1)& (0+255),b
  5679  00434E  EC9C  F008         	call	_printf	;wreg free
  5680  004352  0012               	return		;funcret
  5681  004354                     __end_of_change_state_to_menu_start:
  5682                           	opt stack 0
  5683                           tblptru	equ	0xFF8
  5684                           tblptrh	equ	0xFF7
  5685                           tblptrl	equ	0xFF6
  5686                           tablat	equ	0xFF5
  5687                           prodh	equ	0xFF4
  5688                           prodl	equ	0xFF3
  5689                           intcon	equ	0xFF2
  5690                           intcon2	equ	0xFF1
  5691                           intcon3	equ	0xFF0
  5692                           postinc0	equ	0xFEE
  5693                           wreg	equ	0xFE8
  5694                           postdec1	equ	0xFE5
  5695                           fsr1l	equ	0xFE1
  5696                           indf2	equ	0xFDF
  5697                           postinc2	equ	0xFDE
  5698                           postdec2	equ	0xFDD
  5699                           fsr2h	equ	0xFDA
  5700                           fsr2l	equ	0xFD9
  5701                           status	equ	0xFD8
  5702                           
  5703 ;; *************** function _initTime *****************
  5704 ;; Defined at:
  5705 ;;		line 17 in file "RTC.c"
  5706 ;; Parameters:    Size  Location     Type
  5707 ;;  s               1    wreg     unsigned char 
  5708 ;;  m               1    0[BANK0 ] unsigned char 
  5709 ;;  h               1    1[BANK0 ] unsigned char 
  5710 ;;  w               1    2[BANK0 ] unsigned char 
  5711 ;;  DD              1    3[BANK0 ] unsigned char 
  5712 ;;  MM              1    4[BANK0 ] unsigned char 
  5713 ;;  YY              1    5[BANK0 ] unsigned char 
  5714 ;; Auto vars:     Size  Location     Type
  5715 ;;  s               1    6[BANK0 ] unsigned char 
  5716 ;; Return value:  Size  Location     Type
  5717 ;;                  1    wreg      void 
  5718 ;; Registers used:
  5719 ;;		wreg
  5720 ;; Tracked objects:
  5721 ;;		On entry : 0/0
  5722 ;;		On exit  : 0/0
  5723 ;;		Unchanged: 0/0
  5724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5725 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5726 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5728 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5729 ;;Total ram usage:        7 bytes
  5730 ;; Hardware stack levels used:    1
  5731 ;; Hardware stack levels required when called:    7
  5732 ;; This function calls:
  5733 ;;		Nothing
  5734 ;; This function is called by:
  5735 ;;		_main
  5736 ;; This function uses a non-reentrant model
  5737 ;;
  5738                           
  5739                           	psect	text19
  5740  0044B0                     __ptext19:
  5741                           	opt stack 0
  5742  0044B0                     _initTime:
  5743                           	opt stack 23
  5744                           
  5745                           ;incstack = 0
  5746                           ;initTime@s stored from wreg
  5747  0044B0  0100               	movlb	0	; () banked
  5748  0044B2  6F86               	movwf	initTime@s& (0+255),b
  5749                           
  5750                           ;RTC.c: 19: time[0] = s;
  5751  0044B4  C086  F124         	movff	initTime@s,_time
  5752                           
  5753                           ;RTC.c: 20: time[1] = m;
  5754  0044B8  C080  F125         	movff	initTime@m,_time+1
  5755                           
  5756                           ;RTC.c: 21: time[2] = h;
  5757  0044BC  C081  F126         	movff	initTime@h,_time+2
  5758                           
  5759                           ;RTC.c: 22: time[3] = w;
  5760  0044C0  C082  F127         	movff	initTime@w,_time+3
  5761                           
  5762                           ;RTC.c: 23: time[4] = DD;
  5763  0044C4  C083  F128         	movff	initTime@DD,_time+4
  5764                           
  5765                           ;RTC.c: 24: time[5] = MM;
  5766  0044C8  C084  F129         	movff	initTime@MM,_time+5
  5767                           
  5768                           ;RTC.c: 25: time[6] = YY;
  5769  0044CC  C085  F12A         	movff	initTime@YY,_time+6
  5770  0044D0  0012               	return		;funcret
  5771  0044D2                     __end_of_initTime:
  5772                           	opt stack 0
  5773                           tblptru	equ	0xFF8
  5774                           tblptrh	equ	0xFF7
  5775                           tblptrl	equ	0xFF6
  5776                           tablat	equ	0xFF5
  5777                           prodh	equ	0xFF4
  5778                           prodl	equ	0xFF3
  5779                           intcon	equ	0xFF2
  5780                           intcon2	equ	0xFF1
  5781                           intcon3	equ	0xFF0
  5782                           postinc0	equ	0xFEE
  5783                           wreg	equ	0xFE8
  5784                           postdec1	equ	0xFE5
  5785                           fsr1l	equ	0xFE1
  5786                           indf2	equ	0xFDF
  5787                           postinc2	equ	0xFDE
  5788                           postdec2	equ	0xFDD
  5789                           fsr2h	equ	0xFDA
  5790                           fsr2l	equ	0xFD9
  5791                           status	equ	0xFD8
  5792                           
  5793 ;; *************** function _initLCD *****************
  5794 ;; Defined at:
  5795 ;;		line 48 in file "lcd.c"
  5796 ;; Parameters:    Size  Location     Type
  5797 ;;		None
  5798 ;; Auto vars:     Size  Location     Type
  5799 ;;		None
  5800 ;; Return value:  Size  Location     Type
  5801 ;;                  1    wreg      void 
  5802 ;; Registers used:
  5803 ;;		wreg, status,2, status,0, cstack
  5804 ;; Tracked objects:
  5805 ;;		On entry : 0/0
  5806 ;;		On exit  : 0/0
  5807 ;;		Unchanged: 0/0
  5808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5811 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5812 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5813 ;;Total ram usage:        1 bytes
  5814 ;; Hardware stack levels used:    1
  5815 ;; Hardware stack levels required when called:    9
  5816 ;; This function calls:
  5817 ;;		_lcdInst
  5818 ;; This function is called by:
  5819 ;;		_main
  5820 ;; This function uses a non-reentrant model
  5821 ;;
  5822                           
  5823                           	psect	text20
  5824  003F86                     __ptext20:
  5825                           	opt stack 0
  5826  003F86                     _initLCD:
  5827                           	opt stack 21
  5828                           
  5829                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  5830                           
  5831                           ;incstack = 0
  5832  003F86  0E9C               	movlw	156
  5833  003F88  0100               	movlb	0	; () banked
  5834  003F8A  6F83               	movwf	??_initLCD& (0+255),b
  5835  003F8C  0ED7               	movlw	215
  5836  003F8E                     u6977:
  5837  003F8E  2EE8               	decfsz	wreg,f,c
  5838  003F90  D7FE               	bra	u6977
  5839  003F92  2F83               	decfsz	??_initLCD& (0+255),f,b
  5840  003F94  D7FC               	bra	u6977
  5841                           
  5842                           ;lcd.c: 50: lcdInst(0b00110011);
  5843  003F96  0E33               	movlw	51
  5844  003F98  ECB5  F022         	call	_lcdInst
  5845                           
  5846                           ;lcd.c: 51: lcdInst(0b00110010);
  5847  003F9C  0E32               	movlw	50
  5848  003F9E  ECB5  F022         	call	_lcdInst
  5849                           
  5850                           ;lcd.c: 53: lcdInst(0b00101000);
  5851  003FA2  0E28               	movlw	40
  5852  003FA4  ECB5  F022         	call	_lcdInst
  5853                           
  5854                           ;lcd.c: 54: lcdInst(0b00001100);
  5855  003FA8  0E0C               	movlw	12
  5856  003FAA  ECB5  F022         	call	_lcdInst
  5857                           
  5858                           ;lcd.c: 55: lcdInst(0b00000110);
  5859  003FAE  0E06               	movlw	6
  5860  003FB0  ECB5  F022         	call	_lcdInst
  5861                           
  5862                           ;lcd.c: 56: lcdInst(0b00000001);
  5863  003FB4  0E01               	movlw	1
  5864  003FB6  ECB5  F022         	call	_lcdInst
  5865                           
  5866                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  5867  003FBA  0E9C               	movlw	156
  5868  003FBC  0100               	movlb	0	; () banked
  5869  003FBE  6F83               	movwf	??_initLCD& (0+255),b
  5870  003FC0  0ED7               	movlw	215
  5871  003FC2                     u6987:
  5872  003FC2  2EE8               	decfsz	wreg,f,c
  5873  003FC4  D7FE               	bra	u6987
  5874  003FC6  2F83               	decfsz	??_initLCD& (0+255),f,b
  5875  003FC8  D7FC               	bra	u6987
  5876  003FCA  0012               	return		;funcret
  5877  003FCC                     __end_of_initLCD:
  5878                           	opt stack 0
  5879                           tblptru	equ	0xFF8
  5880                           tblptrh	equ	0xFF7
  5881                           tblptrl	equ	0xFF6
  5882                           tablat	equ	0xFF5
  5883                           prodh	equ	0xFF4
  5884                           prodl	equ	0xFF3
  5885                           intcon	equ	0xFF2
  5886                           intcon2	equ	0xFF1
  5887                           intcon3	equ	0xFF0
  5888                           postinc0	equ	0xFEE
  5889                           wreg	equ	0xFE8
  5890                           postdec1	equ	0xFE5
  5891                           fsr1l	equ	0xFE1
  5892                           indf2	equ	0xFDF
  5893                           postinc2	equ	0xFDE
  5894                           postdec2	equ	0xFDD
  5895                           fsr2h	equ	0xFDA
  5896                           fsr2l	equ	0xFD9
  5897                           status	equ	0xFD8
  5898                           
  5899 ;; *************** function _UI *****************
  5900 ;; Defined at:
  5901 ;;		line 74 in file "UI.c"
  5902 ;; Parameters:    Size  Location     Type
  5903 ;;		None
  5904 ;; Auto vars:     Size  Location     Type
  5905 ;;  i               1   73[BANK0 ] unsigned char 
  5906 ;;  i               1   85[BANK0 ] unsigned char 
  5907 ;;  i               1   84[BANK0 ] unsigned char 
  5908 ;;  i               1   83[BANK0 ] unsigned char 
  5909 ;;  i               1   82[BANK0 ] unsigned char 
  5910 ;;  i               1   81[BANK0 ] unsigned char 
  5911 ;;  i               1   80[BANK0 ] unsigned char 
  5912 ;;  i               1   79[BANK0 ] unsigned char 
  5913 ;;  i               1   78[BANK0 ] unsigned char 
  5914 ;;  i               1   77[BANK0 ] unsigned char 
  5915 ;;  i               1   76[BANK0 ] unsigned char 
  5916 ;;  i               1   75[BANK0 ] unsigned char 
  5917 ;;  i               1   74[BANK0 ] unsigned char 
  5918 ;;  month           4   86[BANK0 ] unsigned char [4]
  5919 ;;  i               1   72[BANK0 ] unsigned char 
  5920 ;; Return value:  Size  Location     Type
  5921 ;;                  1    wreg      void 
  5922 ;; Registers used:
  5923 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5924 ;; Tracked objects:
  5925 ;;		On entry : 0/0
  5926 ;;		On exit  : 0/0
  5927 ;;		Unchanged: 0/0
  5928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5930 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5931 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5932 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5933 ;;Total ram usage:       22 bytes
  5934 ;; Hardware stack levels used:    1
  5935 ;; Hardware stack levels required when called:   11
  5936 ;; This function calls:
  5937 ;;		___awdiv
  5938 ;;		___awmod
  5939 ;;		_change_state_to_menu_12
  5940 ;;		_change_state_to_menu_22
  5941 ;;		_lcdInst
  5942 ;;		_printRTC
  5943 ;;		_printf
  5944 ;;		_strcpy
  5945 ;; This function is called by:
  5946 ;;		_main
  5947 ;; This function uses a non-reentrant model
  5948 ;;
  5949                           
  5950                           	psect	text21
  5951  000012                     __ptext21:
  5952                           	opt stack 0
  5953  000012                     _UI:
  5954                           	opt stack 19
  5955                           
  5956                           ;UI.c: 75: if(machine_state == DoneSorting_state){
  5957                           
  5958                           ;incstack = 0
  5959  000012  0E02               	movlw	2
  5960  000014  0100               	movlb	0	; () banked
  5961  000016  19FC               	xorwf	_machine_state& (0+255),w,b
  5962  000018  A4D8               	btfss	status,2,c
  5963  00001A  D075               	goto	l7222
  5964                           
  5965                           ; BSR set to: 0
  5966                           ;UI.c: 76: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5967  00001C  0E01               	movlw	1
  5968  00001E  ECB5  F022         	call	_lcdInst
  5969  000022  0E68               	movlw	104
  5970  000024  0100               	movlb	0	; () banked
  5971  000026  6FC4               	movwf	??_UI& (0+255),b
  5972  000028  0EE4               	movlw	228
  5973  00002A                     u6997:
  5974  00002A  2EE8               	decfsz	wreg,f,c
  5975  00002C  D7FE               	bra	u6997
  5976  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  5977  000030  D7FC               	bra	u6997
  5978  000032  F000               	nop	
  5979                           
  5980                           ;UI.c: 77: lcdInst(0b10000000);;
  5981  000034  0E80               	movlw	128
  5982  000036  ECB5  F022         	call	_lcdInst
  5983                           
  5984                           ;UI.c: 78: printf("RESULTS IN LOG %d", sel+1);
  5985  00003A  0ECB               	movlw	low STR_1
  5986  00003C  0100               	movlb	0	; () banked
  5987  00003E  6F8E               	movwf	printf@f& (0+255),b
  5988  000040  0EFB               	movlw	high STR_1
  5989  000042  0100               	movlb	0	; () banked
  5990  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  5991  000046  0E01               	movlw	1
  5992  000048  0100               	movlb	0	; () banked
  5993  00004A  25FD               	addwf	_sel& (0+255),w,b
  5994  00004C  0100               	movlb	0	; () banked
  5995  00004E  6F90               	movwf	(?_printf+2)& (0+255),b
  5996  000050  0100               	movlb	0	; () banked
  5997  000052  6B91               	clrf	(?_printf+3)& (0+255),b
  5998  000054  0E00               	movlw	0
  5999  000056  2391               	addwfc	(?_printf+3)& (0+255),f,b
  6000  000058  EC9C  F008         	call	_printf	;wreg free
  6001                           
  6002                           ;UI.c: 79: lcdInst(0b11000000);;
  6003  00005C  0EC0               	movlw	192
  6004  00005E  ECB5  F022         	call	_lcdInst
  6005                           
  6006                           ;UI.c: 80: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  6007  000062  0E0E               	movlw	14
  6008  000064  0100               	movlb	0	; () banked
  6009  000066  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6010  000068  0E10               	movlw	16
  6011  00006A  6F82               	movwf	___awmod@divisor& (0+255),b
  6012  00006C  C0F8  F080         	movff	_total_time,___awmod@dividend
  6013  000070  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  6014  000074  EC28  F01B         	call	___awmod	;wreg free
  6015  000078  C080  F0C6         	movff	?___awmod,_UI$2241
  6016  00007C  C081  F0C7         	movff	?___awmod+1,_UI$2241+1
  6017                           
  6018                           ;UI.c: 80: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  6019  000080  0E2D               	movlw	low STR_2
  6020  000082  0100               	movlb	0	; () banked
  6021  000084  6F8E               	movwf	printf@f& (0+255),b
  6022  000086  0EFF               	movlw	high STR_2
  6023  000088  0100               	movlb	0	; () banked
  6024  00008A  6F8F               	movwf	(printf@f+1)& (0+255),b
  6025  00008C  0E0E               	movlw	14
  6026  00008E  0100               	movlb	0	; () banked
  6027  000090  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6028  000092  0E10               	movlw	16
  6029  000094  6F82               	movwf	___awmod@divisor& (0+255),b
  6030  000096  C0F8  F080         	movff	_total_time,___awmod@dividend
  6031  00009A  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  6032  00009E  EC28  F01B         	call	___awmod	;wreg free
  6033  0000A2  C080  F086         	movff	?___awmod,___awdiv@dividend
  6034  0000A6  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  6035  0000AA  0E00               	movlw	0
  6036  0000AC  0100               	movlb	0	; () banked
  6037  0000AE  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6038  0000B0  0E3C               	movlw	60
  6039  0000B2  6F88               	movwf	___awdiv@divisor& (0+255),b
  6040  0000B4  EC16  F01A         	call	___awdiv	;wreg free
  6041  0000B8  C086  F090         	movff	?___awdiv,?_printf+2
  6042  0000BC  C087  F091         	movff	?___awdiv+1,?_printf+3
  6043  0000C0  C0C6  F080         	movff	_UI$2241,___awmod@dividend
  6044  0000C4  C0C7  F081         	movff	_UI$2241+1,___awmod@dividend+1
  6045  0000C8  0E00               	movlw	0
  6046  0000CA  0100               	movlb	0	; () banked
  6047  0000CC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6048  0000CE  0E3C               	movlw	60
  6049  0000D0  6F82               	movwf	___awmod@divisor& (0+255),b
  6050  0000D2  EC28  F01B         	call	___awmod	;wreg free
  6051  0000D6  C080  F092         	movff	?___awmod,?_printf+4
  6052  0000DA  C081  F093         	movff	?___awmod+1,?_printf+5
  6053  0000DE  EC9C  F008         	call	_printf	;wreg free
  6054                           
  6055                           ;UI.c: 81: machine_state = UI_state;
  6056  0000E2  0E00               	movlw	0
  6057  0000E4  0100               	movlb	0	; () banked
  6058  0000E6  6FFC               	movwf	_machine_state& (0+255),b
  6059  0000E8                     l177:
  6060  0000E8  A281               	btfss	3969,1,c	;volatile
  6061  0000EA  D7FE               	goto	l177
  6062                           
  6063                           ;UI.c: 84: }
  6064                           ;UI.c: 85: if(cur_state==12){
  6065  0000EC  0E0C               	movlw	12
  6066  0000EE  0100               	movlb	0	; () banked
  6067  0000F0  19DE               	xorwf	_cur_state& (0+255),w,b
  6068  0000F2  0100               	movlb	0	; () banked
  6069  0000F4  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
  6070  0000F6  A4D8               	btfss	status,2,c
  6071  0000F8  D003               	goto	l7220
  6072                           
  6073                           ; BSR set to: 0
  6074                           ;UI.c: 86: change_state_to_menu_12();
  6075  0000FA  EC23  F020         	call	_change_state_to_menu_12	;wreg free
  6076                           
  6077                           ;UI.c: 87: }
  6078  0000FE  D3D5               	goto	l7542
  6079  000100                     l7220:
  6080                           
  6081                           ;UI.c: 88: else{
  6082                           ;UI.c: 89: change_state_to_menu_22();
  6083  000100  EC07  F020         	call	_change_state_to_menu_22	;wreg free
  6084                           
  6085                           ;UI.c: 90: }
  6086                           ;UI.c: 91: }
  6087  000104  D3D2               	goto	l7542
  6088  000106                     l7222:
  6089                           
  6090                           ;UI.c: 92: else if(cur_state == 0){
  6091  000106  0100               	movlb	0	; () banked
  6092  000108  51DE               	movf	_cur_state& (0+255),w,b
  6093  00010A  0100               	movlb	0	; () banked
  6094  00010C  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
  6095  00010E  A4D8               	btfss	status,2,c
  6096  000110  D3CC               	goto	l7542
  6097                           
  6098                           ; BSR set to: 0
  6099                           ;UI.c: 93: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  6100  000112  0E00               	movlw	0
  6101  000114  0100               	movlb	0	; () banked
  6102  000116  6FC8               	movwf	UI@i& (0+255),b
  6103  000118                     l7226:
  6104                           
  6105                           ; BSR set to: 0
  6106  000118  0E63               	movlw	99
  6107  00011A  0100               	movlb	0	; () banked
  6108  00011C  65C8               	cpfsgt	UI@i& (0+255),b
  6109  00011E  D001               	goto	l7230
  6110  000120  D00C               	goto	l7234
  6111  000122                     l7230:
  6112                           
  6113                           ; BSR set to: 0
  6114  000122  0E68               	movlw	104
  6115  000124  0100               	movlb	0	; () banked
  6116  000126  6FC4               	movwf	??_UI& (0+255),b
  6117  000128  0EE4               	movlw	228
  6118  00012A                     u7007:
  6119  00012A  2EE8               	decfsz	wreg,f,c
  6120  00012C  D7FE               	bra	u7007
  6121  00012E  2FC4               	decfsz	??_UI& (0+255),f,b
  6122  000130  D7FC               	bra	u7007
  6123  000132  F000               	nop	
  6124  000134  0100               	movlb	0	; () banked
  6125  000136  2BC8               	incf	UI@i& (0+255),f,b
  6126  000138  D7EF               	goto	l7226
  6127  00013A                     l7234:
  6128                           
  6129                           ; BSR set to: 0
  6130                           ;UI.c: 94: if(cur_state == 0){
  6131  00013A  0100               	movlb	0	; () banked
  6132  00013C  51DE               	movf	_cur_state& (0+255),w,b
  6133  00013E  0100               	movlb	0	; () banked
  6134  000140  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
  6135  000142  A4D8               	btfss	status,2,c
  6136  000144  D3B2               	goto	l7542
  6137                           
  6138                           ; BSR set to: 0
  6139                           ;UI.c: 95: printRTC();
  6140  000146  ECE7  F00D         	call	_printRTC	;wreg free
  6141                           
  6142                           ;UI.c: 96: }
  6143                           ;UI.c: 97: }
  6144                           ;UI.c: 98: while(logstate){
  6145  00014A  D3AF               	goto	l7542
  6146  00014C                     l7238:
  6147                           
  6148                           ;UI.c: 100: if(!log_completion){
  6149  00014C  0100               	movlb	0	; () banked
  6150  00014E  51E8               	movf	_log_completion& (0+255),w,b
  6151  000150  0100               	movlb	0	; () banked
  6152  000152  11E9               	iorwf	(_log_completion+1)& (0+255),w,b
  6153  000154  A4D8               	btfss	status,2,c
  6154  000156  D041               	goto	l7268
  6155                           
  6156                           ; BSR set to: 0
  6157                           ;UI.c: 101: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6158  000158  0E01               	movlw	1
  6159  00015A  ECB5  F022         	call	_lcdInst
  6160  00015E  0E68               	movlw	104
  6161  000160  0100               	movlb	0	; () banked
  6162  000162  6FC4               	movwf	??_UI& (0+255),b
  6163  000164  0EE4               	movlw	228
  6164  000166                     u7017:
  6165  000166  2EE8               	decfsz	wreg,f,c
  6166  000168  D7FE               	bra	u7017
  6167  00016A  2FC4               	decfsz	??_UI& (0+255),f,b
  6168  00016C  D7FC               	bra	u7017
  6169  00016E  F000               	nop	
  6170                           
  6171                           ;UI.c: 102: lcdInst(0b10000000);;
  6172  000170  0E80               	movlw	128
  6173  000172  ECB5  F022         	call	_lcdInst
  6174                           
  6175                           ;UI.c: 103: printf("-- LOG %2d HERE--", log);
  6176  000176  0EB9               	movlw	low STR_3
  6177  000178  0100               	movlb	0	; () banked
  6178  00017A  6F8E               	movwf	printf@f& (0+255),b
  6179  00017C  0EFB               	movlw	high STR_3
  6180  00017E  0100               	movlb	0	; () banked
  6181  000180  6F8F               	movwf	(printf@f+1)& (0+255),b
  6182  000182  C0E6  F090         	movff	_log,?_printf+2
  6183  000186  C0E7  F091         	movff	_log+1,?_printf+3
  6184  00018A  EC9C  F008         	call	_printf	;wreg free
  6185                           
  6186                           ;UI.c: 104: lcdInst(0b11000000);;
  6187  00018E  0EC0               	movlw	192
  6188  000190  ECB5  F022         	call	_lcdInst
  6189                           
  6190                           ;UI.c: 105: printf("DIDN'T COMPLETE");
  6191  000194  0E50               	movlw	low STR_4
  6192  000196  0100               	movlb	0	; () banked
  6193  000198  6F8E               	movwf	printf@f& (0+255),b
  6194  00019A  0EFE               	movlw	high STR_4
  6195  00019C  0100               	movlb	0	; () banked
  6196  00019E  6F8F               	movwf	(printf@f+1)& (0+255),b
  6197  0001A0  EC9C  F008         	call	_printf	;wreg free
  6198  0001A4                     l7252:
  6199  0001A4  0E00               	movlw	0
  6200  0001A6  0100               	movlb	0	; () banked
  6201  0001A8  6FC9               	movwf	UI@i_408& (0+255),b
  6202  0001AA                     l7254:
  6203                           
  6204                           ; BSR set to: 0
  6205  0001AA  0E63               	movlw	99
  6206  0001AC  0100               	movlb	0	; () banked
  6207  0001AE  65C9               	cpfsgt	UI@i_408& (0+255),b
  6208  0001B0  D001               	goto	l7258
  6209  0001B2  D00C               	goto	l7262
  6210  0001B4                     l7258:
  6211                           
  6212                           ; BSR set to: 0
  6213  0001B4  0E68               	movlw	104
  6214  0001B6  0100               	movlb	0	; () banked
  6215  0001B8  6FC4               	movwf	??_UI& (0+255),b
  6216  0001BA  0EE4               	movlw	228
  6217  0001BC                     u7027:
  6218  0001BC  2EE8               	decfsz	wreg,f,c
  6219  0001BE  D7FE               	bra	u7027
  6220  0001C0  2FC4               	decfsz	??_UI& (0+255),f,b
  6221  0001C2  D7FC               	bra	u7027
  6222  0001C4  F000               	nop	
  6223  0001C6  0100               	movlb	0	; () banked
  6224  0001C8  2BC9               	incf	UI@i_408& (0+255),f,b
  6225  0001CA  D7EF               	goto	l7254
  6226  0001CC                     l7262:
  6227                           
  6228                           ; BSR set to: 0
  6229  0001CC  0100               	movlb	0	; () banked
  6230  0001CE  51F6               	movf	_logstate& (0+255),w,b
  6231  0001D0  0100               	movlb	0	; () banked
  6232  0001D2  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6233  0001D4  B4D8               	btfsc	status,2,c
  6234  0001D6  0012               	return	
  6235  0001D8  D7E5               	goto	l7252
  6236  0001DA                     l7268:
  6237                           
  6238                           ; BSR set to: 0
  6239                           ;UI.c: 109: else{
  6240                           ;UI.c: 110: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6241  0001DA  0E01               	movlw	1
  6242  0001DC  ECB5  F022         	call	_lcdInst
  6243  0001E0  0E68               	movlw	104
  6244  0001E2  0100               	movlb	0	; () banked
  6245  0001E4  6FC4               	movwf	??_UI& (0+255),b
  6246  0001E6  0EE4               	movlw	228
  6247  0001E8                     u7037:
  6248  0001E8  2EE8               	decfsz	wreg,f,c
  6249  0001EA  D7FE               	bra	u7037
  6250  0001EC  2FC4               	decfsz	??_UI& (0+255),f,b
  6251  0001EE  D7FC               	bra	u7037
  6252  0001F0  F000               	nop	
  6253                           
  6254                           ;UI.c: 111: lcdInst(0b10000000);;
  6255  0001F2  0E80               	movlw	128
  6256  0001F4  ECB5  F022         	call	_lcdInst
  6257                           
  6258                           ;UI.c: 112: printf("-- LOG %2d HERE--", log);
  6259  0001F8  0EB9               	movlw	low STR_3
  6260  0001FA  0100               	movlb	0	; () banked
  6261  0001FC  6F8E               	movwf	printf@f& (0+255),b
  6262  0001FE  0EFB               	movlw	high STR_3
  6263  000200  0100               	movlb	0	; () banked
  6264  000202  6F8F               	movwf	(printf@f+1)& (0+255),b
  6265  000204  C0E6  F090         	movff	_log,?_printf+2
  6266  000208  C0E7  F091         	movff	_log+1,?_printf+3
  6267  00020C  EC9C  F008         	call	_printf	;wreg free
  6268                           
  6269                           ;UI.c: 113: lcdInst(0b11000000);;
  6270  000210  0EC0               	movlw	192
  6271  000212  ECB5  F022         	call	_lcdInst
  6272                           
  6273                           ;UI.c: 114: printf("PAUSE < | BACK >");
  6274  000216  0E0E               	movlw	low STR_6
  6275  000218  0100               	movlb	0	; () banked
  6276  00021A  6F8E               	movwf	printf@f& (0+255),b
  6277  00021C  0EFE               	movlw	high STR_6
  6278  00021E  0100               	movlb	0	; () banked
  6279  000220  6F8F               	movwf	(printf@f+1)& (0+255),b
  6280  000222  EC9C  F008         	call	_printf	;wreg free
  6281                           
  6282                           ;UI.c: 116: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6283  000226  0E00               	movlw	0
  6284  000228  0100               	movlb	0	; () banked
  6285  00022A  6FCA               	movwf	UI@i_411& (0+255),b
  6286  00022C                     l7282:
  6287                           
  6288                           ; BSR set to: 0
  6289  00022C  0E63               	movlw	99
  6290  00022E  0100               	movlb	0	; () banked
  6291  000230  65CA               	cpfsgt	UI@i_411& (0+255),b
  6292  000232  D001               	goto	l7286
  6293  000234  D00C               	goto	l7290
  6294  000236                     l7286:
  6295                           
  6296                           ; BSR set to: 0
  6297  000236  0E68               	movlw	104
  6298  000238  0100               	movlb	0	; () banked
  6299  00023A  6FC4               	movwf	??_UI& (0+255),b
  6300  00023C  0EE4               	movlw	228
  6301  00023E                     u7047:
  6302  00023E  2EE8               	decfsz	wreg,f,c
  6303  000240  D7FE               	bra	u7047
  6304  000242  2FC4               	decfsz	??_UI& (0+255),f,b
  6305  000244  D7FC               	bra	u7047
  6306  000246  F000               	nop	
  6307  000248  0100               	movlb	0	; () banked
  6308  00024A  2BCA               	incf	UI@i_411& (0+255),f,b
  6309  00024C  D7EF               	goto	l7282
  6310  00024E                     l7290:
  6311                           
  6312                           ; BSR set to: 0
  6313  00024E  0100               	movlb	0	; () banked
  6314  000250  51F6               	movf	_logstate& (0+255),w,b
  6315  000252  0100               	movlb	0	; () banked
  6316  000254  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6317  000256  B4D8               	btfsc	status,2,c
  6318  000258  0012               	return	
  6319                           
  6320                           ; BSR set to: 0
  6321                           ;UI.c: 117: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6322                           
  6323                           ; BSR set to: 0
  6324                           
  6325                           ; BSR set to: 0
  6326  00025A  0E00               	movlw	0
  6327  00025C  0100               	movlb	0	; () banked
  6328  00025E  6FCB               	movwf	UI@i_412& (0+255),b
  6329  000260                     l7296:
  6330                           
  6331                           ; BSR set to: 0
  6332  000260  0E63               	movlw	99
  6333  000262  0100               	movlb	0	; () banked
  6334  000264  65CB               	cpfsgt	UI@i_412& (0+255),b
  6335  000266  D001               	goto	l7300
  6336  000268  D00C               	goto	l7304
  6337  00026A                     l7300:
  6338                           
  6339                           ; BSR set to: 0
  6340  00026A  0E68               	movlw	104
  6341  00026C  0100               	movlb	0	; () banked
  6342  00026E  6FC4               	movwf	??_UI& (0+255),b
  6343  000270  0EE4               	movlw	228
  6344  000272                     u7057:
  6345  000272  2EE8               	decfsz	wreg,f,c
  6346  000274  D7FE               	bra	u7057
  6347  000276  2FC4               	decfsz	??_UI& (0+255),f,b
  6348  000278  D7FC               	bra	u7057
  6349  00027A  F000               	nop	
  6350  00027C  0100               	movlb	0	; () banked
  6351  00027E  2BCB               	incf	UI@i_412& (0+255),f,b
  6352  000280  D7EF               	goto	l7296
  6353  000282                     l7304:
  6354                           
  6355                           ; BSR set to: 0
  6356  000282  0100               	movlb	0	; () banked
  6357  000284  51F6               	movf	_logstate& (0+255),w,b
  6358  000286  0100               	movlb	0	; () banked
  6359  000288  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6360  00028A  B4D8               	btfsc	status,2,c
  6361  00028C  0012               	return	
  6362                           
  6363                           ; BSR set to: 0
  6364                           ;UI.c: 119: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6365                           
  6366                           ; BSR set to: 0
  6367                           
  6368                           ; BSR set to: 0
  6369  00028E  0E01               	movlw	1
  6370  000290  ECB5  F022         	call	_lcdInst
  6371  000294  0E68               	movlw	104
  6372  000296  0100               	movlb	0	; () banked
  6373  000298  6FC4               	movwf	??_UI& (0+255),b
  6374  00029A  0EE4               	movlw	228
  6375  00029C                     u7067:
  6376  00029C  2EE8               	decfsz	wreg,f,c
  6377  00029E  D7FE               	bra	u7067
  6378  0002A0  2FC4               	decfsz	??_UI& (0+255),f,b
  6379  0002A2  D7FC               	bra	u7067
  6380  0002A4  F000               	nop	
  6381                           
  6382                           ;UI.c: 120: lcdInst(0b10000000);;
  6383  0002A6  0E80               	movlw	128
  6384  0002A8  ECB5  F022         	call	_lcdInst
  6385                           
  6386                           ;UI.c: 121: printf("START:");
  6387  0002AC  0EC3               	movlw	low STR_7
  6388  0002AE  0100               	movlb	0	; () banked
  6389  0002B0  6F8E               	movwf	printf@f& (0+255),b
  6390  0002B2  0EFF               	movlw	high STR_7
  6391  0002B4  0100               	movlb	0	; () banked
  6392  0002B6  6F8F               	movwf	(printf@f+1)& (0+255),b
  6393  0002B8  EC9C  F008         	call	_printf	;wreg free
  6394                           
  6395                           ;UI.c: 122: lcdInst(0b11000000);;
  6396  0002BC  0EC0               	movlw	192
  6397  0002BE  ECB5  F022         	call	_lcdInst
  6398                           
  6399                           ;UI.c: 123: char month[] = "MMM";
  6400  0002C2  C12D  F0D6         	movff	UI@F3222,UI@month
  6401  0002C6  C12E  F0D7         	movff	UI@F3222+1,UI@month+1
  6402  0002CA  C12F  F0D8         	movff	UI@F3222+2,UI@month+2
  6403  0002CE  C130  F0D9         	movff	UI@F3222+3,UI@month+3
  6404                           
  6405                           ;UI.c: 124: switch(log_startTime[5]){
  6406  0002D2  D0C3               	goto	l7348
  6407  0002D4                     l7320:
  6408                           
  6409                           ;UI.c: 126: strcpy(month, "JAN");
  6410  0002D4  0ED6               	movlw	low UI@month
  6411  0002D6  0100               	movlb	0	; () banked
  6412  0002D8  6F80               	movwf	strcpy@to& (0+255),b
  6413  0002DA  0E00               	movlw	high UI@month
  6414  0002DC  0100               	movlb	0	; () banked
  6415  0002DE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6416  0002E0  0EDA               	movlw	low STR_8
  6417  0002E2  0100               	movlb	0	; () banked
  6418  0002E4  6F82               	movwf	strcpy@from& (0+255),b
  6419  0002E6  0EFF               	movlw	high STR_8
  6420  0002E8  0100               	movlb	0	; () banked
  6421  0002EA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6422  0002EC  EC3F  F020         	call	_strcpy	;wreg free
  6423                           
  6424                           ;UI.c: 127: break;
  6425  0002F0  D0E6               	goto	l7350
  6426  0002F2                     l7322:
  6427                           
  6428                           ;UI.c: 129: strcpy(month, "FEB");
  6429  0002F2  0ED6               	movlw	low UI@month
  6430  0002F4  0100               	movlb	0	; () banked
  6431  0002F6  6F80               	movwf	strcpy@to& (0+255),b
  6432  0002F8  0E00               	movlw	high UI@month
  6433  0002FA  0100               	movlb	0	; () banked
  6434  0002FC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6435  0002FE  0ECA               	movlw	low STR_9
  6436  000300  0100               	movlb	0	; () banked
  6437  000302  6F82               	movwf	strcpy@from& (0+255),b
  6438  000304  0EFF               	movlw	high STR_9
  6439  000306  0100               	movlb	0	; () banked
  6440  000308  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6441  00030A  EC3F  F020         	call	_strcpy	;wreg free
  6442                           
  6443                           ;UI.c: 130: break;
  6444  00030E  D0D7               	goto	l7350
  6445  000310                     l7324:
  6446                           
  6447                           ;UI.c: 132: strcpy(month, "MAR");
  6448  000310  0ED6               	movlw	low UI@month
  6449  000312  0100               	movlb	0	; () banked
  6450  000314  6F80               	movwf	strcpy@to& (0+255),b
  6451  000316  0E00               	movlw	high UI@month
  6452  000318  0100               	movlb	0	; () banked
  6453  00031A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6454  00031C  0EE6               	movlw	low STR_10
  6455  00031E  0100               	movlb	0	; () banked
  6456  000320  6F82               	movwf	strcpy@from& (0+255),b
  6457  000322  0EFF               	movlw	high STR_10
  6458  000324  0100               	movlb	0	; () banked
  6459  000326  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6460  000328  EC3F  F020         	call	_strcpy	;wreg free
  6461                           
  6462                           ;UI.c: 133: break;
  6463  00032C  D0C8               	goto	l7350
  6464  00032E                     l7326:
  6465                           
  6466                           ;UI.c: 135: strcpy(month, "APR");
  6467  00032E  0ED6               	movlw	low UI@month
  6468  000330  0100               	movlb	0	; () banked
  6469  000332  6F80               	movwf	strcpy@to& (0+255),b
  6470  000334  0E00               	movlw	high UI@month
  6471  000336  0100               	movlb	0	; () banked
  6472  000338  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6473  00033A  0EEA               	movlw	low STR_11
  6474  00033C  0100               	movlb	0	; () banked
  6475  00033E  6F82               	movwf	strcpy@from& (0+255),b
  6476  000340  0EFF               	movlw	high STR_11
  6477  000342  0100               	movlb	0	; () banked
  6478  000344  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6479  000346  EC3F  F020         	call	_strcpy	;wreg free
  6480                           
  6481                           ;UI.c: 136: break;
  6482  00034A  D0B9               	goto	l7350
  6483  00034C                     l7328:
  6484                           
  6485                           ;UI.c: 138: strcpy(month, "MAY");
  6486  00034C  0ED6               	movlw	low UI@month
  6487  00034E  0100               	movlb	0	; () banked
  6488  000350  6F80               	movwf	strcpy@to& (0+255),b
  6489  000352  0E00               	movlw	high UI@month
  6490  000354  0100               	movlb	0	; () banked
  6491  000356  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6492  000358  0EFA               	movlw	low STR_12
  6493  00035A  0100               	movlb	0	; () banked
  6494  00035C  6F82               	movwf	strcpy@from& (0+255),b
  6495  00035E  0EFF               	movlw	high STR_12
  6496  000360  0100               	movlb	0	; () banked
  6497  000362  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6498  000364  EC3F  F020         	call	_strcpy	;wreg free
  6499                           
  6500                           ;UI.c: 139: break;
  6501  000368  D0AA               	goto	l7350
  6502  00036A                     l7330:
  6503                           
  6504                           ;UI.c: 141: strcpy(month, "JUN");
  6505  00036A  0ED6               	movlw	low UI@month
  6506  00036C  0100               	movlb	0	; () banked
  6507  00036E  6F80               	movwf	strcpy@to& (0+255),b
  6508  000370  0E00               	movlw	high UI@month
  6509  000372  0100               	movlb	0	; () banked
  6510  000374  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6511  000376  0EDE               	movlw	low STR_13
  6512  000378  0100               	movlb	0	; () banked
  6513  00037A  6F82               	movwf	strcpy@from& (0+255),b
  6514  00037C  0EFF               	movlw	high STR_13
  6515  00037E  0100               	movlb	0	; () banked
  6516  000380  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6517  000382  EC3F  F020         	call	_strcpy	;wreg free
  6518                           
  6519                           ;UI.c: 142: break;
  6520  000386  D09B               	goto	l7350
  6521  000388                     l7332:
  6522                           
  6523                           ;UI.c: 144: strcpy(month, "JUL");
  6524  000388  0ED6               	movlw	low UI@month
  6525  00038A  0100               	movlb	0	; () banked
  6526  00038C  6F80               	movwf	strcpy@to& (0+255),b
  6527  00038E  0E00               	movlw	high UI@month
  6528  000390  0100               	movlb	0	; () banked
  6529  000392  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6530  000394  0ED6               	movlw	low STR_14
  6531  000396  0100               	movlb	0	; () banked
  6532  000398  6F82               	movwf	strcpy@from& (0+255),b
  6533  00039A  0EFF               	movlw	high STR_14
  6534  00039C  0100               	movlb	0	; () banked
  6535  00039E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6536  0003A0  EC3F  F020         	call	_strcpy	;wreg free
  6537                           
  6538                           ;UI.c: 145: break;
  6539  0003A4  D08C               	goto	l7350
  6540  0003A6                     l7334:
  6541                           
  6542                           ;UI.c: 147: strcpy(month, "AUG");
  6543  0003A6  0ED6               	movlw	low UI@month
  6544  0003A8  0100               	movlb	0	; () banked
  6545  0003AA  6F80               	movwf	strcpy@to& (0+255),b
  6546  0003AC  0E00               	movlw	high UI@month
  6547  0003AE  0100               	movlb	0	; () banked
  6548  0003B0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6549  0003B2  0ED2               	movlw	low STR_15
  6550  0003B4  0100               	movlb	0	; () banked
  6551  0003B6  6F82               	movwf	strcpy@from& (0+255),b
  6552  0003B8  0EFF               	movlw	high STR_15
  6553  0003BA  0100               	movlb	0	; () banked
  6554  0003BC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6555  0003BE  EC3F  F020         	call	_strcpy	;wreg free
  6556                           
  6557                           ;UI.c: 148: break;
  6558  0003C2  D07D               	goto	l7350
  6559  0003C4                     l7336:
  6560                           
  6561                           ;UI.c: 150: strcpy(month, "SEP");
  6562  0003C4  0ED6               	movlw	low UI@month
  6563  0003C6  0100               	movlb	0	; () banked
  6564  0003C8  6F80               	movwf	strcpy@to& (0+255),b
  6565  0003CA  0E00               	movlw	high UI@month
  6566  0003CC  0100               	movlb	0	; () banked
  6567  0003CE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6568  0003D0  0EE2               	movlw	low STR_16
  6569  0003D2  0100               	movlb	0	; () banked
  6570  0003D4  6F82               	movwf	strcpy@from& (0+255),b
  6571  0003D6  0EFF               	movlw	high STR_16
  6572  0003D8  0100               	movlb	0	; () banked
  6573  0003DA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6574  0003DC  EC3F  F020         	call	_strcpy	;wreg free
  6575                           
  6576                           ;UI.c: 151: break;
  6577  0003E0  D06E               	goto	l7350
  6578  0003E2                     l7338:
  6579                           
  6580                           ;UI.c: 153: strcpy(month, "OCT");
  6581  0003E2  0ED6               	movlw	low UI@month
  6582  0003E4  0100               	movlb	0	; () banked
  6583  0003E6  6F80               	movwf	strcpy@to& (0+255),b
  6584  0003E8  0E00               	movlw	high UI@month
  6585  0003EA  0100               	movlb	0	; () banked
  6586  0003EC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6587  0003EE  0EF2               	movlw	low STR_17
  6588  0003F0  0100               	movlb	0	; () banked
  6589  0003F2  6F82               	movwf	strcpy@from& (0+255),b
  6590  0003F4  0EFF               	movlw	high STR_17
  6591  0003F6  0100               	movlb	0	; () banked
  6592  0003F8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6593  0003FA  EC3F  F020         	call	_strcpy	;wreg free
  6594                           
  6595                           ;UI.c: 154: break;
  6596  0003FE  D05F               	goto	l7350
  6597  000400                     l7340:
  6598                           
  6599                           ;UI.c: 156: strcpy(month, "NOV");
  6600  000400  0ED6               	movlw	low UI@month
  6601  000402  0100               	movlb	0	; () banked
  6602  000404  6F80               	movwf	strcpy@to& (0+255),b
  6603  000406  0E00               	movlw	high UI@month
  6604  000408  0100               	movlb	0	; () banked
  6605  00040A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6606  00040C  0EF6               	movlw	low STR_18
  6607  00040E  0100               	movlb	0	; () banked
  6608  000410  6F82               	movwf	strcpy@from& (0+255),b
  6609  000412  0EFF               	movlw	high STR_18
  6610  000414  0100               	movlb	0	; () banked
  6611  000416  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6612  000418  EC3F  F020         	call	_strcpy	;wreg free
  6613                           
  6614                           ;UI.c: 157: break;
  6615  00041C  D050               	goto	l7350
  6616  00041E                     l7342:
  6617                           
  6618                           ;UI.c: 159: strcpy(month, "DEC");
  6619  00041E  0ED6               	movlw	low UI@month
  6620  000420  0100               	movlb	0	; () banked
  6621  000422  6F80               	movwf	strcpy@to& (0+255),b
  6622  000424  0E00               	movlw	high UI@month
  6623  000426  0100               	movlb	0	; () banked
  6624  000428  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6625  00042A  0ECE               	movlw	low STR_19
  6626  00042C  0100               	movlb	0	; () banked
  6627  00042E  6F82               	movwf	strcpy@from& (0+255),b
  6628  000430  0EFF               	movlw	high STR_19
  6629  000432  0100               	movlb	0	; () banked
  6630  000434  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6631  000436  EC3F  F020         	call	_strcpy	;wreg free
  6632                           
  6633                           ;UI.c: 160: break;
  6634  00043A  D041               	goto	l7350
  6635  00043C                     l7344:
  6636                           
  6637                           ;UI.c: 162: strcpy(month, "ERR");
  6638  00043C  0ED6               	movlw	low UI@month
  6639  00043E  0100               	movlb	0	; () banked
  6640  000440  6F80               	movwf	strcpy@to& (0+255),b
  6641  000442  0E00               	movlw	high UI@month
  6642  000444  0100               	movlb	0	; () banked
  6643  000446  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6644  000448  0EEE               	movlw	low STR_20
  6645  00044A  0100               	movlb	0	; () banked
  6646  00044C  6F82               	movwf	strcpy@from& (0+255),b
  6647  00044E  0EFF               	movlw	high STR_20
  6648  000450  0100               	movlb	0	; () banked
  6649  000452  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6650  000454  EC3F  F020         	call	_strcpy	;wreg free
  6651                           
  6652                           ;UI.c: 164: }
  6653                           
  6654                           ;UI.c: 163: break;
  6655  000458  D032               	goto	l7350
  6656  00045A                     l7348:
  6657  00045A  EE21  F00A         	lfsr	2,_log_startTime+10
  6658  00045E  CFDE F0C4          	movff	postinc2,??_UI
  6659  000462  CFDD F0C5          	movff	postdec2,??_UI+1
  6660                           
  6661                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6662                           ; Switch size 1, requested type "space"
  6663                           ; Number of cases is 1, Range of values is 0 to 0
  6664                           ; switch strategies available:
  6665                           ; Name         Instructions Cycles
  6666                           ; simple_byte            4     3 (average)
  6667                           ;	Chosen strategy is simple_byte
  6668  000466  0100               	movlb	0	; () banked
  6669  000468  51C5               	movf	(??_UI+1)& (0+255),w,b
  6670  00046A  0A00               	xorlw	0	; case 0
  6671  00046C  A4D8               	btfss	status,2,c
  6672  00046E  D7E6               	goto	l7344
  6673                           
  6674                           ; BSR set to: 0
  6675                           ; Switch size 1, requested type "space"
  6676                           ; Number of cases is 12, Range of values is 1 to 12
  6677                           ; switch strategies available:
  6678                           ; Name         Instructions Cycles
  6679                           ; simple_byte           37    19 (average)
  6680                           ;	Chosen strategy is simple_byte
  6681  000470  0100               	movlb	0	; () banked
  6682  000472  51C4               	movf	??_UI& (0+255),w,b
  6683  000474  0A01               	xorlw	1	; case 1
  6684  000476  B4D8               	btfsc	status,2,c
  6685  000478  D72D               	goto	l7320
  6686  00047A  0A03               	xorlw	3	; case 2
  6687  00047C  B4D8               	btfsc	status,2,c
  6688  00047E  D739               	goto	l7322
  6689  000480  0A01               	xorlw	1	; case 3
  6690  000482  B4D8               	btfsc	status,2,c
  6691  000484  D745               	goto	l7324
  6692  000486  0A07               	xorlw	7	; case 4
  6693  000488  B4D8               	btfsc	status,2,c
  6694  00048A  D751               	goto	l7326
  6695  00048C  0A01               	xorlw	1	; case 5
  6696  00048E  B4D8               	btfsc	status,2,c
  6697  000490  D75D               	goto	l7328
  6698  000492  0A03               	xorlw	3	; case 6
  6699  000494  B4D8               	btfsc	status,2,c
  6700  000496  D769               	goto	l7330
  6701  000498  0A01               	xorlw	1	; case 7
  6702  00049A  B4D8               	btfsc	status,2,c
  6703  00049C  D775               	goto	l7332
  6704  00049E  0A0F               	xorlw	15	; case 8
  6705  0004A0  B4D8               	btfsc	status,2,c
  6706  0004A2  D781               	goto	l7334
  6707  0004A4  0A01               	xorlw	1	; case 9
  6708  0004A6  B4D8               	btfsc	status,2,c
  6709  0004A8  D78D               	goto	l7336
  6710  0004AA  0A03               	xorlw	3	; case 10
  6711  0004AC  B4D8               	btfsc	status,2,c
  6712  0004AE  D799               	goto	l7338
  6713  0004B0  0A01               	xorlw	1	; case 11
  6714  0004B2  B4D8               	btfsc	status,2,c
  6715  0004B4  D7A5               	goto	l7340
  6716  0004B6  0A07               	xorlw	7	; case 12
  6717  0004B8  B4D8               	btfsc	status,2,c
  6718  0004BA  D7B1               	goto	l7342
  6719  0004BC  D7BF               	goto	l7344
  6720  0004BE                     l7350:
  6721                           
  6722                           ;UI.c: 165: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  6723  0004BE  0E42               	movlw	low STR_21
  6724  0004C0  0100               	movlb	0	; () banked
  6725  0004C2  6F8E               	movwf	printf@f& (0+255),b
  6726  0004C4  0EFB               	movlw	high STR_21
  6727  0004C6  0100               	movlb	0	; () banked
  6728  0004C8  6F8F               	movwf	(printf@f+1)& (0+255),b
  6729  0004CA  C108  F090         	movff	_log_startTime+8,?_printf+2
  6730  0004CE  C109  F091         	movff	_log_startTime+9,?_printf+3
  6731  0004D2  0ED6               	movlw	low UI@month
  6732  0004D4  0100               	movlb	0	; () banked
  6733  0004D6  6F92               	movwf	(?_printf+4)& (0+255),b
  6734  0004D8  0E00               	movlw	high UI@month
  6735  0004DA  0100               	movlb	0	; () banked
  6736  0004DC  6F93               	movwf	(?_printf+5)& (0+255),b
  6737  0004DE  C104  F094         	movff	_log_startTime+4,?_printf+6
  6738  0004E2  C105  F095         	movff	_log_startTime+5,?_printf+7
  6739  0004E6  C102  F096         	movff	_log_startTime+2,?_printf+8
  6740  0004EA  C103  F097         	movff	_log_startTime+3,?_printf+9
  6741  0004EE  C100  F098         	movff	_log_startTime,?_printf+10
  6742  0004F2  C101  F099         	movff	_log_startTime+1,?_printf+11
  6743  0004F6  EC9C  F008         	call	_printf	;wreg free
  6744                           
  6745                           ;UI.c: 167: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6746  0004FA  0E00               	movlw	0
  6747  0004FC  0100               	movlb	0	; () banked
  6748  0004FE  6FCC               	movwf	UI@i_430& (0+255),b
  6749  000500                     l7354:
  6750                           
  6751                           ; BSR set to: 0
  6752  000500  0E63               	movlw	99
  6753  000502  0100               	movlb	0	; () banked
  6754  000504  65CC               	cpfsgt	UI@i_430& (0+255),b
  6755  000506  D001               	goto	l7358
  6756  000508  D00C               	goto	l7362
  6757  00050A                     l7358:
  6758                           
  6759                           ; BSR set to: 0
  6760  00050A  0E68               	movlw	104
  6761  00050C  0100               	movlb	0	; () banked
  6762  00050E  6FC4               	movwf	??_UI& (0+255),b
  6763  000510  0EE4               	movlw	228
  6764  000512                     u7077:
  6765  000512  2EE8               	decfsz	wreg,f,c
  6766  000514  D7FE               	bra	u7077
  6767  000516  2FC4               	decfsz	??_UI& (0+255),f,b
  6768  000518  D7FC               	bra	u7077
  6769  00051A  F000               	nop	
  6770  00051C  0100               	movlb	0	; () banked
  6771  00051E  2BCC               	incf	UI@i_430& (0+255),f,b
  6772  000520  D7EF               	goto	l7354
  6773  000522                     l7362:
  6774                           
  6775                           ; BSR set to: 0
  6776  000522  0100               	movlb	0	; () banked
  6777  000524  51F6               	movf	_logstate& (0+255),w,b
  6778  000526  0100               	movlb	0	; () banked
  6779  000528  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6780  00052A  B4D8               	btfsc	status,2,c
  6781  00052C  0012               	return	
  6782                           
  6783                           ; BSR set to: 0
  6784                           ;UI.c: 168: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6785                           
  6786                           ; BSR set to: 0
  6787                           
  6788                           ; BSR set to: 0
  6789  00052E  0E00               	movlw	0
  6790  000530  0100               	movlb	0	; () banked
  6791  000532  6FCD               	movwf	UI@i_431& (0+255),b
  6792  000534                     l7368:
  6793                           
  6794                           ; BSR set to: 0
  6795  000534  0E63               	movlw	99
  6796  000536  0100               	movlb	0	; () banked
  6797  000538  65CD               	cpfsgt	UI@i_431& (0+255),b
  6798  00053A  D001               	goto	l7372
  6799  00053C  D00C               	goto	l7376
  6800  00053E                     l7372:
  6801                           
  6802                           ; BSR set to: 0
  6803  00053E  0E68               	movlw	104
  6804  000540  0100               	movlb	0	; () banked
  6805  000542  6FC4               	movwf	??_UI& (0+255),b
  6806  000544  0EE4               	movlw	228
  6807  000546                     u7087:
  6808  000546  2EE8               	decfsz	wreg,f,c
  6809  000548  D7FE               	bra	u7087
  6810  00054A  2FC4               	decfsz	??_UI& (0+255),f,b
  6811  00054C  D7FC               	bra	u7087
  6812  00054E  F000               	nop	
  6813  000550  0100               	movlb	0	; () banked
  6814  000552  2BCD               	incf	UI@i_431& (0+255),f,b
  6815  000554  D7EF               	goto	l7368
  6816  000556                     l7376:
  6817                           
  6818                           ; BSR set to: 0
  6819  000556  0100               	movlb	0	; () banked
  6820  000558  51F6               	movf	_logstate& (0+255),w,b
  6821  00055A  0100               	movlb	0	; () banked
  6822  00055C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6823  00055E  B4D8               	btfsc	status,2,c
  6824  000560  0012               	return	
  6825                           
  6826                           ; BSR set to: 0
  6827                           ;UI.c: 170: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6828                           
  6829                           ; BSR set to: 0
  6830                           
  6831                           ; BSR set to: 0
  6832  000562  0E01               	movlw	1
  6833  000564  ECB5  F022         	call	_lcdInst
  6834  000568  0E68               	movlw	104
  6835  00056A  0100               	movlb	0	; () banked
  6836  00056C  6FC4               	movwf	??_UI& (0+255),b
  6837  00056E  0EE4               	movlw	228
  6838  000570                     u7097:
  6839  000570  2EE8               	decfsz	wreg,f,c
  6840  000572  D7FE               	bra	u7097
  6841  000574  2FC4               	decfsz	??_UI& (0+255),f,b
  6842  000576  D7FC               	bra	u7097
  6843  000578  F000               	nop	
  6844                           
  6845                           ;UI.c: 171: lcdInst(0b10000000);;
  6846  00057A  0E80               	movlw	128
  6847  00057C  ECB5  F022         	call	_lcdInst
  6848                           
  6849                           ;UI.c: 172: printf("DURATION:");
  6850  000580  0EA3               	movlw	low STR_22
  6851  000582  0100               	movlb	0	; () banked
  6852  000584  6F8E               	movwf	printf@f& (0+255),b
  6853  000586  0EFF               	movlw	high STR_22
  6854  000588  0100               	movlb	0	; () banked
  6855  00058A  6F8F               	movwf	(printf@f+1)& (0+255),b
  6856  00058C  EC9C  F008         	call	_printf	;wreg free
  6857                           
  6858                           ;UI.c: 173: lcdInst(0b11000000);;
  6859  000590  0EC0               	movlw	192
  6860  000592  ECB5  F022         	call	_lcdInst
  6861                           
  6862                           ;UI.c: 174: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  6863  000596  0E0E               	movlw	14
  6864  000598  0100               	movlb	0	; () banked
  6865  00059A  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6866  00059C  0E10               	movlw	16
  6867  00059E  6F82               	movwf	___awmod@divisor& (0+255),b
  6868  0005A0  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  6869  0005A4  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  6870  0005A8  EC28  F01B         	call	___awmod	;wreg free
  6871  0005AC  C080  F0C6         	movff	?___awmod,_UI$2241
  6872  0005B0  C081  F0C7         	movff	?___awmod+1,_UI$2241+1
  6873                           
  6874                           ;UI.c: 174: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  6875  0005B4  0E1F               	movlw	low STR_23
  6876  0005B6  0100               	movlb	0	; () banked
  6877  0005B8  6F8E               	movwf	printf@f& (0+255),b
  6878  0005BA  0EFF               	movlw	high STR_23
  6879  0005BC  0100               	movlb	0	; () banked
  6880  0005BE  6F8F               	movwf	(printf@f+1)& (0+255),b
  6881  0005C0  0E0E               	movlw	14
  6882  0005C2  0100               	movlb	0	; () banked
  6883  0005C4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6884  0005C6  0E10               	movlw	16
  6885  0005C8  6F82               	movwf	___awmod@divisor& (0+255),b
  6886  0005CA  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  6887  0005CE  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  6888  0005D2  EC28  F01B         	call	___awmod	;wreg free
  6889  0005D6  C080  F086         	movff	?___awmod,___awdiv@dividend
  6890  0005DA  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  6891  0005DE  0E00               	movlw	0
  6892  0005E0  0100               	movlb	0	; () banked
  6893  0005E2  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6894  0005E4  0E3C               	movlw	60
  6895  0005E6  6F88               	movwf	___awdiv@divisor& (0+255),b
  6896  0005E8  EC16  F01A         	call	___awdiv	;wreg free
  6897  0005EC  C086  F090         	movff	?___awdiv,?_printf+2
  6898  0005F0  C087  F091         	movff	?___awdiv+1,?_printf+3
  6899  0005F4  C0C6  F080         	movff	_UI$2241,___awmod@dividend
  6900  0005F8  C0C7  F081         	movff	_UI$2241+1,___awmod@dividend+1
  6901  0005FC  0E00               	movlw	0
  6902  0005FE  0100               	movlb	0	; () banked
  6903  000600  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6904  000602  0E3C               	movlw	60
  6905  000604  6F82               	movwf	___awmod@divisor& (0+255),b
  6906  000606  EC28  F01B         	call	___awmod	;wreg free
  6907  00060A  C080  F092         	movff	?___awmod,?_printf+4
  6908  00060E  C081  F093         	movff	?___awmod+1,?_printf+5
  6909  000612  EC9C  F008         	call	_printf	;wreg free
  6910                           
  6911                           ;UI.c: 176: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6912  000616  0E00               	movlw	0
  6913  000618  0100               	movlb	0	; () banked
  6914  00061A  6FCE               	movwf	UI@i_434& (0+255),b
  6915  00061C                     l7396:
  6916                           
  6917                           ; BSR set to: 0
  6918  00061C  0E63               	movlw	99
  6919  00061E  0100               	movlb	0	; () banked
  6920  000620  65CE               	cpfsgt	UI@i_434& (0+255),b
  6921  000622  D001               	goto	l7400
  6922  000624  D00C               	goto	l7404
  6923  000626                     l7400:
  6924                           
  6925                           ; BSR set to: 0
  6926  000626  0E68               	movlw	104
  6927  000628  0100               	movlb	0	; () banked
  6928  00062A  6FC4               	movwf	??_UI& (0+255),b
  6929  00062C  0EE4               	movlw	228
  6930  00062E                     u7107:
  6931  00062E  2EE8               	decfsz	wreg,f,c
  6932  000630  D7FE               	bra	u7107
  6933  000632  2FC4               	decfsz	??_UI& (0+255),f,b
  6934  000634  D7FC               	bra	u7107
  6935  000636  F000               	nop	
  6936  000638  0100               	movlb	0	; () banked
  6937  00063A  2BCE               	incf	UI@i_434& (0+255),f,b
  6938  00063C  D7EF               	goto	l7396
  6939  00063E                     l7404:
  6940                           
  6941                           ; BSR set to: 0
  6942  00063E  0100               	movlb	0	; () banked
  6943  000640  51F6               	movf	_logstate& (0+255),w,b
  6944  000642  0100               	movlb	0	; () banked
  6945  000644  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6946  000646  B4D8               	btfsc	status,2,c
  6947  000648  0012               	return	
  6948                           
  6949                           ; BSR set to: 0
  6950                           ;UI.c: 177: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6951                           
  6952                           ; BSR set to: 0
  6953                           
  6954                           ; BSR set to: 0
  6955  00064A  0E00               	movlw	0
  6956  00064C  0100               	movlb	0	; () banked
  6957  00064E  6FCF               	movwf	UI@i_435& (0+255),b
  6958  000650                     l7410:
  6959                           
  6960                           ; BSR set to: 0
  6961  000650  0E63               	movlw	99
  6962  000652  0100               	movlb	0	; () banked
  6963  000654  65CF               	cpfsgt	UI@i_435& (0+255),b
  6964  000656  D001               	goto	l7414
  6965  000658  D00C               	goto	l7418
  6966  00065A                     l7414:
  6967                           
  6968                           ; BSR set to: 0
  6969  00065A  0E68               	movlw	104
  6970  00065C  0100               	movlb	0	; () banked
  6971  00065E  6FC4               	movwf	??_UI& (0+255),b
  6972  000660  0EE4               	movlw	228
  6973  000662                     u7117:
  6974  000662  2EE8               	decfsz	wreg,f,c
  6975  000664  D7FE               	bra	u7117
  6976  000666  2FC4               	decfsz	??_UI& (0+255),f,b
  6977  000668  D7FC               	bra	u7117
  6978  00066A  F000               	nop	
  6979  00066C  0100               	movlb	0	; () banked
  6980  00066E  2BCF               	incf	UI@i_435& (0+255),f,b
  6981  000670  D7EF               	goto	l7410
  6982  000672                     l7418:
  6983                           
  6984                           ; BSR set to: 0
  6985  000672  0100               	movlb	0	; () banked
  6986  000674  51F6               	movf	_logstate& (0+255),w,b
  6987  000676  0100               	movlb	0	; () banked
  6988  000678  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6989  00067A  B4D8               	btfsc	status,2,c
  6990  00067C  0012               	return	
  6991                           
  6992                           ; BSR set to: 0
  6993                           ;UI.c: 179: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6994                           
  6995                           ; BSR set to: 0
  6996                           
  6997                           ; BSR set to: 0
  6998  00067E  0E01               	movlw	1
  6999  000680  ECB5  F022         	call	_lcdInst
  7000  000684  0E68               	movlw	104
  7001  000686  0100               	movlb	0	; () banked
  7002  000688  6FC4               	movwf	??_UI& (0+255),b
  7003  00068A  0EE4               	movlw	228
  7004  00068C                     u7127:
  7005  00068C  2EE8               	decfsz	wreg,f,c
  7006  00068E  D7FE               	bra	u7127
  7007  000690  2FC4               	decfsz	??_UI& (0+255),f,b
  7008  000692  D7FC               	bra	u7127
  7009  000694  F000               	nop	
  7010                           
  7011                           ;UI.c: 180: lcdInst(0b10000000);;
  7012  000696  0E80               	movlw	128
  7013  000698  ECB5  F022         	call	_lcdInst
  7014                           
  7015                           ;UI.c: 181: printf(" -- POP  CAN -- ");
  7016  00069C  0E64               	movlw	low STR_24
  7017  00069E  0100               	movlb	0	; () banked
  7018  0006A0  6F8E               	movwf	printf@f& (0+255),b
  7019  0006A2  0EFD               	movlw	high STR_24
  7020  0006A4  0100               	movlb	0	; () banked
  7021  0006A6  6F8F               	movwf	(printf@f+1)& (0+255),b
  7022  0006A8  EC9C  F008         	call	_printf	;wreg free
  7023                           
  7024                           ;UI.c: 182: lcdInst(0b11000000);;
  7025  0006AC  0EC0               	movlw	192
  7026  0006AE  ECB5  F022         	call	_lcdInst
  7027                           
  7028                           ;UI.c: 183: printf("NO TAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  7029  0006B2  0E82               	movlw	low STR_25
  7030  0006B4  0100               	movlb	0	; () banked
  7031  0006B6  6F8E               	movwf	printf@f& (0+255),b
  7032  0006B8  0EFB               	movlw	high STR_25
  7033  0006BA  0100               	movlb	0	; () banked
  7034  0006BC  6F8F               	movwf	(printf@f+1)& (0+255),b
  7035  0006BE  C0EE  F090         	movff	_log_count_pop_no_tab,?_printf+2
  7036  0006C2  C0EF  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  7037  0006C6  C0F0  F092         	movff	_log_count_pop_w_tab,?_printf+4
  7038  0006CA  C0F1  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  7039  0006CE  EC9C  F008         	call	_printf	;wreg free
  7040                           
  7041                           ;UI.c: 185: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7042  0006D2  0E00               	movlw	0
  7043  0006D4  0100               	movlb	0	; () banked
  7044  0006D6  6FD0               	movwf	UI@i_438& (0+255),b
  7045  0006D8                     l7436:
  7046                           
  7047                           ; BSR set to: 0
  7048  0006D8  0E63               	movlw	99
  7049  0006DA  0100               	movlb	0	; () banked
  7050  0006DC  65D0               	cpfsgt	UI@i_438& (0+255),b
  7051  0006DE  D001               	goto	l7440
  7052  0006E0  D00C               	goto	l7444
  7053  0006E2                     l7440:
  7054                           
  7055                           ; BSR set to: 0
  7056  0006E2  0E68               	movlw	104
  7057  0006E4  0100               	movlb	0	; () banked
  7058  0006E6  6FC4               	movwf	??_UI& (0+255),b
  7059  0006E8  0EE4               	movlw	228
  7060  0006EA                     u7137:
  7061  0006EA  2EE8               	decfsz	wreg,f,c
  7062  0006EC  D7FE               	bra	u7137
  7063  0006EE  2FC4               	decfsz	??_UI& (0+255),f,b
  7064  0006F0  D7FC               	bra	u7137
  7065  0006F2  F000               	nop	
  7066  0006F4  0100               	movlb	0	; () banked
  7067  0006F6  2BD0               	incf	UI@i_438& (0+255),f,b
  7068  0006F8  D7EF               	goto	l7436
  7069  0006FA                     l7444:
  7070                           
  7071                           ; BSR set to: 0
  7072  0006FA  0100               	movlb	0	; () banked
  7073  0006FC  51F6               	movf	_logstate& (0+255),w,b
  7074  0006FE  0100               	movlb	0	; () banked
  7075  000700  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7076  000702  B4D8               	btfsc	status,2,c
  7077  000704  0012               	return	
  7078                           
  7079                           ; BSR set to: 0
  7080                           ;UI.c: 186: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7081                           
  7082                           ; BSR set to: 0
  7083                           
  7084                           ; BSR set to: 0
  7085  000706  0E00               	movlw	0
  7086  000708  0100               	movlb	0	; () banked
  7087  00070A  6FD1               	movwf	UI@i_439& (0+255),b
  7088  00070C                     l7450:
  7089                           
  7090                           ; BSR set to: 0
  7091  00070C  0E63               	movlw	99
  7092  00070E  0100               	movlb	0	; () banked
  7093  000710  65D1               	cpfsgt	UI@i_439& (0+255),b
  7094  000712  D001               	goto	l7454
  7095  000714  D00C               	goto	l7458
  7096  000716                     l7454:
  7097                           
  7098                           ; BSR set to: 0
  7099  000716  0E68               	movlw	104
  7100  000718  0100               	movlb	0	; () banked
  7101  00071A  6FC4               	movwf	??_UI& (0+255),b
  7102  00071C  0EE4               	movlw	228
  7103  00071E                     u7147:
  7104  00071E  2EE8               	decfsz	wreg,f,c
  7105  000720  D7FE               	bra	u7147
  7106  000722  2FC4               	decfsz	??_UI& (0+255),f,b
  7107  000724  D7FC               	bra	u7147
  7108  000726  F000               	nop	
  7109  000728  0100               	movlb	0	; () banked
  7110  00072A  2BD1               	incf	UI@i_439& (0+255),f,b
  7111  00072C  D7EF               	goto	l7450
  7112  00072E                     l7458:
  7113                           
  7114                           ; BSR set to: 0
  7115  00072E  0100               	movlb	0	; () banked
  7116  000730  51F6               	movf	_logstate& (0+255),w,b
  7117  000732  0100               	movlb	0	; () banked
  7118  000734  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7119  000736  B4D8               	btfsc	status,2,c
  7120  000738  0012               	return	
  7121                           
  7122                           ; BSR set to: 0
  7123                           ;UI.c: 188: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7124                           
  7125                           ; BSR set to: 0
  7126                           
  7127                           ; BSR set to: 0
  7128  00073A  0E01               	movlw	1
  7129  00073C  ECB5  F022         	call	_lcdInst
  7130  000740  0E68               	movlw	104
  7131  000742  0100               	movlb	0	; () banked
  7132  000744  6FC4               	movwf	??_UI& (0+255),b
  7133  000746  0EE4               	movlw	228
  7134  000748                     u7157:
  7135  000748  2EE8               	decfsz	wreg,f,c
  7136  00074A  D7FE               	bra	u7157
  7137  00074C  2FC4               	decfsz	??_UI& (0+255),f,b
  7138  00074E  D7FC               	bra	u7157
  7139  000750  F000               	nop	
  7140                           
  7141                           ;UI.c: 189: lcdInst(0b10000000);;
  7142  000752  0E80               	movlw	128
  7143  000754  ECB5  F022         	call	_lcdInst
  7144                           
  7145                           ;UI.c: 190: printf(" -- SOUP CAN -- ");
  7146  000758  0E75               	movlw	low STR_26
  7147  00075A  0100               	movlb	0	; () banked
  7148  00075C  6F8E               	movwf	printf@f& (0+255),b
  7149  00075E  0EFD               	movlw	high STR_26
  7150  000760  0100               	movlb	0	; () banked
  7151  000762  6F8F               	movwf	(printf@f+1)& (0+255),b
  7152  000764  EC9C  F008         	call	_printf	;wreg free
  7153                           
  7154                           ;UI.c: 191: lcdInst(0b11000000);;
  7155  000768  0EC0               	movlw	192
  7156  00076A  ECB5  F022         	call	_lcdInst
  7157                           
  7158                           ;UI.c: 192: printf("NO LAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  7159  00076E  0E6F               	movlw	low STR_27
  7160  000770  0100               	movlb	0	; () banked
  7161  000772  6F8E               	movwf	printf@f& (0+255),b
  7162  000774  0EFB               	movlw	high STR_27
  7163  000776  0100               	movlb	0	; () banked
  7164  000778  6F8F               	movwf	(printf@f+1)& (0+255),b
  7165  00077A  C0EA  F090         	movff	_log_count_can_no_lab,?_printf+2
  7166  00077E  C0EB  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  7167  000782  C0EC  F092         	movff	_log_count_can_w_lab,?_printf+4
  7168  000786  C0ED  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  7169  00078A  EC9C  F008         	call	_printf	;wreg free
  7170                           
  7171                           ;UI.c: 194: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7172  00078E  0E00               	movlw	0
  7173  000790  0100               	movlb	0	; () banked
  7174  000792  6FD2               	movwf	UI@i_442& (0+255),b
  7175  000794                     l7476:
  7176                           
  7177                           ; BSR set to: 0
  7178  000794  0E63               	movlw	99
  7179  000796  0100               	movlb	0	; () banked
  7180  000798  65D2               	cpfsgt	UI@i_442& (0+255),b
  7181  00079A  D001               	goto	l7480
  7182  00079C  D00C               	goto	l7484
  7183  00079E                     l7480:
  7184                           
  7185                           ; BSR set to: 0
  7186  00079E  0E68               	movlw	104
  7187  0007A0  0100               	movlb	0	; () banked
  7188  0007A2  6FC4               	movwf	??_UI& (0+255),b
  7189  0007A4  0EE4               	movlw	228
  7190  0007A6                     u7167:
  7191  0007A6  2EE8               	decfsz	wreg,f,c
  7192  0007A8  D7FE               	bra	u7167
  7193  0007AA  2FC4               	decfsz	??_UI& (0+255),f,b
  7194  0007AC  D7FC               	bra	u7167
  7195  0007AE  F000               	nop	
  7196  0007B0  0100               	movlb	0	; () banked
  7197  0007B2  2BD2               	incf	UI@i_442& (0+255),f,b
  7198  0007B4  D7EF               	goto	l7476
  7199  0007B6                     l7484:
  7200                           
  7201                           ; BSR set to: 0
  7202  0007B6  0100               	movlb	0	; () banked
  7203  0007B8  51F6               	movf	_logstate& (0+255),w,b
  7204  0007BA  0100               	movlb	0	; () banked
  7205  0007BC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7206  0007BE  B4D8               	btfsc	status,2,c
  7207  0007C0  0012               	return	
  7208                           
  7209                           ; BSR set to: 0
  7210                           ;UI.c: 195: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7211                           
  7212                           ; BSR set to: 0
  7213                           
  7214                           ; BSR set to: 0
  7215  0007C2  0E00               	movlw	0
  7216  0007C4  0100               	movlb	0	; () banked
  7217  0007C6  6FD3               	movwf	UI@i_443& (0+255),b
  7218  0007C8                     l7490:
  7219                           
  7220                           ; BSR set to: 0
  7221  0007C8  0E63               	movlw	99
  7222  0007CA  0100               	movlb	0	; () banked
  7223  0007CC  65D3               	cpfsgt	UI@i_443& (0+255),b
  7224  0007CE  D001               	goto	l7494
  7225  0007D0  D00C               	goto	l7498
  7226  0007D2                     l7494:
  7227                           
  7228                           ; BSR set to: 0
  7229  0007D2  0E68               	movlw	104
  7230  0007D4  0100               	movlb	0	; () banked
  7231  0007D6  6FC4               	movwf	??_UI& (0+255),b
  7232  0007D8  0EE4               	movlw	228
  7233  0007DA                     u7177:
  7234  0007DA  2EE8               	decfsz	wreg,f,c
  7235  0007DC  D7FE               	bra	u7177
  7236  0007DE  2FC4               	decfsz	??_UI& (0+255),f,b
  7237  0007E0  D7FC               	bra	u7177
  7238  0007E2  F000               	nop	
  7239  0007E4  0100               	movlb	0	; () banked
  7240  0007E6  2BD3               	incf	UI@i_443& (0+255),f,b
  7241  0007E8  D7EF               	goto	l7490
  7242  0007EA                     l7498:
  7243                           
  7244                           ; BSR set to: 0
  7245  0007EA  0100               	movlb	0	; () banked
  7246  0007EC  51F6               	movf	_logstate& (0+255),w,b
  7247  0007EE  0100               	movlb	0	; () banked
  7248  0007F0  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7249  0007F2  B4D8               	btfsc	status,2,c
  7250  0007F4  0012               	return	
  7251                           
  7252                           ; BSR set to: 0
  7253                           ;UI.c: 197: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7254                           
  7255                           ; BSR set to: 0
  7256                           
  7257                           ; BSR set to: 0
  7258  0007F6  0E01               	movlw	1
  7259  0007F8  ECB5  F022         	call	_lcdInst
  7260  0007FC  0E68               	movlw	104
  7261  0007FE  0100               	movlb	0	; () banked
  7262  000800  6FC4               	movwf	??_UI& (0+255),b
  7263  000802  0EE4               	movlw	228
  7264  000804                     u7187:
  7265  000804  2EE8               	decfsz	wreg,f,c
  7266  000806  D7FE               	bra	u7187
  7267  000808  2FC4               	decfsz	??_UI& (0+255),f,b
  7268  00080A  D7FC               	bra	u7187
  7269  00080C  F000               	nop	
  7270                           
  7271                           ;UI.c: 198: lcdInst(0b10000000);;
  7272  00080E  0E80               	movlw	128
  7273  000810  ECB5  F022         	call	_lcdInst
  7274                           
  7275                           ;UI.c: 199: printf("-- TOTAL CANS --");
  7276  000814  0E86               	movlw	low STR_28
  7277  000816  0100               	movlb	0	; () banked
  7278  000818  6F8E               	movwf	printf@f& (0+255),b
  7279  00081A  0EFD               	movlw	high STR_28
  7280  00081C  0100               	movlb	0	; () banked
  7281  00081E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7282  000820  EC9C  F008         	call	_printf	;wreg free
  7283                           
  7284                           ;UI.c: 200: lcdInst(0b11000000);;
  7285  000824  0EC0               	movlw	192
  7286  000826  ECB5  F022         	call	_lcdInst
  7287                           
  7288                           ;UI.c: 201: printf("%d", log_count_total);
  7289  00082A  0E7F               	movlw	low (STR_27+16)
  7290  00082C  0100               	movlb	0	; () banked
  7291  00082E  6F8E               	movwf	printf@f& (0+255),b
  7292  000830  0EFB               	movlw	high (STR_27+16)
  7293  000832  0100               	movlb	0	; () banked
  7294  000834  6F8F               	movwf	(printf@f+1)& (0+255),b
  7295  000836  C0F2  F090         	movff	_log_count_total,?_printf+2
  7296  00083A  C0F3  F091         	movff	_log_count_total+1,?_printf+3
  7297  00083E  EC9C  F008         	call	_printf	;wreg free
  7298                           
  7299                           ;UI.c: 203: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7300  000842  0E00               	movlw	0
  7301  000844  0100               	movlb	0	; () banked
  7302  000846  6FD4               	movwf	UI@i_446& (0+255),b
  7303  000848                     l7516:
  7304                           
  7305                           ; BSR set to: 0
  7306  000848  0E63               	movlw	99
  7307  00084A  0100               	movlb	0	; () banked
  7308  00084C  65D4               	cpfsgt	UI@i_446& (0+255),b
  7309  00084E  D001               	goto	l7520
  7310  000850  D00C               	goto	l7524
  7311  000852                     l7520:
  7312                           
  7313                           ; BSR set to: 0
  7314  000852  0E68               	movlw	104
  7315  000854  0100               	movlb	0	; () banked
  7316  000856  6FC4               	movwf	??_UI& (0+255),b
  7317  000858  0EE4               	movlw	228
  7318  00085A                     u7197:
  7319  00085A  2EE8               	decfsz	wreg,f,c
  7320  00085C  D7FE               	bra	u7197
  7321  00085E  2FC4               	decfsz	??_UI& (0+255),f,b
  7322  000860  D7FC               	bra	u7197
  7323  000862  F000               	nop	
  7324  000864  0100               	movlb	0	; () banked
  7325  000866  2BD4               	incf	UI@i_446& (0+255),f,b
  7326  000868  D7EF               	goto	l7516
  7327  00086A                     l7524:
  7328                           
  7329                           ; BSR set to: 0
  7330  00086A  0100               	movlb	0	; () banked
  7331  00086C  51F6               	movf	_logstate& (0+255),w,b
  7332  00086E  0100               	movlb	0	; () banked
  7333  000870  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7334  000872  B4D8               	btfsc	status,2,c
  7335  000874  0012               	return	
  7336                           
  7337                           ; BSR set to: 0
  7338                           ;UI.c: 204: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7339                           
  7340                           ; BSR set to: 0
  7341                           
  7342                           ; BSR set to: 0
  7343  000876  0E00               	movlw	0
  7344  000878  0100               	movlb	0	; () banked
  7345  00087A  6FD5               	movwf	UI@i_447& (0+255),b
  7346  00087C                     l7530:
  7347                           
  7348                           ; BSR set to: 0
  7349  00087C  0E63               	movlw	99
  7350  00087E  0100               	movlb	0	; () banked
  7351  000880  65D5               	cpfsgt	UI@i_447& (0+255),b
  7352  000882  D001               	goto	l7534
  7353  000884  D00C               	goto	l7538
  7354  000886                     l7534:
  7355                           
  7356                           ; BSR set to: 0
  7357  000886  0E68               	movlw	104
  7358  000888  0100               	movlb	0	; () banked
  7359  00088A  6FC4               	movwf	??_UI& (0+255),b
  7360  00088C  0EE4               	movlw	228
  7361  00088E                     u7207:
  7362  00088E  2EE8               	decfsz	wreg,f,c
  7363  000890  D7FE               	bra	u7207
  7364  000892  2FC4               	decfsz	??_UI& (0+255),f,b
  7365  000894  D7FC               	bra	u7207
  7366  000896  F000               	nop	
  7367  000898  0100               	movlb	0	; () banked
  7368  00089A  2BD5               	incf	UI@i_447& (0+255),f,b
  7369  00089C  D7EF               	goto	l7530
  7370  00089E                     l7538:
  7371                           
  7372                           ; BSR set to: 0
  7373  00089E  0100               	movlb	0	; () banked
  7374  0008A0  51F6               	movf	_logstate& (0+255),w,b
  7375  0008A2  0100               	movlb	0	; () banked
  7376  0008A4  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7377  0008A6  B4D8               	btfsc	status,2,c
  7378  0008A8  0012               	return	
  7379  0008AA                     l7542:
  7380  0008AA  0100               	movlb	0	; () banked
  7381  0008AC  51F6               	movf	_logstate& (0+255),w,b
  7382  0008AE  0100               	movlb	0	; () banked
  7383  0008B0  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7384  0008B2  B4D8               	btfsc	status,2,c
  7385  0008B4  0012               	return	
  7386  0008B6  D44A               	goto	l7238
  7387  0008B8                     __end_of_UI:
  7388                           	opt stack 0
  7389                           tblptru	equ	0xFF8
  7390                           tblptrh	equ	0xFF7
  7391                           tblptrl	equ	0xFF6
  7392                           tablat	equ	0xFF5
  7393                           prodh	equ	0xFF4
  7394                           prodl	equ	0xFF3
  7395                           intcon	equ	0xFF2
  7396                           intcon2	equ	0xFF1
  7397                           intcon3	equ	0xFF0
  7398                           postinc0	equ	0xFEE
  7399                           wreg	equ	0xFE8
  7400                           postdec1	equ	0xFE5
  7401                           fsr1l	equ	0xFE1
  7402                           indf2	equ	0xFDF
  7403                           postinc2	equ	0xFDE
  7404                           postdec2	equ	0xFDD
  7405                           fsr2h	equ	0xFDA
  7406                           fsr2l	equ	0xFD9
  7407                           status	equ	0xFD8
  7408                           
  7409 ;; *************** function _printRTC *****************
  7410 ;; Defined at:
  7411 ;;		line 63 in file "RTC.c"
  7412 ;; Parameters:    Size  Location     Type
  7413 ;;		None
  7414 ;; Auto vars:     Size  Location     Type
  7415 ;;  i               2   66[BANK0 ] int 
  7416 ;;  INT_time       14   46[BANK0 ] int [7]
  7417 ;;  month           4   62[BANK0 ] unsigned char [4]
  7418 ;;  RTC_month       2   60[BANK0 ] int 
  7419 ;; Return value:  Size  Location     Type
  7420 ;;                  1    wreg      void 
  7421 ;; Registers used:
  7422 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7423 ;; Tracked objects:
  7424 ;;		On entry : 0/0
  7425 ;;		On exit  : 0/0
  7426 ;;		Unchanged: 0/0
  7427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7429 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7430 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7431 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7432 ;;Total ram usage:       25 bytes
  7433 ;; Hardware stack levels used:    1
  7434 ;; Hardware stack levels required when called:   10
  7435 ;; This function calls:
  7436 ;;		_getRTC
  7437 ;;		_lcdInst
  7438 ;;		_printf
  7439 ;;		_strcpy
  7440 ;; This function is called by:
  7441 ;;		_UI
  7442 ;;		_change_state_to_menu_start
  7443 ;; This function uses a non-reentrant model
  7444 ;;
  7445                           
  7446                           	psect	text22
  7447  001BCE                     __ptext22:
  7448                           	opt stack 0
  7449  001BCE                     _printRTC:
  7450                           	opt stack 18
  7451                           
  7452                           ;RTC.c: 64: getRTC();
  7453                           
  7454                           ; BSR set to: 0
  7455                           ;incstack = 0
  7456  001BCE  EC4E  F01C         	call	_getRTC	;wreg free
  7457                           
  7458                           ;RTC.c: 65: char month[] = "MMM";
  7459  001BD2  C131  F0BE         	movff	printRTC@F3213,printRTC@month
  7460  001BD6  C132  F0BF         	movff	printRTC@F3213+1,printRTC@month+1
  7461  001BDA  C133  F0C0         	movff	printRTC@F3213+2,printRTC@month+2
  7462  001BDE  C134  F0C1         	movff	printRTC@F3213+3,printRTC@month+3
  7463                           
  7464                           ;RTC.c: 66: int INT_time[7];
  7465                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  7466  001BE2  0E00               	movlw	0
  7467  001BE4  0100               	movlb	0	; () banked
  7468  001BE6  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  7469  001BE8  0E00               	movlw	0
  7470  001BEA  6FC2               	movwf	printRTC@i& (0+255),b
  7471                           
  7472                           ; BSR set to: 0
  7473  001BEC  0100               	movlb	0	; () banked
  7474  001BEE  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7475  001BF0  D008               	goto	l5722
  7476  001BF2  0100               	movlb	0	; () banked
  7477  001BF4  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7478  001BF6  E146               	bnz	l593
  7479  001BF8  0E07               	movlw	7
  7480  001BFA  0100               	movlb	0	; () banked
  7481  001BFC  5DC2               	subwf	printRTC@i& (0+255),w,b
  7482  001BFE  B0D8               	btfsc	status,0,c
  7483  001C00  D041               	goto	l593
  7484  001C02                     l5722:
  7485                           
  7486                           ; BSR set to: 0
  7487                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  7488  001C02  0E24               	movlw	low _time
  7489  001C04  0100               	movlb	0	; () banked
  7490  001C06  25C2               	addwf	printRTC@i& (0+255),w,b
  7491  001C08  6ED9               	movwf	fsr2l,c
  7492  001C0A  0E01               	movlw	high _time
  7493  001C0C  0100               	movlb	0	; () banked
  7494  001C0E  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7495  001C10  6EDA               	movwf	fsr2h,c
  7496  001C12  50DF               	movf	indf2,w,c
  7497  001C14  0100               	movlb	0	; () banked
  7498  001C16  6FAB               	movwf	??_printRTC& (0+255),b
  7499  001C18  0100               	movlb	0	; () banked
  7500  001C1A  3BAB               	swapf	??_printRTC& (0+255),f,b
  7501  001C1C  0E0F               	movlw	15
  7502  001C1E  17AB               	andwf	??_printRTC& (0+255),f,b
  7503  001C20  0E0F               	movlw	15
  7504  001C22  0100               	movlb	0	; () banked
  7505  001C24  17AB               	andwf	??_printRTC& (0+255),f,b
  7506  001C26  0100               	movlb	0	; () banked
  7507  001C28  51AB               	movf	??_printRTC& (0+255),w,b
  7508  001C2A  0D0A               	mullw	10
  7509  001C2C  0E24               	movlw	low _time
  7510  001C2E  0100               	movlb	0	; () banked
  7511  001C30  25C2               	addwf	printRTC@i& (0+255),w,b
  7512  001C32  6ED9               	movwf	fsr2l,c
  7513  001C34  0E01               	movlw	high _time
  7514  001C36  0100               	movlb	0	; () banked
  7515  001C38  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7516  001C3A  6EDA               	movwf	fsr2h,c
  7517  001C3C  50DF               	movf	indf2,w,c
  7518  001C3E  0B0F               	andlw	15
  7519  001C40  0100               	movlb	0	; () banked
  7520  001C42  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  7521  001C44  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  7522  001C46  50F3               	movf	prodl,w,c
  7523  001C48  0100               	movlb	0	; () banked
  7524  001C4A  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  7525  001C4C  50F4               	movf	prodh,w,c
  7526  001C4E  0100               	movlb	0	; () banked
  7527  001C50  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  7528  001C52  90D8               	bcf	status,0,c
  7529  001C54  0100               	movlb	0	; () banked
  7530  001C56  35C2               	rlcf	printRTC@i& (0+255),w,b
  7531  001C58  6ED9               	movwf	fsr2l,c
  7532  001C5A  0100               	movlb	0	; () banked
  7533  001C5C  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  7534  001C5E  6EDA               	movwf	fsr2h,c
  7535  001C60  0EAE               	movlw	low printRTC@INT_time
  7536  001C62  26D9               	addwf	fsr2l,f,c
  7537  001C64  0E00               	movlw	high printRTC@INT_time
  7538  001C66  22DA               	addwfc	fsr2h,f,c
  7539  001C68  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  7540  001C6C  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  7541                           
  7542                           ; BSR set to: 0
  7543  001C70  0100               	movlb	0	; () banked
  7544  001C72  4BC2               	infsnz	printRTC@i& (0+255),f,b
  7545  001C74  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  7546                           
  7547                           ; BSR set to: 0
  7548  001C76  0100               	movlb	0	; () banked
  7549  001C78  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7550  001C7A  D7C3               	goto	l5722
  7551  001C7C  0100               	movlb	0	; () banked
  7552  001C7E  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7553  001C80  E101               	bnz	u4390
  7554  001C82  D7BA               	goto	L6
  7555  001C84                     u4390:
  7556  001C84                     l593:
  7557                           
  7558                           ; BSR set to: 0
  7559                           ;RTC.c: 69: }
  7560                           ;RTC.c: 70: int RTC_month = INT_time[5];
  7561  001C84  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  7562  001C88  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  7563                           
  7564                           ;RTC.c: 71: switch(RTC_month){
  7565  001C8C  D0B4               	goto	l5754
  7566  001C8E                     l5728:
  7567                           
  7568                           ; BSR set to: 0
  7569                           ;RTC.c: 73: strcpy(month, "JAN");
  7570  001C8E  0EBE               	movlw	low printRTC@month
  7571  001C90  0100               	movlb	0	; () banked
  7572  001C92  6F80               	movwf	strcpy@to& (0+255),b
  7573  001C94  0E00               	movlw	high printRTC@month
  7574  001C96  0100               	movlb	0	; () banked
  7575  001C98  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7576  001C9A  0EDA               	movlw	low STR_8
  7577  001C9C  0100               	movlb	0	; () banked
  7578  001C9E  6F82               	movwf	strcpy@from& (0+255),b
  7579  001CA0  0EFF               	movlw	high STR_8
  7580  001CA2  0100               	movlb	0	; () banked
  7581  001CA4  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7582  001CA6  EC3F  F020         	call	_strcpy	;wreg free
  7583                           
  7584                           ;RTC.c: 74: break;
  7585  001CAA  D0D4               	goto	l5756
  7586  001CAC                     l5730:
  7587                           
  7588                           ;RTC.c: 76: strcpy(month, "FEB");
  7589  001CAC  0EBE               	movlw	low printRTC@month
  7590  001CAE  0100               	movlb	0	; () banked
  7591  001CB0  6F80               	movwf	strcpy@to& (0+255),b
  7592  001CB2  0E00               	movlw	high printRTC@month
  7593  001CB4  0100               	movlb	0	; () banked
  7594  001CB6  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7595  001CB8  0ECA               	movlw	low STR_9
  7596  001CBA  0100               	movlb	0	; () banked
  7597  001CBC  6F82               	movwf	strcpy@from& (0+255),b
  7598  001CBE  0EFF               	movlw	high STR_9
  7599  001CC0  0100               	movlb	0	; () banked
  7600  001CC2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7601  001CC4  EC3F  F020         	call	_strcpy	;wreg free
  7602                           
  7603                           ;RTC.c: 77: break;
  7604  001CC8  D0C5               	goto	l5756
  7605  001CCA                     l5732:
  7606                           
  7607                           ;RTC.c: 79: strcpy(month, "MAR");
  7608  001CCA  0EBE               	movlw	low printRTC@month
  7609  001CCC  0100               	movlb	0	; () banked
  7610  001CCE  6F80               	movwf	strcpy@to& (0+255),b
  7611  001CD0  0E00               	movlw	high printRTC@month
  7612  001CD2  0100               	movlb	0	; () banked
  7613  001CD4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7614  001CD6  0EE6               	movlw	low STR_10
  7615  001CD8  0100               	movlb	0	; () banked
  7616  001CDA  6F82               	movwf	strcpy@from& (0+255),b
  7617  001CDC  0EFF               	movlw	high STR_10
  7618  001CDE  0100               	movlb	0	; () banked
  7619  001CE0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7620  001CE2  EC3F  F020         	call	_strcpy	;wreg free
  7621                           
  7622                           ;RTC.c: 80: break;
  7623  001CE6  D0B6               	goto	l5756
  7624  001CE8                     l5734:
  7625                           
  7626                           ;RTC.c: 82: strcpy(month, "APR");
  7627  001CE8  0EBE               	movlw	low printRTC@month
  7628  001CEA  0100               	movlb	0	; () banked
  7629  001CEC  6F80               	movwf	strcpy@to& (0+255),b
  7630  001CEE  0E00               	movlw	high printRTC@month
  7631  001CF0  0100               	movlb	0	; () banked
  7632  001CF2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7633  001CF4  0EEA               	movlw	low STR_11
  7634  001CF6  0100               	movlb	0	; () banked
  7635  001CF8  6F82               	movwf	strcpy@from& (0+255),b
  7636  001CFA  0EFF               	movlw	high STR_11
  7637  001CFC  0100               	movlb	0	; () banked
  7638  001CFE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7639  001D00  EC3F  F020         	call	_strcpy	;wreg free
  7640                           
  7641                           ;RTC.c: 83: break;
  7642  001D04  D0A7               	goto	l5756
  7643  001D06                     l5736:
  7644                           
  7645                           ;RTC.c: 85: strcpy(month, "MAY");
  7646  001D06  0EBE               	movlw	low printRTC@month
  7647  001D08  0100               	movlb	0	; () banked
  7648  001D0A  6F80               	movwf	strcpy@to& (0+255),b
  7649  001D0C  0E00               	movlw	high printRTC@month
  7650  001D0E  0100               	movlb	0	; () banked
  7651  001D10  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7652  001D12  0EFA               	movlw	low STR_12
  7653  001D14  0100               	movlb	0	; () banked
  7654  001D16  6F82               	movwf	strcpy@from& (0+255),b
  7655  001D18  0EFF               	movlw	high STR_12
  7656  001D1A  0100               	movlb	0	; () banked
  7657  001D1C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7658  001D1E  EC3F  F020         	call	_strcpy	;wreg free
  7659                           
  7660                           ;RTC.c: 86: break;
  7661  001D22  D098               	goto	l5756
  7662  001D24                     l5738:
  7663                           
  7664                           ;RTC.c: 88: strcpy(month, "JUN");
  7665  001D24  0EBE               	movlw	low printRTC@month
  7666  001D26  0100               	movlb	0	; () banked
  7667  001D28  6F80               	movwf	strcpy@to& (0+255),b
  7668  001D2A  0E00               	movlw	high printRTC@month
  7669  001D2C  0100               	movlb	0	; () banked
  7670  001D2E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7671  001D30  0EDE               	movlw	low STR_13
  7672  001D32  0100               	movlb	0	; () banked
  7673  001D34  6F82               	movwf	strcpy@from& (0+255),b
  7674  001D36  0EFF               	movlw	high STR_13
  7675  001D38  0100               	movlb	0	; () banked
  7676  001D3A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7677  001D3C  EC3F  F020         	call	_strcpy	;wreg free
  7678                           
  7679                           ;RTC.c: 89: break;
  7680  001D40  D089               	goto	l5756
  7681  001D42                     l5740:
  7682                           
  7683                           ;RTC.c: 91: strcpy(month, "JUL");
  7684  001D42  0EBE               	movlw	low printRTC@month
  7685  001D44  0100               	movlb	0	; () banked
  7686  001D46  6F80               	movwf	strcpy@to& (0+255),b
  7687  001D48  0E00               	movlw	high printRTC@month
  7688  001D4A  0100               	movlb	0	; () banked
  7689  001D4C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7690  001D4E  0ED6               	movlw	low STR_14
  7691  001D50  0100               	movlb	0	; () banked
  7692  001D52  6F82               	movwf	strcpy@from& (0+255),b
  7693  001D54  0EFF               	movlw	high STR_14
  7694  001D56  0100               	movlb	0	; () banked
  7695  001D58  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7696  001D5A  EC3F  F020         	call	_strcpy	;wreg free
  7697                           
  7698                           ;RTC.c: 92: break;
  7699  001D5E  D07A               	goto	l5756
  7700  001D60                     l5742:
  7701                           
  7702                           ;RTC.c: 94: strcpy(month, "AUG");
  7703  001D60  0EBE               	movlw	low printRTC@month
  7704  001D62  0100               	movlb	0	; () banked
  7705  001D64  6F80               	movwf	strcpy@to& (0+255),b
  7706  001D66  0E00               	movlw	high printRTC@month
  7707  001D68  0100               	movlb	0	; () banked
  7708  001D6A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7709  001D6C  0ED2               	movlw	low STR_15
  7710  001D6E  0100               	movlb	0	; () banked
  7711  001D70  6F82               	movwf	strcpy@from& (0+255),b
  7712  001D72  0EFF               	movlw	high STR_15
  7713  001D74  0100               	movlb	0	; () banked
  7714  001D76  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7715  001D78  EC3F  F020         	call	_strcpy	;wreg free
  7716                           
  7717                           ;RTC.c: 95: break;
  7718  001D7C  D06B               	goto	l5756
  7719  001D7E                     l5744:
  7720                           
  7721                           ;RTC.c: 97: strcpy(month, "SEP");
  7722  001D7E  0EBE               	movlw	low printRTC@month
  7723  001D80  0100               	movlb	0	; () banked
  7724  001D82  6F80               	movwf	strcpy@to& (0+255),b
  7725  001D84  0E00               	movlw	high printRTC@month
  7726  001D86  0100               	movlb	0	; () banked
  7727  001D88  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7728  001D8A  0EE2               	movlw	low STR_16
  7729  001D8C  0100               	movlb	0	; () banked
  7730  001D8E  6F82               	movwf	strcpy@from& (0+255),b
  7731  001D90  0EFF               	movlw	high STR_16
  7732  001D92  0100               	movlb	0	; () banked
  7733  001D94  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7734  001D96  EC3F  F020         	call	_strcpy	;wreg free
  7735                           
  7736                           ;RTC.c: 98: break;
  7737  001D9A  D05C               	goto	l5756
  7738  001D9C                     l5746:
  7739                           
  7740                           ;RTC.c: 100: strcpy(month, "OCT");
  7741  001D9C  0EBE               	movlw	low printRTC@month
  7742  001D9E  0100               	movlb	0	; () banked
  7743  001DA0  6F80               	movwf	strcpy@to& (0+255),b
  7744  001DA2  0E00               	movlw	high printRTC@month
  7745  001DA4  0100               	movlb	0	; () banked
  7746  001DA6  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7747  001DA8  0EF2               	movlw	low STR_17
  7748  001DAA  0100               	movlb	0	; () banked
  7749  001DAC  6F82               	movwf	strcpy@from& (0+255),b
  7750  001DAE  0EFF               	movlw	high STR_17
  7751  001DB0  0100               	movlb	0	; () banked
  7752  001DB2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7753  001DB4  EC3F  F020         	call	_strcpy	;wreg free
  7754                           
  7755                           ;RTC.c: 101: break;
  7756  001DB8  D04D               	goto	l5756
  7757  001DBA                     l5748:
  7758                           
  7759                           ;RTC.c: 103: strcpy(month, "NOV");
  7760  001DBA  0EBE               	movlw	low printRTC@month
  7761  001DBC  0100               	movlb	0	; () banked
  7762  001DBE  6F80               	movwf	strcpy@to& (0+255),b
  7763  001DC0  0E00               	movlw	high printRTC@month
  7764  001DC2  0100               	movlb	0	; () banked
  7765  001DC4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7766  001DC6  0EF6               	movlw	low STR_18
  7767  001DC8  0100               	movlb	0	; () banked
  7768  001DCA  6F82               	movwf	strcpy@from& (0+255),b
  7769  001DCC  0EFF               	movlw	high STR_18
  7770  001DCE  0100               	movlb	0	; () banked
  7771  001DD0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7772  001DD2  EC3F  F020         	call	_strcpy	;wreg free
  7773                           
  7774                           ;RTC.c: 104: break;
  7775  001DD6  D03E               	goto	l5756
  7776  001DD8                     l5750:
  7777                           
  7778                           ;RTC.c: 106: strcpy(month, "DEC");
  7779  001DD8  0EBE               	movlw	low printRTC@month
  7780  001DDA  0100               	movlb	0	; () banked
  7781  001DDC  6F80               	movwf	strcpy@to& (0+255),b
  7782  001DDE  0E00               	movlw	high printRTC@month
  7783  001DE0  0100               	movlb	0	; () banked
  7784  001DE2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7785  001DE4  0ECE               	movlw	low STR_19
  7786  001DE6  0100               	movlb	0	; () banked
  7787  001DE8  6F82               	movwf	strcpy@from& (0+255),b
  7788  001DEA  0EFF               	movlw	high STR_19
  7789  001DEC  0100               	movlb	0	; () banked
  7790  001DEE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7791  001DF0  EC3F  F020         	call	_strcpy	;wreg free
  7792                           
  7793                           ;RTC.c: 108: }
  7794                           
  7795                           ;RTC.c: 107: break;
  7796  001DF4  D02F               	goto	l5756
  7797  001DF6                     l5754:
  7798  001DF6  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  7799  001DFA  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  7800                           
  7801                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7802                           ; Switch size 1, requested type "space"
  7803                           ; Number of cases is 1, Range of values is 0 to 0
  7804                           ; switch strategies available:
  7805                           ; Name         Instructions Cycles
  7806                           ; simple_byte            4     3 (average)
  7807                           ;	Chosen strategy is simple_byte
  7808  001DFE  0100               	movlb	0	; () banked
  7809  001E00  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  7810  001E02  0A00               	xorlw	0	; case 0
  7811  001E04  A4D8               	btfss	status,2,c
  7812  001E06  D026               	goto	l5756
  7813                           
  7814                           ; BSR set to: 0
  7815                           ; Switch size 1, requested type "space"
  7816                           ; Number of cases is 12, Range of values is 1 to 12
  7817                           ; switch strategies available:
  7818                           ; Name         Instructions Cycles
  7819                           ; simple_byte           37    19 (average)
  7820                           ;	Chosen strategy is simple_byte
  7821  001E08  0100               	movlb	0	; () banked
  7822  001E0A  51AB               	movf	??_printRTC& (0+255),w,b
  7823  001E0C  0A01               	xorlw	1	; case 1
  7824  001E0E  B4D8               	btfsc	status,2,c
  7825  001E10  D73E               	goto	l5728
  7826  001E12  0A03               	xorlw	3	; case 2
  7827  001E14  B4D8               	btfsc	status,2,c
  7828  001E16  D74A               	goto	l5730
  7829  001E18  0A01               	xorlw	1	; case 3
  7830  001E1A  B4D8               	btfsc	status,2,c
  7831  001E1C  D756               	goto	l5732
  7832  001E1E  0A07               	xorlw	7	; case 4
  7833  001E20  B4D8               	btfsc	status,2,c
  7834  001E22  D762               	goto	l5734
  7835  001E24  0A01               	xorlw	1	; case 5
  7836  001E26  B4D8               	btfsc	status,2,c
  7837  001E28  D76E               	goto	l5736
  7838  001E2A  0A03               	xorlw	3	; case 6
  7839  001E2C  B4D8               	btfsc	status,2,c
  7840  001E2E  D77A               	goto	l5738
  7841  001E30  0A01               	xorlw	1	; case 7
  7842  001E32  B4D8               	btfsc	status,2,c
  7843  001E34  D786               	goto	l5740
  7844  001E36  0A0F               	xorlw	15	; case 8
  7845  001E38  B4D8               	btfsc	status,2,c
  7846  001E3A  D792               	goto	l5742
  7847  001E3C  0A01               	xorlw	1	; case 9
  7848  001E3E  B4D8               	btfsc	status,2,c
  7849  001E40  D79E               	goto	l5744
  7850  001E42  0A03               	xorlw	3	; case 10
  7851  001E44  B4D8               	btfsc	status,2,c
  7852  001E46  D7AA               	goto	l5746
  7853  001E48  0A01               	xorlw	1	; case 11
  7854  001E4A  B4D8               	btfsc	status,2,c
  7855  001E4C  D7B6               	goto	l5748
  7856  001E4E  0A07               	xorlw	7	; case 12
  7857  001E50  B4D8               	btfsc	status,2,c
  7858  001E52  D7C2               	goto	l5750
  7859  001E54                     l5756:
  7860                           
  7861                           ;RTC.c: 109: lcdInst(0b10000000);;
  7862  001E54  0E80               	movlw	128
  7863  001E56  ECB5  F022         	call	_lcdInst
  7864                           
  7865                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  7866  001E5A  0E42               	movlw	low STR_21
  7867  001E5C  0100               	movlb	0	; () banked
  7868  001E5E  6F8E               	movwf	printf@f& (0+255),b
  7869  001E60  0EFB               	movlw	high STR_21
  7870  001E62  0100               	movlb	0	; () banked
  7871  001E64  6F8F               	movwf	(printf@f+1)& (0+255),b
  7872  001E66  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  7873  001E6A  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  7874  001E6E  0EBE               	movlw	low printRTC@month
  7875  001E70  0100               	movlb	0	; () banked
  7876  001E72  6F92               	movwf	(?_printf+4)& (0+255),b
  7877  001E74  0E00               	movlw	high printRTC@month
  7878  001E76  0100               	movlb	0	; () banked
  7879  001E78  6F93               	movwf	(?_printf+5)& (0+255),b
  7880  001E7A  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  7881  001E7E  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  7882  001E82  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  7883  001E86  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  7884  001E8A  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  7885  001E8E  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  7886  001E92  EC9C  F008         	call	_printf	;wreg free
  7887  001E96  0012               	return		;funcret
  7888  001E98                     __end_of_printRTC:
  7889                           	opt stack 0
  7890                           tblptru	equ	0xFF8
  7891                           tblptrh	equ	0xFF7
  7892                           tblptrl	equ	0xFF6
  7893                           tablat	equ	0xFF5
  7894                           prodh	equ	0xFF4
  7895                           prodl	equ	0xFF3
  7896                           intcon	equ	0xFF2
  7897                           intcon2	equ	0xFF1
  7898                           intcon3	equ	0xFF0
  7899                           postinc0	equ	0xFEE
  7900                           wreg	equ	0xFE8
  7901                           postdec1	equ	0xFE5
  7902                           fsr1l	equ	0xFE1
  7903                           indf2	equ	0xFDF
  7904                           postinc2	equ	0xFDE
  7905                           postdec2	equ	0xFDD
  7906                           fsr2h	equ	0xFDA
  7907                           fsr2l	equ	0xFD9
  7908                           status	equ	0xFD8
  7909                           
  7910 ;; *************** function _strcpy *****************
  7911 ;; Defined at:
  7912 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  7913 ;; Parameters:    Size  Location     Type
  7914 ;;  to              2    0[BANK0 ] PTR unsigned char 
  7915 ;;		 -> printRTC@month(4), UI@month(4), 
  7916 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  7917 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  7918 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  7919 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  7920 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  7921 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  7922 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  7923 ;;		 -> STR_8(4), 
  7924 ;; Auto vars:     Size  Location     Type
  7925 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  7926 ;;		 -> printRTC@month(4), UI@month(4), 
  7927 ;; Return value:  Size  Location     Type
  7928 ;;                  2    0[BANK0 ] PTR unsigned char 
  7929 ;; Registers used:
  7930 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  7931 ;; Tracked objects:
  7932 ;;		On entry : 0/0
  7933 ;;		On exit  : 0/0
  7934 ;;		Unchanged: 0/0
  7935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7936 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7937 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7939 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7940 ;;Total ram usage:        6 bytes
  7941 ;; Hardware stack levels used:    1
  7942 ;; Hardware stack levels required when called:    7
  7943 ;; This function calls:
  7944 ;;		Nothing
  7945 ;; This function is called by:
  7946 ;;		_UI
  7947 ;;		_printRTC
  7948 ;; This function uses a non-reentrant model
  7949 ;;
  7950                           
  7951                           	psect	text23
  7952  00407E                     __ptext23:
  7953                           	opt stack 0
  7954  00407E                     _strcpy:
  7955                           	opt stack 20
  7956                           
  7957                           ;incstack = 0
  7958  00407E  C080  F084         	movff	strcpy@to,strcpy@cp
  7959  004082  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  7960  004086  D006               	goto	l5460
  7961  004088                     l5458:
  7962  004088  0100               	movlb	0	; () banked
  7963  00408A  4B84               	infsnz	strcpy@cp& (0+255),f,b
  7964  00408C  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  7965  00408E  0100               	movlb	0	; () banked
  7966  004090  4B82               	infsnz	strcpy@from& (0+255),f,b
  7967  004092  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  7968  004094                     l5460:
  7969  004094  C082  FFF6         	movff	strcpy@from,tblptrl
  7970  004098  C083  FFF7         	movff	strcpy@from+1,tblptrh
  7971  00409C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7972  00409C  6AF8               	clrf	tblptru,c
  7973  00409E                     	endif
  7974  00409E                     	if	0	;tblptru may be non-zero
  7975  00409E                     	endif
  7976  00409E  C084  FFD9         	movff	strcpy@cp,fsr2l
  7977  0040A2  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  7978  0040A6  0008               	tblrd		*
  7979  0040A8  CFF5 FFDF          	movff	tablat,indf2
  7980  0040AC  50DF               	movf	indf2,w,c
  7981  0040AE  B4D8               	btfsc	status,2,c
  7982  0040B0  0012               	return	
  7983  0040B2  D7EA               	goto	l5458
  7984  0040B4                     __end_of_strcpy:
  7985                           	opt stack 0
  7986                           tblptru	equ	0xFF8
  7987                           tblptrh	equ	0xFF7
  7988                           tblptrl	equ	0xFF6
  7989                           tablat	equ	0xFF5
  7990                           prodh	equ	0xFF4
  7991                           prodl	equ	0xFF3
  7992                           intcon	equ	0xFF2
  7993                           intcon2	equ	0xFF1
  7994                           intcon3	equ	0xFF0
  7995                           postinc0	equ	0xFEE
  7996                           wreg	equ	0xFE8
  7997                           postdec1	equ	0xFE5
  7998                           fsr1l	equ	0xFE1
  7999                           indf2	equ	0xFDF
  8000                           postinc2	equ	0xFDE
  8001                           postdec2	equ	0xFDD
  8002                           fsr2h	equ	0xFDA
  8003                           fsr2l	equ	0xFD9
  8004                           status	equ	0xFD8
  8005                           
  8006 ;; *************** function _getRTC *****************
  8007 ;; Defined at:
  8008 ;;		line 44 in file "RTC.c"
  8009 ;; Parameters:    Size  Location     Type
  8010 ;;		None
  8011 ;; Auto vars:     Size  Location     Type
  8012 ;;  i               2    3[BANK0 ] int 
  8013 ;; Return value:  Size  Location     Type
  8014 ;;                  1    wreg      void 
  8015 ;; Registers used:
  8016 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8017 ;; Tracked objects:
  8018 ;;		On entry : 0/0
  8019 ;;		On exit  : 0/0
  8020 ;;		Unchanged: 0/0
  8021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8023 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8025 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8026 ;;Total ram usage:        2 bytes
  8027 ;; Hardware stack levels used:    1
  8028 ;; Hardware stack levels required when called:    9
  8029 ;; This function calls:
  8030 ;;		_I2C_Master_Read
  8031 ;;		_I2C_Master_Start
  8032 ;;		_I2C_Master_Stop
  8033 ;;		_I2C_Master_Write
  8034 ;; This function is called by:
  8035 ;;		_printRTC
  8036 ;;		_initSortTimer
  8037 ;; This function uses a non-reentrant model
  8038 ;;
  8039                           
  8040                           	psect	text24
  8041  00389C                     __ptext24:
  8042                           	opt stack 0
  8043  00389C                     _getRTC:
  8044                           	opt stack 18
  8045                           
  8046                           ;RTC.c: 48: I2C_Master_Start();
  8047                           
  8048                           ;incstack = 0
  8049  00389C  ECDB  F022         	call	_I2C_Master_Start	;wreg free
  8050                           
  8051                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  8052  0038A0  0E00               	movlw	0
  8053  0038A2  0100               	movlb	0	; () banked
  8054  0038A4  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8055  0038A6  0ED0               	movlw	208
  8056  0038A8  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8057  0038AA  ECC9  F022         	call	_I2C_Master_Write	;wreg free
  8058                           
  8059                           ;RTC.c: 50: I2C_Master_Write(0x00);
  8060  0038AE  0E00               	movlw	0
  8061  0038B0  0100               	movlb	0	; () banked
  8062  0038B2  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8063  0038B4  0E00               	movlw	0
  8064  0038B6  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8065  0038B8  ECC9  F022         	call	_I2C_Master_Write	;wreg free
  8066                           
  8067                           ;RTC.c: 51: I2C_Master_Stop();
  8068  0038BC  ECD7  F022         	call	_I2C_Master_Stop	;wreg free
  8069                           
  8070                           ;RTC.c: 54: I2C_Master_Start();
  8071  0038C0  ECDB  F022         	call	_I2C_Master_Start	;wreg free
  8072                           
  8073                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  8074  0038C4  0E00               	movlw	0
  8075  0038C6  0100               	movlb	0	; () banked
  8076  0038C8  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8077  0038CA  0ED1               	movlw	209
  8078  0038CC  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8079  0038CE  ECC9  F022         	call	_I2C_Master_Write	;wreg free
  8080                           
  8081                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  8082  0038D2  0E00               	movlw	0
  8083  0038D4  0100               	movlb	0	; () banked
  8084  0038D6  6F84               	movwf	(getRTC@i+1)& (0+255),b
  8085  0038D8  0E00               	movlw	0
  8086  0038DA  6F83               	movwf	getRTC@i& (0+255),b
  8087  0038DC                     l5466:
  8088                           
  8089                           ; BSR set to: 0
  8090  0038DC  0100               	movlb	0	; () banked
  8091  0038DE  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  8092  0038E0  D008               	goto	l5470
  8093  0038E2  0100               	movlb	0	; () banked
  8094  0038E4  5184               	movf	(getRTC@i+1)& (0+255),w,b
  8095  0038E6  E115               	bnz	l5476
  8096  0038E8  0E06               	movlw	6
  8097  0038EA  0100               	movlb	0	; () banked
  8098  0038EC  5D83               	subwf	getRTC@i& (0+255),w,b
  8099  0038EE  B0D8               	btfsc	status,0,c
  8100  0038F0  D010               	goto	l5476
  8101  0038F2                     l5470:
  8102                           
  8103                           ; BSR set to: 0
  8104                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  8105  0038F2  0E24               	movlw	low _time
  8106  0038F4  0100               	movlb	0	; () banked
  8107  0038F6  2583               	addwf	getRTC@i& (0+255),w,b
  8108  0038F8  6ED9               	movwf	fsr2l,c
  8109  0038FA  0E01               	movlw	high _time
  8110  0038FC  0100               	movlb	0	; () banked
  8111  0038FE  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  8112  003900  6EDA               	movwf	fsr2h,c
  8113  003902  0E01               	movlw	1
  8114  003904  EC66  F021         	call	_I2C_Master_Read
  8115  003908  6EDF               	movwf	indf2,c
  8116  00390A  0100               	movlb	0	; () banked
  8117  00390C  4B83               	infsnz	getRTC@i& (0+255),f,b
  8118  00390E  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  8119  003910  D7E5               	goto	l5466
  8120  003912                     l5476:
  8121                           
  8122                           ; BSR set to: 0
  8123                           ;RTC.c: 58: }
  8124                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  8125  003912  0E00               	movlw	0
  8126  003914  EC66  F021         	call	_I2C_Master_Read
  8127  003918  0101               	movlb	1	; () banked
  8128  00391A  6F2A               	movwf	(_time+6)& (0+255),b
  8129                           
  8130                           ;RTC.c: 60: I2C_Master_Stop();
  8131  00391C  ECD7  F022         	call	_I2C_Master_Stop	;wreg free
  8132  003920  0012               	return		;funcret
  8133  003922                     __end_of_getRTC:
  8134                           	opt stack 0
  8135                           tblptru	equ	0xFF8
  8136                           tblptrh	equ	0xFF7
  8137                           tblptrl	equ	0xFF6
  8138                           tablat	equ	0xFF5
  8139                           prodh	equ	0xFF4
  8140                           prodl	equ	0xFF3
  8141                           intcon	equ	0xFF2
  8142                           intcon2	equ	0xFF1
  8143                           intcon3	equ	0xFF0
  8144                           postinc0	equ	0xFEE
  8145                           wreg	equ	0xFE8
  8146                           postdec1	equ	0xFE5
  8147                           fsr1l	equ	0xFE1
  8148                           indf2	equ	0xFDF
  8149                           postinc2	equ	0xFDE
  8150                           postdec2	equ	0xFDD
  8151                           fsr2h	equ	0xFDA
  8152                           fsr2l	equ	0xFD9
  8153                           status	equ	0xFD8
  8154                           
  8155 ;; *************** function _I2C_Master_Write *****************
  8156 ;; Defined at:
  8157 ;;		line 49 in file "I2C.c"
  8158 ;; Parameters:    Size  Location     Type
  8159 ;;  d               2    1[BANK0 ] unsigned int 
  8160 ;; Auto vars:     Size  Location     Type
  8161 ;;		None
  8162 ;; Return value:  Size  Location     Type
  8163 ;;                  1    wreg      void 
  8164 ;; Registers used:
  8165 ;;		wreg, status,2, status,0, cstack
  8166 ;; Tracked objects:
  8167 ;;		On entry : 0/0
  8168 ;;		On exit  : 0/0
  8169 ;;		Unchanged: 0/0
  8170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8171 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8174 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8175 ;;Total ram usage:        2 bytes
  8176 ;; Hardware stack levels used:    1
  8177 ;; Hardware stack levels required when called:    8
  8178 ;; This function calls:
  8179 ;;		_I2C_Master_Wait
  8180 ;; This function is called by:
  8181 ;;		_loadRTC
  8182 ;;		_getRTC
  8183 ;; This function uses a non-reentrant model
  8184 ;;
  8185                           
  8186                           	psect	text25
  8187  004592                     __ptext25:
  8188                           	opt stack 0
  8189  004592                     _I2C_Master_Write:
  8190                           	opt stack 18
  8191                           
  8192                           ;I2C.c: 51: I2C_Master_Wait();
  8193                           
  8194                           ;incstack = 0
  8195  004592  EC9A  F022         	call	_I2C_Master_Wait	;wreg free
  8196                           
  8197                           ;I2C.c: 52: SSPBUF = d;
  8198  004596  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  8199  00459A  0012               	return		;funcret
  8200  00459C                     __end_of_I2C_Master_Write:
  8201                           	opt stack 0
  8202                           tblptru	equ	0xFF8
  8203                           tblptrh	equ	0xFF7
  8204                           tblptrl	equ	0xFF6
  8205                           tablat	equ	0xFF5
  8206                           prodh	equ	0xFF4
  8207                           prodl	equ	0xFF3
  8208                           intcon	equ	0xFF2
  8209                           intcon2	equ	0xFF1
  8210                           intcon3	equ	0xFF0
  8211                           postinc0	equ	0xFEE
  8212                           wreg	equ	0xFE8
  8213                           postdec1	equ	0xFE5
  8214                           fsr1l	equ	0xFE1
  8215                           indf2	equ	0xFDF
  8216                           postinc2	equ	0xFDE
  8217                           postdec2	equ	0xFDD
  8218                           fsr2h	equ	0xFDA
  8219                           fsr2l	equ	0xFD9
  8220                           status	equ	0xFD8
  8221                           
  8222 ;; *************** function _I2C_Master_Stop *****************
  8223 ;; Defined at:
  8224 ;;		line 43 in file "I2C.c"
  8225 ;; Parameters:    Size  Location     Type
  8226 ;;		None
  8227 ;; Auto vars:     Size  Location     Type
  8228 ;;		None
  8229 ;; Return value:  Size  Location     Type
  8230 ;;                  1    wreg      void 
  8231 ;; Registers used:
  8232 ;;		wreg, status,2, status,0, cstack
  8233 ;; Tracked objects:
  8234 ;;		On entry : 0/0
  8235 ;;		On exit  : 0/0
  8236 ;;		Unchanged: 0/0
  8237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8241 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8242 ;;Total ram usage:        0 bytes
  8243 ;; Hardware stack levels used:    1
  8244 ;; Hardware stack levels required when called:    8
  8245 ;; This function calls:
  8246 ;;		_I2C_Master_Wait
  8247 ;; This function is called by:
  8248 ;;		_loadRTC
  8249 ;;		_getRTC
  8250 ;; This function uses a non-reentrant model
  8251 ;;
  8252                           
  8253                           	psect	text26
  8254  0045AE                     __ptext26:
  8255                           	opt stack 0
  8256  0045AE                     _I2C_Master_Stop:
  8257                           	opt stack 18
  8258                           
  8259                           ;I2C.c: 45: I2C_Master_Wait();
  8260                           
  8261                           ;incstack = 0
  8262  0045AE  EC9A  F022         	call	_I2C_Master_Wait	;wreg free
  8263                           
  8264                           ;I2C.c: 46: PEN = 1;
  8265  0045B2  84C5               	bsf	4037,2,c	;volatile
  8266  0045B4  0012               	return		;funcret
  8267  0045B6                     __end_of_I2C_Master_Stop:
  8268                           	opt stack 0
  8269                           tblptru	equ	0xFF8
  8270                           tblptrh	equ	0xFF7
  8271                           tblptrl	equ	0xFF6
  8272                           tablat	equ	0xFF5
  8273                           prodh	equ	0xFF4
  8274                           prodl	equ	0xFF3
  8275                           intcon	equ	0xFF2
  8276                           intcon2	equ	0xFF1
  8277                           intcon3	equ	0xFF0
  8278                           postinc0	equ	0xFEE
  8279                           wreg	equ	0xFE8
  8280                           postdec1	equ	0xFE5
  8281                           fsr1l	equ	0xFE1
  8282                           indf2	equ	0xFDF
  8283                           postinc2	equ	0xFDE
  8284                           postdec2	equ	0xFDD
  8285                           fsr2h	equ	0xFDA
  8286                           fsr2l	equ	0xFD9
  8287                           status	equ	0xFD8
  8288                           
  8289 ;; *************** function _I2C_Master_Start *****************
  8290 ;; Defined at:
  8291 ;;		line 31 in file "I2C.c"
  8292 ;; Parameters:    Size  Location     Type
  8293 ;;		None
  8294 ;; Auto vars:     Size  Location     Type
  8295 ;;		None
  8296 ;; Return value:  Size  Location     Type
  8297 ;;                  1    wreg      void 
  8298 ;; Registers used:
  8299 ;;		wreg, status,2, status,0, cstack
  8300 ;; Tracked objects:
  8301 ;;		On entry : 0/0
  8302 ;;		On exit  : 0/0
  8303 ;;		Unchanged: 0/0
  8304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8308 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8309 ;;Total ram usage:        0 bytes
  8310 ;; Hardware stack levels used:    1
  8311 ;; Hardware stack levels required when called:    8
  8312 ;; This function calls:
  8313 ;;		_I2C_Master_Wait
  8314 ;; This function is called by:
  8315 ;;		_loadRTC
  8316 ;;		_getRTC
  8317 ;; This function uses a non-reentrant model
  8318 ;;
  8319                           
  8320                           	psect	text27
  8321  0045B6                     __ptext27:
  8322                           	opt stack 0
  8323  0045B6                     _I2C_Master_Start:
  8324                           	opt stack 18
  8325                           
  8326                           ;I2C.c: 33: I2C_Master_Wait();
  8327                           
  8328                           ;incstack = 0
  8329  0045B6  EC9A  F022         	call	_I2C_Master_Wait	;wreg free
  8330                           
  8331                           ;I2C.c: 34: SEN = 1;
  8332  0045BA  80C5               	bsf	4037,0,c	;volatile
  8333  0045BC  0012               	return		;funcret
  8334  0045BE                     __end_of_I2C_Master_Start:
  8335                           	opt stack 0
  8336                           tblptru	equ	0xFF8
  8337                           tblptrh	equ	0xFF7
  8338                           tblptrl	equ	0xFF6
  8339                           tablat	equ	0xFF5
  8340                           prodh	equ	0xFF4
  8341                           prodl	equ	0xFF3
  8342                           intcon	equ	0xFF2
  8343                           intcon2	equ	0xFF1
  8344                           intcon3	equ	0xFF0
  8345                           postinc0	equ	0xFEE
  8346                           wreg	equ	0xFE8
  8347                           postdec1	equ	0xFE5
  8348                           fsr1l	equ	0xFE1
  8349                           indf2	equ	0xFDF
  8350                           postinc2	equ	0xFDE
  8351                           postdec2	equ	0xFDD
  8352                           fsr2h	equ	0xFDA
  8353                           fsr2l	equ	0xFD9
  8354                           status	equ	0xFD8
  8355                           
  8356 ;; *************** function _I2C_Master_Read *****************
  8357 ;; Defined at:
  8358 ;;		line 55 in file "I2C.c"
  8359 ;; Parameters:    Size  Location     Type
  8360 ;;  a               1    wreg     unsigned char 
  8361 ;; Auto vars:     Size  Location     Type
  8362 ;;  a               1    1[BANK0 ] unsigned char 
  8363 ;;  temp            1    2[BANK0 ] unsigned char 
  8364 ;; Return value:  Size  Location     Type
  8365 ;;                  1    wreg      unsigned char 
  8366 ;; Registers used:
  8367 ;;		wreg, status,2, status,0, cstack
  8368 ;; Tracked objects:
  8369 ;;		On entry : 0/0
  8370 ;;		On exit  : 0/0
  8371 ;;		Unchanged: 0/0
  8372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8374 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8376 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8377 ;;Total ram usage:        2 bytes
  8378 ;; Hardware stack levels used:    1
  8379 ;; Hardware stack levels required when called:    8
  8380 ;; This function calls:
  8381 ;;		_I2C_Master_Wait
  8382 ;; This function is called by:
  8383 ;;		_getRTC
  8384 ;; This function uses a non-reentrant model
  8385 ;;
  8386                           
  8387                           	psect	text28
  8388  0042CC                     __ptext28:
  8389                           	opt stack 0
  8390  0042CC                     _I2C_Master_Read:
  8391                           	opt stack 18
  8392                           
  8393                           ;incstack = 0
  8394                           ;I2C_Master_Read@a stored from wreg
  8395  0042CC  0100               	movlb	0	; () banked
  8396  0042CE  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  8397                           
  8398                           ;I2C.c: 57: unsigned char temp;
  8399                           ;I2C.c: 58: I2C_Master_Wait();
  8400  0042D0  EC9A  F022         	call	_I2C_Master_Wait	;wreg free
  8401                           
  8402                           ;I2C.c: 59: RCEN = 1;
  8403  0042D4  86C5               	bsf	4037,3,c	;volatile
  8404                           
  8405                           ;I2C.c: 60: I2C_Master_Wait();
  8406  0042D6  EC9A  F022         	call	_I2C_Master_Wait	;wreg free
  8407                           
  8408                           ;I2C.c: 61: temp = SSPBUF;
  8409  0042DA  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  8410                           
  8411                           ;I2C.c: 62: I2C_Master_Wait();
  8412  0042DE  EC9A  F022         	call	_I2C_Master_Wait	;wreg free
  8413                           
  8414                           ;I2C.c: 63: ACKDT = (a)?0:1;
  8415  0042E2  0100               	movlb	0	; () banked
  8416  0042E4  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  8417  0042E6  0100               	movlb	0	; () banked
  8418  0042E8  A4D8               	btfss	status,2,c
  8419  0042EA  D002               	goto	u3480
  8420  0042EC  8AC5               	bsf	4037,5,c	;volatile
  8421  0042EE  D001               	goto	l5160
  8422  0042F0                     u3480:
  8423  0042F0  9AC5               	bcf	4037,5,c	;volatile
  8424  0042F2                     l5160:
  8425                           
  8426                           ;I2C.c: 64: ACKEN = 1;
  8427  0042F2  88C5               	bsf	4037,4,c	;volatile
  8428                           
  8429                           ;I2C.c: 65: return temp;
  8430  0042F4  0100               	movlb	0	; () banked
  8431  0042F6  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  8432  0042F8  0012               	return	
  8433  0042FA                     __end_of_I2C_Master_Read:
  8434                           	opt stack 0
  8435                           tblptru	equ	0xFF8
  8436                           tblptrh	equ	0xFF7
  8437                           tblptrl	equ	0xFF6
  8438                           tablat	equ	0xFF5
  8439                           prodh	equ	0xFF4
  8440                           prodl	equ	0xFF3
  8441                           intcon	equ	0xFF2
  8442                           intcon2	equ	0xFF1
  8443                           intcon3	equ	0xFF0
  8444                           postinc0	equ	0xFEE
  8445                           wreg	equ	0xFE8
  8446                           postdec1	equ	0xFE5
  8447                           fsr1l	equ	0xFE1
  8448                           indf2	equ	0xFDF
  8449                           postinc2	equ	0xFDE
  8450                           postdec2	equ	0xFDD
  8451                           fsr2h	equ	0xFDA
  8452                           fsr2l	equ	0xFD9
  8453                           status	equ	0xFD8
  8454                           
  8455 ;; *************** function _I2C_Master_Wait *****************
  8456 ;; Defined at:
  8457 ;;		line 26 in file "I2C.c"
  8458 ;; Parameters:    Size  Location     Type
  8459 ;;		None
  8460 ;; Auto vars:     Size  Location     Type
  8461 ;;		None
  8462 ;; Return value:  Size  Location     Type
  8463 ;;                  1    wreg      void 
  8464 ;; Registers used:
  8465 ;;		wreg, status,2, status,0
  8466 ;; Tracked objects:
  8467 ;;		On entry : 0/0
  8468 ;;		On exit  : 0/0
  8469 ;;		Unchanged: 0/0
  8470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8473 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8474 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8475 ;;Total ram usage:        1 bytes
  8476 ;; Hardware stack levels used:    1
  8477 ;; Hardware stack levels required when called:    7
  8478 ;; This function calls:
  8479 ;;		Nothing
  8480 ;; This function is called by:
  8481 ;;		_I2C_Master_Start
  8482 ;;		_I2C_Master_Stop
  8483 ;;		_I2C_Master_Write
  8484 ;;		_I2C_Master_Read
  8485 ;;		_I2C_Master_RepeatedStart
  8486 ;; This function uses a non-reentrant model
  8487 ;;
  8488                           
  8489                           	psect	text29
  8490  004534                     __ptext29:
  8491                           	opt stack 0
  8492  004534                     _I2C_Master_Wait:
  8493                           	opt stack 18
  8494  004534                     l66:
  8495  004534  B4C7               	btfsc	4039,2,c	;volatile
  8496  004536  D7FE               	goto	l66
  8497  004538  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  8498  00453C  0E1F               	movlw	31
  8499  00453E  0100               	movlb	0	; () banked
  8500  004540  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  8501  004542  B4D8               	btfsc	status,2,c
  8502  004544  0012               	return	
  8503  004546  D7F6               	goto	l66
  8504  004548                     __end_of_I2C_Master_Wait:
  8505                           	opt stack 0
  8506                           tblptru	equ	0xFF8
  8507                           tblptrh	equ	0xFF7
  8508                           tblptrl	equ	0xFF6
  8509                           tablat	equ	0xFF5
  8510                           prodh	equ	0xFF4
  8511                           prodl	equ	0xFF3
  8512                           intcon	equ	0xFF2
  8513                           intcon2	equ	0xFF1
  8514                           intcon3	equ	0xFF0
  8515                           postinc0	equ	0xFEE
  8516                           wreg	equ	0xFE8
  8517                           postdec1	equ	0xFE5
  8518                           fsr1l	equ	0xFE1
  8519                           indf2	equ	0xFDF
  8520                           postinc2	equ	0xFDE
  8521                           postdec2	equ	0xFDD
  8522                           fsr2h	equ	0xFDA
  8523                           fsr2l	equ	0xFD9
  8524                           status	equ	0xFD8
  8525                           
  8526 ;; *************** function _change_state_to_menu_22 *****************
  8527 ;; Defined at:
  8528 ;;		line 496 in file "UI.c"
  8529 ;; Parameters:    Size  Location     Type
  8530 ;;		None
  8531 ;; Auto vars:     Size  Location     Type
  8532 ;;		None
  8533 ;; Return value:  Size  Location     Type
  8534 ;;                  1    wreg      void 
  8535 ;; Registers used:
  8536 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8537 ;; Tracked objects:
  8538 ;;		On entry : 0/0
  8539 ;;		On exit  : 0/0
  8540 ;;		Unchanged: 0/0
  8541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8545 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8546 ;;Total ram usage:        0 bytes
  8547 ;; Hardware stack levels used:    1
  8548 ;; Hardware stack levels required when called:   10
  8549 ;; This function calls:
  8550 ;;		_lcdInst
  8551 ;;		_printf
  8552 ;; This function is called by:
  8553 ;;		_UI
  8554 ;; This function uses a non-reentrant model
  8555 ;;
  8556                           
  8557                           	psect	text30
  8558  00400E                     __ptext30:
  8559                           	opt stack 0
  8560  00400E                     _change_state_to_menu_22:
  8561                           	opt stack 19
  8562                           
  8563                           ;UI.c: 497: cur_state = 22;
  8564                           
  8565                           ; BSR set to: 0
  8566                           ;incstack = 0
  8567  00400E  0E00               	movlw	0
  8568  004010  0100               	movlb	0	; () banked
  8569  004012  6FDF               	movwf	(_cur_state+1)& (0+255),b
  8570  004014  0E16               	movlw	22
  8571  004016  6FDE               	movwf	_cur_state& (0+255),b
  8572                           
  8573                           ; BSR set to: 0
  8574                           ;UI.c: 499: lcdInst(0b10000000);;
  8575  004018  0E80               	movlw	128
  8576  00401A  ECB5  F022         	call	_lcdInst
  8577                           
  8578                           ;UI.c: 500: printf("2. SORT        <");
  8579  00401E  0EEC               	movlw	low STR_34
  8580  004020  0100               	movlb	0	; () banked
  8581  004022  6F8E               	movwf	printf@f& (0+255),b
  8582  004024  0EFD               	movlw	high STR_34
  8583  004026  0100               	movlb	0	; () banked
  8584  004028  6F8F               	movwf	(printf@f+1)& (0+255),b
  8585  00402A  EC9C  F008         	call	_printf	;wreg free
  8586                           
  8587                           ;UI.c: 501: lcdInst(0b11000000);;
  8588  00402E  0EC0               	movlw	192
  8589  004030  ECB5  F022         	call	_lcdInst
  8590                           
  8591                           ;UI.c: 502: printf("3. LOGS         ");
  8592  004034  0E31               	movlw	low STR_36
  8593  004036  0100               	movlb	0	; () banked
  8594  004038  6F8E               	movwf	printf@f& (0+255),b
  8595  00403A  0EFD               	movlw	high STR_36
  8596  00403C  0100               	movlb	0	; () banked
  8597  00403E  6F8F               	movwf	(printf@f+1)& (0+255),b
  8598  004040  EC9C  F008         	call	_printf	;wreg free
  8599  004044  0012               	return		;funcret
  8600  004046                     __end_of_change_state_to_menu_22:
  8601                           	opt stack 0
  8602                           tblptru	equ	0xFF8
  8603                           tblptrh	equ	0xFF7
  8604                           tblptrl	equ	0xFF6
  8605                           tablat	equ	0xFF5
  8606                           prodh	equ	0xFF4
  8607                           prodl	equ	0xFF3
  8608                           intcon	equ	0xFF2
  8609                           intcon2	equ	0xFF1
  8610                           intcon3	equ	0xFF0
  8611                           postinc0	equ	0xFEE
  8612                           wreg	equ	0xFE8
  8613                           postdec1	equ	0xFE5
  8614                           fsr1l	equ	0xFE1
  8615                           indf2	equ	0xFDF
  8616                           postinc2	equ	0xFDE
  8617                           postdec2	equ	0xFDD
  8618                           fsr2h	equ	0xFDA
  8619                           fsr2l	equ	0xFD9
  8620                           status	equ	0xFD8
  8621                           
  8622 ;; *************** function _change_state_to_menu_12 *****************
  8623 ;; Defined at:
  8624 ;;		line 488 in file "UI.c"
  8625 ;; Parameters:    Size  Location     Type
  8626 ;;		None
  8627 ;; Auto vars:     Size  Location     Type
  8628 ;;		None
  8629 ;; Return value:  Size  Location     Type
  8630 ;;                  1    wreg      void 
  8631 ;; Registers used:
  8632 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8633 ;; Tracked objects:
  8634 ;;		On entry : 0/0
  8635 ;;		On exit  : 0/0
  8636 ;;		Unchanged: 0/0
  8637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8641 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8642 ;;Total ram usage:        0 bytes
  8643 ;; Hardware stack levels used:    1
  8644 ;; Hardware stack levels required when called:   10
  8645 ;; This function calls:
  8646 ;;		_lcdInst
  8647 ;;		_printf
  8648 ;; This function is called by:
  8649 ;;		_UI
  8650 ;; This function uses a non-reentrant model
  8651 ;;
  8652                           
  8653                           	psect	text31
  8654  004046                     __ptext31:
  8655                           	opt stack 0
  8656  004046                     _change_state_to_menu_12:
  8657                           	opt stack 19
  8658                           
  8659                           ;UI.c: 489: cur_state = 12;
  8660                           
  8661                           ;incstack = 0
  8662  004046  0E00               	movlw	0
  8663  004048  0100               	movlb	0	; () banked
  8664  00404A  6FDF               	movwf	(_cur_state+1)& (0+255),b
  8665  00404C  0E0C               	movlw	12
  8666  00404E  6FDE               	movwf	_cur_state& (0+255),b
  8667                           
  8668                           ; BSR set to: 0
  8669                           ;UI.c: 491: lcdInst(0b10000000);;
  8670  004050  0E80               	movlw	128
  8671  004052  ECB5  F022         	call	_lcdInst
  8672                           
  8673                           ;UI.c: 492: printf("1. DATE/TIME    ");
  8674  004056  0E53               	movlw	low STR_33
  8675  004058  0100               	movlb	0	; () banked
  8676  00405A  6F8E               	movwf	printf@f& (0+255),b
  8677  00405C  0EFD               	movlw	high STR_33
  8678  00405E  0100               	movlb	0	; () banked
  8679  004060  6F8F               	movwf	(printf@f+1)& (0+255),b
  8680  004062  EC9C  F008         	call	_printf	;wreg free
  8681                           
  8682                           ;UI.c: 493: lcdInst(0b11000000);;
  8683  004066  0EC0               	movlw	192
  8684  004068  ECB5  F022         	call	_lcdInst
  8685                           
  8686                           ;UI.c: 494: printf("2. SORT        <");
  8687  00406C  0EEC               	movlw	low STR_34
  8688  00406E  0100               	movlb	0	; () banked
  8689  004070  6F8E               	movwf	printf@f& (0+255),b
  8690  004072  0EFD               	movlw	high STR_34
  8691  004074  0100               	movlb	0	; () banked
  8692  004076  6F8F               	movwf	(printf@f+1)& (0+255),b
  8693  004078  EC9C  F008         	call	_printf	;wreg free
  8694  00407C  0012               	return		;funcret
  8695  00407E                     __end_of_change_state_to_menu_12:
  8696                           	opt stack 0
  8697                           tblptru	equ	0xFF8
  8698                           tblptrh	equ	0xFF7
  8699                           tblptrl	equ	0xFF6
  8700                           tablat	equ	0xFF5
  8701                           prodh	equ	0xFF4
  8702                           prodl	equ	0xFF3
  8703                           intcon	equ	0xFF2
  8704                           intcon2	equ	0xFF1
  8705                           intcon3	equ	0xFF0
  8706                           postinc0	equ	0xFEE
  8707                           wreg	equ	0xFE8
  8708                           postdec1	equ	0xFE5
  8709                           fsr1l	equ	0xFE1
  8710                           indf2	equ	0xFDF
  8711                           postinc2	equ	0xFDE
  8712                           postdec2	equ	0xFDD
  8713                           fsr2h	equ	0xFDA
  8714                           fsr2l	equ	0xFD9
  8715                           status	equ	0xFD8
  8716                           
  8717 ;; *************** function ___awmod *****************
  8718 ;; Defined at:
  8719 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  8720 ;; Parameters:    Size  Location     Type
  8721 ;;  dividend        2    0[BANK0 ] int 
  8722 ;;  divisor         2    2[BANK0 ] int 
  8723 ;; Auto vars:     Size  Location     Type
  8724 ;;  sign            1    5[BANK0 ] unsigned char 
  8725 ;;  counter         1    4[BANK0 ] unsigned char 
  8726 ;; Return value:  Size  Location     Type
  8727 ;;                  2    0[BANK0 ] int 
  8728 ;; Registers used:
  8729 ;;		wreg, status,2, status,0
  8730 ;; Tracked objects:
  8731 ;;		On entry : 0/0
  8732 ;;		On exit  : 0/0
  8733 ;;		Unchanged: 0/0
  8734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8735 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8736 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8738 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8739 ;;Total ram usage:        6 bytes
  8740 ;; Hardware stack levels used:    1
  8741 ;; Hardware stack levels required when called:    7
  8742 ;; This function calls:
  8743 ;;		Nothing
  8744 ;; This function is called by:
  8745 ;;		_UI
  8746 ;; This function uses a non-reentrant model
  8747 ;;
  8748                           
  8749                           	psect	text32
  8750  003650                     __ptext32:
  8751                           	opt stack 0
  8752  003650                     ___awmod:
  8753                           	opt stack 22
  8754                           
  8755                           ;incstack = 0
  8756  003650  0E00               	movlw	0
  8757  003652  0100               	movlb	0	; () banked
  8758  003654  6F85               	movwf	___awmod@sign& (0+255),b
  8759                           
  8760                           ; BSR set to: 0
  8761  003656  0100               	movlb	0	; () banked
  8762  003658  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  8763  00365A  D008               	goto	l7150
  8764                           
  8765                           ; BSR set to: 0
  8766  00365C  0100               	movlb	0	; () banked
  8767  00365E  6D80               	negf	___awmod@dividend& (0+255),b
  8768  003660  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8769  003662  B0D8               	btfsc	status,0,c
  8770  003664  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8771                           
  8772                           ; BSR set to: 0
  8773  003666  0E01               	movlw	1
  8774  003668  0100               	movlb	0	; () banked
  8775  00366A  6F85               	movwf	___awmod@sign& (0+255),b
  8776  00366C                     l7150:
  8777                           
  8778                           ; BSR set to: 0
  8779  00366C  0100               	movlb	0	; () banked
  8780  00366E  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8781  003670  D005               	goto	l7154
  8782                           
  8783                           ; BSR set to: 0
  8784  003672  0100               	movlb	0	; () banked
  8785  003674  6D82               	negf	___awmod@divisor& (0+255),b
  8786  003676  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  8787  003678  B0D8               	btfsc	status,0,c
  8788  00367A  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  8789  00367C                     l7154:
  8790                           
  8791                           ; BSR set to: 0
  8792  00367C  0100               	movlb	0	; () banked
  8793  00367E  5182               	movf	___awmod@divisor& (0+255),w,b
  8794  003680  0100               	movlb	0	; () banked
  8795  003682  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  8796  003684  B4D8               	btfsc	status,2,c
  8797  003686  D026               	goto	l7170
  8798                           
  8799                           ; BSR set to: 0
  8800  003688  0E01               	movlw	1
  8801  00368A  0100               	movlb	0	; () banked
  8802  00368C  6F84               	movwf	___awmod@counter& (0+255),b
  8803  00368E  D006               	goto	l7160
  8804  003690                     l7158:
  8805                           
  8806                           ; BSR set to: 0
  8807  003690  0100               	movlb	0	; () banked
  8808  003692  90D8               	bcf	status,0,c
  8809  003694  3782               	rlcf	___awmod@divisor& (0+255),f,b
  8810  003696  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  8811  003698  0100               	movlb	0	; () banked
  8812  00369A  2B84               	incf	___awmod@counter& (0+255),f,b
  8813  00369C                     l7160:
  8814                           
  8815                           ; BSR set to: 0
  8816  00369C  0100               	movlb	0	; () banked
  8817  00369E  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8818  0036A0  D7F7               	goto	l7158
  8819  0036A2                     l7162:
  8820                           
  8821                           ; BSR set to: 0
  8822  0036A2  0100               	movlb	0	; () banked
  8823  0036A4  5182               	movf	___awmod@divisor& (0+255),w,b
  8824  0036A6  0100               	movlb	0	; () banked
  8825  0036A8  5D80               	subwf	___awmod@dividend& (0+255),w,b
  8826  0036AA  0100               	movlb	0	; () banked
  8827  0036AC  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  8828  0036AE  0100               	movlb	0	; () banked
  8829  0036B0  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  8830  0036B2  A0D8               	btfss	status,0,c
  8831  0036B4  D008               	goto	l7166
  8832                           
  8833                           ; BSR set to: 0
  8834  0036B6  0100               	movlb	0	; () banked
  8835  0036B8  5182               	movf	___awmod@divisor& (0+255),w,b
  8836  0036BA  0100               	movlb	0	; () banked
  8837  0036BC  5F80               	subwf	___awmod@dividend& (0+255),f,b
  8838  0036BE  0100               	movlb	0	; () banked
  8839  0036C0  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  8840  0036C2  0100               	movlb	0	; () banked
  8841  0036C4  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  8842  0036C6                     l7166:
  8843                           
  8844                           ; BSR set to: 0
  8845  0036C6  0100               	movlb	0	; () banked
  8846  0036C8  90D8               	bcf	status,0,c
  8847  0036CA  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  8848  0036CC  3382               	rrcf	___awmod@divisor& (0+255),f,b
  8849                           
  8850                           ; BSR set to: 0
  8851  0036CE  0100               	movlb	0	; () banked
  8852  0036D0  2F84               	decfsz	___awmod@counter& (0+255),f,b
  8853  0036D2  D7E7               	goto	l7162
  8854  0036D4                     l7170:
  8855                           
  8856                           ; BSR set to: 0
  8857  0036D4  0100               	movlb	0	; () banked
  8858  0036D6  5185               	movf	___awmod@sign& (0+255),w,b
  8859  0036D8  0100               	movlb	0	; () banked
  8860  0036DA  B4D8               	btfsc	status,2,c
  8861  0036DC  D005               	goto	l7174
  8862                           
  8863                           ; BSR set to: 0
  8864  0036DE  0100               	movlb	0	; () banked
  8865  0036E0  6D80               	negf	___awmod@dividend& (0+255),b
  8866  0036E2  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8867  0036E4  B0D8               	btfsc	status,0,c
  8868  0036E6  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8869  0036E8                     l7174:
  8870                           
  8871                           ; BSR set to: 0
  8872  0036E8  C080  F080         	movff	___awmod@dividend,?___awmod
  8873  0036EC  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  8874  0036F0  0012               	return	
  8875  0036F2                     __end_of___awmod:
  8876                           	opt stack 0
  8877                           tblptru	equ	0xFF8
  8878                           tblptrh	equ	0xFF7
  8879                           tblptrl	equ	0xFF6
  8880                           tablat	equ	0xFF5
  8881                           prodh	equ	0xFF4
  8882                           prodl	equ	0xFF3
  8883                           intcon	equ	0xFF2
  8884                           intcon2	equ	0xFF1
  8885                           intcon3	equ	0xFF0
  8886                           postinc0	equ	0xFEE
  8887                           wreg	equ	0xFE8
  8888                           postdec1	equ	0xFE5
  8889                           fsr1l	equ	0xFE1
  8890                           indf2	equ	0xFDF
  8891                           postinc2	equ	0xFDE
  8892                           postdec2	equ	0xFDD
  8893                           fsr2h	equ	0xFDA
  8894                           fsr2l	equ	0xFD9
  8895                           status	equ	0xFD8
  8896                           
  8897 ;; *************** function ___awdiv *****************
  8898 ;; Defined at:
  8899 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  8900 ;; Parameters:    Size  Location     Type
  8901 ;;  dividend        2    6[BANK0 ] int 
  8902 ;;  divisor         2    8[BANK0 ] int 
  8903 ;; Auto vars:     Size  Location     Type
  8904 ;;  quotient        2   12[BANK0 ] int 
  8905 ;;  sign            1   11[BANK0 ] unsigned char 
  8906 ;;  counter         1   10[BANK0 ] unsigned char 
  8907 ;; Return value:  Size  Location     Type
  8908 ;;                  2    6[BANK0 ] int 
  8909 ;; Registers used:
  8910 ;;		wreg, status,2, status,0
  8911 ;; Tracked objects:
  8912 ;;		On entry : 0/0
  8913 ;;		On exit  : 0/0
  8914 ;;		Unchanged: 0/0
  8915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8916 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8917 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8919 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8920 ;;Total ram usage:        8 bytes
  8921 ;; Hardware stack levels used:    1
  8922 ;; Hardware stack levels required when called:    7
  8923 ;; This function calls:
  8924 ;;		Nothing
  8925 ;; This function is called by:
  8926 ;;		_UI
  8927 ;; This function uses a non-reentrant model
  8928 ;;
  8929                           
  8930                           	psect	text33
  8931  00342C                     __ptext33:
  8932                           	opt stack 0
  8933  00342C                     ___awdiv:
  8934                           	opt stack 22
  8935                           
  8936                           ; BSR set to: 0
  8937                           ;incstack = 0
  8938  00342C  0E00               	movlw	0
  8939  00342E  0100               	movlb	0	; () banked
  8940  003430  6F8B               	movwf	___awdiv@sign& (0+255),b
  8941                           
  8942                           ; BSR set to: 0
  8943  003432  0100               	movlb	0	; () banked
  8944  003434  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8945  003436  D008               	goto	l7106
  8946                           
  8947                           ; BSR set to: 0
  8948  003438  0100               	movlb	0	; () banked
  8949  00343A  6D88               	negf	___awdiv@divisor& (0+255),b
  8950  00343C  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  8951  00343E  B0D8               	btfsc	status,0,c
  8952  003440  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  8953                           
  8954                           ; BSR set to: 0
  8955  003442  0E01               	movlw	1
  8956  003444  0100               	movlb	0	; () banked
  8957  003446  6F8B               	movwf	___awdiv@sign& (0+255),b
  8958  003448                     l7106:
  8959                           
  8960                           ; BSR set to: 0
  8961  003448  0100               	movlb	0	; () banked
  8962  00344A  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  8963  00344C  D008               	goto	l7112
  8964                           
  8965                           ; BSR set to: 0
  8966  00344E  0100               	movlb	0	; () banked
  8967  003450  6D86               	negf	___awdiv@dividend& (0+255),b
  8968  003452  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  8969  003454  B0D8               	btfsc	status,0,c
  8970  003456  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  8971                           
  8972                           ; BSR set to: 0
  8973  003458  0E01               	movlw	1
  8974  00345A  0100               	movlb	0	; () banked
  8975  00345C  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  8976  00345E                     l7112:
  8977                           
  8978                           ; BSR set to: 0
  8979  00345E  0E00               	movlw	0
  8980  003460  0100               	movlb	0	; () banked
  8981  003462  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  8982  003464  0E00               	movlw	0
  8983  003466  6F8C               	movwf	___awdiv@quotient& (0+255),b
  8984                           
  8985                           ; BSR set to: 0
  8986  003468  0100               	movlb	0	; () banked
  8987  00346A  5188               	movf	___awdiv@divisor& (0+255),w,b
  8988  00346C  0100               	movlb	0	; () banked
  8989  00346E  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  8990  003470  B4D8               	btfsc	status,2,c
  8991  003472  D02C               	goto	l7134
  8992                           
  8993                           ; BSR set to: 0
  8994  003474  0E01               	movlw	1
  8995  003476  0100               	movlb	0	; () banked
  8996  003478  6F8A               	movwf	___awdiv@counter& (0+255),b
  8997  00347A  D006               	goto	l7120
  8998  00347C                     l7118:
  8999                           
  9000                           ; BSR set to: 0
  9001  00347C  0100               	movlb	0	; () banked
  9002  00347E  90D8               	bcf	status,0,c
  9003  003480  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  9004  003482  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  9005  003484  0100               	movlb	0	; () banked
  9006  003486  2B8A               	incf	___awdiv@counter& (0+255),f,b
  9007  003488                     l7120:
  9008                           
  9009                           ; BSR set to: 0
  9010  003488  0100               	movlb	0	; () banked
  9011  00348A  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9012  00348C  D7F7               	goto	l7118
  9013  00348E                     l7122:
  9014                           
  9015                           ; BSR set to: 0
  9016  00348E  0100               	movlb	0	; () banked
  9017  003490  90D8               	bcf	status,0,c
  9018  003492  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  9019  003494  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  9020                           
  9021                           ; BSR set to: 0
  9022  003496  0100               	movlb	0	; () banked
  9023  003498  5188               	movf	___awdiv@divisor& (0+255),w,b
  9024  00349A  0100               	movlb	0	; () banked
  9025  00349C  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  9026  00349E  0100               	movlb	0	; () banked
  9027  0034A0  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9028  0034A2  0100               	movlb	0	; () banked
  9029  0034A4  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  9030  0034A6  A0D8               	btfss	status,0,c
  9031  0034A8  D00A               	goto	l7130
  9032                           
  9033                           ; BSR set to: 0
  9034  0034AA  0100               	movlb	0	; () banked
  9035  0034AC  5188               	movf	___awdiv@divisor& (0+255),w,b
  9036  0034AE  0100               	movlb	0	; () banked
  9037  0034B0  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  9038  0034B2  0100               	movlb	0	; () banked
  9039  0034B4  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9040  0034B6  0100               	movlb	0	; () banked
  9041  0034B8  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  9042                           
  9043                           ; BSR set to: 0
  9044  0034BA  0100               	movlb	0	; () banked
  9045  0034BC  818C               	bsf	___awdiv@quotient& (0+255),0,b
  9046  0034BE                     l7130:
  9047                           
  9048                           ; BSR set to: 0
  9049  0034BE  0100               	movlb	0	; () banked
  9050  0034C0  90D8               	bcf	status,0,c
  9051  0034C2  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  9052  0034C4  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  9053                           
  9054                           ; BSR set to: 0
  9055  0034C6  0100               	movlb	0	; () banked
  9056  0034C8  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  9057  0034CA  D7E1               	goto	l7122
  9058  0034CC                     l7134:
  9059                           
  9060                           ; BSR set to: 0
  9061  0034CC  0100               	movlb	0	; () banked
  9062  0034CE  518B               	movf	___awdiv@sign& (0+255),w,b
  9063  0034D0  0100               	movlb	0	; () banked
  9064  0034D2  B4D8               	btfsc	status,2,c
  9065  0034D4  D005               	goto	l7138
  9066                           
  9067                           ; BSR set to: 0
  9068  0034D6  0100               	movlb	0	; () banked
  9069  0034D8  6D8C               	negf	___awdiv@quotient& (0+255),b
  9070  0034DA  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  9071  0034DC  B0D8               	btfsc	status,0,c
  9072  0034DE  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  9073  0034E0                     l7138:
  9074                           
  9075                           ; BSR set to: 0
  9076  0034E0  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  9077  0034E4  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  9078  0034E8  0012               	return	
  9079  0034EA                     __end_of___awdiv:
  9080                           	opt stack 0
  9081                           tblptru	equ	0xFF8
  9082                           tblptrh	equ	0xFF7
  9083                           tblptrl	equ	0xFF6
  9084                           tablat	equ	0xFF5
  9085                           prodh	equ	0xFF4
  9086                           prodl	equ	0xFF3
  9087                           intcon	equ	0xFF2
  9088                           intcon2	equ	0xFF1
  9089                           intcon3	equ	0xFF0
  9090                           postinc0	equ	0xFEE
  9091                           wreg	equ	0xFE8
  9092                           postdec1	equ	0xFE5
  9093                           fsr1l	equ	0xFE1
  9094                           indf2	equ	0xFDF
  9095                           postinc2	equ	0xFDE
  9096                           postdec2	equ	0xFDD
  9097                           fsr2h	equ	0xFDA
  9098                           fsr2l	equ	0xFD9
  9099                           status	equ	0xFD8
  9100                           
  9101 ;; *************** function _Test *****************
  9102 ;; Defined at:
  9103 ;;		line 28 in file "Test.c"
  9104 ;; Parameters:    Size  Location     Type
  9105 ;;		None
  9106 ;; Auto vars:     Size  Location     Type
  9107 ;;		None
  9108 ;; Return value:  Size  Location     Type
  9109 ;;                  1    wreg      void 
  9110 ;; Registers used:
  9111 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9112 ;; Tracked objects:
  9113 ;;		On entry : 0/0
  9114 ;;		On exit  : 0/0
  9115 ;;		Unchanged: 0/0
  9116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9118 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9119 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9120 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9121 ;;Total ram usage:        2 bytes
  9122 ;; Hardware stack levels used:    1
  9123 ;; Hardware stack levels required when called:   11
  9124 ;; This function calls:
  9125 ;;		_BothServos
  9126 ;;		_EEPROMTest
  9127 ;;		_PortTestA5
  9128 ;;		_PortTests
  9129 ;;		_SolenoidTestA5
  9130 ;;		_ToggleTestA5
  9131 ;;		_actuatorTest
  9132 ;;		_algorithmTest
  9133 ;;		_lcdInst
  9134 ;;		_printf
  9135 ;;		_sensorTest
  9136 ;; This function is called by:
  9137 ;;		_main
  9138 ;; This function uses a non-reentrant model
  9139 ;;
  9140                           
  9141                           	psect	text34
  9142  003068                     __ptext34:
  9143                           	opt stack 0
  9144  003068                     _Test:
  9145                           	opt stack 19
  9146  003068                     
  9147                           ;Test.c: 31: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
  9148  003068  0E01               	movlw	1
  9149  00306A  ECB5  F022         	call	_lcdInst
  9150  00306E  0E68               	movlw	104
  9151  003070  0100               	movlb	0	; () banked
  9152  003072  6FC6               	movwf	??_Test& (0+255),b
  9153  003074  0EE4               	movlw	228
  9154  003076                     u7217:
  9155  003076  2EE8               	decfsz	wreg,f,c
  9156  003078  D7FE               	bra	u7217
  9157  00307A  2FC6               	decfsz	??_Test& (0+255),f,b
  9158  00307C  D7FC               	bra	u7217
  9159  00307E  F000               	nop	
  9160  003080  0E80               	movlw	128
  9161  003082  ECB5  F022         	call	_lcdInst
  9162                           
  9163                           ;Test.c: 32: printf("1.ALG|2.SNR|3.AC");
  9164  003086  0E98               	movlw	low STR_68
  9165  003088  0100               	movlb	0	; () banked
  9166  00308A  6F8E               	movwf	printf@f& (0+255),b
  9167  00308C  0EFC               	movlw	high STR_68
  9168  00308E  0100               	movlb	0	; () banked
  9169  003090  6F8F               	movwf	(printf@f+1)& (0+255),b
  9170  003092  EC9C  F008         	call	_printf	;wreg free
  9171                           
  9172                           ;Test.c: 33: lcdInst(0b11000000);;
  9173  003096  0EC0               	movlw	192
  9174  003098  ECB5  F022         	call	_lcdInst
  9175                           
  9176                           ;Test.c: 34: printf("4.HI|5.TOG|6.EEP");
  9177  00309C  0ECB               	movlw	low STR_69
  9178  00309E  0100               	movlb	0	; () banked
  9179  0030A0  6F8E               	movwf	printf@f& (0+255),b
  9180  0030A2  0EFC               	movlw	high STR_69
  9181  0030A4  0100               	movlb	0	; () banked
  9182  0030A6  6F8F               	movwf	(printf@f+1)& (0+255),b
  9183  0030A8  EC9C  F008         	call	_printf	;wreg free
  9184                           
  9185                           ;Test.c: 35: _delay((unsigned long)((100)*(32000000/4000.0)));
  9186  0030AC  0E05               	movlw	5
  9187  0030AE  0100               	movlb	0	; () banked
  9188  0030B0  6FC7               	movwf	(??_Test+1)& (0+255),b
  9189  0030B2  0E0F               	movlw	15
  9190  0030B4  0100               	movlb	0	; () banked
  9191  0030B6  6FC6               	movwf	??_Test& (0+255),b
  9192  0030B8  0EF1               	movlw	241
  9193  0030BA                     u7227:
  9194  0030BA  2EE8               	decfsz	wreg,f,c
  9195  0030BC  D7FE               	bra	u7227
  9196  0030BE  2FC6               	decfsz	??_Test& (0+255),f,b
  9197  0030C0  D7FC               	bra	u7227
  9198  0030C2  2FC7               	decfsz	(??_Test+1)& (0+255),f,b
  9199  0030C4  D7FA               	bra	u7227
  9200  0030C6                     l1017:
  9201  0030C6  A281               	btfss	3969,1,c	;volatile
  9202  0030C8  D7FE               	goto	l1017
  9203                           
  9204                           ;Test.c: 37: var = PORTB >> 4;
  9205  0030CA  CF81 F0C6          	movff	3969,??_Test	;volatile
  9206  0030CE  0100               	movlb	0	; () banked
  9207  0030D0  3BC6               	swapf	??_Test& (0+255),f,b
  9208  0030D2  0E0F               	movlw	15
  9209  0030D4  17C6               	andwf	??_Test& (0+255),f,b
  9210  0030D6  0100               	movlb	0	; () banked
  9211  0030D8  51C6               	movf	??_Test& (0+255),w,b
  9212  0030DA  0100               	movlb	0	; () banked
  9213  0030DC  6FFA               	movwf	_var& (0+255),b
  9214  0030DE  6BFB               	clrf	(_var+1)& (0+255),b
  9215                           
  9216                           ; BSR set to: 0
  9217                           ;Test.c: 38: var++;
  9218  0030E0  0100               	movlb	0	; () banked
  9219  0030E2  4BFA               	infsnz	_var& (0+255),f,b
  9220  0030E4  2BFB               	incf	(_var+1)& (0+255),f,b
  9221  0030E6                     l1020:
  9222  0030E6  A281               	btfss	3969,1,c	;volatile
  9223  0030E8  D01C               	goto	l7870
  9224  0030EA  D7FD               	goto	l1020
  9225  0030EC                     l7850:
  9226                           
  9227                           ;Test.c: 42: algorithmTest();
  9228  0030EC  ECAB  F019         	call	_algorithmTest	;wreg free
  9229                           
  9230                           ;Test.c: 43: break;
  9231  0030F0  D7BB               	goto	l7832
  9232  0030F2                     l7852:
  9233                           
  9234                           ;Test.c: 45: sensorTest();
  9235  0030F2  ECB3  F013         	call	_sensorTest	;wreg free
  9236                           
  9237                           ;Test.c: 46: break;
  9238  0030F6  D7B8               	goto	l7832
  9239  0030F8                     l7854:
  9240                           
  9241                           ;Test.c: 48: actuatorTest();
  9242  0030F8  EC5C  F004         	call	_actuatorTest	;wreg free
  9243                           
  9244                           ;Test.c: 49: break;
  9245  0030FC  D7B5               	goto	l7832
  9246  0030FE                     l7856:
  9247                           
  9248                           ;Test.c: 51: PortTestA5();
  9249  0030FE  EC7A  F01E         	call	_PortTestA5	;wreg free
  9250                           
  9251                           ;Test.c: 52: break;
  9252  003102  D7B2               	goto	l7832
  9253  003104                     l7858:
  9254                           
  9255                           ;Test.c: 54: ToggleTestA5();
  9256  003104  EC0A  F01C         	call	_ToggleTestA5	;wreg free
  9257                           
  9258                           ;Test.c: 55: break;
  9259  003108  D7AF               	goto	l7832
  9260  00310A                     l7860:
  9261                           
  9262                           ;Test.c: 57: EEPROMTest();
  9263  00310A  ECE7  F022         	call	_EEPROMTest	;wreg free
  9264                           
  9265                           ;Test.c: 58: break;
  9266  00310E  D7AC               	goto	l7832
  9267  003110                     l7862:
  9268                           
  9269                           ;Test.c: 60: SolenoidTestA5();
  9270  003110  ECB8  F018         	call	_SolenoidTestA5	;wreg free
  9271                           
  9272                           ;Test.c: 61: break;
  9273  003114  D7A9               	goto	l7832
  9274  003116                     l7864:
  9275                           
  9276                           ;Test.c: 63: PortTests();
  9277  003116  EC91  F01C         	call	_PortTests	;wreg free
  9278                           
  9279                           ;Test.c: 64: break;
  9280  00311A  D7A6               	goto	l7832
  9281  00311C                     l7866:
  9282                           
  9283                           ;Test.c: 66: BothServos();
  9284  00311C  EC6F  F00C         	call	_BothServos	;wreg free
  9285                           
  9286                           ;Test.c: 69: }
  9287                           
  9288                           ;Test.c: 68: break;
  9289                           
  9290                           ;Test.c: 67: default:
  9291  003120  D7A3               	goto	l7832
  9292  003122                     l7870:
  9293  003122  C0FA  F0C6         	movff	_var,??_Test
  9294  003126  C0FB  F0C7         	movff	_var+1,??_Test+1
  9295                           
  9296                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9297                           ; Switch size 1, requested type "space"
  9298                           ; Number of cases is 1, Range of values is 0 to 0
  9299                           ; switch strategies available:
  9300                           ; Name         Instructions Cycles
  9301                           ; simple_byte            4     3 (average)
  9302                           ;	Chosen strategy is simple_byte
  9303  00312A  0100               	movlb	0	; () banked
  9304  00312C  51C7               	movf	(??_Test+1)& (0+255),w,b
  9305  00312E  0A00               	xorlw	0	; case 0
  9306  003130  A4D8               	btfss	status,2,c
  9307  003132  D79A               	goto	l7832
  9308                           
  9309                           ; BSR set to: 0
  9310                           ; Switch size 1, requested type "space"
  9311                           ; Number of cases is 9, Range of values is 1 to 10
  9312                           ; switch strategies available:
  9313                           ; Name         Instructions Cycles
  9314                           ; simple_byte           28    15 (average)
  9315                           ;	Chosen strategy is simple_byte
  9316  003134  0100               	movlb	0	; () banked
  9317  003136  51C6               	movf	??_Test& (0+255),w,b
  9318  003138  0A01               	xorlw	1	; case 1
  9319  00313A  B4D8               	btfsc	status,2,c
  9320  00313C  D7D7               	goto	l7850
  9321  00313E  0A03               	xorlw	3	; case 2
  9322  003140  B4D8               	btfsc	status,2,c
  9323  003142  D7D7               	goto	l7852
  9324  003144  0A01               	xorlw	1	; case 3
  9325  003146  B4D8               	btfsc	status,2,c
  9326  003148  D7D7               	goto	l7854
  9327  00314A  0A06               	xorlw	6	; case 5
  9328  00314C  B4D8               	btfsc	status,2,c
  9329  00314E  D7D7               	goto	l7856
  9330  003150  0A03               	xorlw	3	; case 6
  9331  003152  B4D8               	btfsc	status,2,c
  9332  003154  D7D7               	goto	l7858
  9333  003156  0A01               	xorlw	1	; case 7
  9334  003158  B4D8               	btfsc	status,2,c
  9335  00315A  D7D7               	goto	l7860
  9336  00315C  0A0F               	xorlw	15	; case 8
  9337  00315E  B4D8               	btfsc	status,2,c
  9338  003160  D7D7               	goto	l7862
  9339  003162  0A01               	xorlw	1	; case 9
  9340  003164  B4D8               	btfsc	status,2,c
  9341  003166  D7D7               	goto	l7864
  9342  003168  0A03               	xorlw	3	; case 10
  9343  00316A  B4D8               	btfsc	status,2,c
  9344  00316C  D7D7               	goto	l7866
  9345                           
  9346                           ; BSR set to: 0
  9347                           
  9348                           ; BSR set to: 0
  9349  00316E  D77C               	goto	l7832
  9350  003170                     __end_of_Test:
  9351                           	opt stack 0
  9352                           tblptru	equ	0xFF8
  9353                           tblptrh	equ	0xFF7
  9354                           tblptrl	equ	0xFF6
  9355                           tablat	equ	0xFF5
  9356                           prodh	equ	0xFF4
  9357                           prodl	equ	0xFF3
  9358                           intcon	equ	0xFF2
  9359                           intcon2	equ	0xFF1
  9360                           intcon3	equ	0xFF0
  9361                           postinc0	equ	0xFEE
  9362                           wreg	equ	0xFE8
  9363                           postdec1	equ	0xFE5
  9364                           fsr1l	equ	0xFE1
  9365                           indf2	equ	0xFDF
  9366                           postinc2	equ	0xFDE
  9367                           postdec2	equ	0xFDD
  9368                           fsr2h	equ	0xFDA
  9369                           fsr2l	equ	0xFD9
  9370                           status	equ	0xFD8
  9371                           
  9372 ;; *************** function _sensorTest *****************
  9373 ;; Defined at:
  9374 ;;		line 117 in file "Test.c"
  9375 ;; Parameters:    Size  Location     Type
  9376 ;;		None
  9377 ;; Auto vars:     Size  Location     Type
  9378 ;;  on              2   45[BANK0 ] int 
  9379 ;; Return value:  Size  Location     Type
  9380 ;;                  1    wreg      void 
  9381 ;; Registers used:
  9382 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9383 ;; Tracked objects:
  9384 ;;		On entry : 0/0
  9385 ;;		On exit  : 0/0
  9386 ;;		Unchanged: 0/0
  9387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9389 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9390 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9391 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9392 ;;Total ram usage:        4 bytes
  9393 ;; Hardware stack levels used:    1
  9394 ;; Hardware stack levels required when called:   10
  9395 ;; This function calls:
  9396 ;;		_lcdInst
  9397 ;;		_printf
  9398 ;;		_readIR
  9399 ;;		_readMAG
  9400 ;; This function is called by:
  9401 ;;		_Test
  9402 ;; This function uses a non-reentrant model
  9403 ;;
  9404                           
  9405                           	psect	text35
  9406  002766                     __ptext35:
  9407                           	opt stack 0
  9408  002766                     _sensorTest:
  9409                           	opt stack 19
  9410                           
  9411                           ;Test.c: 119: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9412                           
  9413                           ; BSR set to: 0
  9414                           ;incstack = 0
  9415  002766  0E01               	movlw	1
  9416  002768  ECB5  F022         	call	_lcdInst
  9417  00276C  0E68               	movlw	104
  9418  00276E  0100               	movlb	0	; () banked
  9419  002770  6FAB               	movwf	??_sensorTest& (0+255),b
  9420  002772  0EE4               	movlw	228
  9421  002774                     u7237:
  9422  002774  2EE8               	decfsz	wreg,f,c
  9423  002776  D7FE               	bra	u7237
  9424  002778  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9425  00277A  D7FC               	bra	u7237
  9426  00277C  F000               	nop	
  9427  00277E  0E80               	movlw	128
  9428  002780  ECB5  F022         	call	_lcdInst
  9429                           
  9430                           ;Test.c: 120: printf("SENSORS");
  9431  002784  0EAD               	movlw	low STR_77
  9432  002786  0100               	movlb	0	; () banked
  9433  002788  6F8E               	movwf	printf@f& (0+255),b
  9434  00278A  0EFF               	movlw	high STR_77
  9435  00278C  0100               	movlb	0	; () banked
  9436  00278E  6F8F               	movwf	(printf@f+1)& (0+255),b
  9437  002790  EC9C  F008         	call	_printf	;wreg free
  9438                           
  9439                           ;Test.c: 121: lcdInst(0b11000000);;
  9440  002794  0EC0               	movlw	192
  9441  002796  ECB5  F022         	call	_lcdInst
  9442                           
  9443                           ;Test.c: 122: printf("PUSH TO START");
  9444  00279A  0E11               	movlw	low STR_71
  9445  00279C  0100               	movlb	0	; () banked
  9446  00279E  6F8E               	movwf	printf@f& (0+255),b
  9447  0027A0  0EFF               	movlw	high STR_71
  9448  0027A2  0100               	movlb	0	; () banked
  9449  0027A4  6F8F               	movwf	(printf@f+1)& (0+255),b
  9450  0027A6  EC9C  F008         	call	_printf	;wreg free
  9451                           
  9452                           ;Test.c: 123: _delay((unsigned long)((100)*(32000000/4000.0)));
  9453  0027AA  0E05               	movlw	5
  9454  0027AC  0100               	movlb	0	; () banked
  9455  0027AE  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9456  0027B0  0E0F               	movlw	15
  9457  0027B2  0100               	movlb	0	; () banked
  9458  0027B4  6FAB               	movwf	??_sensorTest& (0+255),b
  9459  0027B6  0EF1               	movlw	241
  9460  0027B8                     u7247:
  9461  0027B8  2EE8               	decfsz	wreg,f,c
  9462  0027BA  D7FE               	bra	u7247
  9463  0027BC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9464  0027BE  D7FC               	bra	u7247
  9465  0027C0  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9466  0027C2  D7FA               	bra	u7247
  9467  0027C4                     l1049:
  9468  0027C4  A281               	btfss	3969,1,c	;volatile
  9469  0027C6  D7FE               	goto	l1049
  9470  0027C8                     l1052:
  9471  0027C8  B281               	btfsc	3969,1,c	;volatile
  9472  0027CA  D7FE               	goto	l1052
  9473                           
  9474                           ;Test.c: 126: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9475  0027CC  0E01               	movlw	1
  9476  0027CE  ECB5  F022         	call	_lcdInst
  9477  0027D2  0E68               	movlw	104
  9478  0027D4  0100               	movlb	0	; () banked
  9479  0027D6  6FAB               	movwf	??_sensorTest& (0+255),b
  9480  0027D8  0EE4               	movlw	228
  9481  0027DA                     u7257:
  9482  0027DA  2EE8               	decfsz	wreg,f,c
  9483  0027DC  D7FE               	bra	u7257
  9484  0027DE  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9485  0027E0  D7FC               	bra	u7257
  9486  0027E2  F000               	nop	
  9487  0027E4  0E80               	movlw	128
  9488  0027E6  ECB5  F022         	call	_lcdInst
  9489                           
  9490                           ;Test.c: 131: printf("TST: IR SNSR");
  9491  0027EA  0E3B               	movlw	low STR_79
  9492  0027EC  0100               	movlb	0	; () banked
  9493  0027EE  6F8E               	movwf	printf@f& (0+255),b
  9494  0027F0  0EFF               	movlw	high STR_79
  9495  0027F2  0100               	movlb	0	; () banked
  9496  0027F4  6F8F               	movwf	(printf@f+1)& (0+255),b
  9497  0027F6  EC9C  F008         	call	_printf	;wreg free
  9498                           
  9499                           ;Test.c: 132: _delay((unsigned long)((100)*(32000000/4000.0)));
  9500  0027FA  0E05               	movlw	5
  9501  0027FC  0100               	movlb	0	; () banked
  9502  0027FE  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9503  002800  0E0F               	movlw	15
  9504  002802  0100               	movlb	0	; () banked
  9505  002804  6FAB               	movwf	??_sensorTest& (0+255),b
  9506  002806  0EF1               	movlw	241
  9507  002808                     u7267:
  9508  002808  2EE8               	decfsz	wreg,f,c
  9509  00280A  D7FE               	bra	u7267
  9510  00280C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9511  00280E  D7FC               	bra	u7267
  9512  002810  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9513  002812  D7FA               	bra	u7267
  9514                           
  9515                           ;Test.c: 133: int on = 0;
  9516  002814  0E00               	movlw	0
  9517  002816  0100               	movlb	0	; () banked
  9518  002818  6FAE               	movwf	(sensorTest@on+1)& (0+255),b
  9519  00281A  0E00               	movlw	0
  9520  00281C  6FAD               	movwf	sensorTest@on& (0+255),b
  9521                           
  9522                           ; BSR set to: 0
  9523                           ;Test.c: 135: while(PORTBbits.RB1 == 0){
  9524                           
  9525                           ;Test.c: 134: while(1){
  9526  00281E  D021               	goto	l6470
  9527  002820                     l6464:
  9528                           
  9529                           ;Test.c: 136: readIR();
  9530  002820  EC9D  F01F         	call	_readIR	;wreg free
  9531                           
  9532                           ;Test.c: 137: lcdInst(0b10000000);;
  9533  002824  0E80               	movlw	128
  9534  002826  ECB5  F022         	call	_lcdInst
  9535                           
  9536                           ;Test.c: 138: lcdInst(0b11000000);;
  9537  00282A  0EC0               	movlw	192
  9538  00282C  ECB5  F022         	call	_lcdInst
  9539                           
  9540                           ;Test.c: 139: printf("IR_signal: %d ", IR_signal);
  9541  002830  0E60               	movlw	low STR_80
  9542  002832  0100               	movlb	0	; () banked
  9543  002834  6F8E               	movwf	printf@f& (0+255),b
  9544  002836  0EFE               	movlw	high STR_80
  9545  002838  0100               	movlb	0	; () banked
  9546  00283A  6F8F               	movwf	(printf@f+1)& (0+255),b
  9547  00283C  C0DA  F090         	movff	_IR_signal,?_printf+2
  9548  002840  C0DB  F091         	movff	_IR_signal+1,?_printf+3
  9549  002844  EC9C  F008         	call	_printf	;wreg free
  9550                           
  9551                           ;Test.c: 140: _delay((unsigned long)((100)*(32000000/4000.0)));
  9552  002848  0E05               	movlw	5
  9553  00284A  0100               	movlb	0	; () banked
  9554  00284C  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9555  00284E  0E0F               	movlw	15
  9556  002850  0100               	movlb	0	; () banked
  9557  002852  6FAB               	movwf	??_sensorTest& (0+255),b
  9558  002854  0EF1               	movlw	241
  9559  002856                     u7277:
  9560  002856  2EE8               	decfsz	wreg,f,c
  9561  002858  D7FE               	bra	u7277
  9562  00285A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9563  00285C  D7FC               	bra	u7277
  9564  00285E  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9565  002860  D7FA               	bra	u7277
  9566  002862                     l6470:
  9567  002862  A281               	btfss	3969,1,c	;volatile
  9568  002864  D7DD               	goto	l6464
  9569                           
  9570                           ;Test.c: 141: }
  9571                           ;Test.c: 142: if(on == 0){
  9572  002866  0100               	movlb	0	; () banked
  9573  002868  51AD               	movf	sensorTest@on& (0+255),w,b
  9574  00286A  0100               	movlb	0	; () banked
  9575  00286C  11AE               	iorwf	(sensorTest@on+1)& (0+255),w,b
  9576  00286E  A4D8               	btfss	status,2,c
  9577  002870  D007               	goto	l6478
  9578                           
  9579                           ; BSR set to: 0
  9580                           ;Test.c: 143: on = 1;
  9581  002872  0E00               	movlw	0
  9582  002874  0100               	movlb	0	; () banked
  9583  002876  6FAE               	movwf	(sensorTest@on+1)& (0+255),b
  9584  002878  0E01               	movlw	1
  9585  00287A  6FAD               	movwf	sensorTest@on& (0+255),b
  9586                           
  9587                           ; BSR set to: 0
  9588                           ;Test.c: 144: LATAbits.LATA5 = 1;
  9589  00287C  8A89               	bsf	3977,5,c	;volatile
  9590                           
  9591                           ;Test.c: 145: }
  9592  00287E  D006               	goto	l1061
  9593  002880                     l6478:
  9594                           
  9595                           ; BSR set to: 0
  9596                           ;Test.c: 146: else{
  9597                           ;Test.c: 147: on = 0;
  9598  002880  0E00               	movlw	0
  9599  002882  0100               	movlb	0	; () banked
  9600  002884  6FAE               	movwf	(sensorTest@on+1)& (0+255),b
  9601  002886  0E00               	movlw	0
  9602  002888  6FAD               	movwf	sensorTest@on& (0+255),b
  9603                           
  9604                           ; BSR set to: 0
  9605                           ;Test.c: 148: LATAbits.LATA5 = 0;
  9606  00288A  9A89               	bcf	3977,5,c	;volatile
  9607  00288C                     l1061:
  9608  00288C  A281               	btfss	3969,1,c	;volatile
  9609  00288E  D7E9               	goto	l6470
  9610  002890  D7FD               	goto	l1061
  9611                           
  9612                           ;Test.c: 158: _delay((unsigned long)((100)*(32000000/4000.0)));
  9613                           
  9614                           ;Test.c: 151: }
  9615                           ;Test.c: 157: printf("TST: MAGNETISM");
  9616  002892  0E05               	movlw	5
  9617  002894  0100               	movlb	0	; () banked
  9618  002896  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9619  002898  0E0F               	movlw	15
  9620  00289A  0100               	movlb	0	; () banked
  9621  00289C  6FAB               	movwf	??_sensorTest& (0+255),b
  9622  00289E  0EF1               	movlw	241
  9623  0028A0                     u7287:
  9624  0028A0  2EE8               	decfsz	wreg,f,c
  9625  0028A2  D7FE               	bra	u7287
  9626  0028A4  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9627  0028A6  D7FC               	bra	u7287
  9628  0028A8  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9629  0028AA  D7FA               	bra	u7287
  9630                           
  9631                           ;Test.c: 159: while(PORTBbits.RB1 == 0){
  9632  0028AC  D021               	goto	l6492
  9633  0028AE                     l6486:
  9634                           
  9635                           ;Test.c: 160: readMAG();
  9636  0028AE  EC77  F01F         	call	_readMAG	;wreg free
  9637                           
  9638                           ;Test.c: 161: lcdInst(0b10000000);;
  9639  0028B2  0E80               	movlw	128
  9640  0028B4  ECB5  F022         	call	_lcdInst
  9641                           
  9642                           ;Test.c: 162: lcdInst(0b11000000);;
  9643  0028B8  0EC0               	movlw	192
  9644  0028BA  ECB5  F022         	call	_lcdInst
  9645                           
  9646                           ;Test.c: 163: printf("MAG_signal: %d ", MAG_signal);
  9647  0028BE  0E30               	movlw	low STR_82
  9648  0028C0  0100               	movlb	0	; () banked
  9649  0028C2  6F8E               	movwf	printf@f& (0+255),b
  9650  0028C4  0EFE               	movlw	high STR_82
  9651  0028C6  0100               	movlb	0	; () banked
  9652  0028C8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9653  0028CA  C0DC  F090         	movff	_MAG_signal,?_printf+2
  9654  0028CE  C0DD  F091         	movff	_MAG_signal+1,?_printf+3
  9655  0028D2  EC9C  F008         	call	_printf	;wreg free
  9656                           
  9657                           ;Test.c: 164: _delay((unsigned long)((100)*(32000000/4000.0)));
  9658  0028D6  0E05               	movlw	5
  9659  0028D8  0100               	movlb	0	; () banked
  9660  0028DA  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9661  0028DC  0E0F               	movlw	15
  9662  0028DE  0100               	movlb	0	; () banked
  9663  0028E0  6FAB               	movwf	??_sensorTest& (0+255),b
  9664  0028E2  0EF1               	movlw	241
  9665  0028E4                     u7297:
  9666  0028E4  2EE8               	decfsz	wreg,f,c
  9667  0028E6  D7FE               	bra	u7297
  9668  0028E8  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9669  0028EA  D7FC               	bra	u7297
  9670  0028EC  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9671  0028EE  D7FA               	bra	u7297
  9672  0028F0                     l6492:
  9673  0028F0  B281               	btfsc	3969,1,c	;volatile
  9674  0028F2  0012               	return	
  9675  0028F4  D7DC               	goto	l6486
  9676  0028F6                     __end_of_sensorTest:
  9677                           	opt stack 0
  9678                           tblptru	equ	0xFF8
  9679                           tblptrh	equ	0xFF7
  9680                           tblptrl	equ	0xFF6
  9681                           tablat	equ	0xFF5
  9682                           prodh	equ	0xFF4
  9683                           prodl	equ	0xFF3
  9684                           intcon	equ	0xFF2
  9685                           intcon2	equ	0xFF1
  9686                           intcon3	equ	0xFF0
  9687                           postinc0	equ	0xFEE
  9688                           wreg	equ	0xFE8
  9689                           postdec1	equ	0xFE5
  9690                           fsr1l	equ	0xFE1
  9691                           indf2	equ	0xFDF
  9692                           postinc2	equ	0xFDE
  9693                           postdec2	equ	0xFDD
  9694                           fsr2h	equ	0xFDA
  9695                           fsr2l	equ	0xFD9
  9696                           status	equ	0xFD8
  9697                           
  9698 ;; *************** function _readMAG *****************
  9699 ;; Defined at:
  9700 ;;		line 29 in file "ADCFunctionality.c"
  9701 ;; Parameters:    Size  Location     Type
  9702 ;;		None
  9703 ;; Auto vars:     Size  Location     Type
  9704 ;;  res             2    4[BANK0 ] int 
  9705 ;; Return value:  Size  Location     Type
  9706 ;;                  1    wreg      void 
  9707 ;; Registers used:
  9708 ;;		wreg, status,2, status,0, cstack
  9709 ;; Tracked objects:
  9710 ;;		On entry : 0/0
  9711 ;;		On exit  : 0/0
  9712 ;;		Unchanged: 0/0
  9713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9715 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9716 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9717 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9718 ;;Total ram usage:        4 bytes
  9719 ;; Hardware stack levels used:    1
  9720 ;; Hardware stack levels required when called:    8
  9721 ;; This function calls:
  9722 ;;		_readADC
  9723 ;; This function is called by:
  9724 ;;		_ID
  9725 ;;		_sensorTest
  9726 ;; This function uses a non-reentrant model
  9727 ;;
  9728                           
  9729                           	psect	text36
  9730  003EEE                     __ptext36:
  9731                           	opt stack 0
  9732  003EEE                     _readMAG:
  9733                           	opt stack 20
  9734                           
  9735                           ;ADCFunctionality.c: 30: readADC(1);
  9736                           
  9737                           ;incstack = 0
  9738  003EEE  0E01               	movlw	1
  9739  003EF0  ECAA  F021         	call	_readADC
  9740                           
  9741                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
  9742  003EF4  50C3               	movf	4035,w,c	;volatile
  9743  003EF6  CFC4 F082          	movff	4036,??_readMAG	;volatile
  9744  003EFA  0100               	movlb	0	; () banked
  9745  003EFC  6B83               	clrf	(??_readMAG+1)& (0+255),b
  9746  003EFE  C082  F083         	movff	??_readMAG,??_readMAG+1
  9747  003F02  0100               	movlb	0	; () banked
  9748  003F04  6B82               	clrf	??_readMAG& (0+255),b
  9749  003F06  0100               	movlb	0	; () banked
  9750  003F08  1182               	iorwf	??_readMAG& (0+255),w,b
  9751  003F0A  0100               	movlb	0	; () banked
  9752  003F0C  6F84               	movwf	readMAG@res& (0+255),b
  9753  003F0E  0100               	movlb	0	; () banked
  9754  003F10  5183               	movf	(??_readMAG+1)& (0+255),w,b
  9755  003F12  0100               	movlb	0	; () banked
  9756  003F14  6F85               	movwf	(readMAG@res+1)& (0+255),b
  9757                           
  9758                           ; BSR set to: 0
  9759                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
  9760  003F16  0100               	movlb	0	; () banked
  9761  003F18  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
  9762  003F1A  D008               	goto	u4351
  9763  003F1C  0100               	movlb	0	; () banked
  9764  003F1E  5185               	movf	(readMAG@res+1)& (0+255),w,b
  9765  003F20  E107               	bnz	u4350
  9766  003F22  0E96               	movlw	150
  9767  003F24  0100               	movlb	0	; () banked
  9768  003F26  5D84               	subwf	readMAG@res& (0+255),w,b
  9769  003F28  B0D8               	btfsc	status,0,c
  9770  003F2A  D002               	goto	u4350
  9771  003F2C                     u4351:
  9772  003F2C  0E01               	movlw	1
  9773  003F2E  D001               	goto	u4360
  9774  003F30                     u4350:
  9775  003F30  0E00               	movlw	0
  9776  003F32                     u4360:
  9777  003F32  0100               	movlb	0	; () banked
  9778  003F34  6FDC               	movwf	_MAG_signal& (0+255),b
  9779  003F36  6BDD               	clrf	(_MAG_signal+1)& (0+255),b
  9780                           
  9781                           ; BSR set to: 0
  9782  003F38  0012               	return		;funcret
  9783  003F3A                     __end_of_readMAG:
  9784                           	opt stack 0
  9785                           tblptru	equ	0xFF8
  9786                           tblptrh	equ	0xFF7
  9787                           tblptrl	equ	0xFF6
  9788                           tablat	equ	0xFF5
  9789                           prodh	equ	0xFF4
  9790                           prodl	equ	0xFF3
  9791                           intcon	equ	0xFF2
  9792                           intcon2	equ	0xFF1
  9793                           intcon3	equ	0xFF0
  9794                           postinc0	equ	0xFEE
  9795                           wreg	equ	0xFE8
  9796                           postdec1	equ	0xFE5
  9797                           fsr1l	equ	0xFE1
  9798                           indf2	equ	0xFDF
  9799                           postinc2	equ	0xFDE
  9800                           postdec2	equ	0xFDD
  9801                           fsr2h	equ	0xFDA
  9802                           fsr2l	equ	0xFD9
  9803                           status	equ	0xFD8
  9804                           
  9805 ;; *************** function _readIR *****************
  9806 ;; Defined at:
  9807 ;;		line 23 in file "ADCFunctionality.c"
  9808 ;; Parameters:    Size  Location     Type
  9809 ;;		None
  9810 ;; Auto vars:     Size  Location     Type
  9811 ;;  res             2    4[BANK0 ] int 
  9812 ;; Return value:  Size  Location     Type
  9813 ;;                  1    wreg      void 
  9814 ;; Registers used:
  9815 ;;		wreg, status,2, status,0, cstack
  9816 ;; Tracked objects:
  9817 ;;		On entry : 0/0
  9818 ;;		On exit  : 0/0
  9819 ;;		Unchanged: 0/0
  9820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9822 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9823 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9824 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9825 ;;Total ram usage:        4 bytes
  9826 ;; Hardware stack levels used:    1
  9827 ;; Hardware stack levels required when called:    8
  9828 ;; This function calls:
  9829 ;;		_readADC
  9830 ;; This function is called by:
  9831 ;;		_getIR
  9832 ;;		_sensorTest
  9833 ;; This function uses a non-reentrant model
  9834 ;;
  9835                           
  9836                           	psect	text37
  9837  003F3A                     __ptext37:
  9838                           	opt stack 0
  9839  003F3A                     _readIR:
  9840                           	opt stack 19
  9841                           
  9842                           ;ADCFunctionality.c: 24: readADC(0);
  9843                           
  9844                           ; BSR set to: 0
  9845                           ;incstack = 0
  9846  003F3A  0E00               	movlw	0
  9847  003F3C  ECAA  F021         	call	_readADC
  9848                           
  9849                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  9850  003F40  50C3               	movf	4035,w,c	;volatile
  9851  003F42  CFC4 F082          	movff	4036,??_readIR	;volatile
  9852  003F46  0100               	movlb	0	; () banked
  9853  003F48  6B83               	clrf	(??_readIR+1)& (0+255),b
  9854  003F4A  C082  F083         	movff	??_readIR,??_readIR+1
  9855  003F4E  0100               	movlb	0	; () banked
  9856  003F50  6B82               	clrf	??_readIR& (0+255),b
  9857  003F52  0100               	movlb	0	; () banked
  9858  003F54  1182               	iorwf	??_readIR& (0+255),w,b
  9859  003F56  0100               	movlb	0	; () banked
  9860  003F58  6F84               	movwf	readIR@res& (0+255),b
  9861  003F5A  0100               	movlb	0	; () banked
  9862  003F5C  5183               	movf	(??_readIR+1)& (0+255),w,b
  9863  003F5E  0100               	movlb	0	; () banked
  9864  003F60  6F85               	movwf	(readIR@res+1)& (0+255),b
  9865                           
  9866                           ; BSR set to: 0
  9867                           ;ADCFunctionality.c: 26: IR_signal = (res > 900) ? 1 : 0;
  9868  003F62  0100               	movlb	0	; () banked
  9869  003F64  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  9870  003F66  D00A               	goto	u3680
  9871  003F68  0E85               	movlw	133
  9872  003F6A  0100               	movlb	0	; () banked
  9873  003F6C  5D84               	subwf	readIR@res& (0+255),w,b
  9874  003F6E  0E03               	movlw	3
  9875  003F70  0100               	movlb	0	; () banked
  9876  003F72  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  9877  003F74  A0D8               	btfss	status,0,c
  9878  003F76  D002               	goto	u3680
  9879  003F78  0E01               	movlw	1
  9880  003F7A  D001               	goto	u3690
  9881  003F7C                     u3680:
  9882  003F7C  0E00               	movlw	0
  9883  003F7E                     u3690:
  9884  003F7E  0100               	movlb	0	; () banked
  9885  003F80  6FDA               	movwf	_IR_signal& (0+255),b
  9886  003F82  6BDB               	clrf	(_IR_signal+1)& (0+255),b
  9887                           
  9888                           ; BSR set to: 0
  9889  003F84  0012               	return		;funcret
  9890  003F86                     __end_of_readIR:
  9891                           	opt stack 0
  9892                           tblptru	equ	0xFF8
  9893                           tblptrh	equ	0xFF7
  9894                           tblptrl	equ	0xFF6
  9895                           tablat	equ	0xFF5
  9896                           prodh	equ	0xFF4
  9897                           prodl	equ	0xFF3
  9898                           intcon	equ	0xFF2
  9899                           intcon2	equ	0xFF1
  9900                           intcon3	equ	0xFF0
  9901                           postinc0	equ	0xFEE
  9902                           wreg	equ	0xFE8
  9903                           postdec1	equ	0xFE5
  9904                           fsr1l	equ	0xFE1
  9905                           indf2	equ	0xFDF
  9906                           postinc2	equ	0xFDE
  9907                           postdec2	equ	0xFDD
  9908                           fsr2h	equ	0xFDA
  9909                           fsr2l	equ	0xFD9
  9910                           status	equ	0xFD8
  9911                           
  9912 ;; *************** function _readADC *****************
  9913 ;; Defined at:
  9914 ;;		line 15 in file "ADCFunctionality.c"
  9915 ;; Parameters:    Size  Location     Type
  9916 ;;  channel         1    wreg     unsigned char 
  9917 ;; Auto vars:     Size  Location     Type
  9918 ;;  channel         1    1[BANK0 ] unsigned char 
  9919 ;; Return value:  Size  Location     Type
  9920 ;;                  1    wreg      void 
  9921 ;; Registers used:
  9922 ;;		wreg, status,2, status,0, cstack
  9923 ;; Tracked objects:
  9924 ;;		On entry : 0/0
  9925 ;;		On exit  : 0/0
  9926 ;;		Unchanged: 0/0
  9927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9929 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9930 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9931 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9932 ;;Total ram usage:        2 bytes
  9933 ;; Hardware stack levels used:    1
  9934 ;; Hardware stack levels required when called:    7
  9935 ;; This function calls:
  9936 ;;		Nothing
  9937 ;; This function is called by:
  9938 ;;		_readIR
  9939 ;;		_readMAG
  9940 ;; This function uses a non-reentrant model
  9941 ;;
  9942                           
  9943                           	psect	text38
  9944  004354                     __ptext38:
  9945                           	opt stack 0
  9946  004354                     _readADC:
  9947                           	opt stack 19
  9948                           
  9949                           ; BSR set to: 0
  9950                           ;incstack = 0
  9951                           ;readADC@channel stored from wreg
  9952  004354  0100               	movlb	0	; () banked
  9953  004356  6F81               	movwf	readADC@channel& (0+255),b
  9954                           
  9955                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
  9956  004358  0100               	movlb	0	; () banked
  9957  00435A  4581               	rlncf	readADC@channel& (0+255),w,b
  9958  00435C  46E8               	rlncf	wreg,f,c
  9959  00435E  0BFC               	andlw	252
  9960  004360  6EC2               	movwf	4034,c	;volatile
  9961                           
  9962                           ; BSR set to: 0
  9963                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
  9964  004362  80C2               	bsf	4034,0,c	;volatile
  9965                           
  9966                           ; BSR set to: 0
  9967                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
  9968  004364  82C2               	bsf	4034,1,c	;volatile
  9969                           
  9970                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
  9971  004366  D009               	goto	l5138
  9972  004368                     l5136:
  9973  004368  0E34               	movlw	52
  9974  00436A  0100               	movlb	0	; () banked
  9975  00436C  6F80               	movwf	??_readADC& (0+255),b
  9976  00436E  0EF1               	movlw	241
  9977  004370                     u7307:
  9978  004370  2EE8               	decfsz	wreg,f,c
  9979  004372  D7FE               	bra	u7307
  9980  004374  2F80               	decfsz	??_readADC& (0+255),f,b
  9981  004376  D7FC               	bra	u7307
  9982  004378  D000               	nop2	
  9983  00437A                     l5138:
  9984  00437A  A2C2               	btfss	4034,1,c	;volatile
  9985  00437C  0012               	return	
  9986  00437E  D7F4               	goto	l5136
  9987  004380                     __end_of_readADC:
  9988                           	opt stack 0
  9989                           tblptru	equ	0xFF8
  9990                           tblptrh	equ	0xFF7
  9991                           tblptrl	equ	0xFF6
  9992                           tablat	equ	0xFF5
  9993                           prodh	equ	0xFF4
  9994                           prodl	equ	0xFF3
  9995                           intcon	equ	0xFF2
  9996                           intcon2	equ	0xFF1
  9997                           intcon3	equ	0xFF0
  9998                           postinc0	equ	0xFEE
  9999                           wreg	equ	0xFE8
 10000                           postdec1	equ	0xFE5
 10001                           fsr1l	equ	0xFE1
 10002                           indf2	equ	0xFDF
 10003                           postinc2	equ	0xFDE
 10004                           postdec2	equ	0xFDD
 10005                           fsr2h	equ	0xFDA
 10006                           fsr2l	equ	0xFD9
 10007                           status	equ	0xFD8
 10008                           
 10009 ;; *************** function _algorithmTest *****************
 10010 ;; Defined at:
 10011 ;;		line 73 in file "Test.c"
 10012 ;; Parameters:    Size  Location     Type
 10013 ;;		None
 10014 ;; Auto vars:     Size  Location     Type
 10015 ;;		None
 10016 ;; Return value:  Size  Location     Type
 10017 ;;                  1    wreg      void 
 10018 ;; Registers used:
 10019 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10020 ;; Tracked objects:
 10021 ;;		On entry : 0/0
 10022 ;;		On exit  : 0/0
 10023 ;;		Unchanged: 0/0
 10024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10026 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10027 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10028 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10029 ;;Total ram usage:        2 bytes
 10030 ;; Hardware stack levels used:    1
 10031 ;; Hardware stack levels required when called:   10
 10032 ;; This function calls:
 10033 ;;		_lcdInst
 10034 ;;		_printf
 10035 ;; This function is called by:
 10036 ;;		_Test
 10037 ;; This function uses a non-reentrant model
 10038 ;;
 10039                           
 10040                           	psect	text39
 10041  003356                     __ptext39:
 10042                           	opt stack 0
 10043  003356                     _algorithmTest:
 10044                           	opt stack 19
 10045                           
 10046                           ;Test.c: 75: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10047                           
 10048                           ;incstack = 0
 10049  003356  0E01               	movlw	1
 10050  003358  ECB5  F022         	call	_lcdInst
 10051  00335C  0E68               	movlw	104
 10052  00335E  0100               	movlb	0	; () banked
 10053  003360  6FAB               	movwf	??_algorithmTest& (0+255),b
 10054  003362  0EE4               	movlw	228
 10055  003364                     u7317:
 10056  003364  2EE8               	decfsz	wreg,f,c
 10057  003366  D7FE               	bra	u7317
 10058  003368  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10059  00336A  D7FC               	bra	u7317
 10060  00336C  F000               	nop	
 10061  00336E  0E80               	movlw	128
 10062  003370  ECB5  F022         	call	_lcdInst
 10063                           
 10064                           ;Test.c: 76: printf("ALGORITHM TEST");
 10065  003374  0ED8               	movlw	low STR_70
 10066  003376  0100               	movlb	0	; () banked
 10067  003378  6F8E               	movwf	printf@f& (0+255),b
 10068  00337A  0EFE               	movlw	high STR_70
 10069  00337C  0100               	movlb	0	; () banked
 10070  00337E  6F8F               	movwf	(printf@f+1)& (0+255),b
 10071  003380  EC9C  F008         	call	_printf	;wreg free
 10072                           
 10073                           ;Test.c: 77: lcdInst(0b11000000);;
 10074  003384  0EC0               	movlw	192
 10075  003386  ECB5  F022         	call	_lcdInst
 10076                           
 10077                           ;Test.c: 78: printf("PUSH TO START");
 10078  00338A  0E11               	movlw	low STR_71
 10079  00338C  0100               	movlb	0	; () banked
 10080  00338E  6F8E               	movwf	printf@f& (0+255),b
 10081  003390  0EFF               	movlw	high STR_71
 10082  003392  0100               	movlb	0	; () banked
 10083  003394  6F8F               	movwf	(printf@f+1)& (0+255),b
 10084  003396  EC9C  F008         	call	_printf	;wreg free
 10085                           
 10086                           ;Test.c: 79: _delay((unsigned long)((100)*(32000000/4000.0)));
 10087  00339A  0E05               	movlw	5
 10088  00339C  0100               	movlb	0	; () banked
 10089  00339E  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 10090  0033A0  0E0F               	movlw	15
 10091  0033A2  0100               	movlb	0	; () banked
 10092  0033A4  6FAB               	movwf	??_algorithmTest& (0+255),b
 10093  0033A6  0EF1               	movlw	241
 10094  0033A8                     u7327:
 10095  0033A8  2EE8               	decfsz	wreg,f,c
 10096  0033AA  D7FE               	bra	u7327
 10097  0033AC  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10098  0033AE  D7FC               	bra	u7327
 10099  0033B0  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 10100  0033B2  D7FA               	bra	u7327
 10101  0033B4                     l1040:
 10102  0033B4  A281               	btfss	3969,1,c	;volatile
 10103  0033B6  D7FE               	goto	l1040
 10104  0033B8                     l1043:
 10105  0033B8  B281               	btfsc	3969,1,c	;volatile
 10106  0033BA  D7FE               	goto	l1043
 10107                           
 10108                           ;Test.c: 82: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10109  0033BC  0E01               	movlw	1
 10110  0033BE  ECB5  F022         	call	_lcdInst
 10111  0033C2  0E68               	movlw	104
 10112  0033C4  0100               	movlb	0	; () banked
 10113  0033C6  6FAB               	movwf	??_algorithmTest& (0+255),b
 10114  0033C8  0EE4               	movlw	228
 10115  0033CA                     u7337:
 10116  0033CA  2EE8               	decfsz	wreg,f,c
 10117  0033CC  D7FE               	bra	u7337
 10118  0033CE  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10119  0033D0  D7FC               	bra	u7337
 10120  0033D2  F000               	nop	
 10121  0033D4  0E80               	movlw	128
 10122  0033D6  ECB5  F022         	call	_lcdInst
 10123                           
 10124                           ;Test.c: 87: printf("ALG1: 9 POPNOTAB");
 10125  0033DA  0E87               	movlw	low STR_72
 10126  0033DC  0100               	movlb	0	; () banked
 10127  0033DE  6F8E               	movwf	printf@f& (0+255),b
 10128  0033E0  0EFC               	movlw	high STR_72
 10129  0033E2  0100               	movlb	0	; () banked
 10130  0033E4  6F8F               	movwf	(printf@f+1)& (0+255),b
 10131  0033E6  EC9C  F008         	call	_printf	;wreg free
 10132                           
 10133                           ;Test.c: 94: printf("ALG2: 12 CANS");
 10134  0033EA  0EF5               	movlw	low STR_73
 10135  0033EC  0100               	movlb	0	; () banked
 10136  0033EE  6F8E               	movwf	printf@f& (0+255),b
 10137  0033F0  0EFE               	movlw	high STR_73
 10138  0033F2  0100               	movlb	0	; () banked
 10139  0033F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 10140  0033F6  EC9C  F008         	call	_printf	;wreg free
 10141                           
 10142                           ;Test.c: 103: printf("ALG3: 1 CAN");
 10143  0033FA  0E62               	movlw	low STR_74
 10144  0033FC  0100               	movlb	0	; () banked
 10145  0033FE  6F8E               	movwf	printf@f& (0+255),b
 10146  003400  0EFF               	movlw	high STR_74
 10147  003402  0100               	movlb	0	; () banked
 10148  003404  6F8F               	movwf	(printf@f+1)& (0+255),b
 10149  003406  EC9C  F008         	call	_printf	;wreg free
 10150                           
 10151                           ;Test.c: 109: printf("ALG4: ALL CANS");
 10152  00340A  0EBA               	movlw	low STR_75
 10153  00340C  0100               	movlb	0	; () banked
 10154  00340E  6F8E               	movwf	printf@f& (0+255),b
 10155  003410  0EFE               	movlw	high STR_75
 10156  003412  0100               	movlb	0	; () banked
 10157  003414  6F8F               	movwf	(printf@f+1)& (0+255),b
 10158  003416  EC9C  F008         	call	_printf	;wreg free
 10159                           
 10160                           ;Test.c: 114: printf("ALG5: NO CANS");
 10161  00341A  0E03               	movlw	low STR_76
 10162  00341C  0100               	movlb	0	; () banked
 10163  00341E  6F8E               	movwf	printf@f& (0+255),b
 10164  003420  0EFF               	movlw	high STR_76
 10165  003422  0100               	movlb	0	; () banked
 10166  003424  6F8F               	movwf	(printf@f+1)& (0+255),b
 10167  003426  EC9C  F008         	call	_printf	;wreg free
 10168  00342A  0012               	return		;funcret
 10169  00342C                     __end_of_algorithmTest:
 10170                           	opt stack 0
 10171                           tblptru	equ	0xFF8
 10172                           tblptrh	equ	0xFF7
 10173                           tblptrl	equ	0xFF6
 10174                           tablat	equ	0xFF5
 10175                           prodh	equ	0xFF4
 10176                           prodl	equ	0xFF3
 10177                           intcon	equ	0xFF2
 10178                           intcon2	equ	0xFF1
 10179                           intcon3	equ	0xFF0
 10180                           postinc0	equ	0xFEE
 10181                           wreg	equ	0xFE8
 10182                           postdec1	equ	0xFE5
 10183                           fsr1l	equ	0xFE1
 10184                           indf2	equ	0xFDF
 10185                           postinc2	equ	0xFDE
 10186                           postdec2	equ	0xFDD
 10187                           fsr2h	equ	0xFDA
 10188                           fsr2l	equ	0xFD9
 10189                           status	equ	0xFD8
 10190                           
 10191 ;; *************** function _actuatorTest *****************
 10192 ;; Defined at:
 10193 ;;		line 168 in file "Test.c"
 10194 ;; Parameters:    Size  Location     Type
 10195 ;;		None
 10196 ;; Auto vars:     Size  Location     Type
 10197 ;;  i               1   45[BANK0 ] unsigned char 
 10198 ;;  i               1   67[BANK0 ] unsigned char 
 10199 ;;  i               1   66[BANK0 ] unsigned char 
 10200 ;;  i               1   65[BANK0 ] unsigned char 
 10201 ;;  i               1   64[BANK0 ] unsigned char 
 10202 ;;  i               1   63[BANK0 ] unsigned char 
 10203 ;;  i               1   62[BANK0 ] unsigned char 
 10204 ;;  i               1   61[BANK0 ] unsigned char 
 10205 ;;  i               1   60[BANK0 ] unsigned char 
 10206 ;;  i               1   59[BANK0 ] unsigned char 
 10207 ;;  i               1   58[BANK0 ] unsigned char 
 10208 ;;  i               1   57[BANK0 ] unsigned char 
 10209 ;;  i               1   56[BANK0 ] unsigned char 
 10210 ;;  i               1   55[BANK0 ] unsigned char 
 10211 ;;  i               1   54[BANK0 ] unsigned char 
 10212 ;;  i               1   53[BANK0 ] unsigned char 
 10213 ;;  i               1   52[BANK0 ] unsigned char 
 10214 ;;  i               1   51[BANK0 ] unsigned char 
 10215 ;;  i               1   50[BANK0 ] unsigned char 
 10216 ;;  i               1   49[BANK0 ] unsigned char 
 10217 ;;  i               1   48[BANK0 ] unsigned char 
 10218 ;;  i               1   47[BANK0 ] unsigned char 
 10219 ;;  i               1   46[BANK0 ] unsigned char 
 10220 ;;  i               2   68[BANK0 ] int 
 10221 ;; Return value:  Size  Location     Type
 10222 ;;                  1    wreg      void 
 10223 ;; Registers used:
 10224 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10225 ;; Tracked objects:
 10226 ;;		On entry : 0/0
 10227 ;;		On exit  : 0/0
 10228 ;;		Unchanged: 0/0
 10229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10231 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10232 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10233 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10234 ;;Total ram usage:       27 bytes
 10235 ;; Hardware stack levels used:    1
 10236 ;; Hardware stack levels required when called:   10
 10237 ;; This function calls:
 10238 ;;		_lcdInst
 10239 ;;		_printf
 10240 ;;		_updateServoPosition
 10241 ;; This function is called by:
 10242 ;;		_Test
 10243 ;; This function uses a non-reentrant model
 10244 ;;
 10245                           
 10246                           	psect	text40
 10247  0008B8                     __ptext40:
 10248                           	opt stack 0
 10249  0008B8                     _actuatorTest:
 10250                           	opt stack 19
 10251                           
 10252                           ;Test.c: 170: int i = 0;
 10253                           
 10254                           ;incstack = 0
 10255  0008B8  0E00               	movlw	0
 10256  0008BA  0100               	movlb	0	; () banked
 10257  0008BC  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10258  0008BE  0E00               	movlw	0
 10259  0008C0  6FC4               	movwf	actuatorTest@i& (0+255),b
 10260                           
 10261                           ; BSR set to: 0
 10262                           ;Test.c: 172: (INTCONbits.GIE = 1);
 10263  0008C2  8EF2               	bsf	intcon,7,c	;volatile
 10264                           
 10265                           ; BSR set to: 0
 10266                           ;Test.c: 173: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10267  0008C4  0E01               	movlw	1
 10268  0008C6  ECB5  F022         	call	_lcdInst
 10269  0008CA  0E68               	movlw	104
 10270  0008CC  0100               	movlb	0	; () banked
 10271  0008CE  6FAB               	movwf	??_actuatorTest& (0+255),b
 10272  0008D0  0EE4               	movlw	228
 10273  0008D2                     u7347:
 10274  0008D2  2EE8               	decfsz	wreg,f,c
 10275  0008D4  D7FE               	bra	u7347
 10276  0008D6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10277  0008D8  D7FC               	bra	u7347
 10278  0008DA  F000               	nop	
 10279  0008DC  0E80               	movlw	128
 10280  0008DE  ECB5  F022         	call	_lcdInst
 10281                           
 10282                           ;Test.c: 174: printf("ACTUATORS");
 10283  0008E2  0E99               	movlw	low STR_83
 10284  0008E4  0100               	movlb	0	; () banked
 10285  0008E6  6F8E               	movwf	printf@f& (0+255),b
 10286  0008E8  0EFF               	movlw	high STR_83
 10287  0008EA  0100               	movlb	0	; () banked
 10288  0008EC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10289  0008EE  EC9C  F008         	call	_printf	;wreg free
 10290                           
 10291                           ;Test.c: 175: lcdInst(0b11000000);;
 10292  0008F2  0EC0               	movlw	192
 10293  0008F4  ECB5  F022         	call	_lcdInst
 10294                           
 10295                           ;Test.c: 176: printf("PUSH TO START");
 10296  0008F8  0E11               	movlw	low STR_71
 10297  0008FA  0100               	movlb	0	; () banked
 10298  0008FC  6F8E               	movwf	printf@f& (0+255),b
 10299  0008FE  0EFF               	movlw	high STR_71
 10300  000900  0100               	movlb	0	; () banked
 10301  000902  6F8F               	movwf	(printf@f+1)& (0+255),b
 10302  000904  EC9C  F008         	call	_printf	;wreg free
 10303                           
 10304                           ;Test.c: 177: _delay((unsigned long)((100)*(32000000/4000.0)));
 10305  000908  0E05               	movlw	5
 10306  00090A  0100               	movlb	0	; () banked
 10307  00090C  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10308  00090E  0E0F               	movlw	15
 10309  000910  0100               	movlb	0	; () banked
 10310  000912  6FAB               	movwf	??_actuatorTest& (0+255),b
 10311  000914  0EF1               	movlw	241
 10312  000916                     u7357:
 10313  000916  2EE8               	decfsz	wreg,f,c
 10314  000918  D7FE               	bra	u7357
 10315  00091A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10316  00091C  D7FC               	bra	u7357
 10317  00091E  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10318  000920  D7FA               	bra	u7357
 10319  000922                     l1072:
 10320  000922  A281               	btfss	3969,1,c	;volatile
 10321  000924  D7FE               	goto	l1072
 10322  000926                     l1075:
 10323  000926  B281               	btfsc	3969,1,c	;volatile
 10324  000928  D7FE               	goto	l1075
 10325                           
 10326                           ;Test.c: 180: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10327  00092A  0E01               	movlw	1
 10328  00092C  ECB5  F022         	call	_lcdInst
 10329  000930  0E68               	movlw	104
 10330  000932  0100               	movlb	0	; () banked
 10331  000934  6FAB               	movwf	??_actuatorTest& (0+255),b
 10332  000936  0EE4               	movlw	228
 10333  000938                     u7367:
 10334  000938  2EE8               	decfsz	wreg,f,c
 10335  00093A  D7FE               	bra	u7367
 10336  00093C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10337  00093E  D7FC               	bra	u7367
 10338  000940  F000               	nop	
 10339  000942  0E80               	movlw	128
 10340  000944  ECB5  F022         	call	_lcdInst
 10341                           
 10342                           ;Test.c: 185: printf("TST: DC MOTORS");
 10343  000948  0EC9               	movlw	low STR_85
 10344  00094A  0100               	movlb	0	; () banked
 10345  00094C  6F8E               	movwf	printf@f& (0+255),b
 10346  00094E  0EFE               	movlw	high STR_85
 10347  000950  0100               	movlb	0	; () banked
 10348  000952  6F8F               	movwf	(printf@f+1)& (0+255),b
 10349  000954  EC9C  F008         	call	_printf	;wreg free
 10350                           
 10351                           ;Test.c: 186: lcdInst(0b11000000);;
 10352  000958  0EC0               	movlw	192
 10353  00095A  ECB5  F022         	call	_lcdInst
 10354                           
 10355                           ;Test.c: 187: printf("PIN RA5 HIGH.");
 10356  00095E  0EE7               	movlw	low STR_86
 10357  000960  0100               	movlb	0	; () banked
 10358  000962  6F8E               	movwf	printf@f& (0+255),b
 10359  000964  0EFE               	movlw	high STR_86
 10360  000966  0100               	movlb	0	; () banked
 10361  000968  6F8F               	movwf	(printf@f+1)& (0+255),b
 10362  00096A  EC9C  F008         	call	_printf	;wreg free
 10363                           
 10364                           ;Test.c: 188: LATAbits.LATA5 = 1;
 10365  00096E  8A89               	bsf	3977,5,c	;volatile
 10366                           
 10367                           ;Test.c: 189: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 10368  000970  0E00               	movlw	0
 10369  000972  0100               	movlb	0	; () banked
 10370  000974  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10371  000976  0E00               	movlw	0
 10372  000978  6FC4               	movwf	actuatorTest@i& (0+255),b
 10373                           
 10374                           ; BSR set to: 0
 10375  00097A  0100               	movlb	0	; () banked
 10376  00097C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10377  00097E  D008               	goto	l6532
 10378  000980  0100               	movlb	0	; () banked
 10379  000982  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10380  000984  E123               	bnz	l1079
 10381  000986  0E05               	movlw	5
 10382  000988  0100               	movlb	0	; () banked
 10383  00098A  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10384  00098C  B0D8               	btfsc	status,0,c
 10385  00098E  D01E               	goto	l1079
 10386  000990                     l6532:
 10387                           
 10388                           ; BSR set to: 0
 10389  000990  0E00               	movlw	0
 10390  000992  0100               	movlb	0	; () banked
 10391  000994  6FAD               	movwf	actuatorTest@i_1579& (0+255),b
 10392  000996                     l6534:
 10393                           
 10394                           ; BSR set to: 0
 10395  000996  0E63               	movlw	99
 10396  000998  0100               	movlb	0	; () banked
 10397  00099A  65AD               	cpfsgt	actuatorTest@i_1579& (0+255),b
 10398  00099C  D001               	goto	l6538
 10399  00099E  D00C               	goto	l6542
 10400  0009A0                     l6538:
 10401                           
 10402                           ; BSR set to: 0
 10403  0009A0  0E68               	movlw	104
 10404  0009A2  0100               	movlb	0	; () banked
 10405  0009A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 10406  0009A6  0EE4               	movlw	228
 10407  0009A8                     u7377:
 10408  0009A8  2EE8               	decfsz	wreg,f,c
 10409  0009AA  D7FE               	bra	u7377
 10410  0009AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10411  0009AE  D7FC               	bra	u7377
 10412  0009B0  F000               	nop	
 10413  0009B2  0100               	movlb	0	; () banked
 10414  0009B4  2BAD               	incf	actuatorTest@i_1579& (0+255),f,b
 10415  0009B6  D7EF               	goto	l6534
 10416  0009B8                     l6542:
 10417                           
 10418                           ; BSR set to: 0
 10419  0009B8  0100               	movlb	0	; () banked
 10420  0009BA  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 10421  0009BC  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 10422                           
 10423                           ; BSR set to: 0
 10424  0009BE  0100               	movlb	0	; () banked
 10425  0009C0  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10426  0009C2  D7E6               	goto	l6532
 10427  0009C4  0100               	movlb	0	; () banked
 10428  0009C6  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10429  0009C8  E101               	bnz	u5010
 10430  0009CA  D7DD               	goto	L7
 10431  0009CC                     u5010:
 10432  0009CC                     l1079:
 10433                           
 10434                           ; BSR set to: 0
 10435                           ;Test.c: 190: LATAbits.LATA5 = 0;
 10436  0009CC  9A89               	bcf	3977,5,c	;volatile
 10437                           
 10438                           ; BSR set to: 0
 10439                           ;Test.c: 191: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10440  0009CE  0E01               	movlw	1
 10441  0009D0  ECB5  F022         	call	_lcdInst
 10442  0009D4  0E68               	movlw	104
 10443  0009D6  0100               	movlb	0	; () banked
 10444  0009D8  6FAB               	movwf	??_actuatorTest& (0+255),b
 10445  0009DA  0EE4               	movlw	228
 10446  0009DC                     u7387:
 10447  0009DC  2EE8               	decfsz	wreg,f,c
 10448  0009DE  D7FE               	bra	u7387
 10449  0009E0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10450  0009E2  D7FC               	bra	u7387
 10451  0009E4  F000               	nop	
 10452  0009E6  0E80               	movlw	128
 10453  0009E8  ECB5  F022         	call	_lcdInst
 10454                           
 10455                           ;Test.c: 197: printf("TST: COND SOLN'D");
 10456  0009EC  0EA9               	movlw	low STR_87
 10457  0009EE  0100               	movlb	0	; () banked
 10458  0009F0  6F8E               	movwf	printf@f& (0+255),b
 10459  0009F2  0EFC               	movlw	high STR_87
 10460  0009F4  0100               	movlb	0	; () banked
 10461  0009F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 10462  0009F8  EC9C  F008         	call	_printf	;wreg free
 10463                           
 10464                           ;Test.c: 198: lcdInst(0b11000000);;
 10465  0009FC  0EC0               	movlw	192
 10466  0009FE  ECB5  F022         	call	_lcdInst
 10467                           
 10468                           ;Test.c: 199: printf("PIN RA3...");
 10469  000A02  0E6E               	movlw	low STR_88
 10470  000A04  0100               	movlb	0	; () banked
 10471  000A06  6F8E               	movwf	printf@f& (0+255),b
 10472  000A08  0EFF               	movlw	high STR_88
 10473  000A0A  0100               	movlb	0	; () banked
 10474  000A0C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10475  000A0E  EC9C  F008         	call	_printf	;wreg free
 10476                           
 10477                           ;Test.c: 200: for(i=0;i<5;i++){
 10478  000A12  0E00               	movlw	0
 10479  000A14  0100               	movlb	0	; () banked
 10480  000A16  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10481  000A18  0E00               	movlw	0
 10482  000A1A  6FC4               	movwf	actuatorTest@i& (0+255),b
 10483                           
 10484                           ; BSR set to: 0
 10485  000A1C  0100               	movlb	0	; () banked
 10486  000A1E  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10487  000A20  D008               	goto	l1082
 10488  000A22  0100               	movlb	0	; () banked
 10489  000A24  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10490  000A26  E12C               	bnz	l1083
 10491  000A28  0E05               	movlw	5
 10492  000A2A  0100               	movlb	0	; () banked
 10493  000A2C  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10494  000A2E  B0D8               	btfsc	status,0,c
 10495  000A30  D027               	goto	l1083
 10496  000A32                     l1082:
 10497                           
 10498                           ; BSR set to: 0
 10499                           ;Test.c: 201: LATAbits.LATA3 = 1;
 10500  000A32  8689               	bsf	3977,3,c	;volatile
 10501                           
 10502                           ; BSR set to: 0
 10503                           ;Test.c: 202: _delay((unsigned long)((300)*(32000000/4000.0)));
 10504  000A34  0E0D               	movlw	13
 10505  000A36  0100               	movlb	0	; () banked
 10506  000A38  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10507  000A3A  0E2D               	movlw	45
 10508  000A3C  0100               	movlb	0	; () banked
 10509  000A3E  6FAB               	movwf	??_actuatorTest& (0+255),b
 10510  000A40  0ED7               	movlw	215
 10511  000A42                     u7397:
 10512  000A42  2EE8               	decfsz	wreg,f,c
 10513  000A44  D7FE               	bra	u7397
 10514  000A46  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10515  000A48  D7FC               	bra	u7397
 10516  000A4A  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10517  000A4C  D7FA               	bra	u7397
 10518  000A4E  D000               	nop2	
 10519                           
 10520                           ;Test.c: 203: LATAbits.LATA3 = ~1;
 10521  000A50  9689               	bcf	3977,3,c	;volatile
 10522                           
 10523                           ;Test.c: 204: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 10524  000A52  0E1D               	movlw	29
 10525  000A54  0100               	movlb	0	; () banked
 10526  000A56  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10527  000A58  0E69               	movlw	105
 10528  000A5A  0100               	movlb	0	; () banked
 10529  000A5C  6FAB               	movwf	??_actuatorTest& (0+255),b
 10530  000A5E  0EA5               	movlw	165
 10531  000A60                     u7407:
 10532  000A60  2EE8               	decfsz	wreg,f,c
 10533  000A62  D7FE               	bra	u7407
 10534  000A64  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10535  000A66  D7FC               	bra	u7407
 10536  000A68  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10537  000A6A  D7FA               	bra	u7407
 10538  000A6C  0100               	movlb	0	; () banked
 10539  000A6E  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 10540  000A70  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 10541  000A72  0100               	movlb	0	; () banked
 10542  000A74  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10543  000A76  D7DD               	goto	l1082
 10544  000A78  0100               	movlb	0	; () banked
 10545  000A7A  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10546  000A7C  E101               	bnz	u5030
 10547  000A7E  D7D4               	goto	L8
 10548  000A80                     u5030:
 10549  000A80                     l1083:
 10550                           
 10551                           ; BSR set to: 0
 10552                           ;Test.c: 205: }
 10553                           ;Test.c: 206: LATAbits.LATA3 = ~1;
 10554  000A80  9689               	bcf	3977,3,c	;volatile
 10555                           
 10556                           ; BSR set to: 0
 10557                           ;Test.c: 207: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10558  000A82  0E01               	movlw	1
 10559  000A84  ECB5  F022         	call	_lcdInst
 10560  000A88  0E68               	movlw	104
 10561  000A8A  0100               	movlb	0	; () banked
 10562  000A8C  6FAB               	movwf	??_actuatorTest& (0+255),b
 10563  000A8E  0EE4               	movlw	228
 10564  000A90                     u7417:
 10565  000A90  2EE8               	decfsz	wreg,f,c
 10566  000A92  D7FE               	bra	u7417
 10567  000A94  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10568  000A96  D7FC               	bra	u7417
 10569  000A98  F000               	nop	
 10570  000A9A  0E80               	movlw	128
 10571  000A9C  ECB5  F022         	call	_lcdInst
 10572                           
 10573                           ;Test.c: 213: printf("TST: PUSH SOLN'D");
 10574  000AA0  0EBA               	movlw	low STR_89
 10575  000AA2  0100               	movlb	0	; () banked
 10576  000AA4  6F8E               	movwf	printf@f& (0+255),b
 10577  000AA6  0EFC               	movlw	high STR_89
 10578  000AA8  0100               	movlb	0	; () banked
 10579  000AAA  6F8F               	movwf	(printf@f+1)& (0+255),b
 10580  000AAC  EC9C  F008         	call	_printf	;wreg free
 10581                           
 10582                           ;Test.c: 214: lcdInst(0b11000000);;
 10583  000AB0  0EC0               	movlw	192
 10584  000AB2  ECB5  F022         	call	_lcdInst
 10585                           
 10586                           ;Test.c: 215: printf("PIN RA4...");
 10587  000AB6  0E79               	movlw	low STR_90
 10588  000AB8  0100               	movlb	0	; () banked
 10589  000ABA  6F8E               	movwf	printf@f& (0+255),b
 10590  000ABC  0EFF               	movlw	high STR_90
 10591  000ABE  0100               	movlb	0	; () banked
 10592  000AC0  6F8F               	movwf	(printf@f+1)& (0+255),b
 10593  000AC2  EC9C  F008         	call	_printf	;wreg free
 10594                           
 10595                           ;Test.c: 216: for(i=0;i<5;i++){
 10596  000AC6  0E00               	movlw	0
 10597  000AC8  0100               	movlb	0	; () banked
 10598  000ACA  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10599  000ACC  0E00               	movlw	0
 10600  000ACE  6FC4               	movwf	actuatorTest@i& (0+255),b
 10601                           
 10602                           ; BSR set to: 0
 10603  000AD0  0100               	movlb	0	; () banked
 10604  000AD2  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10605  000AD4  D008               	goto	l1084
 10606  000AD6  0100               	movlb	0	; () banked
 10607  000AD8  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10608  000ADA  E12C               	bnz	l1085
 10609  000ADC  0E05               	movlw	5
 10610  000ADE  0100               	movlb	0	; () banked
 10611  000AE0  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10612  000AE2  B0D8               	btfsc	status,0,c
 10613  000AE4  D027               	goto	l1085
 10614  000AE6                     l1084:
 10615                           
 10616                           ; BSR set to: 0
 10617                           ;Test.c: 217: LATAbits.LATA4 = 1;
 10618  000AE6  8889               	bsf	3977,4,c	;volatile
 10619                           
 10620                           ; BSR set to: 0
 10621                           ;Test.c: 218: _delay((unsigned long)((300)*(32000000/4000.0)));
 10622  000AE8  0E0D               	movlw	13
 10623  000AEA  0100               	movlb	0	; () banked
 10624  000AEC  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10625  000AEE  0E2D               	movlw	45
 10626  000AF0  0100               	movlb	0	; () banked
 10627  000AF2  6FAB               	movwf	??_actuatorTest& (0+255),b
 10628  000AF4  0ED7               	movlw	215
 10629  000AF6                     u7427:
 10630  000AF6  2EE8               	decfsz	wreg,f,c
 10631  000AF8  D7FE               	bra	u7427
 10632  000AFA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10633  000AFC  D7FC               	bra	u7427
 10634  000AFE  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10635  000B00  D7FA               	bra	u7427
 10636  000B02  D000               	nop2	
 10637                           
 10638                           ;Test.c: 219: LATAbits.LATA4 = ~1;
 10639  000B04  9889               	bcf	3977,4,c	;volatile
 10640                           
 10641                           ;Test.c: 220: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 10642  000B06  0E1D               	movlw	29
 10643  000B08  0100               	movlb	0	; () banked
 10644  000B0A  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10645  000B0C  0E69               	movlw	105
 10646  000B0E  0100               	movlb	0	; () banked
 10647  000B10  6FAB               	movwf	??_actuatorTest& (0+255),b
 10648  000B12  0EA5               	movlw	165
 10649  000B14                     u7437:
 10650  000B14  2EE8               	decfsz	wreg,f,c
 10651  000B16  D7FE               	bra	u7437
 10652  000B18  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10653  000B1A  D7FC               	bra	u7437
 10654  000B1C  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10655  000B1E  D7FA               	bra	u7437
 10656  000B20  0100               	movlb	0	; () banked
 10657  000B22  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 10658  000B24  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 10659  000B26  0100               	movlb	0	; () banked
 10660  000B28  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10661  000B2A  D7DD               	goto	l1084
 10662  000B2C  0100               	movlb	0	; () banked
 10663  000B2E  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10664  000B30  E101               	bnz	u5050
 10665  000B32  D7D4               	goto	L9
 10666  000B34                     u5050:
 10667  000B34                     l1085:
 10668                           
 10669                           ; BSR set to: 0
 10670                           ;Test.c: 221: }
 10671                           ;Test.c: 222: LATAbits.LATA4 = ~1;
 10672  000B34  9889               	bcf	3977,4,c	;volatile
 10673                           
 10674                           ; BSR set to: 0
 10675                           ;Test.c: 223: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10676  000B36  0E01               	movlw	1
 10677  000B38  ECB5  F022         	call	_lcdInst
 10678  000B3C  0E68               	movlw	104
 10679  000B3E  0100               	movlb	0	; () banked
 10680  000B40  6FAB               	movwf	??_actuatorTest& (0+255),b
 10681  000B42  0EE4               	movlw	228
 10682  000B44                     u7447:
 10683  000B44  2EE8               	decfsz	wreg,f,c
 10684  000B46  D7FE               	bra	u7447
 10685  000B48  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10686  000B4A  D7FC               	bra	u7447
 10687  000B4C  F000               	nop	
 10688  000B4E  0E80               	movlw	128
 10689  000B50  ECB5  F022         	call	_lcdInst
 10690                           
 10691                           ;Test.c: 226: machine_state = Sorting_state;
 10692  000B54  0E01               	movlw	1
 10693  000B56  0100               	movlb	0	; () banked
 10694  000B58  6FFC               	movwf	_machine_state& (0+255),b
 10695                           
 10696                           ; BSR set to: 0
 10697                           ;Test.c: 227: was_low_1 = 0;
 10698  000B5A  0E00               	movlw	0
 10699  000B5C  6E7A               	movwf	_was_low_1+1,c	;volatile
 10700  000B5E  0E00               	movlw	0
 10701  000B60  6E79               	movwf	_was_low_1,c	;volatile
 10702                           
 10703                           ; BSR set to: 0
 10704                           ;Test.c: 228: was_low_1 = 0;
 10705  000B62  0E00               	movlw	0
 10706  000B64  6E7A               	movwf	_was_low_1+1,c	;volatile
 10707  000B66  0E00               	movlw	0
 10708  000B68  6E79               	movwf	_was_low_1,c	;volatile
 10709                           
 10710                           ; BSR set to: 0
 10711                           ;Test.c: 235: printf("TST: PAN SERVO");
 10712  000B6A  0EAB               	movlw	low STR_91
 10713  000B6C  0100               	movlb	0	; () banked
 10714  000B6E  6F8E               	movwf	printf@f& (0+255),b
 10715  000B70  0EFE               	movlw	high STR_91
 10716  000B72  0100               	movlb	0	; () banked
 10717  000B74  6F8F               	movwf	(printf@f+1)& (0+255),b
 10718  000B76  EC9C  F008         	call	_printf	;wreg free
 10719                           
 10720                           ;Test.c: 236: lcdInst(0b11000000);;
 10721  000B7A  0EC0               	movlw	192
 10722  000B7C  ECB5  F022         	call	_lcdInst
 10723                           
 10724                           ;Test.c: 237: printf("MIDDLE -- 2s    ");
 10725  000B80  0E32               	movlw	low STR_92
 10726  000B82  0100               	movlb	0	; () banked
 10727  000B84  6F8E               	movwf	printf@f& (0+255),b
 10728  000B86  0EFC               	movlw	high STR_92
 10729  000B88  0100               	movlb	0	; () banked
 10730  000B8A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10731  000B8C  EC9C  F008         	call	_printf	;wreg free
 10732                           
 10733                           ;Test.c: 238: updateServoPosition(1250, 1);
 10734  000B90  0E04               	movlw	4
 10735  000B92  0100               	movlb	0	; () banked
 10736  000B94  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10737  000B96  0EE2               	movlw	226
 10738  000B98  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10739  000B9A  0E00               	movlw	0
 10740  000B9C  0100               	movlb	0	; () banked
 10741  000B9E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10742  000BA0  0E01               	movlw	1
 10743  000BA2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10744  000BA4  EC0F  F01D         	call	_updateServoPosition	;wreg free
 10745                           
 10746                           ;Test.c: 239: TMR1ON = 1;
 10747  000BA8  80CD               	bsf	4045,0,c	;volatile
 10748                           
 10749                           ;Test.c: 240: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10750  000BAA  0E00               	movlw	0
 10751  000BAC  0100               	movlb	0	; () banked
 10752  000BAE  6FAE               	movwf	actuatorTest@i_1586& (0+255),b
 10753  000BB0                     l6618:
 10754                           
 10755                           ; BSR set to: 0
 10756  000BB0  0E63               	movlw	99
 10757  000BB2  0100               	movlb	0	; () banked
 10758  000BB4  65AE               	cpfsgt	actuatorTest@i_1586& (0+255),b
 10759  000BB6  D001               	goto	l6622
 10760  000BB8  D00C               	goto	l6626
 10761  000BBA                     l6622:
 10762                           
 10763                           ; BSR set to: 0
 10764  000BBA  0E68               	movlw	104
 10765  000BBC  0100               	movlb	0	; () banked
 10766  000BBE  6FAB               	movwf	??_actuatorTest& (0+255),b
 10767  000BC0  0EE4               	movlw	228
 10768  000BC2                     u7457:
 10769  000BC2  2EE8               	decfsz	wreg,f,c
 10770  000BC4  D7FE               	bra	u7457
 10771  000BC6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10772  000BC8  D7FC               	bra	u7457
 10773  000BCA  F000               	nop	
 10774  000BCC  0100               	movlb	0	; () banked
 10775  000BCE  2BAE               	incf	actuatorTest@i_1586& (0+255),f,b
 10776  000BD0  D7EF               	goto	l6618
 10777  000BD2                     l6626:
 10778                           
 10779                           ; BSR set to: 0
 10780  000BD2  0E00               	movlw	0
 10781  000BD4  0100               	movlb	0	; () banked
 10782  000BD6  6FAF               	movwf	actuatorTest@i_1587& (0+255),b
 10783  000BD8                     l6628:
 10784                           
 10785                           ; BSR set to: 0
 10786  000BD8  0E63               	movlw	99
 10787  000BDA  0100               	movlb	0	; () banked
 10788  000BDC  65AF               	cpfsgt	actuatorTest@i_1587& (0+255),b
 10789  000BDE  D001               	goto	l6632
 10790  000BE0  D00C               	goto	l6636
 10791  000BE2                     l6632:
 10792                           
 10793                           ; BSR set to: 0
 10794  000BE2  0E68               	movlw	104
 10795  000BE4  0100               	movlb	0	; () banked
 10796  000BE6  6FAB               	movwf	??_actuatorTest& (0+255),b
 10797  000BE8  0EE4               	movlw	228
 10798  000BEA                     u7467:
 10799  000BEA  2EE8               	decfsz	wreg,f,c
 10800  000BEC  D7FE               	bra	u7467
 10801  000BEE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10802  000BF0  D7FC               	bra	u7467
 10803  000BF2  F000               	nop	
 10804  000BF4  0100               	movlb	0	; () banked
 10805  000BF6  2BAF               	incf	actuatorTest@i_1587& (0+255),f,b
 10806  000BF8  D7EF               	goto	l6628
 10807  000BFA                     l6636:
 10808                           
 10809                           ; BSR set to: 0
 10810                           ;Test.c: 242: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10811  000BFA  0E80               	movlw	128
 10812  000BFC  ECB5  F022         	call	_lcdInst
 10813  000C00  0EC0               	movlw	192
 10814  000C02  ECB5  F022         	call	_lcdInst
 10815                           
 10816                           ;Test.c: 243: printf("RIGHT -- 2s     ");
 10817  000C06  0E21               	movlw	low STR_93
 10818  000C08  0100               	movlb	0	; () banked
 10819  000C0A  6F8E               	movwf	printf@f& (0+255),b
 10820  000C0C  0EFC               	movlw	high STR_93
 10821  000C0E  0100               	movlb	0	; () banked
 10822  000C10  6F8F               	movwf	(printf@f+1)& (0+255),b
 10823  000C12  EC9C  F008         	call	_printf	;wreg free
 10824                           
 10825                           ;Test.c: 244: updateServoPosition(500, 1);
 10826  000C16  0E01               	movlw	1
 10827  000C18  0100               	movlb	0	; () banked
 10828  000C1A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10829  000C1C  0EF4               	movlw	244
 10830  000C1E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10831  000C20  0E00               	movlw	0
 10832  000C22  0100               	movlb	0	; () banked
 10833  000C24  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10834  000C26  0E01               	movlw	1
 10835  000C28  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10836  000C2A  EC0F  F01D         	call	_updateServoPosition	;wreg free
 10837                           
 10838                           ;Test.c: 245: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10839  000C2E  0E00               	movlw	0
 10840  000C30  0100               	movlb	0	; () banked
 10841  000C32  6FB0               	movwf	actuatorTest@i_1589& (0+255),b
 10842  000C34                     l6644:
 10843                           
 10844                           ; BSR set to: 0
 10845  000C34  0E63               	movlw	99
 10846  000C36  0100               	movlb	0	; () banked
 10847  000C38  65B0               	cpfsgt	actuatorTest@i_1589& (0+255),b
 10848  000C3A  D001               	goto	l6648
 10849  000C3C  D00C               	goto	l6652
 10850  000C3E                     l6648:
 10851                           
 10852                           ; BSR set to: 0
 10853  000C3E  0E68               	movlw	104
 10854  000C40  0100               	movlb	0	; () banked
 10855  000C42  6FAB               	movwf	??_actuatorTest& (0+255),b
 10856  000C44  0EE4               	movlw	228
 10857  000C46                     u7477:
 10858  000C46  2EE8               	decfsz	wreg,f,c
 10859  000C48  D7FE               	bra	u7477
 10860  000C4A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10861  000C4C  D7FC               	bra	u7477
 10862  000C4E  F000               	nop	
 10863  000C50  0100               	movlb	0	; () banked
 10864  000C52  2BB0               	incf	actuatorTest@i_1589& (0+255),f,b
 10865  000C54  D7EF               	goto	l6644
 10866  000C56                     l6652:
 10867                           
 10868                           ; BSR set to: 0
 10869  000C56  0E00               	movlw	0
 10870  000C58  0100               	movlb	0	; () banked
 10871  000C5A  6FB1               	movwf	actuatorTest@i_1590& (0+255),b
 10872  000C5C                     l6654:
 10873                           
 10874                           ; BSR set to: 0
 10875  000C5C  0E63               	movlw	99
 10876  000C5E  0100               	movlb	0	; () banked
 10877  000C60  65B1               	cpfsgt	actuatorTest@i_1590& (0+255),b
 10878  000C62  D001               	goto	l6658
 10879  000C64  D00C               	goto	l6662
 10880  000C66                     l6658:
 10881                           
 10882                           ; BSR set to: 0
 10883  000C66  0E68               	movlw	104
 10884  000C68  0100               	movlb	0	; () banked
 10885  000C6A  6FAB               	movwf	??_actuatorTest& (0+255),b
 10886  000C6C  0EE4               	movlw	228
 10887  000C6E                     u7487:
 10888  000C6E  2EE8               	decfsz	wreg,f,c
 10889  000C70  D7FE               	bra	u7487
 10890  000C72  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10891  000C74  D7FC               	bra	u7487
 10892  000C76  F000               	nop	
 10893  000C78  0100               	movlb	0	; () banked
 10894  000C7A  2BB1               	incf	actuatorTest@i_1590& (0+255),f,b
 10895  000C7C  D7EF               	goto	l6654
 10896  000C7E                     l6662:
 10897                           
 10898                           ; BSR set to: 0
 10899                           ;Test.c: 247: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10900  000C7E  0E80               	movlw	128
 10901  000C80  ECB5  F022         	call	_lcdInst
 10902  000C84  0EC0               	movlw	192
 10903  000C86  ECB5  F022         	call	_lcdInst
 10904                           
 10905                           ;Test.c: 248: printf("LEFT -- 2s      ");
 10906  000C8A  0EFF               	movlw	low STR_94
 10907  000C8C  0100               	movlb	0	; () banked
 10908  000C8E  6F8E               	movwf	printf@f& (0+255),b
 10909  000C90  0EFB               	movlw	high STR_94
 10910  000C92  0100               	movlb	0	; () banked
 10911  000C94  6F8F               	movwf	(printf@f+1)& (0+255),b
 10912  000C96  EC9C  F008         	call	_printf	;wreg free
 10913                           
 10914                           ;Test.c: 249: updateServoPosition(2000, 1);
 10915  000C9A  0E07               	movlw	7
 10916  000C9C  0100               	movlb	0	; () banked
 10917  000C9E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10918  000CA0  0ED0               	movlw	208
 10919  000CA2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10920  000CA4  0E00               	movlw	0
 10921  000CA6  0100               	movlb	0	; () banked
 10922  000CA8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10923  000CAA  0E01               	movlw	1
 10924  000CAC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10925  000CAE  EC0F  F01D         	call	_updateServoPosition	;wreg free
 10926                           
 10927                           ;Test.c: 250: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10928  000CB2  0E00               	movlw	0
 10929  000CB4  0100               	movlb	0	; () banked
 10930  000CB6  6FB2               	movwf	actuatorTest@i_1592& (0+255),b
 10931  000CB8                     l6670:
 10932                           
 10933                           ; BSR set to: 0
 10934  000CB8  0E63               	movlw	99
 10935  000CBA  0100               	movlb	0	; () banked
 10936  000CBC  65B2               	cpfsgt	actuatorTest@i_1592& (0+255),b
 10937  000CBE  D001               	goto	l6674
 10938  000CC0  D00C               	goto	l6678
 10939  000CC2                     l6674:
 10940                           
 10941                           ; BSR set to: 0
 10942  000CC2  0E68               	movlw	104
 10943  000CC4  0100               	movlb	0	; () banked
 10944  000CC6  6FAB               	movwf	??_actuatorTest& (0+255),b
 10945  000CC8  0EE4               	movlw	228
 10946  000CCA                     u7497:
 10947  000CCA  2EE8               	decfsz	wreg,f,c
 10948  000CCC  D7FE               	bra	u7497
 10949  000CCE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10950  000CD0  D7FC               	bra	u7497
 10951  000CD2  F000               	nop	
 10952  000CD4  0100               	movlb	0	; () banked
 10953  000CD6  2BB2               	incf	actuatorTest@i_1592& (0+255),f,b
 10954  000CD8  D7EF               	goto	l6670
 10955  000CDA                     l6678:
 10956                           
 10957                           ; BSR set to: 0
 10958  000CDA  0E00               	movlw	0
 10959  000CDC  0100               	movlb	0	; () banked
 10960  000CDE  6FB3               	movwf	actuatorTest@i_1593& (0+255),b
 10961  000CE0                     l6680:
 10962                           
 10963                           ; BSR set to: 0
 10964  000CE0  0E63               	movlw	99
 10965  000CE2  0100               	movlb	0	; () banked
 10966  000CE4  65B3               	cpfsgt	actuatorTest@i_1593& (0+255),b
 10967  000CE6  D001               	goto	l6684
 10968  000CE8  D00C               	goto	l6688
 10969  000CEA                     l6684:
 10970                           
 10971                           ; BSR set to: 0
 10972  000CEA  0E68               	movlw	104
 10973  000CEC  0100               	movlb	0	; () banked
 10974  000CEE  6FAB               	movwf	??_actuatorTest& (0+255),b
 10975  000CF0  0EE4               	movlw	228
 10976  000CF2                     u7507:
 10977  000CF2  2EE8               	decfsz	wreg,f,c
 10978  000CF4  D7FE               	bra	u7507
 10979  000CF6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10980  000CF8  D7FC               	bra	u7507
 10981  000CFA  F000               	nop	
 10982  000CFC  0100               	movlb	0	; () banked
 10983  000CFE  2BB3               	incf	actuatorTest@i_1593& (0+255),f,b
 10984  000D00  D7EF               	goto	l6680
 10985  000D02                     l6688:
 10986                           
 10987                           ; BSR set to: 0
 10988                           ;Test.c: 252: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10989  000D02  0E80               	movlw	128
 10990  000D04  ECB5  F022         	call	_lcdInst
 10991  000D08  0EC0               	movlw	192
 10992  000D0A  ECB5  F022         	call	_lcdInst
 10993                           
 10994                           ;Test.c: 253: printf("MID-LEFT -- 2s  ");
 10995  000D0E  0E54               	movlw	low STR_95
 10996  000D10  0100               	movlb	0	; () banked
 10997  000D12  6F8E               	movwf	printf@f& (0+255),b
 10998  000D14  0EFC               	movlw	high STR_95
 10999  000D16  0100               	movlb	0	; () banked
 11000  000D18  6F8F               	movwf	(printf@f+1)& (0+255),b
 11001  000D1A  EC9C  F008         	call	_printf	;wreg free
 11002                           
 11003                           ;Test.c: 254: updateServoPosition(1650, 1);
 11004  000D1E  0E06               	movlw	6
 11005  000D20  0100               	movlb	0	; () banked
 11006  000D22  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11007  000D24  0E72               	movlw	114
 11008  000D26  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11009  000D28  0E00               	movlw	0
 11010  000D2A  0100               	movlb	0	; () banked
 11011  000D2C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11012  000D2E  0E01               	movlw	1
 11013  000D30  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11014  000D32  EC0F  F01D         	call	_updateServoPosition	;wreg free
 11015                           
 11016                           ;Test.c: 255: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11017  000D36  0E00               	movlw	0
 11018  000D38  0100               	movlb	0	; () banked
 11019  000D3A  6FB4               	movwf	actuatorTest@i_1595& (0+255),b
 11020  000D3C                     l6696:
 11021                           
 11022                           ; BSR set to: 0
 11023  000D3C  0E63               	movlw	99
 11024  000D3E  0100               	movlb	0	; () banked
 11025  000D40  65B4               	cpfsgt	actuatorTest@i_1595& (0+255),b
 11026  000D42  D001               	goto	l6700
 11027  000D44  D00C               	goto	l6704
 11028  000D46                     l6700:
 11029                           
 11030                           ; BSR set to: 0
 11031  000D46  0E68               	movlw	104
 11032  000D48  0100               	movlb	0	; () banked
 11033  000D4A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11034  000D4C  0EE4               	movlw	228
 11035  000D4E                     u7517:
 11036  000D4E  2EE8               	decfsz	wreg,f,c
 11037  000D50  D7FE               	bra	u7517
 11038  000D52  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11039  000D54  D7FC               	bra	u7517
 11040  000D56  F000               	nop	
 11041  000D58  0100               	movlb	0	; () banked
 11042  000D5A  2BB4               	incf	actuatorTest@i_1595& (0+255),f,b
 11043  000D5C  D7EF               	goto	l6696
 11044  000D5E                     l6704:
 11045                           
 11046                           ; BSR set to: 0
 11047  000D5E  0E00               	movlw	0
 11048  000D60  0100               	movlb	0	; () banked
 11049  000D62  6FB5               	movwf	actuatorTest@i_1596& (0+255),b
 11050  000D64                     l6706:
 11051                           
 11052                           ; BSR set to: 0
 11053  000D64  0E63               	movlw	99
 11054  000D66  0100               	movlb	0	; () banked
 11055  000D68  65B5               	cpfsgt	actuatorTest@i_1596& (0+255),b
 11056  000D6A  D001               	goto	l6710
 11057  000D6C  D00C               	goto	l6714
 11058  000D6E                     l6710:
 11059                           
 11060                           ; BSR set to: 0
 11061  000D6E  0E68               	movlw	104
 11062  000D70  0100               	movlb	0	; () banked
 11063  000D72  6FAB               	movwf	??_actuatorTest& (0+255),b
 11064  000D74  0EE4               	movlw	228
 11065  000D76                     u7527:
 11066  000D76  2EE8               	decfsz	wreg,f,c
 11067  000D78  D7FE               	bra	u7527
 11068  000D7A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11069  000D7C  D7FC               	bra	u7527
 11070  000D7E  F000               	nop	
 11071  000D80  0100               	movlb	0	; () banked
 11072  000D82  2BB5               	incf	actuatorTest@i_1596& (0+255),f,b
 11073  000D84  D7EF               	goto	l6706
 11074  000D86                     l6714:
 11075                           
 11076                           ; BSR set to: 0
 11077                           ;Test.c: 257: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11078  000D86  0E80               	movlw	128
 11079  000D88  ECB5  F022         	call	_lcdInst
 11080  000D8C  0EC0               	movlw	192
 11081  000D8E  ECB5  F022         	call	_lcdInst
 11082                           
 11083                           ;Test.c: 258: printf("MID-RIGHT -- 2s ");
 11084  000D92  0E65               	movlw	low STR_96
 11085  000D94  0100               	movlb	0	; () banked
 11086  000D96  6F8E               	movwf	printf@f& (0+255),b
 11087  000D98  0EFC               	movlw	high STR_96
 11088  000D9A  0100               	movlb	0	; () banked
 11089  000D9C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11090  000D9E  EC9C  F008         	call	_printf	;wreg free
 11091                           
 11092                           ;Test.c: 259: updateServoPosition(700, 1);
 11093  000DA2  0E02               	movlw	2
 11094  000DA4  0100               	movlb	0	; () banked
 11095  000DA6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11096  000DA8  0EBC               	movlw	188
 11097  000DAA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11098  000DAC  0E00               	movlw	0
 11099  000DAE  0100               	movlb	0	; () banked
 11100  000DB0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11101  000DB2  0E01               	movlw	1
 11102  000DB4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11103  000DB6  EC0F  F01D         	call	_updateServoPosition	;wreg free
 11104                           
 11105                           ;Test.c: 260: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11106  000DBA  0E00               	movlw	0
 11107  000DBC  0100               	movlb	0	; () banked
 11108  000DBE  6FB6               	movwf	actuatorTest@i_1598& (0+255),b
 11109  000DC0                     l6722:
 11110                           
 11111                           ; BSR set to: 0
 11112  000DC0  0E63               	movlw	99
 11113  000DC2  0100               	movlb	0	; () banked
 11114  000DC4  65B6               	cpfsgt	actuatorTest@i_1598& (0+255),b
 11115  000DC6  D001               	goto	l6726
 11116  000DC8  D00C               	goto	l6730
 11117  000DCA                     l6726:
 11118                           
 11119                           ; BSR set to: 0
 11120  000DCA  0E68               	movlw	104
 11121  000DCC  0100               	movlb	0	; () banked
 11122  000DCE  6FAB               	movwf	??_actuatorTest& (0+255),b
 11123  000DD0  0EE4               	movlw	228
 11124  000DD2                     u7537:
 11125  000DD2  2EE8               	decfsz	wreg,f,c
 11126  000DD4  D7FE               	bra	u7537
 11127  000DD6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11128  000DD8  D7FC               	bra	u7537
 11129  000DDA  F000               	nop	
 11130  000DDC  0100               	movlb	0	; () banked
 11131  000DDE  2BB6               	incf	actuatorTest@i_1598& (0+255),f,b
 11132  000DE0  D7EF               	goto	l6722
 11133  000DE2                     l6730:
 11134                           
 11135                           ; BSR set to: 0
 11136  000DE2  0E00               	movlw	0
 11137  000DE4  0100               	movlb	0	; () banked
 11138  000DE6  6FB7               	movwf	actuatorTest@i_1599& (0+255),b
 11139  000DE8                     l6732:
 11140                           
 11141                           ; BSR set to: 0
 11142  000DE8  0E63               	movlw	99
 11143  000DEA  0100               	movlb	0	; () banked
 11144  000DEC  65B7               	cpfsgt	actuatorTest@i_1599& (0+255),b
 11145  000DEE  D001               	goto	l6736
 11146  000DF0  D00C               	goto	l6740
 11147  000DF2                     l6736:
 11148                           
 11149                           ; BSR set to: 0
 11150  000DF2  0E68               	movlw	104
 11151  000DF4  0100               	movlb	0	; () banked
 11152  000DF6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11153  000DF8  0EE4               	movlw	228
 11154  000DFA                     u7547:
 11155  000DFA  2EE8               	decfsz	wreg,f,c
 11156  000DFC  D7FE               	bra	u7547
 11157  000DFE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11158  000E00  D7FC               	bra	u7547
 11159  000E02  F000               	nop	
 11160  000E04  0100               	movlb	0	; () banked
 11161  000E06  2BB7               	incf	actuatorTest@i_1599& (0+255),f,b
 11162  000E08  D7EF               	goto	l6732
 11163  000E0A                     l6740:
 11164                           
 11165                           ; BSR set to: 0
 11166                           ;Test.c: 262: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11167  000E0A  0E80               	movlw	128
 11168  000E0C  ECB5  F022         	call	_lcdInst
 11169  000E10  0EC0               	movlw	192
 11170  000E12  ECB5  F022         	call	_lcdInst
 11171                           
 11172                           ;Test.c: 263: printf("MID -- 2s       ");
 11173  000E16  0EDD               	movlw	low STR_97
 11174  000E18  0100               	movlb	0	; () banked
 11175  000E1A  6F8E               	movwf	printf@f& (0+255),b
 11176  000E1C  0EFB               	movlw	high STR_97
 11177  000E1E  0100               	movlb	0	; () banked
 11178  000E20  6F8F               	movwf	(printf@f+1)& (0+255),b
 11179  000E22  EC9C  F008         	call	_printf	;wreg free
 11180                           
 11181                           ;Test.c: 264: updateServoPosition(1250, 1);
 11182  000E26  0E04               	movlw	4
 11183  000E28  0100               	movlb	0	; () banked
 11184  000E2A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11185  000E2C  0EE2               	movlw	226
 11186  000E2E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11187  000E30  0E00               	movlw	0
 11188  000E32  0100               	movlb	0	; () banked
 11189  000E34  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11190  000E36  0E01               	movlw	1
 11191  000E38  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11192  000E3A  EC0F  F01D         	call	_updateServoPosition	;wreg free
 11193                           
 11194                           ;Test.c: 265: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11195  000E3E  0E00               	movlw	0
 11196  000E40  0100               	movlb	0	; () banked
 11197  000E42  6FB8               	movwf	actuatorTest@i_1601& (0+255),b
 11198  000E44                     l6748:
 11199                           
 11200                           ; BSR set to: 0
 11201  000E44  0E63               	movlw	99
 11202  000E46  0100               	movlb	0	; () banked
 11203  000E48  65B8               	cpfsgt	actuatorTest@i_1601& (0+255),b
 11204  000E4A  D001               	goto	l6752
 11205  000E4C  D00C               	goto	l6756
 11206  000E4E                     l6752:
 11207                           
 11208                           ; BSR set to: 0
 11209  000E4E  0E68               	movlw	104
 11210  000E50  0100               	movlb	0	; () banked
 11211  000E52  6FAB               	movwf	??_actuatorTest& (0+255),b
 11212  000E54  0EE4               	movlw	228
 11213  000E56                     u7557:
 11214  000E56  2EE8               	decfsz	wreg,f,c
 11215  000E58  D7FE               	bra	u7557
 11216  000E5A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11217  000E5C  D7FC               	bra	u7557
 11218  000E5E  F000               	nop	
 11219  000E60  0100               	movlb	0	; () banked
 11220  000E62  2BB8               	incf	actuatorTest@i_1601& (0+255),f,b
 11221  000E64  D7EF               	goto	l6748
 11222  000E66                     l6756:
 11223                           
 11224                           ; BSR set to: 0
 11225  000E66  0E00               	movlw	0
 11226  000E68  0100               	movlb	0	; () banked
 11227  000E6A  6FB9               	movwf	actuatorTest@i_1602& (0+255),b
 11228  000E6C                     l6758:
 11229                           
 11230                           ; BSR set to: 0
 11231  000E6C  0E63               	movlw	99
 11232  000E6E  0100               	movlb	0	; () banked
 11233  000E70  65B9               	cpfsgt	actuatorTest@i_1602& (0+255),b
 11234  000E72  D001               	goto	l6762
 11235  000E74  D00C               	goto	l1109
 11236  000E76                     l6762:
 11237                           
 11238                           ; BSR set to: 0
 11239  000E76  0E68               	movlw	104
 11240  000E78  0100               	movlb	0	; () banked
 11241  000E7A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11242  000E7C  0EE4               	movlw	228
 11243  000E7E                     u7567:
 11244  000E7E  2EE8               	decfsz	wreg,f,c
 11245  000E80  D7FE               	bra	u7567
 11246  000E82  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11247  000E84  D7FC               	bra	u7567
 11248  000E86  F000               	nop	
 11249  000E88  0100               	movlb	0	; () banked
 11250  000E8A  2BB9               	incf	actuatorTest@i_1602& (0+255),f,b
 11251  000E8C  D7EF               	goto	l6758
 11252  000E8E                     l1109:
 11253                           
 11254                           ; BSR set to: 0
 11255                           ;Test.c: 266: TMR1ON = 0;
 11256  000E8E  90CD               	bcf	4045,0,c	;volatile
 11257                           
 11258                           ; BSR set to: 0
 11259                           ;Test.c: 273: printf("TST: TILT SERVO");
 11260  000E90  0E40               	movlw	low STR_98
 11261  000E92  0100               	movlb	0	; () banked
 11262  000E94  6F8E               	movwf	printf@f& (0+255),b
 11263  000E96  0EFE               	movlw	high STR_98
 11264  000E98  0100               	movlb	0	; () banked
 11265  000E9A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11266  000E9C  EC9C  F008         	call	_printf	;wreg free
 11267                           
 11268                           ;Test.c: 274: lcdInst(0b11000000);;
 11269  000EA0  0EC0               	movlw	192
 11270  000EA2  ECB5  F022         	call	_lcdInst
 11271                           
 11272                           ;Test.c: 275: printf("LEVEL -- 2s     ");
 11273  000EA6  0E10               	movlw	low STR_99
 11274  000EA8  0100               	movlb	0	; () banked
 11275  000EAA  6F8E               	movwf	printf@f& (0+255),b
 11276  000EAC  0EFC               	movlw	high STR_99
 11277  000EAE  0100               	movlb	0	; () banked
 11278  000EB0  6F8F               	movwf	(printf@f+1)& (0+255),b
 11279  000EB2  EC9C  F008         	call	_printf	;wreg free
 11280                           
 11281                           ;Test.c: 276: updateServoPosition(1150, 3);
 11282  000EB6  0E04               	movlw	4
 11283  000EB8  0100               	movlb	0	; () banked
 11284  000EBA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11285  000EBC  0E7E               	movlw	126
 11286  000EBE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11287  000EC0  0E00               	movlw	0
 11288  000EC2  0100               	movlb	0	; () banked
 11289  000EC4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11290  000EC6  0E03               	movlw	3
 11291  000EC8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11292  000ECA  EC0F  F01D         	call	_updateServoPosition	;wreg free
 11293                           
 11294                           ;Test.c: 277: TMR3ON = 1;
 11295  000ECE  80B1               	bsf	4017,0,c	;volatile
 11296                           
 11297                           ;Test.c: 278: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11298  000ED0  0E00               	movlw	0
 11299  000ED2  0100               	movlb	0	; () banked
 11300  000ED4  6FBA               	movwf	actuatorTest@i_1605& (0+255),b
 11301  000ED6                     l6776:
 11302                           
 11303                           ; BSR set to: 0
 11304  000ED6  0E63               	movlw	99
 11305  000ED8  0100               	movlb	0	; () banked
 11306  000EDA  65BA               	cpfsgt	actuatorTest@i_1605& (0+255),b
 11307  000EDC  D001               	goto	l6780
 11308  000EDE  D00C               	goto	l6784
 11309  000EE0                     l6780:
 11310                           
 11311                           ; BSR set to: 0
 11312  000EE0  0E68               	movlw	104
 11313  000EE2  0100               	movlb	0	; () banked
 11314  000EE4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11315  000EE6  0EE4               	movlw	228
 11316  000EE8                     u7577:
 11317  000EE8  2EE8               	decfsz	wreg,f,c
 11318  000EEA  D7FE               	bra	u7577
 11319  000EEC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11320  000EEE  D7FC               	bra	u7577
 11321  000EF0  F000               	nop	
 11322  000EF2  0100               	movlb	0	; () banked
 11323  000EF4  2BBA               	incf	actuatorTest@i_1605& (0+255),f,b
 11324  000EF6  D7EF               	goto	l6776
 11325  000EF8                     l6784:
 11326                           
 11327                           ; BSR set to: 0
 11328  000EF8  0E00               	movlw	0
 11329  000EFA  0100               	movlb	0	; () banked
 11330  000EFC  6FBB               	movwf	actuatorTest@i_1606& (0+255),b
 11331  000EFE                     l6786:
 11332                           
 11333                           ; BSR set to: 0
 11334  000EFE  0E63               	movlw	99
 11335  000F00  0100               	movlb	0	; () banked
 11336  000F02  65BB               	cpfsgt	actuatorTest@i_1606& (0+255),b
 11337  000F04  D001               	goto	l6790
 11338  000F06  D00C               	goto	l6794
 11339  000F08                     l6790:
 11340                           
 11341                           ; BSR set to: 0
 11342  000F08  0E68               	movlw	104
 11343  000F0A  0100               	movlb	0	; () banked
 11344  000F0C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11345  000F0E  0EE4               	movlw	228
 11346  000F10                     u7587:
 11347  000F10  2EE8               	decfsz	wreg,f,c
 11348  000F12  D7FE               	bra	u7587
 11349  000F14  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11350  000F16  D7FC               	bra	u7587
 11351  000F18  F000               	nop	
 11352  000F1A  0100               	movlb	0	; () banked
 11353  000F1C  2BBB               	incf	actuatorTest@i_1606& (0+255),f,b
 11354  000F1E  D7EF               	goto	l6786
 11355  000F20                     l6794:
 11356                           
 11357                           ; BSR set to: 0
 11358                           ;Test.c: 280: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11359  000F20  0E80               	movlw	128
 11360  000F22  ECB5  F022         	call	_lcdInst
 11361  000F26  0EC0               	movlw	192
 11362  000F28  ECB5  F022         	call	_lcdInst
 11363                           
 11364                           ;Test.c: 281: printf("DROP -- 2s      ");
 11365  000F2C  0EEE               	movlw	low STR_100
 11366  000F2E  0100               	movlb	0	; () banked
 11367  000F30  6F8E               	movwf	printf@f& (0+255),b
 11368  000F32  0EFB               	movlw	high STR_100
 11369  000F34  0100               	movlb	0	; () banked
 11370  000F36  6F8F               	movwf	(printf@f+1)& (0+255),b
 11371  000F38  EC9C  F008         	call	_printf	;wreg free
 11372                           
 11373                           ;Test.c: 282: updateServoPosition(1350, 3);
 11374  000F3C  0E05               	movlw	5
 11375  000F3E  0100               	movlb	0	; () banked
 11376  000F40  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11377  000F42  0E46               	movlw	70
 11378  000F44  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11379  000F46  0E00               	movlw	0
 11380  000F48  0100               	movlb	0	; () banked
 11381  000F4A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11382  000F4C  0E03               	movlw	3
 11383  000F4E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11384  000F50  EC0F  F01D         	call	_updateServoPosition	;wreg free
 11385                           
 11386                           ;Test.c: 283: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11387  000F54  0E00               	movlw	0
 11388  000F56  0100               	movlb	0	; () banked
 11389  000F58  6FBC               	movwf	actuatorTest@i_1608& (0+255),b
 11390  000F5A                     l6802:
 11391                           
 11392                           ; BSR set to: 0
 11393  000F5A  0E63               	movlw	99
 11394  000F5C  0100               	movlb	0	; () banked
 11395  000F5E  65BC               	cpfsgt	actuatorTest@i_1608& (0+255),b
 11396  000F60  D001               	goto	l6806
 11397  000F62  D00C               	goto	l6810
 11398  000F64                     l6806:
 11399                           
 11400                           ; BSR set to: 0
 11401  000F64  0E68               	movlw	104
 11402  000F66  0100               	movlb	0	; () banked
 11403  000F68  6FAB               	movwf	??_actuatorTest& (0+255),b
 11404  000F6A  0EE4               	movlw	228
 11405  000F6C                     u7597:
 11406  000F6C  2EE8               	decfsz	wreg,f,c
 11407  000F6E  D7FE               	bra	u7597
 11408  000F70  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11409  000F72  D7FC               	bra	u7597
 11410  000F74  F000               	nop	
 11411  000F76  0100               	movlb	0	; () banked
 11412  000F78  2BBC               	incf	actuatorTest@i_1608& (0+255),f,b
 11413  000F7A  D7EF               	goto	l6802
 11414  000F7C                     l6810:
 11415                           
 11416                           ; BSR set to: 0
 11417  000F7C  0E00               	movlw	0
 11418  000F7E  0100               	movlb	0	; () banked
 11419  000F80  6FBD               	movwf	actuatorTest@i_1609& (0+255),b
 11420  000F82                     l6812:
 11421                           
 11422                           ; BSR set to: 0
 11423  000F82  0E63               	movlw	99
 11424  000F84  0100               	movlb	0	; () banked
 11425  000F86  65BD               	cpfsgt	actuatorTest@i_1609& (0+255),b
 11426  000F88  D001               	goto	l6816
 11427  000F8A  D00C               	goto	l6820
 11428  000F8C                     l6816:
 11429                           
 11430                           ; BSR set to: 0
 11431  000F8C  0E68               	movlw	104
 11432  000F8E  0100               	movlb	0	; () banked
 11433  000F90  6FAB               	movwf	??_actuatorTest& (0+255),b
 11434  000F92  0EE4               	movlw	228
 11435  000F94                     u7607:
 11436  000F94  2EE8               	decfsz	wreg,f,c
 11437  000F96  D7FE               	bra	u7607
 11438  000F98  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11439  000F9A  D7FC               	bra	u7607
 11440  000F9C  F000               	nop	
 11441  000F9E  0100               	movlb	0	; () banked
 11442  000FA0  2BBD               	incf	actuatorTest@i_1609& (0+255),f,b
 11443  000FA2  D7EF               	goto	l6812
 11444  000FA4                     l6820:
 11445                           
 11446                           ; BSR set to: 0
 11447                           ;Test.c: 285: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11448  000FA4  0E80               	movlw	128
 11449  000FA6  ECB5  F022         	call	_lcdInst
 11450  000FAA  0EC0               	movlw	192
 11451  000FAC  ECB5  F022         	call	_lcdInst
 11452                           
 11453                           ;Test.c: 286: printf("LEVEL -- 2s     ");
 11454  000FB0  0E10               	movlw	low STR_99
 11455  000FB2  0100               	movlb	0	; () banked
 11456  000FB4  6F8E               	movwf	printf@f& (0+255),b
 11457  000FB6  0EFC               	movlw	high STR_99
 11458  000FB8  0100               	movlb	0	; () banked
 11459  000FBA  6F8F               	movwf	(printf@f+1)& (0+255),b
 11460  000FBC  EC9C  F008         	call	_printf	;wreg free
 11461                           
 11462                           ;Test.c: 287: updateServoPosition(1150, 3);
 11463  000FC0  0E04               	movlw	4
 11464  000FC2  0100               	movlb	0	; () banked
 11465  000FC4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11466  000FC6  0E7E               	movlw	126
 11467  000FC8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11468  000FCA  0E00               	movlw	0
 11469  000FCC  0100               	movlb	0	; () banked
 11470  000FCE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11471  000FD0  0E03               	movlw	3
 11472  000FD2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11473  000FD4  EC0F  F01D         	call	_updateServoPosition	;wreg free
 11474                           
 11475                           ;Test.c: 288: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11476  000FD8  0E00               	movlw	0
 11477  000FDA  0100               	movlb	0	; () banked
 11478  000FDC  6FBE               	movwf	actuatorTest@i_1611& (0+255),b
 11479  000FDE                     l6828:
 11480                           
 11481                           ; BSR set to: 0
 11482  000FDE  0E63               	movlw	99
 11483  000FE0  0100               	movlb	0	; () banked
 11484  000FE2  65BE               	cpfsgt	actuatorTest@i_1611& (0+255),b
 11485  000FE4  D001               	goto	l6832
 11486  000FE6  D00C               	goto	l6836
 11487  000FE8                     l6832:
 11488                           
 11489                           ; BSR set to: 0
 11490  000FE8  0E68               	movlw	104
 11491  000FEA  0100               	movlb	0	; () banked
 11492  000FEC  6FAB               	movwf	??_actuatorTest& (0+255),b
 11493  000FEE  0EE4               	movlw	228
 11494  000FF0                     u7617:
 11495  000FF0  2EE8               	decfsz	wreg,f,c
 11496  000FF2  D7FE               	bra	u7617
 11497  000FF4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11498  000FF6  D7FC               	bra	u7617
 11499  000FF8  F000               	nop	
 11500  000FFA  0100               	movlb	0	; () banked
 11501  000FFC  2BBE               	incf	actuatorTest@i_1611& (0+255),f,b
 11502  000FFE  D7EF               	goto	l6828
 11503  001000                     l6836:
 11504                           
 11505                           ; BSR set to: 0
 11506  001000  0E00               	movlw	0
 11507  001002  0100               	movlb	0	; () banked
 11508  001004  6FBF               	movwf	actuatorTest@i_1612& (0+255),b
 11509  001006                     l6838:
 11510                           
 11511                           ; BSR set to: 0
 11512  001006  0E63               	movlw	99
 11513  001008  0100               	movlb	0	; () banked
 11514  00100A  65BF               	cpfsgt	actuatorTest@i_1612& (0+255),b
 11515  00100C  D001               	goto	l6842
 11516  00100E  D00C               	goto	l1121
 11517  001010                     l6842:
 11518                           
 11519                           ; BSR set to: 0
 11520  001010  0E68               	movlw	104
 11521  001012  0100               	movlb	0	; () banked
 11522  001014  6FAB               	movwf	??_actuatorTest& (0+255),b
 11523  001016  0EE4               	movlw	228
 11524  001018                     u7627:
 11525  001018  2EE8               	decfsz	wreg,f,c
 11526  00101A  D7FE               	bra	u7627
 11527  00101C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11528  00101E  D7FC               	bra	u7627
 11529  001020  F000               	nop	
 11530  001022  0100               	movlb	0	; () banked
 11531  001024  2BBF               	incf	actuatorTest@i_1612& (0+255),f,b
 11532  001026  D7EF               	goto	l6838
 11533  001028                     l1121:
 11534                           
 11535                           ; BSR set to: 0
 11536                           ;Test.c: 289: TMR3ON = 0;
 11537  001028  90B1               	bcf	4017,0,c	;volatile
 11538                           
 11539                           ;Test.c: 290: (INTCONbits.GIE = 0);
 11540  00102A  9EF2               	bcf	intcon,7,c	;volatile
 11541                           
 11542                           ; BSR set to: 0
 11543                           ;Test.c: 295: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11544  00102C  0E01               	movlw	1
 11545  00102E  ECB5  F022         	call	_lcdInst
 11546  001032  0E68               	movlw	104
 11547  001034  0100               	movlb	0	; () banked
 11548  001036  6FAB               	movwf	??_actuatorTest& (0+255),b
 11549  001038  0EE4               	movlw	228
 11550  00103A                     u7637:
 11551  00103A  2EE8               	decfsz	wreg,f,c
 11552  00103C  D7FE               	bra	u7637
 11553  00103E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11554  001040  D7FC               	bra	u7637
 11555  001042  F000               	nop	
 11556  001044  0E80               	movlw	128
 11557  001046  ECB5  F022         	call	_lcdInst
 11558                           
 11559                           ;Test.c: 296: printf("TST: CAM SERVO");
 11560  00104A  0E9C               	movlw	low STR_102
 11561  00104C  0100               	movlb	0	; () banked
 11562  00104E  6F8E               	movwf	printf@f& (0+255),b
 11563  001050  0EFE               	movlw	high STR_102
 11564  001052  0100               	movlb	0	; () banked
 11565  001054  6F8F               	movwf	(printf@f+1)& (0+255),b
 11566  001056  EC9C  F008         	call	_printf	;wreg free
 11567                           
 11568                           ;Test.c: 297: lcdInst(0b11000000);;
 11569  00105A  0EC0               	movlw	192
 11570  00105C  ECB5  F022         	call	_lcdInst
 11571                           
 11572                           ;Test.c: 298: printf("CAM UP  |RC0=1");
 11573  001060  0E7E               	movlw	low STR_103
 11574  001062  0100               	movlb	0	; () banked
 11575  001064  6F8E               	movwf	printf@f& (0+255),b
 11576  001066  0EFE               	movlw	high STR_103
 11577  001068  0100               	movlb	0	; () banked
 11578  00106A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11579  00106C  EC9C  F008         	call	_printf	;wreg free
 11580                           
 11581                           ;Test.c: 299: LATCbits.LATC0 = 0;
 11582  001070  908B               	bcf	3979,0,c	;volatile
 11583                           
 11584                           ;Test.c: 300: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11585  001072  0E00               	movlw	0
 11586  001074  0100               	movlb	0	; () banked
 11587  001076  6FC0               	movwf	actuatorTest@i_1615& (0+255),b
 11588  001078                     l6862:
 11589                           
 11590                           ; BSR set to: 0
 11591  001078  0E63               	movlw	99
 11592  00107A  0100               	movlb	0	; () banked
 11593  00107C  65C0               	cpfsgt	actuatorTest@i_1615& (0+255),b
 11594  00107E  D001               	goto	l6866
 11595  001080  D00C               	goto	l6870
 11596  001082                     l6866:
 11597                           
 11598                           ; BSR set to: 0
 11599  001082  0E68               	movlw	104
 11600  001084  0100               	movlb	0	; () banked
 11601  001086  6FAB               	movwf	??_actuatorTest& (0+255),b
 11602  001088  0EE4               	movlw	228
 11603  00108A                     u7647:
 11604  00108A  2EE8               	decfsz	wreg,f,c
 11605  00108C  D7FE               	bra	u7647
 11606  00108E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11607  001090  D7FC               	bra	u7647
 11608  001092  F000               	nop	
 11609  001094  0100               	movlb	0	; () banked
 11610  001096  2BC0               	incf	actuatorTest@i_1615& (0+255),f,b
 11611  001098  D7EF               	goto	l6862
 11612  00109A                     l6870:
 11613                           
 11614                           ; BSR set to: 0
 11615  00109A  0E00               	movlw	0
 11616  00109C  0100               	movlb	0	; () banked
 11617  00109E  6FC1               	movwf	actuatorTest@i_1616& (0+255),b
 11618  0010A0                     l6872:
 11619                           
 11620                           ; BSR set to: 0
 11621  0010A0  0E63               	movlw	99
 11622  0010A2  0100               	movlb	0	; () banked
 11623  0010A4  65C1               	cpfsgt	actuatorTest@i_1616& (0+255),b
 11624  0010A6  D001               	goto	l6876
 11625  0010A8  D00C               	goto	l6880
 11626  0010AA                     l6876:
 11627                           
 11628                           ; BSR set to: 0
 11629  0010AA  0E68               	movlw	104
 11630  0010AC  0100               	movlb	0	; () banked
 11631  0010AE  6FAB               	movwf	??_actuatorTest& (0+255),b
 11632  0010B0  0EE4               	movlw	228
 11633  0010B2                     u7657:
 11634  0010B2  2EE8               	decfsz	wreg,f,c
 11635  0010B4  D7FE               	bra	u7657
 11636  0010B6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11637  0010B8  D7FC               	bra	u7657
 11638  0010BA  F000               	nop	
 11639  0010BC  0100               	movlb	0	; () banked
 11640  0010BE  2BC1               	incf	actuatorTest@i_1616& (0+255),f,b
 11641  0010C0  D7EF               	goto	l6872
 11642  0010C2                     l6880:
 11643                           
 11644                           ; BSR set to: 0
 11645                           ;Test.c: 301: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11646  0010C2  0E80               	movlw	128
 11647  0010C4  ECB5  F022         	call	_lcdInst
 11648  0010C8  0EC0               	movlw	192
 11649  0010CA  ECB5  F022         	call	_lcdInst
 11650                           
 11651                           ;Test.c: 302: LATCbits.LATC0 = 1;
 11652  0010CE  808B               	bsf	3979,0,c	;volatile
 11653                           
 11654                           ;Test.c: 303: printf("CAM DWN |RC0=0");
 11655  0010D0  0E6F               	movlw	low STR_104
 11656  0010D2  0100               	movlb	0	; () banked
 11657  0010D4  6F8E               	movwf	printf@f& (0+255),b
 11658  0010D6  0EFE               	movlw	high STR_104
 11659  0010D8  0100               	movlb	0	; () banked
 11660  0010DA  6F8F               	movwf	(printf@f+1)& (0+255),b
 11661  0010DC  EC9C  F008         	call	_printf	;wreg free
 11662                           
 11663                           ;Test.c: 304: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11664  0010E0  0E00               	movlw	0
 11665  0010E2  0100               	movlb	0	; () banked
 11666  0010E4  6FC2               	movwf	actuatorTest@i_1618& (0+255),b
 11667  0010E6                     l6888:
 11668                           
 11669                           ; BSR set to: 0
 11670  0010E6  0E63               	movlw	99
 11671  0010E8  0100               	movlb	0	; () banked
 11672  0010EA  65C2               	cpfsgt	actuatorTest@i_1618& (0+255),b
 11673  0010EC  D001               	goto	l6892
 11674  0010EE  D00C               	goto	l6896
 11675  0010F0                     l6892:
 11676                           
 11677                           ; BSR set to: 0
 11678  0010F0  0E68               	movlw	104
 11679  0010F2  0100               	movlb	0	; () banked
 11680  0010F4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11681  0010F6  0EE4               	movlw	228
 11682  0010F8                     u7667:
 11683  0010F8  2EE8               	decfsz	wreg,f,c
 11684  0010FA  D7FE               	bra	u7667
 11685  0010FC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11686  0010FE  D7FC               	bra	u7667
 11687  001100  F000               	nop	
 11688  001102  0100               	movlb	0	; () banked
 11689  001104  2BC2               	incf	actuatorTest@i_1618& (0+255),f,b
 11690  001106  D7EF               	goto	l6888
 11691  001108                     l6896:
 11692                           
 11693                           ; BSR set to: 0
 11694  001108  0E00               	movlw	0
 11695  00110A  0100               	movlb	0	; () banked
 11696  00110C  6FC3               	movwf	actuatorTest@i_1619& (0+255),b
 11697  00110E                     l6898:
 11698                           
 11699                           ; BSR set to: 0
 11700  00110E  0E63               	movlw	99
 11701  001110  0100               	movlb	0	; () banked
 11702  001112  65C3               	cpfsgt	actuatorTest@i_1619& (0+255),b
 11703  001114  D001               	goto	l6902
 11704  001116  D00C               	goto	l6906
 11705  001118                     l6902:
 11706                           
 11707                           ; BSR set to: 0
 11708  001118  0E68               	movlw	104
 11709  00111A  0100               	movlb	0	; () banked
 11710  00111C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11711  00111E  0EE4               	movlw	228
 11712  001120                     u7677:
 11713  001120  2EE8               	decfsz	wreg,f,c
 11714  001122  D7FE               	bra	u7677
 11715  001124  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11716  001126  D7FC               	bra	u7677
 11717  001128  F000               	nop	
 11718  00112A  0100               	movlb	0	; () banked
 11719  00112C  2BC3               	incf	actuatorTest@i_1619& (0+255),f,b
 11720  00112E  D7EF               	goto	l6898
 11721  001130                     l6906:
 11722                           
 11723                           ; BSR set to: 0
 11724                           ;Test.c: 305: machine_state = Testing_state;
 11725  001130  0E03               	movlw	3
 11726  001132  0100               	movlb	0	; () banked
 11727  001134  6FFC               	movwf	_machine_state& (0+255),b
 11728                           
 11729                           ; BSR set to: 0
 11730  001136  0012               	return		;funcret
 11731  001138                     __end_of_actuatorTest:
 11732                           	opt stack 0
 11733                           tblptru	equ	0xFF8
 11734                           tblptrh	equ	0xFF7
 11735                           tblptrl	equ	0xFF6
 11736                           tablat	equ	0xFF5
 11737                           prodh	equ	0xFF4
 11738                           prodl	equ	0xFF3
 11739                           intcon	equ	0xFF2
 11740                           intcon2	equ	0xFF1
 11741                           intcon3	equ	0xFF0
 11742                           postinc0	equ	0xFEE
 11743                           wreg	equ	0xFE8
 11744                           postdec1	equ	0xFE5
 11745                           fsr1l	equ	0xFE1
 11746                           indf2	equ	0xFDF
 11747                           postinc2	equ	0xFDE
 11748                           postdec2	equ	0xFDD
 11749                           fsr2h	equ	0xFDA
 11750                           fsr2l	equ	0xFD9
 11751                           status	equ	0xFD8
 11752                           
 11753 ;; *************** function _ToggleTestA5 *****************
 11754 ;; Defined at:
 11755 ;;		line 450 in file "Test.c"
 11756 ;; Parameters:    Size  Location     Type
 11757 ;;		None
 11758 ;; Auto vars:     Size  Location     Type
 11759 ;;  on              2   44[BANK0 ] int 
 11760 ;; Return value:  Size  Location     Type
 11761 ;;                  1    wreg      void 
 11762 ;; Registers used:
 11763 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11764 ;; Tracked objects:
 11765 ;;		On entry : 0/0
 11766 ;;		On exit  : 0/0
 11767 ;;		Unchanged: 0/0
 11768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11770 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11771 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11772 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11773 ;;Total ram usage:        3 bytes
 11774 ;; Hardware stack levels used:    1
 11775 ;; Hardware stack levels required when called:   10
 11776 ;; This function calls:
 11777 ;;		_lcdInst
 11778 ;;		_printf
 11779 ;; This function is called by:
 11780 ;;		_Test
 11781 ;; This function uses a non-reentrant model
 11782 ;;
 11783                           
 11784                           	psect	text41
 11785  003814                     __ptext41:
 11786                           	opt stack 0
 11787  003814                     _ToggleTestA5:
 11788                           	opt stack 19
 11789                           
 11790                           ;Test.c: 451: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11791                           
 11792                           ; BSR set to: 0
 11793                           ;incstack = 0
 11794  003814  0E01               	movlw	1
 11795  003816  ECB5  F022         	call	_lcdInst
 11796  00381A  0E68               	movlw	104
 11797  00381C  0100               	movlb	0	; () banked
 11798  00381E  6FAB               	movwf	??_ToggleTestA5& (0+255),b
 11799  003820  0EE4               	movlw	228
 11800  003822                     u7687:
 11801  003822  2EE8               	decfsz	wreg,f,c
 11802  003824  D7FE               	bra	u7687
 11803  003826  2FAB               	decfsz	??_ToggleTestA5& (0+255),f,b
 11804  003828  D7FC               	bra	u7687
 11805  00382A  F000               	nop	
 11806  00382C  0E80               	movlw	128
 11807  00382E  ECB5  F022         	call	_lcdInst
 11808                           
 11809                           ;Test.c: 452: printf("D WILL RETURN   ");
 11810  003832  0E43               	movlw	low STR_110
 11811  003834  0100               	movlb	0	; () banked
 11812  003836  6F8E               	movwf	printf@f& (0+255),b
 11813  003838  0EFC               	movlw	high STR_110
 11814  00383A  0100               	movlb	0	; () banked
 11815  00383C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11816  00383E  EC9C  F008         	call	_printf	;wreg free
 11817                           
 11818                           ;Test.c: 453: lcdInst(0b11000000);;
 11819  003842  0EC0               	movlw	192
 11820  003844  ECB5  F022         	call	_lcdInst
 11821                           
 11822                           ;Test.c: 454: printf("ELSE TOGGLES RA5");
 11823  003848  0E76               	movlw	low STR_111
 11824  00384A  0100               	movlb	0	; () banked
 11825  00384C  6F8E               	movwf	printf@f& (0+255),b
 11826  00384E  0EFC               	movlw	high STR_111
 11827  003850  0100               	movlb	0	; () banked
 11828  003852  6F8F               	movwf	(printf@f+1)& (0+255),b
 11829  003854  EC9C  F008         	call	_printf	;wreg free
 11830                           
 11831                           ;Test.c: 455: int on = 0;
 11832  003858  0E00               	movlw	0
 11833  00385A  0100               	movlb	0	; () banked
 11834  00385C  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 11835  00385E  0E00               	movlw	0
 11836  003860  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 11837  003862                     l1187:
 11838  003862  A281               	btfss	3969,1,c	;volatile
 11839  003864  D7FE               	goto	l1187
 11840                           
 11841                           ;Test.c: 460: }
 11842                           ;Test.c: 461: if(PORTB >> 4 == 0b1111){
 11843  003866  3881               	swapf	3969,w,c	;volatile
 11844  003868  0B0F               	andlw	15
 11845  00386A  0A0F               	xorlw	15
 11846  00386C  B4D8               	btfsc	status,2,c
 11847  00386E  0012               	return	
 11848                           
 11849                           ;Test.c: 464: else{
 11850                           ;Test.c: 465: if(on == 0){
 11851                           
 11852                           ;Test.c: 463: }
 11853                           
 11854                           ;Test.c: 462: break;
 11855  003870  0100               	movlb	0	; () banked
 11856  003872  51AC               	movf	ToggleTestA5@on& (0+255),w,b
 11857  003874  0100               	movlb	0	; () banked
 11858  003876  11AD               	iorwf	(ToggleTestA5@on+1)& (0+255),w,b
 11859  003878  A4D8               	btfss	status,2,c
 11860  00387A  D007               	goto	l6952
 11861                           
 11862                           ; BSR set to: 0
 11863                           ;Test.c: 466: on = 1;
 11864  00387C  0E00               	movlw	0
 11865  00387E  0100               	movlb	0	; () banked
 11866  003880  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 11867  003882  0E01               	movlw	1
 11868  003884  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 11869                           
 11870                           ; BSR set to: 0
 11871                           ;Test.c: 467: LATAbits.LATA5 = 1;
 11872  003886  8A89               	bsf	3977,5,c	;volatile
 11873                           
 11874                           ;Test.c: 468: }
 11875  003888  D006               	goto	l1195
 11876  00388A                     l6952:
 11877                           
 11878                           ; BSR set to: 0
 11879                           ;Test.c: 469: else{
 11880                           ;Test.c: 470: on = 0;
 11881  00388A  0E00               	movlw	0
 11882  00388C  0100               	movlb	0	; () banked
 11883  00388E  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 11884  003890  0E00               	movlw	0
 11885  003892  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 11886                           
 11887                           ; BSR set to: 0
 11888                           ;Test.c: 471: LATAbits.LATA5 = 0;
 11889  003894  9A89               	bcf	3977,5,c	;volatile
 11890  003896                     l1195:
 11891  003896  A281               	btfss	3969,1,c	;volatile
 11892  003898  D7E4               	goto	l1187
 11893  00389A  D7FD               	goto	l1195
 11894  00389C                     __end_of_ToggleTestA5:
 11895                           	opt stack 0
 11896                           tblptru	equ	0xFF8
 11897                           tblptrh	equ	0xFF7
 11898                           tblptrl	equ	0xFF6
 11899                           tablat	equ	0xFF5
 11900                           prodh	equ	0xFF4
 11901                           prodl	equ	0xFF3
 11902                           intcon	equ	0xFF2
 11903                           intcon2	equ	0xFF1
 11904                           intcon3	equ	0xFF0
 11905                           postinc0	equ	0xFEE
 11906                           wreg	equ	0xFE8
 11907                           postdec1	equ	0xFE5
 11908                           fsr1l	equ	0xFE1
 11909                           indf2	equ	0xFDF
 11910                           postinc2	equ	0xFDE
 11911                           postdec2	equ	0xFDD
 11912                           fsr2h	equ	0xFDA
 11913                           fsr2l	equ	0xFD9
 11914                           status	equ	0xFD8
 11915                           
 11916 ;; *************** function _SolenoidTestA5 *****************
 11917 ;; Defined at:
 11918 ;;		line 426 in file "Test.c"
 11919 ;; Parameters:    Size  Location     Type
 11920 ;;		None
 11921 ;; Auto vars:     Size  Location     Type
 11922 ;;  i               1   47[BANK0 ] unsigned char 
 11923 ;;  i               1   48[BANK0 ] unsigned char 
 11924 ;;  i               2   45[BANK0 ] int 
 11925 ;; Return value:  Size  Location     Type
 11926 ;;                  1    wreg      void 
 11927 ;; Registers used:
 11928 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11929 ;; Tracked objects:
 11930 ;;		On entry : 0/0
 11931 ;;		On exit  : 0/0
 11932 ;;		Unchanged: 0/0
 11933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11935 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11936 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11937 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11938 ;;Total ram usage:        6 bytes
 11939 ;; Hardware stack levels used:    1
 11940 ;; Hardware stack levels required when called:   10
 11941 ;; This function calls:
 11942 ;;		_lcdInst
 11943 ;;		_printf
 11944 ;; This function is called by:
 11945 ;;		_Test
 11946 ;; This function uses a non-reentrant model
 11947 ;;
 11948                           
 11949                           	psect	text42
 11950  003170                     __ptext42:
 11951                           	opt stack 0
 11952  003170                     _SolenoidTestA5:
 11953                           	opt stack 19
 11954  003170                     
 11955                           ;Test.c: 428: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11956  003170  0E01               	movlw	1
 11957  003172  ECB5  F022         	call	_lcdInst
 11958  003176  0E68               	movlw	104
 11959  003178  0100               	movlb	0	; () banked
 11960  00317A  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 11961  00317C  0EE4               	movlw	228
 11962  00317E                     u7697:
 11963  00317E  2EE8               	decfsz	wreg,f,c
 11964  003180  D7FE               	bra	u7697
 11965  003182  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 11966  003184  D7FC               	bra	u7697
 11967  003186  F000               	nop	
 11968  003188  0E80               	movlw	128
 11969  00318A  ECB5  F022         	call	_lcdInst
 11970                           
 11971                           ;Test.c: 429: printf("SOLENOID TST");
 11972  00318E  0E48               	movlw	low STR_108
 11973  003190  0100               	movlb	0	; () banked
 11974  003192  6F8E               	movwf	printf@f& (0+255),b
 11975  003194  0EFF               	movlw	high STR_108
 11976  003196  0100               	movlb	0	; () banked
 11977  003198  6F8F               	movwf	(printf@f+1)& (0+255),b
 11978  00319A  EC9C  F008         	call	_printf	;wreg free
 11979                           
 11980                           ;Test.c: 430: lcdInst(0b11000000);;
 11981  00319E  0EC0               	movlw	192
 11982  0031A0  ECB5  F022         	call	_lcdInst
 11983  0031A4                     l1172:
 11984  0031A4  A281               	btfss	3969,1,c	;volatile
 11985  0031A6  D7FE               	goto	l1172
 11986                           
 11987                           ;Test.c: 435: }
 11988                           ;Test.c: 437: for(int i = 0; i < 3; i++){
 11989  0031A8  0E00               	movlw	0
 11990  0031AA  0100               	movlb	0	; () banked
 11991  0031AC  6FAE               	movwf	(SolenoidTestA5@i+1)& (0+255),b
 11992  0031AE  0E00               	movlw	0
 11993  0031B0  6FAD               	movwf	SolenoidTestA5@i& (0+255),b
 11994  0031B2                     l6968:
 11995                           
 11996                           ; BSR set to: 0
 11997  0031B2  0100               	movlb	0	; () banked
 11998  0031B4  BFAE               	btfsc	(SolenoidTestA5@i+1)& (0+255),7,b
 11999  0031B6  D008               	goto	l6972
 12000  0031B8  0100               	movlb	0	; () banked
 12001  0031BA  51AE               	movf	(SolenoidTestA5@i+1)& (0+255),w,b
 12002  0031BC  E12D               	bnz	l6988
 12003  0031BE  0E03               	movlw	3
 12004  0031C0  0100               	movlb	0	; () banked
 12005  0031C2  5DAD               	subwf	SolenoidTestA5@i& (0+255),w,b
 12006  0031C4  B0D8               	btfsc	status,0,c
 12007  0031C6  D028               	goto	l6988
 12008  0031C8                     l6972:
 12009                           
 12010                           ; BSR set to: 0
 12011                           ;Test.c: 438: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12012  0031C8  0E00               	movlw	0
 12013  0031CA  0100               	movlb	0	; () banked
 12014  0031CC  6FAF               	movwf	SolenoidTestA5@i_1632& (0+255),b
 12015  0031CE                     l6974:
 12016                           
 12017                           ; BSR set to: 0
 12018  0031CE  0E63               	movlw	99
 12019  0031D0  0100               	movlb	0	; () banked
 12020  0031D2  65AF               	cpfsgt	SolenoidTestA5@i_1632& (0+255),b
 12021  0031D4  D001               	goto	l6978
 12022  0031D6  D00C               	goto	l1178
 12023  0031D8                     l6978:
 12024                           
 12025                           ; BSR set to: 0
 12026  0031D8  0E68               	movlw	104
 12027  0031DA  0100               	movlb	0	; () banked
 12028  0031DC  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12029  0031DE  0EE4               	movlw	228
 12030  0031E0                     u7707:
 12031  0031E0  2EE8               	decfsz	wreg,f,c
 12032  0031E2  D7FE               	bra	u7707
 12033  0031E4  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12034  0031E6  D7FC               	bra	u7707
 12035  0031E8  F000               	nop	
 12036  0031EA  0100               	movlb	0	; () banked
 12037  0031EC  2BAF               	incf	SolenoidTestA5@i_1632& (0+255),f,b
 12038  0031EE  D7EF               	goto	l6974
 12039  0031F0                     l1178:
 12040                           
 12041                           ; BSR set to: 0
 12042                           ;Test.c: 439: LATAbits.LATA5 = 1;
 12043  0031F0  8A89               	bsf	3977,5,c	;volatile
 12044                           
 12045                           ; BSR set to: 0
 12046                           ;Test.c: 440: _delay((unsigned long)((150)*(32000000/4000.0)));
 12047  0031F2  0E07               	movlw	7
 12048  0031F4  0100               	movlb	0	; () banked
 12049  0031F6  6FAC               	movwf	(??_SolenoidTestA5+1)& (0+255),b
 12050  0031F8  0E17               	movlw	23
 12051  0031FA  0100               	movlb	0	; () banked
 12052  0031FC  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12053  0031FE  0E6A               	movlw	106
 12054  003200                     u7717:
 12055  003200  2EE8               	decfsz	wreg,f,c
 12056  003202  D7FE               	bra	u7717
 12057  003204  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12058  003206  D7FC               	bra	u7717
 12059  003208  2FAC               	decfsz	(??_SolenoidTestA5+1)& (0+255),f,b
 12060  00320A  D7FA               	bra	u7717
 12061  00320C  F000               	nop	
 12062                           
 12063                           ;Test.c: 441: LATAbits.LATA5 = 0;
 12064  00320E  9A89               	bcf	3977,5,c	;volatile
 12065  003210  0100               	movlb	0	; () banked
 12066  003212  4BAD               	infsnz	SolenoidTestA5@i& (0+255),f,b
 12067  003214  2BAE               	incf	(SolenoidTestA5@i+1)& (0+255),f,b
 12068  003216  D7CD               	goto	l6968
 12069  003218                     l6988:
 12070                           
 12071                           ; BSR set to: 0
 12072                           ;Test.c: 442: }
 12073                           ;Test.c: 444: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12074  003218  0E01               	movlw	1
 12075  00321A  ECB5  F022         	call	_lcdInst
 12076  00321E  0E68               	movlw	104
 12077  003220  0100               	movlb	0	; () banked
 12078  003222  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12079  003224  0EE4               	movlw	228
 12080  003226                     u7727:
 12081  003226  2EE8               	decfsz	wreg,f,c
 12082  003228  D7FE               	bra	u7727
 12083  00322A  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12084  00322C  D7FC               	bra	u7727
 12085  00322E  F000               	nop	
 12086  003230  0E80               	movlw	128
 12087  003232  ECB5  F022         	call	_lcdInst
 12088                           
 12089                           ;Test.c: 445: printf("PUSH DONE");
 12090  003236  0E8F               	movlw	low STR_109
 12091  003238  0100               	movlb	0	; () banked
 12092  00323A  6F8E               	movwf	printf@f& (0+255),b
 12093  00323C  0EFF               	movlw	high STR_109
 12094  00323E  0100               	movlb	0	; () banked
 12095  003240  6F8F               	movwf	(printf@f+1)& (0+255),b
 12096  003242  EC9C  F008         	call	_printf	;wreg free
 12097                           
 12098                           ;Test.c: 446: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12099  003246  0E00               	movlw	0
 12100  003248  0100               	movlb	0	; () banked
 12101  00324A  6FB0               	movwf	SolenoidTestA5@i_1634& (0+255),b
 12102  00324C                     l6998:
 12103                           
 12104                           ; BSR set to: 0
 12105  00324C  0E63               	movlw	99
 12106  00324E  0100               	movlb	0	; () banked
 12107  003250  65B0               	cpfsgt	SolenoidTestA5@i_1634& (0+255),b
 12108  003252  D001               	goto	l7002
 12109  003254  D78D               	goto	l6956
 12110  003256                     l7002:
 12111                           
 12112                           ; BSR set to: 0
 12113  003256  0E68               	movlw	104
 12114  003258  0100               	movlb	0	; () banked
 12115  00325A  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12116  00325C  0EE4               	movlw	228
 12117  00325E                     u7737:
 12118  00325E  2EE8               	decfsz	wreg,f,c
 12119  003260  D7FE               	bra	u7737
 12120  003262  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12121  003264  D7FC               	bra	u7737
 12122  003266  F000               	nop	
 12123  003268  0100               	movlb	0	; () banked
 12124  00326A  2BB0               	incf	SolenoidTestA5@i_1634& (0+255),f,b
 12125  00326C  D7EF               	goto	l6998
 12126  00326E                     __end_of_SolenoidTestA5:
 12127                           	opt stack 0
 12128                           tblptru	equ	0xFF8
 12129                           tblptrh	equ	0xFF7
 12130                           tblptrl	equ	0xFF6
 12131                           tablat	equ	0xFF5
 12132                           prodh	equ	0xFF4
 12133                           prodl	equ	0xFF3
 12134                           intcon	equ	0xFF2
 12135                           intcon2	equ	0xFF1
 12136                           intcon3	equ	0xFF0
 12137                           postinc0	equ	0xFEE
 12138                           wreg	equ	0xFE8
 12139                           postdec1	equ	0xFE5
 12140                           fsr1l	equ	0xFE1
 12141                           indf2	equ	0xFDF
 12142                           postinc2	equ	0xFDE
 12143                           postdec2	equ	0xFDD
 12144                           fsr2h	equ	0xFDA
 12145                           fsr2l	equ	0xFD9
 12146                           status	equ	0xFD8
 12147                           
 12148 ;; *************** function _PortTests *****************
 12149 ;; Defined at:
 12150 ;;		line 357 in file "Test.c"
 12151 ;; Parameters:    Size  Location     Type
 12152 ;;		None
 12153 ;; Auto vars:     Size  Location     Type
 12154 ;;		None
 12155 ;; Return value:  Size  Location     Type
 12156 ;;                  1    wreg      void 
 12157 ;; Registers used:
 12158 ;;		wreg, status,2, status,0
 12159 ;; Tracked objects:
 12160 ;;		On entry : 0/0
 12161 ;;		On exit  : 0/0
 12162 ;;		Unchanged: 0/0
 12163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12166 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12167 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12168 ;;Total ram usage:        2 bytes
 12169 ;; Hardware stack levels used:    1
 12170 ;; Hardware stack levels required when called:    7
 12171 ;; This function calls:
 12172 ;;		Nothing
 12173 ;; This function is called by:
 12174 ;;		_Test
 12175 ;; This function uses a non-reentrant model
 12176 ;;
 12177                           
 12178                           	psect	text43
 12179  003922                     __ptext43:
 12180                           	opt stack 0
 12181  003922                     _PortTests:
 12182                           	opt stack 22
 12183  003922                     l1137:
 12184  003922  A281               	btfss	3969,1,c	;volatile
 12185  003924  D7FE               	goto	l1137
 12186                           
 12187                           ;Test.c: 361: var = PORTB >> 4;
 12188  003926  CF81 F080          	movff	3969,??_PortTests	;volatile
 12189  00392A  0100               	movlb	0	; () banked
 12190  00392C  3B80               	swapf	??_PortTests& (0+255),f,b
 12191  00392E  0E0F               	movlw	15
 12192  003930  1780               	andwf	??_PortTests& (0+255),f,b
 12193  003932  0100               	movlb	0	; () banked
 12194  003934  5180               	movf	??_PortTests& (0+255),w,b
 12195  003936  0100               	movlb	0	; () banked
 12196  003938  6FFA               	movwf	_var& (0+255),b
 12197  00393A  6BFB               	clrf	(_var+1)& (0+255),b
 12198                           
 12199                           ;Test.c: 362: switch(var){
 12200  00393C  D00C               	goto	l7010
 12201  00393E                     l1141:
 12202                           
 12203                           ; BSR set to: 0
 12204                           ;Test.c: 364: LATEbits.LATE0 = 1;
 12205  00393E  808D               	bsf	3981,0,c	;volatile
 12206                           
 12207                           ;Test.c: 365: break;
 12208  003940  D027               	goto	l1149
 12209  003942                     l1143:
 12210                           
 12211                           ; BSR set to: 0
 12212                           ;Test.c: 367: LATEbits.LATE1 = 1;
 12213  003942  828D               	bsf	3981,1,c	;volatile
 12214                           
 12215                           ;Test.c: 368: break;
 12216  003944  D025               	goto	l1149
 12217  003946                     l1144:
 12218                           
 12219                           ; BSR set to: 0
 12220                           ;Test.c: 370: LATDbits.LATD0 = 1;
 12221  003946  808C               	bsf	3980,0,c	;volatile
 12222                           
 12223                           ;Test.c: 371: break;
 12224  003948  D023               	goto	l1149
 12225  00394A                     l1145:
 12226                           
 12227                           ; BSR set to: 0
 12228                           ;Test.c: 373: LATAbits.LATA3 = 1;
 12229  00394A  8689               	bsf	3977,3,c	;volatile
 12230                           
 12231                           ;Test.c: 374: break;
 12232  00394C  D021               	goto	l1149
 12233  00394E                     l1146:
 12234                           
 12235                           ; BSR set to: 0
 12236                           ;Test.c: 376: LATAbits.LATA4 = 1;
 12237  00394E  8889               	bsf	3977,4,c	;volatile
 12238                           
 12239                           ;Test.c: 377: break;
 12240  003950  D01F               	goto	l1149
 12241  003952                     l1147:
 12242                           
 12243                           ; BSR set to: 0
 12244                           ;Test.c: 379: LATAbits.LATA5 = 1;
 12245  003952  8A89               	bsf	3977,5,c	;volatile
 12246                           
 12247                           ; BSR set to: 0
 12248                           ;Test.c: 383: }
 12249                           
 12250                           ; BSR set to: 0
 12251                           ;Test.c: 382: break;
 12252                           
 12253                           ;Test.c: 381: default:
 12254                           
 12255                           ;Test.c: 380: break;
 12256  003954  D01D               	goto	l1149
 12257  003956                     l7010:
 12258                           
 12259                           ; BSR set to: 0
 12260  003956  C0FA  F080         	movff	_var,??_PortTests
 12261  00395A  C0FB  F081         	movff	_var+1,??_PortTests+1
 12262                           
 12263                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12264                           ; Switch size 1, requested type "space"
 12265                           ; Number of cases is 1, Range of values is 0 to 0
 12266                           ; switch strategies available:
 12267                           ; Name         Instructions Cycles
 12268                           ; simple_byte            4     3 (average)
 12269                           ;	Chosen strategy is simple_byte
 12270  00395E  0100               	movlb	0	; () banked
 12271  003960  5181               	movf	(??_PortTests+1)& (0+255),w,b
 12272  003962  0A00               	xorlw	0	; case 0
 12273  003964  A4D8               	btfss	status,2,c
 12274  003966  D014               	goto	l1149
 12275                           
 12276                           ; BSR set to: 0
 12277                           ; Switch size 1, requested type "space"
 12278                           ; Number of cases is 6, Range of values is 0 to 5
 12279                           ; switch strategies available:
 12280                           ; Name         Instructions Cycles
 12281                           ; simple_byte           19    10 (average)
 12282                           ;	Chosen strategy is simple_byte
 12283  003968  0100               	movlb	0	; () banked
 12284  00396A  5180               	movf	??_PortTests& (0+255),w,b
 12285  00396C  0A00               	xorlw	0	; case 0
 12286  00396E  B4D8               	btfsc	status,2,c
 12287  003970  D7E6               	goto	l1141
 12288  003972  0A01               	xorlw	1	; case 1
 12289  003974  B4D8               	btfsc	status,2,c
 12290  003976  D7E5               	goto	l1143
 12291  003978  0A03               	xorlw	3	; case 2
 12292  00397A  B4D8               	btfsc	status,2,c
 12293  00397C  D7E4               	goto	l1144
 12294  00397E  0A01               	xorlw	1	; case 3
 12295  003980  B4D8               	btfsc	status,2,c
 12296  003982  D7E3               	goto	l1145
 12297  003984  0A07               	xorlw	7	; case 4
 12298  003986  B4D8               	btfsc	status,2,c
 12299  003988  D7E2               	goto	l1146
 12300  00398A  0A01               	xorlw	1	; case 5
 12301  00398C  B4D8               	btfsc	status,2,c
 12302  00398E  D7E1               	goto	l1147
 12303  003990                     l1149:
 12304  003990  B281               	btfsc	3969,1,c	;volatile
 12305  003992  D7FE               	goto	l1149
 12306                           
 12307                           ;Test.c: 385: __nop();
 12308  003994  F000               	nop	
 12309                           
 12310                           ;Test.c: 386: __nop();
 12311  003996  F000               	nop	
 12312                           
 12313                           ;Test.c: 387: LATA = 0x00;
 12314  003998  0E00               	movlw	0
 12315  00399A  6E89               	movwf	3977,c	;volatile
 12316                           
 12317                           ;Test.c: 388: LATE = 0x00;
 12318  00399C  0E00               	movlw	0
 12319  00399E  6E8D               	movwf	3981,c	;volatile
 12320                           
 12321                           ;Test.c: 389: LATD = 0x00; }
 12322  0039A0  0E00               	movlw	0
 12323  0039A2  6E8C               	movwf	3980,c	;volatile
 12324  0039A4  D7BE               	goto	l1137
 12325  0039A6                     __end_of_PortTests:
 12326                           	opt stack 0
 12327                           tblptru	equ	0xFF8
 12328                           tblptrh	equ	0xFF7
 12329                           tblptrl	equ	0xFF6
 12330                           tablat	equ	0xFF5
 12331                           prodh	equ	0xFF4
 12332                           prodl	equ	0xFF3
 12333                           intcon	equ	0xFF2
 12334                           intcon2	equ	0xFF1
 12335                           intcon3	equ	0xFF0
 12336                           postinc0	equ	0xFEE
 12337                           wreg	equ	0xFE8
 12338                           postdec1	equ	0xFE5
 12339                           fsr1l	equ	0xFE1
 12340                           indf2	equ	0xFDF
 12341                           postinc2	equ	0xFDE
 12342                           postdec2	equ	0xFDD
 12343                           fsr2h	equ	0xFDA
 12344                           fsr2l	equ	0xFD9
 12345                           status	equ	0xFD8
 12346                           
 12347 ;; *************** function _PortTestA5 *****************
 12348 ;; Defined at:
 12349 ;;		line 392 in file "Test.c"
 12350 ;; Parameters:    Size  Location     Type
 12351 ;;		None
 12352 ;; Auto vars:     Size  Location     Type
 12353 ;;		None
 12354 ;; Return value:  Size  Location     Type
 12355 ;;                  1    wreg      void 
 12356 ;; Registers used:
 12357 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12358 ;; Tracked objects:
 12359 ;;		On entry : 0/0
 12360 ;;		On exit  : 0/0
 12361 ;;		Unchanged: 0/0
 12362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12364 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12365 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12366 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12367 ;;Total ram usage:        1 bytes
 12368 ;; Hardware stack levels used:    1
 12369 ;; Hardware stack levels required when called:   10
 12370 ;; This function calls:
 12371 ;;		_lcdInst
 12372 ;;		_printf
 12373 ;; This function is called by:
 12374 ;;		_Test
 12375 ;; This function uses a non-reentrant model
 12376 ;;
 12377                           
 12378                           	psect	text44
 12379  003CF4                     __ptext44:
 12380                           	opt stack 0
 12381  003CF4                     _PortTestA5:
 12382                           	opt stack 19
 12383                           
 12384                           ;Test.c: 393: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12385                           
 12386                           ;incstack = 0
 12387  003CF4  0E01               	movlw	1
 12388  003CF6  ECB5  F022         	call	_lcdInst
 12389  003CFA  0E68               	movlw	104
 12390  003CFC  0100               	movlb	0	; () banked
 12391  003CFE  6FAB               	movwf	??_PortTestA5& (0+255),b
 12392  003D00  0EE4               	movlw	228
 12393  003D02                     u7747:
 12394  003D02  2EE8               	decfsz	wreg,f,c
 12395  003D04  D7FE               	bra	u7747
 12396  003D06  2FAB               	decfsz	??_PortTestA5& (0+255),f,b
 12397  003D08  D7FC               	bra	u7747
 12398  003D0A  F000               	nop	
 12399  003D0C  0E80               	movlw	128
 12400  003D0E  ECB5  F022         	call	_lcdInst
 12401                           
 12402                           ;Test.c: 394: printf("D WILL RETURN    ");
 12403  003D12  0E95               	movlw	low STR_106
 12404  003D14  0100               	movlb	0	; () banked
 12405  003D16  6F8E               	movwf	printf@f& (0+255),b
 12406  003D18  0EFB               	movlw	high STR_106
 12407  003D1A  0100               	movlb	0	; () banked
 12408  003D1C  6F8F               	movwf	(printf@f+1)& (0+255),b
 12409  003D1E  EC9C  F008         	call	_printf	;wreg free
 12410                           
 12411                           ;Test.c: 395: lcdInst(0b11000000);;
 12412  003D22  0EC0               	movlw	192
 12413  003D24  ECB5  F022         	call	_lcdInst
 12414                           
 12415                           ;Test.c: 396: printf("OTHER SETS RA5   ");
 12416  003D28  0EA7               	movlw	low STR_107
 12417  003D2A  0100               	movlb	0	; () banked
 12418  003D2C  6F8E               	movwf	printf@f& (0+255),b
 12419  003D2E  0EFB               	movlw	high STR_107
 12420  003D30  0100               	movlb	0	; () banked
 12421  003D32  6F8F               	movwf	(printf@f+1)& (0+255),b
 12422  003D34  EC9C  F008         	call	_printf	;wreg free
 12423  003D38                     l1158:
 12424  003D38  A281               	btfss	3969,1,c	;volatile
 12425  003D3A  D7FE               	goto	l1158
 12426                           
 12427                           ;Test.c: 401: }
 12428                           ;Test.c: 402: if(PORTB >> 4 == 0b1111){
 12429  003D3C  3881               	swapf	3969,w,c	;volatile
 12430  003D3E  0B0F               	andlw	15
 12431  003D40  0A0F               	xorlw	15
 12432  003D42  B4D8               	btfsc	status,2,c
 12433  003D44  0012               	return	
 12434                           
 12435                           ;Test.c: 405: else{
 12436                           ;Test.c: 406: LATAbits.LATA5 = 1;
 12437                           
 12438                           ;Test.c: 404: }
 12439                           
 12440                           ;Test.c: 403: break;
 12441  003D46  8A89               	bsf	3977,5,c	;volatile
 12442  003D48                     l1164:
 12443  003D48  B281               	btfsc	3969,1,c	;volatile
 12444  003D4A  D7FE               	goto	l1164
 12445                           
 12446                           ;Test.c: 409: }
 12447                           ;Test.c: 421: LATAbits.LATA5 = 0;
 12448  003D4C  9A89               	bcf	3977,5,c	;volatile
 12449  003D4E  D7F4               	goto	l1158
 12450  003D50                     __end_of_PortTestA5:
 12451                           	opt stack 0
 12452                           tblptru	equ	0xFF8
 12453                           tblptrh	equ	0xFF7
 12454                           tblptrl	equ	0xFF6
 12455                           tablat	equ	0xFF5
 12456                           prodh	equ	0xFF4
 12457                           prodl	equ	0xFF3
 12458                           intcon	equ	0xFF2
 12459                           intcon2	equ	0xFF1
 12460                           intcon3	equ	0xFF0
 12461                           postinc0	equ	0xFEE
 12462                           wreg	equ	0xFE8
 12463                           postdec1	equ	0xFE5
 12464                           fsr1l	equ	0xFE1
 12465                           indf2	equ	0xFDF
 12466                           postinc2	equ	0xFDE
 12467                           postdec2	equ	0xFDD
 12468                           fsr2h	equ	0xFDA
 12469                           fsr2l	equ	0xFD9
 12470                           status	equ	0xFD8
 12471                           
 12472 ;; *************** function _EEPROMTest *****************
 12473 ;; Defined at:
 12474 ;;		line 478 in file "Test.c"
 12475 ;; Parameters:    Size  Location     Type
 12476 ;;		None
 12477 ;; Auto vars:     Size  Location     Type
 12478 ;;		None
 12479 ;; Return value:  Size  Location     Type
 12480 ;;                  1    wreg      void 
 12481 ;; Registers used:
 12482 ;;		None
 12483 ;; Tracked objects:
 12484 ;;		On entry : 0/0
 12485 ;;		On exit  : 0/0
 12486 ;;		Unchanged: 0/0
 12487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12491 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12492 ;;Total ram usage:        0 bytes
 12493 ;; Hardware stack levels used:    1
 12494 ;; Hardware stack levels required when called:    7
 12495 ;; This function calls:
 12496 ;;		Nothing
 12497 ;; This function is called by:
 12498 ;;		_Test
 12499 ;; This function uses a non-reentrant model
 12500 ;;
 12501                           
 12502                           	psect	text45
 12503  0045CE                     __ptext45:
 12504                           	opt stack 0
 12505  0045CE                     _EEPROMTest:
 12506                           	opt stack 22
 12507                           
 12508                           ;incstack = 0
 12509  0045CE  0012               	return		;funcret
 12510  0045D0                     __end_of_EEPROMTest:
 12511                           	opt stack 0
 12512                           tblptru	equ	0xFF8
 12513                           tblptrh	equ	0xFF7
 12514                           tblptrl	equ	0xFF6
 12515                           tablat	equ	0xFF5
 12516                           prodh	equ	0xFF4
 12517                           prodl	equ	0xFF3
 12518                           intcon	equ	0xFF2
 12519                           intcon2	equ	0xFF1
 12520                           intcon3	equ	0xFF0
 12521                           postinc0	equ	0xFEE
 12522                           wreg	equ	0xFE8
 12523                           postdec1	equ	0xFE5
 12524                           fsr1l	equ	0xFE1
 12525                           indf2	equ	0xFDF
 12526                           postinc2	equ	0xFDE
 12527                           postdec2	equ	0xFDD
 12528                           fsr2h	equ	0xFDA
 12529                           fsr2l	equ	0xFD9
 12530                           status	equ	0xFD8
 12531                           
 12532 ;; *************** function _BothServos *****************
 12533 ;; Defined at:
 12534 ;;		line 308 in file "Test.c"
 12535 ;; Parameters:    Size  Location     Type
 12536 ;;		None
 12537 ;; Auto vars:     Size  Location     Type
 12538 ;;		None
 12539 ;; Return value:  Size  Location     Type
 12540 ;;                  1    wreg      void 
 12541 ;; Registers used:
 12542 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12543 ;; Tracked objects:
 12544 ;;		On entry : 0/0
 12545 ;;		On exit  : 0/0
 12546 ;;		Unchanged: 0/0
 12547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12550 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12551 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12552 ;;Total ram usage:        2 bytes
 12553 ;; Hardware stack levels used:    1
 12554 ;; Hardware stack levels required when called:   10
 12555 ;; This function calls:
 12556 ;;		_initServos
 12557 ;;		_lcdInst
 12558 ;;		_printf
 12559 ;;		_updateServoPosition
 12560 ;; This function is called by:
 12561 ;;		_Test
 12562 ;; This function uses a non-reentrant model
 12563 ;;
 12564                           
 12565                           	psect	text46
 12566  0018DE                     __ptext46:
 12567                           	opt stack 0
 12568  0018DE                     _BothServos:
 12569                           	opt stack 19
 12570                           
 12571                           ;Test.c: 309: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12572                           
 12573                           ;incstack = 0
 12574  0018DE  0E01               	movlw	1
 12575  0018E0  ECB5  F022         	call	_lcdInst
 12576  0018E4  0E68               	movlw	104
 12577  0018E6  0100               	movlb	0	; () banked
 12578  0018E8  6FAB               	movwf	??_BothServos& (0+255),b
 12579  0018EA  0EE4               	movlw	228
 12580  0018EC                     u7757:
 12581  0018EC  2EE8               	decfsz	wreg,f,c
 12582  0018EE  D7FE               	bra	u7757
 12583  0018F0  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12584  0018F2  D7FC               	bra	u7757
 12585  0018F4  F000               	nop	
 12586  0018F6  0E80               	movlw	128
 12587  0018F8  ECB5  F022         	call	_lcdInst
 12588                           
 12589                           ;Test.c: 310: printf("TST: BOTH SERVOS");
 12590  0018FC  0EDC               	movlw	low STR_105
 12591  0018FE  0100               	movlb	0	; () banked
 12592  001900  6F8E               	movwf	printf@f& (0+255),b
 12593  001902  0EFC               	movlw	high STR_105
 12594  001904  0100               	movlb	0	; () banked
 12595  001906  6F8F               	movwf	(printf@f+1)& (0+255),b
 12596  001908  EC9C  F008         	call	_printf	;wreg free
 12597                           
 12598                           ;Test.c: 311: TMR1ON = 1;
 12599  00190C  80CD               	bsf	4045,0,c	;volatile
 12600                           
 12601                           ;Test.c: 312: TMR3ON = 1;
 12602  00190E  80B1               	bsf	4017,0,c	;volatile
 12603                           
 12604                           ;Test.c: 313: machine_state = Sorting_state;
 12605  001910  0E01               	movlw	1
 12606  001912  0100               	movlb	0	; () banked
 12607  001914  6FFC               	movwf	_machine_state& (0+255),b
 12608                           
 12609                           ; BSR set to: 0
 12610                           ;Test.c: 314: was_low_1 = 0;
 12611  001916  0E00               	movlw	0
 12612  001918  6E7A               	movwf	_was_low_1+1,c	;volatile
 12613  00191A  0E00               	movlw	0
 12614  00191C  6E79               	movwf	_was_low_1,c	;volatile
 12615                           
 12616                           ; BSR set to: 0
 12617                           ;Test.c: 315: was_low_1 = 0;
 12618  00191E  0E00               	movlw	0
 12619  001920  6E7A               	movwf	_was_low_1+1,c	;volatile
 12620  001922  0E00               	movlw	0
 12621  001924  6E79               	movwf	_was_low_1,c	;volatile
 12622                           
 12623                           ; BSR set to: 0
 12624                           ;Test.c: 321: initServos();
 12625  001926  ECA8  F01E         	call	_initServos	;wreg free
 12626                           
 12627                           ;Test.c: 322: _delay((unsigned long)((1500)*(32000000/4000.0)));
 12628  00192A  0E3D               	movlw	61
 12629  00192C  0100               	movlb	0	; () banked
 12630  00192E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12631  001930  0EE1               	movlw	225
 12632  001932  0100               	movlb	0	; () banked
 12633  001934  6FAB               	movwf	??_BothServos& (0+255),b
 12634  001936  0E3F               	movlw	63
 12635  001938                     u7767:
 12636  001938  2EE8               	decfsz	wreg,f,c
 12637  00193A  D7FE               	bra	u7767
 12638  00193C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12639  00193E  D7FC               	bra	u7767
 12640  001940  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12641  001942  D7FA               	bra	u7767
 12642  001944  D000               	nop2	
 12643                           
 12644                           ;Test.c: 323: updateServoPosition(500, 1);
 12645  001946  0E01               	movlw	1
 12646  001948  0100               	movlb	0	; () banked
 12647  00194A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12648  00194C  0EF4               	movlw	244
 12649  00194E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12650  001950  0E00               	movlw	0
 12651  001952  0100               	movlb	0	; () banked
 12652  001954  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12653  001956  0E01               	movlw	1
 12654  001958  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12655  00195A  EC0F  F01D         	call	_updateServoPosition	;wreg free
 12656                           
 12657                           ;Test.c: 324: updateServoPosition(1350, 3);
 12658  00195E  0E05               	movlw	5
 12659  001960  0100               	movlb	0	; () banked
 12660  001962  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12661  001964  0E46               	movlw	70
 12662  001966  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12663  001968  0E00               	movlw	0
 12664  00196A  0100               	movlb	0	; () banked
 12665  00196C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12666  00196E  0E03               	movlw	3
 12667  001970  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12668  001972  EC0F  F01D         	call	_updateServoPosition	;wreg free
 12669                           
 12670                           ;Test.c: 325: _delay((unsigned long)((750)*(32000000/4000.0)));
 12671  001976  0E1F               	movlw	31
 12672  001978  0100               	movlb	0	; () banked
 12673  00197A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12674  00197C  0E71               	movlw	113
 12675  00197E  0100               	movlb	0	; () banked
 12676  001980  6FAB               	movwf	??_BothServos& (0+255),b
 12677  001982  0E1E               	movlw	30
 12678  001984                     u7777:
 12679  001984  2EE8               	decfsz	wreg,f,c
 12680  001986  D7FE               	bra	u7777
 12681  001988  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12682  00198A  D7FC               	bra	u7777
 12683  00198C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12684  00198E  D7FA               	bra	u7777
 12685  001990  F000               	nop	
 12686                           
 12687                           ;Test.c: 326: updateServoPosition(1150, 3);
 12688  001992  0E04               	movlw	4
 12689  001994  0100               	movlb	0	; () banked
 12690  001996  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12691  001998  0E7E               	movlw	126
 12692  00199A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12693  00199C  0E00               	movlw	0
 12694  00199E  0100               	movlb	0	; () banked
 12695  0019A0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12696  0019A2  0E03               	movlw	3
 12697  0019A4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12698  0019A6  EC0F  F01D         	call	_updateServoPosition	;wreg free
 12699                           
 12700                           ;Test.c: 327: _delay((unsigned long)((750)*(32000000/4000.0)));
 12701  0019AA  0E1F               	movlw	31
 12702  0019AC  0100               	movlb	0	; () banked
 12703  0019AE  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12704  0019B0  0E71               	movlw	113
 12705  0019B2  0100               	movlb	0	; () banked
 12706  0019B4  6FAB               	movwf	??_BothServos& (0+255),b
 12707  0019B6  0E1E               	movlw	30
 12708  0019B8                     u7787:
 12709  0019B8  2EE8               	decfsz	wreg,f,c
 12710  0019BA  D7FE               	bra	u7787
 12711  0019BC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12712  0019BE  D7FC               	bra	u7787
 12713  0019C0  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12714  0019C2  D7FA               	bra	u7787
 12715  0019C4  F000               	nop	
 12716                           
 12717                           ;Test.c: 329: updateServoPosition(700, 1);
 12718  0019C6  0E02               	movlw	2
 12719  0019C8  0100               	movlb	0	; () banked
 12720  0019CA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12721  0019CC  0EBC               	movlw	188
 12722  0019CE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12723  0019D0  0E00               	movlw	0
 12724  0019D2  0100               	movlb	0	; () banked
 12725  0019D4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12726  0019D6  0E01               	movlw	1
 12727  0019D8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12728  0019DA  EC0F  F01D         	call	_updateServoPosition	;wreg free
 12729                           
 12730                           ;Test.c: 330: updateServoPosition(1350, 3);
 12731  0019DE  0E05               	movlw	5
 12732  0019E0  0100               	movlb	0	; () banked
 12733  0019E2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12734  0019E4  0E46               	movlw	70
 12735  0019E6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12736  0019E8  0E00               	movlw	0
 12737  0019EA  0100               	movlb	0	; () banked
 12738  0019EC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12739  0019EE  0E03               	movlw	3
 12740  0019F0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12741  0019F2  EC0F  F01D         	call	_updateServoPosition	;wreg free
 12742                           
 12743                           ;Test.c: 331: _delay((unsigned long)((750)*(32000000/4000.0)));
 12744  0019F6  0E1F               	movlw	31
 12745  0019F8  0100               	movlb	0	; () banked
 12746  0019FA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12747  0019FC  0E71               	movlw	113
 12748  0019FE  0100               	movlb	0	; () banked
 12749  001A00  6FAB               	movwf	??_BothServos& (0+255),b
 12750  001A02  0E1E               	movlw	30
 12751  001A04                     u7797:
 12752  001A04  2EE8               	decfsz	wreg,f,c
 12753  001A06  D7FE               	bra	u7797
 12754  001A08  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12755  001A0A  D7FC               	bra	u7797
 12756  001A0C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12757  001A0E  D7FA               	bra	u7797
 12758  001A10  F000               	nop	
 12759                           
 12760                           ;Test.c: 332: updateServoPosition(1150, 3);
 12761  001A12  0E04               	movlw	4
 12762  001A14  0100               	movlb	0	; () banked
 12763  001A16  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12764  001A18  0E7E               	movlw	126
 12765  001A1A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12766  001A1C  0E00               	movlw	0
 12767  001A1E  0100               	movlb	0	; () banked
 12768  001A20  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12769  001A22  0E03               	movlw	3
 12770  001A24  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12771  001A26  EC0F  F01D         	call	_updateServoPosition	;wreg free
 12772                           
 12773                           ;Test.c: 333: _delay((unsigned long)((750)*(32000000/4000.0)));
 12774  001A2A  0E1F               	movlw	31
 12775  001A2C  0100               	movlb	0	; () banked
 12776  001A2E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12777  001A30  0E71               	movlw	113
 12778  001A32  0100               	movlb	0	; () banked
 12779  001A34  6FAB               	movwf	??_BothServos& (0+255),b
 12780  001A36  0E1E               	movlw	30
 12781  001A38                     u7807:
 12782  001A38  2EE8               	decfsz	wreg,f,c
 12783  001A3A  D7FE               	bra	u7807
 12784  001A3C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12785  001A3E  D7FC               	bra	u7807
 12786  001A40  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12787  001A42  D7FA               	bra	u7807
 12788  001A44  F000               	nop	
 12789                           
 12790                           ;Test.c: 335: updateServoPosition(1250, 1);
 12791  001A46  0E04               	movlw	4
 12792  001A48  0100               	movlb	0	; () banked
 12793  001A4A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12794  001A4C  0EE2               	movlw	226
 12795  001A4E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12796  001A50  0E00               	movlw	0
 12797  001A52  0100               	movlb	0	; () banked
 12798  001A54  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12799  001A56  0E01               	movlw	1
 12800  001A58  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12801  001A5A  EC0F  F01D         	call	_updateServoPosition	;wreg free
 12802                           
 12803                           ;Test.c: 336: updateServoPosition(1350, 3);
 12804  001A5E  0E05               	movlw	5
 12805  001A60  0100               	movlb	0	; () banked
 12806  001A62  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12807  001A64  0E46               	movlw	70
 12808  001A66  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12809  001A68  0E00               	movlw	0
 12810  001A6A  0100               	movlb	0	; () banked
 12811  001A6C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12812  001A6E  0E03               	movlw	3
 12813  001A70  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12814  001A72  EC0F  F01D         	call	_updateServoPosition	;wreg free
 12815                           
 12816                           ;Test.c: 337: _delay((unsigned long)((750)*(32000000/4000.0)));
 12817  001A76  0E1F               	movlw	31
 12818  001A78  0100               	movlb	0	; () banked
 12819  001A7A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12820  001A7C  0E71               	movlw	113
 12821  001A7E  0100               	movlb	0	; () banked
 12822  001A80  6FAB               	movwf	??_BothServos& (0+255),b
 12823  001A82  0E1E               	movlw	30
 12824  001A84                     u7817:
 12825  001A84  2EE8               	decfsz	wreg,f,c
 12826  001A86  D7FE               	bra	u7817
 12827  001A88  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12828  001A8A  D7FC               	bra	u7817
 12829  001A8C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12830  001A8E  D7FA               	bra	u7817
 12831  001A90  F000               	nop	
 12832                           
 12833                           ;Test.c: 338: updateServoPosition(1150, 3);
 12834  001A92  0E04               	movlw	4
 12835  001A94  0100               	movlb	0	; () banked
 12836  001A96  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12837  001A98  0E7E               	movlw	126
 12838  001A9A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12839  001A9C  0E00               	movlw	0
 12840  001A9E  0100               	movlb	0	; () banked
 12841  001AA0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12842  001AA2  0E03               	movlw	3
 12843  001AA4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12844  001AA6  EC0F  F01D         	call	_updateServoPosition	;wreg free
 12845                           
 12846                           ;Test.c: 339: _delay((unsigned long)((750)*(32000000/4000.0)));
 12847  001AAA  0E1F               	movlw	31
 12848  001AAC  0100               	movlb	0	; () banked
 12849  001AAE  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12850  001AB0  0E71               	movlw	113
 12851  001AB2  0100               	movlb	0	; () banked
 12852  001AB4  6FAB               	movwf	??_BothServos& (0+255),b
 12853  001AB6  0E1E               	movlw	30
 12854  001AB8                     u7827:
 12855  001AB8  2EE8               	decfsz	wreg,f,c
 12856  001ABA  D7FE               	bra	u7827
 12857  001ABC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12858  001ABE  D7FC               	bra	u7827
 12859  001AC0  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12860  001AC2  D7FA               	bra	u7827
 12861  001AC4  F000               	nop	
 12862                           
 12863                           ;Test.c: 341: updateServoPosition(1650, 1);
 12864  001AC6  0E06               	movlw	6
 12865  001AC8  0100               	movlb	0	; () banked
 12866  001ACA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12867  001ACC  0E72               	movlw	114
 12868  001ACE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12869  001AD0  0E00               	movlw	0
 12870  001AD2  0100               	movlb	0	; () banked
 12871  001AD4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12872  001AD6  0E01               	movlw	1
 12873  001AD8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12874  001ADA  EC0F  F01D         	call	_updateServoPosition	;wreg free
 12875                           
 12876                           ;Test.c: 342: updateServoPosition(1350, 3);
 12877  001ADE  0E05               	movlw	5
 12878  001AE0  0100               	movlb	0	; () banked
 12879  001AE2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12880  001AE4  0E46               	movlw	70
 12881  001AE6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12882  001AE8  0E00               	movlw	0
 12883  001AEA  0100               	movlb	0	; () banked
 12884  001AEC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12885  001AEE  0E03               	movlw	3
 12886  001AF0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12887  001AF2  EC0F  F01D         	call	_updateServoPosition	;wreg free
 12888                           
 12889                           ;Test.c: 343: _delay((unsigned long)((750)*(32000000/4000.0)));
 12890  001AF6  0E1F               	movlw	31
 12891  001AF8  0100               	movlb	0	; () banked
 12892  001AFA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12893  001AFC  0E71               	movlw	113
 12894  001AFE  0100               	movlb	0	; () banked
 12895  001B00  6FAB               	movwf	??_BothServos& (0+255),b
 12896  001B02  0E1E               	movlw	30
 12897  001B04                     u7837:
 12898  001B04  2EE8               	decfsz	wreg,f,c
 12899  001B06  D7FE               	bra	u7837
 12900  001B08  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12901  001B0A  D7FC               	bra	u7837
 12902  001B0C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12903  001B0E  D7FA               	bra	u7837
 12904  001B10  F000               	nop	
 12905                           
 12906                           ;Test.c: 344: updateServoPosition(1150, 3);
 12907  001B12  0E04               	movlw	4
 12908  001B14  0100               	movlb	0	; () banked
 12909  001B16  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12910  001B18  0E7E               	movlw	126
 12911  001B1A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12912  001B1C  0E00               	movlw	0
 12913  001B1E  0100               	movlb	0	; () banked
 12914  001B20  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12915  001B22  0E03               	movlw	3
 12916  001B24  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12917  001B26  EC0F  F01D         	call	_updateServoPosition	;wreg free
 12918                           
 12919                           ;Test.c: 345: _delay((unsigned long)((750)*(32000000/4000.0)));
 12920  001B2A  0E1F               	movlw	31
 12921  001B2C  0100               	movlb	0	; () banked
 12922  001B2E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12923  001B30  0E71               	movlw	113
 12924  001B32  0100               	movlb	0	; () banked
 12925  001B34  6FAB               	movwf	??_BothServos& (0+255),b
 12926  001B36  0E1E               	movlw	30
 12927  001B38                     u7847:
 12928  001B38  2EE8               	decfsz	wreg,f,c
 12929  001B3A  D7FE               	bra	u7847
 12930  001B3C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12931  001B3E  D7FC               	bra	u7847
 12932  001B40  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12933  001B42  D7FA               	bra	u7847
 12934  001B44  F000               	nop	
 12935                           
 12936                           ;Test.c: 347: updateServoPosition(2000, 1);
 12937  001B46  0E07               	movlw	7
 12938  001B48  0100               	movlb	0	; () banked
 12939  001B4A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12940  001B4C  0ED0               	movlw	208
 12941  001B4E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12942  001B50  0E00               	movlw	0
 12943  001B52  0100               	movlb	0	; () banked
 12944  001B54  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12945  001B56  0E01               	movlw	1
 12946  001B58  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12947  001B5A  EC0F  F01D         	call	_updateServoPosition	;wreg free
 12948                           
 12949                           ;Test.c: 348: updateServoPosition(1350, 3);
 12950  001B5E  0E05               	movlw	5
 12951  001B60  0100               	movlb	0	; () banked
 12952  001B62  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12953  001B64  0E46               	movlw	70
 12954  001B66  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12955  001B68  0E00               	movlw	0
 12956  001B6A  0100               	movlb	0	; () banked
 12957  001B6C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12958  001B6E  0E03               	movlw	3
 12959  001B70  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12960  001B72  EC0F  F01D         	call	_updateServoPosition	;wreg free
 12961                           
 12962                           ;Test.c: 349: _delay((unsigned long)((750)*(32000000/4000.0)));
 12963  001B76  0E1F               	movlw	31
 12964  001B78  0100               	movlb	0	; () banked
 12965  001B7A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12966  001B7C  0E71               	movlw	113
 12967  001B7E  0100               	movlb	0	; () banked
 12968  001B80  6FAB               	movwf	??_BothServos& (0+255),b
 12969  001B82  0E1E               	movlw	30
 12970  001B84                     u7857:
 12971  001B84  2EE8               	decfsz	wreg,f,c
 12972  001B86  D7FE               	bra	u7857
 12973  001B88  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12974  001B8A  D7FC               	bra	u7857
 12975  001B8C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12976  001B8E  D7FA               	bra	u7857
 12977  001B90  F000               	nop	
 12978                           
 12979                           ;Test.c: 350: updateServoPosition(1150, 3);
 12980  001B92  0E04               	movlw	4
 12981  001B94  0100               	movlb	0	; () banked
 12982  001B96  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12983  001B98  0E7E               	movlw	126
 12984  001B9A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12985  001B9C  0E00               	movlw	0
 12986  001B9E  0100               	movlb	0	; () banked
 12987  001BA0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12988  001BA2  0E03               	movlw	3
 12989  001BA4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12990  001BA6  EC0F  F01D         	call	_updateServoPosition	;wreg free
 12991                           
 12992                           ;Test.c: 351: _delay((unsigned long)((750)*(32000000/4000.0)));
 12993  001BAA  0E1F               	movlw	31
 12994  001BAC  0100               	movlb	0	; () banked
 12995  001BAE  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12996  001BB0  0E71               	movlw	113
 12997  001BB2  0100               	movlb	0	; () banked
 12998  001BB4  6FAB               	movwf	??_BothServos& (0+255),b
 12999  001BB6  0E1E               	movlw	30
 13000  001BB8                     u7867:
 13001  001BB8  2EE8               	decfsz	wreg,f,c
 13002  001BBA  D7FE               	bra	u7867
 13003  001BBC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13004  001BBE  D7FC               	bra	u7867
 13005  001BC0  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13006  001BC2  D7FA               	bra	u7867
 13007  001BC4  F000               	nop	
 13008                           
 13009                           ;Test.c: 353: TMR1ON = 0;
 13010  001BC6  90CD               	bcf	4045,0,c	;volatile
 13011                           
 13012                           ;Test.c: 354: TMR3ON = 0;
 13013  001BC8  90B1               	bcf	4017,0,c	;volatile
 13014                           
 13015                           ;Test.c: 355: (INTCONbits.GIE = 0);
 13016  001BCA  9EF2               	bcf	intcon,7,c	;volatile
 13017  001BCC  0012               	return		;funcret
 13018  001BCE                     __end_of_BothServos:
 13019                           	opt stack 0
 13020                           tblptru	equ	0xFF8
 13021                           tblptrh	equ	0xFF7
 13022                           tblptrl	equ	0xFF6
 13023                           tablat	equ	0xFF5
 13024                           prodh	equ	0xFF4
 13025                           prodl	equ	0xFF3
 13026                           intcon	equ	0xFF2
 13027                           intcon2	equ	0xFF1
 13028                           intcon3	equ	0xFF0
 13029                           postinc0	equ	0xFEE
 13030                           wreg	equ	0xFE8
 13031                           postdec1	equ	0xFE5
 13032                           fsr1l	equ	0xFE1
 13033                           indf2	equ	0xFDF
 13034                           postinc2	equ	0xFDE
 13035                           postdec2	equ	0xFDD
 13036                           fsr2h	equ	0xFDA
 13037                           fsr2l	equ	0xFD9
 13038                           status	equ	0xFD8
 13039                           
 13040 ;; *************** function _printf *****************
 13041 ;; Defined at:
 13042 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 13043 ;; Parameters:    Size  Location     Type
 13044 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 13045 ;;		 -> STR_111(17), STR_110(17), STR_109(10), STR_108(13), 
 13046 ;;		 -> STR_107(18), STR_106(18), STR_105(17), STR_104(15), 
 13047 ;;		 -> STR_103(15), STR_102(15), STR_101(17), STR_100(17), 
 13048 ;;		 -> STR_99(17), STR_98(16), STR_97(17), STR_96(17), 
 13049 ;;		 -> STR_95(17), STR_94(17), STR_93(17), STR_92(17), 
 13050 ;;		 -> STR_91(15), STR_90(11), STR_89(17), STR_88(11), 
 13051 ;;		 -> STR_87(17), STR_86(14), STR_85(15), STR_84(14), 
 13052 ;;		 -> STR_83(10), STR_82(16), STR_81(15), STR_80(15), 
 13053 ;;		 -> STR_79(13), STR_78(14), STR_77(8), STR_76(14), 
 13054 ;;		 -> STR_75(15), STR_74(12), STR_73(14), STR_72(17), 
 13055 ;;		 -> STR_71(14), STR_70(15), STR_69(17), STR_68(17), 
 13056 ;;		 -> STR_67(7), STR_66(21), STR_65(13), STR_64(11), 
 13057 ;;		 -> STR_63(24), STR_50(17), STR_49(17), STR_48(17), 
 13058 ;;		 -> STR_47(17), STR_46(17), STR_45(17), STR_44(17), 
 13059 ;;		 -> STR_43(17), STR_42(17), STR_41(17), STR_40(17), 
 13060 ;;		 -> STR_39(17), STR_38(17), STR_37(17), STR_36(17), 
 13061 ;;		 -> STR_35(17), STR_34(17), STR_33(17), STR_32(17), 
 13062 ;;		 -> STR_31(17), STR_30(17), STR_29(3), STR_28(17), 
 13063 ;;		 -> STR_27(19), STR_26(17), STR_25(19), STR_24(17), 
 13064 ;;		 -> STR_23(14), STR_22(10), STR_21(24), STR_7(7), 
 13065 ;;		 -> STR_6(17), STR_5(18), STR_4(16), STR_3(18), 
 13066 ;;		 -> STR_2(14), STR_1(18), 
 13067 ;; Auto vars:     Size  Location     Type
 13068 ;;  tmpval          4    0        struct .
 13069 ;;  width           2   41[BANK0 ] int 
 13070 ;;  val             2   37[BANK0 ] unsigned int 
 13071 ;;  len             2   35[BANK0 ] unsigned int 
 13072 ;;  ap              2   33[BANK0 ] PTR void [1]
 13073 ;;		 -> ?i2_printf(2), ?_printf(2), 
 13074 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 13075 ;;		 -> STR_112(7), count_total(2), printRTC@month(4), UI@month(4), 
 13076 ;;  c               1   40[BANK0 ] char 
 13077 ;;  flag            1   39[BANK0 ] unsigned char 
 13078 ;;  prec            1   30[BANK0 ] char 
 13079 ;; Return value:  Size  Location     Type
 13080 ;;                  2   14[BANK0 ] int 
 13081 ;; Registers used:
 13082 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13083 ;; Tracked objects:
 13084 ;;		On entry : 0/0
 13085 ;;		On exit  : 0/0
 13086 ;;		Unchanged: 0/0
 13087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13088 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13089 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13090 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13091 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13092 ;;Total ram usage:       29 bytes
 13093 ;; Hardware stack levels used:    1
 13094 ;; Hardware stack levels required when called:    9
 13095 ;; This function calls:
 13096 ;;		___lwdiv
 13097 ;;		___lwmod
 13098 ;;		___wmul
 13099 ;;		_isdigit
 13100 ;;		_putch
 13101 ;; This function is called by:
 13102 ;;		_UI
 13103 ;;		_change_state_to_menu_start
 13104 ;;		_change_state_to_menu_12
 13105 ;;		_change_state_to_menu_22
 13106 ;;		_printRTC
 13107 ;;		_EEPROM_write
 13108 ;;		_Test
 13109 ;;		_algorithmTest
 13110 ;;		_sensorTest
 13111 ;;		_actuatorTest
 13112 ;;		_BothServos
 13113 ;;		_PortTestA5
 13114 ;;		_SolenoidTestA5
 13115 ;;		_ToggleTestA5
 13116 ;; This function uses a non-reentrant model
 13117 ;;
 13118                           
 13119                           	psect	text47
 13120  001138                     __ptext47:
 13121                           	opt stack 0
 13122  001138                     _printf:
 13123                           	opt stack 18
 13124                           
 13125                           ;doprnt.c: 466: va_list ap;
 13126                           ;doprnt.c: 499: signed char c;
 13127                           ;doprnt.c: 501: int width;
 13128                           ;doprnt.c: 506: signed char prec;
 13129                           ;doprnt.c: 508: unsigned char flag;
 13130                           ;doprnt.c: 523: union {
 13131                           ;doprnt.c: 524: unsigned long vd;
 13132                           ;doprnt.c: 525: double integ;
 13133                           ;doprnt.c: 526: } tmpval;
 13134                           ;doprnt.c: 528: unsigned int val;
 13135                           ;doprnt.c: 529: unsigned len;
 13136                           ;doprnt.c: 530: const char * cp;
 13137                           ;doprnt.c: 533: *ap = __va_start();
 13138                           
 13139                           ;incstack = 0
 13140  001138  0E90               	movlw	low (?_printf+2)
 13141  00113A  0100               	movlb	0	; () banked
 13142  00113C  6FA1               	movwf	printf@ap& (0+255),b
 13143  00113E  0E00               	movlw	high (?_printf+2)
 13144  001140  0100               	movlb	0	; () banked
 13145  001142  6FA2               	movwf	(printf@ap+1)& (0+255),b
 13146                           
 13147                           ;doprnt.c: 536: while(c = *f++) {
 13148  001144  D205               	goto	l5454
 13149  001146                     l5324:
 13150                           
 13151                           ; BSR set to: 0
 13152                           ;doprnt.c: 538: if(c != '%')
 13153  001146  0E25               	movlw	37
 13154  001148  0100               	movlb	0	; () banked
 13155  00114A  19A8               	xorwf	printf@c& (0+255),w,b
 13156  00114C  B4D8               	btfsc	status,2,c
 13157  00114E  D005               	goto	l5328
 13158                           
 13159                           ; BSR set to: 0
 13160                           ;doprnt.c: 540: {
 13161                           ;doprnt.c: 541: (putch(c) );
 13162  001150  0100               	movlb	0	; () banked
 13163  001152  51A8               	movf	printf@c& (0+255),w,b
 13164  001154  ECAD  F022         	call	_putch
 13165                           
 13166                           ;doprnt.c: 542: continue;
 13167  001158  D1FB               	goto	l5454
 13168  00115A                     l5328:
 13169                           
 13170                           ;doprnt.c: 543: }
 13171                           ;doprnt.c: 546: width = 0;
 13172  00115A  0E00               	movlw	0
 13173  00115C  0100               	movlb	0	; () banked
 13174  00115E  6FAA               	movwf	(printf@width+1)& (0+255),b
 13175  001160  0E00               	movlw	0
 13176  001162  6FA9               	movwf	printf@width& (0+255),b
 13177                           
 13178                           ;doprnt.c: 548: flag = 0;
 13179  001164  0E00               	movlw	0
 13180  001166  0100               	movlb	0	; () banked
 13181  001168  6FA7               	movwf	printf@flag& (0+255),b
 13182                           
 13183                           ; BSR set to: 0
 13184                           ;doprnt.c: 551: switch(*f) {
 13185                           
 13186                           ;doprnt.c: 550: for(;;) {
 13187  00116A  D005               	goto	l5334
 13188  00116C                     l5330:
 13189                           
 13190                           ;doprnt.c: 580: flag |= 0x04;
 13191  00116C  0100               	movlb	0	; () banked
 13192  00116E  85A7               	bsf	printf@flag& (0+255),2,b
 13193                           
 13194                           ;doprnt.c: 581: f++;
 13195  001170  0100               	movlb	0	; () banked
 13196  001172  4B8E               	infsnz	printf@f& (0+255),f,b
 13197  001174  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13198  001176                     l5334:
 13199  001176  C08E  FFF6         	movff	printf@f,tblptrl
 13200  00117A  C08F  FFF7         	movff	printf@f+1,tblptrh
 13201  00117E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13202  00117E  6AF8               	clrf	tblptru,c
 13203  001180                     	endif
 13204  001180                     	if	0	;tblptru may be non-zero
 13205  001180                     	endif
 13206  001180  0008               	tblrd		*
 13207  001182  50F5               	movf	tablat,w,c
 13208                           
 13209                           ; Switch size 1, requested type "space"
 13210                           ; Number of cases is 1, Range of values is 48 to 48
 13211                           ; switch strategies available:
 13212                           ; Name         Instructions Cycles
 13213                           ; simple_byte            4     3 (average)
 13214                           ;	Chosen strategy is simple_byte
 13215  001184  0A30               	xorlw	48	; case 48
 13216  001186  B4D8               	btfsc	status,2,c
 13217  001188  D7F1               	goto	l5330
 13218                           
 13219                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 13220                           
 13221                           ;doprnt.c: 586: }
 13222                           
 13223                           ;doprnt.c: 585: break;
 13224  00118A  C08E  FFF6         	movff	printf@f,tblptrl
 13225  00118E  C08F  FFF7         	movff	printf@f+1,tblptrh
 13226  001192                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13227  001192  6AF8               	clrf	tblptru,c
 13228  001194                     	endif
 13229  001194                     	if	0	;tblptru may be non-zero
 13230  001194                     	endif
 13231  001194  0008               	tblrd		*
 13232  001196  50F5               	movf	tablat,w,c
 13233  001198  ECC0  F021         	call	_isdigit
 13234  00119C  A0D8               	btfss	status,0,c
 13235  00119E  D0D2               	goto	l5382
 13236                           
 13237                           ;doprnt.c: 598: width = 0;
 13238  0011A0  0E00               	movlw	0
 13239  0011A2  0100               	movlb	0	; () banked
 13240  0011A4  6FAA               	movwf	(printf@width+1)& (0+255),b
 13241  0011A6  0E00               	movlw	0
 13242  0011A8  6FA9               	movwf	printf@width& (0+255),b
 13243  0011AA                     l5340:
 13244                           
 13245                           ;doprnt.c: 600: width *= 10;
 13246  0011AA  C0A9  F080         	movff	printf@width,___wmul@multiplier
 13247  0011AE  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 13248  0011B2  0E00               	movlw	0
 13249  0011B4  0100               	movlb	0	; () banked
 13250  0011B6  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13251  0011B8  0E0A               	movlw	10
 13252  0011BA  6F82               	movwf	___wmul@multiplicand& (0+255),b
 13253  0011BC  EC5A  F020         	call	___wmul	;wreg free
 13254  0011C0  C080  F0A9         	movff	?___wmul,printf@width
 13255  0011C4  C081  F0AA         	movff	?___wmul+1,printf@width+1
 13256                           
 13257                           ;doprnt.c: 601: width += *f++ - '0';
 13258  0011C8  0ED0               	movlw	208
 13259  0011CA  0100               	movlb	0	; () banked
 13260  0011CC  6F9A               	movwf	??_printf& (0+255),b
 13261  0011CE  0EFF               	movlw	255
 13262  0011D0  0100               	movlb	0	; () banked
 13263  0011D2  6F9B               	movwf	(??_printf+1)& (0+255),b
 13264  0011D4  C08E  FFF6         	movff	printf@f,tblptrl
 13265  0011D8  C08F  FFF7         	movff	printf@f+1,tblptrh
 13266  0011DC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13267  0011DC  6AF8               	clrf	tblptru,c
 13268  0011DE                     	endif
 13269  0011DE                     	if	0	;tblptru may be non-zero
 13270  0011DE                     	endif
 13271  0011DE  0008               	tblrd		*
 13272  0011E0  50F5               	movf	tablat,w,c
 13273  0011E2  0100               	movlb	0	; () banked
 13274  0011E4  6F9C               	movwf	(??_printf+2)& (0+255),b
 13275  0011E6  6B9D               	clrf	(??_printf+3)& (0+255),b
 13276  0011E8  0100               	movlb	0	; () banked
 13277  0011EA  519A               	movf	??_printf& (0+255),w,b
 13278  0011EC  0100               	movlb	0	; () banked
 13279  0011EE  279C               	addwf	(??_printf+2)& (0+255),f,b
 13280  0011F0  0100               	movlb	0	; () banked
 13281  0011F2  519B               	movf	(??_printf+1)& (0+255),w,b
 13282  0011F4  0100               	movlb	0	; () banked
 13283  0011F6  239D               	addwfc	(??_printf+3)& (0+255),f,b
 13284  0011F8  0100               	movlb	0	; () banked
 13285  0011FA  519C               	movf	(??_printf+2)& (0+255),w,b
 13286  0011FC  0100               	movlb	0	; () banked
 13287  0011FE  27A9               	addwf	printf@width& (0+255),f,b
 13288  001200  0100               	movlb	0	; () banked
 13289  001202  519D               	movf	(??_printf+3)& (0+255),w,b
 13290  001204  0100               	movlb	0	; () banked
 13291  001206  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 13292                           
 13293                           ; BSR set to: 0
 13294  001208  0100               	movlb	0	; () banked
 13295  00120A  4B8E               	infsnz	printf@f& (0+255),f,b
 13296  00120C  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13297                           
 13298                           ; BSR set to: 0
 13299                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 13300  00120E  C08E  FFF6         	movff	printf@f,tblptrl
 13301  001212  C08F  FFF7         	movff	printf@f+1,tblptrh
 13302  001216                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13303  001216  6AF8               	clrf	tblptru,c
 13304  001218                     	endif
 13305  001218                     	if	0	;tblptru may be non-zero
 13306  001218                     	endif
 13307  001218  0008               	tblrd		*
 13308  00121A  50F5               	movf	tablat,w,c
 13309  00121C  ECC0  F021         	call	_isdigit
 13310  001220  A0D8               	btfss	status,0,c
 13311  001222  D090               	goto	l5382
 13312  001224  D7C2               	goto	l5340
 13313  001226                     l5348:
 13314                           
 13315                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 13316  001226  C0A1  FFD9         	movff	printf@ap,fsr2l
 13317  00122A  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 13318  00122E  CFDE F09F          	movff	postinc2,printf@cp
 13319  001232  CFDD F0A0          	movff	postdec2,printf@cp+1
 13320  001236  0E02               	movlw	2
 13321  001238  0100               	movlb	0	; () banked
 13322  00123A  27A1               	addwf	printf@ap& (0+255),f,b
 13323  00123C  0E00               	movlw	0
 13324  00123E  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 13325                           
 13326                           ; BSR set to: 0
 13327                           ;doprnt.c: 740: if(!cp)
 13328  001240  0100               	movlb	0	; () banked
 13329  001242  519F               	movf	printf@cp& (0+255),w,b
 13330  001244  0100               	movlb	0	; () banked
 13331  001246  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 13332  001248  A4D8               	btfss	status,2,c
 13333  00124A  D006               	goto	l5356
 13334                           
 13335                           ; BSR set to: 0
 13336                           ;doprnt.c: 741: cp = "(null)";
 13337  00124C  0EB5               	movlw	low STR_112
 13338  00124E  0100               	movlb	0	; () banked
 13339  001250  6F9F               	movwf	printf@cp& (0+255),b
 13340  001252  0EFF               	movlw	high STR_112
 13341  001254  0100               	movlb	0	; () banked
 13342  001256  6FA0               	movwf	(printf@cp+1)& (0+255),b
 13343  001258                     l5356:
 13344                           
 13345                           ; BSR set to: 0
 13346                           ;doprnt.c: 745: len = 0;
 13347  001258  0E00               	movlw	0
 13348  00125A  0100               	movlb	0	; () banked
 13349  00125C  6FA4               	movwf	(printf@len+1)& (0+255),b
 13350  00125E  0E00               	movlw	0
 13351  001260  6FA3               	movwf	printf@len& (0+255),b
 13352                           
 13353                           ;doprnt.c: 746: while(cp[len])
 13354  001262  D003               	goto	l5360
 13355  001264                     l5358:
 13356                           
 13357                           ;doprnt.c: 747: len++;
 13358  001264  0100               	movlb	0	; () banked
 13359  001266  4BA3               	infsnz	printf@len& (0+255),f,b
 13360  001268  2BA4               	incf	(printf@len+1)& (0+255),f,b
 13361  00126A                     l5360:
 13362                           
 13363                           ; BSR set to: 0
 13364  00126A  0100               	movlb	0	; () banked
 13365  00126C  51A3               	movf	printf@len& (0+255),w,b
 13366  00126E  0100               	movlb	0	; () banked
 13367  001270  259F               	addwf	printf@cp& (0+255),w,b
 13368  001272  0100               	movlb	0	; () banked
 13369  001274  6F9A               	movwf	??_printf& (0+255),b
 13370  001276  0100               	movlb	0	; () banked
 13371  001278  51A4               	movf	(printf@len+1)& (0+255),w,b
 13372  00127A  0100               	movlb	0	; () banked
 13373  00127C  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 13374  00127E  0100               	movlb	0	; () banked
 13375  001280  6F9B               	movwf	(??_printf+1)& (0+255),b
 13376  001282  C09A  FFF6         	movff	??_printf,tblptrl
 13377  001286  C09B  FFF7         	movff	??_printf+1,tblptrh
 13378  00128A  0E00               	movlw	low (__mediumconst shr (0+16))
 13379  00128C  6EF8               	movwf	tblptru,c
 13380  00128E  0E0F               	movlw	(high __ramtop+-1)
 13381  001290  64F7               	cpfsgt	tblptrh,c
 13382  001292  D003               	bra	u3747
 13383  001294  0008               	tblrd		*
 13384  001296  50F5               	movf	tablat,w,c
 13385  001298  D005               	bra	u3740
 13386  00129A                     u3747:
 13387  00129A  CFF6 FFE9          	movff	tblptrl,fsr0l
 13388  00129E  CFF7 FFEA          	movff	tblptrh,fsr0h
 13389  0012A2  50EF               	movf	indf0,w,c
 13390  0012A4                     u3740:
 13391  0012A4  0900               	iorlw	0
 13392  0012A6  A4D8               	btfss	status,2,c
 13393  0012A8  D7DD               	goto	l5358
 13394                           
 13395                           ;doprnt.c: 757: if(width > len)
 13396  0012AA  0100               	movlb	0	; () banked
 13397  0012AC  51A9               	movf	printf@width& (0+255),w,b
 13398  0012AE  0100               	movlb	0	; () banked
 13399  0012B0  5DA3               	subwf	printf@len& (0+255),w,b
 13400  0012B2  0100               	movlb	0	; () banked
 13401  0012B4  51AA               	movf	(printf@width+1)& (0+255),w,b
 13402  0012B6  0100               	movlb	0	; () banked
 13403  0012B8  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 13404  0012BA  B0D8               	btfsc	status,0,c
 13405  0012BC  D009               	goto	l5366
 13406                           
 13407                           ; BSR set to: 0
 13408                           ;doprnt.c: 758: width -= len;
 13409  0012BE  0100               	movlb	0	; () banked
 13410  0012C0  51A3               	movf	printf@len& (0+255),w,b
 13411  0012C2  0100               	movlb	0	; () banked
 13412  0012C4  5FA9               	subwf	printf@width& (0+255),f,b
 13413  0012C6  0100               	movlb	0	; () banked
 13414  0012C8  51A4               	movf	(printf@len+1)& (0+255),w,b
 13415  0012CA  0100               	movlb	0	; () banked
 13416  0012CC  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 13417  0012CE  D009               	goto	l5370
 13418  0012D0                     l5366:
 13419                           
 13420                           ; BSR set to: 0
 13421                           ;doprnt.c: 759: else
 13422                           ;doprnt.c: 760: width = 0;
 13423  0012D0  0E00               	movlw	0
 13424  0012D2  0100               	movlb	0	; () banked
 13425  0012D4  6FAA               	movwf	(printf@width+1)& (0+255),b
 13426  0012D6  0E00               	movlw	0
 13427  0012D8  6FA9               	movwf	printf@width& (0+255),b
 13428                           
 13429                           ; BSR set to: 0
 13430                           ;doprnt.c: 764: while(width--)
 13431  0012DA  D003               	goto	l5370
 13432  0012DC                     l5368:
 13433                           
 13434                           ; BSR set to: 0
 13435                           ;doprnt.c: 765: (putch(' ') );
 13436  0012DC  0E20               	movlw	32
 13437  0012DE  ECAD  F022         	call	_putch
 13438  0012E2                     l5370:
 13439  0012E2  0100               	movlb	0	; () banked
 13440  0012E4  07A9               	decf	printf@width& (0+255),f,b
 13441  0012E6  A0D8               	btfss	status,0,c
 13442  0012E8  07AA               	decf	(printf@width+1)& (0+255),f,b
 13443  0012EA  0100               	movlb	0	; () banked
 13444  0012EC  29A9               	incf	printf@width& (0+255),w,b
 13445  0012EE  E1F6               	bnz	l5368
 13446  0012F0  0100               	movlb	0	; () banked
 13447  0012F2  29AA               	incf	(printf@width+1)& (0+255),w,b
 13448  0012F4  B4D8               	btfsc	status,2,c
 13449  0012F6  D017               	goto	l5376
 13450  0012F8  D7F1               	goto	l5368
 13451  0012FA                     l5372:
 13452                           
 13453                           ; BSR set to: 0
 13454                           ;doprnt.c: 768: (putch(*cp++) );
 13455  0012FA  C09F  FFF6         	movff	printf@cp,tblptrl
 13456  0012FE  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 13457  001302  0E00               	movlw	low (__mediumconst shr (0+16))
 13458  001304  6EF8               	movwf	tblptru,c
 13459  001306  0E0F               	movlw	(high __ramtop+-1)
 13460  001308  64F7               	cpfsgt	tblptrh,c
 13461  00130A  D003               	bra	u3787
 13462  00130C  0008               	tblrd		*
 13463  00130E  50F5               	movf	tablat,w,c
 13464  001310  D005               	bra	u3780
 13465  001312                     u3787:
 13466  001312  CFF6 FFE9          	movff	tblptrl,fsr0l
 13467  001316  CFF7 FFEA          	movff	tblptrh,fsr0h
 13468  00131A  50EF               	movf	indf0,w,c
 13469  00131C                     u3780:
 13470  00131C  ECAD  F022         	call	_putch
 13471  001320  0100               	movlb	0	; () banked
 13472  001322  4B9F               	infsnz	printf@cp& (0+255),f,b
 13473  001324  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 13474  001326                     l5376:
 13475                           
 13476                           ; BSR set to: 0
 13477  001326  0100               	movlb	0	; () banked
 13478  001328  07A3               	decf	printf@len& (0+255),f,b
 13479  00132A  A0D8               	btfss	status,0,c
 13480  00132C  07A4               	decf	(printf@len+1)& (0+255),f,b
 13481  00132E  0100               	movlb	0	; () banked
 13482  001330  29A3               	incf	printf@len& (0+255),w,b
 13483  001332  E1E3               	bnz	l5372
 13484  001334  0100               	movlb	0	; () banked
 13485  001336  29A4               	incf	(printf@len+1)& (0+255),w,b
 13486  001338  B4D8               	btfsc	status,2,c
 13487  00133A  D10A               	goto	l5454
 13488  00133C  D7DE               	goto	l5372
 13489  00133E                     l5378:
 13490                           
 13491                           ; BSR set to: 0
 13492                           ;doprnt.c: 818: flag |= 0x40;
 13493  00133E  0100               	movlb	0	; () banked
 13494  001340  8DA7               	bsf	printf@flag& (0+255),6,b
 13495                           
 13496                           ; BSR set to: 0
 13497                           ;doprnt.c: 822: }
 13498                           
 13499                           ;doprnt.c: 819: break;
 13500  001342  D01D               	goto	l1232
 13501  001344                     l5382:
 13502  001344  C08E  FFF6         	movff	printf@f,tblptrl
 13503  001348  C08F  FFF7         	movff	printf@f+1,tblptrh
 13504  00134C  0100               	movlb	0	; () banked
 13505  00134E  4B8E               	infsnz	printf@f& (0+255),f,b
 13506  001350  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13507  001352                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13508  001352  6AF8               	clrf	tblptru,c
 13509  001354                     	endif
 13510  001354                     	if	0	;tblptru may be non-zero
 13511  001354                     	endif
 13512  001354  0008               	tblrd		*
 13513  001356  CFF5 F0A8          	movff	tablat,printf@c
 13514  00135A  0100               	movlb	0	; () banked
 13515  00135C  51A8               	movf	printf@c& (0+255),w,b
 13516                           
 13517                           ; Switch size 1, requested type "space"
 13518                           ; Number of cases is 5, Range of values is 0 to 117
 13519                           ; switch strategies available:
 13520                           ; Name         Instructions Cycles
 13521                           ; simple_byte           16     9 (average)
 13522                           ;	Chosen strategy is simple_byte
 13523  00135E  0A00               	xorlw	0	; case 0
 13524  001360  B4D8               	btfsc	status,2,c
 13525  001362  0012               	return	
 13526  001364  0A64               	xorlw	100	; case 100
 13527  001366  B4D8               	btfsc	status,2,c
 13528  001368  D00A               	goto	l1232
 13529  00136A  0A0D               	xorlw	13	; case 105
 13530  00136C  B4D8               	btfsc	status,2,c
 13531  00136E  D007               	goto	l1232
 13532  001370  0A1A               	xorlw	26	; case 115
 13533  001372  B4D8               	btfsc	status,2,c
 13534  001374  D758               	goto	l5348
 13535  001376  0A06               	xorlw	6	; case 117
 13536  001378  B4D8               	btfsc	status,2,c
 13537  00137A  D7E1               	goto	l5378
 13538  00137C  D0E9               	goto	l5454
 13539  00137E                     l1232:
 13540                           
 13541                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 13542  00137E  0100               	movlb	0	; () banked
 13543  001380  BDA7               	btfsc	printf@flag& (0+255),6,b
 13544  001382  D019               	goto	l5394
 13545                           
 13546                           ; BSR set to: 0
 13547                           ;doprnt.c: 1253: {
 13548                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 13549  001384  C0A1  FFD9         	movff	printf@ap,fsr2l
 13550  001388  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 13551  00138C  CFDE F0A5          	movff	postinc2,printf@val
 13552  001390  CFDD F0A6          	movff	postdec2,printf@val+1
 13553                           
 13554                           ; BSR set to: 0
 13555  001394  0E02               	movlw	2
 13556  001396  0100               	movlb	0	; () banked
 13557  001398  27A1               	addwf	printf@ap& (0+255),f,b
 13558  00139A  0E00               	movlw	0
 13559  00139C  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 13560                           
 13561                           ; BSR set to: 0
 13562                           ;doprnt.c: 1261: if((int)val < 0) {
 13563  00139E  0100               	movlb	0	; () banked
 13564  0013A0  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 13565  0013A2  D016               	goto	l5398
 13566                           
 13567                           ; BSR set to: 0
 13568                           ;doprnt.c: 1262: flag |= 0x03;
 13569  0013A4  0E03               	movlw	3
 13570  0013A6  0100               	movlb	0	; () banked
 13571  0013A8  13A7               	iorwf	printf@flag& (0+255),f,b
 13572                           
 13573                           ; BSR set to: 0
 13574                           ;doprnt.c: 1263: val = -val;
 13575  0013AA  0100               	movlb	0	; () banked
 13576  0013AC  6DA5               	negf	printf@val& (0+255),b
 13577  0013AE  1FA6               	comf	(printf@val+1)& (0+255),f,b
 13578  0013B0  B0D8               	btfsc	status,0,c
 13579  0013B2  2BA6               	incf	(printf@val+1)& (0+255),f,b
 13580                           
 13581                           ; BSR set to: 0
 13582                           ;doprnt.c: 1264: }
 13583                           ;doprnt.c: 1266: }
 13584  0013B4  D00D               	goto	l5398
 13585  0013B6                     l5394:
 13586                           
 13587                           ; BSR set to: 0
 13588                           ;doprnt.c: 1268: else
 13589                           ;doprnt.c: 1273: {
 13590                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 13591  0013B6  C0A1  FFD9         	movff	printf@ap,fsr2l
 13592  0013BA  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 13593  0013BE  CFDE F0A5          	movff	postinc2,printf@val
 13594  0013C2  CFDD F0A6          	movff	postdec2,printf@val+1
 13595                           
 13596                           ; BSR set to: 0
 13597  0013C6  0E02               	movlw	2
 13598  0013C8  0100               	movlb	0	; () banked
 13599  0013CA  27A1               	addwf	printf@ap& (0+255),f,b
 13600  0013CC  0E00               	movlw	0
 13601  0013CE  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 13602  0013D0                     l5398:
 13603                           
 13604                           ; BSR set to: 0
 13605                           ;doprnt.c: 1287: }
 13606                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 13607  0013D0  0E01               	movlw	1
 13608  0013D2  0100               	movlb	0	; () banked
 13609  0013D4  6FA8               	movwf	printf@c& (0+255),b
 13610  0013D6                     l5400:
 13611                           
 13612                           ; BSR set to: 0
 13613  0013D6  0E05               	movlw	5
 13614  0013D8  0100               	movlb	0	; () banked
 13615  0013DA  19A8               	xorwf	printf@c& (0+255),w,b
 13616  0013DC  B4D8               	btfsc	status,2,c
 13617  0013DE  D019               	goto	l5412
 13618                           
 13619                           ; BSR set to: 0
 13620                           ;doprnt.c: 1306: if(val < dpowers[c])
 13621                           
 13622                           ; BSR set to: 0
 13623                           
 13624                           ; BSR set to: 0
 13625  0013E0  0100               	movlb	0	; () banked
 13626  0013E2  51A8               	movf	printf@c& (0+255),w,b
 13627  0013E4  0D02               	mullw	2
 13628  0013E6  0E38               	movlw	low _dpowers
 13629  0013E8  24F3               	addwf	prodl,w,c
 13630  0013EA  6EF6               	movwf	tblptrl,c
 13631  0013EC  0EFB               	movlw	high _dpowers
 13632  0013EE  20F4               	addwfc	prodh,w,c
 13633  0013F0  6EF7               	movwf	tblptrh,c
 13634  0013F2                     	if	1	;There are 3 active tblptr bytes
 13635  0013F2  6AF8               	clrf	tblptru,c
 13636  0013F4  0E00               	movlw	low (__mediumconst shr (0+16))
 13637  0013F6  22F8               	addwfc	tblptru,f,c
 13638  0013F8                     	endif
 13639  0013F8  0009               	tblrd		*+
 13640  0013FA  50F5               	movf	tablat,w,c
 13641  0013FC  0100               	movlb	0	; () banked
 13642  0013FE  5DA5               	subwf	printf@val& (0+255),w,b
 13643  001400  0009               	tblrd		*+
 13644  001402  50F5               	movf	tablat,w,c
 13645  001404  0100               	movlb	0	; () banked
 13646  001406  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 13647  001408  A0D8               	btfss	status,0,c
 13648  00140A  D003               	goto	l5412
 13649                           
 13650                           ; BSR set to: 0
 13651                           
 13652                           ; BSR set to: 0
 13653                           
 13654                           ; BSR set to: 0
 13655                           ;doprnt.c: 1307: break;
 13656  00140C  0100               	movlb	0	; () banked
 13657  00140E  2BA8               	incf	printf@c& (0+255),f,b
 13658  001410  D7E2               	goto	l5400
 13659  001412                     l5412:
 13660                           
 13661                           ; BSR set to: 0
 13662                           ;doprnt.c: 1345: if(width && flag & 0x03)
 13663  001412  0100               	movlb	0	; () banked
 13664  001414  51A9               	movf	printf@width& (0+255),w,b
 13665  001416  0100               	movlb	0	; () banked
 13666  001418  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 13667  00141A  B4D8               	btfsc	status,2,c
 13668  00141C  D00B               	goto	l5418
 13669                           
 13670                           ; BSR set to: 0
 13671  00141E  C0A7  F09A         	movff	printf@flag,??_printf
 13672  001422  0E03               	movlw	3
 13673  001424  0100               	movlb	0	; () banked
 13674  001426  179A               	andwf	??_printf& (0+255),f,b
 13675  001428  B4D8               	btfsc	status,2,c
 13676  00142A  D004               	goto	l5418
 13677                           
 13678                           ; BSR set to: 0
 13679                           ;doprnt.c: 1346: width--;
 13680  00142C  0100               	movlb	0	; () banked
 13681  00142E  07A9               	decf	printf@width& (0+255),f,b
 13682  001430  A0D8               	btfss	status,0,c
 13683  001432  07AA               	decf	(printf@width+1)& (0+255),f,b
 13684  001434                     l5418:
 13685                           
 13686                           ; BSR set to: 0
 13687                           ;doprnt.c: 1381: if(width > c)
 13688  001434  0E80               	movlw	128
 13689  001436  0100               	movlb	0	; () banked
 13690  001438  BFA8               	btfsc	printf@c& (0+255),7,b
 13691  00143A  0E7F               	movlw	127
 13692  00143C  0100               	movlb	0	; () banked
 13693  00143E  6F9A               	movwf	??_printf& (0+255),b
 13694  001440  0100               	movlb	0	; () banked
 13695  001442  51A9               	movf	printf@width& (0+255),w,b
 13696  001444  0100               	movlb	0	; () banked
 13697  001446  5DA8               	subwf	printf@c& (0+255),w,b
 13698  001448  0100               	movlb	0	; () banked
 13699  00144A  51AA               	movf	(printf@width+1)& (0+255),w,b
 13700  00144C  0A80               	xorlw	128
 13701  00144E  0100               	movlb	0	; () banked
 13702  001450  599A               	subwfb	??_printf& (0+255),w,b
 13703  001452  B0D8               	btfsc	status,0,c
 13704  001454  D00B               	goto	l5422
 13705                           
 13706                           ; BSR set to: 0
 13707                           ;doprnt.c: 1382: width -= c;
 13708  001456  0100               	movlb	0	; () banked
 13709  001458  51A8               	movf	printf@c& (0+255),w,b
 13710  00145A  0100               	movlb	0	; () banked
 13711  00145C  5FA9               	subwf	printf@width& (0+255),f,b
 13712  00145E  0E00               	movlw	0
 13713  001460  0100               	movlb	0	; () banked
 13714  001462  BFA8               	btfsc	printf@c& (0+255),7,b
 13715  001464  0EFF               	movlw	255
 13716  001466  0100               	movlb	0	; () banked
 13717  001468  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 13718  00146A  D005               	goto	l5424
 13719  00146C                     l5422:
 13720                           
 13721                           ; BSR set to: 0
 13722                           ;doprnt.c: 1383: else
 13723                           ;doprnt.c: 1384: width = 0;
 13724  00146C  0E00               	movlw	0
 13725  00146E  0100               	movlb	0	; () banked
 13726  001470  6FAA               	movwf	(printf@width+1)& (0+255),b
 13727  001472  0E00               	movlw	0
 13728  001474  6FA9               	movwf	printf@width& (0+255),b
 13729  001476                     l5424:
 13730                           
 13731                           ; BSR set to: 0
 13732                           ;doprnt.c: 1387: if(flag & 0x04) {
 13733  001476  0100               	movlb	0	; () banked
 13734  001478  A5A7               	btfss	printf@flag& (0+255),2,b
 13735  00147A  D018               	goto	l5436
 13736                           
 13737                           ; BSR set to: 0
 13738                           ;doprnt.c: 1392: if(flag & 0x03)
 13739  00147C  C0A7  F09A         	movff	printf@flag,??_printf
 13740  001480  0E03               	movlw	3
 13741  001482  0100               	movlb	0	; () banked
 13742  001484  179A               	andwf	??_printf& (0+255),f,b
 13743  001486  B4D8               	btfsc	status,2,c
 13744  001488  D003               	goto	l5430
 13745                           
 13746                           ; BSR set to: 0
 13747                           ;doprnt.c: 1393: (putch('-') );
 13748  00148A  0E2D               	movlw	45
 13749  00148C  ECAD  F022         	call	_putch
 13750  001490                     l5430:
 13751                           
 13752                           ;doprnt.c: 1415: if(width)
 13753  001490  0100               	movlb	0	; () banked
 13754  001492  51A9               	movf	printf@width& (0+255),w,b
 13755  001494  0100               	movlb	0	; () banked
 13756  001496  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 13757  001498  B4D8               	btfsc	status,2,c
 13758  00149A  D025               	goto	l5446
 13759                           
 13760                           ; BSR set to: 0
 13761                           ;doprnt.c: 1417: (putch('0') );
 13762                           
 13763                           ; BSR set to: 0
 13764                           
 13765                           ;doprnt.c: 1416: do
 13766  00149C  0E30               	movlw	48
 13767  00149E  ECAD  F022         	call	_putch
 13768                           
 13769                           ;doprnt.c: 1418: while(--width);
 13770  0014A2  0100               	movlb	0	; () banked
 13771  0014A4  07A9               	decf	printf@width& (0+255),f,b
 13772  0014A6  A0D8               	btfss	status,0,c
 13773  0014A8  07AA               	decf	(printf@width+1)& (0+255),f,b
 13774  0014AA  D7F2               	goto	l5430
 13775  0014AC                     l5436:
 13776                           
 13777                           ; BSR set to: 0
 13778                           ;doprnt.c: 1422: {
 13779                           ;doprnt.c: 1424: if(width
 13780                           ;doprnt.c: 1428: )
 13781  0014AC  0100               	movlb	0	; () banked
 13782  0014AE  51A9               	movf	printf@width& (0+255),w,b
 13783  0014B0  0100               	movlb	0	; () banked
 13784  0014B2  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 13785  0014B4  B4D8               	btfsc	status,2,c
 13786  0014B6  D00D               	goto	l5442
 13787  0014B8                     l5438:
 13788                           
 13789                           ; BSR set to: 0
 13790                           ;doprnt.c: 1430: (putch(' ') );
 13791  0014B8  0E20               	movlw	32
 13792  0014BA  ECAD  F022         	call	_putch
 13793                           
 13794                           ;doprnt.c: 1431: while(--width);
 13795  0014BE  0100               	movlb	0	; () banked
 13796  0014C0  07A9               	decf	printf@width& (0+255),f,b
 13797  0014C2  A0D8               	btfss	status,0,c
 13798  0014C4  07AA               	decf	(printf@width+1)& (0+255),f,b
 13799  0014C6  0100               	movlb	0	; () banked
 13800  0014C8  51A9               	movf	printf@width& (0+255),w,b
 13801  0014CA  0100               	movlb	0	; () banked
 13802  0014CC  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 13803  0014CE  A4D8               	btfss	status,2,c
 13804  0014D0  D7F3               	goto	l5438
 13805  0014D2                     l5442:
 13806                           
 13807                           ; BSR set to: 0
 13808                           ;doprnt.c: 1438: if(flag & 0x03)
 13809  0014D2  C0A7  F09A         	movff	printf@flag,??_printf
 13810  0014D6  0E03               	movlw	3
 13811  0014D8  0100               	movlb	0	; () banked
 13812  0014DA  179A               	andwf	??_printf& (0+255),f,b
 13813  0014DC  B4D8               	btfsc	status,2,c
 13814  0014DE  D003               	goto	l5446
 13815                           
 13816                           ; BSR set to: 0
 13817                           ;doprnt.c: 1439: (putch('-') );
 13818  0014E0  0E2D               	movlw	45
 13819  0014E2  ECAD  F022         	call	_putch
 13820  0014E6                     l5446:
 13821                           
 13822                           ;doprnt.c: 1469: }
 13823                           ;doprnt.c: 1472: prec = c;
 13824  0014E6  C0A8  F09E         	movff	printf@c,printf@prec
 13825                           
 13826                           ;doprnt.c: 1474: while(prec--) {
 13827  0014EA  D02C               	goto	l5452
 13828  0014EC                     l5448:
 13829                           
 13830                           ;doprnt.c: 1478: {
 13831                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 13832  0014EC  0100               	movlb	0	; () banked
 13833  0014EE  519E               	movf	printf@prec& (0+255),w,b
 13834  0014F0  0D02               	mullw	2
 13835  0014F2  0E38               	movlw	low _dpowers
 13836  0014F4  24F3               	addwf	prodl,w,c
 13837  0014F6  6EF6               	movwf	tblptrl,c
 13838  0014F8  0EFB               	movlw	high _dpowers
 13839  0014FA  20F4               	addwfc	prodh,w,c
 13840  0014FC  6EF7               	movwf	tblptrh,c
 13841  0014FE                     	if	1	;There are 3 active tblptr bytes
 13842  0014FE  6AF8               	clrf	tblptru,c
 13843  001500  0E00               	movlw	low (__mediumconst shr (0+16))
 13844  001502  22F8               	addwfc	tblptru,f,c
 13845  001504                     	endif
 13846  001504  0009               	tblrd		*+
 13847  001506  CFF5 F082          	movff	tablat,___lwdiv@divisor
 13848  00150A  000A               	tblrd		*-
 13849  00150C  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 13850  001510  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 13851  001514  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 13852  001518  ECD3  F01C         	call	___lwdiv	;wreg free
 13853  00151C  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 13854  001520  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 13855  001524  0E00               	movlw	0
 13856  001526  0100               	movlb	0	; () banked
 13857  001528  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 13858  00152A  0E0A               	movlw	10
 13859  00152C  6F89               	movwf	___lwmod@divisor& (0+255),b
 13860  00152E  ECEB  F01D         	call	___lwmod	;wreg free
 13861  001532  0100               	movlb	0	; () banked
 13862  001534  5187               	movf	?___lwmod& (0+255),w,b
 13863  001536  0F30               	addlw	48
 13864  001538  0100               	movlb	0	; () banked
 13865  00153A  6FA8               	movwf	printf@c& (0+255),b
 13866                           
 13867                           ; BSR set to: 0
 13868                           ;doprnt.c: 1523: }
 13869                           ;doprnt.c: 1524: (putch(c) );
 13870  00153C  0100               	movlb	0	; () banked
 13871  00153E  51A8               	movf	printf@c& (0+255),w,b
 13872  001540  ECAD  F022         	call	_putch
 13873  001544                     l5452:
 13874  001544  0100               	movlb	0	; () banked
 13875  001546  079E               	decf	printf@prec& (0+255),f,b
 13876  001548  0100               	movlb	0	; () banked
 13877  00154A  299E               	incf	printf@prec& (0+255),w,b
 13878  00154C  A4D8               	btfss	status,2,c
 13879  00154E  D7CE               	goto	l5448
 13880  001550                     l5454:
 13881  001550  C08E  FFF6         	movff	printf@f,tblptrl
 13882  001554  C08F  FFF7         	movff	printf@f+1,tblptrh
 13883  001558  0100               	movlb	0	; () banked
 13884  00155A  4B8E               	infsnz	printf@f& (0+255),f,b
 13885  00155C  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13886  00155E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13887  00155E  6AF8               	clrf	tblptru,c
 13888  001560                     	endif
 13889  001560                     	if	0	;tblptru may be non-zero
 13890  001560                     	endif
 13891  001560  0008               	tblrd		*
 13892  001562  CFF5 F0A8          	movff	tablat,printf@c
 13893  001566  0100               	movlb	0	; () banked
 13894  001568  51A8               	movf	printf@c& (0+255),w,b
 13895  00156A  B4D8               	btfsc	status,2,c
 13896  00156C  0012               	return	
 13897  00156E  D5EB               	goto	l5324
 13898  001570                     __end_of_printf:
 13899                           	opt stack 0
 13900                           tblptru	equ	0xFF8
 13901                           tblptrh	equ	0xFF7
 13902                           tblptrl	equ	0xFF6
 13903                           tablat	equ	0xFF5
 13904                           prodh	equ	0xFF4
 13905                           prodl	equ	0xFF3
 13906                           intcon	equ	0xFF2
 13907                           intcon2	equ	0xFF1
 13908                           intcon3	equ	0xFF0
 13909                           indf0	equ	0xFEF
 13910                           postinc0	equ	0xFEE
 13911                           fsr0h	equ	0xFEA
 13912                           fsr0l	equ	0xFE9
 13913                           wreg	equ	0xFE8
 13914                           postdec1	equ	0xFE5
 13915                           fsr1l	equ	0xFE1
 13916                           indf2	equ	0xFDF
 13917                           postinc2	equ	0xFDE
 13918                           postdec2	equ	0xFDD
 13919                           fsr2h	equ	0xFDA
 13920                           fsr2l	equ	0xFD9
 13921                           status	equ	0xFD8
 13922                           
 13923 ;; *************** function _putch *****************
 13924 ;; Defined at:
 13925 ;;		line 20 in file "lcd.c"
 13926 ;; Parameters:    Size  Location     Type
 13927 ;;  data            1    wreg     unsigned char 
 13928 ;; Auto vars:     Size  Location     Type
 13929 ;;  data            1    2[BANK0 ] unsigned char 
 13930 ;; Return value:  Size  Location     Type
 13931 ;;                  1    wreg      void 
 13932 ;; Registers used:
 13933 ;;		wreg, status,2, status,0, cstack
 13934 ;; Tracked objects:
 13935 ;;		On entry : 0/0
 13936 ;;		On exit  : 0/0
 13937 ;;		Unchanged: 0/0
 13938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13940 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13942 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13943 ;;Total ram usage:        1 bytes
 13944 ;; Hardware stack levels used:    1
 13945 ;; Hardware stack levels required when called:    8
 13946 ;; This function calls:
 13947 ;;		_lcdNibble
 13948 ;; This function is called by:
 13949 ;;		_printf
 13950 ;; This function uses a non-reentrant model
 13951 ;;
 13952                           
 13953                           	psect	text48
 13954  00455A                     __ptext48:
 13955                           	opt stack 0
 13956  00455A                     _putch:
 13957                           	opt stack 18
 13958                           
 13959                           ;incstack = 0
 13960                           ;putch@data stored from wreg
 13961  00455A  0100               	movlb	0	; () banked
 13962  00455C  6F82               	movwf	putch@data& (0+255),b
 13963                           
 13964                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 13965  00455E  848C               	bsf	3980,2,c	;volatile
 13966                           
 13967                           ;lcd.c: 22: lcdNibble(data);
 13968  004560  0100               	movlb	0	; () banked
 13969  004562  5182               	movf	putch@data& (0+255),w,b
 13970  004564  ECB7  F01D         	call	_lcdNibble
 13971  004568  0012               	return		;funcret
 13972  00456A                     __end_of_putch:
 13973                           	opt stack 0
 13974                           tblptru	equ	0xFF8
 13975                           tblptrh	equ	0xFF7
 13976                           tblptrl	equ	0xFF6
 13977                           tablat	equ	0xFF5
 13978                           prodh	equ	0xFF4
 13979                           prodl	equ	0xFF3
 13980                           intcon	equ	0xFF2
 13981                           intcon2	equ	0xFF1
 13982                           intcon3	equ	0xFF0
 13983                           indf0	equ	0xFEF
 13984                           postinc0	equ	0xFEE
 13985                           fsr0h	equ	0xFEA
 13986                           fsr0l	equ	0xFE9
 13987                           wreg	equ	0xFE8
 13988                           postdec1	equ	0xFE5
 13989                           fsr1l	equ	0xFE1
 13990                           indf2	equ	0xFDF
 13991                           postinc2	equ	0xFDE
 13992                           postdec2	equ	0xFDD
 13993                           fsr2h	equ	0xFDA
 13994                           fsr2l	equ	0xFD9
 13995                           status	equ	0xFD8
 13996                           
 13997 ;; *************** function _isdigit *****************
 13998 ;; Defined at:
 13999 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 14000 ;; Parameters:    Size  Location     Type
 14001 ;;  c               1    wreg     unsigned char 
 14002 ;; Auto vars:     Size  Location     Type
 14003 ;;  c               1    2[BANK0 ] unsigned char 
 14004 ;; Return value:  Size  Location     Type
 14005 ;;		None               void
 14006 ;; Registers used:
 14007 ;;		wreg, status,2, status,0
 14008 ;; Tracked objects:
 14009 ;;		On entry : 0/0
 14010 ;;		On exit  : 0/0
 14011 ;;		Unchanged: 0/0
 14012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14014 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14015 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14016 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14017 ;;Total ram usage:        3 bytes
 14018 ;; Hardware stack levels used:    1
 14019 ;; Hardware stack levels required when called:    7
 14020 ;; This function calls:
 14021 ;;		Nothing
 14022 ;; This function is called by:
 14023 ;;		_printf
 14024 ;; This function uses a non-reentrant model
 14025 ;;
 14026                           
 14027                           	psect	text49
 14028  004380                     __ptext49:
 14029                           	opt stack 0
 14030  004380                     _isdigit:
 14031                           	opt stack 19
 14032                           
 14033                           ;incstack = 0
 14034                           ;isdigit@c stored from wreg
 14035  004380  0100               	movlb	0	; () banked
 14036  004382  6F82               	movwf	isdigit@c& (0+255),b
 14037  004384  0E00               	movlw	0
 14038  004386  0100               	movlb	0	; () banked
 14039  004388  6F81               	movwf	_isdigit$1888& (0+255),b
 14040                           
 14041                           ; BSR set to: 0
 14042  00438A  0E3A               	movlw	58
 14043  00438C  0100               	movlb	0	; () banked
 14044  00438E  6182               	cpfslt	isdigit@c& (0+255),b
 14045  004390  D007               	goto	l5178
 14046                           
 14047                           ; BSR set to: 0
 14048  004392  0E2F               	movlw	47
 14049  004394  0100               	movlb	0	; () banked
 14050  004396  6582               	cpfsgt	isdigit@c& (0+255),b
 14051  004398  D003               	goto	l5178
 14052                           
 14053                           ; BSR set to: 0
 14054  00439A  0E01               	movlw	1
 14055  00439C  0100               	movlb	0	; () banked
 14056  00439E  6F81               	movwf	_isdigit$1888& (0+255),b
 14057  0043A0                     l5178:
 14058                           
 14059                           ; BSR set to: 0
 14060  0043A0  C081  F080         	movff	_isdigit$1888,??_isdigit
 14061  0043A4  0100               	movlb	0	; () banked
 14062  0043A6  3180               	rrcf	??_isdigit& (0+255),w,b
 14063  0043A8  0012               	return	
 14064  0043AA                     __end_of_isdigit:
 14065                           	opt stack 0
 14066                           tblptru	equ	0xFF8
 14067                           tblptrh	equ	0xFF7
 14068                           tblptrl	equ	0xFF6
 14069                           tablat	equ	0xFF5
 14070                           prodh	equ	0xFF4
 14071                           prodl	equ	0xFF3
 14072                           intcon	equ	0xFF2
 14073                           intcon2	equ	0xFF1
 14074                           intcon3	equ	0xFF0
 14075                           indf0	equ	0xFEF
 14076                           postinc0	equ	0xFEE
 14077                           fsr0h	equ	0xFEA
 14078                           fsr0l	equ	0xFE9
 14079                           wreg	equ	0xFE8
 14080                           postdec1	equ	0xFE5
 14081                           fsr1l	equ	0xFE1
 14082                           indf2	equ	0xFDF
 14083                           postinc2	equ	0xFDE
 14084                           postdec2	equ	0xFDD
 14085                           fsr2h	equ	0xFDA
 14086                           fsr2l	equ	0xFD9
 14087                           status	equ	0xFD8
 14088                           
 14089 ;; *************** function ___wmul *****************
 14090 ;; Defined at:
 14091 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 14092 ;; Parameters:    Size  Location     Type
 14093 ;;  multiplier      2    0[BANK0 ] unsigned int 
 14094 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 14095 ;; Auto vars:     Size  Location     Type
 14096 ;;  product         2    4[BANK0 ] unsigned int 
 14097 ;; Return value:  Size  Location     Type
 14098 ;;                  2    0[BANK0 ] unsigned int 
 14099 ;; Registers used:
 14100 ;;		wreg, status,2, status,0, prodl, prodh
 14101 ;; Tracked objects:
 14102 ;;		On entry : 0/0
 14103 ;;		On exit  : 0/0
 14104 ;;		Unchanged: 0/0
 14105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14106 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14107 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14109 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14110 ;;Total ram usage:        6 bytes
 14111 ;; Hardware stack levels used:    1
 14112 ;; Hardware stack levels required when called:    7
 14113 ;; This function calls:
 14114 ;;		Nothing
 14115 ;; This function is called by:
 14116 ;;		_printf
 14117 ;; This function uses a non-reentrant model
 14118 ;;
 14119                           
 14120                           	psect	text50
 14121  0040B4                     __ptext50:
 14122                           	opt stack 0
 14123  0040B4                     ___wmul:
 14124                           	opt stack 19
 14125                           
 14126                           ; BSR set to: 0
 14127                           ;incstack = 0
 14128  0040B4  0100               	movlb	0	; () banked
 14129  0040B6  5180               	movf	___wmul@multiplier& (0+255),w,b
 14130  0040B8  0100               	movlb	0	; () banked
 14131  0040BA  0382               	mulwf	___wmul@multiplicand& (0+255),b
 14132  0040BC  CFF3 F084          	movff	prodl,___wmul@product
 14133  0040C0  CFF4 F085          	movff	prodh,___wmul@product+1
 14134  0040C4  0100               	movlb	0	; () banked
 14135  0040C6  5180               	movf	___wmul@multiplier& (0+255),w,b
 14136  0040C8  0100               	movlb	0	; () banked
 14137  0040CA  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 14138  0040CC  50F3               	movf	prodl,w,c
 14139  0040CE  0100               	movlb	0	; () banked
 14140  0040D0  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 14141  0040D2  0100               	movlb	0	; () banked
 14142  0040D4  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 14143  0040D6  0100               	movlb	0	; () banked
 14144  0040D8  0382               	mulwf	___wmul@multiplicand& (0+255),b
 14145  0040DA  50F3               	movf	prodl,w,c
 14146  0040DC  0100               	movlb	0	; () banked
 14147  0040DE  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 14148                           
 14149                           ; BSR set to: 0
 14150  0040E0  C084  F080         	movff	___wmul@product,?___wmul
 14151  0040E4  C085  F081         	movff	___wmul@product+1,?___wmul+1
 14152  0040E8  0012               	return	
 14153  0040EA                     __end_of___wmul:
 14154                           	opt stack 0
 14155                           tblptru	equ	0xFF8
 14156                           tblptrh	equ	0xFF7
 14157                           tblptrl	equ	0xFF6
 14158                           tablat	equ	0xFF5
 14159                           prodh	equ	0xFF4
 14160                           prodl	equ	0xFF3
 14161                           intcon	equ	0xFF2
 14162                           intcon2	equ	0xFF1
 14163                           intcon3	equ	0xFF0
 14164                           indf0	equ	0xFEF
 14165                           postinc0	equ	0xFEE
 14166                           fsr0h	equ	0xFEA
 14167                           fsr0l	equ	0xFE9
 14168                           wreg	equ	0xFE8
 14169                           postdec1	equ	0xFE5
 14170                           fsr1l	equ	0xFE1
 14171                           indf2	equ	0xFDF
 14172                           postinc2	equ	0xFDE
 14173                           postdec2	equ	0xFDD
 14174                           fsr2h	equ	0xFDA
 14175                           fsr2l	equ	0xFD9
 14176                           status	equ	0xFD8
 14177                           
 14178 ;; *************** function ___lwmod *****************
 14179 ;; Defined at:
 14180 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 14181 ;; Parameters:    Size  Location     Type
 14182 ;;  dividend        2    7[BANK0 ] unsigned int 
 14183 ;;  divisor         2    9[BANK0 ] unsigned int 
 14184 ;; Auto vars:     Size  Location     Type
 14185 ;;  counter         1   11[BANK0 ] unsigned char 
 14186 ;; Return value:  Size  Location     Type
 14187 ;;                  2    7[BANK0 ] unsigned int 
 14188 ;; Registers used:
 14189 ;;		wreg, status,2, status,0
 14190 ;; Tracked objects:
 14191 ;;		On entry : 0/0
 14192 ;;		On exit  : 0/0
 14193 ;;		Unchanged: 0/0
 14194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14195 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14196 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14198 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14199 ;;Total ram usage:        5 bytes
 14200 ;; Hardware stack levels used:    1
 14201 ;; Hardware stack levels required when called:    7
 14202 ;; This function calls:
 14203 ;;		Nothing
 14204 ;; This function is called by:
 14205 ;;		_printf
 14206 ;; This function uses a non-reentrant model
 14207 ;;
 14208                           
 14209                           	psect	text51
 14210  003BD6                     __ptext51:
 14211                           	opt stack 0
 14212  003BD6                     ___lwmod:
 14213                           	opt stack 19
 14214                           
 14215                           ; BSR set to: 0
 14216                           ;incstack = 0
 14217  003BD6  0100               	movlb	0	; () banked
 14218  003BD8  5189               	movf	___lwmod@divisor& (0+255),w,b
 14219  003BDA  0100               	movlb	0	; () banked
 14220  003BDC  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 14221  003BDE  B4D8               	btfsc	status,2,c
 14222  003BE0  D026               	goto	l1689
 14223                           
 14224                           ; BSR set to: 0
 14225  003BE2  0E01               	movlw	1
 14226  003BE4  0100               	movlb	0	; () banked
 14227  003BE6  6F8B               	movwf	___lwmod@counter& (0+255),b
 14228  003BE8  D006               	goto	l5216
 14229  003BEA                     l5214:
 14230                           
 14231                           ; BSR set to: 0
 14232  003BEA  0100               	movlb	0	; () banked
 14233  003BEC  90D8               	bcf	status,0,c
 14234  003BEE  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 14235  003BF0  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 14236  003BF2  0100               	movlb	0	; () banked
 14237  003BF4  2B8B               	incf	___lwmod@counter& (0+255),f,b
 14238  003BF6                     l5216:
 14239                           
 14240                           ; BSR set to: 0
 14241  003BF6  0100               	movlb	0	; () banked
 14242  003BF8  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 14243  003BFA  D7F7               	goto	l5214
 14244  003BFC                     l5218:
 14245                           
 14246                           ; BSR set to: 0
 14247  003BFC  0100               	movlb	0	; () banked
 14248  003BFE  5189               	movf	___lwmod@divisor& (0+255),w,b
 14249  003C00  0100               	movlb	0	; () banked
 14250  003C02  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 14251  003C04  0100               	movlb	0	; () banked
 14252  003C06  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 14253  003C08  0100               	movlb	0	; () banked
 14254  003C0A  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 14255  003C0C  A0D8               	btfss	status,0,c
 14256  003C0E  D008               	goto	l5222
 14257                           
 14258                           ; BSR set to: 0
 14259  003C10  0100               	movlb	0	; () banked
 14260  003C12  5189               	movf	___lwmod@divisor& (0+255),w,b
 14261  003C14  0100               	movlb	0	; () banked
 14262  003C16  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 14263  003C18  0100               	movlb	0	; () banked
 14264  003C1A  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 14265  003C1C  0100               	movlb	0	; () banked
 14266  003C1E  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 14267  003C20                     l5222:
 14268                           
 14269                           ; BSR set to: 0
 14270  003C20  0100               	movlb	0	; () banked
 14271  003C22  90D8               	bcf	status,0,c
 14272  003C24  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 14273  003C26  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 14274                           
 14275                           ; BSR set to: 0
 14276  003C28  0100               	movlb	0	; () banked
 14277  003C2A  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 14278  003C2C  D7E7               	goto	l5218
 14279  003C2E                     l1689:
 14280                           
 14281                           ; BSR set to: 0
 14282  003C2E  C087  F087         	movff	___lwmod@dividend,?___lwmod
 14283  003C32  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 14284                           
 14285                           ; BSR set to: 0
 14286  003C36  0012               	return		;funcret
 14287  003C38                     __end_of___lwmod:
 14288                           	opt stack 0
 14289                           tblptru	equ	0xFF8
 14290                           tblptrh	equ	0xFF7
 14291                           tblptrl	equ	0xFF6
 14292                           tablat	equ	0xFF5
 14293                           prodh	equ	0xFF4
 14294                           prodl	equ	0xFF3
 14295                           intcon	equ	0xFF2
 14296                           intcon2	equ	0xFF1
 14297                           intcon3	equ	0xFF0
 14298                           indf0	equ	0xFEF
 14299                           postinc0	equ	0xFEE
 14300                           fsr0h	equ	0xFEA
 14301                           fsr0l	equ	0xFE9
 14302                           wreg	equ	0xFE8
 14303                           postdec1	equ	0xFE5
 14304                           fsr1l	equ	0xFE1
 14305                           indf2	equ	0xFDF
 14306                           postinc2	equ	0xFDE
 14307                           postdec2	equ	0xFDD
 14308                           fsr2h	equ	0xFDA
 14309                           fsr2l	equ	0xFD9
 14310                           status	equ	0xFD8
 14311                           
 14312 ;; *************** function ___lwdiv *****************
 14313 ;; Defined at:
 14314 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 14315 ;; Parameters:    Size  Location     Type
 14316 ;;  dividend        2    0[BANK0 ] unsigned int 
 14317 ;;  divisor         2    2[BANK0 ] unsigned int 
 14318 ;; Auto vars:     Size  Location     Type
 14319 ;;  quotient        2    4[BANK0 ] unsigned int 
 14320 ;;  counter         1    6[BANK0 ] unsigned char 
 14321 ;; Return value:  Size  Location     Type
 14322 ;;                  2    0[BANK0 ] unsigned int 
 14323 ;; Registers used:
 14324 ;;		wreg, status,2, status,0
 14325 ;; Tracked objects:
 14326 ;;		On entry : 0/0
 14327 ;;		On exit  : 0/0
 14328 ;;		Unchanged: 0/0
 14329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14330 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14331 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14333 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14334 ;;Total ram usage:        7 bytes
 14335 ;; Hardware stack levels used:    1
 14336 ;; Hardware stack levels required when called:    7
 14337 ;; This function calls:
 14338 ;;		Nothing
 14339 ;; This function is called by:
 14340 ;;		_printf
 14341 ;; This function uses a non-reentrant model
 14342 ;;
 14343                           
 14344                           	psect	text52
 14345  0039A6                     __ptext52:
 14346                           	opt stack 0
 14347  0039A6                     ___lwdiv:
 14348                           	opt stack 19
 14349                           
 14350                           ; BSR set to: 0
 14351                           ;incstack = 0
 14352  0039A6  0E00               	movlw	0
 14353  0039A8  0100               	movlb	0	; () banked
 14354  0039AA  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 14355  0039AC  0E00               	movlw	0
 14356  0039AE  6F84               	movwf	___lwdiv@quotient& (0+255),b
 14357                           
 14358                           ; BSR set to: 0
 14359  0039B0  0100               	movlb	0	; () banked
 14360  0039B2  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14361  0039B4  0100               	movlb	0	; () banked
 14362  0039B6  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 14363  0039B8  B4D8               	btfsc	status,2,c
 14364  0039BA  D02C               	goto	l1679
 14365                           
 14366                           ; BSR set to: 0
 14367  0039BC  0E01               	movlw	1
 14368  0039BE  0100               	movlb	0	; () banked
 14369  0039C0  6F86               	movwf	___lwdiv@counter& (0+255),b
 14370  0039C2  D006               	goto	l5196
 14371  0039C4                     l5194:
 14372                           
 14373                           ; BSR set to: 0
 14374  0039C4  0100               	movlb	0	; () banked
 14375  0039C6  90D8               	bcf	status,0,c
 14376  0039C8  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 14377  0039CA  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 14378  0039CC  0100               	movlb	0	; () banked
 14379  0039CE  2B86               	incf	___lwdiv@counter& (0+255),f,b
 14380  0039D0                     l5196:
 14381                           
 14382                           ; BSR set to: 0
 14383  0039D0  0100               	movlb	0	; () banked
 14384  0039D2  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 14385  0039D4  D7F7               	goto	l5194
 14386  0039D6                     l5198:
 14387                           
 14388                           ; BSR set to: 0
 14389  0039D6  0100               	movlb	0	; () banked
 14390  0039D8  90D8               	bcf	status,0,c
 14391  0039DA  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 14392  0039DC  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 14393                           
 14394                           ; BSR set to: 0
 14395  0039DE  0100               	movlb	0	; () banked
 14396  0039E0  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14397  0039E2  0100               	movlb	0	; () banked
 14398  0039E4  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 14399  0039E6  0100               	movlb	0	; () banked
 14400  0039E8  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 14401  0039EA  0100               	movlb	0	; () banked
 14402  0039EC  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 14403  0039EE  A0D8               	btfss	status,0,c
 14404  0039F0  D00A               	goto	l5206
 14405                           
 14406                           ; BSR set to: 0
 14407  0039F2  0100               	movlb	0	; () banked
 14408  0039F4  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14409  0039F6  0100               	movlb	0	; () banked
 14410  0039F8  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 14411  0039FA  0100               	movlb	0	; () banked
 14412  0039FC  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 14413  0039FE  0100               	movlb	0	; () banked
 14414  003A00  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 14415                           
 14416                           ; BSR set to: 0
 14417  003A02  0100               	movlb	0	; () banked
 14418  003A04  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 14419  003A06                     l5206:
 14420                           
 14421                           ; BSR set to: 0
 14422  003A06  0100               	movlb	0	; () banked
 14423  003A08  90D8               	bcf	status,0,c
 14424  003A0A  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 14425  003A0C  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 14426                           
 14427                           ; BSR set to: 0
 14428  003A0E  0100               	movlb	0	; () banked
 14429  003A10  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 14430  003A12  D7E1               	goto	l5198
 14431  003A14                     l1679:
 14432                           
 14433                           ; BSR set to: 0
 14434  003A14  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 14435  003A18  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 14436                           
 14437                           ; BSR set to: 0
 14438  003A1C  0012               	return		;funcret
 14439  003A1E                     __end_of___lwdiv:
 14440                           	opt stack 0
 14441                           tblptru	equ	0xFF8
 14442                           tblptrh	equ	0xFF7
 14443                           tblptrl	equ	0xFF6
 14444                           tablat	equ	0xFF5
 14445                           prodh	equ	0xFF4
 14446                           prodl	equ	0xFF3
 14447                           intcon	equ	0xFF2
 14448                           intcon2	equ	0xFF1
 14449                           intcon3	equ	0xFF0
 14450                           indf0	equ	0xFEF
 14451                           postinc0	equ	0xFEE
 14452                           fsr0h	equ	0xFEA
 14453                           fsr0l	equ	0xFE9
 14454                           wreg	equ	0xFE8
 14455                           postdec1	equ	0xFE5
 14456                           fsr1l	equ	0xFE1
 14457                           indf2	equ	0xFDF
 14458                           postinc2	equ	0xFDE
 14459                           postdec2	equ	0xFDD
 14460                           fsr2h	equ	0xFDA
 14461                           fsr2l	equ	0xFD9
 14462                           status	equ	0xFD8
 14463                           
 14464 ;; *************** function _lcdInst *****************
 14465 ;; Defined at:
 14466 ;;		line 15 in file "lcd.c"
 14467 ;; Parameters:    Size  Location     Type
 14468 ;;  data            1    wreg     unsigned char 
 14469 ;; Auto vars:     Size  Location     Type
 14470 ;;  data            1    2[BANK0 ] unsigned char 
 14471 ;; Return value:  Size  Location     Type
 14472 ;;                  1    wreg      void 
 14473 ;; Registers used:
 14474 ;;		wreg, status,2, status,0, cstack
 14475 ;; Tracked objects:
 14476 ;;		On entry : 0/0
 14477 ;;		On exit  : 0/0
 14478 ;;		Unchanged: 0/0
 14479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14481 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14483 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14484 ;;Total ram usage:        1 bytes
 14485 ;; Hardware stack levels used:    1
 14486 ;; Hardware stack levels required when called:    8
 14487 ;; This function calls:
 14488 ;;		_lcdNibble
 14489 ;; This function is called by:
 14490 ;;		_UI
 14491 ;;		_change_state_to_menu_start
 14492 ;;		_change_state_to_menu_12
 14493 ;;		_change_state_to_menu_22
 14494 ;;		_initLCD
 14495 ;;		_printRTC
 14496 ;;		_Loading
 14497 ;;		_EEPROM_write
 14498 ;;		_Test
 14499 ;;		_algorithmTest
 14500 ;;		_sensorTest
 14501 ;;		_actuatorTest
 14502 ;;		_BothServos
 14503 ;;		_PortTestA5
 14504 ;;		_SolenoidTestA5
 14505 ;;		_ToggleTestA5
 14506 ;; This function uses a non-reentrant model
 14507 ;;
 14508                           
 14509                           	psect	text53
 14510  00456A                     __ptext53:
 14511                           	opt stack 0
 14512  00456A                     _lcdInst:
 14513                           	opt stack 20
 14514                           
 14515                           ; BSR set to: 0
 14516                           ;incstack = 0
 14517                           ;lcdInst@data stored from wreg
 14518  00456A  0100               	movlb	0	; () banked
 14519  00456C  6F82               	movwf	lcdInst@data& (0+255),b
 14520                           
 14521                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 14522  00456E  948C               	bcf	3980,2,c	;volatile
 14523                           
 14524                           ;lcd.c: 17: lcdNibble(data);
 14525  004570  0100               	movlb	0	; () banked
 14526  004572  5182               	movf	lcdInst@data& (0+255),w,b
 14527  004574  ECB7  F01D         	call	_lcdNibble
 14528  004578  0012               	return		;funcret
 14529  00457A                     __end_of_lcdInst:
 14530                           	opt stack 0
 14531                           tblptru	equ	0xFF8
 14532                           tblptrh	equ	0xFF7
 14533                           tblptrl	equ	0xFF6
 14534                           tablat	equ	0xFF5
 14535                           prodh	equ	0xFF4
 14536                           prodl	equ	0xFF3
 14537                           intcon	equ	0xFF2
 14538                           intcon2	equ	0xFF1
 14539                           intcon3	equ	0xFF0
 14540                           indf0	equ	0xFEF
 14541                           postinc0	equ	0xFEE
 14542                           fsr0h	equ	0xFEA
 14543                           fsr0l	equ	0xFE9
 14544                           wreg	equ	0xFE8
 14545                           postdec1	equ	0xFE5
 14546                           fsr1l	equ	0xFE1
 14547                           indf2	equ	0xFDF
 14548                           postinc2	equ	0xFDE
 14549                           postdec2	equ	0xFDD
 14550                           fsr2h	equ	0xFDA
 14551                           fsr2l	equ	0xFD9
 14552                           status	equ	0xFD8
 14553                           
 14554 ;; *************** function _lcdNibble *****************
 14555 ;; Defined at:
 14556 ;;		line 25 in file "lcd.c"
 14557 ;; Parameters:    Size  Location     Type
 14558 ;;  data            1    wreg     unsigned char 
 14559 ;; Auto vars:     Size  Location     Type
 14560 ;;  data            1    1[BANK0 ] unsigned char 
 14561 ;;  temp            1    0[BANK0 ] unsigned char 
 14562 ;; Return value:  Size  Location     Type
 14563 ;;                  1    wreg      void 
 14564 ;; Registers used:
 14565 ;;		wreg, status,2, status,0
 14566 ;; Tracked objects:
 14567 ;;		On entry : 0/0
 14568 ;;		On exit  : 0/0
 14569 ;;		Unchanged: 0/0
 14570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14572 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14574 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14575 ;;Total ram usage:        2 bytes
 14576 ;; Hardware stack levels used:    1
 14577 ;; Hardware stack levels required when called:    7
 14578 ;; This function calls:
 14579 ;;		Nothing
 14580 ;; This function is called by:
 14581 ;;		_lcdInst
 14582 ;;		_putch
 14583 ;; This function uses a non-reentrant model
 14584 ;;
 14585                           
 14586                           	psect	text54
 14587  003B6E                     __ptext54:
 14588                           	opt stack 0
 14589  003B6E                     _lcdNibble:
 14590                           	opt stack 20
 14591                           
 14592                           ;incstack = 0
 14593                           ;lcdNibble@data stored from wreg
 14594  003B6E  0100               	movlb	0	; () banked
 14595  003B70  6F81               	movwf	lcdNibble@data& (0+255),b
 14596                           
 14597                           ;lcd.c: 27: char temp = data & 0xF0;
 14598  003B72  0100               	movlb	0	; () banked
 14599  003B74  5181               	movf	lcdNibble@data& (0+255),w,b
 14600  003B76  0BF0               	andlw	240
 14601  003B78  0100               	movlb	0	; () banked
 14602  003B7A  6F80               	movwf	lcdNibble@temp& (0+255),b
 14603                           
 14604                           ;lcd.c: 28: LATD = LATD & 0x0F;
 14605  003B7C  508C               	movf	3980,w,c	;volatile
 14606  003B7E  0B0F               	andlw	15
 14607  003B80  6E8C               	movwf	3980,c	;volatile
 14608                           
 14609                           ;lcd.c: 29: LATD = temp | LATD;
 14610  003B82  0100               	movlb	0	; () banked
 14611  003B84  5180               	movf	lcdNibble@temp& (0+255),w,b
 14612  003B86  108C               	iorwf	3980,w,c	;volatile
 14613  003B88  6E8C               	movwf	3980,c	;volatile
 14614                           
 14615                           ; BSR set to: 0
 14616                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 14617  003B8A  868C               	bsf	3980,3,c	;volatile
 14618                           
 14619                           ; BSR set to: 0
 14620                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14621  003B8C  0E42               	movlw	66
 14622  003B8E                     u7877:
 14623  003B8E  2EE8               	decfsz	wreg,f,c
 14624  003B90  D7FE               	bra	u7877
 14625  003B92  D000               	nop2	
 14626                           
 14627                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 14628  003B94  968C               	bcf	3980,3,c	;volatile
 14629                           
 14630                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14631  003B96  0E42               	movlw	66
 14632  003B98                     u7887:
 14633  003B98  2EE8               	decfsz	wreg,f,c
 14634  003B9A  D7FE               	bra	u7887
 14635  003B9C  D000               	nop2	
 14636                           
 14637                           ;lcd.c: 36: data = data << 4;
 14638  003B9E  0100               	movlb	0	; () banked
 14639  003BA0  3981               	swapf	lcdNibble@data& (0+255),w,b
 14640  003BA2  0BF0               	andlw	240
 14641  003BA4  0100               	movlb	0	; () banked
 14642  003BA6  6F81               	movwf	lcdNibble@data& (0+255),b
 14643                           
 14644                           ;lcd.c: 38: temp = data & 0xF0;
 14645  003BA8  0100               	movlb	0	; () banked
 14646  003BAA  5181               	movf	lcdNibble@data& (0+255),w,b
 14647  003BAC  0BF0               	andlw	240
 14648  003BAE  0100               	movlb	0	; () banked
 14649  003BB0  6F80               	movwf	lcdNibble@temp& (0+255),b
 14650                           
 14651                           ;lcd.c: 39: LATD = LATD & 0x0F;
 14652  003BB2  508C               	movf	3980,w,c	;volatile
 14653  003BB4  0B0F               	andlw	15
 14654  003BB6  6E8C               	movwf	3980,c	;volatile
 14655                           
 14656                           ;lcd.c: 40: LATD = temp | LATD;
 14657  003BB8  0100               	movlb	0	; () banked
 14658  003BBA  5180               	movf	lcdNibble@temp& (0+255),w,b
 14659  003BBC  108C               	iorwf	3980,w,c	;volatile
 14660  003BBE  6E8C               	movwf	3980,c	;volatile
 14661                           
 14662                           ; BSR set to: 0
 14663                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 14664  003BC0  868C               	bsf	3980,3,c	;volatile
 14665                           
 14666                           ; BSR set to: 0
 14667                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14668  003BC2  0E42               	movlw	66
 14669  003BC4                     u7897:
 14670  003BC4  2EE8               	decfsz	wreg,f,c
 14671  003BC6  D7FE               	bra	u7897
 14672  003BC8  D000               	nop2	
 14673                           
 14674                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 14675  003BCA  968C               	bcf	3980,3,c	;volatile
 14676                           
 14677                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14678  003BCC  0E42               	movlw	66
 14679  003BCE                     u7907:
 14680  003BCE  2EE8               	decfsz	wreg,f,c
 14681  003BD0  D7FE               	bra	u7907
 14682  003BD2  D000               	nop2	
 14683  003BD4  0012               	return		;funcret
 14684  003BD6                     __end_of_lcdNibble:
 14685                           	opt stack 0
 14686                           tblptru	equ	0xFF8
 14687                           tblptrh	equ	0xFF7
 14688                           tblptrl	equ	0xFF6
 14689                           tablat	equ	0xFF5
 14690                           prodh	equ	0xFF4
 14691                           prodl	equ	0xFF3
 14692                           intcon	equ	0xFF2
 14693                           intcon2	equ	0xFF1
 14694                           intcon3	equ	0xFF0
 14695                           indf0	equ	0xFEF
 14696                           postinc0	equ	0xFEE
 14697                           fsr0h	equ	0xFEA
 14698                           fsr0l	equ	0xFE9
 14699                           wreg	equ	0xFE8
 14700                           postdec1	equ	0xFE5
 14701                           fsr1l	equ	0xFE1
 14702                           indf2	equ	0xFDF
 14703                           postinc2	equ	0xFDE
 14704                           postdec2	equ	0xFDD
 14705                           fsr2h	equ	0xFDA
 14706                           fsr2l	equ	0xFD9
 14707                           status	equ	0xFD8
 14708                           
 14709 ;; *************** function _initServos *****************
 14710 ;; Defined at:
 14711 ;;		line 253 in file "sort.c"
 14712 ;; Parameters:    Size  Location     Type
 14713 ;;		None
 14714 ;; Auto vars:     Size  Location     Type
 14715 ;;		None
 14716 ;; Return value:  Size  Location     Type
 14717 ;;                  1    wreg      void 
 14718 ;; Registers used:
 14719 ;;		wreg, status,2, status,0, cstack
 14720 ;; Tracked objects:
 14721 ;;		On entry : 0/0
 14722 ;;		On exit  : 0/0
 14723 ;;		Unchanged: 0/0
 14724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14726 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14727 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14728 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14729 ;;Total ram usage:        1 bytes
 14730 ;; Hardware stack levels used:    1
 14731 ;; Hardware stack levels required when called:    8
 14732 ;; This function calls:
 14733 ;;		_updateServoPosition
 14734 ;; This function is called by:
 14735 ;;		_Loading
 14736 ;;		_BothServos
 14737 ;; This function uses a non-reentrant model
 14738 ;;
 14739                           
 14740                           	psect	text55
 14741  003D50                     __ptext55:
 14742                           	opt stack 0
 14743  003D50                     _initServos:
 14744                           	opt stack 20
 14745                           
 14746                           ;sort.c: 254: updateServoPosition(1250, 1);
 14747                           
 14748                           ;incstack = 0
 14749  003D50  0E04               	movlw	4
 14750  003D52  0100               	movlb	0	; () banked
 14751  003D54  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14752  003D56  0EE2               	movlw	226
 14753  003D58  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14754  003D5A  0E00               	movlw	0
 14755  003D5C  0100               	movlb	0	; () banked
 14756  003D5E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14757  003D60  0E01               	movlw	1
 14758  003D62  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14759  003D64  EC0F  F01D         	call	_updateServoPosition	;wreg free
 14760                           
 14761                           ;sort.c: 255: updateServoPosition(1150, 3);
 14762  003D68  0E04               	movlw	4
 14763  003D6A  0100               	movlb	0	; () banked
 14764  003D6C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14765  003D6E  0E7E               	movlw	126
 14766  003D70  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14767  003D72  0E00               	movlw	0
 14768  003D74  0100               	movlb	0	; () banked
 14769  003D76  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14770  003D78  0E03               	movlw	3
 14771  003D7A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14772  003D7C  EC0F  F01D         	call	_updateServoPosition	;wreg free
 14773                           
 14774                           ;sort.c: 256: TMR1ON = 1;
 14775  003D80  80CD               	bsf	4045,0,c	;volatile
 14776                           
 14777                           ;sort.c: 257: was_low_1 = 0;
 14778  003D82  0E00               	movlw	0
 14779  003D84  6E7A               	movwf	_was_low_1+1,c	;volatile
 14780  003D86  0E00               	movlw	0
 14781  003D88  6E79               	movwf	_was_low_1,c	;volatile
 14782                           
 14783                           ;sort.c: 258: _delay((unsigned long)((5)*(32000000/4000.0)));
 14784  003D8A  0E34               	movlw	52
 14785  003D8C  0100               	movlb	0	; () banked
 14786  003D8E  6F88               	movwf	??_initServos& (0+255),b
 14787  003D90  0EF1               	movlw	241
 14788  003D92                     u7917:
 14789  003D92  2EE8               	decfsz	wreg,f,c
 14790  003D94  D7FE               	bra	u7917
 14791  003D96  2F88               	decfsz	??_initServos& (0+255),f,b
 14792  003D98  D7FC               	bra	u7917
 14793  003D9A  D000               	nop2	
 14794                           
 14795                           ;sort.c: 259: TMR3ON = 1;
 14796  003D9C  80B1               	bsf	4017,0,c	;volatile
 14797                           
 14798                           ;sort.c: 260: was_low_3 = 0;
 14799  003D9E  0E00               	movlw	0
 14800  003DA0  6E7C               	movwf	_was_low_3+1,c	;volatile
 14801  003DA2  0E00               	movlw	0
 14802  003DA4  6E7B               	movwf	_was_low_3,c	;volatile
 14803                           
 14804                           ;sort.c: 261: LATCbits.LATC0 = 0;
 14805  003DA6  908B               	bcf	3979,0,c	;volatile
 14806  003DA8  0012               	return		;funcret
 14807  003DAA                     __end_of_initServos:
 14808                           	opt stack 0
 14809                           tblptru	equ	0xFF8
 14810                           tblptrh	equ	0xFF7
 14811                           tblptrl	equ	0xFF6
 14812                           tablat	equ	0xFF5
 14813                           prodh	equ	0xFF4
 14814                           prodl	equ	0xFF3
 14815                           intcon	equ	0xFF2
 14816                           intcon2	equ	0xFF1
 14817                           intcon3	equ	0xFF0
 14818                           indf0	equ	0xFEF
 14819                           postinc0	equ	0xFEE
 14820                           fsr0h	equ	0xFEA
 14821                           fsr0l	equ	0xFE9
 14822                           wreg	equ	0xFE8
 14823                           postdec1	equ	0xFE5
 14824                           fsr1l	equ	0xFE1
 14825                           indf2	equ	0xFDF
 14826                           postinc2	equ	0xFDE
 14827                           postdec2	equ	0xFDD
 14828                           fsr2h	equ	0xFDA
 14829                           fsr2l	equ	0xFD9
 14830                           status	equ	0xFD8
 14831                           
 14832 ;; *************** function _updateServoPosition *****************
 14833 ;; Defined at:
 14834 ;;		line 303 in file "sort.c"
 14835 ;; Parameters:    Size  Location     Type
 14836 ;;  time_us         2    0[BANK0 ] int 
 14837 ;;  timer           2    2[BANK0 ] int 
 14838 ;; Auto vars:     Size  Location     Type
 14839 ;;  my_time         2    6[BANK0 ] unsigned int 
 14840 ;; Return value:  Size  Location     Type
 14841 ;;                  1    wreg      void 
 14842 ;; Registers used:
 14843 ;;		wreg, status,2, status,0
 14844 ;; Tracked objects:
 14845 ;;		On entry : 0/0
 14846 ;;		On exit  : 0/0
 14847 ;;		Unchanged: 0/0
 14848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14849 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14850 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14851 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14852 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14853 ;;Total ram usage:        8 bytes
 14854 ;; Hardware stack levels used:    1
 14855 ;; Hardware stack levels required when called:    7
 14856 ;; This function calls:
 14857 ;;		Nothing
 14858 ;; This function is called by:
 14859 ;;		_Distribution
 14860 ;;		_initServos
 14861 ;;		_actuatorTest
 14862 ;;		_BothServos
 14863 ;; This function uses a non-reentrant model
 14864 ;;
 14865                           
 14866                           	psect	text56
 14867  003A1E                     __ptext56:
 14868                           	opt stack 0
 14869  003A1E                     _updateServoPosition:
 14870                           	opt stack 20
 14871                           
 14872                           ;sort.c: 304: unsigned int my_time = 65535 - time_us;
 14873                           
 14874                           ;incstack = 0
 14875  003A1E  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 14876  003A22  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 14877  003A26  0100               	movlb	0	; () banked
 14878  003A28  1F84               	comf	??_updateServoPosition& (0+255),f,b
 14879  003A2A  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 14880  003A2C  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 14881  003A2E  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 14882  003A30  0EFF               	movlw	255
 14883  003A32  0100               	movlb	0	; () banked
 14884  003A34  2584               	addwf	??_updateServoPosition& (0+255),w,b
 14885  003A36  0100               	movlb	0	; () banked
 14886  003A38  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 14887  003A3A  0EFF               	movlw	255
 14888  003A3C  0100               	movlb	0	; () banked
 14889  003A3E  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 14890  003A40  0100               	movlb	0	; () banked
 14891  003A42  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 14892                           
 14893                           ;sort.c: 305: switch(timer){
 14894  003A44  D015               	goto	l5496
 14895  003A46                     l5494:
 14896                           
 14897                           ; BSR set to: 0
 14898                           ;sort.c: 307: servoTimes[0] = my_time >> 8;
 14899  003A46  0100               	movlb	0	; () banked
 14900  003A48  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 14901  003A4A  0101               	movlb	1	; () banked
 14902  003A4C  6F1C               	movwf	_servoTimes& (0+255),b
 14903  003A4E  6B1D               	clrf	(_servoTimes+1)& (0+255),b
 14904                           
 14905                           ;sort.c: 308: servoTimes[1] = my_time & 0xFF;
 14906  003A50  0100               	movlb	0	; () banked
 14907  003A52  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 14908  003A54  0101               	movlb	1	; () banked
 14909  003A56  6F1E               	movwf	(_servoTimes+2)& (0+255),b
 14910  003A58  6B1F               	clrf	(_servoTimes+3)& (0+255),b
 14911  003A5A                     l779:
 14912                           
 14913                           ;sort.c: 310: servoTimes[2] = my_time >> 8;
 14914  003A5A  0100               	movlb	0	; () banked
 14915  003A5C  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 14916  003A5E  0101               	movlb	1	; () banked
 14917  003A60  6F20               	movwf	(_servoTimes+4)& (0+255),b
 14918  003A62  6B21               	clrf	(_servoTimes+5)& (0+255),b
 14919                           
 14920                           ;sort.c: 311: servoTimes[3] = my_time & 0xFF;
 14921  003A64  0100               	movlb	0	; () banked
 14922  003A66  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 14923  003A68  0101               	movlb	1	; () banked
 14924  003A6A  6F22               	movwf	(_servoTimes+6)& (0+255),b
 14925  003A6C  6B23               	clrf	(_servoTimes+7)& (0+255),b
 14926                           
 14927                           ;sort.c: 312: }
 14928  003A6E  0012               	return	
 14929  003A70                     l5496:
 14930  003A70  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 14931  003A74  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 14932                           
 14933                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14934                           ; Switch size 1, requested type "space"
 14935                           ; Number of cases is 1, Range of values is 0 to 0
 14936                           ; switch strategies available:
 14937                           ; Name         Instructions Cycles
 14938                           ; simple_byte            4     3 (average)
 14939                           ;	Chosen strategy is simple_byte
 14940  003A78  0100               	movlb	0	; () banked
 14941  003A7A  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 14942  003A7C  0A00               	xorlw	0	; case 0
 14943  003A7E  A4D8               	btfss	status,2,c
 14944  003A80  0012               	return	
 14945                           
 14946                           ; BSR set to: 0
 14947                           ; Switch size 1, requested type "space"
 14948                           ; Number of cases is 2, Range of values is 1 to 3
 14949                           ; switch strategies available:
 14950                           ; Name         Instructions Cycles
 14951                           ; simple_byte            7     4 (average)
 14952                           ;	Chosen strategy is simple_byte
 14953  003A82  0100               	movlb	0	; () banked
 14954  003A84  5184               	movf	??_updateServoPosition& (0+255),w,b
 14955  003A86  0A01               	xorlw	1	; case 1
 14956  003A88  B4D8               	btfsc	status,2,c
 14957  003A8A  D7DD               	goto	l5494
 14958  003A8C  0A02               	xorlw	2	; case 3
 14959  003A8E  A4D8               	btfss	status,2,c
 14960  003A90  0012               	return	
 14961  003A92  D7E3               	goto	l779
 14962  003A94                     __end_of_updateServoPosition:
 14963                           	opt stack 0
 14964                           tblptru	equ	0xFF8
 14965                           tblptrh	equ	0xFF7
 14966                           tblptrl	equ	0xFF6
 14967                           tablat	equ	0xFF5
 14968                           prodh	equ	0xFF4
 14969                           prodl	equ	0xFF3
 14970                           intcon	equ	0xFF2
 14971                           intcon2	equ	0xFF1
 14972                           intcon3	equ	0xFF0
 14973                           indf0	equ	0xFEF
 14974                           postinc0	equ	0xFEE
 14975                           fsr0h	equ	0xFEA
 14976                           fsr0l	equ	0xFE9
 14977                           wreg	equ	0xFE8
 14978                           postdec1	equ	0xFE5
 14979                           fsr1l	equ	0xFE1
 14980                           indf2	equ	0xFDF
 14981                           postinc2	equ	0xFDE
 14982                           postdec2	equ	0xFDD
 14983                           fsr2h	equ	0xFDA
 14984                           fsr2l	equ	0xFD9
 14985                           status	equ	0xFD8
 14986                           
 14987 ;; *************** function _handler *****************
 14988 ;; Defined at:
 14989 ;;		line 16 in file "interruptHandler.c"
 14990 ;; Parameters:    Size  Location     Type
 14991 ;;		None
 14992 ;; Auto vars:     Size  Location     Type
 14993 ;;		None
 14994 ;; Return value:  Size  Location     Type
 14995 ;;                  1    wreg      void 
 14996 ;; Registers used:
 14997 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14998 ;; Tracked objects:
 14999 ;;		On entry : 0/0
 15000 ;;		On exit  : 0/0
 15001 ;;		Unchanged: 0/0
 15002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15005 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15006 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15007 ;;Total ram usage:       16 bytes
 15008 ;; Hardware stack levels used:    1
 15009 ;; Hardware stack levels required when called:    6
 15010 ;; This function calls:
 15011 ;;		_printSortTimer
 15012 ;;		_updateMenu
 15013 ;; This function is called by:
 15014 ;;		Interrupt level 2
 15015 ;; This function uses a non-reentrant model
 15016 ;;
 15017                           
 15018                           	psect	intcode
 15019  000008                     __pintcode:
 15020                           	opt stack 0
 15021  000008                     _handler:
 15022                           	opt stack 18
 15023                           
 15024                           ;incstack = 0
 15025  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 15026  00000A  ED7B  F014         	call	int_func,f	;refresh shadow registers
 15027                           tblptru	equ	0xFF8
 15028                           tblptrh	equ	0xFF7
 15029                           tblptrl	equ	0xFF6
 15030                           tablat	equ	0xFF5
 15031                           prodh	equ	0xFF4
 15032                           prodl	equ	0xFF3
 15033                           intcon	equ	0xFF2
 15034                           intcon2	equ	0xFF1
 15035                           intcon3	equ	0xFF0
 15036                           indf0	equ	0xFEF
 15037                           postinc0	equ	0xFEE
 15038                           fsr0h	equ	0xFEA
 15039                           fsr0l	equ	0xFE9
 15040                           wreg	equ	0xFE8
 15041                           postdec1	equ	0xFE5
 15042                           fsr1l	equ	0xFE1
 15043                           indf2	equ	0xFDF
 15044                           postinc2	equ	0xFDE
 15045                           postdec2	equ	0xFDD
 15046                           fsr2h	equ	0xFDA
 15047                           fsr2l	equ	0xFD9
 15048                           status	equ	0xFD8
 15049                           
 15050                           	psect	intcode_body
 15051  0028F6                     __pintcode_body:
 15052                           	opt stack 18
 15053  0028F6                     int_func:
 15054                           	opt stack 18
 15055  0028F6  0006               	pop		; remove dummy address from shadow register refresh
 15056  0028F8  CFFA F04D          	movff	pclath,??_handler+2
 15057  0028FC  CFFB F04E          	movff	pclatu,??_handler+3
 15058  002900  CFE9 F04F          	movff	fsr0l,??_handler+4
 15059  002904  CFEA F050          	movff	fsr0h,??_handler+5
 15060  002908  CFE1 F051          	movff	fsr1l,??_handler+6
 15061  00290C  CFE2 F052          	movff	fsr1h,??_handler+7
 15062  002910  CFD9 F053          	movff	fsr2l,??_handler+8
 15063  002914  CFDA F054          	movff	fsr2h,??_handler+9
 15064  002918  CFF3 F055          	movff	prodl,??_handler+10
 15065  00291C  CFF4 F056          	movff	prodh,??_handler+11
 15066  002920  CFF6 F057          	movff	tblptrl,??_handler+12
 15067  002924  CFF7 F058          	movff	tblptrh,??_handler+13
 15068  002928  CFF8 F059          	movff	tblptru,??_handler+14
 15069  00292C  CFF5 F05A          	movff	tablat,??_handler+15
 15070                           
 15071                           ;interruptHandler.c: 18: if(INT1IF){
 15072  002930  A0F0               	btfss	intcon3,0,c	;volatile
 15073  002932  D020               	goto	i2l7964
 15074                           
 15075                           ;interruptHandler.c: 19: INT1IF = 0;
 15076  002934  90F0               	bcf	intcon3,0,c	;volatile
 15077                           
 15078                           ;interruptHandler.c: 20: if(machine_state == UI_state) {
 15079  002936  0100               	movlb	0	; () banked
 15080  002938  51FC               	movf	_machine_state& (0+255),w,b
 15081  00293A  A4D8               	btfss	status,2,c
 15082  00293C  D01B               	goto	i2l7964
 15083                           
 15084                           ; BSR set to: 0
 15085                           ;interruptHandler.c: 21: input = keys[(PORTB & 0xF0) >> 4];
 15086  00293E  3881               	swapf	3969,w,c	;volatile
 15087  002940  0B0F               	andlw	15
 15088  002942  0B0F               	andlw	15
 15089  002944  6E4B               	movwf	??_handler& (0+255),c
 15090  002946  6A4C               	clrf	(??_handler+1)& (0+255),c
 15091  002948  0E27               	movlw	low _keys
 15092  00294A  244B               	addwf	??_handler,w,c
 15093  00294C  6EF6               	movwf	tblptrl,c
 15094  00294E  0EFB               	movlw	high _keys
 15095  002950  204C               	addwfc	??_handler+1,w,c
 15096  002952  6EF7               	movwf	tblptrh,c
 15097  002954                     	if	1	;There are 3 active tblptr bytes
 15098  002954  6AF8               	clrf	tblptru,c
 15099  002956  0E00               	movlw	low (__mediumconst shr (0+16))
 15100  002958  22F8               	addwfc	tblptru,f,c
 15101  00295A                     	endif
 15102  00295A  0008               	tblrd		*
 15103  00295C  CFF5 F07D          	movff	tablat,_input	;volatile
 15104                           
 15105                           ; BSR set to: 0
 15106                           ;interruptHandler.c: 23: if(input == '*'){
 15107  002960  0E2A               	movlw	42
 15108  002962  187D               	xorwf	_input,w,c	;volatile
 15109  002964  A4D8               	btfss	status,2,c
 15110  002966  D004               	goto	i2l7962
 15111                           
 15112                           ; BSR set to: 0
 15113                           ;interruptHandler.c: 24: machine_state = Testing_state;
 15114  002968  0E03               	movlw	3
 15115  00296A  0100               	movlb	0	; () banked
 15116  00296C  6FFC               	movwf	_machine_state& (0+255),b
 15117                           
 15118                           ;interruptHandler.c: 25: }
 15119  00296E  D002               	goto	i2l7964
 15120  002970                     i2l7962:
 15121                           
 15122                           ; BSR set to: 0
 15123                           ;interruptHandler.c: 26: else{
 15124                           ;interruptHandler.c: 27: updateMenu();
 15125  002970  EC4C  F00F         	call	_updateMenu	;wreg free
 15126  002974                     i2l7964:
 15127                           
 15128                           ;interruptHandler.c: 28: }
 15129                           ;interruptHandler.c: 29: }
 15130                           ;interruptHandler.c: 30: }
 15131                           ;interruptHandler.c: 33: if(TMR0IF){
 15132  002974  A4F2               	btfss	intcon,2,c	;volatile
 15133  002976  D00C               	goto	i2l7978
 15134                           
 15135                           ;interruptHandler.c: 34: TMR0IF = 0;
 15136  002978  94F2               	bcf	intcon,2,c	;volatile
 15137                           
 15138                           ;interruptHandler.c: 35: if(machine_state == Sorting_state){
 15139  00297A  0100               	movlb	0	; () banked
 15140  00297C  05FC               	decf	_machine_state& (0+255),w,b
 15141  00297E  A4D8               	btfss	status,2,c
 15142  002980  D007               	goto	i2l7978
 15143                           
 15144                           ; BSR set to: 0
 15145                           ;interruptHandler.c: 36: printSortTimer();
 15146  002982  ECC7  F011         	call	_printSortTimer	;wreg free
 15147                           
 15148                           ;interruptHandler.c: 38: TMR0H = 0b10000101;
 15149  002986  0E85               	movlw	133
 15150  002988  6ED7               	movwf	4055,c	;volatile
 15151                           
 15152                           ;interruptHandler.c: 39: TMR0L = 0b11101110;
 15153  00298A  0EEE               	movlw	238
 15154  00298C  6ED6               	movwf	4054,c	;volatile
 15155                           
 15156                           ;interruptHandler.c: 40: TMR0ON = 1;
 15157  00298E  8ED5               	bsf	4053,7,c	;volatile
 15158  002990                     i2l7978:
 15159                           
 15160                           ;interruptHandler.c: 41: }
 15161                           ;interruptHandler.c: 42: }
 15162                           ;interruptHandler.c: 45: if(TMR1IF){
 15163  002990  A09E               	btfss	3998,0,c	;volatile
 15164  002992  D024               	goto	i2l8002
 15165                           
 15166                           ;interruptHandler.c: 46: TMR1IF = 0;
 15167  002994  909E               	bcf	3998,0,c	;volatile
 15168                           
 15169                           ;interruptHandler.c: 47: TMR1ON = 0;
 15170  002996  90CD               	bcf	4045,0,c	;volatile
 15171                           
 15172                           ;interruptHandler.c: 48: if(machine_state == Sorting_state){
 15173  002998  0100               	movlb	0	; () banked
 15174  00299A  05FC               	decf	_machine_state& (0+255),w,b
 15175  00299C  A4D8               	btfss	status,2,c
 15176  00299E  D01E               	goto	i2l8002
 15177                           
 15178                           ; BSR set to: 0
 15179                           ;interruptHandler.c: 49: if(was_low_1){
 15180  0029A0  5079               	movf	_was_low_1,w,c	;volatile
 15181  0029A2  107A               	iorwf	_was_low_1+1,w,c	;volatile
 15182  0029A4  B4D8               	btfsc	status,2,c
 15183  0029A6  D00A               	goto	i2l844
 15184                           
 15185                           ; BSR set to: 0
 15186                           ;interruptHandler.c: 50: LATCbits.LATC1 = 1;
 15187  0029A8  828B               	bsf	3979,1,c	;volatile
 15188                           
 15189                           ; BSR set to: 0
 15190                           ;interruptHandler.c: 51: was_low_1 = 0;
 15191  0029AA  0E00               	movlw	0
 15192  0029AC  6E7A               	movwf	_was_low_1+1,c	;volatile
 15193  0029AE  0E00               	movlw	0
 15194  0029B0  6E79               	movwf	_was_low_1,c	;volatile
 15195                           
 15196                           ; BSR set to: 0
 15197                           ;interruptHandler.c: 52: TMR1H = servoTimes[0];
 15198  0029B2  C11C  FFCF         	movff	_servoTimes,4047	;volatile
 15199                           
 15200                           ; BSR set to: 0
 15201                           ;interruptHandler.c: 53: TMR1L = servoTimes[1];
 15202  0029B6  C11E  FFCE         	movff	_servoTimes+2,4046	;volatile
 15203                           
 15204                           ;interruptHandler.c: 54: }
 15205  0029BA  D00F               	goto	i2l8000
 15206  0029BC                     i2l844:
 15207                           
 15208                           ; BSR set to: 0
 15209                           ;interruptHandler.c: 55: else{
 15210                           ;interruptHandler.c: 56: LATCbits.LATC1 = 0;
 15211  0029BC  928B               	bcf	3979,1,c	;volatile
 15212                           
 15213                           ; BSR set to: 0
 15214                           ;interruptHandler.c: 57: was_low_1 = 1;
 15215  0029BE  0E00               	movlw	0
 15216  0029C0  6E7A               	movwf	_was_low_1+1,c	;volatile
 15217  0029C2  0E01               	movlw	1
 15218  0029C4  6E79               	movwf	_was_low_1,c	;volatile
 15219                           
 15220                           ; BSR set to: 0
 15221                           ;interruptHandler.c: 58: TMR1H = 20000 - servoTimes[0];
 15222  0029C6  0101               	movlb	1	; () banked
 15223  0029C8  511C               	movf	_servoTimes& (0+255),w,b
 15224  0029CA  0800               	sublw	0
 15225  0029CC  0F20               	addlw	32
 15226  0029CE  6ECF               	movwf	4047,c	;volatile
 15227                           
 15228                           ; BSR set to: 1
 15229                           ;interruptHandler.c: 59: TMR1L = 20000 - servoTimes[1];
 15230  0029D0  0101               	movlb	1	; () banked
 15231  0029D2  511E               	movf	(_servoTimes+2)& (0+255),w,b
 15232  0029D4  0800               	sublw	0
 15233  0029D6  0F20               	addlw	32
 15234  0029D8  6ECE               	movwf	4046,c	;volatile
 15235  0029DA                     i2l8000:
 15236                           
 15237                           ;interruptHandler.c: 60: }
 15238                           ;interruptHandler.c: 61: TMR1ON = 1;
 15239  0029DA  80CD               	bsf	4045,0,c	;volatile
 15240  0029DC                     i2l8002:
 15241                           
 15242                           ;interruptHandler.c: 62: }
 15243                           ;interruptHandler.c: 63: }
 15244                           ;interruptHandler.c: 65: if(TMR3IF){
 15245  0029DC  A2A1               	btfss	4001,1,c	;volatile
 15246  0029DE  D024               	goto	i2l850
 15247                           
 15248                           ;interruptHandler.c: 66: TMR3IF = 0;
 15249  0029E0  92A1               	bcf	4001,1,c	;volatile
 15250                           
 15251                           ;interruptHandler.c: 67: TMR3ON = 0;
 15252  0029E2  90B1               	bcf	4017,0,c	;volatile
 15253                           
 15254                           ;interruptHandler.c: 68: if(machine_state == Sorting_state){
 15255  0029E4  0100               	movlb	0	; () banked
 15256  0029E6  05FC               	decf	_machine_state& (0+255),w,b
 15257  0029E8  A4D8               	btfss	status,2,c
 15258  0029EA  D01E               	goto	i2l850
 15259                           
 15260                           ; BSR set to: 0
 15261                           ;interruptHandler.c: 69: if(was_low_3){
 15262  0029EC  507B               	movf	_was_low_3,w,c	;volatile
 15263  0029EE  107C               	iorwf	_was_low_3+1,w,c	;volatile
 15264  0029F0  B4D8               	btfsc	status,2,c
 15265  0029F2  D00A               	goto	i2l848
 15266                           
 15267                           ; BSR set to: 0
 15268                           ;interruptHandler.c: 70: LATCbits.LATC2 = 1;
 15269  0029F4  848B               	bsf	3979,2,c	;volatile
 15270                           
 15271                           ; BSR set to: 0
 15272                           ;interruptHandler.c: 71: was_low_3 = 0;
 15273  0029F6  0E00               	movlw	0
 15274  0029F8  6E7C               	movwf	_was_low_3+1,c	;volatile
 15275  0029FA  0E00               	movlw	0
 15276  0029FC  6E7B               	movwf	_was_low_3,c	;volatile
 15277                           
 15278                           ; BSR set to: 0
 15279                           ;interruptHandler.c: 72: TMR3H = servoTimes[2];
 15280  0029FE  C120  FFB3         	movff	_servoTimes+4,4019	;volatile
 15281                           
 15282                           ; BSR set to: 0
 15283                           ;interruptHandler.c: 73: TMR3L = servoTimes[3];
 15284  002A02  C122  FFB2         	movff	_servoTimes+6,4018	;volatile
 15285                           
 15286                           ;interruptHandler.c: 74: }
 15287  002A06  D00F               	goto	i2l8024
 15288  002A08                     i2l848:
 15289                           
 15290                           ; BSR set to: 0
 15291                           ;interruptHandler.c: 75: else{
 15292                           ;interruptHandler.c: 76: LATCbits.LATC2 = 0;
 15293  002A08  948B               	bcf	3979,2,c	;volatile
 15294                           
 15295                           ; BSR set to: 0
 15296                           ;interruptHandler.c: 77: was_low_3 = 1;
 15297  002A0A  0E00               	movlw	0
 15298  002A0C  6E7C               	movwf	_was_low_3+1,c	;volatile
 15299  002A0E  0E01               	movlw	1
 15300  002A10  6E7B               	movwf	_was_low_3,c	;volatile
 15301                           
 15302                           ; BSR set to: 0
 15303                           ;interruptHandler.c: 78: TMR3H = 20000 - servoTimes[2];
 15304  002A12  0101               	movlb	1	; () banked
 15305  002A14  5120               	movf	(_servoTimes+4)& (0+255),w,b
 15306  002A16  0800               	sublw	0
 15307  002A18  0F20               	addlw	32
 15308  002A1A  6EB3               	movwf	4019,c	;volatile
 15309                           
 15310                           ; BSR set to: 1
 15311                           ;interruptHandler.c: 79: TMR3L = 20000 - servoTimes[3];
 15312  002A1C  0101               	movlb	1	; () banked
 15313  002A1E  5122               	movf	(_servoTimes+6)& (0+255),w,b
 15314  002A20  0800               	sublw	0
 15315  002A22  0F20               	addlw	32
 15316  002A24  6EB2               	movwf	4018,c	;volatile
 15317  002A26                     i2l8024:
 15318                           
 15319                           ;interruptHandler.c: 80: }
 15320                           ;interruptHandler.c: 81: TMR3ON = 1;
 15321  002A26  80B1               	bsf	4017,0,c	;volatile
 15322  002A28                     i2l850:
 15323  002A28  C05A  FFF5         	movff	??_handler+15,tablat
 15324  002A2C  C059  FFF8         	movff	??_handler+14,tblptru
 15325  002A30  C058  FFF7         	movff	??_handler+13,tblptrh
 15326  002A34  C057  FFF6         	movff	??_handler+12,tblptrl
 15327  002A38  C056  FFF4         	movff	??_handler+11,prodh
 15328  002A3C  C055  FFF3         	movff	??_handler+10,prodl
 15329  002A40  C054  FFDA         	movff	??_handler+9,fsr2h
 15330  002A44  C053  FFD9         	movff	??_handler+8,fsr2l
 15331  002A48  C052  FFE2         	movff	??_handler+7,fsr1h
 15332  002A4C  C051  FFE1         	movff	??_handler+6,fsr1l
 15333  002A50  C050  FFEA         	movff	??_handler+5,fsr0h
 15334  002A54  C04F  FFE9         	movff	??_handler+4,fsr0l
 15335  002A58  C04E  FFFB         	movff	??_handler+3,pclatu
 15336  002A5C  C04D  FFFA         	movff	??_handler+2,pclath
 15337  002A60  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 15338  002A62  0011               	retfie		f
 15339  002A64                     __end_of_handler:
 15340                           	opt stack 0
 15341                           pclatu	equ	0xFFB
 15342                           pclath	equ	0xFFA
 15343                           tblptru	equ	0xFF8
 15344                           tblptrh	equ	0xFF7
 15345                           tblptrl	equ	0xFF6
 15346                           tablat	equ	0xFF5
 15347                           prodh	equ	0xFF4
 15348                           prodl	equ	0xFF3
 15349                           intcon	equ	0xFF2
 15350                           intcon2	equ	0xFF1
 15351                           intcon3	equ	0xFF0
 15352                           indf0	equ	0xFEF
 15353                           postinc0	equ	0xFEE
 15354                           fsr0h	equ	0xFEA
 15355                           fsr0l	equ	0xFE9
 15356                           wreg	equ	0xFE8
 15357                           postdec1	equ	0xFE5
 15358                           fsr1h	equ	0xFE2
 15359                           fsr1l	equ	0xFE1
 15360                           indf2	equ	0xFDF
 15361                           postinc2	equ	0xFDE
 15362                           postdec2	equ	0xFDD
 15363                           fsr2h	equ	0xFDA
 15364                           fsr2l	equ	0xFD9
 15365                           status	equ	0xFD8
 15366                           
 15367 ;; *************** function _updateMenu *****************
 15368 ;; Defined at:
 15369 ;;		line 211 in file "UI.c"
 15370 ;; Parameters:    Size  Location     Type
 15371 ;;		None
 15372 ;; Auto vars:     Size  Location     Type
 15373 ;;		None
 15374 ;; Return value:  Size  Location     Type
 15375 ;;                  1    wreg      void 
 15376 ;; Registers used:
 15377 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15378 ;; Tracked objects:
 15379 ;;		On entry : 0/0
 15380 ;;		On exit  : 0/0
 15381 ;;		Unchanged: 0/0
 15382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15384 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15385 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15386 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15387 ;;Total ram usage:        2 bytes
 15388 ;; Hardware stack levels used:    1
 15389 ;; Hardware stack levels required when called:    5
 15390 ;; This function calls:
 15391 ;;		_change_state_to_logs_11
 15392 ;;		_change_state_to_logs_12
 15393 ;;		_change_state_to_logs_22
 15394 ;;		_change_state_to_logs_23
 15395 ;;		_change_state_to_logs_33
 15396 ;;		_change_state_to_logs_34
 15397 ;;		_change_state_to_menu_11
 15398 ;;		_change_state_to_menu_23
 15399 ;;		_dispLogs
 15400 ;;		_inputHandler
 15401 ;;		i2_change_state_to_menu_12
 15402 ;;		i2_change_state_to_menu_22
 15403 ;;		i2_change_state_to_menu_start
 15404 ;; This function is called by:
 15405 ;;		_handler
 15406 ;; This function uses a non-reentrant model
 15407 ;;
 15408                           
 15409                           	psect	text58
 15410  001E98                     __ptext58:
 15411                           	opt stack 0
 15412  001E98                     _updateMenu:
 15413                           	opt stack 18
 15414                           
 15415                           ;UI.c: 212: up = 0; down = 0; enter = 0; back = 0;
 15416                           
 15417                           ;incstack = 0
 15418  001E98  0E00               	movlw	0
 15419  001E9A  6E78               	movwf	_up+1,c
 15420  001E9C  0E00               	movlw	0
 15421  001E9E  6E77               	movwf	_up,c
 15422  001EA0  0E00               	movlw	0
 15423  001EA2  6E68               	movwf	_down+1,c
 15424  001EA4  0E00               	movlw	0
 15425  001EA6  6E67               	movwf	_down,c
 15426  001EA8  0E00               	movlw	0
 15427  001EAA  6E6A               	movwf	_enter+1,c
 15428  001EAC  0E00               	movlw	0
 15429  001EAE  6E69               	movwf	_enter,c
 15430  001EB0  0E00               	movlw	0
 15431  001EB2  6E5C               	movwf	_back+1,c
 15432  001EB4  0E00               	movlw	0
 15433  001EB6  6E5B               	movwf	_back,c
 15434                           
 15435                           ;UI.c: 213: (INTCONbits.GIE = 0);
 15436  001EB8  9EF2               	bcf	intcon,7,c	;volatile
 15437                           
 15438                           ;UI.c: 215: if (inputHandler()
 15439                           ;UI.c: 218: ){
 15440  001EBA  ECC0  F012         	call	_inputHandler	;wreg free
 15441  001EBE  502A               	movf	?_inputHandler,w,c
 15442  001EC0  102B               	iorwf	?_inputHandler+1,w,c
 15443  001EC2  A4D8               	btfss	status,2,c
 15444  001EC4  D112               	goto	i2l7704
 15445  001EC6  D146               	goto	i2l254
 15446  001EC8                     i2l7556:
 15447                           
 15448                           ;UI.c: 222: change_state_to_menu_11();
 15449  001EC8  ECD6  F020         	call	_change_state_to_menu_11	;wreg free
 15450                           
 15451                           ;UI.c: 223: break;
 15452  001ECC  D143               	goto	i2l254
 15453  001ECE                     i2l7558:
 15454                           
 15455                           ;UI.c: 226: if(up){
 15456  001ECE  5077               	movf	_up,w,c
 15457  001ED0  1078               	iorwf	_up+1,w,c
 15458  001ED2  B4D8               	btfsc	status,2,c
 15459  001ED4  D003               	goto	i2l7562
 15460                           
 15461                           ;UI.c: 227: change_state_to_menu_23();
 15462  001ED6  ECBE  F020         	call	_change_state_to_menu_23	;wreg free
 15463                           
 15464                           ;UI.c: 228: }
 15465  001EDA  D13C               	goto	i2l254
 15466  001EDC                     i2l7562:
 15467                           
 15468                           ;UI.c: 229: else if(down){
 15469  001EDC  5067               	movf	_down,w,c
 15470  001EDE  1068               	iorwf	_down+1,w,c
 15471  001EE0  B4D8               	btfsc	status,2,c
 15472  001EE2  D003               	goto	i2l7566
 15473                           
 15474                           ;UI.c: 230: change_state_to_menu_12();
 15475  001EE4  ECA6  F020         	call	i2_change_state_to_menu_12	;wreg free
 15476                           
 15477                           ;UI.c: 231: }
 15478  001EE8  D135               	goto	i2l254
 15479  001EEA                     i2l7566:
 15480                           
 15481                           ;UI.c: 232: else if(enter){
 15482  001EEA  5069               	movf	_enter,w,c
 15483  001EEC  106A               	iorwf	_enter+1,w,c
 15484  001EEE  B4D8               	btfsc	status,2,c
 15485  001EF0  D131               	goto	i2l254
 15486                           
 15487                           ;UI.c: 233: change_state_to_menu_start();
 15488  001EF2  ECE9  F021         	call	i2_change_state_to_menu_start	;wreg free
 15489                           
 15490                           ;UI.c: 234: }
 15491                           ;UI.c: 235: break;
 15492  001EF6  D12E               	goto	i2l254
 15493  001EF8                     i2l7570:
 15494                           
 15495                           ;UI.c: 238: if(up){
 15496  001EF8  5077               	movf	_up,w,c
 15497  001EFA  1078               	iorwf	_up+1,w,c
 15498  001EFC  B4D8               	btfsc	status,2,c
 15499  001EFE  D003               	goto	i2l7574
 15500                           
 15501                           ;UI.c: 239: change_state_to_menu_11();
 15502  001F00  ECD6  F020         	call	_change_state_to_menu_11	;wreg free
 15503                           
 15504                           ;UI.c: 240: }
 15505  001F04  D127               	goto	i2l254
 15506  001F06                     i2l7574:
 15507                           
 15508                           ;UI.c: 241: else if(down){
 15509  001F06  5067               	movf	_down,w,c
 15510  001F08  1068               	iorwf	_down+1,w,c
 15511  001F0A  B4D8               	btfsc	status,2,c
 15512  001F0C  D011               	goto	i2l7590
 15513                           
 15514                           ;UI.c: 242: change_state_to_menu_23();
 15515  001F0E  ECBE  F020         	call	_change_state_to_menu_23	;wreg free
 15516                           
 15517                           ;UI.c: 243: }
 15518  001F12  D120               	goto	i2l254
 15519  001F14                     i2l7582:
 15520                           
 15521                           ;UI.c: 250: if(up){
 15522  001F14  5077               	movf	_up,w,c
 15523  001F16  1078               	iorwf	_up+1,w,c
 15524  001F18  B4D8               	btfsc	status,2,c
 15525  001F1A  D003               	goto	i2l7586
 15526                           
 15527                           ;UI.c: 251: change_state_to_menu_11();
 15528  001F1C  ECD6  F020         	call	_change_state_to_menu_11	;wreg free
 15529                           
 15530                           ;UI.c: 252: }
 15531  001F20  D119               	goto	i2l254
 15532  001F22                     i2l7586:
 15533                           
 15534                           ;UI.c: 253: else if(down){
 15535  001F22  5067               	movf	_down,w,c
 15536  001F24  1068               	iorwf	_down+1,w,c
 15537  001F26  B4D8               	btfsc	status,2,c
 15538  001F28  D003               	goto	i2l7590
 15539                           
 15540                           ;UI.c: 254: change_state_to_menu_23();
 15541  001F2A  ECBE  F020         	call	_change_state_to_menu_23	;wreg free
 15542                           
 15543                           ;UI.c: 255: }
 15544  001F2E  D112               	goto	i2l254
 15545  001F30                     i2l7590:
 15546                           
 15547                           ;UI.c: 256: else if(enter){
 15548  001F30  5069               	movf	_enter,w,c
 15549  001F32  106A               	iorwf	_enter+1,w,c
 15550  001F34  B4D8               	btfsc	status,2,c
 15551  001F36  D10E               	goto	i2l254
 15552                           
 15553                           ;UI.c: 257: machine_state = Sorting_state;
 15554  001F38  0E01               	movlw	1
 15555  001F3A  0100               	movlb	0	; () banked
 15556  001F3C  6FFC               	movwf	_machine_state& (0+255),b
 15557                           
 15558                           ; BSR set to: 0
 15559                           ;UI.c: 258: }
 15560                           ;UI.c: 259: break;
 15561                           
 15562                           ; BSR set to: 0
 15563                           
 15564                           ; BSR set to: 0
 15565  001F3E  D10A               	goto	i2l254
 15566  001F40                     i2l7594:
 15567                           
 15568                           ;UI.c: 262: if(up){
 15569  001F40  5077               	movf	_up,w,c
 15570  001F42  1078               	iorwf	_up+1,w,c
 15571  001F44  B4D8               	btfsc	status,2,c
 15572  001F46  D003               	goto	i2l7598
 15573                           
 15574                           ;UI.c: 263: change_state_to_menu_22();
 15575  001F48  EC8E  F020         	call	i2_change_state_to_menu_22	;wreg free
 15576                           
 15577                           ;UI.c: 264: }
 15578  001F4C  D103               	goto	i2l254
 15579  001F4E                     i2l7598:
 15580                           
 15581                           ;UI.c: 265: else if(down){
 15582  001F4E  5067               	movf	_down,w,c
 15583  001F50  1068               	iorwf	_down+1,w,c
 15584  001F52  B4D8               	btfsc	status,2,c
 15585  001F54  D003               	goto	i2l7602
 15586                           
 15587                           ;UI.c: 266: change_state_to_menu_11();
 15588  001F56  ECD6  F020         	call	_change_state_to_menu_11	;wreg free
 15589                           
 15590                           ;UI.c: 267: }
 15591  001F5A  D0FC               	goto	i2l254
 15592  001F5C                     i2l7602:
 15593                           
 15594                           ;UI.c: 268: else if(enter){
 15595  001F5C  5069               	movf	_enter,w,c
 15596  001F5E  106A               	iorwf	_enter+1,w,c
 15597  001F60  B4D8               	btfsc	status,2,c
 15598  001F62  D0F8               	goto	i2l254
 15599                           
 15600                           ;UI.c: 269: change_state_to_logs_11();
 15601  001F64  EC4E  F021         	call	_change_state_to_logs_11	;wreg free
 15602                           
 15603                           ;UI.c: 270: }
 15604                           ;UI.c: 271: break;
 15605  001F68  D0F5               	goto	i2l254
 15606  001F6A                     i2l7606:
 15607                           
 15608                           ;UI.c: 274: if(up){
 15609  001F6A  5077               	movf	_up,w,c
 15610  001F6C  1078               	iorwf	_up+1,w,c
 15611  001F6E  B4D8               	btfsc	status,2,c
 15612  001F70  D003               	goto	i2l7610
 15613                           
 15614                           ;UI.c: 275: change_state_to_logs_34();
 15615  001F72  ECEE  F020         	call	_change_state_to_logs_34	;wreg free
 15616                           
 15617                           ;UI.c: 276: }
 15618  001F76  D0EE               	goto	i2l254
 15619  001F78                     i2l7610:
 15620                           
 15621                           ;UI.c: 277: else if(down){
 15622  001F78  5067               	movf	_down,w,c
 15623  001F7A  1068               	iorwf	_down+1,w,c
 15624  001F7C  B4D8               	btfsc	status,2,c
 15625  001F7E  D003               	goto	i2l7614
 15626                           
 15627                           ;UI.c: 278: change_state_to_logs_12();
 15628  001F80  EC36  F021         	call	_change_state_to_logs_12	;wreg free
 15629                           
 15630                           ;UI.c: 279: }
 15631  001F84  D0E7               	goto	i2l254
 15632  001F86                     i2l7614:
 15633                           
 15634                           ;UI.c: 280: else if(enter){
 15635  001F86  5069               	movf	_enter,w,c
 15636  001F88  106A               	iorwf	_enter+1,w,c
 15637  001F8A  B4D8               	btfsc	status,2,c
 15638  001F8C  D007               	goto	i2l7618
 15639                           
 15640                           ;UI.c: 281: dispLogs(1);
 15641  001F8E  0E00               	movlw	0
 15642  001F90  6E13               	movwf	dispLogs@myLog+1,c
 15643  001F92  0E01               	movlw	1
 15644  001F94  6E12               	movwf	dispLogs@myLog,c
 15645  001F96  EC35  F022         	call	_dispLogs	;wreg free
 15646                           
 15647                           ;UI.c: 282: }
 15648  001F9A  D0DC               	goto	i2l254
 15649  001F9C                     i2l7618:
 15650                           
 15651                           ;UI.c: 283: else if(back){
 15652  001F9C  505B               	movf	_back,w,c
 15653  001F9E  105C               	iorwf	_back+1,w,c
 15654  001FA0  B4D8               	btfsc	status,2,c
 15655  001FA2  D0D8               	goto	i2l254
 15656                           
 15657                           ;UI.c: 284: change_state_to_menu_23();
 15658  001FA4  ECBE  F020         	call	_change_state_to_menu_23	;wreg free
 15659                           
 15660                           ;UI.c: 285: }
 15661                           ;UI.c: 286: break;
 15662  001FA8  D0D5               	goto	i2l254
 15663  001FAA                     i2l7622:
 15664                           
 15665                           ;UI.c: 289: if(up){
 15666  001FAA  5077               	movf	_up,w,c
 15667  001FAC  1078               	iorwf	_up+1,w,c
 15668  001FAE  B4D8               	btfsc	status,2,c
 15669  001FB0  D003               	goto	i2l7626
 15670                           
 15671                           ;UI.c: 290: change_state_to_logs_11();
 15672  001FB2  EC4E  F021         	call	_change_state_to_logs_11	;wreg free
 15673                           
 15674                           ;UI.c: 291: }
 15675  001FB6  D0CE               	goto	i2l254
 15676  001FB8                     i2l7626:
 15677                           
 15678                           ;UI.c: 292: else if(down){
 15679  001FB8  5067               	movf	_down,w,c
 15680  001FBA  1068               	iorwf	_down+1,w,c
 15681  001FBC  B4D8               	btfsc	status,2,c
 15682  001FBE  D003               	goto	i2l7630
 15683                           
 15684                           ;UI.c: 293: change_state_to_logs_23();
 15685  001FC0  EC7D  F021         	call	_change_state_to_logs_23	;wreg free
 15686                           
 15687                           ;UI.c: 294: }
 15688  001FC4  D0C7               	goto	i2l254
 15689  001FC6                     i2l7630:
 15690                           
 15691                           ;UI.c: 295: else if(enter){
 15692  001FC6  5069               	movf	_enter,w,c
 15693  001FC8  106A               	iorwf	_enter+1,w,c
 15694  001FCA  B4D8               	btfsc	status,2,c
 15695  001FCC  D007               	goto	i2l7634
 15696                           
 15697                           ;UI.c: 296: dispLogs(2);
 15698  001FCE  0E00               	movlw	0
 15699  001FD0  6E13               	movwf	dispLogs@myLog+1,c
 15700  001FD2  0E02               	movlw	2
 15701  001FD4  6E12               	movwf	dispLogs@myLog,c
 15702  001FD6  EC35  F022         	call	_dispLogs	;wreg free
 15703                           
 15704                           ;UI.c: 297: }
 15705  001FDA  D0BC               	goto	i2l254
 15706  001FDC                     i2l7634:
 15707                           
 15708                           ;UI.c: 298: else if(back){
 15709  001FDC  505B               	movf	_back,w,c
 15710  001FDE  105C               	iorwf	_back+1,w,c
 15711  001FE0  B4D8               	btfsc	status,2,c
 15712  001FE2  D0B8               	goto	i2l254
 15713                           
 15714                           ;UI.c: 299: change_state_to_menu_23();
 15715  001FE4  ECBE  F020         	call	_change_state_to_menu_23	;wreg free
 15716                           
 15717                           ;UI.c: 300: }
 15718                           ;UI.c: 301: break;
 15719  001FE8  D0B5               	goto	i2l254
 15720  001FEA                     i2l7638:
 15721                           
 15722                           ;UI.c: 304: if(up){
 15723  001FEA  5077               	movf	_up,w,c
 15724  001FEC  1078               	iorwf	_up+1,w,c
 15725  001FEE  B4D8               	btfsc	status,2,c
 15726  001FF0  D003               	goto	i2l7642
 15727                           
 15728                           ;UI.c: 305: change_state_to_logs_11();
 15729  001FF2  EC4E  F021         	call	_change_state_to_logs_11	;wreg free
 15730                           
 15731                           ;UI.c: 306: }
 15732  001FF6  D0AE               	goto	i2l254
 15733  001FF8                     i2l7642:
 15734                           
 15735                           ;UI.c: 307: else if(down){
 15736  001FF8  5067               	movf	_down,w,c
 15737  001FFA  1068               	iorwf	_down+1,w,c
 15738  001FFC  B4D8               	btfsc	status,2,c
 15739  001FFE  D003               	goto	i2l7646
 15740                           
 15741                           ;UI.c: 308: change_state_to_logs_23();
 15742  002000  EC7D  F021         	call	_change_state_to_logs_23	;wreg free
 15743                           
 15744                           ;UI.c: 309: }
 15745  002004  D0A7               	goto	i2l254
 15746  002006                     i2l7646:
 15747                           
 15748                           ;UI.c: 310: else if(enter){
 15749  002006  5069               	movf	_enter,w,c
 15750  002008  106A               	iorwf	_enter+1,w,c
 15751  00200A  B4D8               	btfsc	status,2,c
 15752  00200C  D007               	goto	i2l7650
 15753                           
 15754                           ;UI.c: 311: dispLogs(2);
 15755  00200E  0E00               	movlw	0
 15756  002010  6E13               	movwf	dispLogs@myLog+1,c
 15757  002012  0E02               	movlw	2
 15758  002014  6E12               	movwf	dispLogs@myLog,c
 15759  002016  EC35  F022         	call	_dispLogs	;wreg free
 15760                           
 15761                           ;UI.c: 312: }
 15762  00201A  D09C               	goto	i2l254
 15763  00201C                     i2l7650:
 15764                           
 15765                           ;UI.c: 313: else if(back){
 15766  00201C  505B               	movf	_back,w,c
 15767  00201E  105C               	iorwf	_back+1,w,c
 15768  002020  B4D8               	btfsc	status,2,c
 15769  002022  D098               	goto	i2l254
 15770                           
 15771                           ;UI.c: 314: change_state_to_menu_23();
 15772  002024  ECBE  F020         	call	_change_state_to_menu_23	;wreg free
 15773                           
 15774                           ;UI.c: 315: }
 15775                           ;UI.c: 316: break;
 15776  002028  D095               	goto	i2l254
 15777  00202A                     i2l7654:
 15778                           
 15779                           ;UI.c: 319: if(up){
 15780  00202A  5077               	movf	_up,w,c
 15781  00202C  1078               	iorwf	_up+1,w,c
 15782  00202E  B4D8               	btfsc	status,2,c
 15783  002030  D003               	goto	i2l7658
 15784                           
 15785                           ;UI.c: 320: change_state_to_logs_22();
 15786  002032  EC1E  F021         	call	_change_state_to_logs_22	;wreg free
 15787                           
 15788                           ;UI.c: 321: }
 15789  002036  D08E               	goto	i2l254
 15790  002038                     i2l7658:
 15791                           
 15792                           ;UI.c: 322: else if(down){
 15793  002038  5067               	movf	_down,w,c
 15794  00203A  1068               	iorwf	_down+1,w,c
 15795  00203C  B4D8               	btfsc	status,2,c
 15796  00203E  D003               	goto	i2l7662
 15797                           
 15798                           ;UI.c: 323: change_state_to_logs_34();
 15799  002040  ECEE  F020         	call	_change_state_to_logs_34	;wreg free
 15800                           
 15801                           ;UI.c: 324: }
 15802  002044  D087               	goto	i2l254
 15803  002046                     i2l7662:
 15804                           
 15805                           ;UI.c: 325: else if(enter){
 15806  002046  5069               	movf	_enter,w,c
 15807  002048  106A               	iorwf	_enter+1,w,c
 15808  00204A  B4D8               	btfsc	status,2,c
 15809  00204C  D007               	goto	i2l7666
 15810                           
 15811                           ;UI.c: 326: dispLogs(3);
 15812  00204E  0E00               	movlw	0
 15813  002050  6E13               	movwf	dispLogs@myLog+1,c
 15814  002052  0E03               	movlw	3
 15815  002054  6E12               	movwf	dispLogs@myLog,c
 15816  002056  EC35  F022         	call	_dispLogs	;wreg free
 15817                           
 15818                           ;UI.c: 327: }
 15819  00205A  D07C               	goto	i2l254
 15820  00205C                     i2l7666:
 15821                           
 15822                           ;UI.c: 328: else if(back){
 15823  00205C  505B               	movf	_back,w,c
 15824  00205E  105C               	iorwf	_back+1,w,c
 15825  002060  B4D8               	btfsc	status,2,c
 15826  002062  D078               	goto	i2l254
 15827                           
 15828                           ;UI.c: 329: change_state_to_menu_23();
 15829  002064  ECBE  F020         	call	_change_state_to_menu_23	;wreg free
 15830                           
 15831                           ;UI.c: 330: }
 15832                           ;UI.c: 331: break;
 15833  002068  D075               	goto	i2l254
 15834  00206A                     i2l7670:
 15835                           
 15836                           ;UI.c: 334: if(up){
 15837  00206A  5077               	movf	_up,w,c
 15838  00206C  1078               	iorwf	_up+1,w,c
 15839  00206E  B4D8               	btfsc	status,2,c
 15840  002070  D003               	goto	i2l7674
 15841                           
 15842                           ;UI.c: 335: change_state_to_logs_22();
 15843  002072  EC1E  F021         	call	_change_state_to_logs_22	;wreg free
 15844                           
 15845                           ;UI.c: 336: }
 15846  002076  D06E               	goto	i2l254
 15847  002078                     i2l7674:
 15848                           
 15849                           ;UI.c: 337: else if(down){
 15850  002078  5067               	movf	_down,w,c
 15851  00207A  1068               	iorwf	_down+1,w,c
 15852  00207C  B4D8               	btfsc	status,2,c
 15853  00207E  D003               	goto	i2l7678
 15854                           
 15855                           ;UI.c: 338: change_state_to_logs_34();
 15856  002080  ECEE  F020         	call	_change_state_to_logs_34	;wreg free
 15857                           
 15858                           ;UI.c: 339: }
 15859  002084  D067               	goto	i2l254
 15860  002086                     i2l7678:
 15861                           
 15862                           ;UI.c: 340: else if(enter){
 15863  002086  5069               	movf	_enter,w,c
 15864  002088  106A               	iorwf	_enter+1,w,c
 15865  00208A  B4D8               	btfsc	status,2,c
 15866  00208C  D007               	goto	i2l7682
 15867                           
 15868                           ;UI.c: 341: dispLogs(3);
 15869  00208E  0E00               	movlw	0
 15870  002090  6E13               	movwf	dispLogs@myLog+1,c
 15871  002092  0E03               	movlw	3
 15872  002094  6E12               	movwf	dispLogs@myLog,c
 15873  002096  EC35  F022         	call	_dispLogs	;wreg free
 15874                           
 15875                           ;UI.c: 342: }
 15876  00209A  D05C               	goto	i2l254
 15877  00209C                     i2l7682:
 15878                           
 15879                           ;UI.c: 343: else if(back){
 15880  00209C  505B               	movf	_back,w,c
 15881  00209E  105C               	iorwf	_back+1,w,c
 15882  0020A0  B4D8               	btfsc	status,2,c
 15883  0020A2  D058               	goto	i2l254
 15884                           
 15885                           ;UI.c: 344: change_state_to_menu_23();
 15886  0020A4  ECBE  F020         	call	_change_state_to_menu_23	;wreg free
 15887                           
 15888                           ;UI.c: 345: }
 15889                           ;UI.c: 346: break;
 15890  0020A8  D055               	goto	i2l254
 15891  0020AA                     i2l7686:
 15892                           
 15893                           ;UI.c: 349: if(up){
 15894  0020AA  5077               	movf	_up,w,c
 15895  0020AC  1078               	iorwf	_up+1,w,c
 15896  0020AE  B4D8               	btfsc	status,2,c
 15897  0020B0  D003               	goto	i2l7690
 15898                           
 15899                           ;UI.c: 350: change_state_to_logs_33();
 15900  0020B2  EC06  F021         	call	_change_state_to_logs_33	;wreg free
 15901                           
 15902                           ;UI.c: 351: }
 15903  0020B6  D04E               	goto	i2l254
 15904  0020B8                     i2l7690:
 15905                           
 15906                           ;UI.c: 352: else if(down){
 15907  0020B8  5067               	movf	_down,w,c
 15908  0020BA  1068               	iorwf	_down+1,w,c
 15909  0020BC  B4D8               	btfsc	status,2,c
 15910  0020BE  D003               	goto	i2l7694
 15911                           
 15912                           ;UI.c: 353: change_state_to_logs_11();
 15913  0020C0  EC4E  F021         	call	_change_state_to_logs_11	;wreg free
 15914                           
 15915                           ;UI.c: 354: }
 15916  0020C4  D047               	goto	i2l254
 15917  0020C6                     i2l7694:
 15918                           
 15919                           ;UI.c: 355: else if(enter){
 15920  0020C6  5069               	movf	_enter,w,c
 15921  0020C8  106A               	iorwf	_enter+1,w,c
 15922  0020CA  B4D8               	btfsc	status,2,c
 15923  0020CC  D007               	goto	i2l7698
 15924                           
 15925                           ;UI.c: 356: dispLogs(4);
 15926  0020CE  0E00               	movlw	0
 15927  0020D0  6E13               	movwf	dispLogs@myLog+1,c
 15928  0020D2  0E04               	movlw	4
 15929  0020D4  6E12               	movwf	dispLogs@myLog,c
 15930  0020D6  EC35  F022         	call	_dispLogs	;wreg free
 15931                           
 15932                           ;UI.c: 357: }
 15933  0020DA  D03C               	goto	i2l254
 15934  0020DC                     i2l7698:
 15935                           
 15936                           ;UI.c: 358: else if(back){
 15937  0020DC  505B               	movf	_back,w,c
 15938  0020DE  105C               	iorwf	_back+1,w,c
 15939  0020E0  B4D8               	btfsc	status,2,c
 15940  0020E2  D038               	goto	i2l254
 15941                           
 15942                           ;UI.c: 359: change_state_to_menu_23();
 15943  0020E4  ECBE  F020         	call	_change_state_to_menu_23	;wreg free
 15944                           
 15945                           ;UI.c: 365: }
 15946                           
 15947                           ;UI.c: 364: break;
 15948                           
 15949                           ;UI.c: 363: default:
 15950                           
 15951                           ;UI.c: 360: }
 15952                           ;UI.c: 361: break;
 15953  0020E8  D035               	goto	i2l254
 15954  0020EA                     i2l7704:
 15955  0020EA  C0DE  F043         	movff	_cur_state,??_updateMenu
 15956  0020EE  C0DF  F044         	movff	_cur_state+1,??_updateMenu+1
 15957                           
 15958                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 15959                           ; Switch size 1, requested type "space"
 15960                           ; Number of cases is 3, Range of values is 0 to 4
 15961                           ; switch strategies available:
 15962                           ; Name         Instructions Cycles
 15963                           ; simple_byte           10     6 (average)
 15964                           ;	Chosen strategy is simple_byte
 15965  0020F2  5044               	movf	??_updateMenu+1,w,c
 15966  0020F4  0A00               	xorlw	0	; case 0
 15967  0020F6  B4D8               	btfsc	status,2,c
 15968  0020F8  D007               	goto	i2l8288
 15969  0020FA  0A03               	xorlw	3	; case 3
 15970  0020FC  B4D8               	btfsc	status,2,c
 15971  0020FE  D015               	goto	i2l8290
 15972  002100  0A07               	xorlw	7	; case 4
 15973  002102  B4D8               	btfsc	status,2,c
 15974  002104  D020               	goto	i2l8292
 15975  002106  D026               	goto	i2l254
 15976  002108                     i2l8288:
 15977                           
 15978                           ; Switch size 1, requested type "space"
 15979                           ; Number of cases is 5, Range of values is 0 to 23
 15980                           ; switch strategies available:
 15981                           ; Name         Instructions Cycles
 15982                           ; simple_byte           16     9 (average)
 15983                           ;	Chosen strategy is simple_byte
 15984  002108  5043               	movf	??_updateMenu,w,c
 15985  00210A  0A00               	xorlw	0	; case 0
 15986  00210C  B4D8               	btfsc	status,2,c
 15987  00210E  D6DC               	goto	i2l7556
 15988  002110  0A0B               	xorlw	11	; case 11
 15989  002112  B4D8               	btfsc	status,2,c
 15990  002114  D6DC               	goto	i2l7558
 15991  002116  0A07               	xorlw	7	; case 12
 15992  002118  B4D8               	btfsc	status,2,c
 15993  00211A  D6EE               	goto	i2l7570
 15994  00211C  0A1A               	xorlw	26	; case 22
 15995  00211E  B4D8               	btfsc	status,2,c
 15996  002120  D6F9               	goto	i2l7582
 15997  002122  0A01               	xorlw	1	; case 23
 15998  002124  B4D8               	btfsc	status,2,c
 15999  002126  D70C               	goto	i2l7594
 16000  002128  D015               	goto	i2l254
 16001  00212A                     i2l8290:
 16002                           
 16003                           ; Switch size 1, requested type "space"
 16004                           ; Number of cases is 4, Range of values is 243 to 255
 16005                           ; switch strategies available:
 16006                           ; Name         Instructions Cycles
 16007                           ; simple_byte           13     7 (average)
 16008                           ;	Chosen strategy is simple_byte
 16009  00212A  5043               	movf	??_updateMenu,w,c
 16010  00212C  0AF3               	xorlw	243	; case 243
 16011  00212E  B4D8               	btfsc	status,2,c
 16012  002130  D71C               	goto	i2l7606
 16013  002132  0A07               	xorlw	7	; case 244
 16014  002134  B4D8               	btfsc	status,2,c
 16015  002136  D739               	goto	i2l7622
 16016  002138  0A0A               	xorlw	10	; case 254
 16017  00213A  B4D8               	btfsc	status,2,c
 16018  00213C  D756               	goto	i2l7638
 16019  00213E  0A01               	xorlw	1	; case 255
 16020  002140  B4D8               	btfsc	status,2,c
 16021  002142  D773               	goto	i2l7654
 16022  002144  D007               	goto	i2l254
 16023  002146                     i2l8292:
 16024                           
 16025                           ; Switch size 1, requested type "space"
 16026                           ; Number of cases is 2, Range of values is 9 to 10
 16027                           ; switch strategies available:
 16028                           ; Name         Instructions Cycles
 16029                           ; simple_byte            7     4 (average)
 16030                           ;	Chosen strategy is simple_byte
 16031  002146  5043               	movf	??_updateMenu,w,c
 16032  002148  0A09               	xorlw	9	; case 9
 16033  00214A  B4D8               	btfsc	status,2,c
 16034  00214C  D78E               	goto	i2l7670
 16035  00214E  0A03               	xorlw	3	; case 10
 16036  002150  B4D8               	btfsc	status,2,c
 16037  002152  D7AB               	goto	i2l7686
 16038  002154                     i2l254:
 16039                           
 16040                           ;UI.c: 366: }
 16041                           ;UI.c: 367: (INTCONbits.GIE = 1);
 16042  002154  8EF2               	bsf	intcon,7,c	;volatile
 16043  002156  0012               	return		;funcret
 16044  002158                     __end_of_updateMenu:
 16045                           	opt stack 0
 16046                           pclatu	equ	0xFFB
 16047                           pclath	equ	0xFFA
 16048                           tblptru	equ	0xFF8
 16049                           tblptrh	equ	0xFF7
 16050                           tblptrl	equ	0xFF6
 16051                           tablat	equ	0xFF5
 16052                           prodh	equ	0xFF4
 16053                           prodl	equ	0xFF3
 16054                           intcon	equ	0xFF2
 16055                           intcon2	equ	0xFF1
 16056                           intcon3	equ	0xFF0
 16057                           indf0	equ	0xFEF
 16058                           postinc0	equ	0xFEE
 16059                           fsr0h	equ	0xFEA
 16060                           fsr0l	equ	0xFE9
 16061                           wreg	equ	0xFE8
 16062                           postdec1	equ	0xFE5
 16063                           fsr1h	equ	0xFE2
 16064                           fsr1l	equ	0xFE1
 16065                           indf2	equ	0xFDF
 16066                           postinc2	equ	0xFDE
 16067                           postdec2	equ	0xFDD
 16068                           fsr2h	equ	0xFDA
 16069                           fsr2l	equ	0xFD9
 16070                           status	equ	0xFD8
 16071                           
 16072 ;; *************** function i2_change_state_to_menu_start *****************
 16073 ;; Defined at:
 16074 ;;		line 472 in file "UI.c"
 16075 ;; Parameters:    Size  Location     Type
 16076 ;;		None
 16077 ;; Auto vars:     Size  Location     Type
 16078 ;;		None
 16079 ;; Return value:  Size  Location     Type
 16080 ;;                  1    wreg      void 
 16081 ;; Registers used:
 16082 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16083 ;; Tracked objects:
 16084 ;;		On entry : 0/0
 16085 ;;		On exit  : 0/0
 16086 ;;		Unchanged: 0/0
 16087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16091 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16092 ;;Total ram usage:        0 bytes
 16093 ;; Hardware stack levels used:    1
 16094 ;; Hardware stack levels required when called:    4
 16095 ;; This function calls:
 16096 ;;		i2_lcdInst
 16097 ;;		i2_printRTC
 16098 ;;		i2_printf
 16099 ;; This function is called by:
 16100 ;;		_updateMenu
 16101 ;; This function uses a non-reentrant model
 16102 ;;
 16103                           
 16104                           	psect	text59
 16105  0043D2                     __ptext59:
 16106                           	opt stack 0
 16107  0043D2                     i2_change_state_to_menu_start:
 16108                           	opt stack 18
 16109                           
 16110                           ;UI.c: 473: cur_state = 0;
 16111                           
 16112                           ;incstack = 0
 16113  0043D2  0E00               	movlw	0
 16114  0043D4  0100               	movlb	0	; () banked
 16115  0043D6  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16116  0043D8  0E00               	movlw	0
 16117  0043DA  6FDE               	movwf	_cur_state& (0+255),b
 16118                           
 16119                           ; BSR set to: 0
 16120                           ;UI.c: 475: lcdInst(0b10000000);;
 16121  0043DC  0E80               	movlw	128
 16122  0043DE  ECC3  F022         	call	i2_lcdInst
 16123                           
 16124                           ;UI.c: 476: printRTC();
 16125  0043E2  ECAC  F010         	call	i2_printRTC	;wreg free
 16126                           
 16127                           ;UI.c: 477: lcdInst(0b11000000);;
 16128  0043E6  0EC0               	movlw	192
 16129  0043E8  ECC3  F022         	call	i2_lcdInst
 16130                           
 16131                           ;UI.c: 478: printf("PUSH TO CONTINUE");
 16132  0043EC  0E1F               	movlw	low STR_30
 16133  0043EE  6E0D               	movwf	i2printf@f,c
 16134  0043F0  0EFE               	movlw	high STR_30
 16135  0043F2  6E0E               	movwf	i2printf@f+1,c
 16136  0043F4  ECB8  F00A         	call	i2_printf	;wreg free
 16137  0043F8  0012               	return		;funcret
 16138  0043FA                     __end_ofi2_change_state_to_menu_start:
 16139                           	opt stack 0
 16140                           pclatu	equ	0xFFB
 16141                           pclath	equ	0xFFA
 16142                           tblptru	equ	0xFF8
 16143                           tblptrh	equ	0xFF7
 16144                           tblptrl	equ	0xFF6
 16145                           tablat	equ	0xFF5
 16146                           prodh	equ	0xFF4
 16147                           prodl	equ	0xFF3
 16148                           intcon	equ	0xFF2
 16149                           intcon2	equ	0xFF1
 16150                           intcon3	equ	0xFF0
 16151                           indf0	equ	0xFEF
 16152                           postinc0	equ	0xFEE
 16153                           fsr0h	equ	0xFEA
 16154                           fsr0l	equ	0xFE9
 16155                           wreg	equ	0xFE8
 16156                           postdec1	equ	0xFE5
 16157                           fsr1h	equ	0xFE2
 16158                           fsr1l	equ	0xFE1
 16159                           indf2	equ	0xFDF
 16160                           postinc2	equ	0xFDE
 16161                           postdec2	equ	0xFDD
 16162                           fsr2h	equ	0xFDA
 16163                           fsr2l	equ	0xFD9
 16164                           status	equ	0xFD8
 16165                           
 16166 ;; *************** function i2_printRTC *****************
 16167 ;; Defined at:
 16168 ;;		line 63 in file "RTC.c"
 16169 ;; Parameters:    Size  Location     Type
 16170 ;;		None
 16171 ;; Auto vars:     Size  Location     Type
 16172 ;;  printRTC       14   44[COMRAM] int [7]
 16173 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 16174 ;;  printRTC        2   64[COMRAM] int 
 16175 ;;  printRTC        2   58[COMRAM] int 
 16176 ;; Return value:  Size  Location     Type
 16177 ;;                  1    wreg      void 
 16178 ;; Registers used:
 16179 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16180 ;; Tracked objects:
 16181 ;;		On entry : 0/0
 16182 ;;		On exit  : 0/0
 16183 ;;		Unchanged: 0/0
 16184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16186 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16187 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16188 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16189 ;;Total ram usage:       25 bytes
 16190 ;; Hardware stack levels used:    1
 16191 ;; Hardware stack levels required when called:    3
 16192 ;; This function calls:
 16193 ;;		i2_getRTC
 16194 ;;		i2_lcdInst
 16195 ;;		i2_printf
 16196 ;;		i2_strcpy
 16197 ;; This function is called by:
 16198 ;;		i2_change_state_to_menu_start
 16199 ;; This function uses a non-reentrant model
 16200 ;;
 16201                           
 16202                           	psect	text60
 16203  002158                     __ptext60:
 16204                           	opt stack 0
 16205  002158                     i2_printRTC:
 16206                           	opt stack 18
 16207                           
 16208                           ;RTC.c: 64: getRTC();
 16209                           
 16210                           ;incstack = 0
 16211  002158  EC4A  F01D         	call	i2_getRTC	;wreg free
 16212                           
 16213                           ;RTC.c: 65: char month[] = "MMM";
 16214  00215C  C131  F03D         	movff	printRTC@F3213,i2printRTC@month
 16215  002160  C132  F03E         	movff	printRTC@F3213+1,i2printRTC@month+1
 16216  002164  C133  F03F         	movff	printRTC@F3213+2,i2printRTC@month+2
 16217  002168  C134  F040         	movff	printRTC@F3213+3,i2printRTC@month+3
 16218                           
 16219                           ;RTC.c: 66: int INT_time[7];
 16220                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 16221  00216C  0E00               	movlw	0
 16222  00216E  6E42               	movwf	i2printRTC@i+1,c
 16223  002170  0E00               	movlw	0
 16224  002172  6E41               	movwf	i2printRTC@i,c
 16225  002174  BE42               	btfsc	i2printRTC@i+1,7,c
 16226  002176  D006               	goto	i2l6022
 16227  002178  5042               	movf	i2printRTC@i+1,w,c
 16228  00217A  E135               	bnz	i2l593
 16229  00217C  0E07               	movlw	7
 16230  00217E  5C41               	subwf	i2printRTC@i,w,c
 16231  002180  B0D8               	btfsc	status,0,c
 16232  002182  D031               	goto	i2l593
 16233  002184                     i2l6022:
 16234                           
 16235                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 16236  002184  0E24               	movlw	low _time
 16237  002186  2441               	addwf	i2printRTC@i,w,c
 16238  002188  6ED9               	movwf	fsr2l,c
 16239  00218A  0E01               	movlw	high _time
 16240  00218C  2042               	addwfc	i2printRTC@i+1,w,c
 16241  00218E  6EDA               	movwf	fsr2h,c
 16242  002190  50DF               	movf	indf2,w,c
 16243  002192  6E2A               	movwf	??i2_printRTC& (0+255),c
 16244  002194  3A2A               	swapf	??i2_printRTC,f,c
 16245  002196  0E0F               	movlw	15
 16246  002198  162A               	andwf	??i2_printRTC,f,c
 16247  00219A  0E0F               	movlw	15
 16248  00219C  162A               	andwf	??i2_printRTC,f,c
 16249  00219E  502A               	movf	??i2_printRTC,w,c
 16250  0021A0  0D0A               	mullw	10
 16251  0021A2  0E24               	movlw	low _time
 16252  0021A4  2441               	addwf	i2printRTC@i,w,c
 16253  0021A6  6ED9               	movwf	fsr2l,c
 16254  0021A8  0E01               	movlw	high _time
 16255  0021AA  2042               	addwfc	i2printRTC@i+1,w,c
 16256  0021AC  6EDA               	movwf	fsr2h,c
 16257  0021AE  50DF               	movf	indf2,w,c
 16258  0021B0  0B0F               	andlw	15
 16259  0021B2  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 16260  0021B4  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 16261  0021B6  50F3               	movf	prodl,w,c
 16262  0021B8  262B               	addwf	??i2_printRTC+1,f,c
 16263  0021BA  50F4               	movf	prodh,w,c
 16264  0021BC  222C               	addwfc	??i2_printRTC+2,f,c
 16265  0021BE  90D8               	bcf	status,0,c
 16266  0021C0  3441               	rlcf	i2printRTC@i,w,c
 16267  0021C2  6ED9               	movwf	fsr2l,c
 16268  0021C4  3442               	rlcf	i2printRTC@i+1,w,c
 16269  0021C6  6EDA               	movwf	fsr2h,c
 16270  0021C8  0E2D               	movlw	low i2printRTC@INT_time
 16271  0021CA  26D9               	addwf	fsr2l,f,c
 16272  0021CC  0E00               	movlw	high i2printRTC@INT_time
 16273  0021CE  22DA               	addwfc	fsr2h,f,c
 16274  0021D0  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 16275  0021D4  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 16276  0021D8  4A41               	infsnz	i2printRTC@i,f,c
 16277  0021DA  2A42               	incf	i2printRTC@i+1,f,c
 16278  0021DC  BE42               	btfsc	i2printRTC@i+1,7,c
 16279  0021DE  D7D2               	goto	i2l6022
 16280  0021E0  5042               	movf	i2printRTC@i+1,w,c
 16281  0021E2  E101               	bnz	i2u455_40
 16282  0021E4  D7CB               	goto	L10
 16283  0021E6                     i2u455_40:
 16284  0021E6                     i2l593:
 16285                           
 16286                           ;RTC.c: 69: }
 16287                           ;RTC.c: 70: int RTC_month = INT_time[5];
 16288  0021E6  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 16289  0021EA  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 16290                           
 16291                           ;RTC.c: 71: switch(RTC_month){
 16292  0021EE  D084               	goto	i2l6054
 16293  0021F0                     i2l6028:
 16294                           
 16295                           ;RTC.c: 73: strcpy(month, "JAN");
 16296  0021F0  0E3D               	movlw	low i2printRTC@month
 16297  0021F2  6E01               	movwf	i2strcpy@to,c
 16298  0021F4  0E00               	movlw	high i2printRTC@month
 16299  0021F6  6E02               	movwf	i2strcpy@to+1,c
 16300  0021F8  0EDA               	movlw	low STR_8
 16301  0021FA  6E03               	movwf	i2strcpy@from,c
 16302  0021FC  0EFF               	movlw	high STR_8
 16303  0021FE  6E04               	movwf	i2strcpy@from+1,c
 16304  002200  EC75  F020         	call	i2_strcpy	;wreg free
 16305                           
 16306                           ;RTC.c: 74: break;
 16307  002204  D0A6               	goto	i2l6056
 16308  002206                     i2l6030:
 16309                           
 16310                           ;RTC.c: 76: strcpy(month, "FEB");
 16311  002206  0E3D               	movlw	low i2printRTC@month
 16312  002208  6E01               	movwf	i2strcpy@to,c
 16313  00220A  0E00               	movlw	high i2printRTC@month
 16314  00220C  6E02               	movwf	i2strcpy@to+1,c
 16315  00220E  0ECA               	movlw	low STR_9
 16316  002210  6E03               	movwf	i2strcpy@from,c
 16317  002212  0EFF               	movlw	high STR_9
 16318  002214  6E04               	movwf	i2strcpy@from+1,c
 16319  002216  EC75  F020         	call	i2_strcpy	;wreg free
 16320                           
 16321                           ;RTC.c: 77: break;
 16322  00221A  D09B               	goto	i2l6056
 16323  00221C                     i2l6032:
 16324                           
 16325                           ;RTC.c: 79: strcpy(month, "MAR");
 16326  00221C  0E3D               	movlw	low i2printRTC@month
 16327  00221E  6E01               	movwf	i2strcpy@to,c
 16328  002220  0E00               	movlw	high i2printRTC@month
 16329  002222  6E02               	movwf	i2strcpy@to+1,c
 16330  002224  0EE6               	movlw	low STR_10
 16331  002226  6E03               	movwf	i2strcpy@from,c
 16332  002228  0EFF               	movlw	high STR_10
 16333  00222A  6E04               	movwf	i2strcpy@from+1,c
 16334  00222C  EC75  F020         	call	i2_strcpy	;wreg free
 16335                           
 16336                           ;RTC.c: 80: break;
 16337  002230  D090               	goto	i2l6056
 16338  002232                     i2l6034:
 16339                           
 16340                           ;RTC.c: 82: strcpy(month, "APR");
 16341  002232  0E3D               	movlw	low i2printRTC@month
 16342  002234  6E01               	movwf	i2strcpy@to,c
 16343  002236  0E00               	movlw	high i2printRTC@month
 16344  002238  6E02               	movwf	i2strcpy@to+1,c
 16345  00223A  0EEA               	movlw	low STR_11
 16346  00223C  6E03               	movwf	i2strcpy@from,c
 16347  00223E  0EFF               	movlw	high STR_11
 16348  002240  6E04               	movwf	i2strcpy@from+1,c
 16349  002242  EC75  F020         	call	i2_strcpy	;wreg free
 16350                           
 16351                           ;RTC.c: 83: break;
 16352  002246  D085               	goto	i2l6056
 16353  002248                     i2l6036:
 16354                           
 16355                           ;RTC.c: 85: strcpy(month, "MAY");
 16356  002248  0E3D               	movlw	low i2printRTC@month
 16357  00224A  6E01               	movwf	i2strcpy@to,c
 16358  00224C  0E00               	movlw	high i2printRTC@month
 16359  00224E  6E02               	movwf	i2strcpy@to+1,c
 16360  002250  0EFA               	movlw	low STR_12
 16361  002252  6E03               	movwf	i2strcpy@from,c
 16362  002254  0EFF               	movlw	high STR_12
 16363  002256  6E04               	movwf	i2strcpy@from+1,c
 16364  002258  EC75  F020         	call	i2_strcpy	;wreg free
 16365                           
 16366                           ;RTC.c: 86: break;
 16367  00225C  D07A               	goto	i2l6056
 16368  00225E                     i2l6038:
 16369                           
 16370                           ;RTC.c: 88: strcpy(month, "JUN");
 16371  00225E  0E3D               	movlw	low i2printRTC@month
 16372  002260  6E01               	movwf	i2strcpy@to,c
 16373  002262  0E00               	movlw	high i2printRTC@month
 16374  002264  6E02               	movwf	i2strcpy@to+1,c
 16375  002266  0EDE               	movlw	low STR_13
 16376  002268  6E03               	movwf	i2strcpy@from,c
 16377  00226A  0EFF               	movlw	high STR_13
 16378  00226C  6E04               	movwf	i2strcpy@from+1,c
 16379  00226E  EC75  F020         	call	i2_strcpy	;wreg free
 16380                           
 16381                           ;RTC.c: 89: break;
 16382  002272  D06F               	goto	i2l6056
 16383  002274                     i2l6040:
 16384                           
 16385                           ;RTC.c: 91: strcpy(month, "JUL");
 16386  002274  0E3D               	movlw	low i2printRTC@month
 16387  002276  6E01               	movwf	i2strcpy@to,c
 16388  002278  0E00               	movlw	high i2printRTC@month
 16389  00227A  6E02               	movwf	i2strcpy@to+1,c
 16390  00227C  0ED6               	movlw	low STR_14
 16391  00227E  6E03               	movwf	i2strcpy@from,c
 16392  002280  0EFF               	movlw	high STR_14
 16393  002282  6E04               	movwf	i2strcpy@from+1,c
 16394  002284  EC75  F020         	call	i2_strcpy	;wreg free
 16395                           
 16396                           ;RTC.c: 92: break;
 16397  002288  D064               	goto	i2l6056
 16398  00228A                     i2l6042:
 16399                           
 16400                           ;RTC.c: 94: strcpy(month, "AUG");
 16401  00228A  0E3D               	movlw	low i2printRTC@month
 16402  00228C  6E01               	movwf	i2strcpy@to,c
 16403  00228E  0E00               	movlw	high i2printRTC@month
 16404  002290  6E02               	movwf	i2strcpy@to+1,c
 16405  002292  0ED2               	movlw	low STR_15
 16406  002294  6E03               	movwf	i2strcpy@from,c
 16407  002296  0EFF               	movlw	high STR_15
 16408  002298  6E04               	movwf	i2strcpy@from+1,c
 16409  00229A  EC75  F020         	call	i2_strcpy	;wreg free
 16410                           
 16411                           ;RTC.c: 95: break;
 16412  00229E  D059               	goto	i2l6056
 16413  0022A0                     i2l6044:
 16414                           
 16415                           ;RTC.c: 97: strcpy(month, "SEP");
 16416  0022A0  0E3D               	movlw	low i2printRTC@month
 16417  0022A2  6E01               	movwf	i2strcpy@to,c
 16418  0022A4  0E00               	movlw	high i2printRTC@month
 16419  0022A6  6E02               	movwf	i2strcpy@to+1,c
 16420  0022A8  0EE2               	movlw	low STR_16
 16421  0022AA  6E03               	movwf	i2strcpy@from,c
 16422  0022AC  0EFF               	movlw	high STR_16
 16423  0022AE  6E04               	movwf	i2strcpy@from+1,c
 16424  0022B0  EC75  F020         	call	i2_strcpy	;wreg free
 16425                           
 16426                           ;RTC.c: 98: break;
 16427  0022B4  D04E               	goto	i2l6056
 16428  0022B6                     i2l6046:
 16429                           
 16430                           ;RTC.c: 100: strcpy(month, "OCT");
 16431  0022B6  0E3D               	movlw	low i2printRTC@month
 16432  0022B8  6E01               	movwf	i2strcpy@to,c
 16433  0022BA  0E00               	movlw	high i2printRTC@month
 16434  0022BC  6E02               	movwf	i2strcpy@to+1,c
 16435  0022BE  0EF2               	movlw	low STR_17
 16436  0022C0  6E03               	movwf	i2strcpy@from,c
 16437  0022C2  0EFF               	movlw	high STR_17
 16438  0022C4  6E04               	movwf	i2strcpy@from+1,c
 16439  0022C6  EC75  F020         	call	i2_strcpy	;wreg free
 16440                           
 16441                           ;RTC.c: 101: break;
 16442  0022CA  D043               	goto	i2l6056
 16443  0022CC                     i2l6048:
 16444                           
 16445                           ;RTC.c: 103: strcpy(month, "NOV");
 16446  0022CC  0E3D               	movlw	low i2printRTC@month
 16447  0022CE  6E01               	movwf	i2strcpy@to,c
 16448  0022D0  0E00               	movlw	high i2printRTC@month
 16449  0022D2  6E02               	movwf	i2strcpy@to+1,c
 16450  0022D4  0EF6               	movlw	low STR_18
 16451  0022D6  6E03               	movwf	i2strcpy@from,c
 16452  0022D8  0EFF               	movlw	high STR_18
 16453  0022DA  6E04               	movwf	i2strcpy@from+1,c
 16454  0022DC  EC75  F020         	call	i2_strcpy	;wreg free
 16455                           
 16456                           ;RTC.c: 104: break;
 16457  0022E0  D038               	goto	i2l6056
 16458  0022E2                     i2l6050:
 16459                           
 16460                           ;RTC.c: 106: strcpy(month, "DEC");
 16461  0022E2  0E3D               	movlw	low i2printRTC@month
 16462  0022E4  6E01               	movwf	i2strcpy@to,c
 16463  0022E6  0E00               	movlw	high i2printRTC@month
 16464  0022E8  6E02               	movwf	i2strcpy@to+1,c
 16465  0022EA  0ECE               	movlw	low STR_19
 16466  0022EC  6E03               	movwf	i2strcpy@from,c
 16467  0022EE  0EFF               	movlw	high STR_19
 16468  0022F0  6E04               	movwf	i2strcpy@from+1,c
 16469  0022F2  EC75  F020         	call	i2_strcpy	;wreg free
 16470                           
 16471                           ;RTC.c: 108: }
 16472                           
 16473                           ;RTC.c: 107: break;
 16474  0022F6  D02D               	goto	i2l6056
 16475  0022F8                     i2l6054:
 16476  0022F8  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 16477  0022FC  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 16478                           
 16479                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16480                           ; Switch size 1, requested type "space"
 16481                           ; Number of cases is 1, Range of values is 0 to 0
 16482                           ; switch strategies available:
 16483                           ; Name         Instructions Cycles
 16484                           ; simple_byte            4     3 (average)
 16485                           ;	Chosen strategy is simple_byte
 16486  002300  502B               	movf	??i2_printRTC+1,w,c
 16487  002302  0A00               	xorlw	0	; case 0
 16488  002304  A4D8               	btfss	status,2,c
 16489  002306  D025               	goto	i2l6056
 16490                           
 16491                           ; Switch size 1, requested type "space"
 16492                           ; Number of cases is 12, Range of values is 1 to 12
 16493                           ; switch strategies available:
 16494                           ; Name         Instructions Cycles
 16495                           ; simple_byte           37    19 (average)
 16496                           ;	Chosen strategy is simple_byte
 16497  002308  502A               	movf	??i2_printRTC,w,c
 16498  00230A  0A01               	xorlw	1	; case 1
 16499  00230C  B4D8               	btfsc	status,2,c
 16500  00230E  D770               	goto	i2l6028
 16501  002310  0A03               	xorlw	3	; case 2
 16502  002312  B4D8               	btfsc	status,2,c
 16503  002314  D778               	goto	i2l6030
 16504  002316  0A01               	xorlw	1	; case 3
 16505  002318  B4D8               	btfsc	status,2,c
 16506  00231A  D780               	goto	i2l6032
 16507  00231C  0A07               	xorlw	7	; case 4
 16508  00231E  B4D8               	btfsc	status,2,c
 16509  002320  D788               	goto	i2l6034
 16510  002322  0A01               	xorlw	1	; case 5
 16511  002324  B4D8               	btfsc	status,2,c
 16512  002326  D790               	goto	i2l6036
 16513  002328  0A03               	xorlw	3	; case 6
 16514  00232A  B4D8               	btfsc	status,2,c
 16515  00232C  D798               	goto	i2l6038
 16516  00232E  0A01               	xorlw	1	; case 7
 16517  002330  B4D8               	btfsc	status,2,c
 16518  002332  D7A0               	goto	i2l6040
 16519  002334  0A0F               	xorlw	15	; case 8
 16520  002336  B4D8               	btfsc	status,2,c
 16521  002338  D7A8               	goto	i2l6042
 16522  00233A  0A01               	xorlw	1	; case 9
 16523  00233C  B4D8               	btfsc	status,2,c
 16524  00233E  D7B0               	goto	i2l6044
 16525  002340  0A03               	xorlw	3	; case 10
 16526  002342  B4D8               	btfsc	status,2,c
 16527  002344  D7B8               	goto	i2l6046
 16528  002346  0A01               	xorlw	1	; case 11
 16529  002348  B4D8               	btfsc	status,2,c
 16530  00234A  D7C0               	goto	i2l6048
 16531  00234C  0A07               	xorlw	7	; case 12
 16532  00234E  B4D8               	btfsc	status,2,c
 16533  002350  D7C8               	goto	i2l6050
 16534  002352                     i2l6056:
 16535                           
 16536                           ;RTC.c: 109: lcdInst(0b10000000);;
 16537  002352  0E80               	movlw	128
 16538  002354  ECC3  F022         	call	i2_lcdInst
 16539                           
 16540                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 16541  002358  0E42               	movlw	low STR_21
 16542  00235A  6E0D               	movwf	i2printf@f,c
 16543  00235C  0EFB               	movlw	high STR_21
 16544  00235E  6E0E               	movwf	i2printf@f+1,c
 16545  002360  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 16546  002364  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 16547  002368  0E3D               	movlw	low i2printRTC@month
 16548  00236A  6E11               	movwf	?i2_printf+4,c
 16549  00236C  0E00               	movlw	high i2printRTC@month
 16550  00236E  6E12               	movwf	?i2_printf+5,c
 16551  002370  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 16552  002374  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 16553  002378  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 16554  00237C  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 16555  002380  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 16556  002384  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 16557  002388  ECB8  F00A         	call	i2_printf	;wreg free
 16558  00238C  0012               	return		;funcret
 16559  00238E                     __end_ofi2_printRTC:
 16560                           	opt stack 0
 16561                           pclatu	equ	0xFFB
 16562                           pclath	equ	0xFFA
 16563                           tblptru	equ	0xFF8
 16564                           tblptrh	equ	0xFF7
 16565                           tblptrl	equ	0xFF6
 16566                           tablat	equ	0xFF5
 16567                           prodh	equ	0xFF4
 16568                           prodl	equ	0xFF3
 16569                           intcon	equ	0xFF2
 16570                           intcon2	equ	0xFF1
 16571                           intcon3	equ	0xFF0
 16572                           indf0	equ	0xFEF
 16573                           postinc0	equ	0xFEE
 16574                           fsr0h	equ	0xFEA
 16575                           fsr0l	equ	0xFE9
 16576                           wreg	equ	0xFE8
 16577                           postdec1	equ	0xFE5
 16578                           fsr1h	equ	0xFE2
 16579                           fsr1l	equ	0xFE1
 16580                           indf2	equ	0xFDF
 16581                           postinc2	equ	0xFDE
 16582                           postdec2	equ	0xFDD
 16583                           fsr2h	equ	0xFDA
 16584                           fsr2l	equ	0xFD9
 16585                           status	equ	0xFD8
 16586                           
 16587 ;; *************** function i2_strcpy *****************
 16588 ;; Defined at:
 16589 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 16590 ;; Parameters:    Size  Location     Type
 16591 ;;  to              2    0[COMRAM] PTR unsigned char 
 16592 ;;		 -> printRTC@month(4), UI@month(4), 
 16593 ;;  from            2    2[COMRAM] PTR const unsigned char 
 16594 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 16595 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 16596 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 16597 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 16598 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 16599 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 16600 ;;		 -> STR_8(4), 
 16601 ;; Auto vars:     Size  Location     Type
 16602 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 16603 ;;		 -> printRTC@month(4), UI@month(4), 
 16604 ;; Return value:  Size  Location     Type
 16605 ;;                  2    0[COMRAM] PTR unsigned char 
 16606 ;; Registers used:
 16607 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 16608 ;; Tracked objects:
 16609 ;;		On entry : 0/0
 16610 ;;		On exit  : 0/0
 16611 ;;		Unchanged: 0/0
 16612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16613 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16614 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16616 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16617 ;;Total ram usage:        6 bytes
 16618 ;; Hardware stack levels used:    1
 16619 ;; This function calls:
 16620 ;;		Nothing
 16621 ;; This function is called by:
 16622 ;;		i2_printRTC
 16623 ;; This function uses a non-reentrant model
 16624 ;;
 16625                           
 16626                           	psect	text61
 16627  0040EA                     __ptext61:
 16628                           	opt stack 0
 16629  0040EA                     i2_strcpy:
 16630                           	opt stack 20
 16631                           
 16632                           ;incstack = 0
 16633  0040EA  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 16634  0040EE  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 16635  0040F2  D004               	goto	i2l5696
 16636  0040F4                     i2l5694:
 16637  0040F4  4A05               	infsnz	i2strcpy@cp,f,c
 16638  0040F6  2A06               	incf	i2strcpy@cp+1,f,c
 16639  0040F8  4A03               	infsnz	i2strcpy@from,f,c
 16640  0040FA  2A04               	incf	i2strcpy@from+1,f,c
 16641  0040FC                     i2l5696:
 16642  0040FC  C003  FFF6         	movff	i2strcpy@from,tblptrl
 16643  004100  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 16644  004104                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16645  004104  6AF8               	clrf	tblptru,c
 16646  004106                     	endif
 16647  004106                     	if	0	;tblptru may be non-zero
 16648  004106                     	endif
 16649  004106  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 16650  00410A  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 16651  00410E  0008               	tblrd		*
 16652  004110  CFF5 FFDF          	movff	tablat,indf2
 16653  004114  50DF               	movf	indf2,w,c
 16654  004116  B4D8               	btfsc	status,2,c
 16655  004118  0012               	return	
 16656  00411A  D7EC               	goto	i2l5694
 16657  00411C                     __end_ofi2_strcpy:
 16658                           	opt stack 0
 16659                           pclatu	equ	0xFFB
 16660                           pclath	equ	0xFFA
 16661                           tblptru	equ	0xFF8
 16662                           tblptrh	equ	0xFF7
 16663                           tblptrl	equ	0xFF6
 16664                           tablat	equ	0xFF5
 16665                           prodh	equ	0xFF4
 16666                           prodl	equ	0xFF3
 16667                           intcon	equ	0xFF2
 16668                           intcon2	equ	0xFF1
 16669                           intcon3	equ	0xFF0
 16670                           indf0	equ	0xFEF
 16671                           postinc0	equ	0xFEE
 16672                           fsr0h	equ	0xFEA
 16673                           fsr0l	equ	0xFE9
 16674                           wreg	equ	0xFE8
 16675                           postdec1	equ	0xFE5
 16676                           fsr1h	equ	0xFE2
 16677                           fsr1l	equ	0xFE1
 16678                           indf2	equ	0xFDF
 16679                           postinc2	equ	0xFDE
 16680                           postdec2	equ	0xFDD
 16681                           fsr2h	equ	0xFDA
 16682                           fsr2l	equ	0xFD9
 16683                           status	equ	0xFD8
 16684                           
 16685 ;; *************** function _inputHandler *****************
 16686 ;; Defined at:
 16687 ;;		line 370 in file "UI.c"
 16688 ;; Parameters:    Size  Location     Type
 16689 ;;		None
 16690 ;; Auto vars:     Size  Location     Type
 16691 ;;		None
 16692 ;; Return value:  Size  Location     Type
 16693 ;;                  2   41[COMRAM] int 
 16694 ;; Registers used:
 16695 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16696 ;; Tracked objects:
 16697 ;;		On entry : 0/0
 16698 ;;		On exit  : 0/0
 16699 ;;		Unchanged: 0/0
 16700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16701 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16703 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16704 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16705 ;;Total ram usage:        4 bytes
 16706 ;; Hardware stack levels used:    1
 16707 ;; Hardware stack levels required when called:    4
 16708 ;; This function calls:
 16709 ;;		_change_state_to_logs_11
 16710 ;;		_change_state_to_logs_12
 16711 ;;		_change_state_to_logs_22
 16712 ;;		_change_state_to_logs_23
 16713 ;;		_change_state_to_logs_33
 16714 ;;		_change_state_to_logs_34
 16715 ;;		_change_state_to_menu_11
 16716 ;;		_change_state_to_menu_23
 16717 ;;		i2_change_state_to_menu_12
 16718 ;;		i2_change_state_to_menu_22
 16719 ;; This function is called by:
 16720 ;;		_updateMenu
 16721 ;; This function uses a non-reentrant model
 16722 ;;
 16723                           
 16724                           	psect	text62
 16725  002580                     __ptext62:
 16726                           	opt stack 0
 16727  002580                     _inputHandler:
 16728                           	opt stack 18
 16729                           
 16730                           ;UI.c: 375: if(firstboot){
 16731                           
 16732                           ;incstack = 0
 16733  002580  5075               	movf	_firstboot,w,c
 16734  002582  1076               	iorwf	_firstboot+1,w,c
 16735  002584  B4D8               	btfsc	status,2,c
 16736  002586  D00B               	goto	i2l6124
 16737                           
 16738                           ;UI.c: 376: change_state_to_menu_11();
 16739  002588  ECD6  F020         	call	_change_state_to_menu_11	;wreg free
 16740                           
 16741                           ;UI.c: 377: firstboot = 0;
 16742  00258C  0E00               	movlw	0
 16743  00258E  6E76               	movwf	_firstboot+1,c
 16744  002590  0E00               	movlw	0
 16745  002592  6E75               	movwf	_firstboot,c
 16746                           
 16747                           ;UI.c: 378: return 0;
 16748  002594  0E00               	movlw	0
 16749  002596  6E2B               	movwf	?_inputHandler+1,c
 16750  002598  0E00               	movlw	0
 16751  00259A  6E2A               	movwf	?_inputHandler,c
 16752  00259C  0012               	return	
 16753  00259E                     i2l6124:
 16754                           
 16755                           ;UI.c: 379: }
 16756                           ;UI.c: 380: if (logstate){
 16757  00259E  0100               	movlb	0	; () banked
 16758  0025A0  51F6               	movf	_logstate& (0+255),w,b
 16759  0025A2  0100               	movlb	0	; () banked
 16760  0025A4  11F7               	iorwf	(_logstate+1)& (0+255),w,b
 16761  0025A6  B4D8               	btfsc	status,2,c
 16762  0025A8  D0C7               	goto	i2l6242
 16763                           
 16764                           ; BSR set to: 0
 16765                           ;UI.c: 381: if(input == 'C' && PORTBbits.RB1 == 1){
 16766  0025AA  0E43               	movlw	67
 16767  0025AC  187D               	xorwf	_input,w,c	;volatile
 16768  0025AE  A4D8               	btfss	status,2,c
 16769  0025B0  D012               	goto	i2l6142
 16770                           
 16771                           ; BSR set to: 0
 16772  0025B2  B281               	btfsc	3969,1,c	;volatile
 16773  0025B4  D009               	goto	i2l6134
 16774  0025B6  D00F               	goto	i2l6142
 16775  0025B8                     i2l6132:
 16776                           
 16777                           ;UI.c: 384: _delay((unsigned long)((10)*(32000000/4000.0)));
 16778  0025B8  0E68               	movlw	104
 16779  0025BA  6E2C               	movwf	??_inputHandler& (0+255),c
 16780  0025BC  0EE4               	movlw	228
 16781  0025BE                     i2u792_47:
 16782  0025BE  2EE8               	decfsz	wreg,f,c
 16783  0025C0  D7FE               	bra	i2u792_47
 16784  0025C2  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 16785  0025C4  D7FC               	bra	i2u792_47
 16786  0025C6  D000               	nop2	
 16787  0025C8                     i2l6134:
 16788  0025C8  B281               	btfsc	3969,1,c	;volatile
 16789  0025CA  D7F6               	goto	i2l6132
 16790  0025CC                     i2l6136:
 16791                           
 16792                           ;UI.c: 385: }
 16793                           ;UI.c: 386: return 0;
 16794  0025CC  0E00               	movlw	0
 16795  0025CE  6E2B               	movwf	?_inputHandler+1,c
 16796  0025D0  0E00               	movlw	0
 16797  0025D2  6E2A               	movwf	?_inputHandler,c
 16798  0025D4  0012               	return	
 16799  0025D6                     i2l6142:
 16800                           
 16801                           ;UI.c: 388: else if (input == 'D'){
 16802  0025D6  0E44               	movlw	68
 16803  0025D8  187D               	xorwf	_input,w,c	;volatile
 16804  0025DA  A4D8               	btfss	status,2,c
 16805  0025DC  D7F7               	goto	i2l6136
 16806                           
 16807                           ;UI.c: 390: logstate = 0;
 16808  0025DE  0E00               	movlw	0
 16809  0025E0  0100               	movlb	0	; () banked
 16810  0025E2  6FF7               	movwf	(_logstate+1)& (0+255),b
 16811  0025E4  0E00               	movlw	0
 16812  0025E6  6FF6               	movwf	_logstate& (0+255),b
 16813                           
 16814                           ;UI.c: 391: switch(cur_state){
 16815  0025E8  D012               	goto	i2l6160
 16816  0025EA                     i2l6146:
 16817                           
 16818                           ;UI.c: 393: change_state_to_logs_11();
 16819  0025EA  EC4E  F021         	call	_change_state_to_logs_11	;wreg free
 16820                           
 16821                           ;UI.c: 394: break;
 16822  0025EE  D7EE               	goto	i2l6136
 16823  0025F0                     i2l6148:
 16824                           
 16825                           ;UI.c: 396: change_state_to_logs_12();
 16826  0025F0  EC36  F021         	call	_change_state_to_logs_12	;wreg free
 16827                           
 16828                           ;UI.c: 397: break;
 16829  0025F4  D7EB               	goto	i2l6136
 16830  0025F6                     i2l6150:
 16831                           
 16832                           ;UI.c: 399: change_state_to_logs_22();
 16833  0025F6  EC1E  F021         	call	_change_state_to_logs_22	;wreg free
 16834                           
 16835                           ;UI.c: 400: break;
 16836  0025FA  D7E8               	goto	i2l6136
 16837  0025FC                     i2l6152:
 16838                           
 16839                           ;UI.c: 402: change_state_to_logs_23();
 16840  0025FC  EC7D  F021         	call	_change_state_to_logs_23	;wreg free
 16841                           
 16842                           ;UI.c: 403: break;
 16843  002600  D7E5               	goto	i2l6136
 16844  002602                     i2l6154:
 16845                           
 16846                           ;UI.c: 405: change_state_to_logs_33();
 16847  002602  EC06  F021         	call	_change_state_to_logs_33	;wreg free
 16848                           
 16849                           ;UI.c: 406: break;
 16850  002606  D7E2               	goto	i2l6136
 16851  002608                     i2l6156:
 16852                           
 16853                           ;UI.c: 408: change_state_to_logs_34();
 16854  002608  ECEE  F020         	call	_change_state_to_logs_34	;wreg free
 16855                           
 16856                           ;UI.c: 410: }
 16857                           
 16858                           ;UI.c: 409: break;
 16859  00260C  D7DF               	goto	i2l6136
 16860  00260E                     i2l6160:
 16861  00260E  C0DE  F02C         	movff	_cur_state,??_inputHandler
 16862  002612  C0DF  F02D         	movff	_cur_state+1,??_inputHandler+1
 16863                           
 16864                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 16865                           ; Switch size 1, requested type "space"
 16866                           ; Number of cases is 2, Range of values is 3 to 4
 16867                           ; switch strategies available:
 16868                           ; Name         Instructions Cycles
 16869                           ; simple_byte            7     4 (average)
 16870                           ;	Chosen strategy is simple_byte
 16871  002616  502D               	movf	??_inputHandler+1,w,c
 16872  002618  0A03               	xorlw	3	; case 3
 16873  00261A  B4D8               	btfsc	status,2,c
 16874  00261C  D004               	goto	i2l8296
 16875  00261E  0A07               	xorlw	7	; case 4
 16876  002620  B4D8               	btfsc	status,2,c
 16877  002622  D00F               	goto	i2l8298
 16878  002624  D7D3               	goto	i2l6136
 16879  002626                     i2l8296:
 16880                           
 16881                           ; Switch size 1, requested type "space"
 16882                           ; Number of cases is 4, Range of values is 243 to 255
 16883                           ; switch strategies available:
 16884                           ; Name         Instructions Cycles
 16885                           ; simple_byte           13     7 (average)
 16886                           ;	Chosen strategy is simple_byte
 16887  002626  502C               	movf	??_inputHandler,w,c
 16888  002628  0AF3               	xorlw	243	; case 243
 16889  00262A  B4D8               	btfsc	status,2,c
 16890  00262C  D7DE               	goto	i2l6146
 16891  00262E  0A07               	xorlw	7	; case 244
 16892  002630  B4D8               	btfsc	status,2,c
 16893  002632  D7DE               	goto	i2l6148
 16894  002634  0A0A               	xorlw	10	; case 254
 16895  002636  B4D8               	btfsc	status,2,c
 16896  002638  D7DE               	goto	i2l6150
 16897  00263A  0A01               	xorlw	1	; case 255
 16898  00263C  B4D8               	btfsc	status,2,c
 16899  00263E  D7DE               	goto	i2l6152
 16900  002640  D7C5               	goto	i2l6136
 16901  002642                     i2l8298:
 16902                           
 16903                           ; Switch size 1, requested type "space"
 16904                           ; Number of cases is 2, Range of values is 9 to 10
 16905                           ; switch strategies available:
 16906                           ; Name         Instructions Cycles
 16907                           ; simple_byte            7     4 (average)
 16908                           ;	Chosen strategy is simple_byte
 16909  002642  502C               	movf	??_inputHandler,w,c
 16910  002644  0A09               	xorlw	9	; case 9
 16911  002646  B4D8               	btfsc	status,2,c
 16912  002648  D7DC               	goto	i2l6154
 16913  00264A  0A03               	xorlw	3	; case 10
 16914  00264C  B4D8               	btfsc	status,2,c
 16915  00264E  D7DC               	goto	i2l6156
 16916  002650  D7BD               	goto	i2l6136
 16917  002652                     i2l6172:
 16918                           
 16919                           ;UI.c: 420: if(cur_state == 11){
 16920  002652  0E0B               	movlw	11
 16921  002654  0100               	movlb	0	; () banked
 16922  002656  19DE               	xorwf	_cur_state& (0+255),w,b
 16923  002658  0100               	movlb	0	; () banked
 16924  00265A  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 16925  00265C  A4D8               	btfss	status,2,c
 16926  00265E  D005               	goto	i2l6180
 16927                           
 16928                           ; BSR set to: 0
 16929                           ;UI.c: 421: return 0;
 16930  002660  0E00               	movlw	0
 16931  002662  6E2B               	movwf	?_inputHandler+1,c
 16932  002664  0E00               	movlw	0
 16933  002666  6E2A               	movwf	?_inputHandler,c
 16934                           
 16935                           ; BSR set to: 0
 16936  002668  0012               	return	
 16937  00266A                     i2l6180:
 16938                           
 16939                           ; BSR set to: 0
 16940                           ;UI.c: 423: else{
 16941                           ;UI.c: 424: change_state_to_menu_11();
 16942  00266A  ECD6  F020         	call	_change_state_to_menu_11	;wreg free
 16943                           
 16944                           ;UI.c: 425: }
 16945                           ;UI.c: 426: return 0;
 16946  00266E  0E00               	movlw	0
 16947  002670  6E2B               	movwf	?_inputHandler+1,c
 16948  002672  0E00               	movlw	0
 16949  002674  6E2A               	movwf	?_inputHandler,c
 16950  002676  0012               	return	
 16951  002678                     i2l6186:
 16952                           
 16953                           ;UI.c: 428: if(cur_state == 22 | cur_state == 12){
 16954  002678  0E16               	movlw	22
 16955  00267A  0100               	movlb	0	; () banked
 16956  00267C  19DE               	xorwf	_cur_state& (0+255),w,b
 16957  00267E  0100               	movlb	0	; () banked
 16958  002680  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 16959  002682  B4D8               	btfsc	status,2,c
 16960  002684  D007               	goto	i2l6190
 16961                           
 16962                           ; BSR set to: 0
 16963  002686  0E0C               	movlw	12
 16964  002688  0100               	movlb	0	; () banked
 16965  00268A  19DE               	xorwf	_cur_state& (0+255),w,b
 16966  00268C  0100               	movlb	0	; () banked
 16967  00268E  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 16968  002690  A4D8               	btfss	status,2,c
 16969  002692  D005               	goto	i2l6196
 16970  002694                     i2l6190:
 16971                           
 16972                           ; BSR set to: 0
 16973                           ;UI.c: 429: return 0;
 16974  002694  0E00               	movlw	0
 16975  002696  6E2B               	movwf	?_inputHandler+1,c
 16976  002698  0E00               	movlw	0
 16977  00269A  6E2A               	movwf	?_inputHandler,c
 16978                           
 16979                           ; BSR set to: 0
 16980  00269C  0012               	return	
 16981  00269E                     i2l6196:
 16982                           
 16983                           ; BSR set to: 0
 16984                           ;UI.c: 431: else if(cur_state == 23){
 16985  00269E  0E17               	movlw	23
 16986  0026A0  0100               	movlb	0	; () banked
 16987  0026A2  19DE               	xorwf	_cur_state& (0+255),w,b
 16988  0026A4  0100               	movlb	0	; () banked
 16989  0026A6  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 16990  0026A8  A4D8               	btfss	status,2,c
 16991  0026AA  D003               	goto	i2l6200
 16992                           
 16993                           ; BSR set to: 0
 16994                           ;UI.c: 432: change_state_to_menu_22();
 16995  0026AC  EC8E  F020         	call	i2_change_state_to_menu_22	;wreg free
 16996                           
 16997                           ;UI.c: 433: }
 16998  0026B0  D002               	goto	i2l6202
 16999  0026B2                     i2l6200:
 17000                           
 17001                           ;UI.c: 434: else{
 17002                           ;UI.c: 435: change_state_to_menu_12();
 17003  0026B2  ECA6  F020         	call	i2_change_state_to_menu_12	;wreg free
 17004  0026B6                     i2l6202:
 17005                           
 17006                           ;UI.c: 436: }
 17007                           ;UI.c: 437: return 0;
 17008  0026B6  0E00               	movlw	0
 17009  0026B8  6E2B               	movwf	?_inputHandler+1,c
 17010  0026BA  0E00               	movlw	0
 17011  0026BC  6E2A               	movwf	?_inputHandler,c
 17012  0026BE  0012               	return	
 17013  0026C0                     i2l6206:
 17014                           
 17015                           ;UI.c: 439: if(cur_state == 23){
 17016  0026C0  0E17               	movlw	23
 17017  0026C2  0100               	movlb	0	; () banked
 17018  0026C4  19DE               	xorwf	_cur_state& (0+255),w,b
 17019  0026C6  0100               	movlb	0	; () banked
 17020  0026C8  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 17021  0026CA  A4D8               	btfss	status,2,c
 17022  0026CC  D005               	goto	i2l6214
 17023                           
 17024                           ; BSR set to: 0
 17025                           ;UI.c: 440: return 0;
 17026  0026CE  0E00               	movlw	0
 17027  0026D0  6E2B               	movwf	?_inputHandler+1,c
 17028  0026D2  0E00               	movlw	0
 17029  0026D4  6E2A               	movwf	?_inputHandler,c
 17030                           
 17031                           ; BSR set to: 0
 17032  0026D6  0012               	return	
 17033  0026D8                     i2l6214:
 17034                           
 17035                           ; BSR set to: 0
 17036                           ;UI.c: 442: else{
 17037                           ;UI.c: 443: change_state_to_menu_23();
 17038  0026D8  ECBE  F020         	call	_change_state_to_menu_23	;wreg free
 17039                           
 17040                           ;UI.c: 444: }
 17041                           ;UI.c: 445: return 0;
 17042  0026DC  0E00               	movlw	0
 17043  0026DE  6E2B               	movwf	?_inputHandler+1,c
 17044  0026E0  0E00               	movlw	0
 17045  0026E2  6E2A               	movwf	?_inputHandler,c
 17046  0026E4  0012               	return	
 17047  0026E6                     i2l6220:
 17048                           
 17049                           ;UI.c: 448: up = 1;
 17050  0026E6  0E00               	movlw	0
 17051  0026E8  6E78               	movwf	_up+1,c
 17052  0026EA  0E01               	movlw	1
 17053  0026EC  6E77               	movwf	_up,c
 17054                           
 17055                           ;UI.c: 449: return 1;
 17056  0026EE  0E00               	movlw	0
 17057  0026F0  6E2B               	movwf	?_inputHandler+1,c
 17058  0026F2  0E01               	movlw	1
 17059  0026F4  6E2A               	movwf	?_inputHandler,c
 17060  0026F6  0012               	return	
 17061  0026F8                     i2l6224:
 17062                           
 17063                           ;UI.c: 451: down = 1;
 17064  0026F8  0E00               	movlw	0
 17065  0026FA  6E68               	movwf	_down+1,c
 17066  0026FC  0E01               	movlw	1
 17067  0026FE  6E67               	movwf	_down,c
 17068                           
 17069                           ;UI.c: 452: return 1;
 17070  002700  0E00               	movlw	0
 17071  002702  6E2B               	movwf	?_inputHandler+1,c
 17072  002704  0E01               	movlw	1
 17073  002706  6E2A               	movwf	?_inputHandler,c
 17074  002708  0012               	return	
 17075  00270A                     i2l6228:
 17076                           
 17077                           ;UI.c: 454: enter = 1;
 17078  00270A  0E00               	movlw	0
 17079  00270C  6E6A               	movwf	_enter+1,c
 17080  00270E  0E01               	movlw	1
 17081  002710  6E69               	movwf	_enter,c
 17082                           
 17083                           ;UI.c: 455: return 1;
 17084  002712  0E00               	movlw	0
 17085  002714  6E2B               	movwf	?_inputHandler+1,c
 17086  002716  0E01               	movlw	1
 17087  002718  6E2A               	movwf	?_inputHandler,c
 17088  00271A  0012               	return	
 17089  00271C                     i2l6232:
 17090                           
 17091                           ;UI.c: 457: back = 1;
 17092  00271C  0E00               	movlw	0
 17093  00271E  6E5C               	movwf	_back+1,c
 17094  002720  0E01               	movlw	1
 17095  002722  6E5B               	movwf	_back,c
 17096                           
 17097                           ;UI.c: 458: return 1;
 17098  002724  0E00               	movlw	0
 17099  002726  6E2B               	movwf	?_inputHandler+1,c
 17100  002728  0E01               	movlw	1
 17101  00272A  6E2A               	movwf	?_inputHandler,c
 17102  00272C  0012               	return	
 17103  00272E                     i2l6236:
 17104                           
 17105                           ;UI.c: 461: return 1;
 17106  00272E  0E00               	movlw	0
 17107  002730  6E2B               	movwf	?_inputHandler+1,c
 17108  002732  0E01               	movlw	1
 17109  002734  6E2A               	movwf	?_inputHandler,c
 17110                           
 17111                           ;UI.c: 462: }
 17112  002736  0012               	return	
 17113  002738                     i2l6242:
 17114  002738  507D               	movf	_input,w,c	;volatile
 17115                           
 17116                           ; Switch size 1, requested type "space"
 17117                           ; Number of cases is 7, Range of values is 49 to 68
 17118                           ; switch strategies available:
 17119                           ; Name         Instructions Cycles
 17120                           ; simple_byte           22    12 (average)
 17121                           ;	Chosen strategy is simple_byte
 17122  00273A  0A31               	xorlw	49	; case 49
 17123  00273C  B4D8               	btfsc	status,2,c
 17124  00273E  D789               	goto	i2l6172
 17125  002740  0A03               	xorlw	3	; case 50
 17126  002742  B4D8               	btfsc	status,2,c
 17127  002744  D799               	goto	i2l6186
 17128  002746  0A01               	xorlw	1	; case 51
 17129  002748  B4D8               	btfsc	status,2,c
 17130  00274A  D7BA               	goto	i2l6206
 17131  00274C  0A72               	xorlw	114	; case 65
 17132  00274E  B4D8               	btfsc	status,2,c
 17133  002750  D7CA               	goto	i2l6220
 17134  002752  0A03               	xorlw	3	; case 66
 17135  002754  B4D8               	btfsc	status,2,c
 17136  002756  D7D0               	goto	i2l6224
 17137  002758  0A01               	xorlw	1	; case 67
 17138  00275A  B4D8               	btfsc	status,2,c
 17139  00275C  D7D6               	goto	i2l6228
 17140  00275E  0A07               	xorlw	7	; case 68
 17141  002760  B4D8               	btfsc	status,2,c
 17142  002762  D7DC               	goto	i2l6232
 17143  002764  D7E4               	goto	i2l6236
 17144  002766                     __end_of_inputHandler:
 17145                           	opt stack 0
 17146                           pclatu	equ	0xFFB
 17147                           pclath	equ	0xFFA
 17148                           tblptru	equ	0xFF8
 17149                           tblptrh	equ	0xFF7
 17150                           tblptrl	equ	0xFF6
 17151                           tablat	equ	0xFF5
 17152                           prodh	equ	0xFF4
 17153                           prodl	equ	0xFF3
 17154                           intcon	equ	0xFF2
 17155                           intcon2	equ	0xFF1
 17156                           intcon3	equ	0xFF0
 17157                           indf0	equ	0xFEF
 17158                           postinc0	equ	0xFEE
 17159                           fsr0h	equ	0xFEA
 17160                           fsr0l	equ	0xFE9
 17161                           wreg	equ	0xFE8
 17162                           postdec1	equ	0xFE5
 17163                           fsr1h	equ	0xFE2
 17164                           fsr1l	equ	0xFE1
 17165                           indf2	equ	0xFDF
 17166                           postinc2	equ	0xFDE
 17167                           postdec2	equ	0xFDD
 17168                           fsr2h	equ	0xFDA
 17169                           fsr2l	equ	0xFD9
 17170                           status	equ	0xFD8
 17171                           
 17172 ;; *************** function i2_change_state_to_menu_22 *****************
 17173 ;; Defined at:
 17174 ;;		line 496 in file "UI.c"
 17175 ;; Parameters:    Size  Location     Type
 17176 ;;		None
 17177 ;; Auto vars:     Size  Location     Type
 17178 ;;		None
 17179 ;; Return value:  Size  Location     Type
 17180 ;;                  1    wreg      void 
 17181 ;; Registers used:
 17182 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17183 ;; Tracked objects:
 17184 ;;		On entry : 0/0
 17185 ;;		On exit  : 0/0
 17186 ;;		Unchanged: 0/0
 17187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17191 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17192 ;;Total ram usage:        0 bytes
 17193 ;; Hardware stack levels used:    1
 17194 ;; Hardware stack levels required when called:    3
 17195 ;; This function calls:
 17196 ;;		i2_lcdInst
 17197 ;;		i2_printf
 17198 ;; This function is called by:
 17199 ;;		_updateMenu
 17200 ;;		_inputHandler
 17201 ;; This function uses a non-reentrant model
 17202 ;;
 17203                           
 17204                           	psect	text63
 17205  00411C                     __ptext63:
 17206                           	opt stack 0
 17207  00411C                     i2_change_state_to_menu_22:
 17208                           	opt stack 19
 17209                           
 17210                           ;UI.c: 497: cur_state = 22;
 17211                           
 17212                           ;incstack = 0
 17213  00411C  0E00               	movlw	0
 17214  00411E  0100               	movlb	0	; () banked
 17215  004120  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17216  004122  0E16               	movlw	22
 17217  004124  6FDE               	movwf	_cur_state& (0+255),b
 17218                           
 17219                           ; BSR set to: 0
 17220                           ;UI.c: 499: lcdInst(0b10000000);;
 17221  004126  0E80               	movlw	128
 17222  004128  ECC3  F022         	call	i2_lcdInst
 17223                           
 17224                           ;UI.c: 500: printf("2. SORT        <");
 17225  00412C  0EEC               	movlw	low STR_34
 17226  00412E  6E0D               	movwf	i2printf@f,c
 17227  004130  0EFD               	movlw	high STR_34
 17228  004132  6E0E               	movwf	i2printf@f+1,c
 17229  004134  ECB8  F00A         	call	i2_printf	;wreg free
 17230                           
 17231                           ;UI.c: 501: lcdInst(0b11000000);;
 17232  004138  0EC0               	movlw	192
 17233  00413A  ECC3  F022         	call	i2_lcdInst
 17234                           
 17235                           ;UI.c: 502: printf("3. LOGS         ");
 17236  00413E  0E31               	movlw	low STR_36
 17237  004140  6E0D               	movwf	i2printf@f,c
 17238  004142  0EFD               	movlw	high STR_36
 17239  004144  6E0E               	movwf	i2printf@f+1,c
 17240  004146  ECB8  F00A         	call	i2_printf	;wreg free
 17241  00414A  0012               	return		;funcret
 17242  00414C                     __end_ofi2_change_state_to_menu_22:
 17243                           	opt stack 0
 17244                           pclatu	equ	0xFFB
 17245                           pclath	equ	0xFFA
 17246                           tblptru	equ	0xFF8
 17247                           tblptrh	equ	0xFF7
 17248                           tblptrl	equ	0xFF6
 17249                           tablat	equ	0xFF5
 17250                           prodh	equ	0xFF4
 17251                           prodl	equ	0xFF3
 17252                           intcon	equ	0xFF2
 17253                           intcon2	equ	0xFF1
 17254                           intcon3	equ	0xFF0
 17255                           indf0	equ	0xFEF
 17256                           postinc0	equ	0xFEE
 17257                           fsr0h	equ	0xFEA
 17258                           fsr0l	equ	0xFE9
 17259                           wreg	equ	0xFE8
 17260                           postdec1	equ	0xFE5
 17261                           fsr1h	equ	0xFE2
 17262                           fsr1l	equ	0xFE1
 17263                           indf2	equ	0xFDF
 17264                           postinc2	equ	0xFDE
 17265                           postdec2	equ	0xFDD
 17266                           fsr2h	equ	0xFDA
 17267                           fsr2l	equ	0xFD9
 17268                           status	equ	0xFD8
 17269                           
 17270 ;; *************** function i2_change_state_to_menu_12 *****************
 17271 ;; Defined at:
 17272 ;;		line 488 in file "UI.c"
 17273 ;; Parameters:    Size  Location     Type
 17274 ;;		None
 17275 ;; Auto vars:     Size  Location     Type
 17276 ;;		None
 17277 ;; Return value:  Size  Location     Type
 17278 ;;                  1    wreg      void 
 17279 ;; Registers used:
 17280 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17281 ;; Tracked objects:
 17282 ;;		On entry : 0/0
 17283 ;;		On exit  : 0/0
 17284 ;;		Unchanged: 0/0
 17285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17287 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17289 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17290 ;;Total ram usage:        0 bytes
 17291 ;; Hardware stack levels used:    1
 17292 ;; Hardware stack levels required when called:    3
 17293 ;; This function calls:
 17294 ;;		i2_lcdInst
 17295 ;;		i2_printf
 17296 ;; This function is called by:
 17297 ;;		_updateMenu
 17298 ;;		_inputHandler
 17299 ;; This function uses a non-reentrant model
 17300 ;;
 17301                           
 17302                           	psect	text64
 17303  00414C                     __ptext64:
 17304                           	opt stack 0
 17305  00414C                     i2_change_state_to_menu_12:
 17306                           	opt stack 19
 17307                           
 17308                           ;UI.c: 489: cur_state = 12;
 17309                           
 17310                           ;incstack = 0
 17311  00414C  0E00               	movlw	0
 17312  00414E  0100               	movlb	0	; () banked
 17313  004150  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17314  004152  0E0C               	movlw	12
 17315  004154  6FDE               	movwf	_cur_state& (0+255),b
 17316                           
 17317                           ; BSR set to: 0
 17318                           ;UI.c: 491: lcdInst(0b10000000);;
 17319  004156  0E80               	movlw	128
 17320  004158  ECC3  F022         	call	i2_lcdInst
 17321                           
 17322                           ;UI.c: 492: printf("1. DATE/TIME    ");
 17323  00415C  0E53               	movlw	low STR_33
 17324  00415E  6E0D               	movwf	i2printf@f,c
 17325  004160  0EFD               	movlw	high STR_33
 17326  004162  6E0E               	movwf	i2printf@f+1,c
 17327  004164  ECB8  F00A         	call	i2_printf	;wreg free
 17328                           
 17329                           ;UI.c: 493: lcdInst(0b11000000);;
 17330  004168  0EC0               	movlw	192
 17331  00416A  ECC3  F022         	call	i2_lcdInst
 17332                           
 17333                           ;UI.c: 494: printf("2. SORT        <");
 17334  00416E  0EEC               	movlw	low STR_34
 17335  004170  6E0D               	movwf	i2printf@f,c
 17336  004172  0EFD               	movlw	high STR_34
 17337  004174  6E0E               	movwf	i2printf@f+1,c
 17338  004176  ECB8  F00A         	call	i2_printf	;wreg free
 17339  00417A  0012               	return		;funcret
 17340  00417C                     __end_ofi2_change_state_to_menu_12:
 17341                           	opt stack 0
 17342                           pclatu	equ	0xFFB
 17343                           pclath	equ	0xFFA
 17344                           tblptru	equ	0xFF8
 17345                           tblptrh	equ	0xFF7
 17346                           tblptrl	equ	0xFF6
 17347                           tablat	equ	0xFF5
 17348                           prodh	equ	0xFF4
 17349                           prodl	equ	0xFF3
 17350                           intcon	equ	0xFF2
 17351                           intcon2	equ	0xFF1
 17352                           intcon3	equ	0xFF0
 17353                           indf0	equ	0xFEF
 17354                           postinc0	equ	0xFEE
 17355                           fsr0h	equ	0xFEA
 17356                           fsr0l	equ	0xFE9
 17357                           wreg	equ	0xFE8
 17358                           postdec1	equ	0xFE5
 17359                           fsr1h	equ	0xFE2
 17360                           fsr1l	equ	0xFE1
 17361                           indf2	equ	0xFDF
 17362                           postinc2	equ	0xFDE
 17363                           postdec2	equ	0xFDD
 17364                           fsr2h	equ	0xFDA
 17365                           fsr2l	equ	0xFD9
 17366                           status	equ	0xFD8
 17367                           
 17368 ;; *************** function _change_state_to_menu_23 *****************
 17369 ;; Defined at:
 17370 ;;		line 504 in file "UI.c"
 17371 ;; Parameters:    Size  Location     Type
 17372 ;;		None
 17373 ;; Auto vars:     Size  Location     Type
 17374 ;;		None
 17375 ;; Return value:  Size  Location     Type
 17376 ;;                  1    wreg      void 
 17377 ;; Registers used:
 17378 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17379 ;; Tracked objects:
 17380 ;;		On entry : 0/0
 17381 ;;		On exit  : 0/0
 17382 ;;		Unchanged: 0/0
 17383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17385 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17387 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17388 ;;Total ram usage:        0 bytes
 17389 ;; Hardware stack levels used:    1
 17390 ;; Hardware stack levels required when called:    3
 17391 ;; This function calls:
 17392 ;;		i2_lcdInst
 17393 ;;		i2_printf
 17394 ;; This function is called by:
 17395 ;;		_updateMenu
 17396 ;;		_inputHandler
 17397 ;; This function uses a non-reentrant model
 17398 ;;
 17399                           
 17400                           	psect	text65
 17401  00417C                     __ptext65:
 17402                           	opt stack 0
 17403  00417C                     _change_state_to_menu_23:
 17404                           	opt stack 18
 17405                           
 17406                           ;UI.c: 505: cur_state = 23;
 17407                           
 17408                           ;incstack = 0
 17409  00417C  0E00               	movlw	0
 17410  00417E  0100               	movlb	0	; () banked
 17411  004180  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17412  004182  0E17               	movlw	23
 17413  004184  6FDE               	movwf	_cur_state& (0+255),b
 17414                           
 17415                           ; BSR set to: 0
 17416                           ;UI.c: 507: lcdInst(0b10000000);;
 17417  004186  0E80               	movlw	128
 17418  004188  ECC3  F022         	call	i2_lcdInst
 17419                           
 17420                           ;UI.c: 508: printf("2. SORT         ");
 17421  00418C  0E42               	movlw	low STR_32
 17422  00418E  6E0D               	movwf	i2printf@f,c
 17423  004190  0EFD               	movlw	high STR_32
 17424  004192  6E0E               	movwf	i2printf@f+1,c
 17425  004194  ECB8  F00A         	call	i2_printf	;wreg free
 17426                           
 17427                           ;UI.c: 509: lcdInst(0b11000000);;
 17428  004198  0EC0               	movlw	192
 17429  00419A  ECC3  F022         	call	i2_lcdInst
 17430                           
 17431                           ;UI.c: 510: printf("3. LOGS        <");
 17432  00419E  0EDB               	movlw	low STR_38
 17433  0041A0  6E0D               	movwf	i2printf@f,c
 17434  0041A2  0EFD               	movlw	high STR_38
 17435  0041A4  6E0E               	movwf	i2printf@f+1,c
 17436  0041A6  ECB8  F00A         	call	i2_printf	;wreg free
 17437  0041AA  0012               	return		;funcret
 17438  0041AC                     __end_of_change_state_to_menu_23:
 17439                           	opt stack 0
 17440                           pclatu	equ	0xFFB
 17441                           pclath	equ	0xFFA
 17442                           tblptru	equ	0xFF8
 17443                           tblptrh	equ	0xFF7
 17444                           tblptrl	equ	0xFF6
 17445                           tablat	equ	0xFF5
 17446                           prodh	equ	0xFF4
 17447                           prodl	equ	0xFF3
 17448                           intcon	equ	0xFF2
 17449                           intcon2	equ	0xFF1
 17450                           intcon3	equ	0xFF0
 17451                           indf0	equ	0xFEF
 17452                           postinc0	equ	0xFEE
 17453                           fsr0h	equ	0xFEA
 17454                           fsr0l	equ	0xFE9
 17455                           wreg	equ	0xFE8
 17456                           postdec1	equ	0xFE5
 17457                           fsr1h	equ	0xFE2
 17458                           fsr1l	equ	0xFE1
 17459                           indf2	equ	0xFDF
 17460                           postinc2	equ	0xFDE
 17461                           postdec2	equ	0xFDD
 17462                           fsr2h	equ	0xFDA
 17463                           fsr2l	equ	0xFD9
 17464                           status	equ	0xFD8
 17465                           
 17466 ;; *************** function _change_state_to_menu_11 *****************
 17467 ;; Defined at:
 17468 ;;		line 480 in file "UI.c"
 17469 ;; Parameters:    Size  Location     Type
 17470 ;;		None
 17471 ;; Auto vars:     Size  Location     Type
 17472 ;;		None
 17473 ;; Return value:  Size  Location     Type
 17474 ;;                  1    wreg      void 
 17475 ;; Registers used:
 17476 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17477 ;; Tracked objects:
 17478 ;;		On entry : 0/0
 17479 ;;		On exit  : 0/0
 17480 ;;		Unchanged: 0/0
 17481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17485 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17486 ;;Total ram usage:        0 bytes
 17487 ;; Hardware stack levels used:    1
 17488 ;; Hardware stack levels required when called:    3
 17489 ;; This function calls:
 17490 ;;		i2_lcdInst
 17491 ;;		i2_printf
 17492 ;; This function is called by:
 17493 ;;		_updateMenu
 17494 ;;		_inputHandler
 17495 ;; This function uses a non-reentrant model
 17496 ;;
 17497                           
 17498                           	psect	text66
 17499  0041AC                     __ptext66:
 17500                           	opt stack 0
 17501  0041AC                     _change_state_to_menu_11:
 17502                           	opt stack 18
 17503                           
 17504                           ;UI.c: 481: cur_state = 11;
 17505                           
 17506                           ;incstack = 0
 17507  0041AC  0E00               	movlw	0
 17508  0041AE  0100               	movlb	0	; () banked
 17509  0041B0  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17510  0041B2  0E0B               	movlw	11
 17511  0041B4  6FDE               	movwf	_cur_state& (0+255),b
 17512                           
 17513                           ; BSR set to: 0
 17514                           ;UI.c: 483: lcdInst(0b10000000);;
 17515  0041B6  0E80               	movlw	128
 17516  0041B8  ECC3  F022         	call	i2_lcdInst
 17517                           
 17518                           ;UI.c: 484: printf("1. DATE/TIME   <");
 17519  0041BC  0EFD               	movlw	low STR_31
 17520  0041BE  6E0D               	movwf	i2printf@f,c
 17521  0041C0  0EFD               	movlw	high STR_31
 17522  0041C2  6E0E               	movwf	i2printf@f+1,c
 17523  0041C4  ECB8  F00A         	call	i2_printf	;wreg free
 17524                           
 17525                           ;UI.c: 485: lcdInst(0b11000000);;
 17526  0041C8  0EC0               	movlw	192
 17527  0041CA  ECC3  F022         	call	i2_lcdInst
 17528                           
 17529                           ;UI.c: 486: printf("2. SORT         ");
 17530  0041CE  0E42               	movlw	low STR_32
 17531  0041D0  6E0D               	movwf	i2printf@f,c
 17532  0041D2  0EFD               	movlw	high STR_32
 17533  0041D4  6E0E               	movwf	i2printf@f+1,c
 17534  0041D6  ECB8  F00A         	call	i2_printf	;wreg free
 17535  0041DA  0012               	return		;funcret
 17536  0041DC                     __end_of_change_state_to_menu_11:
 17537                           	opt stack 0
 17538                           pclatu	equ	0xFFB
 17539                           pclath	equ	0xFFA
 17540                           tblptru	equ	0xFF8
 17541                           tblptrh	equ	0xFF7
 17542                           tblptrl	equ	0xFF6
 17543                           tablat	equ	0xFF5
 17544                           prodh	equ	0xFF4
 17545                           prodl	equ	0xFF3
 17546                           intcon	equ	0xFF2
 17547                           intcon2	equ	0xFF1
 17548                           intcon3	equ	0xFF0
 17549                           indf0	equ	0xFEF
 17550                           postinc0	equ	0xFEE
 17551                           fsr0h	equ	0xFEA
 17552                           fsr0l	equ	0xFE9
 17553                           wreg	equ	0xFE8
 17554                           postdec1	equ	0xFE5
 17555                           fsr1h	equ	0xFE2
 17556                           fsr1l	equ	0xFE1
 17557                           indf2	equ	0xFDF
 17558                           postinc2	equ	0xFDE
 17559                           postdec2	equ	0xFDD
 17560                           fsr2h	equ	0xFDA
 17561                           fsr2l	equ	0xFD9
 17562                           status	equ	0xFD8
 17563                           
 17564 ;; *************** function _change_state_to_logs_34 *****************
 17565 ;; Defined at:
 17566 ;;		line 547 in file "UI.c"
 17567 ;; Parameters:    Size  Location     Type
 17568 ;;		None
 17569 ;; Auto vars:     Size  Location     Type
 17570 ;;		None
 17571 ;; Return value:  Size  Location     Type
 17572 ;;                  1    wreg      void 
 17573 ;; Registers used:
 17574 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17575 ;; Tracked objects:
 17576 ;;		On entry : 0/0
 17577 ;;		On exit  : 0/0
 17578 ;;		Unchanged: 0/0
 17579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17581 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17583 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17584 ;;Total ram usage:        0 bytes
 17585 ;; Hardware stack levels used:    1
 17586 ;; Hardware stack levels required when called:    3
 17587 ;; This function calls:
 17588 ;;		i2_lcdInst
 17589 ;;		i2_printf
 17590 ;; This function is called by:
 17591 ;;		_updateMenu
 17592 ;;		_inputHandler
 17593 ;; This function uses a non-reentrant model
 17594 ;;
 17595                           
 17596                           	psect	text67
 17597  0041DC                     __ptext67:
 17598                           	opt stack 0
 17599  0041DC                     _change_state_to_logs_34:
 17600                           	opt stack 18
 17601                           
 17602                           ;UI.c: 548: cur_state = 1034;
 17603                           
 17604                           ;incstack = 0
 17605  0041DC  0E04               	movlw	4
 17606  0041DE  0100               	movlb	0	; () banked
 17607  0041E0  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17608  0041E2  0E0A               	movlw	10
 17609  0041E4  6FDE               	movwf	_cur_state& (0+255),b
 17610                           
 17611                           ; BSR set to: 0
 17612                           ;UI.c: 549: lcdInst(0b10000000);;
 17613  0041E6  0E80               	movlw	128
 17614  0041E8  ECC3  F022         	call	i2_lcdInst
 17615                           
 17616                           ;UI.c: 550: printf("LOG 3           ");
 17617  0041EC  0E0F               	movlw	low STR_44
 17618  0041EE  6E0D               	movwf	i2printf@f,c
 17619  0041F0  0EFD               	movlw	high STR_44
 17620  0041F2  6E0E               	movwf	i2printf@f+1,c
 17621  0041F4  ECB8  F00A         	call	i2_printf	;wreg free
 17622                           
 17623                           ;UI.c: 551: lcdInst(0b11000000);;
 17624  0041F8  0EC0               	movlw	192
 17625  0041FA  ECC3  F022         	call	i2_lcdInst
 17626                           
 17627                           ;UI.c: 552: printf("LOG 4          <");
 17628  0041FE  0ECA               	movlw	low STR_50
 17629  004200  6E0D               	movwf	i2printf@f,c
 17630  004202  0EFD               	movlw	high STR_50
 17631  004204  6E0E               	movwf	i2printf@f+1,c
 17632  004206  ECB8  F00A         	call	i2_printf	;wreg free
 17633  00420A  0012               	return		;funcret
 17634  00420C                     __end_of_change_state_to_logs_34:
 17635                           	opt stack 0
 17636                           pclatu	equ	0xFFB
 17637                           pclath	equ	0xFFA
 17638                           tblptru	equ	0xFF8
 17639                           tblptrh	equ	0xFF7
 17640                           tblptrl	equ	0xFF6
 17641                           tablat	equ	0xFF5
 17642                           prodh	equ	0xFF4
 17643                           prodl	equ	0xFF3
 17644                           intcon	equ	0xFF2
 17645                           intcon2	equ	0xFF1
 17646                           intcon3	equ	0xFF0
 17647                           indf0	equ	0xFEF
 17648                           postinc0	equ	0xFEE
 17649                           fsr0h	equ	0xFEA
 17650                           fsr0l	equ	0xFE9
 17651                           wreg	equ	0xFE8
 17652                           postdec1	equ	0xFE5
 17653                           fsr1h	equ	0xFE2
 17654                           fsr1l	equ	0xFE1
 17655                           indf2	equ	0xFDF
 17656                           postinc2	equ	0xFDE
 17657                           postdec2	equ	0xFDD
 17658                           fsr2h	equ	0xFDA
 17659                           fsr2l	equ	0xFD9
 17660                           status	equ	0xFD8
 17661                           
 17662 ;; *************** function _change_state_to_logs_33 *****************
 17663 ;; Defined at:
 17664 ;;		line 540 in file "UI.c"
 17665 ;; Parameters:    Size  Location     Type
 17666 ;;		None
 17667 ;; Auto vars:     Size  Location     Type
 17668 ;;		None
 17669 ;; Return value:  Size  Location     Type
 17670 ;;                  1    wreg      void 
 17671 ;; Registers used:
 17672 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17673 ;; Tracked objects:
 17674 ;;		On entry : 0/0
 17675 ;;		On exit  : 0/0
 17676 ;;		Unchanged: 0/0
 17677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17681 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17682 ;;Total ram usage:        0 bytes
 17683 ;; Hardware stack levels used:    1
 17684 ;; Hardware stack levels required when called:    3
 17685 ;; This function calls:
 17686 ;;		i2_lcdInst
 17687 ;;		i2_printf
 17688 ;; This function is called by:
 17689 ;;		_updateMenu
 17690 ;;		_inputHandler
 17691 ;; This function uses a non-reentrant model
 17692 ;;
 17693                           
 17694                           	psect	text68
 17695  00420C                     __ptext68:
 17696                           	opt stack 0
 17697  00420C                     _change_state_to_logs_33:
 17698                           	opt stack 18
 17699                           
 17700                           ;UI.c: 541: cur_state = 1033;
 17701                           
 17702                           ;incstack = 0
 17703  00420C  0E04               	movlw	4
 17704  00420E  0100               	movlb	0	; () banked
 17705  004210  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17706  004212  0E09               	movlw	9
 17707  004214  6FDE               	movwf	_cur_state& (0+255),b
 17708                           
 17709                           ; BSR set to: 0
 17710                           ;UI.c: 542: lcdInst(0b10000000);;
 17711  004216  0E80               	movlw	128
 17712  004218  ECC3  F022         	call	i2_lcdInst
 17713                           
 17714                           ;UI.c: 543: printf("LOG 3          <");
 17715  00421C  0EB9               	movlw	low STR_46
 17716  00421E  6E0D               	movwf	i2printf@f,c
 17717  004220  0EFD               	movlw	high STR_46
 17718  004222  6E0E               	movwf	i2printf@f+1,c
 17719  004224  ECB8  F00A         	call	i2_printf	;wreg free
 17720                           
 17721                           ;UI.c: 544: lcdInst(0b11000000);;
 17722  004228  0EC0               	movlw	192
 17723  00422A  ECC3  F022         	call	i2_lcdInst
 17724                           
 17725                           ;UI.c: 545: printf("LOG 4           ");
 17726  00422E  0E20               	movlw	low STR_48
 17727  004230  6E0D               	movwf	i2printf@f,c
 17728  004232  0EFD               	movlw	high STR_48
 17729  004234  6E0E               	movwf	i2printf@f+1,c
 17730  004236  ECB8  F00A         	call	i2_printf	;wreg free
 17731  00423A  0012               	return		;funcret
 17732  00423C                     __end_of_change_state_to_logs_33:
 17733                           	opt stack 0
 17734                           pclatu	equ	0xFFB
 17735                           pclath	equ	0xFFA
 17736                           tblptru	equ	0xFF8
 17737                           tblptrh	equ	0xFF7
 17738                           tblptrl	equ	0xFF6
 17739                           tablat	equ	0xFF5
 17740                           prodh	equ	0xFF4
 17741                           prodl	equ	0xFF3
 17742                           intcon	equ	0xFF2
 17743                           intcon2	equ	0xFF1
 17744                           intcon3	equ	0xFF0
 17745                           indf0	equ	0xFEF
 17746                           postinc0	equ	0xFEE
 17747                           fsr0h	equ	0xFEA
 17748                           fsr0l	equ	0xFE9
 17749                           wreg	equ	0xFE8
 17750                           postdec1	equ	0xFE5
 17751                           fsr1h	equ	0xFE2
 17752                           fsr1l	equ	0xFE1
 17753                           indf2	equ	0xFDF
 17754                           postinc2	equ	0xFDE
 17755                           postdec2	equ	0xFDD
 17756                           fsr2h	equ	0xFDA
 17757                           fsr2l	equ	0xFD9
 17758                           status	equ	0xFD8
 17759                           
 17760 ;; *************** function _change_state_to_logs_23 *****************
 17761 ;; Defined at:
 17762 ;;		line 533 in file "UI.c"
 17763 ;; Parameters:    Size  Location     Type
 17764 ;;		None
 17765 ;; Auto vars:     Size  Location     Type
 17766 ;;		None
 17767 ;; Return value:  Size  Location     Type
 17768 ;;                  1    wreg      void 
 17769 ;; Registers used:
 17770 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17771 ;; Tracked objects:
 17772 ;;		On entry : 0/0
 17773 ;;		On exit  : 0/0
 17774 ;;		Unchanged: 0/0
 17775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17779 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17780 ;;Total ram usage:        0 bytes
 17781 ;; Hardware stack levels used:    1
 17782 ;; Hardware stack levels required when called:    3
 17783 ;; This function calls:
 17784 ;;		i2_lcdInst
 17785 ;;		i2_printf
 17786 ;; This function is called by:
 17787 ;;		_updateMenu
 17788 ;;		_inputHandler
 17789 ;; This function uses a non-reentrant model
 17790 ;;
 17791                           
 17792                           	psect	text69
 17793  0042FA                     __ptext69:
 17794                           	opt stack 0
 17795  0042FA                     _change_state_to_logs_23:
 17796                           	opt stack 18
 17797                           
 17798                           ;UI.c: 534: cur_state = 1023;
 17799                           
 17800                           ;incstack = 0
 17801  0042FA  0E03               	movlw	3
 17802  0042FC  0100               	movlb	0	; () banked
 17803  0042FE  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17804  004300  69DE               	setf	_cur_state& (0+255),b
 17805                           
 17806                           ; BSR set to: 0
 17807                           ;UI.c: 535: lcdInst(0b10000000);;
 17808  004302  0E80               	movlw	128
 17809  004304  ECC3  F022         	call	i2_lcdInst
 17810                           
 17811                           ;UI.c: 536: printf("LOG 2           ");
 17812  004308  0EFE               	movlw	low STR_40
 17813  00430A  6E0D               	movwf	i2printf@f,c
 17814  00430C  0EFC               	movlw	high STR_40
 17815  00430E  6E0E               	movwf	i2printf@f+1,c
 17816  004310  ECB8  F00A         	call	i2_printf	;wreg free
 17817                           
 17818                           ;UI.c: 537: lcdInst(0b11000000);;
 17819  004314  0EC0               	movlw	192
 17820  004316  ECC3  F022         	call	i2_lcdInst
 17821                           
 17822                           ;UI.c: 538: printf("LOG 3          <");
 17823  00431A  0EB9               	movlw	low STR_46
 17824  00431C  6E0D               	movwf	i2printf@f,c
 17825  00431E  0EFD               	movlw	high STR_46
 17826  004320  6E0E               	movwf	i2printf@f+1,c
 17827  004322  ECB8  F00A         	call	i2_printf	;wreg free
 17828  004326  0012               	return		;funcret
 17829  004328                     __end_of_change_state_to_logs_23:
 17830                           	opt stack 0
 17831                           pclatu	equ	0xFFB
 17832                           pclath	equ	0xFFA
 17833                           tblptru	equ	0xFF8
 17834                           tblptrh	equ	0xFF7
 17835                           tblptrl	equ	0xFF6
 17836                           tablat	equ	0xFF5
 17837                           prodh	equ	0xFF4
 17838                           prodl	equ	0xFF3
 17839                           intcon	equ	0xFF2
 17840                           intcon2	equ	0xFF1
 17841                           intcon3	equ	0xFF0
 17842                           indf0	equ	0xFEF
 17843                           postinc0	equ	0xFEE
 17844                           fsr0h	equ	0xFEA
 17845                           fsr0l	equ	0xFE9
 17846                           wreg	equ	0xFE8
 17847                           postdec1	equ	0xFE5
 17848                           fsr1h	equ	0xFE2
 17849                           fsr1l	equ	0xFE1
 17850                           indf2	equ	0xFDF
 17851                           postinc2	equ	0xFDE
 17852                           postdec2	equ	0xFDD
 17853                           fsr2h	equ	0xFDA
 17854                           fsr2l	equ	0xFD9
 17855                           status	equ	0xFD8
 17856                           
 17857 ;; *************** function _change_state_to_logs_22 *****************
 17858 ;; Defined at:
 17859 ;;		line 526 in file "UI.c"
 17860 ;; Parameters:    Size  Location     Type
 17861 ;;		None
 17862 ;; Auto vars:     Size  Location     Type
 17863 ;;		None
 17864 ;; Return value:  Size  Location     Type
 17865 ;;                  1    wreg      void 
 17866 ;; Registers used:
 17867 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17868 ;; Tracked objects:
 17869 ;;		On entry : 0/0
 17870 ;;		On exit  : 0/0
 17871 ;;		Unchanged: 0/0
 17872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17876 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17877 ;;Total ram usage:        0 bytes
 17878 ;; Hardware stack levels used:    1
 17879 ;; Hardware stack levels required when called:    3
 17880 ;; This function calls:
 17881 ;;		i2_lcdInst
 17882 ;;		i2_printf
 17883 ;; This function is called by:
 17884 ;;		_updateMenu
 17885 ;;		_inputHandler
 17886 ;; This function uses a non-reentrant model
 17887 ;;
 17888                           
 17889                           	psect	text70
 17890  00423C                     __ptext70:
 17891                           	opt stack 0
 17892  00423C                     _change_state_to_logs_22:
 17893                           	opt stack 18
 17894                           
 17895                           ;UI.c: 527: cur_state = 1022;
 17896                           
 17897                           ;incstack = 0
 17898  00423C  0E03               	movlw	3
 17899  00423E  0100               	movlb	0	; () banked
 17900  004240  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17901  004242  0EFE               	movlw	254
 17902  004244  6FDE               	movwf	_cur_state& (0+255),b
 17903                           
 17904                           ; BSR set to: 0
 17905                           ;UI.c: 528: lcdInst(0b10000000);;
 17906  004246  0E80               	movlw	128
 17907  004248  ECC3  F022         	call	i2_lcdInst
 17908                           
 17909                           ;UI.c: 529: printf("LOG 2          <");
 17910  00424C  0EA8               	movlw	low STR_42
 17911  00424E  6E0D               	movwf	i2printf@f,c
 17912  004250  0EFD               	movlw	high STR_42
 17913  004252  6E0E               	movwf	i2printf@f+1,c
 17914  004254  ECB8  F00A         	call	i2_printf	;wreg free
 17915                           
 17916                           ;UI.c: 530: lcdInst(0b11000000);;
 17917  004258  0EC0               	movlw	192
 17918  00425A  ECC3  F022         	call	i2_lcdInst
 17919                           
 17920                           ;UI.c: 531: printf("LOG 3           ");
 17921  00425E  0E0F               	movlw	low STR_44
 17922  004260  6E0D               	movwf	i2printf@f,c
 17923  004262  0EFD               	movlw	high STR_44
 17924  004264  6E0E               	movwf	i2printf@f+1,c
 17925  004266  ECB8  F00A         	call	i2_printf	;wreg free
 17926  00426A  0012               	return		;funcret
 17927  00426C                     __end_of_change_state_to_logs_22:
 17928                           	opt stack 0
 17929                           pclatu	equ	0xFFB
 17930                           pclath	equ	0xFFA
 17931                           tblptru	equ	0xFF8
 17932                           tblptrh	equ	0xFF7
 17933                           tblptrl	equ	0xFF6
 17934                           tablat	equ	0xFF5
 17935                           prodh	equ	0xFF4
 17936                           prodl	equ	0xFF3
 17937                           intcon	equ	0xFF2
 17938                           intcon2	equ	0xFF1
 17939                           intcon3	equ	0xFF0
 17940                           indf0	equ	0xFEF
 17941                           postinc0	equ	0xFEE
 17942                           fsr0h	equ	0xFEA
 17943                           fsr0l	equ	0xFE9
 17944                           wreg	equ	0xFE8
 17945                           postdec1	equ	0xFE5
 17946                           fsr1h	equ	0xFE2
 17947                           fsr1l	equ	0xFE1
 17948                           indf2	equ	0xFDF
 17949                           postinc2	equ	0xFDE
 17950                           postdec2	equ	0xFDD
 17951                           fsr2h	equ	0xFDA
 17952                           fsr2l	equ	0xFD9
 17953                           status	equ	0xFD8
 17954                           
 17955 ;; *************** function _change_state_to_logs_12 *****************
 17956 ;; Defined at:
 17957 ;;		line 519 in file "UI.c"
 17958 ;; Parameters:    Size  Location     Type
 17959 ;;		None
 17960 ;; Auto vars:     Size  Location     Type
 17961 ;;		None
 17962 ;; Return value:  Size  Location     Type
 17963 ;;                  1    wreg      void 
 17964 ;; Registers used:
 17965 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17966 ;; Tracked objects:
 17967 ;;		On entry : 0/0
 17968 ;;		On exit  : 0/0
 17969 ;;		Unchanged: 0/0
 17970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17972 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17974 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17975 ;;Total ram usage:        0 bytes
 17976 ;; Hardware stack levels used:    1
 17977 ;; Hardware stack levels required when called:    3
 17978 ;; This function calls:
 17979 ;;		i2_lcdInst
 17980 ;;		i2_printf
 17981 ;; This function is called by:
 17982 ;;		_updateMenu
 17983 ;;		_inputHandler
 17984 ;; This function uses a non-reentrant model
 17985 ;;
 17986                           
 17987                           	psect	text71
 17988  00426C                     __ptext71:
 17989                           	opt stack 0
 17990  00426C                     _change_state_to_logs_12:
 17991                           	opt stack 18
 17992                           
 17993                           ;UI.c: 520: cur_state = 1012;
 17994                           
 17995                           ;incstack = 0
 17996  00426C  0E03               	movlw	3
 17997  00426E  0100               	movlb	0	; () banked
 17998  004270  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17999  004272  0EF4               	movlw	244
 18000  004274  6FDE               	movwf	_cur_state& (0+255),b
 18001                           
 18002                           ; BSR set to: 0
 18003                           ;UI.c: 521: lcdInst(0b10000000);;
 18004  004276  0E80               	movlw	128
 18005  004278  ECC3  F022         	call	i2_lcdInst
 18006                           
 18007                           ;UI.c: 522: printf("LOG 1           ");
 18008  00427C  0EED               	movlw	low STR_41
 18009  00427E  6E0D               	movwf	i2printf@f,c
 18010  004280  0EFC               	movlw	high STR_41
 18011  004282  6E0E               	movwf	i2printf@f+1,c
 18012  004284  ECB8  F00A         	call	i2_printf	;wreg free
 18013                           
 18014                           ;UI.c: 523: lcdInst(0b11000000);;
 18015  004288  0EC0               	movlw	192
 18016  00428A  ECC3  F022         	call	i2_lcdInst
 18017                           
 18018                           ;UI.c: 524: printf("LOG 2          <");
 18019  00428E  0EA8               	movlw	low STR_42
 18020  004290  6E0D               	movwf	i2printf@f,c
 18021  004292  0EFD               	movlw	high STR_42
 18022  004294  6E0E               	movwf	i2printf@f+1,c
 18023  004296  ECB8  F00A         	call	i2_printf	;wreg free
 18024  00429A  0012               	return		;funcret
 18025  00429C                     __end_of_change_state_to_logs_12:
 18026                           	opt stack 0
 18027                           pclatu	equ	0xFFB
 18028                           pclath	equ	0xFFA
 18029                           tblptru	equ	0xFF8
 18030                           tblptrh	equ	0xFF7
 18031                           tblptrl	equ	0xFF6
 18032                           tablat	equ	0xFF5
 18033                           prodh	equ	0xFF4
 18034                           prodl	equ	0xFF3
 18035                           intcon	equ	0xFF2
 18036                           intcon2	equ	0xFF1
 18037                           intcon3	equ	0xFF0
 18038                           indf0	equ	0xFEF
 18039                           postinc0	equ	0xFEE
 18040                           fsr0h	equ	0xFEA
 18041                           fsr0l	equ	0xFE9
 18042                           wreg	equ	0xFE8
 18043                           postdec1	equ	0xFE5
 18044                           fsr1h	equ	0xFE2
 18045                           fsr1l	equ	0xFE1
 18046                           indf2	equ	0xFDF
 18047                           postinc2	equ	0xFDE
 18048                           postdec2	equ	0xFDD
 18049                           fsr2h	equ	0xFDA
 18050                           fsr2l	equ	0xFD9
 18051                           status	equ	0xFD8
 18052                           
 18053 ;; *************** function _change_state_to_logs_11 *****************
 18054 ;; Defined at:
 18055 ;;		line 512 in file "UI.c"
 18056 ;; Parameters:    Size  Location     Type
 18057 ;;		None
 18058 ;; Auto vars:     Size  Location     Type
 18059 ;;		None
 18060 ;; Return value:  Size  Location     Type
 18061 ;;                  1    wreg      void 
 18062 ;; Registers used:
 18063 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18064 ;; Tracked objects:
 18065 ;;		On entry : 0/0
 18066 ;;		On exit  : 0/0
 18067 ;;		Unchanged: 0/0
 18068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18072 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18073 ;;Total ram usage:        0 bytes
 18074 ;; Hardware stack levels used:    1
 18075 ;; Hardware stack levels required when called:    3
 18076 ;; This function calls:
 18077 ;;		i2_lcdInst
 18078 ;;		i2_printf
 18079 ;; This function is called by:
 18080 ;;		_updateMenu
 18081 ;;		_inputHandler
 18082 ;; This function uses a non-reentrant model
 18083 ;;
 18084                           
 18085                           	psect	text72
 18086  00429C                     __ptext72:
 18087                           	opt stack 0
 18088  00429C                     _change_state_to_logs_11:
 18089                           	opt stack 18
 18090                           
 18091                           ;UI.c: 513: cur_state = 1011;
 18092                           
 18093                           ;incstack = 0
 18094  00429C  0E03               	movlw	3
 18095  00429E  0100               	movlb	0	; () banked
 18096  0042A0  6FDF               	movwf	(_cur_state+1)& (0+255),b
 18097  0042A2  0EF3               	movlw	243
 18098  0042A4  6FDE               	movwf	_cur_state& (0+255),b
 18099                           
 18100                           ; BSR set to: 0
 18101                           ;UI.c: 514: lcdInst(0b10000000);;
 18102  0042A6  0E80               	movlw	128
 18103  0042A8  ECC3  F022         	call	i2_lcdInst
 18104                           
 18105                           ;UI.c: 515: printf("LOG 1          <");
 18106  0042AC  0E97               	movlw	low STR_39
 18107  0042AE  6E0D               	movwf	i2printf@f,c
 18108  0042B0  0EFD               	movlw	high STR_39
 18109  0042B2  6E0E               	movwf	i2printf@f+1,c
 18110  0042B4  ECB8  F00A         	call	i2_printf	;wreg free
 18111                           
 18112                           ;UI.c: 516: lcdInst(0b11000000);;
 18113  0042B8  0EC0               	movlw	192
 18114  0042BA  ECC3  F022         	call	i2_lcdInst
 18115                           
 18116                           ;UI.c: 517: printf("LOG 2           ");
 18117  0042BE  0EFE               	movlw	low STR_40
 18118  0042C0  6E0D               	movwf	i2printf@f,c
 18119  0042C2  0EFC               	movlw	high STR_40
 18120  0042C4  6E0E               	movwf	i2printf@f+1,c
 18121  0042C6  ECB8  F00A         	call	i2_printf	;wreg free
 18122  0042CA  0012               	return		;funcret
 18123  0042CC                     __end_of_change_state_to_logs_11:
 18124                           	opt stack 0
 18125                           pclatu	equ	0xFFB
 18126                           pclath	equ	0xFFA
 18127                           tblptru	equ	0xFF8
 18128                           tblptrh	equ	0xFF7
 18129                           tblptrl	equ	0xFF6
 18130                           tablat	equ	0xFF5
 18131                           prodh	equ	0xFF4
 18132                           prodl	equ	0xFF3
 18133                           intcon	equ	0xFF2
 18134                           intcon2	equ	0xFF1
 18135                           intcon3	equ	0xFF0
 18136                           indf0	equ	0xFEF
 18137                           postinc0	equ	0xFEE
 18138                           fsr0h	equ	0xFEA
 18139                           fsr0l	equ	0xFE9
 18140                           wreg	equ	0xFE8
 18141                           postdec1	equ	0xFE5
 18142                           fsr1h	equ	0xFE2
 18143                           fsr1l	equ	0xFE1
 18144                           indf2	equ	0xFDF
 18145                           postinc2	equ	0xFDE
 18146                           postdec2	equ	0xFDD
 18147                           fsr2h	equ	0xFDA
 18148                           fsr2l	equ	0xFD9
 18149                           status	equ	0xFD8
 18150                           
 18151 ;; *************** function _dispLogs *****************
 18152 ;; Defined at:
 18153 ;;		line 465 in file "UI.c"
 18154 ;; Parameters:    Size  Location     Type
 18155 ;;  myLog           2   17[COMRAM] int 
 18156 ;; Auto vars:     Size  Location     Type
 18157 ;;		None
 18158 ;; Return value:  Size  Location     Type
 18159 ;;                  1    wreg      void 
 18160 ;; Registers used:
 18161 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18162 ;; Tracked objects:
 18163 ;;		On entry : 0/0
 18164 ;;		On exit  : 0/0
 18165 ;;		Unchanged: 0/0
 18166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18167 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18170 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18171 ;;Total ram usage:        2 bytes
 18172 ;; Hardware stack levels used:    1
 18173 ;; Hardware stack levels required when called:    2
 18174 ;; This function calls:
 18175 ;;		_retrieveLog
 18176 ;; This function is called by:
 18177 ;;		_updateMenu
 18178 ;; This function uses a non-reentrant model
 18179 ;;
 18180                           
 18181                           	psect	text73
 18182  00446A                     __ptext73:
 18183                           	opt stack 0
 18184  00446A                     _dispLogs:
 18185                           	opt stack 20
 18186                           
 18187                           ;UI.c: 466: logstate = 1;
 18188                           
 18189                           ;incstack = 0
 18190  00446A  0E00               	movlw	0
 18191  00446C  0100               	movlb	0	; () banked
 18192  00446E  6FF7               	movwf	(_logstate+1)& (0+255),b
 18193  004470  0E01               	movlw	1
 18194  004472  6FF6               	movwf	_logstate& (0+255),b
 18195                           
 18196                           ; BSR set to: 0
 18197                           ;UI.c: 467: log = myLog;
 18198  004474  C012  F0E6         	movff	dispLogs@myLog,_log
 18199  004478  C013  F0E7         	movff	dispLogs@myLog+1,_log+1
 18200                           
 18201                           ; BSR set to: 0
 18202                           ;UI.c: 468: retrieveLog(myLog - 1);
 18203  00447C  0EFF               	movlw	255
 18204  00447E  2412               	addwf	dispLogs@myLog,w,c
 18205  004480  6E07               	movwf	retrieveLog@logNum,c
 18206  004482  0EFF               	movlw	255
 18207  004484  2013               	addwfc	dispLogs@myLog+1,w,c
 18208  004486  6E08               	movwf	retrieveLog@logNum+1,c
 18209  004488  ECA7  F017         	call	_retrieveLog	;wreg free
 18210  00448C  0012               	return		;funcret
 18211  00448E                     __end_of_dispLogs:
 18212                           	opt stack 0
 18213                           pclatu	equ	0xFFB
 18214                           pclath	equ	0xFFA
 18215                           tblptru	equ	0xFF8
 18216                           tblptrh	equ	0xFF7
 18217                           tblptrl	equ	0xFF6
 18218                           tablat	equ	0xFF5
 18219                           prodh	equ	0xFF4
 18220                           prodl	equ	0xFF3
 18221                           intcon	equ	0xFF2
 18222                           intcon2	equ	0xFF1
 18223                           intcon3	equ	0xFF0
 18224                           indf0	equ	0xFEF
 18225                           postinc0	equ	0xFEE
 18226                           fsr0h	equ	0xFEA
 18227                           fsr0l	equ	0xFE9
 18228                           wreg	equ	0xFE8
 18229                           postdec1	equ	0xFE5
 18230                           fsr1h	equ	0xFE2
 18231                           fsr1l	equ	0xFE1
 18232                           indf2	equ	0xFDF
 18233                           postinc2	equ	0xFDE
 18234                           postdec2	equ	0xFDD
 18235                           fsr2h	equ	0xFDA
 18236                           fsr2l	equ	0xFD9
 18237                           status	equ	0xFD8
 18238                           
 18239 ;; *************** function _retrieveLog *****************
 18240 ;; Defined at:
 18241 ;;		line 134 in file "EEPROM.c"
 18242 ;; Parameters:    Size  Location     Type
 18243 ;;  logNum          2    6[COMRAM] int 
 18244 ;; Auto vars:     Size  Location     Type
 18245 ;;  i               2   13[COMRAM] int 
 18246 ;;  addr            2   15[COMRAM] unsigned short 
 18247 ;;  byte3           1   12[COMRAM] unsigned char 
 18248 ;;  byte2           1   11[COMRAM] unsigned char 
 18249 ;;  byte1           1   10[COMRAM] unsigned char 
 18250 ;; Return value:  Size  Location     Type
 18251 ;;                  1    wreg      void 
 18252 ;; Registers used:
 18253 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18254 ;; Tracked objects:
 18255 ;;		On entry : 0/0
 18256 ;;		On exit  : 0/0
 18257 ;;		Unchanged: 0/0
 18258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18259 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18260 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18261 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18262 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18263 ;;Total ram usage:       11 bytes
 18264 ;; Hardware stack levels used:    1
 18265 ;; Hardware stack levels required when called:    1
 18266 ;; This function calls:
 18267 ;;		i2_EEPROM_read
 18268 ;;		i2___wmul
 18269 ;; This function is called by:
 18270 ;;		_dispLogs
 18271 ;; This function uses a non-reentrant model
 18272 ;;
 18273                           
 18274                           	psect	text74
 18275  002F4E                     __ptext74:
 18276                           	opt stack 0
 18277  002F4E                     _retrieveLog:
 18278                           	opt stack 20
 18279                           
 18280                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 18281                           
 18282                           ;incstack = 0
 18283  002F4E  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 18284  002F52  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 18285  002F56  0E00               	movlw	0
 18286  002F58  6E04               	movwf	i2___wmul@multiplicand+1,c
 18287  002F5A  0E0B               	movlw	11
 18288  002F5C  6E03               	movwf	i2___wmul@multiplicand,c
 18289  002F5E  ECFD  F021         	call	i2___wmul	;wreg free
 18290  002F62  0E01               	movlw	1
 18291  002F64  2401               	addwf	?i2___wmul,w,c
 18292  002F66  6E10               	movwf	retrieveLog@addr,c
 18293  002F68  0E00               	movlw	0
 18294  002F6A  2002               	addwfc	?i2___wmul+1,w,c
 18295  002F6C  6E11               	movwf	retrieveLog@addr+1,c
 18296                           
 18297                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 18298  002F6E  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18299  002F72  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18300  002F76  EC8F  F022         	call	i2_EEPROM_read	;wreg free
 18301  002F7A  6E0B               	movwf	retrieveLog@byte1,c
 18302                           
 18303                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 18304  002F7C  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 18305  002F80  0E80               	movlw	128
 18306  002F82  1609               	andwf	??_retrieveLog,f,c
 18307  002F84  5009               	movf	??_retrieveLog,w,c
 18308  002F86  0100               	movlb	0	; () banked
 18309  002F88  6FE8               	movwf	_log_completion& (0+255),b
 18310  002F8A  6BE9               	clrf	(_log_completion+1)& (0+255),b
 18311                           
 18312                           ; BSR set to: 0
 18313                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 18314  002F8C  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 18315  002F90  0E0F               	movlw	15
 18316  002F92  1609               	andwf	??_retrieveLog,f,c
 18317  002F94  5009               	movf	??_retrieveLog,w,c
 18318  002F96  0100               	movlb	0	; () banked
 18319  002F98  6FF2               	movwf	_log_count_total& (0+255),b
 18320  002F9A  6BF3               	clrf	(_log_count_total+1)& (0+255),b
 18321                           
 18322                           ; BSR set to: 0
 18323                           ;EEPROM.c: 146: addr++;
 18324  002F9C  4A10               	infsnz	retrieveLog@addr,f,c
 18325  002F9E  2A11               	incf	retrieveLog@addr+1,f,c
 18326                           
 18327                           ; BSR set to: 0
 18328                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 18329  002FA0  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18330  002FA4  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18331  002FA8  EC8F  F022         	call	i2_EEPROM_read	;wreg free
 18332  002FAC  6E0C               	movwf	retrieveLog@byte2,c
 18333                           
 18334                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)(byte2 & 0b11110000);
 18335  002FAE  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 18336  002FB2  0EF0               	movlw	240
 18337  002FB4  1609               	andwf	??_retrieveLog,f,c
 18338  002FB6  5009               	movf	??_retrieveLog,w,c
 18339  002FB8  0100               	movlb	0	; () banked
 18340  002FBA  6FEE               	movwf	_log_count_pop_no_tab& (0+255),b
 18341  002FBC  6BEF               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 18342                           
 18343                           ; BSR set to: 0
 18344                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 18345  002FBE  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 18346  002FC2  0E0F               	movlw	15
 18347  002FC4  1609               	andwf	??_retrieveLog,f,c
 18348  002FC6  5009               	movf	??_retrieveLog,w,c
 18349  002FC8  0100               	movlb	0	; () banked
 18350  002FCA  6FF0               	movwf	_log_count_pop_w_tab& (0+255),b
 18351  002FCC  6BF1               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 18352                           
 18353                           ; BSR set to: 0
 18354                           ;EEPROM.c: 152: addr++;
 18355  002FCE  4A10               	infsnz	retrieveLog@addr,f,c
 18356  002FD0  2A11               	incf	retrieveLog@addr+1,f,c
 18357                           
 18358                           ; BSR set to: 0
 18359                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 18360  002FD2  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18361  002FD6  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18362  002FDA  EC8F  F022         	call	i2_EEPROM_read	;wreg free
 18363  002FDE  6E0D               	movwf	retrieveLog@byte3,c
 18364                           
 18365                           ;EEPROM.c: 154: log_count_can_w_lab = (int)(byte3 & 0b11110000);
 18366  002FE0  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 18367  002FE4  0EF0               	movlw	240
 18368  002FE6  1609               	andwf	??_retrieveLog,f,c
 18369  002FE8  5009               	movf	??_retrieveLog,w,c
 18370  002FEA  0100               	movlb	0	; () banked
 18371  002FEC  6FEC               	movwf	_log_count_can_w_lab& (0+255),b
 18372  002FEE  6BED               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 18373                           
 18374                           ; BSR set to: 0
 18375                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 18376  002FF0  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 18377  002FF4  0E0F               	movlw	15
 18378  002FF6  1609               	andwf	??_retrieveLog,f,c
 18379  002FF8  5009               	movf	??_retrieveLog,w,c
 18380  002FFA  0100               	movlb	0	; () banked
 18381  002FFC  6FEA               	movwf	_log_count_can_no_lab& (0+255),b
 18382  002FFE  6BEB               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 18383                           
 18384                           ; BSR set to: 0
 18385                           ;EEPROM.c: 156: addr++;
 18386  003000  4A10               	infsnz	retrieveLog@addr,f,c
 18387  003002  2A11               	incf	retrieveLog@addr+1,f,c
 18388                           
 18389                           ; BSR set to: 0
 18390                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 18391  003004  0E00               	movlw	0
 18392  003006  6E0F               	movwf	retrieveLog@i+1,c
 18393  003008  0E00               	movlw	0
 18394  00300A  6E0E               	movwf	retrieveLog@i,c
 18395  00300C                     i2l5872:
 18396                           
 18397                           ; BSR set to: 0
 18398  00300C  BE0F               	btfsc	retrieveLog@i+1,7,c
 18399  00300E  D006               	goto	i2l5876
 18400  003010  500F               	movf	retrieveLog@i+1,w,c
 18401  003012  E11E               	bnz	i2l5884
 18402  003014  0E07               	movlw	7
 18403  003016  5C0E               	subwf	retrieveLog@i,w,c
 18404  003018  B0D8               	btfsc	status,0,c
 18405  00301A  D01A               	goto	i2l5884
 18406  00301C                     i2l5876:
 18407                           
 18408                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 18409  00301C  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18410  003020  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18411  003024  EC8F  F022         	call	i2_EEPROM_read	;wreg free
 18412  003028  6E09               	movwf	??_retrieveLog& (0+255),c
 18413  00302A  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 18414  00302C  90D8               	bcf	status,0,c
 18415  00302E  340E               	rlcf	retrieveLog@i,w,c
 18416  003030  6ED9               	movwf	fsr2l,c
 18417  003032  340F               	rlcf	retrieveLog@i+1,w,c
 18418  003034  6EDA               	movwf	fsr2h,c
 18419  003036  0E00               	movlw	low _log_startTime
 18420  003038  26D9               	addwf	fsr2l,f,c
 18421  00303A  0E01               	movlw	high _log_startTime
 18422  00303C  22DA               	addwfc	fsr2h,f,c
 18423  00303E  C009  FFDE         	movff	??_retrieveLog,postinc2
 18424  003042  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 18425                           
 18426                           ;EEPROM.c: 161: addr++;
 18427  003046  4A10               	infsnz	retrieveLog@addr,f,c
 18428  003048  2A11               	incf	retrieveLog@addr+1,f,c
 18429  00304A  4A0E               	infsnz	retrieveLog@i,f,c
 18430  00304C  2A0F               	incf	retrieveLog@i+1,f,c
 18431  00304E  D7DE               	goto	i2l5872
 18432  003050                     i2l5884:
 18433                           
 18434                           ;EEPROM.c: 162: }
 18435                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 18436  003050  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18437  003054  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18438  003058  EC8F  F022         	call	i2_EEPROM_read	;wreg free
 18439  00305C  6E09               	movwf	??_retrieveLog& (0+255),c
 18440  00305E  5009               	movf	??_retrieveLog,w,c
 18441  003060  0100               	movlb	0	; () banked
 18442  003062  6FF4               	movwf	_log_total_time& (0+255),b
 18443  003064  6BF5               	clrf	(_log_total_time+1)& (0+255),b
 18444                           
 18445                           ; BSR set to: 0
 18446  003066  0012               	return		;funcret
 18447  003068                     __end_of_retrieveLog:
 18448                           	opt stack 0
 18449                           pclatu	equ	0xFFB
 18450                           pclath	equ	0xFFA
 18451                           tblptru	equ	0xFF8
 18452                           tblptrh	equ	0xFF7
 18453                           tblptrl	equ	0xFF6
 18454                           tablat	equ	0xFF5
 18455                           prodh	equ	0xFF4
 18456                           prodl	equ	0xFF3
 18457                           intcon	equ	0xFF2
 18458                           intcon2	equ	0xFF1
 18459                           intcon3	equ	0xFF0
 18460                           indf0	equ	0xFEF
 18461                           postinc0	equ	0xFEE
 18462                           fsr0h	equ	0xFEA
 18463                           fsr0l	equ	0xFE9
 18464                           wreg	equ	0xFE8
 18465                           postdec1	equ	0xFE5
 18466                           fsr1h	equ	0xFE2
 18467                           fsr1l	equ	0xFE1
 18468                           indf2	equ	0xFDF
 18469                           postinc2	equ	0xFDE
 18470                           postdec2	equ	0xFDD
 18471                           fsr2h	equ	0xFDA
 18472                           fsr2l	equ	0xFD9
 18473                           status	equ	0xFD8
 18474                           
 18475 ;; *************** function i2_EEPROM_read *****************
 18476 ;; Defined at:
 18477 ;;		line 68 in file "EEPROM.c"
 18478 ;; Parameters:    Size  Location     Type
 18479 ;;  address         2    0[COMRAM] unsigned short 
 18480 ;; Auto vars:     Size  Location     Type
 18481 ;;		None
 18482 ;; Return value:  Size  Location     Type
 18483 ;;                  1    wreg      unsigned char 
 18484 ;; Registers used:
 18485 ;;		wreg, status,2
 18486 ;; Tracked objects:
 18487 ;;		On entry : 0/0
 18488 ;;		On exit  : 0/0
 18489 ;;		Unchanged: 0/0
 18490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18491 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18494 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18495 ;;Total ram usage:        2 bytes
 18496 ;; Hardware stack levels used:    1
 18497 ;; This function calls:
 18498 ;;		Nothing
 18499 ;; This function is called by:
 18500 ;;		_retrieveLog
 18501 ;; This function uses a non-reentrant model
 18502 ;;
 18503                           
 18504                           	psect	text75
 18505  00451E                     __ptext75:
 18506                           	opt stack 0
 18507  00451E                     i2_EEPROM_read:
 18508                           	opt stack 20
 18509                           
 18510                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 18511                           
 18512                           ; BSR set to: 0
 18513                           ;incstack = 0
 18514  00451E  5002               	movf	i2EEPROM_read@address+1,w,c
 18515  004520  6EAA               	movwf	4010,c	;volatile
 18516                           
 18517                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 18518  004522  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 18519                           
 18520                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 18521  004526  9EA6               	bcf	4006,7,c	;volatile
 18522                           
 18523                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 18524  004528  9CA6               	bcf	4006,6,c	;volatile
 18525                           
 18526                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 18527  00452A  80A6               	bsf	4006,0,c	;volatile
 18528  00452C                     i2l926:
 18529  00452C  B0A6               	btfsc	4006,0,c	;volatile
 18530  00452E  D7FE               	goto	i2l926
 18531                           
 18532                           ;EEPROM.c: 81: return EEDATA;
 18533  004530  50A8               	movf	4008,w,c	;volatile
 18534  004532  0012               	return	
 18535  004534                     __end_ofi2_EEPROM_read:
 18536                           	opt stack 0
 18537                           pclatu	equ	0xFFB
 18538                           pclath	equ	0xFFA
 18539                           tblptru	equ	0xFF8
 18540                           tblptrh	equ	0xFF7
 18541                           tblptrl	equ	0xFF6
 18542                           tablat	equ	0xFF5
 18543                           prodh	equ	0xFF4
 18544                           prodl	equ	0xFF3
 18545                           intcon	equ	0xFF2
 18546                           intcon2	equ	0xFF1
 18547                           intcon3	equ	0xFF0
 18548                           indf0	equ	0xFEF
 18549                           postinc0	equ	0xFEE
 18550                           fsr0h	equ	0xFEA
 18551                           fsr0l	equ	0xFE9
 18552                           wreg	equ	0xFE8
 18553                           postdec1	equ	0xFE5
 18554                           fsr1h	equ	0xFE2
 18555                           fsr1l	equ	0xFE1
 18556                           indf2	equ	0xFDF
 18557                           postinc2	equ	0xFDE
 18558                           postdec2	equ	0xFDD
 18559                           fsr2h	equ	0xFDA
 18560                           fsr2l	equ	0xFD9
 18561                           status	equ	0xFD8
 18562                           
 18563 ;; *************** function _printSortTimer *****************
 18564 ;; Defined at:
 18565 ;;		line 263 in file "sort.c"
 18566 ;; Parameters:    Size  Location     Type
 18567 ;;		None
 18568 ;; Auto vars:     Size  Location     Type
 18569 ;;  i               2   72[COMRAM] int 
 18570 ;;  curTime        14   46[COMRAM] int [7]
 18571 ;;  timeDiff        2   70[COMRAM] unsigned int 
 18572 ;;  sec             2   66[COMRAM] int 
 18573 ;;  min             2   64[COMRAM] int 
 18574 ;;  cur_sec         2   62[COMRAM] unsigned int 
 18575 ;;  start_sec       2   60[COMRAM] unsigned int 
 18576 ;;  hour            2   44[COMRAM] int 
 18577 ;; Return value:  Size  Location     Type
 18578 ;;                  1    wreg      void 
 18579 ;; Registers used:
 18580 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18581 ;; Tracked objects:
 18582 ;;		On entry : 0/0
 18583 ;;		On exit  : 0/0
 18584 ;;		Unchanged: 0/0
 18585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18587 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18588 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18589 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18590 ;;Total ram usage:       33 bytes
 18591 ;; Hardware stack levels used:    1
 18592 ;; Hardware stack levels required when called:    3
 18593 ;; This function calls:
 18594 ;;		i2___lwdiv
 18595 ;;		i2___lwmod
 18596 ;;		i2___wmul
 18597 ;;		i2_getRTC
 18598 ;;		i2_lcdInst
 18599 ;;		i2_printf
 18600 ;; This function is called by:
 18601 ;;		_handler
 18602 ;; This function uses a non-reentrant model
 18603 ;;
 18604                           
 18605                           	psect	text76
 18606  00238E                     __ptext76:
 18607                           	opt stack 0
 18608  00238E                     _printSortTimer:
 18609                           	opt stack 20
 18610                           
 18611                           ;sort.c: 264: getRTC();
 18612                           
 18613                           ;incstack = 0
 18614  00238E  EC4A  F01D         	call	i2_getRTC	;wreg free
 18615                           
 18616                           ;sort.c: 265: int curTime[7];
 18617                           ;sort.c: 266: for(int i = 0; i < 7; i++){
 18618  002392  0E00               	movlw	0
 18619  002394  6E4A               	movwf	printSortTimer@i+1,c
 18620  002396  0E00               	movlw	0
 18621  002398  6E49               	movwf	printSortTimer@i,c
 18622  00239A                     i2l7880:
 18623  00239A  BE4A               	btfsc	printSortTimer@i+1,7,c
 18624  00239C  D006               	goto	i2l7884
 18625  00239E  504A               	movf	printSortTimer@i+1,w,c
 18626  0023A0  E131               	bnz	i2l7890
 18627  0023A2  0E07               	movlw	7
 18628  0023A4  5C49               	subwf	printSortTimer@i,w,c
 18629  0023A6  B0D8               	btfsc	status,0,c
 18630  0023A8  D02D               	goto	i2l7890
 18631  0023AA                     i2l7884:
 18632                           
 18633                           ;sort.c: 267: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 18634  0023AA  0E24               	movlw	low _time
 18635  0023AC  2449               	addwf	printSortTimer@i,w,c
 18636  0023AE  6ED9               	movwf	fsr2l,c
 18637  0023B0  0E01               	movlw	high _time
 18638  0023B2  204A               	addwfc	printSortTimer@i+1,w,c
 18639  0023B4  6EDA               	movwf	fsr2h,c
 18640  0023B6  50DF               	movf	indf2,w,c
 18641  0023B8  6E2A               	movwf	??_printSortTimer& (0+255),c
 18642  0023BA  3A2A               	swapf	??_printSortTimer,f,c
 18643  0023BC  0E0F               	movlw	15
 18644  0023BE  162A               	andwf	??_printSortTimer,f,c
 18645  0023C0  0E0F               	movlw	15
 18646  0023C2  162A               	andwf	??_printSortTimer,f,c
 18647  0023C4  502A               	movf	??_printSortTimer,w,c
 18648  0023C6  0D0A               	mullw	10
 18649  0023C8  0E24               	movlw	low _time
 18650  0023CA  2449               	addwf	printSortTimer@i,w,c
 18651  0023CC  6ED9               	movwf	fsr2l,c
 18652  0023CE  0E01               	movlw	high _time
 18653  0023D0  204A               	addwfc	printSortTimer@i+1,w,c
 18654  0023D2  6EDA               	movwf	fsr2h,c
 18655  0023D4  50DF               	movf	indf2,w,c
 18656  0023D6  0B0F               	andlw	15
 18657  0023D8  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 18658  0023DA  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 18659  0023DC  50F3               	movf	prodl,w,c
 18660  0023DE  262B               	addwf	??_printSortTimer+1,f,c
 18661  0023E0  50F4               	movf	prodh,w,c
 18662  0023E2  222C               	addwfc	??_printSortTimer+2,f,c
 18663  0023E4  90D8               	bcf	status,0,c
 18664  0023E6  3449               	rlcf	printSortTimer@i,w,c
 18665  0023E8  6ED9               	movwf	fsr2l,c
 18666  0023EA  344A               	rlcf	printSortTimer@i+1,w,c
 18667  0023EC  6EDA               	movwf	fsr2h,c
 18668  0023EE  0E2F               	movlw	low printSortTimer@curTime
 18669  0023F0  26D9               	addwf	fsr2l,f,c
 18670  0023F2  0E00               	movlw	high printSortTimer@curTime
 18671  0023F4  22DA               	addwfc	fsr2h,f,c
 18672  0023F6  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 18673  0023FA  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 18674  0023FE  4A49               	infsnz	printSortTimer@i,f,c
 18675  002400  2A4A               	incf	printSortTimer@i+1,f,c
 18676  002402  D7CB               	goto	i2l7880
 18677  002404                     i2l7890:
 18678                           
 18679                           ;sort.c: 268: }
 18680                           ;sort.c: 269: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 18681  002404  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 18682  002408  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 18683  00240C  0E00               	movlw	0
 18684  00240E  6E04               	movwf	i2___wmul@multiplicand+1,c
 18685  002410  0E3C               	movlw	60
 18686  002412  6E03               	movwf	i2___wmul@multiplicand,c
 18687  002414  ECFD  F021         	call	i2___wmul	;wreg free
 18688  002418  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 18689  00241C  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 18690  002420  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 18691  002424  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 18692  002428  0E0E               	movlw	14
 18693  00242A  6E04               	movwf	i2___wmul@multiplicand+1,c
 18694  00242C  0E10               	movlw	16
 18695  00242E  6E03               	movwf	i2___wmul@multiplicand,c
 18696  002430  ECFD  F021         	call	i2___wmul	;wreg free
 18697  002434  5001               	movf	?i2___wmul,w,c
 18698  002436  262A               	addwf	??_printSortTimer,f,c
 18699  002438  5002               	movf	?i2___wmul+1,w,c
 18700  00243A  222B               	addwfc	??_printSortTimer+1,f,c
 18701  00243C  0101               	movlb	1	; () banked
 18702  00243E  510E               	movf	_startTime& (0+255),w,b
 18703  002440  242A               	addwf	??_printSortTimer,w,c
 18704  002442  6E3D               	movwf	printSortTimer@start_sec,c
 18705  002444  0101               	movlb	1	; () banked
 18706  002446  510F               	movf	(_startTime+1)& (0+255),w,b
 18707  002448  202B               	addwfc	??_printSortTimer+1,w,c
 18708  00244A  6E3E               	movwf	printSortTimer@start_sec+1,c
 18709                           
 18710                           ;sort.c: 270: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 18711  00244C  C031  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 18712  002450  C032  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 18713  002454  0E00               	movlw	0
 18714  002456  6E04               	movwf	i2___wmul@multiplicand+1,c
 18715  002458  0E3C               	movlw	60
 18716  00245A  6E03               	movwf	i2___wmul@multiplicand,c
 18717  00245C  ECFD  F021         	call	i2___wmul	;wreg free
 18718  002460  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 18719  002464  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 18720  002468  C033  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 18721  00246C  C034  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 18722  002470  0E0E               	movlw	14
 18723  002472  6E04               	movwf	i2___wmul@multiplicand+1,c
 18724  002474  0E10               	movlw	16
 18725  002476  6E03               	movwf	i2___wmul@multiplicand,c
 18726  002478  ECFD  F021         	call	i2___wmul	;wreg free
 18727  00247C  5001               	movf	?i2___wmul,w,c
 18728  00247E  262A               	addwf	??_printSortTimer,f,c
 18729  002480  5002               	movf	?i2___wmul+1,w,c
 18730  002482  222B               	addwfc	??_printSortTimer+1,f,c
 18731  002484  502F               	movf	printSortTimer@curTime,w,c
 18732  002486  242A               	addwf	??_printSortTimer,w,c
 18733  002488  6E3F               	movwf	printSortTimer@cur_sec,c
 18734  00248A  5030               	movf	printSortTimer@curTime+1,w,c
 18735  00248C  202B               	addwfc	??_printSortTimer+1,w,c
 18736  00248E  6E40               	movwf	printSortTimer@cur_sec+1,c
 18737                           
 18738                           ;sort.c: 271: unsigned int timeDiff = cur_sec - start_sec;
 18739  002490  C03D  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 18740  002494  C03E  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 18741  002498  1E2A               	comf	??_printSortTimer,f,c
 18742  00249A  1E2B               	comf	??_printSortTimer+1,f,c
 18743  00249C  4A2A               	infsnz	??_printSortTimer,f,c
 18744  00249E  2A2B               	incf	??_printSortTimer+1,f,c
 18745  0024A0  503F               	movf	printSortTimer@cur_sec,w,c
 18746  0024A2  242A               	addwf	??_printSortTimer,w,c
 18747  0024A4  6E47               	movwf	printSortTimer@timeDiff,c
 18748  0024A6  5040               	movf	printSortTimer@cur_sec+1,w,c
 18749  0024A8  202B               	addwfc	??_printSortTimer+1,w,c
 18750  0024AA  6E48               	movwf	printSortTimer@timeDiff+1,c
 18751                           
 18752                           ;sort.c: 273: total_time = timeDiff;
 18753  0024AC  C047  F0F8         	movff	printSortTimer@timeDiff,_total_time
 18754  0024B0  C048  F0F9         	movff	printSortTimer@timeDiff+1,_total_time+1
 18755                           
 18756                           ;sort.c: 275: if(timeDiff >= 10){
 18757  0024B4  5048               	movf	printSortTimer@timeDiff+1,w,c
 18758  0024B6  E104               	bnz	i2u673_40
 18759  0024B8  0E0A               	movlw	10
 18760  0024BA  5C47               	subwf	printSortTimer@timeDiff,w,c
 18761  0024BC  A0D8               	btfss	status,0,c
 18762  0024BE  D003               	goto	i2l7900
 18763  0024C0                     i2u673_40:
 18764                           
 18765                           ;sort.c: 276: machine_state = DoneSorting_state;
 18766  0024C0  0E02               	movlw	2
 18767  0024C2  0100               	movlb	0	; () banked
 18768  0024C4  6FFC               	movwf	_machine_state& (0+255),b
 18769  0024C6                     i2l7900:
 18770                           
 18771                           ;sort.c: 278: }
 18772                           ;sort.c: 280: int hour = timeDiff / 3600;
 18773  0024C6  C047  F006         	movff	printSortTimer@timeDiff,i2___lwdiv@dividend
 18774  0024CA  C048  F007         	movff	printSortTimer@timeDiff+1,i2___lwdiv@dividend+1
 18775  0024CE  0E0E               	movlw	14
 18776  0024D0  6E09               	movwf	i2___lwdiv@divisor+1,c
 18777  0024D2  0E10               	movlw	16
 18778  0024D4  6E08               	movwf	i2___lwdiv@divisor,c
 18779  0024D6  EC00  F01F         	call	i2___lwdiv	;wreg free
 18780  0024DA  C006  F02D         	movff	?i2___lwdiv,printSortTimer@hour
 18781  0024DE  C007  F02E         	movff	?i2___lwdiv+1,printSortTimer@hour+1
 18782                           
 18783                           ;sort.c: 281: int min = (timeDiff % 3600) / 60;
 18784  0024E2  0E0E               	movlw	14
 18785  0024E4  6E04               	movwf	i2___lwmod@divisor+1,c
 18786  0024E6  0E10               	movlw	16
 18787  0024E8  6E03               	movwf	i2___lwmod@divisor,c
 18788  0024EA  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 18789  0024EE  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 18790  0024F2  ECE6  F01F         	call	i2___lwmod	;wreg free
 18791  0024F6  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 18792  0024FA  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 18793  0024FE  0E00               	movlw	0
 18794  002500  6E09               	movwf	i2___lwdiv@divisor+1,c
 18795  002502  0E3C               	movlw	60
 18796  002504  6E08               	movwf	i2___lwdiv@divisor,c
 18797  002506  EC00  F01F         	call	i2___lwdiv	;wreg free
 18798  00250A  C006  F041         	movff	?i2___lwdiv,printSortTimer@min
 18799  00250E  C007  F042         	movff	?i2___lwdiv+1,printSortTimer@min+1
 18800                           
 18801                           ;sort.c: 282: int sec = (timeDiff % 3600) % 60;
 18802  002512  0E0E               	movlw	14
 18803  002514  6E04               	movwf	i2___lwmod@divisor+1,c
 18804  002516  0E10               	movlw	16
 18805  002518  6E03               	movwf	i2___lwmod@divisor,c
 18806  00251A  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 18807  00251E  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 18808  002522  ECE6  F01F         	call	i2___lwmod	;wreg free
 18809  002526  C001  F045         	movff	?i2___lwmod,_printSortTimer$2361
 18810  00252A  C002  F046         	movff	?i2___lwmod+1,_printSortTimer$2361+1
 18811                           
 18812                           ;sort.c: 282: int sec = (timeDiff % 3600) % 60;
 18813  00252E  C045  F001         	movff	_printSortTimer$2361,i2___lwmod@dividend
 18814  002532  C046  F002         	movff	_printSortTimer$2361+1,i2___lwmod@dividend+1
 18815  002536  0E00               	movlw	0
 18816  002538  6E04               	movwf	i2___lwmod@divisor+1,c
 18817  00253A  0E3C               	movlw	60
 18818  00253C  6E03               	movwf	i2___lwmod@divisor,c
 18819  00253E  ECE6  F01F         	call	i2___lwmod	;wreg free
 18820  002542  C001  F043         	movff	?i2___lwmod,printSortTimer@sec
 18821  002546  C002  F044         	movff	?i2___lwmod+1,printSortTimer@sec+1
 18822                           
 18823                           ;sort.c: 284: lcdInst(0b10000000);;
 18824  00254A  0E80               	movlw	128
 18825  00254C  ECC3  F022         	call	i2_lcdInst
 18826                           
 18827                           ;sort.c: 285: printf("SORTING...");
 18828  002550  0E84               	movlw	low STR_64
 18829  002552  6E0D               	movwf	i2printf@f,c
 18830  002554  0EFF               	movlw	high STR_64
 18831  002556  6E0E               	movwf	i2printf@f+1,c
 18832  002558  ECB8  F00A         	call	i2_printf	;wreg free
 18833                           
 18834                           ;sort.c: 286: lcdInst(0b11000000);;
 18835  00255C  0EC0               	movlw	192
 18836  00255E  ECC3  F022         	call	i2_lcdInst
 18837                           
 18838                           ;sort.c: 287: printf("TIME %d:%02d", min, sec);
 18839  002562  0E55               	movlw	low STR_65
 18840  002564  6E0D               	movwf	i2printf@f,c
 18841  002566  0EFF               	movlw	high STR_65
 18842  002568  6E0E               	movwf	i2printf@f+1,c
 18843  00256A  C041  F00F         	movff	printSortTimer@min,?i2_printf+2
 18844  00256E  C042  F010         	movff	printSortTimer@min+1,?i2_printf+3
 18845  002572  C043  F011         	movff	printSortTimer@sec,?i2_printf+4
 18846  002576  C044  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 18847  00257A  ECB8  F00A         	call	i2_printf	;wreg free
 18848  00257E  0012               	return		;funcret
 18849  002580                     __end_of_printSortTimer:
 18850                           	opt stack 0
 18851                           pclatu	equ	0xFFB
 18852                           pclath	equ	0xFFA
 18853                           tblptru	equ	0xFF8
 18854                           tblptrh	equ	0xFF7
 18855                           tblptrl	equ	0xFF6
 18856                           tablat	equ	0xFF5
 18857                           prodh	equ	0xFF4
 18858                           prodl	equ	0xFF3
 18859                           intcon	equ	0xFF2
 18860                           intcon2	equ	0xFF1
 18861                           intcon3	equ	0xFF0
 18862                           indf0	equ	0xFEF
 18863                           postinc0	equ	0xFEE
 18864                           fsr0h	equ	0xFEA
 18865                           fsr0l	equ	0xFE9
 18866                           wreg	equ	0xFE8
 18867                           postdec1	equ	0xFE5
 18868                           fsr1h	equ	0xFE2
 18869                           fsr1l	equ	0xFE1
 18870                           indf2	equ	0xFDF
 18871                           postinc2	equ	0xFDE
 18872                           postdec2	equ	0xFDD
 18873                           fsr2h	equ	0xFDA
 18874                           fsr2l	equ	0xFD9
 18875                           status	equ	0xFD8
 18876                           
 18877 ;; *************** function i2_printf *****************
 18878 ;; Defined at:
 18879 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 18880 ;; Parameters:    Size  Location     Type
 18881 ;;  f               2   12[COMRAM] PTR const unsigned char 
 18882 ;;		 -> STR_111(17), STR_110(17), STR_109(10), STR_108(13), 
 18883 ;;		 -> STR_107(18), STR_106(18), STR_105(17), STR_104(15), 
 18884 ;;		 -> STR_103(15), STR_102(15), STR_101(17), STR_100(17), 
 18885 ;;		 -> STR_99(17), STR_98(16), STR_97(17), STR_96(17), 
 18886 ;;		 -> STR_95(17), STR_94(17), STR_93(17), STR_92(17), 
 18887 ;;		 -> STR_91(15), STR_90(11), STR_89(17), STR_88(11), 
 18888 ;;		 -> STR_87(17), STR_86(14), STR_85(15), STR_84(14), 
 18889 ;;		 -> STR_83(10), STR_82(16), STR_81(15), STR_80(15), 
 18890 ;;		 -> STR_79(13), STR_78(14), STR_77(8), STR_76(14), 
 18891 ;;		 -> STR_75(15), STR_74(12), STR_73(14), STR_72(17), 
 18892 ;;		 -> STR_71(14), STR_70(15), STR_69(17), STR_68(17), 
 18893 ;;		 -> STR_67(7), STR_66(21), STR_65(13), STR_64(11), 
 18894 ;;		 -> STR_63(24), STR_50(17), STR_49(17), STR_48(17), 
 18895 ;;		 -> STR_47(17), STR_46(17), STR_45(17), STR_44(17), 
 18896 ;;		 -> STR_43(17), STR_42(17), STR_41(17), STR_40(17), 
 18897 ;;		 -> STR_39(17), STR_38(17), STR_37(17), STR_36(17), 
 18898 ;;		 -> STR_35(17), STR_34(17), STR_33(17), STR_32(17), 
 18899 ;;		 -> STR_31(17), STR_30(17), STR_29(3), STR_28(17), 
 18900 ;;		 -> STR_27(19), STR_26(17), STR_25(19), STR_24(17), 
 18901 ;;		 -> STR_23(14), STR_22(10), STR_21(24), STR_7(7), 
 18902 ;;		 -> STR_6(17), STR_5(18), STR_4(16), STR_3(18), 
 18903 ;;		 -> STR_2(14), STR_1(18), 
 18904 ;; Auto vars:     Size  Location     Type
 18905 ;;  printf          4    0        struct .
 18906 ;;  printf          2   39[COMRAM] int 
 18907 ;;  printf          2   35[COMRAM] unsigned int 
 18908 ;;  printf          2   33[COMRAM] unsigned int 
 18909 ;;  printf          2   31[COMRAM] PTR void [1]
 18910 ;;		 -> ?i2_printf(2), ?_printf(2), 
 18911 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 18912 ;;		 -> STR_112(7), count_total(2), printRTC@month(4), UI@month(4), 
 18913 ;;  printf          1   38[COMRAM] char 
 18914 ;;  printf          1   37[COMRAM] unsigned char 
 18915 ;;  printf          1   28[COMRAM] char 
 18916 ;; Return value:  Size  Location     Type
 18917 ;;                  2   12[COMRAM] int 
 18918 ;; Registers used:
 18919 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18920 ;; Tracked objects:
 18921 ;;		On entry : 0/0
 18922 ;;		On exit  : 0/0
 18923 ;;		Unchanged: 0/0
 18924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18925 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18926 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18927 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18928 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18929 ;;Total ram usage:       29 bytes
 18930 ;; Hardware stack levels used:    1
 18931 ;; Hardware stack levels required when called:    2
 18932 ;; This function calls:
 18933 ;;		i2___lwdiv
 18934 ;;		i2___lwmod
 18935 ;;		i2___wmul
 18936 ;;		i2_isdigit
 18937 ;;		i2_putch
 18938 ;; This function is called by:
 18939 ;;		_change_state_to_menu_11
 18940 ;;		_change_state_to_menu_23
 18941 ;;		_change_state_to_logs_11
 18942 ;;		_change_state_to_logs_12
 18943 ;;		_change_state_to_logs_22
 18944 ;;		_change_state_to_logs_23
 18945 ;;		_change_state_to_logs_33
 18946 ;;		_change_state_to_logs_34
 18947 ;;		_printSortTimer
 18948 ;;		i2_change_state_to_menu_start
 18949 ;;		i2_change_state_to_menu_12
 18950 ;;		i2_change_state_to_menu_22
 18951 ;;		i2_printRTC
 18952 ;; This function uses a non-reentrant model
 18953 ;;
 18954                           
 18955                           	psect	text77
 18956  001570                     __ptext77:
 18957                           	opt stack 0
 18958  001570                     i2_printf:
 18959                           	opt stack 19
 18960                           
 18961                           ;doprnt.c: 466: va_list ap;
 18962                           ;doprnt.c: 499: signed char c;
 18963                           ;doprnt.c: 501: int width;
 18964                           ;doprnt.c: 506: signed char prec;
 18965                           ;doprnt.c: 508: unsigned char flag;
 18966                           ;doprnt.c: 523: union {
 18967                           ;doprnt.c: 524: unsigned long vd;
 18968                           ;doprnt.c: 525: double integ;
 18969                           ;doprnt.c: 526: } tmpval;
 18970                           ;doprnt.c: 528: unsigned int val;
 18971                           ;doprnt.c: 529: unsigned len;
 18972                           ;doprnt.c: 530: const char * cp;
 18973                           ;doprnt.c: 533: *ap = __va_start();
 18974                           
 18975                           ;incstack = 0
 18976  001570  0E0F               	movlw	low (?i2_printf+2)
 18977  001572  6E20               	movwf	i2printf@ap,c
 18978  001574  0E00               	movlw	high (?i2_printf+2)
 18979  001576  6E21               	movwf	i2printf@ap+1,c
 18980                           
 18981                           ;doprnt.c: 536: while(c = *f++) {
 18982  001578  D1A4               	goto	i2l5690
 18983  00157A                     i2l5560:
 18984                           
 18985                           ;doprnt.c: 538: if(c != '%')
 18986  00157A  0E25               	movlw	37
 18987  00157C  1827               	xorwf	i2printf@c,w,c
 18988  00157E  B4D8               	btfsc	status,2,c
 18989  001580  D004               	goto	i2l5564
 18990                           
 18991                           ;doprnt.c: 540: {
 18992                           ;doprnt.c: 541: (putch(c) );
 18993  001582  5027               	movf	i2printf@c,w,c
 18994  001584  ECBD  F022         	call	i2_putch
 18995                           
 18996                           ;doprnt.c: 542: continue;
 18997  001588  D19C               	goto	i2l5690
 18998  00158A                     i2l5564:
 18999                           
 19000                           ;doprnt.c: 543: }
 19001                           ;doprnt.c: 546: width = 0;
 19002  00158A  0E00               	movlw	0
 19003  00158C  6E29               	movwf	i2printf@width+1,c
 19004  00158E  0E00               	movlw	0
 19005  001590  6E28               	movwf	i2printf@width,c
 19006                           
 19007                           ;doprnt.c: 548: flag = 0;
 19008  001592  0E00               	movlw	0
 19009  001594  6E26               	movwf	i2printf@flag,c
 19010                           
 19011                           ;doprnt.c: 551: switch(*f) {
 19012                           
 19013                           ;doprnt.c: 550: for(;;) {
 19014  001596  D003               	goto	i2l5570
 19015  001598                     i2l5566:
 19016                           
 19017                           ;doprnt.c: 580: flag |= 0x04;
 19018  001598  8426               	bsf	i2printf@flag,2,c
 19019                           
 19020                           ;doprnt.c: 581: f++;
 19021  00159A  4A0D               	infsnz	i2printf@f,f,c
 19022  00159C  2A0E               	incf	i2printf@f+1,f,c
 19023  00159E                     i2l5570:
 19024  00159E  C00D  FFF6         	movff	i2printf@f,tblptrl
 19025  0015A2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19026  0015A6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19027  0015A6  6AF8               	clrf	tblptru,c
 19028  0015A8                     	endif
 19029  0015A8                     	if	0	;tblptru may be non-zero
 19030  0015A8                     	endif
 19031  0015A8  0008               	tblrd		*
 19032  0015AA  50F5               	movf	tablat,w,c
 19033                           
 19034                           ; Switch size 1, requested type "space"
 19035                           ; Number of cases is 1, Range of values is 48 to 48
 19036                           ; switch strategies available:
 19037                           ; Name         Instructions Cycles
 19038                           ; simple_byte            4     3 (average)
 19039                           ;	Chosen strategy is simple_byte
 19040  0015AC  0A30               	xorlw	48	; case 48
 19041  0015AE  B4D8               	btfsc	status,2,c
 19042  0015B0  D7F3               	goto	i2l5566
 19043                           
 19044                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 19045                           
 19046                           ;doprnt.c: 586: }
 19047                           
 19048                           ;doprnt.c: 585: break;
 19049  0015B2  C00D  FFF6         	movff	i2printf@f,tblptrl
 19050  0015B6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19051  0015BA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19052  0015BA  6AF8               	clrf	tblptru,c
 19053  0015BC                     	endif
 19054  0015BC                     	if	0	;tblptru may be non-zero
 19055  0015BC                     	endif
 19056  0015BC  0008               	tblrd		*
 19057  0015BE  50F5               	movf	tablat,w,c
 19058  0015C0  EC69  F022         	call	i2_isdigit
 19059  0015C4  A0D8               	btfss	status,0,c
 19060  0015C6  D0A6               	goto	i2l5618
 19061                           
 19062                           ;doprnt.c: 598: width = 0;
 19063  0015C8  0E00               	movlw	0
 19064  0015CA  6E29               	movwf	i2printf@width+1,c
 19065  0015CC  0E00               	movlw	0
 19066  0015CE  6E28               	movwf	i2printf@width,c
 19067  0015D0                     i2l5576:
 19068                           
 19069                           ;doprnt.c: 600: width *= 10;
 19070  0015D0  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 19071  0015D4  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 19072  0015D8  0E00               	movlw	0
 19073  0015DA  6E04               	movwf	i2___wmul@multiplicand+1,c
 19074  0015DC  0E0A               	movlw	10
 19075  0015DE  6E03               	movwf	i2___wmul@multiplicand,c
 19076  0015E0  ECFD  F021         	call	i2___wmul	;wreg free
 19077  0015E4  C001  F028         	movff	?i2___wmul,i2printf@width
 19078  0015E8  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 19079                           
 19080                           ;doprnt.c: 601: width += *f++ - '0';
 19081  0015EC  0ED0               	movlw	208
 19082  0015EE  6E19               	movwf	??i2_printf& (0+255),c
 19083  0015F0  0EFF               	movlw	255
 19084  0015F2  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 19085  0015F4  C00D  FFF6         	movff	i2printf@f,tblptrl
 19086  0015F8  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19087  0015FC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19088  0015FC  6AF8               	clrf	tblptru,c
 19089  0015FE                     	endif
 19090  0015FE                     	if	0	;tblptru may be non-zero
 19091  0015FE                     	endif
 19092  0015FE  0008               	tblrd		*
 19093  001600  50F5               	movf	tablat,w,c
 19094  001602  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 19095  001604  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 19096  001606  5019               	movf	??i2_printf,w,c
 19097  001608  261B               	addwf	??i2_printf+2,f,c
 19098  00160A  501A               	movf	??i2_printf+1,w,c
 19099  00160C  221C               	addwfc	??i2_printf+3,f,c
 19100  00160E  501B               	movf	??i2_printf+2,w,c
 19101  001610  2628               	addwf	i2printf@width,f,c
 19102  001612  501C               	movf	??i2_printf+3,w,c
 19103  001614  2229               	addwfc	i2printf@width+1,f,c
 19104  001616  4A0D               	infsnz	i2printf@f,f,c
 19105  001618  2A0E               	incf	i2printf@f+1,f,c
 19106                           
 19107                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 19108  00161A  C00D  FFF6         	movff	i2printf@f,tblptrl
 19109  00161E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19110  001622                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19111  001622  6AF8               	clrf	tblptru,c
 19112  001624                     	endif
 19113  001624                     	if	0	;tblptru may be non-zero
 19114  001624                     	endif
 19115  001624  0008               	tblrd		*
 19116  001626  50F5               	movf	tablat,w,c
 19117  001628  EC69  F022         	call	i2_isdigit
 19118  00162C  A0D8               	btfss	status,0,c
 19119  00162E  D072               	goto	i2l5618
 19120  001630  D7CF               	goto	i2l5576
 19121  001632                     i2l5584:
 19122                           
 19123                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 19124  001632  C020  FFD9         	movff	i2printf@ap,fsr2l
 19125  001636  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 19126  00163A  CFDE F01E          	movff	postinc2,i2printf@cp
 19127  00163E  CFDD F01F          	movff	postdec2,i2printf@cp+1
 19128  001642  0E02               	movlw	2
 19129  001644  2620               	addwf	i2printf@ap,f,c
 19130  001646  0E00               	movlw	0
 19131  001648  2221               	addwfc	i2printf@ap+1,f,c
 19132                           
 19133                           ;doprnt.c: 740: if(!cp)
 19134  00164A  501E               	movf	i2printf@cp,w,c
 19135  00164C  101F               	iorwf	i2printf@cp+1,w,c
 19136  00164E  A4D8               	btfss	status,2,c
 19137  001650  D004               	goto	i2l5592
 19138                           
 19139                           ;doprnt.c: 741: cp = "(null)";
 19140  001652  0EB5               	movlw	low STR_112
 19141  001654  6E1E               	movwf	i2printf@cp,c
 19142  001656  0EFF               	movlw	high STR_112
 19143  001658  6E1F               	movwf	i2printf@cp+1,c
 19144  00165A                     i2l5592:
 19145                           
 19146                           ;doprnt.c: 745: len = 0;
 19147  00165A  0E00               	movlw	0
 19148  00165C  6E23               	movwf	i2printf@len+1,c
 19149  00165E  0E00               	movlw	0
 19150  001660  6E22               	movwf	i2printf@len,c
 19151                           
 19152                           ;doprnt.c: 746: while(cp[len])
 19153  001662  D002               	goto	i2l5596
 19154  001664                     i2l5594:
 19155                           
 19156                           ;doprnt.c: 747: len++;
 19157  001664  4A22               	infsnz	i2printf@len,f,c
 19158  001666  2A23               	incf	i2printf@len+1,f,c
 19159  001668                     i2l5596:
 19160  001668  5022               	movf	i2printf@len,w,c
 19161  00166A  241E               	addwf	i2printf@cp,w,c
 19162  00166C  6E19               	movwf	??i2_printf& (0+255),c
 19163  00166E  5023               	movf	i2printf@len+1,w,c
 19164  001670  201F               	addwfc	i2printf@cp+1,w,c
 19165  001672  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 19166  001674  C019  FFF6         	movff	??i2_printf,tblptrl
 19167  001678  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 19168  00167C  0E00               	movlw	low (__mediumconst shr (0+16))
 19169  00167E  6EF8               	movwf	tblptru,c
 19170  001680  0E0F               	movlw	(high __ramtop+-1)
 19171  001682  64F7               	cpfsgt	tblptrh,c
 19172  001684  D003               	bra	i2u411_47
 19173  001686  0008               	tblrd		*
 19174  001688  50F5               	movf	tablat,w,c
 19175  00168A  D005               	bra	i2u411_40
 19176  00168C                     i2u411_47:
 19177  00168C  CFF6 FFE9          	movff	tblptrl,fsr0l
 19178  001690  CFF7 FFEA          	movff	tblptrh,fsr0h
 19179  001694  50EF               	movf	indf0,w,c
 19180  001696                     i2u411_40:
 19181  001696  0900               	iorlw	0
 19182  001698  A4D8               	btfss	status,2,c
 19183  00169A  D7E4               	goto	i2l5594
 19184                           
 19185                           ;doprnt.c: 757: if(width > len)
 19186  00169C  5028               	movf	i2printf@width,w,c
 19187  00169E  5C22               	subwf	i2printf@len,w,c
 19188  0016A0  5029               	movf	i2printf@width+1,w,c
 19189  0016A2  5823               	subwfb	i2printf@len+1,w,c
 19190  0016A4  B0D8               	btfsc	status,0,c
 19191  0016A6  D005               	goto	i2l5602
 19192                           
 19193                           ;doprnt.c: 758: width -= len;
 19194  0016A8  5022               	movf	i2printf@len,w,c
 19195  0016AA  5E28               	subwf	i2printf@width,f,c
 19196  0016AC  5023               	movf	i2printf@len+1,w,c
 19197  0016AE  5A29               	subwfb	i2printf@width+1,f,c
 19198  0016B0  D008               	goto	i2l5606
 19199  0016B2                     i2l5602:
 19200                           
 19201                           ;doprnt.c: 759: else
 19202                           ;doprnt.c: 760: width = 0;
 19203  0016B2  0E00               	movlw	0
 19204  0016B4  6E29               	movwf	i2printf@width+1,c
 19205  0016B6  0E00               	movlw	0
 19206  0016B8  6E28               	movwf	i2printf@width,c
 19207                           
 19208                           ;doprnt.c: 764: while(width--)
 19209  0016BA  D003               	goto	i2l5606
 19210  0016BC                     i2l5604:
 19211                           
 19212                           ;doprnt.c: 765: (putch(' ') );
 19213  0016BC  0E20               	movlw	32
 19214  0016BE  ECBD  F022         	call	i2_putch
 19215  0016C2                     i2l5606:
 19216  0016C2  0628               	decf	i2printf@width,f,c
 19217  0016C4  A0D8               	btfss	status,0,c
 19218  0016C6  0629               	decf	i2printf@width+1,f,c
 19219  0016C8  2828               	incf	i2printf@width,w,c
 19220  0016CA  E1F8               	bnz	i2l5604
 19221  0016CC  2829               	incf	i2printf@width+1,w,c
 19222  0016CE  B4D8               	btfsc	status,2,c
 19223  0016D0  D016               	goto	i2l5612
 19224  0016D2  D7F4               	goto	i2l5604
 19225  0016D4                     i2l5608:
 19226                           
 19227                           ;doprnt.c: 768: (putch(*cp++) );
 19228  0016D4  C01E  FFF6         	movff	i2printf@cp,tblptrl
 19229  0016D8  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 19230  0016DC  0E00               	movlw	low (__mediumconst shr (0+16))
 19231  0016DE  6EF8               	movwf	tblptru,c
 19232  0016E0  0E0F               	movlw	(high __ramtop+-1)
 19233  0016E2  64F7               	cpfsgt	tblptrh,c
 19234  0016E4  D003               	bra	i2u415_47
 19235  0016E6  0008               	tblrd		*
 19236  0016E8  50F5               	movf	tablat,w,c
 19237  0016EA  D005               	bra	i2u415_40
 19238  0016EC                     i2u415_47:
 19239  0016EC  CFF6 FFE9          	movff	tblptrl,fsr0l
 19240  0016F0  CFF7 FFEA          	movff	tblptrh,fsr0h
 19241  0016F4  50EF               	movf	indf0,w,c
 19242  0016F6                     i2u415_40:
 19243  0016F6  ECBD  F022         	call	i2_putch
 19244  0016FA  4A1E               	infsnz	i2printf@cp,f,c
 19245  0016FC  2A1F               	incf	i2printf@cp+1,f,c
 19246  0016FE                     i2l5612:
 19247  0016FE  0622               	decf	i2printf@len,f,c
 19248  001700  A0D8               	btfss	status,0,c
 19249  001702  0623               	decf	i2printf@len+1,f,c
 19250  001704  2822               	incf	i2printf@len,w,c
 19251  001706  E1E6               	bnz	i2l5608
 19252  001708  2823               	incf	i2printf@len+1,w,c
 19253  00170A  B4D8               	btfsc	status,2,c
 19254  00170C  D0DA               	goto	i2l5690
 19255  00170E  D7E2               	goto	i2l5608
 19256  001710                     i2l5614:
 19257                           
 19258                           ;doprnt.c: 818: flag |= 0x40;
 19259  001710  8C26               	bsf	i2printf@flag,6,c
 19260                           
 19261                           ;doprnt.c: 822: }
 19262                           
 19263                           ;doprnt.c: 819: break;
 19264  001712  D01B               	goto	i2l1232
 19265  001714                     i2l5618:
 19266  001714  C00D  FFF6         	movff	i2printf@f,tblptrl
 19267  001718  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19268  00171C  4A0D               	infsnz	i2printf@f,f,c
 19269  00171E  2A0E               	incf	i2printf@f+1,f,c
 19270  001720                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19271  001720  6AF8               	clrf	tblptru,c
 19272  001722                     	endif
 19273  001722                     	if	0	;tblptru may be non-zero
 19274  001722                     	endif
 19275  001722  0008               	tblrd		*
 19276  001724  CFF5 F027          	movff	tablat,i2printf@c
 19277  001728  5027               	movf	i2printf@c,w,c
 19278                           
 19279                           ; Switch size 1, requested type "space"
 19280                           ; Number of cases is 5, Range of values is 0 to 117
 19281                           ; switch strategies available:
 19282                           ; Name         Instructions Cycles
 19283                           ; simple_byte           16     9 (average)
 19284                           ;	Chosen strategy is simple_byte
 19285  00172A  0A00               	xorlw	0	; case 0
 19286  00172C  B4D8               	btfsc	status,2,c
 19287  00172E  0012               	return	
 19288  001730  0A64               	xorlw	100	; case 100
 19289  001732  B4D8               	btfsc	status,2,c
 19290  001734  D00A               	goto	i2l1232
 19291  001736  0A0D               	xorlw	13	; case 105
 19292  001738  B4D8               	btfsc	status,2,c
 19293  00173A  D007               	goto	i2l1232
 19294  00173C  0A1A               	xorlw	26	; case 115
 19295  00173E  B4D8               	btfsc	status,2,c
 19296  001740  D778               	goto	i2l5584
 19297  001742  0A06               	xorlw	6	; case 117
 19298  001744  B4D8               	btfsc	status,2,c
 19299  001746  D7E4               	goto	i2l5614
 19300  001748  D0BC               	goto	i2l5690
 19301  00174A                     i2l1232:
 19302                           
 19303                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 19304  00174A  BC26               	btfsc	i2printf@flag,6,c
 19305  00174C  D015               	goto	i2l5630
 19306                           
 19307                           ;doprnt.c: 1253: {
 19308                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 19309  00174E  C020  FFD9         	movff	i2printf@ap,fsr2l
 19310  001752  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 19311  001756  CFDE F024          	movff	postinc2,i2printf@val
 19312  00175A  CFDD F025          	movff	postdec2,i2printf@val+1
 19313  00175E  0E02               	movlw	2
 19314  001760  2620               	addwf	i2printf@ap,f,c
 19315  001762  0E00               	movlw	0
 19316  001764  2221               	addwfc	i2printf@ap+1,f,c
 19317                           
 19318                           ;doprnt.c: 1261: if((int)val < 0) {
 19319  001766  AE25               	btfss	i2printf@val+1,7,c
 19320  001768  D013               	goto	i2l5634
 19321                           
 19322                           ;doprnt.c: 1262: flag |= 0x03;
 19323  00176A  0E03               	movlw	3
 19324  00176C  1226               	iorwf	i2printf@flag,f,c
 19325                           
 19326                           ;doprnt.c: 1263: val = -val;
 19327  00176E  6C24               	negf	i2printf@val,c
 19328  001770  1E25               	comf	i2printf@val+1,f,c
 19329  001772  B0D8               	btfsc	status,0,c
 19330  001774  2A25               	incf	i2printf@val+1,f,c
 19331                           
 19332                           ;doprnt.c: 1264: }
 19333                           ;doprnt.c: 1266: }
 19334  001776  D00C               	goto	i2l5634
 19335  001778                     i2l5630:
 19336                           
 19337                           ;doprnt.c: 1268: else
 19338                           ;doprnt.c: 1273: {
 19339                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 19340  001778  C020  FFD9         	movff	i2printf@ap,fsr2l
 19341  00177C  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 19342  001780  CFDE F024          	movff	postinc2,i2printf@val
 19343  001784  CFDD F025          	movff	postdec2,i2printf@val+1
 19344  001788  0E02               	movlw	2
 19345  00178A  2620               	addwf	i2printf@ap,f,c
 19346  00178C  0E00               	movlw	0
 19347  00178E  2221               	addwfc	i2printf@ap+1,f,c
 19348  001790                     i2l5634:
 19349                           
 19350                           ;doprnt.c: 1287: }
 19351                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 19352  001790  0E01               	movlw	1
 19353  001792  6E27               	movwf	i2printf@c,c
 19354  001794                     i2l5636:
 19355  001794  0E05               	movlw	5
 19356  001796  1827               	xorwf	i2printf@c,w,c
 19357  001798  B4D8               	btfsc	status,2,c
 19358  00179A  D015               	goto	i2l5648
 19359                           
 19360                           ;doprnt.c: 1306: if(val < dpowers[c])
 19361  00179C  5027               	movf	i2printf@c,w,c
 19362  00179E  0D02               	mullw	2
 19363  0017A0  0E38               	movlw	low _dpowers
 19364  0017A2  24F3               	addwf	prodl,w,c
 19365  0017A4  6EF6               	movwf	tblptrl,c
 19366  0017A6  0EFB               	movlw	high _dpowers
 19367  0017A8  20F4               	addwfc	prodh,w,c
 19368  0017AA  6EF7               	movwf	tblptrh,c
 19369  0017AC                     	if	1	;There are 3 active tblptr bytes
 19370  0017AC  6AF8               	clrf	tblptru,c
 19371  0017AE  0E00               	movlw	low (__mediumconst shr (0+16))
 19372  0017B0  22F8               	addwfc	tblptru,f,c
 19373  0017B2                     	endif
 19374  0017B2  0009               	tblrd		*+
 19375  0017B4  50F5               	movf	tablat,w,c
 19376  0017B6  5C24               	subwf	i2printf@val,w,c
 19377  0017B8  0009               	tblrd		*+
 19378  0017BA  50F5               	movf	tablat,w,c
 19379  0017BC  5825               	subwfb	i2printf@val+1,w,c
 19380  0017BE  A0D8               	btfss	status,0,c
 19381  0017C0  D002               	goto	i2l5648
 19382                           
 19383                           ;doprnt.c: 1307: break;
 19384  0017C2  2A27               	incf	i2printf@c,f,c
 19385  0017C4  D7E7               	goto	i2l5636
 19386  0017C6                     i2l5648:
 19387                           
 19388                           ;doprnt.c: 1345: if(width && flag & 0x03)
 19389  0017C6  5028               	movf	i2printf@width,w,c
 19390  0017C8  1029               	iorwf	i2printf@width+1,w,c
 19391  0017CA  B4D8               	btfsc	status,2,c
 19392  0017CC  D009               	goto	i2l5654
 19393  0017CE  C026  F019         	movff	i2printf@flag,??i2_printf
 19394  0017D2  0E03               	movlw	3
 19395  0017D4  1619               	andwf	??i2_printf,f,c
 19396  0017D6  B4D8               	btfsc	status,2,c
 19397  0017D8  D003               	goto	i2l5654
 19398                           
 19399                           ;doprnt.c: 1346: width--;
 19400  0017DA  0628               	decf	i2printf@width,f,c
 19401  0017DC  A0D8               	btfss	status,0,c
 19402  0017DE  0629               	decf	i2printf@width+1,f,c
 19403  0017E0                     i2l5654:
 19404                           
 19405                           ;doprnt.c: 1381: if(width > c)
 19406  0017E0  0E80               	movlw	128
 19407  0017E2  BE27               	btfsc	i2printf@c,7,c
 19408  0017E4  0E7F               	movlw	127
 19409  0017E6  6E19               	movwf	??i2_printf& (0+255),c
 19410  0017E8  5028               	movf	i2printf@width,w,c
 19411  0017EA  5C27               	subwf	i2printf@c,w,c
 19412  0017EC  5029               	movf	i2printf@width+1,w,c
 19413  0017EE  0A80               	xorlw	128
 19414  0017F0  5819               	subwfb	??i2_printf& (0+255),w,c
 19415  0017F2  B0D8               	btfsc	status,0,c
 19416  0017F4  D007               	goto	i2l5658
 19417                           
 19418                           ;doprnt.c: 1382: width -= c;
 19419  0017F6  5027               	movf	i2printf@c,w,c
 19420  0017F8  5E28               	subwf	i2printf@width,f,c
 19421  0017FA  0E00               	movlw	0
 19422  0017FC  BE27               	btfsc	i2printf@c,7,c
 19423  0017FE  0EFF               	movlw	255
 19424  001800  5A29               	subwfb	i2printf@width+1,f,c
 19425  001802  D004               	goto	i2l5660
 19426  001804                     i2l5658:
 19427                           
 19428                           ;doprnt.c: 1383: else
 19429                           ;doprnt.c: 1384: width = 0;
 19430  001804  0E00               	movlw	0
 19431  001806  6E29               	movwf	i2printf@width+1,c
 19432  001808  0E00               	movlw	0
 19433  00180A  6E28               	movwf	i2printf@width,c
 19434  00180C                     i2l5660:
 19435                           
 19436                           ;doprnt.c: 1387: if(flag & 0x04) {
 19437  00180C  A426               	btfss	i2printf@flag,2,c
 19438  00180E  D014               	goto	i2l5672
 19439                           
 19440                           ;doprnt.c: 1392: if(flag & 0x03)
 19441  001810  C026  F019         	movff	i2printf@flag,??i2_printf
 19442  001814  0E03               	movlw	3
 19443  001816  1619               	andwf	??i2_printf,f,c
 19444  001818  B4D8               	btfsc	status,2,c
 19445  00181A  D003               	goto	i2l5666
 19446                           
 19447                           ;doprnt.c: 1393: (putch('-') );
 19448  00181C  0E2D               	movlw	45
 19449  00181E  ECBD  F022         	call	i2_putch
 19450  001822                     i2l5666:
 19451                           
 19452                           ;doprnt.c: 1415: if(width)
 19453  001822  5028               	movf	i2printf@width,w,c
 19454  001824  1029               	iorwf	i2printf@width+1,w,c
 19455  001826  B4D8               	btfsc	status,2,c
 19456  001828  D01E               	goto	i2l5682
 19457                           
 19458                           ;doprnt.c: 1417: (putch('0') );
 19459                           
 19460                           ;doprnt.c: 1416: do
 19461  00182A  0E30               	movlw	48
 19462  00182C  ECBD  F022         	call	i2_putch
 19463                           
 19464                           ;doprnt.c: 1418: while(--width);
 19465  001830  0628               	decf	i2printf@width,f,c
 19466  001832  A0D8               	btfss	status,0,c
 19467  001834  0629               	decf	i2printf@width+1,f,c
 19468  001836  D7F5               	goto	i2l5666
 19469  001838                     i2l5672:
 19470                           
 19471                           ;doprnt.c: 1422: {
 19472                           ;doprnt.c: 1424: if(width
 19473                           ;doprnt.c: 1428: )
 19474  001838  5028               	movf	i2printf@width,w,c
 19475  00183A  1029               	iorwf	i2printf@width+1,w,c
 19476  00183C  B4D8               	btfsc	status,2,c
 19477  00183E  D00A               	goto	i2l5678
 19478  001840                     i2l5674:
 19479                           
 19480                           ;doprnt.c: 1430: (putch(' ') );
 19481  001840  0E20               	movlw	32
 19482  001842  ECBD  F022         	call	i2_putch
 19483                           
 19484                           ;doprnt.c: 1431: while(--width);
 19485  001846  0628               	decf	i2printf@width,f,c
 19486  001848  A0D8               	btfss	status,0,c
 19487  00184A  0629               	decf	i2printf@width+1,f,c
 19488  00184C  5028               	movf	i2printf@width,w,c
 19489  00184E  1029               	iorwf	i2printf@width+1,w,c
 19490  001850  A4D8               	btfss	status,2,c
 19491  001852  D7F6               	goto	i2l5674
 19492  001854                     i2l5678:
 19493                           
 19494                           ;doprnt.c: 1438: if(flag & 0x03)
 19495  001854  C026  F019         	movff	i2printf@flag,??i2_printf
 19496  001858  0E03               	movlw	3
 19497  00185A  1619               	andwf	??i2_printf,f,c
 19498  00185C  B4D8               	btfsc	status,2,c
 19499  00185E  D003               	goto	i2l5682
 19500                           
 19501                           ;doprnt.c: 1439: (putch('-') );
 19502  001860  0E2D               	movlw	45
 19503  001862  ECBD  F022         	call	i2_putch
 19504  001866                     i2l5682:
 19505                           
 19506                           ;doprnt.c: 1469: }
 19507                           ;doprnt.c: 1472: prec = c;
 19508  001866  C027  F01D         	movff	i2printf@c,i2printf@prec
 19509                           
 19510                           ;doprnt.c: 1474: while(prec--) {
 19511  00186A  D027               	goto	i2l5688
 19512  00186C                     i2l5684:
 19513                           
 19514                           ;doprnt.c: 1478: {
 19515                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 19516  00186C  501D               	movf	i2printf@prec,w,c
 19517  00186E  0D02               	mullw	2
 19518  001870  0E38               	movlw	low _dpowers
 19519  001872  24F3               	addwf	prodl,w,c
 19520  001874  6EF6               	movwf	tblptrl,c
 19521  001876  0EFB               	movlw	high _dpowers
 19522  001878  20F4               	addwfc	prodh,w,c
 19523  00187A  6EF7               	movwf	tblptrh,c
 19524  00187C                     	if	1	;There are 3 active tblptr bytes
 19525  00187C  6AF8               	clrf	tblptru,c
 19526  00187E  0E00               	movlw	low (__mediumconst shr (0+16))
 19527  001880  22F8               	addwfc	tblptru,f,c
 19528  001882                     	endif
 19529  001882  0009               	tblrd		*+
 19530  001884  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 19531  001888  000A               	tblrd		*-
 19532  00188A  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 19533  00188E  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 19534  001892  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 19535  001896  EC00  F01F         	call	i2___lwdiv	;wreg free
 19536  00189A  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 19537  00189E  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 19538  0018A2  0E00               	movlw	0
 19539  0018A4  6E04               	movwf	i2___lwmod@divisor+1,c
 19540  0018A6  0E0A               	movlw	10
 19541  0018A8  6E03               	movwf	i2___lwmod@divisor,c
 19542  0018AA  ECE6  F01F         	call	i2___lwmod	;wreg free
 19543  0018AE  5001               	movf	?i2___lwmod,w,c
 19544  0018B0  0F30               	addlw	48
 19545  0018B2  6E27               	movwf	i2printf@c,c
 19546                           
 19547                           ;doprnt.c: 1523: }
 19548                           ;doprnt.c: 1524: (putch(c) );
 19549  0018B4  5027               	movf	i2printf@c,w,c
 19550  0018B6  ECBD  F022         	call	i2_putch
 19551  0018BA                     i2l5688:
 19552  0018BA  061D               	decf	i2printf@prec,f,c
 19553  0018BC  281D               	incf	i2printf@prec,w,c
 19554  0018BE  A4D8               	btfss	status,2,c
 19555  0018C0  D7D5               	goto	i2l5684
 19556  0018C2                     i2l5690:
 19557  0018C2  C00D  FFF6         	movff	i2printf@f,tblptrl
 19558  0018C6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19559  0018CA  4A0D               	infsnz	i2printf@f,f,c
 19560  0018CC  2A0E               	incf	i2printf@f+1,f,c
 19561  0018CE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19562  0018CE  6AF8               	clrf	tblptru,c
 19563  0018D0                     	endif
 19564  0018D0                     	if	0	;tblptru may be non-zero
 19565  0018D0                     	endif
 19566  0018D0  0008               	tblrd		*
 19567  0018D2  CFF5 F027          	movff	tablat,i2printf@c
 19568  0018D6  5027               	movf	i2printf@c,w,c
 19569  0018D8  B4D8               	btfsc	status,2,c
 19570  0018DA  0012               	return	
 19571  0018DC  D64E               	goto	i2l5560
 19572  0018DE                     __end_ofi2_printf:
 19573                           	opt stack 0
 19574                           pclatu	equ	0xFFB
 19575                           pclath	equ	0xFFA
 19576                           tblptru	equ	0xFF8
 19577                           tblptrh	equ	0xFF7
 19578                           tblptrl	equ	0xFF6
 19579                           tablat	equ	0xFF5
 19580                           prodh	equ	0xFF4
 19581                           prodl	equ	0xFF3
 19582                           intcon	equ	0xFF2
 19583                           intcon2	equ	0xFF1
 19584                           intcon3	equ	0xFF0
 19585                           indf0	equ	0xFEF
 19586                           postinc0	equ	0xFEE
 19587                           fsr0h	equ	0xFEA
 19588                           fsr0l	equ	0xFE9
 19589                           wreg	equ	0xFE8
 19590                           postdec1	equ	0xFE5
 19591                           fsr1h	equ	0xFE2
 19592                           fsr1l	equ	0xFE1
 19593                           indf2	equ	0xFDF
 19594                           postinc2	equ	0xFDE
 19595                           postdec2	equ	0xFDD
 19596                           fsr2h	equ	0xFDA
 19597                           fsr2l	equ	0xFD9
 19598                           status	equ	0xFD8
 19599                           
 19600 ;; *************** function i2_putch *****************
 19601 ;; Defined at:
 19602 ;;		line 20 in file "lcd.c"
 19603 ;; Parameters:    Size  Location     Type
 19604 ;;  data            1    wreg     unsigned char 
 19605 ;; Auto vars:     Size  Location     Type
 19606 ;;  data            1    2[COMRAM] unsigned char 
 19607 ;; Return value:  Size  Location     Type
 19608 ;;                  1    wreg      void 
 19609 ;; Registers used:
 19610 ;;		wreg, status,2, status,0, cstack
 19611 ;; Tracked objects:
 19612 ;;		On entry : 0/0
 19613 ;;		On exit  : 0/0
 19614 ;;		Unchanged: 0/0
 19615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19617 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19619 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19620 ;;Total ram usage:        1 bytes
 19621 ;; Hardware stack levels used:    1
 19622 ;; Hardware stack levels required when called:    1
 19623 ;; This function calls:
 19624 ;;		i2_lcdNibble
 19625 ;; This function is called by:
 19626 ;;		i2_printf
 19627 ;; This function uses a non-reentrant model
 19628 ;;
 19629                           
 19630                           	psect	text78
 19631  00457A                     __ptext78:
 19632                           	opt stack 0
 19633  00457A                     i2_putch:
 19634                           	opt stack 19
 19635                           
 19636                           ;incstack = 0
 19637                           ;i2putch@data stored from wreg
 19638  00457A  6E03               	movwf	i2putch@data,c
 19639                           
 19640                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 19641  00457C  848C               	bsf	3980,2,c	;volatile
 19642                           
 19643                           ;lcd.c: 22: lcdNibble(data);
 19644  00457E  5003               	movf	i2putch@data,w,c
 19645  004580  ECD5  F01E         	call	i2_lcdNibble
 19646  004584  0012               	return		;funcret
 19647  004586                     __end_ofi2_putch:
 19648                           	opt stack 0
 19649                           pclatu	equ	0xFFB
 19650                           pclath	equ	0xFFA
 19651                           tblptru	equ	0xFF8
 19652                           tblptrh	equ	0xFF7
 19653                           tblptrl	equ	0xFF6
 19654                           tablat	equ	0xFF5
 19655                           prodh	equ	0xFF4
 19656                           prodl	equ	0xFF3
 19657                           intcon	equ	0xFF2
 19658                           intcon2	equ	0xFF1
 19659                           intcon3	equ	0xFF0
 19660                           indf0	equ	0xFEF
 19661                           postinc0	equ	0xFEE
 19662                           fsr0h	equ	0xFEA
 19663                           fsr0l	equ	0xFE9
 19664                           wreg	equ	0xFE8
 19665                           postdec1	equ	0xFE5
 19666                           fsr1h	equ	0xFE2
 19667                           fsr1l	equ	0xFE1
 19668                           indf2	equ	0xFDF
 19669                           postinc2	equ	0xFDE
 19670                           postdec2	equ	0xFDD
 19671                           fsr2h	equ	0xFDA
 19672                           fsr2l	equ	0xFD9
 19673                           status	equ	0xFD8
 19674                           
 19675 ;; *************** function i2_isdigit *****************
 19676 ;; Defined at:
 19677 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 19678 ;; Parameters:    Size  Location     Type
 19679 ;;  c               1    wreg     unsigned char 
 19680 ;; Auto vars:     Size  Location     Type
 19681 ;;  c               1    2[COMRAM] unsigned char 
 19682 ;; Return value:  Size  Location     Type
 19683 ;;		None               void
 19684 ;; Registers used:
 19685 ;;		wreg, status,2, status,0
 19686 ;; Tracked objects:
 19687 ;;		On entry : 0/0
 19688 ;;		On exit  : 0/0
 19689 ;;		Unchanged: 0/0
 19690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19692 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19693 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19694 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19695 ;;Total ram usage:        3 bytes
 19696 ;; Hardware stack levels used:    1
 19697 ;; This function calls:
 19698 ;;		Nothing
 19699 ;; This function is called by:
 19700 ;;		i2_printf
 19701 ;; This function uses a non-reentrant model
 19702 ;;
 19703                           
 19704                           	psect	text79
 19705  0044D2                     __ptext79:
 19706                           	opt stack 0
 19707  0044D2                     i2_isdigit:
 19708                           	opt stack 20
 19709                           
 19710                           ;incstack = 0
 19711                           ;i2isdigit@c stored from wreg
 19712  0044D2  6E03               	movwf	i2isdigit@c,c
 19713  0044D4  0E00               	movlw	0
 19714  0044D6  6E02               	movwf	i2_isdigit$1888,c
 19715  0044D8  0E3A               	movlw	58
 19716  0044DA  6003               	cpfslt	i2isdigit@c,c
 19717  0044DC  D005               	goto	i2l5270
 19718  0044DE  0E2F               	movlw	47
 19719  0044E0  6403               	cpfsgt	i2isdigit@c,c
 19720  0044E2  D002               	goto	i2l5270
 19721  0044E4  0E01               	movlw	1
 19722  0044E6  6E02               	movwf	i2_isdigit$1888,c
 19723  0044E8                     i2l5270:
 19724  0044E8  C002  F001         	movff	i2_isdigit$1888,??i2_isdigit
 19725  0044EC  3001               	rrcf	??i2_isdigit,w,c
 19726  0044EE  0012               	return	
 19727  0044F0                     __end_ofi2_isdigit:
 19728                           	opt stack 0
 19729                           pclatu	equ	0xFFB
 19730                           pclath	equ	0xFFA
 19731                           tblptru	equ	0xFF8
 19732                           tblptrh	equ	0xFF7
 19733                           tblptrl	equ	0xFF6
 19734                           tablat	equ	0xFF5
 19735                           prodh	equ	0xFF4
 19736                           prodl	equ	0xFF3
 19737                           intcon	equ	0xFF2
 19738                           intcon2	equ	0xFF1
 19739                           intcon3	equ	0xFF0
 19740                           indf0	equ	0xFEF
 19741                           postinc0	equ	0xFEE
 19742                           fsr0h	equ	0xFEA
 19743                           fsr0l	equ	0xFE9
 19744                           wreg	equ	0xFE8
 19745                           postdec1	equ	0xFE5
 19746                           fsr1h	equ	0xFE2
 19747                           fsr1l	equ	0xFE1
 19748                           indf2	equ	0xFDF
 19749                           postinc2	equ	0xFDE
 19750                           postdec2	equ	0xFDD
 19751                           fsr2h	equ	0xFDA
 19752                           fsr2l	equ	0xFD9
 19753                           status	equ	0xFD8
 19754                           
 19755 ;; *************** function i2___wmul *****************
 19756 ;; Defined at:
 19757 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 19758 ;; Parameters:    Size  Location     Type
 19759 ;;  multiplier      2    0[COMRAM] unsigned int 
 19760 ;;  multiplicand    2    2[COMRAM] unsigned int 
 19761 ;; Auto vars:     Size  Location     Type
 19762 ;;  __wmul          2    4[COMRAM] unsigned int 
 19763 ;; Return value:  Size  Location     Type
 19764 ;;                  2    0[COMRAM] unsigned int 
 19765 ;; Registers used:
 19766 ;;		wreg, status,2, status,0, prodl, prodh
 19767 ;; Tracked objects:
 19768 ;;		On entry : 0/0
 19769 ;;		On exit  : 0/0
 19770 ;;		Unchanged: 0/0
 19771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19772 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19773 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19775 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19776 ;;Total ram usage:        6 bytes
 19777 ;; Hardware stack levels used:    1
 19778 ;; This function calls:
 19779 ;;		Nothing
 19780 ;; This function is called by:
 19781 ;;		_printSortTimer
 19782 ;;		_retrieveLog
 19783 ;;		i2_printf
 19784 ;; This function uses a non-reentrant model
 19785 ;;
 19786                           
 19787                           	psect	text80
 19788  0043FA                     __ptext80:
 19789                           	opt stack 0
 19790  0043FA                     i2___wmul:
 19791                           	opt stack 20
 19792                           
 19793                           ;incstack = 0
 19794  0043FA  5001               	movf	i2___wmul@multiplier,w,c
 19795  0043FC  0203               	mulwf	i2___wmul@multiplicand,c
 19796  0043FE  CFF3 F005          	movff	prodl,i2___wmul@product
 19797  004402  CFF4 F006          	movff	prodh,i2___wmul@product+1
 19798  004406  5001               	movf	i2___wmul@multiplier,w,c
 19799  004408  0204               	mulwf	i2___wmul@multiplicand+1,c
 19800  00440A  50F3               	movf	prodl,w,c
 19801  00440C  2606               	addwf	i2___wmul@product+1,f,c
 19802  00440E  5002               	movf	i2___wmul@multiplier+1,w,c
 19803  004410  0203               	mulwf	i2___wmul@multiplicand,c
 19804  004412  50F3               	movf	prodl,w,c
 19805  004414  2606               	addwf	i2___wmul@product+1,f,c
 19806  004416  C005  F001         	movff	i2___wmul@product,?i2___wmul
 19807  00441A  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 19808  00441E  0012               	return	
 19809  004420                     __end_ofi2___wmul:
 19810                           	opt stack 0
 19811                           pclatu	equ	0xFFB
 19812                           pclath	equ	0xFFA
 19813                           tblptru	equ	0xFF8
 19814                           tblptrh	equ	0xFF7
 19815                           tblptrl	equ	0xFF6
 19816                           tablat	equ	0xFF5
 19817                           prodh	equ	0xFF4
 19818                           prodl	equ	0xFF3
 19819                           intcon	equ	0xFF2
 19820                           intcon2	equ	0xFF1
 19821                           intcon3	equ	0xFF0
 19822                           indf0	equ	0xFEF
 19823                           postinc0	equ	0xFEE
 19824                           fsr0h	equ	0xFEA
 19825                           fsr0l	equ	0xFE9
 19826                           wreg	equ	0xFE8
 19827                           postdec1	equ	0xFE5
 19828                           fsr1h	equ	0xFE2
 19829                           fsr1l	equ	0xFE1
 19830                           indf2	equ	0xFDF
 19831                           postinc2	equ	0xFDE
 19832                           postdec2	equ	0xFDD
 19833                           fsr2h	equ	0xFDA
 19834                           fsr2l	equ	0xFD9
 19835                           status	equ	0xFD8
 19836                           
 19837 ;; *************** function i2___lwmod *****************
 19838 ;; Defined at:
 19839 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 19840 ;; Parameters:    Size  Location     Type
 19841 ;;  dividend        2    0[COMRAM] unsigned int 
 19842 ;;  divisor         2    2[COMRAM] unsigned int 
 19843 ;; Auto vars:     Size  Location     Type
 19844 ;;  __lwmod         1    4[COMRAM] unsigned char 
 19845 ;; Return value:  Size  Location     Type
 19846 ;;                  2    0[COMRAM] unsigned int 
 19847 ;; Registers used:
 19848 ;;		wreg, status,2, status,0
 19849 ;; Tracked objects:
 19850 ;;		On entry : 0/0
 19851 ;;		On exit  : 0/0
 19852 ;;		Unchanged: 0/0
 19853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19854 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19855 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19857 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19858 ;;Total ram usage:        5 bytes
 19859 ;; Hardware stack levels used:    1
 19860 ;; This function calls:
 19861 ;;		Nothing
 19862 ;; This function is called by:
 19863 ;;		_printSortTimer
 19864 ;;		i2_printf
 19865 ;; This function uses a non-reentrant model
 19866 ;;
 19867                           
 19868                           	psect	text81
 19869  003FCC                     __ptext81:
 19870                           	opt stack 0
 19871  003FCC                     i2___lwmod:
 19872                           	opt stack 20
 19873                           
 19874                           ;incstack = 0
 19875  003FCC  5003               	movf	i2___lwmod@divisor,w,c
 19876  003FCE  1004               	iorwf	i2___lwmod@divisor+1,w,c
 19877  003FD0  B4D8               	btfsc	status,2,c
 19878  003FD2  D018               	goto	i2l1689
 19879  003FD4  0E01               	movlw	1
 19880  003FD6  6E05               	movwf	i2___lwmod@counter,c
 19881  003FD8  D004               	goto	i2l5302
 19882  003FDA                     i2l5300:
 19883  003FDA  90D8               	bcf	status,0,c
 19884  003FDC  3603               	rlcf	i2___lwmod@divisor,f,c
 19885  003FDE  3604               	rlcf	i2___lwmod@divisor+1,f,c
 19886  003FE0  2A05               	incf	i2___lwmod@counter,f,c
 19887  003FE2                     i2l5302:
 19888  003FE2  AE04               	btfss	i2___lwmod@divisor+1,7,c
 19889  003FE4  D7FA               	goto	i2l5300
 19890  003FE6                     i2l5304:
 19891  003FE6  5003               	movf	i2___lwmod@divisor,w,c
 19892  003FE8  5C01               	subwf	i2___lwmod@dividend,w,c
 19893  003FEA  5004               	movf	i2___lwmod@divisor+1,w,c
 19894  003FEC  5802               	subwfb	i2___lwmod@dividend+1,w,c
 19895  003FEE  A0D8               	btfss	status,0,c
 19896  003FF0  D004               	goto	i2l5308
 19897  003FF2  5003               	movf	i2___lwmod@divisor,w,c
 19898  003FF4  5E01               	subwf	i2___lwmod@dividend,f,c
 19899  003FF6  5004               	movf	i2___lwmod@divisor+1,w,c
 19900  003FF8  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 19901  003FFA                     i2l5308:
 19902  003FFA  90D8               	bcf	status,0,c
 19903  003FFC  3204               	rrcf	i2___lwmod@divisor+1,f,c
 19904  003FFE  3203               	rrcf	i2___lwmod@divisor,f,c
 19905  004000  2E05               	decfsz	i2___lwmod@counter,f,c
 19906  004002  D7F1               	goto	i2l5304
 19907  004004                     i2l1689:
 19908  004004  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 19909  004008  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 19910  00400C  0012               	return		;funcret
 19911  00400E                     __end_ofi2___lwmod:
 19912                           	opt stack 0
 19913                           pclatu	equ	0xFFB
 19914                           pclath	equ	0xFFA
 19915                           tblptru	equ	0xFF8
 19916                           tblptrh	equ	0xFF7
 19917                           tblptrl	equ	0xFF6
 19918                           tablat	equ	0xFF5
 19919                           prodh	equ	0xFF4
 19920                           prodl	equ	0xFF3
 19921                           intcon	equ	0xFF2
 19922                           intcon2	equ	0xFF1
 19923                           intcon3	equ	0xFF0
 19924                           indf0	equ	0xFEF
 19925                           postinc0	equ	0xFEE
 19926                           fsr0h	equ	0xFEA
 19927                           fsr0l	equ	0xFE9
 19928                           wreg	equ	0xFE8
 19929                           postdec1	equ	0xFE5
 19930                           fsr1h	equ	0xFE2
 19931                           fsr1l	equ	0xFE1
 19932                           indf2	equ	0xFDF
 19933                           postinc2	equ	0xFDE
 19934                           postdec2	equ	0xFDD
 19935                           fsr2h	equ	0xFDA
 19936                           fsr2l	equ	0xFD9
 19937                           status	equ	0xFD8
 19938                           
 19939 ;; *************** function i2___lwdiv *****************
 19940 ;; Defined at:
 19941 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 19942 ;; Parameters:    Size  Location     Type
 19943 ;;  dividend        2    5[COMRAM] unsigned int 
 19944 ;;  divisor         2    7[COMRAM] unsigned int 
 19945 ;; Auto vars:     Size  Location     Type
 19946 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 19947 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 19948 ;; Return value:  Size  Location     Type
 19949 ;;                  2    5[COMRAM] unsigned int 
 19950 ;; Registers used:
 19951 ;;		wreg, status,2, status,0
 19952 ;; Tracked objects:
 19953 ;;		On entry : 0/0
 19954 ;;		On exit  : 0/0
 19955 ;;		Unchanged: 0/0
 19956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19957 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19958 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19960 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19961 ;;Total ram usage:        7 bytes
 19962 ;; Hardware stack levels used:    1
 19963 ;; This function calls:
 19964 ;;		Nothing
 19965 ;; This function is called by:
 19966 ;;		_printSortTimer
 19967 ;;		i2_printf
 19968 ;; This function uses a non-reentrant model
 19969 ;;
 19970                           
 19971                           	psect	text82
 19972  003E00                     __ptext82:
 19973                           	opt stack 0
 19974  003E00                     i2___lwdiv:
 19975                           	opt stack 20
 19976                           
 19977                           ;incstack = 0
 19978  003E00  0E00               	movlw	0
 19979  003E02  6E0B               	movwf	i2___lwdiv@quotient+1,c
 19980  003E04  0E00               	movlw	0
 19981  003E06  6E0A               	movwf	i2___lwdiv@quotient,c
 19982  003E08  5008               	movf	i2___lwdiv@divisor,w,c
 19983  003E0A  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 19984  003E0C  B4D8               	btfsc	status,2,c
 19985  003E0E  D01C               	goto	i2l1679
 19986  003E10  0E01               	movlw	1
 19987  003E12  6E0C               	movwf	i2___lwdiv@counter,c
 19988  003E14  D004               	goto	i2l5282
 19989  003E16                     i2l5280:
 19990  003E16  90D8               	bcf	status,0,c
 19991  003E18  3608               	rlcf	i2___lwdiv@divisor,f,c
 19992  003E1A  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 19993  003E1C  2A0C               	incf	i2___lwdiv@counter,f,c
 19994  003E1E                     i2l5282:
 19995  003E1E  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 19996  003E20  D7FA               	goto	i2l5280
 19997  003E22                     i2l5284:
 19998  003E22  90D8               	bcf	status,0,c
 19999  003E24  360A               	rlcf	i2___lwdiv@quotient,f,c
 20000  003E26  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 20001  003E28  5008               	movf	i2___lwdiv@divisor,w,c
 20002  003E2A  5C06               	subwf	i2___lwdiv@dividend,w,c
 20003  003E2C  5009               	movf	i2___lwdiv@divisor+1,w,c
 20004  003E2E  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 20005  003E30  A0D8               	btfss	status,0,c
 20006  003E32  D005               	goto	i2l5292
 20007  003E34  5008               	movf	i2___lwdiv@divisor,w,c
 20008  003E36  5E06               	subwf	i2___lwdiv@dividend,f,c
 20009  003E38  5009               	movf	i2___lwdiv@divisor+1,w,c
 20010  003E3A  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 20011  003E3C  800A               	bsf	i2___lwdiv@quotient,0,c
 20012  003E3E                     i2l5292:
 20013  003E3E  90D8               	bcf	status,0,c
 20014  003E40  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 20015  003E42  3208               	rrcf	i2___lwdiv@divisor,f,c
 20016  003E44  2E0C               	decfsz	i2___lwdiv@counter,f,c
 20017  003E46  D7ED               	goto	i2l5284
 20018  003E48                     i2l1679:
 20019  003E48  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 20020  003E4C  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 20021  003E50  0012               	return		;funcret
 20022  003E52                     __end_ofi2___lwdiv:
 20023                           	opt stack 0
 20024                           pclatu	equ	0xFFB
 20025                           pclath	equ	0xFFA
 20026                           tblptru	equ	0xFF8
 20027                           tblptrh	equ	0xFF7
 20028                           tblptrl	equ	0xFF6
 20029                           tablat	equ	0xFF5
 20030                           prodh	equ	0xFF4
 20031                           prodl	equ	0xFF3
 20032                           intcon	equ	0xFF2
 20033                           intcon2	equ	0xFF1
 20034                           intcon3	equ	0xFF0
 20035                           indf0	equ	0xFEF
 20036                           postinc0	equ	0xFEE
 20037                           fsr0h	equ	0xFEA
 20038                           fsr0l	equ	0xFE9
 20039                           wreg	equ	0xFE8
 20040                           postdec1	equ	0xFE5
 20041                           fsr1h	equ	0xFE2
 20042                           fsr1l	equ	0xFE1
 20043                           indf2	equ	0xFDF
 20044                           postinc2	equ	0xFDE
 20045                           postdec2	equ	0xFDD
 20046                           fsr2h	equ	0xFDA
 20047                           fsr2l	equ	0xFD9
 20048                           status	equ	0xFD8
 20049                           
 20050 ;; *************** function i2_lcdInst *****************
 20051 ;; Defined at:
 20052 ;;		line 15 in file "lcd.c"
 20053 ;; Parameters:    Size  Location     Type
 20054 ;;  data            1    wreg     unsigned char 
 20055 ;; Auto vars:     Size  Location     Type
 20056 ;;  data            1    2[COMRAM] unsigned char 
 20057 ;; Return value:  Size  Location     Type
 20058 ;;                  1    wreg      void 
 20059 ;; Registers used:
 20060 ;;		wreg, status,2, status,0, cstack
 20061 ;; Tracked objects:
 20062 ;;		On entry : 0/0
 20063 ;;		On exit  : 0/0
 20064 ;;		Unchanged: 0/0
 20065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20067 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20069 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20070 ;;Total ram usage:        1 bytes
 20071 ;; Hardware stack levels used:    1
 20072 ;; Hardware stack levels required when called:    1
 20073 ;; This function calls:
 20074 ;;		i2_lcdNibble
 20075 ;; This function is called by:
 20076 ;;		_change_state_to_menu_11
 20077 ;;		_change_state_to_menu_23
 20078 ;;		_change_state_to_logs_11
 20079 ;;		_change_state_to_logs_12
 20080 ;;		_change_state_to_logs_22
 20081 ;;		_change_state_to_logs_23
 20082 ;;		_change_state_to_logs_33
 20083 ;;		_change_state_to_logs_34
 20084 ;;		_printSortTimer
 20085 ;;		i2_change_state_to_menu_start
 20086 ;;		i2_change_state_to_menu_12
 20087 ;;		i2_change_state_to_menu_22
 20088 ;;		i2_printRTC
 20089 ;; This function uses a non-reentrant model
 20090 ;;
 20091                           
 20092                           	psect	text83
 20093  004586                     __ptext83:
 20094                           	opt stack 0
 20095  004586                     i2_lcdInst:
 20096                           	opt stack 19
 20097                           
 20098                           ;incstack = 0
 20099                           ;i2lcdInst@data stored from wreg
 20100  004586  6E03               	movwf	i2lcdInst@data,c
 20101                           
 20102                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 20103  004588  948C               	bcf	3980,2,c	;volatile
 20104                           
 20105                           ;lcd.c: 17: lcdNibble(data);
 20106  00458A  5003               	movf	i2lcdInst@data,w,c
 20107  00458C  ECD5  F01E         	call	i2_lcdNibble
 20108  004590  0012               	return		;funcret
 20109  004592                     __end_ofi2_lcdInst:
 20110                           	opt stack 0
 20111                           pclatu	equ	0xFFB
 20112                           pclath	equ	0xFFA
 20113                           tblptru	equ	0xFF8
 20114                           tblptrh	equ	0xFF7
 20115                           tblptrl	equ	0xFF6
 20116                           tablat	equ	0xFF5
 20117                           prodh	equ	0xFF4
 20118                           prodl	equ	0xFF3
 20119                           intcon	equ	0xFF2
 20120                           intcon2	equ	0xFF1
 20121                           intcon3	equ	0xFF0
 20122                           indf0	equ	0xFEF
 20123                           postinc0	equ	0xFEE
 20124                           fsr0h	equ	0xFEA
 20125                           fsr0l	equ	0xFE9
 20126                           wreg	equ	0xFE8
 20127                           postdec1	equ	0xFE5
 20128                           fsr1h	equ	0xFE2
 20129                           fsr1l	equ	0xFE1
 20130                           indf2	equ	0xFDF
 20131                           postinc2	equ	0xFDE
 20132                           postdec2	equ	0xFDD
 20133                           fsr2h	equ	0xFDA
 20134                           fsr2l	equ	0xFD9
 20135                           status	equ	0xFD8
 20136                           
 20137 ;; *************** function i2_lcdNibble *****************
 20138 ;; Defined at:
 20139 ;;		line 25 in file "lcd.c"
 20140 ;; Parameters:    Size  Location     Type
 20141 ;;  data            1    wreg     unsigned char 
 20142 ;; Auto vars:     Size  Location     Type
 20143 ;;  data            1    1[COMRAM] unsigned char 
 20144 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 20145 ;; Return value:  Size  Location     Type
 20146 ;;                  1    wreg      void 
 20147 ;; Registers used:
 20148 ;;		wreg, status,2, status,0
 20149 ;; Tracked objects:
 20150 ;;		On entry : 0/0
 20151 ;;		On exit  : 0/0
 20152 ;;		Unchanged: 0/0
 20153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20155 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20157 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20158 ;;Total ram usage:        2 bytes
 20159 ;; Hardware stack levels used:    1
 20160 ;; This function calls:
 20161 ;;		Nothing
 20162 ;; This function is called by:
 20163 ;;		i2_lcdInst
 20164 ;;		i2_putch
 20165 ;; This function uses a non-reentrant model
 20166 ;;
 20167                           
 20168                           	psect	text84
 20169  003DAA                     __ptext84:
 20170                           	opt stack 0
 20171  003DAA                     i2_lcdNibble:
 20172                           	opt stack 19
 20173                           
 20174                           ;incstack = 0
 20175                           ;i2lcdNibble@data stored from wreg
 20176  003DAA  6E02               	movwf	i2lcdNibble@data,c
 20177                           
 20178                           ;lcd.c: 27: char temp = data & 0xF0;
 20179  003DAC  5002               	movf	i2lcdNibble@data,w,c
 20180  003DAE  0BF0               	andlw	240
 20181  003DB0  6E01               	movwf	i2lcdNibble@temp,c
 20182                           
 20183                           ;lcd.c: 28: LATD = LATD & 0x0F;
 20184  003DB2  508C               	movf	3980,w,c	;volatile
 20185  003DB4  0B0F               	andlw	15
 20186  003DB6  6E8C               	movwf	3980,c	;volatile
 20187                           
 20188                           ;lcd.c: 29: LATD = temp | LATD;
 20189  003DB8  5001               	movf	i2lcdNibble@temp,w,c
 20190  003DBA  108C               	iorwf	3980,w,c	;volatile
 20191  003DBC  6E8C               	movwf	3980,c	;volatile
 20192                           
 20193                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 20194  003DBE  868C               	bsf	3980,3,c	;volatile
 20195                           
 20196                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20197  003DC0  0E42               	movlw	66
 20198  003DC2                     i2u793_47:
 20199  003DC2  2EE8               	decfsz	wreg,f,c
 20200  003DC4  D7FE               	bra	i2u793_47
 20201  003DC6  D000               	nop2	
 20202                           
 20203                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 20204  003DC8  968C               	bcf	3980,3,c	;volatile
 20205                           
 20206                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20207  003DCA  0E42               	movlw	66
 20208  003DCC                     i2u794_47:
 20209  003DCC  2EE8               	decfsz	wreg,f,c
 20210  003DCE  D7FE               	bra	i2u794_47
 20211  003DD0  D000               	nop2	
 20212                           
 20213                           ;lcd.c: 36: data = data << 4;
 20214  003DD2  3802               	swapf	i2lcdNibble@data,w,c
 20215  003DD4  0BF0               	andlw	240
 20216  003DD6  6E02               	movwf	i2lcdNibble@data,c
 20217                           
 20218                           ;lcd.c: 38: temp = data & 0xF0;
 20219  003DD8  5002               	movf	i2lcdNibble@data,w,c
 20220  003DDA  0BF0               	andlw	240
 20221  003DDC  6E01               	movwf	i2lcdNibble@temp,c
 20222                           
 20223                           ;lcd.c: 39: LATD = LATD & 0x0F;
 20224  003DDE  508C               	movf	3980,w,c	;volatile
 20225  003DE0  0B0F               	andlw	15
 20226  003DE2  6E8C               	movwf	3980,c	;volatile
 20227                           
 20228                           ;lcd.c: 40: LATD = temp | LATD;
 20229  003DE4  5001               	movf	i2lcdNibble@temp,w,c
 20230  003DE6  108C               	iorwf	3980,w,c	;volatile
 20231  003DE8  6E8C               	movwf	3980,c	;volatile
 20232                           
 20233                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 20234  003DEA  868C               	bsf	3980,3,c	;volatile
 20235                           
 20236                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20237  003DEC  0E42               	movlw	66
 20238  003DEE                     i2u795_47:
 20239  003DEE  2EE8               	decfsz	wreg,f,c
 20240  003DF0  D7FE               	bra	i2u795_47
 20241  003DF2  D000               	nop2	
 20242                           
 20243                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 20244  003DF4  968C               	bcf	3980,3,c	;volatile
 20245                           
 20246                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20247  003DF6  0E42               	movlw	66
 20248  003DF8                     i2u796_47:
 20249  003DF8  2EE8               	decfsz	wreg,f,c
 20250  003DFA  D7FE               	bra	i2u796_47
 20251  003DFC  D000               	nop2	
 20252  003DFE  0012               	return		;funcret
 20253  003E00                     __end_ofi2_lcdNibble:
 20254                           	opt stack 0
 20255                           pclatu	equ	0xFFB
 20256                           pclath	equ	0xFFA
 20257                           tblptru	equ	0xFF8
 20258                           tblptrh	equ	0xFF7
 20259                           tblptrl	equ	0xFF6
 20260                           tablat	equ	0xFF5
 20261                           prodh	equ	0xFF4
 20262                           prodl	equ	0xFF3
 20263                           intcon	equ	0xFF2
 20264                           intcon2	equ	0xFF1
 20265                           intcon3	equ	0xFF0
 20266                           indf0	equ	0xFEF
 20267                           postinc0	equ	0xFEE
 20268                           fsr0h	equ	0xFEA
 20269                           fsr0l	equ	0xFE9
 20270                           wreg	equ	0xFE8
 20271                           postdec1	equ	0xFE5
 20272                           fsr1h	equ	0xFE2
 20273                           fsr1l	equ	0xFE1
 20274                           indf2	equ	0xFDF
 20275                           postinc2	equ	0xFDE
 20276                           postdec2	equ	0xFDD
 20277                           fsr2h	equ	0xFDA
 20278                           fsr2l	equ	0xFD9
 20279                           status	equ	0xFD8
 20280                           
 20281 ;; *************** function i2_getRTC *****************
 20282 ;; Defined at:
 20283 ;;		line 44 in file "RTC.c"
 20284 ;; Parameters:    Size  Location     Type
 20285 ;;		None
 20286 ;; Auto vars:     Size  Location     Type
 20287 ;;  getRTC          2    3[COMRAM] int 
 20288 ;; Return value:  Size  Location     Type
 20289 ;;                  1    wreg      void 
 20290 ;; Registers used:
 20291 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20292 ;; Tracked objects:
 20293 ;;		On entry : 0/0
 20294 ;;		On exit  : 0/0
 20295 ;;		Unchanged: 0/0
 20296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20298 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20300 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20301 ;;Total ram usage:        2 bytes
 20302 ;; Hardware stack levels used:    1
 20303 ;; Hardware stack levels required when called:    2
 20304 ;; This function calls:
 20305 ;;		i2_I2C_Master_Read
 20306 ;;		i2_I2C_Master_Start
 20307 ;;		i2_I2C_Master_Stop
 20308 ;;		i2_I2C_Master_Write
 20309 ;; This function is called by:
 20310 ;;		_printSortTimer
 20311 ;;		i2_printRTC
 20312 ;; This function uses a non-reentrant model
 20313 ;;
 20314                           
 20315                           	psect	text85
 20316  003A94                     __ptext85:
 20317                           	opt stack 0
 20318  003A94                     i2_getRTC:
 20319                           	opt stack 18
 20320                           
 20321                           ;RTC.c: 48: I2C_Master_Start();
 20322                           
 20323                           ;incstack = 0
 20324  003A94  ECE3  F022         	call	i2_I2C_Master_Start	;wreg free
 20325                           
 20326                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 20327  003A98  0E00               	movlw	0
 20328  003A9A  6E03               	movwf	i2I2C_Master_Write@d+1,c
 20329  003A9C  0ED0               	movlw	208
 20330  003A9E  6E02               	movwf	i2I2C_Master_Write@d,c
 20331  003AA0  ECCE  F022         	call	i2_I2C_Master_Write	;wreg free
 20332                           
 20333                           ;RTC.c: 50: I2C_Master_Write(0x00);
 20334  003AA4  0E00               	movlw	0
 20335  003AA6  6E03               	movwf	i2I2C_Master_Write@d+1,c
 20336  003AA8  0E00               	movlw	0
 20337  003AAA  6E02               	movwf	i2I2C_Master_Write@d,c
 20338  003AAC  ECCE  F022         	call	i2_I2C_Master_Write	;wreg free
 20339                           
 20340                           ;RTC.c: 51: I2C_Master_Stop();
 20341  003AB0  ECDF  F022         	call	i2_I2C_Master_Stop	;wreg free
 20342                           
 20343                           ;RTC.c: 54: I2C_Master_Start();
 20344  003AB4  ECE3  F022         	call	i2_I2C_Master_Start	;wreg free
 20345                           
 20346                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 20347  003AB8  0E00               	movlw	0
 20348  003ABA  6E03               	movwf	i2I2C_Master_Write@d+1,c
 20349  003ABC  0ED1               	movlw	209
 20350  003ABE  6E02               	movwf	i2I2C_Master_Write@d,c
 20351  003AC0  ECCE  F022         	call	i2_I2C_Master_Write	;wreg free
 20352                           
 20353                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 20354  003AC4  0E00               	movlw	0
 20355  003AC6  6E05               	movwf	i2getRTC@i+1,c
 20356  003AC8  0E00               	movlw	0
 20357  003ACA  6E04               	movwf	i2getRTC@i,c
 20358  003ACC                     i2l5532:
 20359  003ACC  BE05               	btfsc	i2getRTC@i+1,7,c
 20360  003ACE  D006               	goto	i2l5536
 20361  003AD0  5005               	movf	i2getRTC@i+1,w,c
 20362  003AD2  E111               	bnz	i2l5542
 20363  003AD4  0E06               	movlw	6
 20364  003AD6  5C04               	subwf	i2getRTC@i,w,c
 20365  003AD8  B0D8               	btfsc	status,0,c
 20366  003ADA  D00D               	goto	i2l5542
 20367  003ADC                     i2l5536:
 20368                           
 20369                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 20370  003ADC  0E24               	movlw	low _time
 20371  003ADE  2404               	addwf	i2getRTC@i,w,c
 20372  003AE0  6ED9               	movwf	fsr2l,c
 20373  003AE2  0E01               	movlw	high _time
 20374  003AE4  2005               	addwfc	i2getRTC@i+1,w,c
 20375  003AE6  6EDA               	movwf	fsr2h,c
 20376  003AE8  0E01               	movlw	1
 20377  003AEA  EC10  F022         	call	i2_I2C_Master_Read
 20378  003AEE  6EDF               	movwf	indf2,c
 20379  003AF0  4A04               	infsnz	i2getRTC@i,f,c
 20380  003AF2  2A05               	incf	i2getRTC@i+1,f,c
 20381  003AF4  D7EB               	goto	i2l5532
 20382  003AF6                     i2l5542:
 20383                           
 20384                           ;RTC.c: 58: }
 20385                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 20386  003AF6  0E00               	movlw	0
 20387  003AF8  EC10  F022         	call	i2_I2C_Master_Read
 20388  003AFC  0101               	movlb	1	; () banked
 20389  003AFE  6F2A               	movwf	(_time+6)& (0+255),b
 20390                           
 20391                           ;RTC.c: 60: I2C_Master_Stop();
 20392  003B00  ECDF  F022         	call	i2_I2C_Master_Stop	;wreg free
 20393  003B04  0012               	return		;funcret
 20394  003B06                     __end_ofi2_getRTC:
 20395                           	opt stack 0
 20396                           pclatu	equ	0xFFB
 20397                           pclath	equ	0xFFA
 20398                           tblptru	equ	0xFF8
 20399                           tblptrh	equ	0xFF7
 20400                           tblptrl	equ	0xFF6
 20401                           tablat	equ	0xFF5
 20402                           prodh	equ	0xFF4
 20403                           prodl	equ	0xFF3
 20404                           intcon	equ	0xFF2
 20405                           intcon2	equ	0xFF1
 20406                           intcon3	equ	0xFF0
 20407                           indf0	equ	0xFEF
 20408                           postinc0	equ	0xFEE
 20409                           fsr0h	equ	0xFEA
 20410                           fsr0l	equ	0xFE9
 20411                           wreg	equ	0xFE8
 20412                           postdec1	equ	0xFE5
 20413                           fsr1h	equ	0xFE2
 20414                           fsr1l	equ	0xFE1
 20415                           indf2	equ	0xFDF
 20416                           postinc2	equ	0xFDE
 20417                           postdec2	equ	0xFDD
 20418                           fsr2h	equ	0xFDA
 20419                           fsr2l	equ	0xFD9
 20420                           status	equ	0xFD8
 20421                           
 20422 ;; *************** function i2_I2C_Master_Write *****************
 20423 ;; Defined at:
 20424 ;;		line 49 in file "I2C.c"
 20425 ;; Parameters:    Size  Location     Type
 20426 ;;  d               2    1[COMRAM] unsigned int 
 20427 ;; Auto vars:     Size  Location     Type
 20428 ;;		None
 20429 ;; Return value:  Size  Location     Type
 20430 ;;                  1    wreg      void 
 20431 ;; Registers used:
 20432 ;;		wreg, status,2, status,0, cstack
 20433 ;; Tracked objects:
 20434 ;;		On entry : 0/0
 20435 ;;		On exit  : 0/0
 20436 ;;		Unchanged: 0/0
 20437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20438 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20441 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20442 ;;Total ram usage:        2 bytes
 20443 ;; Hardware stack levels used:    1
 20444 ;; Hardware stack levels required when called:    1
 20445 ;; This function calls:
 20446 ;;		i2_I2C_Master_Wait
 20447 ;; This function is called by:
 20448 ;;		i2_getRTC
 20449 ;; This function uses a non-reentrant model
 20450 ;;
 20451                           
 20452                           	psect	text86
 20453  00459C                     __ptext86:
 20454                           	opt stack 0
 20455  00459C                     i2_I2C_Master_Write:
 20456                           	opt stack 18
 20457                           
 20458                           ;I2C.c: 51: I2C_Master_Wait();
 20459                           
 20460                           ;incstack = 0
 20461  00459C  ECA4  F022         	call	i2_I2C_Master_Wait	;wreg free
 20462                           
 20463                           ;I2C.c: 52: SSPBUF = d;
 20464  0045A0  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 20465  0045A4  0012               	return		;funcret
 20466  0045A6                     __end_ofi2_I2C_Master_Write:
 20467                           	opt stack 0
 20468                           pclatu	equ	0xFFB
 20469                           pclath	equ	0xFFA
 20470                           tblptru	equ	0xFF8
 20471                           tblptrh	equ	0xFF7
 20472                           tblptrl	equ	0xFF6
 20473                           tablat	equ	0xFF5
 20474                           prodh	equ	0xFF4
 20475                           prodl	equ	0xFF3
 20476                           intcon	equ	0xFF2
 20477                           intcon2	equ	0xFF1
 20478                           intcon3	equ	0xFF0
 20479                           indf0	equ	0xFEF
 20480                           postinc0	equ	0xFEE
 20481                           fsr0h	equ	0xFEA
 20482                           fsr0l	equ	0xFE9
 20483                           wreg	equ	0xFE8
 20484                           postdec1	equ	0xFE5
 20485                           fsr1h	equ	0xFE2
 20486                           fsr1l	equ	0xFE1
 20487                           indf2	equ	0xFDF
 20488                           postinc2	equ	0xFDE
 20489                           postdec2	equ	0xFDD
 20490                           fsr2h	equ	0xFDA
 20491                           fsr2l	equ	0xFD9
 20492                           status	equ	0xFD8
 20493                           
 20494 ;; *************** function i2_I2C_Master_Stop *****************
 20495 ;; Defined at:
 20496 ;;		line 43 in file "I2C.c"
 20497 ;; Parameters:    Size  Location     Type
 20498 ;;		None
 20499 ;; Auto vars:     Size  Location     Type
 20500 ;;		None
 20501 ;; Return value:  Size  Location     Type
 20502 ;;                  1    wreg      void 
 20503 ;; Registers used:
 20504 ;;		wreg, status,2, status,0, cstack
 20505 ;; Tracked objects:
 20506 ;;		On entry : 0/0
 20507 ;;		On exit  : 0/0
 20508 ;;		Unchanged: 0/0
 20509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20513 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20514 ;;Total ram usage:        0 bytes
 20515 ;; Hardware stack levels used:    1
 20516 ;; Hardware stack levels required when called:    1
 20517 ;; This function calls:
 20518 ;;		i2_I2C_Master_Wait
 20519 ;; This function is called by:
 20520 ;;		i2_getRTC
 20521 ;; This function uses a non-reentrant model
 20522 ;;
 20523                           
 20524                           	psect	text87
 20525  0045BE                     __ptext87:
 20526                           	opt stack 0
 20527  0045BE                     i2_I2C_Master_Stop:
 20528                           	opt stack 18
 20529                           
 20530                           ;I2C.c: 45: I2C_Master_Wait();
 20531                           
 20532                           ;incstack = 0
 20533  0045BE  ECA4  F022         	call	i2_I2C_Master_Wait	;wreg free
 20534                           
 20535                           ;I2C.c: 46: PEN = 1;
 20536  0045C2  84C5               	bsf	4037,2,c	;volatile
 20537  0045C4  0012               	return		;funcret
 20538  0045C6                     __end_ofi2_I2C_Master_Stop:
 20539                           	opt stack 0
 20540                           pclatu	equ	0xFFB
 20541                           pclath	equ	0xFFA
 20542                           tblptru	equ	0xFF8
 20543                           tblptrh	equ	0xFF7
 20544                           tblptrl	equ	0xFF6
 20545                           tablat	equ	0xFF5
 20546                           prodh	equ	0xFF4
 20547                           prodl	equ	0xFF3
 20548                           intcon	equ	0xFF2
 20549                           intcon2	equ	0xFF1
 20550                           intcon3	equ	0xFF0
 20551                           indf0	equ	0xFEF
 20552                           postinc0	equ	0xFEE
 20553                           fsr0h	equ	0xFEA
 20554                           fsr0l	equ	0xFE9
 20555                           wreg	equ	0xFE8
 20556                           postdec1	equ	0xFE5
 20557                           fsr1h	equ	0xFE2
 20558                           fsr1l	equ	0xFE1
 20559                           indf2	equ	0xFDF
 20560                           postinc2	equ	0xFDE
 20561                           postdec2	equ	0xFDD
 20562                           fsr2h	equ	0xFDA
 20563                           fsr2l	equ	0xFD9
 20564                           status	equ	0xFD8
 20565                           
 20566 ;; *************** function i2_I2C_Master_Start *****************
 20567 ;; Defined at:
 20568 ;;		line 31 in file "I2C.c"
 20569 ;; Parameters:    Size  Location     Type
 20570 ;;		None
 20571 ;; Auto vars:     Size  Location     Type
 20572 ;;		None
 20573 ;; Return value:  Size  Location     Type
 20574 ;;                  1    wreg      void 
 20575 ;; Registers used:
 20576 ;;		wreg, status,2, status,0, cstack
 20577 ;; Tracked objects:
 20578 ;;		On entry : 0/0
 20579 ;;		On exit  : 0/0
 20580 ;;		Unchanged: 0/0
 20581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20583 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20585 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20586 ;;Total ram usage:        0 bytes
 20587 ;; Hardware stack levels used:    1
 20588 ;; Hardware stack levels required when called:    1
 20589 ;; This function calls:
 20590 ;;		i2_I2C_Master_Wait
 20591 ;; This function is called by:
 20592 ;;		i2_getRTC
 20593 ;; This function uses a non-reentrant model
 20594 ;;
 20595                           
 20596                           	psect	text88
 20597  0045C6                     __ptext88:
 20598                           	opt stack 0
 20599  0045C6                     i2_I2C_Master_Start:
 20600                           	opt stack 18
 20601                           
 20602                           ;I2C.c: 33: I2C_Master_Wait();
 20603                           
 20604                           ;incstack = 0
 20605  0045C6  ECA4  F022         	call	i2_I2C_Master_Wait	;wreg free
 20606                           
 20607                           ;I2C.c: 34: SEN = 1;
 20608  0045CA  80C5               	bsf	4037,0,c	;volatile
 20609  0045CC  0012               	return		;funcret
 20610  0045CE                     __end_ofi2_I2C_Master_Start:
 20611                           	opt stack 0
 20612                           pclatu	equ	0xFFB
 20613                           pclath	equ	0xFFA
 20614                           tblptru	equ	0xFF8
 20615                           tblptrh	equ	0xFF7
 20616                           tblptrl	equ	0xFF6
 20617                           tablat	equ	0xFF5
 20618                           prodh	equ	0xFF4
 20619                           prodl	equ	0xFF3
 20620                           intcon	equ	0xFF2
 20621                           intcon2	equ	0xFF1
 20622                           intcon3	equ	0xFF0
 20623                           indf0	equ	0xFEF
 20624                           postinc0	equ	0xFEE
 20625                           fsr0h	equ	0xFEA
 20626                           fsr0l	equ	0xFE9
 20627                           wreg	equ	0xFE8
 20628                           postdec1	equ	0xFE5
 20629                           fsr1h	equ	0xFE2
 20630                           fsr1l	equ	0xFE1
 20631                           indf2	equ	0xFDF
 20632                           postinc2	equ	0xFDE
 20633                           postdec2	equ	0xFDD
 20634                           fsr2h	equ	0xFDA
 20635                           fsr2l	equ	0xFD9
 20636                           status	equ	0xFD8
 20637                           
 20638 ;; *************** function i2_I2C_Master_Read *****************
 20639 ;; Defined at:
 20640 ;;		line 55 in file "I2C.c"
 20641 ;; Parameters:    Size  Location     Type
 20642 ;;  a               1    wreg     unsigned char 
 20643 ;; Auto vars:     Size  Location     Type
 20644 ;;  a               1    1[COMRAM] unsigned char 
 20645 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 20646 ;; Return value:  Size  Location     Type
 20647 ;;                  1    wreg      unsigned char 
 20648 ;; Registers used:
 20649 ;;		wreg, status,2, status,0, cstack
 20650 ;; Tracked objects:
 20651 ;;		On entry : 0/0
 20652 ;;		On exit  : 0/0
 20653 ;;		Unchanged: 0/0
 20654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20656 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20658 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20659 ;;Total ram usage:        2 bytes
 20660 ;; Hardware stack levels used:    1
 20661 ;; Hardware stack levels required when called:    1
 20662 ;; This function calls:
 20663 ;;		i2_I2C_Master_Wait
 20664 ;; This function is called by:
 20665 ;;		i2_getRTC
 20666 ;; This function uses a non-reentrant model
 20667 ;;
 20668                           
 20669                           	psect	text89
 20670  004420                     __ptext89:
 20671                           	opt stack 0
 20672  004420                     i2_I2C_Master_Read:
 20673                           	opt stack 18
 20674                           
 20675                           ;incstack = 0
 20676                           ;i2I2C_Master_Read@a stored from wreg
 20677  004420  6E02               	movwf	i2I2C_Master_Read@a,c
 20678                           
 20679                           ;I2C.c: 57: unsigned char temp;
 20680                           ;I2C.c: 58: I2C_Master_Wait();
 20681  004422  ECA4  F022         	call	i2_I2C_Master_Wait	;wreg free
 20682                           
 20683                           ;I2C.c: 59: RCEN = 1;
 20684  004426  86C5               	bsf	4037,3,c	;volatile
 20685                           
 20686                           ;I2C.c: 60: I2C_Master_Wait();
 20687  004428  ECA4  F022         	call	i2_I2C_Master_Wait	;wreg free
 20688                           
 20689                           ;I2C.c: 61: temp = SSPBUF;
 20690  00442C  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 20691                           
 20692                           ;I2C.c: 62: I2C_Master_Wait();
 20693  004430  ECA4  F022         	call	i2_I2C_Master_Wait	;wreg free
 20694                           
 20695                           ;I2C.c: 63: ACKDT = (a)?0:1;
 20696  004434  5002               	movf	i2I2C_Master_Read@a,w,c
 20697  004436  A4D8               	btfss	status,2,c
 20698  004438  D002               	goto	i2u358_40
 20699  00443A  8AC5               	bsf	4037,5,c	;volatile
 20700  00443C  D001               	goto	i2l5246
 20701  00443E                     i2u358_40:
 20702  00443E  9AC5               	bcf	4037,5,c	;volatile
 20703  004440                     i2l5246:
 20704                           
 20705                           ;I2C.c: 64: ACKEN = 1;
 20706  004440  88C5               	bsf	4037,4,c	;volatile
 20707                           
 20708                           ;I2C.c: 65: return temp;
 20709  004442  5003               	movf	i2I2C_Master_Read@temp,w,c
 20710  004444  0012               	return	
 20711  004446                     __end_ofi2_I2C_Master_Read:
 20712                           	opt stack 0
 20713                           pclatu	equ	0xFFB
 20714                           pclath	equ	0xFFA
 20715                           tblptru	equ	0xFF8
 20716                           tblptrh	equ	0xFF7
 20717                           tblptrl	equ	0xFF6
 20718                           tablat	equ	0xFF5
 20719                           prodh	equ	0xFF4
 20720                           prodl	equ	0xFF3
 20721                           intcon	equ	0xFF2
 20722                           intcon2	equ	0xFF1
 20723                           intcon3	equ	0xFF0
 20724                           indf0	equ	0xFEF
 20725                           postinc0	equ	0xFEE
 20726                           fsr0h	equ	0xFEA
 20727                           fsr0l	equ	0xFE9
 20728                           wreg	equ	0xFE8
 20729                           postdec1	equ	0xFE5
 20730                           fsr1h	equ	0xFE2
 20731                           fsr1l	equ	0xFE1
 20732                           indf2	equ	0xFDF
 20733                           postinc2	equ	0xFDE
 20734                           postdec2	equ	0xFDD
 20735                           fsr2h	equ	0xFDA
 20736                           fsr2l	equ	0xFD9
 20737                           status	equ	0xFD8
 20738                           
 20739 ;; *************** function i2_I2C_Master_Wait *****************
 20740 ;; Defined at:
 20741 ;;		line 26 in file "I2C.c"
 20742 ;; Parameters:    Size  Location     Type
 20743 ;;		None
 20744 ;; Auto vars:     Size  Location     Type
 20745 ;;		None
 20746 ;; Return value:  Size  Location     Type
 20747 ;;                  1    wreg      void 
 20748 ;; Registers used:
 20749 ;;		wreg, status,2, status,0
 20750 ;; Tracked objects:
 20751 ;;		On entry : 0/0
 20752 ;;		On exit  : 0/0
 20753 ;;		Unchanged: 0/0
 20754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20757 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20758 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20759 ;;Total ram usage:        1 bytes
 20760 ;; Hardware stack levels used:    1
 20761 ;; This function calls:
 20762 ;;		Nothing
 20763 ;; This function is called by:
 20764 ;;		i2_I2C_Master_Start
 20765 ;;		i2_I2C_Master_Stop
 20766 ;;		i2_I2C_Master_Write
 20767 ;;		i2_I2C_Master_Read
 20768 ;; This function uses a non-reentrant model
 20769 ;;
 20770                           
 20771                           	psect	text90
 20772  004548                     __ptext90:
 20773                           	opt stack 0
 20774  004548                     i2_I2C_Master_Wait:
 20775                           	opt stack 18
 20776  004548                     i2l66:
 20777  004548  B4C7               	btfsc	4039,2,c	;volatile
 20778  00454A  D7FE               	goto	i2l66
 20779  00454C  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 20780  004550  0E1F               	movlw	31
 20781  004552  1601               	andwf	??i2_I2C_Master_Wait,f,c
 20782  004554  B4D8               	btfsc	status,2,c
 20783  004556  0012               	return	
 20784  004558  D7F7               	goto	i2l66
 20785  00455A                     __end_ofi2_I2C_Master_Wait:
 20786                           	opt stack 0
 20787                           pclatu	equ	0xFFB
 20788                           pclath	equ	0xFFA
 20789                           tblptru	equ	0xFF8
 20790                           tblptrh	equ	0xFF7
 20791                           tblptrl	equ	0xFF6
 20792                           tablat	equ	0xFF5
 20793                           prodh	equ	0xFF4
 20794                           prodl	equ	0xFF3
 20795                           intcon	equ	0xFF2
 20796                           intcon2	equ	0xFF1
 20797                           intcon3	equ	0xFF0
 20798                           indf0	equ	0xFEF
 20799                           postinc0	equ	0xFEE
 20800                           fsr0h	equ	0xFEA
 20801                           fsr0l	equ	0xFE9
 20802                           wreg	equ	0xFE8
 20803                           postdec1	equ	0xFE5
 20804                           fsr1h	equ	0xFE2
 20805                           fsr1l	equ	0xFE1
 20806                           indf2	equ	0xFDF
 20807                           postinc2	equ	0xFDE
 20808                           postdec2	equ	0xFDD
 20809                           fsr2h	equ	0xFDA
 20810                           fsr2l	equ	0xFD9
 20811                           status	equ	0xFD8
 20812                           pclatu	equ	0xFFB
 20813                           pclath	equ	0xFFA
 20814                           tblptru	equ	0xFF8
 20815                           tblptrh	equ	0xFF7
 20816                           tblptrl	equ	0xFF6
 20817                           tablat	equ	0xFF5
 20818                           prodh	equ	0xFF4
 20819                           prodl	equ	0xFF3
 20820                           intcon	equ	0xFF2
 20821                           intcon2	equ	0xFF1
 20822                           intcon3	equ	0xFF0
 20823                           indf0	equ	0xFEF
 20824                           postinc0	equ	0xFEE
 20825                           fsr0h	equ	0xFEA
 20826                           fsr0l	equ	0xFE9
 20827                           wreg	equ	0xFE8
 20828                           postdec1	equ	0xFE5
 20829                           fsr1h	equ	0xFE2
 20830                           fsr1l	equ	0xFE1
 20831                           indf2	equ	0xFDF
 20832                           postinc2	equ	0xFDE
 20833                           postdec2	equ	0xFDD
 20834                           fsr2h	equ	0xFDA
 20835                           fsr2l	equ	0xFD9
 20836                           status	equ	0xFD8
 20837                           
 20838                           	psect	rparam
 20839  0000                     pclatu	equ	0xFFB
 20840                           pclath	equ	0xFFA
 20841                           tblptru	equ	0xFF8
 20842                           tblptrh	equ	0xFF7
 20843                           tblptrl	equ	0xFF6
 20844                           tablat	equ	0xFF5
 20845                           prodh	equ	0xFF4
 20846                           prodl	equ	0xFF3
 20847                           intcon	equ	0xFF2
 20848                           intcon2	equ	0xFF1
 20849                           intcon3	equ	0xFF0
 20850                           indf0	equ	0xFEF
 20851                           postinc0	equ	0xFEE
 20852                           fsr0h	equ	0xFEA
 20853                           fsr0l	equ	0xFE9
 20854                           wreg	equ	0xFE8
 20855                           postdec1	equ	0xFE5
 20856                           fsr1h	equ	0xFE2
 20857                           fsr1l	equ	0xFE1
 20858                           indf2	equ	0xFDF
 20859                           postinc2	equ	0xFDE
 20860                           postdec2	equ	0xFDD
 20861                           fsr2h	equ	0xFDA
 20862                           fsr2l	equ	0xFD9
 20863                           status	equ	0xFD8
 20864                           
 20865                           	psect	temp
 20866  00007E                     btemp:
 20867                           	opt stack 0
 20868  00007E                     	ds	1
 20869  0000                     int$flags	set	btemp
 20870                           pclatu	equ	0xFFB
 20871                           pclath	equ	0xFFA
 20872                           tblptru	equ	0xFF8
 20873                           tblptrh	equ	0xFF7
 20874                           tblptrl	equ	0xFF6
 20875                           tablat	equ	0xFF5
 20876                           prodh	equ	0xFF4
 20877                           prodl	equ	0xFF3
 20878                           intcon	equ	0xFF2
 20879                           intcon2	equ	0xFF1
 20880                           intcon3	equ	0xFF0
 20881                           indf0	equ	0xFEF
 20882                           postinc0	equ	0xFEE
 20883                           fsr0h	equ	0xFEA
 20884                           fsr0l	equ	0xFE9
 20885                           wreg	equ	0xFE8
 20886                           postdec1	equ	0xFE5
 20887                           fsr1h	equ	0xFE2
 20888                           fsr1l	equ	0xFE1
 20889                           indf2	equ	0xFDF
 20890                           postinc2	equ	0xFDE
 20891                           postdec2	equ	0xFDD
 20892                           fsr2h	equ	0xFDA
 20893                           fsr2l	equ	0xFD9
 20894                           status	equ	0xFD8


Data Sizes:
    Strings     1212
    Constant    27
    Data        8
    BSS         118
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      53
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_112(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_111(CODE[17]), STR_110(CODE[17]), STR_109(CODE[10]), STR_108(CODE[13]), 
		 -> STR_107(CODE[18]), STR_106(CODE[18]), STR_105(CODE[17]), STR_104(CODE[15]), 
		 -> STR_103(CODE[15]), STR_102(CODE[15]), STR_101(CODE[17]), STR_100(CODE[17]), 
		 -> STR_99(CODE[17]), STR_98(CODE[16]), STR_97(CODE[17]), STR_96(CODE[17]), 
		 -> STR_95(CODE[17]), STR_94(CODE[17]), STR_93(CODE[17]), STR_92(CODE[17]), 
		 -> STR_91(CODE[15]), STR_90(CODE[11]), STR_89(CODE[17]), STR_88(CODE[11]), 
		 -> STR_87(CODE[17]), STR_86(CODE[14]), STR_85(CODE[15]), STR_84(CODE[14]), 
		 -> STR_83(CODE[10]), STR_82(CODE[16]), STR_81(CODE[15]), STR_80(CODE[15]), 
		 -> STR_79(CODE[13]), STR_78(CODE[14]), STR_77(CODE[8]), STR_76(CODE[14]), 
		 -> STR_75(CODE[15]), STR_74(CODE[12]), STR_73(CODE[14]), STR_72(CODE[17]), 
		 -> STR_71(CODE[14]), STR_70(CODE[15]), STR_69(CODE[17]), STR_68(CODE[17]), 
		 -> STR_67(CODE[7]), STR_66(CODE[21]), STR_65(CODE[13]), STR_64(CODE[11]), 
		 -> STR_63(CODE[24]), STR_50(CODE[17]), STR_49(CODE[17]), STR_48(CODE[17]), 
		 -> STR_47(CODE[17]), STR_46(CODE[17]), STR_45(CODE[17]), STR_44(CODE[17]), 
		 -> STR_43(CODE[17]), STR_42(CODE[17]), STR_41(CODE[17]), STR_40(CODE[17]), 
		 -> STR_39(CODE[17]), STR_38(CODE[17]), STR_37(CODE[17]), STR_36(CODE[17]), 
		 -> STR_35(CODE[17]), STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), 
		 -> STR_31(CODE[17]), STR_30(CODE[17]), STR_29(CODE[3]), STR_28(CODE[17]), 
		 -> STR_27(CODE[19]), STR_26(CODE[17]), STR_25(CODE[19]), STR_24(CODE[17]), 
		 -> STR_23(CODE[14]), STR_22(CODE[10]), STR_21(CODE[24]), STR_7(CODE[7]), 
		 -> STR_6(CODE[17]), STR_5(CODE[18]), STR_4(CODE[16]), STR_3(CODE[18]), 
		 -> STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getIR->_readIR
    _ID->_readMAG
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _readIR->_readADC
    _algorithmTest->_printf
    _actuatorTest->_printf
    _ToggleTestA5->_printf
    _SolenoidTestA5->_printf
    _PortTestA5->_printf
    _BothServos->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _initServos->_updateServoPosition

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  173555
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   20014
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                              7     7      0   15450
                                             49 BANK0      7     7      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getIR                                                2     2      0      45
                                              6 BANK0      2     2      0
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _ID                                                   8     8      0     207
                                              6 BANK0      8     8      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    4357
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   10466
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3    9719
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   21264
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     850
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     376
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   20414
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   42408
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   12391
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    8023
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    8023
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0   78730
                                             70 BANK0      2     2      0
                         _BothServos
                         _EEPROMTest
                         _PortTestA5
                          _PortTests
                     _SolenoidTestA5
                       _ToggleTestA5
                       _actuatorTest
                      _algorithmTest
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    8138
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                             _readIR
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (5) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    8023
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   13577
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _ToggleTestA5                                         3     3      0    8048
                                             43 BANK0      3     3      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _SolenoidTestA5                                       6     6      0    8161
                                             43 BANK0      6     6      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTests                                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTestA5                                           1     1      0    8023
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _EEPROMTest                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   16737
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    7888
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     442
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    4357
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    4357
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   76936
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   71999
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7744
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4605
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   31390
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4937
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    3004
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     318
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Test
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _EEPROMTest
     _PortTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTests
     _SolenoidTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _ToggleTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readIR
         _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _readMAG
         _readADC
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      35       7       20.7%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     132      34        0.0%
DATA                 0      0     132       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Fri Mar 10 22:33:40 2017

                                    _i 012B                     i2_I2C_Master_Start 45C6  
                   i2_I2C_Master_Write 459C                                     l66 4534  
                                   _ID 2E2C                            __CFG_CPD$ON 000000  
                                   _UI 0012                           ___awdiv@sign 008B  
                                   _up 0077                    ___wmul@multiplicand 0082  
                   i2___lwdiv@dividend 0006                            __CFG_BORV$3 000000  
                   EEPROM_read@address 0080                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                                    ?_ID 0001  
                                  ?_UI 0001                                    UI@i 00C8  
                                  l177 00E8                                    l478 3762  
                                  l719 2B32                                    l593 1C84  
                                  l913 3290                                    l926 4500  
                                  l935 2E16                                    l779 3A5A  
                         __CFG_CPB$OFF 000000                                    _PEN 007E2A  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
                       ?_machineConfig 0001                    ?i2_I2C_Master_Write 0002  
                                  _log 00E6                                    _sel 00FD  
                                  _var 00FA                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
                  _log_count_can_w_lab 00EC        __end_of_change_state_to_menu_11 41DC  
      __end_of_change_state_to_menu_12 407E        __end_of_change_state_to_menu_22 4046  
      __end_of_change_state_to_menu_23 41AC           _f_can_coming_to_distribution 006F  
                       ??_Distribution 0088        __end_of_change_state_to_logs_11 42CC  
      __end_of_change_state_to_logs_12 429C        __end_of_change_state_to_logs_22 426C  
      __end_of_change_state_to_logs_23 4328        __end_of_change_state_to_logs_33 423C  
      __end_of_change_state_to_logs_34 420C                                   ??_ID 0086  
                                 ??_UI 00C4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1020 30E6  
                                 l1040 33B4                                   l1121 1028  
                                 l1017 30C6                                   l1043 33B8  
                                 l1052 27C8                                   l1141 393E  
                                 l1109 0E8E                                   l1061 288C  
                                 l1143 3942                                   l1232 137E  
                                 l1144 3946                                   l1072 0922  
                                 l1145 394A                                   l1137 3922  
                                 l1049 27C4                                   l1146 394E  
                                 l1082 0A32                                   l1147 3952  
                                 l1083 0A80                                   l1075 0926  
                                 l1164 3D48                                   l1172 31A4  
                                 l1084 0AE6                                   l1149 3990  
                                 l1085 0B34                                   l1158 3D38  
                                 l1079 09CC                                   l1178 31F0  
                                 l1195 3896                                   l1187 3862  
                                 l1626 3594                                   l5206 3A06  
                                 l5222 3C20                                   l5214 3BEA  
                                 l1679 3A14                                   l5216 3BF6  
                                 l5400 13D6                                   l5136 4368  
                                 l5160 42F2                                   l1689 3C2E  
                                 l5218 3BFC                                   l5330 116C  
                                 l7010 3956                                   l7002 3256  
                                 l5138 437A                                   l5412 1412  
                                 l5340 11AA                                   l5324 1146  
                                 l5430 1490                                   l5422 146C  
                                 l5334 1176                                   l5510 3528  
                                 l6070 37CA                                   l6310 2B74  
                                 l5424 1476                                   l5360 126A  
                                 l5328 115A                                   l7120 3488  
                                 l7112 345E                                   l5520 3582  
                                 l5512 352E                                   l6080 380C  
                                 l5194 39C4                                   l5178 43A0  
                                 l5442 14D2                                   l5418 1434  
                                 l5370 12E2                                   l7130 34BE  
                                 l7122 348E                                   l7106 3448  
                                 l6074 37E0                                   l5196 39D0  
                                 l5452 1544                                   l5436 14AC  
                                 l5372 12FA                                   l5356 1258  
                                 l5348 1226                                   l5460 4094  
                                 l7300 026A                                   l7220 0100  
                                 l5508 3518                                   l5198 39D6  
                                 l5438 14B8                                   l5446 14E6  
                                 l5366 12D0                                   l5358 1264  
                                 l5382 1344                                   l5454 1550  
                                 l7118 347C                                   l7134 34CC  
                                 l7150 366C                                   l5470 38F2  
                                 l7230 0122                                   l7222 0106  
                                 l6342 2EC8                                   l5448 14EC  
                                 l5376 1326                                   l5368 12DC  
                                 l7160 369C                                   l7400 0626  
                                 l7320 02D4                                   l7304 0282  
                                 l6352 2EF8                                   l6360 2F10  
                                 l5394 13B6                                   l5378 133E  
                                 l7138 34E0                                   l7162 36A2  
                                 l7170 36D4                                   l7154 367C  
                                 l5466 38DC                                   l5458 4088  
                                 l5730 1CAC                                   l5722 1C02  
                                 l7410 0650                                   l7330 036A  
                                 l7322 02F2                                   l7234 013A  
                                 l7226 0118                                   l6700 0D46  
                                 l6532 0990                                   l5476 3912  
                                 l5740 1D42                                   l5732 1CCA  
                                 l7404 063E                                   l7340 0400  
                                 l7332 0388                                   l7324 0310  
                                 l7252 01A4                                   l6380 2BD4  
                                 l6356 2F04                                   l6284 2AF0  
                                 l5494 3A46                                   l5398 13D0  
                                 l6710 0D6E                                   l6622 0BBA  
                                 l6542 09B8                                   l6534 0996  
                                 l6470 2862                                   l7174 36E8  
                                 l7166 36C6                                   l7158 3690  
                                 l5750 1DD8                                   l5742 1D60  
                                 l5734 1CE8                                   l7414 065A  
                                 l7342 041E                                   l7334 03A6  
                                 l7326 032E                                   l7350 04BE  
                                 l7262 01CC                                   l7254 01AA  
                                 l7238 014C                                   l6382 2BEE  
                                 l6390 2C50                                   l5902 3640  
                                 l6294 2B3A                                   _ADIE 007CEE  
                                 l5496 3A70                                   l6704 0D5E  
                                 l6632 0BE2                                   l6464 2820  
                                 l5744 1D7E                                   l5736 1D06  
                                 l5728 1C8E                                   l7520 0852  
                                 l7440 06E2                                   l7344 043C  
                                 l7336 03C4                                   l7328 034C  
                                 l6384 2C08                                   l6810 0F7C  
                                 l6802 0F5A                                   l6730 0DE2  
                                 l6722 0DC0                                   l6714 0D86  
                                 l6706 0D64                                   l6626 0BD2  
                                 l6618 0BB0                                   l6538 09A0  
                                 l5746 1D9C                                   l5738 1D24  
                                 l5754 1DF6                                   l7530 087C  
                                 l7450 070C                                   l7418 0672  
                                 l7362 0522                                   l7354 0500  
                                 l7338 03E2                                   l7290 024E  
                                 l7282 022C                                   l7258 01B4  
                                 l6378 2BBA                                   l6820 0FA4  
                                 l6812 0F82                                   l6740 0E0A  
                                 l6732 0DE8                                   l6652 0C56  
                                 l6644 0C34                                   l6636 0BFA  
                                 l6628 0BD8                                   l6492 28F0  
                                 l5748 1DBA                                   l5756 1E54  
                                 l7524 086A                                   l7516 0848  
                                 l7444 06FA                                   l7436 06D8  
                                 l7372 053E                                   l7348 045A  
                                 l7268 01DA                                   l6388 2C22  
                                 l6902 1118                                   l6806 0F64  
                                 l6726 0DCA                                   l6670 0CB8  
                                 l6662 0C7E                                   l6654 0C5C  
                                 l6486 28AE                                   l6478 2880  
                                 l7534 0886                                   l7454 0716  
                                 l7358 050A                                   l7286 0236  
                                 l7542 08AA                                   l5950 3334  
                                 l5942 3306                                   l6832 0FE8  
                                 l6816 0F8C                                   l6752 0E4E  
                                 l6736 0DF2                                   l6680 0CE0  
                                 l6648 0C3E                                   l7480 079E  
                                 l7376 0556                                   l7368 0534  
                                 l7296 0260                                   l5960 43B0  
                                 l6906 1130                                   l6842 1010  
                                 l6762 0E76                                   l6674 0CC2  
                                 l6658 0C66                                   l7538 089E  
                                 l7490 07C8                                   l7458 072E  
                                 l5954 333E                                   l5938 32FC  
                                 l5946 331E                                   l6836 1000  
                                 l6828 0FDE                                   l6780 0EE0  
                                 l6756 0E66                                   l6748 0E44  
                                 l6684 0CEA                                   l7484 07B6  
                                 l7476 0794                                   l7396 061C  
                                 l7820 2DD0                                   l5964 43C6  
                                 l5892 35B4                                   l6870 109A  
                                 l6862 1078                                   l6838 1006  
                                 l6790 0F08                                   l6758 0E6C  
                                 l6678 0CDA                                   l7494 07D2  
                                 l5990 3EE2                                   l6952 388A  
                                 l6880 10C2                                   l6872 10A0  
                                 l6784 0EF8                                   l6776 0ED6  
                                 l6696 0D3C                                   l6688 0D02  
                                 l7832 3068                                   l5896 35CA  
                                 l6866 1082                                   l6794 0F20  
                                 l6786 0EFE                                   l7850 30EC  
                                 l7498 07EA                                   l7930 3734  
                                 l6972 31C8                                   l6956 3170  
                                 l6892 10F0                                   l6876 10AA  
                                 l7860 310A                                   l7852 30F2  
                                 l7932 373A                                   l6974 31CE  
                                 l7862 3110                                   l7854 30F8  
                                 l7870 3122                                   l7942 3758  
                                 l7934 3740                                   l6968 31B2  
                                 l6896 1108                                   l6888 10E6  
                                 l7864 3116                                   l7856 30FE  
                                 l7944 375E                                   l6978 31D8  
                                 l6898 110E                                   l7866 311C  
                                 l7858 3104                                   l7794 2D3C  
                                 l6988 3218                                   l7796 2D50  
                                 l7948 3764                                   l6998 324C  
                                 STR_1 FBCB                                   STR_2 FF2D  
                                 STR_3 FBB9                                   STR_4 FE50  
                                 STR_5 FBB9                                   STR_6 FE0E  
                                 STR_7 FFC3                                   STR_8 FFDA  
                                 STR_9 FFCA                                   _LATA 000F89  
                                 _LATB 000F8A                                   _LATC 000F8B  
                                 _LATD 000F8C                                   _LATE 000F8D  
                                 u5010 09CC                                   u5030 0A80  
                                 u5050 0B34                                   u4350 3F30  
                                 u4351 3F2C                                   u4360 3F32  
                                 u3480 42F0                                   _PEIE 007F96  
                                 u3740 12A4                                   u4390 1C84  
                                 u4710 2AFC                                   u7007 012A  
                                 u4375 3C68                                   u3680 3F7C  
                                 u7017 0166                                   u3690 3F7E  
                                 u4730 2B32                                   u3747 129A  
                                 u7107 062E                                   u7027 01BC  
                                 u3780 131C                                   u4820 2EB8  
                                 _RCEN 007E2B                                   u7117 0662  
                                 u7037 01E8                                   u7207 088E  
                                 u7127 068C                                   u7047 023E  
                                 u4728 2B00                                   u7217 3076  
                                 u7137 06EA                                   u7057 0272  
                                 u3787 1312                                   u7307 4370  
                                 u7227 30BA                                   u7147 071E  
                                 u7067 029C                                   u4828 2EBC  
                                 u7317 3364                                   u7237 2774  
                                 u7157 0748                                   u7077 0512  
                                 u4790 2E5C                                   u7407 0A60  
                                 u7327 33A8                                   u7247 27B8  
                                 u7167 07A6                                   u7087 0546  
                                 u7417 0A90                                   u7337 33CA  
                                 u7257 27DA                                   u7177 07DA  
                                 u7097 0570                                   i2l66 4548  
                                 u7507 0CF2                                   u7427 0AF6  
                                 u7347 08D2                                   u7267 2808  
                                 u7187 0804                                   u7517 0D4E  
                                 u7437 0B14                                   u7357 0916  
                                 u7277 2856                                   u7197 085A  
                                 u4798 2E60                                   u7607 0F94  
                                 u7527 0D76                                   u7447 0B44  
                                 u7367 0938                                   u7287 28A0  
                                 u6680 2E16                                   u7617 0FF0  
                                 u7537 0DD2                                   u7457 0BC2  
                                 u7377 09A8                                   u7297 28E4  
                                 u7707 31E0                                   u7627 1018  
                                 u7547 0DFA                                   u7467 0BEA  
                                 u7387 09DC                                   u6907 2E9E  
                                 u7717 3200                                   u7637 103A  
                                 u7557 0E56                                   u7477 0C46  
                                 u7397 0A42                                   u6917 2F34  
                                 u7807 1A38                                   u7727 3226  
                                 u7647 108A                                   u7567 0E7E  
                                 u7487 0C6E                                   u6927 2C5E  
                                 u7817 1A84                                   u7737 325E  
                                 u7657 10B2                                   u7577 0EE8  
                                 u7497 0CCA                                   u6937 2C92  
                                 u6857 2A82                                   u7907 3BCE  
                                 u7827 1AB8                                   u7747 3D02  
                                 u7667 10F8                                   u7587 0F10  
                                 u6947 32B2                                   u6867 2B9E  
                                 u7917 3D92                                   u7837 1B04  
                                 u7757 18EC                                   u7677 1120  
                                 u7597 0F6C                                   u6957 330E  
                                 u6877 3EBE                                   u7847 1B38  
                                 u7767 1938                                   u7687 3822  
                                 u6967 3346                                   u6887 43BC  
                                 u7857 1B84                                   u7777 1984  
                                 u7697 317E                                   u6977 3F8E  
                                 u6897 2E42                                   u7867 1BB8  
                                 u7787 19B8                                   u6987 3FC2  
                                 u7877 3B8E                                   u7797 1A04  
                                 u6997 002A                                   u7887 3B98  
                                 u7897 3BC4                                   _RSEN 007E29  
                          _stopSignals 4508                                   _Test 3068  
                                 _back 005B                                   _main 36F2  
                                 _down 0067                                   _keys FB27  
                                 _time 0124                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 448E                                   btemp 007E  
                 ??i2_I2C_Master_Start 0002                       ??_SolenoidTestA5 00AB  
                 ??i2_I2C_Master_Write 0004                                   prodh 000FF4  
                                 prodl 000FF3                                   start 000E  
                        __CFG_IESO$OFF 000000                   _log_count_can_no_lab 00EA  
                      __end_ofi2_putch 4586                    __size_of_EEPROMTest 0002  
                        __CFG_MCLRE$ON 000000                           ___param_bank 000000  
                           i2_printRTC 2158                            i2_lcdNibble 3DAA  
                      __end_of_Loading 2BB0                   __end_of_actuatorTest 1138  
                     ?_I2C_Master_Init 008D                       ?_I2C_Master_Read 0001  
                     ?_I2C_Master_Wait 0001            ??i2_change_state_to_menu_12 002A  
          ??i2_change_state_to_menu_22 002A                       ?_I2C_Master_Stop 0001  
                                ?_Test 0001                   __end_of_EEPROM_write 3356  
                                ?_main 0001                                  _ACKEN 007E2C  
                                _ACKDT 007E2D                        __end_of___awdiv 34EA  
                                _EEADR 000FA9                                  STR_10 FFE6  
                                STR_11 FFEA                                  STR_12 FFFA  
                                STR_20 FFEE                                  STR_13 FFDE  
                                STR_21 FB42                                  STR_14 FFD6  
                                STR_22 FFA3                                  STR_30 FE1F  
                                STR_15 FFD2                                  STR_23 FF1F  
                                STR_31 FDFD                                  STR_16 FFE2  
                                STR_24 FD64                                  STR_32 FD42  
                                STR_40 FCFE                                  STR_17 FFF2  
                                STR_33 FD53                                  STR_41 FCED  
                                STR_25 FB82                                  STR_18 FFF6  
                                STR_34 FDEC                                  STR_50 FDCA  
                                STR_42 FDA8                                  STR_26 FD75  
                                STR_43 FDA8                                  STR_35 FDEC  
                                STR_51 FFDA                                  STR_19 FFCE  
                                STR_27 FB6F                                  STR_52 FFCA  
                                STR_60 FFF2                                  STR_28 FD86  
                                STR_36 FD31                                  STR_44 FD0F  
                      __end_of___awmod 36F2                                  STR_45 FCFE  
                                STR_37 FD42                                  STR_53 FFE6  
                                STR_61 FFF6                                  STR_29 FB7F  
                                STR_62 FFCE                                  STR_54 FFEA  
                                STR_70 FED8                                  STR_38 FDDB  
                                STR_46 FDB9                                  STR_47 FDB9  
                                STR_55 FFFA                                  STR_63 FB42  
                                STR_71 FF11                                  STR_39 FD97  
                                STR_56 FFDE                                  STR_64 FF84  
                                STR_80 FE60                                  STR_48 FD20  
                                STR_72 FC87                                  STR_49 FD0F  
                                STR_57 FFD6                                  STR_65 FF55  
                                STR_73 FEF5                                  STR_81 FE8D  
                                STR_58 FFD2                                  STR_90 FF79  
                                STR_74 FF62                                  STR_82 FE30  
                                STR_66 FB5A                                  STR_59 FFE2  
                                STR_67 FFBC                                  STR_83 FF99  
                                STR_75 FEBA                                  STR_91 FEAB  
                                STR_84 FF11                                  STR_76 FF03  
                                STR_68 FC98                                  STR_92 FC32  
                                STR_77 FFAD                                  STR_85 FEC9  
                                STR_69 FCCB                                  STR_93 FC21  
                                STR_78 FF11                                  STR_86 FEE7  
                                STR_94 FBFF                                  STR_79 FF3B  
                                STR_87 FCA9                                  STR_95 FC54  
                                STR_88 FF6E                                  STR_96 FC65  
                                STR_89 FCBA                                  STR_97 FBDD  
                                STR_98 FE40                                  STR_99 FC10  
                                ?_sort 0001                        __end_of___lldiv 35A6  
                                _T0CON 000FD5                        ___awdiv@divisor 0088  
                                _T1CON 000FCD                                  _T3CON 000FB1  
                      __end_of___lwdiv 3A1E                        __end_of___lwmod 3C38  
                                i2l254 2154                                  i2l593 21E6  
                                i2l850 2A28                                  i2l844 29BC  
                                i2l926 452C                                  i2l848 2A08  
                      ___awdiv@counter 008A                                  _TMR0H 000FD7  
                                _TMR1H 000FCF                                  _TMR0L 000FD6  
                                _TMR3H 000FB3                                  _TMR1L 000FCE  
                                _TMR3L 000FB2                             _BothServos 18DE  
                                _PORTB 000F81                                  _TRISA 000F92  
                                _TRISB 000F93                                  _TRISC 000F94  
                                _TRISD 000F95                                  _TRISE 000F96  
                        __CFG_PWRT$OFF 000000                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                        __CFG_WRT3$OFF 000000                        __end_of_lcdInst 457A  
                      __end_of_handler 2A64                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                                _nRBPU 007F8F                          __CFG_WRTB$OFF 000000  
                        __CFG_WRTC$OFF 000000                          __CFG_WRTD$OFF 000000  
                      __end_of_readADC 4380                        __end_of_initLCD 3FCC  
                       __CFG_EBTRB$OFF 000000                                  _debug 00E0  
                           i2isdigit@c 0003                                  _getIR 3EA0  
                      __end_of_loadRTC 3814                        __end_of_readMAG 3F3A  
                      __end_of_dpowers FB42                                  _first 00E4  
                                _enter 0069                        __end_of_isdigit 43AA  
                                _input 007D                                  _putch 455A  
                                pclath 000FFA                                  tablat 000FF5  
                     __end_ofi2___wmul 4420                       __end_ofi2_getRTC 3B06  
                  _log_count_pop_w_tab 00F0                                  status 000FD8  
                       __CFG_PBADEN$ON 000000                          i2printf@width 0028  
                     __end_ofi2_printf 18DE                     __size_ofi2___lwdiv 0052  
                   __size_ofi2___lwmod 0042                       __end_ofi2_strcpy 411C  
                          Loading@addr 00B3                       _count_can_no_lab 005D  
                 __size_of_EEPROM_read 0018                        __initialization 3E52  
                         __end_of_Test 3170                     __size_ofi2_lcdInst 000C  
                         __end_of_main 3788                           __end_of_keys FB38  
                         __end_of_sort 44B0                             i2printf@ap 0020  
                           i2printf@cp 001E                     __size_ofi2_isdigit 001E  
                               ??_Test 00C6    __size_of_change_state_to_menu_start 002C  
                      ??_machineConfig 0080                                 ??_main 00DA  
                               ??_sort 00B8                          __activetblptr 000003  
           updateServoPosition@my_time 0086             updateServoPosition@time_us 0080  
                           i2strcpy@cp 0005                             i2strcpy@to 0001  
                    ?_I2C_Master_Start 0001                    EEPROM_write@address 00AB  
               __size_ofi2_EEPROM_read 0016                      ?_I2C_Master_Write 0081  
                               ?_getIR 0001                     ??_I2C_Master_Start 0081  
                               _ADCON0 000FC2                                 _ADCON1 000FC1  
                   ??_I2C_Master_Write 0083                                 _ADCON2 000FC0  
                               STR_100 FBEE                                 STR_101 FC10  
                               STR_102 FE9C                                 STR_110 FC43  
                               STR_103 FE7E                                 STR_111 FC76  
                               STR_112 FFB5                                 STR_104 FE6F  
                               STR_105 FCDC                                 STR_106 FB95  
                               _ADRESH 000FC4                                 STR_107 FBA7  
                               STR_108 FF48                                 _EEADRH 000FAA  
                               STR_109 FF8F                                 _ADRESL 000FC3  
                               _EEDATA 000FA8                                 _EECON2 000FA7  
                     ___awdiv@dividend 0086                        i2lcdNibble@data 0002  
                               ?_putch 0001                 __size_of_initSortTimer 00AA  
                      i2lcdNibble@temp 0001              i2_change_state_to_menu_12 414C  
            i2_change_state_to_menu_22 411C                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 _CVRCON 000FB5  
                               i2l1232 174A                                 i2l5300 3FDA  
                               i2l5302 3FE2                                 i2l6030 2206  
                               i2l6022 2184                                 i2l1679 3E48  
                               i2l5304 3FE6                                 i2l6200 26B2  
                               i2l6040 2274                                 i2l6032 221C  
                               i2l1689 4004                                 i2l6202 26B6  
                               i2l6050 22E2                                 i2l6042 228A  
                               i2l6034 2232                                 i2l5308 3FFA  
                               i2l6220 26E6                                 i2l6132 25B8  
                               i2l6124 259E                                 i2l6044 22A0  
                               i2l6036 2248                                 i2l6028 21F0  
                               i2l5246 4440                                 i2l5270 44E8  
                               i2l6214 26D8                                 i2l6206 26C0  
                               i2l6150 25F6                                 i2l6134 25C8  
                               i2l6142 25D6                                 i2l6046 22B6  
                               i2l6038 225E                                 i2l6054 22F8  
                               i2l5280 3E16                                 i2l6232 271C  
                               i2l6224 26F8                                 i2l6152 25FC  
                               i2l6160 260E                                 i2l6136 25CC  
                               i2l6048 22CC                                 i2l6056 2352  
                               i2l8000 29DA                                 i2l5282 3E1E  
                               i2l5602 16B2                                 i2l6154 2602  
                               i2l6146 25EA                                 i2l6242 2738  
                               i2l8002 29DC                                 i2l5532 3ACC  
                               i2l5292 3E3E                                 i2l5284 3E22  
                               i2l5612 16FE                                 i2l5604 16BC  
                               i2l6236 272E                                 i2l6228 270A  
                               i2l6180 266A                                 i2l6172 2652  
                               i2l6156 2608                                 i2l6148 25F0  
                               i2l5542 3AF6                                 i2l5630 1778  
                               i2l5614 1710                                 i2l5606 16C2  
                               i2l6190 2694                                 i2l5536 3ADC  
                               i2l5608 16D4                                 i2l5560 157A  
                               i2l8024 2A26                                 i2l5634 1790  
                               i2l5618 1714                                 i2l5570 159E  
                               i2l6186 2678                                 i2l5660 180C  
                               i2l5636 1794                                 i2l5564 158A  
                               i2l6196 269E                                 i2l5654 17E0  
                               i2l5566 1598                                 i2l5672 1838  
                               i2l5648 17C6                                 i2l5592 165A  
                               i2l5584 1632                                 i2l5576 15D0  
                               i2l5674 1840                                 i2l5682 1866  
                               i2l5666 1822                                 i2l5658 1804  
                               i2l5594 1664                                 i2l5690 18C2  
                               i2l7610 1F78                                 i2l7602 1F5C  
                               i2l5684 186C                                 i2l5596 1668  
                               i2l5678 1854                                 i2l5694 40F4  
                               i2l7630 1FC6                                 i2l7622 1FAA  
                               i2l7614 1F86                                 i2l7606 1F6A  
                               i2l5688 18BA                                 i2l5872 300C  
                               i2l5696 40FC                                 i2l7704 20EA  
                               i2l8290 212A                                 i2l7650 201C  
                               i2l7642 1FF8                                 i2l7634 1FDC  
                               i2l7626 1FB8                                 i2l7618 1F9C  
                               i2l7570 1EF8                                 i2l7562 1EDC  
                               i2l7900 24C6                                 i2l5884 3050  
                               i2l5876 301C                                 i2l8292 2146  
                               i2l7556 1EC8                                 i2l7670 206A  
                               i2l7662 2046                                 i2l7654 202A  
                               i2l7646 2006                                 i2l7638 1FEA  
                               i2l7590 1F30                                 i2l7582 1F14  
                               i2l7574 1F06                                 i2l7566 1EEA  
                               i2l7558 1ECE                                 i2l8296 2626  
                               i2l8288 2108                                 i2l8298 2642  
                               i2l7690 20B8                                 i2l7682 209C  
                               i2l7674 2078                                 i2l7666 205C  
                               i2l7658 2038                                 i2l7594 1F40  
                               i2l7586 1F22                                 i2l7694 20C6  
                               i2l7686 20AA                                 i2l7678 2086  
                               i2l7598 1F4E                                 i2l7880 239A  
                               i2l7890 2404                                 i2l7698 20DC  
                               i2l7962 2970                                 i2l7884 23AA  
                               i2l7964 2974                                 i2l7978 2990  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                              ??i2_putch 0003  
                               _TMR1IE 007CE8                                 _TMR1IF 007CF0  
                               _TMR2IE 007CE9                                 _TMR3IE 007D01  
                               _TMR3IF 007D09                                 _TMR0ON 007EAF  
                               _TMR1ON 007E68                                 _TMR3ON 007D88  
                               _SSPADD 000FC8                                 _TRISC3 007CA3  
                               _TRISC4 007CA4                                 _SSPBUF 000FC9  
                            ??_Loading 00B1                       __end_of_delay_ms 43D2  
                 delay_ms@milliseconds 0081                         __CFG_XINST$OFF 000000  
                     ID@sensor_outputs 0088                       __end_of_dispLogs 448E  
                          ?i2_printRTC 0001                       retrieveLog@byte1 000B  
                     retrieveLog@byte2 000C                       retrieveLog@byte3 000D  
                 __end_of_Distribution 2CF0                                 ___wmul 40B4  
                            ??___awdiv 008A                         __CFG_STVREN$ON 000000  
                            ??___awmod 0084                            logRun@byte1 00B2  
                          logRun@byte2 00B3                            logRun@byte3 00B4  
                               _getRTC 389C                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 44D2  
                               _initUI 4446                                 _readIR 3F3A  
                               _logRun 2CF0                                 clear_0 3E78  
                               clear_1 3E84                                 clear_2 3E90  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                           _PortTestA5 3CF4                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 1138  
                            ??_handler 004B                __size_of_initGlobalVars 0068  
                         ?_retrieveLog 0007                                 _strcpy 407E  
                            ??_readADC 0080                              ??_initLCD 0083  
                            ??_loadRTC 0095                              ??_readMAG 0082  
 __end_ofi2_change_state_to_menu_start 43FA  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 43D2                            ?_BothServos 0001  
                         ??_EEPROMTest 0080                              ??_isdigit 0080  
                   __size_of_PortTests 0084                      __end_ofi2___lwdiv 3E52  
                     __end_of_printRTC 1E98                           __mediumconst FB26  
                    __end_ofi2___lwmod 400E                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                 _log_count_pop_no_tab 00EE                  __end_of_algorithmTest 342C  
                    __end_ofi2_lcdInst 4592                      __end_ofi2_isdigit 44F0  
                           __accesstop 0080                __end_of__initialization 3E96  
                        ?_inputHandler 002A                          ___rparam_used 000001  
              printSortTimer@start_sec 003D                  __size_of_actuatorTest 0880  
                        i2_EEPROM_read 451E                           Loading@byte1 00B5  
                   i2___lwmod@dividend 0001                     __end_of_EEPROMTest 45D0  
                       __pcstackCOMRAM 0001                  __size_of_EEPROM_write 00E8  
                         __pidataBANK1 45A6                          __end_of_getIR 3EEE  
                          i2printRTC@i 0041                          _initSortTimer 35A6  
          __end_of_updateServoPosition 3A94                          __end_of_putch 456A  
                          i2printf@len 0022                            i2printf@val 0024  
                           __end_of_ID 2F4E                             __end_of_UI 08B8  
                   printSortTimer@hour 002D                              ?i2___wmul 0001  
                   __size_of_lcdNibble 0068                              ?i2_getRTC 0001  
                          i2putch@data 0003                  printSortTimer@curTime 002F  
   __end_of_change_state_to_menu_start 4354          ?i2_change_state_to_menu_start 0001  
           _change_state_to_menu_start 4328                  printSortTimer@cur_sec 003F  
                            ?i2_printf 000D                                ??_getIR 0086  
                            ?i2_strcpy 0001                       _count_pop_no_tab 0061  
                  __size_ofi2_printRTC 0236                                ??_putch 0082  
                         _actuatorTest 08B8                             __pbssBANK0 00DA  
                           __pbssBANK1 0100                           ?_stopSignals 0001  
                       ??_inputHandler 002C                           _EEPROM_write 326E  
                              UI@F3222 012D               ?_change_state_to_menu_11 0001  
             ?_change_state_to_menu_12 0001               ?_change_state_to_menu_22 0001  
             ?_change_state_to_menu_23 0001                         ?i2_EEPROM_read 0001  
             ?_change_state_to_logs_11 0001               ?_change_state_to_logs_12 0001  
             ?_change_state_to_logs_22 0001               ?_change_state_to_logs_23 0001  
             ?_change_state_to_logs_33 0001               ?_change_state_to_logs_34 0001  
                  __size_of_BothServos 02F0                      __end_of_PortTests 39A6  
                    printRTC@RTC_month 00BC                           ?i2_lcdNibble 0001  
                              UI@i_411 00CA                                UI@i_412 00CB  
                              UI@i_430 00CC                                UI@i_431 00CD  
                              UI@i_408 00C9                                UI@i_442 00D2  
                              UI@i_434 00CE                                UI@i_443 00D3  
                              UI@i_435 00CF                                UI@i_446 00D4  
                              UI@i_438 00D0                                UI@i_447 00D5  
                              UI@i_439 00D1                         ?_initSortTimer 0001  
                              ?___wmul 0080                                ?_getRTC 0001  
                              ?_initUI 0001                                ?_readIR 0001  
                              ?_logRun 0001               updateServoPosition@timer 0082  
                              UI@month 00D6                            ?_PortTestA5 0001  
                              ?_printf 008E                                _UI$2241 00C6  
                              ?_strcpy 0080                             ??i2___wmul 0005  
                           ??i2_getRTC 0004                              ?_delay_ms 0001  
                           ??i2_printf 0019                             ??i2_strcpy 0005  
                            ?_dispLogs 0012                                _SSPCON1 000FC6  
                              _SSPCON2 000FC5                                _SSPSTAT 000FC7  
                              i2_putch 457A                              ?_initTime 0080  
                      _f_loadingNewCan 00E2                        i2printRTC@month 003D  
                __size_of_Distribution 0140            __size_ofi2_I2C_Master_Start 0008  
                    __end_of_lcdNibble 3BD6                                _Loading 2A64  
          __size_ofi2_I2C_Master_Write 000A                       EEPROM_write@data 00AD  
                              __Hparam 0000                                __Lparam 0000  
   __size_ofi2_change_state_to_menu_12 0030     __size_ofi2_change_state_to_menu_22 0030  
                            ?_printRTC 0001                                ___awdiv 342C  
                              ___awmod 3650                             _initServos 3D50  
                              ___lldiv 34EA                        __size_of___wmul 0036  
                              ___lwdiv 39A6                                ___lwmod 3BD6  
                      __size_of_getRTC 0086                        printSortTimer@i 0049  
                            _CMCONbits 000FB4                      retrieveLog@logNum 0007  
                         logRun@byte11 00B6                        __size_of_initUI 0024  
                      __size_of_readIR 004C                                __pcinit 3E52  
                 i2EEPROM_read@address 0001                        __size_of_logRun 013C  
                         logRun@byte_i 00B5                                __ramtop 1000  
                       _initGlobalVars 3B06                                _lcdInst 456A  
                              _handler 0008                                __ptext0 36F2  
                              __ptext1 4508                                __ptext2 448E  
                              __ptext3 2A64                                __ptext4 35A6  
                              __ptext5 3B06                                __ptext6 3EA0  
                              __ptext7 43AA                                __ptext8 2E2C  
                              __ptext9 2BB0                        __size_of_printf 0438  
                              _readADC 4354                        __size_of_strcpy 0036  
                              _initLCD 3F86                                _cur_can 0065  
                              _loadRTC 3788                                _readMAG 3EEE  
                              _dpowers FB38                     actuatorTest@i_1601 00B8  
                   actuatorTest@i_1602 00B9                     actuatorTest@i_1611 00BE  
                   actuatorTest@i_1612 00BF                     actuatorTest@i_1605 00BA  
                   actuatorTest@i_1606 00BB                     actuatorTest@i_1615 00C0  
                   actuatorTest@i_1616 00C1                     actuatorTest@i_1608 00BC  
                   actuatorTest@i_1609 00BD                     actuatorTest@i_1618 00C2  
                   actuatorTest@i_1619 00C3                     actuatorTest@i_1590 00B1  
                   actuatorTest@i_1592 00B2                     actuatorTest@i_1593 00B3  
                   actuatorTest@i_1586 00AE                     actuatorTest@i_1595 00B4  
                   actuatorTest@i_1587 00AF                     actuatorTest@i_1579 00AD  
                   actuatorTest@i_1596 00B5                     actuatorTest@i_1589 00B0  
                   actuatorTest@i_1598 00B6                     actuatorTest@i_1599 00B7  
                              _isdigit 4380                          ?_ToggleTestA5 0001  
                     ___awmod@dividend 0080                                getRTC@i 0083  
                 __size_of_retrieveLog 011A                             ??_delay_ms 0080  
             __size_of_I2C_Master_Init 0060               __size_of_I2C_Master_Read 002E  
                        _log_startTime 0100               __size_of_I2C_Master_Wait 0014  
             __size_of_I2C_Master_Stop 0008                             ??_dispLogs 0014  
                         _Distribution 2BB0                         __pintcode_body 28F6  
                 end_of_initialization 3E96                                logRun@i 00B7  
                           ??_initTime 0086                        ??i2_EEPROM_read 0003  
                 SolenoidTestA5@i_1632 00AF                   SolenoidTestA5@i_1634 00B0  
                              int_func 28F6                    i2___wmul@multiplier 0001  
                        ??_EEPROM_read 0082                    __size_of_PortTestA5 005C  
            __size_of_I2C_Master_Start 0008              __size_of_I2C_Master_Write 000A  
                      ___lldiv@divisor 0084                        ___lldiv@counter 008C  
                      ??_initSortTimer 0085                                printf@c 00A8  
                         ??i2_printRTC 002A                                printf@f 008E  
                           ??_printRTC 00AB                       I2C_Master_Init@c 008D  
                     I2C_Master_Read@a 0081                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc2 000FDE                 __end_of_initGlobalVars 3B6E  
                           _sensorTest 2766                __size_of_SolenoidTestA5 00FE  
                           _servoTimes 011C                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 2766  
                         ??_BothServos 00AB                         ??_ToggleTestA5 00AB  
                __end_of_machineConfig 3CF4                             _updateMenu 1E98  
                    i2_I2C_Master_Read 4420                              _IR_signal 00DA  
                    i2_I2C_Master_Wait 4548                      i2_I2C_Master_Stop 45BE  
                    i2___lwdiv@divisor 0008                        _log_count_total 00F2  
                            i2___lwdiv 3E00                              i2___lwmod 3FCC  
                    i2___lwdiv@counter 000C                     ?i2_I2C_Master_Read 0001  
                   ?i2_I2C_Master_Wait 0001                     __end_ofi2_printRTC 238E  
                   ?i2_I2C_Master_Stop 0001                          actuatorTest@i 00C4  
         ??_change_state_to_menu_start 00C4                              i2_lcdInst 4586  
                           _total_time 00F8                            printf@width 00A9  
                 __size_of_stopSignals 0016                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 44D2                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002                              i2getRTC@i 0004  
                   __end_of_BothServos 1BCE                    __end_of_EEPROM_read 4508  
                          ?_initServos 0001                        ?_initGlobalVars 0001  
                       __end_of___wmul 40EA                         __end_of_getRTC 3922  
                 __size_ofi2_lcdNibble 0056                          EEPROM_write@i 00AF  
                        i2lcdInst@data 0003                         __end_of_initUI 446A  
                       __end_of_readIR 3F86                         __end_of_logRun 2E2C  
                     i2___wmul@product 0005                         __end_of_printf 1570  
                         i2printf@flag 0026                         __end_of_strcpy 40B4  
            __end_ofi2_I2C_Master_Read 4446              __end_ofi2_I2C_Master_Wait 455A  
                         i2printf@prec 001D                    start_initialization 3E52  
            __end_ofi2_I2C_Master_Stop 45C6                             readMAG@res 0084  
                    __size_ofi2___wmul 0026                        _count_can_w_lab 005F  
          ?_change_state_to_menu_start 0001                      __size_ofi2_getRTC 0072  
                            i2printf@c 0027                              i2printf@f 000D  
                   EEPROM_write@i_1319 00B0                  i2I2C_Master_Read@temp 0003  
                           ?i2___lwdiv 0006                             ?i2___lwmod 0001  
                    __size_ofi2_printf 036E                      __size_ofi2_strcpy 0032  
                    ??_I2C_Master_Init 0091                      ??_I2C_Master_Read 0081  
                    ??_I2C_Master_Wait 0080                             ?i2_lcdInst 0001  
                    ??_I2C_Master_Stop 0081                       __CFG_OSC$INTIO67 000000  
                           ?i2_isdigit 0001                             initTime@DD 0083  
                           initTime@MM 0084                             initTime@YY 0085  
                      retrieveLog@addr 0010                             logRun@addr 00B9  
                             ??___wmul 0084                               ??_getRTC 0083  
               __size_of_algorithmTest 00D6                              _PortTests 3922  
                          ?_sensorTest 0001                            __pdataBANK1 012D  
                     __CFG_LPT1OSC$OFF 000000                               ??_initUI 00C4  
                             ??_readIR 0082                               ??_logRun 00B1  
                         ??_PortTestA5 00AB                 printSortTimer@timeDiff 0047  
     __size_of_change_state_to_menu_11 0030       __size_of_change_state_to_menu_12 0038  
     __size_of_change_state_to_menu_22 0038       __size_of_change_state_to_menu_23 0030  
                             ??_printf 009A       __size_of_change_state_to_logs_11 0030  
     __size_of_change_state_to_logs_12 0030       __size_of_change_state_to_logs_22 0030  
     __size_of_change_state_to_logs_23 002E       __size_of_change_state_to_logs_33 0030  
     __size_of_change_state_to_logs_34 0030                               ??_strcpy 0084  
                  _printSortTimer$2361 0045                            __pbssCOMRAM 005B  
         __size_of_updateServoPosition 0076                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                __size_of_printSortTimer 01F2  
                    i2___lwmod@divisor 0003                      i2___lwmod@counter 0005  
                         _isdigit$1888 0081                      __size_of_delay_ms 0028  
                       initSortTimer@i 0088                      printSortTimer@min 0041  
                    printSortTimer@sec 0043                    __size_of_initServos 005A  
                    __size_of_dispLogs 0024                       printRTC@INT_time 00AE  
                         i2strcpy@from 0003                               ?i2_putch 0001  
                      _count_pop_w_tab 0063                            _EEPROM_read 44F0  
                   __end_of_PortTestA5 3D50                       _I2C_Master_Start 45B6  
                            _f_lastCan 0073                               ?_Loading 0001  
                  i2I2C_Master_Write@d 0002                       _I2C_Master_Write 4592  
                    __size_of_initTime 0022                   __end_of_ToggleTestA5 389C  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                          __pmediumconst FB26  
                            _lcdNibble 3B6E                  __size_of_inputHandler 01E6  
                             ?___awdiv 0086                               ?___awmod 0080  
                             ?___lldiv 0080                               ?___lwdiv 0080  
                           ?_PortTests 0001                               ?___lwmod 0087  
                       _SolenoidTestA5 3170                      __size_of_printRTC 02CA  
                             ?_lcdInst 0001                               ?_handler 0001  
                             ?_readADC 0001                               ?_initLCD 0001  
                             ?_loadRTC 0001                               ?_readMAG 0001  
                             ?_isdigit 0001             __size_ofi2_I2C_Master_Read 0026  
           __size_ofi2_I2C_Master_Wait 0012             __size_ofi2_I2C_Master_Stop 0008  
                            _firstboot 0075                              _cur_state 00DE  
                     ___lwdiv@quotient 0084                         __size_of_getIR 004E  
                        _algorithmTest 3356                            ??i2___lwdiv 000A  
                          ??i2___lwmod 0005                         __size_of_putch 0010  
                          __size_of_ID 0122                            __size_of_UI 08A6  
                       ToggleTestA5@on 00AC                    __size_of_sensorTest 0190  
           __end_ofi2_I2C_Master_Start 45CE             __end_ofi2_I2C_Master_Write 45A6  
                          ??i2_lcdInst 0003                         ___wmul@product 0084  
                             _LATAbits 000F89                               _LATCbits 000F8B  
                             _LATDbits 000F8C                               _LATEbits 000F8D  
                         _inputHandler 2580                            ??i2_isdigit 0001  
                             i2u411_40 1696                               i2u411_47 168C  
                             i2u415_40 16F6                               i2u415_47 16EC  
                             _PIR2bits 000FA1                               i2u358_40 443E  
                             i2u455_40 21E6                               i2u673_40 24C0  
                             i2u792_47 25BE                               i2u793_47 3DC2  
                             i2u794_47 3DCC                               i2u795_47 3DEE  
                             i2u796_47 3DF8                    __size_of_updateMenu 02C0  
                       _log_completion 00E8                       __CFG_WDTPS$32768 000000  
               __end_of_SolenoidTestA5 326E                             ?_lcdNibble 0001  
                            _was_low_1 0079                              _was_low_3 007B  
                        ??_retrieveLog 0009                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 0080                              _startTime 010E  
                             i2___wmul 43FA                          lcdNibble@data 0081  
                             i2_getRTC 3A94                             printf@flag 00A7  
                        lcdNibble@temp 0080                             printf@prec 009E  
                             Loading@i 00B6                               i2_printf 1570  
                             i2_strcpy 40EA                         ?_algorithmTest 0001  
                  I2C_Master_Read@temp 0082                              copy_data0 3E66  
                            readIR@res 0084                       __size_ofi2_putch 000C  
                           _EECON1bits 000FA6                  __end_ofi2_EEPROM_read 4534  
                          _count_total 00FE                       ??_initGlobalVars 0080  
                      SolenoidTestA5@i 00AD                               __Hrparam 0000  
                     __size_of_Loading 014C                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                              logRun@num 00B1  
                      ?_SolenoidTestA5 0001                  __end_of_initSortTimer 3650  
                         ??_initServos 0088                            ??_PortTests 0080  
                     __size_of___awdiv 00BE                       __size_of___awmod 00A2  
              _change_state_to_menu_11 41AC             ?i2_change_state_to_menu_12 0001  
              _change_state_to_menu_12 4046             ?i2_change_state_to_menu_22 0001  
              _change_state_to_menu_22 400E                _change_state_to_menu_23 417C  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 00BC  
                     __size_of___lwdiv 0078                _change_state_to_logs_11 429C  
              _change_state_to_logs_12 426C                _change_state_to_logs_22 423C  
              _change_state_to_logs_23 42FA                _change_state_to_logs_33 420C  
              _change_state_to_logs_34 41DC                       __size_of___lwmod 0062  
                       readADC@channel 0081                     i2I2C_Master_Read@a 0002  
                     __size_of_lcdInst 0010                       __size_of_handler 2A5C  
                           _EEPROMTest 45CE                        _I2C_Master_Init 3C38  
                     __size_of_readADC 002C                        _I2C_Master_Read 42CC  
                     __size_of_initLCD 0046                           _f_ID_receive 006B  
                     __size_of_loadRTC 008C                       __size_of_readMAG 004C  
                      _I2C_Master_Wait 4534                        _I2C_Master_Stop 45AE  
                     __size_of_isdigit 002A                               _delay_ms 43AA  
                       _printSortTimer 238E                        ___lwdiv@divisor 0082  
                      ___lwdiv@counter 0086                    __end_of_retrieveLog 3068  
                             __ptext10 3C98                               __ptext11 2CF0  
                             __ptext20 3F86                               __ptext12 326E  
                             __ptext21 0012                               __ptext13 44F0  
                             __ptext30 400E                               __ptext22 1BCE  
                             __ptext14 4446                               __ptext31 4046  
                             __ptext23 407E                               __ptext15 3788  
                             __ptext40 08B8                               __ptext32 3650  
                             __ptext24 389C                               __ptext16 3C38  
                             __ptext41 3814                               __ptext33 342C  
                             __ptext25 4592                               __ptext17 34EA  
                             __ptext50 40B4                               __ptext42 3170  
                             __ptext34 3068                               __ptext26 45AE  
                             __ptext18 4328                               __ptext51 3BD6  
                             __ptext43 3922                               __ptext35 2766  
                             __ptext27 45B6                               __ptext19 44B0  
                             __ptext60 2158                               __ptext52 39A6  
                             __ptext44 3CF4                               __ptext36 3EEE  
                             __ptext28 42CC                               __ptext61 40EA  
                             __ptext53 456A                               __ptext45 45CE  
                             __ptext37 3F3A                               __ptext29 4534  
                             __ptext70 423C                               __ptext62 2580  
                             __ptext54 3B6E                               __ptext46 18DE  
                             __ptext38 4354                               __ptext71 426C  
                             __ptext63 411C                               __ptext55 3D50  
                             __ptext47 1138                               __ptext39 3356  
                             __ptext80 43FA                               __ptext72 429C  
                             __ptext64 414C                               __ptext56 3A1E  
                             __ptext48 455A                               __ptext81 3FCC  
                             __ptext73 446A                               __ptext65 417C  
                             __ptext49 4380                               __ptext90 4548  
                             __ptext82 3E00                               __ptext74 2F4E  
                             __ptext66 41AC                               __ptext58 1E98  
                             __ptext83 4586                               __ptext75 451E  
                             __ptext67 41DC                               __ptext59 43D2  
                             __ptext84 3DAA                               __ptext76 238E  
                             __ptext68 420C                               __ptext85 3A94  
                             __ptext77 1570                               __ptext69 42FA  
                             __ptext86 459C                               __ptext78 457A  
                             __ptext87 45BE                               __ptext79 44D2  
                             __ptext88 45C6                               __ptext89 4420  
                             _dispLogs 446A                          ?_actuatorTest 0001  
                        ??_stopSignals 0080                  __size_of_ToggleTestA5 0088  
                           strcpy@from 0082                         i2_isdigit$1888 0002  
                   __end_of_initServos 3DAA                          __size_of_Test 0108  
                        ?_EEPROM_write 00AB                               _initTime 44B0  
                        __size_of_main 0096                          __size_of_sort 0022  
       ??i2_change_state_to_menu_start 0043                               _logstate 00F6  
                  _updateServoPosition 3A1E                 __size_of_machineConfig 005C  
                        ??i2_lcdNibble 0001                               _printRTC 1BCE  
                          ??_lcdNibble 0080                              printRTC@i 00C2  
                             int$flags 007E                           ??_sensorTest 00AB  
                       _log_total_time 00F4                     _f_can_coming_to_ID 006D  
                            printf@len 00A3                              printf@val 00A5  
    __end_ofi2_change_state_to_menu_12 417C      __end_ofi2_change_state_to_menu_22 414C  
                             loadRTC@i 0096                 __end_of_printSortTimer 2580  
                            putch@data 0082               __end_of_I2C_Master_Start 45BE  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 459C  
                           _INTCONbits 000FF2                   ?_updateServoPosition 0080  
                         _ToggleTestA5 3814                           ??_updateMenu 0043  
                      ??_algorithmTest 00AB                             _MAG_signal 00DC  
                             isdigit@c 0082                         ??_actuatorTest 00AB  
                             intlevel2 0000                         ??_EEPROM_write 00AE  
                   __end_of_sensorTest 28F6                       ___lwmod@dividend 0087  
                     ___lldiv@dividend 0080                           ?_EEPROM_read 0080  
                  __end_of_stopSignals 451E              ??_change_state_to_menu_11 002A  
            ??_change_state_to_menu_12 00AB              ??_change_state_to_menu_22 00AB  
            ??_change_state_to_menu_23 002A              ??_change_state_to_logs_11 002A  
            ??_change_state_to_logs_12 002A              ??_change_state_to_logs_22 002A  
            ??_change_state_to_logs_23 002A              ??_change_state_to_logs_33 002A  
            ??_change_state_to_logs_34 002A                               printf@ap 00A1  
                             printf@cp 009F                     __end_of_updateMenu 2158  
              __end_of_I2C_Master_Init 3C98                __end_of_I2C_Master_Read 42FA  
              __end_of_I2C_Master_Wait 4548                __end_of_I2C_Master_Stop 45B6  
                        printRTC@F3213 0131                            lcdInst@data 0082  
                         retrieveLog@i 000E                           sensorTest@on 00AD  
                          _retrieveLog 2F4E                    __end_ofi2_lcdNibble 3E00  
                ??_updateServoPosition 0084                        ?_printSortTimer 0001  
                     ___lldiv@quotient 0088                      I2C_Master_Write@d 0081  
                          ?_EEPROMTest 0001                        ___lwmod@divisor 0089  
                    _f_can_distributed 0071                               strcpy@cp 0084  
                             strcpy@to 0080                          _machineConfig 3C98  
                      ___lwmod@counter 008B                          printRTC@month 00BE  
                        ?_Distribution 0001                          _machine_state 00FC  
                        dispLogs@myLog 0012                     i2printRTC@INT_time 002D  
