

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Wed Mar 29 06:43:50 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    74                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   109                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   110                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   111  0000                     
   112                           ; Version 1.40
   113                           ; Generated 01/12/2016 GMT
   114                           ; 
   115                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   116                           ; All rights reserved.
   117                           ; 
   118                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   119                           ; 
   120                           ; Redistribution and use in source and binary forms, with or without modification, are
   121                           ; permitted provided that the following conditions are met:
   122                           ; 
   123                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   124                           ;        conditions and the following disclaimer.
   125                           ; 
   126                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   127                           ;        of conditions and the following disclaimer in the documentation and/or other
   128                           ;        materials provided with the distribution.
   129                           ; 
   130                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   131                           ;        software without specific prior written permission.
   132                           ; 
   133                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   134                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   135                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   136                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   137                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   138                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   139                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   140                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   141                           ; 
   142                           ; 
   143                           ; Code-generator required, PIC18F4620 Definitions
   144                           ; 
   145                           ; SFR Addresses
   146  0000                     
   147                           	psect	idataBANK1
   148  004F18                     __pidataBANK1:
   149                           	opt stack 0
   150                           
   151                           ;initializer for UI@F3228
   152  004F18  4D                 	db	77
   153  004F19  4D                 	db	77
   154  004F1A  4D                 	db	77
   155  004F1B  00                 	db	0
   156                           
   157                           ;initializer for printRTC@F3219
   158  004F1C  4D                 	db	77
   159  004F1D  4D                 	db	77
   160  004F1E  4D                 	db	77
   161  004F1F  00                 	db	0
   162                           
   163                           	psect	mediumconst
   164  00FAEE                     __pmediumconst:
   165                           	opt stack 0
   166  00FAEE  00                 	db	0
   167  00FAEF                     _keys:
   168                           	opt stack 0
   169  00FAEF  31                 	db	49
   170  00FAF0  32                 	db	50
   171  00FAF1  33                 	db	51
   172  00FAF2  41                 	db	65
   173  00FAF3  34                 	db	52
   174  00FAF4  35                 	db	53
   175  00FAF5  36                 	db	54
   176  00FAF6  42                 	db	66
   177  00FAF7  37                 	db	55
   178  00FAF8  38                 	db	56
   179  00FAF9  39                 	db	57
   180  00FAFA  43                 	db	67
   181  00FAFB  2A                 	db	42
   182  00FAFC  30                 	db	48
   183  00FAFD  23                 	db	35
   184  00FAFE  44                 	db	68
   185  00FAFF  00                 	db	0
   186  00FB00                     __end_of_keys:
   187                           	opt stack 0
   188  00FB00                     _dpowers:
   189                           	opt stack 0
   190  00FB00  0001               	dw	1
   191  00FB02  000A               	dw	10
   192  00FB04  0064               	dw	100
   193  00FB06  03E8               	dw	1000
   194  00FB08  2710               	dw	10000
   195  00FB0A                     __end_of_dpowers:
   196                           	opt stack 0
   197  0000                     _ADCON0	set	4034
   198  0000                     _ADCON0bits	set	4034
   199  0000                     _ADCON1	set	4033
   200  0000                     _ADCON2	set	4032
   201  0000                     _ADRESH	set	4036
   202  0000                     _ADRESL	set	4035
   203  0000                     _CMCONbits	set	4020
   204  0000                     _CVRCON	set	4021
   205  0000                     _EEADR	set	4009
   206  0000                     _EEADRH	set	4010
   207  0000                     _EECON1bits	set	4006
   208  0000                     _EECON2	set	4007
   209  0000                     _EEDATA	set	4008
   210  0000                     _INTCONbits	set	4082
   211  0000                     _LATA	set	3977
   212  0000                     _LATAbits	set	3977
   213  0000                     _LATB	set	3978
   214  0000                     _LATC	set	3979
   215  0000                     _LATCbits	set	3979
   216  0000                     _LATD	set	3980
   217  0000                     _LATDbits	set	3980
   218  0000                     _LATE	set	3981
   219  0000                     _LATEbits	set	3981
   220  0000                     _OSCCON	set	4051
   221  0000                     _OSCTUNEbits	set	3995
   222  0000                     _PIR2bits	set	4001
   223  0000                     _PORTAbits	set	3968
   224  0000                     _PORTB	set	3969
   225  0000                     _PORTBbits	set	3969
   226  0000                     _SSPADD	set	4040
   227  0000                     _SSPBUF	set	4041
   228  0000                     _SSPCON1	set	4038
   229  0000                     _SSPCON2	set	4037
   230  0000                     _SSPSTAT	set	4039
   231  0000                     _T0CON	set	4053
   232  0000                     _T1CON	set	4045
   233  0000                     _T3CON	set	4017
   234  0000                     _TMR0H	set	4055
   235  0000                     _TMR0L	set	4054
   236  0000                     _TMR1H	set	4047
   237  0000                     _TMR1L	set	4046
   238  0000                     _TMR3H	set	4019
   239  0000                     _TMR3L	set	4018
   240  0000                     _TRISA	set	3986
   241  0000                     _TRISB	set	3987
   242  0000                     _TRISC	set	3988
   243  0000                     _TRISD	set	3989
   244  0000                     _TRISE	set	3990
   245  0000                     _ACKDT	set	32301
   246  0000                     _ACKEN	set	32300
   247  0000                     _ADIE	set	31982
   248  0000                     _INT1IE	set	32643
   249  0000                     _INT1IF	set	32640
   250  0000                     _PEIE	set	32662
   251  0000                     _PEN	set	32298
   252  0000                     _RCEN	set	32299
   253  0000                     _RSEN	set	32297
   254  0000                     _SEN	set	32296
   255  0000                     _TMR0IE	set	32661
   256  0000                     _TMR0IF	set	32658
   257  0000                     _TMR0ON	set	32431
   258  0000                     _TMR1IE	set	31976
   259  0000                     _TMR1IF	set	31984
   260  0000                     _TMR1ON	set	32360
   261  0000                     _TMR2IE	set	31977
   262  0000                     _TMR3IE	set	32001
   263  0000                     _TMR3IF	set	32009
   264  0000                     _TMR3ON	set	32136
   265  0000                     _TRISC3	set	31907
   266  0000                     _TRISC4	set	31908
   267  0000                     _nRBPU	set	32655
   268  00FB0A                     STR_21:
   269  00FB0A  25                 	db	37
   270  00FB0B  30                 	db	48	;'0'
   271  00FB0C  32                 	db	50	;'2'
   272  00FB0D  64                 	db	100	;'d'
   273  00FB0E  25                 	db	37
   274  00FB0F  73                 	db	115	;'s'
   275  00FB10  20                 	db	32
   276  00FB11  7C                 	db	124
   277  00FB12  20                 	db	32
   278  00FB13  25                 	db	37
   279  00FB14  30                 	db	48	;'0'
   280  00FB15  32                 	db	50	;'2'
   281  00FB16  64                 	db	100	;'d'
   282  00FB17  3A                 	db	58	;':'
   283  00FB18  25                 	db	37
   284  00FB19  30                 	db	48	;'0'
   285  00FB1A  32                 	db	50	;'2'
   286  00FB1B  64                 	db	100	;'d'
   287  00FB1C  3A                 	db	58	;':'
   288  00FB1D  25                 	db	37
   289  00FB1E  30                 	db	48	;'0'
   290  00FB1F  32                 	db	50	;'2'
   291  00FB20  64                 	db	100	;'d'
   292  00FB21  00                 	db	0
   293  00FB22                     STR_66:
   294  00FB22  28                 	db	40
   295  00FB23  64                 	db	100	;'d'
   296  00FB24  61                 	db	97	;'a'
   297  00FB25  74                 	db	116	;'t'
   298  00FB26  61                 	db	97	;'a'
   299  00FB27  3A                 	db	58	;':'
   300  00FB28  20                 	db	32
   301  00FB29  25                 	db	37
   302  00FB2A  75                 	db	117	;'u'
   303  00FB2B  2C                 	db	44
   304  00FB2C  20                 	db	32
   305  00FB2D  61                 	db	97	;'a'
   306  00FB2E  64                 	db	100	;'d'
   307  00FB2F  64                 	db	100	;'d'
   308  00FB30  72                 	db	114	;'r'
   309  00FB31  3A                 	db	58	;':'
   310  00FB32  20                 	db	32
   311  00FB33  25                 	db	37
   312  00FB34  75                 	db	117	;'u'
   313  00FB35  29                 	db	41
   314  00FB36  00                 	db	0
   315  00FB37                     STR_111:
   316  00FB37  44                 	db	68	;'D'
   317  00FB38  20                 	db	32
   318  00FB39  57                 	db	87	;'W'
   319  00FB3A  49                 	db	73	;'I'
   320  00FB3B  4C                 	db	76	;'L'
   321  00FB3C  4C                 	db	76	;'L'
   322  00FB3D  20                 	db	32
   323  00FB3E  52                 	db	82	;'R'
   324  00FB3F  45                 	db	69	;'E'
   325  00FB40  54                 	db	84	;'T'
   326  00FB41  55                 	db	85	;'U'
   327  00FB42  52                 	db	82	;'R'
   328  00FB43  4E                 	db	78	;'N'
   329  00FB44  20                 	db	32
   330  00FB45  20                 	db	32
   331  00FB46  20                 	db	32
   332  00FB47  20                 	db	32
   333  00FB48  00                 	db	0
   334  00FB49                     STR_112:
   335  00FB49  4F                 	db	79	;'O'
   336  00FB4A  54                 	db	84	;'T'
   337  00FB4B  48                 	db	72	;'H'
   338  00FB4C  45                 	db	69	;'E'
   339  00FB4D  52                 	db	82	;'R'
   340  00FB4E  20                 	db	32
   341  00FB4F  53                 	db	83	;'S'
   342  00FB50  45                 	db	69	;'E'
   343  00FB51  54                 	db	84	;'T'
   344  00FB52  53                 	db	83	;'S'
   345  00FB53  20                 	db	32
   346  00FB54  52                 	db	82	;'R'
   347  00FB55  41                 	db	65	;'A'
   348  00FB56  35                 	db	53	;'5'
   349  00FB57  20                 	db	32
   350  00FB58  20                 	db	32
   351  00FB59  20                 	db	32
   352  00FB5A  00                 	db	0
   353  00FB5B                     STR_120:
   354  00FB5B  53                 	db	83	;'S'
   355  00FB5C  3A                 	db	58	;':'
   356  00FB5D  20                 	db	32
   357  00FB5E  44                 	db	68	;'D'
   358  00FB5F  20                 	db	32
   359  00FB60  57                 	db	87	;'W'
   360  00FB61  49                 	db	73	;'I'
   361  00FB62  4C                 	db	76	;'L'
   362  00FB63  4C                 	db	76	;'L'
   363  00FB64  20                 	db	32
   364  00FB65  52                 	db	82	;'R'
   365  00FB66  45                 	db	69	;'E'
   366  00FB67  54                 	db	84	;'T'
   367  00FB68  55                 	db	85	;'U'
   368  00FB69  52                 	db	82	;'R'
   369  00FB6A  4E                 	db	78	;'N'
   370  00FB6B  20                 	db	32
   371  00FB6C  00                 	db	0
   372  00FB6D                     STR_123:
   373  00FB6D  4F                 	db	79	;'O'
   374  00FB6E  54                 	db	84	;'T'
   375  00FB6F  48                 	db	72	;'H'
   376  00FB70  45                 	db	69	;'E'
   377  00FB71  52                 	db	82	;'R'
   378  00FB72  3A                 	db	58	;':'
   379  00FB73  20                 	db	32
   380  00FB74  43                 	db	67	;'C'
   381  00FB75  41                 	db	65	;'A'
   382  00FB76  4D                 	db	77	;'M'
   383  00FB77  20                 	db	32
   384  00FB78  54                 	db	84	;'T'
   385  00FB79  4F                 	db	79	;'O'
   386  00FB7A  47                 	db	71	;'G'
   387  00FB7B  47                 	db	71	;'G'
   388  00FB7C  4C                 	db	76	;'L'
   389  00FB7D  45                 	db	69	;'E'
   390  00FB7E  00                 	db	0
   391  00FB7F                     STR_122:
   392  00FB7F  44                 	db	68	;'D'
   393  00FB80  3A                 	db	58	;':'
   394  00FB81  20                 	db	32
   395  00FB82  52                 	db	82	;'R'
   396  00FB83  45                 	db	69	;'E'
   397  00FB84  54                 	db	84	;'T'
   398  00FB85  7C                 	db	124
   399  00FB86  32                 	db	50	;'2'
   400  00FB87  3A                 	db	58	;':'
   401  00FB88  20                 	db	32
   402  00FB89  43                 	db	67	;'C'
   403  00FB8A  4F                 	db	79	;'O'
   404  00FB8B  4E                 	db	78	;'N'
   405  00FB8C  44                 	db	68	;'D'
   406  00FB8D  20                 	db	32
   407  00FB8E  25                 	db	37
   408  00FB8F  64                 	db	100	;'d'
   409  00FB90  00                 	db	0
   410  00FB91                     STR_3:
   411  00FB91  2D                 	db	45
   412  00FB92  2D                 	db	45
   413  00FB93  20                 	db	32
   414  00FB94  4C                 	db	76	;'L'
   415  00FB95  4F                 	db	79	;'O'
   416  00FB96  47                 	db	71	;'G'
   417  00FB97  20                 	db	32
   418  00FB98  25                 	db	37
   419  00FB99  32                 	db	50	;'2'
   420  00FB9A  64                 	db	100	;'d'
   421  00FB9B  20                 	db	32
   422  00FB9C  48                 	db	72	;'H'
   423  00FB9D  45                 	db	69	;'E'
   424  00FB9E  52                 	db	82	;'R'
   425  00FB9F  45                 	db	69	;'E'
   426  00FBA0  2D                 	db	45
   427  00FBA1  2D                 	db	45
   428  00FBA2  00                 	db	0
   429  00FBA3                     STR_1:
   430  00FBA3  52                 	db	82	;'R'
   431  00FBA4  45                 	db	69	;'E'
   432  00FBA5  53                 	db	83	;'S'
   433  00FBA6  55                 	db	85	;'U'
   434  00FBA7  4C                 	db	76	;'L'
   435  00FBA8  54                 	db	84	;'T'
   436  00FBA9  53                 	db	83	;'S'
   437  00FBAA  20                 	db	32
   438  00FBAB  49                 	db	73	;'I'
   439  00FBAC  4E                 	db	78	;'N'
   440  00FBAD  20                 	db	32
   441  00FBAE  4C                 	db	76	;'L'
   442  00FBAF  4F                 	db	79	;'O'
   443  00FBB0  47                 	db	71	;'G'
   444  00FBB1  20                 	db	32
   445  00FBB2  25                 	db	37
   446  00FBB3  64                 	db	100	;'d'
   447  00FBB4  00                 	db	0
   448  00FBB5                     STR_102:
   449  00FBB5  4D                 	db	77	;'M'
   450  00FBB6  49                 	db	73	;'I'
   451  00FBB7  44                 	db	68	;'D'
   452  00FBB8  20                 	db	32
   453  00FBB9  2D                 	db	45
   454  00FBBA  2D                 	db	45
   455  00FBBB  20                 	db	32
   456  00FBBC  32                 	db	50	;'2'
   457  00FBBD  73                 	db	115	;'s'
   458  00FBBE  20                 	db	32
   459  00FBBF  20                 	db	32
   460  00FBC0  20                 	db	32
   461  00FBC1  20                 	db	32
   462  00FBC2  20                 	db	32
   463  00FBC3  20                 	db	32
   464  00FBC4  20                 	db	32
   465  00FBC5  00                 	db	0
   466  00FBC6                     STR_105:
   467  00FBC6  44                 	db	68	;'D'
   468  00FBC7  52                 	db	82	;'R'
   469  00FBC8  4F                 	db	79	;'O'
   470  00FBC9  50                 	db	80	;'P'
   471  00FBCA  20                 	db	32
   472  00FBCB  2D                 	db	45
   473  00FBCC  2D                 	db	45
   474  00FBCD  20                 	db	32
   475  00FBCE  32                 	db	50	;'2'
   476  00FBCF  73                 	db	115	;'s'
   477  00FBD0  20                 	db	32
   478  00FBD1  20                 	db	32
   479  00FBD2  20                 	db	32
   480  00FBD3  20                 	db	32
   481  00FBD4  20                 	db	32
   482  00FBD5  20                 	db	32
   483  00FBD6  00                 	db	0
   484  00FBD7                     STR_99:
   485  00FBD7  4C                 	db	76	;'L'
   486  00FBD8  45                 	db	69	;'E'
   487  00FBD9  46                 	db	70	;'F'
   488  00FBDA  54                 	db	84	;'T'
   489  00FBDB  20                 	db	32
   490  00FBDC  2D                 	db	45
   491  00FBDD  2D                 	db	45
   492  00FBDE  20                 	db	32
   493  00FBDF  32                 	db	50	;'2'
   494  00FBE0  73                 	db	115	;'s'
   495  00FBE1  20                 	db	32
   496  00FBE2  20                 	db	32
   497  00FBE3  20                 	db	32
   498  00FBE4  20                 	db	32
   499  00FBE5  20                 	db	32
   500  00FBE6  20                 	db	32
   501  00FBE7  00                 	db	0
   502  00FBE8                     STR_104:
   503  00FBE8  4C                 	db	76	;'L'
   504  00FBE9  45                 	db	69	;'E'
   505  00FBEA  56                 	db	86	;'V'
   506  00FBEB  45                 	db	69	;'E'
   507  00FBEC  4C                 	db	76	;'L'
   508  00FBED  20                 	db	32
   509  00FBEE  2D                 	db	45
   510  00FBEF  2D                 	db	45
   511  00FBF0  20                 	db	32
   512  00FBF1  32                 	db	50	;'2'
   513  00FBF2  73                 	db	115	;'s'
   514  00FBF3  20                 	db	32
   515  00FBF4  20                 	db	32
   516  00FBF5  20                 	db	32
   517  00FBF6  20                 	db	32
   518  00FBF7  20                 	db	32
   519  00FBF8  00                 	db	0
   520  00FBF9                     STR_98:
   521  00FBF9  52                 	db	82	;'R'
   522  00FBFA  49                 	db	73	;'I'
   523  00FBFB  47                 	db	71	;'G'
   524  00FBFC  48                 	db	72	;'H'
   525  00FBFD  54                 	db	84	;'T'
   526  00FBFE  20                 	db	32
   527  00FBFF  2D                 	db	45
   528  00FC00  2D                 	db	45
   529  00FC01  20                 	db	32
   530  00FC02  32                 	db	50	;'2'
   531  00FC03  73                 	db	115	;'s'
   532  00FC04  20                 	db	32
   533  00FC05  20                 	db	32
   534  00FC06  20                 	db	32
   535  00FC07  20                 	db	32
   536  00FC08  20                 	db	32
   537  00FC09  00                 	db	0
   538  00FC0A                     STR_97:
   539  00FC0A  4D                 	db	77	;'M'
   540  00FC0B  49                 	db	73	;'I'
   541  00FC0C  44                 	db	68	;'D'
   542  00FC0D  44                 	db	68	;'D'
   543  00FC0E  4C                 	db	76	;'L'
   544  00FC0F  45                 	db	69	;'E'
   545  00FC10  20                 	db	32
   546  00FC11  2D                 	db	45
   547  00FC12  2D                 	db	45
   548  00FC13  20                 	db	32
   549  00FC14  32                 	db	50	;'2'
   550  00FC15  73                 	db	115	;'s'
   551  00FC16  20                 	db	32
   552  00FC17  20                 	db	32
   553  00FC18  20                 	db	32
   554  00FC19  20                 	db	32
   555  00FC1A  00                 	db	0
   556  00FC1B  44                 	db	68	;'D'
   557  00FC1C  20                 	db	32
   558  00FC1D  57                 	db	87	;'W'
   559  00FC1E  49                 	db	73	;'I'
   560  00FC1F  4C                 	db	76	;'L'
   561  00FC20  4C                 	db	76	;'L'
   562  00FC21  20                 	db	32
   563  00FC22  52                 	db	82	;'R'
   564  00FC23  45                 	db	69	;'E'
   565  00FC24  54                 	db	84	;'T'
   566  00FC25  55                 	db	85	;'U'
   567  00FC26  52                 	db	82	;'R'
   568  00FC27  4E                 	db	78	;'N'
   569  00FC28  20                 	db	32
   570  00FC29  20                 	db	32
   571  00FC2A  20                 	db	32
   572  00FC2B  00                 	db	0
   573  00FC2C                     STR_100:
   574  00FC2C  4D                 	db	77	;'M'
   575  00FC2D  49                 	db	73	;'I'
   576  00FC2E  44                 	db	68	;'D'
   577  00FC2F  2D                 	db	45
   578  00FC30  4C                 	db	76	;'L'
   579  00FC31  45                 	db	69	;'E'
   580  00FC32  46                 	db	70	;'F'
   581  00FC33  54                 	db	84	;'T'
   582  00FC34  20                 	db	32
   583  00FC35  2D                 	db	45
   584  00FC36  2D                 	db	45
   585  00FC37  20                 	db	32
   586  00FC38  32                 	db	50	;'2'
   587  00FC39  73                 	db	115	;'s'
   588  00FC3A  20                 	db	32
   589  00FC3B  20                 	db	32
   590  00FC3C  00                 	db	0
   591  00FC3D                     STR_101:
   592  00FC3D  4D                 	db	77	;'M'
   593  00FC3E  49                 	db	73	;'I'
   594  00FC3F  44                 	db	68	;'D'
   595  00FC40  2D                 	db	45
   596  00FC41  52                 	db	82	;'R'
   597  00FC42  49                 	db	73	;'I'
   598  00FC43  47                 	db	71	;'G'
   599  00FC44  48                 	db	72	;'H'
   600  00FC45  54                 	db	84	;'T'
   601  00FC46  20                 	db	32
   602  00FC47  2D                 	db	45
   603  00FC48  2D                 	db	45
   604  00FC49  20                 	db	32
   605  00FC4A  32                 	db	50	;'2'
   606  00FC4B  73                 	db	115	;'s'
   607  00FC4C  20                 	db	32
   608  00FC4D  00                 	db	0
   609  00FC4E  45                 	db	69	;'E'
   610  00FC4F  4C                 	db	76	;'L'
   611  00FC50  53                 	db	83	;'S'
   612  00FC51  45                 	db	69	;'E'
   613  00FC52  20                 	db	32
   614  00FC53  54                 	db	84	;'T'
   615  00FC54  4F                 	db	79	;'O'
   616  00FC55  47                 	db	71	;'G'
   617  00FC56  47                 	db	71	;'G'
   618  00FC57  4C                 	db	76	;'L'
   619  00FC58  45                 	db	69	;'E'
   620  00FC59  53                 	db	83	;'S'
   621  00FC5A  20                 	db	32
   622  00FC5B  52                 	db	82	;'R'
   623  00FC5C  41                 	db	65	;'A'
   624  00FC5D  35                 	db	53	;'5'
   625  00FC5E  00                 	db	0
   626  00FC5F                     STR_72:
   627  00FC5F  41                 	db	65	;'A'
   628  00FC60  4C                 	db	76	;'L'
   629  00FC61  47                 	db	71	;'G'
   630  00FC62  31                 	db	49	;'1'
   631  00FC63  3A                 	db	58	;':'
   632  00FC64  20                 	db	32
   633  00FC65  39                 	db	57	;'9'
   634  00FC66  20                 	db	32
   635  00FC67  50                 	db	80	;'P'
   636  00FC68  4F                 	db	79	;'O'
   637  00FC69  50                 	db	80	;'P'
   638  00FC6A  4E                 	db	78	;'N'
   639  00FC6B  4F                 	db	79	;'O'
   640  00FC6C  54                 	db	84	;'T'
   641  00FC6D  41                 	db	65	;'A'
   642  00FC6E  42                 	db	66	;'B'
   643  00FC6F  00                 	db	0
   644  00FC70                     STR_92:
   645  00FC70  54                 	db	84	;'T'
   646  00FC71  53                 	db	83	;'S'
   647  00FC72  54                 	db	84	;'T'
   648  00FC73  3A                 	db	58	;':'
   649  00FC74  20                 	db	32
   650  00FC75  43                 	db	67	;'C'
   651  00FC76  4F                 	db	79	;'O'
   652  00FC77  4E                 	db	78	;'N'
   653  00FC78  44                 	db	68	;'D'
   654  00FC79  20                 	db	32
   655  00FC7A  53                 	db	83	;'S'
   656  00FC7B  4F                 	db	79	;'O'
   657  00FC7C  4C                 	db	76	;'L'
   658  00FC7D  4E                 	db	78	;'N'
   659  00FC7E  27                 	db	39
   660  00FC7F  44                 	db	68	;'D'
   661  00FC80  00                 	db	0
   662  00FC81                     STR_94:
   663  00FC81  54                 	db	84	;'T'
   664  00FC82  53                 	db	83	;'S'
   665  00FC83  54                 	db	84	;'T'
   666  00FC84  3A                 	db	58	;':'
   667  00FC85  20                 	db	32
   668  00FC86  50                 	db	80	;'P'
   669  00FC87  55                 	db	85	;'U'
   670  00FC88  53                 	db	83	;'S'
   671  00FC89  48                 	db	72	;'H'
   672  00FC8A  20                 	db	32
   673  00FC8B  53                 	db	83	;'S'
   674  00FC8C  4F                 	db	79	;'O'
   675  00FC8D  4C                 	db	76	;'L'
   676  00FC8E  4E                 	db	78	;'N'
   677  00FC8F  27                 	db	39
   678  00FC90  44                 	db	68	;'D'
   679  00FC91  00                 	db	0
   680  00FC92                     STR_68:
   681  00FC92  32                 	db	50	;'2'
   682  00FC93  2E                 	db	46
   683  00FC94  53                 	db	83	;'S'
   684  00FC95  4E                 	db	78	;'N'
   685  00FC96  52                 	db	82	;'R'
   686  00FC97  7C                 	db	124
   687  00FC98  34                 	db	52	;'4'
   688  00FC99  2E                 	db	46
   689  00FC9A  48                 	db	72	;'H'
   690  00FC9B  49                 	db	73	;'I'
   691  00FC9C  7C                 	db	124
   692  00FC9D  35                 	db	53	;'5'
   693  00FC9E  2E                 	db	46
   694  00FC9F  4D                 	db	77	;'M'
   695  00FCA0  45                 	db	69	;'E'
   696  00FCA1  44                 	db	68	;'D'
   697  00FCA2  00                 	db	0
   698  00FCA3                     STR_69:
   699  00FCA3  42                 	db	66	;'B'
   700  00FCA4  2E                 	db	46
   701  00FCA5  50                 	db	80	;'P'
   702  00FCA6  53                 	db	83	;'S'
   703  00FCA7  48                 	db	72	;'H'
   704  00FCA8  7C                 	db	124
   705  00FCA9  38                 	db	56	;'8'
   706  00FCAA  2E                 	db	46
   707  00FCAB  53                 	db	83	;'S'
   708  00FCAC  56                 	db	86	;'V'
   709  00FCAD  7C                 	db	124
   710  00FCAE  39                 	db	57	;'9'
   711  00FCAF  2E                 	db	46
   712  00FCB0  42                 	db	66	;'B'
   713  00FCB1  4C                 	db	76	;'L'
   714  00FCB2  4B                 	db	75	;'K'
   715  00FCB3  00                 	db	0
   716  00FCB4                     STR_110:
   717  00FCB4  54                 	db	84	;'T'
   718  00FCB5  53                 	db	83	;'S'
   719  00FCB6  54                 	db	84	;'T'
   720  00FCB7  3A                 	db	58	;':'
   721  00FCB8  20                 	db	32
   722  00FCB9  42                 	db	66	;'B'
   723  00FCBA  4F                 	db	79	;'O'
   724  00FCBB  54                 	db	84	;'T'
   725  00FCBC  48                 	db	72	;'H'
   726  00FCBD  20                 	db	32
   727  00FCBE  53                 	db	83	;'S'
   728  00FCBF  45                 	db	69	;'E'
   729  00FCC0  52                 	db	82	;'R'
   730  00FCC1  56                 	db	86	;'V'
   731  00FCC2  4F                 	db	79	;'O'
   732  00FCC3  53                 	db	83	;'S'
   733  00FCC4  00                 	db	0
   734  00FCC5                     STR_41:
   735  00FCC5  4C                 	db	76	;'L'
   736  00FCC6  4F                 	db	79	;'O'
   737  00FCC7  47                 	db	71	;'G'
   738  00FCC8  20                 	db	32
   739  00FCC9  31                 	db	49	;'1'
   740  00FCCA  20                 	db	32
   741  00FCCB  20                 	db	32
   742  00FCCC  20                 	db	32
   743  00FCCD  20                 	db	32
   744  00FCCE  20                 	db	32
   745  00FCCF  20                 	db	32
   746  00FCD0  20                 	db	32
   747  00FCD1  20                 	db	32
   748  00FCD2  20                 	db	32
   749  00FCD3  20                 	db	32
   750  00FCD4  20                 	db	32
   751  00FCD5  00                 	db	0
   752  00FCD6                     STR_40:
   753  00FCD6  4C                 	db	76	;'L'
   754  00FCD7  4F                 	db	79	;'O'
   755  00FCD8  47                 	db	71	;'G'
   756  00FCD9  20                 	db	32
   757  00FCDA  32                 	db	50	;'2'
   758  00FCDB  20                 	db	32
   759  00FCDC  20                 	db	32
   760  00FCDD  20                 	db	32
   761  00FCDE  20                 	db	32
   762  00FCDF  20                 	db	32
   763  00FCE0  20                 	db	32
   764  00FCE1  20                 	db	32
   765  00FCE2  20                 	db	32
   766  00FCE3  20                 	db	32
   767  00FCE4  20                 	db	32
   768  00FCE5  20                 	db	32
   769  00FCE6  00                 	db	0
   770  00FCE7                     STR_44:
   771  00FCE7  4C                 	db	76	;'L'
   772  00FCE8  4F                 	db	79	;'O'
   773  00FCE9  47                 	db	71	;'G'
   774  00FCEA  20                 	db	32
   775  00FCEB  33                 	db	51	;'3'
   776  00FCEC  20                 	db	32
   777  00FCED  20                 	db	32
   778  00FCEE  20                 	db	32
   779  00FCEF  20                 	db	32
   780  00FCF0  20                 	db	32
   781  00FCF1  20                 	db	32
   782  00FCF2  20                 	db	32
   783  00FCF3  20                 	db	32
   784  00FCF4  20                 	db	32
   785  00FCF5  20                 	db	32
   786  00FCF6  20                 	db	32
   787  00FCF7  00                 	db	0
   788  00FCF8                     STR_48:
   789  00FCF8  4C                 	db	76	;'L'
   790  00FCF9  4F                 	db	79	;'O'
   791  00FCFA  47                 	db	71	;'G'
   792  00FCFB  20                 	db	32
   793  00FCFC  34                 	db	52	;'4'
   794  00FCFD  20                 	db	32
   795  00FCFE  20                 	db	32
   796  00FCFF  20                 	db	32
   797  00FD00  20                 	db	32
   798  00FD01  20                 	db	32
   799  00FD02  20                 	db	32
   800  00FD03  20                 	db	32
   801  00FD04  20                 	db	32
   802  00FD05  20                 	db	32
   803  00FD06  20                 	db	32
   804  00FD07  20                 	db	32
   805  00FD08  00                 	db	0
   806  00FD09                     STR_36:
   807  00FD09  33                 	db	51	;'3'
   808  00FD0A  2E                 	db	46
   809  00FD0B  20                 	db	32
   810  00FD0C  4C                 	db	76	;'L'
   811  00FD0D  4F                 	db	79	;'O'
   812  00FD0E  47                 	db	71	;'G'
   813  00FD0F  53                 	db	83	;'S'
   814  00FD10  20                 	db	32
   815  00FD11  20                 	db	32
   816  00FD12  20                 	db	32
   817  00FD13  20                 	db	32
   818  00FD14  20                 	db	32
   819  00FD15  20                 	db	32
   820  00FD16  20                 	db	32
   821  00FD17  20                 	db	32
   822  00FD18  20                 	db	32
   823  00FD19  00                 	db	0
   824  00FD1A                     STR_32:
   825  00FD1A  32                 	db	50	;'2'
   826  00FD1B  2E                 	db	46
   827  00FD1C  20                 	db	32
   828  00FD1D  53                 	db	83	;'S'
   829  00FD1E  4F                 	db	79	;'O'
   830  00FD1F  52                 	db	82	;'R'
   831  00FD20  54                 	db	84	;'T'
   832  00FD21  20                 	db	32
   833  00FD22  20                 	db	32
   834  00FD23  20                 	db	32
   835  00FD24  20                 	db	32
   836  00FD25  20                 	db	32
   837  00FD26  20                 	db	32
   838  00FD27  20                 	db	32
   839  00FD28  20                 	db	32
   840  00FD29  20                 	db	32
   841  00FD2A  00                 	db	0
   842  00FD2B                     STR_33:
   843  00FD2B  31                 	db	49	;'1'
   844  00FD2C  2E                 	db	46
   845  00FD2D  20                 	db	32
   846  00FD2E  44                 	db	68	;'D'
   847  00FD2F  41                 	db	65	;'A'
   848  00FD30  54                 	db	84	;'T'
   849  00FD31  45                 	db	69	;'E'
   850  00FD32  2F                 	db	47
   851  00FD33  54                 	db	84	;'T'
   852  00FD34  49                 	db	73	;'I'
   853  00FD35  4D                 	db	77	;'M'
   854  00FD36  45                 	db	69	;'E'
   855  00FD37  20                 	db	32
   856  00FD38  20                 	db	32
   857  00FD39  20                 	db	32
   858  00FD3A  20                 	db	32
   859  00FD3B  00                 	db	0
   860  00FD3C                     STR_24:
   861  00FD3C  20                 	db	32
   862  00FD3D  2D                 	db	45
   863  00FD3E  2D                 	db	45
   864  00FD3F  20                 	db	32
   865  00FD40  50                 	db	80	;'P'
   866  00FD41  4F                 	db	79	;'O'
   867  00FD42  50                 	db	80	;'P'
   868  00FD43  20                 	db	32
   869  00FD44  20                 	db	32
   870  00FD45  43                 	db	67	;'C'
   871  00FD46  41                 	db	65	;'A'
   872  00FD47  4E                 	db	78	;'N'
   873  00FD48  20                 	db	32
   874  00FD49  2D                 	db	45
   875  00FD4A  2D                 	db	45
   876  00FD4B  20                 	db	32
   877  00FD4C  00                 	db	0
   878  00FD4D                     STR_26:
   879  00FD4D  20                 	db	32
   880  00FD4E  2D                 	db	45
   881  00FD4F  2D                 	db	45
   882  00FD50  20                 	db	32
   883  00FD51  53                 	db	83	;'S'
   884  00FD52  4F                 	db	79	;'O'
   885  00FD53  55                 	db	85	;'U'
   886  00FD54  50                 	db	80	;'P'
   887  00FD55  20                 	db	32
   888  00FD56  43                 	db	67	;'C'
   889  00FD57  41                 	db	65	;'A'
   890  00FD58  4E                 	db	78	;'N'
   891  00FD59  20                 	db	32
   892  00FD5A  2D                 	db	45
   893  00FD5B  2D                 	db	45
   894  00FD5C  20                 	db	32
   895  00FD5D  00                 	db	0
   896  00FD5E                     STR_28:
   897  00FD5E  2D                 	db	45
   898  00FD5F  2D                 	db	45
   899  00FD60  20                 	db	32
   900  00FD61  54                 	db	84	;'T'
   901  00FD62  4F                 	db	79	;'O'
   902  00FD63  54                 	db	84	;'T'
   903  00FD64  41                 	db	65	;'A'
   904  00FD65  4C                 	db	76	;'L'
   905  00FD66  20                 	db	32
   906  00FD67  43                 	db	67	;'C'
   907  00FD68  41                 	db	65	;'A'
   908  00FD69  4E                 	db	78	;'N'
   909  00FD6A  53                 	db	83	;'S'
   910  00FD6B  20                 	db	32
   911  00FD6C  2D                 	db	45
   912  00FD6D  2D                 	db	45
   913  00FD6E  00                 	db	0
   914  00FD6F                     STR_39:
   915  00FD6F  4C                 	db	76	;'L'
   916  00FD70  4F                 	db	79	;'O'
   917  00FD71  47                 	db	71	;'G'
   918  00FD72  20                 	db	32
   919  00FD73  31                 	db	49	;'1'
   920  00FD74  20                 	db	32
   921  00FD75  20                 	db	32
   922  00FD76  20                 	db	32
   923  00FD77  20                 	db	32
   924  00FD78  20                 	db	32
   925  00FD79  20                 	db	32
   926  00FD7A  20                 	db	32
   927  00FD7B  20                 	db	32
   928  00FD7C  20                 	db	32
   929  00FD7D  20                 	db	32
   930  00FD7E  3C                 	db	60	;'<'
   931  00FD7F  00                 	db	0
   932  00FD80                     STR_42:
   933  00FD80  4C                 	db	76	;'L'
   934  00FD81  4F                 	db	79	;'O'
   935  00FD82  47                 	db	71	;'G'
   936  00FD83  20                 	db	32
   937  00FD84  32                 	db	50	;'2'
   938  00FD85  20                 	db	32
   939  00FD86  20                 	db	32
   940  00FD87  20                 	db	32
   941  00FD88  20                 	db	32
   942  00FD89  20                 	db	32
   943  00FD8A  20                 	db	32
   944  00FD8B  20                 	db	32
   945  00FD8C  20                 	db	32
   946  00FD8D  20                 	db	32
   947  00FD8E  20                 	db	32
   948  00FD8F  3C                 	db	60	;'<'
   949  00FD90  00                 	db	0
   950  00FD91                     STR_46:
   951  00FD91  4C                 	db	76	;'L'
   952  00FD92  4F                 	db	79	;'O'
   953  00FD93  47                 	db	71	;'G'
   954  00FD94  20                 	db	32
   955  00FD95  33                 	db	51	;'3'
   956  00FD96  20                 	db	32
   957  00FD97  20                 	db	32
   958  00FD98  20                 	db	32
   959  00FD99  20                 	db	32
   960  00FD9A  20                 	db	32
   961  00FD9B  20                 	db	32
   962  00FD9C  20                 	db	32
   963  00FD9D  20                 	db	32
   964  00FD9E  20                 	db	32
   965  00FD9F  20                 	db	32
   966  00FDA0  3C                 	db	60	;'<'
   967  00FDA1  00                 	db	0
   968  00FDA2                     STR_50:
   969  00FDA2  4C                 	db	76	;'L'
   970  00FDA3  4F                 	db	79	;'O'
   971  00FDA4  47                 	db	71	;'G'
   972  00FDA5  20                 	db	32
   973  00FDA6  34                 	db	52	;'4'
   974  00FDA7  20                 	db	32
   975  00FDA8  20                 	db	32
   976  00FDA9  20                 	db	32
   977  00FDAA  20                 	db	32
   978  00FDAB  20                 	db	32
   979  00FDAC  20                 	db	32
   980  00FDAD  20                 	db	32
   981  00FDAE  20                 	db	32
   982  00FDAF  20                 	db	32
   983  00FDB0  20                 	db	32
   984  00FDB1  3C                 	db	60	;'<'
   985  00FDB2  00                 	db	0
   986  00FDB3                     STR_38:
   987  00FDB3  33                 	db	51	;'3'
   988  00FDB4  2E                 	db	46
   989  00FDB5  20                 	db	32
   990  00FDB6  4C                 	db	76	;'L'
   991  00FDB7  4F                 	db	79	;'O'
   992  00FDB8  47                 	db	71	;'G'
   993  00FDB9  53                 	db	83	;'S'
   994  00FDBA  20                 	db	32
   995  00FDBB  20                 	db	32
   996  00FDBC  20                 	db	32
   997  00FDBD  20                 	db	32
   998  00FDBE  20                 	db	32
   999  00FDBF  20                 	db	32
  1000  00FDC0  20                 	db	32
  1001  00FDC1  20                 	db	32
  1002  00FDC2  3C                 	db	60	;'<'
  1003  00FDC3  00                 	db	0
  1004  00FDC4                     STR_34:
  1005  00FDC4  32                 	db	50	;'2'
  1006  00FDC5  2E                 	db	46
  1007  00FDC6  20                 	db	32
  1008  00FDC7  53                 	db	83	;'S'
  1009  00FDC8  4F                 	db	79	;'O'
  1010  00FDC9  52                 	db	82	;'R'
  1011  00FDCA  54                 	db	84	;'T'
  1012  00FDCB  20                 	db	32
  1013  00FDCC  20                 	db	32
  1014  00FDCD  20                 	db	32
  1015  00FDCE  20                 	db	32
  1016  00FDCF  20                 	db	32
  1017  00FDD0  20                 	db	32
  1018  00FDD1  20                 	db	32
  1019  00FDD2  20                 	db	32
  1020  00FDD3  3C                 	db	60	;'<'
  1021  00FDD4  00                 	db	0
  1022  00FDD5                     STR_31:
  1023  00FDD5  31                 	db	49	;'1'
  1024  00FDD6  2E                 	db	46
  1025  00FDD7  20                 	db	32
  1026  00FDD8  44                 	db	68	;'D'
  1027  00FDD9  41                 	db	65	;'A'
  1028  00FDDA  54                 	db	84	;'T'
  1029  00FDDB  45                 	db	69	;'E'
  1030  00FDDC  2F                 	db	47
  1031  00FDDD  54                 	db	84	;'T'
  1032  00FDDE  49                 	db	73	;'I'
  1033  00FDDF  4D                 	db	77	;'M'
  1034  00FDE0  45                 	db	69	;'E'
  1035  00FDE1  20                 	db	32
  1036  00FDE2  20                 	db	32
  1037  00FDE3  20                 	db	32
  1038  00FDE4  3C                 	db	60	;'<'
  1039  00FDE5  00                 	db	0
  1040  00FDE6                     STR_6:
  1041  00FDE6  50                 	db	80	;'P'
  1042  00FDE7  41                 	db	65	;'A'
  1043  00FDE8  55                 	db	85	;'U'
  1044  00FDE9  53                 	db	83	;'S'
  1045  00FDEA  45                 	db	69	;'E'
  1046  00FDEB  20                 	db	32
  1047  00FDEC  3C                 	db	60	;'<'
  1048  00FDED  20                 	db	32
  1049  00FDEE  7C                 	db	124
  1050  00FDEF  20                 	db	32
  1051  00FDF0  42                 	db	66	;'B'
  1052  00FDF1  41                 	db	65	;'A'
  1053  00FDF2  43                 	db	67	;'C'
  1054  00FDF3  4B                 	db	75	;'K'
  1055  00FDF4  20                 	db	32
  1056  00FDF5  3E                 	db	62	;'>'
  1057  00FDF6  00                 	db	0
  1058  00FDF7                     STR_30:
  1059  00FDF7  50                 	db	80	;'P'
  1060  00FDF8  55                 	db	85	;'U'
  1061  00FDF9  53                 	db	83	;'S'
  1062  00FDFA  48                 	db	72	;'H'
  1063  00FDFB  20                 	db	32
  1064  00FDFC  54                 	db	84	;'T'
  1065  00FDFD  4F                 	db	79	;'O'
  1066  00FDFE  20                 	db	32
  1067  00FDFF  43                 	db	67	;'C'
  1068  00FE00  4F                 	db	79	;'O'
  1069  00FE01  4E                 	db	78	;'N'
  1070  00FE02  54                 	db	84	;'T'
  1071  00FE03  49                 	db	73	;'I'
  1072  00FE04  4E                 	db	78	;'N'
  1073  00FE05  55                 	db	85	;'U'
  1074  00FE06  45                 	db	69	;'E'
  1075  00FE07  00                 	db	0
  1076  00FE08                     STR_27:
  1077  00FE08  4E                 	db	78	;'N'
  1078  00FE09  4C                 	db	76	;'L'
  1079  00FE0A  41                 	db	65	;'A'
  1080  00FE0B  42                 	db	66	;'B'
  1081  00FE0C  3A                 	db	58	;':'
  1082  00FE0D  20                 	db	32
  1083  00FE0E  25                 	db	37
  1084  00FE0F  64                 	db	100	;'d'
  1085  00FE10  7C                 	db	124
  1086  00FE11  4C                 	db	76	;'L'
  1087  00FE12  41                 	db	65	;'A'
  1088  00FE13  42                 	db	66	;'B'
  1089  00FE14  3A                 	db	58	;':'
  1090  00FE15  20                 	db	32
  1091  00FE16  25                 	db	37
  1092  00FE17  64                 	db	100	;'d'
  1093  00FE18  00                 	db	0
  1094  00FE19                     STR_25:
  1095  00FE19  4E                 	db	78	;'N'
  1096  00FE1A  54                 	db	84	;'T'
  1097  00FE1B  41                 	db	65	;'A'
  1098  00FE1C  42                 	db	66	;'B'
  1099  00FE1D  3A                 	db	58	;':'
  1100  00FE1E  20                 	db	32
  1101  00FE1F  25                 	db	37
  1102  00FE20  64                 	db	100	;'d'
  1103  00FE21  7C                 	db	124
  1104  00FE22  54                 	db	84	;'T'
  1105  00FE23  41                 	db	65	;'A'
  1106  00FE24  42                 	db	66	;'B'
  1107  00FE25  3A                 	db	58	;':'
  1108  00FE26  20                 	db	32
  1109  00FE27  25                 	db	37
  1110  00FE28  64                 	db	100	;'d'
  1111  00FE29  00                 	db	0
  1112  00FE2A                     STR_83:
  1113  00FE2A  4D                 	db	77	;'M'
  1114  00FE2B  41                 	db	65	;'A'
  1115  00FE2C  47                 	db	71	;'G'
  1116  00FE2D  5F                 	db	95	;'_'
  1117  00FE2E  73                 	db	115	;'s'
  1118  00FE2F  69                 	db	105	;'i'
  1119  00FE30  67                 	db	103	;'g'
  1120  00FE31  6E                 	db	110	;'n'
  1121  00FE32  61                 	db	97	;'a'
  1122  00FE33  6C                 	db	108	;'l'
  1123  00FE34  3A                 	db	58	;':'
  1124  00FE35  20                 	db	32
  1125  00FE36  25                 	db	37
  1126  00FE37  64                 	db	100	;'d'
  1127  00FE38  20                 	db	32
  1128  00FE39  00                 	db	0
  1129  00FE3A                     STR_103:
  1130  00FE3A  54                 	db	84	;'T'
  1131  00FE3B  53                 	db	83	;'S'
  1132  00FE3C  54                 	db	84	;'T'
  1133  00FE3D  3A                 	db	58	;':'
  1134  00FE3E  20                 	db	32
  1135  00FE3F  54                 	db	84	;'T'
  1136  00FE40  49                 	db	73	;'I'
  1137  00FE41  4C                 	db	76	;'L'
  1138  00FE42  54                 	db	84	;'T'
  1139  00FE43  20                 	db	32
  1140  00FE44  53                 	db	83	;'S'
  1141  00FE45  45                 	db	69	;'E'
  1142  00FE46  52                 	db	82	;'R'
  1143  00FE47  56                 	db	86	;'V'
  1144  00FE48  4F                 	db	79	;'O'
  1145  00FE49  00                 	db	0
  1146  00FE4A                     STR_4:
  1147  00FE4A  44                 	db	68	;'D'
  1148  00FE4B  49                 	db	73	;'I'
  1149  00FE4C  44                 	db	68	;'D'
  1150  00FE4D  4E                 	db	78	;'N'
  1151  00FE4E  27                 	db	39
  1152  00FE4F  54                 	db	84	;'T'
  1153  00FE50  20                 	db	32
  1154  00FE51  43                 	db	67	;'C'
  1155  00FE52  4F                 	db	79	;'O'
  1156  00FE53  4D                 	db	77	;'M'
  1157  00FE54  50                 	db	80	;'P'
  1158  00FE55  4C                 	db	76	;'L'
  1159  00FE56  45                 	db	69	;'E'
  1160  00FE57  54                 	db	84	;'T'
  1161  00FE58  45                 	db	69	;'E'
  1162  00FE59  00                 	db	0
  1163  00FE5A                     STR_80:
  1164  00FE5A  49                 	db	73	;'I'
  1165  00FE5B  52                 	db	82	;'R'
  1166  00FE5C  5F                 	db	95	;'_'
  1167  00FE5D  73                 	db	115	;'s'
  1168  00FE5E  69                 	db	105	;'i'
  1169  00FE5F  67                 	db	103	;'g'
  1170  00FE60  6E                 	db	110	;'n'
  1171  00FE61  61                 	db	97	;'a'
  1172  00FE62  6C                 	db	108	;'l'
  1173  00FE63  3A                 	db	58	;':'
  1174  00FE64  20                 	db	32
  1175  00FE65  25                 	db	37
  1176  00FE66  64                 	db	100	;'d'
  1177  00FE67  20                 	db	32
  1178  00FE68  00                 	db	0
  1179  00FE69                     STR_109:
  1180  00FE69  43                 	db	67	;'C'
  1181  00FE6A  41                 	db	65	;'A'
  1182  00FE6B  4D                 	db	77	;'M'
  1183  00FE6C  20                 	db	32
  1184  00FE6D  44                 	db	68	;'D'
  1185  00FE6E  57                 	db	87	;'W'
  1186  00FE6F  4E                 	db	78	;'N'
  1187  00FE70  20                 	db	32
  1188  00FE71  7C                 	db	124
  1189  00FE72  52                 	db	82	;'R'
  1190  00FE73  43                 	db	67	;'C'
  1191  00FE74  30                 	db	48	;'0'
  1192  00FE75  3D                 	db	61	;'='
  1193  00FE76  30                 	db	48	;'0'
  1194  00FE77  00                 	db	0
  1195  00FE78                     STR_108:
  1196  00FE78  43                 	db	67	;'C'
  1197  00FE79  41                 	db	65	;'A'
  1198  00FE7A  4D                 	db	77	;'M'
  1199  00FE7B  20                 	db	32
  1200  00FE7C  55                 	db	85	;'U'
  1201  00FE7D  50                 	db	80	;'P'
  1202  00FE7E  20                 	db	32
  1203  00FE7F  20                 	db	32
  1204  00FE80  7C                 	db	124
  1205  00FE81  52                 	db	82	;'R'
  1206  00FE82  43                 	db	67	;'C'
  1207  00FE83  30                 	db	48	;'0'
  1208  00FE84  3D                 	db	61	;'='
  1209  00FE85  31                 	db	49	;'1'
  1210  00FE86  00                 	db	0
  1211  00FE87                     STR_82:
  1212  00FE87  54                 	db	84	;'T'
  1213  00FE88  53                 	db	83	;'S'
  1214  00FE89  54                 	db	84	;'T'
  1215  00FE8A  3A                 	db	58	;':'
  1216  00FE8B  20                 	db	32
  1217  00FE8C  4D                 	db	77	;'M'
  1218  00FE8D  41                 	db	65	;'A'
  1219  00FE8E  47                 	db	71	;'G'
  1220  00FE8F  4E                 	db	78	;'N'
  1221  00FE90  45                 	db	69	;'E'
  1222  00FE91  54                 	db	84	;'T'
  1223  00FE92  49                 	db	73	;'I'
  1224  00FE93  53                 	db	83	;'S'
  1225  00FE94  4D                 	db	77	;'M'
  1226  00FE95  00                 	db	0
  1227  00FE96                     STR_107:
  1228  00FE96  54                 	db	84	;'T'
  1229  00FE97  53                 	db	83	;'S'
  1230  00FE98  54                 	db	84	;'T'
  1231  00FE99  3A                 	db	58	;':'
  1232  00FE9A  20                 	db	32
  1233  00FE9B  43                 	db	67	;'C'
  1234  00FE9C  41                 	db	65	;'A'
  1235  00FE9D  4D                 	db	77	;'M'
  1236  00FE9E  20                 	db	32
  1237  00FE9F  53                 	db	83	;'S'
  1238  00FEA0  45                 	db	69	;'E'
  1239  00FEA1  52                 	db	82	;'R'
  1240  00FEA2  56                 	db	86	;'V'
  1241  00FEA3  4F                 	db	79	;'O'
  1242  00FEA4  00                 	db	0
  1243  00FEA5                     STR_96:
  1244  00FEA5  54                 	db	84	;'T'
  1245  00FEA6  53                 	db	83	;'S'
  1246  00FEA7  54                 	db	84	;'T'
  1247  00FEA8  3A                 	db	58	;':'
  1248  00FEA9  20                 	db	32
  1249  00FEAA  50                 	db	80	;'P'
  1250  00FEAB  41                 	db	65	;'A'
  1251  00FEAC  4E                 	db	78	;'N'
  1252  00FEAD  20                 	db	32
  1253  00FEAE  53                 	db	83	;'S'
  1254  00FEAF  45                 	db	69	;'E'
  1255  00FEB0  52                 	db	82	;'R'
  1256  00FEB1  56                 	db	86	;'V'
  1257  00FEB2  4F                 	db	79	;'O'
  1258  00FEB3  00                 	db	0
  1259  00FEB4                     STR_75:
  1260  00FEB4  41                 	db	65	;'A'
  1261  00FEB5  4C                 	db	76	;'L'
  1262  00FEB6  47                 	db	71	;'G'
  1263  00FEB7  34                 	db	52	;'4'
  1264  00FEB8  3A                 	db	58	;':'
  1265  00FEB9  20                 	db	32
  1266  00FEBA  41                 	db	65	;'A'
  1267  00FEBB  4C                 	db	76	;'L'
  1268  00FEBC  4C                 	db	76	;'L'
  1269  00FEBD  20                 	db	32
  1270  00FEBE  43                 	db	67	;'C'
  1271  00FEBF  41                 	db	65	;'A'
  1272  00FEC0  4E                 	db	78	;'N'
  1273  00FEC1  53                 	db	83	;'S'
  1274  00FEC2  00                 	db	0
  1275  00FEC3                     STR_90:
  1276  00FEC3  54                 	db	84	;'T'
  1277  00FEC4  53                 	db	83	;'S'
  1278  00FEC5  54                 	db	84	;'T'
  1279  00FEC6  3A                 	db	58	;':'
  1280  00FEC7  20                 	db	32
  1281  00FEC8  44                 	db	68	;'D'
  1282  00FEC9  43                 	db	67	;'C'
  1283  00FECA  20                 	db	32
  1284  00FECB  4D                 	db	77	;'M'
  1285  00FECC  4F                 	db	79	;'O'
  1286  00FECD  54                 	db	84	;'T'
  1287  00FECE  4F                 	db	79	;'O'
  1288  00FECF  52                 	db	82	;'R'
  1289  00FED0  53                 	db	83	;'S'
  1290  00FED1  00                 	db	0
  1291  00FED2                     STR_70:
  1292  00FED2  41                 	db	65	;'A'
  1293  00FED3  4C                 	db	76	;'L'
  1294  00FED4  47                 	db	71	;'G'
  1295  00FED5  4F                 	db	79	;'O'
  1296  00FED6  52                 	db	82	;'R'
  1297  00FED7  49                 	db	73	;'I'
  1298  00FED8  54                 	db	84	;'T'
  1299  00FED9  48                 	db	72	;'H'
  1300  00FEDA  4D                 	db	77	;'M'
  1301  00FEDB  20                 	db	32
  1302  00FEDC  54                 	db	84	;'T'
  1303  00FEDD  45                 	db	69	;'E'
  1304  00FEDE  53                 	db	83	;'S'
  1305  00FEDF  54                 	db	84	;'T'
  1306  00FEE0  00                 	db	0
  1307  00FEE1                     STR_91:
  1308  00FEE1  50                 	db	80	;'P'
  1309  00FEE2  49                 	db	73	;'I'
  1310  00FEE3  4E                 	db	78	;'N'
  1311  00FEE4  20                 	db	32
  1312  00FEE5  52                 	db	82	;'R'
  1313  00FEE6  41                 	db	65	;'A'
  1314  00FEE7  35                 	db	53	;'5'
  1315  00FEE8  20                 	db	32
  1316  00FEE9  48                 	db	72	;'H'
  1317  00FEEA  49                 	db	73	;'I'
  1318  00FEEB  47                 	db	71	;'G'
  1319  00FEEC  48                 	db	72	;'H'
  1320  00FEED  2E                 	db	46
  1321  00FEEE  00                 	db	0
  1322  00FEEF                     STR_73:
  1323  00FEEF  41                 	db	65	;'A'
  1324  00FEF0  4C                 	db	76	;'L'
  1325  00FEF1  47                 	db	71	;'G'
  1326  00FEF2  32                 	db	50	;'2'
  1327  00FEF3  3A                 	db	58	;':'
  1328  00FEF4  20                 	db	32
  1329  00FEF5  31                 	db	49	;'1'
  1330  00FEF6  32                 	db	50	;'2'
  1331  00FEF7  20                 	db	32
  1332  00FEF8  43                 	db	67	;'C'
  1333  00FEF9  41                 	db	65	;'A'
  1334  00FEFA  4E                 	db	78	;'N'
  1335  00FEFB  53                 	db	83	;'S'
  1336  00FEFC  00                 	db	0
  1337  00FEFD                     STR_76:
  1338  00FEFD  41                 	db	65	;'A'
  1339  00FEFE  4C                 	db	76	;'L'
  1340  00FEFF  47                 	db	71	;'G'
  1341  00FF00  35                 	db	53	;'5'
  1342  00FF01  3A                 	db	58	;':'
  1343  00FF02  20                 	db	32
  1344  00FF03  4E                 	db	78	;'N'
  1345  00FF04  4F                 	db	79	;'O'
  1346  00FF05  20                 	db	32
  1347  00FF06  43                 	db	67	;'C'
  1348  00FF07  41                 	db	65	;'A'
  1349  00FF08  4E                 	db	78	;'N'
  1350  00FF09  53                 	db	83	;'S'
  1351  00FF0A  00                 	db	0
  1352  00FF0B                     STR_71:
  1353  00FF0B  50                 	db	80	;'P'
  1354  00FF0C  55                 	db	85	;'U'
  1355  00FF0D  53                 	db	83	;'S'
  1356  00FF0E  48                 	db	72	;'H'
  1357  00FF0F  20                 	db	32
  1358  00FF10  54                 	db	84	;'T'
  1359  00FF11  4F                 	db	79	;'O'
  1360  00FF12  20                 	db	32
  1361  00FF13  53                 	db	83	;'S'
  1362  00FF14  54                 	db	84	;'T'
  1363  00FF15  41                 	db	65	;'A'
  1364  00FF16  52                 	db	82	;'R'
  1365  00FF17  54                 	db	84	;'T'
  1366  00FF18  00                 	db	0
  1367  00FF19                     STR_23:
  1368  00FF19  25                 	db	37
  1369  00FF1A  64                 	db	100	;'d'
  1370  00FF1B  20                 	db	32
  1371  00FF1C  4D                 	db	77	;'M'
  1372  00FF1D  49                 	db	73	;'I'
  1373  00FF1E  4E                 	db	78	;'N'
  1374  00FF1F  20                 	db	32
  1375  00FF20  25                 	db	37
  1376  00FF21  64                 	db	100	;'d'
  1377  00FF22  20                 	db	32
  1378  00FF23  53                 	db	83	;'S'
  1379  00FF24  45                 	db	69	;'E'
  1380  00FF25  43                 	db	67	;'C'
  1381  00FF26  00                 	db	0
  1382  00FF27                     STR_2:
  1383  00FF27  54                 	db	84	;'T'
  1384  00FF28  49                 	db	73	;'I'
  1385  00FF29  4D                 	db	77	;'M'
  1386  00FF2A  45                 	db	69	;'E'
  1387  00FF2B  3A                 	db	58	;':'
  1388  00FF2C  20                 	db	32
  1389  00FF2D  25                 	db	37
  1390  00FF2E  64                 	db	100	;'d'
  1391  00FF2F  3A                 	db	58	;':'
  1392  00FF30  25                 	db	37
  1393  00FF31  30                 	db	48	;'0'
  1394  00FF32  32                 	db	50	;'2'
  1395  00FF33  64                 	db	100	;'d'
  1396  00FF34  00                 	db	0
  1397  00FF35                     STR_79:
  1398  00FF35  54                 	db	84	;'T'
  1399  00FF36  53                 	db	83	;'S'
  1400  00FF37  54                 	db	84	;'T'
  1401  00FF38  3A                 	db	58	;':'
  1402  00FF39  20                 	db	32
  1403  00FF3A  49                 	db	73	;'I'
  1404  00FF3B  52                 	db	82	;'R'
  1405  00FF3C  20                 	db	32
  1406  00FF3D  53                 	db	83	;'S'
  1407  00FF3E  4E                 	db	78	;'N'
  1408  00FF3F  53                 	db	83	;'S'
  1409  00FF40  52                 	db	82	;'R'
  1410  00FF41  00                 	db	0
  1411  00FF42                     STR_65:
  1412  00FF42  54                 	db	84	;'T'
  1413  00FF43  49                 	db	73	;'I'
  1414  00FF44  4D                 	db	77	;'M'
  1415  00FF45  45                 	db	69	;'E'
  1416  00FF46  20                 	db	32
  1417  00FF47  25                 	db	37
  1418  00FF48  64                 	db	100	;'d'
  1419  00FF49  3A                 	db	58	;':'
  1420  00FF4A  25                 	db	37
  1421  00FF4B  30                 	db	48	;'0'
  1422  00FF4C  32                 	db	50	;'2'
  1423  00FF4D  64                 	db	100	;'d'
  1424  00FF4E  00                 	db	0
  1425  00FF4F                     STR_74:
  1426  00FF4F  41                 	db	65	;'A'
  1427  00FF50  4C                 	db	76	;'L'
  1428  00FF51  47                 	db	71	;'G'
  1429  00FF52  33                 	db	51	;'3'
  1430  00FF53  3A                 	db	58	;':'
  1431  00FF54  20                 	db	32
  1432  00FF55  31                 	db	49	;'1'
  1433  00FF56  20                 	db	32
  1434  00FF57  43                 	db	67	;'C'
  1435  00FF58  41                 	db	65	;'A'
  1436  00FF59  4E                 	db	78	;'N'
  1437  00FF5A  00                 	db	0
  1438  00FF5B                     STR_93:
  1439  00FF5B  50                 	db	80	;'P'
  1440  00FF5C  49                 	db	73	;'I'
  1441  00FF5D  4E                 	db	78	;'N'
  1442  00FF5E  20                 	db	32
  1443  00FF5F  52                 	db	82	;'R'
  1444  00FF60  41                 	db	65	;'A'
  1445  00FF61  33                 	db	51	;'3'
  1446  00FF62  2E                 	db	46
  1447  00FF63  2E                 	db	46
  1448  00FF64  2E                 	db	46
  1449  00FF65  00                 	db	0
  1450  00FF66                     STR_95:
  1451  00FF66  50                 	db	80	;'P'
  1452  00FF67  49                 	db	73	;'I'
  1453  00FF68  4E                 	db	78	;'N'
  1454  00FF69  20                 	db	32
  1455  00FF6A  52                 	db	82	;'R'
  1456  00FF6B  41                 	db	65	;'A'
  1457  00FF6C  34                 	db	52	;'4'
  1458  00FF6D  2E                 	db	46
  1459  00FF6E  2E                 	db	46
  1460  00FF6F  2E                 	db	46
  1461  00FF70  00                 	db	0
  1462  00FF71                     STR_113:
  1463  00FF71  50                 	db	80	;'P'
  1464  00FF72  55                 	db	85	;'U'
  1465  00FF73  53                 	db	83	;'S'
  1466  00FF74  48                 	db	72	;'H'
  1467  00FF75  45                 	db	69	;'E'
  1468  00FF76  52                 	db	82	;'R'
  1469  00FF77  20                 	db	32
  1470  00FF78  54                 	db	84	;'T'
  1471  00FF79  53                 	db	83	;'S'
  1472  00FF7A  54                 	db	84	;'T'
  1473  00FF7B  00                 	db	0
  1474  00FF7C                     STR_64:
  1475  00FF7C  53                 	db	83	;'S'
  1476  00FF7D  4F                 	db	79	;'O'
  1477  00FF7E  52                 	db	82	;'R'
  1478  00FF7F  54                 	db	84	;'T'
  1479  00FF80  49                 	db	73	;'I'
  1480  00FF81  4E                 	db	78	;'N'
  1481  00FF82  47                 	db	71	;'G'
  1482  00FF83  2E                 	db	46
  1483  00FF84  2E                 	db	46
  1484  00FF85  2E                 	db	46
  1485  00FF86  00                 	db	0
  1486  00FF87                     STR_84:
  1487  00FF87  54                 	db	84	;'T'
  1488  00FF88  53                 	db	83	;'S'
  1489  00FF89  54                 	db	84	;'T'
  1490  00FF8A  3A                 	db	58	;':'
  1491  00FF8B  20                 	db	32
  1492  00FF8C  43                 	db	67	;'C'
  1493  00FF8D  4F                 	db	79	;'O'
  1494  00FF8E  4E                 	db	78	;'N'
  1495  00FF8F  44                 	db	68	;'D'
  1496  00FF90  00                 	db	0
  1497  00FF91                     STR_88:
  1498  00FF91  41                 	db	65	;'A'
  1499  00FF92  43                 	db	67	;'C'
  1500  00FF93  54                 	db	84	;'T'
  1501  00FF94  55                 	db	85	;'U'
  1502  00FF95  41                 	db	65	;'A'
  1503  00FF96  54                 	db	84	;'T'
  1504  00FF97  4F                 	db	79	;'O'
  1505  00FF98  52                 	db	82	;'R'
  1506  00FF99  53                 	db	83	;'S'
  1507  00FF9A  00                 	db	0
  1508  00FF9B                     STR_22:
  1509  00FF9B  44                 	db	68	;'D'
  1510  00FF9C  55                 	db	85	;'U'
  1511  00FF9D  52                 	db	82	;'R'
  1512  00FF9E  41                 	db	65	;'A'
  1513  00FF9F  54                 	db	84	;'T'
  1514  00FFA0  49                 	db	73	;'I'
  1515  00FFA1  4F                 	db	79	;'O'
  1516  00FFA2  4E                 	db	78	;'N'
  1517  00FFA3  3A                 	db	58	;':'
  1518  00FFA4  00                 	db	0
  1519  00FFA5                     STR_86:
  1520  00FFA5  43                 	db	67	;'C'
  1521  00FFA6  4F                 	db	79	;'O'
  1522  00FFA7  4E                 	db	78	;'N'
  1523  00FFA8  44                 	db	68	;'D'
  1524  00FFA9  3A                 	db	58	;':'
  1525  00FFAA  20                 	db	32
  1526  00FFAB  25                 	db	37
  1527  00FFAC  64                 	db	100	;'d'
  1528  00FFAD  00                 	db	0
  1529  00FFAE                     STR_77:
  1530  00FFAE  53                 	db	83	;'S'
  1531  00FFAF  45                 	db	69	;'E'
  1532  00FFB0  4E                 	db	78	;'N'
  1533  00FFB1  53                 	db	83	;'S'
  1534  00FFB2  4F                 	db	79	;'O'
  1535  00FFB3  52                 	db	82	;'R'
  1536  00FFB4  53                 	db	83	;'S'
  1537  00FFB5  00                 	db	0
  1538  00FFB6                     STR_126:
  1539  00FFB6  28                 	db	40
  1540  00FFB7  6E                 	db	110	;'n'
  1541  00FFB8  75                 	db	117	;'u'
  1542  00FFB9  6C                 	db	108	;'l'
  1543  00FFBA  6C                 	db	108	;'l'
  1544  00FFBB  29                 	db	41
  1545  00FFBC  00                 	db	0
  1546  00FFBD                     STR_67:
  1547  00FFBD  46                 	db	70	;'F'
  1548  00FFBE  41                 	db	65	;'A'
  1549  00FFBF  49                 	db	73	;'I'
  1550  00FFC0  4C                 	db	76	;'L'
  1551  00FFC1  45                 	db	69	;'E'
  1552  00FFC2  44                 	db	68	;'D'
  1553  00FFC3  00                 	db	0
  1554  00FFC4                     STR_7:
  1555  00FFC4  53                 	db	83	;'S'
  1556  00FFC5  54                 	db	84	;'T'
  1557  00FFC6  41                 	db	65	;'A'
  1558  00FFC7  52                 	db	82	;'R'
  1559  00FFC8  54                 	db	84	;'T'
  1560  00FFC9  3A                 	db	58	;':'
  1561  00FFCA  00                 	db	0
  1562  00FFCB                     STR_9:
  1563  00FFCB  46                 	db	70	;'F'
  1564  00FFCC  45                 	db	69	;'E'
  1565  00FFCD  42                 	db	66	;'B'
  1566  00FFCE  00                 	db	0
  1567  00FFCF                     STR_19:
  1568  00FFCF  44                 	db	68	;'D'
  1569  00FFD0  45                 	db	69	;'E'
  1570  00FFD1  43                 	db	67	;'C'
  1571  00FFD2  00                 	db	0
  1572  00FFD3                     STR_15:
  1573  00FFD3  41                 	db	65	;'A'
  1574  00FFD4  55                 	db	85	;'U'
  1575  00FFD5  47                 	db	71	;'G'
  1576  00FFD6  00                 	db	0
  1577  00FFD7                     STR_14:
  1578  00FFD7  4A                 	db	74	;'J'
  1579  00FFD8  55                 	db	85	;'U'
  1580  00FFD9  4C                 	db	76	;'L'
  1581  00FFDA  00                 	db	0
  1582  00FFDB                     STR_8:
  1583  00FFDB  4A                 	db	74	;'J'
  1584  00FFDC  41                 	db	65	;'A'
  1585  00FFDD  4E                 	db	78	;'N'
  1586  00FFDE  00                 	db	0
  1587  00FFDF                     STR_13:
  1588  00FFDF  4A                 	db	74	;'J'
  1589  00FFE0  55                 	db	85	;'U'
  1590  00FFE1  4E                 	db	78	;'N'
  1591  00FFE2  00                 	db	0
  1592  00FFE3                     STR_16:
  1593  00FFE3  53                 	db	83	;'S'
  1594  00FFE4  45                 	db	69	;'E'
  1595  00FFE5  50                 	db	80	;'P'
  1596  00FFE6  00                 	db	0
  1597  00FFE7                     STR_10:
  1598  00FFE7  4D                 	db	77	;'M'
  1599  00FFE8  41                 	db	65	;'A'
  1600  00FFE9  52                 	db	82	;'R'
  1601  00FFEA  00                 	db	0
  1602  00FFEB                     STR_11:
  1603  00FFEB  41                 	db	65	;'A'
  1604  00FFEC  50                 	db	80	;'P'
  1605  00FFED  52                 	db	82	;'R'
  1606  00FFEE  00                 	db	0
  1607  00FFEF                     STR_20:
  1608  00FFEF  45                 	db	69	;'E'
  1609  00FFF0  52                 	db	82	;'R'
  1610  00FFF1  52                 	db	82	;'R'
  1611  00FFF2  00                 	db	0
  1612  00FFF3                     STR_17:
  1613  00FFF3  4F                 	db	79	;'O'
  1614  00FFF4  43                 	db	67	;'C'
  1615  00FFF5  54                 	db	84	;'T'
  1616  00FFF6  00                 	db	0
  1617  00FFF7                     STR_18:
  1618  00FFF7  4E                 	db	78	;'N'
  1619  00FFF8  4F                 	db	79	;'O'
  1620  00FFF9  56                 	db	86	;'V'
  1621  00FFFA  00                 	db	0
  1622  00FFFB                     STR_12:
  1623  00FFFB  4D                 	db	77	;'M'
  1624  00FFFC  41                 	db	65	;'A'
  1625  00FFFD  59                 	db	89	;'Y'
  1626  00FFFE  00                 	db	0
  1627  0000                     
  1628                           ; #config settings
  1629  00FFFF  00                 	db	0	; dummy byte at the end
  1630  0000                     
  1631                           	psect	cinit
  1632  0047D2                     __pcinit:
  1633                           	opt stack 0
  1634  0047D2                     start_initialization:
  1635                           	opt stack 0
  1636  0047D2                     __initialization:
  1637                           	opt stack 0
  1638                           
  1639                           ; Initialize objects allocated to BANK1 (8 bytes)
  1640                           ; load TBLPTR registers with __pidataBANK1
  1641  0047D2  0E18               	movlw	low __pidataBANK1
  1642  0047D4  6EF6               	movwf	tblptrl,c
  1643  0047D6  0E4F               	movlw	high __pidataBANK1
  1644  0047D8  6EF7               	movwf	tblptrh,c
  1645  0047DA  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1646  0047DC  6EF8               	movwf	tblptru,c
  1647  0047DE  EE01  F035         	lfsr	0,__pdataBANK1
  1648  0047E2  EE10 F008          	lfsr	1,8
  1649  0047E6                     copy_data0:
  1650  0047E6  0009               	tblrd		*+
  1651  0047E8  CFF5 FFEE          	movff	tablat,postinc0
  1652  0047EC  50E5               	movf	postdec1,w,c
  1653  0047EE  50E1               	movf	fsr1l,w,c
  1654  0047F0  E1FA               	bnz	copy_data0
  1655                           
  1656                           ; Clear objects allocated to BANK1 (53 bytes)
  1657  0047F2  EE01  F000         	lfsr	0,__pbssBANK1
  1658  0047F6  0E35               	movlw	53
  1659  0047F8                     clear_0:
  1660  0047F8  6AEE               	clrf	postinc0,c
  1661  0047FA  06E8               	decf	wreg,f,c
  1662  0047FC  E1FD               	bnz	clear_0
  1663                           
  1664                           ; Clear objects allocated to BANK0 (38 bytes)
  1665  0047FE  EE00  F0DA         	lfsr	0,__pbssBANK0
  1666  004802  0E26               	movlw	38
  1667  004804                     clear_1:
  1668  004804  6AEE               	clrf	postinc0,c
  1669  004806  06E8               	decf	wreg,f,c
  1670  004808  E1FD               	bnz	clear_1
  1671                           
  1672                           ; Clear objects allocated to COMRAM (37 bytes)
  1673  00480A  EE00  F059         	lfsr	0,__pbssCOMRAM
  1674  00480E  0E25               	movlw	37
  1675  004810                     clear_2:
  1676  004810  6AEE               	clrf	postinc0,c
  1677  004812  06E8               	decf	wreg,f,c
  1678  004814  E1FD               	bnz	clear_2
  1679  004816                     end_of_initialization:
  1680                           	opt stack 0
  1681  004816                     __end_of__initialization:
  1682                           	opt stack 0
  1683  004816  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1684  004818  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1685  00481A  0100               	movlb	0
  1686  00481C  EF7E  F01E         	goto	_main	;jump to C main() function
  1687                           tblptru	equ	0xFF8
  1688                           tblptrh	equ	0xFF7
  1689                           tblptrl	equ	0xFF6
  1690                           tablat	equ	0xFF5
  1691                           postinc0	equ	0xFEE
  1692                           wreg	equ	0xFE8
  1693                           postdec1	equ	0xFE5
  1694                           fsr1l	equ	0xFE1
  1695                           
  1696                           	psect	bssCOMRAM
  1697  000059                     __pbssCOMRAM:
  1698                           	opt stack 0
  1699  000059                     _back:
  1700                           	opt stack 0
  1701  000059                     	ds	2
  1702  00005B                     _count_pop_no_tab:
  1703                           	opt stack 0
  1704  00005B                     	ds	2
  1705  00005D                     _count_pop_w_tab:
  1706                           	opt stack 0
  1707  00005D                     	ds	2
  1708  00005F                     _debug:
  1709                           	opt stack 0
  1710  00005F                     	ds	2
  1711  000061                     _down:
  1712                           	opt stack 0
  1713  000061                     	ds	2
  1714  000063                     _enter:
  1715                           	opt stack 0
  1716  000063                     	ds	2
  1717  000065                     _f_ID_receive:
  1718                           	opt stack 0
  1719  000065                     	ds	2
  1720  000067                     _f_can_coming_to_ID:
  1721                           	opt stack 0
  1722  000067                     	ds	2
  1723  000069                     _f_can_coming_to_distribution:
  1724                           	opt stack 0
  1725  000069                     	ds	2
  1726  00006B                     _f_most_recent_sort_time:
  1727                           	opt stack 0
  1728  00006B                     	ds	2
  1729  00006D                     _first:
  1730                           	opt stack 0
  1731  00006D                     	ds	2
  1732  00006F                     _firstboot:
  1733                           	opt stack 0
  1734  00006F                     	ds	2
  1735  000071                     _log_count_can_no_lab:
  1736                           	opt stack 0
  1737  000071                     	ds	2
  1738  000073                     _log_count_can_w_lab:
  1739                           	opt stack 0
  1740  000073                     	ds	2
  1741  000075                     _log_count_total:
  1742                           	opt stack 0
  1743  000075                     	ds	2
  1744  000077                     _up:
  1745                           	opt stack 0
  1746  000077                     	ds	2
  1747  000079                     _was_low_1:
  1748                           	opt stack 0
  1749  000079                     	ds	2
  1750  00007B                     _was_low_3:
  1751                           	opt stack 0
  1752  00007B                     	ds	2
  1753  00007D                     _input:
  1754                           	opt stack 0
  1755  00007D                     	ds	1
  1756                           tblptru	equ	0xFF8
  1757                           tblptrh	equ	0xFF7
  1758                           tblptrl	equ	0xFF6
  1759                           tablat	equ	0xFF5
  1760                           postinc0	equ	0xFEE
  1761                           wreg	equ	0xFE8
  1762                           postdec1	equ	0xFE5
  1763                           fsr1l	equ	0xFE1
  1764                           
  1765                           	psect	bssBANK0
  1766  0000DA                     __pbssBANK0:
  1767                           	opt stack 0
  1768  0000DA                     _sensor_outputs:
  1769                           	opt stack 0
  1770  0000DA                     	ds	4
  1771  0000DE                     _IR_signal:
  1772                           	opt stack 0
  1773  0000DE                     	ds	2
  1774  0000E0                     _MAG_signal:
  1775                           	opt stack 0
  1776  0000E0                     	ds	2
  1777  0000E2                     _RTCflag:
  1778                           	opt stack 0
  1779  0000E2                     	ds	2
  1780  0000E4                     _cur_can:
  1781                           	opt stack 0
  1782  0000E4                     	ds	2
  1783  0000E6                     _cur_state:
  1784                           	opt stack 0
  1785  0000E6                     	ds	2
  1786  0000E8                     _f_lastCan:
  1787                           	opt stack 0
  1788  0000E8                     	ds	2
  1789  0000EA                     _f_loadingNewCan:
  1790                           	opt stack 0
  1791  0000EA                     	ds	2
  1792  0000EC                     _log:
  1793                           	opt stack 0
  1794  0000EC                     	ds	2
  1795  0000EE                     _log_completion:
  1796                           	opt stack 0
  1797  0000EE                     	ds	2
  1798  0000F0                     _log_count_pop_no_tab:
  1799                           	opt stack 0
  1800  0000F0                     	ds	2
  1801  0000F2                     _log_count_pop_w_tab:
  1802                           	opt stack 0
  1803  0000F2                     	ds	2
  1804  0000F4                     _log_total_time:
  1805                           	opt stack 0
  1806  0000F4                     	ds	2
  1807  0000F6                     _logstate:
  1808                           	opt stack 0
  1809  0000F6                     	ds	2
  1810  0000F8                     _total_time:
  1811                           	opt stack 0
  1812  0000F8                     	ds	2
  1813  0000FA                     _var:
  1814                           	opt stack 0
  1815  0000FA                     	ds	2
  1816  0000FC                     _machine_state:
  1817                           	opt stack 0
  1818  0000FC                     	ds	1
  1819  0000FD                     _sel:
  1820                           	opt stack 0
  1821  0000FD                     	ds	1
  1822  0000FE                     _count_total:
  1823                           	opt stack 0
  1824  0000FE                     	ds	2
  1825                           tblptru	equ	0xFF8
  1826                           tblptrh	equ	0xFF7
  1827                           tblptrl	equ	0xFF6
  1828                           tablat	equ	0xFF5
  1829                           postinc0	equ	0xFEE
  1830                           wreg	equ	0xFE8
  1831                           postdec1	equ	0xFE5
  1832                           fsr1l	equ	0xFE1
  1833                           
  1834                           	psect	bssBANK1
  1835  000100                     __pbssBANK1:
  1836                           	opt stack 0
  1837  000100                     _log_startTime:
  1838                           	opt stack 0
  1839  000100                     	ds	14
  1840  00010E                     _startTime:
  1841                           	opt stack 0
  1842  00010E                     	ds	14
  1843  00011C                     _servoTimes:
  1844                           	opt stack 0
  1845  00011C                     	ds	8
  1846  000124                     _time:
  1847                           	opt stack 0
  1848  000124                     	ds	7
  1849  00012B                     _count_can_no_lab:
  1850                           	opt stack 0
  1851  00012B                     	ds	2
  1852  00012D                     _count_can_w_lab:
  1853                           	opt stack 0
  1854  00012D                     	ds	2
  1855  00012F                     _f_can_distributed:
  1856                           	opt stack 0
  1857  00012F                     	ds	2
  1858  000131                     _i:
  1859                           	opt stack 0
  1860  000131                     	ds	2
  1861  000133                     _most_recent_sort_time:
  1862                           	opt stack 0
  1863  000133                     	ds	2
  1864                           tblptru	equ	0xFF8
  1865                           tblptrh	equ	0xFF7
  1866                           tblptrl	equ	0xFF6
  1867                           tablat	equ	0xFF5
  1868                           postinc0	equ	0xFEE
  1869                           wreg	equ	0xFE8
  1870                           postdec1	equ	0xFE5
  1871                           fsr1l	equ	0xFE1
  1872                           
  1873                           	psect	dataBANK1
  1874  000135                     __pdataBANK1:
  1875                           	opt stack 0
  1876  000135                     UI@F3228:
  1877                           	opt stack 0
  1878  000135                     	ds	4
  1879  000139                     printRTC@F3219:
  1880                           	opt stack 0
  1881  000139                     	ds	4
  1882                           tblptru	equ	0xFF8
  1883                           tblptrh	equ	0xFF7
  1884                           tblptrl	equ	0xFF6
  1885                           tablat	equ	0xFF5
  1886                           postinc0	equ	0xFEE
  1887                           wreg	equ	0xFE8
  1888                           postdec1	equ	0xFE5
  1889                           fsr1l	equ	0xFE1
  1890                           
  1891                           	psect	cstackBANK0
  1892  000080                     __pcstackBANK0:
  1893                           	opt stack 0
  1894  000080                     ??_delay_ms:
  1895  000080                     ??_PortTests:
  1896  000080                     ??_isdigit:
  1897  000080                     ??_readADC:
  1898  000080                     ??_I2C_Master_Wait:
  1899  000080                     ?___wmul:
  1900                           	opt stack 0
  1901  000080                     ?___awmod:
  1902                           	opt stack 0
  1903  000080                     ?___lwdiv:
  1904                           	opt stack 0
  1905  000080                     ?___lldiv:
  1906                           	opt stack 0
  1907  000080                     lcdNibble@temp:
  1908                           	opt stack 0
  1909  000080                     initTime@m:
  1910                           	opt stack 0
  1911  000080                     updateServoPosition@time_us:
  1912                           	opt stack 0
  1913  000080                     EEPROM_read@address:
  1914                           	opt stack 0
  1915  000080                     ___wmul@multiplier:
  1916                           	opt stack 0
  1917  000080                     ___awmod@dividend:
  1918                           	opt stack 0
  1919  000080                     ___lwdiv@dividend:
  1920                           	opt stack 0
  1921  000080                     strcpy@to:
  1922                           	opt stack 0
  1923  000080                     ___lldiv@dividend:
  1924                           	opt stack 0
  1925                           
  1926                           ; 4 bytes @ 0x0
  1927  000080                     	ds	1
  1928  000081                     readADC@channel:
  1929                           	opt stack 0
  1930  000081                     I2C_Master_Read@a:
  1931                           	opt stack 0
  1932  000081                     lcdNibble@data:
  1933                           	opt stack 0
  1934  000081                     initTime@h:
  1935                           	opt stack 0
  1936  000081                     delay_ms@milliseconds:
  1937                           	opt stack 0
  1938  000081                     _isdigit$1975:
  1939                           	opt stack 0
  1940  000081                     I2C_Master_Write@d:
  1941                           	opt stack 0
  1942                           
  1943                           ; 2 bytes @ 0x1
  1944  000081                     	ds	1
  1945  000082                     ??_ID:
  1946  000082                     ??_readIR:
  1947  000082                     ??_readMAG:
  1948  000082                     I2C_Master_Read@temp:
  1949                           	opt stack 0
  1950  000082                     lcdInst@data:
  1951                           	opt stack 0
  1952  000082                     putch@data:
  1953                           	opt stack 0
  1954  000082                     initTime@w:
  1955                           	opt stack 0
  1956  000082                     isdigit@c:
  1957                           	opt stack 0
  1958  000082                     updateServoPosition@timer:
  1959                           	opt stack 0
  1960  000082                     ___wmul@multiplicand:
  1961                           	opt stack 0
  1962  000082                     ___awmod@divisor:
  1963                           	opt stack 0
  1964  000082                     ___lwdiv@divisor:
  1965                           	opt stack 0
  1966  000082                     strcpy@from:
  1967                           	opt stack 0
  1968                           
  1969                           ; 2 bytes @ 0x2
  1970  000082                     	ds	1
  1971  000083                     ??_initLCD:
  1972  000083                     initTime@DD:
  1973                           	opt stack 0
  1974  000083                     getRTC@i:
  1975                           	opt stack 0
  1976                           
  1977                           ; 2 bytes @ 0x3
  1978  000083                     	ds	1
  1979  000084                     ??_updateServoPosition:
  1980  000084                     initTime@MM:
  1981                           	opt stack 0
  1982  000084                     ___awmod@counter:
  1983                           	opt stack 0
  1984  000084                     readIR@res:
  1985                           	opt stack 0
  1986  000084                     readMAG@res:
  1987                           	opt stack 0
  1988  000084                     ID@i:
  1989                           	opt stack 0
  1990  000084                     ___wmul@product:
  1991                           	opt stack 0
  1992  000084                     ___lwdiv@quotient:
  1993                           	opt stack 0
  1994  000084                     strcpy@cp:
  1995                           	opt stack 0
  1996  000084                     ___lldiv@divisor:
  1997                           	opt stack 0
  1998                           
  1999                           ; 4 bytes @ 0x4
  2000  000084                     	ds	1
  2001  000085                     ??_initSortTimer:
  2002  000085                     initTime@YY:
  2003                           	opt stack 0
  2004  000085                     ___awmod@sign:
  2005                           	opt stack 0
  2006                           
  2007                           ; 1 bytes @ 0x5
  2008  000085                     	ds	1
  2009  000086                     ??_getIR:
  2010  000086                     ??_getMAG:
  2011  000086                     ?___awdiv:
  2012                           	opt stack 0
  2013  000086                     initTime@s:
  2014                           	opt stack 0
  2015  000086                     ___lwdiv@counter:
  2016                           	opt stack 0
  2017  000086                     ID@i_1118:
  2018                           	opt stack 0
  2019  000086                     updateServoPosition@my_time:
  2020                           	opt stack 0
  2021  000086                     ___awdiv@dividend:
  2022                           	opt stack 0
  2023                           
  2024                           ; 2 bytes @ 0x6
  2025  000086                     	ds	1
  2026  000087                     ?___lwmod:
  2027                           	opt stack 0
  2028  000087                     getIR@i:
  2029                           	opt stack 0
  2030  000087                     ___lwmod@dividend:
  2031                           	opt stack 0
  2032                           
  2033                           ; 2 bytes @ 0x7
  2034  000087                     	ds	1
  2035  000088                     ??_Distribution:
  2036  000088                     ??_initServos:
  2037  000088                     initSortTimer@i:
  2038                           	opt stack 0
  2039  000088                     ___awdiv@divisor:
  2040                           	opt stack 0
  2041  000088                     ___lldiv@quotient:
  2042                           	opt stack 0
  2043                           
  2044                           ; 4 bytes @ 0x8
  2045  000088                     	ds	1
  2046  000089                     ___lwmod@divisor:
  2047                           	opt stack 0
  2048                           
  2049                           ; 2 bytes @ 0x9
  2050  000089                     	ds	1
  2051  00008A                     ___awdiv@counter:
  2052                           	opt stack 0
  2053                           
  2054                           ; 1 bytes @ 0xA
  2055  00008A                     	ds	1
  2056  00008B                     ___awdiv@sign:
  2057                           	opt stack 0
  2058  00008B                     ___lwmod@counter:
  2059                           	opt stack 0
  2060                           
  2061                           ; 1 bytes @ 0xB
  2062  00008B                     	ds	1
  2063  00008C                     ___lldiv@counter:
  2064                           	opt stack 0
  2065  00008C                     ___awdiv@quotient:
  2066                           	opt stack 0
  2067                           
  2068                           ; 2 bytes @ 0xC
  2069  00008C                     	ds	1
  2070  00008D                     I2C_Master_Init@c:
  2071                           	opt stack 0
  2072                           
  2073                           ; 4 bytes @ 0xD
  2074  00008D                     	ds	1
  2075  00008E                     ?_printf:
  2076                           	opt stack 0
  2077  00008E                     printf@f:
  2078                           	opt stack 0
  2079                           
  2080                           ; 2 bytes @ 0xE
  2081  00008E                     	ds	3
  2082  000091                     ??_I2C_Master_Init:
  2083                           
  2084                           ; 1 bytes @ 0x11
  2085  000091                     	ds	4
  2086  000095                     ??_loadRTC:
  2087                           
  2088                           ; 1 bytes @ 0x15
  2089  000095                     	ds	1
  2090  000096                     loadRTC@i:
  2091                           	opt stack 0
  2092                           
  2093                           ; 2 bytes @ 0x16
  2094  000096                     	ds	4
  2095  00009A                     ??_printf:
  2096                           
  2097                           ; 1 bytes @ 0x1A
  2098  00009A                     	ds	4
  2099  00009E                     printf@prec:
  2100                           	opt stack 0
  2101                           
  2102                           ; 1 bytes @ 0x1E
  2103  00009E                     	ds	1
  2104  00009F                     printf@cp:
  2105                           	opt stack 0
  2106                           
  2107                           ; 2 bytes @ 0x1F
  2108  00009F                     	ds	2
  2109  0000A1                     printf@ap:
  2110                           	opt stack 0
  2111                           
  2112                           ; 2 bytes @ 0x21
  2113  0000A1                     	ds	2
  2114  0000A3                     printf@len:
  2115                           	opt stack 0
  2116                           
  2117                           ; 2 bytes @ 0x23
  2118  0000A3                     	ds	2
  2119  0000A5                     printf@val:
  2120                           	opt stack 0
  2121                           
  2122                           ; 2 bytes @ 0x25
  2123  0000A5                     	ds	2
  2124  0000A7                     printf@flag:
  2125                           	opt stack 0
  2126                           
  2127                           ; 1 bytes @ 0x27
  2128  0000A7                     	ds	1
  2129  0000A8                     printf@c:
  2130                           	opt stack 0
  2131                           
  2132                           ; 1 bytes @ 0x28
  2133  0000A8                     	ds	1
  2134  0000A9                     printf@width:
  2135                           	opt stack 0
  2136                           
  2137                           ; 2 bytes @ 0x29
  2138  0000A9                     	ds	2
  2139  0000AB                     ??_printRTC:
  2140  0000AB                     ??_algorithmTest:
  2141  0000AB                     ??_sensorTest:
  2142  0000AB                     ??_actuatorTest:
  2143  0000AB                     ??_PortTestA5:
  2144  0000AB                     ??_SpeedTest:
  2145  0000AB                     ??_PusherTest:
  2146  0000AB                     ??_BothServos:
  2147  0000AB                     ??_BlockerTest:
  2148  0000AB                     EEPROM_write@address:
  2149                           	opt stack 0
  2150                           
  2151                           ; 2 bytes @ 0x2B
  2152  0000AB                     	ds	1
  2153  0000AC                     BlockerTest@i:
  2154                           	opt stack 0
  2155                           
  2156                           ; 2 bytes @ 0x2C
  2157  0000AC                     	ds	1
  2158  0000AD                     EEPROM_write@data:
  2159                           	opt stack 0
  2160  0000AD                     actuatorTest@i_1651:
  2161                           	opt stack 0
  2162  0000AD                     sensorTest@res:
  2163                           	opt stack 0
  2164  0000AD                     PusherTest@res:
  2165                           	opt stack 0
  2166                           
  2167                           ; 2 bytes @ 0x2D
  2168  0000AD                     	ds	1
  2169  0000AE                     ??_EEPROM_write:
  2170  0000AE                     actuatorTest@i_1658:
  2171                           	opt stack 0
  2172  0000AE                     BlockerTest@cam_flag:
  2173                           	opt stack 0
  2174  0000AE                     printRTC@INT_time:
  2175                           	opt stack 0
  2176                           
  2177                           ; 14 bytes @ 0x2E
  2178  0000AE                     	ds	1
  2179  0000AF                     EEPROM_write@i:
  2180                           	opt stack 0
  2181  0000AF                     actuatorTest@i_1659:
  2182                           	opt stack 0
  2183  0000AF                     PusherTest@res_1706:
  2184                           	opt stack 0
  2185                           
  2186                           ; 2 bytes @ 0x2F
  2187  0000AF                     	ds	1
  2188  0000B0                     EEPROM_write@i_1337:
  2189                           	opt stack 0
  2190  0000B0                     actuatorTest@i_1661:
  2191                           	opt stack 0
  2192  0000B0                     BlockerTest@cond_flag:
  2193                           	opt stack 0
  2194                           
  2195                           ; 2 bytes @ 0x30
  2196  0000B0                     	ds	1
  2197  0000B1                     ??_Loading:
  2198  0000B1                     logRun@num:
  2199                           	opt stack 0
  2200  0000B1                     actuatorTest@i_1662:
  2201                           	opt stack 0
  2202  0000B1                     PusherTest@i:
  2203                           	opt stack 0
  2204                           
  2205                           ; 2 bytes @ 0x31
  2206  0000B1                     	ds	1
  2207  0000B2                     logRun@byte1:
  2208                           	opt stack 0
  2209  0000B2                     actuatorTest@i_1664:
  2210                           	opt stack 0
  2211                           
  2212                           ; 1 bytes @ 0x32
  2213  0000B2                     	ds	1
  2214  0000B3                     logRun@byte2:
  2215                           	opt stack 0
  2216  0000B3                     actuatorTest@i_1665:
  2217                           	opt stack 0
  2218  0000B3                     Loading@addr:
  2219                           	opt stack 0
  2220  0000B3                     PusherTest@i_1710:
  2221                           	opt stack 0
  2222                           
  2223                           ; 2 bytes @ 0x33
  2224  0000B3                     	ds	1
  2225  0000B4                     logRun@byte3:
  2226                           	opt stack 0
  2227  0000B4                     actuatorTest@i_1667:
  2228                           	opt stack 0
  2229                           
  2230                           ; 1 bytes @ 0x34
  2231  0000B4                     	ds	1
  2232  0000B5                     Loading@byte1:
  2233                           	opt stack 0
  2234  0000B5                     logRun@byte_i:
  2235                           	opt stack 0
  2236  0000B5                     actuatorTest@i_1668:
  2237                           	opt stack 0
  2238                           
  2239                           ; 1 bytes @ 0x35
  2240  0000B5                     	ds	1
  2241  0000B6                     logRun@byte11:
  2242                           	opt stack 0
  2243  0000B6                     actuatorTest@i_1670:
  2244                           	opt stack 0
  2245  0000B6                     Loading@i_1103:
  2246                           	opt stack 0
  2247                           
  2248                           ; 2 bytes @ 0x36
  2249  0000B6                     	ds	1
  2250  0000B7                     actuatorTest@i_1671:
  2251                           	opt stack 0
  2252  0000B7                     logRun@i:
  2253                           	opt stack 0
  2254                           
  2255                           ; 2 bytes @ 0x37
  2256  0000B7                     	ds	1
  2257  0000B8                     actuatorTest@i_1673:
  2258                           	opt stack 0
  2259  0000B8                     Loading@i_1104:
  2260                           	opt stack 0
  2261                           
  2262                           ; 2 bytes @ 0x38
  2263  0000B8                     	ds	1
  2264  0000B9                     actuatorTest@i_1674:
  2265                           	opt stack 0
  2266  0000B9                     logRun@addr:
  2267                           	opt stack 0
  2268                           
  2269                           ; 2 bytes @ 0x39
  2270  0000B9                     	ds	1
  2271  0000BA                     actuatorTest@i_1677:
  2272                           	opt stack 0
  2273  0000BA                     Loading@i_1106:
  2274                           	opt stack 0
  2275                           
  2276                           ; 2 bytes @ 0x3A
  2277  0000BA                     	ds	1
  2278  0000BB                     actuatorTest@i_1678:
  2279                           	opt stack 0
  2280                           
  2281                           ; 1 bytes @ 0x3B
  2282  0000BB                     	ds	1
  2283  0000BC                     actuatorTest@i_1680:
  2284                           	opt stack 0
  2285  0000BC                     printRTC@RTC_month:
  2286                           	opt stack 0
  2287  0000BC                     Loading@i_1107:
  2288                           	opt stack 0
  2289                           
  2290                           ; 2 bytes @ 0x3C
  2291  0000BC                     	ds	1
  2292  0000BD                     actuatorTest@i_1681:
  2293                           	opt stack 0
  2294                           
  2295                           ; 1 bytes @ 0x3D
  2296  0000BD                     	ds	1
  2297  0000BE                     actuatorTest@i_1683:
  2298                           	opt stack 0
  2299  0000BE                     Loading@i:
  2300                           	opt stack 0
  2301  0000BE                     printRTC@month:
  2302                           	opt stack 0
  2303                           
  2304                           ; 4 bytes @ 0x3E
  2305  0000BE                     	ds	1
  2306  0000BF                     actuatorTest@i_1684:
  2307                           	opt stack 0
  2308                           
  2309                           ; 1 bytes @ 0x3F
  2310  0000BF                     	ds	1
  2311  0000C0                     actuatorTest@i_1687:
  2312                           	opt stack 0
  2313                           
  2314                           ; 1 bytes @ 0x40
  2315  0000C0                     	ds	1
  2316  0000C1                     actuatorTest@i_1688:
  2317                           	opt stack 0
  2318                           
  2319                           ; 1 bytes @ 0x41
  2320  0000C1                     	ds	1
  2321  0000C2                     actuatorTest@i_1690:
  2322                           	opt stack 0
  2323  0000C2                     printRTC@i:
  2324                           	opt stack 0
  2325                           
  2326                           ; 2 bytes @ 0x42
  2327  0000C2                     	ds	1
  2328  0000C3                     actuatorTest@i_1691:
  2329                           	opt stack 0
  2330                           
  2331                           ; 1 bytes @ 0x43
  2332  0000C3                     	ds	1
  2333  0000C4                     ??_UI:
  2334  0000C4                     actuatorTest@i:
  2335                           	opt stack 0
  2336                           
  2337                           ; 2 bytes @ 0x44
  2338  0000C4                     	ds	2
  2339  0000C6                     ??_Test:
  2340  0000C6                     _UI$2331:
  2341                           	opt stack 0
  2342                           
  2343                           ; 2 bytes @ 0x46
  2344  0000C6                     	ds	2
  2345  0000C8                     UI@i:
  2346                           	opt stack 0
  2347                           
  2348                           ; 1 bytes @ 0x48
  2349  0000C8                     	ds	1
  2350  0000C9                     UI@i_409:
  2351                           	opt stack 0
  2352                           
  2353                           ; 1 bytes @ 0x49
  2354  0000C9                     	ds	1
  2355  0000CA                     UI@i_412:
  2356                           	opt stack 0
  2357                           
  2358                           ; 1 bytes @ 0x4A
  2359  0000CA                     	ds	1
  2360  0000CB                     UI@i_413:
  2361                           	opt stack 0
  2362                           
  2363                           ; 1 bytes @ 0x4B
  2364  0000CB                     	ds	1
  2365  0000CC                     UI@i_431:
  2366                           	opt stack 0
  2367                           
  2368                           ; 1 bytes @ 0x4C
  2369  0000CC                     	ds	1
  2370  0000CD                     UI@i_432:
  2371                           	opt stack 0
  2372                           
  2373                           ; 1 bytes @ 0x4D
  2374  0000CD                     	ds	1
  2375  0000CE                     UI@i_435:
  2376                           	opt stack 0
  2377                           
  2378                           ; 1 bytes @ 0x4E
  2379  0000CE                     	ds	1
  2380  0000CF                     UI@i_436:
  2381                           	opt stack 0
  2382                           
  2383                           ; 1 bytes @ 0x4F
  2384  0000CF                     	ds	1
  2385  0000D0                     UI@i_439:
  2386                           	opt stack 0
  2387                           
  2388                           ; 1 bytes @ 0x50
  2389  0000D0                     	ds	1
  2390  0000D1                     UI@i_440:
  2391                           	opt stack 0
  2392                           
  2393                           ; 1 bytes @ 0x51
  2394  0000D1                     	ds	1
  2395  0000D2                     UI@i_443:
  2396                           	opt stack 0
  2397                           
  2398                           ; 1 bytes @ 0x52
  2399  0000D2                     	ds	1
  2400  0000D3                     UI@i_444:
  2401                           	opt stack 0
  2402                           
  2403                           ; 1 bytes @ 0x53
  2404  0000D3                     	ds	1
  2405  0000D4                     UI@i_447:
  2406                           	opt stack 0
  2407                           
  2408                           ; 1 bytes @ 0x54
  2409  0000D4                     	ds	1
  2410  0000D5                     UI@i_448:
  2411                           	opt stack 0
  2412                           
  2413                           ; 1 bytes @ 0x55
  2414  0000D5                     	ds	1
  2415  0000D6                     UI@month:
  2416                           	opt stack 0
  2417                           
  2418                           ; 4 bytes @ 0x56
  2419  0000D6                     	ds	4
  2420  0000DA                     tblptru	equ	0xFF8
  2421                           tblptrh	equ	0xFF7
  2422                           tblptrl	equ	0xFF6
  2423                           tablat	equ	0xFF5
  2424                           postinc0	equ	0xFEE
  2425                           wreg	equ	0xFE8
  2426                           postdec1	equ	0xFE5
  2427                           fsr1l	equ	0xFE1
  2428                           
  2429                           ; 1 bytes @ 0x5A
  2430                           
  2431                           	psect	cstackCOMRAM
  2432  000001                     __pcstackCOMRAM:
  2433                           	opt stack 0
  2434  000001                     ??i2_I2C_Master_Wait:
  2435  000001                     ??i2_isdigit:
  2436  000001                     ?i2___wmul:
  2437                           	opt stack 0
  2438  000001                     ?i2___lwmod:
  2439                           	opt stack 0
  2440  000001                     i2lcdNibble@temp:
  2441                           	opt stack 0
  2442  000001                     i2EEPROM_read@address:
  2443                           	opt stack 0
  2444  000001                     i2___wmul@multiplier:
  2445                           	opt stack 0
  2446  000001                     i2___lwmod@dividend:
  2447                           	opt stack 0
  2448  000001                     i2strcpy@to:
  2449                           	opt stack 0
  2450                           
  2451                           ; 2 bytes @ 0x0
  2452  000001                     	ds	1
  2453  000002                     i2I2C_Master_Read@a:
  2454                           	opt stack 0
  2455  000002                     i2lcdNibble@data:
  2456                           	opt stack 0
  2457  000002                     i2_isdigit$1975:
  2458                           	opt stack 0
  2459  000002                     i2I2C_Master_Write@d:
  2460                           	opt stack 0
  2461                           
  2462                           ; 2 bytes @ 0x1
  2463  000002                     	ds	1
  2464  000003                     i2I2C_Master_Read@temp:
  2465                           	opt stack 0
  2466  000003                     i2lcdInst@data:
  2467                           	opt stack 0
  2468  000003                     i2putch@data:
  2469                           	opt stack 0
  2470  000003                     i2isdigit@c:
  2471                           	opt stack 0
  2472  000003                     i2___wmul@multiplicand:
  2473                           	opt stack 0
  2474  000003                     i2___lwmod@divisor:
  2475                           	opt stack 0
  2476  000003                     i2strcpy@from:
  2477                           	opt stack 0
  2478                           
  2479                           ; 2 bytes @ 0x2
  2480  000003                     	ds	1
  2481  000004                     i2getRTC@i:
  2482                           	opt stack 0
  2483                           
  2484                           ; 2 bytes @ 0x3
  2485  000004                     	ds	1
  2486  000005                     i2___lwmod@counter:
  2487                           	opt stack 0
  2488  000005                     i2___wmul@product:
  2489                           	opt stack 0
  2490  000005                     i2strcpy@cp:
  2491                           	opt stack 0
  2492                           
  2493                           ; 2 bytes @ 0x4
  2494  000005                     	ds	1
  2495  000006                     ?i2___lwdiv:
  2496                           	opt stack 0
  2497  000006                     i2___lwdiv@dividend:
  2498                           	opt stack 0
  2499                           
  2500                           ; 2 bytes @ 0x5
  2501  000006                     	ds	1
  2502  000007                     retrieveLog@logNum:
  2503                           	opt stack 0
  2504                           
  2505                           ; 2 bytes @ 0x6
  2506  000007                     	ds	1
  2507  000008                     i2___lwdiv@divisor:
  2508                           	opt stack 0
  2509                           
  2510                           ; 2 bytes @ 0x7
  2511  000008                     	ds	1
  2512  000009                     ??_retrieveLog:
  2513                           
  2514                           ; 1 bytes @ 0x8
  2515  000009                     	ds	1
  2516  00000A                     i2___lwdiv@quotient:
  2517                           	opt stack 0
  2518                           
  2519                           ; 2 bytes @ 0x9
  2520  00000A                     	ds	1
  2521  00000B                     retrieveLog@byte1:
  2522                           	opt stack 0
  2523                           
  2524                           ; 1 bytes @ 0xA
  2525  00000B                     	ds	1
  2526  00000C                     retrieveLog@byte2:
  2527                           	opt stack 0
  2528  00000C                     i2___lwdiv@counter:
  2529                           	opt stack 0
  2530                           
  2531                           ; 1 bytes @ 0xB
  2532  00000C                     	ds	1
  2533  00000D                     ?i2_printf:
  2534                           	opt stack 0
  2535  00000D                     retrieveLog@byte3:
  2536                           	opt stack 0
  2537  00000D                     i2printf@f:
  2538                           	opt stack 0
  2539                           
  2540                           ; 2 bytes @ 0xC
  2541  00000D                     	ds	1
  2542  00000E                     retrieveLog@i:
  2543                           	opt stack 0
  2544                           
  2545                           ; 2 bytes @ 0xD
  2546  00000E                     	ds	2
  2547  000010                     retrieveLog@addr:
  2548                           	opt stack 0
  2549                           
  2550                           ; 2 bytes @ 0xF
  2551  000010                     	ds	2
  2552  000012                     dispLogs@myLog:
  2553                           	opt stack 0
  2554                           
  2555                           ; 2 bytes @ 0x11
  2556  000012                     	ds	2
  2557  000014                     
  2558                           ; 1 bytes @ 0x13
  2559  000014                     	ds	5
  2560  000019                     ??i2_printf:
  2561                           
  2562                           ; 1 bytes @ 0x18
  2563  000019                     	ds	4
  2564  00001D                     i2printf@prec:
  2565                           	opt stack 0
  2566                           
  2567                           ; 1 bytes @ 0x1C
  2568  00001D                     	ds	1
  2569  00001E                     i2printf@cp:
  2570                           	opt stack 0
  2571                           
  2572                           ; 2 bytes @ 0x1D
  2573  00001E                     	ds	2
  2574  000020                     i2printf@ap:
  2575                           	opt stack 0
  2576                           
  2577                           ; 2 bytes @ 0x1F
  2578  000020                     	ds	2
  2579  000022                     i2printf@len:
  2580                           	opt stack 0
  2581                           
  2582                           ; 2 bytes @ 0x21
  2583  000022                     	ds	2
  2584  000024                     i2printf@val:
  2585                           	opt stack 0
  2586                           
  2587                           ; 2 bytes @ 0x23
  2588  000024                     	ds	2
  2589  000026                     i2printf@flag:
  2590                           	opt stack 0
  2591                           
  2592                           ; 1 bytes @ 0x25
  2593  000026                     	ds	1
  2594  000027                     i2printf@c:
  2595                           	opt stack 0
  2596                           
  2597                           ; 1 bytes @ 0x26
  2598  000027                     	ds	1
  2599  000028                     i2printf@width:
  2600                           	opt stack 0
  2601                           
  2602                           ; 2 bytes @ 0x27
  2603  000028                     	ds	2
  2604  00002A                     ??_printSortTimer:
  2605  00002A                     ??i2_printRTC:
  2606  00002A                     ?_inputHandler:
  2607                           	opt stack 0
  2608                           
  2609                           ; 2 bytes @ 0x29
  2610  00002A                     	ds	2
  2611  00002C                     ??_inputHandler:
  2612                           
  2613                           ; 1 bytes @ 0x2B
  2614  00002C                     	ds	1
  2615  00002D                     printSortTimer@curTime:
  2616                           	opt stack 0
  2617  00002D                     i2printRTC@INT_time:
  2618                           	opt stack 0
  2619                           
  2620                           ; 14 bytes @ 0x2C
  2621  00002D                     	ds	14
  2622  00003B                     printSortTimer@start_sec:
  2623                           	opt stack 0
  2624  00003B                     i2printRTC@RTC_month:
  2625                           	opt stack 0
  2626                           
  2627                           ; 2 bytes @ 0x3A
  2628  00003B                     	ds	2
  2629  00003D                     printSortTimer@cur_sec:
  2630                           	opt stack 0
  2631  00003D                     i2printRTC@month:
  2632                           	opt stack 0
  2633                           
  2634                           ; 4 bytes @ 0x3C
  2635  00003D                     	ds	2
  2636  00003F                     printSortTimer@min:
  2637                           	opt stack 0
  2638                           
  2639                           ; 2 bytes @ 0x3E
  2640  00003F                     	ds	2
  2641  000041                     printSortTimer@sec:
  2642                           	opt stack 0
  2643  000041                     i2printRTC@i:
  2644                           	opt stack 0
  2645                           
  2646                           ; 2 bytes @ 0x40
  2647  000041                     	ds	2
  2648  000043                     ??_updateMenu:
  2649  000043                     _printSortTimer$2451:
  2650                           	opt stack 0
  2651                           
  2652                           ; 2 bytes @ 0x42
  2653  000043                     	ds	2
  2654  000045                     printSortTimer@timeDiff:
  2655                           	opt stack 0
  2656                           
  2657                           ; 2 bytes @ 0x44
  2658  000045                     	ds	2
  2659  000047                     printSortTimer@i:
  2660                           	opt stack 0
  2661                           
  2662                           ; 2 bytes @ 0x46
  2663  000047                     	ds	2
  2664  000049                     ??_handler:
  2665                           
  2666                           ; 1 bytes @ 0x48
  2667  000049                     	ds	16
  2668                           tblptru	equ	0xFF8
  2669                           tblptrh	equ	0xFF7
  2670                           tblptrl	equ	0xFF6
  2671                           tablat	equ	0xFF5
  2672                           postinc0	equ	0xFEE
  2673                           wreg	equ	0xFE8
  2674                           postdec1	equ	0xFE5
  2675                           fsr1l	equ	0xFE1
  2676                           
  2677 ;;
  2678 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2679 ;;
  2680 ;; *************** function _main *****************
  2681 ;; Defined at:
  2682 ;;		line 19 in file "main.c"
  2683 ;; Parameters:    Size  Location     Type
  2684 ;;		None
  2685 ;; Auto vars:     Size  Location     Type
  2686 ;;		None
  2687 ;; Return value:  Size  Location     Type
  2688 ;;                  1    wreg      void 
  2689 ;; Registers used:
  2690 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2691 ;; Tracked objects:
  2692 ;;		On entry : 0/0
  2693 ;;		On exit  : 0/0
  2694 ;;		Unchanged: 0/0
  2695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2699 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2700 ;;Total ram usage:        0 bytes
  2701 ;; Hardware stack levels required when called:   13
  2702 ;; This function calls:
  2703 ;;		_I2C_Master_Init
  2704 ;;		_Test
  2705 ;;		_UI
  2706 ;;		_initLCD
  2707 ;;		_initTime
  2708 ;;		_initUI
  2709 ;;		_logRun
  2710 ;;		_machineConfig
  2711 ;;		_sort
  2712 ;;		_stopSignals
  2713 ;; This function is called by:
  2714 ;;		Startup code after reset
  2715 ;; This function uses a non-reentrant model
  2716 ;;
  2717                           
  2718                           	psect	text0
  2719  003CFC                     __ptext0:
  2720                           	opt stack 0
  2721  003CFC                     _main:
  2722                           	opt stack 18
  2723                           
  2724                           ;main.c: 20: machineConfig();
  2725                           
  2726                           ;incstack = 0
  2727  003CFC  EC0C  F023         	call	_machineConfig	;wreg free
  2728                           
  2729                           ;main.c: 21: initLCD();
  2730  003D00  EC5C  F024         	call	_initLCD	;wreg free
  2731                           
  2732                           ;main.c: 24: RTCflag = 0;
  2733  003D04  0E00               	movlw	0
  2734  003D06  0100               	movlb	0	; () banked
  2735  003D08  6FE3               	movwf	(_RTCflag+1)& (0+255),b
  2736  003D0A  0E00               	movlw	0
  2737  003D0C  6FE2               	movwf	_RTCflag& (0+255),b
  2738                           
  2739                           ;main.c: 25: if(RTCflag){
  2740  003D0E  0100               	movlb	0	; () banked
  2741  003D10  51E2               	movf	_RTCflag& (0+255),w,b
  2742  003D12  0100               	movlb	0	; () banked
  2743  003D14  11E3               	iorwf	(_RTCflag+1)& (0+255),w,b
  2744  003D16  B4D8               	btfsc	status,2,c
  2745  003D18  D016               	goto	l8754
  2746                           
  2747                           ; BSR set to: 0
  2748                           ;main.c: 26: initTime(0x42, 0x20, 0x15, 0x04, 0x15, 0x03, 0x17);
  2749  003D1A  0E20               	movlw	32
  2750  003D1C  0100               	movlb	0	; () banked
  2751  003D1E  6F80               	movwf	initTime@m& (0+255),b
  2752  003D20  0E15               	movlw	21
  2753  003D22  0100               	movlb	0	; () banked
  2754  003D24  6F81               	movwf	initTime@h& (0+255),b
  2755  003D26  0E04               	movlw	4
  2756  003D28  0100               	movlb	0	; () banked
  2757  003D2A  6F82               	movwf	initTime@w& (0+255),b
  2758  003D2C  0E15               	movlw	21
  2759  003D2E  0100               	movlb	0	; () banked
  2760  003D30  6F83               	movwf	initTime@DD& (0+255),b
  2761  003D32  0E03               	movlw	3
  2762  003D34  0100               	movlb	0	; () banked
  2763  003D36  6F84               	movwf	initTime@MM& (0+255),b
  2764  003D38  0E17               	movlw	23
  2765  003D3A  0100               	movlb	0	; () banked
  2766  003D3C  6F85               	movwf	initTime@YY& (0+255),b
  2767  003D3E  0E42               	movlw	66
  2768  003D40  EC0F  F027         	call	_initTime
  2769                           
  2770                           ;main.c: 27: }
  2771  003D44  D00B               	goto	l8756
  2772  003D46                     l8754:
  2773                           
  2774                           ;main.c: 28: else{
  2775                           ;main.c: 29: I2C_Master_Init(10000);
  2776  003D46  0E10               	movlw	16
  2777  003D48  0100               	movlb	0	; () banked
  2778  003D4A  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2779  003D4C  0E27               	movlw	39
  2780  003D4E  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2781  003D50  0E00               	movlw	0
  2782  003D52  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2783  003D54  0E00               	movlw	0
  2784  003D56  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2785  003D58  ECDC  F022         	call	_I2C_Master_Init	;wreg free
  2786  003D5C                     l8756:
  2787                           
  2788                           ;main.c: 30: }
  2789                           ;main.c: 32: initUI();
  2790  003D5C  EC18  F026         	call	_initUI	;wreg free
  2791                           
  2792                           ;main.c: 33: first = 1;
  2793  003D60  0E00               	movlw	0
  2794  003D62  6E6E               	movwf	_first+1,c
  2795  003D64  0E01               	movlw	1
  2796  003D66  6E6D               	movwf	_first,c
  2797                           
  2798                           ;main.c: 44: switch(machine_state){
  2799                           
  2800                           ;main.c: 43: while(1){
  2801  003D68  D017               	goto	l8778
  2802  003D6A                     l8760:
  2803                           
  2804                           ;main.c: 46: UI();
  2805  003D6A  EC65  F004         	call	_UI	;wreg free
  2806                           
  2807                           ;main.c: 47: break;
  2808  003D6E  D014               	goto	l8778
  2809  003D70                     l8762:
  2810                           
  2811                           ;main.c: 49: sort();
  2812  003D70  ECFE  F026         	call	_sort	;wreg free
  2813                           
  2814                           ;main.c: 50: break;
  2815  003D74  D011               	goto	l8778
  2816  003D76                     l8764:
  2817                           
  2818                           ;main.c: 52: stopSignals();
  2819  003D76  EC2F  F027         	call	_stopSignals	;wreg free
  2820                           
  2821                           ;main.c: 53: logRun();
  2822  003D7A  ECE7  F01B         	call	_logRun	;wreg free
  2823                           
  2824                           ;main.c: 54: first = 1;
  2825  003D7E  0E00               	movlw	0
  2826  003D80  6E6E               	movwf	_first+1,c
  2827  003D82  0E01               	movlw	1
  2828  003D84  6E6D               	movwf	_first,c
  2829                           
  2830                           ;main.c: 55: UI();
  2831  003D86  EC65  F004         	call	_UI	;wreg free
  2832                           
  2833                           ;main.c: 56: break;
  2834  003D8A  D006               	goto	l8778
  2835  003D8C                     l8772:
  2836                           
  2837                           ;main.c: 58: Test();
  2838  003D8C  EC17  F01D         	call	_Test	;wreg free
  2839                           
  2840                           ;main.c: 59: break;
  2841  003D90  D003               	goto	l8778
  2842  003D92                     l8774:
  2843                           
  2844                           ;main.c: 61: stopSignals();
  2845  003D92  EC2F  F027         	call	_stopSignals	;wreg free
  2846  003D96                     l491:
  2847  003D96  D7FF               	goto	l491
  2848  003D98                     l8778:
  2849  003D98  0100               	movlb	0	; () banked
  2850  003D9A  51FC               	movf	_machine_state& (0+255),w,b
  2851                           
  2852                           ; Switch size 1, requested type "space"
  2853                           ; Number of cases is 5, Range of values is 0 to 4
  2854                           ; switch strategies available:
  2855                           ; Name         Instructions Cycles
  2856                           ; simple_byte           16     9 (average)
  2857                           ;	Chosen strategy is simple_byte
  2858  003D9C  0A00               	xorlw	0	; case 0
  2859  003D9E  B4D8               	btfsc	status,2,c
  2860  003DA0  D7E4               	goto	l8760
  2861  003DA2  0A01               	xorlw	1	; case 1
  2862  003DA4  B4D8               	btfsc	status,2,c
  2863  003DA6  D7E4               	goto	l8762
  2864  003DA8  0A03               	xorlw	3	; case 2
  2865  003DAA  B4D8               	btfsc	status,2,c
  2866  003DAC  D7E4               	goto	l8764
  2867  003DAE  0A01               	xorlw	1	; case 3
  2868  003DB0  B4D8               	btfsc	status,2,c
  2869  003DB2  D7EC               	goto	l8772
  2870  003DB4  0A07               	xorlw	7	; case 4
  2871  003DB6  B4D8               	btfsc	status,2,c
  2872  003DB8  D7EC               	goto	l8774
  2873                           
  2874                           ; BSR set to: 0
  2875                           
  2876                           ; BSR set to: 0
  2877  003DBA  D7EE               	goto	l8778
  2878  003DBC                     __end_of_main:
  2879                           	opt stack 0
  2880                           tblptru	equ	0xFF8
  2881                           tblptrh	equ	0xFF7
  2882                           tblptrl	equ	0xFF6
  2883                           tablat	equ	0xFF5
  2884                           postinc0	equ	0xFEE
  2885                           wreg	equ	0xFE8
  2886                           postdec1	equ	0xFE5
  2887                           fsr1l	equ	0xFE1
  2888                           status	equ	0xFD8
  2889                           
  2890 ;; *************** function _stopSignals *****************
  2891 ;; Defined at:
  2892 ;;		line 70 in file "main.c"
  2893 ;; Parameters:    Size  Location     Type
  2894 ;;		None
  2895 ;; Auto vars:     Size  Location     Type
  2896 ;;		None
  2897 ;; Return value:  Size  Location     Type
  2898 ;;                  1    wreg      void 
  2899 ;; Registers used:
  2900 ;;		wreg, status,2
  2901 ;; Tracked objects:
  2902 ;;		On entry : 0/0
  2903 ;;		On exit  : 0/0
  2904 ;;		Unchanged: 0/0
  2905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2909 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2910 ;;Total ram usage:        0 bytes
  2911 ;; Hardware stack levels used:    1
  2912 ;; Hardware stack levels required when called:    7
  2913 ;; This function calls:
  2914 ;;		Nothing
  2915 ;; This function is called by:
  2916 ;;		_main
  2917 ;; This function uses a non-reentrant model
  2918 ;;
  2919                           
  2920                           	psect	text1
  2921  004E5E                     __ptext1:
  2922                           	opt stack 0
  2923  004E5E                     _stopSignals:
  2924                           	opt stack 23
  2925                           
  2926                           ;main.c: 71: LATA = 0x00;
  2927                           
  2928                           ; BSR set to: 0
  2929                           ;incstack = 0
  2930  004E5E  0E00               	movlw	0
  2931  004E60  6E89               	movwf	3977,c	;volatile
  2932                           
  2933                           ;main.c: 72: LATB = 0x00;
  2934  004E62  0E00               	movlw	0
  2935  004E64  6E8A               	movwf	3978,c	;volatile
  2936                           
  2937                           ;main.c: 73: LATC = 0x00;
  2938  004E66  0E00               	movlw	0
  2939  004E68  6E8B               	movwf	3979,c	;volatile
  2940                           
  2941                           ;main.c: 74: LATD = 0x00;
  2942  004E6A  0E00               	movlw	0
  2943  004E6C  6E8C               	movwf	3980,c	;volatile
  2944                           
  2945                           ;main.c: 75: LATE = 0x00;
  2946  004E6E  0E00               	movlw	0
  2947  004E70  6E8D               	movwf	3981,c	;volatile
  2948                           
  2949                           ;main.c: 76: TMR1ON = 0;
  2950  004E72  90CD               	bcf	4045,0,c	;volatile
  2951                           
  2952                           ;main.c: 77: TMR3ON = 0;
  2953  004E74  90B1               	bcf	4017,0,c	;volatile
  2954  004E76  0012               	return		;funcret
  2955  004E78                     __end_of_stopSignals:
  2956                           	opt stack 0
  2957                           tblptru	equ	0xFF8
  2958                           tblptrh	equ	0xFF7
  2959                           tblptrl	equ	0xFF6
  2960                           tablat	equ	0xFF5
  2961                           postinc0	equ	0xFEE
  2962                           wreg	equ	0xFE8
  2963                           postdec1	equ	0xFE5
  2964                           fsr1l	equ	0xFE1
  2965                           status	equ	0xFD8
  2966                           
  2967 ;; *************** function _sort *****************
  2968 ;; Defined at:
  2969 ;;		line 58 in file "sort.c"
  2970 ;; Parameters:    Size  Location     Type
  2971 ;;		None
  2972 ;; Auto vars:     Size  Location     Type
  2973 ;;		None
  2974 ;; Return value:  Size  Location     Type
  2975 ;;                  1    wreg      void 
  2976 ;; Registers used:
  2977 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2978 ;; Tracked objects:
  2979 ;;		On entry : 0/0
  2980 ;;		On exit  : 0/0
  2981 ;;		Unchanged: 0/0
  2982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2986 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2987 ;;Total ram usage:        0 bytes
  2988 ;; Hardware stack levels used:    1
  2989 ;; Hardware stack levels required when called:   12
  2990 ;; This function calls:
  2991 ;;		_Distribution
  2992 ;;		_ID
  2993 ;;		_Loading
  2994 ;; This function is called by:
  2995 ;;		_main
  2996 ;; This function uses a non-reentrant model
  2997 ;;
  2998                           
  2999                           	psect	text2
  3000  004DFC                     __ptext2:
  3001                           	opt stack 0
  3002  004DFC                     _sort:
  3003                           	opt stack 18
  3004                           
  3005                           ;sort.c: 59: if(machine_state == Sorting_state){
  3006                           
  3007                           ;incstack = 0
  3008  004DFC  0100               	movlb	0	; () banked
  3009  004DFE  05FC               	decf	_machine_state& (0+255),w,b
  3010  004E00  B4D8               	btfsc	status,2,c
  3011                           
  3012                           ; BSR set to: 0
  3013                           ;sort.c: 60: Loading();
  3014  004E02  EC4D  F00E         	call	_Loading	;wreg free
  3015                           
  3016                           ;sort.c: 61: }
  3017                           ;sort.c: 62: if(machine_state == Sorting_state){
  3018  004E06  0100               	movlb	0	; () banked
  3019  004E08  05FC               	decf	_machine_state& (0+255),w,b
  3020  004E0A  B4D8               	btfsc	status,2,c
  3021                           
  3022                           ; BSR set to: 0
  3023                           ;sort.c: 63: ID();
  3024  004E0C  EC80  F019         	call	_ID	;wreg free
  3025                           
  3026                           ;sort.c: 64: }
  3027                           ;sort.c: 65: if(machine_state == Sorting_state){
  3028  004E10  0100               	movlb	0	; () banked
  3029  004E12  05FC               	decf	_machine_state& (0+255),w,b
  3030  004E14  A4D8               	btfss	status,2,c
  3031  004E16  0012               	return	
  3032                           
  3033                           ; BSR set to: 0
  3034                           ;sort.c: 66: Distribution();
  3035  004E18  EC76  F016         	call	_Distribution	;wreg free
  3036  004E1C  0012               	return	
  3037  004E1E                     __end_of_sort:
  3038                           	opt stack 0
  3039                           tblptru	equ	0xFF8
  3040                           tblptrh	equ	0xFF7
  3041                           tblptrl	equ	0xFF6
  3042                           tablat	equ	0xFF5
  3043                           postinc0	equ	0xFEE
  3044                           wreg	equ	0xFE8
  3045                           postdec1	equ	0xFE5
  3046                           fsr1l	equ	0xFE1
  3047                           status	equ	0xFD8
  3048                           
  3049 ;; *************** function _Loading *****************
  3050 ;; Defined at:
  3051 ;;		line 70 in file "sort.c"
  3052 ;; Parameters:    Size  Location     Type
  3053 ;;		None
  3054 ;; Auto vars:     Size  Location     Type
  3055 ;;  i               2   60[BANK0 ] int 
  3056 ;;  i               2   58[BANK0 ] int 
  3057 ;;  i               2   56[BANK0 ] int 
  3058 ;;  i               2   54[BANK0 ] int 
  3059 ;;  i               2   62[BANK0 ] int 
  3060 ;;  addr            2   51[BANK0 ] unsigned short 
  3061 ;;  byte1           1   53[BANK0 ] unsigned char 
  3062 ;; Return value:  Size  Location     Type
  3063 ;;                  1    wreg      void 
  3064 ;; Registers used:
  3065 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3066 ;; Tracked objects:
  3067 ;;		On entry : 0/0
  3068 ;;		On exit  : 0/0
  3069 ;;		Unchanged: 0/0
  3070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3072 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3073 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3074 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3075 ;;Total ram usage:       15 bytes
  3076 ;; Hardware stack levels used:    1
  3077 ;; Hardware stack levels required when called:   11
  3078 ;; This function calls:
  3079 ;;		_EEPROM_read
  3080 ;;		_EEPROM_write
  3081 ;;		_delay_ms
  3082 ;;		_getIR
  3083 ;;		_getMAG
  3084 ;;		_initGlobalVars
  3085 ;;		_initServos
  3086 ;;		_initSortTimer
  3087 ;;		_lcdInst
  3088 ;;		_readIR
  3089 ;; This function is called by:
  3090 ;;		_sort
  3091 ;; This function uses a non-reentrant model
  3092 ;;
  3093                           
  3094                           	psect	text3
  3095  001C9A                     __ptext3:
  3096                           	opt stack 0
  3097  001C9A                     _Loading:
  3098                           	opt stack 18
  3099                           
  3100                           ;sort.c: 71: if(first){
  3101                           
  3102                           ;incstack = 0
  3103  001C9A  506D               	movf	_first,w,c
  3104  001C9C  106E               	iorwf	_first+1,w,c
  3105  001C9E  B4D8               	btfsc	status,2,c
  3106  001CA0  D074               	goto	l6820
  3107                           
  3108                           ;sort.c: 72: initGlobalVars();
  3109  001CA2  EC4E  F021         	call	_initGlobalVars	;wreg free
  3110                           
  3111                           ;sort.c: 73: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3112  001CA6  0E01               	movlw	1
  3113  001CA8  EC6E  F027         	call	_lcdInst
  3114  001CAC  0E68               	movlw	104
  3115  001CAE  0100               	movlb	0	; () banked
  3116  001CB0  6FB1               	movwf	??_Loading& (0+255),b
  3117  001CB2  0EE4               	movlw	228
  3118  001CB4                     u8117:
  3119  001CB4  2EE8               	decfsz	wreg,f,c
  3120  001CB6  D7FE               	bra	u8117
  3121  001CB8  2FB1               	decfsz	??_Loading& (0+255),f,b
  3122  001CBA  D7FC               	bra	u8117
  3123  001CBC  F000               	nop	
  3124                           
  3125                           ;sort.c: 74: initSortTimer();
  3126  001CBE  EC9B  F01F         	call	_initSortTimer	;wreg free
  3127                           
  3128                           ;sort.c: 75: LATCbits.LATC5 = 1;
  3129  001CC2  8A8B               	bsf	3979,5,c	;volatile
  3130                           
  3131                           ;sort.c: 80: sel = EEPROM_read(0);
  3132  001CC4  0E00               	movlw	0
  3133  001CC6  0100               	movlb	0	; () banked
  3134  001CC8  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3135  001CCA  0E00               	movlw	0
  3136  001CCC  6F80               	movwf	EEPROM_read@address& (0+255),b
  3137  001CCE  EC3C  F027         	call	_EEPROM_read	;wreg free
  3138  001CD2  0100               	movlb	0	; () banked
  3139  001CD4  6FFD               	movwf	_sel& (0+255),b
  3140                           
  3141                           ; BSR set to: 0
  3142                           ;sort.c: 81: unsigned short addr = 1 + 11 * sel;
  3143  001CD6  0100               	movlb	0	; () banked
  3144  001CD8  51FD               	movf	_sel& (0+255),w,b
  3145  001CDA  0D0B               	mullw	11
  3146  001CDC  0E01               	movlw	1
  3147  001CDE  24F3               	addwf	prodl,w,c
  3148  001CE0  0100               	movlb	0	; () banked
  3149  001CE2  6FB3               	movwf	Loading@addr& (0+255),b
  3150  001CE4  0E00               	movlw	0
  3151  001CE6  20F4               	addwfc	prodh,w,c
  3152  001CE8  0100               	movlb	0	; () banked
  3153  001CEA  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3154                           
  3155                           ; BSR set to: 0
  3156                           ;sort.c: 82: unsigned char byte1 = 0b01111111;
  3157  001CEC  0E7F               	movlw	127
  3158  001CEE  0100               	movlb	0	; () banked
  3159  001CF0  6FB5               	movwf	Loading@byte1& (0+255),b
  3160                           
  3161                           ; BSR set to: 0
  3162                           ;sort.c: 83: EEPROM_write(addr, byte1);
  3163  001CF2  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3164  001CF6  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3165  001CFA  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3166  001CFE  ECA1  F01D         	call	_EEPROM_write	;wreg free
  3167                           
  3168                           ;sort.c: 86: LATAbits.LATA5 = 0;
  3169  001D02  9A89               	bcf	3977,5,c	;volatile
  3170                           
  3171                           ;sort.c: 88: for(int i=0; i<46; i++){
  3172  001D04  0E00               	movlw	0
  3173  001D06  0100               	movlb	0	; () banked
  3174  001D08  6FBF               	movwf	(Loading@i+1)& (0+255),b
  3175  001D0A  0E00               	movlw	0
  3176  001D0C  6FBE               	movwf	Loading@i& (0+255),b
  3177                           
  3178                           ; BSR set to: 0
  3179  001D0E  0100               	movlb	0	; () banked
  3180  001D10  BFBF               	btfsc	(Loading@i+1)& (0+255),7,b
  3181  001D12  D008               	goto	l6808
  3182  001D14  0100               	movlb	0	; () banked
  3183  001D16  51BF               	movf	(Loading@i+1)& (0+255),w,b
  3184  001D18  E126               	bnz	l740
  3185  001D1A  0E2E               	movlw	46
  3186  001D1C  0100               	movlb	0	; () banked
  3187  001D1E  5DBE               	subwf	Loading@i& (0+255),w,b
  3188  001D20  B0D8               	btfsc	status,0,c
  3189  001D22  D021               	goto	l740
  3190  001D24                     l6808:
  3191                           
  3192                           ; BSR set to: 0
  3193                           ;sort.c: 89: LATAbits.LATA5 = !LATAbits.LATA5;
  3194  001D24  BA89               	btfsc	3977,5,c	;volatile
  3195  001D26  D004               	goto	u5370
  3196  001D28  0100               	movlb	0	; () banked
  3197  001D2A  6BB1               	clrf	??_Loading& (0+255),b
  3198  001D2C  2BB1               	incf	??_Loading& (0+255),f,b
  3199  001D2E  D002               	goto	u5388
  3200  001D30                     u5370:
  3201  001D30  0100               	movlb	0	; () banked
  3202  001D32  6BB1               	clrf	??_Loading& (0+255),b
  3203  001D34                     u5388:
  3204  001D34  0100               	movlb	0	; () banked
  3205  001D36  3BB1               	swapf	??_Loading& (0+255),f,b
  3206  001D38  47B1               	rlncf	??_Loading& (0+255),f,b
  3207  001D3A  5089               	movf	3977,w,c	;volatile
  3208  001D3C  0100               	movlb	0	; () banked
  3209  001D3E  19B1               	xorwf	??_Loading& (0+255),w,b
  3210  001D40  0BDF               	andlw	-33
  3211  001D42  19B1               	xorwf	??_Loading& (0+255),w,b
  3212  001D44  6E89               	movwf	3977,c	;volatile
  3213                           
  3214                           ; BSR set to: 0
  3215                           ;sort.c: 90: delay_ms(45-i);
  3216  001D46  0100               	movlb	0	; () banked
  3217  001D48  51BE               	movf	Loading@i& (0+255),w,b
  3218  001D4A  0800               	sublw	0
  3219  001D4C  0F2D               	addlw	45
  3220  001D4E  EC9E  F026         	call	_delay_ms
  3221  001D52  0100               	movlb	0	; () banked
  3222  001D54  4BBE               	infsnz	Loading@i& (0+255),f,b
  3223  001D56  2BBF               	incf	(Loading@i+1)& (0+255),f,b
  3224                           
  3225                           ; BSR set to: 0
  3226  001D58  0100               	movlb	0	; () banked
  3227  001D5A  BFBF               	btfsc	(Loading@i+1)& (0+255),7,b
  3228  001D5C  D7E3               	goto	l6808
  3229  001D5E  0100               	movlb	0	; () banked
  3230  001D60  51BF               	movf	(Loading@i+1)& (0+255),w,b
  3231  001D62  E101               	bnz	u5390
  3232  001D64  D7DA               	goto	L1
  3233  001D66                     u5390:
  3234  001D66                     l740:
  3235                           
  3236                           ; BSR set to: 0
  3237                           ;sort.c: 91: }
  3238                           ;sort.c: 92: LATAbits.LATA5 = 1;
  3239  001D66  8A89               	bsf	3977,5,c	;volatile
  3240                           
  3241                           ; BSR set to: 0
  3242                           ;sort.c: 95: initServos();
  3243  001D68  EC68  F023         	call	_initServos	;wreg free
  3244                           
  3245                           ;sort.c: 96: _delay((unsigned long)((5000)*(32000000/4000.0)));
  3246  001D6C  0ECB               	movlw	203
  3247  001D6E  0100               	movlb	0	; () banked
  3248  001D70  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3249  001D72  0EEC               	movlw	236
  3250  001D74  0100               	movlb	0	; () banked
  3251  001D76  6FB1               	movwf	??_Loading& (0+255),b
  3252  001D78  0E84               	movlw	132
  3253  001D7A                     u8127:
  3254  001D7A  2EE8               	decfsz	wreg,f,c
  3255  001D7C  D7FE               	bra	u8127
  3256  001D7E  2FB1               	decfsz	??_Loading& (0+255),f,b
  3257  001D80  D7FC               	bra	u8127
  3258  001D82  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3259  001D84  D7FA               	bra	u8127
  3260  001D86  F000               	nop	
  3261                           
  3262                           ;sort.c: 97: }
  3263  001D88  0012               	return	
  3264  001D8A                     l6820:
  3265                           
  3266                           ;sort.c: 98: else{
  3267                           ;sort.c: 101: if(!f_loadingNewCan){
  3268  001D8A  0100               	movlb	0	; () banked
  3269  001D8C  51EA               	movf	_f_loadingNewCan& (0+255),w,b
  3270  001D8E  0100               	movlb	0	; () banked
  3271  001D90  11EB               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3272  001D92  A4D8               	btfss	status,2,c
  3273  001D94  D018               	goto	l6836
  3274                           
  3275                           ; BSR set to: 0
  3276                           ;sort.c: 103: getIR();
  3277  001D96  EC05  F022         	call	_getIR	;wreg free
  3278                           
  3279                           ;sort.c: 105: if(!f_loadingNewCan){
  3280  001D9A  0100               	movlb	0	; () banked
  3281  001D9C  51EA               	movf	_f_loadingNewCan& (0+255),w,b
  3282  001D9E  0100               	movlb	0	; () banked
  3283  001DA0  11EB               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3284  001DA2  B4D8               	btfsc	status,2,c
  3285  001DA4  0012               	return	
  3286                           
  3287                           ; BSR set to: 0
  3288                           ;sort.c: 109: else{
  3289                           ;sort.c: 110: count_total++;
  3290                           
  3291                           ; BSR set to: 0
  3292                           
  3293                           ; BSR set to: 0
  3294                           ;sort.c: 107: }
  3295                           
  3296                           ; BSR set to: 0
  3297                           ;sort.c: 106: return;
  3298  001DA6  0100               	movlb	0	; () banked
  3299  001DA8  4BFE               	infsnz	_count_total& (0+255),f,b
  3300  001DAA  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3301                           
  3302                           ; BSR set to: 0
  3303                           ;sort.c: 111: if(count_total == 12){
  3304  001DAC  0E0C               	movlw	12
  3305  001DAE  0100               	movlb	0	; () banked
  3306  001DB0  19FE               	xorwf	_count_total& (0+255),w,b
  3307  001DB2  0100               	movlb	0	; () banked
  3308  001DB4  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3309  001DB6  A4D8               	btfss	status,2,c
  3310  001DB8  0012               	return	
  3311                           
  3312                           ; BSR set to: 0
  3313                           ;sort.c: 112: f_lastCan = 1;
  3314  001DBA  0E00               	movlw	0
  3315  001DBC  0100               	movlb	0	; () banked
  3316  001DBE  6FE9               	movwf	(_f_lastCan+1)& (0+255),b
  3317  001DC0  0E01               	movlw	1
  3318  001DC2  6FE8               	movwf	_f_lastCan& (0+255),b
  3319                           
  3320                           ; BSR set to: 0
  3321                           ;sort.c: 113: }
  3322                           ;sort.c: 114: }
  3323                           ;sort.c: 115: }
  3324                           
  3325                           ; BSR set to: 0
  3326  001DC4  0012               	return	
  3327  001DC6                     l6836:
  3328                           
  3329                           ; BSR set to: 0
  3330                           ;sort.c: 118: else if(f_ID_receive){
  3331  001DC6  5065               	movf	_f_ID_receive,w,c
  3332  001DC8  1066               	iorwf	_f_ID_receive+1,w,c
  3333  001DCA  B4D8               	btfsc	status,2,c
  3334  001DCC  0012               	return	
  3335                           
  3336                           ; BSR set to: 0
  3337                           ;sort.c: 119: f_loadingNewCan = 0;
  3338  001DCE  0E00               	movlw	0
  3339  001DD0  0100               	movlb	0	; () banked
  3340  001DD2  6FEB               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3341  001DD4  0E00               	movlw	0
  3342  001DD6  6FEA               	movwf	_f_loadingNewCan& (0+255),b
  3343                           
  3344                           ; BSR set to: 0
  3345                           ;sort.c: 120: _delay((unsigned long)((1500)*(32000000/4000.0)));
  3346  001DD8  0E3D               	movlw	61
  3347  001DDA  0100               	movlb	0	; () banked
  3348  001DDC  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3349  001DDE  0EE1               	movlw	225
  3350  001DE0  0100               	movlb	0	; () banked
  3351  001DE2  6FB1               	movwf	??_Loading& (0+255),b
  3352  001DE4  0E3F               	movlw	63
  3353  001DE6                     u8137:
  3354  001DE6  2EE8               	decfsz	wreg,f,c
  3355  001DE8  D7FE               	bra	u8137
  3356  001DEA  2FB1               	decfsz	??_Loading& (0+255),f,b
  3357  001DEC  D7FC               	bra	u8137
  3358  001DEE  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3359  001DF0  D7FA               	bra	u8137
  3360  001DF2  D000               	nop2	
  3361                           
  3362                           ;sort.c: 121: LATAbits.LATA5 = 0;
  3363  001DF4  9A89               	bcf	3977,5,c	;volatile
  3364                           
  3365                           ;sort.c: 125: getMAG();
  3366  001DF6  EC0E  F025         	call	_getMAG	;wreg free
  3367                           
  3368                           ;sort.c: 126: sensor_outputs[0] = MAG_signal;
  3369  001DFA  C0E0  F0DA         	movff	_MAG_signal,_sensor_outputs
  3370  001DFE  C0E1  F0DB         	movff	_MAG_signal+1,_sensor_outputs+1
  3371                           
  3372                           ;sort.c: 128: if(sensor_outputs[0]){
  3373  001E02  0100               	movlb	0	; () banked
  3374  001E04  51DA               	movf	_sensor_outputs& (0+255),w,b
  3375  001E06  0100               	movlb	0	; () banked
  3376  001E08  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3377  001E0A  B4D8               	btfsc	status,2,c
  3378  001E0C  D01D               	goto	l6862
  3379                           
  3380                           ; BSR set to: 0
  3381                           ;sort.c: 129: for(int i = 0; i<2500; i++){
  3382  001E0E  0E00               	movlw	0
  3383  001E10  0100               	movlb	0	; () banked
  3384  001E12  6FB7               	movwf	(Loading@i_1103+1)& (0+255),b
  3385  001E14  0E00               	movlw	0
  3386  001E16  6FB6               	movwf	Loading@i_1103& (0+255),b
  3387  001E18                     l6852:
  3388                           
  3389                           ; BSR set to: 0
  3390  001E18  0100               	movlb	0	; () banked
  3391  001E1A  BFB7               	btfsc	(Loading@i_1103+1)& (0+255),7,b
  3392  001E1C  D008               	goto	l750
  3393  001E1E  0EC4               	movlw	196
  3394  001E20  0100               	movlb	0	; () banked
  3395  001E22  5DB6               	subwf	Loading@i_1103& (0+255),w,b
  3396  001E24  0E09               	movlw	9
  3397  001E26  0100               	movlb	0	; () banked
  3398  001E28  59B7               	subwfb	(Loading@i_1103+1)& (0+255),w,b
  3399  001E2A  B0D8               	btfsc	status,0,c
  3400  001E2C  D02A               	goto	l6874
  3401  001E2E                     l750:
  3402                           
  3403                           ; BSR set to: 0
  3404                           ;sort.c: 130: LATAbits.LATA4 = 1;
  3405  001E2E  8889               	bsf	3977,4,c	;volatile
  3406                           
  3407                           ; BSR set to: 0
  3408                           ;sort.c: 131: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3409  001E30  0EC8               	movlw	200
  3410  001E32                     u8147:
  3411  001E32  2EE8               	decfsz	wreg,f,c
  3412  001E34  D7FE               	bra	u8147
  3413                           
  3414                           ;sort.c: 132: LATAbits.LATA4 = 0;
  3415  001E36  9889               	bcf	3977,4,c	;volatile
  3416                           
  3417                           ;sort.c: 133: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3418  001E38  0E42               	movlw	66
  3419  001E3A                     u8157:
  3420  001E3A  2EE8               	decfsz	wreg,f,c
  3421  001E3C  D7FE               	bra	u8157
  3422  001E3E  D000               	nop2	
  3423  001E40  0100               	movlb	0	; () banked
  3424  001E42  4BB6               	infsnz	Loading@i_1103& (0+255),f,b
  3425  001E44  2BB7               	incf	(Loading@i_1103+1)& (0+255),f,b
  3426  001E46  D7E8               	goto	l6852
  3427  001E48                     l6862:
  3428                           
  3429                           ; BSR set to: 0
  3430                           ;sort.c: 136: else{
  3431                           ;sort.c: 137: for(int i = 0; i<2500; i++){
  3432  001E48  0E00               	movlw	0
  3433  001E4A  0100               	movlb	0	; () banked
  3434  001E4C  6FB9               	movwf	(Loading@i_1104+1)& (0+255),b
  3435  001E4E  0E00               	movlw	0
  3436  001E50  6FB8               	movwf	Loading@i_1104& (0+255),b
  3437  001E52                     l6864:
  3438                           
  3439                           ; BSR set to: 0
  3440  001E52  0100               	movlb	0	; () banked
  3441  001E54  BFB9               	btfsc	(Loading@i_1104+1)& (0+255),7,b
  3442  001E56  D008               	goto	l753
  3443  001E58  0EC4               	movlw	196
  3444  001E5A  0100               	movlb	0	; () banked
  3445  001E5C  5DB8               	subwf	Loading@i_1104& (0+255),w,b
  3446  001E5E  0E09               	movlw	9
  3447  001E60  0100               	movlb	0	; () banked
  3448  001E62  59B9               	subwfb	(Loading@i_1104+1)& (0+255),w,b
  3449  001E64  B0D8               	btfsc	status,0,c
  3450  001E66  D00D               	goto	l6874
  3451  001E68                     l753:
  3452                           
  3453                           ; BSR set to: 0
  3454                           ;sort.c: 138: LATAbits.LATA4 = 1;
  3455  001E68  8889               	bsf	3977,4,c	;volatile
  3456                           
  3457                           ; BSR set to: 0
  3458                           ;sort.c: 139: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3459  001E6A  0E9A               	movlw	154
  3460  001E6C                     u8167:
  3461  001E6C  2EE8               	decfsz	wreg,f,c
  3462  001E6E  D7FE               	bra	u8167
  3463  001E70  D000               	nop2	
  3464                           
  3465                           ;sort.c: 140: LATAbits.LATA4 = 0;
  3466  001E72  9889               	bcf	3977,4,c	;volatile
  3467                           
  3468                           ;sort.c: 141: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3469  001E74  0E70               	movlw	112
  3470  001E76                     u8177:
  3471  001E76  2EE8               	decfsz	wreg,f,c
  3472  001E78  D7FE               	bra	u8177
  3473  001E7A  0100               	movlb	0	; () banked
  3474  001E7C  4BB8               	infsnz	Loading@i_1104& (0+255),f,b
  3475  001E7E  2BB9               	incf	(Loading@i_1104+1)& (0+255),f,b
  3476  001E80  D7E8               	goto	l6864
  3477  001E82                     l6874:
  3478                           
  3479                           ; BSR set to: 0
  3480                           ;sort.c: 142: }
  3481                           ;sort.c: 143: }
  3482                           ;sort.c: 145: _delay((unsigned long)((200)*(32000000/4000.0)));
  3483  001E82  0E09               	movlw	9
  3484  001E84  0100               	movlb	0	; () banked
  3485  001E86  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3486  001E88  0E1E               	movlw	30
  3487  001E8A  0100               	movlb	0	; () banked
  3488  001E8C  6FB1               	movwf	??_Loading& (0+255),b
  3489  001E8E  0EE4               	movlw	228
  3490  001E90                     u8187:
  3491  001E90  2EE8               	decfsz	wreg,f,c
  3492  001E92  D7FE               	bra	u8187
  3493  001E94  2FB1               	decfsz	??_Loading& (0+255),f,b
  3494  001E96  D7FC               	bra	u8187
  3495  001E98  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3496  001E9A  D7FA               	bra	u8187
  3497  001E9C  F000               	nop	
  3498                           
  3499                           ;sort.c: 147: readIR();
  3500  001E9E  EC10  F024         	call	_readIR	;wreg free
  3501                           
  3502                           ;sort.c: 148: if(IR_signal==1){
  3503  001EA2  0100               	movlb	0	; () banked
  3504  001EA4  05DE               	decf	_IR_signal& (0+255),w,b
  3505  001EA6  0100               	movlb	0	; () banked
  3506  001EA8  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  3507  001EAA  A4D8               	btfss	status,2,c
  3508  001EAC  D097               	goto	l6932
  3509                           
  3510                           ; BSR set to: 0
  3511                           ;sort.c: 149: _delay((unsigned long)((100)*(32000000/4000.0)));
  3512  001EAE  0E05               	movlw	5
  3513  001EB0  0100               	movlb	0	; () banked
  3514  001EB2  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3515  001EB4  0E0F               	movlw	15
  3516  001EB6  0100               	movlb	0	; () banked
  3517  001EB8  6FB1               	movwf	??_Loading& (0+255),b
  3518  001EBA  0EF1               	movlw	241
  3519  001EBC                     u8197:
  3520  001EBC  2EE8               	decfsz	wreg,f,c
  3521  001EBE  D7FE               	bra	u8197
  3522  001EC0  2FB1               	decfsz	??_Loading& (0+255),f,b
  3523  001EC2  D7FC               	bra	u8197
  3524  001EC4  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3525  001EC6  D7FA               	bra	u8197
  3526                           
  3527                           ;sort.c: 150: readIR();
  3528  001EC8  EC10  F024         	call	_readIR	;wreg free
  3529                           
  3530                           ;sort.c: 151: if(IR_signal==1){
  3531  001ECC  0100               	movlb	0	; () banked
  3532  001ECE  05DE               	decf	_IR_signal& (0+255),w,b
  3533  001ED0  0100               	movlb	0	; () banked
  3534  001ED2  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  3535  001ED4  A4D8               	btfss	status,2,c
  3536  001ED6  D040               	goto	l6912
  3537                           
  3538                           ; BSR set to: 0
  3539                           ;sort.c: 152: if(sensor_outputs[0]){
  3540  001ED8  0100               	movlb	0	; () banked
  3541  001EDA  51DA               	movf	_sensor_outputs& (0+255),w,b
  3542  001EDC  0100               	movlb	0	; () banked
  3543  001EDE  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3544  001EE0  B4D8               	btfsc	status,2,c
  3545  001EE2  D01D               	goto	l6900
  3546                           
  3547                           ; BSR set to: 0
  3548                           ;sort.c: 153: for(int i = 0; i<2500; i++){
  3549  001EE4  0E00               	movlw	0
  3550  001EE6  0100               	movlb	0	; () banked
  3551  001EE8  6FBB               	movwf	(Loading@i_1106+1)& (0+255),b
  3552  001EEA  0E00               	movlw	0
  3553  001EEC  6FBA               	movwf	Loading@i_1106& (0+255),b
  3554  001EEE                     l6890:
  3555                           
  3556                           ; BSR set to: 0
  3557  001EEE  0100               	movlb	0	; () banked
  3558  001EF0  BFBB               	btfsc	(Loading@i_1106+1)& (0+255),7,b
  3559  001EF2  D008               	goto	l758
  3560  001EF4  0EC4               	movlw	196
  3561  001EF6  0100               	movlb	0	; () banked
  3562  001EF8  5DBA               	subwf	Loading@i_1106& (0+255),w,b
  3563  001EFA  0E09               	movlw	9
  3564  001EFC  0100               	movlb	0	; () banked
  3565  001EFE  59BB               	subwfb	(Loading@i_1106+1)& (0+255),w,b
  3566  001F00  B0D8               	btfsc	status,0,c
  3567  001F02  D02A               	goto	l6912
  3568  001F04                     l758:
  3569                           
  3570                           ; BSR set to: 0
  3571                           ;sort.c: 154: LATAbits.LATA4 = 1;
  3572  001F04  8889               	bsf	3977,4,c	;volatile
  3573                           
  3574                           ; BSR set to: 0
  3575                           ;sort.c: 155: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3576  001F06  0EC8               	movlw	200
  3577  001F08                     u8207:
  3578  001F08  2EE8               	decfsz	wreg,f,c
  3579  001F0A  D7FE               	bra	u8207
  3580                           
  3581                           ;sort.c: 156: LATAbits.LATA4 = 0;
  3582  001F0C  9889               	bcf	3977,4,c	;volatile
  3583                           
  3584                           ;sort.c: 157: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3585  001F0E  0E42               	movlw	66
  3586  001F10                     u8217:
  3587  001F10  2EE8               	decfsz	wreg,f,c
  3588  001F12  D7FE               	bra	u8217
  3589  001F14  D000               	nop2	
  3590  001F16  0100               	movlb	0	; () banked
  3591  001F18  4BBA               	infsnz	Loading@i_1106& (0+255),f,b
  3592  001F1A  2BBB               	incf	(Loading@i_1106+1)& (0+255),f,b
  3593  001F1C  D7E8               	goto	l6890
  3594  001F1E                     l6900:
  3595                           
  3596                           ; BSR set to: 0
  3597                           ;sort.c: 160: else{
  3598                           ;sort.c: 161: for(int i = 0; i<2500; i++){
  3599  001F1E  0E00               	movlw	0
  3600  001F20  0100               	movlb	0	; () banked
  3601  001F22  6FBD               	movwf	(Loading@i_1107+1)& (0+255),b
  3602  001F24  0E00               	movlw	0
  3603  001F26  6FBC               	movwf	Loading@i_1107& (0+255),b
  3604  001F28                     l6902:
  3605                           
  3606                           ; BSR set to: 0
  3607  001F28  0100               	movlb	0	; () banked
  3608  001F2A  BFBD               	btfsc	(Loading@i_1107+1)& (0+255),7,b
  3609  001F2C  D008               	goto	l761
  3610  001F2E  0EC4               	movlw	196
  3611  001F30  0100               	movlb	0	; () banked
  3612  001F32  5DBC               	subwf	Loading@i_1107& (0+255),w,b
  3613  001F34  0E09               	movlw	9
  3614  001F36  0100               	movlb	0	; () banked
  3615  001F38  59BD               	subwfb	(Loading@i_1107+1)& (0+255),w,b
  3616  001F3A  B0D8               	btfsc	status,0,c
  3617  001F3C  D00D               	goto	l6912
  3618  001F3E                     l761:
  3619                           
  3620                           ; BSR set to: 0
  3621                           ;sort.c: 162: LATAbits.LATA4 = 1;
  3622  001F3E  8889               	bsf	3977,4,c	;volatile
  3623                           
  3624                           ; BSR set to: 0
  3625                           ;sort.c: 163: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3626  001F40  0E9A               	movlw	154
  3627  001F42                     u8227:
  3628  001F42  2EE8               	decfsz	wreg,f,c
  3629  001F44  D7FE               	bra	u8227
  3630  001F46  D000               	nop2	
  3631                           
  3632                           ;sort.c: 164: LATAbits.LATA4 = 0;
  3633  001F48  9889               	bcf	3977,4,c	;volatile
  3634                           
  3635                           ;sort.c: 165: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3636  001F4A  0E70               	movlw	112
  3637  001F4C                     u8237:
  3638  001F4C  2EE8               	decfsz	wreg,f,c
  3639  001F4E  D7FE               	bra	u8237
  3640  001F50  0100               	movlb	0	; () banked
  3641  001F52  4BBC               	infsnz	Loading@i_1107& (0+255),f,b
  3642  001F54  2BBD               	incf	(Loading@i_1107+1)& (0+255),f,b
  3643  001F56  D7E8               	goto	l6902
  3644  001F58                     l6912:
  3645                           
  3646                           ; BSR set to: 0
  3647                           ;sort.c: 166: }
  3648                           ;sort.c: 167: }
  3649                           ;sort.c: 168: }
  3650                           ;sort.c: 170: _delay((unsigned long)((200)*(32000000/4000.0)));
  3651  001F58  0E09               	movlw	9
  3652  001F5A  0100               	movlb	0	; () banked
  3653  001F5C  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3654  001F5E  0E1E               	movlw	30
  3655  001F60  0100               	movlb	0	; () banked
  3656  001F62  6FB1               	movwf	??_Loading& (0+255),b
  3657  001F64  0EE4               	movlw	228
  3658  001F66                     u8247:
  3659  001F66  2EE8               	decfsz	wreg,f,c
  3660  001F68  D7FE               	bra	u8247
  3661  001F6A  2FB1               	decfsz	??_Loading& (0+255),f,b
  3662  001F6C  D7FC               	bra	u8247
  3663  001F6E  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3664  001F70  D7FA               	bra	u8247
  3665  001F72  F000               	nop	
  3666                           
  3667                           ;sort.c: 172: while(IR_signal == 1){
  3668  001F74  D02D               	goto	l6930
  3669  001F76                     l6914:
  3670                           
  3671                           ;sort.c: 173: readIR();
  3672  001F76  EC10  F024         	call	_readIR	;wreg free
  3673                           
  3674                           ;sort.c: 174: if(IR_signal==1){
  3675  001F7A  0100               	movlb	0	; () banked
  3676  001F7C  05DE               	decf	_IR_signal& (0+255),w,b
  3677  001F7E  0100               	movlb	0	; () banked
  3678  001F80  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  3679  001F82  A4D8               	btfss	status,2,c
  3680  001F84  D025               	goto	l6930
  3681                           
  3682                           ; BSR set to: 0
  3683                           ;sort.c: 175: _delay((unsigned long)((100)*(32000000/4000.0)));
  3684  001F86  0E05               	movlw	5
  3685  001F88  0100               	movlb	0	; () banked
  3686  001F8A  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3687  001F8C  0E0F               	movlw	15
  3688  001F8E  0100               	movlb	0	; () banked
  3689  001F90  6FB1               	movwf	??_Loading& (0+255),b
  3690  001F92  0EF1               	movlw	241
  3691  001F94                     u8257:
  3692  001F94  2EE8               	decfsz	wreg,f,c
  3693  001F96  D7FE               	bra	u8257
  3694  001F98  2FB1               	decfsz	??_Loading& (0+255),f,b
  3695  001F9A  D7FC               	bra	u8257
  3696  001F9C  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3697  001F9E  D7FA               	bra	u8257
  3698                           
  3699                           ;sort.c: 176: readIR();
  3700  001FA0  EC10  F024         	call	_readIR	;wreg free
  3701                           
  3702                           ;sort.c: 177: if(IR_signal==1){
  3703  001FA4  0100               	movlb	0	; () banked
  3704  001FA6  05DE               	decf	_IR_signal& (0+255),w,b
  3705  001FA8  0100               	movlb	0	; () banked
  3706  001FAA  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  3707  001FAC  A4D8               	btfss	status,2,c
  3708  001FAE  D010               	goto	l6930
  3709                           
  3710                           ; BSR set to: 0
  3711                           ;sort.c: 178: LATAbits.LATA4 = 1;
  3712  001FB0  8889               	bsf	3977,4,c	;volatile
  3713                           
  3714                           ; BSR set to: 0
  3715                           ;sort.c: 179: _delay((unsigned long)((250)*(32000000/4000.0)));
  3716  001FB2  0E0B               	movlw	11
  3717  001FB4  0100               	movlb	0	; () banked
  3718  001FB6  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3719  001FB8  0E26               	movlw	38
  3720  001FBA  0100               	movlb	0	; () banked
  3721  001FBC  6FB1               	movwf	??_Loading& (0+255),b
  3722  001FBE  0E5D               	movlw	93
  3723  001FC0                     u8267:
  3724  001FC0  2EE8               	decfsz	wreg,f,c
  3725  001FC2  D7FE               	bra	u8267
  3726  001FC4  2FB1               	decfsz	??_Loading& (0+255),f,b
  3727  001FC6  D7FC               	bra	u8267
  3728  001FC8  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3729  001FCA  D7FA               	bra	u8267
  3730  001FCC  D000               	nop2	
  3731                           
  3732                           ;sort.c: 180: LATAbits.LATA4 = 0;
  3733  001FCE  9889               	bcf	3977,4,c	;volatile
  3734  001FD0                     l6930:
  3735  001FD0  0100               	movlb	0	; () banked
  3736  001FD2  05DE               	decf	_IR_signal& (0+255),w,b
  3737  001FD4  0100               	movlb	0	; () banked
  3738  001FD6  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  3739  001FD8  B4D8               	btfsc	status,2,c
  3740  001FDA  D7CD               	goto	l6914
  3741  001FDC                     l6932:
  3742                           
  3743                           ; BSR set to: 0
  3744                           ;sort.c: 181: }
  3745                           ;sort.c: 182: }
  3746                           ;sort.c: 183: }
  3747                           ;sort.c: 184: }
  3748                           ;sort.c: 185: f_can_coming_to_ID = 1;
  3749  001FDC  0E00               	movlw	0
  3750  001FDE  6E68               	movwf	_f_can_coming_to_ID+1,c
  3751  001FE0  0E01               	movlw	1
  3752  001FE2  6E67               	movwf	_f_can_coming_to_ID,c
  3753                           
  3754                           ; BSR set to: 0
  3755                           
  3756                           ; BSR set to: 0
  3757  001FE4  0012               	return	
  3758  001FE6                     __end_of_Loading:
  3759                           	opt stack 0
  3760                           tblptru	equ	0xFF8
  3761                           tblptrh	equ	0xFF7
  3762                           tblptrl	equ	0xFF6
  3763                           tablat	equ	0xFF5
  3764                           prodh	equ	0xFF4
  3765                           prodl	equ	0xFF3
  3766                           postinc0	equ	0xFEE
  3767                           wreg	equ	0xFE8
  3768                           postdec1	equ	0xFE5
  3769                           fsr1l	equ	0xFE1
  3770                           status	equ	0xFD8
  3771                           
  3772 ;; *************** function _initSortTimer *****************
  3773 ;; Defined at:
  3774 ;;		line 348 in file "sort.c"
  3775 ;; Parameters:    Size  Location     Type
  3776 ;;		None
  3777 ;; Auto vars:     Size  Location     Type
  3778 ;;  i               2    8[BANK0 ] int 
  3779 ;; Return value:  Size  Location     Type
  3780 ;;                  1    wreg      void 
  3781 ;; Registers used:
  3782 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3783 ;; Tracked objects:
  3784 ;;		On entry : 0/0
  3785 ;;		On exit  : 0/0
  3786 ;;		Unchanged: 0/0
  3787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3789 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3790 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3791 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3792 ;;Total ram usage:        5 bytes
  3793 ;; Hardware stack levels used:    1
  3794 ;; Hardware stack levels required when called:   10
  3795 ;; This function calls:
  3796 ;;		_getRTC
  3797 ;; This function is called by:
  3798 ;;		_Loading
  3799 ;; This function uses a non-reentrant model
  3800 ;;
  3801                           
  3802                           	psect	text4
  3803  003F36                     __ptext4:
  3804                           	opt stack 0
  3805  003F36                     _initSortTimer:
  3806                           	opt stack 18
  3807                           
  3808                           ;sort.c: 350: getRTC();
  3809                           
  3810                           ;incstack = 0
  3811  003F36  EC87  F020         	call	_getRTC	;wreg free
  3812                           
  3813                           ;sort.c: 351: for(int i = 0; i < 7; i++){
  3814  003F3A  0E00               	movlw	0
  3815  003F3C  0100               	movlb	0	; () banked
  3816  003F3E  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  3817  003F40  0E00               	movlw	0
  3818  003F42  6F88               	movwf	initSortTimer@i& (0+255),b
  3819  003F44                     l6392:
  3820                           
  3821                           ; BSR set to: 0
  3822  003F44  0100               	movlb	0	; () banked
  3823  003F46  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  3824  003F48  D008               	goto	l6396
  3825  003F4A  0100               	movlb	0	; () banked
  3826  003F4C  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  3827  003F4E  E140               	bnz	l6402
  3828  003F50  0E07               	movlw	7
  3829  003F52  0100               	movlb	0	; () banked
  3830  003F54  5D88               	subwf	initSortTimer@i& (0+255),w,b
  3831  003F56  B0D8               	btfsc	status,0,c
  3832  003F58  D03B               	goto	l6402
  3833  003F5A                     l6396:
  3834                           
  3835                           ; BSR set to: 0
  3836                           ;sort.c: 352: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  3837  003F5A  0E24               	movlw	low _time
  3838  003F5C  0100               	movlb	0	; () banked
  3839  003F5E  2588               	addwf	initSortTimer@i& (0+255),w,b
  3840  003F60  6ED9               	movwf	fsr2l,c
  3841  003F62  0E01               	movlw	high _time
  3842  003F64  0100               	movlb	0	; () banked
  3843  003F66  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3844  003F68  6EDA               	movwf	fsr2h,c
  3845  003F6A  50DF               	movf	indf2,w,c
  3846  003F6C  0100               	movlb	0	; () banked
  3847  003F6E  6F85               	movwf	??_initSortTimer& (0+255),b
  3848  003F70  0100               	movlb	0	; () banked
  3849  003F72  3B85               	swapf	??_initSortTimer& (0+255),f,b
  3850  003F74  0E0F               	movlw	15
  3851  003F76  1785               	andwf	??_initSortTimer& (0+255),f,b
  3852  003F78  0E0F               	movlw	15
  3853  003F7A  0100               	movlb	0	; () banked
  3854  003F7C  1785               	andwf	??_initSortTimer& (0+255),f,b
  3855  003F7E  0100               	movlb	0	; () banked
  3856  003F80  5185               	movf	??_initSortTimer& (0+255),w,b
  3857  003F82  0D0A               	mullw	10
  3858  003F84  0E24               	movlw	low _time
  3859  003F86  0100               	movlb	0	; () banked
  3860  003F88  2588               	addwf	initSortTimer@i& (0+255),w,b
  3861  003F8A  6ED9               	movwf	fsr2l,c
  3862  003F8C  0E01               	movlw	high _time
  3863  003F8E  0100               	movlb	0	; () banked
  3864  003F90  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3865  003F92  6EDA               	movwf	fsr2h,c
  3866  003F94  50DF               	movf	indf2,w,c
  3867  003F96  0B0F               	andlw	15
  3868  003F98  0100               	movlb	0	; () banked
  3869  003F9A  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  3870  003F9C  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  3871  003F9E  50F3               	movf	prodl,w,c
  3872  003FA0  0100               	movlb	0	; () banked
  3873  003FA2  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  3874  003FA4  50F4               	movf	prodh,w,c
  3875  003FA6  0100               	movlb	0	; () banked
  3876  003FA8  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  3877  003FAA  90D8               	bcf	status,0,c
  3878  003FAC  0100               	movlb	0	; () banked
  3879  003FAE  3588               	rlcf	initSortTimer@i& (0+255),w,b
  3880  003FB0  6ED9               	movwf	fsr2l,c
  3881  003FB2  0100               	movlb	0	; () banked
  3882  003FB4  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  3883  003FB6  6EDA               	movwf	fsr2h,c
  3884  003FB8  0E0E               	movlw	low _startTime
  3885  003FBA  26D9               	addwf	fsr2l,f,c
  3886  003FBC  0E01               	movlw	high _startTime
  3887  003FBE  22DA               	addwfc	fsr2h,f,c
  3888  003FC0  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  3889  003FC4  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  3890                           
  3891                           ; BSR set to: 0
  3892  003FC8  0100               	movlb	0	; () banked
  3893  003FCA  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  3894  003FCC  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  3895  003FCE  D7BA               	goto	l6392
  3896  003FD0                     l6402:
  3897                           
  3898                           ; BSR set to: 0
  3899                           ;sort.c: 353: }
  3900                           ;sort.c: 355: T0CON = 0b00010111;
  3901  003FD0  0E17               	movlw	23
  3902  003FD2  6ED5               	movwf	4053,c	;volatile
  3903                           
  3904                           ;sort.c: 364: TMR0H = 0b10000101;
  3905  003FD4  0E85               	movlw	133
  3906  003FD6  6ED7               	movwf	4055,c	;volatile
  3907                           
  3908                           ;sort.c: 365: TMR0L = 0b11101110;
  3909  003FD8  0EEE               	movlw	238
  3910  003FDA  6ED6               	movwf	4054,c	;volatile
  3911                           
  3912                           ; BSR set to: 0
  3913                           ;sort.c: 366: TMR0ON = 1;
  3914  003FDC  8ED5               	bsf	4053,7,c	;volatile
  3915                           
  3916                           ; BSR set to: 0
  3917  003FDE  0012               	return		;funcret
  3918  003FE0                     __end_of_initSortTimer:
  3919                           	opt stack 0
  3920                           tblptru	equ	0xFF8
  3921                           tblptrh	equ	0xFF7
  3922                           tblptrl	equ	0xFF6
  3923                           tablat	equ	0xFF5
  3924                           prodh	equ	0xFF4
  3925                           prodl	equ	0xFF3
  3926                           postinc0	equ	0xFEE
  3927                           wreg	equ	0xFE8
  3928                           postdec1	equ	0xFE5
  3929                           fsr1l	equ	0xFE1
  3930                           indf2	equ	0xFDF
  3931                           postinc2	equ	0xFDE
  3932                           postdec2	equ	0xFDD
  3933                           fsr2h	equ	0xFDA
  3934                           fsr2l	equ	0xFD9
  3935                           status	equ	0xFD8
  3936                           
  3937 ;; *************** function _initGlobalVars *****************
  3938 ;; Defined at:
  3939 ;;		line 325 in file "sort.c"
  3940 ;; Parameters:    Size  Location     Type
  3941 ;;		None
  3942 ;; Auto vars:     Size  Location     Type
  3943 ;;		None
  3944 ;; Return value:  Size  Location     Type
  3945 ;;                  1    wreg      void 
  3946 ;; Registers used:
  3947 ;;		wreg, status,2
  3948 ;; Tracked objects:
  3949 ;;		On entry : 0/0
  3950 ;;		On exit  : 0/0
  3951 ;;		Unchanged: 0/0
  3952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3956 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3957 ;;Total ram usage:        0 bytes
  3958 ;; Hardware stack levels used:    1
  3959 ;; Hardware stack levels required when called:    7
  3960 ;; This function calls:
  3961 ;;		Nothing
  3962 ;; This function is called by:
  3963 ;;		_Loading
  3964 ;; This function uses a non-reentrant model
  3965 ;;
  3966                           
  3967                           	psect	text5
  3968  00429C                     __ptext5:
  3969                           	opt stack 0
  3970  00429C                     _initGlobalVars:
  3971                           	opt stack 21
  3972                           
  3973                           ;sort.c: 327: first = 0;
  3974                           
  3975                           ; BSR set to: 0
  3976                           ;incstack = 0
  3977  00429C  0E00               	movlw	0
  3978  00429E  6E6E               	movwf	_first+1,c
  3979  0042A0  0E00               	movlw	0
  3980  0042A2  6E6D               	movwf	_first,c
  3981                           
  3982                           ;sort.c: 330: f_loadingNewCan = 0;
  3983  0042A4  0E00               	movlw	0
  3984  0042A6  0100               	movlb	0	; () banked
  3985  0042A8  6FEB               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3986  0042AA  0E00               	movlw	0
  3987  0042AC  6FEA               	movwf	_f_loadingNewCan& (0+255),b
  3988                           
  3989                           ;sort.c: 331: f_lastCan = 0;
  3990  0042AE  0E00               	movlw	0
  3991  0042B0  0100               	movlb	0	; () banked
  3992  0042B2  6FE9               	movwf	(_f_lastCan+1)& (0+255),b
  3993  0042B4  0E00               	movlw	0
  3994  0042B6  6FE8               	movwf	_f_lastCan& (0+255),b
  3995                           
  3996                           ;sort.c: 332: f_ID_receive = 1;
  3997  0042B8  0E00               	movlw	0
  3998  0042BA  6E66               	movwf	_f_ID_receive+1,c
  3999  0042BC  0E01               	movlw	1
  4000  0042BE  6E65               	movwf	_f_ID_receive,c
  4001                           
  4002                           ;sort.c: 333: f_can_coming_to_ID = 0;
  4003  0042C0  0E00               	movlw	0
  4004  0042C2  6E68               	movwf	_f_can_coming_to_ID+1,c
  4005  0042C4  0E00               	movlw	0
  4006  0042C6  6E67               	movwf	_f_can_coming_to_ID,c
  4007                           
  4008                           ;sort.c: 334: f_can_coming_to_distribution = 0;
  4009  0042C8  0E00               	movlw	0
  4010  0042CA  6E6A               	movwf	_f_can_coming_to_distribution+1,c
  4011  0042CC  0E00               	movlw	0
  4012  0042CE  6E69               	movwf	_f_can_coming_to_distribution,c
  4013                           
  4014                           ;sort.c: 335: f_can_distributed = 0;
  4015  0042D0  0E00               	movlw	0
  4016  0042D2  0101               	movlb	1	; () banked
  4017  0042D4  6F30               	movwf	(_f_can_distributed+1)& (0+255),b
  4018  0042D6  0E00               	movlw	0
  4019  0042D8  6F2F               	movwf	_f_can_distributed& (0+255),b
  4020                           
  4021                           ;sort.c: 336: f_most_recent_sort_time = 0;
  4022  0042DA  0E00               	movlw	0
  4023  0042DC  6E6C               	movwf	_f_most_recent_sort_time+1,c
  4024  0042DE  0E00               	movlw	0
  4025  0042E0  6E6B               	movwf	_f_most_recent_sort_time,c
  4026                           
  4027                           ;sort.c: 339: count_total = 0;
  4028  0042E2  0E00               	movlw	0
  4029  0042E4  0100               	movlb	0	; () banked
  4030  0042E6  6FFF               	movwf	(_count_total+1)& (0+255),b
  4031  0042E8  0E00               	movlw	0
  4032  0042EA  6FFE               	movwf	_count_total& (0+255),b
  4033                           
  4034                           ;sort.c: 340: count_pop_no_tab = 0;
  4035  0042EC  0E00               	movlw	0
  4036  0042EE  6E5C               	movwf	_count_pop_no_tab+1,c
  4037  0042F0  0E00               	movlw	0
  4038  0042F2  6E5B               	movwf	_count_pop_no_tab,c
  4039                           
  4040                           ;sort.c: 341: count_pop_w_tab = 0;
  4041  0042F4  0E00               	movlw	0
  4042  0042F6  6E5E               	movwf	_count_pop_w_tab+1,c
  4043  0042F8  0E00               	movlw	0
  4044  0042FA  6E5D               	movwf	_count_pop_w_tab,c
  4045                           
  4046                           ;sort.c: 342: count_can_w_lab = 0;
  4047  0042FC  0E00               	movlw	0
  4048  0042FE  0101               	movlb	1	; () banked
  4049  004300  6F2E               	movwf	(_count_can_w_lab+1)& (0+255),b
  4050  004302  0E00               	movlw	0
  4051  004304  6F2D               	movwf	_count_can_w_lab& (0+255),b
  4052                           
  4053                           ;sort.c: 343: count_can_no_lab = 0;
  4054  004306  0E00               	movlw	0
  4055  004308  0101               	movlb	1	; () banked
  4056  00430A  6F2C               	movwf	(_count_can_no_lab+1)& (0+255),b
  4057  00430C  0E00               	movlw	0
  4058  00430E  6F2B               	movwf	_count_can_no_lab& (0+255),b
  4059                           
  4060                           ;sort.c: 346: most_recent_sort_time = 999;
  4061  004310  0E03               	movlw	3
  4062  004312  0101               	movlb	1	; () banked
  4063  004314  6F34               	movwf	(_most_recent_sort_time+1)& (0+255),b
  4064  004316  0EE7               	movlw	231
  4065  004318  6F33               	movwf	_most_recent_sort_time& (0+255),b
  4066                           
  4067                           ; BSR set to: 1
  4068  00431A  0012               	return		;funcret
  4069  00431C                     __end_of_initGlobalVars:
  4070                           	opt stack 0
  4071                           tblptru	equ	0xFF8
  4072                           tblptrh	equ	0xFF7
  4073                           tblptrl	equ	0xFF6
  4074                           tablat	equ	0xFF5
  4075                           prodh	equ	0xFF4
  4076                           prodl	equ	0xFF3
  4077                           postinc0	equ	0xFEE
  4078                           wreg	equ	0xFE8
  4079                           postdec1	equ	0xFE5
  4080                           fsr1l	equ	0xFE1
  4081                           indf2	equ	0xFDF
  4082                           postinc2	equ	0xFDE
  4083                           postdec2	equ	0xFDD
  4084                           fsr2h	equ	0xFDA
  4085                           fsr2l	equ	0xFD9
  4086                           status	equ	0xFD8
  4087                           
  4088 ;; *************** function _getMAG *****************
  4089 ;; Defined at:
  4090 ;;		line 427 in file "sort.c"
  4091 ;; Parameters:    Size  Location     Type
  4092 ;;		None
  4093 ;; Auto vars:     Size  Location     Type
  4094 ;;		None
  4095 ;; Return value:  Size  Location     Type
  4096 ;;                  1    wreg      void 
  4097 ;; Registers used:
  4098 ;;		wreg, status,2, status,0, cstack
  4099 ;; Tracked objects:
  4100 ;;		On entry : 0/0
  4101 ;;		On exit  : 0/0
  4102 ;;		Unchanged: 0/0
  4103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4106 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4107 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4108 ;;Total ram usage:        2 bytes
  4109 ;; Hardware stack levels used:    1
  4110 ;; Hardware stack levels required when called:    9
  4111 ;; This function calls:
  4112 ;;		_readMAG
  4113 ;; This function is called by:
  4114 ;;		_Loading
  4115 ;; This function uses a non-reentrant model
  4116 ;;
  4117                           
  4118                           	psect	text6
  4119  004A1C                     __ptext6:
  4120                           	opt stack 0
  4121  004A1C                     _getMAG:
  4122                           	opt stack 19
  4123                           
  4124                           ;sort.c: 428: readMAG();
  4125                           
  4126                           ; BSR set to: 1
  4127                           ;incstack = 0
  4128  004A1C  EC36  F024         	call	_readMAG	;wreg free
  4129                           
  4130                           ;sort.c: 430: if(MAG_signal==1){
  4131  004A20  0100               	movlb	0	; () banked
  4132  004A22  05E0               	decf	_MAG_signal& (0+255),w,b
  4133  004A24  0100               	movlb	0	; () banked
  4134  004A26  11E1               	iorwf	(_MAG_signal+1)& (0+255),w,b
  4135  004A28  A4D8               	btfss	status,2,c
  4136  004A2A  0012               	return	
  4137                           
  4138                           ; BSR set to: 0
  4139                           ;sort.c: 431: _delay((unsigned long)((500)*(32000000/4000.0)));
  4140  004A2C  0E15               	movlw	21
  4141  004A2E  0100               	movlb	0	; () banked
  4142  004A30  6F87               	movwf	(??_getMAG+1)& (0+255),b
  4143  004A32  0E4B               	movlw	75
  4144  004A34  0100               	movlb	0	; () banked
  4145  004A36  6F86               	movwf	??_getMAG& (0+255),b
  4146  004A38  0EBE               	movlw	190
  4147  004A3A                     u8277:
  4148  004A3A  2EE8               	decfsz	wreg,f,c
  4149  004A3C  D7FE               	bra	u8277
  4150  004A3E  2F86               	decfsz	??_getMAG& (0+255),f,b
  4151  004A40  D7FC               	bra	u8277
  4152  004A42  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  4153  004A44  D7FA               	bra	u8277
  4154  004A46  F000               	nop	
  4155                           
  4156                           ;sort.c: 432: readMAG();
  4157  004A48  EC36  F024         	call	_readMAG	;wreg free
  4158  004A4C  0012               	return	
  4159  004A4E                     __end_of_getMAG:
  4160                           	opt stack 0
  4161                           tblptru	equ	0xFF8
  4162                           tblptrh	equ	0xFF7
  4163                           tblptrl	equ	0xFF6
  4164                           tablat	equ	0xFF5
  4165                           prodh	equ	0xFF4
  4166                           prodl	equ	0xFF3
  4167                           postinc0	equ	0xFEE
  4168                           wreg	equ	0xFE8
  4169                           postdec1	equ	0xFE5
  4170                           fsr1l	equ	0xFE1
  4171                           indf2	equ	0xFDF
  4172                           postinc2	equ	0xFDE
  4173                           postdec2	equ	0xFDD
  4174                           fsr2h	equ	0xFDA
  4175                           fsr2l	equ	0xFD9
  4176                           status	equ	0xFD8
  4177                           
  4178 ;; *************** function _getIR *****************
  4179 ;; Defined at:
  4180 ;;		line 411 in file "sort.c"
  4181 ;; Parameters:    Size  Location     Type
  4182 ;;		None
  4183 ;; Auto vars:     Size  Location     Type
  4184 ;;  i               2    7[BANK0 ] int 
  4185 ;; Return value:  Size  Location     Type
  4186 ;;                  1    wreg      void 
  4187 ;; Registers used:
  4188 ;;		wreg, status,2, status,0, cstack
  4189 ;; Tracked objects:
  4190 ;;		On entry : 0/0
  4191 ;;		On exit  : 0/0
  4192 ;;		Unchanged: 0/0
  4193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4195 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4196 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4197 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4198 ;;Total ram usage:        3 bytes
  4199 ;; Hardware stack levels used:    1
  4200 ;; Hardware stack levels required when called:    9
  4201 ;; This function calls:
  4202 ;;		_readIR
  4203 ;; This function is called by:
  4204 ;;		_Loading
  4205 ;; This function uses a non-reentrant model
  4206 ;;
  4207                           
  4208                           	psect	text7
  4209  00440A                     __ptext7:
  4210                           	opt stack 0
  4211  00440A                     _getIR:
  4212                           	opt stack 19
  4213                           
  4214                           ;sort.c: 412: readIR();
  4215                           
  4216                           ;incstack = 0
  4217  00440A  EC10  F024         	call	_readIR	;wreg free
  4218                           
  4219                           ;sort.c: 413: for(int i = 0; i < 150; i++){
  4220  00440E  0E00               	movlw	0
  4221  004410  0100               	movlb	0	; () banked
  4222  004412  6F88               	movwf	(getIR@i+1)& (0+255),b
  4223  004414  0E00               	movlw	0
  4224  004416  6F87               	movwf	getIR@i& (0+255),b
  4225  004418                     l6484:
  4226                           
  4227                           ; BSR set to: 0
  4228  004418  0100               	movlb	0	; () banked
  4229  00441A  BF88               	btfsc	(getIR@i+1)& (0+255),7,b
  4230  00441C  D008               	goto	l6488
  4231  00441E  0100               	movlb	0	; () banked
  4232  004420  5188               	movf	(getIR@i+1)& (0+255),w,b
  4233  004422  E11A               	bnz	l6500
  4234  004424  0E96               	movlw	150
  4235  004426  0100               	movlb	0	; () banked
  4236  004428  5D87               	subwf	getIR@i& (0+255),w,b
  4237  00442A  B0D8               	btfsc	status,0,c
  4238  00442C  D015               	goto	l6500
  4239  00442E                     l6488:
  4240                           
  4241                           ; BSR set to: 0
  4242                           ;sort.c: 414: _delay((unsigned long)((500)*(32000000/4000000.0)));
  4243  00442E  0E06               	movlw	6
  4244  004430  0100               	movlb	0	; () banked
  4245  004432  6F86               	movwf	??_getIR& (0+255),b
  4246  004434  0E30               	movlw	48
  4247  004436                     u8287:
  4248  004436  2EE8               	decfsz	wreg,f,c
  4249  004438  D7FE               	bra	u8287
  4250  00443A  2F86               	decfsz	??_getIR& (0+255),f,b
  4251  00443C  D7FC               	bra	u8287
  4252  00443E  F000               	nop	
  4253                           
  4254                           ;sort.c: 415: readIR();
  4255  004440  EC10  F024         	call	_readIR	;wreg free
  4256                           
  4257                           ;sort.c: 416: if(!IR_signal){
  4258  004444  0100               	movlb	0	; () banked
  4259  004446  51DE               	movf	_IR_signal& (0+255),w,b
  4260  004448  0100               	movlb	0	; () banked
  4261  00444A  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  4262  00444C  B4D8               	btfsc	status,2,c
  4263  00444E  D004               	goto	l6500
  4264                           
  4265                           ; BSR set to: 0
  4266                           
  4267                           ; BSR set to: 0
  4268                           
  4269                           ; BSR set to: 0
  4270                           ;sort.c: 417: break;
  4271  004450  0100               	movlb	0	; () banked
  4272  004452  4B87               	infsnz	getIR@i& (0+255),f,b
  4273  004454  2B88               	incf	(getIR@i+1)& (0+255),f,b
  4274  004456  D7E0               	goto	l6484
  4275  004458                     l6500:
  4276                           
  4277                           ; BSR set to: 0
  4278                           ;sort.c: 418: }
  4279                           ;sort.c: 419: }
  4280                           ;sort.c: 420: if(IR_signal==1){
  4281  004458  0100               	movlb	0	; () banked
  4282  00445A  05DE               	decf	_IR_signal& (0+255),w,b
  4283  00445C  0100               	movlb	0	; () banked
  4284  00445E  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  4285  004460  A4D8               	btfss	status,2,c
  4286  004462  D006               	goto	l6504
  4287                           
  4288                           ; BSR set to: 0
  4289                           ;sort.c: 421: f_loadingNewCan = 1;
  4290  004464  0E00               	movlw	0
  4291  004466  0100               	movlb	0	; () banked
  4292  004468  6FEB               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4293  00446A  0E01               	movlw	1
  4294  00446C  6FEA               	movwf	_f_loadingNewCan& (0+255),b
  4295                           
  4296                           ;sort.c: 422: }
  4297  00446E  0012               	return	
  4298  004470                     l6504:
  4299                           
  4300                           ; BSR set to: 0
  4301                           ;sort.c: 423: else{
  4302                           ;sort.c: 424: f_loadingNewCan = 0;
  4303  004470  0E00               	movlw	0
  4304  004472  0100               	movlb	0	; () banked
  4305  004474  6FEB               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4306  004476  0E00               	movlw	0
  4307  004478  6FEA               	movwf	_f_loadingNewCan& (0+255),b
  4308  00447A  0012               	return	
  4309  00447C                     __end_of_getIR:
  4310                           	opt stack 0
  4311                           tblptru	equ	0xFF8
  4312                           tblptrh	equ	0xFF7
  4313                           tblptrl	equ	0xFF6
  4314                           tablat	equ	0xFF5
  4315                           prodh	equ	0xFF4
  4316                           prodl	equ	0xFF3
  4317                           postinc0	equ	0xFEE
  4318                           wreg	equ	0xFE8
  4319                           postdec1	equ	0xFE5
  4320                           fsr1l	equ	0xFE1
  4321                           indf2	equ	0xFDF
  4322                           postinc2	equ	0xFDE
  4323                           postdec2	equ	0xFDD
  4324                           fsr2h	equ	0xFDA
  4325                           fsr2l	equ	0xFD9
  4326                           status	equ	0xFD8
  4327                           
  4328 ;; *************** function _readIR *****************
  4329 ;; Defined at:
  4330 ;;		line 23 in file "ADCFunctionality.c"
  4331 ;; Parameters:    Size  Location     Type
  4332 ;;		None
  4333 ;; Auto vars:     Size  Location     Type
  4334 ;;  res             2    4[BANK0 ] int 
  4335 ;; Return value:  Size  Location     Type
  4336 ;;                  1    wreg      void 
  4337 ;; Registers used:
  4338 ;;		wreg, status,2, status,0, cstack
  4339 ;; Tracked objects:
  4340 ;;		On entry : 0/0
  4341 ;;		On exit  : 0/0
  4342 ;;		Unchanged: 0/0
  4343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4345 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4346 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4347 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4348 ;;Total ram usage:        4 bytes
  4349 ;; Hardware stack levels used:    1
  4350 ;; Hardware stack levels required when called:    8
  4351 ;; This function calls:
  4352 ;;		_readADC
  4353 ;; This function is called by:
  4354 ;;		_Loading
  4355 ;;		_getIR
  4356 ;; This function uses a non-reentrant model
  4357 ;;
  4358                           
  4359                           	psect	text8
  4360  004820                     __ptext8:
  4361                           	opt stack 0
  4362  004820                     _readIR:
  4363                           	opt stack 20
  4364                           
  4365                           ;ADCFunctionality.c: 24: readADC(0);
  4366                           
  4367                           ; BSR set to: 0
  4368                           ;incstack = 0
  4369  004820  0E00               	movlw	0
  4370  004822  EC73  F026         	call	_readADC
  4371                           
  4372                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  4373  004826  50C3               	movf	4035,w,c	;volatile
  4374  004828  CFC4 F082          	movff	4036,??_readIR	;volatile
  4375  00482C  0100               	movlb	0	; () banked
  4376  00482E  6B83               	clrf	(??_readIR+1)& (0+255),b
  4377  004830  C082  F083         	movff	??_readIR,??_readIR+1
  4378  004834  0100               	movlb	0	; () banked
  4379  004836  6B82               	clrf	??_readIR& (0+255),b
  4380  004838  0100               	movlb	0	; () banked
  4381  00483A  1182               	iorwf	??_readIR& (0+255),w,b
  4382  00483C  0100               	movlb	0	; () banked
  4383  00483E  6F84               	movwf	readIR@res& (0+255),b
  4384  004840  0100               	movlb	0	; () banked
  4385  004842  5183               	movf	(??_readIR+1)& (0+255),w,b
  4386  004844  0100               	movlb	0	; () banked
  4387  004846  6F85               	movwf	(readIR@res+1)& (0+255),b
  4388                           
  4389                           ; BSR set to: 0
  4390                           ;ADCFunctionality.c: 26: IR_signal = (res > 800) ? 1 : 0;
  4391  004848  0100               	movlb	0	; () banked
  4392  00484A  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  4393  00484C  D00A               	goto	u4310
  4394  00484E  0E21               	movlw	33
  4395  004850  0100               	movlb	0	; () banked
  4396  004852  5D84               	subwf	readIR@res& (0+255),w,b
  4397  004854  0E03               	movlw	3
  4398  004856  0100               	movlb	0	; () banked
  4399  004858  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  4400  00485A  A0D8               	btfss	status,0,c
  4401  00485C  D002               	goto	u4310
  4402  00485E  0E01               	movlw	1
  4403  004860  D001               	goto	u4320
  4404  004862                     u4310:
  4405  004862  0E00               	movlw	0
  4406  004864                     u4320:
  4407  004864  0100               	movlb	0	; () banked
  4408  004866  6FDE               	movwf	_IR_signal& (0+255),b
  4409  004868  6BDF               	clrf	(_IR_signal+1)& (0+255),b
  4410                           
  4411                           ; BSR set to: 0
  4412  00486A  0012               	return		;funcret
  4413  00486C                     __end_of_readIR:
  4414                           	opt stack 0
  4415                           tblptru	equ	0xFF8
  4416                           tblptrh	equ	0xFF7
  4417                           tblptrl	equ	0xFF6
  4418                           tablat	equ	0xFF5
  4419                           prodh	equ	0xFF4
  4420                           prodl	equ	0xFF3
  4421                           postinc0	equ	0xFEE
  4422                           wreg	equ	0xFE8
  4423                           postdec1	equ	0xFE5
  4424                           fsr1l	equ	0xFE1
  4425                           indf2	equ	0xFDF
  4426                           postinc2	equ	0xFDE
  4427                           postdec2	equ	0xFDD
  4428                           fsr2h	equ	0xFDA
  4429                           fsr2l	equ	0xFD9
  4430                           status	equ	0xFD8
  4431                           
  4432 ;; *************** function _ID *****************
  4433 ;; Defined at:
  4434 ;;		line 189 in file "sort.c"
  4435 ;; Parameters:    Size  Location     Type
  4436 ;;		None
  4437 ;; Auto vars:     Size  Location     Type
  4438 ;;  i               2    6[BANK0 ] int 
  4439 ;;  i               2    4[BANK0 ] int 
  4440 ;; Return value:  Size  Location     Type
  4441 ;;                  1    wreg      void 
  4442 ;; Registers used:
  4443 ;;		wreg, status,2, status,0, cstack
  4444 ;; Tracked objects:
  4445 ;;		On entry : 0/0
  4446 ;;		On exit  : 0/0
  4447 ;;		Unchanged: 0/0
  4448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4450 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4451 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4452 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4453 ;;Total ram usage:        6 bytes
  4454 ;; Hardware stack levels used:    1
  4455 ;; Hardware stack levels required when called:    8
  4456 ;; This function calls:
  4457 ;;		_delay_ms
  4458 ;; This function is called by:
  4459 ;;		_sort
  4460 ;; This function uses a non-reentrant model
  4461 ;;
  4462                           
  4463                           	psect	text9
  4464  003300                     __ptext9:
  4465                           	opt stack 0
  4466  003300                     _ID:
  4467                           	opt stack 21
  4468                           
  4469                           ;sort.c: 190: if(f_can_coming_to_ID){
  4470                           
  4471                           ; BSR set to: 0
  4472                           ;incstack = 0
  4473  003300  5067               	movf	_f_can_coming_to_ID,w,c
  4474  003302  1068               	iorwf	_f_can_coming_to_ID+1,w,c
  4475  003304  B4D8               	btfsc	status,2,c
  4476  003306  0012               	return	
  4477                           
  4478                           ;sort.c: 192: _delay((unsigned long)((1500)*(32000000/4000.0)));
  4479  003308  0E3D               	movlw	61
  4480  00330A  0100               	movlb	0	; () banked
  4481  00330C  6F83               	movwf	(??_ID+1)& (0+255),b
  4482  00330E  0EE1               	movlw	225
  4483  003310  0100               	movlb	0	; () banked
  4484  003312  6F82               	movwf	??_ID& (0+255),b
  4485  003314  0E3F               	movlw	63
  4486  003316                     u8297:
  4487  003316  2EE8               	decfsz	wreg,f,c
  4488  003318  D7FE               	bra	u8297
  4489  00331A  2F82               	decfsz	??_ID& (0+255),f,b
  4490  00331C  D7FC               	bra	u8297
  4491  00331E  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4492  003320  D7FA               	bra	u8297
  4493  003322  D000               	nop2	
  4494                           
  4495                           ;sort.c: 194: LATAbits.LATA3 = 1;
  4496  003324  8689               	bsf	3977,3,c	;volatile
  4497                           
  4498                           ;sort.c: 195: _delay((unsigned long)((600)*(32000000/4000.0)));
  4499  003326  0E19               	movlw	25
  4500  003328  0100               	movlb	0	; () banked
  4501  00332A  6F83               	movwf	(??_ID+1)& (0+255),b
  4502  00332C  0E5A               	movlw	90
  4503  00332E  0100               	movlb	0	; () banked
  4504  003330  6F82               	movwf	??_ID& (0+255),b
  4505  003332  0EB1               	movlw	177
  4506  003334                     u8307:
  4507  003334  2EE8               	decfsz	wreg,f,c
  4508  003336  D7FE               	bra	u8307
  4509  003338  2F82               	decfsz	??_ID& (0+255),f,b
  4510  00333A  D7FC               	bra	u8307
  4511  00333C  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4512  00333E  D7FA               	bra	u8307
  4513  003340  D000               	nop2	
  4514                           
  4515                           ;sort.c: 196: sensor_outputs[1] = PORTAbits.RA2;
  4516  003342  A480               	btfss	3968,2,c	;volatile
  4517  003344  D004               	goto	u5600
  4518  003346  0100               	movlb	0	; () banked
  4519  003348  6B82               	clrf	??_ID& (0+255),b
  4520  00334A  2B82               	incf	??_ID& (0+255),f,b
  4521  00334C  D002               	goto	u5608
  4522  00334E                     u5600:
  4523  00334E  0100               	movlb	0	; () banked
  4524  003350  6B82               	clrf	??_ID& (0+255),b
  4525  003352                     u5608:
  4526  003352  0100               	movlb	0	; () banked
  4527  003354  5182               	movf	??_ID& (0+255),w,b
  4528  003356  0100               	movlb	0	; () banked
  4529  003358  6FDC               	movwf	(_sensor_outputs+2)& (0+255),b
  4530  00335A  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  4531                           
  4532                           ; BSR set to: 0
  4533                           ;sort.c: 204: if(!sensor_outputs[0]){
  4534  00335C  0100               	movlb	0	; () banked
  4535  00335E  51DA               	movf	_sensor_outputs& (0+255),w,b
  4536  003360  0100               	movlb	0	; () banked
  4537  003362  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  4538  003364  A4D8               	btfss	status,2,c
  4539  003366  D014               	goto	l6954
  4540                           
  4541                           ; BSR set to: 0
  4542                           ;sort.c: 205: if(!sensor_outputs[1]){
  4543  003368  0100               	movlb	0	; () banked
  4544  00336A  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  4545  00336C  0100               	movlb	0	; () banked
  4546  00336E  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  4547  003370  A4D8               	btfss	status,2,c
  4548  003372  D007               	goto	l6950
  4549                           
  4550                           ; BSR set to: 0
  4551                           ;sort.c: 206: count_pop_no_tab++;
  4552  003374  4A5B               	infsnz	_count_pop_no_tab,f,c
  4553  003376  2A5C               	incf	_count_pop_no_tab+1,f,c
  4554                           
  4555                           ; BSR set to: 0
  4556                           ;sort.c: 207: cur_can = 0;
  4557  003378  0E00               	movlw	0
  4558  00337A  0100               	movlb	0	; () banked
  4559  00337C  6FE5               	movwf	(_cur_can+1)& (0+255),b
  4560  00337E  0E00               	movlw	0
  4561  003380  D006               	goto	L2
  4562  003382                     l6950:
  4563                           
  4564                           ; BSR set to: 0
  4565                           ;sort.c: 209: else{
  4566                           ;sort.c: 210: count_pop_w_tab++;
  4567  003382  4A5D               	infsnz	_count_pop_w_tab,f,c
  4568  003384  2A5E               	incf	_count_pop_w_tab+1,f,c
  4569                           
  4570                           ; BSR set to: 0
  4571                           ;sort.c: 211: cur_can = 1;
  4572  003386  0E00               	movlw	0
  4573  003388  0100               	movlb	0	; () banked
  4574  00338A  6FE5               	movwf	(_cur_can+1)& (0+255),b
  4575  00338C  0E01               	movlw	1
  4576  00338E                     L2:
  4577  00338E  6FE4               	movwf	_cur_can& (0+255),b
  4578  003390                     l6954:
  4579                           
  4580                           ; BSR set to: 0
  4581                           ;sort.c: 212: }
  4582                           ;sort.c: 213: }
  4583                           ;sort.c: 214: if(sensor_outputs[0]){
  4584  003390  0100               	movlb	0	; () banked
  4585  003392  51DA               	movf	_sensor_outputs& (0+255),w,b
  4586  003394  0100               	movlb	0	; () banked
  4587  003396  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  4588  003398  B4D8               	btfsc	status,2,c
  4589  00339A  D016               	goto	l6966
  4590                           
  4591                           ; BSR set to: 0
  4592                           ;sort.c: 215: if(!sensor_outputs[1]){
  4593  00339C  0100               	movlb	0	; () banked
  4594  00339E  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  4595  0033A0  0100               	movlb	0	; () banked
  4596  0033A2  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  4597  0033A4  A4D8               	btfss	status,2,c
  4598  0033A6  D008               	goto	l6962
  4599                           
  4600                           ; BSR set to: 0
  4601                           ;sort.c: 216: count_can_w_lab++;
  4602  0033A8  0101               	movlb	1	; () banked
  4603  0033AA  4B2D               	infsnz	_count_can_w_lab& (0+255),f,b
  4604  0033AC  2B2E               	incf	(_count_can_w_lab+1)& (0+255),f,b
  4605                           
  4606                           ; BSR set to: 1
  4607                           ;sort.c: 217: cur_can = 2;
  4608  0033AE  0E00               	movlw	0
  4609  0033B0  0100               	movlb	0	; () banked
  4610  0033B2  6FE5               	movwf	(_cur_can+1)& (0+255),b
  4611  0033B4  0E02               	movlw	2
  4612  0033B6  D007               	goto	L3
  4613  0033B8                     l6962:
  4614                           
  4615                           ; BSR set to: 0
  4616                           ;sort.c: 219: else{
  4617                           ;sort.c: 220: count_can_no_lab++;
  4618  0033B8  0101               	movlb	1	; () banked
  4619  0033BA  4B2B               	infsnz	_count_can_no_lab& (0+255),f,b
  4620  0033BC  2B2C               	incf	(_count_can_no_lab+1)& (0+255),f,b
  4621                           
  4622                           ; BSR set to: 1
  4623                           ;sort.c: 221: cur_can = 3;
  4624  0033BE  0E00               	movlw	0
  4625  0033C0  0100               	movlb	0	; () banked
  4626  0033C2  6FE5               	movwf	(_cur_can+1)& (0+255),b
  4627  0033C4  0E03               	movlw	3
  4628  0033C6                     L3:
  4629  0033C6  6FE4               	movwf	_cur_can& (0+255),b
  4630  0033C8                     l6966:
  4631                           
  4632                           ; BSR set to: 0
  4633                           ;sort.c: 222: }
  4634                           ;sort.c: 223: }
  4635                           ;sort.c: 224: LATAbits.LATA3 = 0;
  4636  0033C8  9689               	bcf	3977,3,c	;volatile
  4637                           
  4638                           ; BSR set to: 0
  4639                           ;sort.c: 225: _delay((unsigned long)((200)*(32000000/4000.0)));
  4640  0033CA  0E09               	movlw	9
  4641  0033CC  0100               	movlb	0	; () banked
  4642  0033CE  6F83               	movwf	(??_ID+1)& (0+255),b
  4643  0033D0  0E1E               	movlw	30
  4644  0033D2  0100               	movlb	0	; () banked
  4645  0033D4  6F82               	movwf	??_ID& (0+255),b
  4646  0033D6  0EE4               	movlw	228
  4647  0033D8                     u8317:
  4648  0033D8  2EE8               	decfsz	wreg,f,c
  4649  0033DA  D7FE               	bra	u8317
  4650  0033DC  2F82               	decfsz	??_ID& (0+255),f,b
  4651  0033DE  D7FC               	bra	u8317
  4652  0033E0  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4653  0033E2  D7FA               	bra	u8317
  4654  0033E4  F000               	nop	
  4655                           
  4656                           ;sort.c: 226: LATAbits.LATA3 = 1;
  4657  0033E6  8689               	bsf	3977,3,c	;volatile
  4658                           
  4659                           ;sort.c: 229: for(int i=0;i<10000;i++)
  4660  0033E8  0E00               	movlw	0
  4661  0033EA  0100               	movlb	0	; () banked
  4662  0033EC  6F85               	movwf	(ID@i+1)& (0+255),b
  4663  0033EE  0E00               	movlw	0
  4664  0033F0  6F84               	movwf	ID@i& (0+255),b
  4665  0033F2  0100               	movlb	0	; () banked
  4666  0033F4  BF85               	btfsc	(ID@i+1)& (0+255),7,b
  4667  0033F6  D008               	goto	l777
  4668  0033F8  0E10               	movlw	16
  4669  0033FA  0100               	movlb	0	; () banked
  4670  0033FC  5D84               	subwf	ID@i& (0+255),w,b
  4671  0033FE  0E27               	movlw	39
  4672  003400  0100               	movlb	0	; () banked
  4673  003402  5985               	subwfb	(ID@i+1)& (0+255),w,b
  4674  003404  B0D8               	btfsc	status,0,c
  4675  003406  D00D               	goto	l778
  4676  003408                     l777:
  4677                           
  4678                           ; BSR set to: 0
  4679                           ;sort.c: 230: {
  4680                           ;sort.c: 231: LATCbits.LATC0 = 1;
  4681  003408  808B               	bsf	3979,0,c	;volatile
  4682                           
  4683                           ; BSR set to: 0
  4684                           ;sort.c: 232: _delay((unsigned long)((10)*(32000000/4000000.0)));
  4685  00340A  0E1A               	movlw	26
  4686  00340C                     u8327:
  4687  00340C  2EE8               	decfsz	wreg,f,c
  4688  00340E  D7FE               	bra	u8327
  4689  003410  D000               	nop2	
  4690                           
  4691                           ;sort.c: 233: LATCbits.LATC0 = 0;
  4692  003412  908B               	bcf	3979,0,c	;volatile
  4693                           
  4694                           ;sort.c: 234: _delay((unsigned long)((90)*(32000000/4000000.0)));
  4695  003414  0EF0               	movlw	240
  4696  003416                     u8337:
  4697  003416  2EE8               	decfsz	wreg,f,c
  4698  003418  D7FE               	bra	u8337
  4699  00341A  0100               	movlb	0	; () banked
  4700  00341C  4B84               	infsnz	ID@i& (0+255),f,b
  4701  00341E  2B85               	incf	(ID@i+1)& (0+255),f,b
  4702  003420  D7E8               	goto	L4
  4703  003422                     l778:
  4704                           
  4705                           ; BSR set to: 0
  4706                           ;sort.c: 235: }
  4707                           ;sort.c: 236: LATCbits.LATC0 = 0;
  4708  003422  908B               	bcf	3979,0,c	;volatile
  4709                           
  4710                           ;sort.c: 238: LATAbits.LATA3 = 0;
  4711  003424  9689               	bcf	3977,3,c	;volatile
  4712                           
  4713                           ; BSR set to: 0
  4714                           ;sort.c: 242: f_can_coming_to_distribution = 1;
  4715  003426  0E00               	movlw	0
  4716  003428  6E6A               	movwf	_f_can_coming_to_distribution+1,c
  4717  00342A  0E01               	movlw	1
  4718  00342C  6E69               	movwf	_f_can_coming_to_distribution,c
  4719                           
  4720                           ; BSR set to: 0
  4721                           ;sort.c: 243: _delay((unsigned long)((1500)*(32000000/4000.0)));
  4722  00342E  0E3D               	movlw	61
  4723  003430  0100               	movlb	0	; () banked
  4724  003432  6F83               	movwf	(??_ID+1)& (0+255),b
  4725  003434  0EE1               	movlw	225
  4726  003436  0100               	movlb	0	; () banked
  4727  003438  6F82               	movwf	??_ID& (0+255),b
  4728  00343A  0E3F               	movlw	63
  4729  00343C                     u8347:
  4730  00343C  2EE8               	decfsz	wreg,f,c
  4731  00343E  D7FE               	bra	u8347
  4732  003440  2F82               	decfsz	??_ID& (0+255),f,b
  4733  003442  D7FC               	bra	u8347
  4734  003444  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4735  003446  D7FA               	bra	u8347
  4736  003448  D000               	nop2	
  4737                           
  4738                           ;sort.c: 244: LATCbits.LATC0 = 1;
  4739  00344A  808B               	bsf	3979,0,c	;volatile
  4740                           
  4741                           ;sort.c: 247: if(!f_lastCan){
  4742  00344C  0100               	movlb	0	; () banked
  4743  00344E  51E8               	movf	_f_lastCan& (0+255),w,b
  4744  003450  0100               	movlb	0	; () banked
  4745  003452  11E9               	iorwf	(_f_lastCan+1)& (0+255),w,b
  4746  003454  A4D8               	btfss	status,2,c
  4747  003456  D032               	goto	l7004
  4748                           
  4749                           ; BSR set to: 0
  4750                           ;sort.c: 248: for(int i=0; i<46; i++){
  4751  003458  0E00               	movlw	0
  4752  00345A  0100               	movlb	0	; () banked
  4753  00345C  6F87               	movwf	(ID@i_1118+1)& (0+255),b
  4754  00345E  0E00               	movlw	0
  4755  003460  6F86               	movwf	ID@i_1118& (0+255),b
  4756                           
  4757                           ; BSR set to: 0
  4758  003462  0100               	movlb	0	; () banked
  4759  003464  BF87               	btfsc	(ID@i_1118+1)& (0+255),7,b
  4760  003466  D008               	goto	l6996
  4761  003468  0100               	movlb	0	; () banked
  4762  00346A  5187               	movf	(ID@i_1118+1)& (0+255),w,b
  4763  00346C  E126               	bnz	l781
  4764  00346E  0E2E               	movlw	46
  4765  003470  0100               	movlb	0	; () banked
  4766  003472  5D86               	subwf	ID@i_1118& (0+255),w,b
  4767  003474  B0D8               	btfsc	status,0,c
  4768  003476  D021               	goto	l781
  4769  003478                     l6996:
  4770                           
  4771                           ; BSR set to: 0
  4772                           ;sort.c: 249: LATAbits.LATA5 = !LATAbits.LATA5;
  4773  003478  BA89               	btfsc	3977,5,c	;volatile
  4774  00347A  D004               	goto	u5690
  4775  00347C  0100               	movlb	0	; () banked
  4776  00347E  6B82               	clrf	??_ID& (0+255),b
  4777  003480  2B82               	incf	??_ID& (0+255),f,b
  4778  003482  D002               	goto	u5708
  4779  003484                     u5690:
  4780  003484  0100               	movlb	0	; () banked
  4781  003486  6B82               	clrf	??_ID& (0+255),b
  4782  003488                     u5708:
  4783  003488  0100               	movlb	0	; () banked
  4784  00348A  3B82               	swapf	??_ID& (0+255),f,b
  4785  00348C  4782               	rlncf	??_ID& (0+255),f,b
  4786  00348E  5089               	movf	3977,w,c	;volatile
  4787  003490  0100               	movlb	0	; () banked
  4788  003492  1982               	xorwf	??_ID& (0+255),w,b
  4789  003494  0BDF               	andlw	-33
  4790  003496  1982               	xorwf	??_ID& (0+255),w,b
  4791  003498  6E89               	movwf	3977,c	;volatile
  4792                           
  4793                           ; BSR set to: 0
  4794                           ;sort.c: 250: delay_ms(45-i);
  4795  00349A  0100               	movlb	0	; () banked
  4796  00349C  5186               	movf	ID@i_1118& (0+255),w,b
  4797  00349E  0800               	sublw	0
  4798  0034A0  0F2D               	addlw	45
  4799  0034A2  EC9E  F026         	call	_delay_ms
  4800  0034A6  0100               	movlb	0	; () banked
  4801  0034A8  4B86               	infsnz	ID@i_1118& (0+255),f,b
  4802  0034AA  2B87               	incf	(ID@i_1118+1)& (0+255),f,b
  4803                           
  4804                           ; BSR set to: 0
  4805  0034AC  0100               	movlb	0	; () banked
  4806  0034AE  BF87               	btfsc	(ID@i_1118+1)& (0+255),7,b
  4807  0034B0  D7E3               	goto	l6996
  4808  0034B2  0100               	movlb	0	; () banked
  4809  0034B4  5187               	movf	(ID@i_1118+1)& (0+255),w,b
  4810  0034B6  E101               	bnz	u5710
  4811  0034B8  D7DA               	goto	L5
  4812  0034BA                     u5710:
  4813  0034BA                     l781:
  4814                           
  4815                           ; BSR set to: 0
  4816                           ;sort.c: 251: }
  4817                           ;sort.c: 252: LATAbits.LATA5 = 1;
  4818  0034BA  8A89               	bsf	3977,5,c	;volatile
  4819  0034BC                     l7004:
  4820                           
  4821                           ; BSR set to: 0
  4822                           ;sort.c: 253: }
  4823                           ;sort.c: 255: f_can_coming_to_ID = 0;
  4824  0034BC  0E00               	movlw	0
  4825  0034BE  6E68               	movwf	_f_can_coming_to_ID+1,c
  4826  0034C0  0E00               	movlw	0
  4827  0034C2  6E67               	movwf	_f_can_coming_to_ID,c
  4828  0034C4  0012               	return	
  4829  0034C6                     __end_of_ID:
  4830                           	opt stack 0
  4831                           tblptru	equ	0xFF8
  4832                           tblptrh	equ	0xFF7
  4833                           tblptrl	equ	0xFF6
  4834                           tablat	equ	0xFF5
  4835                           prodh	equ	0xFF4
  4836                           prodl	equ	0xFF3
  4837                           postinc0	equ	0xFEE
  4838                           wreg	equ	0xFE8
  4839                           postdec1	equ	0xFE5
  4840                           fsr1l	equ	0xFE1
  4841                           indf2	equ	0xFDF
  4842                           postinc2	equ	0xFDE
  4843                           postdec2	equ	0xFDD
  4844                           fsr2h	equ	0xFDA
  4845                           fsr2l	equ	0xFD9
  4846                           status	equ	0xFD8
  4847                           
  4848 ;; *************** function _delay_ms *****************
  4849 ;; Defined at:
  4850 ;;		line 448 in file "sort.c"
  4851 ;; Parameters:    Size  Location     Type
  4852 ;;  milliseconds    1    wreg     unsigned char 
  4853 ;; Auto vars:     Size  Location     Type
  4854 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  4855 ;; Return value:  Size  Location     Type
  4856 ;;                  1    wreg      void 
  4857 ;; Registers used:
  4858 ;;		wreg, status,2, status,0, cstack
  4859 ;; Tracked objects:
  4860 ;;		On entry : 0/0
  4861 ;;		On exit  : 0/0
  4862 ;;		Unchanged: 0/0
  4863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4865 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4866 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4867 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4868 ;;Total ram usage:        2 bytes
  4869 ;; Hardware stack levels used:    1
  4870 ;; Hardware stack levels required when called:    7
  4871 ;; This function calls:
  4872 ;;		Nothing
  4873 ;; This function is called by:
  4874 ;;		_Loading
  4875 ;;		_ID
  4876 ;; This function uses a non-reentrant model
  4877 ;;
  4878                           
  4879                           	psect	text10
  4880  004D3C                     __ptext10:
  4881                           	opt stack 0
  4882  004D3C                     _delay_ms:
  4883                           	opt stack 21
  4884                           
  4885                           ;incstack = 0
  4886                           ;delay_ms@milliseconds stored from wreg
  4887  004D3C  0100               	movlb	0	; () banked
  4888  004D3E  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  4889                           
  4890                           ;sort.c: 449: while(milliseconds > 0)
  4891  004D40  D00B               	goto	l6464
  4892  004D42                     l6460:
  4893                           
  4894                           ;sort.c: 450: {
  4895                           ;sort.c: 451: milliseconds--;
  4896  004D42  0100               	movlb	0	; () banked
  4897  004D44  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  4898                           
  4899                           ; BSR set to: 0
  4900                           ;sort.c: 452: _delay((unsigned long)((990)*(32000000/4000000.0)));
  4901  004D46  0E0B               	movlw	11
  4902  004D48  0100               	movlb	0	; () banked
  4903  004D4A  6F80               	movwf	??_delay_ms& (0+255),b
  4904  004D4C  0E47               	movlw	71
  4905  004D4E                     u8357:
  4906  004D4E  2EE8               	decfsz	wreg,f,c
  4907  004D50  D7FE               	bra	u8357
  4908  004D52  2F80               	decfsz	??_delay_ms& (0+255),f,b
  4909  004D54  D7FC               	bra	u8357
  4910  004D56  D000               	nop2	
  4911  004D58                     l6464:
  4912  004D58  0100               	movlb	0	; () banked
  4913  004D5A  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  4914  004D5C  0100               	movlb	0	; () banked
  4915  004D5E  B4D8               	btfsc	status,2,c
  4916  004D60  0012               	return	
  4917  004D62  D7EF               	goto	l6460
  4918  004D64                     __end_of_delay_ms:
  4919                           	opt stack 0
  4920                           tblptru	equ	0xFF8
  4921                           tblptrh	equ	0xFF7
  4922                           tblptrl	equ	0xFF6
  4923                           tablat	equ	0xFF5
  4924                           prodh	equ	0xFF4
  4925                           prodl	equ	0xFF3
  4926                           postinc0	equ	0xFEE
  4927                           wreg	equ	0xFE8
  4928                           postdec1	equ	0xFE5
  4929                           fsr1l	equ	0xFE1
  4930                           indf2	equ	0xFDF
  4931                           postinc2	equ	0xFDE
  4932                           postdec2	equ	0xFDD
  4933                           fsr2h	equ	0xFDA
  4934                           fsr2l	equ	0xFD9
  4935                           status	equ	0xFD8
  4936                           
  4937 ;; *************** function _Distribution *****************
  4938 ;; Defined at:
  4939 ;;		line 258 in file "sort.c"
  4940 ;; Parameters:    Size  Location     Type
  4941 ;;		None
  4942 ;; Auto vars:     Size  Location     Type
  4943 ;;		None
  4944 ;; Return value:  Size  Location     Type
  4945 ;;                  1    wreg      void 
  4946 ;; Registers used:
  4947 ;;		wreg, status,2, status,0, cstack
  4948 ;; Tracked objects:
  4949 ;;		On entry : 0/0
  4950 ;;		On exit  : 0/0
  4951 ;;		Unchanged: 0/0
  4952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4955 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4956 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4957 ;;Total ram usage:        2 bytes
  4958 ;; Hardware stack levels used:    1
  4959 ;; Hardware stack levels required when called:    8
  4960 ;; This function calls:
  4961 ;;		_updateServoPosition
  4962 ;; This function is called by:
  4963 ;;		_sort
  4964 ;; This function uses a non-reentrant model
  4965 ;;
  4966                           
  4967                           	psect	text11
  4968  002CEC                     __ptext11:
  4969                           	opt stack 0
  4970  002CEC                     _Distribution:
  4971                           	opt stack 21
  4972                           
  4973                           ;sort.c: 259: if(f_can_coming_to_distribution){
  4974                           
  4975                           ; BSR set to: 0
  4976                           ;incstack = 0
  4977  002CEC  5069               	movf	_f_can_coming_to_distribution,w,c
  4978  002CEE  106A               	iorwf	_f_can_coming_to_distribution+1,w,c
  4979  002CF0  B4D8               	btfsc	status,2,c
  4980  002CF2  0012               	return	
  4981  002CF4  D034               	goto	l7020
  4982  002CF6                     l7010:
  4983                           
  4984                           ;sort.c: 269: updateServoPosition(500, 1);
  4985  002CF6  0E01               	movlw	1
  4986  002CF8  0100               	movlb	0	; () banked
  4987  002CFA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4988  002CFC  0EF4               	movlw	244
  4989  002CFE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4990  002D00  0E00               	movlw	0
  4991  002D02  0100               	movlb	0	; () banked
  4992  002D04  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4993  002D06  0E01               	movlw	1
  4994  002D08  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4995  002D0A  ECCA  F021         	call	_updateServoPosition	;wreg free
  4996                           
  4997                           ;sort.c: 270: break;
  4998  002D0E  D03E               	goto	l7022
  4999  002D10                     l7012:
  5000                           
  5001                           ;sort.c: 272: updateServoPosition(850, 1);
  5002  002D10  0E03               	movlw	3
  5003  002D12  0100               	movlb	0	; () banked
  5004  002D14  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5005  002D16  0E52               	movlw	82
  5006  002D18  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5007  002D1A  0E00               	movlw	0
  5008  002D1C  0100               	movlb	0	; () banked
  5009  002D1E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5010  002D20  0E01               	movlw	1
  5011  002D22  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5012  002D24  ECCA  F021         	call	_updateServoPosition	;wreg free
  5013                           
  5014                           ;sort.c: 273: break;
  5015  002D28  D031               	goto	l7022
  5016  002D2A                     l7014:
  5017                           
  5018                           ;sort.c: 275: updateServoPosition(1670, 1);
  5019  002D2A  0E06               	movlw	6
  5020  002D2C  0100               	movlb	0	; () banked
  5021  002D2E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5022  002D30  0E86               	movlw	134
  5023  002D32  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5024  002D34  0E00               	movlw	0
  5025  002D36  0100               	movlb	0	; () banked
  5026  002D38  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5027  002D3A  0E01               	movlw	1
  5028  002D3C  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5029  002D3E  ECCA  F021         	call	_updateServoPosition	;wreg free
  5030                           
  5031                           ;sort.c: 276: break;
  5032  002D42  D024               	goto	l7022
  5033  002D44                     l7016:
  5034                           
  5035                           ;sort.c: 278: updateServoPosition(2400, 1);
  5036  002D44  0E09               	movlw	9
  5037  002D46  0100               	movlb	0	; () banked
  5038  002D48  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5039  002D4A  0E60               	movlw	96
  5040  002D4C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5041  002D4E  0E00               	movlw	0
  5042  002D50  0100               	movlb	0	; () banked
  5043  002D52  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5044  002D54  0E01               	movlw	1
  5045  002D56  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5046  002D58  ECCA  F021         	call	_updateServoPosition	;wreg free
  5047                           
  5048                           ;sort.c: 282: }
  5049                           
  5050                           ;sort.c: 281: break;
  5051                           
  5052                           ;sort.c: 280: default:
  5053                           
  5054                           ;sort.c: 279: break;
  5055  002D5C  D017               	goto	l7022
  5056  002D5E                     l7020:
  5057  002D5E  C0E4  F088         	movff	_cur_can,??_Distribution
  5058  002D62  C0E5  F089         	movff	_cur_can+1,??_Distribution+1
  5059                           
  5060                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5061                           ; Switch size 1, requested type "space"
  5062                           ; Number of cases is 1, Range of values is 0 to 0
  5063                           ; switch strategies available:
  5064                           ; Name         Instructions Cycles
  5065                           ; simple_byte            4     3 (average)
  5066                           ;	Chosen strategy is simple_byte
  5067  002D66  0100               	movlb	0	; () banked
  5068  002D68  5189               	movf	(??_Distribution+1)& (0+255),w,b
  5069  002D6A  0A00               	xorlw	0	; case 0
  5070  002D6C  A4D8               	btfss	status,2,c
  5071  002D6E  D00E               	goto	l7022
  5072                           
  5073                           ; BSR set to: 0
  5074                           ; Switch size 1, requested type "space"
  5075                           ; Number of cases is 4, Range of values is 0 to 3
  5076                           ; switch strategies available:
  5077                           ; Name         Instructions Cycles
  5078                           ; simple_byte           13     7 (average)
  5079                           ;	Chosen strategy is simple_byte
  5080  002D70  0100               	movlb	0	; () banked
  5081  002D72  5188               	movf	??_Distribution& (0+255),w,b
  5082  002D74  0A00               	xorlw	0	; case 0
  5083  002D76  B4D8               	btfsc	status,2,c
  5084  002D78  D7BE               	goto	l7010
  5085  002D7A  0A01               	xorlw	1	; case 1
  5086  002D7C  B4D8               	btfsc	status,2,c
  5087  002D7E  D7C8               	goto	l7012
  5088  002D80  0A03               	xorlw	3	; case 2
  5089  002D82  B4D8               	btfsc	status,2,c
  5090  002D84  D7D2               	goto	l7014
  5091  002D86  0A01               	xorlw	1	; case 3
  5092  002D88  B4D8               	btfsc	status,2,c
  5093  002D8A  D7DC               	goto	l7016
  5094  002D8C                     l7022:
  5095                           
  5096                           ;sort.c: 283: updateServoPosition(1050, 3);
  5097  002D8C  0E04               	movlw	4
  5098  002D8E  0100               	movlb	0	; () banked
  5099  002D90  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5100  002D92  0E1A               	movlw	26
  5101  002D94  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5102  002D96  0E00               	movlw	0
  5103  002D98  0100               	movlb	0	; () banked
  5104  002D9A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5105  002D9C  0E03               	movlw	3
  5106  002D9E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5107  002DA0  ECCA  F021         	call	_updateServoPosition	;wreg free
  5108                           
  5109                           ;sort.c: 284: _delay((unsigned long)((750)*(32000000/4000.0)));
  5110  002DA4  0E1F               	movlw	31
  5111  002DA6  0100               	movlb	0	; () banked
  5112  002DA8  6F89               	movwf	(??_Distribution+1)& (0+255),b
  5113  002DAA  0E71               	movlw	113
  5114  002DAC  0100               	movlb	0	; () banked
  5115  002DAE  6F88               	movwf	??_Distribution& (0+255),b
  5116  002DB0  0E1E               	movlw	30
  5117  002DB2                     u8367:
  5118  002DB2  2EE8               	decfsz	wreg,f,c
  5119  002DB4  D7FE               	bra	u8367
  5120  002DB6  2F88               	decfsz	??_Distribution& (0+255),f,b
  5121  002DB8  D7FC               	bra	u8367
  5122  002DBA  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  5123  002DBC  D7FA               	bra	u8367
  5124  002DBE  F000               	nop	
  5125                           
  5126                           ;sort.c: 292: switch(cur_can){
  5127  002DC0  D034               	goto	l7036
  5128  002DC2                     l7026:
  5129                           
  5130                           ;sort.c: 294: updateServoPosition(1260, 3);
  5131  002DC2  0E04               	movlw	4
  5132  002DC4  0100               	movlb	0	; () banked
  5133  002DC6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5134  002DC8  0EEC               	movlw	236
  5135  002DCA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5136  002DCC  0E00               	movlw	0
  5137  002DCE  0100               	movlb	0	; () banked
  5138  002DD0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5139  002DD2  0E03               	movlw	3
  5140  002DD4  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5141  002DD6  ECCA  F021         	call	_updateServoPosition	;wreg free
  5142                           
  5143                           ;sort.c: 295: break;
  5144  002DDA  D03E               	goto	l7038
  5145  002DDC                     l7028:
  5146                           
  5147                           ;sort.c: 297: updateServoPosition(1260, 3);
  5148  002DDC  0E04               	movlw	4
  5149  002DDE  0100               	movlb	0	; () banked
  5150  002DE0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5151  002DE2  0EEC               	movlw	236
  5152  002DE4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5153  002DE6  0E00               	movlw	0
  5154  002DE8  0100               	movlb	0	; () banked
  5155  002DEA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5156  002DEC  0E03               	movlw	3
  5157  002DEE  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5158  002DF0  ECCA  F021         	call	_updateServoPosition	;wreg free
  5159                           
  5160                           ;sort.c: 298: break;
  5161  002DF4  D031               	goto	l7038
  5162  002DF6                     l7030:
  5163                           
  5164                           ;sort.c: 300: updateServoPosition(1400, 3);
  5165  002DF6  0E05               	movlw	5
  5166  002DF8  0100               	movlb	0	; () banked
  5167  002DFA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5168  002DFC  0E78               	movlw	120
  5169  002DFE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5170  002E00  0E00               	movlw	0
  5171  002E02  0100               	movlb	0	; () banked
  5172  002E04  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5173  002E06  0E03               	movlw	3
  5174  002E08  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5175  002E0A  ECCA  F021         	call	_updateServoPosition	;wreg free
  5176                           
  5177                           ;sort.c: 301: break;
  5178  002E0E  D024               	goto	l7038
  5179  002E10                     l7032:
  5180                           
  5181                           ;sort.c: 303: updateServoPosition(1400, 3);
  5182  002E10  0E05               	movlw	5
  5183  002E12  0100               	movlb	0	; () banked
  5184  002E14  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5185  002E16  0E78               	movlw	120
  5186  002E18  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5187  002E1A  0E00               	movlw	0
  5188  002E1C  0100               	movlb	0	; () banked
  5189  002E1E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5190  002E20  0E03               	movlw	3
  5191  002E22  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5192  002E24  ECCA  F021         	call	_updateServoPosition	;wreg free
  5193                           
  5194                           ;sort.c: 307: }
  5195                           
  5196                           ;sort.c: 306: break;
  5197                           
  5198                           ;sort.c: 305: default:
  5199                           
  5200                           ;sort.c: 304: break;
  5201  002E28  D017               	goto	l7038
  5202  002E2A                     l7036:
  5203  002E2A  C0E4  F088         	movff	_cur_can,??_Distribution
  5204  002E2E  C0E5  F089         	movff	_cur_can+1,??_Distribution+1
  5205                           
  5206                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5207                           ; Switch size 1, requested type "space"
  5208                           ; Number of cases is 1, Range of values is 0 to 0
  5209                           ; switch strategies available:
  5210                           ; Name         Instructions Cycles
  5211                           ; simple_byte            4     3 (average)
  5212                           ;	Chosen strategy is simple_byte
  5213  002E32  0100               	movlb	0	; () banked
  5214  002E34  5189               	movf	(??_Distribution+1)& (0+255),w,b
  5215  002E36  0A00               	xorlw	0	; case 0
  5216  002E38  A4D8               	btfss	status,2,c
  5217  002E3A  D00E               	goto	l7038
  5218                           
  5219                           ; BSR set to: 0
  5220                           ; Switch size 1, requested type "space"
  5221                           ; Number of cases is 4, Range of values is 0 to 3
  5222                           ; switch strategies available:
  5223                           ; Name         Instructions Cycles
  5224                           ; simple_byte           13     7 (average)
  5225                           ;	Chosen strategy is simple_byte
  5226  002E3C  0100               	movlb	0	; () banked
  5227  002E3E  5188               	movf	??_Distribution& (0+255),w,b
  5228  002E40  0A00               	xorlw	0	; case 0
  5229  002E42  B4D8               	btfsc	status,2,c
  5230  002E44  D7BE               	goto	l7026
  5231  002E46  0A01               	xorlw	1	; case 1
  5232  002E48  B4D8               	btfsc	status,2,c
  5233  002E4A  D7C8               	goto	l7028
  5234  002E4C  0A03               	xorlw	3	; case 2
  5235  002E4E  B4D8               	btfsc	status,2,c
  5236  002E50  D7D2               	goto	l7030
  5237  002E52  0A01               	xorlw	1	; case 3
  5238  002E54  B4D8               	btfsc	status,2,c
  5239  002E56  D7DC               	goto	l7032
  5240  002E58                     l7038:
  5241                           
  5242                           ;sort.c: 308: _delay((unsigned long)((2500)*(32000000/4000.0)));
  5243  002E58  0E66               	movlw	102
  5244  002E5A  0100               	movlb	0	; () banked
  5245  002E5C  6F89               	movwf	(??_Distribution+1)& (0+255),b
  5246  002E5E  0E76               	movlw	118
  5247  002E60  0100               	movlb	0	; () banked
  5248  002E62  6F88               	movwf	??_Distribution& (0+255),b
  5249  002E64  0EC1               	movlw	193
  5250  002E66                     u8377:
  5251  002E66  2EE8               	decfsz	wreg,f,c
  5252  002E68  D7FE               	bra	u8377
  5253  002E6A  2F88               	decfsz	??_Distribution& (0+255),f,b
  5254  002E6C  D7FC               	bra	u8377
  5255  002E6E  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  5256  002E70  D7FA               	bra	u8377
  5257                           
  5258                           ;sort.c: 311: updateServoPosition(1050, 3);
  5259  002E72  0E04               	movlw	4
  5260  002E74  0100               	movlb	0	; () banked
  5261  002E76  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5262  002E78  0E1A               	movlw	26
  5263  002E7A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5264  002E7C  0E00               	movlw	0
  5265  002E7E  0100               	movlb	0	; () banked
  5266  002E80  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5267  002E82  0E03               	movlw	3
  5268  002E84  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5269  002E86  ECCA  F021         	call	_updateServoPosition	;wreg free
  5270                           
  5271                           ;sort.c: 312: _delay((unsigned long)((750)*(32000000/4000.0)));
  5272  002E8A  0E1F               	movlw	31
  5273  002E8C  0100               	movlb	0	; () banked
  5274  002E8E  6F89               	movwf	(??_Distribution+1)& (0+255),b
  5275  002E90  0E71               	movlw	113
  5276  002E92  0100               	movlb	0	; () banked
  5277  002E94  6F88               	movwf	??_Distribution& (0+255),b
  5278  002E96  0E1E               	movlw	30
  5279  002E98                     u8387:
  5280  002E98  2EE8               	decfsz	wreg,f,c
  5281  002E9A  D7FE               	bra	u8387
  5282  002E9C  2F88               	decfsz	??_Distribution& (0+255),f,b
  5283  002E9E  D7FC               	bra	u8387
  5284  002EA0  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  5285  002EA2  D7FA               	bra	u8387
  5286  002EA4  F000               	nop	
  5287                           
  5288                           ;sort.c: 313: updateServoPosition(1200, 1);
  5289  002EA6  0E04               	movlw	4
  5290  002EA8  0100               	movlb	0	; () banked
  5291  002EAA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5292  002EAC  0EB0               	movlw	176
  5293  002EAE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5294  002EB0  0E00               	movlw	0
  5295  002EB2  0100               	movlb	0	; () banked
  5296  002EB4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5297  002EB6  0E01               	movlw	1
  5298  002EB8  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5299  002EBA  ECCA  F021         	call	_updateServoPosition	;wreg free
  5300                           
  5301                           ;sort.c: 314: updateServoPosition(1050, 3);
  5302  002EBE  0E04               	movlw	4
  5303  002EC0  0100               	movlb	0	; () banked
  5304  002EC2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5305  002EC4  0E1A               	movlw	26
  5306  002EC6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5307  002EC8  0E00               	movlw	0
  5308  002ECA  0100               	movlb	0	; () banked
  5309  002ECC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5310  002ECE  0E03               	movlw	3
  5311  002ED0  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5312  002ED2  ECCA  F021         	call	_updateServoPosition	;wreg free
  5313                           
  5314                           ;sort.c: 316: f_can_coming_to_distribution = 0;
  5315  002ED6  0E00               	movlw	0
  5316  002ED8  6E6A               	movwf	_f_can_coming_to_distribution+1,c
  5317  002EDA  0E00               	movlw	0
  5318  002EDC  6E69               	movwf	_f_can_coming_to_distribution,c
  5319                           
  5320                           ;sort.c: 317: f_can_distributed = 1;
  5321  002EDE  0E00               	movlw	0
  5322  002EE0  0101               	movlb	1	; () banked
  5323  002EE2  6F30               	movwf	(_f_can_distributed+1)& (0+255),b
  5324  002EE4  0E01               	movlw	1
  5325  002EE6  6F2F               	movwf	_f_can_distributed& (0+255),b
  5326                           
  5327                           ; BSR set to: 1
  5328                           ;sort.c: 318: f_most_recent_sort_time = 1;
  5329  002EE8  0E00               	movlw	0
  5330  002EEA  6E6C               	movwf	_f_most_recent_sort_time+1,c
  5331  002EEC  0E01               	movlw	1
  5332  002EEE  6E6B               	movwf	_f_most_recent_sort_time,c
  5333                           
  5334                           ; BSR set to: 1
  5335                           ;sort.c: 319: if(f_lastCan == 1){
  5336  002EF0  0100               	movlb	0	; () banked
  5337  002EF2  05E8               	decf	_f_lastCan& (0+255),w,b
  5338  002EF4  0100               	movlb	0	; () banked
  5339  002EF6  11E9               	iorwf	(_f_lastCan+1)& (0+255),w,b
  5340  002EF8  A4D8               	btfss	status,2,c
  5341  002EFA  0012               	return	
  5342                           
  5343                           ; BSR set to: 0
  5344                           ;sort.c: 320: machine_state = DoneSorting_state;
  5345  002EFC  0E02               	movlw	2
  5346  002EFE  0100               	movlb	0	; () banked
  5347  002F00  6FFC               	movwf	_machine_state& (0+255),b
  5348                           
  5349                           ; BSR set to: 0
  5350  002F02  0012               	return	
  5351  002F04                     __end_of_Distribution:
  5352                           	opt stack 0
  5353                           tblptru	equ	0xFF8
  5354                           tblptrh	equ	0xFF7
  5355                           tblptrl	equ	0xFF6
  5356                           tablat	equ	0xFF5
  5357                           prodh	equ	0xFF4
  5358                           prodl	equ	0xFF3
  5359                           postinc0	equ	0xFEE
  5360                           wreg	equ	0xFE8
  5361                           postdec1	equ	0xFE5
  5362                           fsr1l	equ	0xFE1
  5363                           indf2	equ	0xFDF
  5364                           postinc2	equ	0xFDE
  5365                           postdec2	equ	0xFDD
  5366                           fsr2h	equ	0xFDA
  5367                           fsr2l	equ	0xFD9
  5368                           status	equ	0xFD8
  5369                           
  5370 ;; *************** function _machineConfig *****************
  5371 ;; Defined at:
  5372 ;;		line 15 in file "MachineConfig.c"
  5373 ;; Parameters:    Size  Location     Type
  5374 ;;		None
  5375 ;; Auto vars:     Size  Location     Type
  5376 ;;		None
  5377 ;; Return value:  Size  Location     Type
  5378 ;;                  1    wreg      void 
  5379 ;; Registers used:
  5380 ;;		wreg, status,2
  5381 ;; Tracked objects:
  5382 ;;		On entry : 0/0
  5383 ;;		On exit  : 0/0
  5384 ;;		Unchanged: 0/0
  5385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5389 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5390 ;;Total ram usage:        0 bytes
  5391 ;; Hardware stack levels used:    1
  5392 ;; Hardware stack levels required when called:    7
  5393 ;; This function calls:
  5394 ;;		Nothing
  5395 ;; This function is called by:
  5396 ;;		_main
  5397 ;; This function uses a non-reentrant model
  5398 ;;
  5399                           
  5400                           	psect	text12
  5401  004618                     __ptext12:
  5402                           	opt stack 0
  5403  004618                     _machineConfig:
  5404                           	opt stack 23
  5405                           
  5406                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  5407                           
  5408                           ;incstack = 0
  5409  004618  0EF0               	movlw	240
  5410  00461A  6ED3               	movwf	4051,c	;volatile
  5411                           
  5412                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  5413  00461C  8C9B               	bsf	3995,6,c	;volatile
  5414                           
  5415                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  5416  00461E  0E07               	movlw	7
  5417  004620  6E92               	movwf	3986,c	;volatile
  5418                           
  5419                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  5420  004622  0EF2               	movlw	242
  5421  004624  6E93               	movwf	3987,c	;volatile
  5422                           
  5423                           ;MachineConfig.c: 27: TRISC = 0x00;
  5424  004626  0E00               	movlw	0
  5425  004628  6E94               	movwf	3988,c	;volatile
  5426                           
  5427                           ;MachineConfig.c: 31: TRISD = 0x00;
  5428  00462A  0E00               	movlw	0
  5429  00462C  6E95               	movwf	3989,c	;volatile
  5430                           
  5431                           ;MachineConfig.c: 34: TRISE = 0x00;
  5432  00462E  0E00               	movlw	0
  5433  004630  6E96               	movwf	3990,c	;volatile
  5434                           
  5435                           ;MachineConfig.c: 37: LATA = 0x00;
  5436  004632  0E00               	movlw	0
  5437  004634  6E89               	movwf	3977,c	;volatile
  5438                           
  5439                           ;MachineConfig.c: 38: LATB = 0x00;
  5440  004636  0E00               	movlw	0
  5441  004638  6E8A               	movwf	3978,c	;volatile
  5442                           
  5443                           ;MachineConfig.c: 39: LATC = 0x00;
  5444  00463A  0E00               	movlw	0
  5445  00463C  6E8B               	movwf	3979,c	;volatile
  5446                           
  5447                           ;MachineConfig.c: 40: LATD = 0x00;
  5448  00463E  0E00               	movlw	0
  5449  004640  6E8C               	movwf	3980,c	;volatile
  5450                           
  5451                           ;MachineConfig.c: 41: LATE = 0x00;
  5452  004642  0E00               	movlw	0
  5453  004644  6E8D               	movwf	3981,c	;volatile
  5454                           
  5455                           ;MachineConfig.c: 43: nRBPU = 0;
  5456  004646  9EF1               	bcf	intcon2,7,c	;volatile
  5457                           
  5458                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  5459  004648  0E00               	movlw	0
  5460  00464A  6EC2               	movwf	4034,c	;volatile
  5461                           
  5462                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  5463  00464C  0E0D               	movlw	13
  5464  00464E  6EC1               	movwf	4033,c	;volatile
  5465                           
  5466                           ;MachineConfig.c: 50: CVRCON = 0x00;
  5467  004650  0E00               	movlw	0
  5468  004652  6EB5               	movwf	4021,c	;volatile
  5469                           
  5470                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  5471  004654  96B4               	bcf	4020,3,c	;volatile
  5472                           
  5473                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  5474  004656  0EB1               	movlw	177
  5475  004658  6EC0               	movwf	4032,c	;volatile
  5476                           
  5477                           ;MachineConfig.c: 55: INT1IE = 1;
  5478  00465A  86F0               	bsf	intcon3,3,c	;volatile
  5479                           
  5480                           ;MachineConfig.c: 57: TMR0IE = 1;
  5481  00465C  8AF2               	bsf	intcon,5,c	;volatile
  5482                           
  5483                           ;MachineConfig.c: 58: TMR1IE = 1;
  5484  00465E  809D               	bsf	3997,0,c	;volatile
  5485                           
  5486                           ;MachineConfig.c: 59: T1CON = 0b10110000;
  5487  004660  0EB0               	movlw	176
  5488  004662  6ECD               	movwf	4045,c	;volatile
  5489                           
  5490                           ;MachineConfig.c: 60: T3CON = 0b10110000;
  5491  004664  0EB0               	movlw	176
  5492  004666  6EB1               	movwf	4017,c	;volatile
  5493                           
  5494                           ;MachineConfig.c: 61: TMR2IE = 1;
  5495  004668  829D               	bsf	3997,1,c	;volatile
  5496                           
  5497                           ;MachineConfig.c: 62: TMR3IE = 1;
  5498  00466A  82A0               	bsf	4000,1,c	;volatile
  5499                           
  5500                           ;MachineConfig.c: 63: PEIE = 1;
  5501  00466C  8CF2               	bsf	intcon,6,c	;volatile
  5502                           
  5503                           ;MachineConfig.c: 64: ADIE = 0;
  5504  00466E  9C9D               	bcf	3997,6,c	;volatile
  5505                           
  5506                           ;MachineConfig.c: 65: (INTCONbits.GIE = 0);
  5507  004670  9EF2               	bcf	intcon,7,c	;volatile
  5508  004672  0012               	return		;funcret
  5509  004674                     __end_of_machineConfig:
  5510                           	opt stack 0
  5511                           tblptru	equ	0xFF8
  5512                           tblptrh	equ	0xFF7
  5513                           tblptrl	equ	0xFF6
  5514                           tablat	equ	0xFF5
  5515                           prodh	equ	0xFF4
  5516                           prodl	equ	0xFF3
  5517                           intcon	equ	0xFF2
  5518                           intcon2	equ	0xFF1
  5519                           intcon3	equ	0xFF0
  5520                           postinc0	equ	0xFEE
  5521                           wreg	equ	0xFE8
  5522                           postdec1	equ	0xFE5
  5523                           fsr1l	equ	0xFE1
  5524                           indf2	equ	0xFDF
  5525                           postinc2	equ	0xFDE
  5526                           postdec2	equ	0xFDD
  5527                           fsr2h	equ	0xFDA
  5528                           fsr2l	equ	0xFD9
  5529                           status	equ	0xFD8
  5530                           
  5531 ;; *************** function _logRun *****************
  5532 ;; Defined at:
  5533 ;;		line 84 in file "EEPROM.c"
  5534 ;; Parameters:    Size  Location     Type
  5535 ;;		None
  5536 ;; Auto vars:     Size  Location     Type
  5537 ;;  byte_i          1   53[BANK0 ] unsigned char 
  5538 ;;  i               2   55[BANK0 ] int 
  5539 ;;  num             1   49[BANK0 ] unsigned char 
  5540 ;;  addr            2   57[BANK0 ] unsigned short 
  5541 ;;  byte11          1   54[BANK0 ] unsigned char 
  5542 ;;  byte3           1   52[BANK0 ] unsigned char 
  5543 ;;  byte2           1   51[BANK0 ] unsigned char 
  5544 ;;  byte1           1   50[BANK0 ] unsigned char 
  5545 ;; Return value:  Size  Location     Type
  5546 ;;                  1    wreg      void 
  5547 ;; Registers used:
  5548 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5549 ;; Tracked objects:
  5550 ;;		On entry : 0/0
  5551 ;;		On exit  : 0/0
  5552 ;;		Unchanged: 0/0
  5553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5555 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5557 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5558 ;;Total ram usage:       10 bytes
  5559 ;; Hardware stack levels used:    1
  5560 ;; Hardware stack levels required when called:   11
  5561 ;; This function calls:
  5562 ;;		_EEPROM_read
  5563 ;;		_EEPROM_write
  5564 ;; This function is called by:
  5565 ;;		_main
  5566 ;; This function uses a non-reentrant model
  5567 ;;
  5568                           
  5569                           	psect	text13
  5570  0037CE                     __ptext13:
  5571                           	opt stack 0
  5572  0037CE                     _logRun:
  5573                           	opt stack 19
  5574                           
  5575                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  5576                           
  5577                           ;incstack = 0
  5578  0037CE  0E00               	movlw	0
  5579  0037D0  0100               	movlb	0	; () banked
  5580  0037D2  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  5581  0037D4  0E00               	movlw	0
  5582  0037D6  6F80               	movwf	EEPROM_read@address& (0+255),b
  5583  0037D8  EC3C  F027         	call	_EEPROM_read	;wreg free
  5584  0037DC  0100               	movlb	0	; () banked
  5585  0037DE  6FFD               	movwf	_sel& (0+255),b
  5586                           
  5587                           ; BSR set to: 0
  5588                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  5589  0037E0  0100               	movlb	0	; () banked
  5590  0037E2  51FD               	movf	_sel& (0+255),w,b
  5591  0037E4  0D0B               	mullw	11
  5592  0037E6  0E01               	movlw	1
  5593  0037E8  24F3               	addwf	prodl,w,c
  5594  0037EA  0100               	movlb	0	; () banked
  5595  0037EC  6FB9               	movwf	logRun@addr& (0+255),b
  5596  0037EE  0E00               	movlw	0
  5597  0037F0  20F4               	addwfc	prodh,w,c
  5598  0037F2  0100               	movlb	0	; () banked
  5599  0037F4  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  5600                           
  5601                           ; BSR set to: 0
  5602                           ;EEPROM.c: 101: if (sel < 3){
  5603  0037F6  0E03               	movlw	3
  5604  0037F8  0100               	movlb	0	; () banked
  5605  0037FA  61FD               	cpfslt	_sel& (0+255),b
  5606  0037FC  D00E               	goto	l8612
  5607                           
  5608                           ; BSR set to: 0
  5609                           ;EEPROM.c: 102: unsigned char num = sel+1;
  5610  0037FE  0100               	movlb	0	; () banked
  5611  003800  29FD               	incf	_sel& (0+255),w,b
  5612  003802  0100               	movlb	0	; () banked
  5613  003804  6FB1               	movwf	logRun@num& (0+255),b
  5614                           
  5615                           ; BSR set to: 0
  5616                           ;EEPROM.c: 103: EEPROM_write(0, num);
  5617  003806  0E00               	movlw	0
  5618  003808  0100               	movlb	0	; () banked
  5619  00380A  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  5620  00380C  0E00               	movlw	0
  5621  00380E  6FAB               	movwf	EEPROM_write@address& (0+255),b
  5622  003810  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  5623  003814  ECA1  F01D         	call	_EEPROM_write	;wreg free
  5624                           
  5625                           ;EEPROM.c: 104: }
  5626  003818  D00A               	goto	l8614
  5627  00381A                     l8612:
  5628                           
  5629                           ;EEPROM.c: 105: else{
  5630                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  5631  00381A  0E00               	movlw	0
  5632  00381C  0100               	movlb	0	; () banked
  5633  00381E  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  5634  003820  0E00               	movlw	0
  5635  003822  6FAB               	movwf	EEPROM_write@address& (0+255),b
  5636  003824  0E00               	movlw	0
  5637  003826  0100               	movlb	0	; () banked
  5638  003828  6FAD               	movwf	EEPROM_write@data& (0+255),b
  5639  00382A  ECA1  F01D         	call	_EEPROM_write	;wreg free
  5640  00382E                     l8614:
  5641                           
  5642                           ;EEPROM.c: 107: }
  5643                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  5644  00382E  0100               	movlb	0	; () banked
  5645  003830  51FE               	movf	_count_total& (0+255),w,b
  5646  003832  0980               	iorlw	128
  5647  003834  0100               	movlb	0	; () banked
  5648  003836  6FB2               	movwf	logRun@byte1& (0+255),b
  5649                           
  5650                           ; BSR set to: 0
  5651                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  5652  003838  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5653  00383C  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5654  003840  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  5655  003844  ECA1  F01D         	call	_EEPROM_write	;wreg free
  5656                           
  5657                           ;EEPROM.c: 112: addr++;
  5658  003848  0100               	movlb	0	; () banked
  5659  00384A  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5660  00384C  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5661                           
  5662                           ; BSR set to: 0
  5663                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  5664  00384E  385B               	swapf	_count_pop_no_tab,w,c
  5665  003850  0BF0               	andlw	240
  5666  003852  105D               	iorwf	_count_pop_w_tab,w,c
  5667  003854  0100               	movlb	0	; () banked
  5668  003856  6FB3               	movwf	logRun@byte2& (0+255),b
  5669                           
  5670                           ; BSR set to: 0
  5671                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  5672  003858  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5673  00385C  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5674  003860  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  5675  003864  ECA1  F01D         	call	_EEPROM_write	;wreg free
  5676                           
  5677                           ;EEPROM.c: 117: addr++;
  5678  003868  0100               	movlb	0	; () banked
  5679  00386A  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5680  00386C  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5681                           
  5682                           ; BSR set to: 0
  5683                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  5684  00386E  0101               	movlb	1	; () banked
  5685  003870  392D               	swapf	_count_can_w_lab& (0+255),w,b
  5686  003872  0BF0               	andlw	240
  5687  003874  0101               	movlb	1	; () banked
  5688  003876  112B               	iorwf	_count_can_no_lab& (0+255),w,b
  5689  003878  0100               	movlb	0	; () banked
  5690  00387A  6FB4               	movwf	logRun@byte3& (0+255),b
  5691                           
  5692                           ; BSR set to: 0
  5693                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  5694  00387C  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5695  003880  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5696  003884  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  5697  003888  ECA1  F01D         	call	_EEPROM_write	;wreg free
  5698                           
  5699                           ;EEPROM.c: 120: addr++;
  5700  00388C  0100               	movlb	0	; () banked
  5701  00388E  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5702  003890  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5703                           
  5704                           ; BSR set to: 0
  5705                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  5706  003892  0E00               	movlw	0
  5707  003894  0100               	movlb	0	; () banked
  5708  003896  6FB8               	movwf	(logRun@i+1)& (0+255),b
  5709  003898  0E00               	movlw	0
  5710  00389A  6FB7               	movwf	logRun@i& (0+255),b
  5711                           
  5712                           ; BSR set to: 0
  5713  00389C  0100               	movlb	0	; () banked
  5714  00389E  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  5715  0038A0  D008               	goto	l8638
  5716  0038A2  0100               	movlb	0	; () banked
  5717  0038A4  51B8               	movf	(logRun@i+1)& (0+255),w,b
  5718  0038A6  E128               	bnz	l996
  5719  0038A8  0E07               	movlw	7
  5720  0038AA  0100               	movlb	0	; () banked
  5721  0038AC  5DB7               	subwf	logRun@i& (0+255),w,b
  5722  0038AE  B0D8               	btfsc	status,0,c
  5723  0038B0  D023               	goto	l996
  5724  0038B2                     l8638:
  5725                           
  5726                           ; BSR set to: 0
  5727                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  5728  0038B2  90D8               	bcf	status,0,c
  5729  0038B4  0100               	movlb	0	; () banked
  5730  0038B6  35B7               	rlcf	logRun@i& (0+255),w,b
  5731  0038B8  6ED9               	movwf	fsr2l,c
  5732  0038BA  0100               	movlb	0	; () banked
  5733  0038BC  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  5734  0038BE  6EDA               	movwf	fsr2h,c
  5735  0038C0  0E0E               	movlw	low _startTime
  5736  0038C2  26D9               	addwf	fsr2l,f,c
  5737  0038C4  0E01               	movlw	high _startTime
  5738  0038C6  22DA               	addwfc	fsr2h,f,c
  5739  0038C8  50DF               	movf	indf2,w,c
  5740  0038CA  0100               	movlb	0	; () banked
  5741  0038CC  6FB5               	movwf	logRun@byte_i& (0+255),b
  5742                           
  5743                           ; BSR set to: 0
  5744                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  5745  0038CE  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5746  0038D2  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5747  0038D6  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  5748  0038DA  ECA1  F01D         	call	_EEPROM_write	;wreg free
  5749                           
  5750                           ;EEPROM.c: 126: addr++;
  5751  0038DE  0100               	movlb	0	; () banked
  5752  0038E0  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5753  0038E2  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5754                           
  5755                           ; BSR set to: 0
  5756  0038E4  0100               	movlb	0	; () banked
  5757  0038E6  4BB7               	infsnz	logRun@i& (0+255),f,b
  5758  0038E8  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  5759                           
  5760                           ; BSR set to: 0
  5761  0038EA  0100               	movlb	0	; () banked
  5762  0038EC  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  5763  0038EE  D7E1               	goto	l8638
  5764  0038F0  0100               	movlb	0	; () banked
  5765  0038F2  51B8               	movf	(logRun@i+1)& (0+255),w,b
  5766  0038F4  E101               	bnz	u7870
  5767  0038F6  D7D8               	goto	L6
  5768  0038F8                     u7870:
  5769  0038F8                     l996:
  5770                           
  5771                           ; BSR set to: 0
  5772                           ;EEPROM.c: 127: }
  5773                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  5774  0038F8  C0F8  F0B6         	movff	_total_time,logRun@byte11
  5775                           
  5776                           ; BSR set to: 0
  5777                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  5778  0038FC  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5779  003900  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5780  003904  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  5781  003908  ECA1  F01D         	call	_EEPROM_write	;wreg free
  5782  00390C  0012               	return		;funcret
  5783  00390E                     __end_of_logRun:
  5784                           	opt stack 0
  5785                           tblptru	equ	0xFF8
  5786                           tblptrh	equ	0xFF7
  5787                           tblptrl	equ	0xFF6
  5788                           tablat	equ	0xFF5
  5789                           prodh	equ	0xFF4
  5790                           prodl	equ	0xFF3
  5791                           intcon	equ	0xFF2
  5792                           intcon2	equ	0xFF1
  5793                           intcon3	equ	0xFF0
  5794                           postinc0	equ	0xFEE
  5795                           wreg	equ	0xFE8
  5796                           postdec1	equ	0xFE5
  5797                           fsr1l	equ	0xFE1
  5798                           indf2	equ	0xFDF
  5799                           postinc2	equ	0xFDE
  5800                           postdec2	equ	0xFDD
  5801                           fsr2h	equ	0xFDA
  5802                           fsr2l	equ	0xFD9
  5803                           status	equ	0xFD8
  5804                           
  5805 ;; *************** function _EEPROM_write *****************
  5806 ;; Defined at:
  5807 ;;		line 32 in file "EEPROM.c"
  5808 ;; Parameters:    Size  Location     Type
  5809 ;;  address         2   43[BANK0 ] unsigned short 
  5810 ;;  data            1   45[BANK0 ] unsigned char 
  5811 ;; Auto vars:     Size  Location     Type
  5812 ;;  i               1   48[BANK0 ] unsigned char 
  5813 ;;  i               1   47[BANK0 ] unsigned char 
  5814 ;; Return value:  Size  Location     Type
  5815 ;;                  1    wreg      void 
  5816 ;; Registers used:
  5817 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5818 ;; Tracked objects:
  5819 ;;		On entry : 0/0
  5820 ;;		On exit  : 0/0
  5821 ;;		Unchanged: 0/0
  5822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5823 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5824 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5825 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5826 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5827 ;;Total ram usage:        6 bytes
  5828 ;; Hardware stack levels used:    1
  5829 ;; Hardware stack levels required when called:   10
  5830 ;; This function calls:
  5831 ;;		_EEPROM_read
  5832 ;;		_lcdInst
  5833 ;;		_printf
  5834 ;; This function is called by:
  5835 ;;		_Loading
  5836 ;;		_logRun
  5837 ;; This function uses a non-reentrant model
  5838 ;;
  5839                           
  5840                           	psect	text14
  5841  003B42                     __ptext14:
  5842                           	opt stack 0
  5843  003B42                     _EEPROM_write:
  5844                           	opt stack 18
  5845                           
  5846                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  5847                           
  5848                           ;incstack = 0
  5849  003B42  84A6               	bsf	4006,2,c	;volatile
  5850                           
  5851                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  5852  003B44  0100               	movlb	0	; () banked
  5853  003B46  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  5854  003B48  6EAA               	movwf	4010,c	;volatile
  5855                           
  5856                           ; BSR set to: 0
  5857                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  5858  003B4A  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  5859                           
  5860                           ; BSR set to: 0
  5861                           ;EEPROM.c: 39: EEDATA = data;
  5862  003B4E  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  5863                           
  5864                           ; BSR set to: 0
  5865                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  5866  003B52  9EA6               	bcf	4006,7,c	;volatile
  5867                           
  5868                           ; BSR set to: 0
  5869                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  5870  003B54  9CA6               	bcf	4006,6,c	;volatile
  5871                           
  5872                           ; BSR set to: 0
  5873                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  5874  003B56  9EF2               	bcf	intcon,7,c	;volatile
  5875                           
  5876                           ;EEPROM.c: 45: EECON2 = 0x55;
  5877  003B58  0E55               	movlw	85
  5878  003B5A  6EA7               	movwf	4007,c	;volatile
  5879                           
  5880                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  5881  003B5C  0EAA               	movlw	170
  5882  003B5E  6EA7               	movwf	4007,c	;volatile
  5883                           
  5884                           ; BSR set to: 0
  5885                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  5886  003B60  82A6               	bsf	4006,1,c	;volatile
  5887                           
  5888                           ; BSR set to: 0
  5889                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  5890  003B62  8EF2               	bsf	intcon,7,c	;volatile
  5891  003B64                     l974:
  5892  003B64  A8A1               	btfss	4001,4,c	;volatile
  5893  003B66  D7FE               	goto	l974
  5894                           
  5895                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  5896  003B68  98A1               	bcf	4001,4,c	;volatile
  5897                           
  5898                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  5899  003B6A  94A6               	bcf	4006,2,c	;volatile
  5900                           
  5901                           ;EEPROM.c: 57: if(debug){
  5902  003B6C  505F               	movf	_debug,w,c
  5903  003B6E  1060               	iorwf	_debug+1,w,c
  5904  003B70  B4D8               	btfsc	status,2,c
  5905  003B72  0012               	return	
  5906                           
  5907                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5908  003B74  0E01               	movlw	1
  5909  003B76  EC6E  F027         	call	_lcdInst
  5910  003B7A  0E68               	movlw	104
  5911  003B7C  0100               	movlb	0	; () banked
  5912  003B7E  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5913  003B80  0EE4               	movlw	228
  5914  003B82                     u8397:
  5915  003B82  2EE8               	decfsz	wreg,f,c
  5916  003B84  D7FE               	bra	u8397
  5917  003B86  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5918  003B88  D7FC               	bra	u8397
  5919  003B8A  F000               	nop	
  5920                           
  5921                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  5922  003B8C  0E80               	movlw	128
  5923  003B8E  EC6E  F027         	call	_lcdInst
  5924                           
  5925                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  5926  003B92  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  5927  003B96  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  5928  003B9A  EC3C  F027         	call	_EEPROM_read	;wreg free
  5929  003B9E  0100               	movlb	0	; () banked
  5930  003BA0  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  5931  003BA2  A4D8               	btfss	status,2,c
  5932  003BA4  D024               	goto	l6446
  5933                           
  5934                           ; BSR set to: 0
  5935                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  5936  003BA6  0E22               	movlw	low STR_66
  5937  003BA8  0100               	movlb	0	; () banked
  5938  003BAA  6F8E               	movwf	printf@f& (0+255),b
  5939  003BAC  0EFB               	movlw	high STR_66
  5940  003BAE  0100               	movlb	0	; () banked
  5941  003BB0  6F8F               	movwf	(printf@f+1)& (0+255),b
  5942  003BB2  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  5943  003BB6  0100               	movlb	0	; () banked
  5944  003BB8  6B91               	clrf	(?_printf+3)& (0+255),b
  5945  003BBA  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  5946  003BBE  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  5947  003BC2  ECB8  F008         	call	_printf	;wreg free
  5948                           
  5949                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  5950  003BC6  0E00               	movlw	0
  5951  003BC8  0100               	movlb	0	; () banked
  5952  003BCA  6FAF               	movwf	EEPROM_write@i& (0+255),b
  5953  003BCC                     l6438:
  5954                           
  5955                           ; BSR set to: 0
  5956  003BCC  0E63               	movlw	99
  5957  003BCE  0100               	movlb	0	; () banked
  5958  003BD0  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  5959  003BD2  D001               	goto	l6442
  5960  003BD4  0012               	return	
  5961  003BD6                     l6442:
  5962                           
  5963                           ; BSR set to: 0
  5964  003BD6  0E68               	movlw	104
  5965  003BD8  0100               	movlb	0	; () banked
  5966  003BDA  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5967  003BDC  0EE4               	movlw	228
  5968  003BDE                     u8407:
  5969  003BDE  2EE8               	decfsz	wreg,f,c
  5970  003BE0  D7FE               	bra	u8407
  5971  003BE2  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5972  003BE4  D7FC               	bra	u8407
  5973  003BE6  F000               	nop	
  5974  003BE8  0100               	movlb	0	; () banked
  5975  003BEA  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  5976  003BEC  D7EF               	goto	l6438
  5977  003BEE                     l6446:
  5978                           
  5979                           ; BSR set to: 0
  5980                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  5981  003BEE  0EBD               	movlw	low STR_67
  5982  003BF0  0100               	movlb	0	; () banked
  5983  003BF2  6F8E               	movwf	printf@f& (0+255),b
  5984  003BF4  0EFF               	movlw	high STR_67
  5985  003BF6  0100               	movlb	0	; () banked
  5986  003BF8  6F8F               	movwf	(printf@f+1)& (0+255),b
  5987  003BFA  ECB8  F008         	call	_printf	;wreg free
  5988  003BFE  0E00               	movlw	0
  5989  003C00  0100               	movlb	0	; () banked
  5990  003C02  6FB0               	movwf	EEPROM_write@i_1337& (0+255),b
  5991  003C04                     l6450:
  5992                           
  5993                           ; BSR set to: 0
  5994  003C04  0E63               	movlw	99
  5995  003C06  0100               	movlb	0	; () banked
  5996  003C08  65B0               	cpfsgt	EEPROM_write@i_1337& (0+255),b
  5997  003C0A  D001               	goto	l6454
  5998  003C0C  0012               	return	
  5999  003C0E                     l6454:
  6000                           
  6001                           ; BSR set to: 0
  6002  003C0E  0E68               	movlw	104
  6003  003C10  0100               	movlb	0	; () banked
  6004  003C12  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6005  003C14  0EE4               	movlw	228
  6006  003C16                     u8417:
  6007  003C16  2EE8               	decfsz	wreg,f,c
  6008  003C18  D7FE               	bra	u8417
  6009  003C1A  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6010  003C1C  D7FC               	bra	u8417
  6011  003C1E  F000               	nop	
  6012  003C20  0100               	movlb	0	; () banked
  6013  003C22  2BB0               	incf	EEPROM_write@i_1337& (0+255),f,b
  6014  003C24  D7EF               	goto	l6450
  6015  003C26                     __end_of_EEPROM_write:
  6016                           	opt stack 0
  6017                           tblptru	equ	0xFF8
  6018                           tblptrh	equ	0xFF7
  6019                           tblptrl	equ	0xFF6
  6020                           tablat	equ	0xFF5
  6021                           prodh	equ	0xFF4
  6022                           prodl	equ	0xFF3
  6023                           intcon	equ	0xFF2
  6024                           intcon2	equ	0xFF1
  6025                           intcon3	equ	0xFF0
  6026                           postinc0	equ	0xFEE
  6027                           wreg	equ	0xFE8
  6028                           postdec1	equ	0xFE5
  6029                           fsr1l	equ	0xFE1
  6030                           indf2	equ	0xFDF
  6031                           postinc2	equ	0xFDE
  6032                           postdec2	equ	0xFDD
  6033                           fsr2h	equ	0xFDA
  6034                           fsr2l	equ	0xFD9
  6035                           status	equ	0xFD8
  6036                           
  6037 ;; *************** function _EEPROM_read *****************
  6038 ;; Defined at:
  6039 ;;		line 68 in file "EEPROM.c"
  6040 ;; Parameters:    Size  Location     Type
  6041 ;;  address         2    0[BANK0 ] unsigned short 
  6042 ;; Auto vars:     Size  Location     Type
  6043 ;;		None
  6044 ;; Return value:  Size  Location     Type
  6045 ;;                  1    wreg      unsigned char 
  6046 ;; Registers used:
  6047 ;;		wreg, status,2
  6048 ;; Tracked objects:
  6049 ;;		On entry : 0/0
  6050 ;;		On exit  : 0/0
  6051 ;;		Unchanged: 0/0
  6052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6053 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6054 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6056 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6057 ;;Total ram usage:        2 bytes
  6058 ;; Hardware stack levels used:    1
  6059 ;; Hardware stack levels required when called:    7
  6060 ;; This function calls:
  6061 ;;		Nothing
  6062 ;; This function is called by:
  6063 ;;		_Loading
  6064 ;;		_EEPROM_write
  6065 ;;		_logRun
  6066 ;; This function uses a non-reentrant model
  6067 ;;
  6068                           
  6069                           	psect	text15
  6070  004E78                     __ptext15:
  6071                           	opt stack 0
  6072  004E78                     _EEPROM_read:
  6073                           	opt stack 20
  6074                           
  6075                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  6076                           
  6077                           ;incstack = 0
  6078  004E78  0100               	movlb	0	; () banked
  6079  004E7A  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  6080  004E7C  6EAA               	movwf	4010,c	;volatile
  6081                           
  6082                           ; BSR set to: 0
  6083                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  6084  004E7E  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  6085                           
  6086                           ; BSR set to: 0
  6087                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  6088  004E82  9EA6               	bcf	4006,7,c	;volatile
  6089                           
  6090                           ; BSR set to: 0
  6091                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  6092  004E84  9CA6               	bcf	4006,6,c	;volatile
  6093                           
  6094                           ; BSR set to: 0
  6095                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  6096  004E86  80A6               	bsf	4006,0,c	;volatile
  6097  004E88                     l987:
  6098  004E88  B0A6               	btfsc	4006,0,c	;volatile
  6099  004E8A  D7FE               	goto	l987
  6100                           
  6101                           ;EEPROM.c: 81: return EEDATA;
  6102  004E8C  50A8               	movf	4008,w,c	;volatile
  6103  004E8E  0012               	return	
  6104  004E90                     __end_of_EEPROM_read:
  6105                           	opt stack 0
  6106                           tblptru	equ	0xFF8
  6107                           tblptrh	equ	0xFF7
  6108                           tblptrl	equ	0xFF6
  6109                           tablat	equ	0xFF5
  6110                           prodh	equ	0xFF4
  6111                           prodl	equ	0xFF3
  6112                           intcon	equ	0xFF2
  6113                           intcon2	equ	0xFF1
  6114                           intcon3	equ	0xFF0
  6115                           postinc0	equ	0xFEE
  6116                           wreg	equ	0xFE8
  6117                           postdec1	equ	0xFE5
  6118                           fsr1l	equ	0xFE1
  6119                           indf2	equ	0xFDF
  6120                           postinc2	equ	0xFDE
  6121                           postdec2	equ	0xFDD
  6122                           fsr2h	equ	0xFDA
  6123                           fsr2l	equ	0xFD9
  6124                           status	equ	0xFD8
  6125                           
  6126 ;; *************** function _initUI *****************
  6127 ;; Defined at:
  6128 ;;		line 62 in file "UI.c"
  6129 ;; Parameters:    Size  Location     Type
  6130 ;;		None
  6131 ;; Auto vars:     Size  Location     Type
  6132 ;;		None
  6133 ;; Return value:  Size  Location     Type
  6134 ;;                  1    wreg      void 
  6135 ;; Registers used:
  6136 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6137 ;; Tracked objects:
  6138 ;;		On entry : 0/0
  6139 ;;		On exit  : 0/0
  6140 ;;		Unchanged: 0/0
  6141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6143 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6145 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6146 ;;Total ram usage:        0 bytes
  6147 ;; Hardware stack levels used:    1
  6148 ;; Hardware stack levels required when called:   12
  6149 ;; This function calls:
  6150 ;;		_change_state_to_menu_start
  6151 ;;		_loadRTC
  6152 ;; This function is called by:
  6153 ;;		_main
  6154 ;; This function uses a non-reentrant model
  6155 ;;
  6156                           
  6157                           	psect	text16
  6158  004C30                     __ptext16:
  6159                           	opt stack 0
  6160  004C30                     _initUI:
  6161                           	opt stack 18
  6162                           
  6163                           ;UI.c: 63: (INTCONbits.GIE = 1);
  6164                           
  6165                           ;incstack = 0
  6166  004C30  8EF2               	bsf	intcon,7,c	;volatile
  6167                           
  6168                           ;UI.c: 64: machine_state = UI_state;
  6169  004C32  0E00               	movlw	0
  6170  004C34  0100               	movlb	0	; () banked
  6171  004C36  6FFC               	movwf	_machine_state& (0+255),b
  6172                           
  6173                           ;UI.c: 65: logstate = 0;
  6174  004C38  0E00               	movlw	0
  6175  004C3A  0100               	movlb	0	; () banked
  6176  004C3C  6FF7               	movwf	(_logstate+1)& (0+255),b
  6177  004C3E  0E00               	movlw	0
  6178  004C40  6FF6               	movwf	_logstate& (0+255),b
  6179                           
  6180                           ; BSR set to: 0
  6181                           ;UI.c: 67: if(RTCflag){
  6182  004C42  0100               	movlb	0	; () banked
  6183  004C44  51E2               	movf	_RTCflag& (0+255),w,b
  6184  004C46  0100               	movlb	0	; () banked
  6185  004C48  11E3               	iorwf	(_RTCflag+1)& (0+255),w,b
  6186  004C4A  A4D8               	btfss	status,2,c
  6187                           
  6188                           ; BSR set to: 0
  6189                           ;UI.c: 68: loadRTC();
  6190  004C4C  EC41  F020         	call	_loadRTC	;wreg free
  6191                           
  6192                           ;UI.c: 69: }
  6193                           ;UI.c: 71: change_state_to_menu_start();
  6194  004C50  EC5D  F026         	call	_change_state_to_menu_start	;wreg free
  6195                           
  6196                           ;UI.c: 72: firstboot = 1;
  6197  004C54  0E00               	movlw	0
  6198  004C56  6E70               	movwf	_firstboot+1,c
  6199  004C58  0E01               	movlw	1
  6200  004C5A  6E6F               	movwf	_firstboot,c
  6201  004C5C  0012               	return		;funcret
  6202  004C5E                     __end_of_initUI:
  6203                           	opt stack 0
  6204                           tblptru	equ	0xFF8
  6205                           tblptrh	equ	0xFF7
  6206                           tblptrl	equ	0xFF6
  6207                           tablat	equ	0xFF5
  6208                           prodh	equ	0xFF4
  6209                           prodl	equ	0xFF3
  6210                           intcon	equ	0xFF2
  6211                           intcon2	equ	0xFF1
  6212                           intcon3	equ	0xFF0
  6213                           postinc0	equ	0xFEE
  6214                           wreg	equ	0xFE8
  6215                           postdec1	equ	0xFE5
  6216                           fsr1l	equ	0xFE1
  6217                           indf2	equ	0xFDF
  6218                           postinc2	equ	0xFDE
  6219                           postdec2	equ	0xFDD
  6220                           fsr2h	equ	0xFDA
  6221                           fsr2l	equ	0xFD9
  6222                           status	equ	0xFD8
  6223                           
  6224 ;; *************** function _loadRTC *****************
  6225 ;; Defined at:
  6226 ;;		line 28 in file "RTC.c"
  6227 ;; Parameters:    Size  Location     Type
  6228 ;;		None
  6229 ;; Auto vars:     Size  Location     Type
  6230 ;;  i               2   22[BANK0 ] int 
  6231 ;; Return value:  Size  Location     Type
  6232 ;;                  1    wreg      void 
  6233 ;; Registers used:
  6234 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6235 ;; Tracked objects:
  6236 ;;		On entry : 0/0
  6237 ;;		On exit  : 0/0
  6238 ;;		Unchanged: 0/0
  6239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6241 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6242 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6243 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6244 ;;Total ram usage:        3 bytes
  6245 ;; Hardware stack levels used:    1
  6246 ;; Hardware stack levels required when called:    9
  6247 ;; This function calls:
  6248 ;;		_I2C_Master_Init
  6249 ;;		_I2C_Master_Start
  6250 ;;		_I2C_Master_Stop
  6251 ;;		_I2C_Master_Write
  6252 ;; This function is called by:
  6253 ;;		_initUI
  6254 ;; This function uses a non-reentrant model
  6255 ;;
  6256                           
  6257                           	psect	text17
  6258  004082                     __ptext17:
  6259                           	opt stack 0
  6260  004082                     _loadRTC:
  6261                           	opt stack 20
  6262                           
  6263                           ;RTC.c: 30: I2C_Master_Init(10000);
  6264                           
  6265                           ;incstack = 0
  6266  004082  0E10               	movlw	16
  6267  004084  0100               	movlb	0	; () banked
  6268  004086  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  6269  004088  0E27               	movlw	39
  6270  00408A  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  6271  00408C  0E00               	movlw	0
  6272  00408E  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  6273  004090  0E00               	movlw	0
  6274  004092  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  6275  004094  ECDC  F022         	call	_I2C_Master_Init	;wreg free
  6276                           
  6277                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  6278  004098  9EF2               	bcf	intcon,7,c	;volatile
  6279                           
  6280                           ;RTC.c: 34: I2C_Master_Start();
  6281  00409A  EC94  F027         	call	_I2C_Master_Start	;wreg free
  6282                           
  6283                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  6284  00409E  0E00               	movlw	0
  6285  0040A0  0100               	movlb	0	; () banked
  6286  0040A2  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6287  0040A4  0ED0               	movlw	208
  6288  0040A6  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6289  0040A8  EC82  F027         	call	_I2C_Master_Write	;wreg free
  6290                           
  6291                           ;RTC.c: 36: I2C_Master_Write(0x00);
  6292  0040AC  0E00               	movlw	0
  6293  0040AE  0100               	movlb	0	; () banked
  6294  0040B0  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6295  0040B2  0E00               	movlw	0
  6296  0040B4  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6297  0040B6  EC82  F027         	call	_I2C_Master_Write	;wreg free
  6298                           
  6299                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  6300  0040BA  0E00               	movlw	0
  6301  0040BC  0100               	movlb	0	; () banked
  6302  0040BE  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  6303  0040C0  0E00               	movlw	0
  6304  0040C2  6F96               	movwf	loadRTC@i& (0+255),b
  6305  0040C4                     l6592:
  6306                           
  6307                           ; BSR set to: 0
  6308  0040C4  0100               	movlb	0	; () banked
  6309  0040C6  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  6310  0040C8  D008               	goto	l6596
  6311  0040CA  0100               	movlb	0	; () banked
  6312  0040CC  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  6313  0040CE  E11B               	bnz	l6602
  6314  0040D0  0E07               	movlw	7
  6315  0040D2  0100               	movlb	0	; () banked
  6316  0040D4  5D96               	subwf	loadRTC@i& (0+255),w,b
  6317  0040D6  B0D8               	btfsc	status,0,c
  6318  0040D8  D016               	goto	l6602
  6319  0040DA                     l6596:
  6320                           
  6321                           ; BSR set to: 0
  6322                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  6323  0040DA  0E24               	movlw	low _time
  6324  0040DC  0100               	movlb	0	; () banked
  6325  0040DE  2596               	addwf	loadRTC@i& (0+255),w,b
  6326  0040E0  6ED9               	movwf	fsr2l,c
  6327  0040E2  0E01               	movlw	high _time
  6328  0040E4  0100               	movlb	0	; () banked
  6329  0040E6  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  6330  0040E8  6EDA               	movwf	fsr2h,c
  6331  0040EA  50DF               	movf	indf2,w,c
  6332  0040EC  0100               	movlb	0	; () banked
  6333  0040EE  6F95               	movwf	??_loadRTC& (0+255),b
  6334  0040F0  0100               	movlb	0	; () banked
  6335  0040F2  5195               	movf	??_loadRTC& (0+255),w,b
  6336  0040F4  0100               	movlb	0	; () banked
  6337  0040F6  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6338  0040F8  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  6339  0040FA  EC82  F027         	call	_I2C_Master_Write	;wreg free
  6340  0040FE  0100               	movlb	0	; () banked
  6341  004100  4B96               	infsnz	loadRTC@i& (0+255),f,b
  6342  004102  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  6343  004104  D7DF               	goto	l6592
  6344  004106                     l6602:
  6345                           
  6346                           ; BSR set to: 0
  6347                           ;RTC.c: 39: }
  6348                           ;RTC.c: 40: I2C_Master_Stop();
  6349  004106  EC90  F027         	call	_I2C_Master_Stop	;wreg free
  6350                           
  6351                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  6352  00410A  8EF2               	bsf	intcon,7,c	;volatile
  6353  00410C  0012               	return		;funcret
  6354  00410E                     __end_of_loadRTC:
  6355                           	opt stack 0
  6356                           tblptru	equ	0xFF8
  6357                           tblptrh	equ	0xFF7
  6358                           tblptrl	equ	0xFF6
  6359                           tablat	equ	0xFF5
  6360                           prodh	equ	0xFF4
  6361                           prodl	equ	0xFF3
  6362                           intcon	equ	0xFF2
  6363                           intcon2	equ	0xFF1
  6364                           intcon3	equ	0xFF0
  6365                           postinc0	equ	0xFEE
  6366                           wreg	equ	0xFE8
  6367                           postdec1	equ	0xFE5
  6368                           fsr1l	equ	0xFE1
  6369                           indf2	equ	0xFDF
  6370                           postinc2	equ	0xFDE
  6371                           postdec2	equ	0xFDD
  6372                           fsr2h	equ	0xFDA
  6373                           fsr2l	equ	0xFD9
  6374                           status	equ	0xFD8
  6375                           
  6376 ;; *************** function _I2C_Master_Init *****************
  6377 ;; Defined at:
  6378 ;;		line 15 in file "I2C.c"
  6379 ;; Parameters:    Size  Location     Type
  6380 ;;  c               4   13[BANK0 ] const unsigned long 
  6381 ;; Auto vars:     Size  Location     Type
  6382 ;;		None
  6383 ;; Return value:  Size  Location     Type
  6384 ;;                  1    wreg      void 
  6385 ;; Registers used:
  6386 ;;		wreg, status,2, status,0, cstack
  6387 ;; Tracked objects:
  6388 ;;		On entry : 0/0
  6389 ;;		On exit  : 0/0
  6390 ;;		Unchanged: 0/0
  6391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6392 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6394 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6395 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6396 ;;Total ram usage:        8 bytes
  6397 ;; Hardware stack levels used:    1
  6398 ;; Hardware stack levels required when called:    8
  6399 ;; This function calls:
  6400 ;;		___lldiv
  6401 ;; This function is called by:
  6402 ;;		_main
  6403 ;;		_loadRTC
  6404 ;; This function uses a non-reentrant model
  6405 ;;
  6406                           
  6407                           	psect	text18
  6408  0045B8                     __ptext18:
  6409                           	opt stack 0
  6410  0045B8                     _I2C_Master_Init:
  6411                           	opt stack 20
  6412                           
  6413                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  6414                           
  6415                           ;incstack = 0
  6416  0045B8  0E00               	movlw	0
  6417  0045BA  6EC7               	movwf	4039,c	;volatile
  6418                           
  6419                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  6420  0045BC  0E28               	movlw	40
  6421  0045BE  6EC6               	movwf	4038,c	;volatile
  6422                           
  6423                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  6424  0045C0  0E00               	movlw	0
  6425  0045C2  6EC5               	movwf	4037,c	;volatile
  6426                           
  6427                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  6428  0045C4  0E00               	movlw	0
  6429  0045C6  0100               	movlb	0	; () banked
  6430  0045C8  6F80               	movwf	___lldiv@dividend& (0+255),b
  6431  0045CA  0E48               	movlw	72
  6432  0045CC  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  6433  0045CE  0EE8               	movlw	232
  6434  0045D0  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  6435  0045D2  0E01               	movlw	1
  6436  0045D4  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  6437  0045D6  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  6438  0045DA  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  6439  0045DE  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  6440  0045E2  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  6441  0045E6  0E02               	movlw	2
  6442  0045E8                     u5005:
  6443  0045E8  90D8               	bcf	status,0,c
  6444  0045EA  0100               	movlb	0	; () banked
  6445  0045EC  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  6446  0045EE  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  6447  0045F0  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  6448  0045F2  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  6449  0045F4  2EE8               	decfsz	wreg,f,c
  6450  0045F6  D7F8               	goto	u5005
  6451  0045F8  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  6452  0045FC  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  6453  004600  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  6454  004604  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  6455  004608  EC3D  F01F         	call	___lldiv	;wreg free
  6456  00460C  0100               	movlb	0	; () banked
  6457  00460E  0580               	decf	?___lldiv& (0+255),w,b
  6458  004610  6EC8               	movwf	4040,c	;volatile
  6459                           
  6460                           ; BSR set to: 0
  6461                           ;I2C.c: 22: TRISC3 = 1;
  6462  004612  8694               	bsf	3988,3,c	;volatile
  6463                           
  6464                           ; BSR set to: 0
  6465                           ;I2C.c: 23: TRISC4 = 1;
  6466  004614  8894               	bsf	3988,4,c	;volatile
  6467                           
  6468                           ; BSR set to: 0
  6469  004616  0012               	return		;funcret
  6470  004618                     __end_of_I2C_Master_Init:
  6471                           	opt stack 0
  6472                           tblptru	equ	0xFF8
  6473                           tblptrh	equ	0xFF7
  6474                           tblptrl	equ	0xFF6
  6475                           tablat	equ	0xFF5
  6476                           prodh	equ	0xFF4
  6477                           prodl	equ	0xFF3
  6478                           intcon	equ	0xFF2
  6479                           intcon2	equ	0xFF1
  6480                           intcon3	equ	0xFF0
  6481                           postinc0	equ	0xFEE
  6482                           wreg	equ	0xFE8
  6483                           postdec1	equ	0xFE5
  6484                           fsr1l	equ	0xFE1
  6485                           indf2	equ	0xFDF
  6486                           postinc2	equ	0xFDE
  6487                           postdec2	equ	0xFDD
  6488                           fsr2h	equ	0xFDA
  6489                           fsr2l	equ	0xFD9
  6490                           status	equ	0xFD8
  6491                           
  6492 ;; *************** function ___lldiv *****************
  6493 ;; Defined at:
  6494 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  6495 ;; Parameters:    Size  Location     Type
  6496 ;;  dividend        4    0[BANK0 ] unsigned long 
  6497 ;;  divisor         4    4[BANK0 ] unsigned long 
  6498 ;; Auto vars:     Size  Location     Type
  6499 ;;  quotient        4    8[BANK0 ] unsigned long 
  6500 ;;  counter         1   12[BANK0 ] unsigned char 
  6501 ;; Return value:  Size  Location     Type
  6502 ;;                  4    0[BANK0 ] unsigned long 
  6503 ;; Registers used:
  6504 ;;		wreg, status,2, status,0
  6505 ;; Tracked objects:
  6506 ;;		On entry : 0/0
  6507 ;;		On exit  : 0/0
  6508 ;;		Unchanged: 0/0
  6509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6510 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6511 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6513 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6514 ;;Total ram usage:       13 bytes
  6515 ;; Hardware stack levels used:    1
  6516 ;; Hardware stack levels required when called:    7
  6517 ;; This function calls:
  6518 ;;		Nothing
  6519 ;; This function is called by:
  6520 ;;		_I2C_Master_Init
  6521 ;; This function uses a non-reentrant model
  6522 ;;
  6523                           
  6524                           	psect	text19
  6525  003E7A                     __ptext19:
  6526                           	opt stack 0
  6527  003E7A                     ___lldiv:
  6528                           	opt stack 20
  6529                           
  6530                           ; BSR set to: 0
  6531                           ;incstack = 0
  6532  003E7A  0E00               	movlw	0
  6533  003E7C  0100               	movlb	0	; () banked
  6534  003E7E  6F88               	movwf	___lldiv@quotient& (0+255),b
  6535  003E80  0E00               	movlw	0
  6536  003E82  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  6537  003E84  0E00               	movlw	0
  6538  003E86  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  6539  003E88  0E00               	movlw	0
  6540  003E8A  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  6541                           
  6542                           ; BSR set to: 0
  6543  003E8C  0100               	movlb	0	; () banked
  6544  003E8E  5184               	movf	___lldiv@divisor& (0+255),w,b
  6545  003E90  0100               	movlb	0	; () banked
  6546  003E92  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  6547  003E94  0100               	movlb	0	; () banked
  6548  003E96  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  6549  003E98  0100               	movlb	0	; () banked
  6550  003E9A  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  6551  003E9C  B4D8               	btfsc	status,2,c
  6552  003E9E  D042               	goto	l1746
  6553                           
  6554                           ; BSR set to: 0
  6555  003EA0  0E01               	movlw	1
  6556  003EA2  0100               	movlb	0	; () banked
  6557  003EA4  6F8C               	movwf	___lldiv@counter& (0+255),b
  6558  003EA6  D008               	goto	l6016
  6559  003EA8                     l6014:
  6560                           
  6561                           ; BSR set to: 0
  6562  003EA8  0100               	movlb	0	; () banked
  6563  003EAA  90D8               	bcf	status,0,c
  6564  003EAC  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  6565  003EAE  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  6566  003EB0  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  6567  003EB2  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  6568  003EB4  0100               	movlb	0	; () banked
  6569  003EB6  2B8C               	incf	___lldiv@counter& (0+255),f,b
  6570  003EB8                     l6016:
  6571                           
  6572                           ; BSR set to: 0
  6573  003EB8  0100               	movlb	0	; () banked
  6574  003EBA  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  6575  003EBC  D7F5               	goto	l6014
  6576  003EBE                     l6018:
  6577                           
  6578                           ; BSR set to: 0
  6579  003EBE  0100               	movlb	0	; () banked
  6580  003EC0  90D8               	bcf	status,0,c
  6581  003EC2  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  6582  003EC4  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  6583  003EC6  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  6584  003EC8  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  6585                           
  6586                           ; BSR set to: 0
  6587  003ECA  0100               	movlb	0	; () banked
  6588  003ECC  5184               	movf	___lldiv@divisor& (0+255),w,b
  6589  003ECE  0100               	movlb	0	; () banked
  6590  003ED0  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  6591  003ED2  0100               	movlb	0	; () banked
  6592  003ED4  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6593  003ED6  0100               	movlb	0	; () banked
  6594  003ED8  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  6595  003EDA  0100               	movlb	0	; () banked
  6596  003EDC  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6597  003EDE  0100               	movlb	0	; () banked
  6598  003EE0  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  6599  003EE2  0100               	movlb	0	; () banked
  6600  003EE4  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6601  003EE6  0100               	movlb	0	; () banked
  6602  003EE8  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  6603  003EEA  A0D8               	btfss	status,0,c
  6604  003EEC  D012               	goto	l6026
  6605                           
  6606                           ; BSR set to: 0
  6607  003EEE  0100               	movlb	0	; () banked
  6608  003EF0  5184               	movf	___lldiv@divisor& (0+255),w,b
  6609  003EF2  0100               	movlb	0	; () banked
  6610  003EF4  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  6611  003EF6  0100               	movlb	0	; () banked
  6612  003EF8  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6613  003EFA  0100               	movlb	0	; () banked
  6614  003EFC  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  6615  003EFE  0100               	movlb	0	; () banked
  6616  003F00  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6617  003F02  0100               	movlb	0	; () banked
  6618  003F04  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  6619  003F06  0100               	movlb	0	; () banked
  6620  003F08  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6621  003F0A  0100               	movlb	0	; () banked
  6622  003F0C  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  6623                           
  6624                           ; BSR set to: 0
  6625  003F0E  0100               	movlb	0	; () banked
  6626  003F10  8188               	bsf	___lldiv@quotient& (0+255),0,b
  6627  003F12                     l6026:
  6628                           
  6629                           ; BSR set to: 0
  6630  003F12  0100               	movlb	0	; () banked
  6631  003F14  90D8               	bcf	status,0,c
  6632  003F16  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  6633  003F18  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  6634  003F1A  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  6635  003F1C  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  6636                           
  6637                           ; BSR set to: 0
  6638  003F1E  0100               	movlb	0	; () banked
  6639  003F20  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  6640  003F22  D7CD               	goto	l6018
  6641  003F24                     l1746:
  6642                           
  6643                           ; BSR set to: 0
  6644  003F24  C088  F080         	movff	___lldiv@quotient,?___lldiv
  6645  003F28  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  6646  003F2C  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  6647  003F30  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  6648                           
  6649                           ; BSR set to: 0
  6650  003F34  0012               	return		;funcret
  6651  003F36                     __end_of___lldiv:
  6652                           	opt stack 0
  6653                           tblptru	equ	0xFF8
  6654                           tblptrh	equ	0xFF7
  6655                           tblptrl	equ	0xFF6
  6656                           tablat	equ	0xFF5
  6657                           prodh	equ	0xFF4
  6658                           prodl	equ	0xFF3
  6659                           intcon	equ	0xFF2
  6660                           intcon2	equ	0xFF1
  6661                           intcon3	equ	0xFF0
  6662                           postinc0	equ	0xFEE
  6663                           wreg	equ	0xFE8
  6664                           postdec1	equ	0xFE5
  6665                           fsr1l	equ	0xFE1
  6666                           indf2	equ	0xFDF
  6667                           postinc2	equ	0xFDE
  6668                           postdec2	equ	0xFDD
  6669                           fsr2h	equ	0xFDA
  6670                           fsr2l	equ	0xFD9
  6671                           status	equ	0xFD8
  6672                           
  6673 ;; *************** function _change_state_to_menu_start *****************
  6674 ;; Defined at:
  6675 ;;		line 474 in file "UI.c"
  6676 ;; Parameters:    Size  Location     Type
  6677 ;;		None
  6678 ;; Auto vars:     Size  Location     Type
  6679 ;;		None
  6680 ;; Return value:  Size  Location     Type
  6681 ;;                  1    wreg      void 
  6682 ;; Registers used:
  6683 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6684 ;; Tracked objects:
  6685 ;;		On entry : 0/0
  6686 ;;		On exit  : 0/0
  6687 ;;		Unchanged: 0/0
  6688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6690 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6692 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6693 ;;Total ram usage:        0 bytes
  6694 ;; Hardware stack levels used:    1
  6695 ;; Hardware stack levels required when called:   11
  6696 ;; This function calls:
  6697 ;;		_lcdInst
  6698 ;;		_printRTC
  6699 ;;		_printf
  6700 ;; This function is called by:
  6701 ;;		_initUI
  6702 ;; This function uses a non-reentrant model
  6703 ;;
  6704                           
  6705                           	psect	text20
  6706  004CBA                     __ptext20:
  6707                           	opt stack 0
  6708  004CBA                     _change_state_to_menu_start:
  6709                           	opt stack 18
  6710                           
  6711                           ;UI.c: 475: cur_state = 0;
  6712                           
  6713                           ; BSR set to: 0
  6714                           ;incstack = 0
  6715  004CBA  0E00               	movlw	0
  6716  004CBC  0100               	movlb	0	; () banked
  6717  004CBE  6FE7               	movwf	(_cur_state+1)& (0+255),b
  6718  004CC0  0E00               	movlw	0
  6719  004CC2  6FE6               	movwf	_cur_state& (0+255),b
  6720                           
  6721                           ; BSR set to: 0
  6722                           ;UI.c: 477: lcdInst(0b10000000);;
  6723  004CC4  0E80               	movlw	128
  6724  004CC6  EC6E  F027         	call	_lcdInst
  6725                           
  6726                           ;UI.c: 478: printRTC();
  6727  004CCA  EC72  F011         	call	_printRTC	;wreg free
  6728                           
  6729                           ;UI.c: 479: lcdInst(0b11000000);;
  6730  004CCE  0EC0               	movlw	192
  6731  004CD0  EC6E  F027         	call	_lcdInst
  6732                           
  6733                           ;UI.c: 480: printf("PUSH TO CONTINUE");
  6734  004CD4  0EF7               	movlw	low STR_30
  6735  004CD6  0100               	movlb	0	; () banked
  6736  004CD8  6F8E               	movwf	printf@f& (0+255),b
  6737  004CDA  0EFD               	movlw	high STR_30
  6738  004CDC  0100               	movlb	0	; () banked
  6739  004CDE  6F8F               	movwf	(printf@f+1)& (0+255),b
  6740  004CE0  ECB8  F008         	call	_printf	;wreg free
  6741  004CE4  0012               	return		;funcret
  6742  004CE6                     __end_of_change_state_to_menu_start:
  6743                           	opt stack 0
  6744                           tblptru	equ	0xFF8
  6745                           tblptrh	equ	0xFF7
  6746                           tblptrl	equ	0xFF6
  6747                           tablat	equ	0xFF5
  6748                           prodh	equ	0xFF4
  6749                           prodl	equ	0xFF3
  6750                           intcon	equ	0xFF2
  6751                           intcon2	equ	0xFF1
  6752                           intcon3	equ	0xFF0
  6753                           postinc0	equ	0xFEE
  6754                           wreg	equ	0xFE8
  6755                           postdec1	equ	0xFE5
  6756                           fsr1l	equ	0xFE1
  6757                           indf2	equ	0xFDF
  6758                           postinc2	equ	0xFDE
  6759                           postdec2	equ	0xFDD
  6760                           fsr2h	equ	0xFDA
  6761                           fsr2l	equ	0xFD9
  6762                           status	equ	0xFD8
  6763                           
  6764 ;; *************** function _initTime *****************
  6765 ;; Defined at:
  6766 ;;		line 17 in file "RTC.c"
  6767 ;; Parameters:    Size  Location     Type
  6768 ;;  s               1    wreg     unsigned char 
  6769 ;;  m               1    0[BANK0 ] unsigned char 
  6770 ;;  h               1    1[BANK0 ] unsigned char 
  6771 ;;  w               1    2[BANK0 ] unsigned char 
  6772 ;;  DD              1    3[BANK0 ] unsigned char 
  6773 ;;  MM              1    4[BANK0 ] unsigned char 
  6774 ;;  YY              1    5[BANK0 ] unsigned char 
  6775 ;; Auto vars:     Size  Location     Type
  6776 ;;  s               1    6[BANK0 ] unsigned char 
  6777 ;; Return value:  Size  Location     Type
  6778 ;;                  1    wreg      void 
  6779 ;; Registers used:
  6780 ;;		wreg
  6781 ;; Tracked objects:
  6782 ;;		On entry : 0/0
  6783 ;;		On exit  : 0/0
  6784 ;;		Unchanged: 0/0
  6785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6786 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6787 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6789 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6790 ;;Total ram usage:        7 bytes
  6791 ;; Hardware stack levels used:    1
  6792 ;; Hardware stack levels required when called:    7
  6793 ;; This function calls:
  6794 ;;		Nothing
  6795 ;; This function is called by:
  6796 ;;		_main
  6797 ;; This function uses a non-reentrant model
  6798 ;;
  6799                           
  6800                           	psect	text21
  6801  004E1E                     __ptext21:
  6802                           	opt stack 0
  6803  004E1E                     _initTime:
  6804                           	opt stack 23
  6805                           
  6806                           ;incstack = 0
  6807                           ;initTime@s stored from wreg
  6808  004E1E  0100               	movlb	0	; () banked
  6809  004E20  6F86               	movwf	initTime@s& (0+255),b
  6810                           
  6811                           ;RTC.c: 19: time[0] = s;
  6812  004E22  C086  F124         	movff	initTime@s,_time
  6813                           
  6814                           ;RTC.c: 20: time[1] = m;
  6815  004E26  C080  F125         	movff	initTime@m,_time+1
  6816                           
  6817                           ;RTC.c: 21: time[2] = h;
  6818  004E2A  C081  F126         	movff	initTime@h,_time+2
  6819                           
  6820                           ;RTC.c: 22: time[3] = w;
  6821  004E2E  C082  F127         	movff	initTime@w,_time+3
  6822                           
  6823                           ;RTC.c: 23: time[4] = DD;
  6824  004E32  C083  F128         	movff	initTime@DD,_time+4
  6825                           
  6826                           ;RTC.c: 24: time[5] = MM;
  6827  004E36  C084  F129         	movff	initTime@MM,_time+5
  6828                           
  6829                           ;RTC.c: 25: time[6] = YY;
  6830  004E3A  C085  F12A         	movff	initTime@YY,_time+6
  6831  004E3E  0012               	return		;funcret
  6832  004E40                     __end_of_initTime:
  6833                           	opt stack 0
  6834                           tblptru	equ	0xFF8
  6835                           tblptrh	equ	0xFF7
  6836                           tblptrl	equ	0xFF6
  6837                           tablat	equ	0xFF5
  6838                           prodh	equ	0xFF4
  6839                           prodl	equ	0xFF3
  6840                           intcon	equ	0xFF2
  6841                           intcon2	equ	0xFF1
  6842                           intcon3	equ	0xFF0
  6843                           postinc0	equ	0xFEE
  6844                           wreg	equ	0xFE8
  6845                           postdec1	equ	0xFE5
  6846                           fsr1l	equ	0xFE1
  6847                           indf2	equ	0xFDF
  6848                           postinc2	equ	0xFDE
  6849                           postdec2	equ	0xFDD
  6850                           fsr2h	equ	0xFDA
  6851                           fsr2l	equ	0xFD9
  6852                           status	equ	0xFD8
  6853                           
  6854 ;; *************** function _initLCD *****************
  6855 ;; Defined at:
  6856 ;;		line 48 in file "lcd.c"
  6857 ;; Parameters:    Size  Location     Type
  6858 ;;		None
  6859 ;; Auto vars:     Size  Location     Type
  6860 ;;		None
  6861 ;; Return value:  Size  Location     Type
  6862 ;;                  1    wreg      void 
  6863 ;; Registers used:
  6864 ;;		wreg, status,2, status,0, cstack
  6865 ;; Tracked objects:
  6866 ;;		On entry : 0/0
  6867 ;;		On exit  : 0/0
  6868 ;;		Unchanged: 0/0
  6869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6872 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6873 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6874 ;;Total ram usage:        1 bytes
  6875 ;; Hardware stack levels used:    1
  6876 ;; Hardware stack levels required when called:    9
  6877 ;; This function calls:
  6878 ;;		_lcdInst
  6879 ;; This function is called by:
  6880 ;;		_main
  6881 ;; This function uses a non-reentrant model
  6882 ;;
  6883                           
  6884                           	psect	text22
  6885  0048B8                     __ptext22:
  6886                           	opt stack 0
  6887  0048B8                     _initLCD:
  6888                           	opt stack 21
  6889                           
  6890                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  6891                           
  6892                           ;incstack = 0
  6893  0048B8  0E9C               	movlw	156
  6894  0048BA  0100               	movlb	0	; () banked
  6895  0048BC  6F83               	movwf	??_initLCD& (0+255),b
  6896  0048BE  0ED7               	movlw	215
  6897  0048C0                     u8427:
  6898  0048C0  2EE8               	decfsz	wreg,f,c
  6899  0048C2  D7FE               	bra	u8427
  6900  0048C4  2F83               	decfsz	??_initLCD& (0+255),f,b
  6901  0048C6  D7FC               	bra	u8427
  6902                           
  6903                           ;lcd.c: 50: lcdInst(0b00110011);
  6904  0048C8  0E33               	movlw	51
  6905  0048CA  EC6E  F027         	call	_lcdInst
  6906                           
  6907                           ;lcd.c: 51: lcdInst(0b00110010);
  6908  0048CE  0E32               	movlw	50
  6909  0048D0  EC6E  F027         	call	_lcdInst
  6910                           
  6911                           ;lcd.c: 53: lcdInst(0b00101000);
  6912  0048D4  0E28               	movlw	40
  6913  0048D6  EC6E  F027         	call	_lcdInst
  6914                           
  6915                           ;lcd.c: 54: lcdInst(0b00001100);
  6916  0048DA  0E0C               	movlw	12
  6917  0048DC  EC6E  F027         	call	_lcdInst
  6918                           
  6919                           ;lcd.c: 55: lcdInst(0b00000110);
  6920  0048E0  0E06               	movlw	6
  6921  0048E2  EC6E  F027         	call	_lcdInst
  6922                           
  6923                           ;lcd.c: 56: lcdInst(0b00000001);
  6924  0048E6  0E01               	movlw	1
  6925  0048E8  EC6E  F027         	call	_lcdInst
  6926                           
  6927                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  6928  0048EC  0E9C               	movlw	156
  6929  0048EE  0100               	movlb	0	; () banked
  6930  0048F0  6F83               	movwf	??_initLCD& (0+255),b
  6931  0048F2  0ED7               	movlw	215
  6932  0048F4                     u8437:
  6933  0048F4  2EE8               	decfsz	wreg,f,c
  6934  0048F6  D7FE               	bra	u8437
  6935  0048F8  2F83               	decfsz	??_initLCD& (0+255),f,b
  6936  0048FA  D7FC               	bra	u8437
  6937  0048FC  0012               	return		;funcret
  6938  0048FE                     __end_of_initLCD:
  6939                           	opt stack 0
  6940                           tblptru	equ	0xFF8
  6941                           tblptrh	equ	0xFF7
  6942                           tblptrl	equ	0xFF6
  6943                           tablat	equ	0xFF5
  6944                           prodh	equ	0xFF4
  6945                           prodl	equ	0xFF3
  6946                           intcon	equ	0xFF2
  6947                           intcon2	equ	0xFF1
  6948                           intcon3	equ	0xFF0
  6949                           postinc0	equ	0xFEE
  6950                           wreg	equ	0xFE8
  6951                           postdec1	equ	0xFE5
  6952                           fsr1l	equ	0xFE1
  6953                           indf2	equ	0xFDF
  6954                           postinc2	equ	0xFDE
  6955                           postdec2	equ	0xFDD
  6956                           fsr2h	equ	0xFDA
  6957                           fsr2l	equ	0xFD9
  6958                           status	equ	0xFD8
  6959                           
  6960 ;; *************** function _UI *****************
  6961 ;; Defined at:
  6962 ;;		line 76 in file "UI.c"
  6963 ;; Parameters:    Size  Location     Type
  6964 ;;		None
  6965 ;; Auto vars:     Size  Location     Type
  6966 ;;  i               1   73[BANK0 ] unsigned char 
  6967 ;;  i               1   85[BANK0 ] unsigned char 
  6968 ;;  i               1   84[BANK0 ] unsigned char 
  6969 ;;  i               1   83[BANK0 ] unsigned char 
  6970 ;;  i               1   82[BANK0 ] unsigned char 
  6971 ;;  i               1   81[BANK0 ] unsigned char 
  6972 ;;  i               1   80[BANK0 ] unsigned char 
  6973 ;;  i               1   79[BANK0 ] unsigned char 
  6974 ;;  i               1   78[BANK0 ] unsigned char 
  6975 ;;  i               1   77[BANK0 ] unsigned char 
  6976 ;;  i               1   76[BANK0 ] unsigned char 
  6977 ;;  i               1   75[BANK0 ] unsigned char 
  6978 ;;  i               1   74[BANK0 ] unsigned char 
  6979 ;;  month           4   86[BANK0 ] unsigned char [4]
  6980 ;;  i               1   72[BANK0 ] unsigned char 
  6981 ;; Return value:  Size  Location     Type
  6982 ;;                  1    wreg      void 
  6983 ;; Registers used:
  6984 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6985 ;; Tracked objects:
  6986 ;;		On entry : 0/0
  6987 ;;		On exit  : 0/0
  6988 ;;		Unchanged: 0/0
  6989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6991 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6992 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6993 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6994 ;;Total ram usage:       22 bytes
  6995 ;; Hardware stack levels used:    1
  6996 ;; Hardware stack levels required when called:   11
  6997 ;; This function calls:
  6998 ;;		___awdiv
  6999 ;;		___awmod
  7000 ;;		_change_state_to_menu_12
  7001 ;;		_change_state_to_menu_22
  7002 ;;		_lcdInst
  7003 ;;		_printRTC
  7004 ;;		_printf
  7005 ;;		_strcpy
  7006 ;; This function is called by:
  7007 ;;		_main
  7008 ;; This function uses a non-reentrant model
  7009 ;;
  7010                           
  7011                           	psect	text23
  7012  0008CA                     __ptext23:
  7013                           	opt stack 0
  7014  0008CA                     _UI:
  7015                           	opt stack 19
  7016                           
  7017                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  7018                           
  7019                           ;incstack = 0
  7020  0008CA  0E02               	movlw	2
  7021  0008CC  0100               	movlb	0	; () banked
  7022  0008CE  19FC               	xorwf	_machine_state& (0+255),w,b
  7023  0008D0  A4D8               	btfss	status,2,c
  7024  0008D2  D075               	goto	l8036
  7025                           
  7026                           ; BSR set to: 0
  7027                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7028  0008D4  0E01               	movlw	1
  7029  0008D6  EC6E  F027         	call	_lcdInst
  7030  0008DA  0E68               	movlw	104
  7031  0008DC  0100               	movlb	0	; () banked
  7032  0008DE  6FC4               	movwf	??_UI& (0+255),b
  7033  0008E0  0EE4               	movlw	228
  7034  0008E2                     u8447:
  7035  0008E2  2EE8               	decfsz	wreg,f,c
  7036  0008E4  D7FE               	bra	u8447
  7037  0008E6  2FC4               	decfsz	??_UI& (0+255),f,b
  7038  0008E8  D7FC               	bra	u8447
  7039  0008EA  F000               	nop	
  7040                           
  7041                           ;UI.c: 79: lcdInst(0b10000000);;
  7042  0008EC  0E80               	movlw	128
  7043  0008EE  EC6E  F027         	call	_lcdInst
  7044                           
  7045                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  7046  0008F2  0EA3               	movlw	low STR_1
  7047  0008F4  0100               	movlb	0	; () banked
  7048  0008F6  6F8E               	movwf	printf@f& (0+255),b
  7049  0008F8  0EFB               	movlw	high STR_1
  7050  0008FA  0100               	movlb	0	; () banked
  7051  0008FC  6F8F               	movwf	(printf@f+1)& (0+255),b
  7052  0008FE  0E01               	movlw	1
  7053  000900  0100               	movlb	0	; () banked
  7054  000902  25FD               	addwf	_sel& (0+255),w,b
  7055  000904  0100               	movlb	0	; () banked
  7056  000906  6F90               	movwf	(?_printf+2)& (0+255),b
  7057  000908  0100               	movlb	0	; () banked
  7058  00090A  6B91               	clrf	(?_printf+3)& (0+255),b
  7059  00090C  0E00               	movlw	0
  7060  00090E  2391               	addwfc	(?_printf+3)& (0+255),f,b
  7061  000910  ECB8  F008         	call	_printf	;wreg free
  7062                           
  7063                           ;UI.c: 81: lcdInst(0b11000000);;
  7064  000914  0EC0               	movlw	192
  7065  000916  EC6E  F027         	call	_lcdInst
  7066                           
  7067                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  7068  00091A  0E0E               	movlw	14
  7069  00091C  0100               	movlb	0	; () banked
  7070  00091E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7071  000920  0E10               	movlw	16
  7072  000922  6F82               	movwf	___awmod@divisor& (0+255),b
  7073  000924  C0F8  F080         	movff	_total_time,___awmod@dividend
  7074  000928  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  7075  00092C  ECF0  F01F         	call	___awmod	;wreg free
  7076  000930  C080  F0C6         	movff	?___awmod,_UI$2331
  7077  000934  C081  F0C7         	movff	?___awmod+1,_UI$2331+1
  7078                           
  7079                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  7080  000938  0E27               	movlw	low STR_2
  7081  00093A  0100               	movlb	0	; () banked
  7082  00093C  6F8E               	movwf	printf@f& (0+255),b
  7083  00093E  0EFF               	movlw	high STR_2
  7084  000940  0100               	movlb	0	; () banked
  7085  000942  6F8F               	movwf	(printf@f+1)& (0+255),b
  7086  000944  0E0E               	movlw	14
  7087  000946  0100               	movlb	0	; () banked
  7088  000948  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7089  00094A  0E10               	movlw	16
  7090  00094C  6F82               	movwf	___awmod@divisor& (0+255),b
  7091  00094E  C0F8  F080         	movff	_total_time,___awmod@dividend
  7092  000952  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  7093  000956  ECF0  F01F         	call	___awmod	;wreg free
  7094  00095A  C080  F086         	movff	?___awmod,___awdiv@dividend
  7095  00095E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7096  000962  0E00               	movlw	0
  7097  000964  0100               	movlb	0	; () banked
  7098  000966  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7099  000968  0E3C               	movlw	60
  7100  00096A  6F88               	movwf	___awdiv@divisor& (0+255),b
  7101  00096C  ECDE  F01E         	call	___awdiv	;wreg free
  7102  000970  C086  F090         	movff	?___awdiv,?_printf+2
  7103  000974  C087  F091         	movff	?___awdiv+1,?_printf+3
  7104  000978  C0C6  F080         	movff	_UI$2331,___awmod@dividend
  7105  00097C  C0C7  F081         	movff	_UI$2331+1,___awmod@dividend+1
  7106  000980  0E00               	movlw	0
  7107  000982  0100               	movlb	0	; () banked
  7108  000984  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7109  000986  0E3C               	movlw	60
  7110  000988  6F82               	movwf	___awmod@divisor& (0+255),b
  7111  00098A  ECF0  F01F         	call	___awmod	;wreg free
  7112  00098E  C080  F092         	movff	?___awmod,?_printf+4
  7113  000992  C081  F093         	movff	?___awmod+1,?_printf+5
  7114  000996  ECB8  F008         	call	_printf	;wreg free
  7115                           
  7116                           ;UI.c: 83: machine_state = UI_state;
  7117  00099A  0E00               	movlw	0
  7118  00099C  0100               	movlb	0	; () banked
  7119  00099E  6FFC               	movwf	_machine_state& (0+255),b
  7120  0009A0                     l180:
  7121  0009A0  A281               	btfss	3969,1,c	;volatile
  7122  0009A2  D7FE               	goto	l180
  7123                           
  7124                           ;UI.c: 86: }
  7125                           ;UI.c: 87: if(cur_state==12){
  7126  0009A4  0E0C               	movlw	12
  7127  0009A6  0100               	movlb	0	; () banked
  7128  0009A8  19E6               	xorwf	_cur_state& (0+255),w,b
  7129  0009AA  0100               	movlb	0	; () banked
  7130  0009AC  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  7131  0009AE  A4D8               	btfss	status,2,c
  7132  0009B0  D003               	goto	l8034
  7133                           
  7134                           ; BSR set to: 0
  7135                           ;UI.c: 88: change_state_to_menu_12();
  7136  0009B2  ECBC  F024         	call	_change_state_to_menu_12	;wreg free
  7137                           
  7138                           ;UI.c: 89: }
  7139  0009B6  D3D5               	goto	l8356
  7140  0009B8                     l8034:
  7141                           
  7142                           ;UI.c: 90: else{
  7143                           ;UI.c: 91: change_state_to_menu_22();
  7144  0009B8  ECA0  F024         	call	_change_state_to_menu_22	;wreg free
  7145                           
  7146                           ;UI.c: 92: }
  7147                           ;UI.c: 93: }
  7148  0009BC  D3D2               	goto	l8356
  7149  0009BE                     l8036:
  7150                           
  7151                           ;UI.c: 94: else if(cur_state == 0){
  7152  0009BE  0100               	movlb	0	; () banked
  7153  0009C0  51E6               	movf	_cur_state& (0+255),w,b
  7154  0009C2  0100               	movlb	0	; () banked
  7155  0009C4  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  7156  0009C6  A4D8               	btfss	status,2,c
  7157  0009C8  D3CC               	goto	l8356
  7158                           
  7159                           ; BSR set to: 0
  7160                           ;UI.c: 95: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  7161  0009CA  0E00               	movlw	0
  7162  0009CC  0100               	movlb	0	; () banked
  7163  0009CE  6FC8               	movwf	UI@i& (0+255),b
  7164  0009D0                     l8040:
  7165                           
  7166                           ; BSR set to: 0
  7167  0009D0  0E63               	movlw	99
  7168  0009D2  0100               	movlb	0	; () banked
  7169  0009D4  65C8               	cpfsgt	UI@i& (0+255),b
  7170  0009D6  D001               	goto	l8044
  7171  0009D8  D00C               	goto	l8048
  7172  0009DA                     l8044:
  7173                           
  7174                           ; BSR set to: 0
  7175  0009DA  0E68               	movlw	104
  7176  0009DC  0100               	movlb	0	; () banked
  7177  0009DE  6FC4               	movwf	??_UI& (0+255),b
  7178  0009E0  0EE4               	movlw	228
  7179  0009E2                     u8457:
  7180  0009E2  2EE8               	decfsz	wreg,f,c
  7181  0009E4  D7FE               	bra	u8457
  7182  0009E6  2FC4               	decfsz	??_UI& (0+255),f,b
  7183  0009E8  D7FC               	bra	u8457
  7184  0009EA  F000               	nop	
  7185  0009EC  0100               	movlb	0	; () banked
  7186  0009EE  2BC8               	incf	UI@i& (0+255),f,b
  7187  0009F0  D7EF               	goto	l8040
  7188  0009F2                     l8048:
  7189                           
  7190                           ; BSR set to: 0
  7191                           ;UI.c: 96: if(cur_state == 0){
  7192  0009F2  0100               	movlb	0	; () banked
  7193  0009F4  51E6               	movf	_cur_state& (0+255),w,b
  7194  0009F6  0100               	movlb	0	; () banked
  7195  0009F8  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  7196  0009FA  A4D8               	btfss	status,2,c
  7197  0009FC  D3B2               	goto	l8356
  7198                           
  7199                           ; BSR set to: 0
  7200                           ;UI.c: 97: printRTC();
  7201  0009FE  EC72  F011         	call	_printRTC	;wreg free
  7202                           
  7203                           ;UI.c: 98: }
  7204                           ;UI.c: 99: }
  7205                           ;UI.c: 100: while(logstate){
  7206  000A02  D3AF               	goto	l8356
  7207  000A04                     l8052:
  7208                           
  7209                           ;UI.c: 102: if(!log_completion){
  7210  000A04  0100               	movlb	0	; () banked
  7211  000A06  51EE               	movf	_log_completion& (0+255),w,b
  7212  000A08  0100               	movlb	0	; () banked
  7213  000A0A  11EF               	iorwf	(_log_completion+1)& (0+255),w,b
  7214  000A0C  A4D8               	btfss	status,2,c
  7215  000A0E  D041               	goto	l8082
  7216                           
  7217                           ; BSR set to: 0
  7218                           ;UI.c: 103: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7219  000A10  0E01               	movlw	1
  7220  000A12  EC6E  F027         	call	_lcdInst
  7221  000A16  0E68               	movlw	104
  7222  000A18  0100               	movlb	0	; () banked
  7223  000A1A  6FC4               	movwf	??_UI& (0+255),b
  7224  000A1C  0EE4               	movlw	228
  7225  000A1E                     u8467:
  7226  000A1E  2EE8               	decfsz	wreg,f,c
  7227  000A20  D7FE               	bra	u8467
  7228  000A22  2FC4               	decfsz	??_UI& (0+255),f,b
  7229  000A24  D7FC               	bra	u8467
  7230  000A26  F000               	nop	
  7231                           
  7232                           ;UI.c: 104: lcdInst(0b10000000);;
  7233  000A28  0E80               	movlw	128
  7234  000A2A  EC6E  F027         	call	_lcdInst
  7235                           
  7236                           ;UI.c: 105: printf("-- LOG %2d HERE--", log);
  7237  000A2E  0E91               	movlw	low STR_3
  7238  000A30  0100               	movlb	0	; () banked
  7239  000A32  6F8E               	movwf	printf@f& (0+255),b
  7240  000A34  0EFB               	movlw	high STR_3
  7241  000A36  0100               	movlb	0	; () banked
  7242  000A38  6F8F               	movwf	(printf@f+1)& (0+255),b
  7243  000A3A  C0EC  F090         	movff	_log,?_printf+2
  7244  000A3E  C0ED  F091         	movff	_log+1,?_printf+3
  7245  000A42  ECB8  F008         	call	_printf	;wreg free
  7246                           
  7247                           ;UI.c: 106: lcdInst(0b11000000);;
  7248  000A46  0EC0               	movlw	192
  7249  000A48  EC6E  F027         	call	_lcdInst
  7250                           
  7251                           ;UI.c: 107: printf("DIDN'T COMPLETE");
  7252  000A4C  0E4A               	movlw	low STR_4
  7253  000A4E  0100               	movlb	0	; () banked
  7254  000A50  6F8E               	movwf	printf@f& (0+255),b
  7255  000A52  0EFE               	movlw	high STR_4
  7256  000A54  0100               	movlb	0	; () banked
  7257  000A56  6F8F               	movwf	(printf@f+1)& (0+255),b
  7258  000A58  ECB8  F008         	call	_printf	;wreg free
  7259  000A5C                     l8066:
  7260  000A5C  0E00               	movlw	0
  7261  000A5E  0100               	movlb	0	; () banked
  7262  000A60  6FC9               	movwf	UI@i_409& (0+255),b
  7263  000A62                     l8068:
  7264                           
  7265                           ; BSR set to: 0
  7266  000A62  0E63               	movlw	99
  7267  000A64  0100               	movlb	0	; () banked
  7268  000A66  65C9               	cpfsgt	UI@i_409& (0+255),b
  7269  000A68  D001               	goto	l8072
  7270  000A6A  D00C               	goto	l8076
  7271  000A6C                     l8072:
  7272                           
  7273                           ; BSR set to: 0
  7274  000A6C  0E68               	movlw	104
  7275  000A6E  0100               	movlb	0	; () banked
  7276  000A70  6FC4               	movwf	??_UI& (0+255),b
  7277  000A72  0EE4               	movlw	228
  7278  000A74                     u8477:
  7279  000A74  2EE8               	decfsz	wreg,f,c
  7280  000A76  D7FE               	bra	u8477
  7281  000A78  2FC4               	decfsz	??_UI& (0+255),f,b
  7282  000A7A  D7FC               	bra	u8477
  7283  000A7C  F000               	nop	
  7284  000A7E  0100               	movlb	0	; () banked
  7285  000A80  2BC9               	incf	UI@i_409& (0+255),f,b
  7286  000A82  D7EF               	goto	l8068
  7287  000A84                     l8076:
  7288                           
  7289                           ; BSR set to: 0
  7290  000A84  0100               	movlb	0	; () banked
  7291  000A86  51F6               	movf	_logstate& (0+255),w,b
  7292  000A88  0100               	movlb	0	; () banked
  7293  000A8A  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7294  000A8C  B4D8               	btfsc	status,2,c
  7295  000A8E  0012               	return	
  7296  000A90  D7E5               	goto	l8066
  7297  000A92                     l8082:
  7298                           
  7299                           ; BSR set to: 0
  7300                           ;UI.c: 111: else{
  7301                           ;UI.c: 112: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7302  000A92  0E01               	movlw	1
  7303  000A94  EC6E  F027         	call	_lcdInst
  7304  000A98  0E68               	movlw	104
  7305  000A9A  0100               	movlb	0	; () banked
  7306  000A9C  6FC4               	movwf	??_UI& (0+255),b
  7307  000A9E  0EE4               	movlw	228
  7308  000AA0                     u8487:
  7309  000AA0  2EE8               	decfsz	wreg,f,c
  7310  000AA2  D7FE               	bra	u8487
  7311  000AA4  2FC4               	decfsz	??_UI& (0+255),f,b
  7312  000AA6  D7FC               	bra	u8487
  7313  000AA8  F000               	nop	
  7314                           
  7315                           ;UI.c: 113: lcdInst(0b10000000);;
  7316  000AAA  0E80               	movlw	128
  7317  000AAC  EC6E  F027         	call	_lcdInst
  7318                           
  7319                           ;UI.c: 114: printf("-- LOG %2d HERE--", log);
  7320  000AB0  0E91               	movlw	low STR_3
  7321  000AB2  0100               	movlb	0	; () banked
  7322  000AB4  6F8E               	movwf	printf@f& (0+255),b
  7323  000AB6  0EFB               	movlw	high STR_3
  7324  000AB8  0100               	movlb	0	; () banked
  7325  000ABA  6F8F               	movwf	(printf@f+1)& (0+255),b
  7326  000ABC  C0EC  F090         	movff	_log,?_printf+2
  7327  000AC0  C0ED  F091         	movff	_log+1,?_printf+3
  7328  000AC4  ECB8  F008         	call	_printf	;wreg free
  7329                           
  7330                           ;UI.c: 115: lcdInst(0b11000000);;
  7331  000AC8  0EC0               	movlw	192
  7332  000ACA  EC6E  F027         	call	_lcdInst
  7333                           
  7334                           ;UI.c: 116: printf("PAUSE < | BACK >");
  7335  000ACE  0EE6               	movlw	low STR_6
  7336  000AD0  0100               	movlb	0	; () banked
  7337  000AD2  6F8E               	movwf	printf@f& (0+255),b
  7338  000AD4  0EFD               	movlw	high STR_6
  7339  000AD6  0100               	movlb	0	; () banked
  7340  000AD8  6F8F               	movwf	(printf@f+1)& (0+255),b
  7341  000ADA  ECB8  F008         	call	_printf	;wreg free
  7342                           
  7343                           ;UI.c: 118: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7344  000ADE  0E00               	movlw	0
  7345  000AE0  0100               	movlb	0	; () banked
  7346  000AE2  6FCA               	movwf	UI@i_412& (0+255),b
  7347  000AE4                     l8096:
  7348                           
  7349                           ; BSR set to: 0
  7350  000AE4  0E63               	movlw	99
  7351  000AE6  0100               	movlb	0	; () banked
  7352  000AE8  65CA               	cpfsgt	UI@i_412& (0+255),b
  7353  000AEA  D001               	goto	l8100
  7354  000AEC  D00C               	goto	l8104
  7355  000AEE                     l8100:
  7356                           
  7357                           ; BSR set to: 0
  7358  000AEE  0E68               	movlw	104
  7359  000AF0  0100               	movlb	0	; () banked
  7360  000AF2  6FC4               	movwf	??_UI& (0+255),b
  7361  000AF4  0EE4               	movlw	228
  7362  000AF6                     u8497:
  7363  000AF6  2EE8               	decfsz	wreg,f,c
  7364  000AF8  D7FE               	bra	u8497
  7365  000AFA  2FC4               	decfsz	??_UI& (0+255),f,b
  7366  000AFC  D7FC               	bra	u8497
  7367  000AFE  F000               	nop	
  7368  000B00  0100               	movlb	0	; () banked
  7369  000B02  2BCA               	incf	UI@i_412& (0+255),f,b
  7370  000B04  D7EF               	goto	l8096
  7371  000B06                     l8104:
  7372                           
  7373                           ; BSR set to: 0
  7374  000B06  0100               	movlb	0	; () banked
  7375  000B08  51F6               	movf	_logstate& (0+255),w,b
  7376  000B0A  0100               	movlb	0	; () banked
  7377  000B0C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7378  000B0E  B4D8               	btfsc	status,2,c
  7379  000B10  0012               	return	
  7380                           
  7381                           ; BSR set to: 0
  7382                           ;UI.c: 119: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7383                           
  7384                           ; BSR set to: 0
  7385                           
  7386                           ; BSR set to: 0
  7387  000B12  0E00               	movlw	0
  7388  000B14  0100               	movlb	0	; () banked
  7389  000B16  6FCB               	movwf	UI@i_413& (0+255),b
  7390  000B18                     l8110:
  7391                           
  7392                           ; BSR set to: 0
  7393  000B18  0E63               	movlw	99
  7394  000B1A  0100               	movlb	0	; () banked
  7395  000B1C  65CB               	cpfsgt	UI@i_413& (0+255),b
  7396  000B1E  D001               	goto	l8114
  7397  000B20  D00C               	goto	l8118
  7398  000B22                     l8114:
  7399                           
  7400                           ; BSR set to: 0
  7401  000B22  0E68               	movlw	104
  7402  000B24  0100               	movlb	0	; () banked
  7403  000B26  6FC4               	movwf	??_UI& (0+255),b
  7404  000B28  0EE4               	movlw	228
  7405  000B2A                     u8507:
  7406  000B2A  2EE8               	decfsz	wreg,f,c
  7407  000B2C  D7FE               	bra	u8507
  7408  000B2E  2FC4               	decfsz	??_UI& (0+255),f,b
  7409  000B30  D7FC               	bra	u8507
  7410  000B32  F000               	nop	
  7411  000B34  0100               	movlb	0	; () banked
  7412  000B36  2BCB               	incf	UI@i_413& (0+255),f,b
  7413  000B38  D7EF               	goto	l8110
  7414  000B3A                     l8118:
  7415                           
  7416                           ; BSR set to: 0
  7417  000B3A  0100               	movlb	0	; () banked
  7418  000B3C  51F6               	movf	_logstate& (0+255),w,b
  7419  000B3E  0100               	movlb	0	; () banked
  7420  000B40  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7421  000B42  B4D8               	btfsc	status,2,c
  7422  000B44  0012               	return	
  7423                           
  7424                           ; BSR set to: 0
  7425                           ;UI.c: 121: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7426                           
  7427                           ; BSR set to: 0
  7428                           
  7429                           ; BSR set to: 0
  7430  000B46  0E01               	movlw	1
  7431  000B48  EC6E  F027         	call	_lcdInst
  7432  000B4C  0E68               	movlw	104
  7433  000B4E  0100               	movlb	0	; () banked
  7434  000B50  6FC4               	movwf	??_UI& (0+255),b
  7435  000B52  0EE4               	movlw	228
  7436  000B54                     u8517:
  7437  000B54  2EE8               	decfsz	wreg,f,c
  7438  000B56  D7FE               	bra	u8517
  7439  000B58  2FC4               	decfsz	??_UI& (0+255),f,b
  7440  000B5A  D7FC               	bra	u8517
  7441  000B5C  F000               	nop	
  7442                           
  7443                           ;UI.c: 122: lcdInst(0b10000000);;
  7444  000B5E  0E80               	movlw	128
  7445  000B60  EC6E  F027         	call	_lcdInst
  7446                           
  7447                           ;UI.c: 123: printf("START:");
  7448  000B64  0EC4               	movlw	low STR_7
  7449  000B66  0100               	movlb	0	; () banked
  7450  000B68  6F8E               	movwf	printf@f& (0+255),b
  7451  000B6A  0EFF               	movlw	high STR_7
  7452  000B6C  0100               	movlb	0	; () banked
  7453  000B6E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7454  000B70  ECB8  F008         	call	_printf	;wreg free
  7455                           
  7456                           ;UI.c: 124: lcdInst(0b11000000);;
  7457  000B74  0EC0               	movlw	192
  7458  000B76  EC6E  F027         	call	_lcdInst
  7459                           
  7460                           ;UI.c: 125: char month[] = "MMM";
  7461  000B7A  C135  F0D6         	movff	UI@F3228,UI@month
  7462  000B7E  C136  F0D7         	movff	UI@F3228+1,UI@month+1
  7463  000B82  C137  F0D8         	movff	UI@F3228+2,UI@month+2
  7464  000B86  C138  F0D9         	movff	UI@F3228+3,UI@month+3
  7465                           
  7466                           ;UI.c: 126: switch(log_startTime[5]){
  7467  000B8A  D0C3               	goto	l8162
  7468  000B8C                     l8134:
  7469                           
  7470                           ;UI.c: 128: strcpy(month, "JAN");
  7471  000B8C  0ED6               	movlw	low UI@month
  7472  000B8E  0100               	movlb	0	; () banked
  7473  000B90  6F80               	movwf	strcpy@to& (0+255),b
  7474  000B92  0E00               	movlw	high UI@month
  7475  000B94  0100               	movlb	0	; () banked
  7476  000B96  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7477  000B98  0EDB               	movlw	low STR_8
  7478  000B9A  0100               	movlb	0	; () banked
  7479  000B9C  6F82               	movwf	strcpy@from& (0+255),b
  7480  000B9E  0EFF               	movlw	high STR_8
  7481  000BA0  0100               	movlb	0	; () banked
  7482  000BA2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7483  000BA4  ECD8  F024         	call	_strcpy	;wreg free
  7484                           
  7485                           ;UI.c: 129: break;
  7486  000BA8  D0E6               	goto	l8164
  7487  000BAA                     l8136:
  7488                           
  7489                           ;UI.c: 131: strcpy(month, "FEB");
  7490  000BAA  0ED6               	movlw	low UI@month
  7491  000BAC  0100               	movlb	0	; () banked
  7492  000BAE  6F80               	movwf	strcpy@to& (0+255),b
  7493  000BB0  0E00               	movlw	high UI@month
  7494  000BB2  0100               	movlb	0	; () banked
  7495  000BB4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7496  000BB6  0ECB               	movlw	low STR_9
  7497  000BB8  0100               	movlb	0	; () banked
  7498  000BBA  6F82               	movwf	strcpy@from& (0+255),b
  7499  000BBC  0EFF               	movlw	high STR_9
  7500  000BBE  0100               	movlb	0	; () banked
  7501  000BC0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7502  000BC2  ECD8  F024         	call	_strcpy	;wreg free
  7503                           
  7504                           ;UI.c: 132: break;
  7505  000BC6  D0D7               	goto	l8164
  7506  000BC8                     l8138:
  7507                           
  7508                           ;UI.c: 134: strcpy(month, "MAR");
  7509  000BC8  0ED6               	movlw	low UI@month
  7510  000BCA  0100               	movlb	0	; () banked
  7511  000BCC  6F80               	movwf	strcpy@to& (0+255),b
  7512  000BCE  0E00               	movlw	high UI@month
  7513  000BD0  0100               	movlb	0	; () banked
  7514  000BD2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7515  000BD4  0EE7               	movlw	low STR_10
  7516  000BD6  0100               	movlb	0	; () banked
  7517  000BD8  6F82               	movwf	strcpy@from& (0+255),b
  7518  000BDA  0EFF               	movlw	high STR_10
  7519  000BDC  0100               	movlb	0	; () banked
  7520  000BDE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7521  000BE0  ECD8  F024         	call	_strcpy	;wreg free
  7522                           
  7523                           ;UI.c: 135: break;
  7524  000BE4  D0C8               	goto	l8164
  7525  000BE6                     l8140:
  7526                           
  7527                           ;UI.c: 137: strcpy(month, "APR");
  7528  000BE6  0ED6               	movlw	low UI@month
  7529  000BE8  0100               	movlb	0	; () banked
  7530  000BEA  6F80               	movwf	strcpy@to& (0+255),b
  7531  000BEC  0E00               	movlw	high UI@month
  7532  000BEE  0100               	movlb	0	; () banked
  7533  000BF0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7534  000BF2  0EEB               	movlw	low STR_11
  7535  000BF4  0100               	movlb	0	; () banked
  7536  000BF6  6F82               	movwf	strcpy@from& (0+255),b
  7537  000BF8  0EFF               	movlw	high STR_11
  7538  000BFA  0100               	movlb	0	; () banked
  7539  000BFC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7540  000BFE  ECD8  F024         	call	_strcpy	;wreg free
  7541                           
  7542                           ;UI.c: 138: break;
  7543  000C02  D0B9               	goto	l8164
  7544  000C04                     l8142:
  7545                           
  7546                           ;UI.c: 140: strcpy(month, "MAY");
  7547  000C04  0ED6               	movlw	low UI@month
  7548  000C06  0100               	movlb	0	; () banked
  7549  000C08  6F80               	movwf	strcpy@to& (0+255),b
  7550  000C0A  0E00               	movlw	high UI@month
  7551  000C0C  0100               	movlb	0	; () banked
  7552  000C0E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7553  000C10  0EFB               	movlw	low STR_12
  7554  000C12  0100               	movlb	0	; () banked
  7555  000C14  6F82               	movwf	strcpy@from& (0+255),b
  7556  000C16  0EFF               	movlw	high STR_12
  7557  000C18  0100               	movlb	0	; () banked
  7558  000C1A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7559  000C1C  ECD8  F024         	call	_strcpy	;wreg free
  7560                           
  7561                           ;UI.c: 141: break;
  7562  000C20  D0AA               	goto	l8164
  7563  000C22                     l8144:
  7564                           
  7565                           ;UI.c: 143: strcpy(month, "JUN");
  7566  000C22  0ED6               	movlw	low UI@month
  7567  000C24  0100               	movlb	0	; () banked
  7568  000C26  6F80               	movwf	strcpy@to& (0+255),b
  7569  000C28  0E00               	movlw	high UI@month
  7570  000C2A  0100               	movlb	0	; () banked
  7571  000C2C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7572  000C2E  0EDF               	movlw	low STR_13
  7573  000C30  0100               	movlb	0	; () banked
  7574  000C32  6F82               	movwf	strcpy@from& (0+255),b
  7575  000C34  0EFF               	movlw	high STR_13
  7576  000C36  0100               	movlb	0	; () banked
  7577  000C38  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7578  000C3A  ECD8  F024         	call	_strcpy	;wreg free
  7579                           
  7580                           ;UI.c: 144: break;
  7581  000C3E  D09B               	goto	l8164
  7582  000C40                     l8146:
  7583                           
  7584                           ;UI.c: 146: strcpy(month, "JUL");
  7585  000C40  0ED6               	movlw	low UI@month
  7586  000C42  0100               	movlb	0	; () banked
  7587  000C44  6F80               	movwf	strcpy@to& (0+255),b
  7588  000C46  0E00               	movlw	high UI@month
  7589  000C48  0100               	movlb	0	; () banked
  7590  000C4A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7591  000C4C  0ED7               	movlw	low STR_14
  7592  000C4E  0100               	movlb	0	; () banked
  7593  000C50  6F82               	movwf	strcpy@from& (0+255),b
  7594  000C52  0EFF               	movlw	high STR_14
  7595  000C54  0100               	movlb	0	; () banked
  7596  000C56  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7597  000C58  ECD8  F024         	call	_strcpy	;wreg free
  7598                           
  7599                           ;UI.c: 147: break;
  7600  000C5C  D08C               	goto	l8164
  7601  000C5E                     l8148:
  7602                           
  7603                           ;UI.c: 149: strcpy(month, "AUG");
  7604  000C5E  0ED6               	movlw	low UI@month
  7605  000C60  0100               	movlb	0	; () banked
  7606  000C62  6F80               	movwf	strcpy@to& (0+255),b
  7607  000C64  0E00               	movlw	high UI@month
  7608  000C66  0100               	movlb	0	; () banked
  7609  000C68  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7610  000C6A  0ED3               	movlw	low STR_15
  7611  000C6C  0100               	movlb	0	; () banked
  7612  000C6E  6F82               	movwf	strcpy@from& (0+255),b
  7613  000C70  0EFF               	movlw	high STR_15
  7614  000C72  0100               	movlb	0	; () banked
  7615  000C74  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7616  000C76  ECD8  F024         	call	_strcpy	;wreg free
  7617                           
  7618                           ;UI.c: 150: break;
  7619  000C7A  D07D               	goto	l8164
  7620  000C7C                     l8150:
  7621                           
  7622                           ;UI.c: 152: strcpy(month, "SEP");
  7623  000C7C  0ED6               	movlw	low UI@month
  7624  000C7E  0100               	movlb	0	; () banked
  7625  000C80  6F80               	movwf	strcpy@to& (0+255),b
  7626  000C82  0E00               	movlw	high UI@month
  7627  000C84  0100               	movlb	0	; () banked
  7628  000C86  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7629  000C88  0EE3               	movlw	low STR_16
  7630  000C8A  0100               	movlb	0	; () banked
  7631  000C8C  6F82               	movwf	strcpy@from& (0+255),b
  7632  000C8E  0EFF               	movlw	high STR_16
  7633  000C90  0100               	movlb	0	; () banked
  7634  000C92  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7635  000C94  ECD8  F024         	call	_strcpy	;wreg free
  7636                           
  7637                           ;UI.c: 153: break;
  7638  000C98  D06E               	goto	l8164
  7639  000C9A                     l8152:
  7640                           
  7641                           ;UI.c: 155: strcpy(month, "OCT");
  7642  000C9A  0ED6               	movlw	low UI@month
  7643  000C9C  0100               	movlb	0	; () banked
  7644  000C9E  6F80               	movwf	strcpy@to& (0+255),b
  7645  000CA0  0E00               	movlw	high UI@month
  7646  000CA2  0100               	movlb	0	; () banked
  7647  000CA4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7648  000CA6  0EF3               	movlw	low STR_17
  7649  000CA8  0100               	movlb	0	; () banked
  7650  000CAA  6F82               	movwf	strcpy@from& (0+255),b
  7651  000CAC  0EFF               	movlw	high STR_17
  7652  000CAE  0100               	movlb	0	; () banked
  7653  000CB0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7654  000CB2  ECD8  F024         	call	_strcpy	;wreg free
  7655                           
  7656                           ;UI.c: 156: break;
  7657  000CB6  D05F               	goto	l8164
  7658  000CB8                     l8154:
  7659                           
  7660                           ;UI.c: 158: strcpy(month, "NOV");
  7661  000CB8  0ED6               	movlw	low UI@month
  7662  000CBA  0100               	movlb	0	; () banked
  7663  000CBC  6F80               	movwf	strcpy@to& (0+255),b
  7664  000CBE  0E00               	movlw	high UI@month
  7665  000CC0  0100               	movlb	0	; () banked
  7666  000CC2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7667  000CC4  0EF7               	movlw	low STR_18
  7668  000CC6  0100               	movlb	0	; () banked
  7669  000CC8  6F82               	movwf	strcpy@from& (0+255),b
  7670  000CCA  0EFF               	movlw	high STR_18
  7671  000CCC  0100               	movlb	0	; () banked
  7672  000CCE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7673  000CD0  ECD8  F024         	call	_strcpy	;wreg free
  7674                           
  7675                           ;UI.c: 159: break;
  7676  000CD4  D050               	goto	l8164
  7677  000CD6                     l8156:
  7678                           
  7679                           ;UI.c: 161: strcpy(month, "DEC");
  7680  000CD6  0ED6               	movlw	low UI@month
  7681  000CD8  0100               	movlb	0	; () banked
  7682  000CDA  6F80               	movwf	strcpy@to& (0+255),b
  7683  000CDC  0E00               	movlw	high UI@month
  7684  000CDE  0100               	movlb	0	; () banked
  7685  000CE0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7686  000CE2  0ECF               	movlw	low STR_19
  7687  000CE4  0100               	movlb	0	; () banked
  7688  000CE6  6F82               	movwf	strcpy@from& (0+255),b
  7689  000CE8  0EFF               	movlw	high STR_19
  7690  000CEA  0100               	movlb	0	; () banked
  7691  000CEC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7692  000CEE  ECD8  F024         	call	_strcpy	;wreg free
  7693                           
  7694                           ;UI.c: 162: break;
  7695  000CF2  D041               	goto	l8164
  7696  000CF4                     l8158:
  7697                           
  7698                           ;UI.c: 164: strcpy(month, "ERR");
  7699  000CF4  0ED6               	movlw	low UI@month
  7700  000CF6  0100               	movlb	0	; () banked
  7701  000CF8  6F80               	movwf	strcpy@to& (0+255),b
  7702  000CFA  0E00               	movlw	high UI@month
  7703  000CFC  0100               	movlb	0	; () banked
  7704  000CFE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7705  000D00  0EEF               	movlw	low STR_20
  7706  000D02  0100               	movlb	0	; () banked
  7707  000D04  6F82               	movwf	strcpy@from& (0+255),b
  7708  000D06  0EFF               	movlw	high STR_20
  7709  000D08  0100               	movlb	0	; () banked
  7710  000D0A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7711  000D0C  ECD8  F024         	call	_strcpy	;wreg free
  7712                           
  7713                           ;UI.c: 166: }
  7714                           
  7715                           ;UI.c: 165: break;
  7716  000D10  D032               	goto	l8164
  7717  000D12                     l8162:
  7718  000D12  EE21  F00A         	lfsr	2,_log_startTime+10
  7719  000D16  CFDE F0C4          	movff	postinc2,??_UI
  7720  000D1A  CFDD F0C5          	movff	postdec2,??_UI+1
  7721                           
  7722                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7723                           ; Switch size 1, requested type "space"
  7724                           ; Number of cases is 1, Range of values is 0 to 0
  7725                           ; switch strategies available:
  7726                           ; Name         Instructions Cycles
  7727                           ; simple_byte            4     3 (average)
  7728                           ;	Chosen strategy is simple_byte
  7729  000D1E  0100               	movlb	0	; () banked
  7730  000D20  51C5               	movf	(??_UI+1)& (0+255),w,b
  7731  000D22  0A00               	xorlw	0	; case 0
  7732  000D24  A4D8               	btfss	status,2,c
  7733  000D26  D7E6               	goto	l8158
  7734                           
  7735                           ; BSR set to: 0
  7736                           ; Switch size 1, requested type "space"
  7737                           ; Number of cases is 12, Range of values is 1 to 12
  7738                           ; switch strategies available:
  7739                           ; Name         Instructions Cycles
  7740                           ; simple_byte           37    19 (average)
  7741                           ;	Chosen strategy is simple_byte
  7742  000D28  0100               	movlb	0	; () banked
  7743  000D2A  51C4               	movf	??_UI& (0+255),w,b
  7744  000D2C  0A01               	xorlw	1	; case 1
  7745  000D2E  B4D8               	btfsc	status,2,c
  7746  000D30  D72D               	goto	l8134
  7747  000D32  0A03               	xorlw	3	; case 2
  7748  000D34  B4D8               	btfsc	status,2,c
  7749  000D36  D739               	goto	l8136
  7750  000D38  0A01               	xorlw	1	; case 3
  7751  000D3A  B4D8               	btfsc	status,2,c
  7752  000D3C  D745               	goto	l8138
  7753  000D3E  0A07               	xorlw	7	; case 4
  7754  000D40  B4D8               	btfsc	status,2,c
  7755  000D42  D751               	goto	l8140
  7756  000D44  0A01               	xorlw	1	; case 5
  7757  000D46  B4D8               	btfsc	status,2,c
  7758  000D48  D75D               	goto	l8142
  7759  000D4A  0A03               	xorlw	3	; case 6
  7760  000D4C  B4D8               	btfsc	status,2,c
  7761  000D4E  D769               	goto	l8144
  7762  000D50  0A01               	xorlw	1	; case 7
  7763  000D52  B4D8               	btfsc	status,2,c
  7764  000D54  D775               	goto	l8146
  7765  000D56  0A0F               	xorlw	15	; case 8
  7766  000D58  B4D8               	btfsc	status,2,c
  7767  000D5A  D781               	goto	l8148
  7768  000D5C  0A01               	xorlw	1	; case 9
  7769  000D5E  B4D8               	btfsc	status,2,c
  7770  000D60  D78D               	goto	l8150
  7771  000D62  0A03               	xorlw	3	; case 10
  7772  000D64  B4D8               	btfsc	status,2,c
  7773  000D66  D799               	goto	l8152
  7774  000D68  0A01               	xorlw	1	; case 11
  7775  000D6A  B4D8               	btfsc	status,2,c
  7776  000D6C  D7A5               	goto	l8154
  7777  000D6E  0A07               	xorlw	7	; case 12
  7778  000D70  B4D8               	btfsc	status,2,c
  7779  000D72  D7B1               	goto	l8156
  7780  000D74  D7BF               	goto	l8158
  7781  000D76                     l8164:
  7782                           
  7783                           ;UI.c: 167: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  7784  000D76  0E0A               	movlw	low STR_21
  7785  000D78  0100               	movlb	0	; () banked
  7786  000D7A  6F8E               	movwf	printf@f& (0+255),b
  7787  000D7C  0EFB               	movlw	high STR_21
  7788  000D7E  0100               	movlb	0	; () banked
  7789  000D80  6F8F               	movwf	(printf@f+1)& (0+255),b
  7790  000D82  C108  F090         	movff	_log_startTime+8,?_printf+2
  7791  000D86  C109  F091         	movff	_log_startTime+9,?_printf+3
  7792  000D8A  0ED6               	movlw	low UI@month
  7793  000D8C  0100               	movlb	0	; () banked
  7794  000D8E  6F92               	movwf	(?_printf+4)& (0+255),b
  7795  000D90  0E00               	movlw	high UI@month
  7796  000D92  0100               	movlb	0	; () banked
  7797  000D94  6F93               	movwf	(?_printf+5)& (0+255),b
  7798  000D96  C104  F094         	movff	_log_startTime+4,?_printf+6
  7799  000D9A  C105  F095         	movff	_log_startTime+5,?_printf+7
  7800  000D9E  C102  F096         	movff	_log_startTime+2,?_printf+8
  7801  000DA2  C103  F097         	movff	_log_startTime+3,?_printf+9
  7802  000DA6  C100  F098         	movff	_log_startTime,?_printf+10
  7803  000DAA  C101  F099         	movff	_log_startTime+1,?_printf+11
  7804  000DAE  ECB8  F008         	call	_printf	;wreg free
  7805                           
  7806                           ;UI.c: 169: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7807  000DB2  0E00               	movlw	0
  7808  000DB4  0100               	movlb	0	; () banked
  7809  000DB6  6FCC               	movwf	UI@i_431& (0+255),b
  7810  000DB8                     l8168:
  7811                           
  7812                           ; BSR set to: 0
  7813  000DB8  0E63               	movlw	99
  7814  000DBA  0100               	movlb	0	; () banked
  7815  000DBC  65CC               	cpfsgt	UI@i_431& (0+255),b
  7816  000DBE  D001               	goto	l8172
  7817  000DC0  D00C               	goto	l8176
  7818  000DC2                     l8172:
  7819                           
  7820                           ; BSR set to: 0
  7821  000DC2  0E68               	movlw	104
  7822  000DC4  0100               	movlb	0	; () banked
  7823  000DC6  6FC4               	movwf	??_UI& (0+255),b
  7824  000DC8  0EE4               	movlw	228
  7825  000DCA                     u8527:
  7826  000DCA  2EE8               	decfsz	wreg,f,c
  7827  000DCC  D7FE               	bra	u8527
  7828  000DCE  2FC4               	decfsz	??_UI& (0+255),f,b
  7829  000DD0  D7FC               	bra	u8527
  7830  000DD2  F000               	nop	
  7831  000DD4  0100               	movlb	0	; () banked
  7832  000DD6  2BCC               	incf	UI@i_431& (0+255),f,b
  7833  000DD8  D7EF               	goto	l8168
  7834  000DDA                     l8176:
  7835                           
  7836                           ; BSR set to: 0
  7837  000DDA  0100               	movlb	0	; () banked
  7838  000DDC  51F6               	movf	_logstate& (0+255),w,b
  7839  000DDE  0100               	movlb	0	; () banked
  7840  000DE0  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7841  000DE2  B4D8               	btfsc	status,2,c
  7842  000DE4  0012               	return	
  7843                           
  7844                           ; BSR set to: 0
  7845                           ;UI.c: 170: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7846                           
  7847                           ; BSR set to: 0
  7848                           
  7849                           ; BSR set to: 0
  7850  000DE6  0E00               	movlw	0
  7851  000DE8  0100               	movlb	0	; () banked
  7852  000DEA  6FCD               	movwf	UI@i_432& (0+255),b
  7853  000DEC                     l8182:
  7854                           
  7855                           ; BSR set to: 0
  7856  000DEC  0E63               	movlw	99
  7857  000DEE  0100               	movlb	0	; () banked
  7858  000DF0  65CD               	cpfsgt	UI@i_432& (0+255),b
  7859  000DF2  D001               	goto	l8186
  7860  000DF4  D00C               	goto	l8190
  7861  000DF6                     l8186:
  7862                           
  7863                           ; BSR set to: 0
  7864  000DF6  0E68               	movlw	104
  7865  000DF8  0100               	movlb	0	; () banked
  7866  000DFA  6FC4               	movwf	??_UI& (0+255),b
  7867  000DFC  0EE4               	movlw	228
  7868  000DFE                     u8537:
  7869  000DFE  2EE8               	decfsz	wreg,f,c
  7870  000E00  D7FE               	bra	u8537
  7871  000E02  2FC4               	decfsz	??_UI& (0+255),f,b
  7872  000E04  D7FC               	bra	u8537
  7873  000E06  F000               	nop	
  7874  000E08  0100               	movlb	0	; () banked
  7875  000E0A  2BCD               	incf	UI@i_432& (0+255),f,b
  7876  000E0C  D7EF               	goto	l8182
  7877  000E0E                     l8190:
  7878                           
  7879                           ; BSR set to: 0
  7880  000E0E  0100               	movlb	0	; () banked
  7881  000E10  51F6               	movf	_logstate& (0+255),w,b
  7882  000E12  0100               	movlb	0	; () banked
  7883  000E14  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7884  000E16  B4D8               	btfsc	status,2,c
  7885  000E18  0012               	return	
  7886                           
  7887                           ; BSR set to: 0
  7888                           ;UI.c: 172: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7889                           
  7890                           ; BSR set to: 0
  7891                           
  7892                           ; BSR set to: 0
  7893  000E1A  0E01               	movlw	1
  7894  000E1C  EC6E  F027         	call	_lcdInst
  7895  000E20  0E68               	movlw	104
  7896  000E22  0100               	movlb	0	; () banked
  7897  000E24  6FC4               	movwf	??_UI& (0+255),b
  7898  000E26  0EE4               	movlw	228
  7899  000E28                     u8547:
  7900  000E28  2EE8               	decfsz	wreg,f,c
  7901  000E2A  D7FE               	bra	u8547
  7902  000E2C  2FC4               	decfsz	??_UI& (0+255),f,b
  7903  000E2E  D7FC               	bra	u8547
  7904  000E30  F000               	nop	
  7905                           
  7906                           ;UI.c: 173: lcdInst(0b10000000);;
  7907  000E32  0E80               	movlw	128
  7908  000E34  EC6E  F027         	call	_lcdInst
  7909                           
  7910                           ;UI.c: 174: printf("DURATION:");
  7911  000E38  0E9B               	movlw	low STR_22
  7912  000E3A  0100               	movlb	0	; () banked
  7913  000E3C  6F8E               	movwf	printf@f& (0+255),b
  7914  000E3E  0EFF               	movlw	high STR_22
  7915  000E40  0100               	movlb	0	; () banked
  7916  000E42  6F8F               	movwf	(printf@f+1)& (0+255),b
  7917  000E44  ECB8  F008         	call	_printf	;wreg free
  7918                           
  7919                           ;UI.c: 175: lcdInst(0b11000000);;
  7920  000E48  0EC0               	movlw	192
  7921  000E4A  EC6E  F027         	call	_lcdInst
  7922                           
  7923                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  7924  000E4E  0E0E               	movlw	14
  7925  000E50  0100               	movlb	0	; () banked
  7926  000E52  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7927  000E54  0E10               	movlw	16
  7928  000E56  6F82               	movwf	___awmod@divisor& (0+255),b
  7929  000E58  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  7930  000E5C  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  7931  000E60  ECF0  F01F         	call	___awmod	;wreg free
  7932  000E64  C080  F0C6         	movff	?___awmod,_UI$2331
  7933  000E68  C081  F0C7         	movff	?___awmod+1,_UI$2331+1
  7934                           
  7935                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  7936  000E6C  0E19               	movlw	low STR_23
  7937  000E6E  0100               	movlb	0	; () banked
  7938  000E70  6F8E               	movwf	printf@f& (0+255),b
  7939  000E72  0EFF               	movlw	high STR_23
  7940  000E74  0100               	movlb	0	; () banked
  7941  000E76  6F8F               	movwf	(printf@f+1)& (0+255),b
  7942  000E78  0E0E               	movlw	14
  7943  000E7A  0100               	movlb	0	; () banked
  7944  000E7C  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7945  000E7E  0E10               	movlw	16
  7946  000E80  6F82               	movwf	___awmod@divisor& (0+255),b
  7947  000E82  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  7948  000E86  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  7949  000E8A  ECF0  F01F         	call	___awmod	;wreg free
  7950  000E8E  C080  F086         	movff	?___awmod,___awdiv@dividend
  7951  000E92  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7952  000E96  0E00               	movlw	0
  7953  000E98  0100               	movlb	0	; () banked
  7954  000E9A  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7955  000E9C  0E3C               	movlw	60
  7956  000E9E  6F88               	movwf	___awdiv@divisor& (0+255),b
  7957  000EA0  ECDE  F01E         	call	___awdiv	;wreg free
  7958  000EA4  C086  F090         	movff	?___awdiv,?_printf+2
  7959  000EA8  C087  F091         	movff	?___awdiv+1,?_printf+3
  7960  000EAC  C0C6  F080         	movff	_UI$2331,___awmod@dividend
  7961  000EB0  C0C7  F081         	movff	_UI$2331+1,___awmod@dividend+1
  7962  000EB4  0E00               	movlw	0
  7963  000EB6  0100               	movlb	0	; () banked
  7964  000EB8  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7965  000EBA  0E3C               	movlw	60
  7966  000EBC  6F82               	movwf	___awmod@divisor& (0+255),b
  7967  000EBE  ECF0  F01F         	call	___awmod	;wreg free
  7968  000EC2  C080  F092         	movff	?___awmod,?_printf+4
  7969  000EC6  C081  F093         	movff	?___awmod+1,?_printf+5
  7970  000ECA  ECB8  F008         	call	_printf	;wreg free
  7971                           
  7972                           ;UI.c: 178: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7973  000ECE  0E00               	movlw	0
  7974  000ED0  0100               	movlb	0	; () banked
  7975  000ED2  6FCE               	movwf	UI@i_435& (0+255),b
  7976  000ED4                     l8210:
  7977                           
  7978                           ; BSR set to: 0
  7979  000ED4  0E63               	movlw	99
  7980  000ED6  0100               	movlb	0	; () banked
  7981  000ED8  65CE               	cpfsgt	UI@i_435& (0+255),b
  7982  000EDA  D001               	goto	l8214
  7983  000EDC  D00C               	goto	l8218
  7984  000EDE                     l8214:
  7985                           
  7986                           ; BSR set to: 0
  7987  000EDE  0E68               	movlw	104
  7988  000EE0  0100               	movlb	0	; () banked
  7989  000EE2  6FC4               	movwf	??_UI& (0+255),b
  7990  000EE4  0EE4               	movlw	228
  7991  000EE6                     u8557:
  7992  000EE6  2EE8               	decfsz	wreg,f,c
  7993  000EE8  D7FE               	bra	u8557
  7994  000EEA  2FC4               	decfsz	??_UI& (0+255),f,b
  7995  000EEC  D7FC               	bra	u8557
  7996  000EEE  F000               	nop	
  7997  000EF0  0100               	movlb	0	; () banked
  7998  000EF2  2BCE               	incf	UI@i_435& (0+255),f,b
  7999  000EF4  D7EF               	goto	l8210
  8000  000EF6                     l8218:
  8001                           
  8002                           ; BSR set to: 0
  8003  000EF6  0100               	movlb	0	; () banked
  8004  000EF8  51F6               	movf	_logstate& (0+255),w,b
  8005  000EFA  0100               	movlb	0	; () banked
  8006  000EFC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8007  000EFE  B4D8               	btfsc	status,2,c
  8008  000F00  0012               	return	
  8009                           
  8010                           ; BSR set to: 0
  8011                           ;UI.c: 179: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8012                           
  8013                           ; BSR set to: 0
  8014                           
  8015                           ; BSR set to: 0
  8016  000F02  0E00               	movlw	0
  8017  000F04  0100               	movlb	0	; () banked
  8018  000F06  6FCF               	movwf	UI@i_436& (0+255),b
  8019  000F08                     l8224:
  8020                           
  8021                           ; BSR set to: 0
  8022  000F08  0E63               	movlw	99
  8023  000F0A  0100               	movlb	0	; () banked
  8024  000F0C  65CF               	cpfsgt	UI@i_436& (0+255),b
  8025  000F0E  D001               	goto	l8228
  8026  000F10  D00C               	goto	l8232
  8027  000F12                     l8228:
  8028                           
  8029                           ; BSR set to: 0
  8030  000F12  0E68               	movlw	104
  8031  000F14  0100               	movlb	0	; () banked
  8032  000F16  6FC4               	movwf	??_UI& (0+255),b
  8033  000F18  0EE4               	movlw	228
  8034  000F1A                     u8567:
  8035  000F1A  2EE8               	decfsz	wreg,f,c
  8036  000F1C  D7FE               	bra	u8567
  8037  000F1E  2FC4               	decfsz	??_UI& (0+255),f,b
  8038  000F20  D7FC               	bra	u8567
  8039  000F22  F000               	nop	
  8040  000F24  0100               	movlb	0	; () banked
  8041  000F26  2BCF               	incf	UI@i_436& (0+255),f,b
  8042  000F28  D7EF               	goto	l8224
  8043  000F2A                     l8232:
  8044                           
  8045                           ; BSR set to: 0
  8046  000F2A  0100               	movlb	0	; () banked
  8047  000F2C  51F6               	movf	_logstate& (0+255),w,b
  8048  000F2E  0100               	movlb	0	; () banked
  8049  000F30  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8050  000F32  B4D8               	btfsc	status,2,c
  8051  000F34  0012               	return	
  8052                           
  8053                           ; BSR set to: 0
  8054                           ;UI.c: 181: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8055                           
  8056                           ; BSR set to: 0
  8057                           
  8058                           ; BSR set to: 0
  8059  000F36  0E01               	movlw	1
  8060  000F38  EC6E  F027         	call	_lcdInst
  8061  000F3C  0E68               	movlw	104
  8062  000F3E  0100               	movlb	0	; () banked
  8063  000F40  6FC4               	movwf	??_UI& (0+255),b
  8064  000F42  0EE4               	movlw	228
  8065  000F44                     u8577:
  8066  000F44  2EE8               	decfsz	wreg,f,c
  8067  000F46  D7FE               	bra	u8577
  8068  000F48  2FC4               	decfsz	??_UI& (0+255),f,b
  8069  000F4A  D7FC               	bra	u8577
  8070  000F4C  F000               	nop	
  8071                           
  8072                           ;UI.c: 182: lcdInst(0b10000000);;
  8073  000F4E  0E80               	movlw	128
  8074  000F50  EC6E  F027         	call	_lcdInst
  8075                           
  8076                           ;UI.c: 183: printf(" -- POP  CAN -- ");
  8077  000F54  0E3C               	movlw	low STR_24
  8078  000F56  0100               	movlb	0	; () banked
  8079  000F58  6F8E               	movwf	printf@f& (0+255),b
  8080  000F5A  0EFD               	movlw	high STR_24
  8081  000F5C  0100               	movlb	0	; () banked
  8082  000F5E  6F8F               	movwf	(printf@f+1)& (0+255),b
  8083  000F60  ECB8  F008         	call	_printf	;wreg free
  8084                           
  8085                           ;UI.c: 184: lcdInst(0b11000000);;
  8086  000F64  0EC0               	movlw	192
  8087  000F66  EC6E  F027         	call	_lcdInst
  8088                           
  8089                           ;UI.c: 185: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  8090  000F6A  0E19               	movlw	low STR_25
  8091  000F6C  0100               	movlb	0	; () banked
  8092  000F6E  6F8E               	movwf	printf@f& (0+255),b
  8093  000F70  0EFE               	movlw	high STR_25
  8094  000F72  0100               	movlb	0	; () banked
  8095  000F74  6F8F               	movwf	(printf@f+1)& (0+255),b
  8096  000F76  C0F0  F090         	movff	_log_count_pop_no_tab,?_printf+2
  8097  000F7A  C0F1  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  8098  000F7E  C0F2  F092         	movff	_log_count_pop_w_tab,?_printf+4
  8099  000F82  C0F3  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  8100  000F86  ECB8  F008         	call	_printf	;wreg free
  8101                           
  8102                           ;UI.c: 187: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8103  000F8A  0E00               	movlw	0
  8104  000F8C  0100               	movlb	0	; () banked
  8105  000F8E  6FD0               	movwf	UI@i_439& (0+255),b
  8106  000F90                     l8250:
  8107                           
  8108                           ; BSR set to: 0
  8109  000F90  0E63               	movlw	99
  8110  000F92  0100               	movlb	0	; () banked
  8111  000F94  65D0               	cpfsgt	UI@i_439& (0+255),b
  8112  000F96  D001               	goto	l8254
  8113  000F98  D00C               	goto	l8258
  8114  000F9A                     l8254:
  8115                           
  8116                           ; BSR set to: 0
  8117  000F9A  0E68               	movlw	104
  8118  000F9C  0100               	movlb	0	; () banked
  8119  000F9E  6FC4               	movwf	??_UI& (0+255),b
  8120  000FA0  0EE4               	movlw	228
  8121  000FA2                     u8587:
  8122  000FA2  2EE8               	decfsz	wreg,f,c
  8123  000FA4  D7FE               	bra	u8587
  8124  000FA6  2FC4               	decfsz	??_UI& (0+255),f,b
  8125  000FA8  D7FC               	bra	u8587
  8126  000FAA  F000               	nop	
  8127  000FAC  0100               	movlb	0	; () banked
  8128  000FAE  2BD0               	incf	UI@i_439& (0+255),f,b
  8129  000FB0  D7EF               	goto	l8250
  8130  000FB2                     l8258:
  8131                           
  8132                           ; BSR set to: 0
  8133  000FB2  0100               	movlb	0	; () banked
  8134  000FB4  51F6               	movf	_logstate& (0+255),w,b
  8135  000FB6  0100               	movlb	0	; () banked
  8136  000FB8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8137  000FBA  B4D8               	btfsc	status,2,c
  8138  000FBC  0012               	return	
  8139                           
  8140                           ; BSR set to: 0
  8141                           ;UI.c: 188: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8142                           
  8143                           ; BSR set to: 0
  8144                           
  8145                           ; BSR set to: 0
  8146  000FBE  0E00               	movlw	0
  8147  000FC0  0100               	movlb	0	; () banked
  8148  000FC2  6FD1               	movwf	UI@i_440& (0+255),b
  8149  000FC4                     l8264:
  8150                           
  8151                           ; BSR set to: 0
  8152  000FC4  0E63               	movlw	99
  8153  000FC6  0100               	movlb	0	; () banked
  8154  000FC8  65D1               	cpfsgt	UI@i_440& (0+255),b
  8155  000FCA  D001               	goto	l8268
  8156  000FCC  D00C               	goto	l8272
  8157  000FCE                     l8268:
  8158                           
  8159                           ; BSR set to: 0
  8160  000FCE  0E68               	movlw	104
  8161  000FD0  0100               	movlb	0	; () banked
  8162  000FD2  6FC4               	movwf	??_UI& (0+255),b
  8163  000FD4  0EE4               	movlw	228
  8164  000FD6                     u8597:
  8165  000FD6  2EE8               	decfsz	wreg,f,c
  8166  000FD8  D7FE               	bra	u8597
  8167  000FDA  2FC4               	decfsz	??_UI& (0+255),f,b
  8168  000FDC  D7FC               	bra	u8597
  8169  000FDE  F000               	nop	
  8170  000FE0  0100               	movlb	0	; () banked
  8171  000FE2  2BD1               	incf	UI@i_440& (0+255),f,b
  8172  000FE4  D7EF               	goto	l8264
  8173  000FE6                     l8272:
  8174                           
  8175                           ; BSR set to: 0
  8176  000FE6  0100               	movlb	0	; () banked
  8177  000FE8  51F6               	movf	_logstate& (0+255),w,b
  8178  000FEA  0100               	movlb	0	; () banked
  8179  000FEC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8180  000FEE  B4D8               	btfsc	status,2,c
  8181  000FF0  0012               	return	
  8182                           
  8183                           ; BSR set to: 0
  8184                           ;UI.c: 190: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8185                           
  8186                           ; BSR set to: 0
  8187                           
  8188                           ; BSR set to: 0
  8189  000FF2  0E01               	movlw	1
  8190  000FF4  EC6E  F027         	call	_lcdInst
  8191  000FF8  0E68               	movlw	104
  8192  000FFA  0100               	movlb	0	; () banked
  8193  000FFC  6FC4               	movwf	??_UI& (0+255),b
  8194  000FFE  0EE4               	movlw	228
  8195  001000                     u8607:
  8196  001000  2EE8               	decfsz	wreg,f,c
  8197  001002  D7FE               	bra	u8607
  8198  001004  2FC4               	decfsz	??_UI& (0+255),f,b
  8199  001006  D7FC               	bra	u8607
  8200  001008  F000               	nop	
  8201                           
  8202                           ;UI.c: 191: lcdInst(0b10000000);;
  8203  00100A  0E80               	movlw	128
  8204  00100C  EC6E  F027         	call	_lcdInst
  8205                           
  8206                           ;UI.c: 192: printf(" -- SOUP CAN -- ");
  8207  001010  0E4D               	movlw	low STR_26
  8208  001012  0100               	movlb	0	; () banked
  8209  001014  6F8E               	movwf	printf@f& (0+255),b
  8210  001016  0EFD               	movlw	high STR_26
  8211  001018  0100               	movlb	0	; () banked
  8212  00101A  6F8F               	movwf	(printf@f+1)& (0+255),b
  8213  00101C  ECB8  F008         	call	_printf	;wreg free
  8214                           
  8215                           ;UI.c: 193: lcdInst(0b11000000);;
  8216  001020  0EC0               	movlw	192
  8217  001022  EC6E  F027         	call	_lcdInst
  8218                           
  8219                           ;UI.c: 194: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  8220  001026  0E08               	movlw	low STR_27
  8221  001028  0100               	movlb	0	; () banked
  8222  00102A  6F8E               	movwf	printf@f& (0+255),b
  8223  00102C  0EFE               	movlw	high STR_27
  8224  00102E  0100               	movlb	0	; () banked
  8225  001030  6F8F               	movwf	(printf@f+1)& (0+255),b
  8226  001032  C071  F090         	movff	_log_count_can_no_lab,?_printf+2
  8227  001036  C072  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  8228  00103A  C073  F092         	movff	_log_count_can_w_lab,?_printf+4
  8229  00103E  C074  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  8230  001042  ECB8  F008         	call	_printf	;wreg free
  8231                           
  8232                           ;UI.c: 196: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8233  001046  0E00               	movlw	0
  8234  001048  0100               	movlb	0	; () banked
  8235  00104A  6FD2               	movwf	UI@i_443& (0+255),b
  8236  00104C                     l8290:
  8237                           
  8238                           ; BSR set to: 0
  8239  00104C  0E63               	movlw	99
  8240  00104E  0100               	movlb	0	; () banked
  8241  001050  65D2               	cpfsgt	UI@i_443& (0+255),b
  8242  001052  D001               	goto	l8294
  8243  001054  D00C               	goto	l8298
  8244  001056                     l8294:
  8245                           
  8246                           ; BSR set to: 0
  8247  001056  0E68               	movlw	104
  8248  001058  0100               	movlb	0	; () banked
  8249  00105A  6FC4               	movwf	??_UI& (0+255),b
  8250  00105C  0EE4               	movlw	228
  8251  00105E                     u8617:
  8252  00105E  2EE8               	decfsz	wreg,f,c
  8253  001060  D7FE               	bra	u8617
  8254  001062  2FC4               	decfsz	??_UI& (0+255),f,b
  8255  001064  D7FC               	bra	u8617
  8256  001066  F000               	nop	
  8257  001068  0100               	movlb	0	; () banked
  8258  00106A  2BD2               	incf	UI@i_443& (0+255),f,b
  8259  00106C  D7EF               	goto	l8290
  8260  00106E                     l8298:
  8261                           
  8262                           ; BSR set to: 0
  8263  00106E  0100               	movlb	0	; () banked
  8264  001070  51F6               	movf	_logstate& (0+255),w,b
  8265  001072  0100               	movlb	0	; () banked
  8266  001074  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8267  001076  B4D8               	btfsc	status,2,c
  8268  001078  0012               	return	
  8269                           
  8270                           ; BSR set to: 0
  8271                           ;UI.c: 197: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8272                           
  8273                           ; BSR set to: 0
  8274                           
  8275                           ; BSR set to: 0
  8276  00107A  0E00               	movlw	0
  8277  00107C  0100               	movlb	0	; () banked
  8278  00107E  6FD3               	movwf	UI@i_444& (0+255),b
  8279  001080                     l8304:
  8280                           
  8281                           ; BSR set to: 0
  8282  001080  0E63               	movlw	99
  8283  001082  0100               	movlb	0	; () banked
  8284  001084  65D3               	cpfsgt	UI@i_444& (0+255),b
  8285  001086  D001               	goto	l8308
  8286  001088  D00C               	goto	l8312
  8287  00108A                     l8308:
  8288                           
  8289                           ; BSR set to: 0
  8290  00108A  0E68               	movlw	104
  8291  00108C  0100               	movlb	0	; () banked
  8292  00108E  6FC4               	movwf	??_UI& (0+255),b
  8293  001090  0EE4               	movlw	228
  8294  001092                     u8627:
  8295  001092  2EE8               	decfsz	wreg,f,c
  8296  001094  D7FE               	bra	u8627
  8297  001096  2FC4               	decfsz	??_UI& (0+255),f,b
  8298  001098  D7FC               	bra	u8627
  8299  00109A  F000               	nop	
  8300  00109C  0100               	movlb	0	; () banked
  8301  00109E  2BD3               	incf	UI@i_444& (0+255),f,b
  8302  0010A0  D7EF               	goto	l8304
  8303  0010A2                     l8312:
  8304                           
  8305                           ; BSR set to: 0
  8306  0010A2  0100               	movlb	0	; () banked
  8307  0010A4  51F6               	movf	_logstate& (0+255),w,b
  8308  0010A6  0100               	movlb	0	; () banked
  8309  0010A8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8310  0010AA  B4D8               	btfsc	status,2,c
  8311  0010AC  0012               	return	
  8312                           
  8313                           ; BSR set to: 0
  8314                           ;UI.c: 199: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8315                           
  8316                           ; BSR set to: 0
  8317                           
  8318                           ; BSR set to: 0
  8319  0010AE  0E01               	movlw	1
  8320  0010B0  EC6E  F027         	call	_lcdInst
  8321  0010B4  0E68               	movlw	104
  8322  0010B6  0100               	movlb	0	; () banked
  8323  0010B8  6FC4               	movwf	??_UI& (0+255),b
  8324  0010BA  0EE4               	movlw	228
  8325  0010BC                     u8637:
  8326  0010BC  2EE8               	decfsz	wreg,f,c
  8327  0010BE  D7FE               	bra	u8637
  8328  0010C0  2FC4               	decfsz	??_UI& (0+255),f,b
  8329  0010C2  D7FC               	bra	u8637
  8330  0010C4  F000               	nop	
  8331                           
  8332                           ;UI.c: 200: lcdInst(0b10000000);;
  8333  0010C6  0E80               	movlw	128
  8334  0010C8  EC6E  F027         	call	_lcdInst
  8335                           
  8336                           ;UI.c: 201: printf("-- TOTAL CANS --");
  8337  0010CC  0E5E               	movlw	low STR_28
  8338  0010CE  0100               	movlb	0	; () banked
  8339  0010D0  6F8E               	movwf	printf@f& (0+255),b
  8340  0010D2  0EFD               	movlw	high STR_28
  8341  0010D4  0100               	movlb	0	; () banked
  8342  0010D6  6F8F               	movwf	(printf@f+1)& (0+255),b
  8343  0010D8  ECB8  F008         	call	_printf	;wreg free
  8344                           
  8345                           ;UI.c: 202: lcdInst(0b11000000);;
  8346  0010DC  0EC0               	movlw	192
  8347  0010DE  EC6E  F027         	call	_lcdInst
  8348                           
  8349                           ;UI.c: 203: printf("%d", log_count_total);
  8350  0010E2  0E16               	movlw	low (STR_27+14)
  8351  0010E4  0100               	movlb	0	; () banked
  8352  0010E6  6F8E               	movwf	printf@f& (0+255),b
  8353  0010E8  0EFE               	movlw	high (STR_27+14)
  8354  0010EA  0100               	movlb	0	; () banked
  8355  0010EC  6F8F               	movwf	(printf@f+1)& (0+255),b
  8356  0010EE  C075  F090         	movff	_log_count_total,?_printf+2
  8357  0010F2  C076  F091         	movff	_log_count_total+1,?_printf+3
  8358  0010F6  ECB8  F008         	call	_printf	;wreg free
  8359                           
  8360                           ;UI.c: 205: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8361  0010FA  0E00               	movlw	0
  8362  0010FC  0100               	movlb	0	; () banked
  8363  0010FE  6FD4               	movwf	UI@i_447& (0+255),b
  8364  001100                     l8330:
  8365                           
  8366                           ; BSR set to: 0
  8367  001100  0E63               	movlw	99
  8368  001102  0100               	movlb	0	; () banked
  8369  001104  65D4               	cpfsgt	UI@i_447& (0+255),b
  8370  001106  D001               	goto	l8334
  8371  001108  D00C               	goto	l8338
  8372  00110A                     l8334:
  8373                           
  8374                           ; BSR set to: 0
  8375  00110A  0E68               	movlw	104
  8376  00110C  0100               	movlb	0	; () banked
  8377  00110E  6FC4               	movwf	??_UI& (0+255),b
  8378  001110  0EE4               	movlw	228
  8379  001112                     u8647:
  8380  001112  2EE8               	decfsz	wreg,f,c
  8381  001114  D7FE               	bra	u8647
  8382  001116  2FC4               	decfsz	??_UI& (0+255),f,b
  8383  001118  D7FC               	bra	u8647
  8384  00111A  F000               	nop	
  8385  00111C  0100               	movlb	0	; () banked
  8386  00111E  2BD4               	incf	UI@i_447& (0+255),f,b
  8387  001120  D7EF               	goto	l8330
  8388  001122                     l8338:
  8389                           
  8390                           ; BSR set to: 0
  8391  001122  0100               	movlb	0	; () banked
  8392  001124  51F6               	movf	_logstate& (0+255),w,b
  8393  001126  0100               	movlb	0	; () banked
  8394  001128  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8395  00112A  B4D8               	btfsc	status,2,c
  8396  00112C  0012               	return	
  8397                           
  8398                           ; BSR set to: 0
  8399                           ;UI.c: 206: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8400                           
  8401                           ; BSR set to: 0
  8402                           
  8403                           ; BSR set to: 0
  8404  00112E  0E00               	movlw	0
  8405  001130  0100               	movlb	0	; () banked
  8406  001132  6FD5               	movwf	UI@i_448& (0+255),b
  8407  001134                     l8344:
  8408                           
  8409                           ; BSR set to: 0
  8410  001134  0E63               	movlw	99
  8411  001136  0100               	movlb	0	; () banked
  8412  001138  65D5               	cpfsgt	UI@i_448& (0+255),b
  8413  00113A  D001               	goto	l8348
  8414  00113C  D00C               	goto	l8352
  8415  00113E                     l8348:
  8416                           
  8417                           ; BSR set to: 0
  8418  00113E  0E68               	movlw	104
  8419  001140  0100               	movlb	0	; () banked
  8420  001142  6FC4               	movwf	??_UI& (0+255),b
  8421  001144  0EE4               	movlw	228
  8422  001146                     u8657:
  8423  001146  2EE8               	decfsz	wreg,f,c
  8424  001148  D7FE               	bra	u8657
  8425  00114A  2FC4               	decfsz	??_UI& (0+255),f,b
  8426  00114C  D7FC               	bra	u8657
  8427  00114E  F000               	nop	
  8428  001150  0100               	movlb	0	; () banked
  8429  001152  2BD5               	incf	UI@i_448& (0+255),f,b
  8430  001154  D7EF               	goto	l8344
  8431  001156                     l8352:
  8432                           
  8433                           ; BSR set to: 0
  8434  001156  0100               	movlb	0	; () banked
  8435  001158  51F6               	movf	_logstate& (0+255),w,b
  8436  00115A  0100               	movlb	0	; () banked
  8437  00115C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8438  00115E  B4D8               	btfsc	status,2,c
  8439  001160  0012               	return	
  8440  001162                     l8356:
  8441  001162  0100               	movlb	0	; () banked
  8442  001164  51F6               	movf	_logstate& (0+255),w,b
  8443  001166  0100               	movlb	0	; () banked
  8444  001168  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8445  00116A  B4D8               	btfsc	status,2,c
  8446  00116C  0012               	return	
  8447  00116E  D44A               	goto	l8052
  8448  001170                     __end_of_UI:
  8449                           	opt stack 0
  8450                           tblptru	equ	0xFF8
  8451                           tblptrh	equ	0xFF7
  8452                           tblptrl	equ	0xFF6
  8453                           tablat	equ	0xFF5
  8454                           prodh	equ	0xFF4
  8455                           prodl	equ	0xFF3
  8456                           intcon	equ	0xFF2
  8457                           intcon2	equ	0xFF1
  8458                           intcon3	equ	0xFF0
  8459                           postinc0	equ	0xFEE
  8460                           wreg	equ	0xFE8
  8461                           postdec1	equ	0xFE5
  8462                           fsr1l	equ	0xFE1
  8463                           indf2	equ	0xFDF
  8464                           postinc2	equ	0xFDE
  8465                           postdec2	equ	0xFDD
  8466                           fsr2h	equ	0xFDA
  8467                           fsr2l	equ	0xFD9
  8468                           status	equ	0xFD8
  8469                           
  8470 ;; *************** function _printRTC *****************
  8471 ;; Defined at:
  8472 ;;		line 63 in file "RTC.c"
  8473 ;; Parameters:    Size  Location     Type
  8474 ;;		None
  8475 ;; Auto vars:     Size  Location     Type
  8476 ;;  i               2   66[BANK0 ] int 
  8477 ;;  INT_time       14   46[BANK0 ] int [7]
  8478 ;;  month           4   62[BANK0 ] unsigned char [4]
  8479 ;;  RTC_month       2   60[BANK0 ] int 
  8480 ;; Return value:  Size  Location     Type
  8481 ;;                  1    wreg      void 
  8482 ;; Registers used:
  8483 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8484 ;; Tracked objects:
  8485 ;;		On entry : 0/0
  8486 ;;		On exit  : 0/0
  8487 ;;		Unchanged: 0/0
  8488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8490 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8491 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8492 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8493 ;;Total ram usage:       25 bytes
  8494 ;; Hardware stack levels used:    1
  8495 ;; Hardware stack levels required when called:   10
  8496 ;; This function calls:
  8497 ;;		_getRTC
  8498 ;;		_lcdInst
  8499 ;;		_printf
  8500 ;;		_strcpy
  8501 ;; This function is called by:
  8502 ;;		_UI
  8503 ;;		_change_state_to_menu_start
  8504 ;; This function uses a non-reentrant model
  8505 ;;
  8506                           
  8507                           	psect	text24
  8508  0022E4                     __ptext24:
  8509                           	opt stack 0
  8510  0022E4                     _printRTC:
  8511                           	opt stack 18
  8512                           
  8513                           ;RTC.c: 64: getRTC();
  8514                           
  8515                           ; BSR set to: 0
  8516                           ;incstack = 0
  8517  0022E4  EC87  F020         	call	_getRTC	;wreg free
  8518                           
  8519                           ;RTC.c: 65: char month[] = "MMM";
  8520  0022E8  C139  F0BE         	movff	printRTC@F3219,printRTC@month
  8521  0022EC  C13A  F0BF         	movff	printRTC@F3219+1,printRTC@month+1
  8522  0022F0  C13B  F0C0         	movff	printRTC@F3219+2,printRTC@month+2
  8523  0022F4  C13C  F0C1         	movff	printRTC@F3219+3,printRTC@month+3
  8524                           
  8525                           ;RTC.c: 66: int INT_time[7];
  8526                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  8527  0022F8  0E00               	movlw	0
  8528  0022FA  0100               	movlb	0	; () banked
  8529  0022FC  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  8530  0022FE  0E00               	movlw	0
  8531  002300  6FC2               	movwf	printRTC@i& (0+255),b
  8532                           
  8533                           ; BSR set to: 0
  8534  002302  0100               	movlb	0	; () banked
  8535  002304  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  8536  002306  D008               	goto	l6222
  8537  002308  0100               	movlb	0	; () banked
  8538  00230A  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  8539  00230C  E146               	bnz	l606
  8540  00230E  0E07               	movlw	7
  8541  002310  0100               	movlb	0	; () banked
  8542  002312  5DC2               	subwf	printRTC@i& (0+255),w,b
  8543  002314  B0D8               	btfsc	status,0,c
  8544  002316  D041               	goto	l606
  8545  002318                     l6222:
  8546                           
  8547                           ; BSR set to: 0
  8548                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  8549  002318  0E24               	movlw	low _time
  8550  00231A  0100               	movlb	0	; () banked
  8551  00231C  25C2               	addwf	printRTC@i& (0+255),w,b
  8552  00231E  6ED9               	movwf	fsr2l,c
  8553  002320  0E01               	movlw	high _time
  8554  002322  0100               	movlb	0	; () banked
  8555  002324  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  8556  002326  6EDA               	movwf	fsr2h,c
  8557  002328  50DF               	movf	indf2,w,c
  8558  00232A  0100               	movlb	0	; () banked
  8559  00232C  6FAB               	movwf	??_printRTC& (0+255),b
  8560  00232E  0100               	movlb	0	; () banked
  8561  002330  3BAB               	swapf	??_printRTC& (0+255),f,b
  8562  002332  0E0F               	movlw	15
  8563  002334  17AB               	andwf	??_printRTC& (0+255),f,b
  8564  002336  0E0F               	movlw	15
  8565  002338  0100               	movlb	0	; () banked
  8566  00233A  17AB               	andwf	??_printRTC& (0+255),f,b
  8567  00233C  0100               	movlb	0	; () banked
  8568  00233E  51AB               	movf	??_printRTC& (0+255),w,b
  8569  002340  0D0A               	mullw	10
  8570  002342  0E24               	movlw	low _time
  8571  002344  0100               	movlb	0	; () banked
  8572  002346  25C2               	addwf	printRTC@i& (0+255),w,b
  8573  002348  6ED9               	movwf	fsr2l,c
  8574  00234A  0E01               	movlw	high _time
  8575  00234C  0100               	movlb	0	; () banked
  8576  00234E  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  8577  002350  6EDA               	movwf	fsr2h,c
  8578  002352  50DF               	movf	indf2,w,c
  8579  002354  0B0F               	andlw	15
  8580  002356  0100               	movlb	0	; () banked
  8581  002358  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  8582  00235A  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  8583  00235C  50F3               	movf	prodl,w,c
  8584  00235E  0100               	movlb	0	; () banked
  8585  002360  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  8586  002362  50F4               	movf	prodh,w,c
  8587  002364  0100               	movlb	0	; () banked
  8588  002366  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  8589  002368  90D8               	bcf	status,0,c
  8590  00236A  0100               	movlb	0	; () banked
  8591  00236C  35C2               	rlcf	printRTC@i& (0+255),w,b
  8592  00236E  6ED9               	movwf	fsr2l,c
  8593  002370  0100               	movlb	0	; () banked
  8594  002372  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  8595  002374  6EDA               	movwf	fsr2h,c
  8596  002376  0EAE               	movlw	low printRTC@INT_time
  8597  002378  26D9               	addwf	fsr2l,f,c
  8598  00237A  0E00               	movlw	high printRTC@INT_time
  8599  00237C  22DA               	addwfc	fsr2h,f,c
  8600  00237E  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  8601  002382  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  8602                           
  8603                           ; BSR set to: 0
  8604  002386  0100               	movlb	0	; () banked
  8605  002388  4BC2               	infsnz	printRTC@i& (0+255),f,b
  8606  00238A  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  8607                           
  8608                           ; BSR set to: 0
  8609  00238C  0100               	movlb	0	; () banked
  8610  00238E  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  8611  002390  D7C3               	goto	l6222
  8612  002392  0100               	movlb	0	; () banked
  8613  002394  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  8614  002396  E101               	bnz	u5020
  8615  002398  D7BA               	goto	L7
  8616  00239A                     u5020:
  8617  00239A                     l606:
  8618                           
  8619                           ; BSR set to: 0
  8620                           ;RTC.c: 69: }
  8621                           ;RTC.c: 70: int RTC_month = INT_time[5];
  8622  00239A  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  8623  00239E  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  8624                           
  8625                           ;RTC.c: 71: switch(RTC_month){
  8626  0023A2  D0B4               	goto	l6254
  8627  0023A4                     l6228:
  8628                           
  8629                           ; BSR set to: 0
  8630                           ;RTC.c: 73: strcpy(month, "JAN");
  8631  0023A4  0EBE               	movlw	low printRTC@month
  8632  0023A6  0100               	movlb	0	; () banked
  8633  0023A8  6F80               	movwf	strcpy@to& (0+255),b
  8634  0023AA  0E00               	movlw	high printRTC@month
  8635  0023AC  0100               	movlb	0	; () banked
  8636  0023AE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8637  0023B0  0EDB               	movlw	low STR_8
  8638  0023B2  0100               	movlb	0	; () banked
  8639  0023B4  6F82               	movwf	strcpy@from& (0+255),b
  8640  0023B6  0EFF               	movlw	high STR_8
  8641  0023B8  0100               	movlb	0	; () banked
  8642  0023BA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8643  0023BC  ECD8  F024         	call	_strcpy	;wreg free
  8644                           
  8645                           ;RTC.c: 74: break;
  8646  0023C0  D0D4               	goto	l6256
  8647  0023C2                     l6230:
  8648                           
  8649                           ;RTC.c: 76: strcpy(month, "FEB");
  8650  0023C2  0EBE               	movlw	low printRTC@month
  8651  0023C4  0100               	movlb	0	; () banked
  8652  0023C6  6F80               	movwf	strcpy@to& (0+255),b
  8653  0023C8  0E00               	movlw	high printRTC@month
  8654  0023CA  0100               	movlb	0	; () banked
  8655  0023CC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8656  0023CE  0ECB               	movlw	low STR_9
  8657  0023D0  0100               	movlb	0	; () banked
  8658  0023D2  6F82               	movwf	strcpy@from& (0+255),b
  8659  0023D4  0EFF               	movlw	high STR_9
  8660  0023D6  0100               	movlb	0	; () banked
  8661  0023D8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8662  0023DA  ECD8  F024         	call	_strcpy	;wreg free
  8663                           
  8664                           ;RTC.c: 77: break;
  8665  0023DE  D0C5               	goto	l6256
  8666  0023E0                     l6232:
  8667                           
  8668                           ;RTC.c: 79: strcpy(month, "MAR");
  8669  0023E0  0EBE               	movlw	low printRTC@month
  8670  0023E2  0100               	movlb	0	; () banked
  8671  0023E4  6F80               	movwf	strcpy@to& (0+255),b
  8672  0023E6  0E00               	movlw	high printRTC@month
  8673  0023E8  0100               	movlb	0	; () banked
  8674  0023EA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8675  0023EC  0EE7               	movlw	low STR_10
  8676  0023EE  0100               	movlb	0	; () banked
  8677  0023F0  6F82               	movwf	strcpy@from& (0+255),b
  8678  0023F2  0EFF               	movlw	high STR_10
  8679  0023F4  0100               	movlb	0	; () banked
  8680  0023F6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8681  0023F8  ECD8  F024         	call	_strcpy	;wreg free
  8682                           
  8683                           ;RTC.c: 80: break;
  8684  0023FC  D0B6               	goto	l6256
  8685  0023FE                     l6234:
  8686                           
  8687                           ;RTC.c: 82: strcpy(month, "APR");
  8688  0023FE  0EBE               	movlw	low printRTC@month
  8689  002400  0100               	movlb	0	; () banked
  8690  002402  6F80               	movwf	strcpy@to& (0+255),b
  8691  002404  0E00               	movlw	high printRTC@month
  8692  002406  0100               	movlb	0	; () banked
  8693  002408  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8694  00240A  0EEB               	movlw	low STR_11
  8695  00240C  0100               	movlb	0	; () banked
  8696  00240E  6F82               	movwf	strcpy@from& (0+255),b
  8697  002410  0EFF               	movlw	high STR_11
  8698  002412  0100               	movlb	0	; () banked
  8699  002414  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8700  002416  ECD8  F024         	call	_strcpy	;wreg free
  8701                           
  8702                           ;RTC.c: 83: break;
  8703  00241A  D0A7               	goto	l6256
  8704  00241C                     l6236:
  8705                           
  8706                           ;RTC.c: 85: strcpy(month, "MAY");
  8707  00241C  0EBE               	movlw	low printRTC@month
  8708  00241E  0100               	movlb	0	; () banked
  8709  002420  6F80               	movwf	strcpy@to& (0+255),b
  8710  002422  0E00               	movlw	high printRTC@month
  8711  002424  0100               	movlb	0	; () banked
  8712  002426  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8713  002428  0EFB               	movlw	low STR_12
  8714  00242A  0100               	movlb	0	; () banked
  8715  00242C  6F82               	movwf	strcpy@from& (0+255),b
  8716  00242E  0EFF               	movlw	high STR_12
  8717  002430  0100               	movlb	0	; () banked
  8718  002432  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8719  002434  ECD8  F024         	call	_strcpy	;wreg free
  8720                           
  8721                           ;RTC.c: 86: break;
  8722  002438  D098               	goto	l6256
  8723  00243A                     l6238:
  8724                           
  8725                           ;RTC.c: 88: strcpy(month, "JUN");
  8726  00243A  0EBE               	movlw	low printRTC@month
  8727  00243C  0100               	movlb	0	; () banked
  8728  00243E  6F80               	movwf	strcpy@to& (0+255),b
  8729  002440  0E00               	movlw	high printRTC@month
  8730  002442  0100               	movlb	0	; () banked
  8731  002444  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8732  002446  0EDF               	movlw	low STR_13
  8733  002448  0100               	movlb	0	; () banked
  8734  00244A  6F82               	movwf	strcpy@from& (0+255),b
  8735  00244C  0EFF               	movlw	high STR_13
  8736  00244E  0100               	movlb	0	; () banked
  8737  002450  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8738  002452  ECD8  F024         	call	_strcpy	;wreg free
  8739                           
  8740                           ;RTC.c: 89: break;
  8741  002456  D089               	goto	l6256
  8742  002458                     l6240:
  8743                           
  8744                           ;RTC.c: 91: strcpy(month, "JUL");
  8745  002458  0EBE               	movlw	low printRTC@month
  8746  00245A  0100               	movlb	0	; () banked
  8747  00245C  6F80               	movwf	strcpy@to& (0+255),b
  8748  00245E  0E00               	movlw	high printRTC@month
  8749  002460  0100               	movlb	0	; () banked
  8750  002462  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8751  002464  0ED7               	movlw	low STR_14
  8752  002466  0100               	movlb	0	; () banked
  8753  002468  6F82               	movwf	strcpy@from& (0+255),b
  8754  00246A  0EFF               	movlw	high STR_14
  8755  00246C  0100               	movlb	0	; () banked
  8756  00246E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8757  002470  ECD8  F024         	call	_strcpy	;wreg free
  8758                           
  8759                           ;RTC.c: 92: break;
  8760  002474  D07A               	goto	l6256
  8761  002476                     l6242:
  8762                           
  8763                           ;RTC.c: 94: strcpy(month, "AUG");
  8764  002476  0EBE               	movlw	low printRTC@month
  8765  002478  0100               	movlb	0	; () banked
  8766  00247A  6F80               	movwf	strcpy@to& (0+255),b
  8767  00247C  0E00               	movlw	high printRTC@month
  8768  00247E  0100               	movlb	0	; () banked
  8769  002480  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8770  002482  0ED3               	movlw	low STR_15
  8771  002484  0100               	movlb	0	; () banked
  8772  002486  6F82               	movwf	strcpy@from& (0+255),b
  8773  002488  0EFF               	movlw	high STR_15
  8774  00248A  0100               	movlb	0	; () banked
  8775  00248C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8776  00248E  ECD8  F024         	call	_strcpy	;wreg free
  8777                           
  8778                           ;RTC.c: 95: break;
  8779  002492  D06B               	goto	l6256
  8780  002494                     l6244:
  8781                           
  8782                           ;RTC.c: 97: strcpy(month, "SEP");
  8783  002494  0EBE               	movlw	low printRTC@month
  8784  002496  0100               	movlb	0	; () banked
  8785  002498  6F80               	movwf	strcpy@to& (0+255),b
  8786  00249A  0E00               	movlw	high printRTC@month
  8787  00249C  0100               	movlb	0	; () banked
  8788  00249E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8789  0024A0  0EE3               	movlw	low STR_16
  8790  0024A2  0100               	movlb	0	; () banked
  8791  0024A4  6F82               	movwf	strcpy@from& (0+255),b
  8792  0024A6  0EFF               	movlw	high STR_16
  8793  0024A8  0100               	movlb	0	; () banked
  8794  0024AA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8795  0024AC  ECD8  F024         	call	_strcpy	;wreg free
  8796                           
  8797                           ;RTC.c: 98: break;
  8798  0024B0  D05C               	goto	l6256
  8799  0024B2                     l6246:
  8800                           
  8801                           ;RTC.c: 100: strcpy(month, "OCT");
  8802  0024B2  0EBE               	movlw	low printRTC@month
  8803  0024B4  0100               	movlb	0	; () banked
  8804  0024B6  6F80               	movwf	strcpy@to& (0+255),b
  8805  0024B8  0E00               	movlw	high printRTC@month
  8806  0024BA  0100               	movlb	0	; () banked
  8807  0024BC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8808  0024BE  0EF3               	movlw	low STR_17
  8809  0024C0  0100               	movlb	0	; () banked
  8810  0024C2  6F82               	movwf	strcpy@from& (0+255),b
  8811  0024C4  0EFF               	movlw	high STR_17
  8812  0024C6  0100               	movlb	0	; () banked
  8813  0024C8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8814  0024CA  ECD8  F024         	call	_strcpy	;wreg free
  8815                           
  8816                           ;RTC.c: 101: break;
  8817  0024CE  D04D               	goto	l6256
  8818  0024D0                     l6248:
  8819                           
  8820                           ;RTC.c: 103: strcpy(month, "NOV");
  8821  0024D0  0EBE               	movlw	low printRTC@month
  8822  0024D2  0100               	movlb	0	; () banked
  8823  0024D4  6F80               	movwf	strcpy@to& (0+255),b
  8824  0024D6  0E00               	movlw	high printRTC@month
  8825  0024D8  0100               	movlb	0	; () banked
  8826  0024DA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8827  0024DC  0EF7               	movlw	low STR_18
  8828  0024DE  0100               	movlb	0	; () banked
  8829  0024E0  6F82               	movwf	strcpy@from& (0+255),b
  8830  0024E2  0EFF               	movlw	high STR_18
  8831  0024E4  0100               	movlb	0	; () banked
  8832  0024E6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8833  0024E8  ECD8  F024         	call	_strcpy	;wreg free
  8834                           
  8835                           ;RTC.c: 104: break;
  8836  0024EC  D03E               	goto	l6256
  8837  0024EE                     l6250:
  8838                           
  8839                           ;RTC.c: 106: strcpy(month, "DEC");
  8840  0024EE  0EBE               	movlw	low printRTC@month
  8841  0024F0  0100               	movlb	0	; () banked
  8842  0024F2  6F80               	movwf	strcpy@to& (0+255),b
  8843  0024F4  0E00               	movlw	high printRTC@month
  8844  0024F6  0100               	movlb	0	; () banked
  8845  0024F8  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8846  0024FA  0ECF               	movlw	low STR_19
  8847  0024FC  0100               	movlb	0	; () banked
  8848  0024FE  6F82               	movwf	strcpy@from& (0+255),b
  8849  002500  0EFF               	movlw	high STR_19
  8850  002502  0100               	movlb	0	; () banked
  8851  002504  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8852  002506  ECD8  F024         	call	_strcpy	;wreg free
  8853                           
  8854                           ;RTC.c: 108: }
  8855                           
  8856                           ;RTC.c: 107: break;
  8857  00250A  D02F               	goto	l6256
  8858  00250C                     l6254:
  8859  00250C  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  8860  002510  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  8861                           
  8862                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8863                           ; Switch size 1, requested type "space"
  8864                           ; Number of cases is 1, Range of values is 0 to 0
  8865                           ; switch strategies available:
  8866                           ; Name         Instructions Cycles
  8867                           ; simple_byte            4     3 (average)
  8868                           ;	Chosen strategy is simple_byte
  8869  002514  0100               	movlb	0	; () banked
  8870  002516  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  8871  002518  0A00               	xorlw	0	; case 0
  8872  00251A  A4D8               	btfss	status,2,c
  8873  00251C  D026               	goto	l6256
  8874                           
  8875                           ; BSR set to: 0
  8876                           ; Switch size 1, requested type "space"
  8877                           ; Number of cases is 12, Range of values is 1 to 12
  8878                           ; switch strategies available:
  8879                           ; Name         Instructions Cycles
  8880                           ; simple_byte           37    19 (average)
  8881                           ;	Chosen strategy is simple_byte
  8882  00251E  0100               	movlb	0	; () banked
  8883  002520  51AB               	movf	??_printRTC& (0+255),w,b
  8884  002522  0A01               	xorlw	1	; case 1
  8885  002524  B4D8               	btfsc	status,2,c
  8886  002526  D73E               	goto	l6228
  8887  002528  0A03               	xorlw	3	; case 2
  8888  00252A  B4D8               	btfsc	status,2,c
  8889  00252C  D74A               	goto	l6230
  8890  00252E  0A01               	xorlw	1	; case 3
  8891  002530  B4D8               	btfsc	status,2,c
  8892  002532  D756               	goto	l6232
  8893  002534  0A07               	xorlw	7	; case 4
  8894  002536  B4D8               	btfsc	status,2,c
  8895  002538  D762               	goto	l6234
  8896  00253A  0A01               	xorlw	1	; case 5
  8897  00253C  B4D8               	btfsc	status,2,c
  8898  00253E  D76E               	goto	l6236
  8899  002540  0A03               	xorlw	3	; case 6
  8900  002542  B4D8               	btfsc	status,2,c
  8901  002544  D77A               	goto	l6238
  8902  002546  0A01               	xorlw	1	; case 7
  8903  002548  B4D8               	btfsc	status,2,c
  8904  00254A  D786               	goto	l6240
  8905  00254C  0A0F               	xorlw	15	; case 8
  8906  00254E  B4D8               	btfsc	status,2,c
  8907  002550  D792               	goto	l6242
  8908  002552  0A01               	xorlw	1	; case 9
  8909  002554  B4D8               	btfsc	status,2,c
  8910  002556  D79E               	goto	l6244
  8911  002558  0A03               	xorlw	3	; case 10
  8912  00255A  B4D8               	btfsc	status,2,c
  8913  00255C  D7AA               	goto	l6246
  8914  00255E  0A01               	xorlw	1	; case 11
  8915  002560  B4D8               	btfsc	status,2,c
  8916  002562  D7B6               	goto	l6248
  8917  002564  0A07               	xorlw	7	; case 12
  8918  002566  B4D8               	btfsc	status,2,c
  8919  002568  D7C2               	goto	l6250
  8920  00256A                     l6256:
  8921                           
  8922                           ;RTC.c: 109: lcdInst(0b10000000);;
  8923  00256A  0E80               	movlw	128
  8924  00256C  EC6E  F027         	call	_lcdInst
  8925                           
  8926                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  8927  002570  0E0A               	movlw	low STR_21
  8928  002572  0100               	movlb	0	; () banked
  8929  002574  6F8E               	movwf	printf@f& (0+255),b
  8930  002576  0EFB               	movlw	high STR_21
  8931  002578  0100               	movlb	0	; () banked
  8932  00257A  6F8F               	movwf	(printf@f+1)& (0+255),b
  8933  00257C  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  8934  002580  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  8935  002584  0EBE               	movlw	low printRTC@month
  8936  002586  0100               	movlb	0	; () banked
  8937  002588  6F92               	movwf	(?_printf+4)& (0+255),b
  8938  00258A  0E00               	movlw	high printRTC@month
  8939  00258C  0100               	movlb	0	; () banked
  8940  00258E  6F93               	movwf	(?_printf+5)& (0+255),b
  8941  002590  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  8942  002594  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  8943  002598  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  8944  00259C  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  8945  0025A0  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  8946  0025A4  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  8947  0025A8  ECB8  F008         	call	_printf	;wreg free
  8948  0025AC  0012               	return		;funcret
  8949  0025AE                     __end_of_printRTC:
  8950                           	opt stack 0
  8951                           tblptru	equ	0xFF8
  8952                           tblptrh	equ	0xFF7
  8953                           tblptrl	equ	0xFF6
  8954                           tablat	equ	0xFF5
  8955                           prodh	equ	0xFF4
  8956                           prodl	equ	0xFF3
  8957                           intcon	equ	0xFF2
  8958                           intcon2	equ	0xFF1
  8959                           intcon3	equ	0xFF0
  8960                           postinc0	equ	0xFEE
  8961                           wreg	equ	0xFE8
  8962                           postdec1	equ	0xFE5
  8963                           fsr1l	equ	0xFE1
  8964                           indf2	equ	0xFDF
  8965                           postinc2	equ	0xFDE
  8966                           postdec2	equ	0xFDD
  8967                           fsr2h	equ	0xFDA
  8968                           fsr2l	equ	0xFD9
  8969                           status	equ	0xFD8
  8970                           
  8971 ;; *************** function _strcpy *****************
  8972 ;; Defined at:
  8973 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  8974 ;; Parameters:    Size  Location     Type
  8975 ;;  to              2    0[BANK0 ] PTR unsigned char 
  8976 ;;		 -> printRTC@month(4), UI@month(4), 
  8977 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  8978 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  8979 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  8980 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  8981 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  8982 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  8983 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  8984 ;;		 -> STR_8(4), 
  8985 ;; Auto vars:     Size  Location     Type
  8986 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  8987 ;;		 -> printRTC@month(4), UI@month(4), 
  8988 ;; Return value:  Size  Location     Type
  8989 ;;                  2    0[BANK0 ] PTR unsigned char 
  8990 ;; Registers used:
  8991 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8992 ;; Tracked objects:
  8993 ;;		On entry : 0/0
  8994 ;;		On exit  : 0/0
  8995 ;;		Unchanged: 0/0
  8996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8997 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8998 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9000 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9001 ;;Total ram usage:        6 bytes
  9002 ;; Hardware stack levels used:    1
  9003 ;; Hardware stack levels required when called:    7
  9004 ;; This function calls:
  9005 ;;		Nothing
  9006 ;; This function is called by:
  9007 ;;		_UI
  9008 ;;		_printRTC
  9009 ;; This function uses a non-reentrant model
  9010 ;;
  9011                           
  9012                           	psect	text25
  9013  0049B0                     __ptext25:
  9014                           	opt stack 0
  9015  0049B0                     _strcpy:
  9016                           	opt stack 20
  9017                           
  9018                           ;incstack = 0
  9019  0049B0  C080  F084         	movff	strcpy@to,strcpy@cp
  9020  0049B4  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  9021  0049B8  D006               	goto	l5966
  9022  0049BA                     l5964:
  9023  0049BA  0100               	movlb	0	; () banked
  9024  0049BC  4B84               	infsnz	strcpy@cp& (0+255),f,b
  9025  0049BE  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  9026  0049C0  0100               	movlb	0	; () banked
  9027  0049C2  4B82               	infsnz	strcpy@from& (0+255),f,b
  9028  0049C4  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  9029  0049C6                     l5966:
  9030  0049C6  C082  FFF6         	movff	strcpy@from,tblptrl
  9031  0049CA  C083  FFF7         	movff	strcpy@from+1,tblptrh
  9032  0049CE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9033  0049CE  6AF8               	clrf	tblptru,c
  9034  0049D0                     	endif
  9035  0049D0                     	if	0	;tblptru may be non-zero
  9036  0049D0                     	endif
  9037  0049D0  C084  FFD9         	movff	strcpy@cp,fsr2l
  9038  0049D4  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  9039  0049D8  0008               	tblrd		*
  9040  0049DA  CFF5 FFDF          	movff	tablat,indf2
  9041  0049DE  50DF               	movf	indf2,w,c
  9042  0049E0  B4D8               	btfsc	status,2,c
  9043  0049E2  0012               	return	
  9044  0049E4  D7EA               	goto	l5964
  9045  0049E6                     __end_of_strcpy:
  9046                           	opt stack 0
  9047                           tblptru	equ	0xFF8
  9048                           tblptrh	equ	0xFF7
  9049                           tblptrl	equ	0xFF6
  9050                           tablat	equ	0xFF5
  9051                           prodh	equ	0xFF4
  9052                           prodl	equ	0xFF3
  9053                           intcon	equ	0xFF2
  9054                           intcon2	equ	0xFF1
  9055                           intcon3	equ	0xFF0
  9056                           postinc0	equ	0xFEE
  9057                           wreg	equ	0xFE8
  9058                           postdec1	equ	0xFE5
  9059                           fsr1l	equ	0xFE1
  9060                           indf2	equ	0xFDF
  9061                           postinc2	equ	0xFDE
  9062                           postdec2	equ	0xFDD
  9063                           fsr2h	equ	0xFDA
  9064                           fsr2l	equ	0xFD9
  9065                           status	equ	0xFD8
  9066                           
  9067 ;; *************** function _getRTC *****************
  9068 ;; Defined at:
  9069 ;;		line 44 in file "RTC.c"
  9070 ;; Parameters:    Size  Location     Type
  9071 ;;		None
  9072 ;; Auto vars:     Size  Location     Type
  9073 ;;  i               2    3[BANK0 ] int 
  9074 ;; Return value:  Size  Location     Type
  9075 ;;                  1    wreg      void 
  9076 ;; Registers used:
  9077 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9078 ;; Tracked objects:
  9079 ;;		On entry : 0/0
  9080 ;;		On exit  : 0/0
  9081 ;;		Unchanged: 0/0
  9082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9084 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9086 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9087 ;;Total ram usage:        2 bytes
  9088 ;; Hardware stack levels used:    1
  9089 ;; Hardware stack levels required when called:    9
  9090 ;; This function calls:
  9091 ;;		_I2C_Master_Read
  9092 ;;		_I2C_Master_Start
  9093 ;;		_I2C_Master_Stop
  9094 ;;		_I2C_Master_Write
  9095 ;; This function is called by:
  9096 ;;		_printRTC
  9097 ;;		_initSortTimer
  9098 ;; This function uses a non-reentrant model
  9099 ;;
  9100                           
  9101                           	psect	text26
  9102  00410E                     __ptext26:
  9103                           	opt stack 0
  9104  00410E                     _getRTC:
  9105                           	opt stack 18
  9106                           
  9107                           ;RTC.c: 48: I2C_Master_Start();
  9108                           
  9109                           ;incstack = 0
  9110  00410E  EC94  F027         	call	_I2C_Master_Start	;wreg free
  9111                           
  9112                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  9113  004112  0E00               	movlw	0
  9114  004114  0100               	movlb	0	; () banked
  9115  004116  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9116  004118  0ED0               	movlw	208
  9117  00411A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9118  00411C  EC82  F027         	call	_I2C_Master_Write	;wreg free
  9119                           
  9120                           ;RTC.c: 50: I2C_Master_Write(0x00);
  9121  004120  0E00               	movlw	0
  9122  004122  0100               	movlb	0	; () banked
  9123  004124  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9124  004126  0E00               	movlw	0
  9125  004128  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9126  00412A  EC82  F027         	call	_I2C_Master_Write	;wreg free
  9127                           
  9128                           ;RTC.c: 51: I2C_Master_Stop();
  9129  00412E  EC90  F027         	call	_I2C_Master_Stop	;wreg free
  9130                           
  9131                           ;RTC.c: 54: I2C_Master_Start();
  9132  004132  EC94  F027         	call	_I2C_Master_Start	;wreg free
  9133                           
  9134                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  9135  004136  0E00               	movlw	0
  9136  004138  0100               	movlb	0	; () banked
  9137  00413A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9138  00413C  0ED1               	movlw	209
  9139  00413E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9140  004140  EC82  F027         	call	_I2C_Master_Write	;wreg free
  9141                           
  9142                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  9143  004144  0E00               	movlw	0
  9144  004146  0100               	movlb	0	; () banked
  9145  004148  6F84               	movwf	(getRTC@i+1)& (0+255),b
  9146  00414A  0E00               	movlw	0
  9147  00414C  6F83               	movwf	getRTC@i& (0+255),b
  9148  00414E                     l5972:
  9149                           
  9150                           ; BSR set to: 0
  9151  00414E  0100               	movlb	0	; () banked
  9152  004150  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  9153  004152  D008               	goto	l5976
  9154  004154  0100               	movlb	0	; () banked
  9155  004156  5184               	movf	(getRTC@i+1)& (0+255),w,b
  9156  004158  E115               	bnz	l5982
  9157  00415A  0E06               	movlw	6
  9158  00415C  0100               	movlb	0	; () banked
  9159  00415E  5D83               	subwf	getRTC@i& (0+255),w,b
  9160  004160  B0D8               	btfsc	status,0,c
  9161  004162  D010               	goto	l5982
  9162  004164                     l5976:
  9163                           
  9164                           ; BSR set to: 0
  9165                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  9166  004164  0E24               	movlw	low _time
  9167  004166  0100               	movlb	0	; () banked
  9168  004168  2583               	addwf	getRTC@i& (0+255),w,b
  9169  00416A  6ED9               	movwf	fsr2l,c
  9170  00416C  0E01               	movlw	high _time
  9171  00416E  0100               	movlb	0	; () banked
  9172  004170  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  9173  004172  6EDA               	movwf	fsr2h,c
  9174  004174  0E01               	movlw	1
  9175  004176  EC2F  F026         	call	_I2C_Master_Read
  9176  00417A  6EDF               	movwf	indf2,c
  9177  00417C  0100               	movlb	0	; () banked
  9178  00417E  4B83               	infsnz	getRTC@i& (0+255),f,b
  9179  004180  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  9180  004182  D7E5               	goto	l5972
  9181  004184                     l5982:
  9182                           
  9183                           ; BSR set to: 0
  9184                           ;RTC.c: 58: }
  9185                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  9186  004184  0E00               	movlw	0
  9187  004186  EC2F  F026         	call	_I2C_Master_Read
  9188  00418A  0101               	movlb	1	; () banked
  9189  00418C  6F2A               	movwf	(_time+6)& (0+255),b
  9190                           
  9191                           ;RTC.c: 60: I2C_Master_Stop();
  9192  00418E  EC90  F027         	call	_I2C_Master_Stop	;wreg free
  9193  004192  0012               	return		;funcret
  9194  004194                     __end_of_getRTC:
  9195                           	opt stack 0
  9196                           tblptru	equ	0xFF8
  9197                           tblptrh	equ	0xFF7
  9198                           tblptrl	equ	0xFF6
  9199                           tablat	equ	0xFF5
  9200                           prodh	equ	0xFF4
  9201                           prodl	equ	0xFF3
  9202                           intcon	equ	0xFF2
  9203                           intcon2	equ	0xFF1
  9204                           intcon3	equ	0xFF0
  9205                           postinc0	equ	0xFEE
  9206                           wreg	equ	0xFE8
  9207                           postdec1	equ	0xFE5
  9208                           fsr1l	equ	0xFE1
  9209                           indf2	equ	0xFDF
  9210                           postinc2	equ	0xFDE
  9211                           postdec2	equ	0xFDD
  9212                           fsr2h	equ	0xFDA
  9213                           fsr2l	equ	0xFD9
  9214                           status	equ	0xFD8
  9215                           
  9216 ;; *************** function _I2C_Master_Write *****************
  9217 ;; Defined at:
  9218 ;;		line 49 in file "I2C.c"
  9219 ;; Parameters:    Size  Location     Type
  9220 ;;  d               2    1[BANK0 ] unsigned int 
  9221 ;; Auto vars:     Size  Location     Type
  9222 ;;		None
  9223 ;; Return value:  Size  Location     Type
  9224 ;;                  1    wreg      void 
  9225 ;; Registers used:
  9226 ;;		wreg, status,2, status,0, cstack
  9227 ;; Tracked objects:
  9228 ;;		On entry : 0/0
  9229 ;;		On exit  : 0/0
  9230 ;;		Unchanged: 0/0
  9231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9232 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9233 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9235 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9236 ;;Total ram usage:        2 bytes
  9237 ;; Hardware stack levels used:    1
  9238 ;; Hardware stack levels required when called:    8
  9239 ;; This function calls:
  9240 ;;		_I2C_Master_Wait
  9241 ;; This function is called by:
  9242 ;;		_loadRTC
  9243 ;;		_getRTC
  9244 ;; This function uses a non-reentrant model
  9245 ;;
  9246                           
  9247                           	psect	text27
  9248  004F04                     __ptext27:
  9249                           	opt stack 0
  9250  004F04                     _I2C_Master_Write:
  9251                           	opt stack 18
  9252                           
  9253                           ;I2C.c: 51: I2C_Master_Wait();
  9254                           
  9255                           ;incstack = 0
  9256  004F04  EC53  F027         	call	_I2C_Master_Wait	;wreg free
  9257                           
  9258                           ;I2C.c: 52: SSPBUF = d;
  9259  004F08  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  9260  004F0C  0012               	return		;funcret
  9261  004F0E                     __end_of_I2C_Master_Write:
  9262                           	opt stack 0
  9263                           tblptru	equ	0xFF8
  9264                           tblptrh	equ	0xFF7
  9265                           tblptrl	equ	0xFF6
  9266                           tablat	equ	0xFF5
  9267                           prodh	equ	0xFF4
  9268                           prodl	equ	0xFF3
  9269                           intcon	equ	0xFF2
  9270                           intcon2	equ	0xFF1
  9271                           intcon3	equ	0xFF0
  9272                           postinc0	equ	0xFEE
  9273                           wreg	equ	0xFE8
  9274                           postdec1	equ	0xFE5
  9275                           fsr1l	equ	0xFE1
  9276                           indf2	equ	0xFDF
  9277                           postinc2	equ	0xFDE
  9278                           postdec2	equ	0xFDD
  9279                           fsr2h	equ	0xFDA
  9280                           fsr2l	equ	0xFD9
  9281                           status	equ	0xFD8
  9282                           
  9283 ;; *************** function _I2C_Master_Stop *****************
  9284 ;; Defined at:
  9285 ;;		line 43 in file "I2C.c"
  9286 ;; Parameters:    Size  Location     Type
  9287 ;;		None
  9288 ;; Auto vars:     Size  Location     Type
  9289 ;;		None
  9290 ;; Return value:  Size  Location     Type
  9291 ;;                  1    wreg      void 
  9292 ;; Registers used:
  9293 ;;		wreg, status,2, status,0, cstack
  9294 ;; Tracked objects:
  9295 ;;		On entry : 0/0
  9296 ;;		On exit  : 0/0
  9297 ;;		Unchanged: 0/0
  9298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9302 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9303 ;;Total ram usage:        0 bytes
  9304 ;; Hardware stack levels used:    1
  9305 ;; Hardware stack levels required when called:    8
  9306 ;; This function calls:
  9307 ;;		_I2C_Master_Wait
  9308 ;; This function is called by:
  9309 ;;		_loadRTC
  9310 ;;		_getRTC
  9311 ;; This function uses a non-reentrant model
  9312 ;;
  9313                           
  9314                           	psect	text28
  9315  004F20                     __ptext28:
  9316                           	opt stack 0
  9317  004F20                     _I2C_Master_Stop:
  9318                           	opt stack 18
  9319                           
  9320                           ;I2C.c: 45: I2C_Master_Wait();
  9321                           
  9322                           ;incstack = 0
  9323  004F20  EC53  F027         	call	_I2C_Master_Wait	;wreg free
  9324                           
  9325                           ;I2C.c: 46: PEN = 1;
  9326  004F24  84C5               	bsf	4037,2,c	;volatile
  9327  004F26  0012               	return		;funcret
  9328  004F28                     __end_of_I2C_Master_Stop:
  9329                           	opt stack 0
  9330                           tblptru	equ	0xFF8
  9331                           tblptrh	equ	0xFF7
  9332                           tblptrl	equ	0xFF6
  9333                           tablat	equ	0xFF5
  9334                           prodh	equ	0xFF4
  9335                           prodl	equ	0xFF3
  9336                           intcon	equ	0xFF2
  9337                           intcon2	equ	0xFF1
  9338                           intcon3	equ	0xFF0
  9339                           postinc0	equ	0xFEE
  9340                           wreg	equ	0xFE8
  9341                           postdec1	equ	0xFE5
  9342                           fsr1l	equ	0xFE1
  9343                           indf2	equ	0xFDF
  9344                           postinc2	equ	0xFDE
  9345                           postdec2	equ	0xFDD
  9346                           fsr2h	equ	0xFDA
  9347                           fsr2l	equ	0xFD9
  9348                           status	equ	0xFD8
  9349                           
  9350 ;; *************** function _I2C_Master_Start *****************
  9351 ;; Defined at:
  9352 ;;		line 31 in file "I2C.c"
  9353 ;; Parameters:    Size  Location     Type
  9354 ;;		None
  9355 ;; Auto vars:     Size  Location     Type
  9356 ;;		None
  9357 ;; Return value:  Size  Location     Type
  9358 ;;                  1    wreg      void 
  9359 ;; Registers used:
  9360 ;;		wreg, status,2, status,0, cstack
  9361 ;; Tracked objects:
  9362 ;;		On entry : 0/0
  9363 ;;		On exit  : 0/0
  9364 ;;		Unchanged: 0/0
  9365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9367 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9369 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9370 ;;Total ram usage:        0 bytes
  9371 ;; Hardware stack levels used:    1
  9372 ;; Hardware stack levels required when called:    8
  9373 ;; This function calls:
  9374 ;;		_I2C_Master_Wait
  9375 ;; This function is called by:
  9376 ;;		_loadRTC
  9377 ;;		_getRTC
  9378 ;; This function uses a non-reentrant model
  9379 ;;
  9380                           
  9381                           	psect	text29
  9382  004F28                     __ptext29:
  9383                           	opt stack 0
  9384  004F28                     _I2C_Master_Start:
  9385                           	opt stack 18
  9386                           
  9387                           ;I2C.c: 33: I2C_Master_Wait();
  9388                           
  9389                           ;incstack = 0
  9390  004F28  EC53  F027         	call	_I2C_Master_Wait	;wreg free
  9391                           
  9392                           ;I2C.c: 34: SEN = 1;
  9393  004F2C  80C5               	bsf	4037,0,c	;volatile
  9394  004F2E  0012               	return		;funcret
  9395  004F30                     __end_of_I2C_Master_Start:
  9396                           	opt stack 0
  9397                           tblptru	equ	0xFF8
  9398                           tblptrh	equ	0xFF7
  9399                           tblptrl	equ	0xFF6
  9400                           tablat	equ	0xFF5
  9401                           prodh	equ	0xFF4
  9402                           prodl	equ	0xFF3
  9403                           intcon	equ	0xFF2
  9404                           intcon2	equ	0xFF1
  9405                           intcon3	equ	0xFF0
  9406                           postinc0	equ	0xFEE
  9407                           wreg	equ	0xFE8
  9408                           postdec1	equ	0xFE5
  9409                           fsr1l	equ	0xFE1
  9410                           indf2	equ	0xFDF
  9411                           postinc2	equ	0xFDE
  9412                           postdec2	equ	0xFDD
  9413                           fsr2h	equ	0xFDA
  9414                           fsr2l	equ	0xFD9
  9415                           status	equ	0xFD8
  9416                           
  9417 ;; *************** function _I2C_Master_Read *****************
  9418 ;; Defined at:
  9419 ;;		line 55 in file "I2C.c"
  9420 ;; Parameters:    Size  Location     Type
  9421 ;;  a               1    wreg     unsigned char 
  9422 ;; Auto vars:     Size  Location     Type
  9423 ;;  a               1    1[BANK0 ] unsigned char 
  9424 ;;  temp            1    2[BANK0 ] unsigned char 
  9425 ;; Return value:  Size  Location     Type
  9426 ;;                  1    wreg      unsigned char 
  9427 ;; Registers used:
  9428 ;;		wreg, status,2, status,0, cstack
  9429 ;; Tracked objects:
  9430 ;;		On entry : 0/0
  9431 ;;		On exit  : 0/0
  9432 ;;		Unchanged: 0/0
  9433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9435 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9437 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9438 ;;Total ram usage:        2 bytes
  9439 ;; Hardware stack levels used:    1
  9440 ;; Hardware stack levels required when called:    8
  9441 ;; This function calls:
  9442 ;;		_I2C_Master_Wait
  9443 ;; This function is called by:
  9444 ;;		_getRTC
  9445 ;; This function uses a non-reentrant model
  9446 ;;
  9447                           
  9448                           	psect	text30
  9449  004C5E                     __ptext30:
  9450                           	opt stack 0
  9451  004C5E                     _I2C_Master_Read:
  9452                           	opt stack 18
  9453                           
  9454                           ;incstack = 0
  9455                           ;I2C_Master_Read@a stored from wreg
  9456  004C5E  0100               	movlb	0	; () banked
  9457  004C60  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  9458                           
  9459                           ;I2C.c: 57: unsigned char temp;
  9460                           ;I2C.c: 58: I2C_Master_Wait();
  9461  004C62  EC53  F027         	call	_I2C_Master_Wait	;wreg free
  9462                           
  9463                           ;I2C.c: 59: RCEN = 1;
  9464  004C66  86C5               	bsf	4037,3,c	;volatile
  9465                           
  9466                           ;I2C.c: 60: I2C_Master_Wait();
  9467  004C68  EC53  F027         	call	_I2C_Master_Wait	;wreg free
  9468                           
  9469                           ;I2C.c: 61: temp = SSPBUF;
  9470  004C6C  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  9471                           
  9472                           ;I2C.c: 62: I2C_Master_Wait();
  9473  004C70  EC53  F027         	call	_I2C_Master_Wait	;wreg free
  9474                           
  9475                           ;I2C.c: 63: ACKDT = (a)?0:1;
  9476  004C74  0100               	movlb	0	; () banked
  9477  004C76  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  9478  004C78  0100               	movlb	0	; () banked
  9479  004C7A  A4D8               	btfss	status,2,c
  9480  004C7C  D002               	goto	u4110
  9481  004C7E  8AC5               	bsf	4037,5,c	;volatile
  9482  004C80  D001               	goto	l5660
  9483  004C82                     u4110:
  9484  004C82  9AC5               	bcf	4037,5,c	;volatile
  9485  004C84                     l5660:
  9486                           
  9487                           ;I2C.c: 64: ACKEN = 1;
  9488  004C84  88C5               	bsf	4037,4,c	;volatile
  9489                           
  9490                           ;I2C.c: 65: return temp;
  9491  004C86  0100               	movlb	0	; () banked
  9492  004C88  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  9493  004C8A  0012               	return	
  9494  004C8C                     __end_of_I2C_Master_Read:
  9495                           	opt stack 0
  9496                           tblptru	equ	0xFF8
  9497                           tblptrh	equ	0xFF7
  9498                           tblptrl	equ	0xFF6
  9499                           tablat	equ	0xFF5
  9500                           prodh	equ	0xFF4
  9501                           prodl	equ	0xFF3
  9502                           intcon	equ	0xFF2
  9503                           intcon2	equ	0xFF1
  9504                           intcon3	equ	0xFF0
  9505                           postinc0	equ	0xFEE
  9506                           wreg	equ	0xFE8
  9507                           postdec1	equ	0xFE5
  9508                           fsr1l	equ	0xFE1
  9509                           indf2	equ	0xFDF
  9510                           postinc2	equ	0xFDE
  9511                           postdec2	equ	0xFDD
  9512                           fsr2h	equ	0xFDA
  9513                           fsr2l	equ	0xFD9
  9514                           status	equ	0xFD8
  9515                           
  9516 ;; *************** function _I2C_Master_Wait *****************
  9517 ;; Defined at:
  9518 ;;		line 26 in file "I2C.c"
  9519 ;; Parameters:    Size  Location     Type
  9520 ;;		None
  9521 ;; Auto vars:     Size  Location     Type
  9522 ;;		None
  9523 ;; Return value:  Size  Location     Type
  9524 ;;                  1    wreg      void 
  9525 ;; Registers used:
  9526 ;;		wreg, status,2, status,0
  9527 ;; Tracked objects:
  9528 ;;		On entry : 0/0
  9529 ;;		On exit  : 0/0
  9530 ;;		Unchanged: 0/0
  9531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9533 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9534 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9535 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9536 ;;Total ram usage:        1 bytes
  9537 ;; Hardware stack levels used:    1
  9538 ;; Hardware stack levels required when called:    7
  9539 ;; This function calls:
  9540 ;;		Nothing
  9541 ;; This function is called by:
  9542 ;;		_I2C_Master_Start
  9543 ;;		_I2C_Master_Stop
  9544 ;;		_I2C_Master_Write
  9545 ;;		_I2C_Master_Read
  9546 ;;		_I2C_Master_RepeatedStart
  9547 ;; This function uses a non-reentrant model
  9548 ;;
  9549                           
  9550                           	psect	text31
  9551  004EA6                     __ptext31:
  9552                           	opt stack 0
  9553  004EA6                     _I2C_Master_Wait:
  9554                           	opt stack 18
  9555  004EA6                     l66:
  9556  004EA6  B4C7               	btfsc	4039,2,c	;volatile
  9557  004EA8  D7FE               	goto	l66
  9558  004EAA  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  9559  004EAE  0E1F               	movlw	31
  9560  004EB0  0100               	movlb	0	; () banked
  9561  004EB2  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  9562  004EB4  B4D8               	btfsc	status,2,c
  9563  004EB6  0012               	return	
  9564  004EB8  D7F6               	goto	l66
  9565  004EBA                     __end_of_I2C_Master_Wait:
  9566                           	opt stack 0
  9567                           tblptru	equ	0xFF8
  9568                           tblptrh	equ	0xFF7
  9569                           tblptrl	equ	0xFF6
  9570                           tablat	equ	0xFF5
  9571                           prodh	equ	0xFF4
  9572                           prodl	equ	0xFF3
  9573                           intcon	equ	0xFF2
  9574                           intcon2	equ	0xFF1
  9575                           intcon3	equ	0xFF0
  9576                           postinc0	equ	0xFEE
  9577                           wreg	equ	0xFE8
  9578                           postdec1	equ	0xFE5
  9579                           fsr1l	equ	0xFE1
  9580                           indf2	equ	0xFDF
  9581                           postinc2	equ	0xFDE
  9582                           postdec2	equ	0xFDD
  9583                           fsr2h	equ	0xFDA
  9584                           fsr2l	equ	0xFD9
  9585                           status	equ	0xFD8
  9586                           
  9587 ;; *************** function _change_state_to_menu_22 *****************
  9588 ;; Defined at:
  9589 ;;		line 498 in file "UI.c"
  9590 ;; Parameters:    Size  Location     Type
  9591 ;;		None
  9592 ;; Auto vars:     Size  Location     Type
  9593 ;;		None
  9594 ;; Return value:  Size  Location     Type
  9595 ;;                  1    wreg      void 
  9596 ;; Registers used:
  9597 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9598 ;; Tracked objects:
  9599 ;;		On entry : 0/0
  9600 ;;		On exit  : 0/0
  9601 ;;		Unchanged: 0/0
  9602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9606 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9607 ;;Total ram usage:        0 bytes
  9608 ;; Hardware stack levels used:    1
  9609 ;; Hardware stack levels required when called:   10
  9610 ;; This function calls:
  9611 ;;		_lcdInst
  9612 ;;		_printf
  9613 ;; This function is called by:
  9614 ;;		_UI
  9615 ;; This function uses a non-reentrant model
  9616 ;;
  9617                           
  9618                           	psect	text32
  9619  004940                     __ptext32:
  9620                           	opt stack 0
  9621  004940                     _change_state_to_menu_22:
  9622                           	opt stack 19
  9623                           
  9624                           ;UI.c: 499: cur_state = 22;
  9625                           
  9626                           ; BSR set to: 0
  9627                           ;incstack = 0
  9628  004940  0E00               	movlw	0
  9629  004942  0100               	movlb	0	; () banked
  9630  004944  6FE7               	movwf	(_cur_state+1)& (0+255),b
  9631  004946  0E16               	movlw	22
  9632  004948  6FE6               	movwf	_cur_state& (0+255),b
  9633                           
  9634                           ; BSR set to: 0
  9635                           ;UI.c: 501: lcdInst(0b10000000);;
  9636  00494A  0E80               	movlw	128
  9637  00494C  EC6E  F027         	call	_lcdInst
  9638                           
  9639                           ;UI.c: 502: printf("2. SORT        <");
  9640  004950  0EC4               	movlw	low STR_34
  9641  004952  0100               	movlb	0	; () banked
  9642  004954  6F8E               	movwf	printf@f& (0+255),b
  9643  004956  0EFD               	movlw	high STR_34
  9644  004958  0100               	movlb	0	; () banked
  9645  00495A  6F8F               	movwf	(printf@f+1)& (0+255),b
  9646  00495C  ECB8  F008         	call	_printf	;wreg free
  9647                           
  9648                           ;UI.c: 503: lcdInst(0b11000000);;
  9649  004960  0EC0               	movlw	192
  9650  004962  EC6E  F027         	call	_lcdInst
  9651                           
  9652                           ;UI.c: 504: printf("3. LOGS         ");
  9653  004966  0E09               	movlw	low STR_36
  9654  004968  0100               	movlb	0	; () banked
  9655  00496A  6F8E               	movwf	printf@f& (0+255),b
  9656  00496C  0EFD               	movlw	high STR_36
  9657  00496E  0100               	movlb	0	; () banked
  9658  004970  6F8F               	movwf	(printf@f+1)& (0+255),b
  9659  004972  ECB8  F008         	call	_printf	;wreg free
  9660  004976  0012               	return		;funcret
  9661  004978                     __end_of_change_state_to_menu_22:
  9662                           	opt stack 0
  9663                           tblptru	equ	0xFF8
  9664                           tblptrh	equ	0xFF7
  9665                           tblptrl	equ	0xFF6
  9666                           tablat	equ	0xFF5
  9667                           prodh	equ	0xFF4
  9668                           prodl	equ	0xFF3
  9669                           intcon	equ	0xFF2
  9670                           intcon2	equ	0xFF1
  9671                           intcon3	equ	0xFF0
  9672                           postinc0	equ	0xFEE
  9673                           wreg	equ	0xFE8
  9674                           postdec1	equ	0xFE5
  9675                           fsr1l	equ	0xFE1
  9676                           indf2	equ	0xFDF
  9677                           postinc2	equ	0xFDE
  9678                           postdec2	equ	0xFDD
  9679                           fsr2h	equ	0xFDA
  9680                           fsr2l	equ	0xFD9
  9681                           status	equ	0xFD8
  9682                           
  9683 ;; *************** function _change_state_to_menu_12 *****************
  9684 ;; Defined at:
  9685 ;;		line 490 in file "UI.c"
  9686 ;; Parameters:    Size  Location     Type
  9687 ;;		None
  9688 ;; Auto vars:     Size  Location     Type
  9689 ;;		None
  9690 ;; Return value:  Size  Location     Type
  9691 ;;                  1    wreg      void 
  9692 ;; Registers used:
  9693 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9694 ;; Tracked objects:
  9695 ;;		On entry : 0/0
  9696 ;;		On exit  : 0/0
  9697 ;;		Unchanged: 0/0
  9698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9702 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9703 ;;Total ram usage:        0 bytes
  9704 ;; Hardware stack levels used:    1
  9705 ;; Hardware stack levels required when called:   10
  9706 ;; This function calls:
  9707 ;;		_lcdInst
  9708 ;;		_printf
  9709 ;; This function is called by:
  9710 ;;		_UI
  9711 ;; This function uses a non-reentrant model
  9712 ;;
  9713                           
  9714                           	psect	text33
  9715  004978                     __ptext33:
  9716                           	opt stack 0
  9717  004978                     _change_state_to_menu_12:
  9718                           	opt stack 19
  9719                           
  9720                           ;UI.c: 491: cur_state = 12;
  9721                           
  9722                           ;incstack = 0
  9723  004978  0E00               	movlw	0
  9724  00497A  0100               	movlb	0	; () banked
  9725  00497C  6FE7               	movwf	(_cur_state+1)& (0+255),b
  9726  00497E  0E0C               	movlw	12
  9727  004980  6FE6               	movwf	_cur_state& (0+255),b
  9728                           
  9729                           ; BSR set to: 0
  9730                           ;UI.c: 493: lcdInst(0b10000000);;
  9731  004982  0E80               	movlw	128
  9732  004984  EC6E  F027         	call	_lcdInst
  9733                           
  9734                           ;UI.c: 494: printf("1. DATE/TIME    ");
  9735  004988  0E2B               	movlw	low STR_33
  9736  00498A  0100               	movlb	0	; () banked
  9737  00498C  6F8E               	movwf	printf@f& (0+255),b
  9738  00498E  0EFD               	movlw	high STR_33
  9739  004990  0100               	movlb	0	; () banked
  9740  004992  6F8F               	movwf	(printf@f+1)& (0+255),b
  9741  004994  ECB8  F008         	call	_printf	;wreg free
  9742                           
  9743                           ;UI.c: 495: lcdInst(0b11000000);;
  9744  004998  0EC0               	movlw	192
  9745  00499A  EC6E  F027         	call	_lcdInst
  9746                           
  9747                           ;UI.c: 496: printf("2. SORT        <");
  9748  00499E  0EC4               	movlw	low STR_34
  9749  0049A0  0100               	movlb	0	; () banked
  9750  0049A2  6F8E               	movwf	printf@f& (0+255),b
  9751  0049A4  0EFD               	movlw	high STR_34
  9752  0049A6  0100               	movlb	0	; () banked
  9753  0049A8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9754  0049AA  ECB8  F008         	call	_printf	;wreg free
  9755  0049AE  0012               	return		;funcret
  9756  0049B0                     __end_of_change_state_to_menu_12:
  9757                           	opt stack 0
  9758                           tblptru	equ	0xFF8
  9759                           tblptrh	equ	0xFF7
  9760                           tblptrl	equ	0xFF6
  9761                           tablat	equ	0xFF5
  9762                           prodh	equ	0xFF4
  9763                           prodl	equ	0xFF3
  9764                           intcon	equ	0xFF2
  9765                           intcon2	equ	0xFF1
  9766                           intcon3	equ	0xFF0
  9767                           postinc0	equ	0xFEE
  9768                           wreg	equ	0xFE8
  9769                           postdec1	equ	0xFE5
  9770                           fsr1l	equ	0xFE1
  9771                           indf2	equ	0xFDF
  9772                           postinc2	equ	0xFDE
  9773                           postdec2	equ	0xFDD
  9774                           fsr2h	equ	0xFDA
  9775                           fsr2l	equ	0xFD9
  9776                           status	equ	0xFD8
  9777                           
  9778 ;; *************** function ___awmod *****************
  9779 ;; Defined at:
  9780 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  9781 ;; Parameters:    Size  Location     Type
  9782 ;;  dividend        2    0[BANK0 ] int 
  9783 ;;  divisor         2    2[BANK0 ] int 
  9784 ;; Auto vars:     Size  Location     Type
  9785 ;;  sign            1    5[BANK0 ] unsigned char 
  9786 ;;  counter         1    4[BANK0 ] unsigned char 
  9787 ;; Return value:  Size  Location     Type
  9788 ;;                  2    0[BANK0 ] int 
  9789 ;; Registers used:
  9790 ;;		wreg, status,2, status,0
  9791 ;; Tracked objects:
  9792 ;;		On entry : 0/0
  9793 ;;		On exit  : 0/0
  9794 ;;		Unchanged: 0/0
  9795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9796 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9797 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9799 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9800 ;;Total ram usage:        6 bytes
  9801 ;; Hardware stack levels used:    1
  9802 ;; Hardware stack levels required when called:    7
  9803 ;; This function calls:
  9804 ;;		Nothing
  9805 ;; This function is called by:
  9806 ;;		_UI
  9807 ;; This function uses a non-reentrant model
  9808 ;;
  9809                           
  9810                           	psect	text34
  9811  003FE0                     __ptext34:
  9812                           	opt stack 0
  9813  003FE0                     ___awmod:
  9814                           	opt stack 22
  9815                           
  9816                           ;incstack = 0
  9817  003FE0  0E00               	movlw	0
  9818  003FE2  0100               	movlb	0	; () banked
  9819  003FE4  6F85               	movwf	___awmod@sign& (0+255),b
  9820                           
  9821                           ; BSR set to: 0
  9822  003FE6  0100               	movlb	0	; () banked
  9823  003FE8  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  9824  003FEA  D008               	goto	l7962
  9825                           
  9826                           ; BSR set to: 0
  9827  003FEC  0100               	movlb	0	; () banked
  9828  003FEE  6D80               	negf	___awmod@dividend& (0+255),b
  9829  003FF0  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9830  003FF2  B0D8               	btfsc	status,0,c
  9831  003FF4  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9832                           
  9833                           ; BSR set to: 0
  9834  003FF6  0E01               	movlw	1
  9835  003FF8  0100               	movlb	0	; () banked
  9836  003FFA  6F85               	movwf	___awmod@sign& (0+255),b
  9837  003FFC                     l7962:
  9838                           
  9839                           ; BSR set to: 0
  9840  003FFC  0100               	movlb	0	; () banked
  9841  003FFE  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9842  004000  D005               	goto	l7966
  9843                           
  9844                           ; BSR set to: 0
  9845  004002  0100               	movlb	0	; () banked
  9846  004004  6D82               	negf	___awmod@divisor& (0+255),b
  9847  004006  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  9848  004008  B0D8               	btfsc	status,0,c
  9849  00400A  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  9850  00400C                     l7966:
  9851                           
  9852                           ; BSR set to: 0
  9853  00400C  0100               	movlb	0	; () banked
  9854  00400E  5182               	movf	___awmod@divisor& (0+255),w,b
  9855  004010  0100               	movlb	0	; () banked
  9856  004012  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  9857  004014  B4D8               	btfsc	status,2,c
  9858  004016  D026               	goto	l7982
  9859                           
  9860                           ; BSR set to: 0
  9861  004018  0E01               	movlw	1
  9862  00401A  0100               	movlb	0	; () banked
  9863  00401C  6F84               	movwf	___awmod@counter& (0+255),b
  9864  00401E  D006               	goto	l7972
  9865  004020                     l7970:
  9866                           
  9867                           ; BSR set to: 0
  9868  004020  0100               	movlb	0	; () banked
  9869  004022  90D8               	bcf	status,0,c
  9870  004024  3782               	rlcf	___awmod@divisor& (0+255),f,b
  9871  004026  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  9872  004028  0100               	movlb	0	; () banked
  9873  00402A  2B84               	incf	___awmod@counter& (0+255),f,b
  9874  00402C                     l7972:
  9875                           
  9876                           ; BSR set to: 0
  9877  00402C  0100               	movlb	0	; () banked
  9878  00402E  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9879  004030  D7F7               	goto	l7970
  9880  004032                     l7974:
  9881                           
  9882                           ; BSR set to: 0
  9883  004032  0100               	movlb	0	; () banked
  9884  004034  5182               	movf	___awmod@divisor& (0+255),w,b
  9885  004036  0100               	movlb	0	; () banked
  9886  004038  5D80               	subwf	___awmod@dividend& (0+255),w,b
  9887  00403A  0100               	movlb	0	; () banked
  9888  00403C  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9889  00403E  0100               	movlb	0	; () banked
  9890  004040  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  9891  004042  A0D8               	btfss	status,0,c
  9892  004044  D008               	goto	l7978
  9893                           
  9894                           ; BSR set to: 0
  9895  004046  0100               	movlb	0	; () banked
  9896  004048  5182               	movf	___awmod@divisor& (0+255),w,b
  9897  00404A  0100               	movlb	0	; () banked
  9898  00404C  5F80               	subwf	___awmod@dividend& (0+255),f,b
  9899  00404E  0100               	movlb	0	; () banked
  9900  004050  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9901  004052  0100               	movlb	0	; () banked
  9902  004054  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  9903  004056                     l7978:
  9904                           
  9905                           ; BSR set to: 0
  9906  004056  0100               	movlb	0	; () banked
  9907  004058  90D8               	bcf	status,0,c
  9908  00405A  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  9909  00405C  3382               	rrcf	___awmod@divisor& (0+255),f,b
  9910                           
  9911                           ; BSR set to: 0
  9912  00405E  0100               	movlb	0	; () banked
  9913  004060  2F84               	decfsz	___awmod@counter& (0+255),f,b
  9914  004062  D7E7               	goto	l7974
  9915  004064                     l7982:
  9916                           
  9917                           ; BSR set to: 0
  9918  004064  0100               	movlb	0	; () banked
  9919  004066  5185               	movf	___awmod@sign& (0+255),w,b
  9920  004068  0100               	movlb	0	; () banked
  9921  00406A  B4D8               	btfsc	status,2,c
  9922  00406C  D005               	goto	l7986
  9923                           
  9924                           ; BSR set to: 0
  9925  00406E  0100               	movlb	0	; () banked
  9926  004070  6D80               	negf	___awmod@dividend& (0+255),b
  9927  004072  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9928  004074  B0D8               	btfsc	status,0,c
  9929  004076  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9930  004078                     l7986:
  9931                           
  9932                           ; BSR set to: 0
  9933  004078  C080  F080         	movff	___awmod@dividend,?___awmod
  9934  00407C  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  9935  004080  0012               	return	
  9936  004082                     __end_of___awmod:
  9937                           	opt stack 0
  9938                           tblptru	equ	0xFF8
  9939                           tblptrh	equ	0xFF7
  9940                           tblptrl	equ	0xFF6
  9941                           tablat	equ	0xFF5
  9942                           prodh	equ	0xFF4
  9943                           prodl	equ	0xFF3
  9944                           intcon	equ	0xFF2
  9945                           intcon2	equ	0xFF1
  9946                           intcon3	equ	0xFF0
  9947                           postinc0	equ	0xFEE
  9948                           wreg	equ	0xFE8
  9949                           postdec1	equ	0xFE5
  9950                           fsr1l	equ	0xFE1
  9951                           indf2	equ	0xFDF
  9952                           postinc2	equ	0xFDE
  9953                           postdec2	equ	0xFDD
  9954                           fsr2h	equ	0xFDA
  9955                           fsr2l	equ	0xFD9
  9956                           status	equ	0xFD8
  9957                           
  9958 ;; *************** function ___awdiv *****************
  9959 ;; Defined at:
  9960 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  9961 ;; Parameters:    Size  Location     Type
  9962 ;;  dividend        2    6[BANK0 ] int 
  9963 ;;  divisor         2    8[BANK0 ] int 
  9964 ;; Auto vars:     Size  Location     Type
  9965 ;;  quotient        2   12[BANK0 ] int 
  9966 ;;  sign            1   11[BANK0 ] unsigned char 
  9967 ;;  counter         1   10[BANK0 ] unsigned char 
  9968 ;; Return value:  Size  Location     Type
  9969 ;;                  2    6[BANK0 ] int 
  9970 ;; Registers used:
  9971 ;;		wreg, status,2, status,0
  9972 ;; Tracked objects:
  9973 ;;		On entry : 0/0
  9974 ;;		On exit  : 0/0
  9975 ;;		Unchanged: 0/0
  9976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9977 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9978 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9980 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9981 ;;Total ram usage:        8 bytes
  9982 ;; Hardware stack levels used:    1
  9983 ;; Hardware stack levels required when called:    7
  9984 ;; This function calls:
  9985 ;;		Nothing
  9986 ;; This function is called by:
  9987 ;;		_UI
  9988 ;; This function uses a non-reentrant model
  9989 ;;
  9990                           
  9991                           	psect	text35
  9992  003DBC                     __ptext35:
  9993                           	opt stack 0
  9994  003DBC                     ___awdiv:
  9995                           	opt stack 22
  9996                           
  9997                           ; BSR set to: 0
  9998                           ;incstack = 0
  9999  003DBC  0E00               	movlw	0
 10000  003DBE  0100               	movlb	0	; () banked
 10001  003DC0  6F8B               	movwf	___awdiv@sign& (0+255),b
 10002                           
 10003                           ; BSR set to: 0
 10004  003DC2  0100               	movlb	0	; () banked
 10005  003DC4  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10006  003DC6  D008               	goto	l7918
 10007                           
 10008                           ; BSR set to: 0
 10009  003DC8  0100               	movlb	0	; () banked
 10010  003DCA  6D88               	negf	___awdiv@divisor& (0+255),b
 10011  003DCC  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
 10012  003DCE  B0D8               	btfsc	status,0,c
 10013  003DD0  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
 10014                           
 10015                           ; BSR set to: 0
 10016  003DD2  0E01               	movlw	1
 10017  003DD4  0100               	movlb	0	; () banked
 10018  003DD6  6F8B               	movwf	___awdiv@sign& (0+255),b
 10019  003DD8                     l7918:
 10020                           
 10021                           ; BSR set to: 0
 10022  003DD8  0100               	movlb	0	; () banked
 10023  003DDA  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 10024  003DDC  D008               	goto	l7924
 10025                           
 10026                           ; BSR set to: 0
 10027  003DDE  0100               	movlb	0	; () banked
 10028  003DE0  6D86               	negf	___awdiv@dividend& (0+255),b
 10029  003DE2  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
 10030  003DE4  B0D8               	btfsc	status,0,c
 10031  003DE6  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
 10032                           
 10033                           ; BSR set to: 0
 10034  003DE8  0E01               	movlw	1
 10035  003DEA  0100               	movlb	0	; () banked
 10036  003DEC  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
 10037  003DEE                     l7924:
 10038                           
 10039                           ; BSR set to: 0
 10040  003DEE  0E00               	movlw	0
 10041  003DF0  0100               	movlb	0	; () banked
 10042  003DF2  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
 10043  003DF4  0E00               	movlw	0
 10044  003DF6  6F8C               	movwf	___awdiv@quotient& (0+255),b
 10045                           
 10046                           ; BSR set to: 0
 10047  003DF8  0100               	movlb	0	; () banked
 10048  003DFA  5188               	movf	___awdiv@divisor& (0+255),w,b
 10049  003DFC  0100               	movlb	0	; () banked
 10050  003DFE  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 10051  003E00  B4D8               	btfsc	status,2,c
 10052  003E02  D02C               	goto	l7946
 10053                           
 10054                           ; BSR set to: 0
 10055  003E04  0E01               	movlw	1
 10056  003E06  0100               	movlb	0	; () banked
 10057  003E08  6F8A               	movwf	___awdiv@counter& (0+255),b
 10058  003E0A  D006               	goto	l7932
 10059  003E0C                     l7930:
 10060                           
 10061                           ; BSR set to: 0
 10062  003E0C  0100               	movlb	0	; () banked
 10063  003E0E  90D8               	bcf	status,0,c
 10064  003E10  3788               	rlcf	___awdiv@divisor& (0+255),f,b
 10065  003E12  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 10066  003E14  0100               	movlb	0	; () banked
 10067  003E16  2B8A               	incf	___awdiv@counter& (0+255),f,b
 10068  003E18                     l7932:
 10069                           
 10070                           ; BSR set to: 0
 10071  003E18  0100               	movlb	0	; () banked
 10072  003E1A  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10073  003E1C  D7F7               	goto	l7930
 10074  003E1E                     l7934:
 10075                           
 10076                           ; BSR set to: 0
 10077  003E1E  0100               	movlb	0	; () banked
 10078  003E20  90D8               	bcf	status,0,c
 10079  003E22  378C               	rlcf	___awdiv@quotient& (0+255),f,b
 10080  003E24  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 10081                           
 10082                           ; BSR set to: 0
 10083  003E26  0100               	movlb	0	; () banked
 10084  003E28  5188               	movf	___awdiv@divisor& (0+255),w,b
 10085  003E2A  0100               	movlb	0	; () banked
 10086  003E2C  5D86               	subwf	___awdiv@dividend& (0+255),w,b
 10087  003E2E  0100               	movlb	0	; () banked
 10088  003E30  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10089  003E32  0100               	movlb	0	; () banked
 10090  003E34  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 10091  003E36  A0D8               	btfss	status,0,c
 10092  003E38  D00A               	goto	l7942
 10093                           
 10094                           ; BSR set to: 0
 10095  003E3A  0100               	movlb	0	; () banked
 10096  003E3C  5188               	movf	___awdiv@divisor& (0+255),w,b
 10097  003E3E  0100               	movlb	0	; () banked
 10098  003E40  5F86               	subwf	___awdiv@dividend& (0+255),f,b
 10099  003E42  0100               	movlb	0	; () banked
 10100  003E44  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10101  003E46  0100               	movlb	0	; () banked
 10102  003E48  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 10103                           
 10104                           ; BSR set to: 0
 10105  003E4A  0100               	movlb	0	; () banked
 10106  003E4C  818C               	bsf	___awdiv@quotient& (0+255),0,b
 10107  003E4E                     l7942:
 10108                           
 10109                           ; BSR set to: 0
 10110  003E4E  0100               	movlb	0	; () banked
 10111  003E50  90D8               	bcf	status,0,c
 10112  003E52  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 10113  003E54  3388               	rrcf	___awdiv@divisor& (0+255),f,b
 10114                           
 10115                           ; BSR set to: 0
 10116  003E56  0100               	movlb	0	; () banked
 10117  003E58  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
 10118  003E5A  D7E1               	goto	l7934
 10119  003E5C                     l7946:
 10120                           
 10121                           ; BSR set to: 0
 10122  003E5C  0100               	movlb	0	; () banked
 10123  003E5E  518B               	movf	___awdiv@sign& (0+255),w,b
 10124  003E60  0100               	movlb	0	; () banked
 10125  003E62  B4D8               	btfsc	status,2,c
 10126  003E64  D005               	goto	l7950
 10127                           
 10128                           ; BSR set to: 0
 10129  003E66  0100               	movlb	0	; () banked
 10130  003E68  6D8C               	negf	___awdiv@quotient& (0+255),b
 10131  003E6A  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 10132  003E6C  B0D8               	btfsc	status,0,c
 10133  003E6E  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 10134  003E70                     l7950:
 10135                           
 10136                           ; BSR set to: 0
 10137  003E70  C08C  F086         	movff	___awdiv@quotient,?___awdiv
 10138  003E74  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
 10139  003E78  0012               	return	
 10140  003E7A                     __end_of___awdiv:
 10141                           	opt stack 0
 10142                           tblptru	equ	0xFF8
 10143                           tblptrh	equ	0xFF7
 10144                           tblptrl	equ	0xFF6
 10145                           tablat	equ	0xFF5
 10146                           prodh	equ	0xFF4
 10147                           prodl	equ	0xFF3
 10148                           intcon	equ	0xFF2
 10149                           intcon2	equ	0xFF1
 10150                           intcon3	equ	0xFF0
 10151                           postinc0	equ	0xFEE
 10152                           wreg	equ	0xFE8
 10153                           postdec1	equ	0xFE5
 10154                           fsr1l	equ	0xFE1
 10155                           indf2	equ	0xFDF
 10156                           postinc2	equ	0xFDE
 10157                           postdec2	equ	0xFDD
 10158                           fsr2h	equ	0xFDA
 10159                           fsr2l	equ	0xFD9
 10160                           status	equ	0xFD8
 10161                           
 10162 ;; *************** function _Test *****************
 10163 ;; Defined at:
 10164 ;;		line 30 in file "Test.c"
 10165 ;; Parameters:    Size  Location     Type
 10166 ;;		None
 10167 ;; Auto vars:     Size  Location     Type
 10168 ;;		None
 10169 ;; Return value:  Size  Location     Type
 10170 ;;                  1    wreg      void 
 10171 ;; Registers used:
 10172 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10173 ;; Tracked objects:
 10174 ;;		On entry : 0/0
 10175 ;;		On exit  : 0/0
 10176 ;;		Unchanged: 0/0
 10177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10180 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10181 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10182 ;;Total ram usage:        2 bytes
 10183 ;; Hardware stack levels used:    1
 10184 ;; Hardware stack levels required when called:   11
 10185 ;; This function calls:
 10186 ;;		_BlockerTest
 10187 ;;		_BothServos
 10188 ;;		_EEPROMTest
 10189 ;;		_PortTestA5
 10190 ;;		_PortTests
 10191 ;;		_PusherTest
 10192 ;;		_SpeedTest
 10193 ;;		_actuatorTest
 10194 ;;		_algorithmTest
 10195 ;;		_lcdInst
 10196 ;;		_printf
 10197 ;;		_sensorTest
 10198 ;; This function is called by:
 10199 ;;		_main
 10200 ;; This function uses a non-reentrant model
 10201 ;;
 10202                           
 10203                           	psect	text36
 10204  003A2E                     __ptext36:
 10205                           	opt stack 0
 10206  003A2E                     _Test:
 10207                           	opt stack 19
 10208  003A2E                     
 10209                           ;Test.c: 33: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10210  003A2E  0E01               	movlw	1
 10211  003A30  EC6E  F027         	call	_lcdInst
 10212  003A34  0E68               	movlw	104
 10213  003A36  0100               	movlb	0	; () banked
 10214  003A38  6FC6               	movwf	??_Test& (0+255),b
 10215  003A3A  0EE4               	movlw	228
 10216  003A3C                     u8667:
 10217  003A3C  2EE8               	decfsz	wreg,f,c
 10218  003A3E  D7FE               	bra	u8667
 10219  003A40  2FC6               	decfsz	??_Test& (0+255),f,b
 10220  003A42  D7FC               	bra	u8667
 10221  003A44  F000               	nop	
 10222  003A46  0E80               	movlw	128
 10223  003A48  EC6E  F027         	call	_lcdInst
 10224                           
 10225                           ;Test.c: 34: printf("2.SNR|4.HI|5.MED");
 10226  003A4C  0E92               	movlw	low STR_68
 10227  003A4E  0100               	movlb	0	; () banked
 10228  003A50  6F8E               	movwf	printf@f& (0+255),b
 10229  003A52  0EFC               	movlw	high STR_68
 10230  003A54  0100               	movlb	0	; () banked
 10231  003A56  6F8F               	movwf	(printf@f+1)& (0+255),b
 10232  003A58  ECB8  F008         	call	_printf	;wreg free
 10233                           
 10234                           ;Test.c: 35: lcdInst(0b11000000);;
 10235  003A5C  0EC0               	movlw	192
 10236  003A5E  EC6E  F027         	call	_lcdInst
 10237                           
 10238                           ;Test.c: 36: printf("B.PSH|8.SV|9.BLK");
 10239  003A62  0EA3               	movlw	low STR_69
 10240  003A64  0100               	movlb	0	; () banked
 10241  003A66  6F8E               	movwf	printf@f& (0+255),b
 10242  003A68  0EFC               	movlw	high STR_69
 10243  003A6A  0100               	movlb	0	; () banked
 10244  003A6C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10245  003A6E  ECB8  F008         	call	_printf	;wreg free
 10246                           
 10247                           ;Test.c: 37: _delay((unsigned long)((100)*(32000000/4000.0)));
 10248  003A72  0E05               	movlw	5
 10249  003A74  0100               	movlb	0	; () banked
 10250  003A76  6FC7               	movwf	(??_Test+1)& (0+255),b
 10251  003A78  0E0F               	movlw	15
 10252  003A7A  0100               	movlb	0	; () banked
 10253  003A7C  6FC6               	movwf	??_Test& (0+255),b
 10254  003A7E  0EF1               	movlw	241
 10255  003A80                     u8677:
 10256  003A80  2EE8               	decfsz	wreg,f,c
 10257  003A82  D7FE               	bra	u8677
 10258  003A84  2FC6               	decfsz	??_Test& (0+255),f,b
 10259  003A86  D7FC               	bra	u8677
 10260  003A88  2FC7               	decfsz	(??_Test+1)& (0+255),f,b
 10261  003A8A  D7FA               	bra	u8677
 10262  003A8C                     l1088:
 10263  003A8C  A281               	btfss	3969,1,c	;volatile
 10264  003A8E  D7FE               	goto	l1088
 10265                           
 10266                           ;Test.c: 39: var = PORTB >> 4;
 10267  003A90  CF81 F0C6          	movff	3969,??_Test	;volatile
 10268  003A94  0100               	movlb	0	; () banked
 10269  003A96  3BC6               	swapf	??_Test& (0+255),f,b
 10270  003A98  0E0F               	movlw	15
 10271  003A9A  17C6               	andwf	??_Test& (0+255),f,b
 10272  003A9C  0100               	movlb	0	; () banked
 10273  003A9E  51C6               	movf	??_Test& (0+255),w,b
 10274  003AA0  0100               	movlb	0	; () banked
 10275  003AA2  6FFA               	movwf	_var& (0+255),b
 10276  003AA4  6BFB               	clrf	(_var+1)& (0+255),b
 10277                           
 10278                           ; BSR set to: 0
 10279                           ;Test.c: 40: var++;
 10280  003AA6  0100               	movlb	0	; () banked
 10281  003AA8  4BFA               	infsnz	_var& (0+255),f,b
 10282  003AAA  2BFB               	incf	(_var+1)& (0+255),f,b
 10283  003AAC                     l1091:
 10284  003AAC  A281               	btfss	3969,1,c	;volatile
 10285  003AAE  D01F               	goto	l8690
 10286  003AB0  D7FD               	goto	l1091
 10287  003AB2                     l8668:
 10288                           
 10289                           ;Test.c: 44: algorithmTest();
 10290  003AB2  EC13  F01E         	call	_algorithmTest	;wreg free
 10291                           
 10292                           ;Test.c: 45: break;
 10293  003AB6  D7BB               	goto	l8650
 10294  003AB8                     l8670:
 10295                           
 10296                           ;Test.c: 47: sensorTest();
 10297  003AB8  ECF3  F00F         	call	_sensorTest	;wreg free
 10298                           
 10299                           ;Test.c: 48: break;
 10300  003ABC  D7B8               	goto	l8650
 10301  003ABE                     l8672:
 10302                           
 10303                           ;Test.c: 50: actuatorTest();
 10304  003ABE  EC09  F000         	call	_actuatorTest	;wreg free
 10305                           
 10306                           ;Test.c: 51: break;
 10307  003AC2  D7B5               	goto	l8650
 10308  003AC4                     l8674:
 10309                           
 10310                           ;Test.c: 53: PortTestA5();
 10311  003AC4  EC3A  F023         	call	_PortTestA5	;wreg free
 10312                           
 10313                           ;Test.c: 54: break;
 10314  003AC8  D7B2               	goto	l8650
 10315  003ACA                     l8676:
 10316                           
 10317                           ;Test.c: 57: SpeedTest();
 10318  003ACA  ECCA  F020         	call	_SpeedTest	;wreg free
 10319                           
 10320                           ;Test.c: 58: break;
 10321  003ACE  D7AF               	goto	l8650
 10322  003AD0                     l8678:
 10323                           
 10324                           ;Test.c: 60: EEPROMTest();
 10325  003AD0  ECA0  F027         	call	_EEPROMTest	;wreg free
 10326                           
 10327                           ;Test.c: 61: break;
 10328  003AD4  D7AC               	goto	l8650
 10329  003AD6                     l8680:
 10330                           
 10331                           ;Test.c: 63: PusherTest();
 10332  003AD6  EC37  F014         	call	_PusherTest	;wreg free
 10333                           
 10334                           ;Test.c: 64: break;
 10335  003ADA  D7A9               	goto	l8650
 10336  003ADC                     l8682:
 10337                           
 10338                           ;Test.c: 66: PortTests();
 10339  003ADC  EC0C  F021         	call	_PortTests	;wreg free
 10340                           
 10341                           ;Test.c: 67: break;
 10342  003AE0  D7A6               	goto	l8650
 10343  003AE2                     l8684:
 10344                           
 10345                           ;Test.c: 69: BothServos();
 10346  003AE2  ECD4  F00A         	call	_BothServos	;wreg free
 10347                           
 10348                           ;Test.c: 70: break;
 10349  003AE6  D7A3               	goto	l8650
 10350  003AE8                     l8686:
 10351                           
 10352                           ;Test.c: 72: BlockerTest();
 10353  003AE8  EC63  F01A         	call	_BlockerTest	;wreg free
 10354                           
 10355                           ;Test.c: 76: }
 10356                           
 10357                           ;Test.c: 75: break;
 10358                           
 10359                           ;Test.c: 74: default:
 10360                           
 10361                           ;Test.c: 73: break;
 10362  003AEC  D7A0               	goto	l8650
 10363  003AEE                     l8690:
 10364  003AEE  C0FA  F0C6         	movff	_var,??_Test
 10365  003AF2  C0FB  F0C7         	movff	_var+1,??_Test+1
 10366                           
 10367                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10368                           ; Switch size 1, requested type "space"
 10369                           ; Number of cases is 1, Range of values is 0 to 0
 10370                           ; switch strategies available:
 10371                           ; Name         Instructions Cycles
 10372                           ; simple_byte            4     3 (average)
 10373                           ;	Chosen strategy is simple_byte
 10374  003AF6  0100               	movlb	0	; () banked
 10375  003AF8  51C7               	movf	(??_Test+1)& (0+255),w,b
 10376  003AFA  0A00               	xorlw	0	; case 0
 10377  003AFC  A4D8               	btfss	status,2,c
 10378  003AFE  D797               	goto	l8650
 10379                           
 10380                           ; BSR set to: 0
 10381                           ; Switch size 1, requested type "space"
 10382                           ; Number of cases is 10, Range of values is 1 to 11
 10383                           ; switch strategies available:
 10384                           ; Name         Instructions Cycles
 10385                           ; simple_byte           31    16 (average)
 10386                           ;	Chosen strategy is simple_byte
 10387  003B00  0100               	movlb	0	; () banked
 10388  003B02  51C6               	movf	??_Test& (0+255),w,b
 10389  003B04  0A01               	xorlw	1	; case 1
 10390  003B06  B4D8               	btfsc	status,2,c
 10391  003B08  D7D4               	goto	l8668
 10392  003B0A  0A03               	xorlw	3	; case 2
 10393  003B0C  B4D8               	btfsc	status,2,c
 10394  003B0E  D7D4               	goto	l8670
 10395  003B10  0A01               	xorlw	1	; case 3
 10396  003B12  B4D8               	btfsc	status,2,c
 10397  003B14  D7D4               	goto	l8672
 10398  003B16  0A06               	xorlw	6	; case 5
 10399  003B18  B4D8               	btfsc	status,2,c
 10400  003B1A  D7D4               	goto	l8674
 10401  003B1C  0A03               	xorlw	3	; case 6
 10402  003B1E  B4D8               	btfsc	status,2,c
 10403  003B20  D7D4               	goto	l8676
 10404  003B22  0A01               	xorlw	1	; case 7
 10405  003B24  B4D8               	btfsc	status,2,c
 10406  003B26  D7D4               	goto	l8678
 10407  003B28  0A0F               	xorlw	15	; case 8
 10408  003B2A  B4D8               	btfsc	status,2,c
 10409  003B2C  D7D4               	goto	l8680
 10410  003B2E  0A01               	xorlw	1	; case 9
 10411  003B30  B4D8               	btfsc	status,2,c
 10412  003B32  D7D4               	goto	l8682
 10413  003B34  0A03               	xorlw	3	; case 10
 10414  003B36  B4D8               	btfsc	status,2,c
 10415  003B38  D7D4               	goto	l8684
 10416  003B3A  0A01               	xorlw	1	; case 11
 10417  003B3C  B4D8               	btfsc	status,2,c
 10418  003B3E  D7D4               	goto	l8686
 10419                           
 10420                           ; BSR set to: 0
 10421                           
 10422                           ; BSR set to: 0
 10423  003B40  D776               	goto	l8650
 10424  003B42                     __end_of_Test:
 10425                           	opt stack 0
 10426                           tblptru	equ	0xFF8
 10427                           tblptrh	equ	0xFF7
 10428                           tblptrl	equ	0xFF6
 10429                           tablat	equ	0xFF5
 10430                           prodh	equ	0xFF4
 10431                           prodl	equ	0xFF3
 10432                           intcon	equ	0xFF2
 10433                           intcon2	equ	0xFF1
 10434                           intcon3	equ	0xFF0
 10435                           postinc0	equ	0xFEE
 10436                           wreg	equ	0xFE8
 10437                           postdec1	equ	0xFE5
 10438                           fsr1l	equ	0xFE1
 10439                           indf2	equ	0xFDF
 10440                           postinc2	equ	0xFDE
 10441                           postdec2	equ	0xFDD
 10442                           fsr2h	equ	0xFDA
 10443                           fsr2l	equ	0xFD9
 10444                           status	equ	0xFD8
 10445                           
 10446 ;; *************** function _sensorTest *****************
 10447 ;; Defined at:
 10448 ;;		line 124 in file "Test.c"
 10449 ;; Parameters:    Size  Location     Type
 10450 ;;		None
 10451 ;; Auto vars:     Size  Location     Type
 10452 ;;  res             2   45[BANK0 ] int 
 10453 ;; Return value:  Size  Location     Type
 10454 ;;                  1    wreg      void 
 10455 ;; Registers used:
 10456 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10457 ;; Tracked objects:
 10458 ;;		On entry : 0/0
 10459 ;;		On exit  : 0/0
 10460 ;;		Unchanged: 0/0
 10461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10463 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10464 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10465 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10466 ;;Total ram usage:        4 bytes
 10467 ;; Hardware stack levels used:    1
 10468 ;; Hardware stack levels required when called:   10
 10469 ;; This function calls:
 10470 ;;		_lcdInst
 10471 ;;		_printf
 10472 ;;		_readADC
 10473 ;;		_readMAG
 10474 ;; This function is called by:
 10475 ;;		_Test
 10476 ;; This function uses a non-reentrant model
 10477 ;;
 10478                           
 10479                           	psect	text37
 10480  001FE6                     __ptext37:
 10481                           	opt stack 0
 10482  001FE6                     _sensorTest:
 10483                           	opt stack 19
 10484                           
 10485                           ;Test.c: 126: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10486                           
 10487                           ; BSR set to: 0
 10488                           ;incstack = 0
 10489  001FE6  0E01               	movlw	1
 10490  001FE8  EC6E  F027         	call	_lcdInst
 10491  001FEC  0E68               	movlw	104
 10492  001FEE  0100               	movlb	0	; () banked
 10493  001FF0  6FAB               	movwf	??_sensorTest& (0+255),b
 10494  001FF2  0EE4               	movlw	228
 10495  001FF4                     u8687:
 10496  001FF4  2EE8               	decfsz	wreg,f,c
 10497  001FF6  D7FE               	bra	u8687
 10498  001FF8  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10499  001FFA  D7FC               	bra	u8687
 10500  001FFC  F000               	nop	
 10501  001FFE  0E80               	movlw	128
 10502  002000  EC6E  F027         	call	_lcdInst
 10503                           
 10504                           ;Test.c: 127: printf("SENSORS");
 10505  002004  0EAE               	movlw	low STR_77
 10506  002006  0100               	movlb	0	; () banked
 10507  002008  6F8E               	movwf	printf@f& (0+255),b
 10508  00200A  0EFF               	movlw	high STR_77
 10509  00200C  0100               	movlb	0	; () banked
 10510  00200E  6F8F               	movwf	(printf@f+1)& (0+255),b
 10511  002010  ECB8  F008         	call	_printf	;wreg free
 10512                           
 10513                           ;Test.c: 128: lcdInst(0b11000000);;
 10514  002014  0EC0               	movlw	192
 10515  002016  EC6E  F027         	call	_lcdInst
 10516                           
 10517                           ;Test.c: 129: printf("PUSH TO START");
 10518  00201A  0E0B               	movlw	low STR_71
 10519  00201C  0100               	movlb	0	; () banked
 10520  00201E  6F8E               	movwf	printf@f& (0+255),b
 10521  002020  0EFF               	movlw	high STR_71
 10522  002022  0100               	movlb	0	; () banked
 10523  002024  6F8F               	movwf	(printf@f+1)& (0+255),b
 10524  002026  ECB8  F008         	call	_printf	;wreg free
 10525                           
 10526                           ;Test.c: 130: _delay((unsigned long)((100)*(32000000/4000.0)));
 10527  00202A  0E05               	movlw	5
 10528  00202C  0100               	movlb	0	; () banked
 10529  00202E  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10530  002030  0E0F               	movlw	15
 10531  002032  0100               	movlb	0	; () banked
 10532  002034  6FAB               	movwf	??_sensorTest& (0+255),b
 10533  002036  0EF1               	movlw	241
 10534  002038                     u8697:
 10535  002038  2EE8               	decfsz	wreg,f,c
 10536  00203A  D7FE               	bra	u8697
 10537  00203C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10538  00203E  D7FC               	bra	u8697
 10539  002040  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10540  002042  D7FA               	bra	u8697
 10541  002044                     l1121:
 10542  002044  A281               	btfss	3969,1,c	;volatile
 10543  002046  D7FE               	goto	l1121
 10544  002048                     l1124:
 10545  002048  B281               	btfsc	3969,1,c	;volatile
 10546  00204A  D7FE               	goto	l1124
 10547                           
 10548                           ;Test.c: 133: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10549  00204C  0E01               	movlw	1
 10550  00204E  EC6E  F027         	call	_lcdInst
 10551  002052  0E68               	movlw	104
 10552  002054  0100               	movlb	0	; () banked
 10553  002056  6FAB               	movwf	??_sensorTest& (0+255),b
 10554  002058  0EE4               	movlw	228
 10555  00205A                     u8707:
 10556  00205A  2EE8               	decfsz	wreg,f,c
 10557  00205C  D7FE               	bra	u8707
 10558  00205E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10559  002060  D7FC               	bra	u8707
 10560  002062  F000               	nop	
 10561  002064  0E80               	movlw	128
 10562  002066  EC6E  F027         	call	_lcdInst
 10563                           
 10564                           ;Test.c: 138: printf("TST: IR SNSR");
 10565  00206A  0E35               	movlw	low STR_79
 10566  00206C  0100               	movlb	0	; () banked
 10567  00206E  6F8E               	movwf	printf@f& (0+255),b
 10568  002070  0EFF               	movlw	high STR_79
 10569  002072  0100               	movlb	0	; () banked
 10570  002074  6F8F               	movwf	(printf@f+1)& (0+255),b
 10571  002076  ECB8  F008         	call	_printf	;wreg free
 10572                           
 10573                           ;Test.c: 139: _delay((unsigned long)((100)*(32000000/4000.0)));
 10574  00207A  0E05               	movlw	5
 10575  00207C  0100               	movlb	0	; () banked
 10576  00207E  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10577  002080  0E0F               	movlw	15
 10578  002082  0100               	movlb	0	; () banked
 10579  002084  6FAB               	movwf	??_sensorTest& (0+255),b
 10580  002086  0EF1               	movlw	241
 10581  002088                     u8717:
 10582  002088  2EE8               	decfsz	wreg,f,c
 10583  00208A  D7FE               	bra	u8717
 10584  00208C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10585  00208E  D7FC               	bra	u8717
 10586  002090  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10587  002092  D7FA               	bra	u8717
 10588                           
 10589                           ;Test.c: 140: LATCbits.LATC5 = 1;
 10590  002094  8A8B               	bsf	3979,5,c	;volatile
 10591                           
 10592                           ;Test.c: 142: while(PORTBbits.RB1 == 0){
 10593  002096  D05C               	goto	l7136
 10594  002098                     l7118:
 10595                           
 10596                           ;Test.c: 143: readADC(0);
 10597  002098  0E00               	movlw	0
 10598  00209A  EC73  F026         	call	_readADC
 10599                           
 10600                           ;Test.c: 144: int res = ADRESH<<8 | ADRESL;
 10601  00209E  50C3               	movf	4035,w,c	;volatile
 10602  0020A0  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 10603  0020A4  0100               	movlb	0	; () banked
 10604  0020A6  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 10605  0020A8  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 10606  0020AC  0100               	movlb	0	; () banked
 10607  0020AE  6BAB               	clrf	??_sensorTest& (0+255),b
 10608  0020B0  0100               	movlb	0	; () banked
 10609  0020B2  11AB               	iorwf	??_sensorTest& (0+255),w,b
 10610  0020B4  0100               	movlb	0	; () banked
 10611  0020B6  6FAD               	movwf	sensorTest@res& (0+255),b
 10612  0020B8  0100               	movlb	0	; () banked
 10613  0020BA  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 10614  0020BC  0100               	movlb	0	; () banked
 10615  0020BE  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
 10616                           
 10617                           ; BSR set to: 0
 10618                           ;Test.c: 145: IR_signal = (res > 800) ? 1 : 0;
 10619  0020C0  0100               	movlb	0	; () banked
 10620  0020C2  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
 10621  0020C4  D00A               	goto	u5780
 10622  0020C6  0E21               	movlw	33
 10623  0020C8  0100               	movlb	0	; () banked
 10624  0020CA  5DAD               	subwf	sensorTest@res& (0+255),w,b
 10625  0020CC  0E03               	movlw	3
 10626  0020CE  0100               	movlb	0	; () banked
 10627  0020D0  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
 10628  0020D2  A0D8               	btfss	status,0,c
 10629  0020D4  D002               	goto	u5780
 10630  0020D6  0E01               	movlw	1
 10631  0020D8  D001               	goto	u5790
 10632  0020DA                     u5780:
 10633  0020DA  0E00               	movlw	0
 10634  0020DC                     u5790:
 10635  0020DC  0100               	movlb	0	; () banked
 10636  0020DE  6FDE               	movwf	_IR_signal& (0+255),b
 10637  0020E0  6BDF               	clrf	(_IR_signal+1)& (0+255),b
 10638                           
 10639                           ;Test.c: 147: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10640  0020E2  0E01               	movlw	1
 10641  0020E4  EC6E  F027         	call	_lcdInst
 10642  0020E8  0E68               	movlw	104
 10643  0020EA  0100               	movlb	0	; () banked
 10644  0020EC  6FAB               	movwf	??_sensorTest& (0+255),b
 10645  0020EE  0EE4               	movlw	228
 10646  0020F0                     u8727:
 10647  0020F0  2EE8               	decfsz	wreg,f,c
 10648  0020F2  D7FE               	bra	u8727
 10649  0020F4  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10650  0020F6  D7FC               	bra	u8727
 10651  0020F8  F000               	nop	
 10652  0020FA  0E80               	movlw	128
 10653  0020FC  EC6E  F027         	call	_lcdInst
 10654                           
 10655                           ;Test.c: 148: printf("IR_signal: %d ", IR_signal);
 10656  002100  0E5A               	movlw	low STR_80
 10657  002102  0100               	movlb	0	; () banked
 10658  002104  6F8E               	movwf	printf@f& (0+255),b
 10659  002106  0EFE               	movlw	high STR_80
 10660  002108  0100               	movlb	0	; () banked
 10661  00210A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10662  00210C  C0DE  F090         	movff	_IR_signal,?_printf+2
 10663  002110  C0DF  F091         	movff	_IR_signal+1,?_printf+3
 10664  002114  ECB8  F008         	call	_printf	;wreg free
 10665                           
 10666                           ;Test.c: 149: lcdInst(0b11000000);;
 10667  002118  0EC0               	movlw	192
 10668  00211A  EC6E  F027         	call	_lcdInst
 10669                           
 10670                           ;Test.c: 150: printf("%d", res);
 10671  00211E  0E16               	movlw	low (STR_27+14)
 10672  002120  0100               	movlb	0	; () banked
 10673  002122  6F8E               	movwf	printf@f& (0+255),b
 10674  002124  0EFE               	movlw	high (STR_27+14)
 10675  002126  0100               	movlb	0	; () banked
 10676  002128  6F8F               	movwf	(printf@f+1)& (0+255),b
 10677  00212A  C0AD  F090         	movff	sensorTest@res,?_printf+2
 10678  00212E  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
 10679  002132  ECB8  F008         	call	_printf	;wreg free
 10680                           
 10681                           ;Test.c: 151: _delay((unsigned long)((100)*(32000000/4000.0)));
 10682  002136  0E05               	movlw	5
 10683  002138  0100               	movlb	0	; () banked
 10684  00213A  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10685  00213C  0E0F               	movlw	15
 10686  00213E  0100               	movlb	0	; () banked
 10687  002140  6FAB               	movwf	??_sensorTest& (0+255),b
 10688  002142  0EF1               	movlw	241
 10689  002144                     u8737:
 10690  002144  2EE8               	decfsz	wreg,f,c
 10691  002146  D7FE               	bra	u8737
 10692  002148  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10693  00214A  D7FC               	bra	u8737
 10694  00214C  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10695  00214E  D7FA               	bra	u8737
 10696  002150                     l7136:
 10697  002150  A281               	btfss	3969,1,c	;volatile
 10698  002152  D7A2               	goto	l7118
 10699                           
 10700                           ;Test.c: 152: }
 10701                           ;Test.c: 153: LATCbits.LATC5 = 0;
 10702  002154  9A8B               	bcf	3979,5,c	;volatile
 10703                           
 10704                           ;Test.c: 161: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10705  002156  0E01               	movlw	1
 10706  002158  EC6E  F027         	call	_lcdInst
 10707  00215C  0E68               	movlw	104
 10708  00215E  0100               	movlb	0	; () banked
 10709  002160  6FAB               	movwf	??_sensorTest& (0+255),b
 10710  002162  0EE4               	movlw	228
 10711  002164                     u8747:
 10712  002164  2EE8               	decfsz	wreg,f,c
 10713  002166  D7FE               	bra	u8747
 10714  002168  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10715  00216A  D7FC               	bra	u8747
 10716  00216C  F000               	nop	
 10717  00216E  0E80               	movlw	128
 10718  002170  EC6E  F027         	call	_lcdInst
 10719                           
 10720                           ;Test.c: 162: printf("TST: MAGNETISM");
 10721  002174  0E87               	movlw	low STR_82
 10722  002176  0100               	movlb	0	; () banked
 10723  002178  6F8E               	movwf	printf@f& (0+255),b
 10724  00217A  0EFE               	movlw	high STR_82
 10725  00217C  0100               	movlb	0	; () banked
 10726  00217E  6F8F               	movwf	(printf@f+1)& (0+255),b
 10727  002180  ECB8  F008         	call	_printf	;wreg free
 10728                           
 10729                           ;Test.c: 163: _delay((unsigned long)((100)*(32000000/4000.0)));
 10730  002184  0E05               	movlw	5
 10731  002186  0100               	movlb	0	; () banked
 10732  002188  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10733  00218A  0E0F               	movlw	15
 10734  00218C  0100               	movlb	0	; () banked
 10735  00218E  6FAB               	movwf	??_sensorTest& (0+255),b
 10736  002190  0EF1               	movlw	241
 10737  002192                     u8757:
 10738  002192  2EE8               	decfsz	wreg,f,c
 10739  002194  D7FE               	bra	u8757
 10740  002196  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10741  002198  D7FC               	bra	u8757
 10742  00219A  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10743  00219C  D7FA               	bra	u8757
 10744                           
 10745                           ;Test.c: 164: while(PORTBbits.RB1 == 0){
 10746  00219E  D021               	goto	l7154
 10747  0021A0                     l7148:
 10748                           
 10749                           ;Test.c: 165: readMAG();
 10750  0021A0  EC36  F024         	call	_readMAG	;wreg free
 10751                           
 10752                           ;Test.c: 166: lcdInst(0b10000000);;
 10753  0021A4  0E80               	movlw	128
 10754  0021A6  EC6E  F027         	call	_lcdInst
 10755                           
 10756                           ;Test.c: 167: lcdInst(0b11000000);;
 10757  0021AA  0EC0               	movlw	192
 10758  0021AC  EC6E  F027         	call	_lcdInst
 10759                           
 10760                           ;Test.c: 168: printf("MAG_signal: %d ", MAG_signal);
 10761  0021B0  0E2A               	movlw	low STR_83
 10762  0021B2  0100               	movlb	0	; () banked
 10763  0021B4  6F8E               	movwf	printf@f& (0+255),b
 10764  0021B6  0EFE               	movlw	high STR_83
 10765  0021B8  0100               	movlb	0	; () banked
 10766  0021BA  6F8F               	movwf	(printf@f+1)& (0+255),b
 10767  0021BC  C0E0  F090         	movff	_MAG_signal,?_printf+2
 10768  0021C0  C0E1  F091         	movff	_MAG_signal+1,?_printf+3
 10769  0021C4  ECB8  F008         	call	_printf	;wreg free
 10770                           
 10771                           ;Test.c: 169: _delay((unsigned long)((100)*(32000000/4000.0)));
 10772  0021C8  0E05               	movlw	5
 10773  0021CA  0100               	movlb	0	; () banked
 10774  0021CC  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10775  0021CE  0E0F               	movlw	15
 10776  0021D0  0100               	movlb	0	; () banked
 10777  0021D2  6FAB               	movwf	??_sensorTest& (0+255),b
 10778  0021D4  0EF1               	movlw	241
 10779  0021D6                     u8767:
 10780  0021D6  2EE8               	decfsz	wreg,f,c
 10781  0021D8  D7FE               	bra	u8767
 10782  0021DA  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10783  0021DC  D7FC               	bra	u8767
 10784  0021DE  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10785  0021E0  D7FA               	bra	u8767
 10786  0021E2                     l7154:
 10787  0021E2  A281               	btfss	3969,1,c	;volatile
 10788  0021E4  D7DD               	goto	l7148
 10789                           
 10790                           ;Test.c: 170: }
 10791                           ;Test.c: 175: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10792  0021E6  0E01               	movlw	1
 10793  0021E8  EC6E  F027         	call	_lcdInst
 10794  0021EC  0E68               	movlw	104
 10795  0021EE  0100               	movlb	0	; () banked
 10796  0021F0  6FAB               	movwf	??_sensorTest& (0+255),b
 10797  0021F2  0EE4               	movlw	228
 10798  0021F4                     u8777:
 10799  0021F4  2EE8               	decfsz	wreg,f,c
 10800  0021F6  D7FE               	bra	u8777
 10801  0021F8  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10802  0021FA  D7FC               	bra	u8777
 10803  0021FC  F000               	nop	
 10804  0021FE  0E80               	movlw	128
 10805  002200  EC6E  F027         	call	_lcdInst
 10806                           
 10807                           ;Test.c: 176: printf("TST: COND");
 10808  002204  0E87               	movlw	low STR_84
 10809  002206  0100               	movlb	0	; () banked
 10810  002208  6F8E               	movwf	printf@f& (0+255),b
 10811  00220A  0EFF               	movlw	high STR_84
 10812  00220C  0100               	movlb	0	; () banked
 10813  00220E  6F8F               	movwf	(printf@f+1)& (0+255),b
 10814  002210  ECB8  F008         	call	_printf	;wreg free
 10815                           
 10816                           ;Test.c: 177: _delay((unsigned long)((100)*(32000000/4000.0)));
 10817  002214  0E05               	movlw	5
 10818  002216  0100               	movlb	0	; () banked
 10819  002218  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10820  00221A  0E0F               	movlw	15
 10821  00221C  0100               	movlb	0	; () banked
 10822  00221E  6FAB               	movwf	??_sensorTest& (0+255),b
 10823  002220  0EF1               	movlw	241
 10824  002222                     u8787:
 10825  002222  2EE8               	decfsz	wreg,f,c
 10826  002224  D7FE               	bra	u8787
 10827  002226  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10828  002228  D7FC               	bra	u8787
 10829  00222A  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10830  00222C  D7FA               	bra	u8787
 10831  00222E                     l7166:
 10832                           
 10833                           ;Test.c: 179: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10834  00222E  0E01               	movlw	1
 10835  002230  EC6E  F027         	call	_lcdInst
 10836  002234  0E68               	movlw	104
 10837  002236  0100               	movlb	0	; () banked
 10838  002238  6FAB               	movwf	??_sensorTest& (0+255),b
 10839  00223A  0EE4               	movlw	228
 10840  00223C                     u8797:
 10841  00223C  2EE8               	decfsz	wreg,f,c
 10842  00223E  D7FE               	bra	u8797
 10843  002240  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10844  002242  D7FC               	bra	u8797
 10845  002244  F000               	nop	
 10846  002246  0E80               	movlw	128
 10847  002248  EC6E  F027         	call	_lcdInst
 10848                           
 10849                           ;Test.c: 180: printf("TST: COND");
 10850  00224C  0E87               	movlw	low STR_84
 10851  00224E  0100               	movlb	0	; () banked
 10852  002250  6F8E               	movwf	printf@f& (0+255),b
 10853  002252  0EFF               	movlw	high STR_84
 10854  002254  0100               	movlb	0	; () banked
 10855  002256  6F8F               	movwf	(printf@f+1)& (0+255),b
 10856  002258  ECB8  F008         	call	_printf	;wreg free
 10857                           
 10858                           ;Test.c: 181: while(PORTBbits.RB1 == 0){
 10859  00225C  D01B               	goto	l7178
 10860  00225E                     l7174:
 10861                           
 10862                           ;Test.c: 185: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10863  00225E  0E80               	movlw	128
 10864  002260  EC6E  F027         	call	_lcdInst
 10865  002264  0EC0               	movlw	192
 10866  002266  EC6E  F027         	call	_lcdInst
 10867                           
 10868                           ;Test.c: 186: printf("COND: %d", PORTAbits.RA2);
 10869  00226A  0EA5               	movlw	low STR_86
 10870  00226C  0100               	movlb	0	; () banked
 10871  00226E  6F8E               	movwf	printf@f& (0+255),b
 10872  002270  0EFF               	movlw	high STR_86
 10873  002272  0100               	movlb	0	; () banked
 10874  002274  6F8F               	movwf	(printf@f+1)& (0+255),b
 10875  002276  A480               	btfss	3968,2,c	;volatile
 10876  002278  D004               	goto	u5820
 10877  00227A  0100               	movlb	0	; () banked
 10878  00227C  6BAB               	clrf	??_sensorTest& (0+255),b
 10879  00227E  2BAB               	incf	??_sensorTest& (0+255),f,b
 10880  002280  D002               	goto	u5828
 10881  002282                     u5820:
 10882  002282  0100               	movlb	0	; () banked
 10883  002284  6BAB               	clrf	??_sensorTest& (0+255),b
 10884  002286                     u5828:
 10885  002286  0100               	movlb	0	; () banked
 10886  002288  51AB               	movf	??_sensorTest& (0+255),w,b
 10887  00228A  0100               	movlb	0	; () banked
 10888  00228C  6F90               	movwf	(?_printf+2)& (0+255),b
 10889  00228E  6B91               	clrf	(?_printf+3)& (0+255),b
 10890  002290  ECB8  F008         	call	_printf	;wreg free
 10891  002294                     l7178:
 10892  002294  A281               	btfss	3969,1,c	;volatile
 10893  002296  D7E3               	goto	l7174
 10894                           
 10895                           ;Test.c: 187: }
 10896                           ;Test.c: 188: if(PORTB >> 4 == 0b1111){
 10897  002298  3881               	swapf	3969,w,c	;volatile
 10898  00229A  0B0F               	andlw	15
 10899  00229C  0A0F               	xorlw	15
 10900  00229E  B4D8               	btfsc	status,2,c
 10901  0022A0  0012               	return	
 10902                           
 10903                           ;Test.c: 191: else{
 10904                           ;Test.c: 192: LATAbits.LATA3 = 1;
 10905                           
 10906                           ;Test.c: 190: }
 10907                           
 10908                           ;Test.c: 189: break;
 10909  0022A2  8689               	bsf	3977,3,c	;volatile
 10910                           
 10911                           ;Test.c: 193: while(PORTBbits.RB1 == 1){
 10912  0022A4  D01B               	goto	l7190
 10913  0022A6                     l7186:
 10914                           
 10915                           ;Test.c: 195: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10916  0022A6  0E80               	movlw	128
 10917  0022A8  EC6E  F027         	call	_lcdInst
 10918  0022AC  0EC0               	movlw	192
 10919  0022AE  EC6E  F027         	call	_lcdInst
 10920                           
 10921                           ;Test.c: 196: printf("COND: %d", PORTAbits.RA2);
 10922  0022B2  0EA5               	movlw	low STR_86
 10923  0022B4  0100               	movlb	0	; () banked
 10924  0022B6  6F8E               	movwf	printf@f& (0+255),b
 10925  0022B8  0EFF               	movlw	high STR_86
 10926  0022BA  0100               	movlb	0	; () banked
 10927  0022BC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10928  0022BE  A480               	btfss	3968,2,c	;volatile
 10929  0022C0  D004               	goto	u5850
 10930  0022C2  0100               	movlb	0	; () banked
 10931  0022C4  6BAB               	clrf	??_sensorTest& (0+255),b
 10932  0022C6  2BAB               	incf	??_sensorTest& (0+255),f,b
 10933  0022C8  D002               	goto	u5858
 10934  0022CA                     u5850:
 10935  0022CA  0100               	movlb	0	; () banked
 10936  0022CC  6BAB               	clrf	??_sensorTest& (0+255),b
 10937  0022CE                     u5858:
 10938  0022CE  0100               	movlb	0	; () banked
 10939  0022D0  51AB               	movf	??_sensorTest& (0+255),w,b
 10940  0022D2  0100               	movlb	0	; () banked
 10941  0022D4  6F90               	movwf	(?_printf+2)& (0+255),b
 10942  0022D6  6B91               	clrf	(?_printf+3)& (0+255),b
 10943  0022D8  ECB8  F008         	call	_printf	;wreg free
 10944  0022DC                     l7190:
 10945  0022DC  B281               	btfsc	3969,1,c	;volatile
 10946  0022DE  D7E3               	goto	l7186
 10947                           
 10948                           ;Test.c: 197: }
 10949                           ;Test.c: 198: LATAbits.LATA3 = !1;
 10950  0022E0  9689               	bcf	3977,3,c	;volatile
 10951  0022E2  D7A5               	goto	l7166
 10952  0022E4                     __end_of_sensorTest:
 10953                           	opt stack 0
 10954                           tblptru	equ	0xFF8
 10955                           tblptrh	equ	0xFF7
 10956                           tblptrl	equ	0xFF6
 10957                           tablat	equ	0xFF5
 10958                           prodh	equ	0xFF4
 10959                           prodl	equ	0xFF3
 10960                           intcon	equ	0xFF2
 10961                           intcon2	equ	0xFF1
 10962                           intcon3	equ	0xFF0
 10963                           postinc0	equ	0xFEE
 10964                           wreg	equ	0xFE8
 10965                           postdec1	equ	0xFE5
 10966                           fsr1l	equ	0xFE1
 10967                           indf2	equ	0xFDF
 10968                           postinc2	equ	0xFDE
 10969                           postdec2	equ	0xFDD
 10970                           fsr2h	equ	0xFDA
 10971                           fsr2l	equ	0xFD9
 10972                           status	equ	0xFD8
 10973                           
 10974 ;; *************** function _readMAG *****************
 10975 ;; Defined at:
 10976 ;;		line 29 in file "ADCFunctionality.c"
 10977 ;; Parameters:    Size  Location     Type
 10978 ;;		None
 10979 ;; Auto vars:     Size  Location     Type
 10980 ;;  res             2    4[BANK0 ] int 
 10981 ;; Return value:  Size  Location     Type
 10982 ;;                  1    wreg      void 
 10983 ;; Registers used:
 10984 ;;		wreg, status,2, status,0, cstack
 10985 ;; Tracked objects:
 10986 ;;		On entry : 0/0
 10987 ;;		On exit  : 0/0
 10988 ;;		Unchanged: 0/0
 10989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10991 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10992 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10993 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10994 ;;Total ram usage:        4 bytes
 10995 ;; Hardware stack levels used:    1
 10996 ;; Hardware stack levels required when called:    8
 10997 ;; This function calls:
 10998 ;;		_readADC
 10999 ;; This function is called by:
 11000 ;;		_getMAG
 11001 ;;		_sensorTest
 11002 ;; This function uses a non-reentrant model
 11003 ;;
 11004                           
 11005                           	psect	text38
 11006  00486C                     __ptext38:
 11007                           	opt stack 0
 11008  00486C                     _readMAG:
 11009                           	opt stack 19
 11010                           
 11011                           ;ADCFunctionality.c: 30: readADC(1);
 11012                           
 11013                           ;incstack = 0
 11014  00486C  0E01               	movlw	1
 11015  00486E  EC73  F026         	call	_readADC
 11016                           
 11017                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 11018  004872  50C3               	movf	4035,w,c	;volatile
 11019  004874  CFC4 F082          	movff	4036,??_readMAG	;volatile
 11020  004878  0100               	movlb	0	; () banked
 11021  00487A  6B83               	clrf	(??_readMAG+1)& (0+255),b
 11022  00487C  C082  F083         	movff	??_readMAG,??_readMAG+1
 11023  004880  0100               	movlb	0	; () banked
 11024  004882  6B82               	clrf	??_readMAG& (0+255),b
 11025  004884  0100               	movlb	0	; () banked
 11026  004886  1182               	iorwf	??_readMAG& (0+255),w,b
 11027  004888  0100               	movlb	0	; () banked
 11028  00488A  6F84               	movwf	readMAG@res& (0+255),b
 11029  00488C  0100               	movlb	0	; () banked
 11030  00488E  5183               	movf	(??_readMAG+1)& (0+255),w,b
 11031  004890  0100               	movlb	0	; () banked
 11032  004892  6F85               	movwf	(readMAG@res+1)& (0+255),b
 11033                           
 11034                           ; BSR set to: 0
 11035                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 11036  004894  0100               	movlb	0	; () banked
 11037  004896  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 11038  004898  D008               	goto	u4331
 11039  00489A  0100               	movlb	0	; () banked
 11040  00489C  5185               	movf	(readMAG@res+1)& (0+255),w,b
 11041  00489E  E107               	bnz	u4330
 11042  0048A0  0E96               	movlw	150
 11043  0048A2  0100               	movlb	0	; () banked
 11044  0048A4  5D84               	subwf	readMAG@res& (0+255),w,b
 11045  0048A6  B0D8               	btfsc	status,0,c
 11046  0048A8  D002               	goto	u4330
 11047  0048AA                     u4331:
 11048  0048AA  0E01               	movlw	1
 11049  0048AC  D001               	goto	u4340
 11050  0048AE                     u4330:
 11051  0048AE  0E00               	movlw	0
 11052  0048B0                     u4340:
 11053  0048B0  0100               	movlb	0	; () banked
 11054  0048B2  6FE0               	movwf	_MAG_signal& (0+255),b
 11055  0048B4  6BE1               	clrf	(_MAG_signal+1)& (0+255),b
 11056                           
 11057                           ; BSR set to: 0
 11058  0048B6  0012               	return		;funcret
 11059  0048B8                     __end_of_readMAG:
 11060                           	opt stack 0
 11061                           tblptru	equ	0xFF8
 11062                           tblptrh	equ	0xFF7
 11063                           tblptrl	equ	0xFF6
 11064                           tablat	equ	0xFF5
 11065                           prodh	equ	0xFF4
 11066                           prodl	equ	0xFF3
 11067                           intcon	equ	0xFF2
 11068                           intcon2	equ	0xFF1
 11069                           intcon3	equ	0xFF0
 11070                           postinc0	equ	0xFEE
 11071                           wreg	equ	0xFE8
 11072                           postdec1	equ	0xFE5
 11073                           fsr1l	equ	0xFE1
 11074                           indf2	equ	0xFDF
 11075                           postinc2	equ	0xFDE
 11076                           postdec2	equ	0xFDD
 11077                           fsr2h	equ	0xFDA
 11078                           fsr2l	equ	0xFD9
 11079                           status	equ	0xFD8
 11080                           
 11081 ;; *************** function _algorithmTest *****************
 11082 ;; Defined at:
 11083 ;;		line 80 in file "Test.c"
 11084 ;; Parameters:    Size  Location     Type
 11085 ;;		None
 11086 ;; Auto vars:     Size  Location     Type
 11087 ;;		None
 11088 ;; Return value:  Size  Location     Type
 11089 ;;                  1    wreg      void 
 11090 ;; Registers used:
 11091 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11092 ;; Tracked objects:
 11093 ;;		On entry : 0/0
 11094 ;;		On exit  : 0/0
 11095 ;;		Unchanged: 0/0
 11096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11098 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11099 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11100 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11101 ;;Total ram usage:        2 bytes
 11102 ;; Hardware stack levels used:    1
 11103 ;; Hardware stack levels required when called:   10
 11104 ;; This function calls:
 11105 ;;		_lcdInst
 11106 ;;		_printf
 11107 ;; This function is called by:
 11108 ;;		_Test
 11109 ;; This function uses a non-reentrant model
 11110 ;;
 11111                           
 11112                           	psect	text39
 11113  003C26                     __ptext39:
 11114                           	opt stack 0
 11115  003C26                     _algorithmTest:
 11116                           	opt stack 19
 11117                           
 11118                           ;Test.c: 82: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11119                           
 11120                           ; BSR set to: 0
 11121                           ;incstack = 0
 11122  003C26  0E01               	movlw	1
 11123  003C28  EC6E  F027         	call	_lcdInst
 11124  003C2C  0E68               	movlw	104
 11125  003C2E  0100               	movlb	0	; () banked
 11126  003C30  6FAB               	movwf	??_algorithmTest& (0+255),b
 11127  003C32  0EE4               	movlw	228
 11128  003C34                     u8807:
 11129  003C34  2EE8               	decfsz	wreg,f,c
 11130  003C36  D7FE               	bra	u8807
 11131  003C38  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11132  003C3A  D7FC               	bra	u8807
 11133  003C3C  F000               	nop	
 11134  003C3E  0E80               	movlw	128
 11135  003C40  EC6E  F027         	call	_lcdInst
 11136                           
 11137                           ;Test.c: 83: printf("ALGORITHM TEST");
 11138  003C44  0ED2               	movlw	low STR_70
 11139  003C46  0100               	movlb	0	; () banked
 11140  003C48  6F8E               	movwf	printf@f& (0+255),b
 11141  003C4A  0EFE               	movlw	high STR_70
 11142  003C4C  0100               	movlb	0	; () banked
 11143  003C4E  6F8F               	movwf	(printf@f+1)& (0+255),b
 11144  003C50  ECB8  F008         	call	_printf	;wreg free
 11145                           
 11146                           ;Test.c: 84: lcdInst(0b11000000);;
 11147  003C54  0EC0               	movlw	192
 11148  003C56  EC6E  F027         	call	_lcdInst
 11149                           
 11150                           ;Test.c: 85: printf("PUSH TO START");
 11151  003C5A  0E0B               	movlw	low STR_71
 11152  003C5C  0100               	movlb	0	; () banked
 11153  003C5E  6F8E               	movwf	printf@f& (0+255),b
 11154  003C60  0EFF               	movlw	high STR_71
 11155  003C62  0100               	movlb	0	; () banked
 11156  003C64  6F8F               	movwf	(printf@f+1)& (0+255),b
 11157  003C66  ECB8  F008         	call	_printf	;wreg free
 11158                           
 11159                           ;Test.c: 86: _delay((unsigned long)((100)*(32000000/4000.0)));
 11160  003C6A  0E05               	movlw	5
 11161  003C6C  0100               	movlb	0	; () banked
 11162  003C6E  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 11163  003C70  0E0F               	movlw	15
 11164  003C72  0100               	movlb	0	; () banked
 11165  003C74  6FAB               	movwf	??_algorithmTest& (0+255),b
 11166  003C76  0EF1               	movlw	241
 11167  003C78                     u8817:
 11168  003C78  2EE8               	decfsz	wreg,f,c
 11169  003C7A  D7FE               	bra	u8817
 11170  003C7C  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11171  003C7E  D7FC               	bra	u8817
 11172  003C80  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 11173  003C82  D7FA               	bra	u8817
 11174  003C84                     l1112:
 11175  003C84  A281               	btfss	3969,1,c	;volatile
 11176  003C86  D7FE               	goto	l1112
 11177  003C88                     l1115:
 11178  003C88  B281               	btfsc	3969,1,c	;volatile
 11179  003C8A  D7FE               	goto	l1115
 11180                           
 11181                           ;Test.c: 89: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11182  003C8C  0E01               	movlw	1
 11183  003C8E  EC6E  F027         	call	_lcdInst
 11184  003C92  0E68               	movlw	104
 11185  003C94  0100               	movlb	0	; () banked
 11186  003C96  6FAB               	movwf	??_algorithmTest& (0+255),b
 11187  003C98  0EE4               	movlw	228
 11188  003C9A                     u8827:
 11189  003C9A  2EE8               	decfsz	wreg,f,c
 11190  003C9C  D7FE               	bra	u8827
 11191  003C9E  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11192  003CA0  D7FC               	bra	u8827
 11193  003CA2  F000               	nop	
 11194  003CA4  0E80               	movlw	128
 11195  003CA6  EC6E  F027         	call	_lcdInst
 11196                           
 11197                           ;Test.c: 94: printf("ALG1: 9 POPNOTAB");
 11198  003CAA  0E5F               	movlw	low STR_72
 11199  003CAC  0100               	movlb	0	; () banked
 11200  003CAE  6F8E               	movwf	printf@f& (0+255),b
 11201  003CB0  0EFC               	movlw	high STR_72
 11202  003CB2  0100               	movlb	0	; () banked
 11203  003CB4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11204  003CB6  ECB8  F008         	call	_printf	;wreg free
 11205                           
 11206                           ;Test.c: 101: printf("ALG2: 12 CANS");
 11207  003CBA  0EEF               	movlw	low STR_73
 11208  003CBC  0100               	movlb	0	; () banked
 11209  003CBE  6F8E               	movwf	printf@f& (0+255),b
 11210  003CC0  0EFE               	movlw	high STR_73
 11211  003CC2  0100               	movlb	0	; () banked
 11212  003CC4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11213  003CC6  ECB8  F008         	call	_printf	;wreg free
 11214                           
 11215                           ;Test.c: 110: printf("ALG3: 1 CAN");
 11216  003CCA  0E4F               	movlw	low STR_74
 11217  003CCC  0100               	movlb	0	; () banked
 11218  003CCE  6F8E               	movwf	printf@f& (0+255),b
 11219  003CD0  0EFF               	movlw	high STR_74
 11220  003CD2  0100               	movlb	0	; () banked
 11221  003CD4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11222  003CD6  ECB8  F008         	call	_printf	;wreg free
 11223                           
 11224                           ;Test.c: 116: printf("ALG4: ALL CANS");
 11225  003CDA  0EB4               	movlw	low STR_75
 11226  003CDC  0100               	movlb	0	; () banked
 11227  003CDE  6F8E               	movwf	printf@f& (0+255),b
 11228  003CE0  0EFE               	movlw	high STR_75
 11229  003CE2  0100               	movlb	0	; () banked
 11230  003CE4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11231  003CE6  ECB8  F008         	call	_printf	;wreg free
 11232                           
 11233                           ;Test.c: 121: printf("ALG5: NO CANS");
 11234  003CEA  0EFD               	movlw	low STR_76
 11235  003CEC  0100               	movlb	0	; () banked
 11236  003CEE  6F8E               	movwf	printf@f& (0+255),b
 11237  003CF0  0EFE               	movlw	high STR_76
 11238  003CF2  0100               	movlb	0	; () banked
 11239  003CF4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11240  003CF6  ECB8  F008         	call	_printf	;wreg free
 11241  003CFA  0012               	return		;funcret
 11242  003CFC                     __end_of_algorithmTest:
 11243                           	opt stack 0
 11244                           tblptru	equ	0xFF8
 11245                           tblptrh	equ	0xFF7
 11246                           tblptrl	equ	0xFF6
 11247                           tablat	equ	0xFF5
 11248                           prodh	equ	0xFF4
 11249                           prodl	equ	0xFF3
 11250                           intcon	equ	0xFF2
 11251                           intcon2	equ	0xFF1
 11252                           intcon3	equ	0xFF0
 11253                           postinc0	equ	0xFEE
 11254                           wreg	equ	0xFE8
 11255                           postdec1	equ	0xFE5
 11256                           fsr1l	equ	0xFE1
 11257                           indf2	equ	0xFDF
 11258                           postinc2	equ	0xFDE
 11259                           postdec2	equ	0xFDD
 11260                           fsr2h	equ	0xFDA
 11261                           fsr2l	equ	0xFD9
 11262                           status	equ	0xFD8
 11263                           
 11264 ;; *************** function _actuatorTest *****************
 11265 ;; Defined at:
 11266 ;;		line 203 in file "Test.c"
 11267 ;; Parameters:    Size  Location     Type
 11268 ;;		None
 11269 ;; Auto vars:     Size  Location     Type
 11270 ;;  i               1   45[BANK0 ] unsigned char 
 11271 ;;  i               1   67[BANK0 ] unsigned char 
 11272 ;;  i               1   66[BANK0 ] unsigned char 
 11273 ;;  i               1   65[BANK0 ] unsigned char 
 11274 ;;  i               1   64[BANK0 ] unsigned char 
 11275 ;;  i               1   63[BANK0 ] unsigned char 
 11276 ;;  i               1   62[BANK0 ] unsigned char 
 11277 ;;  i               1   61[BANK0 ] unsigned char 
 11278 ;;  i               1   60[BANK0 ] unsigned char 
 11279 ;;  i               1   59[BANK0 ] unsigned char 
 11280 ;;  i               1   58[BANK0 ] unsigned char 
 11281 ;;  i               1   57[BANK0 ] unsigned char 
 11282 ;;  i               1   56[BANK0 ] unsigned char 
 11283 ;;  i               1   55[BANK0 ] unsigned char 
 11284 ;;  i               1   54[BANK0 ] unsigned char 
 11285 ;;  i               1   53[BANK0 ] unsigned char 
 11286 ;;  i               1   52[BANK0 ] unsigned char 
 11287 ;;  i               1   51[BANK0 ] unsigned char 
 11288 ;;  i               1   50[BANK0 ] unsigned char 
 11289 ;;  i               1   49[BANK0 ] unsigned char 
 11290 ;;  i               1   48[BANK0 ] unsigned char 
 11291 ;;  i               1   47[BANK0 ] unsigned char 
 11292 ;;  i               1   46[BANK0 ] unsigned char 
 11293 ;;  i               2   68[BANK0 ] int 
 11294 ;; Return value:  Size  Location     Type
 11295 ;;                  1    wreg      void 
 11296 ;; Registers used:
 11297 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11298 ;; Tracked objects:
 11299 ;;		On entry : 0/0
 11300 ;;		On exit  : 0/0
 11301 ;;		Unchanged: 0/0
 11302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11304 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11305 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11306 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11307 ;;Total ram usage:       27 bytes
 11308 ;; Hardware stack levels used:    1
 11309 ;; Hardware stack levels required when called:   10
 11310 ;; This function calls:
 11311 ;;		_lcdInst
 11312 ;;		_printf
 11313 ;;		_updateServoPosition
 11314 ;; This function is called by:
 11315 ;;		_Test
 11316 ;; This function uses a non-reentrant model
 11317 ;;
 11318                           
 11319                           	psect	text40
 11320  000012                     __ptext40:
 11321                           	opt stack 0
 11322  000012                     _actuatorTest:
 11323                           	opt stack 19
 11324                           
 11325                           ;Test.c: 205: int i = 0;
 11326                           
 11327                           ;incstack = 0
 11328  000012  0E00               	movlw	0
 11329  000014  0100               	movlb	0	; () banked
 11330  000016  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11331  000018  0E00               	movlw	0
 11332  00001A  6FC4               	movwf	actuatorTest@i& (0+255),b
 11333                           
 11334                           ; BSR set to: 0
 11335                           ;Test.c: 207: (INTCONbits.GIE = 1);
 11336  00001C  8EF2               	bsf	intcon,7,c	;volatile
 11337                           
 11338                           ; BSR set to: 0
 11339                           ;Test.c: 208: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11340  00001E  0E01               	movlw	1
 11341  000020  EC6E  F027         	call	_lcdInst
 11342  000024  0E68               	movlw	104
 11343  000026  0100               	movlb	0	; () banked
 11344  000028  6FAB               	movwf	??_actuatorTest& (0+255),b
 11345  00002A  0EE4               	movlw	228
 11346  00002C                     u8837:
 11347  00002C  2EE8               	decfsz	wreg,f,c
 11348  00002E  D7FE               	bra	u8837
 11349  000030  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11350  000032  D7FC               	bra	u8837
 11351  000034  F000               	nop	
 11352  000036  0E80               	movlw	128
 11353  000038  EC6E  F027         	call	_lcdInst
 11354                           
 11355                           ;Test.c: 209: printf("ACTUATORS");
 11356  00003C  0E91               	movlw	low STR_88
 11357  00003E  0100               	movlb	0	; () banked
 11358  000040  6F8E               	movwf	printf@f& (0+255),b
 11359  000042  0EFF               	movlw	high STR_88
 11360  000044  0100               	movlb	0	; () banked
 11361  000046  6F8F               	movwf	(printf@f+1)& (0+255),b
 11362  000048  ECB8  F008         	call	_printf	;wreg free
 11363                           
 11364                           ;Test.c: 210: lcdInst(0b11000000);;
 11365  00004C  0EC0               	movlw	192
 11366  00004E  EC6E  F027         	call	_lcdInst
 11367                           
 11368                           ;Test.c: 211: printf("PUSH TO START");
 11369  000052  0E0B               	movlw	low STR_71
 11370  000054  0100               	movlb	0	; () banked
 11371  000056  6F8E               	movwf	printf@f& (0+255),b
 11372  000058  0EFF               	movlw	high STR_71
 11373  00005A  0100               	movlb	0	; () banked
 11374  00005C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11375  00005E  ECB8  F008         	call	_printf	;wreg free
 11376                           
 11377                           ;Test.c: 212: _delay((unsigned long)((100)*(32000000/4000.0)));
 11378  000062  0E05               	movlw	5
 11379  000064  0100               	movlb	0	; () banked
 11380  000066  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11381  000068  0E0F               	movlw	15
 11382  00006A  0100               	movlb	0	; () banked
 11383  00006C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11384  00006E  0EF1               	movlw	241
 11385  000070                     u8847:
 11386  000070  2EE8               	decfsz	wreg,f,c
 11387  000072  D7FE               	bra	u8847
 11388  000074  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11389  000076  D7FC               	bra	u8847
 11390  000078  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11391  00007A  D7FA               	bra	u8847
 11392  00007C                     l1147:
 11393  00007C  A281               	btfss	3969,1,c	;volatile
 11394  00007E  D7FE               	goto	l1147
 11395  000080                     l1150:
 11396  000080  B281               	btfsc	3969,1,c	;volatile
 11397  000082  D7FE               	goto	l1150
 11398                           
 11399                           ;Test.c: 215: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11400  000084  0E01               	movlw	1
 11401  000086  EC6E  F027         	call	_lcdInst
 11402  00008A  0E68               	movlw	104
 11403  00008C  0100               	movlb	0	; () banked
 11404  00008E  6FAB               	movwf	??_actuatorTest& (0+255),b
 11405  000090  0EE4               	movlw	228
 11406  000092                     u8857:
 11407  000092  2EE8               	decfsz	wreg,f,c
 11408  000094  D7FE               	bra	u8857
 11409  000096  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11410  000098  D7FC               	bra	u8857
 11411  00009A  F000               	nop	
 11412  00009C  0E80               	movlw	128
 11413  00009E  EC6E  F027         	call	_lcdInst
 11414                           
 11415                           ;Test.c: 220: printf("TST: DC MOTORS");
 11416  0000A2  0EC3               	movlw	low STR_90
 11417  0000A4  0100               	movlb	0	; () banked
 11418  0000A6  6F8E               	movwf	printf@f& (0+255),b
 11419  0000A8  0EFE               	movlw	high STR_90
 11420  0000AA  0100               	movlb	0	; () banked
 11421  0000AC  6F8F               	movwf	(printf@f+1)& (0+255),b
 11422  0000AE  ECB8  F008         	call	_printf	;wreg free
 11423                           
 11424                           ;Test.c: 221: lcdInst(0b11000000);;
 11425  0000B2  0EC0               	movlw	192
 11426  0000B4  EC6E  F027         	call	_lcdInst
 11427                           
 11428                           ;Test.c: 222: printf("PIN RA5 HIGH.");
 11429  0000B8  0EE1               	movlw	low STR_91
 11430  0000BA  0100               	movlb	0	; () banked
 11431  0000BC  6F8E               	movwf	printf@f& (0+255),b
 11432  0000BE  0EFE               	movlw	high STR_91
 11433  0000C0  0100               	movlb	0	; () banked
 11434  0000C2  6F8F               	movwf	(printf@f+1)& (0+255),b
 11435  0000C4  ECB8  F008         	call	_printf	;wreg free
 11436                           
 11437                           ;Test.c: 223: LATAbits.LATA5 = 1;
 11438  0000C8  8A89               	bsf	3977,5,c	;volatile
 11439                           
 11440                           ;Test.c: 224: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 11441  0000CA  0E00               	movlw	0
 11442  0000CC  0100               	movlb	0	; () banked
 11443  0000CE  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11444  0000D0  0E00               	movlw	0
 11445  0000D2  6FC4               	movwf	actuatorTest@i& (0+255),b
 11446                           
 11447                           ; BSR set to: 0
 11448  0000D4  0100               	movlb	0	; () banked
 11449  0000D6  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11450  0000D8  D008               	goto	l7230
 11451  0000DA  0100               	movlb	0	; () banked
 11452  0000DC  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11453  0000DE  E123               	bnz	l1154
 11454  0000E0  0E05               	movlw	5
 11455  0000E2  0100               	movlb	0	; () banked
 11456  0000E4  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11457  0000E6  B0D8               	btfsc	status,0,c
 11458  0000E8  D01E               	goto	l1154
 11459  0000EA                     l7230:
 11460                           
 11461                           ; BSR set to: 0
 11462  0000EA  0E00               	movlw	0
 11463  0000EC  0100               	movlb	0	; () banked
 11464  0000EE  6FAD               	movwf	actuatorTest@i_1651& (0+255),b
 11465  0000F0                     l7232:
 11466                           
 11467                           ; BSR set to: 0
 11468  0000F0  0E63               	movlw	99
 11469  0000F2  0100               	movlb	0	; () banked
 11470  0000F4  65AD               	cpfsgt	actuatorTest@i_1651& (0+255),b
 11471  0000F6  D001               	goto	l7236
 11472  0000F8  D00C               	goto	l7240
 11473  0000FA                     l7236:
 11474                           
 11475                           ; BSR set to: 0
 11476  0000FA  0E68               	movlw	104
 11477  0000FC  0100               	movlb	0	; () banked
 11478  0000FE  6FAB               	movwf	??_actuatorTest& (0+255),b
 11479  000100  0EE4               	movlw	228
 11480  000102                     u8867:
 11481  000102  2EE8               	decfsz	wreg,f,c
 11482  000104  D7FE               	bra	u8867
 11483  000106  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11484  000108  D7FC               	bra	u8867
 11485  00010A  F000               	nop	
 11486  00010C  0100               	movlb	0	; () banked
 11487  00010E  2BAD               	incf	actuatorTest@i_1651& (0+255),f,b
 11488  000110  D7EF               	goto	l7232
 11489  000112                     l7240:
 11490                           
 11491                           ; BSR set to: 0
 11492  000112  0100               	movlb	0	; () banked
 11493  000114  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11494  000116  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11495                           
 11496                           ; BSR set to: 0
 11497  000118  0100               	movlb	0	; () banked
 11498  00011A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11499  00011C  D7E6               	goto	l7230
 11500  00011E  0100               	movlb	0	; () banked
 11501  000120  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11502  000122  E101               	bnz	u5920
 11503  000124  D7DD               	goto	L8
 11504  000126                     u5920:
 11505  000126                     l1154:
 11506                           
 11507                           ; BSR set to: 0
 11508                           ;Test.c: 225: LATAbits.LATA5 = 0;
 11509  000126  9A89               	bcf	3977,5,c	;volatile
 11510                           
 11511                           ; BSR set to: 0
 11512                           ;Test.c: 226: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11513  000128  0E01               	movlw	1
 11514  00012A  EC6E  F027         	call	_lcdInst
 11515  00012E  0E68               	movlw	104
 11516  000130  0100               	movlb	0	; () banked
 11517  000132  6FAB               	movwf	??_actuatorTest& (0+255),b
 11518  000134  0EE4               	movlw	228
 11519  000136                     u8877:
 11520  000136  2EE8               	decfsz	wreg,f,c
 11521  000138  D7FE               	bra	u8877
 11522  00013A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11523  00013C  D7FC               	bra	u8877
 11524  00013E  F000               	nop	
 11525  000140  0E80               	movlw	128
 11526  000142  EC6E  F027         	call	_lcdInst
 11527                           
 11528                           ;Test.c: 232: printf("TST: COND SOLN'D");
 11529  000146  0E70               	movlw	low STR_92
 11530  000148  0100               	movlb	0	; () banked
 11531  00014A  6F8E               	movwf	printf@f& (0+255),b
 11532  00014C  0EFC               	movlw	high STR_92
 11533  00014E  0100               	movlb	0	; () banked
 11534  000150  6F8F               	movwf	(printf@f+1)& (0+255),b
 11535  000152  ECB8  F008         	call	_printf	;wreg free
 11536                           
 11537                           ;Test.c: 233: lcdInst(0b11000000);;
 11538  000156  0EC0               	movlw	192
 11539  000158  EC6E  F027         	call	_lcdInst
 11540                           
 11541                           ;Test.c: 234: printf("PIN RA3...");
 11542  00015C  0E5B               	movlw	low STR_93
 11543  00015E  0100               	movlb	0	; () banked
 11544  000160  6F8E               	movwf	printf@f& (0+255),b
 11545  000162  0EFF               	movlw	high STR_93
 11546  000164  0100               	movlb	0	; () banked
 11547  000166  6F8F               	movwf	(printf@f+1)& (0+255),b
 11548  000168  ECB8  F008         	call	_printf	;wreg free
 11549                           
 11550                           ;Test.c: 235: for(i=0;i<5;i++){
 11551  00016C  0E00               	movlw	0
 11552  00016E  0100               	movlb	0	; () banked
 11553  000170  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11554  000172  0E00               	movlw	0
 11555  000174  6FC4               	movwf	actuatorTest@i& (0+255),b
 11556                           
 11557                           ; BSR set to: 0
 11558  000176  0100               	movlb	0	; () banked
 11559  000178  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11560  00017A  D008               	goto	l1157
 11561  00017C  0100               	movlb	0	; () banked
 11562  00017E  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11563  000180  E12C               	bnz	l1158
 11564  000182  0E05               	movlw	5
 11565  000184  0100               	movlb	0	; () banked
 11566  000186  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11567  000188  B0D8               	btfsc	status,0,c
 11568  00018A  D027               	goto	l1158
 11569  00018C                     l1157:
 11570                           
 11571                           ; BSR set to: 0
 11572                           ;Test.c: 236: LATAbits.LATA3 = 1;
 11573  00018C  8689               	bsf	3977,3,c	;volatile
 11574                           
 11575                           ; BSR set to: 0
 11576                           ;Test.c: 237: _delay((unsigned long)((300)*(32000000/4000.0)));
 11577  00018E  0E0D               	movlw	13
 11578  000190  0100               	movlb	0	; () banked
 11579  000192  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11580  000194  0E2D               	movlw	45
 11581  000196  0100               	movlb	0	; () banked
 11582  000198  6FAB               	movwf	??_actuatorTest& (0+255),b
 11583  00019A  0ED7               	movlw	215
 11584  00019C                     u8887:
 11585  00019C  2EE8               	decfsz	wreg,f,c
 11586  00019E  D7FE               	bra	u8887
 11587  0001A0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11588  0001A2  D7FC               	bra	u8887
 11589  0001A4  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11590  0001A6  D7FA               	bra	u8887
 11591  0001A8  D000               	nop2	
 11592                           
 11593                           ;Test.c: 238: LATAbits.LATA3 = !1;
 11594  0001AA  9689               	bcf	3977,3,c	;volatile
 11595                           
 11596                           ;Test.c: 239: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 11597  0001AC  0E1D               	movlw	29
 11598  0001AE  0100               	movlb	0	; () banked
 11599  0001B0  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11600  0001B2  0E69               	movlw	105
 11601  0001B4  0100               	movlb	0	; () banked
 11602  0001B6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11603  0001B8  0EA5               	movlw	165
 11604  0001BA                     u8897:
 11605  0001BA  2EE8               	decfsz	wreg,f,c
 11606  0001BC  D7FE               	bra	u8897
 11607  0001BE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11608  0001C0  D7FC               	bra	u8897
 11609  0001C2  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11610  0001C4  D7FA               	bra	u8897
 11611  0001C6  0100               	movlb	0	; () banked
 11612  0001C8  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11613  0001CA  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11614  0001CC  0100               	movlb	0	; () banked
 11615  0001CE  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11616  0001D0  D7DD               	goto	l1157
 11617  0001D2  0100               	movlb	0	; () banked
 11618  0001D4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11619  0001D6  E101               	bnz	u5940
 11620  0001D8  D7D4               	goto	L9
 11621  0001DA                     u5940:
 11622  0001DA                     l1158:
 11623                           
 11624                           ; BSR set to: 0
 11625                           ;Test.c: 240: }
 11626                           ;Test.c: 241: LATAbits.LATA3 = !1;
 11627  0001DA  9689               	bcf	3977,3,c	;volatile
 11628                           
 11629                           ; BSR set to: 0
 11630                           ;Test.c: 242: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11631  0001DC  0E01               	movlw	1
 11632  0001DE  EC6E  F027         	call	_lcdInst
 11633  0001E2  0E68               	movlw	104
 11634  0001E4  0100               	movlb	0	; () banked
 11635  0001E6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11636  0001E8  0EE4               	movlw	228
 11637  0001EA                     u8907:
 11638  0001EA  2EE8               	decfsz	wreg,f,c
 11639  0001EC  D7FE               	bra	u8907
 11640  0001EE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11641  0001F0  D7FC               	bra	u8907
 11642  0001F2  F000               	nop	
 11643  0001F4  0E80               	movlw	128
 11644  0001F6  EC6E  F027         	call	_lcdInst
 11645                           
 11646                           ;Test.c: 248: printf("TST: PUSH SOLN'D");
 11647  0001FA  0E81               	movlw	low STR_94
 11648  0001FC  0100               	movlb	0	; () banked
 11649  0001FE  6F8E               	movwf	printf@f& (0+255),b
 11650  000200  0EFC               	movlw	high STR_94
 11651  000202  0100               	movlb	0	; () banked
 11652  000204  6F8F               	movwf	(printf@f+1)& (0+255),b
 11653  000206  ECB8  F008         	call	_printf	;wreg free
 11654                           
 11655                           ;Test.c: 249: lcdInst(0b11000000);;
 11656  00020A  0EC0               	movlw	192
 11657  00020C  EC6E  F027         	call	_lcdInst
 11658                           
 11659                           ;Test.c: 250: printf("PIN RA4...");
 11660  000210  0E66               	movlw	low STR_95
 11661  000212  0100               	movlb	0	; () banked
 11662  000214  6F8E               	movwf	printf@f& (0+255),b
 11663  000216  0EFF               	movlw	high STR_95
 11664  000218  0100               	movlb	0	; () banked
 11665  00021A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11666  00021C  ECB8  F008         	call	_printf	;wreg free
 11667                           
 11668                           ;Test.c: 251: for(i=0;i<5;i++){
 11669  000220  0E00               	movlw	0
 11670  000222  0100               	movlb	0	; () banked
 11671  000224  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11672  000226  0E00               	movlw	0
 11673  000228  6FC4               	movwf	actuatorTest@i& (0+255),b
 11674                           
 11675                           ; BSR set to: 0
 11676  00022A  0100               	movlb	0	; () banked
 11677  00022C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11678  00022E  D008               	goto	l1159
 11679  000230  0100               	movlb	0	; () banked
 11680  000232  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11681  000234  E12C               	bnz	l1160
 11682  000236  0E05               	movlw	5
 11683  000238  0100               	movlb	0	; () banked
 11684  00023A  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11685  00023C  B0D8               	btfsc	status,0,c
 11686  00023E  D027               	goto	l1160
 11687  000240                     l1159:
 11688                           
 11689                           ; BSR set to: 0
 11690                           ;Test.c: 252: LATAbits.LATA4 = 1;
 11691  000240  8889               	bsf	3977,4,c	;volatile
 11692                           
 11693                           ; BSR set to: 0
 11694                           ;Test.c: 253: _delay((unsigned long)((300)*(32000000/4000.0)));
 11695  000242  0E0D               	movlw	13
 11696  000244  0100               	movlb	0	; () banked
 11697  000246  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11698  000248  0E2D               	movlw	45
 11699  00024A  0100               	movlb	0	; () banked
 11700  00024C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11701  00024E  0ED7               	movlw	215
 11702  000250                     u8917:
 11703  000250  2EE8               	decfsz	wreg,f,c
 11704  000252  D7FE               	bra	u8917
 11705  000254  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11706  000256  D7FC               	bra	u8917
 11707  000258  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11708  00025A  D7FA               	bra	u8917
 11709  00025C  D000               	nop2	
 11710                           
 11711                           ;Test.c: 254: LATAbits.LATA4 = !1;
 11712  00025E  9889               	bcf	3977,4,c	;volatile
 11713                           
 11714                           ;Test.c: 255: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 11715  000260  0E1D               	movlw	29
 11716  000262  0100               	movlb	0	; () banked
 11717  000264  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11718  000266  0E69               	movlw	105
 11719  000268  0100               	movlb	0	; () banked
 11720  00026A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11721  00026C  0EA5               	movlw	165
 11722  00026E                     u8927:
 11723  00026E  2EE8               	decfsz	wreg,f,c
 11724  000270  D7FE               	bra	u8927
 11725  000272  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11726  000274  D7FC               	bra	u8927
 11727  000276  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11728  000278  D7FA               	bra	u8927
 11729  00027A  0100               	movlb	0	; () banked
 11730  00027C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11731  00027E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11732  000280  0100               	movlb	0	; () banked
 11733  000282  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11734  000284  D7DD               	goto	l1159
 11735  000286  0100               	movlb	0	; () banked
 11736  000288  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11737  00028A  E101               	bnz	u5960
 11738  00028C  D7D4               	goto	L10
 11739  00028E                     u5960:
 11740  00028E                     l1160:
 11741                           
 11742                           ; BSR set to: 0
 11743                           ;Test.c: 256: }
 11744                           ;Test.c: 257: LATAbits.LATA4 = !1;
 11745  00028E  9889               	bcf	3977,4,c	;volatile
 11746                           
 11747                           ; BSR set to: 0
 11748                           ;Test.c: 258: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11749  000290  0E01               	movlw	1
 11750  000292  EC6E  F027         	call	_lcdInst
 11751  000296  0E68               	movlw	104
 11752  000298  0100               	movlb	0	; () banked
 11753  00029A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11754  00029C  0EE4               	movlw	228
 11755  00029E                     u8937:
 11756  00029E  2EE8               	decfsz	wreg,f,c
 11757  0002A0  D7FE               	bra	u8937
 11758  0002A2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11759  0002A4  D7FC               	bra	u8937
 11760  0002A6  F000               	nop	
 11761  0002A8  0E80               	movlw	128
 11762  0002AA  EC6E  F027         	call	_lcdInst
 11763                           
 11764                           ;Test.c: 261: machine_state = Sorting_state;
 11765  0002AE  0E01               	movlw	1
 11766  0002B0  0100               	movlb	0	; () banked
 11767  0002B2  6FFC               	movwf	_machine_state& (0+255),b
 11768                           
 11769                           ; BSR set to: 0
 11770                           ;Test.c: 262: was_low_1 = 0;
 11771  0002B4  0E00               	movlw	0
 11772  0002B6  6E7A               	movwf	_was_low_1+1,c	;volatile
 11773  0002B8  0E00               	movlw	0
 11774  0002BA  6E79               	movwf	_was_low_1,c	;volatile
 11775                           
 11776                           ; BSR set to: 0
 11777                           ;Test.c: 263: was_low_1 = 0;
 11778  0002BC  0E00               	movlw	0
 11779  0002BE  6E7A               	movwf	_was_low_1+1,c	;volatile
 11780  0002C0  0E00               	movlw	0
 11781  0002C2  6E79               	movwf	_was_low_1,c	;volatile
 11782                           
 11783                           ; BSR set to: 0
 11784                           ;Test.c: 270: printf("TST: PAN SERVO");
 11785  0002C4  0EA5               	movlw	low STR_96
 11786  0002C6  0100               	movlb	0	; () banked
 11787  0002C8  6F8E               	movwf	printf@f& (0+255),b
 11788  0002CA  0EFE               	movlw	high STR_96
 11789  0002CC  0100               	movlb	0	; () banked
 11790  0002CE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11791  0002D0  ECB8  F008         	call	_printf	;wreg free
 11792                           
 11793                           ;Test.c: 271: lcdInst(0b11000000);;
 11794  0002D4  0EC0               	movlw	192
 11795  0002D6  EC6E  F027         	call	_lcdInst
 11796                           
 11797                           ;Test.c: 272: printf("MIDDLE -- 2s    ");
 11798  0002DA  0E0A               	movlw	low STR_97
 11799  0002DC  0100               	movlb	0	; () banked
 11800  0002DE  6F8E               	movwf	printf@f& (0+255),b
 11801  0002E0  0EFC               	movlw	high STR_97
 11802  0002E2  0100               	movlb	0	; () banked
 11803  0002E4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11804  0002E6  ECB8  F008         	call	_printf	;wreg free
 11805                           
 11806                           ;Test.c: 273: updateServoPosition(1200, 1);
 11807  0002EA  0E04               	movlw	4
 11808  0002EC  0100               	movlb	0	; () banked
 11809  0002EE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11810  0002F0  0EB0               	movlw	176
 11811  0002F2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11812  0002F4  0E00               	movlw	0
 11813  0002F6  0100               	movlb	0	; () banked
 11814  0002F8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11815  0002FA  0E01               	movlw	1
 11816  0002FC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11817  0002FE  ECCA  F021         	call	_updateServoPosition	;wreg free
 11818                           
 11819                           ;Test.c: 274: TMR1ON = 1;
 11820  000302  80CD               	bsf	4045,0,c	;volatile
 11821                           
 11822                           ;Test.c: 275: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11823  000304  0E00               	movlw	0
 11824  000306  0100               	movlb	0	; () banked
 11825  000308  6FAE               	movwf	actuatorTest@i_1658& (0+255),b
 11826  00030A                     l7316:
 11827                           
 11828                           ; BSR set to: 0
 11829  00030A  0E63               	movlw	99
 11830  00030C  0100               	movlb	0	; () banked
 11831  00030E  65AE               	cpfsgt	actuatorTest@i_1658& (0+255),b
 11832  000310  D001               	goto	l7320
 11833  000312  D00C               	goto	l7324
 11834  000314                     l7320:
 11835                           
 11836                           ; BSR set to: 0
 11837  000314  0E68               	movlw	104
 11838  000316  0100               	movlb	0	; () banked
 11839  000318  6FAB               	movwf	??_actuatorTest& (0+255),b
 11840  00031A  0EE4               	movlw	228
 11841  00031C                     u8947:
 11842  00031C  2EE8               	decfsz	wreg,f,c
 11843  00031E  D7FE               	bra	u8947
 11844  000320  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11845  000322  D7FC               	bra	u8947
 11846  000324  F000               	nop	
 11847  000326  0100               	movlb	0	; () banked
 11848  000328  2BAE               	incf	actuatorTest@i_1658& (0+255),f,b
 11849  00032A  D7EF               	goto	l7316
 11850  00032C                     l7324:
 11851                           
 11852                           ; BSR set to: 0
 11853  00032C  0E00               	movlw	0
 11854  00032E  0100               	movlb	0	; () banked
 11855  000330  6FAF               	movwf	actuatorTest@i_1659& (0+255),b
 11856  000332                     l7326:
 11857                           
 11858                           ; BSR set to: 0
 11859  000332  0E63               	movlw	99
 11860  000334  0100               	movlb	0	; () banked
 11861  000336  65AF               	cpfsgt	actuatorTest@i_1659& (0+255),b
 11862  000338  D001               	goto	l7330
 11863  00033A  D00C               	goto	l7334
 11864  00033C                     l7330:
 11865                           
 11866                           ; BSR set to: 0
 11867  00033C  0E68               	movlw	104
 11868  00033E  0100               	movlb	0	; () banked
 11869  000340  6FAB               	movwf	??_actuatorTest& (0+255),b
 11870  000342  0EE4               	movlw	228
 11871  000344                     u8957:
 11872  000344  2EE8               	decfsz	wreg,f,c
 11873  000346  D7FE               	bra	u8957
 11874  000348  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11875  00034A  D7FC               	bra	u8957
 11876  00034C  F000               	nop	
 11877  00034E  0100               	movlb	0	; () banked
 11878  000350  2BAF               	incf	actuatorTest@i_1659& (0+255),f,b
 11879  000352  D7EF               	goto	l7326
 11880  000354                     l7334:
 11881                           
 11882                           ; BSR set to: 0
 11883                           ;Test.c: 277: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11884  000354  0E80               	movlw	128
 11885  000356  EC6E  F027         	call	_lcdInst
 11886  00035A  0EC0               	movlw	192
 11887  00035C  EC6E  F027         	call	_lcdInst
 11888                           
 11889                           ;Test.c: 278: printf("RIGHT -- 2s     ");
 11890  000360  0EF9               	movlw	low STR_98
 11891  000362  0100               	movlb	0	; () banked
 11892  000364  6F8E               	movwf	printf@f& (0+255),b
 11893  000366  0EFB               	movlw	high STR_98
 11894  000368  0100               	movlb	0	; () banked
 11895  00036A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11896  00036C  ECB8  F008         	call	_printf	;wreg free
 11897                           
 11898                           ;Test.c: 279: updateServoPosition(500, 1);
 11899  000370  0E01               	movlw	1
 11900  000372  0100               	movlb	0	; () banked
 11901  000374  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11902  000376  0EF4               	movlw	244
 11903  000378  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11904  00037A  0E00               	movlw	0
 11905  00037C  0100               	movlb	0	; () banked
 11906  00037E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11907  000380  0E01               	movlw	1
 11908  000382  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11909  000384  ECCA  F021         	call	_updateServoPosition	;wreg free
 11910                           
 11911                           ;Test.c: 280: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11912  000388  0E00               	movlw	0
 11913  00038A  0100               	movlb	0	; () banked
 11914  00038C  6FB0               	movwf	actuatorTest@i_1661& (0+255),b
 11915  00038E                     l7342:
 11916                           
 11917                           ; BSR set to: 0
 11918  00038E  0E63               	movlw	99
 11919  000390  0100               	movlb	0	; () banked
 11920  000392  65B0               	cpfsgt	actuatorTest@i_1661& (0+255),b
 11921  000394  D001               	goto	l7346
 11922  000396  D00C               	goto	l7350
 11923  000398                     l7346:
 11924                           
 11925                           ; BSR set to: 0
 11926  000398  0E68               	movlw	104
 11927  00039A  0100               	movlb	0	; () banked
 11928  00039C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11929  00039E  0EE4               	movlw	228
 11930  0003A0                     u8967:
 11931  0003A0  2EE8               	decfsz	wreg,f,c
 11932  0003A2  D7FE               	bra	u8967
 11933  0003A4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11934  0003A6  D7FC               	bra	u8967
 11935  0003A8  F000               	nop	
 11936  0003AA  0100               	movlb	0	; () banked
 11937  0003AC  2BB0               	incf	actuatorTest@i_1661& (0+255),f,b
 11938  0003AE  D7EF               	goto	l7342
 11939  0003B0                     l7350:
 11940                           
 11941                           ; BSR set to: 0
 11942  0003B0  0E00               	movlw	0
 11943  0003B2  0100               	movlb	0	; () banked
 11944  0003B4  6FB1               	movwf	actuatorTest@i_1662& (0+255),b
 11945  0003B6                     l7352:
 11946                           
 11947                           ; BSR set to: 0
 11948  0003B6  0E63               	movlw	99
 11949  0003B8  0100               	movlb	0	; () banked
 11950  0003BA  65B1               	cpfsgt	actuatorTest@i_1662& (0+255),b
 11951  0003BC  D001               	goto	l7356
 11952  0003BE  D00C               	goto	l7360
 11953  0003C0                     l7356:
 11954                           
 11955                           ; BSR set to: 0
 11956  0003C0  0E68               	movlw	104
 11957  0003C2  0100               	movlb	0	; () banked
 11958  0003C4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11959  0003C6  0EE4               	movlw	228
 11960  0003C8                     u8977:
 11961  0003C8  2EE8               	decfsz	wreg,f,c
 11962  0003CA  D7FE               	bra	u8977
 11963  0003CC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11964  0003CE  D7FC               	bra	u8977
 11965  0003D0  F000               	nop	
 11966  0003D2  0100               	movlb	0	; () banked
 11967  0003D4  2BB1               	incf	actuatorTest@i_1662& (0+255),f,b
 11968  0003D6  D7EF               	goto	l7352
 11969  0003D8                     l7360:
 11970                           
 11971                           ; BSR set to: 0
 11972                           ;Test.c: 282: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11973  0003D8  0E80               	movlw	128
 11974  0003DA  EC6E  F027         	call	_lcdInst
 11975  0003DE  0EC0               	movlw	192
 11976  0003E0  EC6E  F027         	call	_lcdInst
 11977                           
 11978                           ;Test.c: 283: printf("LEFT -- 2s      ");
 11979  0003E4  0ED7               	movlw	low STR_99
 11980  0003E6  0100               	movlb	0	; () banked
 11981  0003E8  6F8E               	movwf	printf@f& (0+255),b
 11982  0003EA  0EFB               	movlw	high STR_99
 11983  0003EC  0100               	movlb	0	; () banked
 11984  0003EE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11985  0003F0  ECB8  F008         	call	_printf	;wreg free
 11986                           
 11987                           ;Test.c: 284: updateServoPosition(2400, 1);
 11988  0003F4  0E09               	movlw	9
 11989  0003F6  0100               	movlb	0	; () banked
 11990  0003F8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11991  0003FA  0E60               	movlw	96
 11992  0003FC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11993  0003FE  0E00               	movlw	0
 11994  000400  0100               	movlb	0	; () banked
 11995  000402  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11996  000404  0E01               	movlw	1
 11997  000406  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11998  000408  ECCA  F021         	call	_updateServoPosition	;wreg free
 11999                           
 12000                           ;Test.c: 285: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12001  00040C  0E00               	movlw	0
 12002  00040E  0100               	movlb	0	; () banked
 12003  000410  6FB2               	movwf	actuatorTest@i_1664& (0+255),b
 12004  000412                     l7368:
 12005                           
 12006                           ; BSR set to: 0
 12007  000412  0E63               	movlw	99
 12008  000414  0100               	movlb	0	; () banked
 12009  000416  65B2               	cpfsgt	actuatorTest@i_1664& (0+255),b
 12010  000418  D001               	goto	l7372
 12011  00041A  D00C               	goto	l7376
 12012  00041C                     l7372:
 12013                           
 12014                           ; BSR set to: 0
 12015  00041C  0E68               	movlw	104
 12016  00041E  0100               	movlb	0	; () banked
 12017  000420  6FAB               	movwf	??_actuatorTest& (0+255),b
 12018  000422  0EE4               	movlw	228
 12019  000424                     u8987:
 12020  000424  2EE8               	decfsz	wreg,f,c
 12021  000426  D7FE               	bra	u8987
 12022  000428  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12023  00042A  D7FC               	bra	u8987
 12024  00042C  F000               	nop	
 12025  00042E  0100               	movlb	0	; () banked
 12026  000430  2BB2               	incf	actuatorTest@i_1664& (0+255),f,b
 12027  000432  D7EF               	goto	l7368
 12028  000434                     l7376:
 12029                           
 12030                           ; BSR set to: 0
 12031  000434  0E00               	movlw	0
 12032  000436  0100               	movlb	0	; () banked
 12033  000438  6FB3               	movwf	actuatorTest@i_1665& (0+255),b
 12034  00043A                     l7378:
 12035                           
 12036                           ; BSR set to: 0
 12037  00043A  0E63               	movlw	99
 12038  00043C  0100               	movlb	0	; () banked
 12039  00043E  65B3               	cpfsgt	actuatorTest@i_1665& (0+255),b
 12040  000440  D001               	goto	l7382
 12041  000442  D00C               	goto	l7386
 12042  000444                     l7382:
 12043                           
 12044                           ; BSR set to: 0
 12045  000444  0E68               	movlw	104
 12046  000446  0100               	movlb	0	; () banked
 12047  000448  6FAB               	movwf	??_actuatorTest& (0+255),b
 12048  00044A  0EE4               	movlw	228
 12049  00044C                     u8997:
 12050  00044C  2EE8               	decfsz	wreg,f,c
 12051  00044E  D7FE               	bra	u8997
 12052  000450  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12053  000452  D7FC               	bra	u8997
 12054  000454  F000               	nop	
 12055  000456  0100               	movlb	0	; () banked
 12056  000458  2BB3               	incf	actuatorTest@i_1665& (0+255),f,b
 12057  00045A  D7EF               	goto	l7378
 12058  00045C                     l7386:
 12059                           
 12060                           ; BSR set to: 0
 12061                           ;Test.c: 287: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12062  00045C  0E80               	movlw	128
 12063  00045E  EC6E  F027         	call	_lcdInst
 12064  000462  0EC0               	movlw	192
 12065  000464  EC6E  F027         	call	_lcdInst
 12066                           
 12067                           ;Test.c: 288: printf("MID-LEFT -- 2s  ");
 12068  000468  0E2C               	movlw	low STR_100
 12069  00046A  0100               	movlb	0	; () banked
 12070  00046C  6F8E               	movwf	printf@f& (0+255),b
 12071  00046E  0EFC               	movlw	high STR_100
 12072  000470  0100               	movlb	0	; () banked
 12073  000472  6F8F               	movwf	(printf@f+1)& (0+255),b
 12074  000474  ECB8  F008         	call	_printf	;wreg free
 12075                           
 12076                           ;Test.c: 289: updateServoPosition(1670, 1);
 12077  000478  0E06               	movlw	6
 12078  00047A  0100               	movlb	0	; () banked
 12079  00047C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12080  00047E  0E86               	movlw	134
 12081  000480  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12082  000482  0E00               	movlw	0
 12083  000484  0100               	movlb	0	; () banked
 12084  000486  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12085  000488  0E01               	movlw	1
 12086  00048A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12087  00048C  ECCA  F021         	call	_updateServoPosition	;wreg free
 12088                           
 12089                           ;Test.c: 290: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12090  000490  0E00               	movlw	0
 12091  000492  0100               	movlb	0	; () banked
 12092  000494  6FB4               	movwf	actuatorTest@i_1667& (0+255),b
 12093  000496                     l7394:
 12094                           
 12095                           ; BSR set to: 0
 12096  000496  0E63               	movlw	99
 12097  000498  0100               	movlb	0	; () banked
 12098  00049A  65B4               	cpfsgt	actuatorTest@i_1667& (0+255),b
 12099  00049C  D001               	goto	l7398
 12100  00049E  D00C               	goto	l7402
 12101  0004A0                     l7398:
 12102                           
 12103                           ; BSR set to: 0
 12104  0004A0  0E68               	movlw	104
 12105  0004A2  0100               	movlb	0	; () banked
 12106  0004A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 12107  0004A6  0EE4               	movlw	228
 12108  0004A8                     u9007:
 12109  0004A8  2EE8               	decfsz	wreg,f,c
 12110  0004AA  D7FE               	bra	u9007
 12111  0004AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12112  0004AE  D7FC               	bra	u9007
 12113  0004B0  F000               	nop	
 12114  0004B2  0100               	movlb	0	; () banked
 12115  0004B4  2BB4               	incf	actuatorTest@i_1667& (0+255),f,b
 12116  0004B6  D7EF               	goto	l7394
 12117  0004B8                     l7402:
 12118                           
 12119                           ; BSR set to: 0
 12120  0004B8  0E00               	movlw	0
 12121  0004BA  0100               	movlb	0	; () banked
 12122  0004BC  6FB5               	movwf	actuatorTest@i_1668& (0+255),b
 12123  0004BE                     l7404:
 12124                           
 12125                           ; BSR set to: 0
 12126  0004BE  0E63               	movlw	99
 12127  0004C0  0100               	movlb	0	; () banked
 12128  0004C2  65B5               	cpfsgt	actuatorTest@i_1668& (0+255),b
 12129  0004C4  D001               	goto	l7408
 12130  0004C6  D00C               	goto	l7412
 12131  0004C8                     l7408:
 12132                           
 12133                           ; BSR set to: 0
 12134  0004C8  0E68               	movlw	104
 12135  0004CA  0100               	movlb	0	; () banked
 12136  0004CC  6FAB               	movwf	??_actuatorTest& (0+255),b
 12137  0004CE  0EE4               	movlw	228
 12138  0004D0                     u9017:
 12139  0004D0  2EE8               	decfsz	wreg,f,c
 12140  0004D2  D7FE               	bra	u9017
 12141  0004D4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12142  0004D6  D7FC               	bra	u9017
 12143  0004D8  F000               	nop	
 12144  0004DA  0100               	movlb	0	; () banked
 12145  0004DC  2BB5               	incf	actuatorTest@i_1668& (0+255),f,b
 12146  0004DE  D7EF               	goto	l7404
 12147  0004E0                     l7412:
 12148                           
 12149                           ; BSR set to: 0
 12150                           ;Test.c: 292: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12151  0004E0  0E80               	movlw	128
 12152  0004E2  EC6E  F027         	call	_lcdInst
 12153  0004E6  0EC0               	movlw	192
 12154  0004E8  EC6E  F027         	call	_lcdInst
 12155                           
 12156                           ;Test.c: 293: printf("MID-RIGHT -- 2s ");
 12157  0004EC  0E3D               	movlw	low STR_101
 12158  0004EE  0100               	movlb	0	; () banked
 12159  0004F0  6F8E               	movwf	printf@f& (0+255),b
 12160  0004F2  0EFC               	movlw	high STR_101
 12161  0004F4  0100               	movlb	0	; () banked
 12162  0004F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 12163  0004F8  ECB8  F008         	call	_printf	;wreg free
 12164                           
 12165                           ;Test.c: 294: updateServoPosition(850, 1);
 12166  0004FC  0E03               	movlw	3
 12167  0004FE  0100               	movlb	0	; () banked
 12168  000500  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12169  000502  0E52               	movlw	82
 12170  000504  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12171  000506  0E00               	movlw	0
 12172  000508  0100               	movlb	0	; () banked
 12173  00050A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12174  00050C  0E01               	movlw	1
 12175  00050E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12176  000510  ECCA  F021         	call	_updateServoPosition	;wreg free
 12177                           
 12178                           ;Test.c: 295: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12179  000514  0E00               	movlw	0
 12180  000516  0100               	movlb	0	; () banked
 12181  000518  6FB6               	movwf	actuatorTest@i_1670& (0+255),b
 12182  00051A                     l7420:
 12183                           
 12184                           ; BSR set to: 0
 12185  00051A  0E63               	movlw	99
 12186  00051C  0100               	movlb	0	; () banked
 12187  00051E  65B6               	cpfsgt	actuatorTest@i_1670& (0+255),b
 12188  000520  D001               	goto	l7424
 12189  000522  D00C               	goto	l7428
 12190  000524                     l7424:
 12191                           
 12192                           ; BSR set to: 0
 12193  000524  0E68               	movlw	104
 12194  000526  0100               	movlb	0	; () banked
 12195  000528  6FAB               	movwf	??_actuatorTest& (0+255),b
 12196  00052A  0EE4               	movlw	228
 12197  00052C                     u9027:
 12198  00052C  2EE8               	decfsz	wreg,f,c
 12199  00052E  D7FE               	bra	u9027
 12200  000530  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12201  000532  D7FC               	bra	u9027
 12202  000534  F000               	nop	
 12203  000536  0100               	movlb	0	; () banked
 12204  000538  2BB6               	incf	actuatorTest@i_1670& (0+255),f,b
 12205  00053A  D7EF               	goto	l7420
 12206  00053C                     l7428:
 12207                           
 12208                           ; BSR set to: 0
 12209  00053C  0E00               	movlw	0
 12210  00053E  0100               	movlb	0	; () banked
 12211  000540  6FB7               	movwf	actuatorTest@i_1671& (0+255),b
 12212  000542                     l7430:
 12213                           
 12214                           ; BSR set to: 0
 12215  000542  0E63               	movlw	99
 12216  000544  0100               	movlb	0	; () banked
 12217  000546  65B7               	cpfsgt	actuatorTest@i_1671& (0+255),b
 12218  000548  D001               	goto	l7434
 12219  00054A  D00C               	goto	l7438
 12220  00054C                     l7434:
 12221                           
 12222                           ; BSR set to: 0
 12223  00054C  0E68               	movlw	104
 12224  00054E  0100               	movlb	0	; () banked
 12225  000550  6FAB               	movwf	??_actuatorTest& (0+255),b
 12226  000552  0EE4               	movlw	228
 12227  000554                     u9037:
 12228  000554  2EE8               	decfsz	wreg,f,c
 12229  000556  D7FE               	bra	u9037
 12230  000558  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12231  00055A  D7FC               	bra	u9037
 12232  00055C  F000               	nop	
 12233  00055E  0100               	movlb	0	; () banked
 12234  000560  2BB7               	incf	actuatorTest@i_1671& (0+255),f,b
 12235  000562  D7EF               	goto	l7430
 12236  000564                     l7438:
 12237                           
 12238                           ; BSR set to: 0
 12239                           ;Test.c: 297: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12240  000564  0E80               	movlw	128
 12241  000566  EC6E  F027         	call	_lcdInst
 12242  00056A  0EC0               	movlw	192
 12243  00056C  EC6E  F027         	call	_lcdInst
 12244                           
 12245                           ;Test.c: 298: printf("MID -- 2s       ");
 12246  000570  0EB5               	movlw	low STR_102
 12247  000572  0100               	movlb	0	; () banked
 12248  000574  6F8E               	movwf	printf@f& (0+255),b
 12249  000576  0EFB               	movlw	high STR_102
 12250  000578  0100               	movlb	0	; () banked
 12251  00057A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12252  00057C  ECB8  F008         	call	_printf	;wreg free
 12253                           
 12254                           ;Test.c: 299: updateServoPosition(1200, 1);
 12255  000580  0E04               	movlw	4
 12256  000582  0100               	movlb	0	; () banked
 12257  000584  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12258  000586  0EB0               	movlw	176
 12259  000588  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12260  00058A  0E00               	movlw	0
 12261  00058C  0100               	movlb	0	; () banked
 12262  00058E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12263  000590  0E01               	movlw	1
 12264  000592  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12265  000594  ECCA  F021         	call	_updateServoPosition	;wreg free
 12266                           
 12267                           ;Test.c: 300: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12268  000598  0E00               	movlw	0
 12269  00059A  0100               	movlb	0	; () banked
 12270  00059C  6FB8               	movwf	actuatorTest@i_1673& (0+255),b
 12271  00059E                     l7446:
 12272                           
 12273                           ; BSR set to: 0
 12274  00059E  0E63               	movlw	99
 12275  0005A0  0100               	movlb	0	; () banked
 12276  0005A2  65B8               	cpfsgt	actuatorTest@i_1673& (0+255),b
 12277  0005A4  D001               	goto	l7450
 12278  0005A6  D00C               	goto	l7454
 12279  0005A8                     l7450:
 12280                           
 12281                           ; BSR set to: 0
 12282  0005A8  0E68               	movlw	104
 12283  0005AA  0100               	movlb	0	; () banked
 12284  0005AC  6FAB               	movwf	??_actuatorTest& (0+255),b
 12285  0005AE  0EE4               	movlw	228
 12286  0005B0                     u9047:
 12287  0005B0  2EE8               	decfsz	wreg,f,c
 12288  0005B2  D7FE               	bra	u9047
 12289  0005B4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12290  0005B6  D7FC               	bra	u9047
 12291  0005B8  F000               	nop	
 12292  0005BA  0100               	movlb	0	; () banked
 12293  0005BC  2BB8               	incf	actuatorTest@i_1673& (0+255),f,b
 12294  0005BE  D7EF               	goto	l7446
 12295  0005C0                     l7454:
 12296                           
 12297                           ; BSR set to: 0
 12298  0005C0  0E00               	movlw	0
 12299  0005C2  0100               	movlb	0	; () banked
 12300  0005C4  6FB9               	movwf	actuatorTest@i_1674& (0+255),b
 12301  0005C6                     l7456:
 12302                           
 12303                           ; BSR set to: 0
 12304  0005C6  0E63               	movlw	99
 12305  0005C8  0100               	movlb	0	; () banked
 12306  0005CA  65B9               	cpfsgt	actuatorTest@i_1674& (0+255),b
 12307  0005CC  D001               	goto	l7460
 12308  0005CE  D00C               	goto	l1184
 12309  0005D0                     l7460:
 12310                           
 12311                           ; BSR set to: 0
 12312  0005D0  0E68               	movlw	104
 12313  0005D2  0100               	movlb	0	; () banked
 12314  0005D4  6FAB               	movwf	??_actuatorTest& (0+255),b
 12315  0005D6  0EE4               	movlw	228
 12316  0005D8                     u9057:
 12317  0005D8  2EE8               	decfsz	wreg,f,c
 12318  0005DA  D7FE               	bra	u9057
 12319  0005DC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12320  0005DE  D7FC               	bra	u9057
 12321  0005E0  F000               	nop	
 12322  0005E2  0100               	movlb	0	; () banked
 12323  0005E4  2BB9               	incf	actuatorTest@i_1674& (0+255),f,b
 12324  0005E6  D7EF               	goto	l7456
 12325  0005E8                     l1184:
 12326                           
 12327                           ; BSR set to: 0
 12328                           ;Test.c: 301: TMR1ON = 0;
 12329  0005E8  90CD               	bcf	4045,0,c	;volatile
 12330                           
 12331                           ; BSR set to: 0
 12332                           ;Test.c: 308: printf("TST: TILT SERVO");
 12333  0005EA  0E3A               	movlw	low STR_103
 12334  0005EC  0100               	movlb	0	; () banked
 12335  0005EE  6F8E               	movwf	printf@f& (0+255),b
 12336  0005F0  0EFE               	movlw	high STR_103
 12337  0005F2  0100               	movlb	0	; () banked
 12338  0005F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12339  0005F6  ECB8  F008         	call	_printf	;wreg free
 12340                           
 12341                           ;Test.c: 309: lcdInst(0b11000000);;
 12342  0005FA  0EC0               	movlw	192
 12343  0005FC  EC6E  F027         	call	_lcdInst
 12344                           
 12345                           ;Test.c: 310: printf("LEVEL -- 2s     ");
 12346  000600  0EE8               	movlw	low STR_104
 12347  000602  0100               	movlb	0	; () banked
 12348  000604  6F8E               	movwf	printf@f& (0+255),b
 12349  000606  0EFB               	movlw	high STR_104
 12350  000608  0100               	movlb	0	; () banked
 12351  00060A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12352  00060C  ECB8  F008         	call	_printf	;wreg free
 12353                           
 12354                           ;Test.c: 311: updateServoPosition(1050, 3);
 12355  000610  0E04               	movlw	4
 12356  000612  0100               	movlb	0	; () banked
 12357  000614  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12358  000616  0E1A               	movlw	26
 12359  000618  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12360  00061A  0E00               	movlw	0
 12361  00061C  0100               	movlb	0	; () banked
 12362  00061E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12363  000620  0E03               	movlw	3
 12364  000622  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12365  000624  ECCA  F021         	call	_updateServoPosition	;wreg free
 12366                           
 12367                           ;Test.c: 312: TMR3ON = 1;
 12368  000628  80B1               	bsf	4017,0,c	;volatile
 12369                           
 12370                           ;Test.c: 313: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12371  00062A  0E00               	movlw	0
 12372  00062C  0100               	movlb	0	; () banked
 12373  00062E  6FBA               	movwf	actuatorTest@i_1677& (0+255),b
 12374  000630                     l7474:
 12375                           
 12376                           ; BSR set to: 0
 12377  000630  0E63               	movlw	99
 12378  000632  0100               	movlb	0	; () banked
 12379  000634  65BA               	cpfsgt	actuatorTest@i_1677& (0+255),b
 12380  000636  D001               	goto	l7478
 12381  000638  D00C               	goto	l7482
 12382  00063A                     l7478:
 12383                           
 12384                           ; BSR set to: 0
 12385  00063A  0E68               	movlw	104
 12386  00063C  0100               	movlb	0	; () banked
 12387  00063E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12388  000640  0EE4               	movlw	228
 12389  000642                     u9067:
 12390  000642  2EE8               	decfsz	wreg,f,c
 12391  000644  D7FE               	bra	u9067
 12392  000646  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12393  000648  D7FC               	bra	u9067
 12394  00064A  F000               	nop	
 12395  00064C  0100               	movlb	0	; () banked
 12396  00064E  2BBA               	incf	actuatorTest@i_1677& (0+255),f,b
 12397  000650  D7EF               	goto	l7474
 12398  000652                     l7482:
 12399                           
 12400                           ; BSR set to: 0
 12401  000652  0E00               	movlw	0
 12402  000654  0100               	movlb	0	; () banked
 12403  000656  6FBB               	movwf	actuatorTest@i_1678& (0+255),b
 12404  000658                     l7484:
 12405                           
 12406                           ; BSR set to: 0
 12407  000658  0E63               	movlw	99
 12408  00065A  0100               	movlb	0	; () banked
 12409  00065C  65BB               	cpfsgt	actuatorTest@i_1678& (0+255),b
 12410  00065E  D001               	goto	l7488
 12411  000660  D00C               	goto	l7492
 12412  000662                     l7488:
 12413                           
 12414                           ; BSR set to: 0
 12415  000662  0E68               	movlw	104
 12416  000664  0100               	movlb	0	; () banked
 12417  000666  6FAB               	movwf	??_actuatorTest& (0+255),b
 12418  000668  0EE4               	movlw	228
 12419  00066A                     u9077:
 12420  00066A  2EE8               	decfsz	wreg,f,c
 12421  00066C  D7FE               	bra	u9077
 12422  00066E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12423  000670  D7FC               	bra	u9077
 12424  000672  F000               	nop	
 12425  000674  0100               	movlb	0	; () banked
 12426  000676  2BBB               	incf	actuatorTest@i_1678& (0+255),f,b
 12427  000678  D7EF               	goto	l7484
 12428  00067A                     l7492:
 12429                           
 12430                           ; BSR set to: 0
 12431                           ;Test.c: 315: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12432  00067A  0E80               	movlw	128
 12433  00067C  EC6E  F027         	call	_lcdInst
 12434  000680  0EC0               	movlw	192
 12435  000682  EC6E  F027         	call	_lcdInst
 12436                           
 12437                           ;Test.c: 316: printf("DROP -- 2s      ");
 12438  000686  0EC6               	movlw	low STR_105
 12439  000688  0100               	movlb	0	; () banked
 12440  00068A  6F8E               	movwf	printf@f& (0+255),b
 12441  00068C  0EFB               	movlw	high STR_105
 12442  00068E  0100               	movlb	0	; () banked
 12443  000690  6F8F               	movwf	(printf@f+1)& (0+255),b
 12444  000692  ECB8  F008         	call	_printf	;wreg free
 12445                           
 12446                           ;Test.c: 317: updateServoPosition(1260, 3);
 12447  000696  0E04               	movlw	4
 12448  000698  0100               	movlb	0	; () banked
 12449  00069A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12450  00069C  0EEC               	movlw	236
 12451  00069E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12452  0006A0  0E00               	movlw	0
 12453  0006A2  0100               	movlb	0	; () banked
 12454  0006A4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12455  0006A6  0E03               	movlw	3
 12456  0006A8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12457  0006AA  ECCA  F021         	call	_updateServoPosition	;wreg free
 12458                           
 12459                           ;Test.c: 318: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12460  0006AE  0E00               	movlw	0
 12461  0006B0  0100               	movlb	0	; () banked
 12462  0006B2  6FBC               	movwf	actuatorTest@i_1680& (0+255),b
 12463  0006B4                     l7500:
 12464                           
 12465                           ; BSR set to: 0
 12466  0006B4  0E63               	movlw	99
 12467  0006B6  0100               	movlb	0	; () banked
 12468  0006B8  65BC               	cpfsgt	actuatorTest@i_1680& (0+255),b
 12469  0006BA  D001               	goto	l7504
 12470  0006BC  D00C               	goto	l7508
 12471  0006BE                     l7504:
 12472                           
 12473                           ; BSR set to: 0
 12474  0006BE  0E68               	movlw	104
 12475  0006C0  0100               	movlb	0	; () banked
 12476  0006C2  6FAB               	movwf	??_actuatorTest& (0+255),b
 12477  0006C4  0EE4               	movlw	228
 12478  0006C6                     u9087:
 12479  0006C6  2EE8               	decfsz	wreg,f,c
 12480  0006C8  D7FE               	bra	u9087
 12481  0006CA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12482  0006CC  D7FC               	bra	u9087
 12483  0006CE  F000               	nop	
 12484  0006D0  0100               	movlb	0	; () banked
 12485  0006D2  2BBC               	incf	actuatorTest@i_1680& (0+255),f,b
 12486  0006D4  D7EF               	goto	l7500
 12487  0006D6                     l7508:
 12488                           
 12489                           ; BSR set to: 0
 12490  0006D6  0E00               	movlw	0
 12491  0006D8  0100               	movlb	0	; () banked
 12492  0006DA  6FBD               	movwf	actuatorTest@i_1681& (0+255),b
 12493  0006DC                     l7510:
 12494                           
 12495                           ; BSR set to: 0
 12496  0006DC  0E63               	movlw	99
 12497  0006DE  0100               	movlb	0	; () banked
 12498  0006E0  65BD               	cpfsgt	actuatorTest@i_1681& (0+255),b
 12499  0006E2  D001               	goto	l7514
 12500  0006E4  D00C               	goto	l7518
 12501  0006E6                     l7514:
 12502                           
 12503                           ; BSR set to: 0
 12504  0006E6  0E68               	movlw	104
 12505  0006E8  0100               	movlb	0	; () banked
 12506  0006EA  6FAB               	movwf	??_actuatorTest& (0+255),b
 12507  0006EC  0EE4               	movlw	228
 12508  0006EE                     u9097:
 12509  0006EE  2EE8               	decfsz	wreg,f,c
 12510  0006F0  D7FE               	bra	u9097
 12511  0006F2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12512  0006F4  D7FC               	bra	u9097
 12513  0006F6  F000               	nop	
 12514  0006F8  0100               	movlb	0	; () banked
 12515  0006FA  2BBD               	incf	actuatorTest@i_1681& (0+255),f,b
 12516  0006FC  D7EF               	goto	l7510
 12517  0006FE                     l7518:
 12518                           
 12519                           ; BSR set to: 0
 12520                           ;Test.c: 320: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12521  0006FE  0E80               	movlw	128
 12522  000700  EC6E  F027         	call	_lcdInst
 12523  000704  0EC0               	movlw	192
 12524  000706  EC6E  F027         	call	_lcdInst
 12525                           
 12526                           ;Test.c: 321: printf("LEVEL -- 2s     ");
 12527  00070A  0EE8               	movlw	low STR_104
 12528  00070C  0100               	movlb	0	; () banked
 12529  00070E  6F8E               	movwf	printf@f& (0+255),b
 12530  000710  0EFB               	movlw	high STR_104
 12531  000712  0100               	movlb	0	; () banked
 12532  000714  6F8F               	movwf	(printf@f+1)& (0+255),b
 12533  000716  ECB8  F008         	call	_printf	;wreg free
 12534                           
 12535                           ;Test.c: 322: updateServoPosition(1050, 3);
 12536  00071A  0E04               	movlw	4
 12537  00071C  0100               	movlb	0	; () banked
 12538  00071E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12539  000720  0E1A               	movlw	26
 12540  000722  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12541  000724  0E00               	movlw	0
 12542  000726  0100               	movlb	0	; () banked
 12543  000728  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12544  00072A  0E03               	movlw	3
 12545  00072C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12546  00072E  ECCA  F021         	call	_updateServoPosition	;wreg free
 12547                           
 12548                           ;Test.c: 323: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12549  000732  0E00               	movlw	0
 12550  000734  0100               	movlb	0	; () banked
 12551  000736  6FBE               	movwf	actuatorTest@i_1683& (0+255),b
 12552  000738                     l7526:
 12553                           
 12554                           ; BSR set to: 0
 12555  000738  0E63               	movlw	99
 12556  00073A  0100               	movlb	0	; () banked
 12557  00073C  65BE               	cpfsgt	actuatorTest@i_1683& (0+255),b
 12558  00073E  D001               	goto	l7530
 12559  000740  D00C               	goto	l7534
 12560  000742                     l7530:
 12561                           
 12562                           ; BSR set to: 0
 12563  000742  0E68               	movlw	104
 12564  000744  0100               	movlb	0	; () banked
 12565  000746  6FAB               	movwf	??_actuatorTest& (0+255),b
 12566  000748  0EE4               	movlw	228
 12567  00074A                     u9107:
 12568  00074A  2EE8               	decfsz	wreg,f,c
 12569  00074C  D7FE               	bra	u9107
 12570  00074E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12571  000750  D7FC               	bra	u9107
 12572  000752  F000               	nop	
 12573  000754  0100               	movlb	0	; () banked
 12574  000756  2BBE               	incf	actuatorTest@i_1683& (0+255),f,b
 12575  000758  D7EF               	goto	l7526
 12576  00075A                     l7534:
 12577                           
 12578                           ; BSR set to: 0
 12579  00075A  0E00               	movlw	0
 12580  00075C  0100               	movlb	0	; () banked
 12581  00075E  6FBF               	movwf	actuatorTest@i_1684& (0+255),b
 12582  000760                     l7536:
 12583                           
 12584                           ; BSR set to: 0
 12585  000760  0E63               	movlw	99
 12586  000762  0100               	movlb	0	; () banked
 12587  000764  65BF               	cpfsgt	actuatorTest@i_1684& (0+255),b
 12588  000766  D001               	goto	l7540
 12589  000768  D00C               	goto	l1196
 12590  00076A                     l7540:
 12591                           
 12592                           ; BSR set to: 0
 12593  00076A  0E68               	movlw	104
 12594  00076C  0100               	movlb	0	; () banked
 12595  00076E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12596  000770  0EE4               	movlw	228
 12597  000772                     u9117:
 12598  000772  2EE8               	decfsz	wreg,f,c
 12599  000774  D7FE               	bra	u9117
 12600  000776  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12601  000778  D7FC               	bra	u9117
 12602  00077A  F000               	nop	
 12603  00077C  0100               	movlb	0	; () banked
 12604  00077E  2BBF               	incf	actuatorTest@i_1684& (0+255),f,b
 12605  000780  D7EF               	goto	l7536
 12606  000782                     l1196:
 12607                           
 12608                           ; BSR set to: 0
 12609                           ;Test.c: 324: TMR3ON = 0;
 12610  000782  90B1               	bcf	4017,0,c	;volatile
 12611                           
 12612                           ;Test.c: 325: (INTCONbits.GIE = 0);
 12613  000784  9EF2               	bcf	intcon,7,c	;volatile
 12614                           
 12615                           ; BSR set to: 0
 12616                           ;Test.c: 330: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12617  000786  0E01               	movlw	1
 12618  000788  EC6E  F027         	call	_lcdInst
 12619  00078C  0E68               	movlw	104
 12620  00078E  0100               	movlb	0	; () banked
 12621  000790  6FAB               	movwf	??_actuatorTest& (0+255),b
 12622  000792  0EE4               	movlw	228
 12623  000794                     u9127:
 12624  000794  2EE8               	decfsz	wreg,f,c
 12625  000796  D7FE               	bra	u9127
 12626  000798  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12627  00079A  D7FC               	bra	u9127
 12628  00079C  F000               	nop	
 12629  00079E  0E80               	movlw	128
 12630  0007A0  EC6E  F027         	call	_lcdInst
 12631                           
 12632                           ;Test.c: 331: printf("TST: CAM SERVO");
 12633  0007A4  0E96               	movlw	low STR_107
 12634  0007A6  0100               	movlb	0	; () banked
 12635  0007A8  6F8E               	movwf	printf@f& (0+255),b
 12636  0007AA  0EFE               	movlw	high STR_107
 12637  0007AC  0100               	movlb	0	; () banked
 12638  0007AE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12639  0007B0  ECB8  F008         	call	_printf	;wreg free
 12640                           
 12641                           ;Test.c: 332: lcdInst(0b11000000);;
 12642  0007B4  0EC0               	movlw	192
 12643  0007B6  EC6E  F027         	call	_lcdInst
 12644                           
 12645                           ;Test.c: 333: printf("CAM UP  |RC0=1");
 12646  0007BA  0E78               	movlw	low STR_108
 12647  0007BC  0100               	movlb	0	; () banked
 12648  0007BE  6F8E               	movwf	printf@f& (0+255),b
 12649  0007C0  0EFE               	movlw	high STR_108
 12650  0007C2  0100               	movlb	0	; () banked
 12651  0007C4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12652  0007C6  ECB8  F008         	call	_printf	;wreg free
 12653                           
 12654                           ;Test.c: 334: LATCbits.LATC0 = 1;
 12655  0007CA  808B               	bsf	3979,0,c	;volatile
 12656                           
 12657                           ;Test.c: 335: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12658  0007CC  0E00               	movlw	0
 12659  0007CE  0100               	movlb	0	; () banked
 12660  0007D0  6FC0               	movwf	actuatorTest@i_1687& (0+255),b
 12661  0007D2                     l7560:
 12662                           
 12663                           ; BSR set to: 0
 12664  0007D2  0E63               	movlw	99
 12665  0007D4  0100               	movlb	0	; () banked
 12666  0007D6  65C0               	cpfsgt	actuatorTest@i_1687& (0+255),b
 12667  0007D8  D001               	goto	l7564
 12668  0007DA  D00C               	goto	l7568
 12669  0007DC                     l7564:
 12670                           
 12671                           ; BSR set to: 0
 12672  0007DC  0E68               	movlw	104
 12673  0007DE  0100               	movlb	0	; () banked
 12674  0007E0  6FAB               	movwf	??_actuatorTest& (0+255),b
 12675  0007E2  0EE4               	movlw	228
 12676  0007E4                     u9137:
 12677  0007E4  2EE8               	decfsz	wreg,f,c
 12678  0007E6  D7FE               	bra	u9137
 12679  0007E8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12680  0007EA  D7FC               	bra	u9137
 12681  0007EC  F000               	nop	
 12682  0007EE  0100               	movlb	0	; () banked
 12683  0007F0  2BC0               	incf	actuatorTest@i_1687& (0+255),f,b
 12684  0007F2  D7EF               	goto	l7560
 12685  0007F4                     l7568:
 12686                           
 12687                           ; BSR set to: 0
 12688  0007F4  0E00               	movlw	0
 12689  0007F6  0100               	movlb	0	; () banked
 12690  0007F8  6FC1               	movwf	actuatorTest@i_1688& (0+255),b
 12691  0007FA                     l7570:
 12692                           
 12693                           ; BSR set to: 0
 12694  0007FA  0E63               	movlw	99
 12695  0007FC  0100               	movlb	0	; () banked
 12696  0007FE  65C1               	cpfsgt	actuatorTest@i_1688& (0+255),b
 12697  000800  D001               	goto	l7574
 12698  000802  D00C               	goto	l7578
 12699  000804                     l7574:
 12700                           
 12701                           ; BSR set to: 0
 12702  000804  0E68               	movlw	104
 12703  000806  0100               	movlb	0	; () banked
 12704  000808  6FAB               	movwf	??_actuatorTest& (0+255),b
 12705  00080A  0EE4               	movlw	228
 12706  00080C                     u9147:
 12707  00080C  2EE8               	decfsz	wreg,f,c
 12708  00080E  D7FE               	bra	u9147
 12709  000810  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12710  000812  D7FC               	bra	u9147
 12711  000814  F000               	nop	
 12712  000816  0100               	movlb	0	; () banked
 12713  000818  2BC1               	incf	actuatorTest@i_1688& (0+255),f,b
 12714  00081A  D7EF               	goto	l7570
 12715  00081C                     l7578:
 12716                           
 12717                           ; BSR set to: 0
 12718                           ;Test.c: 336: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12719  00081C  0E80               	movlw	128
 12720  00081E  EC6E  F027         	call	_lcdInst
 12721  000822  0EC0               	movlw	192
 12722  000824  EC6E  F027         	call	_lcdInst
 12723                           
 12724                           ;Test.c: 337: printf("CAM DWN |RC0=0");
 12725  000828  0E69               	movlw	low STR_109
 12726  00082A  0100               	movlb	0	; () banked
 12727  00082C  6F8E               	movwf	printf@f& (0+255),b
 12728  00082E  0EFE               	movlw	high STR_109
 12729  000830  0100               	movlb	0	; () banked
 12730  000832  6F8F               	movwf	(printf@f+1)& (0+255),b
 12731  000834  ECB8  F008         	call	_printf	;wreg free
 12732                           
 12733                           ;Test.c: 340: for(i=0;i<10000;i++)
 12734  000838  0E00               	movlw	0
 12735  00083A  0100               	movlb	0	; () banked
 12736  00083C  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12737  00083E  0E00               	movlw	0
 12738  000840  6FC4               	movwf	actuatorTest@i& (0+255),b
 12739  000842                     l7584:
 12740                           
 12741                           ; BSR set to: 0
 12742  000842  0100               	movlb	0	; () banked
 12743  000844  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12744  000846  D008               	goto	l1201
 12745  000848  0E10               	movlw	16
 12746  00084A  0100               	movlb	0	; () banked
 12747  00084C  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 12748  00084E  0E27               	movlw	39
 12749  000850  0100               	movlb	0	; () banked
 12750  000852  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 12751  000854  B0D8               	btfsc	status,0,c
 12752  000856  D00D               	goto	l7594
 12753  000858                     l1201:
 12754                           
 12755                           ; BSR set to: 0
 12756                           ;Test.c: 341: {
 12757                           ;Test.c: 342: LATCbits.LATC0 = 1;
 12758  000858  808B               	bsf	3979,0,c	;volatile
 12759                           
 12760                           ; BSR set to: 0
 12761                           ;Test.c: 343: _delay((unsigned long)((10)*(32000000/4000000.0)));
 12762  00085A  0E1A               	movlw	26
 12763  00085C                     u9157:
 12764  00085C  2EE8               	decfsz	wreg,f,c
 12765  00085E  D7FE               	bra	u9157
 12766  000860  D000               	nop2	
 12767                           
 12768                           ;Test.c: 344: LATCbits.LATC0 = 0;
 12769  000862  908B               	bcf	3979,0,c	;volatile
 12770                           
 12771                           ;Test.c: 345: _delay((unsigned long)((90)*(32000000/4000000.0)));
 12772  000864  0EF0               	movlw	240
 12773  000866                     u9167:
 12774  000866  2EE8               	decfsz	wreg,f,c
 12775  000868  D7FE               	bra	u9167
 12776  00086A  0100               	movlb	0	; () banked
 12777  00086C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12778  00086E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12779  000870  D7E8               	goto	l7584
 12780  000872                     l7594:
 12781                           
 12782                           ; BSR set to: 0
 12783                           ;Test.c: 346: }
 12784                           ;Test.c: 348: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12785  000872  0E00               	movlw	0
 12786  000874  0100               	movlb	0	; () banked
 12787  000876  6FC2               	movwf	actuatorTest@i_1690& (0+255),b
 12788  000878                     l7596:
 12789                           
 12790                           ; BSR set to: 0
 12791  000878  0E63               	movlw	99
 12792  00087A  0100               	movlb	0	; () banked
 12793  00087C  65C2               	cpfsgt	actuatorTest@i_1690& (0+255),b
 12794  00087E  D001               	goto	l7600
 12795  000880  D00C               	goto	l7604
 12796  000882                     l7600:
 12797                           
 12798                           ; BSR set to: 0
 12799  000882  0E68               	movlw	104
 12800  000884  0100               	movlb	0	; () banked
 12801  000886  6FAB               	movwf	??_actuatorTest& (0+255),b
 12802  000888  0EE4               	movlw	228
 12803  00088A                     u9177:
 12804  00088A  2EE8               	decfsz	wreg,f,c
 12805  00088C  D7FE               	bra	u9177
 12806  00088E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12807  000890  D7FC               	bra	u9177
 12808  000892  F000               	nop	
 12809  000894  0100               	movlb	0	; () banked
 12810  000896  2BC2               	incf	actuatorTest@i_1690& (0+255),f,b
 12811  000898  D7EF               	goto	l7596
 12812  00089A                     l7604:
 12813                           
 12814                           ; BSR set to: 0
 12815  00089A  0E00               	movlw	0
 12816  00089C  0100               	movlb	0	; () banked
 12817  00089E  6FC3               	movwf	actuatorTest@i_1691& (0+255),b
 12818  0008A0                     l7606:
 12819                           
 12820                           ; BSR set to: 0
 12821  0008A0  0E63               	movlw	99
 12822  0008A2  0100               	movlb	0	; () banked
 12823  0008A4  65C3               	cpfsgt	actuatorTest@i_1691& (0+255),b
 12824  0008A6  D001               	goto	l7610
 12825  0008A8  D00C               	goto	l7614
 12826  0008AA                     l7610:
 12827                           
 12828                           ; BSR set to: 0
 12829  0008AA  0E68               	movlw	104
 12830  0008AC  0100               	movlb	0	; () banked
 12831  0008AE  6FAB               	movwf	??_actuatorTest& (0+255),b
 12832  0008B0  0EE4               	movlw	228
 12833  0008B2                     u9187:
 12834  0008B2  2EE8               	decfsz	wreg,f,c
 12835  0008B4  D7FE               	bra	u9187
 12836  0008B6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12837  0008B8  D7FC               	bra	u9187
 12838  0008BA  F000               	nop	
 12839  0008BC  0100               	movlb	0	; () banked
 12840  0008BE  2BC3               	incf	actuatorTest@i_1691& (0+255),f,b
 12841  0008C0  D7EF               	goto	l7606
 12842  0008C2                     l7614:
 12843                           
 12844                           ; BSR set to: 0
 12845                           ;Test.c: 349: machine_state = Testing_state;
 12846  0008C2  0E03               	movlw	3
 12847  0008C4  0100               	movlb	0	; () banked
 12848  0008C6  6FFC               	movwf	_machine_state& (0+255),b
 12849                           
 12850                           ; BSR set to: 0
 12851  0008C8  0012               	return		;funcret
 12852  0008CA                     __end_of_actuatorTest:
 12853                           	opt stack 0
 12854                           tblptru	equ	0xFF8
 12855                           tblptrh	equ	0xFF7
 12856                           tblptrl	equ	0xFF6
 12857                           tablat	equ	0xFF5
 12858                           prodh	equ	0xFF4
 12859                           prodl	equ	0xFF3
 12860                           intcon	equ	0xFF2
 12861                           intcon2	equ	0xFF1
 12862                           intcon3	equ	0xFF0
 12863                           postinc0	equ	0xFEE
 12864                           wreg	equ	0xFE8
 12865                           postdec1	equ	0xFE5
 12866                           fsr1l	equ	0xFE1
 12867                           indf2	equ	0xFDF
 12868                           postinc2	equ	0xFDE
 12869                           postdec2	equ	0xFDD
 12870                           fsr2h	equ	0xFDA
 12871                           fsr2l	equ	0xFD9
 12872                           status	equ	0xFD8
 12873                           
 12874 ;; *************** function _SpeedTest *****************
 12875 ;; Defined at:
 12876 ;;		line 549 in file "Test.c"
 12877 ;; Parameters:    Size  Location     Type
 12878 ;;		None
 12879 ;; Auto vars:     Size  Location     Type
 12880 ;;		None
 12881 ;; Return value:  Size  Location     Type
 12882 ;;                  1    wreg      void 
 12883 ;; Registers used:
 12884 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12885 ;; Tracked objects:
 12886 ;;		On entry : 0/0
 12887 ;;		On exit  : 0/0
 12888 ;;		Unchanged: 0/0
 12889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12891 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12892 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12893 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12894 ;;Total ram usage:        1 bytes
 12895 ;; Hardware stack levels used:    1
 12896 ;; Hardware stack levels required when called:   10
 12897 ;; This function calls:
 12898 ;;		_lcdInst
 12899 ;;		_printf
 12900 ;; This function is called by:
 12901 ;;		_Test
 12902 ;; This function uses a non-reentrant model
 12903 ;;
 12904                           
 12905                           	psect	text41
 12906  004194                     __ptext41:
 12907                           	opt stack 0
 12908  004194                     _SpeedTest:
 12909                           	opt stack 19
 12910                           
 12911                           ;Test.c: 551: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12912                           
 12913                           ; BSR set to: 0
 12914                           ;incstack = 0
 12915  004194  0E01               	movlw	1
 12916  004196  EC6E  F027         	call	_lcdInst
 12917  00419A  0E68               	movlw	104
 12918  00419C  0100               	movlb	0	; () banked
 12919  00419E  6FAB               	movwf	??_SpeedTest& (0+255),b
 12920  0041A0  0EE4               	movlw	228
 12921  0041A2                     u9197:
 12922  0041A2  2EE8               	decfsz	wreg,f,c
 12923  0041A4  D7FE               	bra	u9197
 12924  0041A6  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 12925  0041A8  D7FC               	bra	u9197
 12926  0041AA  F000               	nop	
 12927  0041AC  0E80               	movlw	128
 12928  0041AE  EC6E  F027         	call	_lcdInst
 12929                           
 12930                           ;Test.c: 552: printf("S: D WILL RETURN ");
 12931  0041B2  0E5B               	movlw	low STR_120
 12932  0041B4  0100               	movlb	0	; () banked
 12933  0041B6  6F8E               	movwf	printf@f& (0+255),b
 12934  0041B8  0EFB               	movlw	high STR_120
 12935  0041BA  0100               	movlb	0	; () banked
 12936  0041BC  6F8F               	movwf	(printf@f+1)& (0+255),b
 12937  0041BE  ECB8  F008         	call	_printf	;wreg free
 12938                           
 12939                           ;Test.c: 553: lcdInst(0b11000000);;
 12940  0041C2  0EC0               	movlw	192
 12941  0041C4  EC6E  F027         	call	_lcdInst
 12942                           
 12943                           ;Test.c: 554: printf("OTHER SETS RA5   ");
 12944  0041C8  0E49               	movlw	low STR_112
 12945  0041CA  0100               	movlb	0	; () banked
 12946  0041CC  6F8E               	movwf	printf@f& (0+255),b
 12947  0041CE  0EFB               	movlw	high STR_112
 12948  0041D0  0100               	movlb	0	; () banked
 12949  0041D2  6F8F               	movwf	(printf@f+1)& (0+255),b
 12950  0041D4  ECB8  F008         	call	_printf	;wreg free
 12951  0041D8                     l1287:
 12952  0041D8  A281               	btfss	3969,1,c	;volatile
 12953  0041DA  D7FE               	goto	l1287
 12954                           
 12955                           ;Test.c: 559: }
 12956                           ;Test.c: 560: if(PORTB >> 4 == 0b1111){
 12957  0041DC  3881               	swapf	3969,w,c	;volatile
 12958  0041DE  0B0F               	andlw	15
 12959  0041E0  0A0F               	xorlw	15
 12960  0041E2  B4D8               	btfsc	status,2,c
 12961  0041E4  0012               	return	
 12962  0041E6  D014               	goto	l7656
 12963  0041E8                     l1294:
 12964                           
 12965                           ;Test.c: 565: LATAbits.LATA5 = 1;
 12966  0041E8  8A89               	bsf	3977,5,c	;volatile
 12967                           
 12968                           ;Test.c: 566: _delay((unsigned long)((5)*(32000000/4000.0)));
 12969  0041EA  0E34               	movlw	52
 12970  0041EC  0100               	movlb	0	; () banked
 12971  0041EE  6FAB               	movwf	??_SpeedTest& (0+255),b
 12972  0041F0  0EF1               	movlw	241
 12973  0041F2                     u9207:
 12974  0041F2  2EE8               	decfsz	wreg,f,c
 12975  0041F4  D7FE               	bra	u9207
 12976  0041F6  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 12977  0041F8  D7FC               	bra	u9207
 12978  0041FA  D000               	nop2	
 12979                           
 12980                           ;Test.c: 567: LATAbits.LATA5 = 0;
 12981  0041FC  9A89               	bcf	3977,5,c	;volatile
 12982                           
 12983                           ;Test.c: 568: _delay((unsigned long)((5)*(32000000/4000.0)));
 12984  0041FE  0E34               	movlw	52
 12985  004200  0100               	movlb	0	; () banked
 12986  004202  6FAB               	movwf	??_SpeedTest& (0+255),b
 12987  004204  0EF1               	movlw	241
 12988  004206                     u9217:
 12989  004206  2EE8               	decfsz	wreg,f,c
 12990  004208  D7FE               	bra	u9217
 12991  00420A  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 12992  00420C  D7FC               	bra	u9217
 12993  00420E  D000               	nop2	
 12994  004210                     l7656:
 12995  004210  B281               	btfsc	3969,1,c	;volatile
 12996  004212  D7EA               	goto	l1294
 12997                           
 12998                           ;Test.c: 571: }
 12999                           ;Test.c: 572: LATAbits.LATA5 = 0;
 13000  004214  9A89               	bcf	3977,5,c	;volatile
 13001  004216  D7E0               	goto	l1287
 13002  004218                     __end_of_SpeedTest:
 13003                           	opt stack 0
 13004                           tblptru	equ	0xFF8
 13005                           tblptrh	equ	0xFF7
 13006                           tblptrl	equ	0xFF6
 13007                           tablat	equ	0xFF5
 13008                           prodh	equ	0xFF4
 13009                           prodl	equ	0xFF3
 13010                           intcon	equ	0xFF2
 13011                           intcon2	equ	0xFF1
 13012                           intcon3	equ	0xFF0
 13013                           postinc0	equ	0xFEE
 13014                           wreg	equ	0xFE8
 13015                           postdec1	equ	0xFE5
 13016                           fsr1l	equ	0xFE1
 13017                           indf2	equ	0xFDF
 13018                           postinc2	equ	0xFDE
 13019                           postdec2	equ	0xFDD
 13020                           fsr2h	equ	0xFDA
 13021                           fsr2l	equ	0xFD9
 13022                           status	equ	0xFD8
 13023                           
 13024 ;; *************** function _PusherTest *****************
 13025 ;; Defined at:
 13026 ;;		line 467 in file "Test.c"
 13027 ;; Parameters:    Size  Location     Type
 13028 ;;		None
 13029 ;; Auto vars:     Size  Location     Type
 13030 ;;  i               2   51[BANK0 ] int 
 13031 ;;  i               2   49[BANK0 ] int 
 13032 ;;  res             2   47[BANK0 ] int 
 13033 ;;  res             2   45[BANK0 ] int 
 13034 ;; Return value:  Size  Location     Type
 13035 ;;                  1    wreg      void 
 13036 ;; Registers used:
 13037 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13038 ;; Tracked objects:
 13039 ;;		On entry : 0/0
 13040 ;;		On exit  : 0/0
 13041 ;;		Unchanged: 0/0
 13042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13044 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13045 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13046 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13047 ;;Total ram usage:       10 bytes
 13048 ;; Hardware stack levels used:    1
 13049 ;; Hardware stack levels required when called:   10
 13050 ;; This function calls:
 13051 ;;		_lcdInst
 13052 ;;		_printf
 13053 ;;		_readADC
 13054 ;; This function is called by:
 13055 ;;		_Test
 13056 ;; This function uses a non-reentrant model
 13057 ;;
 13058                           
 13059                           	psect	text42
 13060  00286E                     __ptext42:
 13061                           	opt stack 0
 13062  00286E                     _PusherTest:
 13063                           	opt stack 19
 13064                           
 13065                           ;Test.c: 468: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13066                           
 13067                           ;incstack = 0
 13068  00286E  0E01               	movlw	1
 13069  002870  EC6E  F027         	call	_lcdInst
 13070  002874  0E68               	movlw	104
 13071  002876  0100               	movlb	0	; () banked
 13072  002878  6FAB               	movwf	??_PusherTest& (0+255),b
 13073  00287A  0EE4               	movlw	228
 13074  00287C                     u9227:
 13075  00287C  2EE8               	decfsz	wreg,f,c
 13076  00287E  D7FE               	bra	u9227
 13077  002880  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13078  002882  D7FC               	bra	u9227
 13079  002884  F000               	nop	
 13080  002886  0E80               	movlw	128
 13081  002888  EC6E  F027         	call	_lcdInst
 13082                           
 13083                           ;Test.c: 469: printf("PUSHER TST");
 13084  00288C  0E71               	movlw	low STR_113
 13085  00288E  0100               	movlb	0	; () banked
 13086  002890  6F8E               	movwf	printf@f& (0+255),b
 13087  002892  0EFF               	movlw	high STR_113
 13088  002894  0100               	movlb	0	; () banked
 13089  002896  6F8F               	movwf	(printf@f+1)& (0+255),b
 13090  002898  ECB8  F008         	call	_printf	;wreg free
 13091                           
 13092                           ;Test.c: 470: LATCbits.LATC5 = 1;
 13093  00289C  8A8B               	bsf	3979,5,c	;volatile
 13094                           
 13095                           ;Test.c: 472: while(PORTBbits.RB1 == 0){
 13096  00289E  D05C               	goto	l7686
 13097  0028A0                     l7668:
 13098                           
 13099                           ;Test.c: 473: readADC(0);
 13100  0028A0  0E00               	movlw	0
 13101  0028A2  EC73  F026         	call	_readADC
 13102                           
 13103                           ;Test.c: 474: int res = ADRESH<<8 | ADRESL;
 13104  0028A6  50C3               	movf	4035,w,c	;volatile
 13105  0028A8  CFC4 F0AB          	movff	4036,??_PusherTest	;volatile
 13106  0028AC  0100               	movlb	0	; () banked
 13107  0028AE  6BAC               	clrf	(??_PusherTest+1)& (0+255),b
 13108  0028B0  C0AB  F0AC         	movff	??_PusherTest,??_PusherTest+1
 13109  0028B4  0100               	movlb	0	; () banked
 13110  0028B6  6BAB               	clrf	??_PusherTest& (0+255),b
 13111  0028B8  0100               	movlb	0	; () banked
 13112  0028BA  11AB               	iorwf	??_PusherTest& (0+255),w,b
 13113  0028BC  0100               	movlb	0	; () banked
 13114  0028BE  6FAD               	movwf	PusherTest@res& (0+255),b
 13115  0028C0  0100               	movlb	0	; () banked
 13116  0028C2  51AC               	movf	(??_PusherTest+1)& (0+255),w,b
 13117  0028C4  0100               	movlb	0	; () banked
 13118  0028C6  6FAE               	movwf	(PusherTest@res+1)& (0+255),b
 13119                           
 13120                           ; BSR set to: 0
 13121                           ;Test.c: 475: IR_signal = (res > 800) ? 1 : 0;
 13122  0028C8  0100               	movlb	0	; () banked
 13123  0028CA  BFAE               	btfsc	(PusherTest@res+1)& (0+255),7,b
 13124  0028CC  D00A               	goto	u6490
 13125  0028CE  0E21               	movlw	33
 13126  0028D0  0100               	movlb	0	; () banked
 13127  0028D2  5DAD               	subwf	PusherTest@res& (0+255),w,b
 13128  0028D4  0E03               	movlw	3
 13129  0028D6  0100               	movlb	0	; () banked
 13130  0028D8  59AE               	subwfb	(PusherTest@res+1)& (0+255),w,b
 13131  0028DA  A0D8               	btfss	status,0,c
 13132  0028DC  D002               	goto	u6490
 13133  0028DE  0E01               	movlw	1
 13134  0028E0  D001               	goto	u6500
 13135  0028E2                     u6490:
 13136  0028E2  0E00               	movlw	0
 13137  0028E4                     u6500:
 13138  0028E4  0100               	movlb	0	; () banked
 13139  0028E6  6FDE               	movwf	_IR_signal& (0+255),b
 13140  0028E8  6BDF               	clrf	(_IR_signal+1)& (0+255),b
 13141                           
 13142                           ;Test.c: 477: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13143  0028EA  0E01               	movlw	1
 13144  0028EC  EC6E  F027         	call	_lcdInst
 13145  0028F0  0E68               	movlw	104
 13146  0028F2  0100               	movlb	0	; () banked
 13147  0028F4  6FAB               	movwf	??_PusherTest& (0+255),b
 13148  0028F6  0EE4               	movlw	228
 13149  0028F8                     u9237:
 13150  0028F8  2EE8               	decfsz	wreg,f,c
 13151  0028FA  D7FE               	bra	u9237
 13152  0028FC  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13153  0028FE  D7FC               	bra	u9237
 13154  002900  F000               	nop	
 13155  002902  0E80               	movlw	128
 13156  002904  EC6E  F027         	call	_lcdInst
 13157                           
 13158                           ;Test.c: 478: printf("IR_signal: %d ", IR_signal);
 13159  002908  0E5A               	movlw	low STR_80
 13160  00290A  0100               	movlb	0	; () banked
 13161  00290C  6F8E               	movwf	printf@f& (0+255),b
 13162  00290E  0EFE               	movlw	high STR_80
 13163  002910  0100               	movlb	0	; () banked
 13164  002912  6F8F               	movwf	(printf@f+1)& (0+255),b
 13165  002914  C0DE  F090         	movff	_IR_signal,?_printf+2
 13166  002918  C0DF  F091         	movff	_IR_signal+1,?_printf+3
 13167  00291C  ECB8  F008         	call	_printf	;wreg free
 13168                           
 13169                           ;Test.c: 479: lcdInst(0b11000000);;
 13170  002920  0EC0               	movlw	192
 13171  002922  EC6E  F027         	call	_lcdInst
 13172                           
 13173                           ;Test.c: 480: printf("%d", res);
 13174  002926  0E16               	movlw	low (STR_27+14)
 13175  002928  0100               	movlb	0	; () banked
 13176  00292A  6F8E               	movwf	printf@f& (0+255),b
 13177  00292C  0EFE               	movlw	high (STR_27+14)
 13178  00292E  0100               	movlb	0	; () banked
 13179  002930  6F8F               	movwf	(printf@f+1)& (0+255),b
 13180  002932  C0AD  F090         	movff	PusherTest@res,?_printf+2
 13181  002936  C0AE  F091         	movff	PusherTest@res+1,?_printf+3
 13182  00293A  ECB8  F008         	call	_printf	;wreg free
 13183                           
 13184                           ;Test.c: 481: _delay((unsigned long)((100)*(32000000/4000.0)));
 13185  00293E  0E05               	movlw	5
 13186  002940  0100               	movlb	0	; () banked
 13187  002942  6FAC               	movwf	(??_PusherTest+1)& (0+255),b
 13188  002944  0E0F               	movlw	15
 13189  002946  0100               	movlb	0	; () banked
 13190  002948  6FAB               	movwf	??_PusherTest& (0+255),b
 13191  00294A  0EF1               	movlw	241
 13192  00294C                     u9247:
 13193  00294C  2EE8               	decfsz	wreg,f,c
 13194  00294E  D7FE               	bra	u9247
 13195  002950  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13196  002952  D7FC               	bra	u9247
 13197  002954  2FAC               	decfsz	(??_PusherTest+1)& (0+255),f,b
 13198  002956  D7FA               	bra	u9247
 13199  002958                     l7686:
 13200  002958  B281               	btfsc	3969,1,c	;volatile
 13201  00295A  D05D               	goto	l7706
 13202  00295C  D7A1               	goto	l7668
 13203  00295E                     l7688:
 13204                           
 13205                           ;Test.c: 487: readADC(0);
 13206  00295E  0E00               	movlw	0
 13207  002960  EC73  F026         	call	_readADC
 13208                           
 13209                           ;Test.c: 488: int res = ADRESH<<8 | ADRESL;
 13210  002964  50C3               	movf	4035,w,c	;volatile
 13211  002966  CFC4 F0AB          	movff	4036,??_PusherTest	;volatile
 13212  00296A  0100               	movlb	0	; () banked
 13213  00296C  6BAC               	clrf	(??_PusherTest+1)& (0+255),b
 13214  00296E  C0AB  F0AC         	movff	??_PusherTest,??_PusherTest+1
 13215  002972  0100               	movlb	0	; () banked
 13216  002974  6BAB               	clrf	??_PusherTest& (0+255),b
 13217  002976  0100               	movlb	0	; () banked
 13218  002978  11AB               	iorwf	??_PusherTest& (0+255),w,b
 13219  00297A  0100               	movlb	0	; () banked
 13220  00297C  6FAF               	movwf	PusherTest@res_1706& (0+255),b
 13221  00297E  0100               	movlb	0	; () banked
 13222  002980  51AC               	movf	(??_PusherTest+1)& (0+255),w,b
 13223  002982  0100               	movlb	0	; () banked
 13224  002984  6FB0               	movwf	(PusherTest@res_1706+1)& (0+255),b
 13225                           
 13226                           ; BSR set to: 0
 13227                           ;Test.c: 489: IR_signal = (res > 800) ? 1 : 0;
 13228  002986  0100               	movlb	0	; () banked
 13229  002988  BFB0               	btfsc	(PusherTest@res_1706+1)& (0+255),7,b
 13230  00298A  D00A               	goto	u6520
 13231  00298C  0E21               	movlw	33
 13232  00298E  0100               	movlb	0	; () banked
 13233  002990  5DAF               	subwf	PusherTest@res_1706& (0+255),w,b
 13234  002992  0E03               	movlw	3
 13235  002994  0100               	movlb	0	; () banked
 13236  002996  59B0               	subwfb	(PusherTest@res_1706+1)& (0+255),w,b
 13237  002998  A0D8               	btfss	status,0,c
 13238  00299A  D002               	goto	u6520
 13239  00299C  0E01               	movlw	1
 13240  00299E  D001               	goto	u6530
 13241  0029A0                     u6520:
 13242  0029A0  0E00               	movlw	0
 13243  0029A2                     u6530:
 13244  0029A2  0100               	movlb	0	; () banked
 13245  0029A4  6FDE               	movwf	_IR_signal& (0+255),b
 13246  0029A6  6BDF               	clrf	(_IR_signal+1)& (0+255),b
 13247                           
 13248                           ;Test.c: 490: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13249  0029A8  0E01               	movlw	1
 13250  0029AA  EC6E  F027         	call	_lcdInst
 13251  0029AE  0E68               	movlw	104
 13252  0029B0  0100               	movlb	0	; () banked
 13253  0029B2  6FAB               	movwf	??_PusherTest& (0+255),b
 13254  0029B4  0EE4               	movlw	228
 13255  0029B6                     u9257:
 13256  0029B6  2EE8               	decfsz	wreg,f,c
 13257  0029B8  D7FE               	bra	u9257
 13258  0029BA  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13259  0029BC  D7FC               	bra	u9257
 13260  0029BE  F000               	nop	
 13261  0029C0  0E80               	movlw	128
 13262  0029C2  EC6E  F027         	call	_lcdInst
 13263                           
 13264                           ;Test.c: 491: printf("IR_signal: %d ", IR_signal);
 13265  0029C6  0E5A               	movlw	low STR_80
 13266  0029C8  0100               	movlb	0	; () banked
 13267  0029CA  6F8E               	movwf	printf@f& (0+255),b
 13268  0029CC  0EFE               	movlw	high STR_80
 13269  0029CE  0100               	movlb	0	; () banked
 13270  0029D0  6F8F               	movwf	(printf@f+1)& (0+255),b
 13271  0029D2  C0DE  F090         	movff	_IR_signal,?_printf+2
 13272  0029D6  C0DF  F091         	movff	_IR_signal+1,?_printf+3
 13273  0029DA  ECB8  F008         	call	_printf	;wreg free
 13274                           
 13275                           ;Test.c: 492: lcdInst(0b11000000);;
 13276  0029DE  0EC0               	movlw	192
 13277  0029E0  EC6E  F027         	call	_lcdInst
 13278                           
 13279                           ;Test.c: 493: printf("%d", res);
 13280  0029E4  0E16               	movlw	low (STR_27+14)
 13281  0029E6  0100               	movlb	0	; () banked
 13282  0029E8  6F8E               	movwf	printf@f& (0+255),b
 13283  0029EA  0EFE               	movlw	high (STR_27+14)
 13284  0029EC  0100               	movlb	0	; () banked
 13285  0029EE  6F8F               	movwf	(printf@f+1)& (0+255),b
 13286  0029F0  C0AF  F090         	movff	PusherTest@res_1706,?_printf+2
 13287  0029F4  C0B0  F091         	movff	PusherTest@res_1706+1,?_printf+3
 13288  0029F8  ECB8  F008         	call	_printf	;wreg free
 13289                           
 13290                           ;Test.c: 494: _delay((unsigned long)((100)*(32000000/4000.0)));
 13291  0029FC  0E05               	movlw	5
 13292  0029FE  0100               	movlb	0	; () banked
 13293  002A00  6FAC               	movwf	(??_PusherTest+1)& (0+255),b
 13294  002A02  0E0F               	movlw	15
 13295  002A04  0100               	movlb	0	; () banked
 13296  002A06  6FAB               	movwf	??_PusherTest& (0+255),b
 13297  002A08  0EF1               	movlw	241
 13298  002A0A                     u9267:
 13299  002A0A  2EE8               	decfsz	wreg,f,c
 13300  002A0C  D7FE               	bra	u9267
 13301  002A0E  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13302  002A10  D7FC               	bra	u9267
 13303  002A12  2FAC               	decfsz	(??_PusherTest+1)& (0+255),f,b
 13304  002A14  D7FA               	bra	u9267
 13305  002A16                     l7706:
 13306  002A16  A281               	btfss	3969,1,c	;volatile
 13307  002A18  D7A2               	goto	l7688
 13308                           
 13309                           ;Test.c: 495: }
 13310                           ;Test.c: 496: if(PORTB >> 4 == 0b1111){
 13311  002A1A  3881               	swapf	3969,w,c	;volatile
 13312  002A1C  0B0F               	andlw	15
 13313  002A1E  0A0F               	xorlw	15
 13314  002A20  B4D8               	btfsc	status,2,c
 13315  002A22  D047               	goto	l1256
 13316                           
 13317                           ;Test.c: 501: else if(PORTB >> 4 == 0b0101){
 13318                           
 13319                           ;Test.c: 498: }
 13320                           
 13321                           ;Test.c: 497: break;
 13322  002A24  3881               	swapf	3969,w,c	;volatile
 13323  002A26  0B0F               	andlw	15
 13324  002A28  0A05               	xorlw	5
 13325  002A2A  A4D8               	btfss	status,2,c
 13326  002A2C  D01D               	goto	l7728
 13327                           
 13328                           ;Test.c: 502: for(int i = 0; i<3000; i++){
 13329  002A2E  0E00               	movlw	0
 13330  002A30  0100               	movlb	0	; () banked
 13331  002A32  6FB2               	movwf	(PusherTest@i+1)& (0+255),b
 13332  002A34  0E00               	movlw	0
 13333  002A36  6FB1               	movwf	PusherTest@i& (0+255),b
 13334  002A38                     l7718:
 13335                           
 13336                           ; BSR set to: 0
 13337  002A38  0100               	movlb	0	; () banked
 13338  002A3A  BFB2               	btfsc	(PusherTest@i+1)& (0+255),7,b
 13339  002A3C  D008               	goto	l1259
 13340  002A3E  0EB8               	movlw	184
 13341  002A40  0100               	movlb	0	; () banked
 13342  002A42  5DB1               	subwf	PusherTest@i& (0+255),w,b
 13343  002A44  0E0B               	movlw	11
 13344  002A46  0100               	movlb	0	; () banked
 13345  002A48  59B2               	subwfb	(PusherTest@i+1)& (0+255),w,b
 13346  002A4A  B0D8               	btfsc	status,0,c
 13347  002A4C  D02F               	goto	l1265
 13348  002A4E                     l1259:
 13349                           
 13350                           ; BSR set to: 0
 13351                           ;Test.c: 503: LATAbits.LATA4 = 1;
 13352  002A4E  8889               	bsf	3977,4,c	;volatile
 13353                           
 13354                           ; BSR set to: 0
 13355                           ;Test.c: 504: _delay((unsigned long)((75)*(32000000/4000000.0)));
 13356  002A50  0EC8               	movlw	200
 13357  002A52                     u9277:
 13358  002A52  2EE8               	decfsz	wreg,f,c
 13359  002A54  D7FE               	bra	u9277
 13360                           
 13361                           ;Test.c: 505: LATAbits.LATA4 = 0;
 13362  002A56  9889               	bcf	3977,4,c	;volatile
 13363                           
 13364                           ;Test.c: 506: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13365  002A58  0E42               	movlw	66
 13366  002A5A                     u9287:
 13367  002A5A  2EE8               	decfsz	wreg,f,c
 13368  002A5C  D7FE               	bra	u9287
 13369  002A5E  D000               	nop2	
 13370  002A60  0100               	movlb	0	; () banked
 13371  002A62  4BB1               	infsnz	PusherTest@i& (0+255),f,b
 13372  002A64  2BB2               	incf	(PusherTest@i+1)& (0+255),f,b
 13373  002A66  D7E8               	goto	l7718
 13374  002A68                     l7728:
 13375                           
 13376                           ;Test.c: 509: else if (PORTB >> 4 == 0b110){
 13377  002A68  3881               	swapf	3969,w,c	;volatile
 13378  002A6A  0B0F               	andlw	15
 13379  002A6C  0A06               	xorlw	6
 13380  002A6E  A4D8               	btfss	status,2,c
 13381  002A70  D01D               	goto	l1265
 13382                           
 13383                           ;Test.c: 510: for(int i = 0; i<3000; i++){
 13384  002A72  0E00               	movlw	0
 13385  002A74  0100               	movlb	0	; () banked
 13386  002A76  6FB4               	movwf	(PusherTest@i_1710+1)& (0+255),b
 13387  002A78  0E00               	movlw	0
 13388  002A7A  6FB3               	movwf	PusherTest@i_1710& (0+255),b
 13389  002A7C                     l7732:
 13390                           
 13391                           ; BSR set to: 0
 13392  002A7C  0100               	movlb	0	; () banked
 13393  002A7E  BFB4               	btfsc	(PusherTest@i_1710+1)& (0+255),7,b
 13394  002A80  D008               	goto	l1263
 13395  002A82  0EB8               	movlw	184
 13396  002A84  0100               	movlb	0	; () banked
 13397  002A86  5DB3               	subwf	PusherTest@i_1710& (0+255),w,b
 13398  002A88  0E0B               	movlw	11
 13399  002A8A  0100               	movlb	0	; () banked
 13400  002A8C  59B4               	subwfb	(PusherTest@i_1710+1)& (0+255),w,b
 13401  002A8E  B0D8               	btfsc	status,0,c
 13402  002A90  D00D               	goto	l1265
 13403  002A92                     l1263:
 13404                           
 13405                           ; BSR set to: 0
 13406                           ;Test.c: 511: LATAbits.LATA4 = 1;
 13407  002A92  8889               	bsf	3977,4,c	;volatile
 13408                           
 13409                           ; BSR set to: 0
 13410                           ;Test.c: 512: _delay((unsigned long)((58)*(32000000/4000000.0)));
 13411  002A94  0E9A               	movlw	154
 13412  002A96                     u9297:
 13413  002A96  2EE8               	decfsz	wreg,f,c
 13414  002A98  D7FE               	bra	u9297
 13415  002A9A  D000               	nop2	
 13416                           
 13417                           ;Test.c: 513: LATAbits.LATA4 = 0;
 13418  002A9C  9889               	bcf	3977,4,c	;volatile
 13419                           
 13420                           ;Test.c: 514: _delay((unsigned long)((42)*(32000000/4000000.0)));
 13421  002A9E  0E70               	movlw	112
 13422  002AA0                     u9307:
 13423  002AA0  2EE8               	decfsz	wreg,f,c
 13424  002AA2  D7FE               	bra	u9307
 13425  002AA4  0100               	movlb	0	; () banked
 13426  002AA6  4BB3               	infsnz	PusherTest@i_1710& (0+255),f,b
 13427  002AA8  2BB4               	incf	(PusherTest@i_1710+1)& (0+255),f,b
 13428  002AAA  D7E8               	goto	l7732
 13429  002AAC                     l1265:
 13430  002AAC  A281               	btfss	3969,1,c	;volatile
 13431  002AAE  D7B3               	goto	l7706
 13432  002AB0  D7FD               	goto	l1265
 13433  002AB2                     l1256:
 13434                           
 13435                           ;Test.c: 519: }
 13436                           ;Test.c: 520: LATCbits.LATC5 = 0;
 13437  002AB2  9A8B               	bcf	3979,5,c	;volatile
 13438  002AB4  0012               	return		;funcret
 13439  002AB6                     __end_of_PusherTest:
 13440                           	opt stack 0
 13441                           tblptru	equ	0xFF8
 13442                           tblptrh	equ	0xFF7
 13443                           tblptrl	equ	0xFF6
 13444                           tablat	equ	0xFF5
 13445                           prodh	equ	0xFF4
 13446                           prodl	equ	0xFF3
 13447                           intcon	equ	0xFF2
 13448                           intcon2	equ	0xFF1
 13449                           intcon3	equ	0xFF0
 13450                           postinc0	equ	0xFEE
 13451                           wreg	equ	0xFE8
 13452                           postdec1	equ	0xFE5
 13453                           fsr1l	equ	0xFE1
 13454                           indf2	equ	0xFDF
 13455                           postinc2	equ	0xFDE
 13456                           postdec2	equ	0xFDD
 13457                           fsr2h	equ	0xFDA
 13458                           fsr2l	equ	0xFD9
 13459                           status	equ	0xFD8
 13460                           
 13461 ;; *************** function _readADC *****************
 13462 ;; Defined at:
 13463 ;;		line 15 in file "ADCFunctionality.c"
 13464 ;; Parameters:    Size  Location     Type
 13465 ;;  channel         1    wreg     unsigned char 
 13466 ;; Auto vars:     Size  Location     Type
 13467 ;;  channel         1    1[BANK0 ] unsigned char 
 13468 ;; Return value:  Size  Location     Type
 13469 ;;                  1    wreg      void 
 13470 ;; Registers used:
 13471 ;;		wreg, status,2, status,0, cstack
 13472 ;; Tracked objects:
 13473 ;;		On entry : 0/0
 13474 ;;		On exit  : 0/0
 13475 ;;		Unchanged: 0/0
 13476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13478 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13479 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13480 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13481 ;;Total ram usage:        2 bytes
 13482 ;; Hardware stack levels used:    1
 13483 ;; Hardware stack levels required when called:    7
 13484 ;; This function calls:
 13485 ;;		Nothing
 13486 ;; This function is called by:
 13487 ;;		_readIR
 13488 ;;		_readMAG
 13489 ;;		_sensorTest
 13490 ;;		_PusherTest
 13491 ;; This function uses a non-reentrant model
 13492 ;;
 13493                           
 13494                           	psect	text43
 13495  004CE6                     __ptext43:
 13496                           	opt stack 0
 13497  004CE6                     _readADC:
 13498                           	opt stack 20
 13499                           
 13500                           ;incstack = 0
 13501                           ;readADC@channel stored from wreg
 13502  004CE6  0100               	movlb	0	; () banked
 13503  004CE8  6F81               	movwf	readADC@channel& (0+255),b
 13504                           
 13505                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 13506  004CEA  0100               	movlb	0	; () banked
 13507  004CEC  4581               	rlncf	readADC@channel& (0+255),w,b
 13508  004CEE  46E8               	rlncf	wreg,f,c
 13509  004CF0  0BFC               	andlw	252
 13510  004CF2  6EC2               	movwf	4034,c	;volatile
 13511                           
 13512                           ; BSR set to: 0
 13513                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 13514  004CF4  80C2               	bsf	4034,0,c	;volatile
 13515                           
 13516                           ; BSR set to: 0
 13517                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 13518  004CF6  82C2               	bsf	4034,1,c	;volatile
 13519                           
 13520                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 13521  004CF8  D009               	goto	l5638
 13522  004CFA                     l5636:
 13523  004CFA  0E34               	movlw	52
 13524  004CFC  0100               	movlb	0	; () banked
 13525  004CFE  6F80               	movwf	??_readADC& (0+255),b
 13526  004D00  0EF1               	movlw	241
 13527  004D02                     u9317:
 13528  004D02  2EE8               	decfsz	wreg,f,c
 13529  004D04  D7FE               	bra	u9317
 13530  004D06  2F80               	decfsz	??_readADC& (0+255),f,b
 13531  004D08  D7FC               	bra	u9317
 13532  004D0A  D000               	nop2	
 13533  004D0C                     l5638:
 13534  004D0C  A2C2               	btfss	4034,1,c	;volatile
 13535  004D0E  0012               	return	
 13536  004D10  D7F4               	goto	l5636
 13537  004D12                     __end_of_readADC:
 13538                           	opt stack 0
 13539                           tblptru	equ	0xFF8
 13540                           tblptrh	equ	0xFF7
 13541                           tblptrl	equ	0xFF6
 13542                           tablat	equ	0xFF5
 13543                           prodh	equ	0xFF4
 13544                           prodl	equ	0xFF3
 13545                           intcon	equ	0xFF2
 13546                           intcon2	equ	0xFF1
 13547                           intcon3	equ	0xFF0
 13548                           postinc0	equ	0xFEE
 13549                           wreg	equ	0xFE8
 13550                           postdec1	equ	0xFE5
 13551                           fsr1l	equ	0xFE1
 13552                           indf2	equ	0xFDF
 13553                           postinc2	equ	0xFDE
 13554                           postdec2	equ	0xFDD
 13555                           fsr2h	equ	0xFDA
 13556                           fsr2l	equ	0xFD9
 13557                           status	equ	0xFD8
 13558                           
 13559 ;; *************** function _PortTests *****************
 13560 ;; Defined at:
 13561 ;;		line 409 in file "Test.c"
 13562 ;; Parameters:    Size  Location     Type
 13563 ;;		None
 13564 ;; Auto vars:     Size  Location     Type
 13565 ;;		None
 13566 ;; Return value:  Size  Location     Type
 13567 ;;                  1    wreg      void 
 13568 ;; Registers used:
 13569 ;;		wreg, status,2, status,0
 13570 ;; Tracked objects:
 13571 ;;		On entry : 0/0
 13572 ;;		On exit  : 0/0
 13573 ;;		Unchanged: 0/0
 13574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13577 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13578 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13579 ;;Total ram usage:        2 bytes
 13580 ;; Hardware stack levels used:    1
 13581 ;; Hardware stack levels required when called:    7
 13582 ;; This function calls:
 13583 ;;		Nothing
 13584 ;; This function is called by:
 13585 ;;		_Test
 13586 ;; This function uses a non-reentrant model
 13587 ;;
 13588                           
 13589                           	psect	text44
 13590  004218                     __ptext44:
 13591                           	opt stack 0
 13592  004218                     _PortTests:
 13593                           	opt stack 22
 13594  004218                     l1214:
 13595  004218  A281               	btfss	3969,1,c	;volatile
 13596  00421A  D7FE               	goto	l1214
 13597                           
 13598                           ;Test.c: 413: var = PORTB >> 4;
 13599  00421C  CF81 F080          	movff	3969,??_PortTests	;volatile
 13600  004220  0100               	movlb	0	; () banked
 13601  004222  3B80               	swapf	??_PortTests& (0+255),f,b
 13602  004224  0E0F               	movlw	15
 13603  004226  1780               	andwf	??_PortTests& (0+255),f,b
 13604  004228  0100               	movlb	0	; () banked
 13605  00422A  5180               	movf	??_PortTests& (0+255),w,b
 13606  00422C  0100               	movlb	0	; () banked
 13607  00422E  6FFA               	movwf	_var& (0+255),b
 13608  004230  6BFB               	clrf	(_var+1)& (0+255),b
 13609                           
 13610                           ;Test.c: 414: switch(var){
 13611  004232  D00C               	goto	l7746
 13612  004234                     l1218:
 13613                           
 13614                           ; BSR set to: 0
 13615                           ;Test.c: 416: LATEbits.LATE0 = 1;
 13616  004234  808D               	bsf	3981,0,c	;volatile
 13617                           
 13618                           ;Test.c: 417: break;
 13619  004236  D027               	goto	l1226
 13620  004238                     l1220:
 13621                           
 13622                           ; BSR set to: 0
 13623                           ;Test.c: 419: LATEbits.LATE1 = 1;
 13624  004238  828D               	bsf	3981,1,c	;volatile
 13625                           
 13626                           ;Test.c: 420: break;
 13627  00423A  D025               	goto	l1226
 13628  00423C                     l1221:
 13629                           
 13630                           ; BSR set to: 0
 13631                           ;Test.c: 422: LATDbits.LATD0 = 1;
 13632  00423C  808C               	bsf	3980,0,c	;volatile
 13633                           
 13634                           ;Test.c: 423: break;
 13635  00423E  D023               	goto	l1226
 13636  004240                     l1222:
 13637                           
 13638                           ; BSR set to: 0
 13639                           ;Test.c: 425: LATAbits.LATA3 = 1;
 13640  004240  8689               	bsf	3977,3,c	;volatile
 13641                           
 13642                           ;Test.c: 426: break;
 13643  004242  D021               	goto	l1226
 13644  004244                     l1223:
 13645                           
 13646                           ; BSR set to: 0
 13647                           ;Test.c: 428: LATAbits.LATA4 = 1;
 13648  004244  8889               	bsf	3977,4,c	;volatile
 13649                           
 13650                           ;Test.c: 429: break;
 13651  004246  D01F               	goto	l1226
 13652  004248                     l1224:
 13653                           
 13654                           ; BSR set to: 0
 13655                           ;Test.c: 431: LATAbits.LATA5 = 1;
 13656  004248  8A89               	bsf	3977,5,c	;volatile
 13657                           
 13658                           ; BSR set to: 0
 13659                           ;Test.c: 435: }
 13660                           
 13661                           ; BSR set to: 0
 13662                           ;Test.c: 434: break;
 13663                           
 13664                           ;Test.c: 433: default:
 13665                           
 13666                           ;Test.c: 432: break;
 13667  00424A  D01D               	goto	l1226
 13668  00424C                     l7746:
 13669                           
 13670                           ; BSR set to: 0
 13671  00424C  C0FA  F080         	movff	_var,??_PortTests
 13672  004250  C0FB  F081         	movff	_var+1,??_PortTests+1
 13673                           
 13674                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13675                           ; Switch size 1, requested type "space"
 13676                           ; Number of cases is 1, Range of values is 0 to 0
 13677                           ; switch strategies available:
 13678                           ; Name         Instructions Cycles
 13679                           ; simple_byte            4     3 (average)
 13680                           ;	Chosen strategy is simple_byte
 13681  004254  0100               	movlb	0	; () banked
 13682  004256  5181               	movf	(??_PortTests+1)& (0+255),w,b
 13683  004258  0A00               	xorlw	0	; case 0
 13684  00425A  A4D8               	btfss	status,2,c
 13685  00425C  D014               	goto	l1226
 13686                           
 13687                           ; BSR set to: 0
 13688                           ; Switch size 1, requested type "space"
 13689                           ; Number of cases is 6, Range of values is 0 to 5
 13690                           ; switch strategies available:
 13691                           ; Name         Instructions Cycles
 13692                           ; simple_byte           19    10 (average)
 13693                           ;	Chosen strategy is simple_byte
 13694  00425E  0100               	movlb	0	; () banked
 13695  004260  5180               	movf	??_PortTests& (0+255),w,b
 13696  004262  0A00               	xorlw	0	; case 0
 13697  004264  B4D8               	btfsc	status,2,c
 13698  004266  D7E6               	goto	l1218
 13699  004268  0A01               	xorlw	1	; case 1
 13700  00426A  B4D8               	btfsc	status,2,c
 13701  00426C  D7E5               	goto	l1220
 13702  00426E  0A03               	xorlw	3	; case 2
 13703  004270  B4D8               	btfsc	status,2,c
 13704  004272  D7E4               	goto	l1221
 13705  004274  0A01               	xorlw	1	; case 3
 13706  004276  B4D8               	btfsc	status,2,c
 13707  004278  D7E3               	goto	l1222
 13708  00427A  0A07               	xorlw	7	; case 4
 13709  00427C  B4D8               	btfsc	status,2,c
 13710  00427E  D7E2               	goto	l1223
 13711  004280  0A01               	xorlw	1	; case 5
 13712  004282  B4D8               	btfsc	status,2,c
 13713  004284  D7E1               	goto	l1224
 13714  004286                     l1226:
 13715  004286  B281               	btfsc	3969,1,c	;volatile
 13716  004288  D7FE               	goto	l1226
 13717                           
 13718                           ;Test.c: 437: __nop();
 13719  00428A  F000               	nop	
 13720                           
 13721                           ;Test.c: 438: __nop();
 13722  00428C  F000               	nop	
 13723                           
 13724                           ;Test.c: 439: LATA = 0x00;
 13725  00428E  0E00               	movlw	0
 13726  004290  6E89               	movwf	3977,c	;volatile
 13727                           
 13728                           ;Test.c: 440: LATE = 0x00;
 13729  004292  0E00               	movlw	0
 13730  004294  6E8D               	movwf	3981,c	;volatile
 13731                           
 13732                           ;Test.c: 441: LATD = 0x00; }
 13733  004296  0E00               	movlw	0
 13734  004298  6E8C               	movwf	3980,c	;volatile
 13735  00429A  D7BE               	goto	l1214
 13736  00429C                     __end_of_PortTests:
 13737                           	opt stack 0
 13738                           tblptru	equ	0xFF8
 13739                           tblptrh	equ	0xFF7
 13740                           tblptrl	equ	0xFF6
 13741                           tablat	equ	0xFF5
 13742                           prodh	equ	0xFF4
 13743                           prodl	equ	0xFF3
 13744                           intcon	equ	0xFF2
 13745                           intcon2	equ	0xFF1
 13746                           intcon3	equ	0xFF0
 13747                           postinc0	equ	0xFEE
 13748                           wreg	equ	0xFE8
 13749                           postdec1	equ	0xFE5
 13750                           fsr1l	equ	0xFE1
 13751                           indf2	equ	0xFDF
 13752                           postinc2	equ	0xFDE
 13753                           postdec2	equ	0xFDD
 13754                           fsr2h	equ	0xFDA
 13755                           fsr2l	equ	0xFD9
 13756                           status	equ	0xFD8
 13757                           
 13758 ;; *************** function _PortTestA5 *****************
 13759 ;; Defined at:
 13760 ;;		line 444 in file "Test.c"
 13761 ;; Parameters:    Size  Location     Type
 13762 ;;		None
 13763 ;; Auto vars:     Size  Location     Type
 13764 ;;		None
 13765 ;; Return value:  Size  Location     Type
 13766 ;;                  1    wreg      void 
 13767 ;; Registers used:
 13768 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13769 ;; Tracked objects:
 13770 ;;		On entry : 0/0
 13771 ;;		On exit  : 0/0
 13772 ;;		Unchanged: 0/0
 13773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13776 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13777 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13778 ;;Total ram usage:        1 bytes
 13779 ;; Hardware stack levels used:    1
 13780 ;; Hardware stack levels required when called:   10
 13781 ;; This function calls:
 13782 ;;		_lcdInst
 13783 ;;		_printf
 13784 ;; This function is called by:
 13785 ;;		_Test
 13786 ;; This function uses a non-reentrant model
 13787 ;;
 13788                           
 13789                           	psect	text45
 13790  004674                     __ptext45:
 13791                           	opt stack 0
 13792  004674                     _PortTestA5:
 13793                           	opt stack 19
 13794                           
 13795                           ;Test.c: 445: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13796                           
 13797                           ;incstack = 0
 13798  004674  0E01               	movlw	1
 13799  004676  EC6E  F027         	call	_lcdInst
 13800  00467A  0E68               	movlw	104
 13801  00467C  0100               	movlb	0	; () banked
 13802  00467E  6FAB               	movwf	??_PortTestA5& (0+255),b
 13803  004680  0EE4               	movlw	228
 13804  004682                     u9327:
 13805  004682  2EE8               	decfsz	wreg,f,c
 13806  004684  D7FE               	bra	u9327
 13807  004686  2FAB               	decfsz	??_PortTestA5& (0+255),f,b
 13808  004688  D7FC               	bra	u9327
 13809  00468A  F000               	nop	
 13810  00468C  0E80               	movlw	128
 13811  00468E  EC6E  F027         	call	_lcdInst
 13812                           
 13813                           ;Test.c: 446: printf("D WILL RETURN    ");
 13814  004692  0E37               	movlw	low STR_111
 13815  004694  0100               	movlb	0	; () banked
 13816  004696  6F8E               	movwf	printf@f& (0+255),b
 13817  004698  0EFB               	movlw	high STR_111
 13818  00469A  0100               	movlb	0	; () banked
 13819  00469C  6F8F               	movwf	(printf@f+1)& (0+255),b
 13820  00469E  ECB8  F008         	call	_printf	;wreg free
 13821                           
 13822                           ;Test.c: 447: lcdInst(0b11000000);;
 13823  0046A2  0EC0               	movlw	192
 13824  0046A4  EC6E  F027         	call	_lcdInst
 13825                           
 13826                           ;Test.c: 448: printf("OTHER SETS RA5   ");
 13827  0046A8  0E49               	movlw	low STR_112
 13828  0046AA  0100               	movlb	0	; () banked
 13829  0046AC  6F8E               	movwf	printf@f& (0+255),b
 13830  0046AE  0EFB               	movlw	high STR_112
 13831  0046B0  0100               	movlb	0	; () banked
 13832  0046B2  6F8F               	movwf	(printf@f+1)& (0+255),b
 13833  0046B4  ECB8  F008         	call	_printf	;wreg free
 13834  0046B8                     l1235:
 13835  0046B8  A281               	btfss	3969,1,c	;volatile
 13836  0046BA  D7FE               	goto	l1235
 13837                           
 13838                           ;Test.c: 453: }
 13839                           ;Test.c: 454: if(PORTB >> 4 == 0b1111){
 13840  0046BC  3881               	swapf	3969,w,c	;volatile
 13841  0046BE  0B0F               	andlw	15
 13842  0046C0  0A0F               	xorlw	15
 13843  0046C2  B4D8               	btfsc	status,2,c
 13844  0046C4  0012               	return	
 13845                           
 13846                           ;Test.c: 457: else{
 13847                           ;Test.c: 458: LATAbits.LATA5 = 1;
 13848                           
 13849                           ;Test.c: 456: }
 13850                           
 13851                           ;Test.c: 455: break;
 13852  0046C6  8A89               	bsf	3977,5,c	;volatile
 13853  0046C8                     l1241:
 13854  0046C8  B281               	btfsc	3969,1,c	;volatile
 13855  0046CA  D7FE               	goto	l1241
 13856                           
 13857                           ;Test.c: 461: }
 13858                           ;Test.c: 462: LATAbits.LATA5 = 0;
 13859  0046CC  9A89               	bcf	3977,5,c	;volatile
 13860  0046CE  D7F4               	goto	l1235
 13861  0046D0                     __end_of_PortTestA5:
 13862                           	opt stack 0
 13863                           tblptru	equ	0xFF8
 13864                           tblptrh	equ	0xFF7
 13865                           tblptrl	equ	0xFF6
 13866                           tablat	equ	0xFF5
 13867                           prodh	equ	0xFF4
 13868                           prodl	equ	0xFF3
 13869                           intcon	equ	0xFF2
 13870                           intcon2	equ	0xFF1
 13871                           intcon3	equ	0xFF0
 13872                           postinc0	equ	0xFEE
 13873                           wreg	equ	0xFE8
 13874                           postdec1	equ	0xFE5
 13875                           fsr1l	equ	0xFE1
 13876                           indf2	equ	0xFDF
 13877                           postinc2	equ	0xFDE
 13878                           postdec2	equ	0xFDD
 13879                           fsr2h	equ	0xFDA
 13880                           fsr2l	equ	0xFD9
 13881                           status	equ	0xFD8
 13882                           
 13883 ;; *************** function _EEPROMTest *****************
 13884 ;; Defined at:
 13885 ;;		line 577 in file "Test.c"
 13886 ;; Parameters:    Size  Location     Type
 13887 ;;		None
 13888 ;; Auto vars:     Size  Location     Type
 13889 ;;		None
 13890 ;; Return value:  Size  Location     Type
 13891 ;;                  1    wreg      void 
 13892 ;; Registers used:
 13893 ;;		None
 13894 ;; Tracked objects:
 13895 ;;		On entry : 0/0
 13896 ;;		On exit  : 0/0
 13897 ;;		Unchanged: 0/0
 13898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13902 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13903 ;;Total ram usage:        0 bytes
 13904 ;; Hardware stack levels used:    1
 13905 ;; Hardware stack levels required when called:    7
 13906 ;; This function calls:
 13907 ;;		Nothing
 13908 ;; This function is called by:
 13909 ;;		_Test
 13910 ;; This function uses a non-reentrant model
 13911 ;;
 13912                           
 13913                           	psect	text46
 13914  004F40                     __ptext46:
 13915                           	opt stack 0
 13916  004F40                     _EEPROMTest:
 13917                           	opt stack 22
 13918                           
 13919                           ;incstack = 0
 13920  004F40  0012               	return		;funcret
 13921  004F42                     __end_of_EEPROMTest:
 13922                           	opt stack 0
 13923                           tblptru	equ	0xFF8
 13924                           tblptrh	equ	0xFF7
 13925                           tblptrl	equ	0xFF6
 13926                           tablat	equ	0xFF5
 13927                           prodh	equ	0xFF4
 13928                           prodl	equ	0xFF3
 13929                           intcon	equ	0xFF2
 13930                           intcon2	equ	0xFF1
 13931                           intcon3	equ	0xFF0
 13932                           postinc0	equ	0xFEE
 13933                           wreg	equ	0xFE8
 13934                           postdec1	equ	0xFE5
 13935                           fsr1l	equ	0xFE1
 13936                           indf2	equ	0xFDF
 13937                           postinc2	equ	0xFDE
 13938                           postdec2	equ	0xFDD
 13939                           fsr2h	equ	0xFDA
 13940                           fsr2l	equ	0xFD9
 13941                           status	equ	0xFD8
 13942                           
 13943 ;; *************** function _BothServos *****************
 13944 ;; Defined at:
 13945 ;;		line 352 in file "Test.c"
 13946 ;; Parameters:    Size  Location     Type
 13947 ;;		None
 13948 ;; Auto vars:     Size  Location     Type
 13949 ;;		None
 13950 ;; Return value:  Size  Location     Type
 13951 ;;                  1    wreg      void 
 13952 ;; Registers used:
 13953 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13954 ;; Tracked objects:
 13955 ;;		On entry : 0/0
 13956 ;;		On exit  : 0/0
 13957 ;;		Unchanged: 0/0
 13958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13960 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13961 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13962 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13963 ;;Total ram usage:        2 bytes
 13964 ;; Hardware stack levels used:    1
 13965 ;; Hardware stack levels required when called:   10
 13966 ;; This function calls:
 13967 ;;		_initServos
 13968 ;;		_lcdInst
 13969 ;;		_printf
 13970 ;;		_updateServoPosition
 13971 ;; This function is called by:
 13972 ;;		_Test
 13973 ;; This function uses a non-reentrant model
 13974 ;;
 13975                           
 13976                           	psect	text47
 13977  0015A8                     __ptext47:
 13978                           	opt stack 0
 13979  0015A8                     _BothServos:
 13980                           	opt stack 19
 13981                           
 13982                           ;Test.c: 353: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13983                           
 13984                           ;incstack = 0
 13985  0015A8  0E01               	movlw	1
 13986  0015AA  EC6E  F027         	call	_lcdInst
 13987  0015AE  0E68               	movlw	104
 13988  0015B0  0100               	movlb	0	; () banked
 13989  0015B2  6FAB               	movwf	??_BothServos& (0+255),b
 13990  0015B4  0EE4               	movlw	228
 13991  0015B6                     u9337:
 13992  0015B6  2EE8               	decfsz	wreg,f,c
 13993  0015B8  D7FE               	bra	u9337
 13994  0015BA  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13995  0015BC  D7FC               	bra	u9337
 13996  0015BE  F000               	nop	
 13997  0015C0  0E80               	movlw	128
 13998  0015C2  EC6E  F027         	call	_lcdInst
 13999                           
 14000                           ;Test.c: 354: printf("TST: BOTH SERVOS");
 14001  0015C6  0EB4               	movlw	low STR_110
 14002  0015C8  0100               	movlb	0	; () banked
 14003  0015CA  6F8E               	movwf	printf@f& (0+255),b
 14004  0015CC  0EFC               	movlw	high STR_110
 14005  0015CE  0100               	movlb	0	; () banked
 14006  0015D0  6F8F               	movwf	(printf@f+1)& (0+255),b
 14007  0015D2  ECB8  F008         	call	_printf	;wreg free
 14008                           
 14009                           ;Test.c: 355: TMR1ON = 1;
 14010  0015D6  80CD               	bsf	4045,0,c	;volatile
 14011                           
 14012                           ;Test.c: 356: TMR3ON = 1;
 14013  0015D8  80B1               	bsf	4017,0,c	;volatile
 14014                           
 14015                           ;Test.c: 357: machine_state = Sorting_state;
 14016  0015DA  0E01               	movlw	1
 14017  0015DC  0100               	movlb	0	; () banked
 14018  0015DE  6FFC               	movwf	_machine_state& (0+255),b
 14019                           
 14020                           ; BSR set to: 0
 14021                           ;Test.c: 358: was_low_1 = 0;
 14022  0015E0  0E00               	movlw	0
 14023  0015E2  6E7A               	movwf	_was_low_1+1,c	;volatile
 14024  0015E4  0E00               	movlw	0
 14025  0015E6  6E79               	movwf	_was_low_1,c	;volatile
 14026                           
 14027                           ; BSR set to: 0
 14028                           ;Test.c: 359: was_low_3 = 0;
 14029  0015E8  0E00               	movlw	0
 14030  0015EA  6E7C               	movwf	_was_low_3+1,c	;volatile
 14031  0015EC  0E00               	movlw	0
 14032  0015EE  6E7B               	movwf	_was_low_3,c	;volatile
 14033                           
 14034                           ; BSR set to: 0
 14035                           ;Test.c: 365: initServos();
 14036  0015F0  EC68  F023         	call	_initServos	;wreg free
 14037                           
 14038                           ;Test.c: 366: _delay((unsigned long)((1500)*(32000000/4000.0)));
 14039  0015F4  0E3D               	movlw	61
 14040  0015F6  0100               	movlb	0	; () banked
 14041  0015F8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14042  0015FA  0EE1               	movlw	225
 14043  0015FC  0100               	movlb	0	; () banked
 14044  0015FE  6FAB               	movwf	??_BothServos& (0+255),b
 14045  001600  0E3F               	movlw	63
 14046  001602                     u9347:
 14047  001602  2EE8               	decfsz	wreg,f,c
 14048  001604  D7FE               	bra	u9347
 14049  001606  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14050  001608  D7FC               	bra	u9347
 14051  00160A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14052  00160C  D7FA               	bra	u9347
 14053  00160E  D000               	nop2	
 14054                           
 14055                           ;Test.c: 368: updateServoPosition(500, 1);
 14056  001610  0E01               	movlw	1
 14057  001612  0100               	movlb	0	; () banked
 14058  001614  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14059  001616  0EF4               	movlw	244
 14060  001618  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14061  00161A  0E00               	movlw	0
 14062  00161C  0100               	movlb	0	; () banked
 14063  00161E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14064  001620  0E01               	movlw	1
 14065  001622  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14066  001624  ECCA  F021         	call	_updateServoPosition	;wreg free
 14067                           
 14068                           ;Test.c: 369: updateServoPosition(1050, 3);
 14069  001628  0E04               	movlw	4
 14070  00162A  0100               	movlb	0	; () banked
 14071  00162C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14072  00162E  0E1A               	movlw	26
 14073  001630  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14074  001632  0E00               	movlw	0
 14075  001634  0100               	movlb	0	; () banked
 14076  001636  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14077  001638  0E03               	movlw	3
 14078  00163A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14079  00163C  ECCA  F021         	call	_updateServoPosition	;wreg free
 14080                           
 14081                           ;Test.c: 370: _delay((unsigned long)((750)*(32000000/4000.0)));
 14082  001640  0E1F               	movlw	31
 14083  001642  0100               	movlb	0	; () banked
 14084  001644  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14085  001646  0E71               	movlw	113
 14086  001648  0100               	movlb	0	; () banked
 14087  00164A  6FAB               	movwf	??_BothServos& (0+255),b
 14088  00164C  0E1E               	movlw	30
 14089  00164E                     u9357:
 14090  00164E  2EE8               	decfsz	wreg,f,c
 14091  001650  D7FE               	bra	u9357
 14092  001652  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14093  001654  D7FC               	bra	u9357
 14094  001656  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14095  001658  D7FA               	bra	u9357
 14096  00165A  F000               	nop	
 14097                           
 14098                           ;Test.c: 371: updateServoPosition(1260, 3);
 14099  00165C  0E04               	movlw	4
 14100  00165E  0100               	movlb	0	; () banked
 14101  001660  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14102  001662  0EEC               	movlw	236
 14103  001664  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14104  001666  0E00               	movlw	0
 14105  001668  0100               	movlb	0	; () banked
 14106  00166A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14107  00166C  0E03               	movlw	3
 14108  00166E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14109  001670  ECCA  F021         	call	_updateServoPosition	;wreg free
 14110                           
 14111                           ;Test.c: 372: _delay((unsigned long)((2500)*(32000000/4000.0)));
 14112  001674  0E66               	movlw	102
 14113  001676  0100               	movlb	0	; () banked
 14114  001678  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14115  00167A  0E76               	movlw	118
 14116  00167C  0100               	movlb	0	; () banked
 14117  00167E  6FAB               	movwf	??_BothServos& (0+255),b
 14118  001680  0EC1               	movlw	193
 14119  001682                     u9367:
 14120  001682  2EE8               	decfsz	wreg,f,c
 14121  001684  D7FE               	bra	u9367
 14122  001686  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14123  001688  D7FC               	bra	u9367
 14124  00168A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14125  00168C  D7FA               	bra	u9367
 14126                           
 14127                           ;Test.c: 373: updateServoPosition(1050, 3);
 14128  00168E  0E04               	movlw	4
 14129  001690  0100               	movlb	0	; () banked
 14130  001692  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14131  001694  0E1A               	movlw	26
 14132  001696  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14133  001698  0E00               	movlw	0
 14134  00169A  0100               	movlb	0	; () banked
 14135  00169C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14136  00169E  0E03               	movlw	3
 14137  0016A0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14138  0016A2  ECCA  F021         	call	_updateServoPosition	;wreg free
 14139                           
 14140                           ;Test.c: 374: _delay((unsigned long)((750)*(32000000/4000.0)));
 14141  0016A6  0E1F               	movlw	31
 14142  0016A8  0100               	movlb	0	; () banked
 14143  0016AA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14144  0016AC  0E71               	movlw	113
 14145  0016AE  0100               	movlb	0	; () banked
 14146  0016B0  6FAB               	movwf	??_BothServos& (0+255),b
 14147  0016B2  0E1E               	movlw	30
 14148  0016B4                     u9377:
 14149  0016B4  2EE8               	decfsz	wreg,f,c
 14150  0016B6  D7FE               	bra	u9377
 14151  0016B8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14152  0016BA  D7FC               	bra	u9377
 14153  0016BC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14154  0016BE  D7FA               	bra	u9377
 14155  0016C0  F000               	nop	
 14156                           
 14157                           ;Test.c: 376: updateServoPosition(850, 1);
 14158  0016C2  0E03               	movlw	3
 14159  0016C4  0100               	movlb	0	; () banked
 14160  0016C6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14161  0016C8  0E52               	movlw	82
 14162  0016CA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14163  0016CC  0E00               	movlw	0
 14164  0016CE  0100               	movlb	0	; () banked
 14165  0016D0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14166  0016D2  0E01               	movlw	1
 14167  0016D4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14168  0016D6  ECCA  F021         	call	_updateServoPosition	;wreg free
 14169                           
 14170                           ;Test.c: 377: updateServoPosition(1050, 3);
 14171  0016DA  0E04               	movlw	4
 14172  0016DC  0100               	movlb	0	; () banked
 14173  0016DE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14174  0016E0  0E1A               	movlw	26
 14175  0016E2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14176  0016E4  0E00               	movlw	0
 14177  0016E6  0100               	movlb	0	; () banked
 14178  0016E8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14179  0016EA  0E03               	movlw	3
 14180  0016EC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14181  0016EE  ECCA  F021         	call	_updateServoPosition	;wreg free
 14182                           
 14183                           ;Test.c: 378: _delay((unsigned long)((750)*(32000000/4000.0)));
 14184  0016F2  0E1F               	movlw	31
 14185  0016F4  0100               	movlb	0	; () banked
 14186  0016F6  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14187  0016F8  0E71               	movlw	113
 14188  0016FA  0100               	movlb	0	; () banked
 14189  0016FC  6FAB               	movwf	??_BothServos& (0+255),b
 14190  0016FE  0E1E               	movlw	30
 14191  001700                     u9387:
 14192  001700  2EE8               	decfsz	wreg,f,c
 14193  001702  D7FE               	bra	u9387
 14194  001704  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14195  001706  D7FC               	bra	u9387
 14196  001708  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14197  00170A  D7FA               	bra	u9387
 14198  00170C  F000               	nop	
 14199                           
 14200                           ;Test.c: 379: updateServoPosition(1260, 3);
 14201  00170E  0E04               	movlw	4
 14202  001710  0100               	movlb	0	; () banked
 14203  001712  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14204  001714  0EEC               	movlw	236
 14205  001716  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14206  001718  0E00               	movlw	0
 14207  00171A  0100               	movlb	0	; () banked
 14208  00171C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14209  00171E  0E03               	movlw	3
 14210  001720  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14211  001722  ECCA  F021         	call	_updateServoPosition	;wreg free
 14212                           
 14213                           ;Test.c: 380: _delay((unsigned long)((2500)*(32000000/4000.0)));
 14214  001726  0E66               	movlw	102
 14215  001728  0100               	movlb	0	; () banked
 14216  00172A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14217  00172C  0E76               	movlw	118
 14218  00172E  0100               	movlb	0	; () banked
 14219  001730  6FAB               	movwf	??_BothServos& (0+255),b
 14220  001732  0EC1               	movlw	193
 14221  001734                     u9397:
 14222  001734  2EE8               	decfsz	wreg,f,c
 14223  001736  D7FE               	bra	u9397
 14224  001738  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14225  00173A  D7FC               	bra	u9397
 14226  00173C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14227  00173E  D7FA               	bra	u9397
 14228                           
 14229                           ;Test.c: 381: updateServoPosition(1050, 3);
 14230  001740  0E04               	movlw	4
 14231  001742  0100               	movlb	0	; () banked
 14232  001744  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14233  001746  0E1A               	movlw	26
 14234  001748  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14235  00174A  0E00               	movlw	0
 14236  00174C  0100               	movlb	0	; () banked
 14237  00174E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14238  001750  0E03               	movlw	3
 14239  001752  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14240  001754  ECCA  F021         	call	_updateServoPosition	;wreg free
 14241                           
 14242                           ;Test.c: 382: _delay((unsigned long)((750)*(32000000/4000.0)));
 14243  001758  0E1F               	movlw	31
 14244  00175A  0100               	movlb	0	; () banked
 14245  00175C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14246  00175E  0E71               	movlw	113
 14247  001760  0100               	movlb	0	; () banked
 14248  001762  6FAB               	movwf	??_BothServos& (0+255),b
 14249  001764  0E1E               	movlw	30
 14250  001766                     u9407:
 14251  001766  2EE8               	decfsz	wreg,f,c
 14252  001768  D7FE               	bra	u9407
 14253  00176A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14254  00176C  D7FC               	bra	u9407
 14255  00176E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14256  001770  D7FA               	bra	u9407
 14257  001772  F000               	nop	
 14258                           
 14259                           ;Test.c: 384: updateServoPosition(1200, 1);
 14260  001774  0E04               	movlw	4
 14261  001776  0100               	movlb	0	; () banked
 14262  001778  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14263  00177A  0EB0               	movlw	176
 14264  00177C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14265  00177E  0E00               	movlw	0
 14266  001780  0100               	movlb	0	; () banked
 14267  001782  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14268  001784  0E01               	movlw	1
 14269  001786  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14270  001788  ECCA  F021         	call	_updateServoPosition	;wreg free
 14271                           
 14272                           ;Test.c: 385: updateServoPosition(1050, 3);
 14273  00178C  0E04               	movlw	4
 14274  00178E  0100               	movlb	0	; () banked
 14275  001790  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14276  001792  0E1A               	movlw	26
 14277  001794  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14278  001796  0E00               	movlw	0
 14279  001798  0100               	movlb	0	; () banked
 14280  00179A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14281  00179C  0E03               	movlw	3
 14282  00179E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14283  0017A0  ECCA  F021         	call	_updateServoPosition	;wreg free
 14284                           
 14285                           ;Test.c: 386: _delay((unsigned long)((1500)*(32000000/4000.0)));
 14286  0017A4  0E3D               	movlw	61
 14287  0017A6  0100               	movlb	0	; () banked
 14288  0017A8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14289  0017AA  0EE1               	movlw	225
 14290  0017AC  0100               	movlb	0	; () banked
 14291  0017AE  6FAB               	movwf	??_BothServos& (0+255),b
 14292  0017B0  0E3F               	movlw	63
 14293  0017B2                     u9417:
 14294  0017B2  2EE8               	decfsz	wreg,f,c
 14295  0017B4  D7FE               	bra	u9417
 14296  0017B6  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14297  0017B8  D7FC               	bra	u9417
 14298  0017BA  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14299  0017BC  D7FA               	bra	u9417
 14300  0017BE  D000               	nop2	
 14301                           
 14302                           ;Test.c: 388: updateServoPosition(1670, 1);
 14303  0017C0  0E06               	movlw	6
 14304  0017C2  0100               	movlb	0	; () banked
 14305  0017C4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14306  0017C6  0E86               	movlw	134
 14307  0017C8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14308  0017CA  0E00               	movlw	0
 14309  0017CC  0100               	movlb	0	; () banked
 14310  0017CE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14311  0017D0  0E01               	movlw	1
 14312  0017D2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14313  0017D4  ECCA  F021         	call	_updateServoPosition	;wreg free
 14314                           
 14315                           ;Test.c: 389: updateServoPosition(1050, 3);
 14316  0017D8  0E04               	movlw	4
 14317  0017DA  0100               	movlb	0	; () banked
 14318  0017DC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14319  0017DE  0E1A               	movlw	26
 14320  0017E0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14321  0017E2  0E00               	movlw	0
 14322  0017E4  0100               	movlb	0	; () banked
 14323  0017E6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14324  0017E8  0E03               	movlw	3
 14325  0017EA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14326  0017EC  ECCA  F021         	call	_updateServoPosition	;wreg free
 14327                           
 14328                           ;Test.c: 390: _delay((unsigned long)((750)*(32000000/4000.0)));
 14329  0017F0  0E1F               	movlw	31
 14330  0017F2  0100               	movlb	0	; () banked
 14331  0017F4  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14332  0017F6  0E71               	movlw	113
 14333  0017F8  0100               	movlb	0	; () banked
 14334  0017FA  6FAB               	movwf	??_BothServos& (0+255),b
 14335  0017FC  0E1E               	movlw	30
 14336  0017FE                     u9427:
 14337  0017FE  2EE8               	decfsz	wreg,f,c
 14338  001800  D7FE               	bra	u9427
 14339  001802  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14340  001804  D7FC               	bra	u9427
 14341  001806  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14342  001808  D7FA               	bra	u9427
 14343  00180A  F000               	nop	
 14344                           
 14345                           ;Test.c: 391: updateServoPosition(1400, 3);
 14346  00180C  0E05               	movlw	5
 14347  00180E  0100               	movlb	0	; () banked
 14348  001810  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14349  001812  0E78               	movlw	120
 14350  001814  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14351  001816  0E00               	movlw	0
 14352  001818  0100               	movlb	0	; () banked
 14353  00181A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14354  00181C  0E03               	movlw	3
 14355  00181E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14356  001820  ECCA  F021         	call	_updateServoPosition	;wreg free
 14357                           
 14358                           ;Test.c: 392: _delay((unsigned long)((2500)*(32000000/4000.0)));
 14359  001824  0E66               	movlw	102
 14360  001826  0100               	movlb	0	; () banked
 14361  001828  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14362  00182A  0E76               	movlw	118
 14363  00182C  0100               	movlb	0	; () banked
 14364  00182E  6FAB               	movwf	??_BothServos& (0+255),b
 14365  001830  0EC1               	movlw	193
 14366  001832                     u9437:
 14367  001832  2EE8               	decfsz	wreg,f,c
 14368  001834  D7FE               	bra	u9437
 14369  001836  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14370  001838  D7FC               	bra	u9437
 14371  00183A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14372  00183C  D7FA               	bra	u9437
 14373                           
 14374                           ;Test.c: 393: updateServoPosition(1050, 3);
 14375  00183E  0E04               	movlw	4
 14376  001840  0100               	movlb	0	; () banked
 14377  001842  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14378  001844  0E1A               	movlw	26
 14379  001846  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14380  001848  0E00               	movlw	0
 14381  00184A  0100               	movlb	0	; () banked
 14382  00184C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14383  00184E  0E03               	movlw	3
 14384  001850  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14385  001852  ECCA  F021         	call	_updateServoPosition	;wreg free
 14386                           
 14387                           ;Test.c: 394: _delay((unsigned long)((750)*(32000000/4000.0)));
 14388  001856  0E1F               	movlw	31
 14389  001858  0100               	movlb	0	; () banked
 14390  00185A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14391  00185C  0E71               	movlw	113
 14392  00185E  0100               	movlb	0	; () banked
 14393  001860  6FAB               	movwf	??_BothServos& (0+255),b
 14394  001862  0E1E               	movlw	30
 14395  001864                     u9447:
 14396  001864  2EE8               	decfsz	wreg,f,c
 14397  001866  D7FE               	bra	u9447
 14398  001868  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14399  00186A  D7FC               	bra	u9447
 14400  00186C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14401  00186E  D7FA               	bra	u9447
 14402  001870  F000               	nop	
 14403                           
 14404                           ;Test.c: 396: updateServoPosition(2400, 1);
 14405  001872  0E09               	movlw	9
 14406  001874  0100               	movlb	0	; () banked
 14407  001876  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14408  001878  0E60               	movlw	96
 14409  00187A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14410  00187C  0E00               	movlw	0
 14411  00187E  0100               	movlb	0	; () banked
 14412  001880  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14413  001882  0E01               	movlw	1
 14414  001884  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14415  001886  ECCA  F021         	call	_updateServoPosition	;wreg free
 14416                           
 14417                           ;Test.c: 397: updateServoPosition(1050, 3);
 14418  00188A  0E04               	movlw	4
 14419  00188C  0100               	movlb	0	; () banked
 14420  00188E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14421  001890  0E1A               	movlw	26
 14422  001892  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14423  001894  0E00               	movlw	0
 14424  001896  0100               	movlb	0	; () banked
 14425  001898  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14426  00189A  0E03               	movlw	3
 14427  00189C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14428  00189E  ECCA  F021         	call	_updateServoPosition	;wreg free
 14429                           
 14430                           ;Test.c: 398: _delay((unsigned long)((750)*(32000000/4000.0)));
 14431  0018A2  0E1F               	movlw	31
 14432  0018A4  0100               	movlb	0	; () banked
 14433  0018A6  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14434  0018A8  0E71               	movlw	113
 14435  0018AA  0100               	movlb	0	; () banked
 14436  0018AC  6FAB               	movwf	??_BothServos& (0+255),b
 14437  0018AE  0E1E               	movlw	30
 14438  0018B0                     u9457:
 14439  0018B0  2EE8               	decfsz	wreg,f,c
 14440  0018B2  D7FE               	bra	u9457
 14441  0018B4  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14442  0018B6  D7FC               	bra	u9457
 14443  0018B8  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14444  0018BA  D7FA               	bra	u9457
 14445  0018BC  F000               	nop	
 14446                           
 14447                           ;Test.c: 399: updateServoPosition(1400, 3);
 14448  0018BE  0E05               	movlw	5
 14449  0018C0  0100               	movlb	0	; () banked
 14450  0018C2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14451  0018C4  0E78               	movlw	120
 14452  0018C6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14453  0018C8  0E00               	movlw	0
 14454  0018CA  0100               	movlb	0	; () banked
 14455  0018CC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14456  0018CE  0E03               	movlw	3
 14457  0018D0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14458  0018D2  ECCA  F021         	call	_updateServoPosition	;wreg free
 14459                           
 14460                           ;Test.c: 400: _delay((unsigned long)((2500)*(32000000/4000.0)));
 14461  0018D6  0E66               	movlw	102
 14462  0018D8  0100               	movlb	0	; () banked
 14463  0018DA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14464  0018DC  0E76               	movlw	118
 14465  0018DE  0100               	movlb	0	; () banked
 14466  0018E0  6FAB               	movwf	??_BothServos& (0+255),b
 14467  0018E2  0EC1               	movlw	193
 14468  0018E4                     u9467:
 14469  0018E4  2EE8               	decfsz	wreg,f,c
 14470  0018E6  D7FE               	bra	u9467
 14471  0018E8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14472  0018EA  D7FC               	bra	u9467
 14473  0018EC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14474  0018EE  D7FA               	bra	u9467
 14475                           
 14476                           ;Test.c: 401: updateServoPosition(1050, 3);
 14477  0018F0  0E04               	movlw	4
 14478  0018F2  0100               	movlb	0	; () banked
 14479  0018F4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14480  0018F6  0E1A               	movlw	26
 14481  0018F8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14482  0018FA  0E00               	movlw	0
 14483  0018FC  0100               	movlb	0	; () banked
 14484  0018FE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14485  001900  0E03               	movlw	3
 14486  001902  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14487  001904  ECCA  F021         	call	_updateServoPosition	;wreg free
 14488                           
 14489                           ;Test.c: 402: _delay((unsigned long)((750)*(32000000/4000.0)));
 14490  001908  0E1F               	movlw	31
 14491  00190A  0100               	movlb	0	; () banked
 14492  00190C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14493  00190E  0E71               	movlw	113
 14494  001910  0100               	movlb	0	; () banked
 14495  001912  6FAB               	movwf	??_BothServos& (0+255),b
 14496  001914  0E1E               	movlw	30
 14497  001916                     u9477:
 14498  001916  2EE8               	decfsz	wreg,f,c
 14499  001918  D7FE               	bra	u9477
 14500  00191A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14501  00191C  D7FC               	bra	u9477
 14502  00191E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14503  001920  D7FA               	bra	u9477
 14504  001922  F000               	nop	
 14505                           
 14506                           ;Test.c: 404: TMR1ON = 0;
 14507  001924  90CD               	bcf	4045,0,c	;volatile
 14508                           
 14509                           ;Test.c: 405: TMR3ON = 0;
 14510  001926  90B1               	bcf	4017,0,c	;volatile
 14511                           
 14512                           ;Test.c: 406: (INTCONbits.GIE = 0);
 14513  001928  9EF2               	bcf	intcon,7,c	;volatile
 14514  00192A  0012               	return		;funcret
 14515  00192C                     __end_of_BothServos:
 14516                           	opt stack 0
 14517                           tblptru	equ	0xFF8
 14518                           tblptrh	equ	0xFF7
 14519                           tblptrl	equ	0xFF6
 14520                           tablat	equ	0xFF5
 14521                           prodh	equ	0xFF4
 14522                           prodl	equ	0xFF3
 14523                           intcon	equ	0xFF2
 14524                           intcon2	equ	0xFF1
 14525                           intcon3	equ	0xFF0
 14526                           postinc0	equ	0xFEE
 14527                           wreg	equ	0xFE8
 14528                           postdec1	equ	0xFE5
 14529                           fsr1l	equ	0xFE1
 14530                           indf2	equ	0xFDF
 14531                           postinc2	equ	0xFDE
 14532                           postdec2	equ	0xFDD
 14533                           fsr2h	equ	0xFDA
 14534                           fsr2l	equ	0xFD9
 14535                           status	equ	0xFD8
 14536                           
 14537 ;; *************** function _initServos *****************
 14538 ;; Defined at:
 14539 ;;		line 368 in file "sort.c"
 14540 ;; Parameters:    Size  Location     Type
 14541 ;;		None
 14542 ;; Auto vars:     Size  Location     Type
 14543 ;;		None
 14544 ;; Return value:  Size  Location     Type
 14545 ;;                  1    wreg      void 
 14546 ;; Registers used:
 14547 ;;		wreg, status,2, status,0, cstack
 14548 ;; Tracked objects:
 14549 ;;		On entry : 0/0
 14550 ;;		On exit  : 0/0
 14551 ;;		Unchanged: 0/0
 14552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14554 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14555 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14556 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14557 ;;Total ram usage:        1 bytes
 14558 ;; Hardware stack levels used:    1
 14559 ;; Hardware stack levels required when called:    8
 14560 ;; This function calls:
 14561 ;;		_updateServoPosition
 14562 ;; This function is called by:
 14563 ;;		_Loading
 14564 ;;		_BothServos
 14565 ;; This function uses a non-reentrant model
 14566 ;;
 14567                           
 14568                           	psect	text48
 14569  0046D0                     __ptext48:
 14570                           	opt stack 0
 14571  0046D0                     _initServos:
 14572                           	opt stack 20
 14573                           
 14574                           ;sort.c: 369: updateServoPosition(1200, 1);
 14575                           
 14576                           ;incstack = 0
 14577  0046D0  0E04               	movlw	4
 14578  0046D2  0100               	movlb	0	; () banked
 14579  0046D4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14580  0046D6  0EB0               	movlw	176
 14581  0046D8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14582  0046DA  0E00               	movlw	0
 14583  0046DC  0100               	movlb	0	; () banked
 14584  0046DE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14585  0046E0  0E01               	movlw	1
 14586  0046E2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14587  0046E4  ECCA  F021         	call	_updateServoPosition	;wreg free
 14588                           
 14589                           ;sort.c: 370: updateServoPosition(1050, 3);
 14590  0046E8  0E04               	movlw	4
 14591  0046EA  0100               	movlb	0	; () banked
 14592  0046EC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14593  0046EE  0E1A               	movlw	26
 14594  0046F0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14595  0046F2  0E00               	movlw	0
 14596  0046F4  0100               	movlb	0	; () banked
 14597  0046F6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14598  0046F8  0E03               	movlw	3
 14599  0046FA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14600  0046FC  ECCA  F021         	call	_updateServoPosition	;wreg free
 14601                           
 14602                           ;sort.c: 371: TMR1ON = 1;
 14603  004700  80CD               	bsf	4045,0,c	;volatile
 14604                           
 14605                           ;sort.c: 372: was_low_1 = 0;
 14606  004702  0E00               	movlw	0
 14607  004704  6E7A               	movwf	_was_low_1+1,c	;volatile
 14608  004706  0E00               	movlw	0
 14609  004708  6E79               	movwf	_was_low_1,c	;volatile
 14610                           
 14611                           ;sort.c: 373: _delay((unsigned long)((5)*(32000000/4000.0)));
 14612  00470A  0E34               	movlw	52
 14613  00470C  0100               	movlb	0	; () banked
 14614  00470E  6F88               	movwf	??_initServos& (0+255),b
 14615  004710  0EF1               	movlw	241
 14616  004712                     u9487:
 14617  004712  2EE8               	decfsz	wreg,f,c
 14618  004714  D7FE               	bra	u9487
 14619  004716  2F88               	decfsz	??_initServos& (0+255),f,b
 14620  004718  D7FC               	bra	u9487
 14621  00471A  D000               	nop2	
 14622                           
 14623                           ;sort.c: 374: TMR3ON = 1;
 14624  00471C  80B1               	bsf	4017,0,c	;volatile
 14625                           
 14626                           ;sort.c: 375: was_low_3 = 0;
 14627  00471E  0E00               	movlw	0
 14628  004720  6E7C               	movwf	_was_low_3+1,c	;volatile
 14629  004722  0E00               	movlw	0
 14630  004724  6E7B               	movwf	_was_low_3,c	;volatile
 14631                           
 14632                           ;sort.c: 377: LATCbits.LATC0 = 1;
 14633  004726  808B               	bsf	3979,0,c	;volatile
 14634  004728  0012               	return		;funcret
 14635  00472A                     __end_of_initServos:
 14636                           	opt stack 0
 14637                           tblptru	equ	0xFF8
 14638                           tblptrh	equ	0xFF7
 14639                           tblptrl	equ	0xFF6
 14640                           tablat	equ	0xFF5
 14641                           prodh	equ	0xFF4
 14642                           prodl	equ	0xFF3
 14643                           intcon	equ	0xFF2
 14644                           intcon2	equ	0xFF1
 14645                           intcon3	equ	0xFF0
 14646                           postinc0	equ	0xFEE
 14647                           wreg	equ	0xFE8
 14648                           postdec1	equ	0xFE5
 14649                           fsr1l	equ	0xFE1
 14650                           indf2	equ	0xFDF
 14651                           postinc2	equ	0xFDE
 14652                           postdec2	equ	0xFDD
 14653                           fsr2h	equ	0xFDA
 14654                           fsr2l	equ	0xFD9
 14655                           status	equ	0xFD8
 14656                           
 14657 ;; *************** function _updateServoPosition *****************
 14658 ;; Defined at:
 14659 ;;		line 436 in file "sort.c"
 14660 ;; Parameters:    Size  Location     Type
 14661 ;;  time_us         2    0[BANK0 ] int 
 14662 ;;  timer           2    2[BANK0 ] int 
 14663 ;; Auto vars:     Size  Location     Type
 14664 ;;  my_time         2    6[BANK0 ] unsigned int 
 14665 ;; Return value:  Size  Location     Type
 14666 ;;                  1    wreg      void 
 14667 ;; Registers used:
 14668 ;;		wreg, status,2, status,0
 14669 ;; Tracked objects:
 14670 ;;		On entry : 0/0
 14671 ;;		On exit  : 0/0
 14672 ;;		Unchanged: 0/0
 14673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14674 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14675 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14676 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14677 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14678 ;;Total ram usage:        8 bytes
 14679 ;; Hardware stack levels used:    1
 14680 ;; Hardware stack levels required when called:    7
 14681 ;; This function calls:
 14682 ;;		Nothing
 14683 ;; This function is called by:
 14684 ;;		_Distribution
 14685 ;;		_initServos
 14686 ;;		_actuatorTest
 14687 ;;		_BothServos
 14688 ;; This function uses a non-reentrant model
 14689 ;;
 14690                           
 14691                           	psect	text49
 14692  004394                     __ptext49:
 14693                           	opt stack 0
 14694  004394                     _updateServoPosition:
 14695                           	opt stack 20
 14696                           
 14697                           ;sort.c: 437: unsigned int my_time = 65535 - time_us;
 14698                           
 14699                           ;incstack = 0
 14700  004394  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 14701  004398  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 14702  00439C  0100               	movlb	0	; () banked
 14703  00439E  1F84               	comf	??_updateServoPosition& (0+255),f,b
 14704  0043A0  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 14705  0043A2  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 14706  0043A4  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 14707  0043A6  0EFF               	movlw	255
 14708  0043A8  0100               	movlb	0	; () banked
 14709  0043AA  2584               	addwf	??_updateServoPosition& (0+255),w,b
 14710  0043AC  0100               	movlb	0	; () banked
 14711  0043AE  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 14712  0043B0  0EFF               	movlw	255
 14713  0043B2  0100               	movlb	0	; () banked
 14714  0043B4  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 14715  0043B6  0100               	movlb	0	; () banked
 14716  0043B8  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 14717                           
 14718                           ;sort.c: 438: switch(timer){
 14719  0043BA  D015               	goto	l6002
 14720  0043BC                     l6000:
 14721                           
 14722                           ; BSR set to: 0
 14723                           ;sort.c: 440: servoTimes[0] = my_time >> 8;
 14724  0043BC  0100               	movlb	0	; () banked
 14725  0043BE  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 14726  0043C0  0101               	movlb	1	; () banked
 14727  0043C2  6F1C               	movwf	_servoTimes& (0+255),b
 14728  0043C4  6B1D               	clrf	(_servoTimes+1)& (0+255),b
 14729                           
 14730                           ;sort.c: 441: servoTimes[1] = my_time & 0xFF;
 14731  0043C6  0100               	movlb	0	; () banked
 14732  0043C8  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 14733  0043CA  0101               	movlb	1	; () banked
 14734  0043CC  6F1E               	movwf	(_servoTimes+2)& (0+255),b
 14735  0043CE  6B1F               	clrf	(_servoTimes+3)& (0+255),b
 14736  0043D0                     l838:
 14737                           
 14738                           ;sort.c: 443: servoTimes[2] = my_time >> 8;
 14739  0043D0  0100               	movlb	0	; () banked
 14740  0043D2  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 14741  0043D4  0101               	movlb	1	; () banked
 14742  0043D6  6F20               	movwf	(_servoTimes+4)& (0+255),b
 14743  0043D8  6B21               	clrf	(_servoTimes+5)& (0+255),b
 14744                           
 14745                           ;sort.c: 444: servoTimes[3] = my_time & 0xFF;
 14746  0043DA  0100               	movlb	0	; () banked
 14747  0043DC  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 14748  0043DE  0101               	movlb	1	; () banked
 14749  0043E0  6F22               	movwf	(_servoTimes+6)& (0+255),b
 14750  0043E2  6B23               	clrf	(_servoTimes+7)& (0+255),b
 14751                           
 14752                           ;sort.c: 445: }
 14753  0043E4  0012               	return	
 14754  0043E6                     l6002:
 14755  0043E6  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 14756  0043EA  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 14757                           
 14758                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14759                           ; Switch size 1, requested type "space"
 14760                           ; Number of cases is 1, Range of values is 0 to 0
 14761                           ; switch strategies available:
 14762                           ; Name         Instructions Cycles
 14763                           ; simple_byte            4     3 (average)
 14764                           ;	Chosen strategy is simple_byte
 14765  0043EE  0100               	movlb	0	; () banked
 14766  0043F0  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 14767  0043F2  0A00               	xorlw	0	; case 0
 14768  0043F4  A4D8               	btfss	status,2,c
 14769  0043F6  0012               	return	
 14770                           
 14771                           ; BSR set to: 0
 14772                           ; Switch size 1, requested type "space"
 14773                           ; Number of cases is 2, Range of values is 1 to 3
 14774                           ; switch strategies available:
 14775                           ; Name         Instructions Cycles
 14776                           ; simple_byte            7     4 (average)
 14777                           ;	Chosen strategy is simple_byte
 14778  0043F8  0100               	movlb	0	; () banked
 14779  0043FA  5184               	movf	??_updateServoPosition& (0+255),w,b
 14780  0043FC  0A01               	xorlw	1	; case 1
 14781  0043FE  B4D8               	btfsc	status,2,c
 14782  004400  D7DD               	goto	l6000
 14783  004402  0A02               	xorlw	2	; case 3
 14784  004404  A4D8               	btfss	status,2,c
 14785  004406  0012               	return	
 14786  004408  D7E3               	goto	l838
 14787  00440A                     __end_of_updateServoPosition:
 14788                           	opt stack 0
 14789                           tblptru	equ	0xFF8
 14790                           tblptrh	equ	0xFF7
 14791                           tblptrl	equ	0xFF6
 14792                           tablat	equ	0xFF5
 14793                           prodh	equ	0xFF4
 14794                           prodl	equ	0xFF3
 14795                           intcon	equ	0xFF2
 14796                           intcon2	equ	0xFF1
 14797                           intcon3	equ	0xFF0
 14798                           postinc0	equ	0xFEE
 14799                           wreg	equ	0xFE8
 14800                           postdec1	equ	0xFE5
 14801                           fsr1l	equ	0xFE1
 14802                           indf2	equ	0xFDF
 14803                           postinc2	equ	0xFDE
 14804                           postdec2	equ	0xFDD
 14805                           fsr2h	equ	0xFDA
 14806                           fsr2l	equ	0xFD9
 14807                           status	equ	0xFD8
 14808                           
 14809 ;; *************** function _BlockerTest *****************
 14810 ;; Defined at:
 14811 ;;		line 589 in file "Test.c"
 14812 ;; Parameters:    Size  Location     Type
 14813 ;;		None
 14814 ;; Auto vars:     Size  Location     Type
 14815 ;;  i               2   44[BANK0 ] int 
 14816 ;;  cond_flag       2   48[BANK0 ] int 
 14817 ;;  cam_flag        2   46[BANK0 ] int 
 14818 ;; Return value:  Size  Location     Type
 14819 ;;                  1    wreg      void 
 14820 ;; Registers used:
 14821 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14822 ;; Tracked objects:
 14823 ;;		On entry : 0/0
 14824 ;;		On exit  : 0/0
 14825 ;;		Unchanged: 0/0
 14826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14828 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14829 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14830 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14831 ;;Total ram usage:        7 bytes
 14832 ;; Hardware stack levels used:    1
 14833 ;; Hardware stack levels required when called:   10
 14834 ;; This function calls:
 14835 ;;		_lcdInst
 14836 ;;		_printf
 14837 ;; This function is called by:
 14838 ;;		_Test
 14839 ;; This function uses a non-reentrant model
 14840 ;;
 14841                           
 14842                           	psect	text50
 14843  0034C6                     __ptext50:
 14844                           	opt stack 0
 14845  0034C6                     _BlockerTest:
 14846                           	opt stack 19
 14847                           
 14848                           ;Test.c: 590: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14849                           
 14850                           ;incstack = 0
 14851  0034C6  0E01               	movlw	1
 14852  0034C8  EC6E  F027         	call	_lcdInst
 14853  0034CC  0E68               	movlw	104
 14854  0034CE  0100               	movlb	0	; () banked
 14855  0034D0  6FAB               	movwf	??_BlockerTest& (0+255),b
 14856  0034D2  0EE4               	movlw	228
 14857  0034D4                     u9497:
 14858  0034D4  2EE8               	decfsz	wreg,f,c
 14859  0034D6  D7FE               	bra	u9497
 14860  0034D8  2FAB               	decfsz	??_BlockerTest& (0+255),f,b
 14861  0034DA  D7FC               	bra	u9497
 14862  0034DC  F000               	nop	
 14863  0034DE  0E80               	movlw	128
 14864  0034E0  EC6E  F027         	call	_lcdInst
 14865                           
 14866                           ;Test.c: 591: printf("D: RET|2: COND %d", PORTAbits.RA2);
 14867  0034E4  0E7F               	movlw	low STR_122
 14868  0034E6  0100               	movlb	0	; () banked
 14869  0034E8  6F8E               	movwf	printf@f& (0+255),b
 14870  0034EA  0EFB               	movlw	high STR_122
 14871  0034EC  0100               	movlb	0	; () banked
 14872  0034EE  6F8F               	movwf	(printf@f+1)& (0+255),b
 14873  0034F0  A480               	btfss	3968,2,c	;volatile
 14874  0034F2  D004               	goto	u6650
 14875  0034F4  0100               	movlb	0	; () banked
 14876  0034F6  6BAB               	clrf	??_BlockerTest& (0+255),b
 14877  0034F8  2BAB               	incf	??_BlockerTest& (0+255),f,b
 14878  0034FA  D002               	goto	u6658
 14879  0034FC                     u6650:
 14880  0034FC  0100               	movlb	0	; () banked
 14881  0034FE  6BAB               	clrf	??_BlockerTest& (0+255),b
 14882  003500                     u6658:
 14883  003500  0100               	movlb	0	; () banked
 14884  003502  51AB               	movf	??_BlockerTest& (0+255),w,b
 14885  003504  0100               	movlb	0	; () banked
 14886  003506  6F90               	movwf	(?_printf+2)& (0+255),b
 14887  003508  6B91               	clrf	(?_printf+3)& (0+255),b
 14888  00350A  ECB8  F008         	call	_printf	;wreg free
 14889                           
 14890                           ;Test.c: 592: lcdInst(0b11000000);;
 14891  00350E  0EC0               	movlw	192
 14892  003510  EC6E  F027         	call	_lcdInst
 14893                           
 14894                           ;Test.c: 593: printf("OTHER: CAM TOGGLE");
 14895  003514  0E6D               	movlw	low STR_123
 14896  003516  0100               	movlb	0	; () banked
 14897  003518  6F8E               	movwf	printf@f& (0+255),b
 14898  00351A  0EFB               	movlw	high STR_123
 14899  00351C  0100               	movlb	0	; () banked
 14900  00351E  6F8F               	movwf	(printf@f+1)& (0+255),b
 14901  003520  ECB8  F008         	call	_printf	;wreg free
 14902                           
 14903                           ;Test.c: 594: int cam_flag = 1;
 14904  003524  0E00               	movlw	0
 14905  003526  0100               	movlb	0	; () banked
 14906  003528  6FAF               	movwf	(BlockerTest@cam_flag+1)& (0+255),b
 14907  00352A  0E01               	movlw	1
 14908  00352C  6FAE               	movwf	BlockerTest@cam_flag& (0+255),b
 14909                           
 14910                           ; BSR set to: 0
 14911                           ;Test.c: 595: int cond_flag = 0;
 14912  00352E  0E00               	movlw	0
 14913  003530  0100               	movlb	0	; () banked
 14914  003532  6FB1               	movwf	(BlockerTest@cond_flag+1)& (0+255),b
 14915  003534  0E00               	movlw	0
 14916  003536  6FB0               	movwf	BlockerTest@cond_flag& (0+255),b
 14917                           
 14918                           ; BSR set to: 0
 14919                           ;Test.c: 597: while(PORTBbits.RB1 == 0){
 14920                           
 14921                           ;Test.c: 596: while(1){
 14922  003538  D018               	goto	l7866
 14923  00353A                     l7862:
 14924                           
 14925                           ;Test.c: 598: lcdInst(0b10000000);;
 14926  00353A  0E80               	movlw	128
 14927  00353C  EC6E  F027         	call	_lcdInst
 14928                           
 14929                           ;Test.c: 599: printf("D: RET|2: COND %d", PORTAbits.RA2);
 14930  003540  0E7F               	movlw	low STR_122
 14931  003542  0100               	movlb	0	; () banked
 14932  003544  6F8E               	movwf	printf@f& (0+255),b
 14933  003546  0EFB               	movlw	high STR_122
 14934  003548  0100               	movlb	0	; () banked
 14935  00354A  6F8F               	movwf	(printf@f+1)& (0+255),b
 14936  00354C  A480               	btfss	3968,2,c	;volatile
 14937  00354E  D004               	goto	u6660
 14938  003550  0100               	movlb	0	; () banked
 14939  003552  6BAB               	clrf	??_BlockerTest& (0+255),b
 14940  003554  2BAB               	incf	??_BlockerTest& (0+255),f,b
 14941  003556  D002               	goto	u6668
 14942  003558                     u6660:
 14943  003558  0100               	movlb	0	; () banked
 14944  00355A  6BAB               	clrf	??_BlockerTest& (0+255),b
 14945  00355C                     u6668:
 14946  00355C  0100               	movlb	0	; () banked
 14947  00355E  51AB               	movf	??_BlockerTest& (0+255),w,b
 14948  003560  0100               	movlb	0	; () banked
 14949  003562  6F90               	movwf	(?_printf+2)& (0+255),b
 14950  003564  6B91               	clrf	(?_printf+3)& (0+255),b
 14951  003566  ECB8  F008         	call	_printf	;wreg free
 14952  00356A                     l7866:
 14953  00356A  A281               	btfss	3969,1,c	;volatile
 14954  00356C  D7E6               	goto	l7862
 14955                           
 14956                           ;Test.c: 600: }
 14957                           ;Test.c: 601: if(PORTB >> 4 == 0b1111){
 14958  00356E  3881               	swapf	3969,w,c	;volatile
 14959  003570  0B0F               	andlw	15
 14960  003572  0A0F               	xorlw	15
 14961  003574  B4D8               	btfsc	status,2,c
 14962  003576  0012               	return	
 14963                           
 14964                           ;Test.c: 604: else if(PORTB >> 4 == 0b0001){
 14965                           
 14966                           ;Test.c: 603: }
 14967                           
 14968                           ;Test.c: 602: break;
 14969  003578  3881               	swapf	3969,w,c	;volatile
 14970  00357A  0B0F               	andlw	15
 14971  00357C  06E8               	decf	wreg,f,c
 14972  00357E  A4D8               	btfss	status,2,c
 14973  003580  D016               	goto	l7884
 14974                           
 14975                           ;Test.c: 605: if(cond_flag){
 14976  003582  0100               	movlb	0	; () banked
 14977  003584  51B0               	movf	BlockerTest@cond_flag& (0+255),w,b
 14978  003586  0100               	movlb	0	; () banked
 14979  003588  11B1               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 14980  00358A  B4D8               	btfsc	status,2,c
 14981  00358C  D007               	goto	l1311
 14982                           
 14983                           ; BSR set to: 0
 14984                           ;Test.c: 606: LATAbits.LATA3 = 1;
 14985  00358E  8689               	bsf	3977,3,c	;volatile
 14986  003590  D006               	goto	l7882
 14987  003592                     u6711:
 14988  003592  0E01               	movlw	1
 14989  003594                     u6720:
 14990  003594  0100               	movlb	0	; () banked
 14991  003596  6FB0               	movwf	BlockerTest@cond_flag& (0+255),b
 14992  003598  6BB1               	clrf	(BlockerTest@cond_flag+1)& (0+255),b
 14993                           
 14994                           ;Test.c: 608: }
 14995  00359A  D054               	goto	l7908
 14996  00359C                     l1311:
 14997                           
 14998                           ; BSR set to: 0
 14999                           ;Test.c: 609: else{
 15000                           ;Test.c: 610: LATAbits.LATA3 = 0;
 15001  00359C  9689               	bcf	3977,3,c	;volatile
 15002  00359E                     l7882:
 15003                           
 15004                           ; BSR set to: 0
 15005                           ;Test.c: 611: cond_flag = !cond_flag;
 15006  00359E  0100               	movlb	0	; () banked
 15007  0035A0  51B0               	movf	BlockerTest@cond_flag& (0+255),w,b
 15008  0035A2  0100               	movlb	0	; () banked
 15009  0035A4  11B1               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 15010  0035A6  B4D8               	btfsc	status,2,c
 15011  0035A8  D7F4               	goto	u6711
 15012  0035AA  0E00               	movlw	0
 15013  0035AC  D7F3               	goto	u6720
 15014  0035AE                     l7884:
 15015                           
 15016                           ;Test.c: 614: else{
 15017                           ;Test.c: 615: if(cam_flag){
 15018  0035AE  0100               	movlb	0	; () banked
 15019  0035B0  51AE               	movf	BlockerTest@cam_flag& (0+255),w,b
 15020  0035B2  0100               	movlb	0	; () banked
 15021  0035B4  11AF               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 15022  0035B6  B4D8               	btfsc	status,2,c
 15023  0035B8  D007               	goto	l7890
 15024                           
 15025                           ; BSR set to: 0
 15026                           ;Test.c: 616: LATCbits.LATC0 = 1;
 15027  0035BA  808B               	bsf	3979,0,c	;volatile
 15028  0035BC  D023               	goto	l7902
 15029  0035BE                     u6761:
 15030  0035BE  0E01               	movlw	1
 15031  0035C0                     u6770:
 15032  0035C0  0100               	movlb	0	; () banked
 15033  0035C2  6FAE               	movwf	BlockerTest@cam_flag& (0+255),b
 15034  0035C4  6BAF               	clrf	(BlockerTest@cam_flag+1)& (0+255),b
 15035                           
 15036                           ;Test.c: 618: }
 15037  0035C6  D03E               	goto	l7908
 15038  0035C8                     l7890:
 15039                           
 15040                           ; BSR set to: 0
 15041                           ;Test.c: 619: else{
 15042                           ;Test.c: 620: for(int i=0;i<5000;i++)
 15043  0035C8  0E00               	movlw	0
 15044  0035CA  0100               	movlb	0	; () banked
 15045  0035CC  6FAD               	movwf	(BlockerTest@i+1)& (0+255),b
 15046  0035CE  0E00               	movlw	0
 15047  0035D0  6FAC               	movwf	BlockerTest@i& (0+255),b
 15048  0035D2                     l7892:
 15049                           
 15050                           ; BSR set to: 0
 15051  0035D2  0100               	movlb	0	; () banked
 15052  0035D4  BFAD               	btfsc	(BlockerTest@i+1)& (0+255),7,b
 15053  0035D6  D008               	goto	l1316
 15054  0035D8  0E88               	movlw	136
 15055  0035DA  0100               	movlb	0	; () banked
 15056  0035DC  5DAC               	subwf	BlockerTest@i& (0+255),w,b
 15057  0035DE  0E13               	movlw	19
 15058  0035E0  0100               	movlb	0	; () banked
 15059  0035E2  59AD               	subwfb	(BlockerTest@i+1)& (0+255),w,b
 15060  0035E4  B0D8               	btfsc	status,0,c
 15061  0035E6  D00D               	goto	l1317
 15062  0035E8                     l1316:
 15063                           
 15064                           ; BSR set to: 0
 15065                           ;Test.c: 621: {
 15066                           ;Test.c: 622: LATCbits.LATC0 = 1;
 15067  0035E8  808B               	bsf	3979,0,c	;volatile
 15068                           
 15069                           ; BSR set to: 0
 15070                           ;Test.c: 623: _delay((unsigned long)((10)*(32000000/4000000.0)));
 15071  0035EA  0E1A               	movlw	26
 15072  0035EC                     u9507:
 15073  0035EC  2EE8               	decfsz	wreg,f,c
 15074  0035EE  D7FE               	bra	u9507
 15075  0035F0  D000               	nop2	
 15076                           
 15077                           ;Test.c: 624: LATCbits.LATC0 = 0;
 15078  0035F2  908B               	bcf	3979,0,c	;volatile
 15079                           
 15080                           ;Test.c: 625: _delay((unsigned long)((90)*(32000000/4000000.0)));
 15081  0035F4  0EF0               	movlw	240
 15082  0035F6                     u9517:
 15083  0035F6  2EE8               	decfsz	wreg,f,c
 15084  0035F8  D7FE               	bra	u9517
 15085  0035FA  0100               	movlb	0	; () banked
 15086  0035FC  4BAC               	infsnz	BlockerTest@i& (0+255),f,b
 15087  0035FE  2BAD               	incf	(BlockerTest@i+1)& (0+255),f,b
 15088  003600  D7E8               	goto	l7892
 15089  003602                     l1317:
 15090                           
 15091                           ; BSR set to: 0
 15092                           ;Test.c: 626: }
 15093                           ;Test.c: 627: LATCbits.LATC0 = 0;
 15094  003602  908B               	bcf	3979,0,c	;volatile
 15095  003604                     l7902:
 15096                           
 15097                           ; BSR set to: 0
 15098                           ;Test.c: 628: cam_flag = !cam_flag;
 15099  003604  0100               	movlb	0	; () banked
 15100  003606  51AE               	movf	BlockerTest@cam_flag& (0+255),w,b
 15101  003608  0100               	movlb	0	; () banked
 15102  00360A  11AF               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 15103  00360C  B4D8               	btfsc	status,2,c
 15104  00360E  D7D7               	goto	u6761
 15105  003610  0E00               	movlw	0
 15106  003612  D7D6               	goto	u6770
 15107  003614                     l7904:
 15108                           
 15109                           ;Test.c: 633: lcdInst(0b10000000);;
 15110  003614  0E80               	movlw	128
 15111  003616  EC6E  F027         	call	_lcdInst
 15112                           
 15113                           ;Test.c: 634: printf("D: RET|2: COND %d", PORTAbits.RA2);
 15114  00361A  0E7F               	movlw	low STR_122
 15115  00361C  0100               	movlb	0	; () banked
 15116  00361E  6F8E               	movwf	printf@f& (0+255),b
 15117  003620  0EFB               	movlw	high STR_122
 15118  003622  0100               	movlb	0	; () banked
 15119  003624  6F8F               	movwf	(printf@f+1)& (0+255),b
 15120  003626  A480               	btfss	3968,2,c	;volatile
 15121  003628  D004               	goto	u6820
 15122  00362A  0100               	movlb	0	; () banked
 15123  00362C  6BAB               	clrf	??_BlockerTest& (0+255),b
 15124  00362E  2BAB               	incf	??_BlockerTest& (0+255),f,b
 15125  003630  D002               	goto	u6828
 15126  003632                     u6820:
 15127  003632  0100               	movlb	0	; () banked
 15128  003634  6BAB               	clrf	??_BlockerTest& (0+255),b
 15129  003636                     u6828:
 15130  003636  0100               	movlb	0	; () banked
 15131  003638  51AB               	movf	??_BlockerTest& (0+255),w,b
 15132  00363A  0100               	movlb	0	; () banked
 15133  00363C  6F90               	movwf	(?_printf+2)& (0+255),b
 15134  00363E  6B91               	clrf	(?_printf+3)& (0+255),b
 15135  003640  ECB8  F008         	call	_printf	;wreg free
 15136  003644                     l7908:
 15137  003644  A281               	btfss	3969,1,c	;volatile
 15138  003646  D791               	goto	l7866
 15139  003648  D7E5               	goto	l7904
 15140  00364A                     __end_of_BlockerTest:
 15141                           	opt stack 0
 15142                           tblptru	equ	0xFF8
 15143                           tblptrh	equ	0xFF7
 15144                           tblptrl	equ	0xFF6
 15145                           tablat	equ	0xFF5
 15146                           prodh	equ	0xFF4
 15147                           prodl	equ	0xFF3
 15148                           intcon	equ	0xFF2
 15149                           intcon2	equ	0xFF1
 15150                           intcon3	equ	0xFF0
 15151                           postinc0	equ	0xFEE
 15152                           wreg	equ	0xFE8
 15153                           postdec1	equ	0xFE5
 15154                           fsr1l	equ	0xFE1
 15155                           indf2	equ	0xFDF
 15156                           postinc2	equ	0xFDE
 15157                           postdec2	equ	0xFDD
 15158                           fsr2h	equ	0xFDA
 15159                           fsr2l	equ	0xFD9
 15160                           status	equ	0xFD8
 15161                           
 15162 ;; *************** function _printf *****************
 15163 ;; Defined at:
 15164 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 15165 ;; Parameters:    Size  Location     Type
 15166 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 15167 ;;		 -> STR_125(18), STR_124(18), STR_123(18), STR_122(18), 
 15168 ;;		 -> STR_121(18), STR_120(18), STR_119(17), STR_118(17), 
 15169 ;;		 -> STR_117(3), STR_116(15), STR_115(3), STR_114(15), 
 15170 ;;		 -> STR_113(11), STR_112(18), STR_111(18), STR_110(17), 
 15171 ;;		 -> STR_109(15), STR_108(15), STR_107(15), STR_106(17), 
 15172 ;;		 -> STR_105(17), STR_104(17), STR_103(16), STR_102(17), 
 15173 ;;		 -> STR_101(17), STR_100(17), STR_99(17), STR_98(17), 
 15174 ;;		 -> STR_97(17), STR_96(15), STR_95(11), STR_94(17), 
 15175 ;;		 -> STR_93(11), STR_92(17), STR_91(14), STR_90(15), 
 15176 ;;		 -> STR_89(14), STR_88(10), STR_87(9), STR_86(9), 
 15177 ;;		 -> STR_85(10), STR_84(10), STR_83(16), STR_82(15), 
 15178 ;;		 -> STR_81(3), STR_80(15), STR_79(13), STR_78(14), 
 15179 ;;		 -> STR_77(8), STR_76(14), STR_75(15), STR_74(12), 
 15180 ;;		 -> STR_73(14), STR_72(17), STR_71(14), STR_70(15), 
 15181 ;;		 -> STR_69(17), STR_68(17), STR_67(7), STR_66(21), 
 15182 ;;		 -> STR_65(13), STR_64(11), STR_63(24), STR_50(17), 
 15183 ;;		 -> STR_49(17), STR_48(17), STR_47(17), STR_46(17), 
 15184 ;;		 -> STR_45(17), STR_44(17), STR_43(17), STR_42(17), 
 15185 ;;		 -> STR_41(17), STR_40(17), STR_39(17), STR_38(17), 
 15186 ;;		 -> STR_37(17), STR_36(17), STR_35(17), STR_34(17), 
 15187 ;;		 -> STR_33(17), STR_32(17), STR_31(17), STR_30(17), 
 15188 ;;		 -> STR_29(3), STR_28(17), STR_27(17), STR_26(17), 
 15189 ;;		 -> STR_25(17), STR_24(17), STR_23(14), STR_22(10), 
 15190 ;;		 -> STR_21(24), STR_7(7), STR_6(17), STR_5(18), 
 15191 ;;		 -> STR_4(16), STR_3(18), STR_2(14), STR_1(18), 
 15192 ;; Auto vars:     Size  Location     Type
 15193 ;;  tmpval          4    0        struct .
 15194 ;;  width           2   41[BANK0 ] int 
 15195 ;;  val             2   37[BANK0 ] unsigned int 
 15196 ;;  len             2   35[BANK0 ] unsigned int 
 15197 ;;  ap              2   33[BANK0 ] PTR void [1]
 15198 ;;		 -> ?i2_printf(2), ?_printf(2), 
 15199 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 15200 ;;		 -> STR_126(7), count_total(2), printRTC@month(4), UI@month(4), 
 15201 ;;  c               1   40[BANK0 ] char 
 15202 ;;  flag            1   39[BANK0 ] unsigned char 
 15203 ;;  prec            1   30[BANK0 ] char 
 15204 ;; Return value:  Size  Location     Type
 15205 ;;                  2   14[BANK0 ] int 
 15206 ;; Registers used:
 15207 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15208 ;; Tracked objects:
 15209 ;;		On entry : 0/0
 15210 ;;		On exit  : 0/0
 15211 ;;		Unchanged: 0/0
 15212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15213 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15214 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15215 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15216 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15217 ;;Total ram usage:       29 bytes
 15218 ;; Hardware stack levels used:    1
 15219 ;; Hardware stack levels required when called:    9
 15220 ;; This function calls:
 15221 ;;		___lwdiv
 15222 ;;		___lwmod
 15223 ;;		___wmul
 15224 ;;		_isdigit
 15225 ;;		_putch
 15226 ;; This function is called by:
 15227 ;;		_UI
 15228 ;;		_change_state_to_menu_start
 15229 ;;		_change_state_to_menu_12
 15230 ;;		_change_state_to_menu_22
 15231 ;;		_printRTC
 15232 ;;		_EEPROM_write
 15233 ;;		_Test
 15234 ;;		_algorithmTest
 15235 ;;		_sensorTest
 15236 ;;		_actuatorTest
 15237 ;;		_BothServos
 15238 ;;		_PortTestA5
 15239 ;;		_PusherTest
 15240 ;;		_SpeedTest
 15241 ;;		_BlockerTest
 15242 ;;		_ToggleTestA5
 15243 ;; This function uses a non-reentrant model
 15244 ;;
 15245                           
 15246                           	psect	text51
 15247  001170                     __ptext51:
 15248                           	opt stack 0
 15249  001170                     _printf:
 15250                           	opt stack 18
 15251                           
 15252                           ;doprnt.c: 466: va_list ap;
 15253                           ;doprnt.c: 499: signed char c;
 15254                           ;doprnt.c: 501: int width;
 15255                           ;doprnt.c: 506: signed char prec;
 15256                           ;doprnt.c: 508: unsigned char flag;
 15257                           ;doprnt.c: 523: union {
 15258                           ;doprnt.c: 524: unsigned long vd;
 15259                           ;doprnt.c: 525: double integ;
 15260                           ;doprnt.c: 526: } tmpval;
 15261                           ;doprnt.c: 528: unsigned int val;
 15262                           ;doprnt.c: 529: unsigned len;
 15263                           ;doprnt.c: 530: const char * cp;
 15264                           ;doprnt.c: 533: *ap = __va_start();
 15265                           
 15266                           ;incstack = 0
 15267  001170  0E90               	movlw	low (?_printf+2)
 15268  001172  0100               	movlb	0	; () banked
 15269  001174  6FA1               	movwf	printf@ap& (0+255),b
 15270  001176  0E00               	movlw	high (?_printf+2)
 15271  001178  0100               	movlb	0	; () banked
 15272  00117A  6FA2               	movwf	(printf@ap+1)& (0+255),b
 15273                           
 15274                           ;doprnt.c: 536: while(c = *f++) {
 15275  00117C  D205               	goto	l5960
 15276  00117E                     l5830:
 15277                           
 15278                           ; BSR set to: 0
 15279                           ;doprnt.c: 538: if(c != '%')
 15280  00117E  0E25               	movlw	37
 15281  001180  0100               	movlb	0	; () banked
 15282  001182  19A8               	xorwf	printf@c& (0+255),w,b
 15283  001184  B4D8               	btfsc	status,2,c
 15284  001186  D005               	goto	l5834
 15285                           
 15286                           ; BSR set to: 0
 15287                           ;doprnt.c: 540: {
 15288                           ;doprnt.c: 541: (putch(c) );
 15289  001188  0100               	movlb	0	; () banked
 15290  00118A  51A8               	movf	printf@c& (0+255),w,b
 15291  00118C  EC66  F027         	call	_putch
 15292                           
 15293                           ;doprnt.c: 542: continue;
 15294  001190  D1FB               	goto	l5960
 15295  001192                     l5834:
 15296                           
 15297                           ;doprnt.c: 543: }
 15298                           ;doprnt.c: 546: width = 0;
 15299  001192  0E00               	movlw	0
 15300  001194  0100               	movlb	0	; () banked
 15301  001196  6FAA               	movwf	(printf@width+1)& (0+255),b
 15302  001198  0E00               	movlw	0
 15303  00119A  6FA9               	movwf	printf@width& (0+255),b
 15304                           
 15305                           ;doprnt.c: 548: flag = 0;
 15306  00119C  0E00               	movlw	0
 15307  00119E  0100               	movlb	0	; () banked
 15308  0011A0  6FA7               	movwf	printf@flag& (0+255),b
 15309                           
 15310                           ; BSR set to: 0
 15311                           ;doprnt.c: 551: switch(*f) {
 15312                           
 15313                           ;doprnt.c: 550: for(;;) {
 15314  0011A2  D005               	goto	l5840
 15315  0011A4                     l5836:
 15316                           
 15317                           ;doprnt.c: 580: flag |= 0x04;
 15318  0011A4  0100               	movlb	0	; () banked
 15319  0011A6  85A7               	bsf	printf@flag& (0+255),2,b
 15320                           
 15321                           ;doprnt.c: 581: f++;
 15322  0011A8  0100               	movlb	0	; () banked
 15323  0011AA  4B8E               	infsnz	printf@f& (0+255),f,b
 15324  0011AC  2B8F               	incf	(printf@f+1)& (0+255),f,b
 15325  0011AE                     l5840:
 15326  0011AE  C08E  FFF6         	movff	printf@f,tblptrl
 15327  0011B2  C08F  FFF7         	movff	printf@f+1,tblptrh
 15328  0011B6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15329  0011B6  6AF8               	clrf	tblptru,c
 15330  0011B8                     	endif
 15331  0011B8                     	if	0	;tblptru may be non-zero
 15332  0011B8                     	endif
 15333  0011B8  0008               	tblrd		*
 15334  0011BA  50F5               	movf	tablat,w,c
 15335                           
 15336                           ; Switch size 1, requested type "space"
 15337                           ; Number of cases is 1, Range of values is 48 to 48
 15338                           ; switch strategies available:
 15339                           ; Name         Instructions Cycles
 15340                           ; simple_byte            4     3 (average)
 15341                           ;	Chosen strategy is simple_byte
 15342  0011BC  0A30               	xorlw	48	; case 48
 15343  0011BE  B4D8               	btfsc	status,2,c
 15344  0011C0  D7F1               	goto	l5836
 15345                           
 15346                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 15347                           
 15348                           ;doprnt.c: 586: }
 15349                           
 15350                           ;doprnt.c: 585: break;
 15351  0011C2  C08E  FFF6         	movff	printf@f,tblptrl
 15352  0011C6  C08F  FFF7         	movff	printf@f+1,tblptrh
 15353  0011CA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15354  0011CA  6AF8               	clrf	tblptru,c
 15355  0011CC                     	endif
 15356  0011CC                     	if	0	;tblptru may be non-zero
 15357  0011CC                     	endif
 15358  0011CC  0008               	tblrd		*
 15359  0011CE  50F5               	movf	tablat,w,c
 15360  0011D0  EC89  F026         	call	_isdigit
 15361  0011D4  A0D8               	btfss	status,0,c
 15362  0011D6  D0D2               	goto	l5888
 15363                           
 15364                           ;doprnt.c: 598: width = 0;
 15365  0011D8  0E00               	movlw	0
 15366  0011DA  0100               	movlb	0	; () banked
 15367  0011DC  6FAA               	movwf	(printf@width+1)& (0+255),b
 15368  0011DE  0E00               	movlw	0
 15369  0011E0  6FA9               	movwf	printf@width& (0+255),b
 15370  0011E2                     l5846:
 15371                           
 15372                           ;doprnt.c: 600: width *= 10;
 15373  0011E2  C0A9  F080         	movff	printf@width,___wmul@multiplier
 15374  0011E6  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 15375  0011EA  0E00               	movlw	0
 15376  0011EC  0100               	movlb	0	; () banked
 15377  0011EE  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15378  0011F0  0E0A               	movlw	10
 15379  0011F2  6F82               	movwf	___wmul@multiplicand& (0+255),b
 15380  0011F4  ECF3  F024         	call	___wmul	;wreg free
 15381  0011F8  C080  F0A9         	movff	?___wmul,printf@width
 15382  0011FC  C081  F0AA         	movff	?___wmul+1,printf@width+1
 15383                           
 15384                           ;doprnt.c: 601: width += *f++ - '0';
 15385  001200  0ED0               	movlw	208
 15386  001202  0100               	movlb	0	; () banked
 15387  001204  6F9A               	movwf	??_printf& (0+255),b
 15388  001206  0EFF               	movlw	255
 15389  001208  0100               	movlb	0	; () banked
 15390  00120A  6F9B               	movwf	(??_printf+1)& (0+255),b
 15391  00120C  C08E  FFF6         	movff	printf@f,tblptrl
 15392  001210  C08F  FFF7         	movff	printf@f+1,tblptrh
 15393  001214                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15394  001214  6AF8               	clrf	tblptru,c
 15395  001216                     	endif
 15396  001216                     	if	0	;tblptru may be non-zero
 15397  001216                     	endif
 15398  001216  0008               	tblrd		*
 15399  001218  50F5               	movf	tablat,w,c
 15400  00121A  0100               	movlb	0	; () banked
 15401  00121C  6F9C               	movwf	(??_printf+2)& (0+255),b
 15402  00121E  6B9D               	clrf	(??_printf+3)& (0+255),b
 15403  001220  0100               	movlb	0	; () banked
 15404  001222  519A               	movf	??_printf& (0+255),w,b
 15405  001224  0100               	movlb	0	; () banked
 15406  001226  279C               	addwf	(??_printf+2)& (0+255),f,b
 15407  001228  0100               	movlb	0	; () banked
 15408  00122A  519B               	movf	(??_printf+1)& (0+255),w,b
 15409  00122C  0100               	movlb	0	; () banked
 15410  00122E  239D               	addwfc	(??_printf+3)& (0+255),f,b
 15411  001230  0100               	movlb	0	; () banked
 15412  001232  519C               	movf	(??_printf+2)& (0+255),w,b
 15413  001234  0100               	movlb	0	; () banked
 15414  001236  27A9               	addwf	printf@width& (0+255),f,b
 15415  001238  0100               	movlb	0	; () banked
 15416  00123A  519D               	movf	(??_printf+3)& (0+255),w,b
 15417  00123C  0100               	movlb	0	; () banked
 15418  00123E  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 15419                           
 15420                           ; BSR set to: 0
 15421  001240  0100               	movlb	0	; () banked
 15422  001242  4B8E               	infsnz	printf@f& (0+255),f,b
 15423  001244  2B8F               	incf	(printf@f+1)& (0+255),f,b
 15424                           
 15425                           ; BSR set to: 0
 15426                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 15427  001246  C08E  FFF6         	movff	printf@f,tblptrl
 15428  00124A  C08F  FFF7         	movff	printf@f+1,tblptrh
 15429  00124E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15430  00124E  6AF8               	clrf	tblptru,c
 15431  001250                     	endif
 15432  001250                     	if	0	;tblptru may be non-zero
 15433  001250                     	endif
 15434  001250  0008               	tblrd		*
 15435  001252  50F5               	movf	tablat,w,c
 15436  001254  EC89  F026         	call	_isdigit
 15437  001258  A0D8               	btfss	status,0,c
 15438  00125A  D090               	goto	l5888
 15439  00125C  D7C2               	goto	l5846
 15440  00125E                     l5854:
 15441                           
 15442                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 15443  00125E  C0A1  FFD9         	movff	printf@ap,fsr2l
 15444  001262  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 15445  001266  CFDE F09F          	movff	postinc2,printf@cp
 15446  00126A  CFDD F0A0          	movff	postdec2,printf@cp+1
 15447  00126E  0E02               	movlw	2
 15448  001270  0100               	movlb	0	; () banked
 15449  001272  27A1               	addwf	printf@ap& (0+255),f,b
 15450  001274  0E00               	movlw	0
 15451  001276  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 15452                           
 15453                           ; BSR set to: 0
 15454                           ;doprnt.c: 740: if(!cp)
 15455  001278  0100               	movlb	0	; () banked
 15456  00127A  519F               	movf	printf@cp& (0+255),w,b
 15457  00127C  0100               	movlb	0	; () banked
 15458  00127E  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 15459  001280  A4D8               	btfss	status,2,c
 15460  001282  D006               	goto	l5862
 15461                           
 15462                           ; BSR set to: 0
 15463                           ;doprnt.c: 741: cp = "(null)";
 15464  001284  0EB6               	movlw	low STR_126
 15465  001286  0100               	movlb	0	; () banked
 15466  001288  6F9F               	movwf	printf@cp& (0+255),b
 15467  00128A  0EFF               	movlw	high STR_126
 15468  00128C  0100               	movlb	0	; () banked
 15469  00128E  6FA0               	movwf	(printf@cp+1)& (0+255),b
 15470  001290                     l5862:
 15471                           
 15472                           ; BSR set to: 0
 15473                           ;doprnt.c: 745: len = 0;
 15474  001290  0E00               	movlw	0
 15475  001292  0100               	movlb	0	; () banked
 15476  001294  6FA4               	movwf	(printf@len+1)& (0+255),b
 15477  001296  0E00               	movlw	0
 15478  001298  6FA3               	movwf	printf@len& (0+255),b
 15479                           
 15480                           ;doprnt.c: 746: while(cp[len])
 15481  00129A  D003               	goto	l5866
 15482  00129C                     l5864:
 15483                           
 15484                           ;doprnt.c: 747: len++;
 15485  00129C  0100               	movlb	0	; () banked
 15486  00129E  4BA3               	infsnz	printf@len& (0+255),f,b
 15487  0012A0  2BA4               	incf	(printf@len+1)& (0+255),f,b
 15488  0012A2                     l5866:
 15489                           
 15490                           ; BSR set to: 0
 15491  0012A2  0100               	movlb	0	; () banked
 15492  0012A4  51A3               	movf	printf@len& (0+255),w,b
 15493  0012A6  0100               	movlb	0	; () banked
 15494  0012A8  259F               	addwf	printf@cp& (0+255),w,b
 15495  0012AA  0100               	movlb	0	; () banked
 15496  0012AC  6F9A               	movwf	??_printf& (0+255),b
 15497  0012AE  0100               	movlb	0	; () banked
 15498  0012B0  51A4               	movf	(printf@len+1)& (0+255),w,b
 15499  0012B2  0100               	movlb	0	; () banked
 15500  0012B4  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 15501  0012B6  0100               	movlb	0	; () banked
 15502  0012B8  6F9B               	movwf	(??_printf+1)& (0+255),b
 15503  0012BA  C09A  FFF6         	movff	??_printf,tblptrl
 15504  0012BE  C09B  FFF7         	movff	??_printf+1,tblptrh
 15505  0012C2  0E00               	movlw	low (__mediumconst shr (0+16))
 15506  0012C4  6EF8               	movwf	tblptru,c
 15507  0012C6  0E0F               	movlw	(high __ramtop+-1)
 15508  0012C8  64F7               	cpfsgt	tblptrh,c
 15509  0012CA  D003               	bra	u4397
 15510  0012CC  0008               	tblrd		*
 15511  0012CE  50F5               	movf	tablat,w,c
 15512  0012D0  D005               	bra	u4390
 15513  0012D2                     u4397:
 15514  0012D2  CFF6 FFE9          	movff	tblptrl,fsr0l
 15515  0012D6  CFF7 FFEA          	movff	tblptrh,fsr0h
 15516  0012DA  50EF               	movf	indf0,w,c
 15517  0012DC                     u4390:
 15518  0012DC  0900               	iorlw	0
 15519  0012DE  A4D8               	btfss	status,2,c
 15520  0012E0  D7DD               	goto	l5864
 15521                           
 15522                           ;doprnt.c: 757: if(width > len)
 15523  0012E2  0100               	movlb	0	; () banked
 15524  0012E4  51A9               	movf	printf@width& (0+255),w,b
 15525  0012E6  0100               	movlb	0	; () banked
 15526  0012E8  5DA3               	subwf	printf@len& (0+255),w,b
 15527  0012EA  0100               	movlb	0	; () banked
 15528  0012EC  51AA               	movf	(printf@width+1)& (0+255),w,b
 15529  0012EE  0100               	movlb	0	; () banked
 15530  0012F0  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 15531  0012F2  B0D8               	btfsc	status,0,c
 15532  0012F4  D009               	goto	l5872
 15533                           
 15534                           ; BSR set to: 0
 15535                           ;doprnt.c: 758: width -= len;
 15536  0012F6  0100               	movlb	0	; () banked
 15537  0012F8  51A3               	movf	printf@len& (0+255),w,b
 15538  0012FA  0100               	movlb	0	; () banked
 15539  0012FC  5FA9               	subwf	printf@width& (0+255),f,b
 15540  0012FE  0100               	movlb	0	; () banked
 15541  001300  51A4               	movf	(printf@len+1)& (0+255),w,b
 15542  001302  0100               	movlb	0	; () banked
 15543  001304  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 15544  001306  D009               	goto	l5876
 15545  001308                     l5872:
 15546                           
 15547                           ; BSR set to: 0
 15548                           ;doprnt.c: 759: else
 15549                           ;doprnt.c: 760: width = 0;
 15550  001308  0E00               	movlw	0
 15551  00130A  0100               	movlb	0	; () banked
 15552  00130C  6FAA               	movwf	(printf@width+1)& (0+255),b
 15553  00130E  0E00               	movlw	0
 15554  001310  6FA9               	movwf	printf@width& (0+255),b
 15555                           
 15556                           ; BSR set to: 0
 15557                           ;doprnt.c: 764: while(width--)
 15558  001312  D003               	goto	l5876
 15559  001314                     l5874:
 15560                           
 15561                           ; BSR set to: 0
 15562                           ;doprnt.c: 765: (putch(' ') );
 15563  001314  0E20               	movlw	32
 15564  001316  EC66  F027         	call	_putch
 15565  00131A                     l5876:
 15566  00131A  0100               	movlb	0	; () banked
 15567  00131C  07A9               	decf	printf@width& (0+255),f,b
 15568  00131E  A0D8               	btfss	status,0,c
 15569  001320  07AA               	decf	(printf@width+1)& (0+255),f,b
 15570  001322  0100               	movlb	0	; () banked
 15571  001324  29A9               	incf	printf@width& (0+255),w,b
 15572  001326  E1F6               	bnz	l5874
 15573  001328  0100               	movlb	0	; () banked
 15574  00132A  29AA               	incf	(printf@width+1)& (0+255),w,b
 15575  00132C  B4D8               	btfsc	status,2,c
 15576  00132E  D017               	goto	l5882
 15577  001330  D7F1               	goto	l5874
 15578  001332                     l5878:
 15579                           
 15580                           ; BSR set to: 0
 15581                           ;doprnt.c: 768: (putch(*cp++) );
 15582  001332  C09F  FFF6         	movff	printf@cp,tblptrl
 15583  001336  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 15584  00133A  0E00               	movlw	low (__mediumconst shr (0+16))
 15585  00133C  6EF8               	movwf	tblptru,c
 15586  00133E  0E0F               	movlw	(high __ramtop+-1)
 15587  001340  64F7               	cpfsgt	tblptrh,c
 15588  001342  D003               	bra	u4437
 15589  001344  0008               	tblrd		*
 15590  001346  50F5               	movf	tablat,w,c
 15591  001348  D005               	bra	u4430
 15592  00134A                     u4437:
 15593  00134A  CFF6 FFE9          	movff	tblptrl,fsr0l
 15594  00134E  CFF7 FFEA          	movff	tblptrh,fsr0h
 15595  001352  50EF               	movf	indf0,w,c
 15596  001354                     u4430:
 15597  001354  EC66  F027         	call	_putch
 15598  001358  0100               	movlb	0	; () banked
 15599  00135A  4B9F               	infsnz	printf@cp& (0+255),f,b
 15600  00135C  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 15601  00135E                     l5882:
 15602                           
 15603                           ; BSR set to: 0
 15604  00135E  0100               	movlb	0	; () banked
 15605  001360  07A3               	decf	printf@len& (0+255),f,b
 15606  001362  A0D8               	btfss	status,0,c
 15607  001364  07A4               	decf	(printf@len+1)& (0+255),f,b
 15608  001366  0100               	movlb	0	; () banked
 15609  001368  29A3               	incf	printf@len& (0+255),w,b
 15610  00136A  E1E3               	bnz	l5878
 15611  00136C  0100               	movlb	0	; () banked
 15612  00136E  29A4               	incf	(printf@len+1)& (0+255),w,b
 15613  001370  B4D8               	btfsc	status,2,c
 15614  001372  D10A               	goto	l5960
 15615  001374  D7DE               	goto	l5878
 15616  001376                     l5884:
 15617                           
 15618                           ; BSR set to: 0
 15619                           ;doprnt.c: 818: flag |= 0x40;
 15620  001376  0100               	movlb	0	; () banked
 15621  001378  8DA7               	bsf	printf@flag& (0+255),6,b
 15622                           
 15623                           ; BSR set to: 0
 15624                           ;doprnt.c: 822: }
 15625                           
 15626                           ;doprnt.c: 819: break;
 15627  00137A  D01D               	goto	l1352
 15628  00137C                     l5888:
 15629  00137C  C08E  FFF6         	movff	printf@f,tblptrl
 15630  001380  C08F  FFF7         	movff	printf@f+1,tblptrh
 15631  001384  0100               	movlb	0	; () banked
 15632  001386  4B8E               	infsnz	printf@f& (0+255),f,b
 15633  001388  2B8F               	incf	(printf@f+1)& (0+255),f,b
 15634  00138A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15635  00138A  6AF8               	clrf	tblptru,c
 15636  00138C                     	endif
 15637  00138C                     	if	0	;tblptru may be non-zero
 15638  00138C                     	endif
 15639  00138C  0008               	tblrd		*
 15640  00138E  CFF5 F0A8          	movff	tablat,printf@c
 15641  001392  0100               	movlb	0	; () banked
 15642  001394  51A8               	movf	printf@c& (0+255),w,b
 15643                           
 15644                           ; Switch size 1, requested type "space"
 15645                           ; Number of cases is 5, Range of values is 0 to 117
 15646                           ; switch strategies available:
 15647                           ; Name         Instructions Cycles
 15648                           ; simple_byte           16     9 (average)
 15649                           ;	Chosen strategy is simple_byte
 15650  001396  0A00               	xorlw	0	; case 0
 15651  001398  B4D8               	btfsc	status,2,c
 15652  00139A  0012               	return	
 15653  00139C  0A64               	xorlw	100	; case 100
 15654  00139E  B4D8               	btfsc	status,2,c
 15655  0013A0  D00A               	goto	l1352
 15656  0013A2  0A0D               	xorlw	13	; case 105
 15657  0013A4  B4D8               	btfsc	status,2,c
 15658  0013A6  D007               	goto	l1352
 15659  0013A8  0A1A               	xorlw	26	; case 115
 15660  0013AA  B4D8               	btfsc	status,2,c
 15661  0013AC  D758               	goto	l5854
 15662  0013AE  0A06               	xorlw	6	; case 117
 15663  0013B0  B4D8               	btfsc	status,2,c
 15664  0013B2  D7E1               	goto	l5884
 15665  0013B4  D0E9               	goto	l5960
 15666  0013B6                     l1352:
 15667                           
 15668                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 15669  0013B6  0100               	movlb	0	; () banked
 15670  0013B8  BDA7               	btfsc	printf@flag& (0+255),6,b
 15671  0013BA  D019               	goto	l5900
 15672                           
 15673                           ; BSR set to: 0
 15674                           ;doprnt.c: 1253: {
 15675                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 15676  0013BC  C0A1  FFD9         	movff	printf@ap,fsr2l
 15677  0013C0  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 15678  0013C4  CFDE F0A5          	movff	postinc2,printf@val
 15679  0013C8  CFDD F0A6          	movff	postdec2,printf@val+1
 15680                           
 15681                           ; BSR set to: 0
 15682  0013CC  0E02               	movlw	2
 15683  0013CE  0100               	movlb	0	; () banked
 15684  0013D0  27A1               	addwf	printf@ap& (0+255),f,b
 15685  0013D2  0E00               	movlw	0
 15686  0013D4  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 15687                           
 15688                           ; BSR set to: 0
 15689                           ;doprnt.c: 1261: if((int)val < 0) {
 15690  0013D6  0100               	movlb	0	; () banked
 15691  0013D8  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 15692  0013DA  D016               	goto	l5904
 15693                           
 15694                           ; BSR set to: 0
 15695                           ;doprnt.c: 1262: flag |= 0x03;
 15696  0013DC  0E03               	movlw	3
 15697  0013DE  0100               	movlb	0	; () banked
 15698  0013E0  13A7               	iorwf	printf@flag& (0+255),f,b
 15699                           
 15700                           ; BSR set to: 0
 15701                           ;doprnt.c: 1263: val = -val;
 15702  0013E2  0100               	movlb	0	; () banked
 15703  0013E4  6DA5               	negf	printf@val& (0+255),b
 15704  0013E6  1FA6               	comf	(printf@val+1)& (0+255),f,b
 15705  0013E8  B0D8               	btfsc	status,0,c
 15706  0013EA  2BA6               	incf	(printf@val+1)& (0+255),f,b
 15707                           
 15708                           ; BSR set to: 0
 15709                           ;doprnt.c: 1264: }
 15710                           ;doprnt.c: 1266: }
 15711  0013EC  D00D               	goto	l5904
 15712  0013EE                     l5900:
 15713                           
 15714                           ; BSR set to: 0
 15715                           ;doprnt.c: 1268: else
 15716                           ;doprnt.c: 1273: {
 15717                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 15718  0013EE  C0A1  FFD9         	movff	printf@ap,fsr2l
 15719  0013F2  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 15720  0013F6  CFDE F0A5          	movff	postinc2,printf@val
 15721  0013FA  CFDD F0A6          	movff	postdec2,printf@val+1
 15722                           
 15723                           ; BSR set to: 0
 15724  0013FE  0E02               	movlw	2
 15725  001400  0100               	movlb	0	; () banked
 15726  001402  27A1               	addwf	printf@ap& (0+255),f,b
 15727  001404  0E00               	movlw	0
 15728  001406  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 15729  001408                     l5904:
 15730                           
 15731                           ; BSR set to: 0
 15732                           ;doprnt.c: 1287: }
 15733                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 15734  001408  0E01               	movlw	1
 15735  00140A  0100               	movlb	0	; () banked
 15736  00140C  6FA8               	movwf	printf@c& (0+255),b
 15737  00140E                     l5906:
 15738                           
 15739                           ; BSR set to: 0
 15740  00140E  0E05               	movlw	5
 15741  001410  0100               	movlb	0	; () banked
 15742  001412  19A8               	xorwf	printf@c& (0+255),w,b
 15743  001414  B4D8               	btfsc	status,2,c
 15744  001416  D019               	goto	l5918
 15745                           
 15746                           ; BSR set to: 0
 15747                           ;doprnt.c: 1306: if(val < dpowers[c])
 15748                           
 15749                           ; BSR set to: 0
 15750                           
 15751                           ; BSR set to: 0
 15752  001418  0100               	movlb	0	; () banked
 15753  00141A  51A8               	movf	printf@c& (0+255),w,b
 15754  00141C  0D02               	mullw	2
 15755  00141E  0E00               	movlw	low _dpowers
 15756  001420  24F3               	addwf	prodl,w,c
 15757  001422  6EF6               	movwf	tblptrl,c
 15758  001424  0EFB               	movlw	high _dpowers
 15759  001426  20F4               	addwfc	prodh,w,c
 15760  001428  6EF7               	movwf	tblptrh,c
 15761  00142A                     	if	1	;There are 3 active tblptr bytes
 15762  00142A  6AF8               	clrf	tblptru,c
 15763  00142C  0E00               	movlw	low (__mediumconst shr (0+16))
 15764  00142E  22F8               	addwfc	tblptru,f,c
 15765  001430                     	endif
 15766  001430  0009               	tblrd		*+
 15767  001432  50F5               	movf	tablat,w,c
 15768  001434  0100               	movlb	0	; () banked
 15769  001436  5DA5               	subwf	printf@val& (0+255),w,b
 15770  001438  0009               	tblrd		*+
 15771  00143A  50F5               	movf	tablat,w,c
 15772  00143C  0100               	movlb	0	; () banked
 15773  00143E  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 15774  001440  A0D8               	btfss	status,0,c
 15775  001442  D003               	goto	l5918
 15776                           
 15777                           ; BSR set to: 0
 15778                           
 15779                           ; BSR set to: 0
 15780                           
 15781                           ; BSR set to: 0
 15782                           ;doprnt.c: 1307: break;
 15783  001444  0100               	movlb	0	; () banked
 15784  001446  2BA8               	incf	printf@c& (0+255),f,b
 15785  001448  D7E2               	goto	l5906
 15786  00144A                     l5918:
 15787                           
 15788                           ; BSR set to: 0
 15789                           ;doprnt.c: 1345: if(width && flag & 0x03)
 15790  00144A  0100               	movlb	0	; () banked
 15791  00144C  51A9               	movf	printf@width& (0+255),w,b
 15792  00144E  0100               	movlb	0	; () banked
 15793  001450  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 15794  001452  B4D8               	btfsc	status,2,c
 15795  001454  D00B               	goto	l5924
 15796                           
 15797                           ; BSR set to: 0
 15798  001456  C0A7  F09A         	movff	printf@flag,??_printf
 15799  00145A  0E03               	movlw	3
 15800  00145C  0100               	movlb	0	; () banked
 15801  00145E  179A               	andwf	??_printf& (0+255),f,b
 15802  001460  B4D8               	btfsc	status,2,c
 15803  001462  D004               	goto	l5924
 15804                           
 15805                           ; BSR set to: 0
 15806                           ;doprnt.c: 1346: width--;
 15807  001464  0100               	movlb	0	; () banked
 15808  001466  07A9               	decf	printf@width& (0+255),f,b
 15809  001468  A0D8               	btfss	status,0,c
 15810  00146A  07AA               	decf	(printf@width+1)& (0+255),f,b
 15811  00146C                     l5924:
 15812                           
 15813                           ; BSR set to: 0
 15814                           ;doprnt.c: 1381: if(width > c)
 15815  00146C  0E80               	movlw	128
 15816  00146E  0100               	movlb	0	; () banked
 15817  001470  BFA8               	btfsc	printf@c& (0+255),7,b
 15818  001472  0E7F               	movlw	127
 15819  001474  0100               	movlb	0	; () banked
 15820  001476  6F9A               	movwf	??_printf& (0+255),b
 15821  001478  0100               	movlb	0	; () banked
 15822  00147A  51A9               	movf	printf@width& (0+255),w,b
 15823  00147C  0100               	movlb	0	; () banked
 15824  00147E  5DA8               	subwf	printf@c& (0+255),w,b
 15825  001480  0100               	movlb	0	; () banked
 15826  001482  51AA               	movf	(printf@width+1)& (0+255),w,b
 15827  001484  0A80               	xorlw	128
 15828  001486  0100               	movlb	0	; () banked
 15829  001488  599A               	subwfb	??_printf& (0+255),w,b
 15830  00148A  B0D8               	btfsc	status,0,c
 15831  00148C  D00B               	goto	l5928
 15832                           
 15833                           ; BSR set to: 0
 15834                           ;doprnt.c: 1382: width -= c;
 15835  00148E  0100               	movlb	0	; () banked
 15836  001490  51A8               	movf	printf@c& (0+255),w,b
 15837  001492  0100               	movlb	0	; () banked
 15838  001494  5FA9               	subwf	printf@width& (0+255),f,b
 15839  001496  0E00               	movlw	0
 15840  001498  0100               	movlb	0	; () banked
 15841  00149A  BFA8               	btfsc	printf@c& (0+255),7,b
 15842  00149C  0EFF               	movlw	255
 15843  00149E  0100               	movlb	0	; () banked
 15844  0014A0  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 15845  0014A2  D005               	goto	l5930
 15846  0014A4                     l5928:
 15847                           
 15848                           ; BSR set to: 0
 15849                           ;doprnt.c: 1383: else
 15850                           ;doprnt.c: 1384: width = 0;
 15851  0014A4  0E00               	movlw	0
 15852  0014A6  0100               	movlb	0	; () banked
 15853  0014A8  6FAA               	movwf	(printf@width+1)& (0+255),b
 15854  0014AA  0E00               	movlw	0
 15855  0014AC  6FA9               	movwf	printf@width& (0+255),b
 15856  0014AE                     l5930:
 15857                           
 15858                           ; BSR set to: 0
 15859                           ;doprnt.c: 1387: if(flag & 0x04) {
 15860  0014AE  0100               	movlb	0	; () banked
 15861  0014B0  A5A7               	btfss	printf@flag& (0+255),2,b
 15862  0014B2  D018               	goto	l5942
 15863                           
 15864                           ; BSR set to: 0
 15865                           ;doprnt.c: 1392: if(flag & 0x03)
 15866  0014B4  C0A7  F09A         	movff	printf@flag,??_printf
 15867  0014B8  0E03               	movlw	3
 15868  0014BA  0100               	movlb	0	; () banked
 15869  0014BC  179A               	andwf	??_printf& (0+255),f,b
 15870  0014BE  B4D8               	btfsc	status,2,c
 15871  0014C0  D003               	goto	l5936
 15872                           
 15873                           ; BSR set to: 0
 15874                           ;doprnt.c: 1393: (putch('-') );
 15875  0014C2  0E2D               	movlw	45
 15876  0014C4  EC66  F027         	call	_putch
 15877  0014C8                     l5936:
 15878                           
 15879                           ;doprnt.c: 1415: if(width)
 15880  0014C8  0100               	movlb	0	; () banked
 15881  0014CA  51A9               	movf	printf@width& (0+255),w,b
 15882  0014CC  0100               	movlb	0	; () banked
 15883  0014CE  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 15884  0014D0  B4D8               	btfsc	status,2,c
 15885  0014D2  D025               	goto	l5952
 15886                           
 15887                           ; BSR set to: 0
 15888                           ;doprnt.c: 1417: (putch('0') );
 15889                           
 15890                           ; BSR set to: 0
 15891                           
 15892                           ;doprnt.c: 1416: do
 15893  0014D4  0E30               	movlw	48
 15894  0014D6  EC66  F027         	call	_putch
 15895                           
 15896                           ;doprnt.c: 1418: while(--width);
 15897  0014DA  0100               	movlb	0	; () banked
 15898  0014DC  07A9               	decf	printf@width& (0+255),f,b
 15899  0014DE  A0D8               	btfss	status,0,c
 15900  0014E0  07AA               	decf	(printf@width+1)& (0+255),f,b
 15901  0014E2  D7F2               	goto	l5936
 15902  0014E4                     l5942:
 15903                           
 15904                           ; BSR set to: 0
 15905                           ;doprnt.c: 1422: {
 15906                           ;doprnt.c: 1424: if(width
 15907                           ;doprnt.c: 1428: )
 15908  0014E4  0100               	movlb	0	; () banked
 15909  0014E6  51A9               	movf	printf@width& (0+255),w,b
 15910  0014E8  0100               	movlb	0	; () banked
 15911  0014EA  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 15912  0014EC  B4D8               	btfsc	status,2,c
 15913  0014EE  D00D               	goto	l5948
 15914  0014F0                     l5944:
 15915                           
 15916                           ; BSR set to: 0
 15917                           ;doprnt.c: 1430: (putch(' ') );
 15918  0014F0  0E20               	movlw	32
 15919  0014F2  EC66  F027         	call	_putch
 15920                           
 15921                           ;doprnt.c: 1431: while(--width);
 15922  0014F6  0100               	movlb	0	; () banked
 15923  0014F8  07A9               	decf	printf@width& (0+255),f,b
 15924  0014FA  A0D8               	btfss	status,0,c
 15925  0014FC  07AA               	decf	(printf@width+1)& (0+255),f,b
 15926  0014FE  0100               	movlb	0	; () banked
 15927  001500  51A9               	movf	printf@width& (0+255),w,b
 15928  001502  0100               	movlb	0	; () banked
 15929  001504  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 15930  001506  A4D8               	btfss	status,2,c
 15931  001508  D7F3               	goto	l5944
 15932  00150A                     l5948:
 15933                           
 15934                           ; BSR set to: 0
 15935                           ;doprnt.c: 1438: if(flag & 0x03)
 15936  00150A  C0A7  F09A         	movff	printf@flag,??_printf
 15937  00150E  0E03               	movlw	3
 15938  001510  0100               	movlb	0	; () banked
 15939  001512  179A               	andwf	??_printf& (0+255),f,b
 15940  001514  B4D8               	btfsc	status,2,c
 15941  001516  D003               	goto	l5952
 15942                           
 15943                           ; BSR set to: 0
 15944                           ;doprnt.c: 1439: (putch('-') );
 15945  001518  0E2D               	movlw	45
 15946  00151A  EC66  F027         	call	_putch
 15947  00151E                     l5952:
 15948                           
 15949                           ;doprnt.c: 1469: }
 15950                           ;doprnt.c: 1472: prec = c;
 15951  00151E  C0A8  F09E         	movff	printf@c,printf@prec
 15952                           
 15953                           ;doprnt.c: 1474: while(prec--) {
 15954  001522  D02C               	goto	l5958
 15955  001524                     l5954:
 15956                           
 15957                           ;doprnt.c: 1478: {
 15958                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 15959  001524  0100               	movlb	0	; () banked
 15960  001526  519E               	movf	printf@prec& (0+255),w,b
 15961  001528  0D02               	mullw	2
 15962  00152A  0E00               	movlw	low _dpowers
 15963  00152C  24F3               	addwf	prodl,w,c
 15964  00152E  6EF6               	movwf	tblptrl,c
 15965  001530  0EFB               	movlw	high _dpowers
 15966  001532  20F4               	addwfc	prodh,w,c
 15967  001534  6EF7               	movwf	tblptrh,c
 15968  001536                     	if	1	;There are 3 active tblptr bytes
 15969  001536  6AF8               	clrf	tblptru,c
 15970  001538  0E00               	movlw	low (__mediumconst shr (0+16))
 15971  00153A  22F8               	addwfc	tblptru,f,c
 15972  00153C                     	endif
 15973  00153C  0009               	tblrd		*+
 15974  00153E  CFF5 F082          	movff	tablat,___lwdiv@divisor
 15975  001542  000A               	tblrd		*-
 15976  001544  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 15977  001548  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 15978  00154C  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 15979  001550  EC8E  F021         	call	___lwdiv	;wreg free
 15980  001554  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 15981  001558  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 15982  00155C  0E00               	movlw	0
 15983  00155E  0100               	movlb	0	; () banked
 15984  001560  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 15985  001562  0E0A               	movlw	10
 15986  001564  6F89               	movwf	___lwmod@divisor& (0+255),b
 15987  001566  ECAB  F022         	call	___lwmod	;wreg free
 15988  00156A  0100               	movlb	0	; () banked
 15989  00156C  5187               	movf	?___lwmod& (0+255),w,b
 15990  00156E  0F30               	addlw	48
 15991  001570  0100               	movlb	0	; () banked
 15992  001572  6FA8               	movwf	printf@c& (0+255),b
 15993                           
 15994                           ; BSR set to: 0
 15995                           ;doprnt.c: 1523: }
 15996                           ;doprnt.c: 1524: (putch(c) );
 15997  001574  0100               	movlb	0	; () banked
 15998  001576  51A8               	movf	printf@c& (0+255),w,b
 15999  001578  EC66  F027         	call	_putch
 16000  00157C                     l5958:
 16001  00157C  0100               	movlb	0	; () banked
 16002  00157E  079E               	decf	printf@prec& (0+255),f,b
 16003  001580  0100               	movlb	0	; () banked
 16004  001582  299E               	incf	printf@prec& (0+255),w,b
 16005  001584  A4D8               	btfss	status,2,c
 16006  001586  D7CE               	goto	l5954
 16007  001588                     l5960:
 16008  001588  C08E  FFF6         	movff	printf@f,tblptrl
 16009  00158C  C08F  FFF7         	movff	printf@f+1,tblptrh
 16010  001590  0100               	movlb	0	; () banked
 16011  001592  4B8E               	infsnz	printf@f& (0+255),f,b
 16012  001594  2B8F               	incf	(printf@f+1)& (0+255),f,b
 16013  001596                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16014  001596  6AF8               	clrf	tblptru,c
 16015  001598                     	endif
 16016  001598                     	if	0	;tblptru may be non-zero
 16017  001598                     	endif
 16018  001598  0008               	tblrd		*
 16019  00159A  CFF5 F0A8          	movff	tablat,printf@c
 16020  00159E  0100               	movlb	0	; () banked
 16021  0015A0  51A8               	movf	printf@c& (0+255),w,b
 16022  0015A2  B4D8               	btfsc	status,2,c
 16023  0015A4  0012               	return	
 16024  0015A6  D5EB               	goto	l5830
 16025  0015A8                     __end_of_printf:
 16026                           	opt stack 0
 16027                           tblptru	equ	0xFF8
 16028                           tblptrh	equ	0xFF7
 16029                           tblptrl	equ	0xFF6
 16030                           tablat	equ	0xFF5
 16031                           prodh	equ	0xFF4
 16032                           prodl	equ	0xFF3
 16033                           intcon	equ	0xFF2
 16034                           intcon2	equ	0xFF1
 16035                           intcon3	equ	0xFF0
 16036                           indf0	equ	0xFEF
 16037                           postinc0	equ	0xFEE
 16038                           fsr0h	equ	0xFEA
 16039                           fsr0l	equ	0xFE9
 16040                           wreg	equ	0xFE8
 16041                           postdec1	equ	0xFE5
 16042                           fsr1l	equ	0xFE1
 16043                           indf2	equ	0xFDF
 16044                           postinc2	equ	0xFDE
 16045                           postdec2	equ	0xFDD
 16046                           fsr2h	equ	0xFDA
 16047                           fsr2l	equ	0xFD9
 16048                           status	equ	0xFD8
 16049                           
 16050 ;; *************** function _putch *****************
 16051 ;; Defined at:
 16052 ;;		line 20 in file "lcd.c"
 16053 ;; Parameters:    Size  Location     Type
 16054 ;;  data            1    wreg     unsigned char 
 16055 ;; Auto vars:     Size  Location     Type
 16056 ;;  data            1    2[BANK0 ] unsigned char 
 16057 ;; Return value:  Size  Location     Type
 16058 ;;                  1    wreg      void 
 16059 ;; Registers used:
 16060 ;;		wreg, status,2, status,0, cstack
 16061 ;; Tracked objects:
 16062 ;;		On entry : 0/0
 16063 ;;		On exit  : 0/0
 16064 ;;		Unchanged: 0/0
 16065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16067 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16069 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16070 ;;Total ram usage:        1 bytes
 16071 ;; Hardware stack levels used:    1
 16072 ;; Hardware stack levels required when called:    8
 16073 ;; This function calls:
 16074 ;;		_lcdNibble
 16075 ;; This function is called by:
 16076 ;;		_printf
 16077 ;; This function uses a non-reentrant model
 16078 ;;
 16079                           
 16080                           	psect	text52
 16081  004ECC                     __ptext52:
 16082                           	opt stack 0
 16083  004ECC                     _putch:
 16084                           	opt stack 18
 16085                           
 16086                           ;incstack = 0
 16087                           ;putch@data stored from wreg
 16088  004ECC  0100               	movlb	0	; () banked
 16089  004ECE  6F82               	movwf	putch@data& (0+255),b
 16090                           
 16091                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 16092  004ED0  848C               	bsf	3980,2,c	;volatile
 16093                           
 16094                           ;lcd.c: 22: lcdNibble(data);
 16095  004ED2  0100               	movlb	0	; () banked
 16096  004ED4  5182               	movf	putch@data& (0+255),w,b
 16097  004ED6  EC77  F022         	call	_lcdNibble
 16098  004EDA  0012               	return		;funcret
 16099  004EDC                     __end_of_putch:
 16100                           	opt stack 0
 16101                           tblptru	equ	0xFF8
 16102                           tblptrh	equ	0xFF7
 16103                           tblptrl	equ	0xFF6
 16104                           tablat	equ	0xFF5
 16105                           prodh	equ	0xFF4
 16106                           prodl	equ	0xFF3
 16107                           intcon	equ	0xFF2
 16108                           intcon2	equ	0xFF1
 16109                           intcon3	equ	0xFF0
 16110                           indf0	equ	0xFEF
 16111                           postinc0	equ	0xFEE
 16112                           fsr0h	equ	0xFEA
 16113                           fsr0l	equ	0xFE9
 16114                           wreg	equ	0xFE8
 16115                           postdec1	equ	0xFE5
 16116                           fsr1l	equ	0xFE1
 16117                           indf2	equ	0xFDF
 16118                           postinc2	equ	0xFDE
 16119                           postdec2	equ	0xFDD
 16120                           fsr2h	equ	0xFDA
 16121                           fsr2l	equ	0xFD9
 16122                           status	equ	0xFD8
 16123                           
 16124 ;; *************** function _isdigit *****************
 16125 ;; Defined at:
 16126 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 16127 ;; Parameters:    Size  Location     Type
 16128 ;;  c               1    wreg     unsigned char 
 16129 ;; Auto vars:     Size  Location     Type
 16130 ;;  c               1    2[BANK0 ] unsigned char 
 16131 ;; Return value:  Size  Location     Type
 16132 ;;		None               void
 16133 ;; Registers used:
 16134 ;;		wreg, status,2, status,0
 16135 ;; Tracked objects:
 16136 ;;		On entry : 0/0
 16137 ;;		On exit  : 0/0
 16138 ;;		Unchanged: 0/0
 16139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16141 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16142 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16143 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16144 ;;Total ram usage:        3 bytes
 16145 ;; Hardware stack levels used:    1
 16146 ;; Hardware stack levels required when called:    7
 16147 ;; This function calls:
 16148 ;;		Nothing
 16149 ;; This function is called by:
 16150 ;;		_printf
 16151 ;; This function uses a non-reentrant model
 16152 ;;
 16153                           
 16154                           	psect	text53
 16155  004D12                     __ptext53:
 16156                           	opt stack 0
 16157  004D12                     _isdigit:
 16158                           	opt stack 19
 16159                           
 16160                           ;incstack = 0
 16161                           ;isdigit@c stored from wreg
 16162  004D12  0100               	movlb	0	; () banked
 16163  004D14  6F82               	movwf	isdigit@c& (0+255),b
 16164  004D16  0E00               	movlw	0
 16165  004D18  0100               	movlb	0	; () banked
 16166  004D1A  6F81               	movwf	_isdigit$1975& (0+255),b
 16167                           
 16168                           ; BSR set to: 0
 16169  004D1C  0E3A               	movlw	58
 16170  004D1E  0100               	movlb	0	; () banked
 16171  004D20  6182               	cpfslt	isdigit@c& (0+255),b
 16172  004D22  D007               	goto	l5678
 16173                           
 16174                           ; BSR set to: 0
 16175  004D24  0E2F               	movlw	47
 16176  004D26  0100               	movlb	0	; () banked
 16177  004D28  6582               	cpfsgt	isdigit@c& (0+255),b
 16178  004D2A  D003               	goto	l5678
 16179                           
 16180                           ; BSR set to: 0
 16181  004D2C  0E01               	movlw	1
 16182  004D2E  0100               	movlb	0	; () banked
 16183  004D30  6F81               	movwf	_isdigit$1975& (0+255),b
 16184  004D32                     l5678:
 16185                           
 16186                           ; BSR set to: 0
 16187  004D32  C081  F080         	movff	_isdigit$1975,??_isdigit
 16188  004D36  0100               	movlb	0	; () banked
 16189  004D38  3180               	rrcf	??_isdigit& (0+255),w,b
 16190  004D3A  0012               	return	
 16191  004D3C                     __end_of_isdigit:
 16192                           	opt stack 0
 16193                           tblptru	equ	0xFF8
 16194                           tblptrh	equ	0xFF7
 16195                           tblptrl	equ	0xFF6
 16196                           tablat	equ	0xFF5
 16197                           prodh	equ	0xFF4
 16198                           prodl	equ	0xFF3
 16199                           intcon	equ	0xFF2
 16200                           intcon2	equ	0xFF1
 16201                           intcon3	equ	0xFF0
 16202                           indf0	equ	0xFEF
 16203                           postinc0	equ	0xFEE
 16204                           fsr0h	equ	0xFEA
 16205                           fsr0l	equ	0xFE9
 16206                           wreg	equ	0xFE8
 16207                           postdec1	equ	0xFE5
 16208                           fsr1l	equ	0xFE1
 16209                           indf2	equ	0xFDF
 16210                           postinc2	equ	0xFDE
 16211                           postdec2	equ	0xFDD
 16212                           fsr2h	equ	0xFDA
 16213                           fsr2l	equ	0xFD9
 16214                           status	equ	0xFD8
 16215                           
 16216 ;; *************** function ___wmul *****************
 16217 ;; Defined at:
 16218 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 16219 ;; Parameters:    Size  Location     Type
 16220 ;;  multiplier      2    0[BANK0 ] unsigned int 
 16221 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 16222 ;; Auto vars:     Size  Location     Type
 16223 ;;  product         2    4[BANK0 ] unsigned int 
 16224 ;; Return value:  Size  Location     Type
 16225 ;;                  2    0[BANK0 ] unsigned int 
 16226 ;; Registers used:
 16227 ;;		wreg, status,2, status,0, prodl, prodh
 16228 ;; Tracked objects:
 16229 ;;		On entry : 0/0
 16230 ;;		On exit  : 0/0
 16231 ;;		Unchanged: 0/0
 16232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16233 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16234 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16236 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16237 ;;Total ram usage:        6 bytes
 16238 ;; Hardware stack levels used:    1
 16239 ;; Hardware stack levels required when called:    7
 16240 ;; This function calls:
 16241 ;;		Nothing
 16242 ;; This function is called by:
 16243 ;;		_printf
 16244 ;; This function uses a non-reentrant model
 16245 ;;
 16246                           
 16247                           	psect	text54
 16248  0049E6                     __ptext54:
 16249                           	opt stack 0
 16250  0049E6                     ___wmul:
 16251                           	opt stack 19
 16252                           
 16253                           ; BSR set to: 0
 16254                           ;incstack = 0
 16255  0049E6  0100               	movlb	0	; () banked
 16256  0049E8  5180               	movf	___wmul@multiplier& (0+255),w,b
 16257  0049EA  0100               	movlb	0	; () banked
 16258  0049EC  0382               	mulwf	___wmul@multiplicand& (0+255),b
 16259  0049EE  CFF3 F084          	movff	prodl,___wmul@product
 16260  0049F2  CFF4 F085          	movff	prodh,___wmul@product+1
 16261  0049F6  0100               	movlb	0	; () banked
 16262  0049F8  5180               	movf	___wmul@multiplier& (0+255),w,b
 16263  0049FA  0100               	movlb	0	; () banked
 16264  0049FC  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 16265  0049FE  50F3               	movf	prodl,w,c
 16266  004A00  0100               	movlb	0	; () banked
 16267  004A02  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 16268  004A04  0100               	movlb	0	; () banked
 16269  004A06  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 16270  004A08  0100               	movlb	0	; () banked
 16271  004A0A  0382               	mulwf	___wmul@multiplicand& (0+255),b
 16272  004A0C  50F3               	movf	prodl,w,c
 16273  004A0E  0100               	movlb	0	; () banked
 16274  004A10  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 16275                           
 16276                           ; BSR set to: 0
 16277  004A12  C084  F080         	movff	___wmul@product,?___wmul
 16278  004A16  C085  F081         	movff	___wmul@product+1,?___wmul+1
 16279  004A1A  0012               	return	
 16280  004A1C                     __end_of___wmul:
 16281                           	opt stack 0
 16282                           tblptru	equ	0xFF8
 16283                           tblptrh	equ	0xFF7
 16284                           tblptrl	equ	0xFF6
 16285                           tablat	equ	0xFF5
 16286                           prodh	equ	0xFF4
 16287                           prodl	equ	0xFF3
 16288                           intcon	equ	0xFF2
 16289                           intcon2	equ	0xFF1
 16290                           intcon3	equ	0xFF0
 16291                           indf0	equ	0xFEF
 16292                           postinc0	equ	0xFEE
 16293                           fsr0h	equ	0xFEA
 16294                           fsr0l	equ	0xFE9
 16295                           wreg	equ	0xFE8
 16296                           postdec1	equ	0xFE5
 16297                           fsr1l	equ	0xFE1
 16298                           indf2	equ	0xFDF
 16299                           postinc2	equ	0xFDE
 16300                           postdec2	equ	0xFDD
 16301                           fsr2h	equ	0xFDA
 16302                           fsr2l	equ	0xFD9
 16303                           status	equ	0xFD8
 16304                           
 16305 ;; *************** function ___lwmod *****************
 16306 ;; Defined at:
 16307 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 16308 ;; Parameters:    Size  Location     Type
 16309 ;;  dividend        2    7[BANK0 ] unsigned int 
 16310 ;;  divisor         2    9[BANK0 ] unsigned int 
 16311 ;; Auto vars:     Size  Location     Type
 16312 ;;  counter         1   11[BANK0 ] unsigned char 
 16313 ;; Return value:  Size  Location     Type
 16314 ;;                  2    7[BANK0 ] unsigned int 
 16315 ;; Registers used:
 16316 ;;		wreg, status,2, status,0
 16317 ;; Tracked objects:
 16318 ;;		On entry : 0/0
 16319 ;;		On exit  : 0/0
 16320 ;;		Unchanged: 0/0
 16321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16322 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16323 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16325 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16326 ;;Total ram usage:        5 bytes
 16327 ;; Hardware stack levels used:    1
 16328 ;; Hardware stack levels required when called:    7
 16329 ;; This function calls:
 16330 ;;		Nothing
 16331 ;; This function is called by:
 16332 ;;		_printf
 16333 ;; This function uses a non-reentrant model
 16334 ;;
 16335                           
 16336                           	psect	text55
 16337  004556                     __ptext55:
 16338                           	opt stack 0
 16339  004556                     ___lwmod:
 16340                           	opt stack 19
 16341                           
 16342                           ; BSR set to: 0
 16343                           ;incstack = 0
 16344  004556  0100               	movlb	0	; () banked
 16345  004558  5189               	movf	___lwmod@divisor& (0+255),w,b
 16346  00455A  0100               	movlb	0	; () banked
 16347  00455C  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 16348  00455E  B4D8               	btfsc	status,2,c
 16349  004560  D026               	goto	l1809
 16350                           
 16351                           ; BSR set to: 0
 16352  004562  0E01               	movlw	1
 16353  004564  0100               	movlb	0	; () banked
 16354  004566  6F8B               	movwf	___lwmod@counter& (0+255),b
 16355  004568  D006               	goto	l5716
 16356  00456A                     l5714:
 16357                           
 16358                           ; BSR set to: 0
 16359  00456A  0100               	movlb	0	; () banked
 16360  00456C  90D8               	bcf	status,0,c
 16361  00456E  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 16362  004570  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 16363  004572  0100               	movlb	0	; () banked
 16364  004574  2B8B               	incf	___lwmod@counter& (0+255),f,b
 16365  004576                     l5716:
 16366                           
 16367                           ; BSR set to: 0
 16368  004576  0100               	movlb	0	; () banked
 16369  004578  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 16370  00457A  D7F7               	goto	l5714
 16371  00457C                     l5718:
 16372                           
 16373                           ; BSR set to: 0
 16374  00457C  0100               	movlb	0	; () banked
 16375  00457E  5189               	movf	___lwmod@divisor& (0+255),w,b
 16376  004580  0100               	movlb	0	; () banked
 16377  004582  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 16378  004584  0100               	movlb	0	; () banked
 16379  004586  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 16380  004588  0100               	movlb	0	; () banked
 16381  00458A  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 16382  00458C  A0D8               	btfss	status,0,c
 16383  00458E  D008               	goto	l5722
 16384                           
 16385                           ; BSR set to: 0
 16386  004590  0100               	movlb	0	; () banked
 16387  004592  5189               	movf	___lwmod@divisor& (0+255),w,b
 16388  004594  0100               	movlb	0	; () banked
 16389  004596  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 16390  004598  0100               	movlb	0	; () banked
 16391  00459A  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 16392  00459C  0100               	movlb	0	; () banked
 16393  00459E  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 16394  0045A0                     l5722:
 16395                           
 16396                           ; BSR set to: 0
 16397  0045A0  0100               	movlb	0	; () banked
 16398  0045A2  90D8               	bcf	status,0,c
 16399  0045A4  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 16400  0045A6  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 16401                           
 16402                           ; BSR set to: 0
 16403  0045A8  0100               	movlb	0	; () banked
 16404  0045AA  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 16405  0045AC  D7E7               	goto	l5718
 16406  0045AE                     l1809:
 16407                           
 16408                           ; BSR set to: 0
 16409  0045AE  C087  F087         	movff	___lwmod@dividend,?___lwmod
 16410  0045B2  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 16411                           
 16412                           ; BSR set to: 0
 16413  0045B6  0012               	return		;funcret
 16414  0045B8                     __end_of___lwmod:
 16415                           	opt stack 0
 16416                           tblptru	equ	0xFF8
 16417                           tblptrh	equ	0xFF7
 16418                           tblptrl	equ	0xFF6
 16419                           tablat	equ	0xFF5
 16420                           prodh	equ	0xFF4
 16421                           prodl	equ	0xFF3
 16422                           intcon	equ	0xFF2
 16423                           intcon2	equ	0xFF1
 16424                           intcon3	equ	0xFF0
 16425                           indf0	equ	0xFEF
 16426                           postinc0	equ	0xFEE
 16427                           fsr0h	equ	0xFEA
 16428                           fsr0l	equ	0xFE9
 16429                           wreg	equ	0xFE8
 16430                           postdec1	equ	0xFE5
 16431                           fsr1l	equ	0xFE1
 16432                           indf2	equ	0xFDF
 16433                           postinc2	equ	0xFDE
 16434                           postdec2	equ	0xFDD
 16435                           fsr2h	equ	0xFDA
 16436                           fsr2l	equ	0xFD9
 16437                           status	equ	0xFD8
 16438                           
 16439 ;; *************** function ___lwdiv *****************
 16440 ;; Defined at:
 16441 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 16442 ;; Parameters:    Size  Location     Type
 16443 ;;  dividend        2    0[BANK0 ] unsigned int 
 16444 ;;  divisor         2    2[BANK0 ] unsigned int 
 16445 ;; Auto vars:     Size  Location     Type
 16446 ;;  quotient        2    4[BANK0 ] unsigned int 
 16447 ;;  counter         1    6[BANK0 ] unsigned char 
 16448 ;; Return value:  Size  Location     Type
 16449 ;;                  2    0[BANK0 ] unsigned int 
 16450 ;; Registers used:
 16451 ;;		wreg, status,2, status,0
 16452 ;; Tracked objects:
 16453 ;;		On entry : 0/0
 16454 ;;		On exit  : 0/0
 16455 ;;		Unchanged: 0/0
 16456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16457 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16458 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16460 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16461 ;;Total ram usage:        7 bytes
 16462 ;; Hardware stack levels used:    1
 16463 ;; Hardware stack levels required when called:    7
 16464 ;; This function calls:
 16465 ;;		Nothing
 16466 ;; This function is called by:
 16467 ;;		_printf
 16468 ;; This function uses a non-reentrant model
 16469 ;;
 16470                           
 16471                           	psect	text56
 16472  00431C                     __ptext56:
 16473                           	opt stack 0
 16474  00431C                     ___lwdiv:
 16475                           	opt stack 19
 16476                           
 16477                           ; BSR set to: 0
 16478                           ;incstack = 0
 16479  00431C  0E00               	movlw	0
 16480  00431E  0100               	movlb	0	; () banked
 16481  004320  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 16482  004322  0E00               	movlw	0
 16483  004324  6F84               	movwf	___lwdiv@quotient& (0+255),b
 16484                           
 16485                           ; BSR set to: 0
 16486  004326  0100               	movlb	0	; () banked
 16487  004328  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16488  00432A  0100               	movlb	0	; () banked
 16489  00432C  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 16490  00432E  B4D8               	btfsc	status,2,c
 16491  004330  D02C               	goto	l1799
 16492                           
 16493                           ; BSR set to: 0
 16494  004332  0E01               	movlw	1
 16495  004334  0100               	movlb	0	; () banked
 16496  004336  6F86               	movwf	___lwdiv@counter& (0+255),b
 16497  004338  D006               	goto	l5696
 16498  00433A                     l5694:
 16499                           
 16500                           ; BSR set to: 0
 16501  00433A  0100               	movlb	0	; () banked
 16502  00433C  90D8               	bcf	status,0,c
 16503  00433E  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 16504  004340  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 16505  004342  0100               	movlb	0	; () banked
 16506  004344  2B86               	incf	___lwdiv@counter& (0+255),f,b
 16507  004346                     l5696:
 16508                           
 16509                           ; BSR set to: 0
 16510  004346  0100               	movlb	0	; () banked
 16511  004348  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 16512  00434A  D7F7               	goto	l5694
 16513  00434C                     l5698:
 16514                           
 16515                           ; BSR set to: 0
 16516  00434C  0100               	movlb	0	; () banked
 16517  00434E  90D8               	bcf	status,0,c
 16518  004350  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 16519  004352  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 16520                           
 16521                           ; BSR set to: 0
 16522  004354  0100               	movlb	0	; () banked
 16523  004356  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16524  004358  0100               	movlb	0	; () banked
 16525  00435A  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 16526  00435C  0100               	movlb	0	; () banked
 16527  00435E  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 16528  004360  0100               	movlb	0	; () banked
 16529  004362  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 16530  004364  A0D8               	btfss	status,0,c
 16531  004366  D00A               	goto	l5706
 16532                           
 16533                           ; BSR set to: 0
 16534  004368  0100               	movlb	0	; () banked
 16535  00436A  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16536  00436C  0100               	movlb	0	; () banked
 16537  00436E  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 16538  004370  0100               	movlb	0	; () banked
 16539  004372  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 16540  004374  0100               	movlb	0	; () banked
 16541  004376  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 16542                           
 16543                           ; BSR set to: 0
 16544  004378  0100               	movlb	0	; () banked
 16545  00437A  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 16546  00437C                     l5706:
 16547                           
 16548                           ; BSR set to: 0
 16549  00437C  0100               	movlb	0	; () banked
 16550  00437E  90D8               	bcf	status,0,c
 16551  004380  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 16552  004382  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 16553                           
 16554                           ; BSR set to: 0
 16555  004384  0100               	movlb	0	; () banked
 16556  004386  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 16557  004388  D7E1               	goto	l5698
 16558  00438A                     l1799:
 16559                           
 16560                           ; BSR set to: 0
 16561  00438A  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 16562  00438E  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 16563                           
 16564                           ; BSR set to: 0
 16565  004392  0012               	return		;funcret
 16566  004394                     __end_of___lwdiv:
 16567                           	opt stack 0
 16568                           tblptru	equ	0xFF8
 16569                           tblptrh	equ	0xFF7
 16570                           tblptrl	equ	0xFF6
 16571                           tablat	equ	0xFF5
 16572                           prodh	equ	0xFF4
 16573                           prodl	equ	0xFF3
 16574                           intcon	equ	0xFF2
 16575                           intcon2	equ	0xFF1
 16576                           intcon3	equ	0xFF0
 16577                           indf0	equ	0xFEF
 16578                           postinc0	equ	0xFEE
 16579                           fsr0h	equ	0xFEA
 16580                           fsr0l	equ	0xFE9
 16581                           wreg	equ	0xFE8
 16582                           postdec1	equ	0xFE5
 16583                           fsr1l	equ	0xFE1
 16584                           indf2	equ	0xFDF
 16585                           postinc2	equ	0xFDE
 16586                           postdec2	equ	0xFDD
 16587                           fsr2h	equ	0xFDA
 16588                           fsr2l	equ	0xFD9
 16589                           status	equ	0xFD8
 16590                           
 16591 ;; *************** function _lcdInst *****************
 16592 ;; Defined at:
 16593 ;;		line 15 in file "lcd.c"
 16594 ;; Parameters:    Size  Location     Type
 16595 ;;  data            1    wreg     unsigned char 
 16596 ;; Auto vars:     Size  Location     Type
 16597 ;;  data            1    2[BANK0 ] unsigned char 
 16598 ;; Return value:  Size  Location     Type
 16599 ;;                  1    wreg      void 
 16600 ;; Registers used:
 16601 ;;		wreg, status,2, status,0, cstack
 16602 ;; Tracked objects:
 16603 ;;		On entry : 0/0
 16604 ;;		On exit  : 0/0
 16605 ;;		Unchanged: 0/0
 16606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16608 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16610 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16611 ;;Total ram usage:        1 bytes
 16612 ;; Hardware stack levels used:    1
 16613 ;; Hardware stack levels required when called:    8
 16614 ;; This function calls:
 16615 ;;		_lcdNibble
 16616 ;; This function is called by:
 16617 ;;		_UI
 16618 ;;		_change_state_to_menu_start
 16619 ;;		_change_state_to_menu_12
 16620 ;;		_change_state_to_menu_22
 16621 ;;		_initLCD
 16622 ;;		_printRTC
 16623 ;;		_Loading
 16624 ;;		_EEPROM_write
 16625 ;;		_Test
 16626 ;;		_algorithmTest
 16627 ;;		_sensorTest
 16628 ;;		_actuatorTest
 16629 ;;		_BothServos
 16630 ;;		_PortTestA5
 16631 ;;		_PusherTest
 16632 ;;		_SpeedTest
 16633 ;;		_BlockerTest
 16634 ;;		_ToggleTestA5
 16635 ;; This function uses a non-reentrant model
 16636 ;;
 16637                           
 16638                           	psect	text57
 16639  004EDC                     __ptext57:
 16640                           	opt stack 0
 16641  004EDC                     _lcdInst:
 16642                           	opt stack 20
 16643                           
 16644                           ; BSR set to: 0
 16645                           ;incstack = 0
 16646                           ;lcdInst@data stored from wreg
 16647  004EDC  0100               	movlb	0	; () banked
 16648  004EDE  6F82               	movwf	lcdInst@data& (0+255),b
 16649                           
 16650                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 16651  004EE0  948C               	bcf	3980,2,c	;volatile
 16652                           
 16653                           ;lcd.c: 17: lcdNibble(data);
 16654  004EE2  0100               	movlb	0	; () banked
 16655  004EE4  5182               	movf	lcdInst@data& (0+255),w,b
 16656  004EE6  EC77  F022         	call	_lcdNibble
 16657  004EEA  0012               	return		;funcret
 16658  004EEC                     __end_of_lcdInst:
 16659                           	opt stack 0
 16660                           tblptru	equ	0xFF8
 16661                           tblptrh	equ	0xFF7
 16662                           tblptrl	equ	0xFF6
 16663                           tablat	equ	0xFF5
 16664                           prodh	equ	0xFF4
 16665                           prodl	equ	0xFF3
 16666                           intcon	equ	0xFF2
 16667                           intcon2	equ	0xFF1
 16668                           intcon3	equ	0xFF0
 16669                           indf0	equ	0xFEF
 16670                           postinc0	equ	0xFEE
 16671                           fsr0h	equ	0xFEA
 16672                           fsr0l	equ	0xFE9
 16673                           wreg	equ	0xFE8
 16674                           postdec1	equ	0xFE5
 16675                           fsr1l	equ	0xFE1
 16676                           indf2	equ	0xFDF
 16677                           postinc2	equ	0xFDE
 16678                           postdec2	equ	0xFDD
 16679                           fsr2h	equ	0xFDA
 16680                           fsr2l	equ	0xFD9
 16681                           status	equ	0xFD8
 16682                           
 16683 ;; *************** function _lcdNibble *****************
 16684 ;; Defined at:
 16685 ;;		line 25 in file "lcd.c"
 16686 ;; Parameters:    Size  Location     Type
 16687 ;;  data            1    wreg     unsigned char 
 16688 ;; Auto vars:     Size  Location     Type
 16689 ;;  data            1    1[BANK0 ] unsigned char 
 16690 ;;  temp            1    0[BANK0 ] unsigned char 
 16691 ;; Return value:  Size  Location     Type
 16692 ;;                  1    wreg      void 
 16693 ;; Registers used:
 16694 ;;		wreg, status,2, status,0
 16695 ;; Tracked objects:
 16696 ;;		On entry : 0/0
 16697 ;;		On exit  : 0/0
 16698 ;;		Unchanged: 0/0
 16699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16701 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16703 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16704 ;;Total ram usage:        2 bytes
 16705 ;; Hardware stack levels used:    1
 16706 ;; Hardware stack levels required when called:    7
 16707 ;; This function calls:
 16708 ;;		Nothing
 16709 ;; This function is called by:
 16710 ;;		_lcdInst
 16711 ;;		_putch
 16712 ;; This function uses a non-reentrant model
 16713 ;;
 16714                           
 16715                           	psect	text58
 16716  0044EE                     __ptext58:
 16717                           	opt stack 0
 16718  0044EE                     _lcdNibble:
 16719                           	opt stack 20
 16720                           
 16721                           ;incstack = 0
 16722                           ;lcdNibble@data stored from wreg
 16723  0044EE  0100               	movlb	0	; () banked
 16724  0044F0  6F81               	movwf	lcdNibble@data& (0+255),b
 16725                           
 16726                           ;lcd.c: 27: char temp = data & 0xF0;
 16727  0044F2  0100               	movlb	0	; () banked
 16728  0044F4  5181               	movf	lcdNibble@data& (0+255),w,b
 16729  0044F6  0BF0               	andlw	240
 16730  0044F8  0100               	movlb	0	; () banked
 16731  0044FA  6F80               	movwf	lcdNibble@temp& (0+255),b
 16732                           
 16733                           ;lcd.c: 28: LATD = LATD & 0x0F;
 16734  0044FC  508C               	movf	3980,w,c	;volatile
 16735  0044FE  0B0F               	andlw	15
 16736  004500  6E8C               	movwf	3980,c	;volatile
 16737                           
 16738                           ;lcd.c: 29: LATD = temp | LATD;
 16739  004502  0100               	movlb	0	; () banked
 16740  004504  5180               	movf	lcdNibble@temp& (0+255),w,b
 16741  004506  108C               	iorwf	3980,w,c	;volatile
 16742  004508  6E8C               	movwf	3980,c	;volatile
 16743                           
 16744                           ; BSR set to: 0
 16745                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 16746  00450A  868C               	bsf	3980,3,c	;volatile
 16747                           
 16748                           ; BSR set to: 0
 16749                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 16750  00450C  0E42               	movlw	66
 16751  00450E                     u9527:
 16752  00450E  2EE8               	decfsz	wreg,f,c
 16753  004510  D7FE               	bra	u9527
 16754  004512  D000               	nop2	
 16755                           
 16756                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 16757  004514  968C               	bcf	3980,3,c	;volatile
 16758                           
 16759                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 16760  004516  0E42               	movlw	66
 16761  004518                     u9537:
 16762  004518  2EE8               	decfsz	wreg,f,c
 16763  00451A  D7FE               	bra	u9537
 16764  00451C  D000               	nop2	
 16765                           
 16766                           ;lcd.c: 36: data = data << 4;
 16767  00451E  0100               	movlb	0	; () banked
 16768  004520  3981               	swapf	lcdNibble@data& (0+255),w,b
 16769  004522  0BF0               	andlw	240
 16770  004524  0100               	movlb	0	; () banked
 16771  004526  6F81               	movwf	lcdNibble@data& (0+255),b
 16772                           
 16773                           ;lcd.c: 38: temp = data & 0xF0;
 16774  004528  0100               	movlb	0	; () banked
 16775  00452A  5181               	movf	lcdNibble@data& (0+255),w,b
 16776  00452C  0BF0               	andlw	240
 16777  00452E  0100               	movlb	0	; () banked
 16778  004530  6F80               	movwf	lcdNibble@temp& (0+255),b
 16779                           
 16780                           ;lcd.c: 39: LATD = LATD & 0x0F;
 16781  004532  508C               	movf	3980,w,c	;volatile
 16782  004534  0B0F               	andlw	15
 16783  004536  6E8C               	movwf	3980,c	;volatile
 16784                           
 16785                           ;lcd.c: 40: LATD = temp | LATD;
 16786  004538  0100               	movlb	0	; () banked
 16787  00453A  5180               	movf	lcdNibble@temp& (0+255),w,b
 16788  00453C  108C               	iorwf	3980,w,c	;volatile
 16789  00453E  6E8C               	movwf	3980,c	;volatile
 16790                           
 16791                           ; BSR set to: 0
 16792                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 16793  004540  868C               	bsf	3980,3,c	;volatile
 16794                           
 16795                           ; BSR set to: 0
 16796                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 16797  004542  0E42               	movlw	66
 16798  004544                     u9547:
 16799  004544  2EE8               	decfsz	wreg,f,c
 16800  004546  D7FE               	bra	u9547
 16801  004548  D000               	nop2	
 16802                           
 16803                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 16804  00454A  968C               	bcf	3980,3,c	;volatile
 16805                           
 16806                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 16807  00454C  0E42               	movlw	66
 16808  00454E                     u9557:
 16809  00454E  2EE8               	decfsz	wreg,f,c
 16810  004550  D7FE               	bra	u9557
 16811  004552  D000               	nop2	
 16812  004554  0012               	return		;funcret
 16813  004556                     __end_of_lcdNibble:
 16814                           	opt stack 0
 16815                           tblptru	equ	0xFF8
 16816                           tblptrh	equ	0xFF7
 16817                           tblptrl	equ	0xFF6
 16818                           tablat	equ	0xFF5
 16819                           prodh	equ	0xFF4
 16820                           prodl	equ	0xFF3
 16821                           intcon	equ	0xFF2
 16822                           intcon2	equ	0xFF1
 16823                           intcon3	equ	0xFF0
 16824                           indf0	equ	0xFEF
 16825                           postinc0	equ	0xFEE
 16826                           fsr0h	equ	0xFEA
 16827                           fsr0l	equ	0xFE9
 16828                           wreg	equ	0xFE8
 16829                           postdec1	equ	0xFE5
 16830                           fsr1l	equ	0xFE1
 16831                           indf2	equ	0xFDF
 16832                           postinc2	equ	0xFDE
 16833                           postdec2	equ	0xFDD
 16834                           fsr2h	equ	0xFDA
 16835                           fsr2l	equ	0xFD9
 16836                           status	equ	0xFD8
 16837                           
 16838 ;; *************** function _handler *****************
 16839 ;; Defined at:
 16840 ;;		line 16 in file "interruptHandler.c"
 16841 ;; Parameters:    Size  Location     Type
 16842 ;;		None
 16843 ;; Auto vars:     Size  Location     Type
 16844 ;;		None
 16845 ;; Return value:  Size  Location     Type
 16846 ;;                  1    wreg      void 
 16847 ;; Registers used:
 16848 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16849 ;; Tracked objects:
 16850 ;;		On entry : 0/0
 16851 ;;		On exit  : 0/0
 16852 ;;		Unchanged: 0/0
 16853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16855 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16856 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16857 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16858 ;;Total ram usage:       16 bytes
 16859 ;; Hardware stack levels used:    1
 16860 ;; Hardware stack levels required when called:    6
 16861 ;; This function calls:
 16862 ;;		_printSortTimer
 16863 ;;		_updateMenu
 16864 ;; This function is called by:
 16865 ;;		Interrupt level 2
 16866 ;; This function uses a non-reentrant model
 16867 ;;
 16868                           
 16869                           	psect	intcode
 16870  000008                     __pintcode:
 16871                           	opt stack 0
 16872  000008                     _handler:
 16873                           	opt stack 18
 16874                           
 16875                           ;incstack = 0
 16876  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 16877  00000A  ED25  F01B         	call	int_func,f	;refresh shadow registers
 16878                           tblptru	equ	0xFF8
 16879                           tblptrh	equ	0xFF7
 16880                           tblptrl	equ	0xFF6
 16881                           tablat	equ	0xFF5
 16882                           prodh	equ	0xFF4
 16883                           prodl	equ	0xFF3
 16884                           intcon	equ	0xFF2
 16885                           intcon2	equ	0xFF1
 16886                           intcon3	equ	0xFF0
 16887                           indf0	equ	0xFEF
 16888                           postinc0	equ	0xFEE
 16889                           fsr0h	equ	0xFEA
 16890                           fsr0l	equ	0xFE9
 16891                           wreg	equ	0xFE8
 16892                           postdec1	equ	0xFE5
 16893                           fsr1l	equ	0xFE1
 16894                           indf2	equ	0xFDF
 16895                           postinc2	equ	0xFDE
 16896                           postdec2	equ	0xFDD
 16897                           fsr2h	equ	0xFDA
 16898                           fsr2l	equ	0xFD9
 16899                           status	equ	0xFD8
 16900                           
 16901                           	psect	intcode_body
 16902  00364A                     __pintcode_body:
 16903                           	opt stack 18
 16904  00364A                     int_func:
 16905                           	opt stack 18
 16906  00364A  0006               	pop		; remove dummy address from shadow register refresh
 16907  00364C  CFFA F04B          	movff	pclath,??_handler+2
 16908  003650  CFFB F04C          	movff	pclatu,??_handler+3
 16909  003654  CFE9 F04D          	movff	fsr0l,??_handler+4
 16910  003658  CFEA F04E          	movff	fsr0h,??_handler+5
 16911  00365C  CFE1 F04F          	movff	fsr1l,??_handler+6
 16912  003660  CFE2 F050          	movff	fsr1h,??_handler+7
 16913  003664  CFD9 F051          	movff	fsr2l,??_handler+8
 16914  003668  CFDA F052          	movff	fsr2h,??_handler+9
 16915  00366C  CFF3 F053          	movff	prodl,??_handler+10
 16916  003670  CFF4 F054          	movff	prodh,??_handler+11
 16917  003674  CFF6 F055          	movff	tblptrl,??_handler+12
 16918  003678  CFF7 F056          	movff	tblptrh,??_handler+13
 16919  00367C  CFF8 F057          	movff	tblptru,??_handler+14
 16920  003680  CFF5 F058          	movff	tablat,??_handler+15
 16921                           
 16922                           ;interruptHandler.c: 18: if(INT1IF){
 16923  003684  A0F0               	btfss	intcon3,0,c	;volatile
 16924  003686  D02B               	goto	i2l8800
 16925                           
 16926                           ;interruptHandler.c: 19: INT1IF = 0;
 16927  003688  90F0               	bcf	intcon3,0,c	;volatile
 16928                           
 16929                           ;interruptHandler.c: 20: if(machine_state == UI_state) {
 16930  00368A  0100               	movlb	0	; () banked
 16931  00368C  51FC               	movf	_machine_state& (0+255),w,b
 16932  00368E  A4D8               	btfss	status,2,c
 16933  003690  D01B               	goto	i2l8794
 16934                           
 16935                           ; BSR set to: 0
 16936                           ;interruptHandler.c: 21: input = keys[(PORTB & 0xF0) >> 4];
 16937  003692  3881               	swapf	3969,w,c	;volatile
 16938  003694  0B0F               	andlw	15
 16939  003696  0B0F               	andlw	15
 16940  003698  6E49               	movwf	??_handler& (0+255),c
 16941  00369A  6A4A               	clrf	(??_handler+1)& (0+255),c
 16942  00369C  0EEF               	movlw	low _keys
 16943  00369E  2449               	addwf	??_handler,w,c
 16944  0036A0  6EF6               	movwf	tblptrl,c
 16945  0036A2  0EFA               	movlw	high _keys
 16946  0036A4  204A               	addwfc	??_handler+1,w,c
 16947  0036A6  6EF7               	movwf	tblptrh,c
 16948  0036A8                     	if	1	;There are 3 active tblptr bytes
 16949  0036A8  6AF8               	clrf	tblptru,c
 16950  0036AA  0E00               	movlw	low (__mediumconst shr (0+16))
 16951  0036AC  22F8               	addwfc	tblptru,f,c
 16952  0036AE                     	endif
 16953  0036AE  0008               	tblrd		*
 16954  0036B0  CFF5 F07D          	movff	tablat,_input	;volatile
 16955                           
 16956                           ; BSR set to: 0
 16957                           ;interruptHandler.c: 23: if(input == '*'){
 16958  0036B4  0E2A               	movlw	42
 16959  0036B6  187D               	xorwf	_input,w,c	;volatile
 16960  0036B8  A4D8               	btfss	status,2,c
 16961  0036BA  D004               	goto	i2l8792
 16962                           
 16963                           ; BSR set to: 0
 16964                           ;interruptHandler.c: 24: machine_state = Testing_state;
 16965  0036BC  0E03               	movlw	3
 16966  0036BE  0100               	movlb	0	; () banked
 16967  0036C0  6FFC               	movwf	_machine_state& (0+255),b
 16968                           
 16969                           ;interruptHandler.c: 25: }
 16970  0036C2  D002               	goto	i2l8794
 16971  0036C4                     i2l8792:
 16972                           
 16973                           ; BSR set to: 0
 16974                           ;interruptHandler.c: 26: else{
 16975                           ;interruptHandler.c: 27: updateMenu();
 16976  0036C4  ECD7  F012         	call	_updateMenu	;wreg free
 16977  0036C8                     i2l8794:
 16978                           
 16979                           ;interruptHandler.c: 28: }
 16980                           ;interruptHandler.c: 29: }
 16981                           ;interruptHandler.c: 30: if(machine_state == Sorting_state){
 16982  0036C8  0100               	movlb	0	; () banked
 16983  0036CA  05FC               	decf	_machine_state& (0+255),w,b
 16984  0036CC  A4D8               	btfss	status,2,c
 16985  0036CE  D007               	goto	i2l8800
 16986                           
 16987                           ; BSR set to: 0
 16988                           ;interruptHandler.c: 31: if(input == '*'){
 16989  0036D0  0E2A               	movlw	42
 16990  0036D2  187D               	xorwf	_input,w,c	;volatile
 16991  0036D4  A4D8               	btfss	status,2,c
 16992  0036D6  D003               	goto	i2l8800
 16993                           
 16994                           ; BSR set to: 0
 16995                           ;interruptHandler.c: 32: machine_state = DoneSorting_state;
 16996  0036D8  0E02               	movlw	2
 16997  0036DA  0100               	movlb	0	; () banked
 16998  0036DC  6FFC               	movwf	_machine_state& (0+255),b
 16999  0036DE                     i2l8800:
 17000                           
 17001                           ;interruptHandler.c: 33: }
 17002                           ;interruptHandler.c: 34: }
 17003                           ;interruptHandler.c: 35: }
 17004                           ;interruptHandler.c: 38: if(TMR0IF){
 17005  0036DE  A4F2               	btfss	intcon,2,c	;volatile
 17006  0036E0  D00C               	goto	i2l8814
 17007                           
 17008                           ;interruptHandler.c: 39: TMR0IF = 0;
 17009  0036E2  94F2               	bcf	intcon,2,c	;volatile
 17010                           
 17011                           ;interruptHandler.c: 40: if(machine_state == Sorting_state){
 17012  0036E4  0100               	movlb	0	; () banked
 17013  0036E6  05FC               	decf	_machine_state& (0+255),w,b
 17014  0036E8  A4D8               	btfss	status,2,c
 17015  0036EA  D007               	goto	i2l8814
 17016                           
 17017                           ; BSR set to: 0
 17018                           ;interruptHandler.c: 41: printSortTimer();
 17019  0036EC  EC82  F017         	call	_printSortTimer	;wreg free
 17020                           
 17021                           ;interruptHandler.c: 43: TMR0H = 0b10000101;
 17022  0036F0  0E85               	movlw	133
 17023  0036F2  6ED7               	movwf	4055,c	;volatile
 17024                           
 17025                           ;interruptHandler.c: 44: TMR0L = 0b11101110;
 17026  0036F4  0EEE               	movlw	238
 17027  0036F6  6ED6               	movwf	4054,c	;volatile
 17028                           
 17029                           ;interruptHandler.c: 45: TMR0ON = 1;
 17030  0036F8  8ED5               	bsf	4053,7,c	;volatile
 17031  0036FA                     i2l8814:
 17032                           
 17033                           ;interruptHandler.c: 46: }
 17034                           ;interruptHandler.c: 47: }
 17035                           ;interruptHandler.c: 50: if(TMR1IF){
 17036  0036FA  A09E               	btfss	3998,0,c	;volatile
 17037  0036FC  D024               	goto	i2l8838
 17038                           
 17039                           ;interruptHandler.c: 51: TMR1IF = 0;
 17040  0036FE  909E               	bcf	3998,0,c	;volatile
 17041                           
 17042                           ;interruptHandler.c: 52: TMR1ON = 0;
 17043  003700  90CD               	bcf	4045,0,c	;volatile
 17044                           
 17045                           ;interruptHandler.c: 53: if(machine_state == Sorting_state){
 17046  003702  0100               	movlb	0	; () banked
 17047  003704  05FC               	decf	_machine_state& (0+255),w,b
 17048  003706  A4D8               	btfss	status,2,c
 17049  003708  D01E               	goto	i2l8838
 17050                           
 17051                           ; BSR set to: 0
 17052                           ;interruptHandler.c: 54: if(was_low_1){
 17053  00370A  5079               	movf	_was_low_1,w,c	;volatile
 17054  00370C  107A               	iorwf	_was_low_1+1,w,c	;volatile
 17055  00370E  B4D8               	btfsc	status,2,c
 17056  003710  D00A               	goto	i2l905
 17057                           
 17058                           ; BSR set to: 0
 17059                           ;interruptHandler.c: 55: LATCbits.LATC1 = 1;
 17060  003712  828B               	bsf	3979,1,c	;volatile
 17061                           
 17062                           ; BSR set to: 0
 17063                           ;interruptHandler.c: 56: was_low_1 = 0;
 17064  003714  0E00               	movlw	0
 17065  003716  6E7A               	movwf	_was_low_1+1,c	;volatile
 17066  003718  0E00               	movlw	0
 17067  00371A  6E79               	movwf	_was_low_1,c	;volatile
 17068                           
 17069                           ; BSR set to: 0
 17070                           ;interruptHandler.c: 57: TMR1H = servoTimes[0];
 17071  00371C  C11C  FFCF         	movff	_servoTimes,4047	;volatile
 17072                           
 17073                           ; BSR set to: 0
 17074                           ;interruptHandler.c: 58: TMR1L = servoTimes[1];
 17075  003720  C11E  FFCE         	movff	_servoTimes+2,4046	;volatile
 17076                           
 17077                           ;interruptHandler.c: 59: }
 17078  003724  D00F               	goto	i2l8836
 17079  003726                     i2l905:
 17080                           
 17081                           ; BSR set to: 0
 17082                           ;interruptHandler.c: 60: else{
 17083                           ;interruptHandler.c: 61: LATCbits.LATC1 = 0;
 17084  003726  928B               	bcf	3979,1,c	;volatile
 17085                           
 17086                           ; BSR set to: 0
 17087                           ;interruptHandler.c: 62: was_low_1 = 1;
 17088  003728  0E00               	movlw	0
 17089  00372A  6E7A               	movwf	_was_low_1+1,c	;volatile
 17090  00372C  0E01               	movlw	1
 17091  00372E  6E79               	movwf	_was_low_1,c	;volatile
 17092                           
 17093                           ; BSR set to: 0
 17094                           ;interruptHandler.c: 63: TMR1H = 20000 - servoTimes[0];
 17095  003730  0101               	movlb	1	; () banked
 17096  003732  511C               	movf	_servoTimes& (0+255),w,b
 17097  003734  0800               	sublw	0
 17098  003736  0F20               	addlw	32
 17099  003738  6ECF               	movwf	4047,c	;volatile
 17100                           
 17101                           ; BSR set to: 1
 17102                           ;interruptHandler.c: 64: TMR1L = 20000 - servoTimes[1];
 17103  00373A  0101               	movlb	1	; () banked
 17104  00373C  511E               	movf	(_servoTimes+2)& (0+255),w,b
 17105  00373E  0800               	sublw	0
 17106  003740  0F20               	addlw	32
 17107  003742  6ECE               	movwf	4046,c	;volatile
 17108  003744                     i2l8836:
 17109                           
 17110                           ;interruptHandler.c: 65: }
 17111                           ;interruptHandler.c: 66: TMR1ON = 1;
 17112  003744  80CD               	bsf	4045,0,c	;volatile
 17113  003746                     i2l8838:
 17114                           
 17115                           ;interruptHandler.c: 67: }
 17116                           ;interruptHandler.c: 68: }
 17117                           ;interruptHandler.c: 70: if(TMR3IF){
 17118  003746  A2A1               	btfss	4001,1,c	;volatile
 17119  003748  D024               	goto	i2l911
 17120                           
 17121                           ;interruptHandler.c: 71: TMR3IF = 0;
 17122  00374A  92A1               	bcf	4001,1,c	;volatile
 17123                           
 17124                           ;interruptHandler.c: 72: TMR3ON = 0;
 17125  00374C  90B1               	bcf	4017,0,c	;volatile
 17126                           
 17127                           ;interruptHandler.c: 73: if(machine_state == Sorting_state){
 17128  00374E  0100               	movlb	0	; () banked
 17129  003750  05FC               	decf	_machine_state& (0+255),w,b
 17130  003752  A4D8               	btfss	status,2,c
 17131  003754  D01E               	goto	i2l911
 17132                           
 17133                           ; BSR set to: 0
 17134                           ;interruptHandler.c: 74: if(was_low_3){
 17135  003756  507B               	movf	_was_low_3,w,c	;volatile
 17136  003758  107C               	iorwf	_was_low_3+1,w,c	;volatile
 17137  00375A  B4D8               	btfsc	status,2,c
 17138  00375C  D00A               	goto	i2l909
 17139                           
 17140                           ; BSR set to: 0
 17141                           ;interruptHandler.c: 75: LATCbits.LATC2 = 1;
 17142  00375E  848B               	bsf	3979,2,c	;volatile
 17143                           
 17144                           ; BSR set to: 0
 17145                           ;interruptHandler.c: 76: was_low_3 = 0;
 17146  003760  0E00               	movlw	0
 17147  003762  6E7C               	movwf	_was_low_3+1,c	;volatile
 17148  003764  0E00               	movlw	0
 17149  003766  6E7B               	movwf	_was_low_3,c	;volatile
 17150                           
 17151                           ; BSR set to: 0
 17152                           ;interruptHandler.c: 77: TMR3H = servoTimes[2];
 17153  003768  C120  FFB3         	movff	_servoTimes+4,4019	;volatile
 17154                           
 17155                           ; BSR set to: 0
 17156                           ;interruptHandler.c: 78: TMR3L = servoTimes[3];
 17157  00376C  C122  FFB2         	movff	_servoTimes+6,4018	;volatile
 17158                           
 17159                           ;interruptHandler.c: 79: }
 17160  003770  D00F               	goto	i2l8860
 17161  003772                     i2l909:
 17162                           
 17163                           ; BSR set to: 0
 17164                           ;interruptHandler.c: 80: else{
 17165                           ;interruptHandler.c: 81: LATCbits.LATC2 = 0;
 17166  003772  948B               	bcf	3979,2,c	;volatile
 17167                           
 17168                           ; BSR set to: 0
 17169                           ;interruptHandler.c: 82: was_low_3 = 1;
 17170  003774  0E00               	movlw	0
 17171  003776  6E7C               	movwf	_was_low_3+1,c	;volatile
 17172  003778  0E01               	movlw	1
 17173  00377A  6E7B               	movwf	_was_low_3,c	;volatile
 17174                           
 17175                           ; BSR set to: 0
 17176                           ;interruptHandler.c: 83: TMR3H = 20000 - servoTimes[2];
 17177  00377C  0101               	movlb	1	; () banked
 17178  00377E  5120               	movf	(_servoTimes+4)& (0+255),w,b
 17179  003780  0800               	sublw	0
 17180  003782  0F20               	addlw	32
 17181  003784  6EB3               	movwf	4019,c	;volatile
 17182                           
 17183                           ; BSR set to: 1
 17184                           ;interruptHandler.c: 84: TMR3L = 20000 - servoTimes[3];
 17185  003786  0101               	movlb	1	; () banked
 17186  003788  5122               	movf	(_servoTimes+6)& (0+255),w,b
 17187  00378A  0800               	sublw	0
 17188  00378C  0F20               	addlw	32
 17189  00378E  6EB2               	movwf	4018,c	;volatile
 17190  003790                     i2l8860:
 17191                           
 17192                           ;interruptHandler.c: 85: }
 17193                           ;interruptHandler.c: 86: TMR3ON = 1;
 17194  003790  80B1               	bsf	4017,0,c	;volatile
 17195  003792                     i2l911:
 17196  003792  C058  FFF5         	movff	??_handler+15,tablat
 17197  003796  C057  FFF8         	movff	??_handler+14,tblptru
 17198  00379A  C056  FFF7         	movff	??_handler+13,tblptrh
 17199  00379E  C055  FFF6         	movff	??_handler+12,tblptrl
 17200  0037A2  C054  FFF4         	movff	??_handler+11,prodh
 17201  0037A6  C053  FFF3         	movff	??_handler+10,prodl
 17202  0037AA  C052  FFDA         	movff	??_handler+9,fsr2h
 17203  0037AE  C051  FFD9         	movff	??_handler+8,fsr2l
 17204  0037B2  C050  FFE2         	movff	??_handler+7,fsr1h
 17205  0037B6  C04F  FFE1         	movff	??_handler+6,fsr1l
 17206  0037BA  C04E  FFEA         	movff	??_handler+5,fsr0h
 17207  0037BE  C04D  FFE9         	movff	??_handler+4,fsr0l
 17208  0037C2  C04C  FFFB         	movff	??_handler+3,pclatu
 17209  0037C6  C04B  FFFA         	movff	??_handler+2,pclath
 17210  0037CA  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 17211  0037CC  0011               	retfie		f
 17212  0037CE                     __end_of_handler:
 17213                           	opt stack 0
 17214                           pclatu	equ	0xFFB
 17215                           pclath	equ	0xFFA
 17216                           tblptru	equ	0xFF8
 17217                           tblptrh	equ	0xFF7
 17218                           tblptrl	equ	0xFF6
 17219                           tablat	equ	0xFF5
 17220                           prodh	equ	0xFF4
 17221                           prodl	equ	0xFF3
 17222                           intcon	equ	0xFF2
 17223                           intcon2	equ	0xFF1
 17224                           intcon3	equ	0xFF0
 17225                           indf0	equ	0xFEF
 17226                           postinc0	equ	0xFEE
 17227                           fsr0h	equ	0xFEA
 17228                           fsr0l	equ	0xFE9
 17229                           wreg	equ	0xFE8
 17230                           postdec1	equ	0xFE5
 17231                           fsr1h	equ	0xFE2
 17232                           fsr1l	equ	0xFE1
 17233                           indf2	equ	0xFDF
 17234                           postinc2	equ	0xFDE
 17235                           postdec2	equ	0xFDD
 17236                           fsr2h	equ	0xFDA
 17237                           fsr2l	equ	0xFD9
 17238                           status	equ	0xFD8
 17239                           
 17240 ;; *************** function _updateMenu *****************
 17241 ;; Defined at:
 17242 ;;		line 213 in file "UI.c"
 17243 ;; Parameters:    Size  Location     Type
 17244 ;;		None
 17245 ;; Auto vars:     Size  Location     Type
 17246 ;;		None
 17247 ;; Return value:  Size  Location     Type
 17248 ;;                  1    wreg      void 
 17249 ;; Registers used:
 17250 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17251 ;; Tracked objects:
 17252 ;;		On entry : 0/0
 17253 ;;		On exit  : 0/0
 17254 ;;		Unchanged: 0/0
 17255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17257 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17258 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17259 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17260 ;;Total ram usage:        2 bytes
 17261 ;; Hardware stack levels used:    1
 17262 ;; Hardware stack levels required when called:    5
 17263 ;; This function calls:
 17264 ;;		_change_state_to_logs_11
 17265 ;;		_change_state_to_logs_12
 17266 ;;		_change_state_to_logs_22
 17267 ;;		_change_state_to_logs_23
 17268 ;;		_change_state_to_logs_33
 17269 ;;		_change_state_to_logs_34
 17270 ;;		_change_state_to_menu_11
 17271 ;;		_change_state_to_menu_23
 17272 ;;		_dispLogs
 17273 ;;		_inputHandler
 17274 ;;		i2_change_state_to_menu_12
 17275 ;;		i2_change_state_to_menu_22
 17276 ;;		i2_change_state_to_menu_start
 17277 ;; This function is called by:
 17278 ;;		_handler
 17279 ;; This function uses a non-reentrant model
 17280 ;;
 17281                           
 17282                           	psect	text60
 17283  0025AE                     __ptext60:
 17284                           	opt stack 0
 17285  0025AE                     _updateMenu:
 17286                           	opt stack 18
 17287                           
 17288                           ;UI.c: 214: up = 0; down = 0; enter = 0; back = 0;
 17289                           
 17290                           ;incstack = 0
 17291  0025AE  0E00               	movlw	0
 17292  0025B0  6E78               	movwf	_up+1,c
 17293  0025B2  0E00               	movlw	0
 17294  0025B4  6E77               	movwf	_up,c
 17295  0025B6  0E00               	movlw	0
 17296  0025B8  6E62               	movwf	_down+1,c
 17297  0025BA  0E00               	movlw	0
 17298  0025BC  6E61               	movwf	_down,c
 17299  0025BE  0E00               	movlw	0
 17300  0025C0  6E64               	movwf	_enter+1,c
 17301  0025C2  0E00               	movlw	0
 17302  0025C4  6E63               	movwf	_enter,c
 17303  0025C6  0E00               	movlw	0
 17304  0025C8  6E5A               	movwf	_back+1,c
 17305  0025CA  0E00               	movlw	0
 17306  0025CC  6E59               	movwf	_back,c
 17307                           
 17308                           ;UI.c: 215: (INTCONbits.GIE = 0);
 17309  0025CE  9EF2               	bcf	intcon,7,c	;volatile
 17310                           
 17311                           ;UI.c: 217: if (inputHandler()
 17312                           ;UI.c: 220: ){
 17313  0025D0  EC8D  F018         	call	_inputHandler	;wreg free
 17314  0025D4  502A               	movf	?_inputHandler,w,c
 17315  0025D6  102B               	iorwf	?_inputHandler+1,w,c
 17316  0025D8  A4D8               	btfss	status,2,c
 17317  0025DA  D112               	goto	i2l8518
 17318  0025DC  D146               	goto	i2l257
 17319  0025DE                     i2l8370:
 17320                           
 17321                           ;UI.c: 224: change_state_to_menu_11();
 17322  0025DE  EC88  F025         	call	_change_state_to_menu_11	;wreg free
 17323                           
 17324                           ;UI.c: 225: break;
 17325  0025E2  D143               	goto	i2l257
 17326  0025E4                     i2l8372:
 17327                           
 17328                           ;UI.c: 228: if(up){
 17329  0025E4  5077               	movf	_up,w,c
 17330  0025E6  1078               	iorwf	_up+1,w,c
 17331  0025E8  B4D8               	btfsc	status,2,c
 17332  0025EA  D003               	goto	i2l8376
 17333                           
 17334                           ;UI.c: 229: change_state_to_menu_23();
 17335  0025EC  EC70  F025         	call	_change_state_to_menu_23	;wreg free
 17336                           
 17337                           ;UI.c: 230: }
 17338  0025F0  D13C               	goto	i2l257
 17339  0025F2                     i2l8376:
 17340                           
 17341                           ;UI.c: 231: else if(down){
 17342  0025F2  5061               	movf	_down,w,c
 17343  0025F4  1062               	iorwf	_down+1,w,c
 17344  0025F6  B4D8               	btfsc	status,2,c
 17345  0025F8  D003               	goto	i2l8380
 17346                           
 17347                           ;UI.c: 232: change_state_to_menu_12();
 17348  0025FA  EC58  F025         	call	i2_change_state_to_menu_12	;wreg free
 17349                           
 17350                           ;UI.c: 233: }
 17351  0025FE  D135               	goto	i2l257
 17352  002600                     i2l8380:
 17353                           
 17354                           ;UI.c: 234: else if(enter){
 17355  002600  5063               	movf	_enter,w,c
 17356  002602  1064               	iorwf	_enter+1,w,c
 17357  002604  B4D8               	btfsc	status,2,c
 17358  002606  D131               	goto	i2l257
 17359                           
 17360                           ;UI.c: 235: change_state_to_menu_start();
 17361  002608  ECB2  F026         	call	i2_change_state_to_menu_start	;wreg free
 17362                           
 17363                           ;UI.c: 236: }
 17364                           ;UI.c: 237: break;
 17365  00260C  D12E               	goto	i2l257
 17366  00260E                     i2l8384:
 17367                           
 17368                           ;UI.c: 240: if(up){
 17369  00260E  5077               	movf	_up,w,c
 17370  002610  1078               	iorwf	_up+1,w,c
 17371  002612  B4D8               	btfsc	status,2,c
 17372  002614  D003               	goto	i2l8388
 17373                           
 17374                           ;UI.c: 241: change_state_to_menu_11();
 17375  002616  EC88  F025         	call	_change_state_to_menu_11	;wreg free
 17376                           
 17377                           ;UI.c: 242: }
 17378  00261A  D127               	goto	i2l257
 17379  00261C                     i2l8388:
 17380                           
 17381                           ;UI.c: 243: else if(down){
 17382  00261C  5061               	movf	_down,w,c
 17383  00261E  1062               	iorwf	_down+1,w,c
 17384  002620  B4D8               	btfsc	status,2,c
 17385  002622  D011               	goto	i2l8404
 17386                           
 17387                           ;UI.c: 244: change_state_to_menu_23();
 17388  002624  EC70  F025         	call	_change_state_to_menu_23	;wreg free
 17389                           
 17390                           ;UI.c: 245: }
 17391  002628  D120               	goto	i2l257
 17392  00262A                     i2l8396:
 17393                           
 17394                           ;UI.c: 252: if(up){
 17395  00262A  5077               	movf	_up,w,c
 17396  00262C  1078               	iorwf	_up+1,w,c
 17397  00262E  B4D8               	btfsc	status,2,c
 17398  002630  D003               	goto	i2l8400
 17399                           
 17400                           ;UI.c: 253: change_state_to_menu_11();
 17401  002632  EC88  F025         	call	_change_state_to_menu_11	;wreg free
 17402                           
 17403                           ;UI.c: 254: }
 17404  002636  D119               	goto	i2l257
 17405  002638                     i2l8400:
 17406                           
 17407                           ;UI.c: 255: else if(down){
 17408  002638  5061               	movf	_down,w,c
 17409  00263A  1062               	iorwf	_down+1,w,c
 17410  00263C  B4D8               	btfsc	status,2,c
 17411  00263E  D003               	goto	i2l8404
 17412                           
 17413                           ;UI.c: 256: change_state_to_menu_23();
 17414  002640  EC70  F025         	call	_change_state_to_menu_23	;wreg free
 17415                           
 17416                           ;UI.c: 257: }
 17417  002644  D112               	goto	i2l257
 17418  002646                     i2l8404:
 17419                           
 17420                           ;UI.c: 258: else if(enter){
 17421  002646  5063               	movf	_enter,w,c
 17422  002648  1064               	iorwf	_enter+1,w,c
 17423  00264A  B4D8               	btfsc	status,2,c
 17424  00264C  D10E               	goto	i2l257
 17425                           
 17426                           ;UI.c: 259: machine_state = Sorting_state;
 17427  00264E  0E01               	movlw	1
 17428  002650  0100               	movlb	0	; () banked
 17429  002652  6FFC               	movwf	_machine_state& (0+255),b
 17430                           
 17431                           ; BSR set to: 0
 17432                           ;UI.c: 260: }
 17433                           ;UI.c: 261: break;
 17434                           
 17435                           ; BSR set to: 0
 17436                           
 17437                           ; BSR set to: 0
 17438  002654  D10A               	goto	i2l257
 17439  002656                     i2l8408:
 17440                           
 17441                           ;UI.c: 264: if(up){
 17442  002656  5077               	movf	_up,w,c
 17443  002658  1078               	iorwf	_up+1,w,c
 17444  00265A  B4D8               	btfsc	status,2,c
 17445  00265C  D003               	goto	i2l8412
 17446                           
 17447                           ;UI.c: 265: change_state_to_menu_22();
 17448  00265E  EC40  F025         	call	i2_change_state_to_menu_22	;wreg free
 17449                           
 17450                           ;UI.c: 266: }
 17451  002662  D103               	goto	i2l257
 17452  002664                     i2l8412:
 17453                           
 17454                           ;UI.c: 267: else if(down){
 17455  002664  5061               	movf	_down,w,c
 17456  002666  1062               	iorwf	_down+1,w,c
 17457  002668  B4D8               	btfsc	status,2,c
 17458  00266A  D003               	goto	i2l8416
 17459                           
 17460                           ;UI.c: 268: change_state_to_menu_11();
 17461  00266C  EC88  F025         	call	_change_state_to_menu_11	;wreg free
 17462                           
 17463                           ;UI.c: 269: }
 17464  002670  D0FC               	goto	i2l257
 17465  002672                     i2l8416:
 17466                           
 17467                           ;UI.c: 270: else if(enter){
 17468  002672  5063               	movf	_enter,w,c
 17469  002674  1064               	iorwf	_enter+1,w,c
 17470  002676  B4D8               	btfsc	status,2,c
 17471  002678  D0F8               	goto	i2l257
 17472                           
 17473                           ;UI.c: 271: change_state_to_logs_11();
 17474  00267A  EC00  F026         	call	_change_state_to_logs_11	;wreg free
 17475                           
 17476                           ;UI.c: 272: }
 17477                           ;UI.c: 273: break;
 17478  00267E  D0F5               	goto	i2l257
 17479  002680                     i2l8420:
 17480                           
 17481                           ;UI.c: 276: if(up){
 17482  002680  5077               	movf	_up,w,c
 17483  002682  1078               	iorwf	_up+1,w,c
 17484  002684  B4D8               	btfsc	status,2,c
 17485  002686  D003               	goto	i2l8424
 17486                           
 17487                           ;UI.c: 277: change_state_to_logs_34();
 17488  002688  ECA0  F025         	call	_change_state_to_logs_34	;wreg free
 17489                           
 17490                           ;UI.c: 278: }
 17491  00268C  D0EE               	goto	i2l257
 17492  00268E                     i2l8424:
 17493                           
 17494                           ;UI.c: 279: else if(down){
 17495  00268E  5061               	movf	_down,w,c
 17496  002690  1062               	iorwf	_down+1,w,c
 17497  002692  B4D8               	btfsc	status,2,c
 17498  002694  D003               	goto	i2l8428
 17499                           
 17500                           ;UI.c: 280: change_state_to_logs_12();
 17501  002696  ECE8  F025         	call	_change_state_to_logs_12	;wreg free
 17502                           
 17503                           ;UI.c: 281: }
 17504  00269A  D0E7               	goto	i2l257
 17505  00269C                     i2l8428:
 17506                           
 17507                           ;UI.c: 282: else if(enter){
 17508  00269C  5063               	movf	_enter,w,c
 17509  00269E  1064               	iorwf	_enter+1,w,c
 17510  0026A0  B4D8               	btfsc	status,2,c
 17511  0026A2  D007               	goto	i2l8432
 17512                           
 17513                           ;UI.c: 283: dispLogs(1);
 17514  0026A4  0E00               	movlw	0
 17515  0026A6  6E13               	movwf	dispLogs@myLog+1,c
 17516  0026A8  0E01               	movlw	1
 17517  0026AA  6E12               	movwf	dispLogs@myLog,c
 17518  0026AC  ECEC  F026         	call	_dispLogs	;wreg free
 17519                           
 17520                           ;UI.c: 284: }
 17521  0026B0  D0DC               	goto	i2l257
 17522  0026B2                     i2l8432:
 17523                           
 17524                           ;UI.c: 285: else if(back){
 17525  0026B2  5059               	movf	_back,w,c
 17526  0026B4  105A               	iorwf	_back+1,w,c
 17527  0026B6  B4D8               	btfsc	status,2,c
 17528  0026B8  D0D8               	goto	i2l257
 17529                           
 17530                           ;UI.c: 286: change_state_to_menu_23();
 17531  0026BA  EC70  F025         	call	_change_state_to_menu_23	;wreg free
 17532                           
 17533                           ;UI.c: 287: }
 17534                           ;UI.c: 288: break;
 17535  0026BE  D0D5               	goto	i2l257
 17536  0026C0                     i2l8436:
 17537                           
 17538                           ;UI.c: 291: if(up){
 17539  0026C0  5077               	movf	_up,w,c
 17540  0026C2  1078               	iorwf	_up+1,w,c
 17541  0026C4  B4D8               	btfsc	status,2,c
 17542  0026C6  D003               	goto	i2l8440
 17543                           
 17544                           ;UI.c: 292: change_state_to_logs_11();
 17545  0026C8  EC00  F026         	call	_change_state_to_logs_11	;wreg free
 17546                           
 17547                           ;UI.c: 293: }
 17548  0026CC  D0CE               	goto	i2l257
 17549  0026CE                     i2l8440:
 17550                           
 17551                           ;UI.c: 294: else if(down){
 17552  0026CE  5061               	movf	_down,w,c
 17553  0026D0  1062               	iorwf	_down+1,w,c
 17554  0026D2  B4D8               	btfsc	status,2,c
 17555  0026D4  D003               	goto	i2l8444
 17556                           
 17557                           ;UI.c: 295: change_state_to_logs_23();
 17558  0026D6  EC46  F026         	call	_change_state_to_logs_23	;wreg free
 17559                           
 17560                           ;UI.c: 296: }
 17561  0026DA  D0C7               	goto	i2l257
 17562  0026DC                     i2l8444:
 17563                           
 17564                           ;UI.c: 297: else if(enter){
 17565  0026DC  5063               	movf	_enter,w,c
 17566  0026DE  1064               	iorwf	_enter+1,w,c
 17567  0026E0  B4D8               	btfsc	status,2,c
 17568  0026E2  D007               	goto	i2l8448
 17569                           
 17570                           ;UI.c: 298: dispLogs(2);
 17571  0026E4  0E00               	movlw	0
 17572  0026E6  6E13               	movwf	dispLogs@myLog+1,c
 17573  0026E8  0E02               	movlw	2
 17574  0026EA  6E12               	movwf	dispLogs@myLog,c
 17575  0026EC  ECEC  F026         	call	_dispLogs	;wreg free
 17576                           
 17577                           ;UI.c: 299: }
 17578  0026F0  D0BC               	goto	i2l257
 17579  0026F2                     i2l8448:
 17580                           
 17581                           ;UI.c: 300: else if(back){
 17582  0026F2  5059               	movf	_back,w,c
 17583  0026F4  105A               	iorwf	_back+1,w,c
 17584  0026F6  B4D8               	btfsc	status,2,c
 17585  0026F8  D0B8               	goto	i2l257
 17586                           
 17587                           ;UI.c: 301: change_state_to_menu_23();
 17588  0026FA  EC70  F025         	call	_change_state_to_menu_23	;wreg free
 17589                           
 17590                           ;UI.c: 302: }
 17591                           ;UI.c: 303: break;
 17592  0026FE  D0B5               	goto	i2l257
 17593  002700                     i2l8452:
 17594                           
 17595                           ;UI.c: 306: if(up){
 17596  002700  5077               	movf	_up,w,c
 17597  002702  1078               	iorwf	_up+1,w,c
 17598  002704  B4D8               	btfsc	status,2,c
 17599  002706  D003               	goto	i2l8456
 17600                           
 17601                           ;UI.c: 307: change_state_to_logs_11();
 17602  002708  EC00  F026         	call	_change_state_to_logs_11	;wreg free
 17603                           
 17604                           ;UI.c: 308: }
 17605  00270C  D0AE               	goto	i2l257
 17606  00270E                     i2l8456:
 17607                           
 17608                           ;UI.c: 309: else if(down){
 17609  00270E  5061               	movf	_down,w,c
 17610  002710  1062               	iorwf	_down+1,w,c
 17611  002712  B4D8               	btfsc	status,2,c
 17612  002714  D003               	goto	i2l8460
 17613                           
 17614                           ;UI.c: 310: change_state_to_logs_23();
 17615  002716  EC46  F026         	call	_change_state_to_logs_23	;wreg free
 17616                           
 17617                           ;UI.c: 311: }
 17618  00271A  D0A7               	goto	i2l257
 17619  00271C                     i2l8460:
 17620                           
 17621                           ;UI.c: 312: else if(enter){
 17622  00271C  5063               	movf	_enter,w,c
 17623  00271E  1064               	iorwf	_enter+1,w,c
 17624  002720  B4D8               	btfsc	status,2,c
 17625  002722  D007               	goto	i2l8464
 17626                           
 17627                           ;UI.c: 313: dispLogs(2);
 17628  002724  0E00               	movlw	0
 17629  002726  6E13               	movwf	dispLogs@myLog+1,c
 17630  002728  0E02               	movlw	2
 17631  00272A  6E12               	movwf	dispLogs@myLog,c
 17632  00272C  ECEC  F026         	call	_dispLogs	;wreg free
 17633                           
 17634                           ;UI.c: 314: }
 17635  002730  D09C               	goto	i2l257
 17636  002732                     i2l8464:
 17637                           
 17638                           ;UI.c: 315: else if(back){
 17639  002732  5059               	movf	_back,w,c
 17640  002734  105A               	iorwf	_back+1,w,c
 17641  002736  B4D8               	btfsc	status,2,c
 17642  002738  D098               	goto	i2l257
 17643                           
 17644                           ;UI.c: 316: change_state_to_menu_23();
 17645  00273A  EC70  F025         	call	_change_state_to_menu_23	;wreg free
 17646                           
 17647                           ;UI.c: 317: }
 17648                           ;UI.c: 318: break;
 17649  00273E  D095               	goto	i2l257
 17650  002740                     i2l8468:
 17651                           
 17652                           ;UI.c: 321: if(up){
 17653  002740  5077               	movf	_up,w,c
 17654  002742  1078               	iorwf	_up+1,w,c
 17655  002744  B4D8               	btfsc	status,2,c
 17656  002746  D003               	goto	i2l8472
 17657                           
 17658                           ;UI.c: 322: change_state_to_logs_22();
 17659  002748  ECD0  F025         	call	_change_state_to_logs_22	;wreg free
 17660                           
 17661                           ;UI.c: 323: }
 17662  00274C  D08E               	goto	i2l257
 17663  00274E                     i2l8472:
 17664                           
 17665                           ;UI.c: 324: else if(down){
 17666  00274E  5061               	movf	_down,w,c
 17667  002750  1062               	iorwf	_down+1,w,c
 17668  002752  B4D8               	btfsc	status,2,c
 17669  002754  D003               	goto	i2l8476
 17670                           
 17671                           ;UI.c: 325: change_state_to_logs_34();
 17672  002756  ECA0  F025         	call	_change_state_to_logs_34	;wreg free
 17673                           
 17674                           ;UI.c: 326: }
 17675  00275A  D087               	goto	i2l257
 17676  00275C                     i2l8476:
 17677                           
 17678                           ;UI.c: 327: else if(enter){
 17679  00275C  5063               	movf	_enter,w,c
 17680  00275E  1064               	iorwf	_enter+1,w,c
 17681  002760  B4D8               	btfsc	status,2,c
 17682  002762  D007               	goto	i2l8480
 17683                           
 17684                           ;UI.c: 328: dispLogs(3);
 17685  002764  0E00               	movlw	0
 17686  002766  6E13               	movwf	dispLogs@myLog+1,c
 17687  002768  0E03               	movlw	3
 17688  00276A  6E12               	movwf	dispLogs@myLog,c
 17689  00276C  ECEC  F026         	call	_dispLogs	;wreg free
 17690                           
 17691                           ;UI.c: 329: }
 17692  002770  D07C               	goto	i2l257
 17693  002772                     i2l8480:
 17694                           
 17695                           ;UI.c: 330: else if(back){
 17696  002772  5059               	movf	_back,w,c
 17697  002774  105A               	iorwf	_back+1,w,c
 17698  002776  B4D8               	btfsc	status,2,c
 17699  002778  D078               	goto	i2l257
 17700                           
 17701                           ;UI.c: 331: change_state_to_menu_23();
 17702  00277A  EC70  F025         	call	_change_state_to_menu_23	;wreg free
 17703                           
 17704                           ;UI.c: 332: }
 17705                           ;UI.c: 333: break;
 17706  00277E  D075               	goto	i2l257
 17707  002780                     i2l8484:
 17708                           
 17709                           ;UI.c: 336: if(up){
 17710  002780  5077               	movf	_up,w,c
 17711  002782  1078               	iorwf	_up+1,w,c
 17712  002784  B4D8               	btfsc	status,2,c
 17713  002786  D003               	goto	i2l8488
 17714                           
 17715                           ;UI.c: 337: change_state_to_logs_22();
 17716  002788  ECD0  F025         	call	_change_state_to_logs_22	;wreg free
 17717                           
 17718                           ;UI.c: 338: }
 17719  00278C  D06E               	goto	i2l257
 17720  00278E                     i2l8488:
 17721                           
 17722                           ;UI.c: 339: else if(down){
 17723  00278E  5061               	movf	_down,w,c
 17724  002790  1062               	iorwf	_down+1,w,c
 17725  002792  B4D8               	btfsc	status,2,c
 17726  002794  D003               	goto	i2l8492
 17727                           
 17728                           ;UI.c: 340: change_state_to_logs_34();
 17729  002796  ECA0  F025         	call	_change_state_to_logs_34	;wreg free
 17730                           
 17731                           ;UI.c: 341: }
 17732  00279A  D067               	goto	i2l257
 17733  00279C                     i2l8492:
 17734                           
 17735                           ;UI.c: 342: else if(enter){
 17736  00279C  5063               	movf	_enter,w,c
 17737  00279E  1064               	iorwf	_enter+1,w,c
 17738  0027A0  B4D8               	btfsc	status,2,c
 17739  0027A2  D007               	goto	i2l8496
 17740                           
 17741                           ;UI.c: 343: dispLogs(3);
 17742  0027A4  0E00               	movlw	0
 17743  0027A6  6E13               	movwf	dispLogs@myLog+1,c
 17744  0027A8  0E03               	movlw	3
 17745  0027AA  6E12               	movwf	dispLogs@myLog,c
 17746  0027AC  ECEC  F026         	call	_dispLogs	;wreg free
 17747                           
 17748                           ;UI.c: 344: }
 17749  0027B0  D05C               	goto	i2l257
 17750  0027B2                     i2l8496:
 17751                           
 17752                           ;UI.c: 345: else if(back){
 17753  0027B2  5059               	movf	_back,w,c
 17754  0027B4  105A               	iorwf	_back+1,w,c
 17755  0027B6  B4D8               	btfsc	status,2,c
 17756  0027B8  D058               	goto	i2l257
 17757                           
 17758                           ;UI.c: 346: change_state_to_menu_23();
 17759  0027BA  EC70  F025         	call	_change_state_to_menu_23	;wreg free
 17760                           
 17761                           ;UI.c: 347: }
 17762                           ;UI.c: 348: break;
 17763  0027BE  D055               	goto	i2l257
 17764  0027C0                     i2l8500:
 17765                           
 17766                           ;UI.c: 351: if(up){
 17767  0027C0  5077               	movf	_up,w,c
 17768  0027C2  1078               	iorwf	_up+1,w,c
 17769  0027C4  B4D8               	btfsc	status,2,c
 17770  0027C6  D003               	goto	i2l8504
 17771                           
 17772                           ;UI.c: 352: change_state_to_logs_33();
 17773  0027C8  ECB8  F025         	call	_change_state_to_logs_33	;wreg free
 17774                           
 17775                           ;UI.c: 353: }
 17776  0027CC  D04E               	goto	i2l257
 17777  0027CE                     i2l8504:
 17778                           
 17779                           ;UI.c: 354: else if(down){
 17780  0027CE  5061               	movf	_down,w,c
 17781  0027D0  1062               	iorwf	_down+1,w,c
 17782  0027D2  B4D8               	btfsc	status,2,c
 17783  0027D4  D003               	goto	i2l8508
 17784                           
 17785                           ;UI.c: 355: change_state_to_logs_11();
 17786  0027D6  EC00  F026         	call	_change_state_to_logs_11	;wreg free
 17787                           
 17788                           ;UI.c: 356: }
 17789  0027DA  D047               	goto	i2l257
 17790  0027DC                     i2l8508:
 17791                           
 17792                           ;UI.c: 357: else if(enter){
 17793  0027DC  5063               	movf	_enter,w,c
 17794  0027DE  1064               	iorwf	_enter+1,w,c
 17795  0027E0  B4D8               	btfsc	status,2,c
 17796  0027E2  D007               	goto	i2l8512
 17797                           
 17798                           ;UI.c: 358: dispLogs(4);
 17799  0027E4  0E00               	movlw	0
 17800  0027E6  6E13               	movwf	dispLogs@myLog+1,c
 17801  0027E8  0E04               	movlw	4
 17802  0027EA  6E12               	movwf	dispLogs@myLog,c
 17803  0027EC  ECEC  F026         	call	_dispLogs	;wreg free
 17804                           
 17805                           ;UI.c: 359: }
 17806  0027F0  D03C               	goto	i2l257
 17807  0027F2                     i2l8512:
 17808                           
 17809                           ;UI.c: 360: else if(back){
 17810  0027F2  5059               	movf	_back,w,c
 17811  0027F4  105A               	iorwf	_back+1,w,c
 17812  0027F6  B4D8               	btfsc	status,2,c
 17813  0027F8  D038               	goto	i2l257
 17814                           
 17815                           ;UI.c: 361: change_state_to_menu_23();
 17816  0027FA  EC70  F025         	call	_change_state_to_menu_23	;wreg free
 17817                           
 17818                           ;UI.c: 367: }
 17819                           
 17820                           ;UI.c: 366: break;
 17821                           
 17822                           ;UI.c: 365: default:
 17823                           
 17824                           ;UI.c: 362: }
 17825                           ;UI.c: 363: break;
 17826  0027FE  D035               	goto	i2l257
 17827  002800                     i2l8518:
 17828  002800  C0E6  F043         	movff	_cur_state,??_updateMenu
 17829  002804  C0E7  F044         	movff	_cur_state+1,??_updateMenu+1
 17830                           
 17831                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 17832                           ; Switch size 1, requested type "space"
 17833                           ; Number of cases is 3, Range of values is 0 to 4
 17834                           ; switch strategies available:
 17835                           ; Name         Instructions Cycles
 17836                           ; simple_byte           10     6 (average)
 17837                           ;	Chosen strategy is simple_byte
 17838  002808  5044               	movf	??_updateMenu+1,w,c
 17839  00280A  0A00               	xorlw	0	; case 0
 17840  00280C  B4D8               	btfsc	status,2,c
 17841  00280E  D007               	goto	i2l9170
 17842  002810  0A03               	xorlw	3	; case 3
 17843  002812  B4D8               	btfsc	status,2,c
 17844  002814  D015               	goto	i2l9172
 17845  002816  0A07               	xorlw	7	; case 4
 17846  002818  B4D8               	btfsc	status,2,c
 17847  00281A  D020               	goto	i2l9174
 17848  00281C  D026               	goto	i2l257
 17849  00281E                     i2l9170:
 17850                           
 17851                           ; Switch size 1, requested type "space"
 17852                           ; Number of cases is 5, Range of values is 0 to 23
 17853                           ; switch strategies available:
 17854                           ; Name         Instructions Cycles
 17855                           ; simple_byte           16     9 (average)
 17856                           ;	Chosen strategy is simple_byte
 17857  00281E  5043               	movf	??_updateMenu,w,c
 17858  002820  0A00               	xorlw	0	; case 0
 17859  002822  B4D8               	btfsc	status,2,c
 17860  002824  D6DC               	goto	i2l8370
 17861  002826  0A0B               	xorlw	11	; case 11
 17862  002828  B4D8               	btfsc	status,2,c
 17863  00282A  D6DC               	goto	i2l8372
 17864  00282C  0A07               	xorlw	7	; case 12
 17865  00282E  B4D8               	btfsc	status,2,c
 17866  002830  D6EE               	goto	i2l8384
 17867  002832  0A1A               	xorlw	26	; case 22
 17868  002834  B4D8               	btfsc	status,2,c
 17869  002836  D6F9               	goto	i2l8396
 17870  002838  0A01               	xorlw	1	; case 23
 17871  00283A  B4D8               	btfsc	status,2,c
 17872  00283C  D70C               	goto	i2l8408
 17873  00283E  D015               	goto	i2l257
 17874  002840                     i2l9172:
 17875                           
 17876                           ; Switch size 1, requested type "space"
 17877                           ; Number of cases is 4, Range of values is 243 to 255
 17878                           ; switch strategies available:
 17879                           ; Name         Instructions Cycles
 17880                           ; simple_byte           13     7 (average)
 17881                           ;	Chosen strategy is simple_byte
 17882  002840  5043               	movf	??_updateMenu,w,c
 17883  002842  0AF3               	xorlw	243	; case 243
 17884  002844  B4D8               	btfsc	status,2,c
 17885  002846  D71C               	goto	i2l8420
 17886  002848  0A07               	xorlw	7	; case 244
 17887  00284A  B4D8               	btfsc	status,2,c
 17888  00284C  D739               	goto	i2l8436
 17889  00284E  0A0A               	xorlw	10	; case 254
 17890  002850  B4D8               	btfsc	status,2,c
 17891  002852  D756               	goto	i2l8452
 17892  002854  0A01               	xorlw	1	; case 255
 17893  002856  B4D8               	btfsc	status,2,c
 17894  002858  D773               	goto	i2l8468
 17895  00285A  D007               	goto	i2l257
 17896  00285C                     i2l9174:
 17897                           
 17898                           ; Switch size 1, requested type "space"
 17899                           ; Number of cases is 2, Range of values is 9 to 10
 17900                           ; switch strategies available:
 17901                           ; Name         Instructions Cycles
 17902                           ; simple_byte            7     4 (average)
 17903                           ;	Chosen strategy is simple_byte
 17904  00285C  5043               	movf	??_updateMenu,w,c
 17905  00285E  0A09               	xorlw	9	; case 9
 17906  002860  B4D8               	btfsc	status,2,c
 17907  002862  D78E               	goto	i2l8484
 17908  002864  0A03               	xorlw	3	; case 10
 17909  002866  B4D8               	btfsc	status,2,c
 17910  002868  D7AB               	goto	i2l8500
 17911  00286A                     i2l257:
 17912                           
 17913                           ;UI.c: 368: }
 17914                           ;UI.c: 369: (INTCONbits.GIE = 1);
 17915  00286A  8EF2               	bsf	intcon,7,c	;volatile
 17916  00286C  0012               	return		;funcret
 17917  00286E                     __end_of_updateMenu:
 17918                           	opt stack 0
 17919                           pclatu	equ	0xFFB
 17920                           pclath	equ	0xFFA
 17921                           tblptru	equ	0xFF8
 17922                           tblptrh	equ	0xFF7
 17923                           tblptrl	equ	0xFF6
 17924                           tablat	equ	0xFF5
 17925                           prodh	equ	0xFF4
 17926                           prodl	equ	0xFF3
 17927                           intcon	equ	0xFF2
 17928                           intcon2	equ	0xFF1
 17929                           intcon3	equ	0xFF0
 17930                           indf0	equ	0xFEF
 17931                           postinc0	equ	0xFEE
 17932                           fsr0h	equ	0xFEA
 17933                           fsr0l	equ	0xFE9
 17934                           wreg	equ	0xFE8
 17935                           postdec1	equ	0xFE5
 17936                           fsr1h	equ	0xFE2
 17937                           fsr1l	equ	0xFE1
 17938                           indf2	equ	0xFDF
 17939                           postinc2	equ	0xFDE
 17940                           postdec2	equ	0xFDD
 17941                           fsr2h	equ	0xFDA
 17942                           fsr2l	equ	0xFD9
 17943                           status	equ	0xFD8
 17944                           
 17945 ;; *************** function i2_change_state_to_menu_start *****************
 17946 ;; Defined at:
 17947 ;;		line 474 in file "UI.c"
 17948 ;; Parameters:    Size  Location     Type
 17949 ;;		None
 17950 ;; Auto vars:     Size  Location     Type
 17951 ;;		None
 17952 ;; Return value:  Size  Location     Type
 17953 ;;                  1    wreg      void 
 17954 ;; Registers used:
 17955 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17956 ;; Tracked objects:
 17957 ;;		On entry : 0/0
 17958 ;;		On exit  : 0/0
 17959 ;;		Unchanged: 0/0
 17960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17964 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17965 ;;Total ram usage:        0 bytes
 17966 ;; Hardware stack levels used:    1
 17967 ;; Hardware stack levels required when called:    4
 17968 ;; This function calls:
 17969 ;;		i2_lcdInst
 17970 ;;		i2_printRTC
 17971 ;;		i2_printf
 17972 ;; This function is called by:
 17973 ;;		_updateMenu
 17974 ;; This function uses a non-reentrant model
 17975 ;;
 17976                           
 17977                           	psect	text61
 17978  004D64                     __ptext61:
 17979                           	opt stack 0
 17980  004D64                     i2_change_state_to_menu_start:
 17981                           	opt stack 18
 17982                           
 17983                           ;UI.c: 475: cur_state = 0;
 17984                           
 17985                           ;incstack = 0
 17986  004D64  0E00               	movlw	0
 17987  004D66  0100               	movlb	0	; () banked
 17988  004D68  6FE7               	movwf	(_cur_state+1)& (0+255),b
 17989  004D6A  0E00               	movlw	0
 17990  004D6C  6FE6               	movwf	_cur_state& (0+255),b
 17991                           
 17992                           ; BSR set to: 0
 17993                           ;UI.c: 477: lcdInst(0b10000000);;
 17994  004D6E  0E80               	movlw	128
 17995  004D70  EC7C  F027         	call	i2_lcdInst
 17996                           
 17997                           ;UI.c: 478: printRTC();
 17998  004D74  EC5B  F015         	call	i2_printRTC	;wreg free
 17999                           
 18000                           ;UI.c: 479: lcdInst(0b11000000);;
 18001  004D78  0EC0               	movlw	192
 18002  004D7A  EC7C  F027         	call	i2_lcdInst
 18003                           
 18004                           ;UI.c: 480: printf("PUSH TO CONTINUE");
 18005  004D7E  0EF7               	movlw	low STR_30
 18006  004D80  6E0D               	movwf	i2printf@f,c
 18007  004D82  0EFD               	movlw	high STR_30
 18008  004D84  6E0E               	movwf	i2printf@f+1,c
 18009  004D86  EC96  F00C         	call	i2_printf	;wreg free
 18010  004D8A  0012               	return		;funcret
 18011  004D8C                     __end_ofi2_change_state_to_menu_start:
 18012                           	opt stack 0
 18013                           pclatu	equ	0xFFB
 18014                           pclath	equ	0xFFA
 18015                           tblptru	equ	0xFF8
 18016                           tblptrh	equ	0xFF7
 18017                           tblptrl	equ	0xFF6
 18018                           tablat	equ	0xFF5
 18019                           prodh	equ	0xFF4
 18020                           prodl	equ	0xFF3
 18021                           intcon	equ	0xFF2
 18022                           intcon2	equ	0xFF1
 18023                           intcon3	equ	0xFF0
 18024                           indf0	equ	0xFEF
 18025                           postinc0	equ	0xFEE
 18026                           fsr0h	equ	0xFEA
 18027                           fsr0l	equ	0xFE9
 18028                           wreg	equ	0xFE8
 18029                           postdec1	equ	0xFE5
 18030                           fsr1h	equ	0xFE2
 18031                           fsr1l	equ	0xFE1
 18032                           indf2	equ	0xFDF
 18033                           postinc2	equ	0xFDE
 18034                           postdec2	equ	0xFDD
 18035                           fsr2h	equ	0xFDA
 18036                           fsr2l	equ	0xFD9
 18037                           status	equ	0xFD8
 18038                           
 18039 ;; *************** function i2_printRTC *****************
 18040 ;; Defined at:
 18041 ;;		line 63 in file "RTC.c"
 18042 ;; Parameters:    Size  Location     Type
 18043 ;;		None
 18044 ;; Auto vars:     Size  Location     Type
 18045 ;;  printRTC       14   44[COMRAM] int [7]
 18046 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 18047 ;;  printRTC        2   64[COMRAM] int 
 18048 ;;  printRTC        2   58[COMRAM] int 
 18049 ;; Return value:  Size  Location     Type
 18050 ;;                  1    wreg      void 
 18051 ;; Registers used:
 18052 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18053 ;; Tracked objects:
 18054 ;;		On entry : 0/0
 18055 ;;		On exit  : 0/0
 18056 ;;		Unchanged: 0/0
 18057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18059 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18060 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18061 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18062 ;;Total ram usage:       25 bytes
 18063 ;; Hardware stack levels used:    1
 18064 ;; Hardware stack levels required when called:    3
 18065 ;; This function calls:
 18066 ;;		i2_getRTC
 18067 ;;		i2_lcdInst
 18068 ;;		i2_printf
 18069 ;;		i2_strcpy
 18070 ;; This function is called by:
 18071 ;;		i2_change_state_to_menu_start
 18072 ;; This function uses a non-reentrant model
 18073 ;;
 18074                           
 18075                           	psect	text62
 18076  002AB6                     __ptext62:
 18077                           	opt stack 0
 18078  002AB6                     i2_printRTC:
 18079                           	opt stack 18
 18080                           
 18081                           ;RTC.c: 64: getRTC();
 18082                           
 18083                           ;incstack = 0
 18084  002AB6  EC3E  F022         	call	i2_getRTC	;wreg free
 18085                           
 18086                           ;RTC.c: 65: char month[] = "MMM";
 18087  002ABA  C139  F03D         	movff	printRTC@F3219,i2printRTC@month
 18088  002ABE  C13A  F03E         	movff	printRTC@F3219+1,i2printRTC@month+1
 18089  002AC2  C13B  F03F         	movff	printRTC@F3219+2,i2printRTC@month+2
 18090  002AC6  C13C  F040         	movff	printRTC@F3219+3,i2printRTC@month+3
 18091                           
 18092                           ;RTC.c: 66: int INT_time[7];
 18093                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 18094  002ACA  0E00               	movlw	0
 18095  002ACC  6E42               	movwf	i2printRTC@i+1,c
 18096  002ACE  0E00               	movlw	0
 18097  002AD0  6E41               	movwf	i2printRTC@i,c
 18098  002AD2  BE42               	btfsc	i2printRTC@i+1,7,c
 18099  002AD4  D006               	goto	i2l6544
 18100  002AD6  5042               	movf	i2printRTC@i+1,w,c
 18101  002AD8  E135               	bnz	i2l606
 18102  002ADA  0E07               	movlw	7
 18103  002ADC  5C41               	subwf	i2printRTC@i,w,c
 18104  002ADE  B0D8               	btfsc	status,0,c
 18105  002AE0  D031               	goto	i2l606
 18106  002AE2                     i2l6544:
 18107                           
 18108                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 18109  002AE2  0E24               	movlw	low _time
 18110  002AE4  2441               	addwf	i2printRTC@i,w,c
 18111  002AE6  6ED9               	movwf	fsr2l,c
 18112  002AE8  0E01               	movlw	high _time
 18113  002AEA  2042               	addwfc	i2printRTC@i+1,w,c
 18114  002AEC  6EDA               	movwf	fsr2h,c
 18115  002AEE  50DF               	movf	indf2,w,c
 18116  002AF0  6E2A               	movwf	??i2_printRTC& (0+255),c
 18117  002AF2  3A2A               	swapf	??i2_printRTC,f,c
 18118  002AF4  0E0F               	movlw	15
 18119  002AF6  162A               	andwf	??i2_printRTC,f,c
 18120  002AF8  0E0F               	movlw	15
 18121  002AFA  162A               	andwf	??i2_printRTC,f,c
 18122  002AFC  502A               	movf	??i2_printRTC,w,c
 18123  002AFE  0D0A               	mullw	10
 18124  002B00  0E24               	movlw	low _time
 18125  002B02  2441               	addwf	i2printRTC@i,w,c
 18126  002B04  6ED9               	movwf	fsr2l,c
 18127  002B06  0E01               	movlw	high _time
 18128  002B08  2042               	addwfc	i2printRTC@i+1,w,c
 18129  002B0A  6EDA               	movwf	fsr2h,c
 18130  002B0C  50DF               	movf	indf2,w,c
 18131  002B0E  0B0F               	andlw	15
 18132  002B10  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 18133  002B12  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 18134  002B14  50F3               	movf	prodl,w,c
 18135  002B16  262B               	addwf	??i2_printRTC+1,f,c
 18136  002B18  50F4               	movf	prodh,w,c
 18137  002B1A  222C               	addwfc	??i2_printRTC+2,f,c
 18138  002B1C  90D8               	bcf	status,0,c
 18139  002B1E  3441               	rlcf	i2printRTC@i,w,c
 18140  002B20  6ED9               	movwf	fsr2l,c
 18141  002B22  3442               	rlcf	i2printRTC@i+1,w,c
 18142  002B24  6EDA               	movwf	fsr2h,c
 18143  002B26  0E2D               	movlw	low i2printRTC@INT_time
 18144  002B28  26D9               	addwf	fsr2l,f,c
 18145  002B2A  0E00               	movlw	high i2printRTC@INT_time
 18146  002B2C  22DA               	addwfc	fsr2h,f,c
 18147  002B2E  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 18148  002B32  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 18149  002B36  4A41               	infsnz	i2printRTC@i,f,c
 18150  002B38  2A42               	incf	i2printRTC@i+1,f,c
 18151  002B3A  BE42               	btfsc	i2printRTC@i+1,7,c
 18152  002B3C  D7D2               	goto	i2l6544
 18153  002B3E  5042               	movf	i2printRTC@i+1,w,c
 18154  002B40  E101               	bnz	i2u521_40
 18155  002B42  D7CB               	goto	L11
 18156  002B44                     i2u521_40:
 18157  002B44                     i2l606:
 18158                           
 18159                           ;RTC.c: 69: }
 18160                           ;RTC.c: 70: int RTC_month = INT_time[5];
 18161  002B44  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 18162  002B48  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 18163                           
 18164                           ;RTC.c: 71: switch(RTC_month){
 18165  002B4C  D084               	goto	i2l6576
 18166  002B4E                     i2l6550:
 18167                           
 18168                           ;RTC.c: 73: strcpy(month, "JAN");
 18169  002B4E  0E3D               	movlw	low i2printRTC@month
 18170  002B50  6E01               	movwf	i2strcpy@to,c
 18171  002B52  0E00               	movlw	high i2printRTC@month
 18172  002B54  6E02               	movwf	i2strcpy@to+1,c
 18173  002B56  0EDB               	movlw	low STR_8
 18174  002B58  6E03               	movwf	i2strcpy@from,c
 18175  002B5A  0EFF               	movlw	high STR_8
 18176  002B5C  6E04               	movwf	i2strcpy@from+1,c
 18177  002B5E  EC27  F025         	call	i2_strcpy	;wreg free
 18178                           
 18179                           ;RTC.c: 74: break;
 18180  002B62  D0A6               	goto	i2l6578
 18181  002B64                     i2l6552:
 18182                           
 18183                           ;RTC.c: 76: strcpy(month, "FEB");
 18184  002B64  0E3D               	movlw	low i2printRTC@month
 18185  002B66  6E01               	movwf	i2strcpy@to,c
 18186  002B68  0E00               	movlw	high i2printRTC@month
 18187  002B6A  6E02               	movwf	i2strcpy@to+1,c
 18188  002B6C  0ECB               	movlw	low STR_9
 18189  002B6E  6E03               	movwf	i2strcpy@from,c
 18190  002B70  0EFF               	movlw	high STR_9
 18191  002B72  6E04               	movwf	i2strcpy@from+1,c
 18192  002B74  EC27  F025         	call	i2_strcpy	;wreg free
 18193                           
 18194                           ;RTC.c: 77: break;
 18195  002B78  D09B               	goto	i2l6578
 18196  002B7A                     i2l6554:
 18197                           
 18198                           ;RTC.c: 79: strcpy(month, "MAR");
 18199  002B7A  0E3D               	movlw	low i2printRTC@month
 18200  002B7C  6E01               	movwf	i2strcpy@to,c
 18201  002B7E  0E00               	movlw	high i2printRTC@month
 18202  002B80  6E02               	movwf	i2strcpy@to+1,c
 18203  002B82  0EE7               	movlw	low STR_10
 18204  002B84  6E03               	movwf	i2strcpy@from,c
 18205  002B86  0EFF               	movlw	high STR_10
 18206  002B88  6E04               	movwf	i2strcpy@from+1,c
 18207  002B8A  EC27  F025         	call	i2_strcpy	;wreg free
 18208                           
 18209                           ;RTC.c: 80: break;
 18210  002B8E  D090               	goto	i2l6578
 18211  002B90                     i2l6556:
 18212                           
 18213                           ;RTC.c: 82: strcpy(month, "APR");
 18214  002B90  0E3D               	movlw	low i2printRTC@month
 18215  002B92  6E01               	movwf	i2strcpy@to,c
 18216  002B94  0E00               	movlw	high i2printRTC@month
 18217  002B96  6E02               	movwf	i2strcpy@to+1,c
 18218  002B98  0EEB               	movlw	low STR_11
 18219  002B9A  6E03               	movwf	i2strcpy@from,c
 18220  002B9C  0EFF               	movlw	high STR_11
 18221  002B9E  6E04               	movwf	i2strcpy@from+1,c
 18222  002BA0  EC27  F025         	call	i2_strcpy	;wreg free
 18223                           
 18224                           ;RTC.c: 83: break;
 18225  002BA4  D085               	goto	i2l6578
 18226  002BA6                     i2l6558:
 18227                           
 18228                           ;RTC.c: 85: strcpy(month, "MAY");
 18229  002BA6  0E3D               	movlw	low i2printRTC@month
 18230  002BA8  6E01               	movwf	i2strcpy@to,c
 18231  002BAA  0E00               	movlw	high i2printRTC@month
 18232  002BAC  6E02               	movwf	i2strcpy@to+1,c
 18233  002BAE  0EFB               	movlw	low STR_12
 18234  002BB0  6E03               	movwf	i2strcpy@from,c
 18235  002BB2  0EFF               	movlw	high STR_12
 18236  002BB4  6E04               	movwf	i2strcpy@from+1,c
 18237  002BB6  EC27  F025         	call	i2_strcpy	;wreg free
 18238                           
 18239                           ;RTC.c: 86: break;
 18240  002BBA  D07A               	goto	i2l6578
 18241  002BBC                     i2l6560:
 18242                           
 18243                           ;RTC.c: 88: strcpy(month, "JUN");
 18244  002BBC  0E3D               	movlw	low i2printRTC@month
 18245  002BBE  6E01               	movwf	i2strcpy@to,c
 18246  002BC0  0E00               	movlw	high i2printRTC@month
 18247  002BC2  6E02               	movwf	i2strcpy@to+1,c
 18248  002BC4  0EDF               	movlw	low STR_13
 18249  002BC6  6E03               	movwf	i2strcpy@from,c
 18250  002BC8  0EFF               	movlw	high STR_13
 18251  002BCA  6E04               	movwf	i2strcpy@from+1,c
 18252  002BCC  EC27  F025         	call	i2_strcpy	;wreg free
 18253                           
 18254                           ;RTC.c: 89: break;
 18255  002BD0  D06F               	goto	i2l6578
 18256  002BD2                     i2l6562:
 18257                           
 18258                           ;RTC.c: 91: strcpy(month, "JUL");
 18259  002BD2  0E3D               	movlw	low i2printRTC@month
 18260  002BD4  6E01               	movwf	i2strcpy@to,c
 18261  002BD6  0E00               	movlw	high i2printRTC@month
 18262  002BD8  6E02               	movwf	i2strcpy@to+1,c
 18263  002BDA  0ED7               	movlw	low STR_14
 18264  002BDC  6E03               	movwf	i2strcpy@from,c
 18265  002BDE  0EFF               	movlw	high STR_14
 18266  002BE0  6E04               	movwf	i2strcpy@from+1,c
 18267  002BE2  EC27  F025         	call	i2_strcpy	;wreg free
 18268                           
 18269                           ;RTC.c: 92: break;
 18270  002BE6  D064               	goto	i2l6578
 18271  002BE8                     i2l6564:
 18272                           
 18273                           ;RTC.c: 94: strcpy(month, "AUG");
 18274  002BE8  0E3D               	movlw	low i2printRTC@month
 18275  002BEA  6E01               	movwf	i2strcpy@to,c
 18276  002BEC  0E00               	movlw	high i2printRTC@month
 18277  002BEE  6E02               	movwf	i2strcpy@to+1,c
 18278  002BF0  0ED3               	movlw	low STR_15
 18279  002BF2  6E03               	movwf	i2strcpy@from,c
 18280  002BF4  0EFF               	movlw	high STR_15
 18281  002BF6  6E04               	movwf	i2strcpy@from+1,c
 18282  002BF8  EC27  F025         	call	i2_strcpy	;wreg free
 18283                           
 18284                           ;RTC.c: 95: break;
 18285  002BFC  D059               	goto	i2l6578
 18286  002BFE                     i2l6566:
 18287                           
 18288                           ;RTC.c: 97: strcpy(month, "SEP");
 18289  002BFE  0E3D               	movlw	low i2printRTC@month
 18290  002C00  6E01               	movwf	i2strcpy@to,c
 18291  002C02  0E00               	movlw	high i2printRTC@month
 18292  002C04  6E02               	movwf	i2strcpy@to+1,c
 18293  002C06  0EE3               	movlw	low STR_16
 18294  002C08  6E03               	movwf	i2strcpy@from,c
 18295  002C0A  0EFF               	movlw	high STR_16
 18296  002C0C  6E04               	movwf	i2strcpy@from+1,c
 18297  002C0E  EC27  F025         	call	i2_strcpy	;wreg free
 18298                           
 18299                           ;RTC.c: 98: break;
 18300  002C12  D04E               	goto	i2l6578
 18301  002C14                     i2l6568:
 18302                           
 18303                           ;RTC.c: 100: strcpy(month, "OCT");
 18304  002C14  0E3D               	movlw	low i2printRTC@month
 18305  002C16  6E01               	movwf	i2strcpy@to,c
 18306  002C18  0E00               	movlw	high i2printRTC@month
 18307  002C1A  6E02               	movwf	i2strcpy@to+1,c
 18308  002C1C  0EF3               	movlw	low STR_17
 18309  002C1E  6E03               	movwf	i2strcpy@from,c
 18310  002C20  0EFF               	movlw	high STR_17
 18311  002C22  6E04               	movwf	i2strcpy@from+1,c
 18312  002C24  EC27  F025         	call	i2_strcpy	;wreg free
 18313                           
 18314                           ;RTC.c: 101: break;
 18315  002C28  D043               	goto	i2l6578
 18316  002C2A                     i2l6570:
 18317                           
 18318                           ;RTC.c: 103: strcpy(month, "NOV");
 18319  002C2A  0E3D               	movlw	low i2printRTC@month
 18320  002C2C  6E01               	movwf	i2strcpy@to,c
 18321  002C2E  0E00               	movlw	high i2printRTC@month
 18322  002C30  6E02               	movwf	i2strcpy@to+1,c
 18323  002C32  0EF7               	movlw	low STR_18
 18324  002C34  6E03               	movwf	i2strcpy@from,c
 18325  002C36  0EFF               	movlw	high STR_18
 18326  002C38  6E04               	movwf	i2strcpy@from+1,c
 18327  002C3A  EC27  F025         	call	i2_strcpy	;wreg free
 18328                           
 18329                           ;RTC.c: 104: break;
 18330  002C3E  D038               	goto	i2l6578
 18331  002C40                     i2l6572:
 18332                           
 18333                           ;RTC.c: 106: strcpy(month, "DEC");
 18334  002C40  0E3D               	movlw	low i2printRTC@month
 18335  002C42  6E01               	movwf	i2strcpy@to,c
 18336  002C44  0E00               	movlw	high i2printRTC@month
 18337  002C46  6E02               	movwf	i2strcpy@to+1,c
 18338  002C48  0ECF               	movlw	low STR_19
 18339  002C4A  6E03               	movwf	i2strcpy@from,c
 18340  002C4C  0EFF               	movlw	high STR_19
 18341  002C4E  6E04               	movwf	i2strcpy@from+1,c
 18342  002C50  EC27  F025         	call	i2_strcpy	;wreg free
 18343                           
 18344                           ;RTC.c: 108: }
 18345                           
 18346                           ;RTC.c: 107: break;
 18347  002C54  D02D               	goto	i2l6578
 18348  002C56                     i2l6576:
 18349  002C56  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 18350  002C5A  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 18351                           
 18352                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18353                           ; Switch size 1, requested type "space"
 18354                           ; Number of cases is 1, Range of values is 0 to 0
 18355                           ; switch strategies available:
 18356                           ; Name         Instructions Cycles
 18357                           ; simple_byte            4     3 (average)
 18358                           ;	Chosen strategy is simple_byte
 18359  002C5E  502B               	movf	??i2_printRTC+1,w,c
 18360  002C60  0A00               	xorlw	0	; case 0
 18361  002C62  A4D8               	btfss	status,2,c
 18362  002C64  D025               	goto	i2l6578
 18363                           
 18364                           ; Switch size 1, requested type "space"
 18365                           ; Number of cases is 12, Range of values is 1 to 12
 18366                           ; switch strategies available:
 18367                           ; Name         Instructions Cycles
 18368                           ; simple_byte           37    19 (average)
 18369                           ;	Chosen strategy is simple_byte
 18370  002C66  502A               	movf	??i2_printRTC,w,c
 18371  002C68  0A01               	xorlw	1	; case 1
 18372  002C6A  B4D8               	btfsc	status,2,c
 18373  002C6C  D770               	goto	i2l6550
 18374  002C6E  0A03               	xorlw	3	; case 2
 18375  002C70  B4D8               	btfsc	status,2,c
 18376  002C72  D778               	goto	i2l6552
 18377  002C74  0A01               	xorlw	1	; case 3
 18378  002C76  B4D8               	btfsc	status,2,c
 18379  002C78  D780               	goto	i2l6554
 18380  002C7A  0A07               	xorlw	7	; case 4
 18381  002C7C  B4D8               	btfsc	status,2,c
 18382  002C7E  D788               	goto	i2l6556
 18383  002C80  0A01               	xorlw	1	; case 5
 18384  002C82  B4D8               	btfsc	status,2,c
 18385  002C84  D790               	goto	i2l6558
 18386  002C86  0A03               	xorlw	3	; case 6
 18387  002C88  B4D8               	btfsc	status,2,c
 18388  002C8A  D798               	goto	i2l6560
 18389  002C8C  0A01               	xorlw	1	; case 7
 18390  002C8E  B4D8               	btfsc	status,2,c
 18391  002C90  D7A0               	goto	i2l6562
 18392  002C92  0A0F               	xorlw	15	; case 8
 18393  002C94  B4D8               	btfsc	status,2,c
 18394  002C96  D7A8               	goto	i2l6564
 18395  002C98  0A01               	xorlw	1	; case 9
 18396  002C9A  B4D8               	btfsc	status,2,c
 18397  002C9C  D7B0               	goto	i2l6566
 18398  002C9E  0A03               	xorlw	3	; case 10
 18399  002CA0  B4D8               	btfsc	status,2,c
 18400  002CA2  D7B8               	goto	i2l6568
 18401  002CA4  0A01               	xorlw	1	; case 11
 18402  002CA6  B4D8               	btfsc	status,2,c
 18403  002CA8  D7C0               	goto	i2l6570
 18404  002CAA  0A07               	xorlw	7	; case 12
 18405  002CAC  B4D8               	btfsc	status,2,c
 18406  002CAE  D7C8               	goto	i2l6572
 18407  002CB0                     i2l6578:
 18408                           
 18409                           ;RTC.c: 109: lcdInst(0b10000000);;
 18410  002CB0  0E80               	movlw	128
 18411  002CB2  EC7C  F027         	call	i2_lcdInst
 18412                           
 18413                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 18414  002CB6  0E0A               	movlw	low STR_21
 18415  002CB8  6E0D               	movwf	i2printf@f,c
 18416  002CBA  0EFB               	movlw	high STR_21
 18417  002CBC  6E0E               	movwf	i2printf@f+1,c
 18418  002CBE  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 18419  002CC2  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 18420  002CC6  0E3D               	movlw	low i2printRTC@month
 18421  002CC8  6E11               	movwf	?i2_printf+4,c
 18422  002CCA  0E00               	movlw	high i2printRTC@month
 18423  002CCC  6E12               	movwf	?i2_printf+5,c
 18424  002CCE  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 18425  002CD2  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 18426  002CD6  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 18427  002CDA  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 18428  002CDE  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 18429  002CE2  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 18430  002CE6  EC96  F00C         	call	i2_printf	;wreg free
 18431  002CEA  0012               	return		;funcret
 18432  002CEC                     __end_ofi2_printRTC:
 18433                           	opt stack 0
 18434                           pclatu	equ	0xFFB
 18435                           pclath	equ	0xFFA
 18436                           tblptru	equ	0xFF8
 18437                           tblptrh	equ	0xFF7
 18438                           tblptrl	equ	0xFF6
 18439                           tablat	equ	0xFF5
 18440                           prodh	equ	0xFF4
 18441                           prodl	equ	0xFF3
 18442                           intcon	equ	0xFF2
 18443                           intcon2	equ	0xFF1
 18444                           intcon3	equ	0xFF0
 18445                           indf0	equ	0xFEF
 18446                           postinc0	equ	0xFEE
 18447                           fsr0h	equ	0xFEA
 18448                           fsr0l	equ	0xFE9
 18449                           wreg	equ	0xFE8
 18450                           postdec1	equ	0xFE5
 18451                           fsr1h	equ	0xFE2
 18452                           fsr1l	equ	0xFE1
 18453                           indf2	equ	0xFDF
 18454                           postinc2	equ	0xFDE
 18455                           postdec2	equ	0xFDD
 18456                           fsr2h	equ	0xFDA
 18457                           fsr2l	equ	0xFD9
 18458                           status	equ	0xFD8
 18459                           
 18460 ;; *************** function i2_strcpy *****************
 18461 ;; Defined at:
 18462 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 18463 ;; Parameters:    Size  Location     Type
 18464 ;;  to              2    0[COMRAM] PTR unsigned char 
 18465 ;;		 -> printRTC@month(4), UI@month(4), 
 18466 ;;  from            2    2[COMRAM] PTR const unsigned char 
 18467 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 18468 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 18469 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 18470 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 18471 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 18472 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 18473 ;;		 -> STR_8(4), 
 18474 ;; Auto vars:     Size  Location     Type
 18475 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 18476 ;;		 -> printRTC@month(4), UI@month(4), 
 18477 ;; Return value:  Size  Location     Type
 18478 ;;                  2    0[COMRAM] PTR unsigned char 
 18479 ;; Registers used:
 18480 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 18481 ;; Tracked objects:
 18482 ;;		On entry : 0/0
 18483 ;;		On exit  : 0/0
 18484 ;;		Unchanged: 0/0
 18485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18486 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18487 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18489 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18490 ;;Total ram usage:        6 bytes
 18491 ;; Hardware stack levels used:    1
 18492 ;; This function calls:
 18493 ;;		Nothing
 18494 ;; This function is called by:
 18495 ;;		i2_printRTC
 18496 ;; This function uses a non-reentrant model
 18497 ;;
 18498                           
 18499                           	psect	text63
 18500  004A4E                     __ptext63:
 18501                           	opt stack 0
 18502  004A4E                     i2_strcpy:
 18503                           	opt stack 20
 18504                           
 18505                           ;incstack = 0
 18506  004A4E  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 18507  004A52  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 18508  004A56  D004               	goto	i2l6202
 18509  004A58                     i2l6200:
 18510  004A58  4A05               	infsnz	i2strcpy@cp,f,c
 18511  004A5A  2A06               	incf	i2strcpy@cp+1,f,c
 18512  004A5C  4A03               	infsnz	i2strcpy@from,f,c
 18513  004A5E  2A04               	incf	i2strcpy@from+1,f,c
 18514  004A60                     i2l6202:
 18515  004A60  C003  FFF6         	movff	i2strcpy@from,tblptrl
 18516  004A64  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 18517  004A68                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18518  004A68  6AF8               	clrf	tblptru,c
 18519  004A6A                     	endif
 18520  004A6A                     	if	0	;tblptru may be non-zero
 18521  004A6A                     	endif
 18522  004A6A  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 18523  004A6E  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 18524  004A72  0008               	tblrd		*
 18525  004A74  CFF5 FFDF          	movff	tablat,indf2
 18526  004A78  50DF               	movf	indf2,w,c
 18527  004A7A  B4D8               	btfsc	status,2,c
 18528  004A7C  0012               	return	
 18529  004A7E  D7EC               	goto	i2l6200
 18530  004A80                     __end_ofi2_strcpy:
 18531                           	opt stack 0
 18532                           pclatu	equ	0xFFB
 18533                           pclath	equ	0xFFA
 18534                           tblptru	equ	0xFF8
 18535                           tblptrh	equ	0xFF7
 18536                           tblptrl	equ	0xFF6
 18537                           tablat	equ	0xFF5
 18538                           prodh	equ	0xFF4
 18539                           prodl	equ	0xFF3
 18540                           intcon	equ	0xFF2
 18541                           intcon2	equ	0xFF1
 18542                           intcon3	equ	0xFF0
 18543                           indf0	equ	0xFEF
 18544                           postinc0	equ	0xFEE
 18545                           fsr0h	equ	0xFEA
 18546                           fsr0l	equ	0xFE9
 18547                           wreg	equ	0xFE8
 18548                           postdec1	equ	0xFE5
 18549                           fsr1h	equ	0xFE2
 18550                           fsr1l	equ	0xFE1
 18551                           indf2	equ	0xFDF
 18552                           postinc2	equ	0xFDE
 18553                           postdec2	equ	0xFDD
 18554                           fsr2h	equ	0xFDA
 18555                           fsr2l	equ	0xFD9
 18556                           status	equ	0xFD8
 18557                           
 18558 ;; *************** function _inputHandler *****************
 18559 ;; Defined at:
 18560 ;;		line 372 in file "UI.c"
 18561 ;; Parameters:    Size  Location     Type
 18562 ;;		None
 18563 ;; Auto vars:     Size  Location     Type
 18564 ;;		None
 18565 ;; Return value:  Size  Location     Type
 18566 ;;                  2   41[COMRAM] int 
 18567 ;; Registers used:
 18568 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18569 ;; Tracked objects:
 18570 ;;		On entry : 0/0
 18571 ;;		On exit  : 0/0
 18572 ;;		Unchanged: 0/0
 18573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18574 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18576 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18577 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18578 ;;Total ram usage:        4 bytes
 18579 ;; Hardware stack levels used:    1
 18580 ;; Hardware stack levels required when called:    4
 18581 ;; This function calls:
 18582 ;;		_change_state_to_logs_11
 18583 ;;		_change_state_to_logs_12
 18584 ;;		_change_state_to_logs_22
 18585 ;;		_change_state_to_logs_23
 18586 ;;		_change_state_to_logs_33
 18587 ;;		_change_state_to_logs_34
 18588 ;;		_change_state_to_menu_11
 18589 ;;		_change_state_to_menu_23
 18590 ;;		i2_change_state_to_menu_12
 18591 ;;		i2_change_state_to_menu_22
 18592 ;; This function is called by:
 18593 ;;		_updateMenu
 18594 ;; This function uses a non-reentrant model
 18595 ;;
 18596                           
 18597                           	psect	text64
 18598  00311A                     __ptext64:
 18599                           	opt stack 0
 18600  00311A                     _inputHandler:
 18601                           	opt stack 18
 18602                           
 18603                           ;UI.c: 377: if(firstboot){
 18604                           
 18605                           ;incstack = 0
 18606  00311A  506F               	movf	_firstboot,w,c
 18607  00311C  1070               	iorwf	_firstboot+1,w,c
 18608  00311E  B4D8               	btfsc	status,2,c
 18609  003120  D00B               	goto	i2l6646
 18610                           
 18611                           ;UI.c: 378: change_state_to_menu_11();
 18612  003122  EC88  F025         	call	_change_state_to_menu_11	;wreg free
 18613                           
 18614                           ;UI.c: 379: firstboot = 0;
 18615  003126  0E00               	movlw	0
 18616  003128  6E70               	movwf	_firstboot+1,c
 18617  00312A  0E00               	movlw	0
 18618  00312C  6E6F               	movwf	_firstboot,c
 18619                           
 18620                           ;UI.c: 380: return 0;
 18621  00312E  0E00               	movlw	0
 18622  003130  6E2B               	movwf	?_inputHandler+1,c
 18623  003132  0E00               	movlw	0
 18624  003134  6E2A               	movwf	?_inputHandler,c
 18625  003136  0012               	return	
 18626  003138                     i2l6646:
 18627                           
 18628                           ;UI.c: 381: }
 18629                           ;UI.c: 382: if (logstate){
 18630  003138  0100               	movlb	0	; () banked
 18631  00313A  51F6               	movf	_logstate& (0+255),w,b
 18632  00313C  0100               	movlb	0	; () banked
 18633  00313E  11F7               	iorwf	(_logstate+1)& (0+255),w,b
 18634  003140  B4D8               	btfsc	status,2,c
 18635  003142  D0C7               	goto	i2l6764
 18636                           
 18637                           ; BSR set to: 0
 18638                           ;UI.c: 383: if(input == 'C' && PORTBbits.RB1 == 1){
 18639  003144  0E43               	movlw	67
 18640  003146  187D               	xorwf	_input,w,c	;volatile
 18641  003148  A4D8               	btfss	status,2,c
 18642  00314A  D012               	goto	i2l6664
 18643                           
 18644                           ; BSR set to: 0
 18645  00314C  B281               	btfsc	3969,1,c	;volatile
 18646  00314E  D009               	goto	i2l6656
 18647  003150  D00F               	goto	i2l6664
 18648  003152                     i2l6654:
 18649                           
 18650                           ;UI.c: 386: _delay((unsigned long)((10)*(32000000/4000.0)));
 18651  003152  0E68               	movlw	104
 18652  003154  6E2C               	movwf	??_inputHandler& (0+255),c
 18653  003156  0EE4               	movlw	228
 18654  003158                     i2u956_47:
 18655  003158  2EE8               	decfsz	wreg,f,c
 18656  00315A  D7FE               	bra	i2u956_47
 18657  00315C  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 18658  00315E  D7FC               	bra	i2u956_47
 18659  003160  D000               	nop2	
 18660  003162                     i2l6656:
 18661  003162  B281               	btfsc	3969,1,c	;volatile
 18662  003164  D7F6               	goto	i2l6654
 18663  003166                     i2l6658:
 18664                           
 18665                           ;UI.c: 387: }
 18666                           ;UI.c: 388: return 0;
 18667  003166  0E00               	movlw	0
 18668  003168  6E2B               	movwf	?_inputHandler+1,c
 18669  00316A  0E00               	movlw	0
 18670  00316C  6E2A               	movwf	?_inputHandler,c
 18671  00316E  0012               	return	
 18672  003170                     i2l6664:
 18673                           
 18674                           ;UI.c: 390: else if (input == 'D'){
 18675  003170  0E44               	movlw	68
 18676  003172  187D               	xorwf	_input,w,c	;volatile
 18677  003174  A4D8               	btfss	status,2,c
 18678  003176  D7F7               	goto	i2l6658
 18679                           
 18680                           ;UI.c: 392: logstate = 0;
 18681  003178  0E00               	movlw	0
 18682  00317A  0100               	movlb	0	; () banked
 18683  00317C  6FF7               	movwf	(_logstate+1)& (0+255),b
 18684  00317E  0E00               	movlw	0
 18685  003180  6FF6               	movwf	_logstate& (0+255),b
 18686                           
 18687                           ;UI.c: 393: switch(cur_state){
 18688  003182  D012               	goto	i2l6682
 18689  003184                     i2l6668:
 18690                           
 18691                           ;UI.c: 395: change_state_to_logs_11();
 18692  003184  EC00  F026         	call	_change_state_to_logs_11	;wreg free
 18693                           
 18694                           ;UI.c: 396: break;
 18695  003188  D7EE               	goto	i2l6658
 18696  00318A                     i2l6670:
 18697                           
 18698                           ;UI.c: 398: change_state_to_logs_12();
 18699  00318A  ECE8  F025         	call	_change_state_to_logs_12	;wreg free
 18700                           
 18701                           ;UI.c: 399: break;
 18702  00318E  D7EB               	goto	i2l6658
 18703  003190                     i2l6672:
 18704                           
 18705                           ;UI.c: 401: change_state_to_logs_22();
 18706  003190  ECD0  F025         	call	_change_state_to_logs_22	;wreg free
 18707                           
 18708                           ;UI.c: 402: break;
 18709  003194  D7E8               	goto	i2l6658
 18710  003196                     i2l6674:
 18711                           
 18712                           ;UI.c: 404: change_state_to_logs_23();
 18713  003196  EC46  F026         	call	_change_state_to_logs_23	;wreg free
 18714                           
 18715                           ;UI.c: 405: break;
 18716  00319A  D7E5               	goto	i2l6658
 18717  00319C                     i2l6676:
 18718                           
 18719                           ;UI.c: 407: change_state_to_logs_33();
 18720  00319C  ECB8  F025         	call	_change_state_to_logs_33	;wreg free
 18721                           
 18722                           ;UI.c: 408: break;
 18723  0031A0  D7E2               	goto	i2l6658
 18724  0031A2                     i2l6678:
 18725                           
 18726                           ;UI.c: 410: change_state_to_logs_34();
 18727  0031A2  ECA0  F025         	call	_change_state_to_logs_34	;wreg free
 18728                           
 18729                           ;UI.c: 412: }
 18730                           
 18731                           ;UI.c: 411: break;
 18732  0031A6  D7DF               	goto	i2l6658
 18733  0031A8                     i2l6682:
 18734  0031A8  C0E6  F02C         	movff	_cur_state,??_inputHandler
 18735  0031AC  C0E7  F02D         	movff	_cur_state+1,??_inputHandler+1
 18736                           
 18737                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 18738                           ; Switch size 1, requested type "space"
 18739                           ; Number of cases is 2, Range of values is 3 to 4
 18740                           ; switch strategies available:
 18741                           ; Name         Instructions Cycles
 18742                           ; simple_byte            7     4 (average)
 18743                           ;	Chosen strategy is simple_byte
 18744  0031B0  502D               	movf	??_inputHandler+1,w,c
 18745  0031B2  0A03               	xorlw	3	; case 3
 18746  0031B4  B4D8               	btfsc	status,2,c
 18747  0031B6  D004               	goto	i2l9178
 18748  0031B8  0A07               	xorlw	7	; case 4
 18749  0031BA  B4D8               	btfsc	status,2,c
 18750  0031BC  D00F               	goto	i2l9180
 18751  0031BE  D7D3               	goto	i2l6658
 18752  0031C0                     i2l9178:
 18753                           
 18754                           ; Switch size 1, requested type "space"
 18755                           ; Number of cases is 4, Range of values is 243 to 255
 18756                           ; switch strategies available:
 18757                           ; Name         Instructions Cycles
 18758                           ; simple_byte           13     7 (average)
 18759                           ;	Chosen strategy is simple_byte
 18760  0031C0  502C               	movf	??_inputHandler,w,c
 18761  0031C2  0AF3               	xorlw	243	; case 243
 18762  0031C4  B4D8               	btfsc	status,2,c
 18763  0031C6  D7DE               	goto	i2l6668
 18764  0031C8  0A07               	xorlw	7	; case 244
 18765  0031CA  B4D8               	btfsc	status,2,c
 18766  0031CC  D7DE               	goto	i2l6670
 18767  0031CE  0A0A               	xorlw	10	; case 254
 18768  0031D0  B4D8               	btfsc	status,2,c
 18769  0031D2  D7DE               	goto	i2l6672
 18770  0031D4  0A01               	xorlw	1	; case 255
 18771  0031D6  B4D8               	btfsc	status,2,c
 18772  0031D8  D7DE               	goto	i2l6674
 18773  0031DA  D7C5               	goto	i2l6658
 18774  0031DC                     i2l9180:
 18775                           
 18776                           ; Switch size 1, requested type "space"
 18777                           ; Number of cases is 2, Range of values is 9 to 10
 18778                           ; switch strategies available:
 18779                           ; Name         Instructions Cycles
 18780                           ; simple_byte            7     4 (average)
 18781                           ;	Chosen strategy is simple_byte
 18782  0031DC  502C               	movf	??_inputHandler,w,c
 18783  0031DE  0A09               	xorlw	9	; case 9
 18784  0031E0  B4D8               	btfsc	status,2,c
 18785  0031E2  D7DC               	goto	i2l6676
 18786  0031E4  0A03               	xorlw	3	; case 10
 18787  0031E6  B4D8               	btfsc	status,2,c
 18788  0031E8  D7DC               	goto	i2l6678
 18789  0031EA  D7BD               	goto	i2l6658
 18790  0031EC                     i2l6694:
 18791                           
 18792                           ;UI.c: 422: if(cur_state == 11){
 18793  0031EC  0E0B               	movlw	11
 18794  0031EE  0100               	movlb	0	; () banked
 18795  0031F0  19E6               	xorwf	_cur_state& (0+255),w,b
 18796  0031F2  0100               	movlb	0	; () banked
 18797  0031F4  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 18798  0031F6  A4D8               	btfss	status,2,c
 18799  0031F8  D005               	goto	i2l6702
 18800                           
 18801                           ; BSR set to: 0
 18802                           ;UI.c: 423: return 0;
 18803  0031FA  0E00               	movlw	0
 18804  0031FC  6E2B               	movwf	?_inputHandler+1,c
 18805  0031FE  0E00               	movlw	0
 18806  003200  6E2A               	movwf	?_inputHandler,c
 18807                           
 18808                           ; BSR set to: 0
 18809  003202  0012               	return	
 18810  003204                     i2l6702:
 18811                           
 18812                           ; BSR set to: 0
 18813                           ;UI.c: 425: else{
 18814                           ;UI.c: 426: change_state_to_menu_11();
 18815  003204  EC88  F025         	call	_change_state_to_menu_11	;wreg free
 18816                           
 18817                           ;UI.c: 427: }
 18818                           ;UI.c: 428: return 0;
 18819  003208  0E00               	movlw	0
 18820  00320A  6E2B               	movwf	?_inputHandler+1,c
 18821  00320C  0E00               	movlw	0
 18822  00320E  6E2A               	movwf	?_inputHandler,c
 18823  003210  0012               	return	
 18824  003212                     i2l6708:
 18825                           
 18826                           ;UI.c: 430: if(cur_state == 22 | cur_state == 12){
 18827  003212  0E16               	movlw	22
 18828  003214  0100               	movlb	0	; () banked
 18829  003216  19E6               	xorwf	_cur_state& (0+255),w,b
 18830  003218  0100               	movlb	0	; () banked
 18831  00321A  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 18832  00321C  B4D8               	btfsc	status,2,c
 18833  00321E  D007               	goto	i2l6712
 18834                           
 18835                           ; BSR set to: 0
 18836  003220  0E0C               	movlw	12
 18837  003222  0100               	movlb	0	; () banked
 18838  003224  19E6               	xorwf	_cur_state& (0+255),w,b
 18839  003226  0100               	movlb	0	; () banked
 18840  003228  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 18841  00322A  A4D8               	btfss	status,2,c
 18842  00322C  D005               	goto	i2l6718
 18843  00322E                     i2l6712:
 18844                           
 18845                           ; BSR set to: 0
 18846                           ;UI.c: 431: return 0;
 18847  00322E  0E00               	movlw	0
 18848  003230  6E2B               	movwf	?_inputHandler+1,c
 18849  003232  0E00               	movlw	0
 18850  003234  6E2A               	movwf	?_inputHandler,c
 18851                           
 18852                           ; BSR set to: 0
 18853  003236  0012               	return	
 18854  003238                     i2l6718:
 18855                           
 18856                           ; BSR set to: 0
 18857                           ;UI.c: 433: else if(cur_state == 23){
 18858  003238  0E17               	movlw	23
 18859  00323A  0100               	movlb	0	; () banked
 18860  00323C  19E6               	xorwf	_cur_state& (0+255),w,b
 18861  00323E  0100               	movlb	0	; () banked
 18862  003240  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 18863  003242  A4D8               	btfss	status,2,c
 18864  003244  D003               	goto	i2l6722
 18865                           
 18866                           ; BSR set to: 0
 18867                           ;UI.c: 434: change_state_to_menu_22();
 18868  003246  EC40  F025         	call	i2_change_state_to_menu_22	;wreg free
 18869                           
 18870                           ;UI.c: 435: }
 18871  00324A  D002               	goto	i2l6724
 18872  00324C                     i2l6722:
 18873                           
 18874                           ;UI.c: 436: else{
 18875                           ;UI.c: 437: change_state_to_menu_12();
 18876  00324C  EC58  F025         	call	i2_change_state_to_menu_12	;wreg free
 18877  003250                     i2l6724:
 18878                           
 18879                           ;UI.c: 438: }
 18880                           ;UI.c: 439: return 0;
 18881  003250  0E00               	movlw	0
 18882  003252  6E2B               	movwf	?_inputHandler+1,c
 18883  003254  0E00               	movlw	0
 18884  003256  6E2A               	movwf	?_inputHandler,c
 18885  003258  0012               	return	
 18886  00325A                     i2l6728:
 18887                           
 18888                           ;UI.c: 441: if(cur_state == 23){
 18889  00325A  0E17               	movlw	23
 18890  00325C  0100               	movlb	0	; () banked
 18891  00325E  19E6               	xorwf	_cur_state& (0+255),w,b
 18892  003260  0100               	movlb	0	; () banked
 18893  003262  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 18894  003264  A4D8               	btfss	status,2,c
 18895  003266  D005               	goto	i2l6736
 18896                           
 18897                           ; BSR set to: 0
 18898                           ;UI.c: 442: return 0;
 18899  003268  0E00               	movlw	0
 18900  00326A  6E2B               	movwf	?_inputHandler+1,c
 18901  00326C  0E00               	movlw	0
 18902  00326E  6E2A               	movwf	?_inputHandler,c
 18903                           
 18904                           ; BSR set to: 0
 18905  003270  0012               	return	
 18906  003272                     i2l6736:
 18907                           
 18908                           ; BSR set to: 0
 18909                           ;UI.c: 444: else{
 18910                           ;UI.c: 445: change_state_to_menu_23();
 18911  003272  EC70  F025         	call	_change_state_to_menu_23	;wreg free
 18912                           
 18913                           ;UI.c: 446: }
 18914                           ;UI.c: 447: return 0;
 18915  003276  0E00               	movlw	0
 18916  003278  6E2B               	movwf	?_inputHandler+1,c
 18917  00327A  0E00               	movlw	0
 18918  00327C  6E2A               	movwf	?_inputHandler,c
 18919  00327E  0012               	return	
 18920  003280                     i2l6742:
 18921                           
 18922                           ;UI.c: 450: up = 1;
 18923  003280  0E00               	movlw	0
 18924  003282  6E78               	movwf	_up+1,c
 18925  003284  0E01               	movlw	1
 18926  003286  6E77               	movwf	_up,c
 18927                           
 18928                           ;UI.c: 451: return 1;
 18929  003288  0E00               	movlw	0
 18930  00328A  6E2B               	movwf	?_inputHandler+1,c
 18931  00328C  0E01               	movlw	1
 18932  00328E  6E2A               	movwf	?_inputHandler,c
 18933  003290  0012               	return	
 18934  003292                     i2l6746:
 18935                           
 18936                           ;UI.c: 453: down = 1;
 18937  003292  0E00               	movlw	0
 18938  003294  6E62               	movwf	_down+1,c
 18939  003296  0E01               	movlw	1
 18940  003298  6E61               	movwf	_down,c
 18941                           
 18942                           ;UI.c: 454: return 1;
 18943  00329A  0E00               	movlw	0
 18944  00329C  6E2B               	movwf	?_inputHandler+1,c
 18945  00329E  0E01               	movlw	1
 18946  0032A0  6E2A               	movwf	?_inputHandler,c
 18947  0032A2  0012               	return	
 18948  0032A4                     i2l6750:
 18949                           
 18950                           ;UI.c: 456: enter = 1;
 18951  0032A4  0E00               	movlw	0
 18952  0032A6  6E64               	movwf	_enter+1,c
 18953  0032A8  0E01               	movlw	1
 18954  0032AA  6E63               	movwf	_enter,c
 18955                           
 18956                           ;UI.c: 457: return 1;
 18957  0032AC  0E00               	movlw	0
 18958  0032AE  6E2B               	movwf	?_inputHandler+1,c
 18959  0032B0  0E01               	movlw	1
 18960  0032B2  6E2A               	movwf	?_inputHandler,c
 18961  0032B4  0012               	return	
 18962  0032B6                     i2l6754:
 18963                           
 18964                           ;UI.c: 459: back = 1;
 18965  0032B6  0E00               	movlw	0
 18966  0032B8  6E5A               	movwf	_back+1,c
 18967  0032BA  0E01               	movlw	1
 18968  0032BC  6E59               	movwf	_back,c
 18969                           
 18970                           ;UI.c: 460: return 1;
 18971  0032BE  0E00               	movlw	0
 18972  0032C0  6E2B               	movwf	?_inputHandler+1,c
 18973  0032C2  0E01               	movlw	1
 18974  0032C4  6E2A               	movwf	?_inputHandler,c
 18975  0032C6  0012               	return	
 18976  0032C8                     i2l6758:
 18977                           
 18978                           ;UI.c: 463: return 1;
 18979  0032C8  0E00               	movlw	0
 18980  0032CA  6E2B               	movwf	?_inputHandler+1,c
 18981  0032CC  0E01               	movlw	1
 18982  0032CE  6E2A               	movwf	?_inputHandler,c
 18983                           
 18984                           ;UI.c: 464: }
 18985  0032D0  0012               	return	
 18986  0032D2                     i2l6764:
 18987  0032D2  507D               	movf	_input,w,c	;volatile
 18988                           
 18989                           ; Switch size 1, requested type "space"
 18990                           ; Number of cases is 7, Range of values is 49 to 68
 18991                           ; switch strategies available:
 18992                           ; Name         Instructions Cycles
 18993                           ; simple_byte           22    12 (average)
 18994                           ;	Chosen strategy is simple_byte
 18995  0032D4  0A31               	xorlw	49	; case 49
 18996  0032D6  B4D8               	btfsc	status,2,c
 18997  0032D8  D789               	goto	i2l6694
 18998  0032DA  0A03               	xorlw	3	; case 50
 18999  0032DC  B4D8               	btfsc	status,2,c
 19000  0032DE  D799               	goto	i2l6708
 19001  0032E0  0A01               	xorlw	1	; case 51
 19002  0032E2  B4D8               	btfsc	status,2,c
 19003  0032E4  D7BA               	goto	i2l6728
 19004  0032E6  0A72               	xorlw	114	; case 65
 19005  0032E8  B4D8               	btfsc	status,2,c
 19006  0032EA  D7CA               	goto	i2l6742
 19007  0032EC  0A03               	xorlw	3	; case 66
 19008  0032EE  B4D8               	btfsc	status,2,c
 19009  0032F0  D7D0               	goto	i2l6746
 19010  0032F2  0A01               	xorlw	1	; case 67
 19011  0032F4  B4D8               	btfsc	status,2,c
 19012  0032F6  D7D6               	goto	i2l6750
 19013  0032F8  0A07               	xorlw	7	; case 68
 19014  0032FA  B4D8               	btfsc	status,2,c
 19015  0032FC  D7DC               	goto	i2l6754
 19016  0032FE  D7E4               	goto	i2l6758
 19017  003300                     __end_of_inputHandler:
 19018                           	opt stack 0
 19019                           pclatu	equ	0xFFB
 19020                           pclath	equ	0xFFA
 19021                           tblptru	equ	0xFF8
 19022                           tblptrh	equ	0xFF7
 19023                           tblptrl	equ	0xFF6
 19024                           tablat	equ	0xFF5
 19025                           prodh	equ	0xFF4
 19026                           prodl	equ	0xFF3
 19027                           intcon	equ	0xFF2
 19028                           intcon2	equ	0xFF1
 19029                           intcon3	equ	0xFF0
 19030                           indf0	equ	0xFEF
 19031                           postinc0	equ	0xFEE
 19032                           fsr0h	equ	0xFEA
 19033                           fsr0l	equ	0xFE9
 19034                           wreg	equ	0xFE8
 19035                           postdec1	equ	0xFE5
 19036                           fsr1h	equ	0xFE2
 19037                           fsr1l	equ	0xFE1
 19038                           indf2	equ	0xFDF
 19039                           postinc2	equ	0xFDE
 19040                           postdec2	equ	0xFDD
 19041                           fsr2h	equ	0xFDA
 19042                           fsr2l	equ	0xFD9
 19043                           status	equ	0xFD8
 19044                           
 19045 ;; *************** function i2_change_state_to_menu_22 *****************
 19046 ;; Defined at:
 19047 ;;		line 498 in file "UI.c"
 19048 ;; Parameters:    Size  Location     Type
 19049 ;;		None
 19050 ;; Auto vars:     Size  Location     Type
 19051 ;;		None
 19052 ;; Return value:  Size  Location     Type
 19053 ;;                  1    wreg      void 
 19054 ;; Registers used:
 19055 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19056 ;; Tracked objects:
 19057 ;;		On entry : 0/0
 19058 ;;		On exit  : 0/0
 19059 ;;		Unchanged: 0/0
 19060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19064 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19065 ;;Total ram usage:        0 bytes
 19066 ;; Hardware stack levels used:    1
 19067 ;; Hardware stack levels required when called:    3
 19068 ;; This function calls:
 19069 ;;		i2_lcdInst
 19070 ;;		i2_printf
 19071 ;; This function is called by:
 19072 ;;		_updateMenu
 19073 ;;		_inputHandler
 19074 ;; This function uses a non-reentrant model
 19075 ;;
 19076                           
 19077                           	psect	text65
 19078  004A80                     __ptext65:
 19079                           	opt stack 0
 19080  004A80                     i2_change_state_to_menu_22:
 19081                           	opt stack 19
 19082                           
 19083                           ;UI.c: 499: cur_state = 22;
 19084                           
 19085                           ;incstack = 0
 19086  004A80  0E00               	movlw	0
 19087  004A82  0100               	movlb	0	; () banked
 19088  004A84  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19089  004A86  0E16               	movlw	22
 19090  004A88  6FE6               	movwf	_cur_state& (0+255),b
 19091                           
 19092                           ; BSR set to: 0
 19093                           ;UI.c: 501: lcdInst(0b10000000);;
 19094  004A8A  0E80               	movlw	128
 19095  004A8C  EC7C  F027         	call	i2_lcdInst
 19096                           
 19097                           ;UI.c: 502: printf("2. SORT        <");
 19098  004A90  0EC4               	movlw	low STR_34
 19099  004A92  6E0D               	movwf	i2printf@f,c
 19100  004A94  0EFD               	movlw	high STR_34
 19101  004A96  6E0E               	movwf	i2printf@f+1,c
 19102  004A98  EC96  F00C         	call	i2_printf	;wreg free
 19103                           
 19104                           ;UI.c: 503: lcdInst(0b11000000);;
 19105  004A9C  0EC0               	movlw	192
 19106  004A9E  EC7C  F027         	call	i2_lcdInst
 19107                           
 19108                           ;UI.c: 504: printf("3. LOGS         ");
 19109  004AA2  0E09               	movlw	low STR_36
 19110  004AA4  6E0D               	movwf	i2printf@f,c
 19111  004AA6  0EFD               	movlw	high STR_36
 19112  004AA8  6E0E               	movwf	i2printf@f+1,c
 19113  004AAA  EC96  F00C         	call	i2_printf	;wreg free
 19114  004AAE  0012               	return		;funcret
 19115  004AB0                     __end_ofi2_change_state_to_menu_22:
 19116                           	opt stack 0
 19117                           pclatu	equ	0xFFB
 19118                           pclath	equ	0xFFA
 19119                           tblptru	equ	0xFF8
 19120                           tblptrh	equ	0xFF7
 19121                           tblptrl	equ	0xFF6
 19122                           tablat	equ	0xFF5
 19123                           prodh	equ	0xFF4
 19124                           prodl	equ	0xFF3
 19125                           intcon	equ	0xFF2
 19126                           intcon2	equ	0xFF1
 19127                           intcon3	equ	0xFF0
 19128                           indf0	equ	0xFEF
 19129                           postinc0	equ	0xFEE
 19130                           fsr0h	equ	0xFEA
 19131                           fsr0l	equ	0xFE9
 19132                           wreg	equ	0xFE8
 19133                           postdec1	equ	0xFE5
 19134                           fsr1h	equ	0xFE2
 19135                           fsr1l	equ	0xFE1
 19136                           indf2	equ	0xFDF
 19137                           postinc2	equ	0xFDE
 19138                           postdec2	equ	0xFDD
 19139                           fsr2h	equ	0xFDA
 19140                           fsr2l	equ	0xFD9
 19141                           status	equ	0xFD8
 19142                           
 19143 ;; *************** function i2_change_state_to_menu_12 *****************
 19144 ;; Defined at:
 19145 ;;		line 490 in file "UI.c"
 19146 ;; Parameters:    Size  Location     Type
 19147 ;;		None
 19148 ;; Auto vars:     Size  Location     Type
 19149 ;;		None
 19150 ;; Return value:  Size  Location     Type
 19151 ;;                  1    wreg      void 
 19152 ;; Registers used:
 19153 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19154 ;; Tracked objects:
 19155 ;;		On entry : 0/0
 19156 ;;		On exit  : 0/0
 19157 ;;		Unchanged: 0/0
 19158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19160 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19162 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19163 ;;Total ram usage:        0 bytes
 19164 ;; Hardware stack levels used:    1
 19165 ;; Hardware stack levels required when called:    3
 19166 ;; This function calls:
 19167 ;;		i2_lcdInst
 19168 ;;		i2_printf
 19169 ;; This function is called by:
 19170 ;;		_updateMenu
 19171 ;;		_inputHandler
 19172 ;; This function uses a non-reentrant model
 19173 ;;
 19174                           
 19175                           	psect	text66
 19176  004AB0                     __ptext66:
 19177                           	opt stack 0
 19178  004AB0                     i2_change_state_to_menu_12:
 19179                           	opt stack 19
 19180                           
 19181                           ;UI.c: 491: cur_state = 12;
 19182                           
 19183                           ;incstack = 0
 19184  004AB0  0E00               	movlw	0
 19185  004AB2  0100               	movlb	0	; () banked
 19186  004AB4  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19187  004AB6  0E0C               	movlw	12
 19188  004AB8  6FE6               	movwf	_cur_state& (0+255),b
 19189                           
 19190                           ; BSR set to: 0
 19191                           ;UI.c: 493: lcdInst(0b10000000);;
 19192  004ABA  0E80               	movlw	128
 19193  004ABC  EC7C  F027         	call	i2_lcdInst
 19194                           
 19195                           ;UI.c: 494: printf("1. DATE/TIME    ");
 19196  004AC0  0E2B               	movlw	low STR_33
 19197  004AC2  6E0D               	movwf	i2printf@f,c
 19198  004AC4  0EFD               	movlw	high STR_33
 19199  004AC6  6E0E               	movwf	i2printf@f+1,c
 19200  004AC8  EC96  F00C         	call	i2_printf	;wreg free
 19201                           
 19202                           ;UI.c: 495: lcdInst(0b11000000);;
 19203  004ACC  0EC0               	movlw	192
 19204  004ACE  EC7C  F027         	call	i2_lcdInst
 19205                           
 19206                           ;UI.c: 496: printf("2. SORT        <");
 19207  004AD2  0EC4               	movlw	low STR_34
 19208  004AD4  6E0D               	movwf	i2printf@f,c
 19209  004AD6  0EFD               	movlw	high STR_34
 19210  004AD8  6E0E               	movwf	i2printf@f+1,c
 19211  004ADA  EC96  F00C         	call	i2_printf	;wreg free
 19212  004ADE  0012               	return		;funcret
 19213  004AE0                     __end_ofi2_change_state_to_menu_12:
 19214                           	opt stack 0
 19215                           pclatu	equ	0xFFB
 19216                           pclath	equ	0xFFA
 19217                           tblptru	equ	0xFF8
 19218                           tblptrh	equ	0xFF7
 19219                           tblptrl	equ	0xFF6
 19220                           tablat	equ	0xFF5
 19221                           prodh	equ	0xFF4
 19222                           prodl	equ	0xFF3
 19223                           intcon	equ	0xFF2
 19224                           intcon2	equ	0xFF1
 19225                           intcon3	equ	0xFF0
 19226                           indf0	equ	0xFEF
 19227                           postinc0	equ	0xFEE
 19228                           fsr0h	equ	0xFEA
 19229                           fsr0l	equ	0xFE9
 19230                           wreg	equ	0xFE8
 19231                           postdec1	equ	0xFE5
 19232                           fsr1h	equ	0xFE2
 19233                           fsr1l	equ	0xFE1
 19234                           indf2	equ	0xFDF
 19235                           postinc2	equ	0xFDE
 19236                           postdec2	equ	0xFDD
 19237                           fsr2h	equ	0xFDA
 19238                           fsr2l	equ	0xFD9
 19239                           status	equ	0xFD8
 19240                           
 19241 ;; *************** function _change_state_to_menu_23 *****************
 19242 ;; Defined at:
 19243 ;;		line 506 in file "UI.c"
 19244 ;; Parameters:    Size  Location     Type
 19245 ;;		None
 19246 ;; Auto vars:     Size  Location     Type
 19247 ;;		None
 19248 ;; Return value:  Size  Location     Type
 19249 ;;                  1    wreg      void 
 19250 ;; Registers used:
 19251 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19252 ;; Tracked objects:
 19253 ;;		On entry : 0/0
 19254 ;;		On exit  : 0/0
 19255 ;;		Unchanged: 0/0
 19256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19260 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19261 ;;Total ram usage:        0 bytes
 19262 ;; Hardware stack levels used:    1
 19263 ;; Hardware stack levels required when called:    3
 19264 ;; This function calls:
 19265 ;;		i2_lcdInst
 19266 ;;		i2_printf
 19267 ;; This function is called by:
 19268 ;;		_updateMenu
 19269 ;;		_inputHandler
 19270 ;; This function uses a non-reentrant model
 19271 ;;
 19272                           
 19273                           	psect	text67
 19274  004AE0                     __ptext67:
 19275                           	opt stack 0
 19276  004AE0                     _change_state_to_menu_23:
 19277                           	opt stack 18
 19278                           
 19279                           ;UI.c: 507: cur_state = 23;
 19280                           
 19281                           ;incstack = 0
 19282  004AE0  0E00               	movlw	0
 19283  004AE2  0100               	movlb	0	; () banked
 19284  004AE4  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19285  004AE6  0E17               	movlw	23
 19286  004AE8  6FE6               	movwf	_cur_state& (0+255),b
 19287                           
 19288                           ; BSR set to: 0
 19289                           ;UI.c: 509: lcdInst(0b10000000);;
 19290  004AEA  0E80               	movlw	128
 19291  004AEC  EC7C  F027         	call	i2_lcdInst
 19292                           
 19293                           ;UI.c: 510: printf("2. SORT         ");
 19294  004AF0  0E1A               	movlw	low STR_32
 19295  004AF2  6E0D               	movwf	i2printf@f,c
 19296  004AF4  0EFD               	movlw	high STR_32
 19297  004AF6  6E0E               	movwf	i2printf@f+1,c
 19298  004AF8  EC96  F00C         	call	i2_printf	;wreg free
 19299                           
 19300                           ;UI.c: 511: lcdInst(0b11000000);;
 19301  004AFC  0EC0               	movlw	192
 19302  004AFE  EC7C  F027         	call	i2_lcdInst
 19303                           
 19304                           ;UI.c: 512: printf("3. LOGS        <");
 19305  004B02  0EB3               	movlw	low STR_38
 19306  004B04  6E0D               	movwf	i2printf@f,c
 19307  004B06  0EFD               	movlw	high STR_38
 19308  004B08  6E0E               	movwf	i2printf@f+1,c
 19309  004B0A  EC96  F00C         	call	i2_printf	;wreg free
 19310  004B0E  0012               	return		;funcret
 19311  004B10                     __end_of_change_state_to_menu_23:
 19312                           	opt stack 0
 19313                           pclatu	equ	0xFFB
 19314                           pclath	equ	0xFFA
 19315                           tblptru	equ	0xFF8
 19316                           tblptrh	equ	0xFF7
 19317                           tblptrl	equ	0xFF6
 19318                           tablat	equ	0xFF5
 19319                           prodh	equ	0xFF4
 19320                           prodl	equ	0xFF3
 19321                           intcon	equ	0xFF2
 19322                           intcon2	equ	0xFF1
 19323                           intcon3	equ	0xFF0
 19324                           indf0	equ	0xFEF
 19325                           postinc0	equ	0xFEE
 19326                           fsr0h	equ	0xFEA
 19327                           fsr0l	equ	0xFE9
 19328                           wreg	equ	0xFE8
 19329                           postdec1	equ	0xFE5
 19330                           fsr1h	equ	0xFE2
 19331                           fsr1l	equ	0xFE1
 19332                           indf2	equ	0xFDF
 19333                           postinc2	equ	0xFDE
 19334                           postdec2	equ	0xFDD
 19335                           fsr2h	equ	0xFDA
 19336                           fsr2l	equ	0xFD9
 19337                           status	equ	0xFD8
 19338                           
 19339 ;; *************** function _change_state_to_menu_11 *****************
 19340 ;; Defined at:
 19341 ;;		line 482 in file "UI.c"
 19342 ;; Parameters:    Size  Location     Type
 19343 ;;		None
 19344 ;; Auto vars:     Size  Location     Type
 19345 ;;		None
 19346 ;; Return value:  Size  Location     Type
 19347 ;;                  1    wreg      void 
 19348 ;; Registers used:
 19349 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19350 ;; Tracked objects:
 19351 ;;		On entry : 0/0
 19352 ;;		On exit  : 0/0
 19353 ;;		Unchanged: 0/0
 19354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19356 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19358 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19359 ;;Total ram usage:        0 bytes
 19360 ;; Hardware stack levels used:    1
 19361 ;; Hardware stack levels required when called:    3
 19362 ;; This function calls:
 19363 ;;		i2_lcdInst
 19364 ;;		i2_printf
 19365 ;; This function is called by:
 19366 ;;		_updateMenu
 19367 ;;		_inputHandler
 19368 ;; This function uses a non-reentrant model
 19369 ;;
 19370                           
 19371                           	psect	text68
 19372  004B10                     __ptext68:
 19373                           	opt stack 0
 19374  004B10                     _change_state_to_menu_11:
 19375                           	opt stack 18
 19376                           
 19377                           ;UI.c: 483: cur_state = 11;
 19378                           
 19379                           ;incstack = 0
 19380  004B10  0E00               	movlw	0
 19381  004B12  0100               	movlb	0	; () banked
 19382  004B14  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19383  004B16  0E0B               	movlw	11
 19384  004B18  6FE6               	movwf	_cur_state& (0+255),b
 19385                           
 19386                           ; BSR set to: 0
 19387                           ;UI.c: 485: lcdInst(0b10000000);;
 19388  004B1A  0E80               	movlw	128
 19389  004B1C  EC7C  F027         	call	i2_lcdInst
 19390                           
 19391                           ;UI.c: 486: printf("1. DATE/TIME   <");
 19392  004B20  0ED5               	movlw	low STR_31
 19393  004B22  6E0D               	movwf	i2printf@f,c
 19394  004B24  0EFD               	movlw	high STR_31
 19395  004B26  6E0E               	movwf	i2printf@f+1,c
 19396  004B28  EC96  F00C         	call	i2_printf	;wreg free
 19397                           
 19398                           ;UI.c: 487: lcdInst(0b11000000);;
 19399  004B2C  0EC0               	movlw	192
 19400  004B2E  EC7C  F027         	call	i2_lcdInst
 19401                           
 19402                           ;UI.c: 488: printf("2. SORT         ");
 19403  004B32  0E1A               	movlw	low STR_32
 19404  004B34  6E0D               	movwf	i2printf@f,c
 19405  004B36  0EFD               	movlw	high STR_32
 19406  004B38  6E0E               	movwf	i2printf@f+1,c
 19407  004B3A  EC96  F00C         	call	i2_printf	;wreg free
 19408  004B3E  0012               	return		;funcret
 19409  004B40                     __end_of_change_state_to_menu_11:
 19410                           	opt stack 0
 19411                           pclatu	equ	0xFFB
 19412                           pclath	equ	0xFFA
 19413                           tblptru	equ	0xFF8
 19414                           tblptrh	equ	0xFF7
 19415                           tblptrl	equ	0xFF6
 19416                           tablat	equ	0xFF5
 19417                           prodh	equ	0xFF4
 19418                           prodl	equ	0xFF3
 19419                           intcon	equ	0xFF2
 19420                           intcon2	equ	0xFF1
 19421                           intcon3	equ	0xFF0
 19422                           indf0	equ	0xFEF
 19423                           postinc0	equ	0xFEE
 19424                           fsr0h	equ	0xFEA
 19425                           fsr0l	equ	0xFE9
 19426                           wreg	equ	0xFE8
 19427                           postdec1	equ	0xFE5
 19428                           fsr1h	equ	0xFE2
 19429                           fsr1l	equ	0xFE1
 19430                           indf2	equ	0xFDF
 19431                           postinc2	equ	0xFDE
 19432                           postdec2	equ	0xFDD
 19433                           fsr2h	equ	0xFDA
 19434                           fsr2l	equ	0xFD9
 19435                           status	equ	0xFD8
 19436                           
 19437 ;; *************** function _change_state_to_logs_34 *****************
 19438 ;; Defined at:
 19439 ;;		line 549 in file "UI.c"
 19440 ;; Parameters:    Size  Location     Type
 19441 ;;		None
 19442 ;; Auto vars:     Size  Location     Type
 19443 ;;		None
 19444 ;; Return value:  Size  Location     Type
 19445 ;;                  1    wreg      void 
 19446 ;; Registers used:
 19447 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19448 ;; Tracked objects:
 19449 ;;		On entry : 0/0
 19450 ;;		On exit  : 0/0
 19451 ;;		Unchanged: 0/0
 19452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19456 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19457 ;;Total ram usage:        0 bytes
 19458 ;; Hardware stack levels used:    1
 19459 ;; Hardware stack levels required when called:    3
 19460 ;; This function calls:
 19461 ;;		i2_lcdInst
 19462 ;;		i2_printf
 19463 ;; This function is called by:
 19464 ;;		_updateMenu
 19465 ;;		_inputHandler
 19466 ;; This function uses a non-reentrant model
 19467 ;;
 19468                           
 19469                           	psect	text69
 19470  004B40                     __ptext69:
 19471                           	opt stack 0
 19472  004B40                     _change_state_to_logs_34:
 19473                           	opt stack 18
 19474                           
 19475                           ;UI.c: 550: cur_state = 1034;
 19476                           
 19477                           ;incstack = 0
 19478  004B40  0E04               	movlw	4
 19479  004B42  0100               	movlb	0	; () banked
 19480  004B44  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19481  004B46  0E0A               	movlw	10
 19482  004B48  6FE6               	movwf	_cur_state& (0+255),b
 19483                           
 19484                           ; BSR set to: 0
 19485                           ;UI.c: 551: lcdInst(0b10000000);;
 19486  004B4A  0E80               	movlw	128
 19487  004B4C  EC7C  F027         	call	i2_lcdInst
 19488                           
 19489                           ;UI.c: 552: printf("LOG 3           ");
 19490  004B50  0EE7               	movlw	low STR_44
 19491  004B52  6E0D               	movwf	i2printf@f,c
 19492  004B54  0EFC               	movlw	high STR_44
 19493  004B56  6E0E               	movwf	i2printf@f+1,c
 19494  004B58  EC96  F00C         	call	i2_printf	;wreg free
 19495                           
 19496                           ;UI.c: 553: lcdInst(0b11000000);;
 19497  004B5C  0EC0               	movlw	192
 19498  004B5E  EC7C  F027         	call	i2_lcdInst
 19499                           
 19500                           ;UI.c: 554: printf("LOG 4          <");
 19501  004B62  0EA2               	movlw	low STR_50
 19502  004B64  6E0D               	movwf	i2printf@f,c
 19503  004B66  0EFD               	movlw	high STR_50
 19504  004B68  6E0E               	movwf	i2printf@f+1,c
 19505  004B6A  EC96  F00C         	call	i2_printf	;wreg free
 19506  004B6E  0012               	return		;funcret
 19507  004B70                     __end_of_change_state_to_logs_34:
 19508                           	opt stack 0
 19509                           pclatu	equ	0xFFB
 19510                           pclath	equ	0xFFA
 19511                           tblptru	equ	0xFF8
 19512                           tblptrh	equ	0xFF7
 19513                           tblptrl	equ	0xFF6
 19514                           tablat	equ	0xFF5
 19515                           prodh	equ	0xFF4
 19516                           prodl	equ	0xFF3
 19517                           intcon	equ	0xFF2
 19518                           intcon2	equ	0xFF1
 19519                           intcon3	equ	0xFF0
 19520                           indf0	equ	0xFEF
 19521                           postinc0	equ	0xFEE
 19522                           fsr0h	equ	0xFEA
 19523                           fsr0l	equ	0xFE9
 19524                           wreg	equ	0xFE8
 19525                           postdec1	equ	0xFE5
 19526                           fsr1h	equ	0xFE2
 19527                           fsr1l	equ	0xFE1
 19528                           indf2	equ	0xFDF
 19529                           postinc2	equ	0xFDE
 19530                           postdec2	equ	0xFDD
 19531                           fsr2h	equ	0xFDA
 19532                           fsr2l	equ	0xFD9
 19533                           status	equ	0xFD8
 19534                           
 19535 ;; *************** function _change_state_to_logs_33 *****************
 19536 ;; Defined at:
 19537 ;;		line 542 in file "UI.c"
 19538 ;; Parameters:    Size  Location     Type
 19539 ;;		None
 19540 ;; Auto vars:     Size  Location     Type
 19541 ;;		None
 19542 ;; Return value:  Size  Location     Type
 19543 ;;                  1    wreg      void 
 19544 ;; Registers used:
 19545 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19546 ;; Tracked objects:
 19547 ;;		On entry : 0/0
 19548 ;;		On exit  : 0/0
 19549 ;;		Unchanged: 0/0
 19550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19554 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19555 ;;Total ram usage:        0 bytes
 19556 ;; Hardware stack levels used:    1
 19557 ;; Hardware stack levels required when called:    3
 19558 ;; This function calls:
 19559 ;;		i2_lcdInst
 19560 ;;		i2_printf
 19561 ;; This function is called by:
 19562 ;;		_updateMenu
 19563 ;;		_inputHandler
 19564 ;; This function uses a non-reentrant model
 19565 ;;
 19566                           
 19567                           	psect	text70
 19568  004B70                     __ptext70:
 19569                           	opt stack 0
 19570  004B70                     _change_state_to_logs_33:
 19571                           	opt stack 18
 19572                           
 19573                           ;UI.c: 543: cur_state = 1033;
 19574                           
 19575                           ;incstack = 0
 19576  004B70  0E04               	movlw	4
 19577  004B72  0100               	movlb	0	; () banked
 19578  004B74  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19579  004B76  0E09               	movlw	9
 19580  004B78  6FE6               	movwf	_cur_state& (0+255),b
 19581                           
 19582                           ; BSR set to: 0
 19583                           ;UI.c: 544: lcdInst(0b10000000);;
 19584  004B7A  0E80               	movlw	128
 19585  004B7C  EC7C  F027         	call	i2_lcdInst
 19586                           
 19587                           ;UI.c: 545: printf("LOG 3          <");
 19588  004B80  0E91               	movlw	low STR_46
 19589  004B82  6E0D               	movwf	i2printf@f,c
 19590  004B84  0EFD               	movlw	high STR_46
 19591  004B86  6E0E               	movwf	i2printf@f+1,c
 19592  004B88  EC96  F00C         	call	i2_printf	;wreg free
 19593                           
 19594                           ;UI.c: 546: lcdInst(0b11000000);;
 19595  004B8C  0EC0               	movlw	192
 19596  004B8E  EC7C  F027         	call	i2_lcdInst
 19597                           
 19598                           ;UI.c: 547: printf("LOG 4           ");
 19599  004B92  0EF8               	movlw	low STR_48
 19600  004B94  6E0D               	movwf	i2printf@f,c
 19601  004B96  0EFC               	movlw	high STR_48
 19602  004B98  6E0E               	movwf	i2printf@f+1,c
 19603  004B9A  EC96  F00C         	call	i2_printf	;wreg free
 19604  004B9E  0012               	return		;funcret
 19605  004BA0                     __end_of_change_state_to_logs_33:
 19606                           	opt stack 0
 19607                           pclatu	equ	0xFFB
 19608                           pclath	equ	0xFFA
 19609                           tblptru	equ	0xFF8
 19610                           tblptrh	equ	0xFF7
 19611                           tblptrl	equ	0xFF6
 19612                           tablat	equ	0xFF5
 19613                           prodh	equ	0xFF4
 19614                           prodl	equ	0xFF3
 19615                           intcon	equ	0xFF2
 19616                           intcon2	equ	0xFF1
 19617                           intcon3	equ	0xFF0
 19618                           indf0	equ	0xFEF
 19619                           postinc0	equ	0xFEE
 19620                           fsr0h	equ	0xFEA
 19621                           fsr0l	equ	0xFE9
 19622                           wreg	equ	0xFE8
 19623                           postdec1	equ	0xFE5
 19624                           fsr1h	equ	0xFE2
 19625                           fsr1l	equ	0xFE1
 19626                           indf2	equ	0xFDF
 19627                           postinc2	equ	0xFDE
 19628                           postdec2	equ	0xFDD
 19629                           fsr2h	equ	0xFDA
 19630                           fsr2l	equ	0xFD9
 19631                           status	equ	0xFD8
 19632                           
 19633 ;; *************** function _change_state_to_logs_23 *****************
 19634 ;; Defined at:
 19635 ;;		line 535 in file "UI.c"
 19636 ;; Parameters:    Size  Location     Type
 19637 ;;		None
 19638 ;; Auto vars:     Size  Location     Type
 19639 ;;		None
 19640 ;; Return value:  Size  Location     Type
 19641 ;;                  1    wreg      void 
 19642 ;; Registers used:
 19643 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19644 ;; Tracked objects:
 19645 ;;		On entry : 0/0
 19646 ;;		On exit  : 0/0
 19647 ;;		Unchanged: 0/0
 19648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19652 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19653 ;;Total ram usage:        0 bytes
 19654 ;; Hardware stack levels used:    1
 19655 ;; Hardware stack levels required when called:    3
 19656 ;; This function calls:
 19657 ;;		i2_lcdInst
 19658 ;;		i2_printf
 19659 ;; This function is called by:
 19660 ;;		_updateMenu
 19661 ;;		_inputHandler
 19662 ;; This function uses a non-reentrant model
 19663 ;;
 19664                           
 19665                           	psect	text71
 19666  004C8C                     __ptext71:
 19667                           	opt stack 0
 19668  004C8C                     _change_state_to_logs_23:
 19669                           	opt stack 18
 19670                           
 19671                           ;UI.c: 536: cur_state = 1023;
 19672                           
 19673                           ;incstack = 0
 19674  004C8C  0E03               	movlw	3
 19675  004C8E  0100               	movlb	0	; () banked
 19676  004C90  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19677  004C92  69E6               	setf	_cur_state& (0+255),b
 19678                           
 19679                           ; BSR set to: 0
 19680                           ;UI.c: 537: lcdInst(0b10000000);;
 19681  004C94  0E80               	movlw	128
 19682  004C96  EC7C  F027         	call	i2_lcdInst
 19683                           
 19684                           ;UI.c: 538: printf("LOG 2           ");
 19685  004C9A  0ED6               	movlw	low STR_40
 19686  004C9C  6E0D               	movwf	i2printf@f,c
 19687  004C9E  0EFC               	movlw	high STR_40
 19688  004CA0  6E0E               	movwf	i2printf@f+1,c
 19689  004CA2  EC96  F00C         	call	i2_printf	;wreg free
 19690                           
 19691                           ;UI.c: 539: lcdInst(0b11000000);;
 19692  004CA6  0EC0               	movlw	192
 19693  004CA8  EC7C  F027         	call	i2_lcdInst
 19694                           
 19695                           ;UI.c: 540: printf("LOG 3          <");
 19696  004CAC  0E91               	movlw	low STR_46
 19697  004CAE  6E0D               	movwf	i2printf@f,c
 19698  004CB0  0EFD               	movlw	high STR_46
 19699  004CB2  6E0E               	movwf	i2printf@f+1,c
 19700  004CB4  EC96  F00C         	call	i2_printf	;wreg free
 19701  004CB8  0012               	return		;funcret
 19702  004CBA                     __end_of_change_state_to_logs_23:
 19703                           	opt stack 0
 19704                           pclatu	equ	0xFFB
 19705                           pclath	equ	0xFFA
 19706                           tblptru	equ	0xFF8
 19707                           tblptrh	equ	0xFF7
 19708                           tblptrl	equ	0xFF6
 19709                           tablat	equ	0xFF5
 19710                           prodh	equ	0xFF4
 19711                           prodl	equ	0xFF3
 19712                           intcon	equ	0xFF2
 19713                           intcon2	equ	0xFF1
 19714                           intcon3	equ	0xFF0
 19715                           indf0	equ	0xFEF
 19716                           postinc0	equ	0xFEE
 19717                           fsr0h	equ	0xFEA
 19718                           fsr0l	equ	0xFE9
 19719                           wreg	equ	0xFE8
 19720                           postdec1	equ	0xFE5
 19721                           fsr1h	equ	0xFE2
 19722                           fsr1l	equ	0xFE1
 19723                           indf2	equ	0xFDF
 19724                           postinc2	equ	0xFDE
 19725                           postdec2	equ	0xFDD
 19726                           fsr2h	equ	0xFDA
 19727                           fsr2l	equ	0xFD9
 19728                           status	equ	0xFD8
 19729                           
 19730 ;; *************** function _change_state_to_logs_22 *****************
 19731 ;; Defined at:
 19732 ;;		line 528 in file "UI.c"
 19733 ;; Parameters:    Size  Location     Type
 19734 ;;		None
 19735 ;; Auto vars:     Size  Location     Type
 19736 ;;		None
 19737 ;; Return value:  Size  Location     Type
 19738 ;;                  1    wreg      void 
 19739 ;; Registers used:
 19740 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19741 ;; Tracked objects:
 19742 ;;		On entry : 0/0
 19743 ;;		On exit  : 0/0
 19744 ;;		Unchanged: 0/0
 19745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19749 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19750 ;;Total ram usage:        0 bytes
 19751 ;; Hardware stack levels used:    1
 19752 ;; Hardware stack levels required when called:    3
 19753 ;; This function calls:
 19754 ;;		i2_lcdInst
 19755 ;;		i2_printf
 19756 ;; This function is called by:
 19757 ;;		_updateMenu
 19758 ;;		_inputHandler
 19759 ;; This function uses a non-reentrant model
 19760 ;;
 19761                           
 19762                           	psect	text72
 19763  004BA0                     __ptext72:
 19764                           	opt stack 0
 19765  004BA0                     _change_state_to_logs_22:
 19766                           	opt stack 18
 19767                           
 19768                           ;UI.c: 529: cur_state = 1022;
 19769                           
 19770                           ;incstack = 0
 19771  004BA0  0E03               	movlw	3
 19772  004BA2  0100               	movlb	0	; () banked
 19773  004BA4  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19774  004BA6  0EFE               	movlw	254
 19775  004BA8  6FE6               	movwf	_cur_state& (0+255),b
 19776                           
 19777                           ; BSR set to: 0
 19778                           ;UI.c: 530: lcdInst(0b10000000);;
 19779  004BAA  0E80               	movlw	128
 19780  004BAC  EC7C  F027         	call	i2_lcdInst
 19781                           
 19782                           ;UI.c: 531: printf("LOG 2          <");
 19783  004BB0  0E80               	movlw	low STR_42
 19784  004BB2  6E0D               	movwf	i2printf@f,c
 19785  004BB4  0EFD               	movlw	high STR_42
 19786  004BB6  6E0E               	movwf	i2printf@f+1,c
 19787  004BB8  EC96  F00C         	call	i2_printf	;wreg free
 19788                           
 19789                           ;UI.c: 532: lcdInst(0b11000000);;
 19790  004BBC  0EC0               	movlw	192
 19791  004BBE  EC7C  F027         	call	i2_lcdInst
 19792                           
 19793                           ;UI.c: 533: printf("LOG 3           ");
 19794  004BC2  0EE7               	movlw	low STR_44
 19795  004BC4  6E0D               	movwf	i2printf@f,c
 19796  004BC6  0EFC               	movlw	high STR_44
 19797  004BC8  6E0E               	movwf	i2printf@f+1,c
 19798  004BCA  EC96  F00C         	call	i2_printf	;wreg free
 19799  004BCE  0012               	return		;funcret
 19800  004BD0                     __end_of_change_state_to_logs_22:
 19801                           	opt stack 0
 19802                           pclatu	equ	0xFFB
 19803                           pclath	equ	0xFFA
 19804                           tblptru	equ	0xFF8
 19805                           tblptrh	equ	0xFF7
 19806                           tblptrl	equ	0xFF6
 19807                           tablat	equ	0xFF5
 19808                           prodh	equ	0xFF4
 19809                           prodl	equ	0xFF3
 19810                           intcon	equ	0xFF2
 19811                           intcon2	equ	0xFF1
 19812                           intcon3	equ	0xFF0
 19813                           indf0	equ	0xFEF
 19814                           postinc0	equ	0xFEE
 19815                           fsr0h	equ	0xFEA
 19816                           fsr0l	equ	0xFE9
 19817                           wreg	equ	0xFE8
 19818                           postdec1	equ	0xFE5
 19819                           fsr1h	equ	0xFE2
 19820                           fsr1l	equ	0xFE1
 19821                           indf2	equ	0xFDF
 19822                           postinc2	equ	0xFDE
 19823                           postdec2	equ	0xFDD
 19824                           fsr2h	equ	0xFDA
 19825                           fsr2l	equ	0xFD9
 19826                           status	equ	0xFD8
 19827                           
 19828 ;; *************** function _change_state_to_logs_12 *****************
 19829 ;; Defined at:
 19830 ;;		line 521 in file "UI.c"
 19831 ;; Parameters:    Size  Location     Type
 19832 ;;		None
 19833 ;; Auto vars:     Size  Location     Type
 19834 ;;		None
 19835 ;; Return value:  Size  Location     Type
 19836 ;;                  1    wreg      void 
 19837 ;; Registers used:
 19838 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19839 ;; Tracked objects:
 19840 ;;		On entry : 0/0
 19841 ;;		On exit  : 0/0
 19842 ;;		Unchanged: 0/0
 19843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19845 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19847 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19848 ;;Total ram usage:        0 bytes
 19849 ;; Hardware stack levels used:    1
 19850 ;; Hardware stack levels required when called:    3
 19851 ;; This function calls:
 19852 ;;		i2_lcdInst
 19853 ;;		i2_printf
 19854 ;; This function is called by:
 19855 ;;		_updateMenu
 19856 ;;		_inputHandler
 19857 ;; This function uses a non-reentrant model
 19858 ;;
 19859                           
 19860                           	psect	text73
 19861  004BD0                     __ptext73:
 19862                           	opt stack 0
 19863  004BD0                     _change_state_to_logs_12:
 19864                           	opt stack 18
 19865                           
 19866                           ;UI.c: 522: cur_state = 1012;
 19867                           
 19868                           ;incstack = 0
 19869  004BD0  0E03               	movlw	3
 19870  004BD2  0100               	movlb	0	; () banked
 19871  004BD4  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19872  004BD6  0EF4               	movlw	244
 19873  004BD8  6FE6               	movwf	_cur_state& (0+255),b
 19874                           
 19875                           ; BSR set to: 0
 19876                           ;UI.c: 523: lcdInst(0b10000000);;
 19877  004BDA  0E80               	movlw	128
 19878  004BDC  EC7C  F027         	call	i2_lcdInst
 19879                           
 19880                           ;UI.c: 524: printf("LOG 1           ");
 19881  004BE0  0EC5               	movlw	low STR_41
 19882  004BE2  6E0D               	movwf	i2printf@f,c
 19883  004BE4  0EFC               	movlw	high STR_41
 19884  004BE6  6E0E               	movwf	i2printf@f+1,c
 19885  004BE8  EC96  F00C         	call	i2_printf	;wreg free
 19886                           
 19887                           ;UI.c: 525: lcdInst(0b11000000);;
 19888  004BEC  0EC0               	movlw	192
 19889  004BEE  EC7C  F027         	call	i2_lcdInst
 19890                           
 19891                           ;UI.c: 526: printf("LOG 2          <");
 19892  004BF2  0E80               	movlw	low STR_42
 19893  004BF4  6E0D               	movwf	i2printf@f,c
 19894  004BF6  0EFD               	movlw	high STR_42
 19895  004BF8  6E0E               	movwf	i2printf@f+1,c
 19896  004BFA  EC96  F00C         	call	i2_printf	;wreg free
 19897  004BFE  0012               	return		;funcret
 19898  004C00                     __end_of_change_state_to_logs_12:
 19899                           	opt stack 0
 19900                           pclatu	equ	0xFFB
 19901                           pclath	equ	0xFFA
 19902                           tblptru	equ	0xFF8
 19903                           tblptrh	equ	0xFF7
 19904                           tblptrl	equ	0xFF6
 19905                           tablat	equ	0xFF5
 19906                           prodh	equ	0xFF4
 19907                           prodl	equ	0xFF3
 19908                           intcon	equ	0xFF2
 19909                           intcon2	equ	0xFF1
 19910                           intcon3	equ	0xFF0
 19911                           indf0	equ	0xFEF
 19912                           postinc0	equ	0xFEE
 19913                           fsr0h	equ	0xFEA
 19914                           fsr0l	equ	0xFE9
 19915                           wreg	equ	0xFE8
 19916                           postdec1	equ	0xFE5
 19917                           fsr1h	equ	0xFE2
 19918                           fsr1l	equ	0xFE1
 19919                           indf2	equ	0xFDF
 19920                           postinc2	equ	0xFDE
 19921                           postdec2	equ	0xFDD
 19922                           fsr2h	equ	0xFDA
 19923                           fsr2l	equ	0xFD9
 19924                           status	equ	0xFD8
 19925                           
 19926 ;; *************** function _change_state_to_logs_11 *****************
 19927 ;; Defined at:
 19928 ;;		line 514 in file "UI.c"
 19929 ;; Parameters:    Size  Location     Type
 19930 ;;		None
 19931 ;; Auto vars:     Size  Location     Type
 19932 ;;		None
 19933 ;; Return value:  Size  Location     Type
 19934 ;;                  1    wreg      void 
 19935 ;; Registers used:
 19936 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19937 ;; Tracked objects:
 19938 ;;		On entry : 0/0
 19939 ;;		On exit  : 0/0
 19940 ;;		Unchanged: 0/0
 19941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19945 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19946 ;;Total ram usage:        0 bytes
 19947 ;; Hardware stack levels used:    1
 19948 ;; Hardware stack levels required when called:    3
 19949 ;; This function calls:
 19950 ;;		i2_lcdInst
 19951 ;;		i2_printf
 19952 ;; This function is called by:
 19953 ;;		_updateMenu
 19954 ;;		_inputHandler
 19955 ;; This function uses a non-reentrant model
 19956 ;;
 19957                           
 19958                           	psect	text74
 19959  004C00                     __ptext74:
 19960                           	opt stack 0
 19961  004C00                     _change_state_to_logs_11:
 19962                           	opt stack 18
 19963                           
 19964                           ;UI.c: 515: cur_state = 1011;
 19965                           
 19966                           ;incstack = 0
 19967  004C00  0E03               	movlw	3
 19968  004C02  0100               	movlb	0	; () banked
 19969  004C04  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19970  004C06  0EF3               	movlw	243
 19971  004C08  6FE6               	movwf	_cur_state& (0+255),b
 19972                           
 19973                           ; BSR set to: 0
 19974                           ;UI.c: 516: lcdInst(0b10000000);;
 19975  004C0A  0E80               	movlw	128
 19976  004C0C  EC7C  F027         	call	i2_lcdInst
 19977                           
 19978                           ;UI.c: 517: printf("LOG 1          <");
 19979  004C10  0E6F               	movlw	low STR_39
 19980  004C12  6E0D               	movwf	i2printf@f,c
 19981  004C14  0EFD               	movlw	high STR_39
 19982  004C16  6E0E               	movwf	i2printf@f+1,c
 19983  004C18  EC96  F00C         	call	i2_printf	;wreg free
 19984                           
 19985                           ;UI.c: 518: lcdInst(0b11000000);;
 19986  004C1C  0EC0               	movlw	192
 19987  004C1E  EC7C  F027         	call	i2_lcdInst
 19988                           
 19989                           ;UI.c: 519: printf("LOG 2           ");
 19990  004C22  0ED6               	movlw	low STR_40
 19991  004C24  6E0D               	movwf	i2printf@f,c
 19992  004C26  0EFC               	movlw	high STR_40
 19993  004C28  6E0E               	movwf	i2printf@f+1,c
 19994  004C2A  EC96  F00C         	call	i2_printf	;wreg free
 19995  004C2E  0012               	return		;funcret
 19996  004C30                     __end_of_change_state_to_logs_11:
 19997                           	opt stack 0
 19998                           pclatu	equ	0xFFB
 19999                           pclath	equ	0xFFA
 20000                           tblptru	equ	0xFF8
 20001                           tblptrh	equ	0xFF7
 20002                           tblptrl	equ	0xFF6
 20003                           tablat	equ	0xFF5
 20004                           prodh	equ	0xFF4
 20005                           prodl	equ	0xFF3
 20006                           intcon	equ	0xFF2
 20007                           intcon2	equ	0xFF1
 20008                           intcon3	equ	0xFF0
 20009                           indf0	equ	0xFEF
 20010                           postinc0	equ	0xFEE
 20011                           fsr0h	equ	0xFEA
 20012                           fsr0l	equ	0xFE9
 20013                           wreg	equ	0xFE8
 20014                           postdec1	equ	0xFE5
 20015                           fsr1h	equ	0xFE2
 20016                           fsr1l	equ	0xFE1
 20017                           indf2	equ	0xFDF
 20018                           postinc2	equ	0xFDE
 20019                           postdec2	equ	0xFDD
 20020                           fsr2h	equ	0xFDA
 20021                           fsr2l	equ	0xFD9
 20022                           status	equ	0xFD8
 20023                           
 20024 ;; *************** function _dispLogs *****************
 20025 ;; Defined at:
 20026 ;;		line 467 in file "UI.c"
 20027 ;; Parameters:    Size  Location     Type
 20028 ;;  myLog           2   17[COMRAM] int 
 20029 ;; Auto vars:     Size  Location     Type
 20030 ;;		None
 20031 ;; Return value:  Size  Location     Type
 20032 ;;                  1    wreg      void 
 20033 ;; Registers used:
 20034 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20035 ;; Tracked objects:
 20036 ;;		On entry : 0/0
 20037 ;;		On exit  : 0/0
 20038 ;;		Unchanged: 0/0
 20039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20040 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20041 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20043 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20044 ;;Total ram usage:        2 bytes
 20045 ;; Hardware stack levels used:    1
 20046 ;; Hardware stack levels required when called:    2
 20047 ;; This function calls:
 20048 ;;		_retrieveLog
 20049 ;; This function is called by:
 20050 ;;		_updateMenu
 20051 ;; This function uses a non-reentrant model
 20052 ;;
 20053                           
 20054                           	psect	text75
 20055  004DD8                     __ptext75:
 20056                           	opt stack 0
 20057  004DD8                     _dispLogs:
 20058                           	opt stack 20
 20059                           
 20060                           ;UI.c: 468: logstate = 1;
 20061                           
 20062                           ;incstack = 0
 20063  004DD8  0E00               	movlw	0
 20064  004DDA  0100               	movlb	0	; () banked
 20065  004DDC  6FF7               	movwf	(_logstate+1)& (0+255),b
 20066  004DDE  0E01               	movlw	1
 20067  004DE0  6FF6               	movwf	_logstate& (0+255),b
 20068                           
 20069                           ; BSR set to: 0
 20070                           ;UI.c: 469: log = myLog;
 20071  004DE2  C012  F0EC         	movff	dispLogs@myLog,_log
 20072  004DE6  C013  F0ED         	movff	dispLogs@myLog+1,_log+1
 20073                           
 20074                           ; BSR set to: 0
 20075                           ;UI.c: 470: retrieveLog(myLog - 1);
 20076  004DEA  0EFF               	movlw	255
 20077  004DEC  2412               	addwf	dispLogs@myLog,w,c
 20078  004DEE  6E07               	movwf	retrieveLog@logNum,c
 20079  004DF0  0EFF               	movlw	255
 20080  004DF2  2013               	addwfc	dispLogs@myLog+1,w,c
 20081  004DF4  6E08               	movwf	retrieveLog@logNum+1,c
 20082  004DF6  EC87  F01C         	call	_retrieveLog	;wreg free
 20083  004DFA  0012               	return		;funcret
 20084  004DFC                     __end_of_dispLogs:
 20085                           	opt stack 0
 20086                           pclatu	equ	0xFFB
 20087                           pclath	equ	0xFFA
 20088                           tblptru	equ	0xFF8
 20089                           tblptrh	equ	0xFF7
 20090                           tblptrl	equ	0xFF6
 20091                           tablat	equ	0xFF5
 20092                           prodh	equ	0xFF4
 20093                           prodl	equ	0xFF3
 20094                           intcon	equ	0xFF2
 20095                           intcon2	equ	0xFF1
 20096                           intcon3	equ	0xFF0
 20097                           indf0	equ	0xFEF
 20098                           postinc0	equ	0xFEE
 20099                           fsr0h	equ	0xFEA
 20100                           fsr0l	equ	0xFE9
 20101                           wreg	equ	0xFE8
 20102                           postdec1	equ	0xFE5
 20103                           fsr1h	equ	0xFE2
 20104                           fsr1l	equ	0xFE1
 20105                           indf2	equ	0xFDF
 20106                           postinc2	equ	0xFDE
 20107                           postdec2	equ	0xFDD
 20108                           fsr2h	equ	0xFDA
 20109                           fsr2l	equ	0xFD9
 20110                           status	equ	0xFD8
 20111                           
 20112 ;; *************** function _retrieveLog *****************
 20113 ;; Defined at:
 20114 ;;		line 134 in file "EEPROM.c"
 20115 ;; Parameters:    Size  Location     Type
 20116 ;;  logNum          2    6[COMRAM] int 
 20117 ;; Auto vars:     Size  Location     Type
 20118 ;;  i               2   13[COMRAM] int 
 20119 ;;  addr            2   15[COMRAM] unsigned short 
 20120 ;;  byte3           1   12[COMRAM] unsigned char 
 20121 ;;  byte2           1   11[COMRAM] unsigned char 
 20122 ;;  byte1           1   10[COMRAM] unsigned char 
 20123 ;; Return value:  Size  Location     Type
 20124 ;;                  1    wreg      void 
 20125 ;; Registers used:
 20126 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20127 ;; Tracked objects:
 20128 ;;		On entry : 0/0
 20129 ;;		On exit  : 0/0
 20130 ;;		Unchanged: 0/0
 20131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20132 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20133 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20134 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20135 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20136 ;;Total ram usage:       11 bytes
 20137 ;; Hardware stack levels used:    1
 20138 ;; Hardware stack levels required when called:    1
 20139 ;; This function calls:
 20140 ;;		i2_EEPROM_read
 20141 ;;		i2___wmul
 20142 ;; This function is called by:
 20143 ;;		_dispLogs
 20144 ;; This function uses a non-reentrant model
 20145 ;;
 20146                           
 20147                           	psect	text76
 20148  00390E                     __ptext76:
 20149                           	opt stack 0
 20150  00390E                     _retrieveLog:
 20151                           	opt stack 20
 20152                           
 20153                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 20154                           
 20155                           ;incstack = 0
 20156  00390E  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 20157  003912  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 20158  003916  0E00               	movlw	0
 20159  003918  6E04               	movwf	i2___wmul@multiplicand+1,c
 20160  00391A  0E0B               	movlw	11
 20161  00391C  6E03               	movwf	i2___wmul@multiplicand,c
 20162  00391E  ECC6  F026         	call	i2___wmul	;wreg free
 20163  003922  0E01               	movlw	1
 20164  003924  2401               	addwf	?i2___wmul,w,c
 20165  003926  6E10               	movwf	retrieveLog@addr,c
 20166  003928  0E00               	movlw	0
 20167  00392A  2002               	addwfc	?i2___wmul+1,w,c
 20168  00392C  6E11               	movwf	retrieveLog@addr+1,c
 20169                           
 20170                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 20171  00392E  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 20172  003932  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 20173  003936  EC48  F027         	call	i2_EEPROM_read	;wreg free
 20174  00393A  6E0B               	movwf	retrieveLog@byte1,c
 20175                           
 20176                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 20177  00393C  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 20178  003940  0E80               	movlw	128
 20179  003942  1609               	andwf	??_retrieveLog,f,c
 20180  003944  5009               	movf	??_retrieveLog,w,c
 20181  003946  0100               	movlb	0	; () banked
 20182  003948  6FEE               	movwf	_log_completion& (0+255),b
 20183  00394A  6BEF               	clrf	(_log_completion+1)& (0+255),b
 20184                           
 20185                           ; BSR set to: 0
 20186                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 20187  00394C  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 20188  003950  0E0F               	movlw	15
 20189  003952  1609               	andwf	??_retrieveLog,f,c
 20190  003954  5009               	movf	??_retrieveLog,w,c
 20191  003956  6E75               	movwf	_log_count_total,c
 20192  003958  6A76               	clrf	_log_count_total+1,c
 20193                           
 20194                           ; BSR set to: 0
 20195                           ;EEPROM.c: 146: addr++;
 20196  00395A  4A10               	infsnz	retrieveLog@addr,f,c
 20197  00395C  2A11               	incf	retrieveLog@addr+1,f,c
 20198                           
 20199                           ; BSR set to: 0
 20200                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 20201  00395E  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 20202  003962  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 20203  003966  EC48  F027         	call	i2_EEPROM_read	;wreg free
 20204  00396A  6E0C               	movwf	retrieveLog@byte2,c
 20205                           
 20206                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)((byte2 & 0b11110000)>> 4);
 20207  00396C  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 20208  003970  3A09               	swapf	??_retrieveLog,f,c
 20209  003972  0E0F               	movlw	15
 20210  003974  1609               	andwf	??_retrieveLog,f,c
 20211  003976  0E0F               	movlw	15
 20212  003978  1609               	andwf	??_retrieveLog,f,c
 20213  00397A  5009               	movf	??_retrieveLog,w,c
 20214  00397C  0100               	movlb	0	; () banked
 20215  00397E  6FF0               	movwf	_log_count_pop_no_tab& (0+255),b
 20216  003980  6BF1               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 20217                           
 20218                           ; BSR set to: 0
 20219                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 20220  003982  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 20221  003986  0E0F               	movlw	15
 20222  003988  1609               	andwf	??_retrieveLog,f,c
 20223  00398A  5009               	movf	??_retrieveLog,w,c
 20224  00398C  0100               	movlb	0	; () banked
 20225  00398E  6FF2               	movwf	_log_count_pop_w_tab& (0+255),b
 20226  003990  6BF3               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 20227                           
 20228                           ; BSR set to: 0
 20229                           ;EEPROM.c: 152: addr++;
 20230  003992  4A10               	infsnz	retrieveLog@addr,f,c
 20231  003994  2A11               	incf	retrieveLog@addr+1,f,c
 20232                           
 20233                           ; BSR set to: 0
 20234                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 20235  003996  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 20236  00399A  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 20237  00399E  EC48  F027         	call	i2_EEPROM_read	;wreg free
 20238  0039A2  6E0D               	movwf	retrieveLog@byte3,c
 20239                           
 20240                           ;EEPROM.c: 154: log_count_can_w_lab = (int)((byte3 & 0b11110000)>> 4);
 20241  0039A4  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 20242  0039A8  3A09               	swapf	??_retrieveLog,f,c
 20243  0039AA  0E0F               	movlw	15
 20244  0039AC  1609               	andwf	??_retrieveLog,f,c
 20245  0039AE  0E0F               	movlw	15
 20246  0039B0  1609               	andwf	??_retrieveLog,f,c
 20247  0039B2  5009               	movf	??_retrieveLog,w,c
 20248  0039B4  6E73               	movwf	_log_count_can_w_lab,c
 20249  0039B6  6A74               	clrf	_log_count_can_w_lab+1,c
 20250                           
 20251                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 20252  0039B8  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 20253  0039BC  0E0F               	movlw	15
 20254  0039BE  1609               	andwf	??_retrieveLog,f,c
 20255  0039C0  5009               	movf	??_retrieveLog,w,c
 20256  0039C2  6E71               	movwf	_log_count_can_no_lab,c
 20257  0039C4  6A72               	clrf	_log_count_can_no_lab+1,c
 20258                           
 20259                           ;EEPROM.c: 156: addr++;
 20260  0039C6  4A10               	infsnz	retrieveLog@addr,f,c
 20261  0039C8  2A11               	incf	retrieveLog@addr+1,f,c
 20262                           
 20263                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 20264  0039CA  0E00               	movlw	0
 20265  0039CC  6E0F               	movwf	retrieveLog@i+1,c
 20266  0039CE  0E00               	movlw	0
 20267  0039D0  6E0E               	movwf	retrieveLog@i,c
 20268  0039D2                     i2l6372:
 20269  0039D2  BE0F               	btfsc	retrieveLog@i+1,7,c
 20270  0039D4  D006               	goto	i2l6376
 20271  0039D6  500F               	movf	retrieveLog@i+1,w,c
 20272  0039D8  E11E               	bnz	i2l6384
 20273  0039DA  0E07               	movlw	7
 20274  0039DC  5C0E               	subwf	retrieveLog@i,w,c
 20275  0039DE  B0D8               	btfsc	status,0,c
 20276  0039E0  D01A               	goto	i2l6384
 20277  0039E2                     i2l6376:
 20278                           
 20279                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 20280  0039E2  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 20281  0039E6  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 20282  0039EA  EC48  F027         	call	i2_EEPROM_read	;wreg free
 20283  0039EE  6E09               	movwf	??_retrieveLog& (0+255),c
 20284  0039F0  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 20285  0039F2  90D8               	bcf	status,0,c
 20286  0039F4  340E               	rlcf	retrieveLog@i,w,c
 20287  0039F6  6ED9               	movwf	fsr2l,c
 20288  0039F8  340F               	rlcf	retrieveLog@i+1,w,c
 20289  0039FA  6EDA               	movwf	fsr2h,c
 20290  0039FC  0E00               	movlw	low _log_startTime
 20291  0039FE  26D9               	addwf	fsr2l,f,c
 20292  003A00  0E01               	movlw	high _log_startTime
 20293  003A02  22DA               	addwfc	fsr2h,f,c
 20294  003A04  C009  FFDE         	movff	??_retrieveLog,postinc2
 20295  003A08  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 20296                           
 20297                           ;EEPROM.c: 161: addr++;
 20298  003A0C  4A10               	infsnz	retrieveLog@addr,f,c
 20299  003A0E  2A11               	incf	retrieveLog@addr+1,f,c
 20300  003A10  4A0E               	infsnz	retrieveLog@i,f,c
 20301  003A12  2A0F               	incf	retrieveLog@i+1,f,c
 20302  003A14  D7DE               	goto	i2l6372
 20303  003A16                     i2l6384:
 20304                           
 20305                           ;EEPROM.c: 162: }
 20306                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 20307  003A16  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 20308  003A1A  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 20309  003A1E  EC48  F027         	call	i2_EEPROM_read	;wreg free
 20310  003A22  6E09               	movwf	??_retrieveLog& (0+255),c
 20311  003A24  5009               	movf	??_retrieveLog,w,c
 20312  003A26  0100               	movlb	0	; () banked
 20313  003A28  6FF4               	movwf	_log_total_time& (0+255),b
 20314  003A2A  6BF5               	clrf	(_log_total_time+1)& (0+255),b
 20315                           
 20316                           ; BSR set to: 0
 20317  003A2C  0012               	return		;funcret
 20318  003A2E                     __end_of_retrieveLog:
 20319                           	opt stack 0
 20320                           pclatu	equ	0xFFB
 20321                           pclath	equ	0xFFA
 20322                           tblptru	equ	0xFF8
 20323                           tblptrh	equ	0xFF7
 20324                           tblptrl	equ	0xFF6
 20325                           tablat	equ	0xFF5
 20326                           prodh	equ	0xFF4
 20327                           prodl	equ	0xFF3
 20328                           intcon	equ	0xFF2
 20329                           intcon2	equ	0xFF1
 20330                           intcon3	equ	0xFF0
 20331                           indf0	equ	0xFEF
 20332                           postinc0	equ	0xFEE
 20333                           fsr0h	equ	0xFEA
 20334                           fsr0l	equ	0xFE9
 20335                           wreg	equ	0xFE8
 20336                           postdec1	equ	0xFE5
 20337                           fsr1h	equ	0xFE2
 20338                           fsr1l	equ	0xFE1
 20339                           indf2	equ	0xFDF
 20340                           postinc2	equ	0xFDE
 20341                           postdec2	equ	0xFDD
 20342                           fsr2h	equ	0xFDA
 20343                           fsr2l	equ	0xFD9
 20344                           status	equ	0xFD8
 20345                           
 20346 ;; *************** function i2_EEPROM_read *****************
 20347 ;; Defined at:
 20348 ;;		line 68 in file "EEPROM.c"
 20349 ;; Parameters:    Size  Location     Type
 20350 ;;  address         2    0[COMRAM] unsigned short 
 20351 ;; Auto vars:     Size  Location     Type
 20352 ;;		None
 20353 ;; Return value:  Size  Location     Type
 20354 ;;                  1    wreg      unsigned char 
 20355 ;; Registers used:
 20356 ;;		wreg, status,2
 20357 ;; Tracked objects:
 20358 ;;		On entry : 0/0
 20359 ;;		On exit  : 0/0
 20360 ;;		Unchanged: 0/0
 20361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20362 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20363 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20365 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20366 ;;Total ram usage:        2 bytes
 20367 ;; Hardware stack levels used:    1
 20368 ;; This function calls:
 20369 ;;		Nothing
 20370 ;; This function is called by:
 20371 ;;		_retrieveLog
 20372 ;; This function uses a non-reentrant model
 20373 ;;
 20374                           
 20375                           	psect	text77
 20376  004E90                     __ptext77:
 20377                           	opt stack 0
 20378  004E90                     i2_EEPROM_read:
 20379                           	opt stack 20
 20380                           
 20381                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 20382                           
 20383                           ; BSR set to: 0
 20384                           ;incstack = 0
 20385  004E90  5002               	movf	i2EEPROM_read@address+1,w,c
 20386  004E92  6EAA               	movwf	4010,c	;volatile
 20387                           
 20388                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 20389  004E94  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 20390                           
 20391                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 20392  004E98  9EA6               	bcf	4006,7,c	;volatile
 20393                           
 20394                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 20395  004E9A  9CA6               	bcf	4006,6,c	;volatile
 20396                           
 20397                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 20398  004E9C  80A6               	bsf	4006,0,c	;volatile
 20399  004E9E                     i2l987:
 20400  004E9E  B0A6               	btfsc	4006,0,c	;volatile
 20401  004EA0  D7FE               	goto	i2l987
 20402                           
 20403                           ;EEPROM.c: 81: return EEDATA;
 20404  004EA2  50A8               	movf	4008,w,c	;volatile
 20405  004EA4  0012               	return	
 20406  004EA6                     __end_ofi2_EEPROM_read:
 20407                           	opt stack 0
 20408                           pclatu	equ	0xFFB
 20409                           pclath	equ	0xFFA
 20410                           tblptru	equ	0xFF8
 20411                           tblptrh	equ	0xFF7
 20412                           tblptrl	equ	0xFF6
 20413                           tablat	equ	0xFF5
 20414                           prodh	equ	0xFF4
 20415                           prodl	equ	0xFF3
 20416                           intcon	equ	0xFF2
 20417                           intcon2	equ	0xFF1
 20418                           intcon3	equ	0xFF0
 20419                           indf0	equ	0xFEF
 20420                           postinc0	equ	0xFEE
 20421                           fsr0h	equ	0xFEA
 20422                           fsr0l	equ	0xFE9
 20423                           wreg	equ	0xFE8
 20424                           postdec1	equ	0xFE5
 20425                           fsr1h	equ	0xFE2
 20426                           fsr1l	equ	0xFE1
 20427                           indf2	equ	0xFDF
 20428                           postinc2	equ	0xFDE
 20429                           postdec2	equ	0xFDD
 20430                           fsr2h	equ	0xFDA
 20431                           fsr2l	equ	0xFD9
 20432                           status	equ	0xFD8
 20433                           
 20434 ;; *************** function _printSortTimer *****************
 20435 ;; Defined at:
 20436 ;;		line 379 in file "sort.c"
 20437 ;; Parameters:    Size  Location     Type
 20438 ;;		None
 20439 ;; Auto vars:     Size  Location     Type
 20440 ;;  i               2   70[COMRAM] int 
 20441 ;;  curTime        14   44[COMRAM] int [7]
 20442 ;;  timeDiff        2   68[COMRAM] unsigned int 
 20443 ;;  sec             2   64[COMRAM] int 
 20444 ;;  min             2   62[COMRAM] int 
 20445 ;;  cur_sec         2   60[COMRAM] unsigned int 
 20446 ;;  start_sec       2   58[COMRAM] unsigned int 
 20447 ;; Return value:  Size  Location     Type
 20448 ;;                  1    wreg      void 
 20449 ;; Registers used:
 20450 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20451 ;; Tracked objects:
 20452 ;;		On entry : 0/0
 20453 ;;		On exit  : 0/0
 20454 ;;		Unchanged: 0/0
 20455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20457 ;;      Locals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20458 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20459 ;;      Totals:        31       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20460 ;;Total ram usage:       31 bytes
 20461 ;; Hardware stack levels used:    1
 20462 ;; Hardware stack levels required when called:    3
 20463 ;; This function calls:
 20464 ;;		i2___lwdiv
 20465 ;;		i2___lwmod
 20466 ;;		i2___wmul
 20467 ;;		i2_getRTC
 20468 ;;		i2_lcdInst
 20469 ;;		i2_printf
 20470 ;; This function is called by:
 20471 ;;		_handler
 20472 ;; This function uses a non-reentrant model
 20473 ;;
 20474                           
 20475                           	psect	text78
 20476  002F04                     __ptext78:
 20477                           	opt stack 0
 20478  002F04                     _printSortTimer:
 20479                           	opt stack 20
 20480                           
 20481                           ;sort.c: 380: getRTC();
 20482                           
 20483                           ;incstack = 0
 20484  002F04  EC3E  F022         	call	i2_getRTC	;wreg free
 20485                           
 20486                           ;sort.c: 381: int curTime[7];
 20487                           ;sort.c: 382: for(int i = 0; i < 7; i++){
 20488  002F08  0E00               	movlw	0
 20489  002F0A  6E48               	movwf	printSortTimer@i+1,c
 20490  002F0C  0E00               	movlw	0
 20491  002F0E  6E47               	movwf	printSortTimer@i,c
 20492  002F10                     i2l8700:
 20493  002F10  BE48               	btfsc	printSortTimer@i+1,7,c
 20494  002F12  D006               	goto	i2l8704
 20495  002F14  5048               	movf	printSortTimer@i+1,w,c
 20496  002F16  E131               	bnz	i2l8710
 20497  002F18  0E07               	movlw	7
 20498  002F1A  5C47               	subwf	printSortTimer@i,w,c
 20499  002F1C  B0D8               	btfsc	status,0,c
 20500  002F1E  D02D               	goto	i2l8710
 20501  002F20                     i2l8704:
 20502                           
 20503                           ;sort.c: 383: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 20504  002F20  0E24               	movlw	low _time
 20505  002F22  2447               	addwf	printSortTimer@i,w,c
 20506  002F24  6ED9               	movwf	fsr2l,c
 20507  002F26  0E01               	movlw	high _time
 20508  002F28  2048               	addwfc	printSortTimer@i+1,w,c
 20509  002F2A  6EDA               	movwf	fsr2h,c
 20510  002F2C  50DF               	movf	indf2,w,c
 20511  002F2E  6E2A               	movwf	??_printSortTimer& (0+255),c
 20512  002F30  3A2A               	swapf	??_printSortTimer,f,c
 20513  002F32  0E0F               	movlw	15
 20514  002F34  162A               	andwf	??_printSortTimer,f,c
 20515  002F36  0E0F               	movlw	15
 20516  002F38  162A               	andwf	??_printSortTimer,f,c
 20517  002F3A  502A               	movf	??_printSortTimer,w,c
 20518  002F3C  0D0A               	mullw	10
 20519  002F3E  0E24               	movlw	low _time
 20520  002F40  2447               	addwf	printSortTimer@i,w,c
 20521  002F42  6ED9               	movwf	fsr2l,c
 20522  002F44  0E01               	movlw	high _time
 20523  002F46  2048               	addwfc	printSortTimer@i+1,w,c
 20524  002F48  6EDA               	movwf	fsr2h,c
 20525  002F4A  50DF               	movf	indf2,w,c
 20526  002F4C  0B0F               	andlw	15
 20527  002F4E  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 20528  002F50  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 20529  002F52  50F3               	movf	prodl,w,c
 20530  002F54  262B               	addwf	??_printSortTimer+1,f,c
 20531  002F56  50F4               	movf	prodh,w,c
 20532  002F58  222C               	addwfc	??_printSortTimer+2,f,c
 20533  002F5A  90D8               	bcf	status,0,c
 20534  002F5C  3447               	rlcf	printSortTimer@i,w,c
 20535  002F5E  6ED9               	movwf	fsr2l,c
 20536  002F60  3448               	rlcf	printSortTimer@i+1,w,c
 20537  002F62  6EDA               	movwf	fsr2h,c
 20538  002F64  0E2D               	movlw	low printSortTimer@curTime
 20539  002F66  26D9               	addwf	fsr2l,f,c
 20540  002F68  0E00               	movlw	high printSortTimer@curTime
 20541  002F6A  22DA               	addwfc	fsr2h,f,c
 20542  002F6C  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 20543  002F70  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 20544  002F74  4A47               	infsnz	printSortTimer@i,f,c
 20545  002F76  2A48               	incf	printSortTimer@i+1,f,c
 20546  002F78  D7CB               	goto	i2l8700
 20547  002F7A                     i2l8710:
 20548                           
 20549                           ;sort.c: 384: }
 20550                           ;sort.c: 385: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 20551  002F7A  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 20552  002F7E  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 20553  002F82  0E00               	movlw	0
 20554  002F84  6E04               	movwf	i2___wmul@multiplicand+1,c
 20555  002F86  0E3C               	movlw	60
 20556  002F88  6E03               	movwf	i2___wmul@multiplicand,c
 20557  002F8A  ECC6  F026         	call	i2___wmul	;wreg free
 20558  002F8E  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 20559  002F92  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 20560  002F96  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 20561  002F9A  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 20562  002F9E  0E0E               	movlw	14
 20563  002FA0  6E04               	movwf	i2___wmul@multiplicand+1,c
 20564  002FA2  0E10               	movlw	16
 20565  002FA4  6E03               	movwf	i2___wmul@multiplicand,c
 20566  002FA6  ECC6  F026         	call	i2___wmul	;wreg free
 20567  002FAA  5001               	movf	?i2___wmul,w,c
 20568  002FAC  262A               	addwf	??_printSortTimer,f,c
 20569  002FAE  5002               	movf	?i2___wmul+1,w,c
 20570  002FB0  222B               	addwfc	??_printSortTimer+1,f,c
 20571  002FB2  0101               	movlb	1	; () banked
 20572  002FB4  510E               	movf	_startTime& (0+255),w,b
 20573  002FB6  242A               	addwf	??_printSortTimer,w,c
 20574  002FB8  6E3B               	movwf	printSortTimer@start_sec,c
 20575  002FBA  0101               	movlb	1	; () banked
 20576  002FBC  510F               	movf	(_startTime+1)& (0+255),w,b
 20577  002FBE  202B               	addwfc	??_printSortTimer+1,w,c
 20578  002FC0  6E3C               	movwf	printSortTimer@start_sec+1,c
 20579                           
 20580                           ;sort.c: 386: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 20581  002FC2  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 20582  002FC6  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 20583  002FCA  0E00               	movlw	0
 20584  002FCC  6E04               	movwf	i2___wmul@multiplicand+1,c
 20585  002FCE  0E3C               	movlw	60
 20586  002FD0  6E03               	movwf	i2___wmul@multiplicand,c
 20587  002FD2  ECC6  F026         	call	i2___wmul	;wreg free
 20588  002FD6  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 20589  002FDA  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 20590  002FDE  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 20591  002FE2  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 20592  002FE6  0E0E               	movlw	14
 20593  002FE8  6E04               	movwf	i2___wmul@multiplicand+1,c
 20594  002FEA  0E10               	movlw	16
 20595  002FEC  6E03               	movwf	i2___wmul@multiplicand,c
 20596  002FEE  ECC6  F026         	call	i2___wmul	;wreg free
 20597  002FF2  5001               	movf	?i2___wmul,w,c
 20598  002FF4  262A               	addwf	??_printSortTimer,f,c
 20599  002FF6  5002               	movf	?i2___wmul+1,w,c
 20600  002FF8  222B               	addwfc	??_printSortTimer+1,f,c
 20601  002FFA  502D               	movf	printSortTimer@curTime,w,c
 20602  002FFC  242A               	addwf	??_printSortTimer,w,c
 20603  002FFE  6E3D               	movwf	printSortTimer@cur_sec,c
 20604  003000  502E               	movf	printSortTimer@curTime+1,w,c
 20605  003002  202B               	addwfc	??_printSortTimer+1,w,c
 20606  003004  6E3E               	movwf	printSortTimer@cur_sec+1,c
 20607                           
 20608                           ;sort.c: 387: unsigned int timeDiff = cur_sec - start_sec;
 20609  003006  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 20610  00300A  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 20611  00300E  1E2A               	comf	??_printSortTimer,f,c
 20612  003010  1E2B               	comf	??_printSortTimer+1,f,c
 20613  003012  4A2A               	infsnz	??_printSortTimer,f,c
 20614  003014  2A2B               	incf	??_printSortTimer+1,f,c
 20615  003016  503D               	movf	printSortTimer@cur_sec,w,c
 20616  003018  242A               	addwf	??_printSortTimer,w,c
 20617  00301A  6E45               	movwf	printSortTimer@timeDiff,c
 20618  00301C  503E               	movf	printSortTimer@cur_sec+1,w,c
 20619  00301E  202B               	addwfc	??_printSortTimer+1,w,c
 20620  003020  6E46               	movwf	printSortTimer@timeDiff+1,c
 20621                           
 20622                           ;sort.c: 389: total_time = timeDiff;
 20623  003022  C045  F0F8         	movff	printSortTimer@timeDiff,_total_time
 20624  003026  C046  F0F9         	movff	printSortTimer@timeDiff+1,_total_time+1
 20625                           
 20626                           ;sort.c: 391: if(f_most_recent_sort_time){
 20627  00302A  506B               	movf	_f_most_recent_sort_time,w,c
 20628  00302C  106C               	iorwf	_f_most_recent_sort_time+1,w,c
 20629  00302E  B4D8               	btfsc	status,2,c
 20630  003030  D008               	goto	i2l8722
 20631                           
 20632                           ;sort.c: 392: most_recent_sort_time = total_time;
 20633  003032  C0F8  F133         	movff	_total_time,_most_recent_sort_time
 20634  003036  C0F9  F134         	movff	_total_time+1,_most_recent_sort_time+1
 20635                           
 20636                           ;sort.c: 393: f_most_recent_sort_time = 0;
 20637  00303A  0E00               	movlw	0
 20638  00303C  6E6C               	movwf	_f_most_recent_sort_time+1,c
 20639  00303E  0E00               	movlw	0
 20640  003040  6E6B               	movwf	_f_most_recent_sort_time,c
 20641  003042                     i2l8722:
 20642                           
 20643                           ;sort.c: 394: }
 20644                           ;sort.c: 397: if((total_time - most_recent_sort_time == 179) | (total_time == 179)){
 20645  003042  C133  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 20646  003046  C134  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 20647  00304A  1E2A               	comf	??_printSortTimer,f,c
 20648  00304C  1E2B               	comf	??_printSortTimer+1,f,c
 20649  00304E  4A2A               	infsnz	??_printSortTimer,f,c
 20650  003050  2A2B               	incf	??_printSortTimer+1,f,c
 20651  003052  0100               	movlb	0	; () banked
 20652  003054  51F8               	movf	_total_time& (0+255),w,b
 20653  003056  262A               	addwf	??_printSortTimer,f,c
 20654  003058  0100               	movlb	0	; () banked
 20655  00305A  51F9               	movf	(_total_time+1)& (0+255),w,b
 20656  00305C  222B               	addwfc	??_printSortTimer+1,f,c
 20657  00305E  0EB3               	movlw	179
 20658  003060  182A               	xorwf	??_printSortTimer,w,c
 20659  003062  102B               	iorwf	??_printSortTimer+1,w,c
 20660  003064  B4D8               	btfsc	status,2,c
 20661  003066  D007               	goto	i2l8726
 20662                           
 20663                           ; BSR set to: 0
 20664  003068  0EB3               	movlw	179
 20665  00306A  0100               	movlb	0	; () banked
 20666  00306C  19F8               	xorwf	_total_time& (0+255),w,b
 20667  00306E  0100               	movlb	0	; () banked
 20668  003070  11F9               	iorwf	(_total_time+1)& (0+255),w,b
 20669  003072  A4D8               	btfss	status,2,c
 20670  003074  D003               	goto	i2l8728
 20671  003076                     i2l8726:
 20672                           
 20673                           ; BSR set to: 0
 20674                           ;sort.c: 398: machine_state = DoneSorting_state;
 20675  003076  0E02               	movlw	2
 20676  003078  0100               	movlb	0	; () banked
 20677  00307A  6FFC               	movwf	_machine_state& (0+255),b
 20678  00307C                     i2l8728:
 20679                           
 20680                           ; BSR set to: 0
 20681                           ;sort.c: 400: }
 20682                           ;sort.c: 402: int min = (timeDiff % 3600) / 60;
 20683  00307C  0E0E               	movlw	14
 20684  00307E  6E04               	movwf	i2___lwmod@divisor+1,c
 20685  003080  0E10               	movlw	16
 20686  003082  6E03               	movwf	i2___lwmod@divisor,c
 20687  003084  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 20688  003088  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 20689  00308C  EC7F  F024         	call	i2___lwmod	;wreg free
 20690  003090  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 20691  003094  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 20692  003098  0E00               	movlw	0
 20693  00309A  6E09               	movwf	i2___lwdiv@divisor+1,c
 20694  00309C  0E3C               	movlw	60
 20695  00309E  6E08               	movwf	i2___lwdiv@divisor,c
 20696  0030A0  ECC0  F023         	call	i2___lwdiv	;wreg free
 20697  0030A4  C006  F03F         	movff	?i2___lwdiv,printSortTimer@min
 20698  0030A8  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@min+1
 20699                           
 20700                           ;sort.c: 403: int sec = (timeDiff % 3600) % 60;
 20701  0030AC  0E0E               	movlw	14
 20702  0030AE  6E04               	movwf	i2___lwmod@divisor+1,c
 20703  0030B0  0E10               	movlw	16
 20704  0030B2  6E03               	movwf	i2___lwmod@divisor,c
 20705  0030B4  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 20706  0030B8  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 20707  0030BC  EC7F  F024         	call	i2___lwmod	;wreg free
 20708  0030C0  C001  F043         	movff	?i2___lwmod,_printSortTimer$2451
 20709  0030C4  C002  F044         	movff	?i2___lwmod+1,_printSortTimer$2451+1
 20710                           
 20711                           ;sort.c: 403: int sec = (timeDiff % 3600) % 60;
 20712  0030C8  C043  F001         	movff	_printSortTimer$2451,i2___lwmod@dividend
 20713  0030CC  C044  F002         	movff	_printSortTimer$2451+1,i2___lwmod@dividend+1
 20714  0030D0  0E00               	movlw	0
 20715  0030D2  6E04               	movwf	i2___lwmod@divisor+1,c
 20716  0030D4  0E3C               	movlw	60
 20717  0030D6  6E03               	movwf	i2___lwmod@divisor,c
 20718  0030D8  EC7F  F024         	call	i2___lwmod	;wreg free
 20719  0030DC  C001  F041         	movff	?i2___lwmod,printSortTimer@sec
 20720  0030E0  C002  F042         	movff	?i2___lwmod+1,printSortTimer@sec+1
 20721                           
 20722                           ;sort.c: 405: lcdInst(0b10000000);;
 20723  0030E4  0E80               	movlw	128
 20724  0030E6  EC7C  F027         	call	i2_lcdInst
 20725                           
 20726                           ;sort.c: 406: printf("SORTING...");
 20727  0030EA  0E7C               	movlw	low STR_64
 20728  0030EC  6E0D               	movwf	i2printf@f,c
 20729  0030EE  0EFF               	movlw	high STR_64
 20730  0030F0  6E0E               	movwf	i2printf@f+1,c
 20731  0030F2  EC96  F00C         	call	i2_printf	;wreg free
 20732                           
 20733                           ;sort.c: 407: lcdInst(0b11000000);;
 20734  0030F6  0EC0               	movlw	192
 20735  0030F8  EC7C  F027         	call	i2_lcdInst
 20736                           
 20737                           ;sort.c: 408: printf("TIME %d:%02d", min, sec);
 20738  0030FC  0E42               	movlw	low STR_65
 20739  0030FE  6E0D               	movwf	i2printf@f,c
 20740  003100  0EFF               	movlw	high STR_65
 20741  003102  6E0E               	movwf	i2printf@f+1,c
 20742  003104  C03F  F00F         	movff	printSortTimer@min,?i2_printf+2
 20743  003108  C040  F010         	movff	printSortTimer@min+1,?i2_printf+3
 20744  00310C  C041  F011         	movff	printSortTimer@sec,?i2_printf+4
 20745  003110  C042  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 20746  003114  EC96  F00C         	call	i2_printf	;wreg free
 20747  003118  0012               	return		;funcret
 20748  00311A                     __end_of_printSortTimer:
 20749                           	opt stack 0
 20750                           pclatu	equ	0xFFB
 20751                           pclath	equ	0xFFA
 20752                           tblptru	equ	0xFF8
 20753                           tblptrh	equ	0xFF7
 20754                           tblptrl	equ	0xFF6
 20755                           tablat	equ	0xFF5
 20756                           prodh	equ	0xFF4
 20757                           prodl	equ	0xFF3
 20758                           intcon	equ	0xFF2
 20759                           intcon2	equ	0xFF1
 20760                           intcon3	equ	0xFF0
 20761                           indf0	equ	0xFEF
 20762                           postinc0	equ	0xFEE
 20763                           fsr0h	equ	0xFEA
 20764                           fsr0l	equ	0xFE9
 20765                           wreg	equ	0xFE8
 20766                           postdec1	equ	0xFE5
 20767                           fsr1h	equ	0xFE2
 20768                           fsr1l	equ	0xFE1
 20769                           indf2	equ	0xFDF
 20770                           postinc2	equ	0xFDE
 20771                           postdec2	equ	0xFDD
 20772                           fsr2h	equ	0xFDA
 20773                           fsr2l	equ	0xFD9
 20774                           status	equ	0xFD8
 20775                           
 20776 ;; *************** function i2_printf *****************
 20777 ;; Defined at:
 20778 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 20779 ;; Parameters:    Size  Location     Type
 20780 ;;  f               2   12[COMRAM] PTR const unsigned char 
 20781 ;;		 -> STR_125(18), STR_124(18), STR_123(18), STR_122(18), 
 20782 ;;		 -> STR_121(18), STR_120(18), STR_119(17), STR_118(17), 
 20783 ;;		 -> STR_117(3), STR_116(15), STR_115(3), STR_114(15), 
 20784 ;;		 -> STR_113(11), STR_112(18), STR_111(18), STR_110(17), 
 20785 ;;		 -> STR_109(15), STR_108(15), STR_107(15), STR_106(17), 
 20786 ;;		 -> STR_105(17), STR_104(17), STR_103(16), STR_102(17), 
 20787 ;;		 -> STR_101(17), STR_100(17), STR_99(17), STR_98(17), 
 20788 ;;		 -> STR_97(17), STR_96(15), STR_95(11), STR_94(17), 
 20789 ;;		 -> STR_93(11), STR_92(17), STR_91(14), STR_90(15), 
 20790 ;;		 -> STR_89(14), STR_88(10), STR_87(9), STR_86(9), 
 20791 ;;		 -> STR_85(10), STR_84(10), STR_83(16), STR_82(15), 
 20792 ;;		 -> STR_81(3), STR_80(15), STR_79(13), STR_78(14), 
 20793 ;;		 -> STR_77(8), STR_76(14), STR_75(15), STR_74(12), 
 20794 ;;		 -> STR_73(14), STR_72(17), STR_71(14), STR_70(15), 
 20795 ;;		 -> STR_69(17), STR_68(17), STR_67(7), STR_66(21), 
 20796 ;;		 -> STR_65(13), STR_64(11), STR_63(24), STR_50(17), 
 20797 ;;		 -> STR_49(17), STR_48(17), STR_47(17), STR_46(17), 
 20798 ;;		 -> STR_45(17), STR_44(17), STR_43(17), STR_42(17), 
 20799 ;;		 -> STR_41(17), STR_40(17), STR_39(17), STR_38(17), 
 20800 ;;		 -> STR_37(17), STR_36(17), STR_35(17), STR_34(17), 
 20801 ;;		 -> STR_33(17), STR_32(17), STR_31(17), STR_30(17), 
 20802 ;;		 -> STR_29(3), STR_28(17), STR_27(17), STR_26(17), 
 20803 ;;		 -> STR_25(17), STR_24(17), STR_23(14), STR_22(10), 
 20804 ;;		 -> STR_21(24), STR_7(7), STR_6(17), STR_5(18), 
 20805 ;;		 -> STR_4(16), STR_3(18), STR_2(14), STR_1(18), 
 20806 ;; Auto vars:     Size  Location     Type
 20807 ;;  printf          4    0        struct .
 20808 ;;  printf          2   39[COMRAM] int 
 20809 ;;  printf          2   35[COMRAM] unsigned int 
 20810 ;;  printf          2   33[COMRAM] unsigned int 
 20811 ;;  printf          2   31[COMRAM] PTR void [1]
 20812 ;;		 -> ?i2_printf(2), ?_printf(2), 
 20813 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 20814 ;;		 -> STR_126(7), count_total(2), printRTC@month(4), UI@month(4), 
 20815 ;;  printf          1   38[COMRAM] char 
 20816 ;;  printf          1   37[COMRAM] unsigned char 
 20817 ;;  printf          1   28[COMRAM] char 
 20818 ;; Return value:  Size  Location     Type
 20819 ;;                  2   12[COMRAM] int 
 20820 ;; Registers used:
 20821 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20822 ;; Tracked objects:
 20823 ;;		On entry : 0/0
 20824 ;;		On exit  : 0/0
 20825 ;;		Unchanged: 0/0
 20826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20827 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20828 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20829 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20830 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20831 ;;Total ram usage:       29 bytes
 20832 ;; Hardware stack levels used:    1
 20833 ;; Hardware stack levels required when called:    2
 20834 ;; This function calls:
 20835 ;;		i2___lwdiv
 20836 ;;		i2___lwmod
 20837 ;;		i2___wmul
 20838 ;;		i2_isdigit
 20839 ;;		i2_putch
 20840 ;; This function is called by:
 20841 ;;		_change_state_to_menu_11
 20842 ;;		_change_state_to_menu_23
 20843 ;;		_change_state_to_logs_11
 20844 ;;		_change_state_to_logs_12
 20845 ;;		_change_state_to_logs_22
 20846 ;;		_change_state_to_logs_23
 20847 ;;		_change_state_to_logs_33
 20848 ;;		_change_state_to_logs_34
 20849 ;;		_printSortTimer
 20850 ;;		i2_change_state_to_menu_start
 20851 ;;		i2_change_state_to_menu_12
 20852 ;;		i2_change_state_to_menu_22
 20853 ;;		i2_printRTC
 20854 ;; This function uses a non-reentrant model
 20855 ;;
 20856                           
 20857                           	psect	text79
 20858  00192C                     __ptext79:
 20859                           	opt stack 0
 20860  00192C                     i2_printf:
 20861                           	opt stack 19
 20862                           
 20863                           ;doprnt.c: 466: va_list ap;
 20864                           ;doprnt.c: 499: signed char c;
 20865                           ;doprnt.c: 501: int width;
 20866                           ;doprnt.c: 506: signed char prec;
 20867                           ;doprnt.c: 508: unsigned char flag;
 20868                           ;doprnt.c: 523: union {
 20869                           ;doprnt.c: 524: unsigned long vd;
 20870                           ;doprnt.c: 525: double integ;
 20871                           ;doprnt.c: 526: } tmpval;
 20872                           ;doprnt.c: 528: unsigned int val;
 20873                           ;doprnt.c: 529: unsigned len;
 20874                           ;doprnt.c: 530: const char * cp;
 20875                           ;doprnt.c: 533: *ap = __va_start();
 20876                           
 20877                           ;incstack = 0
 20878  00192C  0E0F               	movlw	low (?i2_printf+2)
 20879  00192E  6E20               	movwf	i2printf@ap,c
 20880  001930  0E00               	movlw	high (?i2_printf+2)
 20881  001932  6E21               	movwf	i2printf@ap+1,c
 20882                           
 20883                           ;doprnt.c: 536: while(c = *f++) {
 20884  001934  D1A4               	goto	i2l6196
 20885  001936                     i2l6066:
 20886                           
 20887                           ;doprnt.c: 538: if(c != '%')
 20888  001936  0E25               	movlw	37
 20889  001938  1827               	xorwf	i2printf@c,w,c
 20890  00193A  B4D8               	btfsc	status,2,c
 20891  00193C  D004               	goto	i2l6070
 20892                           
 20893                           ;doprnt.c: 540: {
 20894                           ;doprnt.c: 541: (putch(c) );
 20895  00193E  5027               	movf	i2printf@c,w,c
 20896  001940  EC76  F027         	call	i2_putch
 20897                           
 20898                           ;doprnt.c: 542: continue;
 20899  001944  D19C               	goto	i2l6196
 20900  001946                     i2l6070:
 20901                           
 20902                           ;doprnt.c: 543: }
 20903                           ;doprnt.c: 546: width = 0;
 20904  001946  0E00               	movlw	0
 20905  001948  6E29               	movwf	i2printf@width+1,c
 20906  00194A  0E00               	movlw	0
 20907  00194C  6E28               	movwf	i2printf@width,c
 20908                           
 20909                           ;doprnt.c: 548: flag = 0;
 20910  00194E  0E00               	movlw	0
 20911  001950  6E26               	movwf	i2printf@flag,c
 20912                           
 20913                           ;doprnt.c: 551: switch(*f) {
 20914                           
 20915                           ;doprnt.c: 550: for(;;) {
 20916  001952  D003               	goto	i2l6076
 20917  001954                     i2l6072:
 20918                           
 20919                           ;doprnt.c: 580: flag |= 0x04;
 20920  001954  8426               	bsf	i2printf@flag,2,c
 20921                           
 20922                           ;doprnt.c: 581: f++;
 20923  001956  4A0D               	infsnz	i2printf@f,f,c
 20924  001958  2A0E               	incf	i2printf@f+1,f,c
 20925  00195A                     i2l6076:
 20926  00195A  C00D  FFF6         	movff	i2printf@f,tblptrl
 20927  00195E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 20928  001962                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20929  001962  6AF8               	clrf	tblptru,c
 20930  001964                     	endif
 20931  001964                     	if	0	;tblptru may be non-zero
 20932  001964                     	endif
 20933  001964  0008               	tblrd		*
 20934  001966  50F5               	movf	tablat,w,c
 20935                           
 20936                           ; Switch size 1, requested type "space"
 20937                           ; Number of cases is 1, Range of values is 48 to 48
 20938                           ; switch strategies available:
 20939                           ; Name         Instructions Cycles
 20940                           ; simple_byte            4     3 (average)
 20941                           ;	Chosen strategy is simple_byte
 20942  001968  0A30               	xorlw	48	; case 48
 20943  00196A  B4D8               	btfsc	status,2,c
 20944  00196C  D7F3               	goto	i2l6072
 20945                           
 20946                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 20947                           
 20948                           ;doprnt.c: 586: }
 20949                           
 20950                           ;doprnt.c: 585: break;
 20951  00196E  C00D  FFF6         	movff	i2printf@f,tblptrl
 20952  001972  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 20953  001976                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20954  001976  6AF8               	clrf	tblptru,c
 20955  001978                     	endif
 20956  001978                     	if	0	;tblptru may be non-zero
 20957  001978                     	endif
 20958  001978  0008               	tblrd		*
 20959  00197A  50F5               	movf	tablat,w,c
 20960  00197C  EC20  F027         	call	i2_isdigit
 20961  001980  A0D8               	btfss	status,0,c
 20962  001982  D0A6               	goto	i2l6124
 20963                           
 20964                           ;doprnt.c: 598: width = 0;
 20965  001984  0E00               	movlw	0
 20966  001986  6E29               	movwf	i2printf@width+1,c
 20967  001988  0E00               	movlw	0
 20968  00198A  6E28               	movwf	i2printf@width,c
 20969  00198C                     i2l6082:
 20970                           
 20971                           ;doprnt.c: 600: width *= 10;
 20972  00198C  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 20973  001990  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 20974  001994  0E00               	movlw	0
 20975  001996  6E04               	movwf	i2___wmul@multiplicand+1,c
 20976  001998  0E0A               	movlw	10
 20977  00199A  6E03               	movwf	i2___wmul@multiplicand,c
 20978  00199C  ECC6  F026         	call	i2___wmul	;wreg free
 20979  0019A0  C001  F028         	movff	?i2___wmul,i2printf@width
 20980  0019A4  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 20981                           
 20982                           ;doprnt.c: 601: width += *f++ - '0';
 20983  0019A8  0ED0               	movlw	208
 20984  0019AA  6E19               	movwf	??i2_printf& (0+255),c
 20985  0019AC  0EFF               	movlw	255
 20986  0019AE  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 20987  0019B0  C00D  FFF6         	movff	i2printf@f,tblptrl
 20988  0019B4  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 20989  0019B8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20990  0019B8  6AF8               	clrf	tblptru,c
 20991  0019BA                     	endif
 20992  0019BA                     	if	0	;tblptru may be non-zero
 20993  0019BA                     	endif
 20994  0019BA  0008               	tblrd		*
 20995  0019BC  50F5               	movf	tablat,w,c
 20996  0019BE  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 20997  0019C0  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 20998  0019C2  5019               	movf	??i2_printf,w,c
 20999  0019C4  261B               	addwf	??i2_printf+2,f,c
 21000  0019C6  501A               	movf	??i2_printf+1,w,c
 21001  0019C8  221C               	addwfc	??i2_printf+3,f,c
 21002  0019CA  501B               	movf	??i2_printf+2,w,c
 21003  0019CC  2628               	addwf	i2printf@width,f,c
 21004  0019CE  501C               	movf	??i2_printf+3,w,c
 21005  0019D0  2229               	addwfc	i2printf@width+1,f,c
 21006  0019D2  4A0D               	infsnz	i2printf@f,f,c
 21007  0019D4  2A0E               	incf	i2printf@f+1,f,c
 21008                           
 21009                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 21010  0019D6  C00D  FFF6         	movff	i2printf@f,tblptrl
 21011  0019DA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21012  0019DE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21013  0019DE  6AF8               	clrf	tblptru,c
 21014  0019E0                     	endif
 21015  0019E0                     	if	0	;tblptru may be non-zero
 21016  0019E0                     	endif
 21017  0019E0  0008               	tblrd		*
 21018  0019E2  50F5               	movf	tablat,w,c
 21019  0019E4  EC20  F027         	call	i2_isdigit
 21020  0019E8  A0D8               	btfss	status,0,c
 21021  0019EA  D072               	goto	i2l6124
 21022  0019EC  D7CF               	goto	i2l6082
 21023  0019EE                     i2l6090:
 21024                           
 21025                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 21026  0019EE  C020  FFD9         	movff	i2printf@ap,fsr2l
 21027  0019F2  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 21028  0019F6  CFDE F01E          	movff	postinc2,i2printf@cp
 21029  0019FA  CFDD F01F          	movff	postdec2,i2printf@cp+1
 21030  0019FE  0E02               	movlw	2
 21031  001A00  2620               	addwf	i2printf@ap,f,c
 21032  001A02  0E00               	movlw	0
 21033  001A04  2221               	addwfc	i2printf@ap+1,f,c
 21034                           
 21035                           ;doprnt.c: 740: if(!cp)
 21036  001A06  501E               	movf	i2printf@cp,w,c
 21037  001A08  101F               	iorwf	i2printf@cp+1,w,c
 21038  001A0A  A4D8               	btfss	status,2,c
 21039  001A0C  D004               	goto	i2l6098
 21040                           
 21041                           ;doprnt.c: 741: cp = "(null)";
 21042  001A0E  0EB6               	movlw	low STR_126
 21043  001A10  6E1E               	movwf	i2printf@cp,c
 21044  001A12  0EFF               	movlw	high STR_126
 21045  001A14  6E1F               	movwf	i2printf@cp+1,c
 21046  001A16                     i2l6098:
 21047                           
 21048                           ;doprnt.c: 745: len = 0;
 21049  001A16  0E00               	movlw	0
 21050  001A18  6E23               	movwf	i2printf@len+1,c
 21051  001A1A  0E00               	movlw	0
 21052  001A1C  6E22               	movwf	i2printf@len,c
 21053                           
 21054                           ;doprnt.c: 746: while(cp[len])
 21055  001A1E  D002               	goto	i2l6102
 21056  001A20                     i2l6100:
 21057                           
 21058                           ;doprnt.c: 747: len++;
 21059  001A20  4A22               	infsnz	i2printf@len,f,c
 21060  001A22  2A23               	incf	i2printf@len+1,f,c
 21061  001A24                     i2l6102:
 21062  001A24  5022               	movf	i2printf@len,w,c
 21063  001A26  241E               	addwf	i2printf@cp,w,c
 21064  001A28  6E19               	movwf	??i2_printf& (0+255),c
 21065  001A2A  5023               	movf	i2printf@len+1,w,c
 21066  001A2C  201F               	addwfc	i2printf@cp+1,w,c
 21067  001A2E  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 21068  001A30  C019  FFF6         	movff	??i2_printf,tblptrl
 21069  001A34  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 21070  001A38  0E00               	movlw	low (__mediumconst shr (0+16))
 21071  001A3A  6EF8               	movwf	tblptru,c
 21072  001A3C  0E0F               	movlw	(high __ramtop+-1)
 21073  001A3E  64F7               	cpfsgt	tblptrh,c
 21074  001A40  D003               	bra	i2u476_47
 21075  001A42  0008               	tblrd		*
 21076  001A44  50F5               	movf	tablat,w,c
 21077  001A46  D005               	bra	i2u476_40
 21078  001A48                     i2u476_47:
 21079  001A48  CFF6 FFE9          	movff	tblptrl,fsr0l
 21080  001A4C  CFF7 FFEA          	movff	tblptrh,fsr0h
 21081  001A50  50EF               	movf	indf0,w,c
 21082  001A52                     i2u476_40:
 21083  001A52  0900               	iorlw	0
 21084  001A54  A4D8               	btfss	status,2,c
 21085  001A56  D7E4               	goto	i2l6100
 21086                           
 21087                           ;doprnt.c: 757: if(width > len)
 21088  001A58  5028               	movf	i2printf@width,w,c
 21089  001A5A  5C22               	subwf	i2printf@len,w,c
 21090  001A5C  5029               	movf	i2printf@width+1,w,c
 21091  001A5E  5823               	subwfb	i2printf@len+1,w,c
 21092  001A60  B0D8               	btfsc	status,0,c
 21093  001A62  D005               	goto	i2l6108
 21094                           
 21095                           ;doprnt.c: 758: width -= len;
 21096  001A64  5022               	movf	i2printf@len,w,c
 21097  001A66  5E28               	subwf	i2printf@width,f,c
 21098  001A68  5023               	movf	i2printf@len+1,w,c
 21099  001A6A  5A29               	subwfb	i2printf@width+1,f,c
 21100  001A6C  D008               	goto	i2l6112
 21101  001A6E                     i2l6108:
 21102                           
 21103                           ;doprnt.c: 759: else
 21104                           ;doprnt.c: 760: width = 0;
 21105  001A6E  0E00               	movlw	0
 21106  001A70  6E29               	movwf	i2printf@width+1,c
 21107  001A72  0E00               	movlw	0
 21108  001A74  6E28               	movwf	i2printf@width,c
 21109                           
 21110                           ;doprnt.c: 764: while(width--)
 21111  001A76  D003               	goto	i2l6112
 21112  001A78                     i2l6110:
 21113                           
 21114                           ;doprnt.c: 765: (putch(' ') );
 21115  001A78  0E20               	movlw	32
 21116  001A7A  EC76  F027         	call	i2_putch
 21117  001A7E                     i2l6112:
 21118  001A7E  0628               	decf	i2printf@width,f,c
 21119  001A80  A0D8               	btfss	status,0,c
 21120  001A82  0629               	decf	i2printf@width+1,f,c
 21121  001A84  2828               	incf	i2printf@width,w,c
 21122  001A86  E1F8               	bnz	i2l6110
 21123  001A88  2829               	incf	i2printf@width+1,w,c
 21124  001A8A  B4D8               	btfsc	status,2,c
 21125  001A8C  D016               	goto	i2l6118
 21126  001A8E  D7F4               	goto	i2l6110
 21127  001A90                     i2l6114:
 21128                           
 21129                           ;doprnt.c: 768: (putch(*cp++) );
 21130  001A90  C01E  FFF6         	movff	i2printf@cp,tblptrl
 21131  001A94  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 21132  001A98  0E00               	movlw	low (__mediumconst shr (0+16))
 21133  001A9A  6EF8               	movwf	tblptru,c
 21134  001A9C  0E0F               	movlw	(high __ramtop+-1)
 21135  001A9E  64F7               	cpfsgt	tblptrh,c
 21136  001AA0  D003               	bra	i2u480_47
 21137  001AA2  0008               	tblrd		*
 21138  001AA4  50F5               	movf	tablat,w,c
 21139  001AA6  D005               	bra	i2u480_40
 21140  001AA8                     i2u480_47:
 21141  001AA8  CFF6 FFE9          	movff	tblptrl,fsr0l
 21142  001AAC  CFF7 FFEA          	movff	tblptrh,fsr0h
 21143  001AB0  50EF               	movf	indf0,w,c
 21144  001AB2                     i2u480_40:
 21145  001AB2  EC76  F027         	call	i2_putch
 21146  001AB6  4A1E               	infsnz	i2printf@cp,f,c
 21147  001AB8  2A1F               	incf	i2printf@cp+1,f,c
 21148  001ABA                     i2l6118:
 21149  001ABA  0622               	decf	i2printf@len,f,c
 21150  001ABC  A0D8               	btfss	status,0,c
 21151  001ABE  0623               	decf	i2printf@len+1,f,c
 21152  001AC0  2822               	incf	i2printf@len,w,c
 21153  001AC2  E1E6               	bnz	i2l6114
 21154  001AC4  2823               	incf	i2printf@len+1,w,c
 21155  001AC6  B4D8               	btfsc	status,2,c
 21156  001AC8  D0DA               	goto	i2l6196
 21157  001ACA  D7E2               	goto	i2l6114
 21158  001ACC                     i2l6120:
 21159                           
 21160                           ;doprnt.c: 818: flag |= 0x40;
 21161  001ACC  8C26               	bsf	i2printf@flag,6,c
 21162                           
 21163                           ;doprnt.c: 822: }
 21164                           
 21165                           ;doprnt.c: 819: break;
 21166  001ACE  D01B               	goto	i2l1352
 21167  001AD0                     i2l6124:
 21168  001AD0  C00D  FFF6         	movff	i2printf@f,tblptrl
 21169  001AD4  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21170  001AD8  4A0D               	infsnz	i2printf@f,f,c
 21171  001ADA  2A0E               	incf	i2printf@f+1,f,c
 21172  001ADC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21173  001ADC  6AF8               	clrf	tblptru,c
 21174  001ADE                     	endif
 21175  001ADE                     	if	0	;tblptru may be non-zero
 21176  001ADE                     	endif
 21177  001ADE  0008               	tblrd		*
 21178  001AE0  CFF5 F027          	movff	tablat,i2printf@c
 21179  001AE4  5027               	movf	i2printf@c,w,c
 21180                           
 21181                           ; Switch size 1, requested type "space"
 21182                           ; Number of cases is 5, Range of values is 0 to 117
 21183                           ; switch strategies available:
 21184                           ; Name         Instructions Cycles
 21185                           ; simple_byte           16     9 (average)
 21186                           ;	Chosen strategy is simple_byte
 21187  001AE6  0A00               	xorlw	0	; case 0
 21188  001AE8  B4D8               	btfsc	status,2,c
 21189  001AEA  0012               	return	
 21190  001AEC  0A64               	xorlw	100	; case 100
 21191  001AEE  B4D8               	btfsc	status,2,c
 21192  001AF0  D00A               	goto	i2l1352
 21193  001AF2  0A0D               	xorlw	13	; case 105
 21194  001AF4  B4D8               	btfsc	status,2,c
 21195  001AF6  D007               	goto	i2l1352
 21196  001AF8  0A1A               	xorlw	26	; case 115
 21197  001AFA  B4D8               	btfsc	status,2,c
 21198  001AFC  D778               	goto	i2l6090
 21199  001AFE  0A06               	xorlw	6	; case 117
 21200  001B00  B4D8               	btfsc	status,2,c
 21201  001B02  D7E4               	goto	i2l6120
 21202  001B04  D0BC               	goto	i2l6196
 21203  001B06                     i2l1352:
 21204                           
 21205                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 21206  001B06  BC26               	btfsc	i2printf@flag,6,c
 21207  001B08  D015               	goto	i2l6136
 21208                           
 21209                           ;doprnt.c: 1253: {
 21210                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 21211  001B0A  C020  FFD9         	movff	i2printf@ap,fsr2l
 21212  001B0E  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 21213  001B12  CFDE F024          	movff	postinc2,i2printf@val
 21214  001B16  CFDD F025          	movff	postdec2,i2printf@val+1
 21215  001B1A  0E02               	movlw	2
 21216  001B1C  2620               	addwf	i2printf@ap,f,c
 21217  001B1E  0E00               	movlw	0
 21218  001B20  2221               	addwfc	i2printf@ap+1,f,c
 21219                           
 21220                           ;doprnt.c: 1261: if((int)val < 0) {
 21221  001B22  AE25               	btfss	i2printf@val+1,7,c
 21222  001B24  D013               	goto	i2l6140
 21223                           
 21224                           ;doprnt.c: 1262: flag |= 0x03;
 21225  001B26  0E03               	movlw	3
 21226  001B28  1226               	iorwf	i2printf@flag,f,c
 21227                           
 21228                           ;doprnt.c: 1263: val = -val;
 21229  001B2A  6C24               	negf	i2printf@val,c
 21230  001B2C  1E25               	comf	i2printf@val+1,f,c
 21231  001B2E  B0D8               	btfsc	status,0,c
 21232  001B30  2A25               	incf	i2printf@val+1,f,c
 21233                           
 21234                           ;doprnt.c: 1264: }
 21235                           ;doprnt.c: 1266: }
 21236  001B32  D00C               	goto	i2l6140
 21237  001B34                     i2l6136:
 21238                           
 21239                           ;doprnt.c: 1268: else
 21240                           ;doprnt.c: 1273: {
 21241                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 21242  001B34  C020  FFD9         	movff	i2printf@ap,fsr2l
 21243  001B38  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 21244  001B3C  CFDE F024          	movff	postinc2,i2printf@val
 21245  001B40  CFDD F025          	movff	postdec2,i2printf@val+1
 21246  001B44  0E02               	movlw	2
 21247  001B46  2620               	addwf	i2printf@ap,f,c
 21248  001B48  0E00               	movlw	0
 21249  001B4A  2221               	addwfc	i2printf@ap+1,f,c
 21250  001B4C                     i2l6140:
 21251                           
 21252                           ;doprnt.c: 1287: }
 21253                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 21254  001B4C  0E01               	movlw	1
 21255  001B4E  6E27               	movwf	i2printf@c,c
 21256  001B50                     i2l6142:
 21257  001B50  0E05               	movlw	5
 21258  001B52  1827               	xorwf	i2printf@c,w,c
 21259  001B54  B4D8               	btfsc	status,2,c
 21260  001B56  D015               	goto	i2l6154
 21261                           
 21262                           ;doprnt.c: 1306: if(val < dpowers[c])
 21263  001B58  5027               	movf	i2printf@c,w,c
 21264  001B5A  0D02               	mullw	2
 21265  001B5C  0E00               	movlw	low _dpowers
 21266  001B5E  24F3               	addwf	prodl,w,c
 21267  001B60  6EF6               	movwf	tblptrl,c
 21268  001B62  0EFB               	movlw	high _dpowers
 21269  001B64  20F4               	addwfc	prodh,w,c
 21270  001B66  6EF7               	movwf	tblptrh,c
 21271  001B68                     	if	1	;There are 3 active tblptr bytes
 21272  001B68  6AF8               	clrf	tblptru,c
 21273  001B6A  0E00               	movlw	low (__mediumconst shr (0+16))
 21274  001B6C  22F8               	addwfc	tblptru,f,c
 21275  001B6E                     	endif
 21276  001B6E  0009               	tblrd		*+
 21277  001B70  50F5               	movf	tablat,w,c
 21278  001B72  5C24               	subwf	i2printf@val,w,c
 21279  001B74  0009               	tblrd		*+
 21280  001B76  50F5               	movf	tablat,w,c
 21281  001B78  5825               	subwfb	i2printf@val+1,w,c
 21282  001B7A  A0D8               	btfss	status,0,c
 21283  001B7C  D002               	goto	i2l6154
 21284                           
 21285                           ;doprnt.c: 1307: break;
 21286  001B7E  2A27               	incf	i2printf@c,f,c
 21287  001B80  D7E7               	goto	i2l6142
 21288  001B82                     i2l6154:
 21289                           
 21290                           ;doprnt.c: 1345: if(width && flag & 0x03)
 21291  001B82  5028               	movf	i2printf@width,w,c
 21292  001B84  1029               	iorwf	i2printf@width+1,w,c
 21293  001B86  B4D8               	btfsc	status,2,c
 21294  001B88  D009               	goto	i2l6160
 21295  001B8A  C026  F019         	movff	i2printf@flag,??i2_printf
 21296  001B8E  0E03               	movlw	3
 21297  001B90  1619               	andwf	??i2_printf,f,c
 21298  001B92  B4D8               	btfsc	status,2,c
 21299  001B94  D003               	goto	i2l6160
 21300                           
 21301                           ;doprnt.c: 1346: width--;
 21302  001B96  0628               	decf	i2printf@width,f,c
 21303  001B98  A0D8               	btfss	status,0,c
 21304  001B9A  0629               	decf	i2printf@width+1,f,c
 21305  001B9C                     i2l6160:
 21306                           
 21307                           ;doprnt.c: 1381: if(width > c)
 21308  001B9C  0E80               	movlw	128
 21309  001B9E  BE27               	btfsc	i2printf@c,7,c
 21310  001BA0  0E7F               	movlw	127
 21311  001BA2  6E19               	movwf	??i2_printf& (0+255),c
 21312  001BA4  5028               	movf	i2printf@width,w,c
 21313  001BA6  5C27               	subwf	i2printf@c,w,c
 21314  001BA8  5029               	movf	i2printf@width+1,w,c
 21315  001BAA  0A80               	xorlw	128
 21316  001BAC  5819               	subwfb	??i2_printf& (0+255),w,c
 21317  001BAE  B0D8               	btfsc	status,0,c
 21318  001BB0  D007               	goto	i2l6164
 21319                           
 21320                           ;doprnt.c: 1382: width -= c;
 21321  001BB2  5027               	movf	i2printf@c,w,c
 21322  001BB4  5E28               	subwf	i2printf@width,f,c
 21323  001BB6  0E00               	movlw	0
 21324  001BB8  BE27               	btfsc	i2printf@c,7,c
 21325  001BBA  0EFF               	movlw	255
 21326  001BBC  5A29               	subwfb	i2printf@width+1,f,c
 21327  001BBE  D004               	goto	i2l6166
 21328  001BC0                     i2l6164:
 21329                           
 21330                           ;doprnt.c: 1383: else
 21331                           ;doprnt.c: 1384: width = 0;
 21332  001BC0  0E00               	movlw	0
 21333  001BC2  6E29               	movwf	i2printf@width+1,c
 21334  001BC4  0E00               	movlw	0
 21335  001BC6  6E28               	movwf	i2printf@width,c
 21336  001BC8                     i2l6166:
 21337                           
 21338                           ;doprnt.c: 1387: if(flag & 0x04) {
 21339  001BC8  A426               	btfss	i2printf@flag,2,c
 21340  001BCA  D014               	goto	i2l6178
 21341                           
 21342                           ;doprnt.c: 1392: if(flag & 0x03)
 21343  001BCC  C026  F019         	movff	i2printf@flag,??i2_printf
 21344  001BD0  0E03               	movlw	3
 21345  001BD2  1619               	andwf	??i2_printf,f,c
 21346  001BD4  B4D8               	btfsc	status,2,c
 21347  001BD6  D003               	goto	i2l6172
 21348                           
 21349                           ;doprnt.c: 1393: (putch('-') );
 21350  001BD8  0E2D               	movlw	45
 21351  001BDA  EC76  F027         	call	i2_putch
 21352  001BDE                     i2l6172:
 21353                           
 21354                           ;doprnt.c: 1415: if(width)
 21355  001BDE  5028               	movf	i2printf@width,w,c
 21356  001BE0  1029               	iorwf	i2printf@width+1,w,c
 21357  001BE2  B4D8               	btfsc	status,2,c
 21358  001BE4  D01E               	goto	i2l6188
 21359                           
 21360                           ;doprnt.c: 1417: (putch('0') );
 21361                           
 21362                           ;doprnt.c: 1416: do
 21363  001BE6  0E30               	movlw	48
 21364  001BE8  EC76  F027         	call	i2_putch
 21365                           
 21366                           ;doprnt.c: 1418: while(--width);
 21367  001BEC  0628               	decf	i2printf@width,f,c
 21368  001BEE  A0D8               	btfss	status,0,c
 21369  001BF0  0629               	decf	i2printf@width+1,f,c
 21370  001BF2  D7F5               	goto	i2l6172
 21371  001BF4                     i2l6178:
 21372                           
 21373                           ;doprnt.c: 1422: {
 21374                           ;doprnt.c: 1424: if(width
 21375                           ;doprnt.c: 1428: )
 21376  001BF4  5028               	movf	i2printf@width,w,c
 21377  001BF6  1029               	iorwf	i2printf@width+1,w,c
 21378  001BF8  B4D8               	btfsc	status,2,c
 21379  001BFA  D00A               	goto	i2l6184
 21380  001BFC                     i2l6180:
 21381                           
 21382                           ;doprnt.c: 1430: (putch(' ') );
 21383  001BFC  0E20               	movlw	32
 21384  001BFE  EC76  F027         	call	i2_putch
 21385                           
 21386                           ;doprnt.c: 1431: while(--width);
 21387  001C02  0628               	decf	i2printf@width,f,c
 21388  001C04  A0D8               	btfss	status,0,c
 21389  001C06  0629               	decf	i2printf@width+1,f,c
 21390  001C08  5028               	movf	i2printf@width,w,c
 21391  001C0A  1029               	iorwf	i2printf@width+1,w,c
 21392  001C0C  A4D8               	btfss	status,2,c
 21393  001C0E  D7F6               	goto	i2l6180
 21394  001C10                     i2l6184:
 21395                           
 21396                           ;doprnt.c: 1438: if(flag & 0x03)
 21397  001C10  C026  F019         	movff	i2printf@flag,??i2_printf
 21398  001C14  0E03               	movlw	3
 21399  001C16  1619               	andwf	??i2_printf,f,c
 21400  001C18  B4D8               	btfsc	status,2,c
 21401  001C1A  D003               	goto	i2l6188
 21402                           
 21403                           ;doprnt.c: 1439: (putch('-') );
 21404  001C1C  0E2D               	movlw	45
 21405  001C1E  EC76  F027         	call	i2_putch
 21406  001C22                     i2l6188:
 21407                           
 21408                           ;doprnt.c: 1469: }
 21409                           ;doprnt.c: 1472: prec = c;
 21410  001C22  C027  F01D         	movff	i2printf@c,i2printf@prec
 21411                           
 21412                           ;doprnt.c: 1474: while(prec--) {
 21413  001C26  D027               	goto	i2l6194
 21414  001C28                     i2l6190:
 21415                           
 21416                           ;doprnt.c: 1478: {
 21417                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 21418  001C28  501D               	movf	i2printf@prec,w,c
 21419  001C2A  0D02               	mullw	2
 21420  001C2C  0E00               	movlw	low _dpowers
 21421  001C2E  24F3               	addwf	prodl,w,c
 21422  001C30  6EF6               	movwf	tblptrl,c
 21423  001C32  0EFB               	movlw	high _dpowers
 21424  001C34  20F4               	addwfc	prodh,w,c
 21425  001C36  6EF7               	movwf	tblptrh,c
 21426  001C38                     	if	1	;There are 3 active tblptr bytes
 21427  001C38  6AF8               	clrf	tblptru,c
 21428  001C3A  0E00               	movlw	low (__mediumconst shr (0+16))
 21429  001C3C  22F8               	addwfc	tblptru,f,c
 21430  001C3E                     	endif
 21431  001C3E  0009               	tblrd		*+
 21432  001C40  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 21433  001C44  000A               	tblrd		*-
 21434  001C46  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 21435  001C4A  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 21436  001C4E  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 21437  001C52  ECC0  F023         	call	i2___lwdiv	;wreg free
 21438  001C56  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 21439  001C5A  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 21440  001C5E  0E00               	movlw	0
 21441  001C60  6E04               	movwf	i2___lwmod@divisor+1,c
 21442  001C62  0E0A               	movlw	10
 21443  001C64  6E03               	movwf	i2___lwmod@divisor,c
 21444  001C66  EC7F  F024         	call	i2___lwmod	;wreg free
 21445  001C6A  5001               	movf	?i2___lwmod,w,c
 21446  001C6C  0F30               	addlw	48
 21447  001C6E  6E27               	movwf	i2printf@c,c
 21448                           
 21449                           ;doprnt.c: 1523: }
 21450                           ;doprnt.c: 1524: (putch(c) );
 21451  001C70  5027               	movf	i2printf@c,w,c
 21452  001C72  EC76  F027         	call	i2_putch
 21453  001C76                     i2l6194:
 21454  001C76  061D               	decf	i2printf@prec,f,c
 21455  001C78  281D               	incf	i2printf@prec,w,c
 21456  001C7A  A4D8               	btfss	status,2,c
 21457  001C7C  D7D5               	goto	i2l6190
 21458  001C7E                     i2l6196:
 21459  001C7E  C00D  FFF6         	movff	i2printf@f,tblptrl
 21460  001C82  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21461  001C86  4A0D               	infsnz	i2printf@f,f,c
 21462  001C88  2A0E               	incf	i2printf@f+1,f,c
 21463  001C8A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21464  001C8A  6AF8               	clrf	tblptru,c
 21465  001C8C                     	endif
 21466  001C8C                     	if	0	;tblptru may be non-zero
 21467  001C8C                     	endif
 21468  001C8C  0008               	tblrd		*
 21469  001C8E  CFF5 F027          	movff	tablat,i2printf@c
 21470  001C92  5027               	movf	i2printf@c,w,c
 21471  001C94  B4D8               	btfsc	status,2,c
 21472  001C96  0012               	return	
 21473  001C98  D64E               	goto	i2l6066
 21474  001C9A                     __end_ofi2_printf:
 21475                           	opt stack 0
 21476                           pclatu	equ	0xFFB
 21477                           pclath	equ	0xFFA
 21478                           tblptru	equ	0xFF8
 21479                           tblptrh	equ	0xFF7
 21480                           tblptrl	equ	0xFF6
 21481                           tablat	equ	0xFF5
 21482                           prodh	equ	0xFF4
 21483                           prodl	equ	0xFF3
 21484                           intcon	equ	0xFF2
 21485                           intcon2	equ	0xFF1
 21486                           intcon3	equ	0xFF0
 21487                           indf0	equ	0xFEF
 21488                           postinc0	equ	0xFEE
 21489                           fsr0h	equ	0xFEA
 21490                           fsr0l	equ	0xFE9
 21491                           wreg	equ	0xFE8
 21492                           postdec1	equ	0xFE5
 21493                           fsr1h	equ	0xFE2
 21494                           fsr1l	equ	0xFE1
 21495                           indf2	equ	0xFDF
 21496                           postinc2	equ	0xFDE
 21497                           postdec2	equ	0xFDD
 21498                           fsr2h	equ	0xFDA
 21499                           fsr2l	equ	0xFD9
 21500                           status	equ	0xFD8
 21501                           
 21502 ;; *************** function i2_putch *****************
 21503 ;; Defined at:
 21504 ;;		line 20 in file "lcd.c"
 21505 ;; Parameters:    Size  Location     Type
 21506 ;;  data            1    wreg     unsigned char 
 21507 ;; Auto vars:     Size  Location     Type
 21508 ;;  data            1    2[COMRAM] unsigned char 
 21509 ;; Return value:  Size  Location     Type
 21510 ;;                  1    wreg      void 
 21511 ;; Registers used:
 21512 ;;		wreg, status,2, status,0, cstack
 21513 ;; Tracked objects:
 21514 ;;		On entry : 0/0
 21515 ;;		On exit  : 0/0
 21516 ;;		Unchanged: 0/0
 21517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21519 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21521 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21522 ;;Total ram usage:        1 bytes
 21523 ;; Hardware stack levels used:    1
 21524 ;; Hardware stack levels required when called:    1
 21525 ;; This function calls:
 21526 ;;		i2_lcdNibble
 21527 ;; This function is called by:
 21528 ;;		i2_printf
 21529 ;; This function uses a non-reentrant model
 21530 ;;
 21531                           
 21532                           	psect	text80
 21533  004EEC                     __ptext80:
 21534                           	opt stack 0
 21535  004EEC                     i2_putch:
 21536                           	opt stack 19
 21537                           
 21538                           ;incstack = 0
 21539                           ;i2putch@data stored from wreg
 21540  004EEC  6E03               	movwf	i2putch@data,c
 21541                           
 21542                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 21543  004EEE  848C               	bsf	3980,2,c	;volatile
 21544                           
 21545                           ;lcd.c: 22: lcdNibble(data);
 21546  004EF0  5003               	movf	i2putch@data,w,c
 21547  004EF2  EC95  F023         	call	i2_lcdNibble
 21548  004EF6  0012               	return		;funcret
 21549  004EF8                     __end_ofi2_putch:
 21550                           	opt stack 0
 21551                           pclatu	equ	0xFFB
 21552                           pclath	equ	0xFFA
 21553                           tblptru	equ	0xFF8
 21554                           tblptrh	equ	0xFF7
 21555                           tblptrl	equ	0xFF6
 21556                           tablat	equ	0xFF5
 21557                           prodh	equ	0xFF4
 21558                           prodl	equ	0xFF3
 21559                           intcon	equ	0xFF2
 21560                           intcon2	equ	0xFF1
 21561                           intcon3	equ	0xFF0
 21562                           indf0	equ	0xFEF
 21563                           postinc0	equ	0xFEE
 21564                           fsr0h	equ	0xFEA
 21565                           fsr0l	equ	0xFE9
 21566                           wreg	equ	0xFE8
 21567                           postdec1	equ	0xFE5
 21568                           fsr1h	equ	0xFE2
 21569                           fsr1l	equ	0xFE1
 21570                           indf2	equ	0xFDF
 21571                           postinc2	equ	0xFDE
 21572                           postdec2	equ	0xFDD
 21573                           fsr2h	equ	0xFDA
 21574                           fsr2l	equ	0xFD9
 21575                           status	equ	0xFD8
 21576                           
 21577 ;; *************** function i2_isdigit *****************
 21578 ;; Defined at:
 21579 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 21580 ;; Parameters:    Size  Location     Type
 21581 ;;  c               1    wreg     unsigned char 
 21582 ;; Auto vars:     Size  Location     Type
 21583 ;;  c               1    2[COMRAM] unsigned char 
 21584 ;; Return value:  Size  Location     Type
 21585 ;;		None               void
 21586 ;; Registers used:
 21587 ;;		wreg, status,2, status,0
 21588 ;; Tracked objects:
 21589 ;;		On entry : 0/0
 21590 ;;		On exit  : 0/0
 21591 ;;		Unchanged: 0/0
 21592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21594 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21595 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21596 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21597 ;;Total ram usage:        3 bytes
 21598 ;; Hardware stack levels used:    1
 21599 ;; This function calls:
 21600 ;;		Nothing
 21601 ;; This function is called by:
 21602 ;;		i2_printf
 21603 ;; This function uses a non-reentrant model
 21604 ;;
 21605                           
 21606                           	psect	text81
 21607  004E40                     __ptext81:
 21608                           	opt stack 0
 21609  004E40                     i2_isdigit:
 21610                           	opt stack 20
 21611                           
 21612                           ;incstack = 0
 21613                           ;i2isdigit@c stored from wreg
 21614  004E40  6E03               	movwf	i2isdigit@c,c
 21615  004E42  0E00               	movlw	0
 21616  004E44  6E02               	movwf	i2_isdigit$1975,c
 21617  004E46  0E3A               	movlw	58
 21618  004E48  6003               	cpfslt	i2isdigit@c,c
 21619  004E4A  D005               	goto	i2l5770
 21620  004E4C  0E2F               	movlw	47
 21621  004E4E  6403               	cpfsgt	i2isdigit@c,c
 21622  004E50  D002               	goto	i2l5770
 21623  004E52  0E01               	movlw	1
 21624  004E54  6E02               	movwf	i2_isdigit$1975,c
 21625  004E56                     i2l5770:
 21626  004E56  C002  F001         	movff	i2_isdigit$1975,??i2_isdigit
 21627  004E5A  3001               	rrcf	??i2_isdigit,w,c
 21628  004E5C  0012               	return	
 21629  004E5E                     __end_ofi2_isdigit:
 21630                           	opt stack 0
 21631                           pclatu	equ	0xFFB
 21632                           pclath	equ	0xFFA
 21633                           tblptru	equ	0xFF8
 21634                           tblptrh	equ	0xFF7
 21635                           tblptrl	equ	0xFF6
 21636                           tablat	equ	0xFF5
 21637                           prodh	equ	0xFF4
 21638                           prodl	equ	0xFF3
 21639                           intcon	equ	0xFF2
 21640                           intcon2	equ	0xFF1
 21641                           intcon3	equ	0xFF0
 21642                           indf0	equ	0xFEF
 21643                           postinc0	equ	0xFEE
 21644                           fsr0h	equ	0xFEA
 21645                           fsr0l	equ	0xFE9
 21646                           wreg	equ	0xFE8
 21647                           postdec1	equ	0xFE5
 21648                           fsr1h	equ	0xFE2
 21649                           fsr1l	equ	0xFE1
 21650                           indf2	equ	0xFDF
 21651                           postinc2	equ	0xFDE
 21652                           postdec2	equ	0xFDD
 21653                           fsr2h	equ	0xFDA
 21654                           fsr2l	equ	0xFD9
 21655                           status	equ	0xFD8
 21656                           
 21657 ;; *************** function i2___wmul *****************
 21658 ;; Defined at:
 21659 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 21660 ;; Parameters:    Size  Location     Type
 21661 ;;  multiplier      2    0[COMRAM] unsigned int 
 21662 ;;  multiplicand    2    2[COMRAM] unsigned int 
 21663 ;; Auto vars:     Size  Location     Type
 21664 ;;  __wmul          2    4[COMRAM] unsigned int 
 21665 ;; Return value:  Size  Location     Type
 21666 ;;                  2    0[COMRAM] unsigned int 
 21667 ;; Registers used:
 21668 ;;		wreg, status,2, status,0, prodl, prodh
 21669 ;; Tracked objects:
 21670 ;;		On entry : 0/0
 21671 ;;		On exit  : 0/0
 21672 ;;		Unchanged: 0/0
 21673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21674 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21675 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21677 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21678 ;;Total ram usage:        6 bytes
 21679 ;; Hardware stack levels used:    1
 21680 ;; This function calls:
 21681 ;;		Nothing
 21682 ;; This function is called by:
 21683 ;;		_printSortTimer
 21684 ;;		_retrieveLog
 21685 ;;		i2_printf
 21686 ;; This function uses a non-reentrant model
 21687 ;;
 21688                           
 21689                           	psect	text82
 21690  004D8C                     __ptext82:
 21691                           	opt stack 0
 21692  004D8C                     i2___wmul:
 21693                           	opt stack 20
 21694                           
 21695                           ;incstack = 0
 21696  004D8C  5001               	movf	i2___wmul@multiplier,w,c
 21697  004D8E  0203               	mulwf	i2___wmul@multiplicand,c
 21698  004D90  CFF3 F005          	movff	prodl,i2___wmul@product
 21699  004D94  CFF4 F006          	movff	prodh,i2___wmul@product+1
 21700  004D98  5001               	movf	i2___wmul@multiplier,w,c
 21701  004D9A  0204               	mulwf	i2___wmul@multiplicand+1,c
 21702  004D9C  50F3               	movf	prodl,w,c
 21703  004D9E  2606               	addwf	i2___wmul@product+1,f,c
 21704  004DA0  5002               	movf	i2___wmul@multiplier+1,w,c
 21705  004DA2  0203               	mulwf	i2___wmul@multiplicand,c
 21706  004DA4  50F3               	movf	prodl,w,c
 21707  004DA6  2606               	addwf	i2___wmul@product+1,f,c
 21708  004DA8  C005  F001         	movff	i2___wmul@product,?i2___wmul
 21709  004DAC  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 21710  004DB0  0012               	return	
 21711  004DB2                     __end_ofi2___wmul:
 21712                           	opt stack 0
 21713                           pclatu	equ	0xFFB
 21714                           pclath	equ	0xFFA
 21715                           tblptru	equ	0xFF8
 21716                           tblptrh	equ	0xFF7
 21717                           tblptrl	equ	0xFF6
 21718                           tablat	equ	0xFF5
 21719                           prodh	equ	0xFF4
 21720                           prodl	equ	0xFF3
 21721                           intcon	equ	0xFF2
 21722                           intcon2	equ	0xFF1
 21723                           intcon3	equ	0xFF0
 21724                           indf0	equ	0xFEF
 21725                           postinc0	equ	0xFEE
 21726                           fsr0h	equ	0xFEA
 21727                           fsr0l	equ	0xFE9
 21728                           wreg	equ	0xFE8
 21729                           postdec1	equ	0xFE5
 21730                           fsr1h	equ	0xFE2
 21731                           fsr1l	equ	0xFE1
 21732                           indf2	equ	0xFDF
 21733                           postinc2	equ	0xFDE
 21734                           postdec2	equ	0xFDD
 21735                           fsr2h	equ	0xFDA
 21736                           fsr2l	equ	0xFD9
 21737                           status	equ	0xFD8
 21738                           
 21739 ;; *************** function i2___lwmod *****************
 21740 ;; Defined at:
 21741 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 21742 ;; Parameters:    Size  Location     Type
 21743 ;;  dividend        2    0[COMRAM] unsigned int 
 21744 ;;  divisor         2    2[COMRAM] unsigned int 
 21745 ;; Auto vars:     Size  Location     Type
 21746 ;;  __lwmod         1    4[COMRAM] unsigned char 
 21747 ;; Return value:  Size  Location     Type
 21748 ;;                  2    0[COMRAM] unsigned int 
 21749 ;; Registers used:
 21750 ;;		wreg, status,2, status,0
 21751 ;; Tracked objects:
 21752 ;;		On entry : 0/0
 21753 ;;		On exit  : 0/0
 21754 ;;		Unchanged: 0/0
 21755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21756 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21757 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21759 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21760 ;;Total ram usage:        5 bytes
 21761 ;; Hardware stack levels used:    1
 21762 ;; This function calls:
 21763 ;;		Nothing
 21764 ;; This function is called by:
 21765 ;;		_printSortTimer
 21766 ;;		i2_printf
 21767 ;; This function uses a non-reentrant model
 21768 ;;
 21769                           
 21770                           	psect	text83
 21771  0048FE                     __ptext83:
 21772                           	opt stack 0
 21773  0048FE                     i2___lwmod:
 21774                           	opt stack 20
 21775                           
 21776                           ;incstack = 0
 21777  0048FE  5003               	movf	i2___lwmod@divisor,w,c
 21778  004900  1004               	iorwf	i2___lwmod@divisor+1,w,c
 21779  004902  B4D8               	btfsc	status,2,c
 21780  004904  D018               	goto	i2l1809
 21781  004906  0E01               	movlw	1
 21782  004908  6E05               	movwf	i2___lwmod@counter,c
 21783  00490A  D004               	goto	i2l5802
 21784  00490C                     i2l5800:
 21785  00490C  90D8               	bcf	status,0,c
 21786  00490E  3603               	rlcf	i2___lwmod@divisor,f,c
 21787  004910  3604               	rlcf	i2___lwmod@divisor+1,f,c
 21788  004912  2A05               	incf	i2___lwmod@counter,f,c
 21789  004914                     i2l5802:
 21790  004914  AE04               	btfss	i2___lwmod@divisor+1,7,c
 21791  004916  D7FA               	goto	i2l5800
 21792  004918                     i2l5804:
 21793  004918  5003               	movf	i2___lwmod@divisor,w,c
 21794  00491A  5C01               	subwf	i2___lwmod@dividend,w,c
 21795  00491C  5004               	movf	i2___lwmod@divisor+1,w,c
 21796  00491E  5802               	subwfb	i2___lwmod@dividend+1,w,c
 21797  004920  A0D8               	btfss	status,0,c
 21798  004922  D004               	goto	i2l5808
 21799  004924  5003               	movf	i2___lwmod@divisor,w,c
 21800  004926  5E01               	subwf	i2___lwmod@dividend,f,c
 21801  004928  5004               	movf	i2___lwmod@divisor+1,w,c
 21802  00492A  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 21803  00492C                     i2l5808:
 21804  00492C  90D8               	bcf	status,0,c
 21805  00492E  3204               	rrcf	i2___lwmod@divisor+1,f,c
 21806  004930  3203               	rrcf	i2___lwmod@divisor,f,c
 21807  004932  2E05               	decfsz	i2___lwmod@counter,f,c
 21808  004934  D7F1               	goto	i2l5804
 21809  004936                     i2l1809:
 21810  004936  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 21811  00493A  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 21812  00493E  0012               	return		;funcret
 21813  004940                     __end_ofi2___lwmod:
 21814                           	opt stack 0
 21815                           pclatu	equ	0xFFB
 21816                           pclath	equ	0xFFA
 21817                           tblptru	equ	0xFF8
 21818                           tblptrh	equ	0xFF7
 21819                           tblptrl	equ	0xFF6
 21820                           tablat	equ	0xFF5
 21821                           prodh	equ	0xFF4
 21822                           prodl	equ	0xFF3
 21823                           intcon	equ	0xFF2
 21824                           intcon2	equ	0xFF1
 21825                           intcon3	equ	0xFF0
 21826                           indf0	equ	0xFEF
 21827                           postinc0	equ	0xFEE
 21828                           fsr0h	equ	0xFEA
 21829                           fsr0l	equ	0xFE9
 21830                           wreg	equ	0xFE8
 21831                           postdec1	equ	0xFE5
 21832                           fsr1h	equ	0xFE2
 21833                           fsr1l	equ	0xFE1
 21834                           indf2	equ	0xFDF
 21835                           postinc2	equ	0xFDE
 21836                           postdec2	equ	0xFDD
 21837                           fsr2h	equ	0xFDA
 21838                           fsr2l	equ	0xFD9
 21839                           status	equ	0xFD8
 21840                           
 21841 ;; *************** function i2___lwdiv *****************
 21842 ;; Defined at:
 21843 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 21844 ;; Parameters:    Size  Location     Type
 21845 ;;  dividend        2    5[COMRAM] unsigned int 
 21846 ;;  divisor         2    7[COMRAM] unsigned int 
 21847 ;; Auto vars:     Size  Location     Type
 21848 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 21849 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 21850 ;; Return value:  Size  Location     Type
 21851 ;;                  2    5[COMRAM] unsigned int 
 21852 ;; Registers used:
 21853 ;;		wreg, status,2, status,0
 21854 ;; Tracked objects:
 21855 ;;		On entry : 0/0
 21856 ;;		On exit  : 0/0
 21857 ;;		Unchanged: 0/0
 21858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21859 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21860 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21862 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21863 ;;Total ram usage:        7 bytes
 21864 ;; Hardware stack levels used:    1
 21865 ;; This function calls:
 21866 ;;		Nothing
 21867 ;; This function is called by:
 21868 ;;		_printSortTimer
 21869 ;;		i2_printf
 21870 ;; This function uses a non-reentrant model
 21871 ;;
 21872                           
 21873                           	psect	text84
 21874  004780                     __ptext84:
 21875                           	opt stack 0
 21876  004780                     i2___lwdiv:
 21877                           	opt stack 20
 21878                           
 21879                           ;incstack = 0
 21880  004780  0E00               	movlw	0
 21881  004782  6E0B               	movwf	i2___lwdiv@quotient+1,c
 21882  004784  0E00               	movlw	0
 21883  004786  6E0A               	movwf	i2___lwdiv@quotient,c
 21884  004788  5008               	movf	i2___lwdiv@divisor,w,c
 21885  00478A  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 21886  00478C  B4D8               	btfsc	status,2,c
 21887  00478E  D01C               	goto	i2l1799
 21888  004790  0E01               	movlw	1
 21889  004792  6E0C               	movwf	i2___lwdiv@counter,c
 21890  004794  D004               	goto	i2l5782
 21891  004796                     i2l5780:
 21892  004796  90D8               	bcf	status,0,c
 21893  004798  3608               	rlcf	i2___lwdiv@divisor,f,c
 21894  00479A  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 21895  00479C  2A0C               	incf	i2___lwdiv@counter,f,c
 21896  00479E                     i2l5782:
 21897  00479E  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 21898  0047A0  D7FA               	goto	i2l5780
 21899  0047A2                     i2l5784:
 21900  0047A2  90D8               	bcf	status,0,c
 21901  0047A4  360A               	rlcf	i2___lwdiv@quotient,f,c
 21902  0047A6  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 21903  0047A8  5008               	movf	i2___lwdiv@divisor,w,c
 21904  0047AA  5C06               	subwf	i2___lwdiv@dividend,w,c
 21905  0047AC  5009               	movf	i2___lwdiv@divisor+1,w,c
 21906  0047AE  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 21907  0047B0  A0D8               	btfss	status,0,c
 21908  0047B2  D005               	goto	i2l5792
 21909  0047B4  5008               	movf	i2___lwdiv@divisor,w,c
 21910  0047B6  5E06               	subwf	i2___lwdiv@dividend,f,c
 21911  0047B8  5009               	movf	i2___lwdiv@divisor+1,w,c
 21912  0047BA  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 21913  0047BC  800A               	bsf	i2___lwdiv@quotient,0,c
 21914  0047BE                     i2l5792:
 21915  0047BE  90D8               	bcf	status,0,c
 21916  0047C0  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 21917  0047C2  3208               	rrcf	i2___lwdiv@divisor,f,c
 21918  0047C4  2E0C               	decfsz	i2___lwdiv@counter,f,c
 21919  0047C6  D7ED               	goto	i2l5784
 21920  0047C8                     i2l1799:
 21921  0047C8  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 21922  0047CC  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 21923  0047D0  0012               	return		;funcret
 21924  0047D2                     __end_ofi2___lwdiv:
 21925                           	opt stack 0
 21926                           pclatu	equ	0xFFB
 21927                           pclath	equ	0xFFA
 21928                           tblptru	equ	0xFF8
 21929                           tblptrh	equ	0xFF7
 21930                           tblptrl	equ	0xFF6
 21931                           tablat	equ	0xFF5
 21932                           prodh	equ	0xFF4
 21933                           prodl	equ	0xFF3
 21934                           intcon	equ	0xFF2
 21935                           intcon2	equ	0xFF1
 21936                           intcon3	equ	0xFF0
 21937                           indf0	equ	0xFEF
 21938                           postinc0	equ	0xFEE
 21939                           fsr0h	equ	0xFEA
 21940                           fsr0l	equ	0xFE9
 21941                           wreg	equ	0xFE8
 21942                           postdec1	equ	0xFE5
 21943                           fsr1h	equ	0xFE2
 21944                           fsr1l	equ	0xFE1
 21945                           indf2	equ	0xFDF
 21946                           postinc2	equ	0xFDE
 21947                           postdec2	equ	0xFDD
 21948                           fsr2h	equ	0xFDA
 21949                           fsr2l	equ	0xFD9
 21950                           status	equ	0xFD8
 21951                           
 21952 ;; *************** function i2_lcdInst *****************
 21953 ;; Defined at:
 21954 ;;		line 15 in file "lcd.c"
 21955 ;; Parameters:    Size  Location     Type
 21956 ;;  data            1    wreg     unsigned char 
 21957 ;; Auto vars:     Size  Location     Type
 21958 ;;  data            1    2[COMRAM] unsigned char 
 21959 ;; Return value:  Size  Location     Type
 21960 ;;                  1    wreg      void 
 21961 ;; Registers used:
 21962 ;;		wreg, status,2, status,0, cstack
 21963 ;; Tracked objects:
 21964 ;;		On entry : 0/0
 21965 ;;		On exit  : 0/0
 21966 ;;		Unchanged: 0/0
 21967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21969 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21971 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21972 ;;Total ram usage:        1 bytes
 21973 ;; Hardware stack levels used:    1
 21974 ;; Hardware stack levels required when called:    1
 21975 ;; This function calls:
 21976 ;;		i2_lcdNibble
 21977 ;; This function is called by:
 21978 ;;		_change_state_to_menu_11
 21979 ;;		_change_state_to_menu_23
 21980 ;;		_change_state_to_logs_11
 21981 ;;		_change_state_to_logs_12
 21982 ;;		_change_state_to_logs_22
 21983 ;;		_change_state_to_logs_23
 21984 ;;		_change_state_to_logs_33
 21985 ;;		_change_state_to_logs_34
 21986 ;;		_printSortTimer
 21987 ;;		i2_change_state_to_menu_start
 21988 ;;		i2_change_state_to_menu_12
 21989 ;;		i2_change_state_to_menu_22
 21990 ;;		i2_printRTC
 21991 ;; This function uses a non-reentrant model
 21992 ;;
 21993                           
 21994                           	psect	text85
 21995  004EF8                     __ptext85:
 21996                           	opt stack 0
 21997  004EF8                     i2_lcdInst:
 21998                           	opt stack 19
 21999                           
 22000                           ;incstack = 0
 22001                           ;i2lcdInst@data stored from wreg
 22002  004EF8  6E03               	movwf	i2lcdInst@data,c
 22003                           
 22004                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 22005  004EFA  948C               	bcf	3980,2,c	;volatile
 22006                           
 22007                           ;lcd.c: 17: lcdNibble(data);
 22008  004EFC  5003               	movf	i2lcdInst@data,w,c
 22009  004EFE  EC95  F023         	call	i2_lcdNibble
 22010  004F02  0012               	return		;funcret
 22011  004F04                     __end_ofi2_lcdInst:
 22012                           	opt stack 0
 22013                           pclatu	equ	0xFFB
 22014                           pclath	equ	0xFFA
 22015                           tblptru	equ	0xFF8
 22016                           tblptrh	equ	0xFF7
 22017                           tblptrl	equ	0xFF6
 22018                           tablat	equ	0xFF5
 22019                           prodh	equ	0xFF4
 22020                           prodl	equ	0xFF3
 22021                           intcon	equ	0xFF2
 22022                           intcon2	equ	0xFF1
 22023                           intcon3	equ	0xFF0
 22024                           indf0	equ	0xFEF
 22025                           postinc0	equ	0xFEE
 22026                           fsr0h	equ	0xFEA
 22027                           fsr0l	equ	0xFE9
 22028                           wreg	equ	0xFE8
 22029                           postdec1	equ	0xFE5
 22030                           fsr1h	equ	0xFE2
 22031                           fsr1l	equ	0xFE1
 22032                           indf2	equ	0xFDF
 22033                           postinc2	equ	0xFDE
 22034                           postdec2	equ	0xFDD
 22035                           fsr2h	equ	0xFDA
 22036                           fsr2l	equ	0xFD9
 22037                           status	equ	0xFD8
 22038                           
 22039 ;; *************** function i2_lcdNibble *****************
 22040 ;; Defined at:
 22041 ;;		line 25 in file "lcd.c"
 22042 ;; Parameters:    Size  Location     Type
 22043 ;;  data            1    wreg     unsigned char 
 22044 ;; Auto vars:     Size  Location     Type
 22045 ;;  data            1    1[COMRAM] unsigned char 
 22046 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 22047 ;; Return value:  Size  Location     Type
 22048 ;;                  1    wreg      void 
 22049 ;; Registers used:
 22050 ;;		wreg, status,2, status,0
 22051 ;; Tracked objects:
 22052 ;;		On entry : 0/0
 22053 ;;		On exit  : 0/0
 22054 ;;		Unchanged: 0/0
 22055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22057 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22059 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22060 ;;Total ram usage:        2 bytes
 22061 ;; Hardware stack levels used:    1
 22062 ;; This function calls:
 22063 ;;		Nothing
 22064 ;; This function is called by:
 22065 ;;		i2_lcdInst
 22066 ;;		i2_putch
 22067 ;; This function uses a non-reentrant model
 22068 ;;
 22069                           
 22070                           	psect	text86
 22071  00472A                     __ptext86:
 22072                           	opt stack 0
 22073  00472A                     i2_lcdNibble:
 22074                           	opt stack 19
 22075                           
 22076                           ;incstack = 0
 22077                           ;i2lcdNibble@data stored from wreg
 22078  00472A  6E02               	movwf	i2lcdNibble@data,c
 22079                           
 22080                           ;lcd.c: 27: char temp = data & 0xF0;
 22081  00472C  5002               	movf	i2lcdNibble@data,w,c
 22082  00472E  0BF0               	andlw	240
 22083  004730  6E01               	movwf	i2lcdNibble@temp,c
 22084                           
 22085                           ;lcd.c: 28: LATD = LATD & 0x0F;
 22086  004732  508C               	movf	3980,w,c	;volatile
 22087  004734  0B0F               	andlw	15
 22088  004736  6E8C               	movwf	3980,c	;volatile
 22089                           
 22090                           ;lcd.c: 29: LATD = temp | LATD;
 22091  004738  5001               	movf	i2lcdNibble@temp,w,c
 22092  00473A  108C               	iorwf	3980,w,c	;volatile
 22093  00473C  6E8C               	movwf	3980,c	;volatile
 22094                           
 22095                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 22096  00473E  868C               	bsf	3980,3,c	;volatile
 22097                           
 22098                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 22099  004740  0E42               	movlw	66
 22100  004742                     i2u957_47:
 22101  004742  2EE8               	decfsz	wreg,f,c
 22102  004744  D7FE               	bra	i2u957_47
 22103  004746  D000               	nop2	
 22104                           
 22105                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 22106  004748  968C               	bcf	3980,3,c	;volatile
 22107                           
 22108                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 22109  00474A  0E42               	movlw	66
 22110  00474C                     i2u958_47:
 22111  00474C  2EE8               	decfsz	wreg,f,c
 22112  00474E  D7FE               	bra	i2u958_47
 22113  004750  D000               	nop2	
 22114                           
 22115                           ;lcd.c: 36: data = data << 4;
 22116  004752  3802               	swapf	i2lcdNibble@data,w,c
 22117  004754  0BF0               	andlw	240
 22118  004756  6E02               	movwf	i2lcdNibble@data,c
 22119                           
 22120                           ;lcd.c: 38: temp = data & 0xF0;
 22121  004758  5002               	movf	i2lcdNibble@data,w,c
 22122  00475A  0BF0               	andlw	240
 22123  00475C  6E01               	movwf	i2lcdNibble@temp,c
 22124                           
 22125                           ;lcd.c: 39: LATD = LATD & 0x0F;
 22126  00475E  508C               	movf	3980,w,c	;volatile
 22127  004760  0B0F               	andlw	15
 22128  004762  6E8C               	movwf	3980,c	;volatile
 22129                           
 22130                           ;lcd.c: 40: LATD = temp | LATD;
 22131  004764  5001               	movf	i2lcdNibble@temp,w,c
 22132  004766  108C               	iorwf	3980,w,c	;volatile
 22133  004768  6E8C               	movwf	3980,c	;volatile
 22134                           
 22135                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 22136  00476A  868C               	bsf	3980,3,c	;volatile
 22137                           
 22138                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 22139  00476C  0E42               	movlw	66
 22140  00476E                     i2u959_47:
 22141  00476E  2EE8               	decfsz	wreg,f,c
 22142  004770  D7FE               	bra	i2u959_47
 22143  004772  D000               	nop2	
 22144                           
 22145                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 22146  004774  968C               	bcf	3980,3,c	;volatile
 22147                           
 22148                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 22149  004776  0E42               	movlw	66
 22150  004778                     i2u960_47:
 22151  004778  2EE8               	decfsz	wreg,f,c
 22152  00477A  D7FE               	bra	i2u960_47
 22153  00477C  D000               	nop2	
 22154  00477E  0012               	return		;funcret
 22155  004780                     __end_ofi2_lcdNibble:
 22156                           	opt stack 0
 22157                           pclatu	equ	0xFFB
 22158                           pclath	equ	0xFFA
 22159                           tblptru	equ	0xFF8
 22160                           tblptrh	equ	0xFF7
 22161                           tblptrl	equ	0xFF6
 22162                           tablat	equ	0xFF5
 22163                           prodh	equ	0xFF4
 22164                           prodl	equ	0xFF3
 22165                           intcon	equ	0xFF2
 22166                           intcon2	equ	0xFF1
 22167                           intcon3	equ	0xFF0
 22168                           indf0	equ	0xFEF
 22169                           postinc0	equ	0xFEE
 22170                           fsr0h	equ	0xFEA
 22171                           fsr0l	equ	0xFE9
 22172                           wreg	equ	0xFE8
 22173                           postdec1	equ	0xFE5
 22174                           fsr1h	equ	0xFE2
 22175                           fsr1l	equ	0xFE1
 22176                           indf2	equ	0xFDF
 22177                           postinc2	equ	0xFDE
 22178                           postdec2	equ	0xFDD
 22179                           fsr2h	equ	0xFDA
 22180                           fsr2l	equ	0xFD9
 22181                           status	equ	0xFD8
 22182                           
 22183 ;; *************** function i2_getRTC *****************
 22184 ;; Defined at:
 22185 ;;		line 44 in file "RTC.c"
 22186 ;; Parameters:    Size  Location     Type
 22187 ;;		None
 22188 ;; Auto vars:     Size  Location     Type
 22189 ;;  getRTC          2    3[COMRAM] int 
 22190 ;; Return value:  Size  Location     Type
 22191 ;;                  1    wreg      void 
 22192 ;; Registers used:
 22193 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 22194 ;; Tracked objects:
 22195 ;;		On entry : 0/0
 22196 ;;		On exit  : 0/0
 22197 ;;		Unchanged: 0/0
 22198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22200 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22202 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22203 ;;Total ram usage:        2 bytes
 22204 ;; Hardware stack levels used:    1
 22205 ;; Hardware stack levels required when called:    2
 22206 ;; This function calls:
 22207 ;;		i2_I2C_Master_Read
 22208 ;;		i2_I2C_Master_Start
 22209 ;;		i2_I2C_Master_Stop
 22210 ;;		i2_I2C_Master_Write
 22211 ;; This function is called by:
 22212 ;;		_printSortTimer
 22213 ;;		i2_printRTC
 22214 ;; This function uses a non-reentrant model
 22215 ;;
 22216                           
 22217                           	psect	text87
 22218  00447C                     __ptext87:
 22219                           	opt stack 0
 22220  00447C                     i2_getRTC:
 22221                           	opt stack 18
 22222                           
 22223                           ;RTC.c: 48: I2C_Master_Start();
 22224                           
 22225                           ;incstack = 0
 22226  00447C  EC9C  F027         	call	i2_I2C_Master_Start	;wreg free
 22227                           
 22228                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 22229  004480  0E00               	movlw	0
 22230  004482  6E03               	movwf	i2I2C_Master_Write@d+1,c
 22231  004484  0ED0               	movlw	208
 22232  004486  6E02               	movwf	i2I2C_Master_Write@d,c
 22233  004488  EC87  F027         	call	i2_I2C_Master_Write	;wreg free
 22234                           
 22235                           ;RTC.c: 50: I2C_Master_Write(0x00);
 22236  00448C  0E00               	movlw	0
 22237  00448E  6E03               	movwf	i2I2C_Master_Write@d+1,c
 22238  004490  0E00               	movlw	0
 22239  004492  6E02               	movwf	i2I2C_Master_Write@d,c
 22240  004494  EC87  F027         	call	i2_I2C_Master_Write	;wreg free
 22241                           
 22242                           ;RTC.c: 51: I2C_Master_Stop();
 22243  004498  EC98  F027         	call	i2_I2C_Master_Stop	;wreg free
 22244                           
 22245                           ;RTC.c: 54: I2C_Master_Start();
 22246  00449C  EC9C  F027         	call	i2_I2C_Master_Start	;wreg free
 22247                           
 22248                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 22249  0044A0  0E00               	movlw	0
 22250  0044A2  6E03               	movwf	i2I2C_Master_Write@d+1,c
 22251  0044A4  0ED1               	movlw	209
 22252  0044A6  6E02               	movwf	i2I2C_Master_Write@d,c
 22253  0044A8  EC87  F027         	call	i2_I2C_Master_Write	;wreg free
 22254                           
 22255                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 22256  0044AC  0E00               	movlw	0
 22257  0044AE  6E05               	movwf	i2getRTC@i+1,c
 22258  0044B0  0E00               	movlw	0
 22259  0044B2  6E04               	movwf	i2getRTC@i,c
 22260  0044B4                     i2l6038:
 22261  0044B4  BE05               	btfsc	i2getRTC@i+1,7,c
 22262  0044B6  D006               	goto	i2l6042
 22263  0044B8  5005               	movf	i2getRTC@i+1,w,c
 22264  0044BA  E111               	bnz	i2l6048
 22265  0044BC  0E06               	movlw	6
 22266  0044BE  5C04               	subwf	i2getRTC@i,w,c
 22267  0044C0  B0D8               	btfsc	status,0,c
 22268  0044C2  D00D               	goto	i2l6048
 22269  0044C4                     i2l6042:
 22270                           
 22271                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 22272  0044C4  0E24               	movlw	low _time
 22273  0044C6  2404               	addwf	i2getRTC@i,w,c
 22274  0044C8  6ED9               	movwf	fsr2l,c
 22275  0044CA  0E01               	movlw	high _time
 22276  0044CC  2005               	addwfc	i2getRTC@i+1,w,c
 22277  0044CE  6EDA               	movwf	fsr2h,c
 22278  0044D0  0E01               	movlw	1
 22279  0044D2  ECD9  F026         	call	i2_I2C_Master_Read
 22280  0044D6  6EDF               	movwf	indf2,c
 22281  0044D8  4A04               	infsnz	i2getRTC@i,f,c
 22282  0044DA  2A05               	incf	i2getRTC@i+1,f,c
 22283  0044DC  D7EB               	goto	i2l6038
 22284  0044DE                     i2l6048:
 22285                           
 22286                           ;RTC.c: 58: }
 22287                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 22288  0044DE  0E00               	movlw	0
 22289  0044E0  ECD9  F026         	call	i2_I2C_Master_Read
 22290  0044E4  0101               	movlb	1	; () banked
 22291  0044E6  6F2A               	movwf	(_time+6)& (0+255),b
 22292                           
 22293                           ;RTC.c: 60: I2C_Master_Stop();
 22294  0044E8  EC98  F027         	call	i2_I2C_Master_Stop	;wreg free
 22295  0044EC  0012               	return		;funcret
 22296  0044EE                     __end_ofi2_getRTC:
 22297                           	opt stack 0
 22298                           pclatu	equ	0xFFB
 22299                           pclath	equ	0xFFA
 22300                           tblptru	equ	0xFF8
 22301                           tblptrh	equ	0xFF7
 22302                           tblptrl	equ	0xFF6
 22303                           tablat	equ	0xFF5
 22304                           prodh	equ	0xFF4
 22305                           prodl	equ	0xFF3
 22306                           intcon	equ	0xFF2
 22307                           intcon2	equ	0xFF1
 22308                           intcon3	equ	0xFF0
 22309                           indf0	equ	0xFEF
 22310                           postinc0	equ	0xFEE
 22311                           fsr0h	equ	0xFEA
 22312                           fsr0l	equ	0xFE9
 22313                           wreg	equ	0xFE8
 22314                           postdec1	equ	0xFE5
 22315                           fsr1h	equ	0xFE2
 22316                           fsr1l	equ	0xFE1
 22317                           indf2	equ	0xFDF
 22318                           postinc2	equ	0xFDE
 22319                           postdec2	equ	0xFDD
 22320                           fsr2h	equ	0xFDA
 22321                           fsr2l	equ	0xFD9
 22322                           status	equ	0xFD8
 22323                           
 22324 ;; *************** function i2_I2C_Master_Write *****************
 22325 ;; Defined at:
 22326 ;;		line 49 in file "I2C.c"
 22327 ;; Parameters:    Size  Location     Type
 22328 ;;  d               2    1[COMRAM] unsigned int 
 22329 ;; Auto vars:     Size  Location     Type
 22330 ;;		None
 22331 ;; Return value:  Size  Location     Type
 22332 ;;                  1    wreg      void 
 22333 ;; Registers used:
 22334 ;;		wreg, status,2, status,0, cstack
 22335 ;; Tracked objects:
 22336 ;;		On entry : 0/0
 22337 ;;		On exit  : 0/0
 22338 ;;		Unchanged: 0/0
 22339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22340 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22343 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22344 ;;Total ram usage:        2 bytes
 22345 ;; Hardware stack levels used:    1
 22346 ;; Hardware stack levels required when called:    1
 22347 ;; This function calls:
 22348 ;;		i2_I2C_Master_Wait
 22349 ;; This function is called by:
 22350 ;;		i2_getRTC
 22351 ;; This function uses a non-reentrant model
 22352 ;;
 22353                           
 22354                           	psect	text88
 22355  004F0E                     __ptext88:
 22356                           	opt stack 0
 22357  004F0E                     i2_I2C_Master_Write:
 22358                           	opt stack 18
 22359                           
 22360                           ;I2C.c: 51: I2C_Master_Wait();
 22361                           
 22362                           ;incstack = 0
 22363  004F0E  EC5D  F027         	call	i2_I2C_Master_Wait	;wreg free
 22364                           
 22365                           ;I2C.c: 52: SSPBUF = d;
 22366  004F12  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 22367  004F16  0012               	return		;funcret
 22368  004F18                     __end_ofi2_I2C_Master_Write:
 22369                           	opt stack 0
 22370                           pclatu	equ	0xFFB
 22371                           pclath	equ	0xFFA
 22372                           tblptru	equ	0xFF8
 22373                           tblptrh	equ	0xFF7
 22374                           tblptrl	equ	0xFF6
 22375                           tablat	equ	0xFF5
 22376                           prodh	equ	0xFF4
 22377                           prodl	equ	0xFF3
 22378                           intcon	equ	0xFF2
 22379                           intcon2	equ	0xFF1
 22380                           intcon3	equ	0xFF0
 22381                           indf0	equ	0xFEF
 22382                           postinc0	equ	0xFEE
 22383                           fsr0h	equ	0xFEA
 22384                           fsr0l	equ	0xFE9
 22385                           wreg	equ	0xFE8
 22386                           postdec1	equ	0xFE5
 22387                           fsr1h	equ	0xFE2
 22388                           fsr1l	equ	0xFE1
 22389                           indf2	equ	0xFDF
 22390                           postinc2	equ	0xFDE
 22391                           postdec2	equ	0xFDD
 22392                           fsr2h	equ	0xFDA
 22393                           fsr2l	equ	0xFD9
 22394                           status	equ	0xFD8
 22395                           
 22396 ;; *************** function i2_I2C_Master_Stop *****************
 22397 ;; Defined at:
 22398 ;;		line 43 in file "I2C.c"
 22399 ;; Parameters:    Size  Location     Type
 22400 ;;		None
 22401 ;; Auto vars:     Size  Location     Type
 22402 ;;		None
 22403 ;; Return value:  Size  Location     Type
 22404 ;;                  1    wreg      void 
 22405 ;; Registers used:
 22406 ;;		wreg, status,2, status,0, cstack
 22407 ;; Tracked objects:
 22408 ;;		On entry : 0/0
 22409 ;;		On exit  : 0/0
 22410 ;;		Unchanged: 0/0
 22411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22415 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22416 ;;Total ram usage:        0 bytes
 22417 ;; Hardware stack levels used:    1
 22418 ;; Hardware stack levels required when called:    1
 22419 ;; This function calls:
 22420 ;;		i2_I2C_Master_Wait
 22421 ;; This function is called by:
 22422 ;;		i2_getRTC
 22423 ;; This function uses a non-reentrant model
 22424 ;;
 22425                           
 22426                           	psect	text89
 22427  004F30                     __ptext89:
 22428                           	opt stack 0
 22429  004F30                     i2_I2C_Master_Stop:
 22430                           	opt stack 18
 22431                           
 22432                           ;I2C.c: 45: I2C_Master_Wait();
 22433                           
 22434                           ;incstack = 0
 22435  004F30  EC5D  F027         	call	i2_I2C_Master_Wait	;wreg free
 22436                           
 22437                           ;I2C.c: 46: PEN = 1;
 22438  004F34  84C5               	bsf	4037,2,c	;volatile
 22439  004F36  0012               	return		;funcret
 22440  004F38                     __end_ofi2_I2C_Master_Stop:
 22441                           	opt stack 0
 22442                           pclatu	equ	0xFFB
 22443                           pclath	equ	0xFFA
 22444                           tblptru	equ	0xFF8
 22445                           tblptrh	equ	0xFF7
 22446                           tblptrl	equ	0xFF6
 22447                           tablat	equ	0xFF5
 22448                           prodh	equ	0xFF4
 22449                           prodl	equ	0xFF3
 22450                           intcon	equ	0xFF2
 22451                           intcon2	equ	0xFF1
 22452                           intcon3	equ	0xFF0
 22453                           indf0	equ	0xFEF
 22454                           postinc0	equ	0xFEE
 22455                           fsr0h	equ	0xFEA
 22456                           fsr0l	equ	0xFE9
 22457                           wreg	equ	0xFE8
 22458                           postdec1	equ	0xFE5
 22459                           fsr1h	equ	0xFE2
 22460                           fsr1l	equ	0xFE1
 22461                           indf2	equ	0xFDF
 22462                           postinc2	equ	0xFDE
 22463                           postdec2	equ	0xFDD
 22464                           fsr2h	equ	0xFDA
 22465                           fsr2l	equ	0xFD9
 22466                           status	equ	0xFD8
 22467                           
 22468 ;; *************** function i2_I2C_Master_Start *****************
 22469 ;; Defined at:
 22470 ;;		line 31 in file "I2C.c"
 22471 ;; Parameters:    Size  Location     Type
 22472 ;;		None
 22473 ;; Auto vars:     Size  Location     Type
 22474 ;;		None
 22475 ;; Return value:  Size  Location     Type
 22476 ;;                  1    wreg      void 
 22477 ;; Registers used:
 22478 ;;		wreg, status,2, status,0, cstack
 22479 ;; Tracked objects:
 22480 ;;		On entry : 0/0
 22481 ;;		On exit  : 0/0
 22482 ;;		Unchanged: 0/0
 22483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22485 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22487 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22488 ;;Total ram usage:        0 bytes
 22489 ;; Hardware stack levels used:    1
 22490 ;; Hardware stack levels required when called:    1
 22491 ;; This function calls:
 22492 ;;		i2_I2C_Master_Wait
 22493 ;; This function is called by:
 22494 ;;		i2_getRTC
 22495 ;; This function uses a non-reentrant model
 22496 ;;
 22497                           
 22498                           	psect	text90
 22499  004F38                     __ptext90:
 22500                           	opt stack 0
 22501  004F38                     i2_I2C_Master_Start:
 22502                           	opt stack 18
 22503                           
 22504                           ;I2C.c: 33: I2C_Master_Wait();
 22505                           
 22506                           ;incstack = 0
 22507  004F38  EC5D  F027         	call	i2_I2C_Master_Wait	;wreg free
 22508                           
 22509                           ;I2C.c: 34: SEN = 1;
 22510  004F3C  80C5               	bsf	4037,0,c	;volatile
 22511  004F3E  0012               	return		;funcret
 22512  004F40                     __end_ofi2_I2C_Master_Start:
 22513                           	opt stack 0
 22514                           pclatu	equ	0xFFB
 22515                           pclath	equ	0xFFA
 22516                           tblptru	equ	0xFF8
 22517                           tblptrh	equ	0xFF7
 22518                           tblptrl	equ	0xFF6
 22519                           tablat	equ	0xFF5
 22520                           prodh	equ	0xFF4
 22521                           prodl	equ	0xFF3
 22522                           intcon	equ	0xFF2
 22523                           intcon2	equ	0xFF1
 22524                           intcon3	equ	0xFF0
 22525                           indf0	equ	0xFEF
 22526                           postinc0	equ	0xFEE
 22527                           fsr0h	equ	0xFEA
 22528                           fsr0l	equ	0xFE9
 22529                           wreg	equ	0xFE8
 22530                           postdec1	equ	0xFE5
 22531                           fsr1h	equ	0xFE2
 22532                           fsr1l	equ	0xFE1
 22533                           indf2	equ	0xFDF
 22534                           postinc2	equ	0xFDE
 22535                           postdec2	equ	0xFDD
 22536                           fsr2h	equ	0xFDA
 22537                           fsr2l	equ	0xFD9
 22538                           status	equ	0xFD8
 22539                           
 22540 ;; *************** function i2_I2C_Master_Read *****************
 22541 ;; Defined at:
 22542 ;;		line 55 in file "I2C.c"
 22543 ;; Parameters:    Size  Location     Type
 22544 ;;  a               1    wreg     unsigned char 
 22545 ;; Auto vars:     Size  Location     Type
 22546 ;;  a               1    1[COMRAM] unsigned char 
 22547 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 22548 ;; Return value:  Size  Location     Type
 22549 ;;                  1    wreg      unsigned char 
 22550 ;; Registers used:
 22551 ;;		wreg, status,2, status,0, cstack
 22552 ;; Tracked objects:
 22553 ;;		On entry : 0/0
 22554 ;;		On exit  : 0/0
 22555 ;;		Unchanged: 0/0
 22556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22558 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22560 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22561 ;;Total ram usage:        2 bytes
 22562 ;; Hardware stack levels used:    1
 22563 ;; Hardware stack levels required when called:    1
 22564 ;; This function calls:
 22565 ;;		i2_I2C_Master_Wait
 22566 ;; This function is called by:
 22567 ;;		i2_getRTC
 22568 ;; This function uses a non-reentrant model
 22569 ;;
 22570                           
 22571                           	psect	text91
 22572  004DB2                     __ptext91:
 22573                           	opt stack 0
 22574  004DB2                     i2_I2C_Master_Read:
 22575                           	opt stack 18
 22576                           
 22577                           ;incstack = 0
 22578                           ;i2I2C_Master_Read@a stored from wreg
 22579  004DB2  6E02               	movwf	i2I2C_Master_Read@a,c
 22580                           
 22581                           ;I2C.c: 57: unsigned char temp;
 22582                           ;I2C.c: 58: I2C_Master_Wait();
 22583  004DB4  EC5D  F027         	call	i2_I2C_Master_Wait	;wreg free
 22584                           
 22585                           ;I2C.c: 59: RCEN = 1;
 22586  004DB8  86C5               	bsf	4037,3,c	;volatile
 22587                           
 22588                           ;I2C.c: 60: I2C_Master_Wait();
 22589  004DBA  EC5D  F027         	call	i2_I2C_Master_Wait	;wreg free
 22590                           
 22591                           ;I2C.c: 61: temp = SSPBUF;
 22592  004DBE  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 22593                           
 22594                           ;I2C.c: 62: I2C_Master_Wait();
 22595  004DC2  EC5D  F027         	call	i2_I2C_Master_Wait	;wreg free
 22596                           
 22597                           ;I2C.c: 63: ACKDT = (a)?0:1;
 22598  004DC6  5002               	movf	i2I2C_Master_Read@a,w,c
 22599  004DC8  A4D8               	btfss	status,2,c
 22600  004DCA  D002               	goto	i2u421_40
 22601  004DCC  8AC5               	bsf	4037,5,c	;volatile
 22602  004DCE  D001               	goto	i2l5746
 22603  004DD0                     i2u421_40:
 22604  004DD0  9AC5               	bcf	4037,5,c	;volatile
 22605  004DD2                     i2l5746:
 22606                           
 22607                           ;I2C.c: 64: ACKEN = 1;
 22608  004DD2  88C5               	bsf	4037,4,c	;volatile
 22609                           
 22610                           ;I2C.c: 65: return temp;
 22611  004DD4  5003               	movf	i2I2C_Master_Read@temp,w,c
 22612  004DD6  0012               	return	
 22613  004DD8                     __end_ofi2_I2C_Master_Read:
 22614                           	opt stack 0
 22615                           pclatu	equ	0xFFB
 22616                           pclath	equ	0xFFA
 22617                           tblptru	equ	0xFF8
 22618                           tblptrh	equ	0xFF7
 22619                           tblptrl	equ	0xFF6
 22620                           tablat	equ	0xFF5
 22621                           prodh	equ	0xFF4
 22622                           prodl	equ	0xFF3
 22623                           intcon	equ	0xFF2
 22624                           intcon2	equ	0xFF1
 22625                           intcon3	equ	0xFF0
 22626                           indf0	equ	0xFEF
 22627                           postinc0	equ	0xFEE
 22628                           fsr0h	equ	0xFEA
 22629                           fsr0l	equ	0xFE9
 22630                           wreg	equ	0xFE8
 22631                           postdec1	equ	0xFE5
 22632                           fsr1h	equ	0xFE2
 22633                           fsr1l	equ	0xFE1
 22634                           indf2	equ	0xFDF
 22635                           postinc2	equ	0xFDE
 22636                           postdec2	equ	0xFDD
 22637                           fsr2h	equ	0xFDA
 22638                           fsr2l	equ	0xFD9
 22639                           status	equ	0xFD8
 22640                           
 22641 ;; *************** function i2_I2C_Master_Wait *****************
 22642 ;; Defined at:
 22643 ;;		line 26 in file "I2C.c"
 22644 ;; Parameters:    Size  Location     Type
 22645 ;;		None
 22646 ;; Auto vars:     Size  Location     Type
 22647 ;;		None
 22648 ;; Return value:  Size  Location     Type
 22649 ;;                  1    wreg      void 
 22650 ;; Registers used:
 22651 ;;		wreg, status,2, status,0
 22652 ;; Tracked objects:
 22653 ;;		On entry : 0/0
 22654 ;;		On exit  : 0/0
 22655 ;;		Unchanged: 0/0
 22656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22659 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22660 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22661 ;;Total ram usage:        1 bytes
 22662 ;; Hardware stack levels used:    1
 22663 ;; This function calls:
 22664 ;;		Nothing
 22665 ;; This function is called by:
 22666 ;;		i2_I2C_Master_Start
 22667 ;;		i2_I2C_Master_Stop
 22668 ;;		i2_I2C_Master_Write
 22669 ;;		i2_I2C_Master_Read
 22670 ;; This function uses a non-reentrant model
 22671 ;;
 22672                           
 22673                           	psect	text92
 22674  004EBA                     __ptext92:
 22675                           	opt stack 0
 22676  004EBA                     i2_I2C_Master_Wait:
 22677                           	opt stack 18
 22678  004EBA                     i2l66:
 22679  004EBA  B4C7               	btfsc	4039,2,c	;volatile
 22680  004EBC  D7FE               	goto	i2l66
 22681  004EBE  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 22682  004EC2  0E1F               	movlw	31
 22683  004EC4  1601               	andwf	??i2_I2C_Master_Wait,f,c
 22684  004EC6  B4D8               	btfsc	status,2,c
 22685  004EC8  0012               	return	
 22686  004ECA  D7F7               	goto	i2l66
 22687  004ECC                     __end_ofi2_I2C_Master_Wait:
 22688                           	opt stack 0
 22689                           pclatu	equ	0xFFB
 22690                           pclath	equ	0xFFA
 22691                           tblptru	equ	0xFF8
 22692                           tblptrh	equ	0xFF7
 22693                           tblptrl	equ	0xFF6
 22694                           tablat	equ	0xFF5
 22695                           prodh	equ	0xFF4
 22696                           prodl	equ	0xFF3
 22697                           intcon	equ	0xFF2
 22698                           intcon2	equ	0xFF1
 22699                           intcon3	equ	0xFF0
 22700                           indf0	equ	0xFEF
 22701                           postinc0	equ	0xFEE
 22702                           fsr0h	equ	0xFEA
 22703                           fsr0l	equ	0xFE9
 22704                           wreg	equ	0xFE8
 22705                           postdec1	equ	0xFE5
 22706                           fsr1h	equ	0xFE2
 22707                           fsr1l	equ	0xFE1
 22708                           indf2	equ	0xFDF
 22709                           postinc2	equ	0xFDE
 22710                           postdec2	equ	0xFDD
 22711                           fsr2h	equ	0xFDA
 22712                           fsr2l	equ	0xFD9
 22713                           status	equ	0xFD8
 22714                           pclatu	equ	0xFFB
 22715                           pclath	equ	0xFFA
 22716                           tblptru	equ	0xFF8
 22717                           tblptrh	equ	0xFF7
 22718                           tblptrl	equ	0xFF6
 22719                           tablat	equ	0xFF5
 22720                           prodh	equ	0xFF4
 22721                           prodl	equ	0xFF3
 22722                           intcon	equ	0xFF2
 22723                           intcon2	equ	0xFF1
 22724                           intcon3	equ	0xFF0
 22725                           indf0	equ	0xFEF
 22726                           postinc0	equ	0xFEE
 22727                           fsr0h	equ	0xFEA
 22728                           fsr0l	equ	0xFE9
 22729                           wreg	equ	0xFE8
 22730                           postdec1	equ	0xFE5
 22731                           fsr1h	equ	0xFE2
 22732                           fsr1l	equ	0xFE1
 22733                           indf2	equ	0xFDF
 22734                           postinc2	equ	0xFDE
 22735                           postdec2	equ	0xFDD
 22736                           fsr2h	equ	0xFDA
 22737                           fsr2l	equ	0xFD9
 22738                           status	equ	0xFD8
 22739                           
 22740                           	psect	rparam
 22741  0000                     pclatu	equ	0xFFB
 22742                           pclath	equ	0xFFA
 22743                           tblptru	equ	0xFF8
 22744                           tblptrh	equ	0xFF7
 22745                           tblptrl	equ	0xFF6
 22746                           tablat	equ	0xFF5
 22747                           prodh	equ	0xFF4
 22748                           prodl	equ	0xFF3
 22749                           intcon	equ	0xFF2
 22750                           intcon2	equ	0xFF1
 22751                           intcon3	equ	0xFF0
 22752                           indf0	equ	0xFEF
 22753                           postinc0	equ	0xFEE
 22754                           fsr0h	equ	0xFEA
 22755                           fsr0l	equ	0xFE9
 22756                           wreg	equ	0xFE8
 22757                           postdec1	equ	0xFE5
 22758                           fsr1h	equ	0xFE2
 22759                           fsr1l	equ	0xFE1
 22760                           indf2	equ	0xFDF
 22761                           postinc2	equ	0xFDE
 22762                           postdec2	equ	0xFDD
 22763                           fsr2h	equ	0xFDA
 22764                           fsr2l	equ	0xFD9
 22765                           status	equ	0xFD8
 22766                           
 22767                           	psect	temp
 22768  00007E                     btemp:
 22769                           	opt stack 0
 22770  00007E                     	ds	1
 22771  0000                     int$flags	set	btemp
 22772                           pclatu	equ	0xFFB
 22773                           pclath	equ	0xFFA
 22774                           tblptru	equ	0xFF8
 22775                           tblptrh	equ	0xFF7
 22776                           tblptrl	equ	0xFF6
 22777                           tablat	equ	0xFF5
 22778                           prodh	equ	0xFF4
 22779                           prodl	equ	0xFF3
 22780                           intcon	equ	0xFF2
 22781                           intcon2	equ	0xFF1
 22782                           intcon3	equ	0xFF0
 22783                           indf0	equ	0xFEF
 22784                           postinc0	equ	0xFEE
 22785                           fsr0h	equ	0xFEA
 22786                           fsr0l	equ	0xFE9
 22787                           wreg	equ	0xFE8
 22788                           postdec1	equ	0xFE5
 22789                           fsr1h	equ	0xFE2
 22790                           fsr1l	equ	0xFE1
 22791                           indf2	equ	0xFDF
 22792                           postinc2	equ	0xFDE
 22793                           postdec2	equ	0xFDD
 22794                           fsr2h	equ	0xFDA
 22795                           fsr2l	equ	0xFD9
 22796                           status	equ	0xFD8


Data Sizes:
    Strings     1269
    Constant    27
    Data        8
    BSS         128
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     88     125
    BANK0           128     90     128
    BANK1           256      0      61
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_126(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_125(CODE[18]), STR_124(CODE[18]), STR_123(CODE[18]), STR_122(CODE[18]), 
		 -> STR_121(CODE[18]), STR_120(CODE[18]), STR_119(CODE[17]), STR_118(CODE[17]), 
		 -> STR_117(CODE[3]), STR_116(CODE[15]), STR_115(CODE[3]), STR_114(CODE[15]), 
		 -> STR_113(CODE[11]), STR_112(CODE[18]), STR_111(CODE[18]), STR_110(CODE[17]), 
		 -> STR_109(CODE[15]), STR_108(CODE[15]), STR_107(CODE[15]), STR_106(CODE[17]), 
		 -> STR_105(CODE[17]), STR_104(CODE[17]), STR_103(CODE[16]), STR_102(CODE[17]), 
		 -> STR_101(CODE[17]), STR_100(CODE[17]), STR_99(CODE[17]), STR_98(CODE[17]), 
		 -> STR_97(CODE[17]), STR_96(CODE[15]), STR_95(CODE[11]), STR_94(CODE[17]), 
		 -> STR_93(CODE[11]), STR_92(CODE[17]), STR_91(CODE[14]), STR_90(CODE[15]), 
		 -> STR_89(CODE[14]), STR_88(CODE[10]), STR_87(CODE[9]), STR_86(CODE[9]), 
		 -> STR_85(CODE[10]), STR_84(CODE[10]), STR_83(CODE[16]), STR_82(CODE[15]), 
		 -> STR_81(CODE[3]), STR_80(CODE[15]), STR_79(CODE[13]), STR_78(CODE[14]), 
		 -> STR_77(CODE[8]), STR_76(CODE[14]), STR_75(CODE[15]), STR_74(CODE[12]), 
		 -> STR_73(CODE[14]), STR_72(CODE[17]), STR_71(CODE[14]), STR_70(CODE[15]), 
		 -> STR_69(CODE[17]), STR_68(CODE[17]), STR_67(CODE[7]), STR_66(CODE[21]), 
		 -> STR_65(CODE[13]), STR_64(CODE[11]), STR_63(CODE[24]), STR_50(CODE[17]), 
		 -> STR_49(CODE[17]), STR_48(CODE[17]), STR_47(CODE[17]), STR_46(CODE[17]), 
		 -> STR_45(CODE[17]), STR_44(CODE[17]), STR_43(CODE[17]), STR_42(CODE[17]), 
		 -> STR_41(CODE[17]), STR_40(CODE[17]), STR_39(CODE[17]), STR_38(CODE[17]), 
		 -> STR_37(CODE[17]), STR_36(CODE[17]), STR_35(CODE[17]), STR_34(CODE[17]), 
		 -> STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), STR_30(CODE[17]), 
		 -> STR_29(CODE[3]), STR_28(CODE[17]), STR_27(CODE[17]), STR_26(CODE[17]), 
		 -> STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[14]), STR_22(CODE[10]), 
		 -> STR_21(CODE[24]), STR_7(CODE[7]), STR_6(CODE[17]), STR_5(CODE[18]), 
		 -> STR_4(CODE[16]), STR_3(CODE[18]), STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getMAG->_readMAG
    _getIR->_readIR
    _readIR->_readADC
    _ID->_delay_ms
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _algorithmTest->_printf
    _actuatorTest->_printf
    _SpeedTest->_printf
    _PusherTest->_printf
    _PortTestA5->_printf
    _BothServos->_printf
    _initServos->_updateServoPosition
    _BlockerTest->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  201660
                    _I2C_Master_Init
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   23132
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                             15    15      0   17614
                                             49 BANK0     15    15      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                             _getMAG
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _getIR                                                3     3      0      91
                                              6 BANK0      3     3      0
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _ID                                                   6     6      0     137
                                              2 BANK0      6     6      0
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    5381
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   11286
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   10539
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   22968
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   22054
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   45688
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   13211
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    8843
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    8843
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0   97473
                                             70 BANK0      2     2      0
                        _BlockerTest
                         _BothServos
                         _EEPROMTest
                         _PortTestA5
                          _PortTests
                         _PusherTest
                          _SpeedTest
                       _actuatorTest
                      _algorithmTest
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    8955
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    8843
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   15467
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _SpeedTest                                            1     1      0    8843
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PusherTest                                          10    10      0    9047
                                             43 BANK0     10    10      0
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTests                                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTestA5                                           1     1      0    8843
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _EEPROMTest                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   19605
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    5381
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    5381
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _BlockerTest                                          7     7      0    9027
                                             43 BANK0      7     7      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    8708
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     366
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   75643
                                             72 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   70855
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7640
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4553
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30870
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      31    31      0    4788
                                             41 COMRAM    31    31      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    2952
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     266
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BlockerTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _EEPROMTest
     _PortTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTests
     _PusherTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
     _SpeedTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _delay_ms
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _getMAG
         _readMAG
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _readIR
         _readADC
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      3D       7       23.8%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     58      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     13A      34        0.0%
DATA                 0      0     13A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Wed Mar 29 06:43:50 2017

                                    _i 0131                     i2_I2C_Master_Start 4F38  
                   i2_I2C_Master_Write 4F0E                                     l66 4EA6  
                                   _ID 3300                            __CFG_CPD$ON 000000  
                                   _UI 08CA                           ___awdiv@sign 008B  
                                   _up 0077                    ___wmul@multiplicand 0082  
                   i2___lwdiv@dividend 0006                            __CFG_BORV$3 000000  
                   EEPROM_read@address 0080                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                                    ID@i 0084  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l180 09A0  
                                  l606 239A                                    l491 3D96  
                                  l740 1D66                                    l750 1E2E  
                                  l761 1F3E                                    l753 1E68  
                                  l781 34BA                                    l838 43D0  
                                  l758 1F04                                    l777 3408  
                                  l778 3422                                    l974 3B64  
                                  l987 4E88                                    l996 38F8  
                         __CFG_CPB$OFF 000000                                    _PEN 007E2A  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
                       ?_machineConfig 0001                    ?i2_I2C_Master_Write 0002  
                                  _log 00EC                                    _sel 00FD  
                                  _var 00FA                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
                  __end_of_BlockerTest 364A                    _log_count_can_w_lab 0073  
      __end_of_change_state_to_menu_11 4B40        __end_of_change_state_to_menu_12 49B0  
      __end_of_change_state_to_menu_22 4978        __end_of_change_state_to_menu_23 4B10  
         _f_can_coming_to_distribution 0069                         ??_Distribution 0088  
      __end_of_change_state_to_logs_11 4C30        __end_of_change_state_to_logs_12 4C00  
      __end_of_change_state_to_logs_22 4BD0        __end_of_change_state_to_logs_23 4CBA  
      __end_of_change_state_to_logs_33 4BA0        __end_of_change_state_to_logs_34 4B70  
                                 ??_ID 0082                                   ??_UI 00C4  
                         __CFG_LVP$OFF 000000                           __CFG_WDT$OFF 000000  
                                 l1112 3C84                                   l1201 0858  
                                 l1121 2044                                   l1115 3C88  
                                 l1220 4238                                   l1124 2048  
                                 l1221 423C                                   l1222 4240  
                                 l1214 4218                                   l1150 0080  
                                 l1311 359C                                   l1223 4244  
                                 l1224 4248                                   l1160 028E  
                                 l1241 46C8                                   l1226 4286  
                                 l1218 4234                                   l1154 0126  
                                 l1235 46B8                                   l1147 007C  
                                 l1091 3AAC                                   l1316 35E8  
                                 l1317 3602                                   l1157 018C  
                                 l1158 01DA                                   l1263 2A92  
                                 l1159 0240                                   l1352 13B6  
                                 l1256 2AB2                                   l1184 05E8  
                                 l1088 3A8C                                   l1265 2AAC  
                                 l1259 2A4E                                   l1196 0782  
                                 l1294 41E8                                   l1287 41D8  
                                 l6000 43BC                                   l1809 45AE  
                                 l6002 43E6                                   l1746 3F24  
                                 l6014 3EA8                                   l6016 3EB8  
                                 l6026 3F12                                   l6018 3EBE  
                                 l7010 2CF6                                   l7012 2D10  
                                 l7020 2D5E                                   l7004 34BC  
                                 l6230 23C2                                   l6222 2318  
                                 l7030 2DF6                                   l7014 2D2A  
                                 l7022 2D8C                                   l1799 438A  
                                 l6240 2458                                   l6232 23E0  
                                 l7032 2E10                                   l7016 2D44  
                                 l6250 24EE                                   l6242 2476  
                                 l6234 23FE                                   l7026 2DC2  
                                 l6402 3FD0                                   l6244 2494  
                                 l6236 241C                                   l6228 23A4  
                                 l8100 0AEE                                   l7028 2DDC  
                                 l7036 2E2A                                   l6500 4458  
                                 l7230 00EA                                   l7118 2098  
                                 l6246 24B2                                   l6238 243A  
                                 l6254 250C                                   l8110 0B18  
                                 l7038 2E58                                   l7320 0314  
                                 l7240 0112                                   l7232 00F0  
                                 l7136 2150                                   l6248 24D0  
                                 l6256 256A                                   l8104 0B06  
                                 l8040 09D0                                   l6504 4470  
                                 l5706 437C                                   l5722 45A0  
                                 l5714 456A                                   l7402 04B8  
                                 l7330 033C                                   l7154 21E2  
                                 l8210 0ED4                                   l8114 0B22  
                                 l8034 09B8                                   l6602 4106  
                                 l6450 3C04                                   l6442 3BD6  
                                 l5716 4576                                   l5900 13EE  
                                 l5636 4CFA                                   l7500 06B4  
                                 l7420 051A                                   l7412 04E0  
                                 l7404 04BE                                   l7324 032C  
                                 l7316 030A                                   l7236 00FA  
                                 l7148 21A0                                   l5660 4C84  
                                 l8140 0BE6                                   l8052 0A04  
                                 l8044 09DA                                   l8036 09BE  
                                 l6460 4D42                                   l5718 457C  
                                 l5830 117E                                   l5638 4D0C  
                                 l7510 06DC                                   l7430 0542  
                                 l7350 03B0                                   l7342 038E  
                                 l7334 0354                                   l7326 0332  
                                 l7190 22DC                                   l7174 225E  
                                 l7166 222E                                   l8214 0EDE  
                                 l8150 0C7C                                   l8142 0C04  
                                 l8134 0B8C                                   l8118 0B3A  
                                 l6454 3C0E                                   l6438 3BCC  
                                 l6446 3BEE                                   _ADIE 007CEE  
                                 l5904 1408                                   l5840 11AE  
                                 l7600 0882                                   l7504 06BE  
                                 l7424 0524                                   l7408 04C8  
                                 l7360 03D8                                   l7352 03B6  
                                 l8312 10A2                                   l8304 1080  
                                 l8232 0F2A                                   l8224 0F08  
                                 l8152 0C9A                                   l8144 0C22  
                                 l8136 0BAA                                   l8072 0A6C  
                                 l8048 09F2                                   l6464 4D58  
                                 l6392 3F44                                   l5930 14AE  
                                 l5906 140E                                   l5834 1192  
                                 l7610 08AA                                   l7530 0742  
                                 l7514 06E6                                   l7450 05A8  
                                 l7434 054C                                   l7346 0398  
                                 l7186 22A6                                   l7178 2294  
                                 l8330 1100                                   l8250 0F90  
                                 l8218 0EF6                                   l8154 0CB8  
                                 l8146 0C40                                   l8138 0BC8  
                                 l8162 0D12                                   l8066 0A5C  
                                 l8082 0A92                                   l5924 146C  
                                 l5836 11A4                                   l7604 089A  
                                 l7540 076A                                   l7508 06D6  
                                 l7460 05D0                                   l7428 053C  
                                 l7372 041C                                   l7356 03C0  
                                 l8308 108A                                   l8228 0F12  
                                 l8172 0DC2                                   l8156 0CD6  
                                 l8148 0C5E                                   l8164 0D76  
                                 l8076 0A84                                   l8068 0A62  
                                 l6484 4418                                   l6396 3F5A  
                                 l6900 1F1E                                   l6820 1D8A  
                                 l5694 433A                                   l5678 4D32  
                                 l5942 14E4                                   l5918 144A  
                                 l5862 1290                                   l5854 125E  
                                 l5846 11E2                                   l7614 08C2  
                                 l7606 08A0                                   l7534 075A  
                                 l7526 0738                                   l7518 06FE  
                                 l7454 05C0                                   l7446 059E  
                                 l7438 0564                                   l7382 0444  
                                 l8334 110A                                   l8254 0F9A  
                                 l8190 0E0E                                   l8182 0DEC  
                                 l8158 0CF4                                   l6902 1F28  
                                 l5696 4346                                   l5944 14F0  
                                 l5952 151E                                   l5936 14C8  
                                 l5928 14A4                                   l5872 1308  
                                 l5864 129C                                   l5960 1588  
                                 l7560 07D2                                   l7536 0760  
                                 l7456 05C6                                   l7376 0434  
                                 l7368 0412                                   l8352 1156  
                                 l8344 1134                                   l8272 0FE6  
                                 l8264 0FC4                                   l8176 0DDA  
                                 l8168 0DB8                                   l8096 0AE4  
                                 l6592 40C4                                   l6488 442E  
                                 l6912 1F58                                   l6808 1D24  
                                 l5698 434C                                   l5954 1524  
                                 l5882 135E                                   l5874 1314  
                                 l5866 12A2                                   l7706 2A16  
                                 l7570 07FA                                   l7482 0652  
                                 l7474 0630                                   l7394 0496  
                                 l7386 045C                                   l7378 043A  
                                 l8338 1122                                   l8290 104C  
                                 l8258 0FB2                                   l8186 0DF6  
                                 l6914 1F76                                   l6930 1FD0  
                                 l5948 150A                                   l5884 1376  
                                 l5876 131A                                   l7732 2A7C  
                                 l7564 07DC                                   l7492 067A  
                                 l7484 0658                                   l5972 414E  
                                 l5964 49BA                                   l8348 113E  
                                 l8268 0FCE                                   l8356 1162  
                                 l6596 40DA                                   l8612 381A  
                                 l6932 1FDC                                   l6852 1E18  
                                 l6836 1DC6                                   l5958 157C  
                                 l5878 1332                                   l7902 3604  
                                 l7718 2A38                                   l7574 0804  
                                 l7478 063A                                   l7398 04A0  
                                 l5982 4184                                   l5966 49C6  
                                 l8294 1056                                   l8614 382E  
                                 l6950 3382                                   l6862 1E48  
                                 l5888 137C                                   l7904 3614  
                                 l7728 2A68                                   l7656 4210  
                                 l7584 0842                                   l7568 07F4  
                                 l7488 0662                                   l5976 4164  
                                 l6864 1E52                                   l7746 424C  
                                 l7594 0872                                   l7578 081C  
                                 l8650 3A2E                                   l7930 3E0C  
                                 l8298 106E                                   l6962 33B8  
                                 l6954 3390                                   l6890 1EEE  
                                 l6874 1E82                                   l7908 3644  
                                 l7668 28A0                                   l7596 0878  
                                 l7932 3E18                                   l7924 3DEE  
                                 l7862 353A                                   l7686 2958  
                                 l8670 3AB8                                   l7950 3E70  
                                 l7942 3E4E                                   l7934 3E1E  
                                 l7918 3DD8                                   l8638 38B2  
                                 l6966 33C8                                   l7688 295E  
                                 l8680 3AD6                                   l8672 3ABE  
                                 l8760 3D6A                                   l7890 35C8  
                                 l7882 359E                                   l7866 356A  
                                 l8682 3ADC                                   l8674 3AC4  
                                 l8690 3AEE                                   l7946 3E5C  
                                 l7970 4020                                   l7962 3FFC  
                                 l8762 3D70                                   l8754 3D46  
                                 l7892 35D2                                   l7884 35AE  
                                 l8684 3AE2                                   l8676 3ACA  
                                 l8668 3AB2                                   l7972 402C  
                                 l6996 3478                                   l8772 3D8C  
                                 l8764 3D76                                   l8756 3D5C  
                                 l8686 3AE8                                   l8678 3AD0  
                                 l7974 4032                                   l7982 4064  
                                 l7966 400C                                   l8774 3D92  
                                 l7986 4078                                   l7978 4056  
                                 l8778 3D98                                   STR_1 FBA3  
                                 STR_2 FF27                                   STR_3 FB91  
                                 STR_4 FE4A                                   STR_5 FB91  
                                 STR_6 FDE6                                   STR_7 FFC4  
                                 STR_8 FFDB                                   STR_9 FFCB  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u4110 4C82  
                                 u5020 239A                                   u5005 45E8  
                                 u4310 4862                                   u4320 4864  
                                 u4330 48AE                                   u4331 48AA  
                                 u4340 48B0                                   u4430 1354  
                                 _PEIE 007F96                                   u4437 134A  
                                 u4390 12DC                                   u5600 334E  
                                 u5370 1D30                                   u6500 28E4  
                                 _RCEN 007E2B                                   u4397 12D2  
                                 u5710 34BA                                   u5390 1D66  
                                 u6520 29A0                                   u5608 3352  
                                 u6530 29A2                                   u5820 2282  
                                 u5708 3488                                   u5388 1D34  
                                 u8117 1CB4                                   u6711 3592  
                                 u9007 04A8                                   u8207 1F08  
                                 u8127 1D7A                                   u6720 3594  
                                 u5920 0126                                   u9017 04D0  
                                 u8217 1F10                                   u8137 1DE6  
                                 i2l66 4EBA                                   u6650 34FC  
                                 u6490 28E2                                   u5850 22CA  
                                 u5690 3484                                   u9107 074A  
                                 u9027 052C                                   u8307 3334  
                                 u8227 1F42                                   u8147 1E32  
                                 u6820 3632                                   u6660 3558  
                                 u5940 01DA                                   u5828 2286  
                                 u5780 20DA                                   u9117 0772  
                                 u9037 0554                                   u8317 33D8  
                                 u8237 1F4C                                   u8157 1E3A  
                                 u5790 20DC                                   u9207 41F2  
                                 u9127 0794                                   u9047 05B0  
                                 u8407 3BDE                                   u8327 340C  
                                 u8247 1F66                                   u8167 1E6C  
                                 u5960 028E                                   u6761 35BE  
                                 u9217 4206                                   u9137 07E4  
                                 u9057 05D8                                   u8417 3C16  
                                 u8337 3416                                   u8257 1F94  
                                 u8177 1E76                                   u6770 35C0  
                                 u6658 3500                                   u5858 22CE  
                                 u9307 2AA0                                   u9227 287C  
                                 u9147 080C                                   u9067 0642  
                                 u8507 0B2A                                   u8427 48C0  
                                 u8347 343C                                   u8267 1FC0  
                                 u8187 1E90                                   u6828 3636  
                                 u6668 355C                                   u9317 4D02  
                                 u9237 28F8                                   u9157 085C  
                                 u9077 066A                                   u8517 0B54  
                                 u8437 48F4                                   u8357 4D4E  
                                 u8277 4A3A                                   u8197 1EBC  
                                 u9407 1766                                   u9327 4682  
                                 u9247 294C                                   u9167 0866  
                                 u9087 06C6                                   u8607 1000  
                                 u8527 0DCA                                   u8447 08E2  
                                 u8367 2DB2                                   u8287 4436  
                                 u9417 17B2                                   u9337 15B6  
                                 u9257 29B6                                   u9177 088A  
                                 u9097 06EE                                   u8617 105E  
                                 u8537 0DFE                                   u8457 09E2  
                                 u8377 2E66                                   u8297 3316  
                                 u9507 35EC                                   u9427 17FE  
                                 u9347 1602                                   u9267 2A0A  
                                 u9187 08B2                                   u8707 205A  
                                 u8627 1092                                   u8547 0E28  
                                 u8467 0A1E                                   u8387 2E98  
                                 u9517 35F6                                   u9437 1832  
                                 u9357 164E                                   u9277 2A52  
                                 u9197 41A2                                   u8717 2088  
                                 u8637 10BC                                   u8557 0EE6  
                                 u8477 0A74                                   u8397 3B82  
                                 u7870 38F8                                   u9527 450E  
                                 u9447 1864                                   u9367 1682  
                                 u9287 2A5A                                   u8807 3C34  
                                 u8727 20F0                                   u8647 1112  
                                 u8567 0F1A                                   u8487 0AA0  
                                 u9537 4518                                   u9457 18B0  
                                 u9377 16B4                                   u9297 2A96  
                                 u8817 3C78                                   u8737 2144  
                                 u8657 1146                                   u8577 0F44  
                                 u8497 0AF6                                   u9547 4544  
                                 u9467 18E4                                   u9387 1700  
                                 u8907 01EA                                   u8827 3C9A  
                                 u8747 2164                                   u8667 3A3C  
                                 u8587 0FA2                                   u9557 454E  
                                 u9477 1916                                   u9397 1734  
                                 u8917 0250                                   u8837 002C  
                                 u8757 2192                                   u8677 3A80  
                                 u8597 0FD6                                   u9487 4712  
                                 u8927 026E                                   u8847 0070  
                                 u8767 21D6                                   u8687 1FF4  
                                 u9497 34D4                                   u8937 029E  
                                 u8857 0092                                   u8777 21F4  
                                 u8697 2038                                   u8947 031C  
                                 u8867 0102                                   u8787 2222  
                                 u8957 0344                                   u8877 0136  
                                 u8797 223C                                   u8967 03A0  
                                 u8887 019C                                   u8977 03C8  
                                 u8897 01BA                                   u8987 0424  
                                 u8997 044C                                   _RSEN 007E29  
                          _stopSignals 4E5E                                   _Test 3A2E  
                                 _back 0059                                   _main 3CFC  
                                 _down 0061                                   _keys FAEF  
                                 _time 0124                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 4DFC                                   btemp 007E  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                 _log_count_can_no_lab 0071                        __end_ofi2_putch 4EF8  
                  __size_of_EEPROMTest 0002                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                             i2_printRTC 2AB6  
                          i2_lcdNibble 472A                        __end_of_Loading 1FE6  
                 __end_of_actuatorTest 08CA                       ?_I2C_Master_Init 008D  
                     ?_I2C_Master_Read 0001                       ?_I2C_Master_Wait 0001  
          ??i2_change_state_to_menu_12 002A            ??i2_change_state_to_menu_22 002A  
                     ?_I2C_Master_Stop 0001                                  ?_Test 0001  
                 __end_of_EEPROM_write 3C26                                  ?_main 0001  
                                _ACKEN 007E2C                                  _ACKDT 007E2D  
                      __end_of___awdiv 3E7A                                  _EEADR 000FA9  
                                STR_10 FFE7                                  STR_11 FFEB  
                                STR_12 FFFB                                  STR_20 FFEF  
                                STR_13 FFDF                                  STR_21 FB0A  
                                STR_14 FFD7                                  STR_22 FF9B  
                                STR_30 FDF7                                  STR_15 FFD3  
                                STR_23 FF19                                  STR_31 FDD5  
                                STR_16 FFE3                                  STR_24 FD3C  
                                STR_32 FD1A                                  STR_40 FCD6  
                                STR_17 FFF3                                  STR_25 FE19  
                                STR_33 FD2B                                  STR_41 FCC5  
                                STR_18 FFF7                                  STR_34 FDC4  
                                STR_50 FDA2                                  STR_42 FD80  
                                STR_26 FD4D                                  STR_43 FD80  
                                STR_35 FDC4                                  STR_51 FFDB  
                                STR_19 FFCF                                  STR_27 FE08  
                                STR_52 FFCB                                  STR_60 FFF3  
                                STR_28 FD5E                                  STR_36 FD09  
                                STR_44 FCE7                        __end_of___awmod 4082  
                                STR_45 FCD6                                  STR_37 FD1A  
                                STR_53 FFE7                                  STR_61 FFF7  
                                STR_29 FE16                                  STR_62 FFCF  
                                STR_54 FFEB                                  STR_70 FED2  
                                STR_38 FDB3                                  STR_46 FD91  
                                STR_47 FD91                                  STR_55 FFFB  
                                STR_63 FB0A                                  STR_71 FF0B  
                                STR_39 FD6F                                  STR_56 FFDF  
                                STR_64 FF7C                                  STR_80 FE5A  
                                STR_48 FCF8                                  STR_72 FC5F  
                                STR_49 FCE7                                  STR_57 FFD7  
                                STR_81 FE16                                  STR_65 FF42  
                                STR_73 FEEF                                  STR_58 FFD3  
                                STR_74 FF4F                                  STR_90 FEC3  
                                STR_82 FE87                                  STR_66 FB22  
                                STR_59 FFE3                                  STR_67 FFBD  
                                STR_91 FEE1                                  STR_75 FEB4  
                                STR_83 FE2A                                  STR_84 FF87  
                                STR_76 FEFD                                  STR_68 FC92  
                                STR_92 FC70                                  STR_85 FF87  
                                STR_77 FFAE                                  STR_93 FF5B  
                                STR_69 FCA3                                  STR_78 FF0B  
                                STR_86 FFA5                                  STR_94 FC81  
                                STR_87 FFA5                                  STR_95 FF66  
                                STR_79 FF35                                  STR_88 FF91  
                                STR_96 FEA5                                  STR_89 FF0B  
                                STR_97 FC0A                                  STR_98 FBF9  
                                STR_99 FBD7                                  ?_sort 0001  
                      __end_of___lldiv 3F36                                  _T0CON 000FD5  
                      ___awdiv@divisor 0088                                  _T1CON 000FCD  
                                _T3CON 000FB1                        __end_of___lwdiv 4394  
                      __end_of___lwmod 45B8                                  i2l257 286A  
                                i2l606 2B44                                  i2l911 3792  
                                i2l905 3726                                  i2l909 3772  
                      ___awdiv@counter 008A                                  i2l987 4E9E  
                                _TMR0H 000FD7                                  _TMR1H 000FCF  
                                _TMR0L 000FD6                                  _TMR3H 000FB3  
                                _TMR1L 000FCE                                  _TMR3L 000FB2  
                           _BothServos 15A8                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst 4EEC                        __end_of_handler 37CE  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _nRBPU 007F8F  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_readADC 4D12  
                      __end_of_initLCD 48FE                         __CFG_EBTRB$OFF 000000  
                                _debug 005F                             i2isdigit@c 0003  
                                _getIR 440A                        __end_of_loadRTC 410E  
                      __end_of_readMAG 48B8                        __end_of_dpowers FB0A  
                                _first 006D                                  _enter 0063  
                      __end_of_isdigit 4D3C                                  _input 007D  
                                _putch 4ECC                                  pclath 000FFA  
                                tablat 000FF5                       __end_ofi2___wmul 4DB2  
                     __end_ofi2_getRTC 44EE                    _log_count_pop_w_tab 00F2  
                                status 000FD8                         __CFG_PBADEN$ON 000000  
                        i2printf@width 0028                       __end_ofi2_printf 1C9A  
                   __size_ofi2___lwdiv 0052                     __size_ofi2___lwmod 0042  
                     __end_ofi2_strcpy 4A80                            Loading@addr 00B3  
                     _count_can_no_lab 012B                   __size_of_EEPROM_read 0018  
                      __initialization 47D2                           __end_of_Test 3B42  
                   __size_ofi2_lcdInst 000C                           __end_of_main 3DBC  
                         __end_of_keys FB00                           __end_of_sort 4E1E  
                           i2printf@ap 0020                             i2printf@cp 001E  
                        PusherTest@res 00AD                       PusherTest@i_1710 00B3  
                   __size_ofi2_isdigit 001E                            _BlockerTest 34C6  
                               ??_Test 00C6    __size_of_change_state_to_menu_start 002C  
                      ??_machineConfig 0080                                 ??_main 00DA  
                               ??_sort 00C0                          __activetblptr 000003  
           updateServoPosition@my_time 0086             updateServoPosition@time_us 0080  
                           i2strcpy@cp 0005                             i2strcpy@to 0001  
                    ?_I2C_Master_Start 0001                    EEPROM_write@address 00AB  
               __size_ofi2_EEPROM_read 0016                      ?_I2C_Master_Write 0081  
                               ?_getIR 0001                     ??_I2C_Master_Start 0081  
                               _ADCON0 000FC2                                 _ADCON1 000FC1  
                   ??_I2C_Master_Write 0083                                 _ADCON2 000FC0  
                               STR_100 FC2C                                 STR_101 FC3D  
                               STR_110 FCB4                                 STR_102 FBB5  
                               STR_103 FE3A                                 STR_111 FB37  
                               STR_104 FBE8                                 STR_120 FB5B  
                               STR_112 FB49                                 STR_121 FB49  
                               STR_113 FF71                                 STR_105 FBC6  
                               STR_106 FBE8                                 STR_114 FE5A  
                               STR_122 FB7F                                 _ADRESH 000FC4  
                               STR_115 FE16                                 STR_107 FE96  
                               STR_123 FB6D                                 STR_116 FE5A  
                               STR_124 FB7F                                 STR_108 FE78  
                               _EEADRH 000FAA                                 STR_117 FE16  
                               STR_125 FB7F                                 STR_109 FE69  
                               STR_126 FFB6                                 STR_118 FC1B  
                               _ADRESL 000FC3                                 STR_119 FC4E  
                               _EEDATA 000FA8                                 _EECON2 000FA7  
                     ___awdiv@dividend 0086                        i2lcdNibble@data 0002  
                               ?_putch 0001                 __size_of_initSortTimer 00AA  
                      i2lcdNibble@temp 0001              i2_change_state_to_menu_12 4AB0  
            i2_change_state_to_menu_22 4A80                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 _CVRCON 000FB5  
                               i2l1352 1B06                                 i2l1809 4936  
                               i2l6100 1A20                                 i2l6110 1A78  
                               i2l6102 1A24                                 i2l6120 1ACC  
                               i2l6112 1A7E                                 i2l6200 4A58  
                               i2l6042 44C4                                 i2l6114 1A90  
                               i2l6202 4A60                                 i2l6140 1B4C  
                               i2l6108 1A6E                                 i2l6124 1AD0  
                               i2l6038 44B4                                 i2l6142 1B50  
                               i2l6118 1ABA                                 i2l6070 1946  
                               i2l1799 47C8                                 i2l6048 44DE  
                               i2l6160 1B9C                                 i2l6136 1B34  
                               i2l6072 1954                                 i2l6154 1B82  
                               i2l6090 19EE                                 i2l6082 198C  
                               i2l6066 1936                                 i2l6180 1BFC  
                               i2l6172 1BDE                                 i2l6164 1BC0  
                               i2l6076 195A                                 i2l6190 1C28  
                               i2l6166 1BC8                                 i2l5800 490C  
                               i2l6184 1C10                                 i2l5802 4914  
                               i2l6194 1C76                                 i2l6178 1BF4  
                               i2l6098 1A16                                 i2l5804 4918  
                               i2l6188 1C22                                 i2l6196 1C7E  
                               i2l6372 39D2                                 i2l6702 3204  
                               i2l6550 2B4E                                 i2l5808 492C  
                               i2l6384 3A16                                 i2l6376 39E2  
                               i2l6712 322E                                 i2l6560 2BBC  
                               i2l6552 2B64                                 i2l6544 2AE2  
                               i2l8400 2638                                 i2l5746 4DD2  
                               i2l5770 4E56                                 i2l6722 324C  
                               i2l6570 2C2A                                 i2l6562 2BD2  
                               i2l6554 2B7A                                 i2l5780 4796  
                               i2l6724 3250                                 i2l6708 3212  
                               i2l6572 2C40                                 i2l6564 2BE8  
                               i2l6556 2B90                                 i2l8500 27C0  
                               i2l8420 2680                                 i2l8412 2664  
                               i2l8404 2646                                 i2l5782 479E  
                               i2l6750 32A4                                 i2l6742 3280  
                               i2l6718 3238                                 i2l6670 318A  
                               i2l6654 3152                                 i2l6646 3138  
                               i2l6566 2BFE                                 i2l6558 2BA6  
                               i2l5792 47BE                                 i2l5784 47A2  
                               i2l6736 3272                                 i2l6728 325A  
                               i2l6672 3190                                 i2l6656 3162  
                               i2l6664 3170                                 i2l6568 2C14  
                               i2l6576 2C56                                 i2l8512 27F2  
                               i2l8504 27CE                                 i2l8440 26CE  
                               i2l8432 26B2                                 i2l8424 268E  
                               i2l8416 2672                                 i2l8408 2656  
                               i2l6754 32B6                                 i2l6746 3292  
                               i2l6674 3196                                 i2l6682 31A8  
                               i2l6658 3166                                 i2l6578 2CB0  
                               i2l9170 281E                                 i2l8370 25DE  
                               i2l8700 2F10                                 i2l9180 31DC  
                               i2l6676 319C                                 i2l6668 3184  
                               i2l6764 32D2                                 i2l9172 2840  
                               i2l8508 27DC                                 i2l8460 271C  
                               i2l8452 2700                                 i2l8444 26DC  
                               i2l8436 26C0                                 i2l8428 269C  
                               i2l8380 2600                                 i2l8372 25E4  
                               i2l8710 2F7A                                 i2l6758 32C8  
                               i2l6694 31EC                                 i2l6678 31A2  
                               i2l9174 285C                                 i2l8518 2800  
                               i2l8704 2F20                                 i2l8480 2772  
                               i2l8472 274E                                 i2l8464 2732  
                               i2l8456 270E                                 i2l8448 26F2  
                               i2l8384 260E                                 i2l8376 25F2  
                               i2l8800 36DE                                 i2l8722 3042  
                               i2l9178 31C0                                 i2l8492 279C  
                               i2l8484 2780                                 i2l8476 275C  
                               i2l8468 2740                                 i2l8396 262A  
                               i2l8388 261C                                 i2l8726 3076  
                               i2l8814 36FA                                 i2l8728 307C  
                               i2l8496 27B2                                 i2l8488 278E  
                               i2l8860 3790                                 i2l8836 3744  
                               i2l8838 3746                                 i2l8792 36C4  
                               i2l8794 36C8                _f_most_recent_sort_time 006B  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                              ??i2_putch 0003  
                               _TMR1IE 007CE8                                 _TMR1IF 007CF0  
                               _TMR2IE 007CE9                                 _TMR3IE 007D01  
                               _TMR3IF 007D09                                 _TMR0ON 007EAF  
                               _TMR1ON 007E68                                 _TMR3ON 007D88  
                               _SSPADD 000FC8                                 _TRISC3 007CA3  
                               _TRISC4 007CA4                                 _SSPBUF 000FC9  
                            ??_Loading 00B1                       __end_of_delay_ms 4D64  
                 delay_ms@milliseconds 0081                         __CFG_XINST$OFF 000000  
                     __end_of_dispLogs 4DFC                            ?i2_printRTC 0001  
                     retrieveLog@byte1 000B                       retrieveLog@byte2 000C  
                     retrieveLog@byte3 000D                   __end_of_Distribution 2F04  
                               ___wmul 49E6                              ??___awdiv 008A  
                       __CFG_STVREN$ON 000000                                 _getMAG 4A1C  
                            ??___awmod 0084                            logRun@byte1 00B2  
                          logRun@byte2 00B3                            logRun@byte3 00B4  
                               _getRTC 410E                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 4E40  
                               _initUI 4C30                                 _readIR 4820  
                               _logRun 37CE                                 getIR@i 0087  
                               clear_0 47F8                                 clear_1 4804  
                               clear_2 4810                       ___awdiv@quotient 008C  
                      ___awmod@divisor 0082                             _PortTestA5 4674  
                      ___awmod@counter 0084                              ??_lcdInst 0082  
                               _printf 1170                              ??_handler 0049  
              __size_of_initGlobalVars 0080                           ?_retrieveLog 0007  
                               _strcpy 49B0                     __size_of_SpeedTest 0084  
                            ??_readADC 0080                              ??_initLCD 0083  
                            ??_loadRTC 0095                              ??_readMAG 0082  
 __end_ofi2_change_state_to_menu_start 4D8C  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 4D64                            ?_BothServos 0001  
                         ??_EEPROMTest 0080                              ??_isdigit 0080  
                   __size_of_PortTests 0084                      __end_ofi2___lwdiv 47D2  
                     __end_of_printRTC 25AE                           __mediumconst FAEE  
                    __end_ofi2___lwmod 4940                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                 _log_count_pop_no_tab 00F0                  __end_of_algorithmTest 3CFC  
                    __end_ofi2_lcdInst 4F04                             _PusherTest 286E  
                    __end_ofi2_isdigit 4E5E                             __accesstop 0080  
              __end_of__initialization 4816                          ?_inputHandler 002A  
                _most_recent_sort_time 0133                          ___rparam_used 000001  
              printSortTimer@start_sec 003B                  __size_of_actuatorTest 08B8  
                        i2_EEPROM_read 4E90                           Loading@byte1 00B5  
                   i2___lwmod@dividend 0001                     __end_of_EEPROMTest 4F42  
                       __pcstackCOMRAM 0001                  __size_of_EEPROM_write 00E4  
                         __pidataBANK1 4F18                    BlockerTest@cam_flag 00AE  
                        __end_of_getIR 447C                            i2printRTC@i 0041  
                        _initSortTimer 3F36            __end_of_updateServoPosition 440A  
                        __end_of_putch 4EDC                            i2printf@len 0022  
                          i2printf@val 0024                             __end_of_ID 34C6  
                           __end_of_UI 1170                              ?i2___wmul 0001  
                   __size_of_lcdNibble 0068                              ?i2_getRTC 0001  
                          i2putch@data 0003                  printSortTimer@curTime 002D  
   __end_of_change_state_to_menu_start 4CE6          ?i2_change_state_to_menu_start 0001  
           _change_state_to_menu_start 4CBA                  printSortTimer@cur_sec 003D  
                            ?i2_printf 000D                                ??_getIR 0086  
                            ?i2_strcpy 0001                       _count_pop_no_tab 005B  
                  __size_ofi2_printRTC 0236                                ??_putch 0082  
                         _actuatorTest 0012                             __pbssBANK0 00DA  
                           __pbssBANK1 0100                           ?_stopSignals 0001  
                       ??_inputHandler 002C                           _EEPROM_write 3B42  
             ?_change_state_to_menu_11 0001               ?_change_state_to_menu_12 0001  
             ?_change_state_to_menu_22 0001               ?_change_state_to_menu_23 0001  
                              UI@F3228 0135                      __end_of_SpeedTest 4218  
                       ?i2_EEPROM_read 0001               ?_change_state_to_logs_11 0001  
             ?_change_state_to_logs_12 0001               ?_change_state_to_logs_22 0001  
             ?_change_state_to_logs_23 0001               ?_change_state_to_logs_33 0001  
             ?_change_state_to_logs_34 0001                    __size_of_BothServos 0384  
                    __end_of_PortTests 429C                      printRTC@RTC_month 00BC  
                         ?i2_lcdNibble 0001                                UI@i_412 00CA  
                              UI@i_413 00CB                                UI@i_431 00CC  
                              UI@i_440 00D1                                UI@i_432 00CD  
                              UI@i_409 00C9                                UI@i_443 00D2  
                              UI@i_435 00CE                                UI@i_444 00D3  
                              UI@i_436 00CF                                UI@i_447 00D4  
                              UI@i_439 00D0                                UI@i_448 00D5  
                       ?_initSortTimer 0001                                ?___wmul 0080  
                              ?_getMAG 0001                                ?_getRTC 0001  
                              ?_initUI 0001                                ?_readIR 0001  
                              ?_logRun 0001               updateServoPosition@timer 0082  
                              UI@month 00D6                            ?_PortTestA5 0001  
                              ?_printf 008E                                _UI$2331 00C6  
                              ?_strcpy 0080                             ??i2___wmul 0005  
                           ??i2_getRTC 0004                              ?_delay_ms 0001  
                           ??i2_printf 0019                             ??i2_strcpy 0005  
                            ?_dispLogs 0012                                _SSPCON1 000FC6  
                              _SSPCON2 000FC5                            ?_PusherTest 0001  
                              _SSPSTAT 000FC7                                _RTCflag 00E2  
                              i2_putch 4EEC                              ?_initTime 0080  
                      _f_loadingNewCan 00EA                        i2printRTC@month 003D  
                __size_of_Distribution 0218            __size_ofi2_I2C_Master_Start 0008  
                    __end_of_lcdNibble 4556                                _Loading 1C9A  
          __size_ofi2_I2C_Master_Write 000A                       EEPROM_write@data 00AD  
                              __Hparam 0000                                __Lparam 0000  
   __size_ofi2_change_state_to_menu_12 0030     __size_ofi2_change_state_to_menu_22 0030  
                            ?_printRTC 0001                                ___awdiv 3DBC  
                              ___awmod 3FE0                             _initServos 46D0  
                              ___lldiv 3E7A                        __size_of___wmul 0036  
                      __size_of_getMAG 0032                                ___lwdiv 431C  
                              ___lwmod 4556                        __size_of_getRTC 0086  
                      printSortTimer@i 0047                              _CMCONbits 000FB4  
                    retrieveLog@logNum 0007                           logRun@byte11 00B6  
                         ?_BlockerTest 0001                        __size_of_initUI 002E  
                      __size_of_readIR 004C                                __pcinit 47D2  
                 i2EEPROM_read@address 0001                        __size_of_logRun 0140  
                         logRun@byte_i 00B5                                __ramtop 1000  
                       _initGlobalVars 429C                                _lcdInst 4EDC  
                              _handler 0008                                __ptext0 3CFC  
                              __ptext1 4E5E                                __ptext2 4DFC  
                              __ptext3 1C9A                                __ptext4 3F36  
                              __ptext5 429C                                __ptext6 4A1C  
                              __ptext7 440A                                __ptext8 4820  
                              __ptext9 3300                        __size_of_printf 0438  
                              _readADC 4CE6                        __size_of_strcpy 0036  
                              _initLCD 48B8                                _cur_can 00E4  
                              _loadRTC 4082                                _readMAG 486C  
                              _dpowers FB00                     actuatorTest@i_1651 00AD  
                   actuatorTest@i_1661 00B0                     actuatorTest@i_1670 00B6  
                   actuatorTest@i_1662 00B1                     actuatorTest@i_1671 00B7  
                   actuatorTest@i_1680 00BC                     actuatorTest@i_1664 00B2  
                   actuatorTest@i_1681 00BD                     actuatorTest@i_1673 00B8  
                   actuatorTest@i_1665 00B3                     actuatorTest@i_1690 00C2  
                   actuatorTest@i_1674 00B9                     actuatorTest@i_1658 00AE  
                   actuatorTest@i_1691 00C3                     actuatorTest@i_1683 00BE  
                   actuatorTest@i_1667 00B4                     actuatorTest@i_1659 00AF  
                   actuatorTest@i_1684 00BF                     actuatorTest@i_1668 00B5  
                   actuatorTest@i_1677 00BA                     actuatorTest@i_1678 00BB  
                   actuatorTest@i_1687 00C0                     actuatorTest@i_1688 00C1  
                              _isdigit 4D12                       ___awmod@dividend 0080  
                              getRTC@i 0083                   __size_of_retrieveLog 0120  
                           ??_delay_ms 0080               __size_of_I2C_Master_Init 0060  
             __size_of_I2C_Master_Read 002E                          _log_startTime 0100  
             __size_of_I2C_Master_Wait 0014               __size_of_I2C_Master_Stop 0008  
                           ??_dispLogs 0014                           _Distribution 2CEC  
                       __pintcode_body 364A                   end_of_initialization 4816  
                              logRun@i 00B7                             ??_initTime 0086  
                      ??i2_EEPROM_read 0003                                int_func 364A  
                  i2___wmul@multiplier 0001                          ??_EEPROM_read 0082  
                  __size_of_PortTestA5 005C              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 0084  
                      ___lldiv@counter 008C                        ??_initSortTimer 0085  
                              printf@c 00A8                           ??i2_printRTC 002A  
                              printf@f 008E                             ??_printRTC 00AB  
                     I2C_Master_Init@c 008D                       I2C_Master_Read@a 0081  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
               __end_of_initGlobalVars 431C                             _sensorTest 1FE6  
                  __size_of_PusherTest 0248                             _servoTimes 011C  
                            _PORTAbits 000F80                              _PORTBbits 000F81  
                 __end_of_inputHandler 3300                           ??_BothServos 00AB  
                __end_of_machineConfig 4674                             _updateMenu 25AE  
                    i2_I2C_Master_Read 4DB2                              _IR_signal 00DE  
                    i2_I2C_Master_Wait 4EBA                      i2_I2C_Master_Stop 4F30  
                    i2___lwdiv@divisor 0008                        _log_count_total 0075  
                            i2___lwdiv 4780                              i2___lwmod 48FE  
                    i2___lwdiv@counter 000C                     ?i2_I2C_Master_Read 0001  
                   ?i2_I2C_Master_Wait 0001                     __end_ofi2_printRTC 2CEC  
                   ?i2_I2C_Master_Stop 0001                          actuatorTest@i 00C4  
         ??_change_state_to_menu_start 00C4                              i2_lcdInst 4EF8  
                        Loading@i_1103 00B6                          Loading@i_1104 00B8  
                        Loading@i_1106 00BA                          Loading@i_1107 00BC  
                           _total_time 00F8                            printf@width 00A9  
                 __size_of_stopSignals 001A                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 4E40                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002                              i2getRTC@i 0004  
                   __end_of_BothServos 192C                            PusherTest@i 00B1  
                  __end_of_EEPROM_read 4E90                            ?_initServos 0001  
                      ?_initGlobalVars 0001                         __end_of___wmul 4A1C  
                       __end_of_getMAG 4A4E                         __end_of_getRTC 4194  
                 __size_ofi2_lcdNibble 0056                          EEPROM_write@i 00AF  
                        i2lcdInst@data 0003                         __end_of_initUI 4C5E  
                       __end_of_readIR 486C                         __end_of_logRun 390E  
                     i2___wmul@product 0005                         __end_of_printf 15A8  
                         i2printf@flag 0026                         __end_of_strcpy 49E6  
            __end_ofi2_I2C_Master_Read 4DD8              __end_ofi2_I2C_Master_Wait 4ECC  
                         i2printf@prec 001D                    start_initialization 47D2  
            __end_ofi2_I2C_Master_Stop 4F38                             readMAG@res 0084  
                    __size_ofi2___wmul 0026                        _count_can_w_lab 012D  
          ?_change_state_to_menu_start 0001                      __size_ofi2_getRTC 0072  
                            i2printf@c 0027                              i2printf@f 000D  
                   EEPROM_write@i_1337 00B0                  i2I2C_Master_Read@temp 0003  
                 BlockerTest@cond_flag 00B0                             ?i2___lwdiv 0006  
                           ?i2___lwmod 0001                      __size_ofi2_printf 036E  
                    __size_ofi2_strcpy 0032                      ??_I2C_Master_Init 0091  
                    ??_I2C_Master_Read 0081                      ??_I2C_Master_Wait 0080  
                           ?i2_lcdInst 0001                      ??_I2C_Master_Stop 0081  
                     __CFG_OSC$INTIO67 000000                             ?i2_isdigit 0001  
                           initTime@DD 0083                             initTime@MM 0084  
                           initTime@YY 0085                        retrieveLog@addr 0010  
                           logRun@addr 00B9                              _SpeedTest 4194  
                             ??___wmul 0084                               ??_getMAG 0086  
                             ??_getRTC 0083                 __size_of_algorithmTest 00D6  
                            _PortTests 4218                            ?_sensorTest 0001  
                          __pdataBANK1 0135                       __CFG_LPT1OSC$OFF 000000  
                             ??_initUI 00C4                               ??_readIR 0082  
                             ??_logRun 00B1                               ID@i_1118 0086  
                         ??_PortTestA5 00AB                 printSortTimer@timeDiff 0045  
     __size_of_change_state_to_menu_11 0030       __size_of_change_state_to_menu_12 0038  
     __size_of_change_state_to_menu_22 0038       __size_of_change_state_to_menu_23 0030  
                             ??_printf 009A       __size_of_change_state_to_logs_11 0030  
     __size_of_change_state_to_logs_12 0030       __size_of_change_state_to_logs_22 0030  
     __size_of_change_state_to_logs_23 002E       __size_of_change_state_to_logs_33 0030  
     __size_of_change_state_to_logs_34 0030                               ??_strcpy 0084  
                  _printSortTimer$2451 0043                   __size_of_BlockerTest 0184  
                          __pbssCOMRAM 0059           __size_of_updateServoPosition 0076  
                          ?_updateMenu 0001                          __pcstackBANK0 0080  
              __size_of_printSortTimer 0216                      i2___lwmod@divisor 0003  
                    i2___lwmod@counter 0005                           _isdigit$1975 0081  
                         ??_PusherTest 00AB                      __size_of_delay_ms 0028  
                       initSortTimer@i 0088                      printSortTimer@min 003F  
                    printSortTimer@sec 0041                    __size_of_initServos 005A  
                    __size_of_dispLogs 0024                       printRTC@INT_time 00AE  
                         i2strcpy@from 0003                               ?i2_putch 0001  
                   PusherTest@res_1706 00AF                        _count_pop_w_tab 005D  
                          _EEPROM_read 4E78                     __end_of_PortTestA5 46D0  
                     _I2C_Master_Start 4F28                              _f_lastCan 00E8  
                             ?_Loading 0001                    i2I2C_Master_Write@d 0002  
                     _I2C_Master_Write 4F04                      __size_of_initTime 0022  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                             ?_SpeedTest 0001  
                        __pmediumconst FAEE                              _lcdNibble 44EE  
                __size_of_inputHandler 01E6                               ?___awdiv 0086  
                             ?___awmod 0080                               ?___lldiv 0080  
                       _sensor_outputs 00DA                               ?___lwdiv 0080  
                           ?_PortTests 0001                               ?___lwmod 0087  
                    __size_of_printRTC 02CA                     __end_of_PusherTest 2AB6  
                             ?_lcdInst 0001                               ?_handler 0001  
                             ?_readADC 0001                               ?_initLCD 0001  
                             ?_loadRTC 0001                               ?_readMAG 0001  
                             ?_isdigit 0001             __size_ofi2_I2C_Master_Read 0026  
           __size_ofi2_I2C_Master_Wait 0012             __size_ofi2_I2C_Master_Stop 0008  
                            _firstboot 006F                              _cur_state 00E6  
                     ___lwdiv@quotient 0084                         __size_of_getIR 0072  
                        _algorithmTest 3C26                            ??i2___lwdiv 000A  
                          ??i2___lwmod 0005                         __size_of_putch 0010  
                          __size_of_ID 01C6                            __size_of_UI 08A6  
                  __size_of_sensorTest 02FE             __end_ofi2_I2C_Master_Start 4F40  
           __end_ofi2_I2C_Master_Write 4F18                            ??i2_lcdInst 0003  
                       ___wmul@product 0084                               _LATAbits 000F89  
                             _LATCbits 000F8B                               _LATDbits 000F8C  
                             _LATEbits 000F8D                           _inputHandler 311A  
                          ??i2_isdigit 0001                           BlockerTest@i 00AC  
                             i2u421_40 4DD0                               i2u521_40 2B44  
                             _PIR2bits 000FA1                               i2u480_40 1AB2  
                             i2u480_47 1AA8                               i2u476_40 1A52  
                             i2u476_47 1A48                               i2u960_47 4778  
                             i2u956_47 3158                               i2u957_47 4742  
                             i2u958_47 474C                               i2u959_47 476E  
                  __size_of_updateMenu 02C0                         _log_completion 00EE  
                     __CFG_WDTPS$32768 000000                             ?_lcdNibble 0001  
                            _was_low_1 0079                              _was_low_3 007B  
                        ??_retrieveLog 0009                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 0080                              _startTime 010E  
                             i2___wmul 4D8C                          lcdNibble@data 0081  
                             i2_getRTC 447C                             printf@flag 00A7  
                        lcdNibble@temp 0080                             printf@prec 009E  
                             Loading@i 00BE                               i2_printf 192C  
                             i2_strcpy 4A4E                         ?_algorithmTest 0001  
                  I2C_Master_Read@temp 0082                              copy_data0 47E6  
                            readIR@res 0084                       __size_ofi2_putch 000C  
                           _EECON1bits 000FA6                  __end_ofi2_EEPROM_read 4EA6  
                          _count_total 00FE                       ??_initGlobalVars 0080  
                             __Hrparam 0000                       __size_of_Loading 034C  
                            initTime@h 0081                              initTime@m 0080  
                            initTime@s 0086                              initTime@w 0082  
                             __Lrparam 0000                     __CFG_BOREN$SBORDIS 000000  
                            logRun@num 00B1                            ??_SpeedTest 00AB  
                __end_of_initSortTimer 3FE0                           ??_initServos 0088  
                          ??_PortTests 0080                       __size_of___awdiv 00BE  
                     __size_of___awmod 00A2                _change_state_to_menu_11 4B10  
           ?i2_change_state_to_menu_12 0001                _change_state_to_menu_12 4978  
           ?i2_change_state_to_menu_22 0001                _change_state_to_menu_22 4940  
              _change_state_to_menu_23 4AE0                  i2___wmul@multiplicand 0003  
                     __size_of___lldiv 00BC                       __size_of___lwdiv 0078  
              _change_state_to_logs_11 4C00                _change_state_to_logs_12 4BD0  
              _change_state_to_logs_22 4BA0                _change_state_to_logs_23 4C8C  
              _change_state_to_logs_33 4B70                _change_state_to_logs_34 4B40  
                     __size_of___lwmod 0062                         readADC@channel 0081  
                   i2I2C_Master_Read@a 0002                       __size_of_lcdInst 0010  
                     __size_of_handler 37C6                             _EEPROMTest 4F40  
                      _I2C_Master_Init 45B8                       __size_of_readADC 002C  
                      _I2C_Master_Read 4C5E                       __size_of_initLCD 0046  
                         _f_ID_receive 0065                       __size_of_loadRTC 008C  
                     __size_of_readMAG 004C                        _I2C_Master_Wait 4EA6  
                      _I2C_Master_Stop 4F20                       __size_of_isdigit 002A  
                             _delay_ms 4D3C                         _printSortTimer 2F04  
                      ___lwdiv@divisor 0082                        ___lwdiv@counter 0086  
                  __end_of_retrieveLog 3A2E                               __ptext10 4D3C  
                             __ptext11 2CEC                               __ptext20 4CBA  
                             __ptext12 4618                               __ptext21 4E1E  
                             __ptext13 37CE                               __ptext30 4C5E  
                             __ptext22 48B8                               __ptext14 3B42  
                             __ptext31 4EA6                               __ptext23 08CA  
                             __ptext15 4E78                               __ptext40 0012  
                             __ptext32 4940                               __ptext24 22E4  
                             __ptext16 4C30                               __ptext41 4194  
                             __ptext33 4978                               __ptext25 49B0  
                             __ptext17 4082                               __ptext50 34C6  
                             __ptext42 286E                               __ptext34 3FE0  
                             __ptext26 410E                               __ptext18 45B8  
                             __ptext51 1170                               __ptext43 4CE6  
                             __ptext35 3DBC                               __ptext27 4F04  
                             __ptext19 3E7A                               __ptext60 25AE  
                             __ptext52 4ECC                               __ptext44 4218  
                             __ptext36 3A2E                               __ptext28 4F20  
                             __ptext61 4D64                               __ptext53 4D12  
                             __ptext45 4674                               __ptext37 1FE6  
                             __ptext29 4F28                               __ptext70 4B70  
                             __ptext62 2AB6                               __ptext54 49E6  
                             __ptext46 4F40                               __ptext38 486C  
                             __ptext71 4C8C                               __ptext63 4A4E  
                             __ptext55 4556                               __ptext47 15A8  
                             __ptext39 3C26                               __ptext80 4EEC  
                             __ptext72 4BA0                               __ptext64 311A  
                             __ptext56 431C                               __ptext48 46D0  
                             __ptext81 4E40                               __ptext73 4BD0  
                             __ptext65 4A80                               __ptext57 4EDC  
                             __ptext49 4394                               __ptext90 4F38  
                             __ptext82 4D8C                               __ptext74 4C00  
                             __ptext66 4AB0                               __ptext58 44EE  
                             __ptext91 4DB2                               __ptext83 48FE  
                             __ptext75 4DD8                               __ptext67 4AE0  
                             __ptext92 4EBA                               __ptext84 4780  
                             __ptext76 390E                               __ptext68 4B10  
                             __ptext85 4EF8                               __ptext77 4E90  
                             __ptext69 4B40                               __ptext86 472A  
                             __ptext78 2F04                               __ptext87 447C  
                             __ptext79 192C                               __ptext88 4F0E  
                             __ptext89 4F30                               _dispLogs 4DD8  
                        ?_actuatorTest 0001                          ??_stopSignals 0080  
                           strcpy@from 0082                         i2_isdigit$1975 0002  
                   __end_of_initServos 472A                          __size_of_Test 0114  
                        ?_EEPROM_write 00AB                               _initTime 4E1E  
                        __size_of_main 00C0                          __size_of_sort 0022  
       ??i2_change_state_to_menu_start 0043                               _logstate 00F6  
                  _updateServoPosition 4394                 __size_of_machineConfig 005C  
                        ??i2_lcdNibble 0001                               _printRTC 22E4  
                          ??_lcdNibble 0080                              printRTC@i 00C2  
                             int$flags 007E                           ??_sensorTest 00AB  
                       _log_total_time 00F4                     _f_can_coming_to_ID 0067  
                            printf@len 00A3                              printf@val 00A5  
    __end_ofi2_change_state_to_menu_12 4AE0      __end_ofi2_change_state_to_menu_22 4AB0  
                             loadRTC@i 0096                 __end_of_printSortTimer 311A  
                            putch@data 0082               __end_of_I2C_Master_Start 4F30  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 4F0E  
                           _INTCONbits 000FF2                   ?_updateServoPosition 0080  
                         ??_updateMenu 0043                        ??_algorithmTest 00AB  
                           _MAG_signal 00E0                               isdigit@c 0082  
                        sensorTest@res 00AD                         ??_actuatorTest 00AB  
                             intlevel2 0000                         ??_EEPROM_write 00AE  
                   __end_of_sensorTest 22E4                       ___lwmod@dividend 0087  
                     ___lldiv@dividend 0080                           ?_EEPROM_read 0080  
                  __end_of_stopSignals 4E78              ??_change_state_to_menu_11 002A  
            ??_change_state_to_menu_12 00AB              ??_change_state_to_menu_22 00AB  
            ??_change_state_to_menu_23 002A              ??_change_state_to_logs_11 002A  
            ??_change_state_to_logs_12 002A              ??_change_state_to_logs_22 002A  
            ??_change_state_to_logs_23 002A              ??_change_state_to_logs_33 002A  
            ??_change_state_to_logs_34 002A                               printf@ap 00A1  
                             printf@cp 009F                     __end_of_updateMenu 286E  
              __end_of_I2C_Master_Init 4618                __end_of_I2C_Master_Read 4C8C  
              __end_of_I2C_Master_Wait 4EBA                          ??_BlockerTest 00AB  
              __end_of_I2C_Master_Stop 4F28                            lcdInst@data 0082  
                        printRTC@F3219 0139                           retrieveLog@i 000E  
                          _retrieveLog 390E                    __end_ofi2_lcdNibble 4780  
                ??_updateServoPosition 0084                        ?_printSortTimer 0001  
                     ___lldiv@quotient 0088                      I2C_Master_Write@d 0081  
                          ?_EEPROMTest 0001                        ___lwmod@divisor 0089  
                    _f_can_distributed 012F                               strcpy@cp 0084  
                             strcpy@to 0080                          _machineConfig 4618  
                      ___lwmod@counter 008B                          printRTC@month 00BE  
                        ?_Distribution 0001                          _machine_state 00FC  
                        dispLogs@myLog 0012                     i2printRTC@INT_time 002D  
