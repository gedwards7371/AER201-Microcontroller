

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Wed Apr 12 12:32:46 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    79                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	text93,global,reloc=2,class=CODE,delta=1
   109                           	psect	text94,global,reloc=2,class=CODE,delta=1
   110                           	psect	text95,global,reloc=2,class=CODE,delta=1
   111                           	psect	text96,global,reloc=2,class=CODE,delta=1
   112                           	psect	text97,global,reloc=2,class=CODE,delta=1
   113                           	psect	text98,global,reloc=2,class=CODE,delta=1
   114                           	psect	text99,global,reloc=2,class=CODE,delta=1
   115                           	psect	text100,global,reloc=2,class=CODE,delta=1
   116                           	psect	text101,global,reloc=2,class=CODE,delta=1
   117                           	psect	text102,global,reloc=2,class=CODE,delta=1
   118                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   119                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   120                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   121  0000                     
   122                           ; Version 1.40
   123                           ; Generated 01/12/2016 GMT
   124                           ; 
   125                           ; Copyright © 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   126                           ; All rights reserved.
   127                           ; 
   128                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   129                           ; 
   130                           ; Redistribution and use in source and binary forms, with or without modification, are
   131                           ; permitted provided that the following conditions are met:
   132                           ; 
   133                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   134                           ;        conditions and the following disclaimer.
   135                           ; 
   136                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   137                           ;        of conditions and the following disclaimer in the documentation and/or other
   138                           ;        materials provided with the distribution.
   139                           ; 
   140                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   141                           ;        software without specific prior written permission.
   142                           ; 
   143                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   144                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   145                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   146                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   147                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   148                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   149                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   150                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   151                           ; 
   152                           ; 
   153                           ; Code-generator required, PIC18F4620 Definitions
   154                           ; 
   155                           ; SFR Addresses
   156  0000                     
   157                           	psect	idataBANK1
   158  006136                     __pidataBANK1:
   159                           	opt stack 0
   160                           
   161                           ;initializer for UI@F3251
   162  006136  4D                 	db	77
   163  006137  4D                 	db	77
   164  006138  4D                 	db	77
   165  006139  00                 	db	0
   166                           
   167                           ;initializer for printRTC@F3241
   168  00613A  4D                 	db	77
   169  00613B  4D                 	db	77
   170  00613C  4D                 	db	77
   171  00613D  00                 	db	0
   172                           
   173                           	psect	mediumconst
   174  00FAB0                     __pmediumconst:
   175                           	opt stack 0
   176  00FAB0  00                 	db	0
   177  00FAB1                     _keys:
   178                           	opt stack 0
   179  00FAB1  31                 	db	49
   180  00FAB2  32                 	db	50
   181  00FAB3  33                 	db	51
   182  00FAB4  41                 	db	65
   183  00FAB5  34                 	db	52
   184  00FAB6  35                 	db	53
   185  00FAB7  36                 	db	54
   186  00FAB8  42                 	db	66
   187  00FAB9  37                 	db	55
   188  00FABA  38                 	db	56
   189  00FABB  39                 	db	57
   190  00FABC  43                 	db	67
   191  00FABD  2A                 	db	42
   192  00FABE  30                 	db	48
   193  00FABF  23                 	db	35
   194  00FAC0  44                 	db	68
   195  00FAC1  00                 	db	0
   196  00FAC2                     __end_of_keys:
   197                           	opt stack 0
   198  00FAC2                     _dpowers:
   199                           	opt stack 0
   200  00FAC2  0001               	dw	1
   201  00FAC4  000A               	dw	10
   202  00FAC6  0064               	dw	100
   203  00FAC8  03E8               	dw	1000
   204  00FACA  2710               	dw	10000
   205  00FACC                     __end_of_dpowers:
   206                           	opt stack 0
   207  0000                     _ADCON0	set	4034
   208  0000                     _ADCON0bits	set	4034
   209  0000                     _ADCON1	set	4033
   210  0000                     _ADCON2	set	4032
   211  0000                     _ADRESH	set	4036
   212  0000                     _ADRESL	set	4035
   213  0000                     _CMCONbits	set	4020
   214  0000                     _CVRCON	set	4021
   215  0000                     _EEADR	set	4009
   216  0000                     _EEADRH	set	4010
   217  0000                     _EECON1bits	set	4006
   218  0000                     _EECON2	set	4007
   219  0000                     _EEDATA	set	4008
   220  0000                     _INTCONbits	set	4082
   221  0000                     _LATA	set	3977
   222  0000                     _LATAbits	set	3977
   223  0000                     _LATB	set	3978
   224  0000                     _LATBbits	set	3978
   225  0000                     _LATC	set	3979
   226  0000                     _LATCbits	set	3979
   227  0000                     _LATD	set	3980
   228  0000                     _LATDbits	set	3980
   229  0000                     _LATE	set	3981
   230  0000                     _OSCCON	set	4051
   231  0000                     _OSCTUNEbits	set	3995
   232  0000                     _PIR2bits	set	4001
   233  0000                     _PORTAbits	set	3968
   234  0000                     _PORTB	set	3969
   235  0000                     _PORTBbits	set	3969
   236  0000                     _PR2	set	4043
   237  0000                     _SSPADD	set	4040
   238  0000                     _SSPBUF	set	4041
   239  0000                     _SSPCON1	set	4038
   240  0000                     _SSPCON2	set	4037
   241  0000                     _SSPSTAT	set	4039
   242  0000                     _T0CON	set	4053
   243  0000                     _T1CON	set	4045
   244  0000                     _T2CON	set	4042
   245  0000                     _T3CON	set	4017
   246  0000                     _TMR0H	set	4055
   247  0000                     _TMR0L	set	4054
   248  0000                     _TMR1H	set	4047
   249  0000                     _TMR1L	set	4046
   250  0000                     _TMR3H	set	4019
   251  0000                     _TMR3L	set	4018
   252  0000                     _TRISA	set	3986
   253  0000                     _TRISB	set	3987
   254  0000                     _TRISC	set	3988
   255  0000                     _TRISD	set	3989
   256  0000                     _TRISE	set	3990
   257  0000                     _ACKDT	set	32301
   258  0000                     _ACKEN	set	32300
   259  0000                     _ADIE	set	31982
   260  0000                     _INT1IE	set	32643
   261  0000                     _INT1IF	set	32640
   262  0000                     _PEIE	set	32662
   263  0000                     _PEN	set	32298
   264  0000                     _RCEN	set	32299
   265  0000                     _RSEN	set	32297
   266  0000                     _SEN	set	32296
   267  0000                     _TMR0IE	set	32661
   268  0000                     _TMR0IF	set	32658
   269  0000                     _TMR0ON	set	32431
   270  0000                     _TMR1IE	set	31976
   271  0000                     _TMR1IF	set	31984
   272  0000                     _TMR1ON	set	32360
   273  0000                     _TMR2IE	set	31977
   274  0000                     _TMR2IF	set	31985
   275  0000                     _TMR2ON	set	32338
   276  0000                     _TMR3IE	set	32001
   277  0000                     _TMR3IF	set	32009
   278  0000                     _TMR3ON	set	32136
   279  0000                     _TRISC3	set	31907
   280  0000                     _TRISC4	set	31908
   281  0000                     _nRBPU	set	32655
   282  00FACC                     STR_21:
   283  00FACC  25                 	db	37
   284  00FACD  30                 	db	48	;'0'
   285  00FACE  32                 	db	50	;'2'
   286  00FACF  64                 	db	100	;'d'
   287  00FAD0  25                 	db	37
   288  00FAD1  73                 	db	115	;'s'
   289  00FAD2  20                 	db	32
   290  00FAD3  7C                 	db	124
   291  00FAD4  20                 	db	32
   292  00FAD5  25                 	db	37
   293  00FAD6  30                 	db	48	;'0'
   294  00FAD7  32                 	db	50	;'2'
   295  00FAD8  64                 	db	100	;'d'
   296  00FAD9  3A                 	db	58	;':'
   297  00FADA  25                 	db	37
   298  00FADB  30                 	db	48	;'0'
   299  00FADC  32                 	db	50	;'2'
   300  00FADD  64                 	db	100	;'d'
   301  00FADE  3A                 	db	58	;':'
   302  00FADF  25                 	db	37
   303  00FAE0  30                 	db	48	;'0'
   304  00FAE1  32                 	db	50	;'2'
   305  00FAE2  64                 	db	100	;'d'
   306  00FAE3  00                 	db	0
   307  00FAE4                     STR_66:
   308  00FAE4  28                 	db	40
   309  00FAE5  64                 	db	100	;'d'
   310  00FAE6  61                 	db	97	;'a'
   311  00FAE7  74                 	db	116	;'t'
   312  00FAE8  61                 	db	97	;'a'
   313  00FAE9  3A                 	db	58	;':'
   314  00FAEA  20                 	db	32
   315  00FAEB  25                 	db	37
   316  00FAEC  75                 	db	117	;'u'
   317  00FAED  2C                 	db	44
   318  00FAEE  20                 	db	32
   319  00FAEF  61                 	db	97	;'a'
   320  00FAF0  64                 	db	100	;'d'
   321  00FAF1  64                 	db	100	;'d'
   322  00FAF2  72                 	db	114	;'r'
   323  00FAF3  3A                 	db	58	;':'
   324  00FAF4  20                 	db	32
   325  00FAF5  25                 	db	37
   326  00FAF6  75                 	db	117	;'u'
   327  00FAF7  29                 	db	41
   328  00FAF8  00                 	db	0
   329  00FAF9                     STR_112:
   330  00FAF9  44                 	db	68	;'D'
   331  00FAFA  20                 	db	32
   332  00FAFB  57                 	db	87	;'W'
   333  00FAFC  49                 	db	73	;'I'
   334  00FAFD  4C                 	db	76	;'L'
   335  00FAFE  4C                 	db	76	;'L'
   336  00FAFF  20                 	db	32
   337  00FB00  52                 	db	82	;'R'
   338  00FB01  45                 	db	69	;'E'
   339  00FB02  54                 	db	84	;'T'
   340  00FB03  55                 	db	85	;'U'
   341  00FB04  52                 	db	82	;'R'
   342  00FB05  4E                 	db	78	;'N'
   343  00FB06  20                 	db	32
   344  00FB07  20                 	db	32
   345  00FB08  20                 	db	32
   346  00FB09  20                 	db	32
   347  00FB0A  00                 	db	0
   348  00FB0B                     STR_120:
   349  00FB0B  4F                 	db	79	;'O'
   350  00FB0C  54                 	db	84	;'T'
   351  00FB0D  48                 	db	72	;'H'
   352  00FB0E  45                 	db	69	;'E'
   353  00FB0F  52                 	db	82	;'R'
   354  00FB10  20                 	db	32
   355  00FB11  53                 	db	83	;'S'
   356  00FB12  45                 	db	69	;'E'
   357  00FB13  54                 	db	84	;'T'
   358  00FB14  53                 	db	83	;'S'
   359  00FB15  20                 	db	32
   360  00FB16  52                 	db	82	;'R'
   361  00FB17  41                 	db	65	;'A'
   362  00FB18  35                 	db	53	;'5'
   363  00FB19  20                 	db	32
   364  00FB1A  20                 	db	32
   365  00FB1B  20                 	db	32
   366  00FB1C  00                 	db	0
   367  00FB1D                     STR_81:
   368  00FB1D  49                 	db	73	;'I'
   369  00FB1E  52                 	db	82	;'R'
   370  00FB1F  20                 	db	32
   371  00FB20  28                 	db	40
   372  00FB21  52                 	db	82	;'R'
   373  00FB22  45                 	db	69	;'E'
   374  00FB23  46                 	db	70	;'F'
   375  00FB24  4C                 	db	76	;'L'
   376  00FB25  45                 	db	69	;'E'
   377  00FB26  43                 	db	67	;'C'
   378  00FB27  29                 	db	41
   379  00FB28  3A                 	db	58	;':'
   380  00FB29  20                 	db	32
   381  00FB2A  25                 	db	37
   382  00FB2B  64                 	db	100	;'d'
   383  00FB2C  20                 	db	32
   384  00FB2D  20                 	db	32
   385  00FB2E  00                 	db	0
   386  00FB2F                     STR_79:
   387  00FB2F  49                 	db	73	;'I'
   388  00FB30  52                 	db	82	;'R'
   389  00FB31  20                 	db	32
   390  00FB32  28                 	db	40
   391  00FB33  50                 	db	80	;'P'
   392  00FB34  55                 	db	85	;'U'
   393  00FB35  53                 	db	83	;'S'
   394  00FB36  48                 	db	72	;'H'
   395  00FB37  45                 	db	69	;'E'
   396  00FB38  52                 	db	82	;'R'
   397  00FB39  29                 	db	41
   398  00FB3A  3A                 	db	58	;':'
   399  00FB3B  20                 	db	32
   400  00FB3C  25                 	db	37
   401  00FB3D  64                 	db	100	;'d'
   402  00FB3E  20                 	db	32
   403  00FB3F  20                 	db	32
   404  00FB40  00                 	db	0
   405  00FB41                     STR_119:
   406  00FB41  53                 	db	83	;'S'
   407  00FB42  3A                 	db	58	;':'
   408  00FB43  20                 	db	32
   409  00FB44  44                 	db	68	;'D'
   410  00FB45  20                 	db	32
   411  00FB46  57                 	db	87	;'W'
   412  00FB47  49                 	db	73	;'I'
   413  00FB48  4C                 	db	76	;'L'
   414  00FB49  4C                 	db	76	;'L'
   415  00FB4A  20                 	db	32
   416  00FB4B  52                 	db	82	;'R'
   417  00FB4C  45                 	db	69	;'E'
   418  00FB4D  54                 	db	84	;'T'
   419  00FB4E  55                 	db	85	;'U'
   420  00FB4F  52                 	db	82	;'R'
   421  00FB50  4E                 	db	78	;'N'
   422  00FB51  20                 	db	32
   423  00FB52  00                 	db	0
   424  00FB53                     STR_122:
   425  00FB53  4F                 	db	79	;'O'
   426  00FB54  54                 	db	84	;'T'
   427  00FB55  48                 	db	72	;'H'
   428  00FB56  45                 	db	69	;'E'
   429  00FB57  52                 	db	82	;'R'
   430  00FB58  3A                 	db	58	;':'
   431  00FB59  20                 	db	32
   432  00FB5A  43                 	db	67	;'C'
   433  00FB5B  41                 	db	65	;'A'
   434  00FB5C  4D                 	db	77	;'M'
   435  00FB5D  20                 	db	32
   436  00FB5E  54                 	db	84	;'T'
   437  00FB5F  4F                 	db	79	;'O'
   438  00FB60  47                 	db	71	;'G'
   439  00FB61  47                 	db	71	;'G'
   440  00FB62  4C                 	db	76	;'L'
   441  00FB63  45                 	db	69	;'E'
   442  00FB64  00                 	db	0
   443  00FB65                     STR_128:
   444  00FB65  4F                 	db	79	;'O'
   445  00FB66  54                 	db	84	;'T'
   446  00FB67  48                 	db	72	;'H'
   447  00FB68  45                 	db	69	;'E'
   448  00FB69  52                 	db	82	;'R'
   449  00FB6A  20                 	db	32
   450  00FB6B  53                 	db	83	;'S'
   451  00FB6C  45                 	db	69	;'E'
   452  00FB6D  54                 	db	84	;'T'
   453  00FB6E  53                 	db	83	;'S'
   454  00FB6F  20                 	db	32
   455  00FB70  50                 	db	80	;'P'
   456  00FB71  55                 	db	85	;'U'
   457  00FB72  53                 	db	83	;'S'
   458  00FB73  48                 	db	72	;'H'
   459  00FB74  45                 	db	69	;'E'
   460  00FB75  52                 	db	82	;'R'
   461  00FB76  00                 	db	0
   462  00FB77                     STR_3:
   463  00FB77  2D                 	db	45
   464  00FB78  2D                 	db	45
   465  00FB79  20                 	db	32
   466  00FB7A  4C                 	db	76	;'L'
   467  00FB7B  4F                 	db	79	;'O'
   468  00FB7C  47                 	db	71	;'G'
   469  00FB7D  20                 	db	32
   470  00FB7E  25                 	db	37
   471  00FB7F  32                 	db	50	;'2'
   472  00FB80  64                 	db	100	;'d'
   473  00FB81  20                 	db	32
   474  00FB82  48                 	db	72	;'H'
   475  00FB83  45                 	db	69	;'E'
   476  00FB84  52                 	db	82	;'R'
   477  00FB85  45                 	db	69	;'E'
   478  00FB86  2D                 	db	45
   479  00FB87  2D                 	db	45
   480  00FB88  00                 	db	0
   481  00FB89                     STR_1:
   482  00FB89  52                 	db	82	;'R'
   483  00FB8A  45                 	db	69	;'E'
   484  00FB8B  53                 	db	83	;'S'
   485  00FB8C  55                 	db	85	;'U'
   486  00FB8D  4C                 	db	76	;'L'
   487  00FB8E  54                 	db	84	;'T'
   488  00FB8F  53                 	db	83	;'S'
   489  00FB90  20                 	db	32
   490  00FB91  49                 	db	73	;'I'
   491  00FB92  4E                 	db	78	;'N'
   492  00FB93  20                 	db	32
   493  00FB94  4C                 	db	76	;'L'
   494  00FB95  4F                 	db	79	;'O'
   495  00FB96  47                 	db	71	;'G'
   496  00FB97  20                 	db	32
   497  00FB98  25                 	db	37
   498  00FB99  64                 	db	100	;'d'
   499  00FB9A  00                 	db	0
   500  00FB9B                     STR_103:
   501  00FB9B  4D                 	db	77	;'M'
   502  00FB9C  49                 	db	73	;'I'
   503  00FB9D  44                 	db	68	;'D'
   504  00FB9E  20                 	db	32
   505  00FB9F  2D                 	db	45
   506  00FBA0  2D                 	db	45
   507  00FBA1  20                 	db	32
   508  00FBA2  32                 	db	50	;'2'
   509  00FBA3  73                 	db	115	;'s'
   510  00FBA4  20                 	db	32
   511  00FBA5  20                 	db	32
   512  00FBA6  20                 	db	32
   513  00FBA7  20                 	db	32
   514  00FBA8  20                 	db	32
   515  00FBA9  20                 	db	32
   516  00FBAA  20                 	db	32
   517  00FBAB  00                 	db	0
   518  00FBAC                     STR_106:
   519  00FBAC  44                 	db	68	;'D'
   520  00FBAD  52                 	db	82	;'R'
   521  00FBAE  4F                 	db	79	;'O'
   522  00FBAF  50                 	db	80	;'P'
   523  00FBB0  20                 	db	32
   524  00FBB1  2D                 	db	45
   525  00FBB2  2D                 	db	45
   526  00FBB3  20                 	db	32
   527  00FBB4  32                 	db	50	;'2'
   528  00FBB5  73                 	db	115	;'s'
   529  00FBB6  20                 	db	32
   530  00FBB7  20                 	db	32
   531  00FBB8  20                 	db	32
   532  00FBB9  20                 	db	32
   533  00FBBA  20                 	db	32
   534  00FBBB  20                 	db	32
   535  00FBBC  00                 	db	0
   536  00FBBD                     STR_100:
   537  00FBBD  4C                 	db	76	;'L'
   538  00FBBE  45                 	db	69	;'E'
   539  00FBBF  46                 	db	70	;'F'
   540  00FBC0  54                 	db	84	;'T'
   541  00FBC1  20                 	db	32
   542  00FBC2  2D                 	db	45
   543  00FBC3  2D                 	db	45
   544  00FBC4  20                 	db	32
   545  00FBC5  32                 	db	50	;'2'
   546  00FBC6  73                 	db	115	;'s'
   547  00FBC7  20                 	db	32
   548  00FBC8  20                 	db	32
   549  00FBC9  20                 	db	32
   550  00FBCA  20                 	db	32
   551  00FBCB  20                 	db	32
   552  00FBCC  20                 	db	32
   553  00FBCD  00                 	db	0
   554  00FBCE                     STR_105:
   555  00FBCE  4C                 	db	76	;'L'
   556  00FBCF  45                 	db	69	;'E'
   557  00FBD0  56                 	db	86	;'V'
   558  00FBD1  45                 	db	69	;'E'
   559  00FBD2  4C                 	db	76	;'L'
   560  00FBD3  20                 	db	32
   561  00FBD4  2D                 	db	45
   562  00FBD5  2D                 	db	45
   563  00FBD6  20                 	db	32
   564  00FBD7  32                 	db	50	;'2'
   565  00FBD8  73                 	db	115	;'s'
   566  00FBD9  20                 	db	32
   567  00FBDA  20                 	db	32
   568  00FBDB  20                 	db	32
   569  00FBDC  20                 	db	32
   570  00FBDD  20                 	db	32
   571  00FBDE  00                 	db	0
   572  00FBDF                     STR_99:
   573  00FBDF  52                 	db	82	;'R'
   574  00FBE0  49                 	db	73	;'I'
   575  00FBE1  47                 	db	71	;'G'
   576  00FBE2  48                 	db	72	;'H'
   577  00FBE3  54                 	db	84	;'T'
   578  00FBE4  20                 	db	32
   579  00FBE5  2D                 	db	45
   580  00FBE6  2D                 	db	45
   581  00FBE7  20                 	db	32
   582  00FBE8  32                 	db	50	;'2'
   583  00FBE9  73                 	db	115	;'s'
   584  00FBEA  20                 	db	32
   585  00FBEB  20                 	db	32
   586  00FBEC  20                 	db	32
   587  00FBED  20                 	db	32
   588  00FBEE  20                 	db	32
   589  00FBEF  00                 	db	0
   590  00FBF0                     STR_98:
   591  00FBF0  4D                 	db	77	;'M'
   592  00FBF1  49                 	db	73	;'I'
   593  00FBF2  44                 	db	68	;'D'
   594  00FBF3  44                 	db	68	;'D'
   595  00FBF4  4C                 	db	76	;'L'
   596  00FBF5  45                 	db	69	;'E'
   597  00FBF6  20                 	db	32
   598  00FBF7  2D                 	db	45
   599  00FBF8  2D                 	db	45
   600  00FBF9  20                 	db	32
   601  00FBFA  32                 	db	50	;'2'
   602  00FBFB  73                 	db	115	;'s'
   603  00FBFC  20                 	db	32
   604  00FBFD  20                 	db	32
   605  00FBFE  20                 	db	32
   606  00FBFF  20                 	db	32
   607  00FC00  00                 	db	0
   608  00FC01                     STR_113:
   609  00FC01  4F                 	db	79	;'O'
   610  00FC02  54                 	db	84	;'T'
   611  00FC03  48                 	db	72	;'H'
   612  00FC04  45                 	db	69	;'E'
   613  00FC05  52                 	db	82	;'R'
   614  00FC06  20                 	db	32
   615  00FC07  53                 	db	83	;'S'
   616  00FC08  45                 	db	69	;'E'
   617  00FC09  54                 	db	84	;'T'
   618  00FC0A  53                 	db	83	;'S'
   619  00FC0B  20                 	db	32
   620  00FC0C  44                 	db	68	;'D'
   621  00FC0D  43                 	db	67	;'C'
   622  00FC0E  20                 	db	32
   623  00FC0F  20                 	db	32
   624  00FC10  20                 	db	32
   625  00FC11  00                 	db	0
   626  00FC12                     STR_125:
   627  00FC12  44                 	db	68	;'D'
   628  00FC13  20                 	db	32
   629  00FC14  57                 	db	87	;'W'
   630  00FC15  49                 	db	73	;'I'
   631  00FC16  4C                 	db	76	;'L'
   632  00FC17  4C                 	db	76	;'L'
   633  00FC18  20                 	db	32
   634  00FC19  52                 	db	82	;'R'
   635  00FC1A  45                 	db	69	;'E'
   636  00FC1B  54                 	db	84	;'T'
   637  00FC1C  55                 	db	85	;'U'
   638  00FC1D  52                 	db	82	;'R'
   639  00FC1E  4E                 	db	78	;'N'
   640  00FC1F  20                 	db	32
   641  00FC20  20                 	db	32
   642  00FC21  20                 	db	32
   643  00FC22  00                 	db	0
   644  00FC23                     STR_116:
   645  00FC23  35                 	db	53	;'5'
   646  00FC24  3A                 	db	58	;':'
   647  00FC25  48                 	db	72	;'H'
   648  00FC26  7C                 	db	124
   649  00FC27  36                 	db	54	;'6'
   650  00FC28  3A                 	db	58	;':'
   651  00FC29  4C                 	db	76	;'L'
   652  00FC2A  7C                 	db	124
   653  00FC2B  49                 	db	73	;'I'
   654  00FC2C  52                 	db	82	;'R'
   655  00FC2D  3A                 	db	58	;':'
   656  00FC2E  25                 	db	37
   657  00FC2F  64                 	db	100	;'d'
   658  00FC30  20                 	db	32
   659  00FC31  20                 	db	32
   660  00FC32  20                 	db	32
   661  00FC33  00                 	db	0
   662  00FC34                     STR_114:
   663  00FC34  31                 	db	49	;'1'
   664  00FC35  3A                 	db	58	;':'
   665  00FC36  20                 	db	32
   666  00FC37  44                 	db	68	;'D'
   667  00FC38  43                 	db	67	;'C'
   668  00FC39  20                 	db	32
   669  00FC3A  7C                 	db	124
   670  00FC3B  20                 	db	32
   671  00FC3C  41                 	db	65	;'A'
   672  00FC3D  3A                 	db	58	;':'
   673  00FC3E  20                 	db	32
   674  00FC3F  41                 	db	65	;'A'
   675  00FC40  52                 	db	82	;'R'
   676  00FC41  4D                 	db	77	;'M'
   677  00FC42  20                 	db	32
   678  00FC43  20                 	db	32
   679  00FC44  00                 	db	0
   680  00FC45                     STR_101:
   681  00FC45  4D                 	db	77	;'M'
   682  00FC46  49                 	db	73	;'I'
   683  00FC47  44                 	db	68	;'D'
   684  00FC48  2D                 	db	45
   685  00FC49  4C                 	db	76	;'L'
   686  00FC4A  45                 	db	69	;'E'
   687  00FC4B  46                 	db	70	;'F'
   688  00FC4C  54                 	db	84	;'T'
   689  00FC4D  20                 	db	32
   690  00FC4E  2D                 	db	45
   691  00FC4F  2D                 	db	45
   692  00FC50  20                 	db	32
   693  00FC51  32                 	db	50	;'2'
   694  00FC52  73                 	db	115	;'s'
   695  00FC53  20                 	db	32
   696  00FC54  20                 	db	32
   697  00FC55  00                 	db	0
   698  00FC56                     STR_102:
   699  00FC56  4D                 	db	77	;'M'
   700  00FC57  49                 	db	73	;'I'
   701  00FC58  44                 	db	68	;'D'
   702  00FC59  2D                 	db	45
   703  00FC5A  52                 	db	82	;'R'
   704  00FC5B  49                 	db	73	;'I'
   705  00FC5C  47                 	db	71	;'G'
   706  00FC5D  48                 	db	72	;'H'
   707  00FC5E  54                 	db	84	;'T'
   708  00FC5F  20                 	db	32
   709  00FC60  2D                 	db	45
   710  00FC61  2D                 	db	45
   711  00FC62  20                 	db	32
   712  00FC63  32                 	db	50	;'2'
   713  00FC64  73                 	db	115	;'s'
   714  00FC65  20                 	db	32
   715  00FC66  00                 	db	0
   716  00FC67                     STR_72:
   717  00FC67  41                 	db	65	;'A'
   718  00FC68  4C                 	db	76	;'L'
   719  00FC69  47                 	db	71	;'G'
   720  00FC6A  31                 	db	49	;'1'
   721  00FC6B  3A                 	db	58	;':'
   722  00FC6C  20                 	db	32
   723  00FC6D  39                 	db	57	;'9'
   724  00FC6E  20                 	db	32
   725  00FC6F  50                 	db	80	;'P'
   726  00FC70  4F                 	db	79	;'O'
   727  00FC71  50                 	db	80	;'P'
   728  00FC72  4E                 	db	78	;'N'
   729  00FC73  4F                 	db	79	;'O'
   730  00FC74  54                 	db	84	;'T'
   731  00FC75  41                 	db	65	;'A'
   732  00FC76  42                 	db	66	;'B'
   733  00FC77  00                 	db	0
   734  00FC78                     STR_93:
   735  00FC78  54                 	db	84	;'T'
   736  00FC79  53                 	db	83	;'S'
   737  00FC7A  54                 	db	84	;'T'
   738  00FC7B  3A                 	db	58	;':'
   739  00FC7C  20                 	db	32
   740  00FC7D  43                 	db	67	;'C'
   741  00FC7E  4F                 	db	79	;'O'
   742  00FC7F  4E                 	db	78	;'N'
   743  00FC80  44                 	db	68	;'D'
   744  00FC81  20                 	db	32
   745  00FC82  53                 	db	83	;'S'
   746  00FC83  4F                 	db	79	;'O'
   747  00FC84  4C                 	db	76	;'L'
   748  00FC85  4E                 	db	78	;'N'
   749  00FC86  27                 	db	39
   750  00FC87  44                 	db	68	;'D'
   751  00FC88  00                 	db	0
   752  00FC89                     STR_95:
   753  00FC89  54                 	db	84	;'T'
   754  00FC8A  53                 	db	83	;'S'
   755  00FC8B  54                 	db	84	;'T'
   756  00FC8C  3A                 	db	58	;':'
   757  00FC8D  20                 	db	32
   758  00FC8E  50                 	db	80	;'P'
   759  00FC8F  55                 	db	85	;'U'
   760  00FC90  53                 	db	83	;'S'
   761  00FC91  48                 	db	72	;'H'
   762  00FC92  20                 	db	32
   763  00FC93  53                 	db	83	;'S'
   764  00FC94  4F                 	db	79	;'O'
   765  00FC95  4C                 	db	76	;'L'
   766  00FC96  4E                 	db	78	;'N'
   767  00FC97  27                 	db	39
   768  00FC98  44                 	db	68	;'D'
   769  00FC99  00                 	db	0
   770  00FC9A                     STR_68:
   771  00FC9A  32                 	db	50	;'2'
   772  00FC9B  2E                 	db	46
   773  00FC9C  53                 	db	83	;'S'
   774  00FC9D  4E                 	db	78	;'N'
   775  00FC9E  52                 	db	82	;'R'
   776  00FC9F  7C                 	db	124
   777  00FCA0  34                 	db	52	;'4'
   778  00FCA1  2E                 	db	46
   779  00FCA2  48                 	db	72	;'H'
   780  00FCA3  49                 	db	73	;'I'
   781  00FCA4  7C                 	db	124
   782  00FCA5  35                 	db	53	;'5'
   783  00FCA6  2E                 	db	46
   784  00FCA7  4D                 	db	77	;'M'
   785  00FCA8  45                 	db	69	;'E'
   786  00FCA9  44                 	db	68	;'D'
   787  00FCAA  00                 	db	0
   788  00FCAB                     STR_69:
   789  00FCAB  42                 	db	66	;'B'
   790  00FCAC  2E                 	db	46
   791  00FCAD  50                 	db	80	;'P'
   792  00FCAE  4C                 	db	76	;'L'
   793  00FCAF  41                 	db	65	;'A'
   794  00FCB0  7C                 	db	124
   795  00FCB1  38                 	db	56	;'8'
   796  00FCB2  2E                 	db	46
   797  00FCB3  53                 	db	83	;'S'
   798  00FCB4  56                 	db	86	;'V'
   799  00FCB5  7C                 	db	124
   800  00FCB6  39                 	db	57	;'9'
   801  00FCB7  2E                 	db	46
   802  00FCB8  42                 	db	66	;'B'
   803  00FCB9  4C                 	db	76	;'L'
   804  00FCBA  4B                 	db	75	;'K'
   805  00FCBB  00                 	db	0
   806  00FCBC                     STR_126:
   807  00FCBC  45                 	db	69	;'E'
   808  00FCBD  4C                 	db	76	;'L'
   809  00FCBE  53                 	db	83	;'S'
   810  00FCBF  45                 	db	69	;'E'
   811  00FCC0  20                 	db	32
   812  00FCC1  54                 	db	84	;'T'
   813  00FCC2  4F                 	db	79	;'O'
   814  00FCC3  47                 	db	71	;'G'
   815  00FCC4  47                 	db	71	;'G'
   816  00FCC5  4C                 	db	76	;'L'
   817  00FCC6  45                 	db	69	;'E'
   818  00FCC7  53                 	db	83	;'S'
   819  00FCC8  20                 	db	32
   820  00FCC9  41                 	db	65	;'A'
   821  00FCCA  52                 	db	82	;'R'
   822  00FCCB  4D                 	db	77	;'M'
   823  00FCCC  00                 	db	0
   824  00FCCD                     STR_111:
   825  00FCCD  54                 	db	84	;'T'
   826  00FCCE  53                 	db	83	;'S'
   827  00FCCF  54                 	db	84	;'T'
   828  00FCD0  3A                 	db	58	;':'
   829  00FCD1  20                 	db	32
   830  00FCD2  42                 	db	66	;'B'
   831  00FCD3  4F                 	db	79	;'O'
   832  00FCD4  54                 	db	84	;'T'
   833  00FCD5  48                 	db	72	;'H'
   834  00FCD6  20                 	db	32
   835  00FCD7  53                 	db	83	;'S'
   836  00FCD8  45                 	db	69	;'E'
   837  00FCD9  52                 	db	82	;'R'
   838  00FCDA  56                 	db	86	;'V'
   839  00FCDB  4F                 	db	79	;'O'
   840  00FCDC  53                 	db	83	;'S'
   841  00FCDD  00                 	db	0
   842  00FCDE                     STR_41:
   843  00FCDE  4C                 	db	76	;'L'
   844  00FCDF  4F                 	db	79	;'O'
   845  00FCE0  47                 	db	71	;'G'
   846  00FCE1  20                 	db	32
   847  00FCE2  31                 	db	49	;'1'
   848  00FCE3  20                 	db	32
   849  00FCE4  20                 	db	32
   850  00FCE5  20                 	db	32
   851  00FCE6  20                 	db	32
   852  00FCE7  20                 	db	32
   853  00FCE8  20                 	db	32
   854  00FCE9  20                 	db	32
   855  00FCEA  20                 	db	32
   856  00FCEB  20                 	db	32
   857  00FCEC  20                 	db	32
   858  00FCED  20                 	db	32
   859  00FCEE  00                 	db	0
   860  00FCEF                     STR_40:
   861  00FCEF  4C                 	db	76	;'L'
   862  00FCF0  4F                 	db	79	;'O'
   863  00FCF1  47                 	db	71	;'G'
   864  00FCF2  20                 	db	32
   865  00FCF3  32                 	db	50	;'2'
   866  00FCF4  20                 	db	32
   867  00FCF5  20                 	db	32
   868  00FCF6  20                 	db	32
   869  00FCF7  20                 	db	32
   870  00FCF8  20                 	db	32
   871  00FCF9  20                 	db	32
   872  00FCFA  20                 	db	32
   873  00FCFB  20                 	db	32
   874  00FCFC  20                 	db	32
   875  00FCFD  20                 	db	32
   876  00FCFE  20                 	db	32
   877  00FCFF  00                 	db	0
   878  00FD00                     STR_44:
   879  00FD00  4C                 	db	76	;'L'
   880  00FD01  4F                 	db	79	;'O'
   881  00FD02  47                 	db	71	;'G'
   882  00FD03  20                 	db	32
   883  00FD04  33                 	db	51	;'3'
   884  00FD05  20                 	db	32
   885  00FD06  20                 	db	32
   886  00FD07  20                 	db	32
   887  00FD08  20                 	db	32
   888  00FD09  20                 	db	32
   889  00FD0A  20                 	db	32
   890  00FD0B  20                 	db	32
   891  00FD0C  20                 	db	32
   892  00FD0D  20                 	db	32
   893  00FD0E  20                 	db	32
   894  00FD0F  20                 	db	32
   895  00FD10  00                 	db	0
   896  00FD11                     STR_48:
   897  00FD11  4C                 	db	76	;'L'
   898  00FD12  4F                 	db	79	;'O'
   899  00FD13  47                 	db	71	;'G'
   900  00FD14  20                 	db	32
   901  00FD15  34                 	db	52	;'4'
   902  00FD16  20                 	db	32
   903  00FD17  20                 	db	32
   904  00FD18  20                 	db	32
   905  00FD19  20                 	db	32
   906  00FD1A  20                 	db	32
   907  00FD1B  20                 	db	32
   908  00FD1C  20                 	db	32
   909  00FD1D  20                 	db	32
   910  00FD1E  20                 	db	32
   911  00FD1F  20                 	db	32
   912  00FD20  20                 	db	32
   913  00FD21  00                 	db	0
   914  00FD22                     STR_36:
   915  00FD22  33                 	db	51	;'3'
   916  00FD23  2E                 	db	46
   917  00FD24  20                 	db	32
   918  00FD25  4C                 	db	76	;'L'
   919  00FD26  4F                 	db	79	;'O'
   920  00FD27  47                 	db	71	;'G'
   921  00FD28  53                 	db	83	;'S'
   922  00FD29  20                 	db	32
   923  00FD2A  20                 	db	32
   924  00FD2B  20                 	db	32
   925  00FD2C  20                 	db	32
   926  00FD2D  20                 	db	32
   927  00FD2E  20                 	db	32
   928  00FD2F  20                 	db	32
   929  00FD30  20                 	db	32
   930  00FD31  20                 	db	32
   931  00FD32  00                 	db	0
   932  00FD33                     STR_32:
   933  00FD33  32                 	db	50	;'2'
   934  00FD34  2E                 	db	46
   935  00FD35  20                 	db	32
   936  00FD36  53                 	db	83	;'S'
   937  00FD37  4F                 	db	79	;'O'
   938  00FD38  52                 	db	82	;'R'
   939  00FD39  54                 	db	84	;'T'
   940  00FD3A  20                 	db	32
   941  00FD3B  20                 	db	32
   942  00FD3C  20                 	db	32
   943  00FD3D  20                 	db	32
   944  00FD3E  20                 	db	32
   945  00FD3F  20                 	db	32
   946  00FD40  20                 	db	32
   947  00FD41  20                 	db	32
   948  00FD42  20                 	db	32
   949  00FD43  00                 	db	0
   950  00FD44                     STR_33:
   951  00FD44  31                 	db	49	;'1'
   952  00FD45  2E                 	db	46
   953  00FD46  20                 	db	32
   954  00FD47  44                 	db	68	;'D'
   955  00FD48  41                 	db	65	;'A'
   956  00FD49  54                 	db	84	;'T'
   957  00FD4A  45                 	db	69	;'E'
   958  00FD4B  2F                 	db	47
   959  00FD4C  54                 	db	84	;'T'
   960  00FD4D  49                 	db	73	;'I'
   961  00FD4E  4D                 	db	77	;'M'
   962  00FD4F  45                 	db	69	;'E'
   963  00FD50  20                 	db	32
   964  00FD51  20                 	db	32
   965  00FD52  20                 	db	32
   966  00FD53  20                 	db	32
   967  00FD54  00                 	db	0
   968  00FD55                     STR_24:
   969  00FD55  20                 	db	32
   970  00FD56  2D                 	db	45
   971  00FD57  2D                 	db	45
   972  00FD58  20                 	db	32
   973  00FD59  50                 	db	80	;'P'
   974  00FD5A  4F                 	db	79	;'O'
   975  00FD5B  50                 	db	80	;'P'
   976  00FD5C  20                 	db	32
   977  00FD5D  20                 	db	32
   978  00FD5E  43                 	db	67	;'C'
   979  00FD5F  41                 	db	65	;'A'
   980  00FD60  4E                 	db	78	;'N'
   981  00FD61  20                 	db	32
   982  00FD62  2D                 	db	45
   983  00FD63  2D                 	db	45
   984  00FD64  20                 	db	32
   985  00FD65  00                 	db	0
   986  00FD66                     STR_26:
   987  00FD66  20                 	db	32
   988  00FD67  2D                 	db	45
   989  00FD68  2D                 	db	45
   990  00FD69  20                 	db	32
   991  00FD6A  53                 	db	83	;'S'
   992  00FD6B  4F                 	db	79	;'O'
   993  00FD6C  55                 	db	85	;'U'
   994  00FD6D  50                 	db	80	;'P'
   995  00FD6E  20                 	db	32
   996  00FD6F  43                 	db	67	;'C'
   997  00FD70  41                 	db	65	;'A'
   998  00FD71  4E                 	db	78	;'N'
   999  00FD72  20                 	db	32
  1000  00FD73  2D                 	db	45
  1001  00FD74  2D                 	db	45
  1002  00FD75  20                 	db	32
  1003  00FD76  00                 	db	0
  1004  00FD77                     STR_28:
  1005  00FD77  2D                 	db	45
  1006  00FD78  2D                 	db	45
  1007  00FD79  20                 	db	32
  1008  00FD7A  54                 	db	84	;'T'
  1009  00FD7B  4F                 	db	79	;'O'
  1010  00FD7C  54                 	db	84	;'T'
  1011  00FD7D  41                 	db	65	;'A'
  1012  00FD7E  4C                 	db	76	;'L'
  1013  00FD7F  20                 	db	32
  1014  00FD80  43                 	db	67	;'C'
  1015  00FD81  41                 	db	65	;'A'
  1016  00FD82  4E                 	db	78	;'N'
  1017  00FD83  53                 	db	83	;'S'
  1018  00FD84  20                 	db	32
  1019  00FD85  2D                 	db	45
  1020  00FD86  2D                 	db	45
  1021  00FD87  00                 	db	0
  1022  00FD88                     STR_39:
  1023  00FD88  4C                 	db	76	;'L'
  1024  00FD89  4F                 	db	79	;'O'
  1025  00FD8A  47                 	db	71	;'G'
  1026  00FD8B  20                 	db	32
  1027  00FD8C  31                 	db	49	;'1'
  1028  00FD8D  20                 	db	32
  1029  00FD8E  20                 	db	32
  1030  00FD8F  20                 	db	32
  1031  00FD90  20                 	db	32
  1032  00FD91  20                 	db	32
  1033  00FD92  20                 	db	32
  1034  00FD93  20                 	db	32
  1035  00FD94  20                 	db	32
  1036  00FD95  20                 	db	32
  1037  00FD96  20                 	db	32
  1038  00FD97  3C                 	db	60	;'<'
  1039  00FD98  00                 	db	0
  1040  00FD99                     STR_42:
  1041  00FD99  4C                 	db	76	;'L'
  1042  00FD9A  4F                 	db	79	;'O'
  1043  00FD9B  47                 	db	71	;'G'
  1044  00FD9C  20                 	db	32
  1045  00FD9D  32                 	db	50	;'2'
  1046  00FD9E  20                 	db	32
  1047  00FD9F  20                 	db	32
  1048  00FDA0  20                 	db	32
  1049  00FDA1  20                 	db	32
  1050  00FDA2  20                 	db	32
  1051  00FDA3  20                 	db	32
  1052  00FDA4  20                 	db	32
  1053  00FDA5  20                 	db	32
  1054  00FDA6  20                 	db	32
  1055  00FDA7  20                 	db	32
  1056  00FDA8  3C                 	db	60	;'<'
  1057  00FDA9  00                 	db	0
  1058  00FDAA                     STR_46:
  1059  00FDAA  4C                 	db	76	;'L'
  1060  00FDAB  4F                 	db	79	;'O'
  1061  00FDAC  47                 	db	71	;'G'
  1062  00FDAD  20                 	db	32
  1063  00FDAE  33                 	db	51	;'3'
  1064  00FDAF  20                 	db	32
  1065  00FDB0  20                 	db	32
  1066  00FDB1  20                 	db	32
  1067  00FDB2  20                 	db	32
  1068  00FDB3  20                 	db	32
  1069  00FDB4  20                 	db	32
  1070  00FDB5  20                 	db	32
  1071  00FDB6  20                 	db	32
  1072  00FDB7  20                 	db	32
  1073  00FDB8  20                 	db	32
  1074  00FDB9  3C                 	db	60	;'<'
  1075  00FDBA  00                 	db	0
  1076  00FDBB                     STR_50:
  1077  00FDBB  4C                 	db	76	;'L'
  1078  00FDBC  4F                 	db	79	;'O'
  1079  00FDBD  47                 	db	71	;'G'
  1080  00FDBE  20                 	db	32
  1081  00FDBF  34                 	db	52	;'4'
  1082  00FDC0  20                 	db	32
  1083  00FDC1  20                 	db	32
  1084  00FDC2  20                 	db	32
  1085  00FDC3  20                 	db	32
  1086  00FDC4  20                 	db	32
  1087  00FDC5  20                 	db	32
  1088  00FDC6  20                 	db	32
  1089  00FDC7  20                 	db	32
  1090  00FDC8  20                 	db	32
  1091  00FDC9  20                 	db	32
  1092  00FDCA  3C                 	db	60	;'<'
  1093  00FDCB  00                 	db	0
  1094  00FDCC                     STR_38:
  1095  00FDCC  33                 	db	51	;'3'
  1096  00FDCD  2E                 	db	46
  1097  00FDCE  20                 	db	32
  1098  00FDCF  4C                 	db	76	;'L'
  1099  00FDD0  4F                 	db	79	;'O'
  1100  00FDD1  47                 	db	71	;'G'
  1101  00FDD2  53                 	db	83	;'S'
  1102  00FDD3  20                 	db	32
  1103  00FDD4  20                 	db	32
  1104  00FDD5  20                 	db	32
  1105  00FDD6  20                 	db	32
  1106  00FDD7  20                 	db	32
  1107  00FDD8  20                 	db	32
  1108  00FDD9  20                 	db	32
  1109  00FDDA  20                 	db	32
  1110  00FDDB  3C                 	db	60	;'<'
  1111  00FDDC  00                 	db	0
  1112  00FDDD                     STR_34:
  1113  00FDDD  32                 	db	50	;'2'
  1114  00FDDE  2E                 	db	46
  1115  00FDDF  20                 	db	32
  1116  00FDE0  53                 	db	83	;'S'
  1117  00FDE1  4F                 	db	79	;'O'
  1118  00FDE2  52                 	db	82	;'R'
  1119  00FDE3  54                 	db	84	;'T'
  1120  00FDE4  20                 	db	32
  1121  00FDE5  20                 	db	32
  1122  00FDE6  20                 	db	32
  1123  00FDE7  20                 	db	32
  1124  00FDE8  20                 	db	32
  1125  00FDE9  20                 	db	32
  1126  00FDEA  20                 	db	32
  1127  00FDEB  20                 	db	32
  1128  00FDEC  3C                 	db	60	;'<'
  1129  00FDED  00                 	db	0
  1130  00FDEE                     STR_31:
  1131  00FDEE  31                 	db	49	;'1'
  1132  00FDEF  2E                 	db	46
  1133  00FDF0  20                 	db	32
  1134  00FDF1  44                 	db	68	;'D'
  1135  00FDF2  41                 	db	65	;'A'
  1136  00FDF3  54                 	db	84	;'T'
  1137  00FDF4  45                 	db	69	;'E'
  1138  00FDF5  2F                 	db	47
  1139  00FDF6  54                 	db	84	;'T'
  1140  00FDF7  49                 	db	73	;'I'
  1141  00FDF8  4D                 	db	77	;'M'
  1142  00FDF9  45                 	db	69	;'E'
  1143  00FDFA  20                 	db	32
  1144  00FDFB  20                 	db	32
  1145  00FDFC  20                 	db	32
  1146  00FDFD  3C                 	db	60	;'<'
  1147  00FDFE  00                 	db	0
  1148  00FDFF                     STR_6:
  1149  00FDFF  50                 	db	80	;'P'
  1150  00FE00  41                 	db	65	;'A'
  1151  00FE01  55                 	db	85	;'U'
  1152  00FE02  53                 	db	83	;'S'
  1153  00FE03  45                 	db	69	;'E'
  1154  00FE04  20                 	db	32
  1155  00FE05  3C                 	db	60	;'<'
  1156  00FE06  20                 	db	32
  1157  00FE07  7C                 	db	124
  1158  00FE08  20                 	db	32
  1159  00FE09  42                 	db	66	;'B'
  1160  00FE0A  41                 	db	65	;'A'
  1161  00FE0B  43                 	db	67	;'C'
  1162  00FE0C  4B                 	db	75	;'K'
  1163  00FE0D  20                 	db	32
  1164  00FE0E  3E                 	db	62	;'>'
  1165  00FE0F  00                 	db	0
  1166  00FE10                     STR_30:
  1167  00FE10  50                 	db	80	;'P'
  1168  00FE11  55                 	db	85	;'U'
  1169  00FE12  53                 	db	83	;'S'
  1170  00FE13  48                 	db	72	;'H'
  1171  00FE14  20                 	db	32
  1172  00FE15  54                 	db	84	;'T'
  1173  00FE16  4F                 	db	79	;'O'
  1174  00FE17  20                 	db	32
  1175  00FE18  43                 	db	67	;'C'
  1176  00FE19  4F                 	db	79	;'O'
  1177  00FE1A  4E                 	db	78	;'N'
  1178  00FE1B  54                 	db	84	;'T'
  1179  00FE1C  49                 	db	73	;'I'
  1180  00FE1D  4E                 	db	78	;'N'
  1181  00FE1E  55                 	db	85	;'U'
  1182  00FE1F  45                 	db	69	;'E'
  1183  00FE20  00                 	db	0
  1184  00FE21                     STR_27:
  1185  00FE21  4E                 	db	78	;'N'
  1186  00FE22  4C                 	db	76	;'L'
  1187  00FE23  41                 	db	65	;'A'
  1188  00FE24  42                 	db	66	;'B'
  1189  00FE25  3A                 	db	58	;':'
  1190  00FE26  20                 	db	32
  1191  00FE27  25                 	db	37
  1192  00FE28  64                 	db	100	;'d'
  1193  00FE29  7C                 	db	124
  1194  00FE2A  4C                 	db	76	;'L'
  1195  00FE2B  41                 	db	65	;'A'
  1196  00FE2C  42                 	db	66	;'B'
  1197  00FE2D  3A                 	db	58	;':'
  1198  00FE2E  20                 	db	32
  1199  00FE2F  25                 	db	37
  1200  00FE30  64                 	db	100	;'d'
  1201  00FE31  00                 	db	0
  1202  00FE32                     STR_25:
  1203  00FE32  4E                 	db	78	;'N'
  1204  00FE33  54                 	db	84	;'T'
  1205  00FE34  41                 	db	65	;'A'
  1206  00FE35  42                 	db	66	;'B'
  1207  00FE36  3A                 	db	58	;':'
  1208  00FE37  20                 	db	32
  1209  00FE38  25                 	db	37
  1210  00FE39  64                 	db	100	;'d'
  1211  00FE3A  7C                 	db	124
  1212  00FE3B  54                 	db	84	;'T'
  1213  00FE3C  41                 	db	65	;'A'
  1214  00FE3D  42                 	db	66	;'B'
  1215  00FE3E  3A                 	db	58	;':'
  1216  00FE3F  20                 	db	32
  1217  00FE40  25                 	db	37
  1218  00FE41  64                 	db	100	;'d'
  1219  00FE42  00                 	db	0
  1220  00FE43                     STR_84:
  1221  00FE43  4D                 	db	77	;'M'
  1222  00FE44  41                 	db	65	;'A'
  1223  00FE45  47                 	db	71	;'G'
  1224  00FE46  5F                 	db	95	;'_'
  1225  00FE47  73                 	db	115	;'s'
  1226  00FE48  69                 	db	105	;'i'
  1227  00FE49  67                 	db	103	;'g'
  1228  00FE4A  6E                 	db	110	;'n'
  1229  00FE4B  61                 	db	97	;'a'
  1230  00FE4C  6C                 	db	108	;'l'
  1231  00FE4D  3A                 	db	58	;':'
  1232  00FE4E  20                 	db	32
  1233  00FE4F  25                 	db	37
  1234  00FE50  64                 	db	100	;'d'
  1235  00FE51  20                 	db	32
  1236  00FE52  00                 	db	0
  1237  00FE53                     STR_104:
  1238  00FE53  54                 	db	84	;'T'
  1239  00FE54  53                 	db	83	;'S'
  1240  00FE55  54                 	db	84	;'T'
  1241  00FE56  3A                 	db	58	;':'
  1242  00FE57  20                 	db	32
  1243  00FE58  54                 	db	84	;'T'
  1244  00FE59  49                 	db	73	;'I'
  1245  00FE5A  4C                 	db	76	;'L'
  1246  00FE5B  54                 	db	84	;'T'
  1247  00FE5C  20                 	db	32
  1248  00FE5D  53                 	db	83	;'S'
  1249  00FE5E  45                 	db	69	;'E'
  1250  00FE5F  52                 	db	82	;'R'
  1251  00FE60  56                 	db	86	;'V'
  1252  00FE61  4F                 	db	79	;'O'
  1253  00FE62  00                 	db	0
  1254  00FE63                     STR_4:
  1255  00FE63  44                 	db	68	;'D'
  1256  00FE64  49                 	db	73	;'I'
  1257  00FE65  44                 	db	68	;'D'
  1258  00FE66  4E                 	db	78	;'N'
  1259  00FE67  27                 	db	39
  1260  00FE68  54                 	db	84	;'T'
  1261  00FE69  20                 	db	32
  1262  00FE6A  43                 	db	67	;'C'
  1263  00FE6B  4F                 	db	79	;'O'
  1264  00FE6C  4D                 	db	77	;'M'
  1265  00FE6D  50                 	db	80	;'P'
  1266  00FE6E  4C                 	db	76	;'L'
  1267  00FE6F  45                 	db	69	;'E'
  1268  00FE70  54                 	db	84	;'T'
  1269  00FE71  45                 	db	69	;'E'
  1270  00FE72  00                 	db	0
  1271  00FE73                     STR_121:
  1272  00FE73  44                 	db	68	;'D'
  1273  00FE74  3A                 	db	58	;':'
  1274  00FE75  52                 	db	82	;'R'
  1275  00FE76  45                 	db	69	;'E'
  1276  00FE77  54                 	db	84	;'T'
  1277  00FE78  7C                 	db	124
  1278  00FE79  32                 	db	50	;'2'
  1279  00FE7A  3A                 	db	58	;':'
  1280  00FE7B  43                 	db	67	;'C'
  1281  00FE7C  20                 	db	32
  1282  00FE7D  25                 	db	37
  1283  00FE7E  64                 	db	100	;'d'
  1284  00FE7F  20                 	db	32
  1285  00FE80  20                 	db	32
  1286  00FE81  00                 	db	0
  1287  00FE82                     STR_110:
  1288  00FE82  43                 	db	67	;'C'
  1289  00FE83  41                 	db	65	;'A'
  1290  00FE84  4D                 	db	77	;'M'
  1291  00FE85  20                 	db	32
  1292  00FE86  44                 	db	68	;'D'
  1293  00FE87  57                 	db	87	;'W'
  1294  00FE88  4E                 	db	78	;'N'
  1295  00FE89  20                 	db	32
  1296  00FE8A  7C                 	db	124
  1297  00FE8B  52                 	db	82	;'R'
  1298  00FE8C  43                 	db	67	;'C'
  1299  00FE8D  30                 	db	48	;'0'
  1300  00FE8E  3D                 	db	61	;'='
  1301  00FE8F  30                 	db	48	;'0'
  1302  00FE90  00                 	db	0
  1303  00FE91                     STR_109:
  1304  00FE91  43                 	db	67	;'C'
  1305  00FE92  41                 	db	65	;'A'
  1306  00FE93  4D                 	db	77	;'M'
  1307  00FE94  20                 	db	32
  1308  00FE95  55                 	db	85	;'U'
  1309  00FE96  50                 	db	80	;'P'
  1310  00FE97  20                 	db	32
  1311  00FE98  20                 	db	32
  1312  00FE99  7C                 	db	124
  1313  00FE9A  52                 	db	82	;'R'
  1314  00FE9B  43                 	db	67	;'C'
  1315  00FE9C  30                 	db	48	;'0'
  1316  00FE9D  3D                 	db	61	;'='
  1317  00FE9E  31                 	db	49	;'1'
  1318  00FE9F  00                 	db	0
  1319  00FEA0                     STR_83:
  1320  00FEA0  54                 	db	84	;'T'
  1321  00FEA1  53                 	db	83	;'S'
  1322  00FEA2  54                 	db	84	;'T'
  1323  00FEA3  3A                 	db	58	;':'
  1324  00FEA4  20                 	db	32
  1325  00FEA5  4D                 	db	77	;'M'
  1326  00FEA6  41                 	db	65	;'A'
  1327  00FEA7  47                 	db	71	;'G'
  1328  00FEA8  4E                 	db	78	;'N'
  1329  00FEA9  45                 	db	69	;'E'
  1330  00FEAA  54                 	db	84	;'T'
  1331  00FEAB  49                 	db	73	;'I'
  1332  00FEAC  53                 	db	83	;'S'
  1333  00FEAD  4D                 	db	77	;'M'
  1334  00FEAE  00                 	db	0
  1335  00FEAF                     STR_108:
  1336  00FEAF  54                 	db	84	;'T'
  1337  00FEB0  53                 	db	83	;'S'
  1338  00FEB1  54                 	db	84	;'T'
  1339  00FEB2  3A                 	db	58	;':'
  1340  00FEB3  20                 	db	32
  1341  00FEB4  43                 	db	67	;'C'
  1342  00FEB5  41                 	db	65	;'A'
  1343  00FEB6  4D                 	db	77	;'M'
  1344  00FEB7  20                 	db	32
  1345  00FEB8  53                 	db	83	;'S'
  1346  00FEB9  45                 	db	69	;'E'
  1347  00FEBA  52                 	db	82	;'R'
  1348  00FEBB  56                 	db	86	;'V'
  1349  00FEBC  4F                 	db	79	;'O'
  1350  00FEBD  00                 	db	0
  1351  00FEBE                     STR_97:
  1352  00FEBE  54                 	db	84	;'T'
  1353  00FEBF  53                 	db	83	;'S'
  1354  00FEC0  54                 	db	84	;'T'
  1355  00FEC1  3A                 	db	58	;':'
  1356  00FEC2  20                 	db	32
  1357  00FEC3  50                 	db	80	;'P'
  1358  00FEC4  41                 	db	65	;'A'
  1359  00FEC5  4E                 	db	78	;'N'
  1360  00FEC6  20                 	db	32
  1361  00FEC7  53                 	db	83	;'S'
  1362  00FEC8  45                 	db	69	;'E'
  1363  00FEC9  52                 	db	82	;'R'
  1364  00FECA  56                 	db	86	;'V'
  1365  00FECB  4F                 	db	79	;'O'
  1366  00FECC  00                 	db	0
  1367  00FECD                     STR_75:
  1368  00FECD  41                 	db	65	;'A'
  1369  00FECE  4C                 	db	76	;'L'
  1370  00FECF  47                 	db	71	;'G'
  1371  00FED0  34                 	db	52	;'4'
  1372  00FED1  3A                 	db	58	;':'
  1373  00FED2  20                 	db	32
  1374  00FED3  41                 	db	65	;'A'
  1375  00FED4  4C                 	db	76	;'L'
  1376  00FED5  4C                 	db	76	;'L'
  1377  00FED6  20                 	db	32
  1378  00FED7  43                 	db	67	;'C'
  1379  00FED8  41                 	db	65	;'A'
  1380  00FED9  4E                 	db	78	;'N'
  1381  00FEDA  53                 	db	83	;'S'
  1382  00FEDB  00                 	db	0
  1383  00FEDC                     STR_91:
  1384  00FEDC  54                 	db	84	;'T'
  1385  00FEDD  53                 	db	83	;'S'
  1386  00FEDE  54                 	db	84	;'T'
  1387  00FEDF  3A                 	db	58	;':'
  1388  00FEE0  20                 	db	32
  1389  00FEE1  44                 	db	68	;'D'
  1390  00FEE2  43                 	db	67	;'C'
  1391  00FEE3  20                 	db	32
  1392  00FEE4  4D                 	db	77	;'M'
  1393  00FEE5  4F                 	db	79	;'O'
  1394  00FEE6  54                 	db	84	;'T'
  1395  00FEE7  4F                 	db	79	;'O'
  1396  00FEE8  52                 	db	82	;'R'
  1397  00FEE9  53                 	db	83	;'S'
  1398  00FEEA  00                 	db	0
  1399  00FEEB                     STR_70:
  1400  00FEEB  41                 	db	65	;'A'
  1401  00FEEC  4C                 	db	76	;'L'
  1402  00FEED  47                 	db	71	;'G'
  1403  00FEEE  4F                 	db	79	;'O'
  1404  00FEEF  52                 	db	82	;'R'
  1405  00FEF0  49                 	db	73	;'I'
  1406  00FEF1  54                 	db	84	;'T'
  1407  00FEF2  48                 	db	72	;'H'
  1408  00FEF3  4D                 	db	77	;'M'
  1409  00FEF4  20                 	db	32
  1410  00FEF5  54                 	db	84	;'T'
  1411  00FEF6  45                 	db	69	;'E'
  1412  00FEF7  53                 	db	83	;'S'
  1413  00FEF8  54                 	db	84	;'T'
  1414  00FEF9  00                 	db	0
  1415  00FEFA                     STR_92:
  1416  00FEFA  50                 	db	80	;'P'
  1417  00FEFB  49                 	db	73	;'I'
  1418  00FEFC  4E                 	db	78	;'N'
  1419  00FEFD  20                 	db	32
  1420  00FEFE  52                 	db	82	;'R'
  1421  00FEFF  41                 	db	65	;'A'
  1422  00FF00  35                 	db	53	;'5'
  1423  00FF01  20                 	db	32
  1424  00FF02  48                 	db	72	;'H'
  1425  00FF03  49                 	db	73	;'I'
  1426  00FF04  47                 	db	71	;'G'
  1427  00FF05  48                 	db	72	;'H'
  1428  00FF06  2E                 	db	46
  1429  00FF07  00                 	db	0
  1430  00FF08                     STR_73:
  1431  00FF08  41                 	db	65	;'A'
  1432  00FF09  4C                 	db	76	;'L'
  1433  00FF0A  47                 	db	71	;'G'
  1434  00FF0B  32                 	db	50	;'2'
  1435  00FF0C  3A                 	db	58	;':'
  1436  00FF0D  20                 	db	32
  1437  00FF0E  31                 	db	49	;'1'
  1438  00FF0F  32                 	db	50	;'2'
  1439  00FF10  20                 	db	32
  1440  00FF11  43                 	db	67	;'C'
  1441  00FF12  41                 	db	65	;'A'
  1442  00FF13  4E                 	db	78	;'N'
  1443  00FF14  53                 	db	83	;'S'
  1444  00FF15  00                 	db	0
  1445  00FF16                     STR_76:
  1446  00FF16  41                 	db	65	;'A'
  1447  00FF17  4C                 	db	76	;'L'
  1448  00FF18  47                 	db	71	;'G'
  1449  00FF19  35                 	db	53	;'5'
  1450  00FF1A  3A                 	db	58	;':'
  1451  00FF1B  20                 	db	32
  1452  00FF1C  4E                 	db	78	;'N'
  1453  00FF1D  4F                 	db	79	;'O'
  1454  00FF1E  20                 	db	32
  1455  00FF1F  43                 	db	67	;'C'
  1456  00FF20  41                 	db	65	;'A'
  1457  00FF21  4E                 	db	78	;'N'
  1458  00FF22  53                 	db	83	;'S'
  1459  00FF23  00                 	db	0
  1460  00FF24                     STR_71:
  1461  00FF24  50                 	db	80	;'P'
  1462  00FF25  55                 	db	85	;'U'
  1463  00FF26  53                 	db	83	;'S'
  1464  00FF27  48                 	db	72	;'H'
  1465  00FF28  20                 	db	32
  1466  00FF29  54                 	db	84	;'T'
  1467  00FF2A  4F                 	db	79	;'O'
  1468  00FF2B  20                 	db	32
  1469  00FF2C  53                 	db	83	;'S'
  1470  00FF2D  54                 	db	84	;'T'
  1471  00FF2E  41                 	db	65	;'A'
  1472  00FF2F  52                 	db	82	;'R'
  1473  00FF30  54                 	db	84	;'T'
  1474  00FF31  00                 	db	0
  1475  00FF32                     STR_64:
  1476  00FF32  72                 	db	114	;'r'
  1477  00FF33  31                 	db	49	;'1'
  1478  00FF34  3A                 	db	58	;':'
  1479  00FF35  20                 	db	32
  1480  00FF36  25                 	db	37
  1481  00FF37  64                 	db	100	;'d'
  1482  00FF38  7C                 	db	124
  1483  00FF39  72                 	db	114	;'r'
  1484  00FF3A  32                 	db	50	;'2'
  1485  00FF3B  3A                 	db	58	;':'
  1486  00FF3C  20                 	db	32
  1487  00FF3D  25                 	db	37
  1488  00FF3E  64                 	db	100	;'d'
  1489  00FF3F  00                 	db	0
  1490  00FF40                     STR_23:
  1491  00FF40  25                 	db	37
  1492  00FF41  64                 	db	100	;'d'
  1493  00FF42  20                 	db	32
  1494  00FF43  4D                 	db	77	;'M'
  1495  00FF44  49                 	db	73	;'I'
  1496  00FF45  4E                 	db	78	;'N'
  1497  00FF46  20                 	db	32
  1498  00FF47  25                 	db	37
  1499  00FF48  64                 	db	100	;'d'
  1500  00FF49  20                 	db	32
  1501  00FF4A  53                 	db	83	;'S'
  1502  00FF4B  45                 	db	69	;'E'
  1503  00FF4C  43                 	db	67	;'C'
  1504  00FF4D  00                 	db	0
  1505  00FF4E                     STR_2:
  1506  00FF4E  54                 	db	84	;'T'
  1507  00FF4F  49                 	db	73	;'I'
  1508  00FF50  4D                 	db	77	;'M'
  1509  00FF51  45                 	db	69	;'E'
  1510  00FF52  3A                 	db	58	;':'
  1511  00FF53  20                 	db	32
  1512  00FF54  25                 	db	37
  1513  00FF55  64                 	db	100	;'d'
  1514  00FF56  3A                 	db	58	;':'
  1515  00FF57  25                 	db	37
  1516  00FF58  30                 	db	48	;'0'
  1517  00FF59  32                 	db	50	;'2'
  1518  00FF5A  64                 	db	100	;'d'
  1519  00FF5B  00                 	db	0
  1520  00FF5C                     STR_74:
  1521  00FF5C  41                 	db	65	;'A'
  1522  00FF5D  4C                 	db	76	;'L'
  1523  00FF5E  47                 	db	71	;'G'
  1524  00FF5F  33                 	db	51	;'3'
  1525  00FF60  3A                 	db	58	;':'
  1526  00FF61  20                 	db	32
  1527  00FF62  31                 	db	49	;'1'
  1528  00FF63  20                 	db	32
  1529  00FF64  43                 	db	67	;'C'
  1530  00FF65  41                 	db	65	;'A'
  1531  00FF66  4E                 	db	78	;'N'
  1532  00FF67  00                 	db	0
  1533  00FF68                     STR_94:
  1534  00FF68  50                 	db	80	;'P'
  1535  00FF69  49                 	db	73	;'I'
  1536  00FF6A  4E                 	db	78	;'N'
  1537  00FF6B  20                 	db	32
  1538  00FF6C  52                 	db	82	;'R'
  1539  00FF6D  41                 	db	65	;'A'
  1540  00FF6E  33                 	db	51	;'3'
  1541  00FF6F  2E                 	db	46
  1542  00FF70  2E                 	db	46
  1543  00FF71  2E                 	db	46
  1544  00FF72  00                 	db	0
  1545  00FF73                     STR_96:
  1546  00FF73  50                 	db	80	;'P'
  1547  00FF74  49                 	db	73	;'I'
  1548  00FF75  4E                 	db	78	;'N'
  1549  00FF76  20                 	db	32
  1550  00FF77  52                 	db	82	;'R'
  1551  00FF78  41                 	db	65	;'A'
  1552  00FF79  34                 	db	52	;'4'
  1553  00FF7A  2E                 	db	46
  1554  00FF7B  2E                 	db	46
  1555  00FF7C  2E                 	db	46
  1556  00FF7D  00                 	db	0
  1557  00FF7E                     STR_85:
  1558  00FF7E  54                 	db	84	;'T'
  1559  00FF7F  53                 	db	83	;'S'
  1560  00FF80  54                 	db	84	;'T'
  1561  00FF81  3A                 	db	58	;':'
  1562  00FF82  20                 	db	32
  1563  00FF83  43                 	db	67	;'C'
  1564  00FF84  4F                 	db	79	;'O'
  1565  00FF85  4E                 	db	78	;'N'
  1566  00FF86  44                 	db	68	;'D'
  1567  00FF87  00                 	db	0
  1568  00FF88                     STR_89:
  1569  00FF88  41                 	db	65	;'A'
  1570  00FF89  43                 	db	67	;'C'
  1571  00FF8A  54                 	db	84	;'T'
  1572  00FF8B  55                 	db	85	;'U'
  1573  00FF8C  41                 	db	65	;'A'
  1574  00FF8D  54                 	db	84	;'T'
  1575  00FF8E  4F                 	db	79	;'O'
  1576  00FF8F  52                 	db	82	;'R'
  1577  00FF90  53                 	db	83	;'S'
  1578  00FF91  00                 	db	0
  1579  00FF92                     STR_22:
  1580  00FF92  44                 	db	68	;'D'
  1581  00FF93  55                 	db	85	;'U'
  1582  00FF94  52                 	db	82	;'R'
  1583  00FF95  41                 	db	65	;'A'
  1584  00FF96  54                 	db	84	;'T'
  1585  00FF97  49                 	db	73	;'I'
  1586  00FF98  4F                 	db	79	;'O'
  1587  00FF99  4E                 	db	78	;'N'
  1588  00FF9A  3A                 	db	58	;':'
  1589  00FF9B  00                 	db	0
  1590  00FF9C                     STR_87:
  1591  00FF9C  43                 	db	67	;'C'
  1592  00FF9D  4F                 	db	79	;'O'
  1593  00FF9E  4E                 	db	78	;'N'
  1594  00FF9F  44                 	db	68	;'D'
  1595  00FFA0  3A                 	db	58	;':'
  1596  00FFA1  20                 	db	32
  1597  00FFA2  25                 	db	37
  1598  00FFA3  64                 	db	100	;'d'
  1599  00FFA4  00                 	db	0
  1600  00FFA5                     STR_65:
  1601  00FFA5  63                 	db	99	;'c'
  1602  00FFA6  6F                 	db	111	;'o'
  1603  00FFA7  6E                 	db	110	;'n'
  1604  00FFA8  64                 	db	100	;'d'
  1605  00FFA9  3A                 	db	58	;':'
  1606  00FFAA  20                 	db	32
  1607  00FFAB  25                 	db	37
  1608  00FFAC  64                 	db	100	;'d'
  1609  00FFAD  00                 	db	0
  1610  00FFAE                     STR_77:
  1611  00FFAE  53                 	db	83	;'S'
  1612  00FFAF  45                 	db	69	;'E'
  1613  00FFB0  4E                 	db	78	;'N'
  1614  00FFB1  53                 	db	83	;'S'
  1615  00FFB2  4F                 	db	79	;'O'
  1616  00FFB3  52                 	db	82	;'R'
  1617  00FFB4  53                 	db	83	;'S'
  1618  00FFB5  00                 	db	0
  1619  00FFB6                     STR_129:
  1620  00FFB6  28                 	db	40
  1621  00FFB7  6E                 	db	110	;'n'
  1622  00FFB8  75                 	db	117	;'u'
  1623  00FFB9  6C                 	db	108	;'l'
  1624  00FFBA  6C                 	db	108	;'l'
  1625  00FFBB  29                 	db	41
  1626  00FFBC  00                 	db	0
  1627  00FFBD                     STR_67:
  1628  00FFBD  46                 	db	70	;'F'
  1629  00FFBE  41                 	db	65	;'A'
  1630  00FFBF  49                 	db	73	;'I'
  1631  00FFC0  4C                 	db	76	;'L'
  1632  00FFC1  45                 	db	69	;'E'
  1633  00FFC2  44                 	db	68	;'D'
  1634  00FFC3  00                 	db	0
  1635  00FFC4                     STR_7:
  1636  00FFC4  53                 	db	83	;'S'
  1637  00FFC5  54                 	db	84	;'T'
  1638  00FFC6  41                 	db	65	;'A'
  1639  00FFC7  52                 	db	82	;'R'
  1640  00FFC8  54                 	db	84	;'T'
  1641  00FFC9  3A                 	db	58	;':'
  1642  00FFCA  00                 	db	0
  1643  00FFCB                     STR_9:
  1644  00FFCB  46                 	db	70	;'F'
  1645  00FFCC  45                 	db	69	;'E'
  1646  00FFCD  42                 	db	66	;'B'
  1647  00FFCE  00                 	db	0
  1648  00FFCF                     STR_19:
  1649  00FFCF  44                 	db	68	;'D'
  1650  00FFD0  45                 	db	69	;'E'
  1651  00FFD1  43                 	db	67	;'C'
  1652  00FFD2  00                 	db	0
  1653  00FFD3                     STR_15:
  1654  00FFD3  41                 	db	65	;'A'
  1655  00FFD4  55                 	db	85	;'U'
  1656  00FFD5  47                 	db	71	;'G'
  1657  00FFD6  00                 	db	0
  1658  00FFD7                     STR_14:
  1659  00FFD7  4A                 	db	74	;'J'
  1660  00FFD8  55                 	db	85	;'U'
  1661  00FFD9  4C                 	db	76	;'L'
  1662  00FFDA  00                 	db	0
  1663  00FFDB                     STR_8:
  1664  00FFDB  4A                 	db	74	;'J'
  1665  00FFDC  41                 	db	65	;'A'
  1666  00FFDD  4E                 	db	78	;'N'
  1667  00FFDE  00                 	db	0
  1668  00FFDF                     STR_13:
  1669  00FFDF  4A                 	db	74	;'J'
  1670  00FFE0  55                 	db	85	;'U'
  1671  00FFE1  4E                 	db	78	;'N'
  1672  00FFE2  00                 	db	0
  1673  00FFE3                     STR_16:
  1674  00FFE3  53                 	db	83	;'S'
  1675  00FFE4  45                 	db	69	;'E'
  1676  00FFE5  50                 	db	80	;'P'
  1677  00FFE6  00                 	db	0
  1678  00FFE7                     STR_10:
  1679  00FFE7  4D                 	db	77	;'M'
  1680  00FFE8  41                 	db	65	;'A'
  1681  00FFE9  52                 	db	82	;'R'
  1682  00FFEA  00                 	db	0
  1683  00FFEB                     STR_11:
  1684  00FFEB  41                 	db	65	;'A'
  1685  00FFEC  50                 	db	80	;'P'
  1686  00FFED  52                 	db	82	;'R'
  1687  00FFEE  00                 	db	0
  1688  00FFEF                     STR_20:
  1689  00FFEF  45                 	db	69	;'E'
  1690  00FFF0  52                 	db	82	;'R'
  1691  00FFF1  52                 	db	82	;'R'
  1692  00FFF2  00                 	db	0
  1693  00FFF3                     STR_17:
  1694  00FFF3  4F                 	db	79	;'O'
  1695  00FFF4  43                 	db	67	;'C'
  1696  00FFF5  54                 	db	84	;'T'
  1697  00FFF6  00                 	db	0
  1698  00FFF7                     STR_18:
  1699  00FFF7  4E                 	db	78	;'N'
  1700  00FFF8  4F                 	db	79	;'O'
  1701  00FFF9  56                 	db	86	;'V'
  1702  00FFFA  00                 	db	0
  1703  00FFFB                     STR_12:
  1704  00FFFB  4D                 	db	77	;'M'
  1705  00FFFC  41                 	db	65	;'A'
  1706  00FFFD  59                 	db	89	;'Y'
  1707  00FFFE  00                 	db	0
  1708  0000                     
  1709                           ; #config settings
  1710  00FFFF  00                 	db	0	; dummy byte at the end
  1711  0000                     
  1712                           	psect	cinit
  1713  00593E                     __pcinit:
  1714                           	opt stack 0
  1715  00593E                     start_initialization:
  1716                           	opt stack 0
  1717  00593E                     __initialization:
  1718                           	opt stack 0
  1719                           
  1720                           ; Initialize objects allocated to BANK1 (8 bytes)
  1721                           ; load TBLPTR registers with __pidataBANK1
  1722  00593E  0E36               	movlw	low __pidataBANK1
  1723  005940  6EF6               	movwf	tblptrl,c
  1724  005942  0E61               	movlw	high __pidataBANK1
  1725  005944  6EF7               	movwf	tblptrh,c
  1726  005946  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1727  005948  6EF8               	movwf	tblptru,c
  1728  00594A  EE01  F049         	lfsr	0,__pdataBANK1
  1729  00594E  EE10 F008          	lfsr	1,8
  1730  005952                     copy_data0:
  1731  005952  0009               	tblrd		*+
  1732  005954  CFF5 FFEE          	movff	tablat,postinc0
  1733  005958  50E5               	movf	postdec1,w,c
  1734  00595A  50E1               	movf	fsr1l,w,c
  1735  00595C  E1FA               	bnz	copy_data0
  1736                           
  1737                           ; Clear objects allocated to BANK1 (73 bytes)
  1738  00595E  EE01  F000         	lfsr	0,__pbssBANK1
  1739  005962  0E49               	movlw	73
  1740  005964                     clear_0:
  1741  005964  6AEE               	clrf	postinc0,c
  1742  005966  06E8               	decf	wreg,f,c
  1743  005968  E1FD               	bnz	clear_0
  1744                           
  1745                           ; Clear objects allocated to BANK0 (38 bytes)
  1746  00596A  EE00  F0DA         	lfsr	0,__pbssBANK0
  1747  00596E  0E26               	movlw	38
  1748  005970                     clear_1:
  1749  005970  6AEE               	clrf	postinc0,c
  1750  005972  06E8               	decf	wreg,f,c
  1751  005974  E1FD               	bnz	clear_1
  1752                           
  1753                           ; Clear objects allocated to COMRAM (41 bytes)
  1754  005976  EE00  F055         	lfsr	0,__pbssCOMRAM
  1755  00597A  0E29               	movlw	41
  1756  00597C                     clear_2:
  1757  00597C  6AEE               	clrf	postinc0,c
  1758  00597E  06E8               	decf	wreg,f,c
  1759  005980  E1FD               	bnz	clear_2
  1760  005982                     end_of_initialization:
  1761                           	opt stack 0
  1762  005982                     __end_of__initialization:
  1763                           	opt stack 0
  1764  005982  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1765  005984  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1766  005986  0100               	movlb	0
  1767  005988  EF73  F026         	goto	_main	;jump to C main() function
  1768                           tblptru	equ	0xFF8
  1769                           tblptrh	equ	0xFF7
  1770                           tblptrl	equ	0xFF6
  1771                           tablat	equ	0xFF5
  1772                           postinc0	equ	0xFEE
  1773                           wreg	equ	0xFE8
  1774                           postdec1	equ	0xFE5
  1775                           fsr1l	equ	0xFE1
  1776                           
  1777                           	psect	bssCOMRAM
  1778  000055                     __pbssCOMRAM:
  1779                           	opt stack 0
  1780  000055                     _servoTimes:
  1781                           	opt stack 0
  1782  000055                     	ds	8
  1783  00005D                     _agitator_toggle_count:
  1784                           	opt stack 0
  1785  00005D                     	ds	2
  1786  00005F                     _back:
  1787                           	opt stack 0
  1788  00005F                     	ds	2
  1789  000061                     _down:
  1790                           	opt stack 0
  1791  000061                     	ds	2
  1792  000063                     _enter:
  1793                           	opt stack 0
  1794  000063                     	ds	2
  1795  000065                     _f_panning_to_bin:
  1796                           	opt stack 0
  1797  000065                     	ds	2
  1798  000067                     _log_count_can_no_lab:
  1799                           	opt stack 0
  1800  000067                     	ds	2
  1801  000069                     _log_count_pop_w_tab:
  1802                           	opt stack 0
  1803  000069                     	ds	2
  1804  00006B                     _pan_servo_state:
  1805                           	opt stack 0
  1806  00006B                     	ds	2
  1807  00006D                     _servo_timer_counter:
  1808                           	opt stack 0
  1809  00006D                     	ds	2
  1810  00006F                     _servo_timer_target:
  1811                           	opt stack 0
  1812  00006F                     	ds	2
  1813  000071                     _tilt_servo_state:
  1814                           	opt stack 0
  1815  000071                     	ds	2
  1816  000073                     _timer2_counter:
  1817                           	opt stack 0
  1818  000073                     	ds	2
  1819  000075                     _up:
  1820                           	opt stack 0
  1821  000075                     	ds	2
  1822  000077                     _was_low_1:
  1823                           	opt stack 0
  1824  000077                     	ds	2
  1825  000079                     _was_low_2:
  1826                           	opt stack 0
  1827  000079                     	ds	2
  1828  00007B                     _was_low_3:
  1829                           	opt stack 0
  1830  00007B                     	ds	2
  1831  00007D                     _input:
  1832                           	opt stack 0
  1833  00007D                     	ds	1
  1834                           tblptru	equ	0xFF8
  1835                           tblptrh	equ	0xFF7
  1836                           tblptrl	equ	0xFF6
  1837                           tablat	equ	0xFF5
  1838                           postinc0	equ	0xFEE
  1839                           wreg	equ	0xFE8
  1840                           postdec1	equ	0xFE5
  1841                           fsr1l	equ	0xFE1
  1842                           
  1843                           	psect	bssBANK0
  1844  0000DA                     __pbssBANK0:
  1845                           	opt stack 0
  1846  0000DA                     _sensor_outputs:
  1847                           	opt stack 0
  1848  0000DA                     	ds	4
  1849  0000DE                     _COND_signal:
  1850                           	opt stack 0
  1851  0000DE                     	ds	2
  1852  0000E0                     _IR_res:
  1853                           	opt stack 0
  1854  0000E0                     	ds	2
  1855  0000E2                     _IR_signal:
  1856                           	opt stack 0
  1857  0000E2                     	ds	2
  1858  0000E4                     _MAG_signal:
  1859                           	opt stack 0
  1860  0000E4                     	ds	2
  1861  0000E6                     _RTCflag:
  1862                           	opt stack 0
  1863  0000E6                     	ds	2
  1864  0000E8                     _cur_state:
  1865                           	opt stack 0
  1866  0000E8                     	ds	2
  1867  0000EA                     _f_arm_position:
  1868                           	opt stack 0
  1869  0000EA                     	ds	2
  1870  0000EC                     _f_lastCan:
  1871                           	opt stack 0
  1872  0000EC                     	ds	2
  1873  0000EE                     _f_loadingNewCan:
  1874                           	opt stack 0
  1875  0000EE                     	ds	2
  1876  0000F0                     _log:
  1877                           	opt stack 0
  1878  0000F0                     	ds	2
  1879  0000F2                     _log_completion:
  1880                           	opt stack 0
  1881  0000F2                     	ds	2
  1882  0000F4                     _log_count_pop_no_tab:
  1883                           	opt stack 0
  1884  0000F4                     	ds	2
  1885  0000F6                     _log_total_time:
  1886                           	opt stack 0
  1887  0000F6                     	ds	2
  1888  0000F8                     _logstate:
  1889                           	opt stack 0
  1890  0000F8                     	ds	2
  1891  0000FA                     _total_time:
  1892                           	opt stack 0
  1893  0000FA                     	ds	2
  1894  0000FC                     _machine_state:
  1895                           	opt stack 0
  1896  0000FC                     	ds	1
  1897  0000FD                     _sel:
  1898                           	opt stack 0
  1899  0000FD                     	ds	1
  1900  0000FE                     _count_total:
  1901                           	opt stack 0
  1902  0000FE                     	ds	2
  1903                           tblptru	equ	0xFF8
  1904                           tblptrh	equ	0xFF7
  1905                           tblptrl	equ	0xFF6
  1906                           tablat	equ	0xFF5
  1907                           postinc0	equ	0xFEE
  1908                           wreg	equ	0xFE8
  1909                           postdec1	equ	0xFE5
  1910                           fsr1l	equ	0xFE1
  1911                           
  1912                           	psect	bssBANK1
  1913  000100                     __pbssBANK1:
  1914                           	opt stack 0
  1915  000100                     _log_startTime:
  1916                           	opt stack 0
  1917  000100                     	ds	14
  1918  00010E                     _startTime:
  1919                           	opt stack 0
  1920  00010E                     	ds	14
  1921  00011C                     _time:
  1922                           	opt stack 0
  1923  00011C                     	ds	7
  1924  000123                     _count_can_no_lab:
  1925                           	opt stack 0
  1926  000123                     	ds	2
  1927  000125                     _count_can_w_lab:
  1928                           	opt stack 0
  1929  000125                     	ds	2
  1930  000127                     _count_pop_no_tab:
  1931                           	opt stack 0
  1932  000127                     	ds	2
  1933  000129                     _count_pop_w_tab:
  1934                           	opt stack 0
  1935  000129                     	ds	2
  1936  00012B                     _cur_can:
  1937                           	opt stack 0
  1938  00012B                     	ds	2
  1939  00012D                     _debug:
  1940                           	opt stack 0
  1941  00012D                     	ds	2
  1942  00012F                     _f_ID_receive:
  1943                           	opt stack 0
  1944  00012F                     	ds	2
  1945  000131                     _f_can_coming_to_ID:
  1946                           	opt stack 0
  1947  000131                     	ds	2
  1948  000133                     _f_can_coming_to_distribution:
  1949                           	opt stack 0
  1950  000133                     	ds	2
  1951  000135                     _f_can_distributed:
  1952                           	opt stack 0
  1953  000135                     	ds	2
  1954  000137                     _f_most_recent_sort_time:
  1955                           	opt stack 0
  1956  000137                     	ds	2
  1957  000139                     _first:
  1958                           	opt stack 0
  1959  000139                     	ds	2
  1960  00013B                     _firstboot:
  1961                           	opt stack 0
  1962  00013B                     	ds	2
  1963  00013D                     _i:
  1964                           	opt stack 0
  1965  00013D                     	ds	2
  1966  00013F                     _log_count_can_w_lab:
  1967                           	opt stack 0
  1968  00013F                     	ds	2
  1969  000141                     _log_count_total:
  1970                           	opt stack 0
  1971  000141                     	ds	2
  1972  000143                     _most_recent_sort_time:
  1973                           	opt stack 0
  1974  000143                     	ds	2
  1975  000145                     _motor_toggle_count:
  1976                           	opt stack 0
  1977  000145                     	ds	2
  1978  000147                     _var:
  1979                           	opt stack 0
  1980  000147                     	ds	2
  1981                           tblptru	equ	0xFF8
  1982                           tblptrh	equ	0xFF7
  1983                           tblptrl	equ	0xFF6
  1984                           tablat	equ	0xFF5
  1985                           postinc0	equ	0xFEE
  1986                           wreg	equ	0xFE8
  1987                           postdec1	equ	0xFE5
  1988                           fsr1l	equ	0xFE1
  1989                           
  1990                           	psect	dataBANK1
  1991  000149                     __pdataBANK1:
  1992                           	opt stack 0
  1993  000149                     UI@F3251:
  1994                           	opt stack 0
  1995  000149                     	ds	4
  1996  00014D                     printRTC@F3241:
  1997                           	opt stack 0
  1998  00014D                     	ds	4
  1999                           tblptru	equ	0xFF8
  2000                           tblptrh	equ	0xFF7
  2001                           tblptrl	equ	0xFF6
  2002                           tablat	equ	0xFF5
  2003                           postinc0	equ	0xFEE
  2004                           wreg	equ	0xFE8
  2005                           postdec1	equ	0xFE5
  2006                           fsr1l	equ	0xFE1
  2007                           
  2008                           	psect	cstackBANK0
  2009  000080                     __pcstackBANK0:
  2010                           	opt stack 0
  2011  000080                     ??_delay_ms:
  2012  000080                     ??_isdigit:
  2013  000080                     ??_readADC:
  2014  000080                     ??_I2C_Master_Wait:
  2015  000080                     ?___wmul:
  2016                           	opt stack 0
  2017  000080                     ?___awmod:
  2018                           	opt stack 0
  2019  000080                     ?___lwdiv:
  2020                           	opt stack 0
  2021  000080                     ?___ftpack:
  2022                           	opt stack 0
  2023  000080                     ?___lldiv:
  2024                           	opt stack 0
  2025  000080                     lcdNibble@temp:
  2026                           	opt stack 0
  2027  000080                     initTime@m:
  2028                           	opt stack 0
  2029  000080                     updateServoPosition@time_us:
  2030                           	opt stack 0
  2031  000080                     EEPROM_read@address:
  2032                           	opt stack 0
  2033  000080                     ___wmul@multiplier:
  2034                           	opt stack 0
  2035  000080                     ___awmod@dividend:
  2036                           	opt stack 0
  2037  000080                     ___lwdiv@dividend:
  2038                           	opt stack 0
  2039  000080                     strcpy@to:
  2040                           	opt stack 0
  2041  000080                     ___ftpack@arg:
  2042                           	opt stack 0
  2043  000080                     ___lldiv@dividend:
  2044                           	opt stack 0
  2045                           
  2046                           ; 4 bytes @ 0x0
  2047  000080                     	ds	1
  2048  000081                     readADC@channel:
  2049                           	opt stack 0
  2050  000081                     I2C_Master_Read@a:
  2051                           	opt stack 0
  2052  000081                     lcdNibble@data:
  2053                           	opt stack 0
  2054  000081                     initTime@h:
  2055                           	opt stack 0
  2056  000081                     delay_ms@milliseconds:
  2057                           	opt stack 0
  2058  000081                     _isdigit$2080:
  2059                           	opt stack 0
  2060  000081                     I2C_Master_Write@d:
  2061                           	opt stack 0
  2062                           
  2063                           ; 2 bytes @ 0x1
  2064  000081                     	ds	1
  2065  000082                     ??_readMAG:
  2066  000082                     ??_readCOND:
  2067  000082                     I2C_Master_Read@temp:
  2068                           	opt stack 0
  2069  000082                     lcdInst@data:
  2070                           	opt stack 0
  2071  000082                     putch@data:
  2072                           	opt stack 0
  2073  000082                     initTime@w:
  2074                           	opt stack 0
  2075  000082                     isdigit@c:
  2076                           	opt stack 0
  2077  000082                     readIR@ana_port:
  2078                           	opt stack 0
  2079  000082                     updateServoPosition@timer:
  2080                           	opt stack 0
  2081  000082                     ___wmul@multiplicand:
  2082                           	opt stack 0
  2083  000082                     ___awmod@divisor:
  2084                           	opt stack 0
  2085  000082                     ___lwdiv@divisor:
  2086                           	opt stack 0
  2087  000082                     strcpy@from:
  2088                           	opt stack 0
  2089                           
  2090                           ; 2 bytes @ 0x2
  2091  000082                     	ds	1
  2092  000083                     ??_initLCD:
  2093  000083                     initTime@DD:
  2094                           	opt stack 0
  2095  000083                     ___ftpack@exp:
  2096                           	opt stack 0
  2097  000083                     getRTC@i:
  2098                           	opt stack 0
  2099                           
  2100                           ; 2 bytes @ 0x3
  2101  000083                     	ds	1
  2102  000084                     ??_updateServoPosition:
  2103  000084                     ??_readIR:
  2104  000084                     initTime@MM:
  2105                           	opt stack 0
  2106  000084                     ___awmod@counter:
  2107                           	opt stack 0
  2108  000084                     ___ftpack@sign:
  2109                           	opt stack 0
  2110  000084                     readMAG@res:
  2111                           	opt stack 0
  2112  000084                     readCOND@res:
  2113                           	opt stack 0
  2114  000084                     ___wmul@product:
  2115                           	opt stack 0
  2116  000084                     ___lwdiv@quotient:
  2117                           	opt stack 0
  2118  000084                     strcpy@cp:
  2119                           	opt stack 0
  2120  000084                     ___lldiv@divisor:
  2121                           	opt stack 0
  2122                           
  2123                           ; 4 bytes @ 0x4
  2124  000084                     	ds	1
  2125  000085                     ??_initSortTimer:
  2126  000085                     ??___ftpack:
  2127  000085                     initTime@YY:
  2128                           	opt stack 0
  2129  000085                     ___awmod@sign:
  2130                           	opt stack 0
  2131                           
  2132                           ; 1 bytes @ 0x5
  2133  000085                     	ds	1
  2134  000086                     ??_getMAG:
  2135  000086                     ?___awdiv:
  2136                           	opt stack 0
  2137  000086                     initTime@s:
  2138                           	opt stack 0
  2139  000086                     ___lwdiv@counter:
  2140                           	opt stack 0
  2141  000086                     getIR@port:
  2142                           	opt stack 0
  2143  000086                     updateServoPosition@my_time:
  2144                           	opt stack 0
  2145  000086                     ___awdiv@dividend:
  2146                           	opt stack 0
  2147                           
  2148                           ; 2 bytes @ 0x6
  2149  000086                     	ds	1
  2150  000087                     ?___lwmod:
  2151                           	opt stack 0
  2152  000087                     ___lwmod@dividend:
  2153                           	opt stack 0
  2154                           
  2155                           ; 2 bytes @ 0x7
  2156  000087                     	ds	1
  2157  000088                     ??_Distribution:
  2158  000088                     ??_initServos:
  2159  000088                     ??_getIR:
  2160  000088                     initSortTimer@i:
  2161                           	opt stack 0
  2162  000088                     ___awdiv@divisor:
  2163                           	opt stack 0
  2164  000088                     ___lldiv@quotient:
  2165                           	opt stack 0
  2166                           
  2167                           ; 4 bytes @ 0x8
  2168  000088                     	ds	1
  2169  000089                     getIR@i:
  2170                           	opt stack 0
  2171  000089                     ___lwmod@divisor:
  2172                           	opt stack 0
  2173                           
  2174                           ; 2 bytes @ 0x9
  2175  000089                     	ds	1
  2176  00008A                     ___awdiv@counter:
  2177                           	opt stack 0
  2178                           
  2179                           ; 1 bytes @ 0xA
  2180  00008A                     	ds	1
  2181  00008B                     ___awdiv@sign:
  2182                           	opt stack 0
  2183  00008B                     ___lwmod@counter:
  2184                           	opt stack 0
  2185                           
  2186                           ; 1 bytes @ 0xB
  2187  00008B                     	ds	1
  2188  00008C                     ___lldiv@counter:
  2189                           	opt stack 0
  2190  00008C                     ___awdiv@quotient:
  2191                           	opt stack 0
  2192                           
  2193                           ; 2 bytes @ 0xC
  2194  00008C                     	ds	1
  2195  00008D                     I2C_Master_Init@c:
  2196                           	opt stack 0
  2197                           
  2198                           ; 4 bytes @ 0xD
  2199  00008D                     	ds	1
  2200  00008E                     ?_printf:
  2201                           	opt stack 0
  2202  00008E                     ?___awtoft:
  2203                           	opt stack 0
  2204  00008E                     printf@f:
  2205                           	opt stack 0
  2206  00008E                     ___awtoft@c:
  2207                           	opt stack 0
  2208                           
  2209                           ; 2 bytes @ 0xE
  2210  00008E                     	ds	3
  2211  000091                     ??_I2C_Master_Init:
  2212  000091                     ___awtoft@sign:
  2213                           	opt stack 0
  2214                           
  2215                           ; 1 bytes @ 0x11
  2216  000091                     	ds	1
  2217  000092                     ___ftge@ff1:
  2218                           	opt stack 0
  2219                           
  2220                           ; 3 bytes @ 0x12
  2221  000092                     	ds	3
  2222  000095                     ??_loadRTC:
  2223  000095                     ___ftge@ff2:
  2224                           	opt stack 0
  2225                           
  2226                           ; 3 bytes @ 0x15
  2227  000095                     	ds	1
  2228  000096                     loadRTC@i:
  2229                           	opt stack 0
  2230                           
  2231                           ; 2 bytes @ 0x16
  2232  000096                     	ds	2
  2233  000098                     ??___ftge:
  2234                           
  2235                           ; 1 bytes @ 0x18
  2236  000098                     	ds	2
  2237  00009A                     ??_printf:
  2238                           
  2239                           ; 1 bytes @ 0x1A
  2240  00009A                     	ds	4
  2241  00009E                     printf@prec:
  2242                           	opt stack 0
  2243                           
  2244                           ; 1 bytes @ 0x1E
  2245  00009E                     	ds	1
  2246  00009F                     printf@cp:
  2247                           	opt stack 0
  2248                           
  2249                           ; 2 bytes @ 0x1F
  2250  00009F                     	ds	2
  2251  0000A1                     printf@ap:
  2252                           	opt stack 0
  2253                           
  2254                           ; 2 bytes @ 0x21
  2255  0000A1                     	ds	2
  2256  0000A3                     printf@len:
  2257                           	opt stack 0
  2258                           
  2259                           ; 2 bytes @ 0x23
  2260  0000A3                     	ds	2
  2261  0000A5                     printf@val:
  2262                           	opt stack 0
  2263                           
  2264                           ; 2 bytes @ 0x25
  2265  0000A5                     	ds	2
  2266  0000A7                     printf@flag:
  2267                           	opt stack 0
  2268                           
  2269                           ; 1 bytes @ 0x27
  2270  0000A7                     	ds	1
  2271  0000A8                     printf@c:
  2272                           	opt stack 0
  2273                           
  2274                           ; 1 bytes @ 0x28
  2275  0000A8                     	ds	1
  2276  0000A9                     printf@width:
  2277                           	opt stack 0
  2278                           
  2279                           ; 2 bytes @ 0x29
  2280  0000A9                     	ds	2
  2281  0000AB                     ??_printRTC:
  2282  0000AB                     ??_ID:
  2283  0000AB                     ??_algorithmTest:
  2284  0000AB                     ??_sensorTest:
  2285  0000AB                     ??_actuatorTest:
  2286  0000AB                     ??_arm:
  2287  0000AB                     ??_PortTestDC:
  2288  0000AB                     ??_SpeedTest:
  2289  0000AB                     ??_PortTestPusher:
  2290  0000AB                     ??_PlatformTest:
  2291  0000AB                     ??_BothServos:
  2292  0000AB                     ??_BlockerTest:
  2293  0000AB                     EEPROM_write@address:
  2294                           	opt stack 0
  2295                           
  2296                           ; 2 bytes @ 0x2B
  2297  0000AB                     	ds	1
  2298  0000AC                     arm@on:
  2299                           	opt stack 0
  2300                           
  2301                           ; 2 bytes @ 0x2C
  2302  0000AC                     	ds	1
  2303  0000AD                     EEPROM_write@data:
  2304                           	opt stack 0
  2305  0000AD                     actuatorTest@i_1755:
  2306                           	opt stack 0
  2307  0000AD                     ID@reflectivity1:
  2308                           	opt stack 0
  2309  0000AD                     sensorTest@res:
  2310                           	opt stack 0
  2311  0000AD                     PlatformTest@res:
  2312                           	opt stack 0
  2313  0000AD                     BlockerTest@i:
  2314                           	opt stack 0
  2315                           
  2316                           ; 2 bytes @ 0x2D
  2317  0000AD                     	ds	1
  2318  0000AE                     ??_EEPROM_write:
  2319  0000AE                     actuatorTest@i_1762:
  2320                           	opt stack 0
  2321  0000AE                     printRTC@INT_time:
  2322                           	opt stack 0
  2323                           
  2324                           ; 14 bytes @ 0x2E
  2325  0000AE                     	ds	1
  2326  0000AF                     EEPROM_write@i:
  2327                           	opt stack 0
  2328  0000AF                     actuatorTest@i_1763:
  2329                           	opt stack 0
  2330  0000AF                     ID@cond1:
  2331                           	opt stack 0
  2332  0000AF                     sensorTest@res_1732:
  2333                           	opt stack 0
  2334  0000AF                     PlatformTest@res_1807:
  2335                           	opt stack 0
  2336  0000AF                     BlockerTest@res:
  2337                           	opt stack 0
  2338                           
  2339                           ; 2 bytes @ 0x2F
  2340  0000AF                     	ds	1
  2341  0000B0                     EEPROM_write@i_1420:
  2342                           	opt stack 0
  2343  0000B0                     actuatorTest@i_1765:
  2344                           	opt stack 0
  2345                           
  2346                           ; 1 bytes @ 0x30
  2347  0000B0                     	ds	1
  2348  0000B1                     ??_Loading:
  2349  0000B1                     logRun@num:
  2350                           	opt stack 0
  2351  0000B1                     actuatorTest@i_1766:
  2352                           	opt stack 0
  2353  0000B1                     ID@reflectivity2:
  2354                           	opt stack 0
  2355  0000B1                     PlatformTest@i:
  2356                           	opt stack 0
  2357  0000B1                     BlockerTest@cam_flag:
  2358                           	opt stack 0
  2359                           
  2360                           ; 2 bytes @ 0x31
  2361  0000B1                     	ds	1
  2362  0000B2                     logRun@byte1:
  2363                           	opt stack 0
  2364  0000B2                     actuatorTest@i_1768:
  2365                           	opt stack 0
  2366                           
  2367                           ; 1 bytes @ 0x32
  2368  0000B2                     	ds	1
  2369  0000B3                     ID@time_1153:
  2370                           	opt stack 0
  2371  0000B3                     logRun@byte2:
  2372                           	opt stack 0
  2373  0000B3                     actuatorTest@i_1769:
  2374                           	opt stack 0
  2375  0000B3                     Loading@addr:
  2376                           	opt stack 0
  2377  0000B3                     PlatformTest@i_1811:
  2378                           	opt stack 0
  2379  0000B3                     BlockerTest@cond_flag:
  2380                           	opt stack 0
  2381                           
  2382                           ; 2 bytes @ 0x33
  2383  0000B3                     	ds	1
  2384  0000B4                     _ID$1143:
  2385                           	opt stack 0
  2386  0000B4                     logRun@byte3:
  2387                           	opt stack 0
  2388  0000B4                     actuatorTest@i_1771:
  2389                           	opt stack 0
  2390                           
  2391                           ; 1 bytes @ 0x34
  2392  0000B4                     	ds	1
  2393  0000B5                     Loading@byte1:
  2394                           	opt stack 0
  2395  0000B5                     _ID$1152:
  2396                           	opt stack 0
  2397  0000B5                     logRun@byte_i:
  2398                           	opt stack 0
  2399  0000B5                     actuatorTest@i_1772:
  2400                           	opt stack 0
  2401  0000B5                     PlatformTest@on:
  2402                           	opt stack 0
  2403                           
  2404                           ; 2 bytes @ 0x35
  2405  0000B5                     	ds	1
  2406  0000B6                     _Loading$1137:
  2407                           	opt stack 0
  2408  0000B6                     _ID$1157:
  2409                           	opt stack 0
  2410  0000B6                     logRun@byte11:
  2411                           	opt stack 0
  2412  0000B6                     actuatorTest@i_1774:
  2413                           	opt stack 0
  2414                           
  2415                           ; 1 bytes @ 0x36
  2416  0000B6                     	ds	1
  2417  0000B7                     _ID$1159:
  2418                           	opt stack 0
  2419  0000B7                     actuatorTest@i_1775:
  2420                           	opt stack 0
  2421  0000B7                     Loading@i_1126:
  2422                           	opt stack 0
  2423  0000B7                     logRun@i:
  2424                           	opt stack 0
  2425                           
  2426                           ; 2 bytes @ 0x37
  2427  0000B7                     	ds	1
  2428  0000B8                     _ID$1160:
  2429                           	opt stack 0
  2430  0000B8                     actuatorTest@i_1777:
  2431                           	opt stack 0
  2432                           
  2433                           ; 1 bytes @ 0x38
  2434  0000B8                     	ds	1
  2435  0000B9                     actuatorTest@i_1778:
  2436                           	opt stack 0
  2437  0000B9                     Loading@i_1135:
  2438                           	opt stack 0
  2439  0000B9                     ID@i:
  2440                           	opt stack 0
  2441  0000B9                     logRun@addr:
  2442                           	opt stack 0
  2443                           
  2444                           ; 2 bytes @ 0x39
  2445  0000B9                     	ds	1
  2446  0000BA                     actuatorTest@i_1781:
  2447                           	opt stack 0
  2448                           
  2449                           ; 1 bytes @ 0x3A
  2450  0000BA                     	ds	1
  2451  0000BB                     actuatorTest@i_1782:
  2452                           	opt stack 0
  2453  0000BB                     Loading@i_1138:
  2454                           	opt stack 0
  2455  0000BB                     ID@i_1151:
  2456                           	opt stack 0
  2457                           
  2458                           ; 2 bytes @ 0x3B
  2459  0000BB                     	ds	1
  2460  0000BC                     actuatorTest@i_1784:
  2461                           	opt stack 0
  2462  0000BC                     printRTC@RTC_month:
  2463                           	opt stack 0
  2464                           
  2465                           ; 2 bytes @ 0x3C
  2466  0000BC                     	ds	1
  2467  0000BD                     actuatorTest@i_1785:
  2468                           	opt stack 0
  2469  0000BD                     Loading@i_1139:
  2470                           	opt stack 0
  2471  0000BD                     ID@i_1156:
  2472                           	opt stack 0
  2473                           
  2474                           ; 2 bytes @ 0x3D
  2475  0000BD                     	ds	1
  2476  0000BE                     actuatorTest@i_1787:
  2477                           	opt stack 0
  2478  0000BE                     printRTC@month:
  2479                           	opt stack 0
  2480                           
  2481                           ; 4 bytes @ 0x3E
  2482  0000BE                     	ds	1
  2483  0000BF                     actuatorTest@i_1788:
  2484                           	opt stack 0
  2485  0000BF                     Loading@i_1141:
  2486                           	opt stack 0
  2487  0000BF                     ID@i_1164:
  2488                           	opt stack 0
  2489                           
  2490                           ; 2 bytes @ 0x3F
  2491  0000BF                     	ds	1
  2492  0000C0                     actuatorTest@i_1791:
  2493                           	opt stack 0
  2494                           
  2495                           ; 1 bytes @ 0x40
  2496  0000C0                     	ds	1
  2497  0000C1                     ID@time:
  2498                           	opt stack 0
  2499  0000C1                     actuatorTest@i_1792:
  2500                           	opt stack 0
  2501  0000C1                     Loading@i:
  2502                           	opt stack 0
  2503                           
  2504                           ; 2 bytes @ 0x41
  2505  0000C1                     	ds	1
  2506  0000C2                     actuatorTest@i_1794:
  2507                           	opt stack 0
  2508  0000C2                     printRTC@i:
  2509                           	opt stack 0
  2510  0000C2                     ID@res2:
  2511                           	opt stack 0
  2512                           
  2513                           ; 2 bytes @ 0x42
  2514  0000C2                     	ds	1
  2515  0000C3                     actuatorTest@i_1795:
  2516                           	opt stack 0
  2517  0000C3                     Loading@j:
  2518                           	opt stack 0
  2519                           
  2520                           ; 2 bytes @ 0x43
  2521  0000C3                     	ds	1
  2522  0000C4                     ??_UI:
  2523  0000C4                     ID@i_1165:
  2524                           	opt stack 0
  2525  0000C4                     actuatorTest@i:
  2526                           	opt stack 0
  2527                           
  2528                           ; 2 bytes @ 0x44
  2529  0000C4                     	ds	2
  2530  0000C6                     ??_Test:
  2531  0000C6                     _UI$2442:
  2532                           	opt stack 0
  2533  0000C6                     ID@res:
  2534                           	opt stack 0
  2535                           
  2536                           ; 4 bytes @ 0x46
  2537  0000C6                     	ds	2
  2538  0000C8                     UI@i:
  2539                           	opt stack 0
  2540                           
  2541                           ; 1 bytes @ 0x48
  2542  0000C8                     	ds	1
  2543  0000C9                     UI@i_413:
  2544                           	opt stack 0
  2545                           
  2546                           ; 1 bytes @ 0x49
  2547  0000C9                     	ds	1
  2548  0000CA                     UI@i_416:
  2549                           	opt stack 0
  2550  0000CA                     ID@res1:
  2551                           	opt stack 0
  2552                           
  2553                           ; 2 bytes @ 0x4A
  2554  0000CA                     	ds	1
  2555  0000CB                     UI@i_417:
  2556                           	opt stack 0
  2557                           
  2558                           ; 1 bytes @ 0x4B
  2559  0000CB                     	ds	1
  2560  0000CC                     UI@i_435:
  2561                           	opt stack 0
  2562  0000CC                     ID@j:
  2563                           	opt stack 0
  2564                           
  2565                           ; 2 bytes @ 0x4C
  2566  0000CC                     	ds	1
  2567  0000CD                     UI@i_436:
  2568                           	opt stack 0
  2569                           
  2570                           ; 1 bytes @ 0x4D
  2571  0000CD                     	ds	1
  2572  0000CE                     UI@i_439:
  2573                           	opt stack 0
  2574  0000CE                     ID@n:
  2575                           	opt stack 0
  2576                           
  2577                           ; 2 bytes @ 0x4E
  2578  0000CE                     	ds	1
  2579  0000CF                     UI@i_440:
  2580                           	opt stack 0
  2581                           
  2582                           ; 1 bytes @ 0x4F
  2583  0000CF                     	ds	1
  2584  0000D0                     UI@i_443:
  2585                           	opt stack 0
  2586                           
  2587                           ; 1 bytes @ 0x50
  2588  0000D0                     	ds	1
  2589  0000D1                     UI@i_444:
  2590                           	opt stack 0
  2591                           
  2592                           ; 1 bytes @ 0x51
  2593  0000D1                     	ds	1
  2594  0000D2                     UI@i_447:
  2595                           	opt stack 0
  2596                           
  2597                           ; 1 bytes @ 0x52
  2598  0000D2                     	ds	1
  2599  0000D3                     UI@i_448:
  2600                           	opt stack 0
  2601                           
  2602                           ; 1 bytes @ 0x53
  2603  0000D3                     	ds	1
  2604  0000D4                     UI@i_451:
  2605                           	opt stack 0
  2606                           
  2607                           ; 1 bytes @ 0x54
  2608  0000D4                     	ds	1
  2609  0000D5                     UI@i_452:
  2610                           	opt stack 0
  2611                           
  2612                           ; 1 bytes @ 0x55
  2613  0000D5                     	ds	1
  2614  0000D6                     UI@month:
  2615                           	opt stack 0
  2616                           
  2617                           ; 4 bytes @ 0x56
  2618  0000D6                     	ds	4
  2619  0000DA                     tblptru	equ	0xFF8
  2620                           tblptrh	equ	0xFF7
  2621                           tblptrl	equ	0xFF6
  2622                           tablat	equ	0xFF5
  2623                           postinc0	equ	0xFEE
  2624                           wreg	equ	0xFE8
  2625                           postdec1	equ	0xFE5
  2626                           fsr1l	equ	0xFE1
  2627                           
  2628                           ; 1 bytes @ 0x5A
  2629                           
  2630                           	psect	cstackCOMRAM
  2631  000001                     __pcstackCOMRAM:
  2632                           	opt stack 0
  2633  000001                     ??_updateArmState:
  2634  000001                     ??i2_I2C_Master_Wait:
  2635  000001                     ??i2_delay_ms:
  2636  000001                     ??i2_isdigit:
  2637  000001                     ?i2___wmul:
  2638                           	opt stack 0
  2639  000001                     ?i2___awmod:
  2640                           	opt stack 0
  2641  000001                     ?i2___lwdiv:
  2642                           	opt stack 0
  2643  000001                     i2lcdNibble@temp:
  2644                           	opt stack 0
  2645  000001                     i2updateServoPosition@time_us:
  2646                           	opt stack 0
  2647  000001                     i2EEPROM_read@address:
  2648                           	opt stack 0
  2649  000001                     i2___wmul@multiplier:
  2650                           	opt stack 0
  2651  000001                     i2___awmod@dividend:
  2652                           	opt stack 0
  2653  000001                     i2___lwdiv@dividend:
  2654                           	opt stack 0
  2655  000001                     i2strcpy@to:
  2656                           	opt stack 0
  2657                           
  2658                           ; 2 bytes @ 0x0
  2659  000001                     	ds	1
  2660  000002                     i2I2C_Master_Read@a:
  2661                           	opt stack 0
  2662  000002                     i2lcdNibble@data:
  2663                           	opt stack 0
  2664  000002                     i2delay_ms@milliseconds:
  2665                           	opt stack 0
  2666  000002                     i2_isdigit$2080:
  2667                           	opt stack 0
  2668  000002                     i2I2C_Master_Write@d:
  2669                           	opt stack 0
  2670                           
  2671                           ; 2 bytes @ 0x1
  2672  000002                     	ds	1
  2673  000003                     i2I2C_Master_Read@temp:
  2674                           	opt stack 0
  2675  000003                     i2lcdInst@data:
  2676                           	opt stack 0
  2677  000003                     i2putch@data:
  2678                           	opt stack 0
  2679  000003                     i2isdigit@c:
  2680                           	opt stack 0
  2681  000003                     i2updateServoPosition@timer:
  2682                           	opt stack 0
  2683  000003                     i2___wmul@multiplicand:
  2684                           	opt stack 0
  2685  000003                     i2___awmod@divisor:
  2686                           	opt stack 0
  2687  000003                     i2___lwdiv@divisor:
  2688                           	opt stack 0
  2689  000003                     i2strcpy@from:
  2690                           	opt stack 0
  2691                           
  2692                           ; 2 bytes @ 0x2
  2693  000003                     	ds	1
  2694  000004                     i2getRTC@i:
  2695                           	opt stack 0
  2696                           
  2697                           ; 2 bytes @ 0x3
  2698  000004                     	ds	1
  2699  000005                     ??i2_updateServoPosition:
  2700  000005                     i2___awmod@counter:
  2701                           	opt stack 0
  2702  000005                     i2___wmul@product:
  2703                           	opt stack 0
  2704  000005                     i2___lwdiv@quotient:
  2705                           	opt stack 0
  2706  000005                     i2strcpy@cp:
  2707                           	opt stack 0
  2708                           
  2709                           ; 2 bytes @ 0x4
  2710  000005                     	ds	1
  2711  000006                     i2___awmod@sign:
  2712                           	opt stack 0
  2713                           
  2714                           ; 1 bytes @ 0x5
  2715  000006                     	ds	1
  2716  000007                     i2___lwdiv@counter:
  2717                           	opt stack 0
  2718  000007                     retrieveLog@logNum:
  2719                           	opt stack 0
  2720  000007                     i2updateServoPosition@my_time:
  2721                           	opt stack 0
  2722                           
  2723                           ; 2 bytes @ 0x6
  2724  000007                     	ds	1
  2725  000008                     ?i2___lwmod:
  2726                           	opt stack 0
  2727  000008                     i2___lwmod@dividend:
  2728                           	opt stack 0
  2729                           
  2730                           ; 2 bytes @ 0x7
  2731  000008                     	ds	1
  2732  000009                     ??_retrieveLog:
  2733  000009                     ??_updateServoStates:
  2734                           
  2735                           ; 1 bytes @ 0x8
  2736  000009                     	ds	1
  2737  00000A                     i2___lwmod@divisor:
  2738                           	opt stack 0
  2739                           
  2740                           ; 2 bytes @ 0x9
  2741  00000A                     	ds	1
  2742  00000B                     retrieveLog@byte1:
  2743                           	opt stack 0
  2744                           
  2745                           ; 1 bytes @ 0xA
  2746  00000B                     	ds	1
  2747  00000C                     retrieveLog@byte2:
  2748                           	opt stack 0
  2749  00000C                     i2___lwmod@counter:
  2750                           	opt stack 0
  2751                           
  2752                           ; 1 bytes @ 0xB
  2753  00000C                     	ds	1
  2754  00000D                     ??_printSortTimer:
  2755  00000D                     ?i2_printf:
  2756                           	opt stack 0
  2757  00000D                     retrieveLog@byte3:
  2758                           	opt stack 0
  2759  00000D                     i2printf@f:
  2760                           	opt stack 0
  2761                           
  2762                           ; 2 bytes @ 0xC
  2763  00000D                     	ds	1
  2764  00000E                     retrieveLog@i:
  2765                           	opt stack 0
  2766                           
  2767                           ; 2 bytes @ 0xD
  2768  00000E                     	ds	2
  2769  000010                     printSortTimer@min:
  2770                           	opt stack 0
  2771  000010                     retrieveLog@addr:
  2772                           	opt stack 0
  2773                           
  2774                           ; 2 bytes @ 0xF
  2775  000010                     	ds	2
  2776  000012                     dispLogs@myLog:
  2777                           	opt stack 0
  2778  000012                     printSortTimer@sec:
  2779                           	opt stack 0
  2780                           
  2781                           ; 2 bytes @ 0x11
  2782  000012                     	ds	2
  2783  000014                     printSortTimer@curTime:
  2784                           	opt stack 0
  2785                           
  2786                           ; 14 bytes @ 0x13
  2787  000014                     	ds	5
  2788  000019                     ??i2_printf:
  2789                           
  2790                           ; 1 bytes @ 0x18
  2791  000019                     	ds	4
  2792  00001D                     i2printf@prec:
  2793                           	opt stack 0
  2794                           
  2795                           ; 1 bytes @ 0x1C
  2796  00001D                     	ds	1
  2797  00001E                     i2printf@cp:
  2798                           	opt stack 0
  2799                           
  2800                           ; 2 bytes @ 0x1D
  2801  00001E                     	ds	2
  2802  000020                     i2printf@ap:
  2803                           	opt stack 0
  2804                           
  2805                           ; 2 bytes @ 0x1F
  2806  000020                     	ds	2
  2807  000022                     printSortTimer@start_sec:
  2808                           	opt stack 0
  2809  000022                     i2printf@len:
  2810                           	opt stack 0
  2811                           
  2812                           ; 2 bytes @ 0x21
  2813  000022                     	ds	2
  2814  000024                     printSortTimer@cur_sec:
  2815                           	opt stack 0
  2816  000024                     i2printf@val:
  2817                           	opt stack 0
  2818                           
  2819                           ; 2 bytes @ 0x23
  2820  000024                     	ds	2
  2821  000026                     i2printf@flag:
  2822                           	opt stack 0
  2823  000026                     _printSortTimer$2582:
  2824                           	opt stack 0
  2825                           
  2826                           ; 2 bytes @ 0x25
  2827  000026                     	ds	1
  2828  000027                     i2printf@c:
  2829                           	opt stack 0
  2830                           
  2831                           ; 1 bytes @ 0x26
  2832  000027                     	ds	1
  2833  000028                     printSortTimer@timeDiff:
  2834                           	opt stack 0
  2835  000028                     i2printf@width:
  2836                           	opt stack 0
  2837                           
  2838                           ; 2 bytes @ 0x27
  2839  000028                     	ds	2
  2840  00002A                     ??i2_printRTC:
  2841  00002A                     ?_inputHandler:
  2842                           	opt stack 0
  2843  00002A                     printSortTimer@i_1177:
  2844                           	opt stack 0
  2845                           
  2846                           ; 2 bytes @ 0x29
  2847  00002A                     	ds	2
  2848  00002C                     ??_inputHandler:
  2849  00002C                     printSortTimer@i:
  2850                           	opt stack 0
  2851                           
  2852                           ; 2 bytes @ 0x2B
  2853  00002C                     	ds	1
  2854  00002D                     i2printRTC@INT_time:
  2855                           	opt stack 0
  2856                           
  2857                           ; 14 bytes @ 0x2C
  2858  00002D                     	ds	14
  2859  00003B                     i2printRTC@RTC_month:
  2860                           	opt stack 0
  2861                           
  2862                           ; 2 bytes @ 0x3A
  2863  00003B                     	ds	2
  2864  00003D                     i2printRTC@month:
  2865                           	opt stack 0
  2866                           
  2867                           ; 4 bytes @ 0x3C
  2868  00003D                     	ds	4
  2869  000041                     i2printRTC@i:
  2870                           	opt stack 0
  2871                           
  2872                           ; 2 bytes @ 0x40
  2873  000041                     	ds	2
  2874  000043                     ??_updateMenu:
  2875  000043                     
  2876                           ; 1 bytes @ 0x42
  2877  000043                     	ds	2
  2878  000045                     ??_handler:
  2879                           
  2880                           ; 1 bytes @ 0x44
  2881  000045                     	ds	16
  2882                           tblptru	equ	0xFF8
  2883                           tblptrh	equ	0xFF7
  2884                           tblptrl	equ	0xFF6
  2885                           tablat	equ	0xFF5
  2886                           postinc0	equ	0xFEE
  2887                           wreg	equ	0xFE8
  2888                           postdec1	equ	0xFE5
  2889                           fsr1l	equ	0xFE1
  2890                           
  2891 ;;
  2892 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2893 ;;
  2894 ;; *************** function _main *****************
  2895 ;; Defined at:
  2896 ;;		line 19 in file "main.c"
  2897 ;; Parameters:    Size  Location     Type
  2898 ;;		None
  2899 ;; Auto vars:     Size  Location     Type
  2900 ;;		None
  2901 ;; Return value:  Size  Location     Type
  2902 ;;                  1    wreg      void 
  2903 ;; Registers used:
  2904 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2905 ;; Tracked objects:
  2906 ;;		On entry : 0/0
  2907 ;;		On exit  : 0/0
  2908 ;;		Unchanged: 0/0
  2909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2913 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2914 ;;Total ram usage:        0 bytes
  2915 ;; Hardware stack levels required when called:   13
  2916 ;; This function calls:
  2917 ;;		_I2C_Master_Init
  2918 ;;		_Test
  2919 ;;		_UI
  2920 ;;		_initEEPROM
  2921 ;;		_initLCD
  2922 ;;		_initTime
  2923 ;;		_initUI
  2924 ;;		_logRun
  2925 ;;		_machineConfig
  2926 ;;		_sort
  2927 ;;		_stopSignals
  2928 ;; This function is called by:
  2929 ;;		Startup code after reset
  2930 ;; This function uses a non-reentrant model
  2931 ;;
  2932                           
  2933                           	psect	text0
  2934  004CE6                     __ptext0:
  2935                           	opt stack 0
  2936  004CE6                     _main:
  2937                           	opt stack 18
  2938                           
  2939                           ;main.c: 20: machineConfig();
  2940                           
  2941                           ;incstack = 0
  2942  004CE6  EC88  F02B         	call	_machineConfig	;wreg free
  2943                           
  2944                           ;main.c: 21: initLCD();
  2945  004CEA  EC12  F02D         	call	_initLCD	;wreg free
  2946                           
  2947                           ;main.c: 24: RTCflag = 0;
  2948  004CEE  0E00               	movlw	0
  2949  004CF0  0100               	movlb	0	; () banked
  2950  004CF2  6FE7               	movwf	(_RTCflag+1)& (0+255),b
  2951  004CF4  0E00               	movlw	0
  2952  004CF6  6FE6               	movwf	_RTCflag& (0+255),b
  2953                           
  2954                           ;main.c: 25: if(RTCflag){
  2955  004CF8  0100               	movlb	0	; () banked
  2956  004CFA  51E6               	movf	_RTCflag& (0+255),w,b
  2957  004CFC  0100               	movlb	0	; () banked
  2958  004CFE  11E7               	iorwf	(_RTCflag+1)& (0+255),w,b
  2959  004D00  B4D8               	btfsc	status,2,c
  2960  004D02  D016               	goto	l10608
  2961                           
  2962                           ; BSR set to: 0
  2963                           ;main.c: 26: initTime(0x42, 0x47, 0x17, 0x07, 0x08, 0x04, 0x17);
  2964  004D04  0E47               	movlw	71
  2965  004D06  0100               	movlb	0	; () banked
  2966  004D08  6F80               	movwf	initTime@m& (0+255),b
  2967  004D0A  0E17               	movlw	23
  2968  004D0C  0100               	movlb	0	; () banked
  2969  004D0E  6F81               	movwf	initTime@h& (0+255),b
  2970  004D10  0E07               	movlw	7
  2971  004D12  0100               	movlb	0	; () banked
  2972  004D14  6F82               	movwf	initTime@w& (0+255),b
  2973  004D16  0E08               	movlw	8
  2974  004D18  0100               	movlb	0	; () banked
  2975  004D1A  6F83               	movwf	initTime@DD& (0+255),b
  2976  004D1C  0E04               	movlw	4
  2977  004D1E  0100               	movlb	0	; () banked
  2978  004D20  6F84               	movwf	initTime@MM& (0+255),b
  2979  004D22  0E17               	movlw	23
  2980  004D24  0100               	movlb	0	; () banked
  2981  004D26  6F85               	movwf	initTime@YY& (0+255),b
  2982  004D28  0E42               	movlw	66
  2983  004D2A  EC04  F030         	call	_initTime
  2984                           
  2985                           ;main.c: 27: }
  2986  004D2E  D00B               	goto	l10610
  2987  004D30                     l10608:
  2988                           
  2989                           ;main.c: 28: else{
  2990                           ;main.c: 29: I2C_Master_Init(10000);
  2991  004D30  0E10               	movlw	16
  2992  004D32  0100               	movlb	0	; () banked
  2993  004D34  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2994  004D36  0E27               	movlw	39
  2995  004D38  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2996  004D3A  0E00               	movlw	0
  2997  004D3C  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2998  004D3E  0E00               	movlw	0
  2999  004D40  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  3000  004D42  ECEB  F02B         	call	_I2C_Master_Init	;wreg free
  3001  004D46                     l10610:
  3002                           
  3003                           ;main.c: 30: }
  3004                           ;main.c: 32: initUI();
  3005  004D46  EC34  F02E         	call	_initUI	;wreg free
  3006                           
  3007                           ;main.c: 33: first = 1;
  3008  004D4A  0E00               	movlw	0
  3009  004D4C  0101               	movlb	1	; () banked
  3010  004D4E  6F3A               	movwf	(_first+1)& (0+255),b
  3011  004D50  0E01               	movlw	1
  3012  004D52  6F39               	movwf	_first& (0+255),b
  3013                           
  3014                           ; BSR set to: 1
  3015                           ;main.c: 34: initEEPROM();
  3016  004D54  EC4C  F030         	call	_initEEPROM	;wreg free
  3017                           
  3018                           ;main.c: 45: switch(machine_state){
  3019                           
  3020                           ;main.c: 44: while(1){
  3021  004D58  D018               	goto	l10634
  3022  004D5A                     l10616:
  3023                           
  3024                           ;main.c: 47: UI();
  3025  004D5A  EC09  F000         	call	_UI	;wreg free
  3026                           
  3027                           ;main.c: 48: break;
  3028  004D5E  D015               	goto	l10634
  3029  004D60                     l10618:
  3030                           
  3031                           ;main.c: 50: sort();
  3032  004D60  ECF3  F02F         	call	_sort	;wreg free
  3033                           
  3034                           ;main.c: 51: break;
  3035  004D64  D012               	goto	l10634
  3036  004D66                     l10620:
  3037                           
  3038                           ;main.c: 53: stopSignals();
  3039  004D66  EC24  F030         	call	_stopSignals	;wreg free
  3040                           
  3041                           ;main.c: 54: logRun();
  3042  004D6A  EC94  F021         	call	_logRun	;wreg free
  3043                           
  3044                           ;main.c: 55: first = 1;
  3045  004D6E  0E00               	movlw	0
  3046  004D70  0101               	movlb	1	; () banked
  3047  004D72  6F3A               	movwf	(_first+1)& (0+255),b
  3048  004D74  0E01               	movlw	1
  3049  004D76  6F39               	movwf	_first& (0+255),b
  3050                           
  3051                           ; BSR set to: 1
  3052                           ;main.c: 56: UI();
  3053  004D78  EC09  F000         	call	_UI	;wreg free
  3054                           
  3055                           ;main.c: 57: break;
  3056  004D7C  D006               	goto	l10634
  3057  004D7E                     l10628:
  3058                           
  3059                           ;main.c: 59: Test();
  3060  004D7E  EC4D  F023         	call	_Test	;wreg free
  3061                           
  3062                           ;main.c: 60: break;
  3063  004D82  D003               	goto	l10634
  3064  004D84                     l10630:
  3065                           
  3066                           ;main.c: 62: stopSignals();
  3067  004D84  EC24  F030         	call	_stopSignals	;wreg free
  3068  004D88                     l515:
  3069  004D88  D7FF               	goto	l515
  3070  004D8A                     l10634:
  3071  004D8A  0100               	movlb	0	; () banked
  3072  004D8C  51FC               	movf	_machine_state& (0+255),w,b
  3073                           
  3074                           ; Switch size 1, requested type "space"
  3075                           ; Number of cases is 5, Range of values is 0 to 4
  3076                           ; switch strategies available:
  3077                           ; Name         Instructions Cycles
  3078                           ; simple_byte           16     9 (average)
  3079                           ;	Chosen strategy is simple_byte
  3080  004D8E  0A00               	xorlw	0	; case 0
  3081  004D90  B4D8               	btfsc	status,2,c
  3082  004D92  D7E3               	goto	l10616
  3083  004D94  0A01               	xorlw	1	; case 1
  3084  004D96  B4D8               	btfsc	status,2,c
  3085  004D98  D7E3               	goto	l10618
  3086  004D9A  0A03               	xorlw	3	; case 2
  3087  004D9C  B4D8               	btfsc	status,2,c
  3088  004D9E  D7E3               	goto	l10620
  3089  004DA0  0A01               	xorlw	1	; case 3
  3090  004DA2  B4D8               	btfsc	status,2,c
  3091  004DA4  D7EC               	goto	l10628
  3092  004DA6  0A07               	xorlw	7	; case 4
  3093  004DA8  B4D8               	btfsc	status,2,c
  3094  004DAA  D7EC               	goto	l10630
  3095                           
  3096                           ; BSR set to: 0
  3097                           
  3098                           ; BSR set to: 0
  3099  004DAC  D7EE               	goto	l10634
  3100  004DAE                     __end_of_main:
  3101                           	opt stack 0
  3102                           tblptru	equ	0xFF8
  3103                           tblptrh	equ	0xFF7
  3104                           tblptrl	equ	0xFF6
  3105                           tablat	equ	0xFF5
  3106                           postinc0	equ	0xFEE
  3107                           wreg	equ	0xFE8
  3108                           postdec1	equ	0xFE5
  3109                           fsr1l	equ	0xFE1
  3110                           status	equ	0xFD8
  3111                           
  3112 ;; *************** function _sort *****************
  3113 ;; Defined at:
  3114 ;;		line 72 in file "sort.c"
  3115 ;; Parameters:    Size  Location     Type
  3116 ;;		None
  3117 ;; Auto vars:     Size  Location     Type
  3118 ;;		None
  3119 ;; Return value:  Size  Location     Type
  3120 ;;                  1    wreg      void 
  3121 ;; Registers used:
  3122 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3123 ;; Tracked objects:
  3124 ;;		On entry : 0/0
  3125 ;;		On exit  : 0/0
  3126 ;;		Unchanged: 0/0
  3127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3131 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3132 ;;Total ram usage:        0 bytes
  3133 ;; Hardware stack levels used:    1
  3134 ;; Hardware stack levels required when called:   12
  3135 ;; This function calls:
  3136 ;;		_Distribution
  3137 ;;		_ID
  3138 ;;		_Loading
  3139 ;; This function is called by:
  3140 ;;		_main
  3141 ;; This function uses a non-reentrant model
  3142 ;;
  3143                           
  3144                           	psect	text1
  3145  005FE6                     __ptext1:
  3146                           	opt stack 0
  3147  005FE6                     _sort:
  3148                           	opt stack 18
  3149                           
  3150                           ;sort.c: 73: if(machine_state == Sorting_state){
  3151                           
  3152                           ; BSR set to: 0
  3153                           ;incstack = 0
  3154  005FE6  0100               	movlb	0	; () banked
  3155  005FE8  05FC               	decf	_machine_state& (0+255),w,b
  3156  005FEA  B4D8               	btfsc	status,2,c
  3157                           
  3158                           ; BSR set to: 0
  3159                           ;sort.c: 74: Loading();
  3160  005FEC  EC1C  F00C         	call	_Loading	;wreg free
  3161                           
  3162                           ;sort.c: 75: }
  3163                           ;sort.c: 76: if(machine_state == Sorting_state){
  3164  005FF0  0100               	movlb	0	; () banked
  3165  005FF2  05FC               	decf	_machine_state& (0+255),w,b
  3166  005FF4  B4D8               	btfsc	status,2,c
  3167                           
  3168                           ; BSR set to: 0
  3169                           ;sort.c: 77: ID();
  3170  005FF6  ECC9  F008         	call	_ID	;wreg free
  3171                           
  3172                           ;sort.c: 78: }
  3173                           ;sort.c: 79: if(machine_state == Sorting_state){
  3174  005FFA  0100               	movlb	0	; () banked
  3175  005FFC  05FC               	decf	_machine_state& (0+255),w,b
  3176  005FFE  A4D8               	btfss	status,2,c
  3177  006000  0012               	return	
  3178                           
  3179                           ; BSR set to: 0
  3180                           ;sort.c: 80: Distribution();
  3181  006002  ECC3  F024         	call	_Distribution	;wreg free
  3182  006006  0012               	return	
  3183  006008                     __end_of_sort:
  3184                           	opt stack 0
  3185                           tblptru	equ	0xFF8
  3186                           tblptrh	equ	0xFF7
  3187                           tblptrl	equ	0xFF6
  3188                           tablat	equ	0xFF5
  3189                           postinc0	equ	0xFEE
  3190                           wreg	equ	0xFE8
  3191                           postdec1	equ	0xFE5
  3192                           fsr1l	equ	0xFE1
  3193                           status	equ	0xFD8
  3194                           
  3195 ;; *************** function _Loading *****************
  3196 ;; Defined at:
  3197 ;;		line 84 in file "sort.c"
  3198 ;; Parameters:    Size  Location     Type
  3199 ;;		None
  3200 ;; Auto vars:     Size  Location     Type
  3201 ;;  i               2   63[BANK0 ] int 
  3202 ;;  i               2   61[BANK0 ] int 
  3203 ;;  i               2   59[BANK0 ] int 
  3204 ;;  i               2   57[BANK0 ] int 
  3205 ;;  i               2   55[BANK0 ] int 
  3206 ;;  j               2   67[BANK0 ] int 
  3207 ;;  i               2   65[BANK0 ] int 
  3208 ;;  addr            2   51[BANK0 ] unsigned short 
  3209 ;;  byte1           1   53[BANK0 ] unsigned char 
  3210 ;; Return value:  Size  Location     Type
  3211 ;;                  1    wreg      void 
  3212 ;; Registers used:
  3213 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3214 ;; Tracked objects:
  3215 ;;		On entry : 0/0
  3216 ;;		On exit  : 0/0
  3217 ;;		Unchanged: 0/0
  3218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3220 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3221 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3222 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3223 ;;Total ram usage:       20 bytes
  3224 ;; Hardware stack levels used:    1
  3225 ;; Hardware stack levels required when called:   11
  3226 ;; This function calls:
  3227 ;;		_EEPROM_read
  3228 ;;		_EEPROM_write
  3229 ;;		_delay_ms
  3230 ;;		_getIR
  3231 ;;		_getMAG
  3232 ;;		_initGlobalVars
  3233 ;;		_initServos
  3234 ;;		_initSortTimer
  3235 ;;		_lcdInst
  3236 ;;		_readIR
  3237 ;; This function is called by:
  3238 ;;		_sort
  3239 ;; This function uses a non-reentrant model
  3240 ;;
  3241                           
  3242                           	psect	text2
  3243  001838                     __ptext2:
  3244                           	opt stack 0
  3245  001838                     _Loading:
  3246                           	opt stack 18
  3247                           
  3248                           ;sort.c: 85: if(first){
  3249                           
  3250                           ;incstack = 0
  3251  001838  0101               	movlb	1	; () banked
  3252  00183A  5139               	movf	_first& (0+255),w,b
  3253  00183C  0101               	movlb	1	; () banked
  3254  00183E  113A               	iorwf	(_first+1)& (0+255),w,b
  3255  001840  B4D8               	btfsc	status,2,c
  3256  001842  D06A               	goto	l8120
  3257                           
  3258                           ; BSR set to: 1
  3259                           ;sort.c: 86: TMR1IE = 1;
  3260  001844  809D               	bsf	3997,0,c	;volatile
  3261                           
  3262                           ;sort.c: 87: TMR2IE = 1;
  3263  001846  829D               	bsf	3997,1,c	;volatile
  3264                           
  3265                           ;sort.c: 88: TMR3IE = 1;
  3266  001848  82A0               	bsf	4000,1,c	;volatile
  3267                           
  3268                           ; BSR set to: 1
  3269                           ;sort.c: 89: initGlobalVars();
  3270  00184A  EC0A  F026         	call	_initGlobalVars	;wreg free
  3271                           
  3272                           ;sort.c: 90: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3273  00184E  0E01               	movlw	1
  3274  001850  EC7D  F030         	call	_lcdInst
  3275  001854  0E68               	movlw	104
  3276  001856  0100               	movlb	0	; () banked
  3277  001858  6FB1               	movwf	??_Loading& (0+255),b
  3278  00185A  0EE4               	movlw	228
  3279  00185C                     u10937:
  3280  00185C  2EE8               	decfsz	wreg,f,c
  3281  00185E  D7FE               	bra	u10937
  3282  001860  2FB1               	decfsz	??_Loading& (0+255),f,b
  3283  001862  D7FC               	bra	u10937
  3284  001864  F000               	nop	
  3285                           
  3286                           ;sort.c: 91: initSortTimer();
  3287  001866  ECF8  F027         	call	_initSortTimer	;wreg free
  3288                           
  3289                           ;sort.c: 92: LATCbits.LATC5 = 1;
  3290  00186A  8A8B               	bsf	3979,5,c	;volatile
  3291                           
  3292                           ;sort.c: 93: LATCbits.LATC6 = 1;
  3293  00186C  8C8B               	bsf	3979,6,c	;volatile
  3294                           
  3295                           ;sort.c: 98: sel = EEPROM_read(0);
  3296  00186E  0E00               	movlw	0
  3297  001870  0100               	movlb	0	; () banked
  3298  001872  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3299  001874  0E00               	movlw	0
  3300  001876  6F80               	movwf	EEPROM_read@address& (0+255),b
  3301  001878  EC40  F030         	call	_EEPROM_read	;wreg free
  3302  00187C  0100               	movlb	0	; () banked
  3303  00187E  6FFD               	movwf	_sel& (0+255),b
  3304                           
  3305                           ; BSR set to: 0
  3306                           ;sort.c: 99: unsigned short addr = 1 + 11 * sel;
  3307  001880  0100               	movlb	0	; () banked
  3308  001882  51FD               	movf	_sel& (0+255),w,b
  3309  001884  0D0B               	mullw	11
  3310  001886  0E01               	movlw	1
  3311  001888  24F3               	addwf	prodl,w,c
  3312  00188A  0100               	movlb	0	; () banked
  3313  00188C  6FB3               	movwf	Loading@addr& (0+255),b
  3314  00188E  0E00               	movlw	0
  3315  001890  20F4               	addwfc	prodh,w,c
  3316  001892  0100               	movlb	0	; () banked
  3317  001894  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3318                           
  3319                           ; BSR set to: 0
  3320                           ;sort.c: 100: unsigned char byte1 = 0b01111111;
  3321  001896  0E7F               	movlw	127
  3322  001898  0100               	movlb	0	; () banked
  3323  00189A  6FB5               	movwf	Loading@byte1& (0+255),b
  3324                           
  3325                           ; BSR set to: 0
  3326                           ;sort.c: 101: EEPROM_write(addr, byte1);
  3327  00189C  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3328  0018A0  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3329  0018A4  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3330  0018A8  EC4F  F024         	call	_EEPROM_write	;wreg free
  3331                           
  3332                           ;sort.c: 104: LATBbits.LATB2 = 0;
  3333  0018AC  948A               	bcf	3978,2,c	;volatile
  3334                           
  3335                           ;sort.c: 106: for(int i=0; i<46; i++){
  3336  0018AE  0E00               	movlw	0
  3337  0018B0  0100               	movlb	0	; () banked
  3338  0018B2  6FC2               	movwf	(Loading@i+1)& (0+255),b
  3339  0018B4  0E00               	movlw	0
  3340  0018B6  6FC1               	movwf	Loading@i& (0+255),b
  3341                           
  3342                           ; BSR set to: 0
  3343  0018B8  0100               	movlb	0	; () banked
  3344  0018BA  BFC2               	btfsc	(Loading@i+1)& (0+255),7,b
  3345  0018BC  D008               	goto	l8110
  3346  0018BE  0100               	movlb	0	; () banked
  3347  0018C0  51C2               	movf	(Loading@i+1)& (0+255),w,b
  3348  0018C2  E126               	bnz	l804
  3349  0018C4  0E2E               	movlw	46
  3350  0018C6  0100               	movlb	0	; () banked
  3351  0018C8  5DC1               	subwf	Loading@i& (0+255),w,b
  3352  0018CA  B0D8               	btfsc	status,0,c
  3353  0018CC  D021               	goto	l804
  3354  0018CE                     l8110:
  3355                           
  3356                           ; BSR set to: 0
  3357                           ;sort.c: 107: LATBbits.LATB2 = !LATBbits.LATB2;
  3358  0018CE  B48A               	btfsc	3978,2,c	;volatile
  3359  0018D0  D004               	goto	u7000
  3360  0018D2  0100               	movlb	0	; () banked
  3361  0018D4  6BB1               	clrf	??_Loading& (0+255),b
  3362  0018D6  2BB1               	incf	??_Loading& (0+255),f,b
  3363  0018D8  D002               	goto	u7018
  3364  0018DA                     u7000:
  3365  0018DA  0100               	movlb	0	; () banked
  3366  0018DC  6BB1               	clrf	??_Loading& (0+255),b
  3367  0018DE                     u7018:
  3368  0018DE  0100               	movlb	0	; () banked
  3369  0018E0  47B1               	rlncf	??_Loading& (0+255),f,b
  3370  0018E2  47B1               	rlncf	??_Loading& (0+255),f,b
  3371  0018E4  508A               	movf	3978,w,c	;volatile
  3372  0018E6  0100               	movlb	0	; () banked
  3373  0018E8  19B1               	xorwf	??_Loading& (0+255),w,b
  3374  0018EA  0BFB               	andlw	-5
  3375  0018EC  19B1               	xorwf	??_Loading& (0+255),w,b
  3376  0018EE  6E8A               	movwf	3978,c	;volatile
  3377                           
  3378                           ; BSR set to: 0
  3379                           ;sort.c: 108: delay_ms(45-i);
  3380  0018F0  0100               	movlb	0	; () banked
  3381  0018F2  51C1               	movf	Loading@i& (0+255),w,b
  3382  0018F4  0800               	sublw	0
  3383  0018F6  0F2D               	addlw	45
  3384  0018F8  EC93  F02F         	call	_delay_ms
  3385  0018FC  0100               	movlb	0	; () banked
  3386  0018FE  4BC1               	infsnz	Loading@i& (0+255),f,b
  3387  001900  2BC2               	incf	(Loading@i+1)& (0+255),f,b
  3388                           
  3389                           ; BSR set to: 0
  3390  001902  0100               	movlb	0	; () banked
  3391  001904  BFC2               	btfsc	(Loading@i+1)& (0+255),7,b
  3392  001906  D7E3               	goto	l8110
  3393  001908  0100               	movlb	0	; () banked
  3394  00190A  51C2               	movf	(Loading@i+1)& (0+255),w,b
  3395  00190C  E101               	bnz	u7020
  3396  00190E  D7DA               	goto	L1
  3397  001910                     u7020:
  3398  001910                     l804:
  3399                           
  3400                           ; BSR set to: 0
  3401                           ;sort.c: 109: }
  3402                           ;sort.c: 110: LATBbits.LATB2 = 1;
  3403  001910  848A               	bsf	3978,2,c	;volatile
  3404                           
  3405                           ; BSR set to: 0
  3406                           ;sort.c: 113: initServos();
  3407  001912  EC35  F02A         	call	_initServos	;wreg free
  3408                           
  3409                           ;sort.c: 114: }
  3410  001916  0012               	return	
  3411  001918                     l8120:
  3412                           
  3413                           ;sort.c: 115: else{
  3414                           ;sort.c: 118: if(!f_loadingNewCan){
  3415  001918  0100               	movlb	0	; () banked
  3416  00191A  51EE               	movf	_f_loadingNewCan& (0+255),w,b
  3417  00191C  0100               	movlb	0	; () banked
  3418  00191E  11EF               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3419  001920  A4D8               	btfss	status,2,c
  3420  001922  D01D               	goto	l8136
  3421                           
  3422                           ; BSR set to: 0
  3423                           ;sort.c: 120: getIR(0);
  3424  001924  0E00               	movlw	0
  3425  001926  0100               	movlb	0	; () banked
  3426  001928  6F87               	movwf	(getIR@port+1)& (0+255),b
  3427  00192A  0E00               	movlw	0
  3428  00192C  6F86               	movwf	getIR@port& (0+255),b
  3429  00192E  ECB5  F029         	call	_getIR	;wreg free
  3430                           
  3431                           ;sort.c: 122: if(!f_loadingNewCan){
  3432  001932  0100               	movlb	0	; () banked
  3433  001934  51EE               	movf	_f_loadingNewCan& (0+255),w,b
  3434  001936  0100               	movlb	0	; () banked
  3435  001938  11EF               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3436  00193A  B4D8               	btfsc	status,2,c
  3437  00193C  0012               	return	
  3438                           
  3439                           ; BSR set to: 0
  3440                           ;sort.c: 126: else{
  3441                           ;sort.c: 127: count_total++;
  3442                           
  3443                           ; BSR set to: 0
  3444                           
  3445                           ; BSR set to: 0
  3446                           ;sort.c: 124: }
  3447                           
  3448                           ; BSR set to: 0
  3449                           ;sort.c: 123: return;
  3450  00193E  0100               	movlb	0	; () banked
  3451  001940  4BFE               	infsnz	_count_total& (0+255),f,b
  3452  001942  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3453                           
  3454                           ; BSR set to: 0
  3455                           ;sort.c: 128: if(count_total == 12){
  3456  001944  0E0C               	movlw	12
  3457  001946  0100               	movlb	0	; () banked
  3458  001948  19FE               	xorwf	_count_total& (0+255),w,b
  3459  00194A  0100               	movlb	0	; () banked
  3460  00194C  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3461  00194E  A4D8               	btfss	status,2,c
  3462  001950  0012               	return	
  3463                           
  3464                           ; BSR set to: 0
  3465                           ;sort.c: 129: f_lastCan = 1;
  3466  001952  0E00               	movlw	0
  3467  001954  0100               	movlb	0	; () banked
  3468  001956  6FED               	movwf	(_f_lastCan+1)& (0+255),b
  3469  001958  0E01               	movlw	1
  3470  00195A  6FEC               	movwf	_f_lastCan& (0+255),b
  3471                           
  3472                           ; BSR set to: 0
  3473                           ;sort.c: 130: }
  3474                           ;sort.c: 131: }
  3475                           ;sort.c: 132: }
  3476                           
  3477                           ; BSR set to: 0
  3478  00195C  0012               	return	
  3479  00195E                     l8136:
  3480                           
  3481                           ; BSR set to: 0
  3482                           ;sort.c: 135: else if(f_ID_receive){
  3483  00195E  0101               	movlb	1	; () banked
  3484  001960  512F               	movf	_f_ID_receive& (0+255),w,b
  3485  001962  0101               	movlb	1	; () banked
  3486  001964  1130               	iorwf	(_f_ID_receive+1)& (0+255),w,b
  3487  001966  B4D8               	btfsc	status,2,c
  3488  001968  0012               	return	
  3489                           
  3490                           ; BSR set to: 1
  3491                           ;sort.c: 136: f_most_recent_sort_time = 1;
  3492  00196A  0E00               	movlw	0
  3493  00196C  0101               	movlb	1	; () banked
  3494  00196E  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  3495  001970  0E01               	movlw	1
  3496  001972  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
  3497                           
  3498                           ;sort.c: 137: f_loadingNewCan = 0;
  3499  001974  0E00               	movlw	0
  3500  001976  0100               	movlb	0	; () banked
  3501  001978  6FEF               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3502  00197A  0E00               	movlw	0
  3503  00197C  6FEE               	movwf	_f_loadingNewCan& (0+255),b
  3504                           
  3505                           ; BSR set to: 0
  3506                           ;sort.c: 138: _delay((unsigned long)((1000)*(32000000/4000.0)));
  3507  00197E  0E29               	movlw	41
  3508  001980  0100               	movlb	0	; () banked
  3509  001982  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3510  001984  0E96               	movlw	150
  3511  001986  0100               	movlb	0	; () banked
  3512  001988  6FB1               	movwf	??_Loading& (0+255),b
  3513  00198A  0E7F               	movlw	127
  3514  00198C                     u10947:
  3515  00198C  2EE8               	decfsz	wreg,f,c
  3516  00198E  D7FE               	bra	u10947
  3517  001990  2FB1               	decfsz	??_Loading& (0+255),f,b
  3518  001992  D7FC               	bra	u10947
  3519  001994  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3520  001996  D7FA               	bra	u10947
  3521                           
  3522                           ;sort.c: 139: LATBbits.LATB2 = 0;
  3523  001998  948A               	bcf	3978,2,c	;volatile
  3524                           
  3525                           ;sort.c: 143: f_arm_position = 1;
  3526  00199A  0E00               	movlw	0
  3527  00199C  0100               	movlb	0	; () banked
  3528  00199E  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3529  0019A0  0E01               	movlw	1
  3530  0019A2  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
  3531                           
  3532                           ; BSR set to: 0
  3533                           ;sort.c: 145: delay_ms(750);
  3534  0019A4  0EEE               	movlw	238
  3535  0019A6  EC93  F02F         	call	_delay_ms
  3536                           
  3537                           ;sort.c: 146: getMAG();
  3538  0019AA  EC1C  F02E         	call	_getMAG	;wreg free
  3539                           
  3540                           ;sort.c: 147: sensor_outputs[0] = MAG_signal;
  3541  0019AE  C0E4  F0DA         	movff	_MAG_signal,_sensor_outputs
  3542  0019B2  C0E5  F0DB         	movff	_MAG_signal+1,_sensor_outputs+1
  3543                           
  3544                           ;sort.c: 149: TMR2IE = 0;
  3545  0019B6  929D               	bcf	3997,1,c	;volatile
  3546                           
  3547                           ;sort.c: 150: if(sensor_outputs[0]){
  3548  0019B8  0100               	movlb	0	; () banked
  3549  0019BA  51DA               	movf	_sensor_outputs& (0+255),w,b
  3550  0019BC  0100               	movlb	0	; () banked
  3551  0019BE  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3552  0019C0  B4D8               	btfsc	status,2,c
  3553  0019C2  D01D               	goto	l8168
  3554                           
  3555                           ; BSR set to: 0
  3556                           ;sort.c: 151: for(int i = 0; i<3000; i++){
  3557  0019C4  0E00               	movlw	0
  3558  0019C6  0100               	movlb	0	; () banked
  3559  0019C8  6FB8               	movwf	(Loading@i_1126+1)& (0+255),b
  3560  0019CA  0E00               	movlw	0
  3561  0019CC  6FB7               	movwf	Loading@i_1126& (0+255),b
  3562  0019CE                     l8158:
  3563                           
  3564                           ; BSR set to: 0
  3565  0019CE  0100               	movlb	0	; () banked
  3566  0019D0  BFB8               	btfsc	(Loading@i_1126+1)& (0+255),7,b
  3567  0019D2  D008               	goto	l814
  3568  0019D4  0EB8               	movlw	184
  3569  0019D6  0100               	movlb	0	; () banked
  3570  0019D8  5DB7               	subwf	Loading@i_1126& (0+255),w,b
  3571  0019DA  0E0B               	movlw	11
  3572  0019DC  0100               	movlb	0	; () banked
  3573  0019DE  59B8               	subwfb	(Loading@i_1126+1)& (0+255),w,b
  3574  0019E0  B0D8               	btfsc	status,0,c
  3575  0019E2  D02A               	goto	l816
  3576  0019E4                     l814:
  3577                           
  3578                           ; BSR set to: 0
  3579                           ;sort.c: 152: LATAbits.LATA4 = 1;
  3580  0019E4  8889               	bsf	3977,4,c	;volatile
  3581                           
  3582                           ; BSR set to: 0
  3583                           ;sort.c: 153: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3584  0019E6  0EC8               	movlw	200
  3585  0019E8                     u10957:
  3586  0019E8  2EE8               	decfsz	wreg,f,c
  3587  0019EA  D7FE               	bra	u10957
  3588                           
  3589                           ;sort.c: 154: LATAbits.LATA4 = 0;
  3590  0019EC  9889               	bcf	3977,4,c	;volatile
  3591                           
  3592                           ;sort.c: 155: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3593  0019EE  0E42               	movlw	66
  3594  0019F0                     u10967:
  3595  0019F0  2EE8               	decfsz	wreg,f,c
  3596  0019F2  D7FE               	bra	u10967
  3597  0019F4  D000               	nop2	
  3598  0019F6  0100               	movlb	0	; () banked
  3599  0019F8  4BB7               	infsnz	Loading@i_1126& (0+255),f,b
  3600  0019FA  2BB8               	incf	(Loading@i_1126+1)& (0+255),f,b
  3601  0019FC  D7E8               	goto	l8158
  3602  0019FE                     l8168:
  3603                           
  3604                           ; BSR set to: 0
  3605                           ;sort.c: 158: else{
  3606                           ;sort.c: 159: for(int i = 0; i<3000; i++){
  3607  0019FE  0E00               	movlw	0
  3608  001A00  0100               	movlb	0	; () banked
  3609  001A02  6FBA               	movwf	(Loading@i_1135+1)& (0+255),b
  3610  001A04  0E00               	movlw	0
  3611  001A06  6FB9               	movwf	Loading@i_1135& (0+255),b
  3612  001A08                     l8170:
  3613                           
  3614                           ; BSR set to: 0
  3615  001A08  0100               	movlb	0	; () banked
  3616  001A0A  BFBA               	btfsc	(Loading@i_1135+1)& (0+255),7,b
  3617  001A0C  D008               	goto	l817
  3618  001A0E  0EB8               	movlw	184
  3619  001A10  0100               	movlb	0	; () banked
  3620  001A12  5DB9               	subwf	Loading@i_1135& (0+255),w,b
  3621  001A14  0E0B               	movlw	11
  3622  001A16  0100               	movlb	0	; () banked
  3623  001A18  59BA               	subwfb	(Loading@i_1135+1)& (0+255),w,b
  3624  001A1A  B0D8               	btfsc	status,0,c
  3625  001A1C  D00D               	goto	l816
  3626  001A1E                     l817:
  3627                           
  3628                           ; BSR set to: 0
  3629                           ;sort.c: 160: LATAbits.LATA4 = 1;
  3630  001A1E  8889               	bsf	3977,4,c	;volatile
  3631                           
  3632                           ; BSR set to: 0
  3633                           ;sort.c: 161: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3634  001A20  0E9A               	movlw	154
  3635  001A22                     u10977:
  3636  001A22  2EE8               	decfsz	wreg,f,c
  3637  001A24  D7FE               	bra	u10977
  3638  001A26  D000               	nop2	
  3639                           
  3640                           ;sort.c: 162: LATAbits.LATA4 = 0;
  3641  001A28  9889               	bcf	3977,4,c	;volatile
  3642                           
  3643                           ;sort.c: 163: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3644  001A2A  0E70               	movlw	112
  3645  001A2C                     u10987:
  3646  001A2C  2EE8               	decfsz	wreg,f,c
  3647  001A2E  D7FE               	bra	u10987
  3648  001A30  0100               	movlb	0	; () banked
  3649  001A32  4BB9               	infsnz	Loading@i_1135& (0+255),f,b
  3650  001A34  2BBA               	incf	(Loading@i_1135+1)& (0+255),f,b
  3651  001A36  D7E8               	goto	l8170
  3652  001A38                     l816:
  3653                           
  3654                           ; BSR set to: 0
  3655                           ;sort.c: 164: }
  3656                           ;sort.c: 165: }
  3657                           ;sort.c: 166: TMR2IE = 1;
  3658  001A38  829D               	bsf	3997,1,c	;volatile
  3659                           
  3660                           ; BSR set to: 0
  3661                           ;sort.c: 167: _delay((unsigned long)((350)*(32000000/4000.0)));
  3662  001A3A  0E0F               	movlw	15
  3663  001A3C  0100               	movlb	0	; () banked
  3664  001A3E  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3665  001A40  0E35               	movlw	53
  3666  001A42  0100               	movlb	0	; () banked
  3667  001A44  6FB1               	movwf	??_Loading& (0+255),b
  3668  001A46  0E51               	movlw	81
  3669  001A48                     u10997:
  3670  001A48  2EE8               	decfsz	wreg,f,c
  3671  001A4A  D7FE               	bra	u10997
  3672  001A4C  2FB1               	decfsz	??_Loading& (0+255),f,b
  3673  001A4E  D7FC               	bra	u10997
  3674  001A50  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3675  001A52  D7FA               	bra	u10997
  3676                           
  3677                           ;sort.c: 169: readIR(0);
  3678  001A54  0E00               	movlw	0
  3679  001A56  0100               	movlb	0	; () banked
  3680  001A58  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  3681  001A5A  0E00               	movlw	0
  3682  001A5C  6F82               	movwf	readIR@ana_port& (0+255),b
  3683  001A5E  EC9E  F028         	call	_readIR	;wreg free
  3684                           
  3685                           ;sort.c: 170: if(IR_signal==1){
  3686  001A62  0100               	movlb	0	; () banked
  3687  001A64  05E2               	decf	_IR_signal& (0+255),w,b
  3688  001A66  0100               	movlb	0	; () banked
  3689  001A68  11E3               	iorwf	(_IR_signal+1)& (0+255),w,b
  3690  001A6A  A4D8               	btfss	status,2,c
  3691  001A6C  D1DA               	goto	l8330
  3692                           
  3693                           ; BSR set to: 0
  3694                           ;sort.c: 171: _delay((unsigned long)((100)*(32000000/4000.0)));
  3695  001A6E  0E05               	movlw	5
  3696  001A70  0100               	movlb	0	; () banked
  3697  001A72  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3698  001A74  0E0F               	movlw	15
  3699  001A76  0100               	movlb	0	; () banked
  3700  001A78  6FB1               	movwf	??_Loading& (0+255),b
  3701  001A7A  0EF1               	movlw	241
  3702  001A7C                     u11007:
  3703  001A7C  2EE8               	decfsz	wreg,f,c
  3704  001A7E  D7FE               	bra	u11007
  3705  001A80  2FB1               	decfsz	??_Loading& (0+255),f,b
  3706  001A82  D7FC               	bra	u11007
  3707  001A84  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3708  001A86  D7FA               	bra	u11007
  3709                           
  3710                           ;sort.c: 172: readIR(0);
  3711  001A88  0E00               	movlw	0
  3712  001A8A  0100               	movlb	0	; () banked
  3713  001A8C  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  3714  001A8E  0E00               	movlw	0
  3715  001A90  6F82               	movwf	readIR@ana_port& (0+255),b
  3716  001A92  EC9E  F028         	call	_readIR	;wreg free
  3717                           
  3718                           ;sort.c: 173: if(IR_signal==1){
  3719  001A96  0100               	movlb	0	; () banked
  3720  001A98  05E2               	decf	_IR_signal& (0+255),w,b
  3721  001A9A  0100               	movlb	0	; () banked
  3722  001A9C  11E3               	iorwf	(_IR_signal+1)& (0+255),w,b
  3723  001A9E  A4D8               	btfss	status,2,c
  3724  001AA0  D058               	goto	l8230
  3725                           
  3726                           ; BSR set to: 0
  3727                           ;sort.c: 174: getMAG();
  3728  001AA2  EC1C  F02E         	call	_getMAG	;wreg free
  3729                           
  3730                           ;sort.c: 175: sensor_outputs[0] = sensor_outputs[0] || MAG_signal;
  3731  001AA6  0E01               	movlw	1
  3732  001AA8  0100               	movlb	0	; () banked
  3733  001AAA  6FB6               	movwf	_Loading$1137& (0+255),b
  3734                           
  3735                           ; BSR set to: 0
  3736  001AAC  0100               	movlb	0	; () banked
  3737  001AAE  51DA               	movf	_sensor_outputs& (0+255),w,b
  3738  001AB0  0100               	movlb	0	; () banked
  3739  001AB2  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3740  001AB4  A4D8               	btfss	status,2,c
  3741  001AB6  D009               	goto	l8202
  3742                           
  3743                           ; BSR set to: 0
  3744  001AB8  0100               	movlb	0	; () banked
  3745  001ABA  51E4               	movf	_MAG_signal& (0+255),w,b
  3746  001ABC  0100               	movlb	0	; () banked
  3747  001ABE  11E5               	iorwf	(_MAG_signal+1)& (0+255),w,b
  3748  001AC0  A4D8               	btfss	status,2,c
  3749  001AC2  D003               	goto	l8202
  3750                           
  3751                           ; BSR set to: 0
  3752  001AC4  0E00               	movlw	0
  3753  001AC6  0100               	movlb	0	; () banked
  3754  001AC8  6FB6               	movwf	_Loading$1137& (0+255),b
  3755  001ACA                     l8202:
  3756                           
  3757                           ; BSR set to: 0
  3758  001ACA  C0B6  F0DA         	movff	_Loading$1137,_sensor_outputs
  3759  001ACE  0100               	movlb	0	; () banked
  3760  001AD0  6BDB               	clrf	(_sensor_outputs+1)& (0+255),b
  3761                           
  3762                           ; BSR set to: 0
  3763                           ;sort.c: 177: if(sensor_outputs[0]){
  3764  001AD2  0100               	movlb	0	; () banked
  3765  001AD4  51DA               	movf	_sensor_outputs& (0+255),w,b
  3766  001AD6  0100               	movlb	0	; () banked
  3767  001AD8  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3768  001ADA  B4D8               	btfsc	status,2,c
  3769  001ADC  D01D               	goto	l8218
  3770                           
  3771                           ; BSR set to: 0
  3772                           ;sort.c: 178: for(int i = 0; i<3000; i++){
  3773  001ADE  0E00               	movlw	0
  3774  001AE0  0100               	movlb	0	; () banked
  3775  001AE2  6FBC               	movwf	(Loading@i_1138+1)& (0+255),b
  3776  001AE4  0E00               	movlw	0
  3777  001AE6  6FBB               	movwf	Loading@i_1138& (0+255),b
  3778  001AE8                     l8208:
  3779                           
  3780                           ; BSR set to: 0
  3781  001AE8  0100               	movlb	0	; () banked
  3782  001AEA  BFBC               	btfsc	(Loading@i_1138+1)& (0+255),7,b
  3783  001AEC  D008               	goto	l824
  3784  001AEE  0EB8               	movlw	184
  3785  001AF0  0100               	movlb	0	; () banked
  3786  001AF2  5DBB               	subwf	Loading@i_1138& (0+255),w,b
  3787  001AF4  0E0B               	movlw	11
  3788  001AF6  0100               	movlb	0	; () banked
  3789  001AF8  59BC               	subwfb	(Loading@i_1138+1)& (0+255),w,b
  3790  001AFA  B0D8               	btfsc	status,0,c
  3791  001AFC  D02A               	goto	l8230
  3792  001AFE                     l824:
  3793                           
  3794                           ; BSR set to: 0
  3795                           ;sort.c: 179: LATAbits.LATA4 = 1;
  3796  001AFE  8889               	bsf	3977,4,c	;volatile
  3797                           
  3798                           ; BSR set to: 0
  3799                           ;sort.c: 180: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3800  001B00  0EC8               	movlw	200
  3801  001B02                     u11017:
  3802  001B02  2EE8               	decfsz	wreg,f,c
  3803  001B04  D7FE               	bra	u11017
  3804                           
  3805                           ;sort.c: 181: LATAbits.LATA4 = 0;
  3806  001B06  9889               	bcf	3977,4,c	;volatile
  3807                           
  3808                           ;sort.c: 182: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3809  001B08  0E42               	movlw	66
  3810  001B0A                     u11027:
  3811  001B0A  2EE8               	decfsz	wreg,f,c
  3812  001B0C  D7FE               	bra	u11027
  3813  001B0E  D000               	nop2	
  3814  001B10  0100               	movlb	0	; () banked
  3815  001B12  4BBB               	infsnz	Loading@i_1138& (0+255),f,b
  3816  001B14  2BBC               	incf	(Loading@i_1138+1)& (0+255),f,b
  3817  001B16  D7E8               	goto	l8208
  3818  001B18                     l8218:
  3819                           
  3820                           ; BSR set to: 0
  3821                           ;sort.c: 185: else{
  3822                           ;sort.c: 186: for(int i = 0; i<3000; i++){
  3823  001B18  0E00               	movlw	0
  3824  001B1A  0100               	movlb	0	; () banked
  3825  001B1C  6FBE               	movwf	(Loading@i_1139+1)& (0+255),b
  3826  001B1E  0E00               	movlw	0
  3827  001B20  6FBD               	movwf	Loading@i_1139& (0+255),b
  3828  001B22                     l8220:
  3829                           
  3830                           ; BSR set to: 0
  3831  001B22  0100               	movlb	0	; () banked
  3832  001B24  BFBE               	btfsc	(Loading@i_1139+1)& (0+255),7,b
  3833  001B26  D008               	goto	l827
  3834  001B28  0EB8               	movlw	184
  3835  001B2A  0100               	movlb	0	; () banked
  3836  001B2C  5DBD               	subwf	Loading@i_1139& (0+255),w,b
  3837  001B2E  0E0B               	movlw	11
  3838  001B30  0100               	movlb	0	; () banked
  3839  001B32  59BE               	subwfb	(Loading@i_1139+1)& (0+255),w,b
  3840  001B34  B0D8               	btfsc	status,0,c
  3841  001B36  D00D               	goto	l8230
  3842  001B38                     l827:
  3843                           
  3844                           ; BSR set to: 0
  3845                           ;sort.c: 187: LATAbits.LATA4 = 1;
  3846  001B38  8889               	bsf	3977,4,c	;volatile
  3847                           
  3848                           ; BSR set to: 0
  3849                           ;sort.c: 188: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3850  001B3A  0E9A               	movlw	154
  3851  001B3C                     u11037:
  3852  001B3C  2EE8               	decfsz	wreg,f,c
  3853  001B3E  D7FE               	bra	u11037
  3854  001B40  D000               	nop2	
  3855                           
  3856                           ;sort.c: 189: LATAbits.LATA4 = 0;
  3857  001B42  9889               	bcf	3977,4,c	;volatile
  3858                           
  3859                           ;sort.c: 190: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3860  001B44  0E70               	movlw	112
  3861  001B46                     u11047:
  3862  001B46  2EE8               	decfsz	wreg,f,c
  3863  001B48  D7FE               	bra	u11047
  3864  001B4A  0100               	movlb	0	; () banked
  3865  001B4C  4BBD               	infsnz	Loading@i_1139& (0+255),f,b
  3866  001B4E  2BBE               	incf	(Loading@i_1139+1)& (0+255),f,b
  3867  001B50  D7E8               	goto	l8220
  3868  001B52                     l8230:
  3869                           
  3870                           ; BSR set to: 0
  3871                           ;sort.c: 191: }
  3872                           ;sort.c: 192: }
  3873                           ;sort.c: 193: }
  3874                           ;sort.c: 195: _delay((unsigned long)((350)*(32000000/4000.0)));
  3875  001B52  0E0F               	movlw	15
  3876  001B54  0100               	movlb	0	; () banked
  3877  001B56  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3878  001B58  0E35               	movlw	53
  3879  001B5A  0100               	movlb	0	; () banked
  3880  001B5C  6FB1               	movwf	??_Loading& (0+255),b
  3881  001B5E  0E51               	movlw	81
  3882  001B60                     u11057:
  3883  001B60  2EE8               	decfsz	wreg,f,c
  3884  001B62  D7FE               	bra	u11057
  3885  001B64  2FB1               	decfsz	??_Loading& (0+255),f,b
  3886  001B66  D7FC               	bra	u11057
  3887  001B68  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3888  001B6A  D7FA               	bra	u11057
  3889                           
  3890                           ;sort.c: 197: int j = 0;
  3891  001B6C  0E00               	movlw	0
  3892  001B6E  0100               	movlb	0	; () banked
  3893  001B70  6FC4               	movwf	(Loading@j+1)& (0+255),b
  3894  001B72  0E00               	movlw	0
  3895  001B74  6FC3               	movwf	Loading@j& (0+255),b
  3896                           
  3897                           ;sort.c: 198: while(IR_signal == 1){
  3898  001B76  D14E               	goto	l8328
  3899  001B78                     l8234:
  3900                           
  3901                           ; BSR set to: 0
  3902                           ;sort.c: 199: readIR(0);
  3903  001B78  0E00               	movlw	0
  3904  001B7A  0100               	movlb	0	; () banked
  3905  001B7C  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  3906  001B7E  0E00               	movlw	0
  3907  001B80  6F82               	movwf	readIR@ana_port& (0+255),b
  3908  001B82  EC9E  F028         	call	_readIR	;wreg free
  3909                           
  3910                           ;sort.c: 200: if(j == 3 || j == 4){
  3911  001B86  0E03               	movlw	3
  3912  001B88  0100               	movlb	0	; () banked
  3913  001B8A  19C3               	xorwf	Loading@j& (0+255),w,b
  3914  001B8C  0100               	movlb	0	; () banked
  3915  001B8E  11C4               	iorwf	(Loading@j+1)& (0+255),w,b
  3916  001B90  B4D8               	btfsc	status,2,c
  3917  001B92  D007               	goto	l8240
  3918                           
  3919                           ; BSR set to: 0
  3920  001B94  0E04               	movlw	4
  3921  001B96  0100               	movlb	0	; () banked
  3922  001B98  19C3               	xorwf	Loading@j& (0+255),w,b
  3923  001B9A  0100               	movlb	0	; () banked
  3924  001B9C  11C4               	iorwf	(Loading@j+1)& (0+255),w,b
  3925  001B9E  A4D8               	btfss	status,2,c
  3926  001BA0  D006               	goto	l8242
  3927  001BA2                     l8240:
  3928                           
  3929                           ; BSR set to: 0
  3930                           ;sort.c: 201: f_arm_position = 0;
  3931  001BA2  0E00               	movlw	0
  3932  001BA4  0100               	movlb	0	; () banked
  3933  001BA6  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3934  001BA8  0E00               	movlw	0
  3935  001BAA  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
  3936                           
  3937                           ;sort.c: 202: }
  3938  001BAC  D06D               	goto	l8262
  3939  001BAE                     l8242:
  3940                           
  3941                           ; BSR set to: 0
  3942                           ;sort.c: 203: else if(j == 5 || j == 6){
  3943  001BAE  0E05               	movlw	5
  3944  001BB0  0100               	movlb	0	; () banked
  3945  001BB2  19C3               	xorwf	Loading@j& (0+255),w,b
  3946  001BB4  0100               	movlb	0	; () banked
  3947  001BB6  11C4               	iorwf	(Loading@j+1)& (0+255),w,b
  3948  001BB8  B4D8               	btfsc	status,2,c
  3949  001BBA  D007               	goto	l837
  3950                           
  3951                           ; BSR set to: 0
  3952  001BBC  0E06               	movlw	6
  3953  001BBE  0100               	movlb	0	; () banked
  3954  001BC0  19C3               	xorwf	Loading@j& (0+255),w,b
  3955  001BC2  0100               	movlb	0	; () banked
  3956  001BC4  11C4               	iorwf	(Loading@j+1)& (0+255),w,b
  3957  001BC6  A4D8               	btfss	status,2,c
  3958  001BC8  D002               	goto	l8246
  3959  001BCA                     l837:
  3960                           
  3961                           ; BSR set to: 0
  3962                           ;sort.c: 204: LATBbits.LATB2 = 1;
  3963  001BCA  848A               	bsf	3978,2,c	;volatile
  3964                           
  3965                           ;sort.c: 205: }
  3966  001BCC  D05D               	goto	l8262
  3967  001BCE                     l8246:
  3968                           
  3969                           ; BSR set to: 0
  3970                           ;sort.c: 206: else if(j == 7 || j == 8 || j == 9 || j == 10){
  3971  001BCE  0E07               	movlw	7
  3972  001BD0  0100               	movlb	0	; () banked
  3973  001BD2  19C3               	xorwf	Loading@j& (0+255),w,b
  3974  001BD4  0100               	movlb	0	; () banked
  3975  001BD6  11C4               	iorwf	(Loading@j+1)& (0+255),w,b
  3976  001BD8  B4D8               	btfsc	status,2,c
  3977  001BDA  D015               	goto	l8254
  3978                           
  3979                           ; BSR set to: 0
  3980  001BDC  0E08               	movlw	8
  3981  001BDE  0100               	movlb	0	; () banked
  3982  001BE0  19C3               	xorwf	Loading@j& (0+255),w,b
  3983  001BE2  0100               	movlb	0	; () banked
  3984  001BE4  11C4               	iorwf	(Loading@j+1)& (0+255),w,b
  3985  001BE6  B4D8               	btfsc	status,2,c
  3986  001BE8  D00E               	goto	l8254
  3987                           
  3988                           ; BSR set to: 0
  3989  001BEA  0E09               	movlw	9
  3990  001BEC  0100               	movlb	0	; () banked
  3991  001BEE  19C3               	xorwf	Loading@j& (0+255),w,b
  3992  001BF0  0100               	movlb	0	; () banked
  3993  001BF2  11C4               	iorwf	(Loading@j+1)& (0+255),w,b
  3994  001BF4  B4D8               	btfsc	status,2,c
  3995  001BF6  D007               	goto	l8254
  3996                           
  3997                           ; BSR set to: 0
  3998  001BF8  0E0A               	movlw	10
  3999  001BFA  0100               	movlb	0	; () banked
  4000  001BFC  19C3               	xorwf	Loading@j& (0+255),w,b
  4001  001BFE  0100               	movlb	0	; () banked
  4002  001C00  11C4               	iorwf	(Loading@j+1)& (0+255),w,b
  4003  001C02  A4D8               	btfss	status,2,c
  4004  001C04  D013               	goto	l839
  4005  001C06                     l8254:
  4006                           
  4007                           ; BSR set to: 0
  4008                           ;sort.c: 207: f_arm_position = 1;
  4009  001C06  0E00               	movlw	0
  4010  001C08  0100               	movlb	0	; () banked
  4011  001C0A  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  4012  001C0C  0E01               	movlw	1
  4013  001C0E  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
  4014                           
  4015                           ; BSR set to: 0
  4016                           ;sort.c: 208: _delay((unsigned long)((200)*(32000000/4000.0)));
  4017  001C10  0E09               	movlw	9
  4018  001C12  0100               	movlb	0	; () banked
  4019  001C14  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4020  001C16  0E1E               	movlw	30
  4021  001C18  0100               	movlb	0	; () banked
  4022  001C1A  6FB1               	movwf	??_Loading& (0+255),b
  4023  001C1C  0EE4               	movlw	228
  4024  001C1E                     u11067:
  4025  001C1E  2EE8               	decfsz	wreg,f,c
  4026  001C20  D7FE               	bra	u11067
  4027  001C22  2FB1               	decfsz	??_Loading& (0+255),f,b
  4028  001C24  D7FC               	bra	u11067
  4029  001C26  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4030  001C28  D7FA               	bra	u11067
  4031  001C2A  D02D               	goto	L2
  4032  001C2C                     l839:
  4033                           
  4034                           ; BSR set to: 0
  4035                           ;sort.c: 210: else if(j % 2 == 0){
  4036  001C2C  0100               	movlb	0	; () banked
  4037  001C2E  B1C3               	btfsc	Loading@j& (0+255),0,b
  4038  001C30  D02B               	goto	l8262
  4039                           
  4040                           ; BSR set to: 0
  4041                           ;sort.c: 211: LATBbits.LATB2 = !LATBbits.LATB2;
  4042  001C32  B48A               	btfsc	3978,2,c	;volatile
  4043  001C34  D004               	goto	u7300
  4044  001C36  0100               	movlb	0	; () banked
  4045  001C38  6BB1               	clrf	??_Loading& (0+255),b
  4046  001C3A  2BB1               	incf	??_Loading& (0+255),f,b
  4047  001C3C  D002               	goto	u7318
  4048  001C3E                     u7300:
  4049  001C3E  0100               	movlb	0	; () banked
  4050  001C40  6BB1               	clrf	??_Loading& (0+255),b
  4051  001C42                     u7318:
  4052  001C42  0100               	movlb	0	; () banked
  4053  001C44  47B1               	rlncf	??_Loading& (0+255),f,b
  4054  001C46  47B1               	rlncf	??_Loading& (0+255),f,b
  4055  001C48  508A               	movf	3978,w,c	;volatile
  4056  001C4A  0100               	movlb	0	; () banked
  4057  001C4C  19B1               	xorwf	??_Loading& (0+255),w,b
  4058  001C4E  0BFB               	andlw	-5
  4059  001C50  19B1               	xorwf	??_Loading& (0+255),w,b
  4060  001C52  6E8A               	movwf	3978,c	;volatile
  4061                           
  4062                           ;sort.c: 212: f_arm_position = !f_arm_position;
  4063  001C54  0100               	movlb	0	; () banked
  4064  001C56  51EA               	movf	_f_arm_position& (0+255),w,b	;volatile
  4065  001C58  0100               	movlb	0	; () banked
  4066  001C5A  11EB               	iorwf	(_f_arm_position+1)& (0+255),w,b	;volatile
  4067  001C5C  A4D8               	btfss	status,2,c
  4068  001C5E  D002               	goto	u7320
  4069  001C60  0E01               	movlw	1
  4070  001C62  D001               	goto	u7330
  4071  001C64                     u7320:
  4072  001C64  0E00               	movlw	0
  4073  001C66                     u7330:
  4074  001C66  0100               	movlb	0	; () banked
  4075  001C68  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
  4076  001C6A  6BEB               	clrf	(_f_arm_position+1)& (0+255),b	;volatile
  4077                           
  4078                           ; BSR set to: 0
  4079                           ;sort.c: 213: _delay((unsigned long)((200)*(32000000/4000.0)));
  4080  001C6C  0E09               	movlw	9
  4081  001C6E  0100               	movlb	0	; () banked
  4082  001C70  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4083  001C72  0E1E               	movlw	30
  4084  001C74  0100               	movlb	0	; () banked
  4085  001C76  6FB1               	movwf	??_Loading& (0+255),b
  4086  001C78  0EE4               	movlw	228
  4087  001C7A                     u11077:
  4088  001C7A  2EE8               	decfsz	wreg,f,c
  4089  001C7C  D7FE               	bra	u11077
  4090  001C7E  2FB1               	decfsz	??_Loading& (0+255),f,b
  4091  001C80  D7FC               	bra	u11077
  4092  001C82  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4093  001C84  D7FA               	bra	u11077
  4094  001C86                     L2:
  4095  001C86  F000               	nop	
  4096  001C88                     l8262:
  4097                           
  4098                           ;sort.c: 214: }
  4099                           ;sort.c: 217: if(IR_signal==1){
  4100  001C88  0100               	movlb	0	; () banked
  4101  001C8A  05E2               	decf	_IR_signal& (0+255),w,b
  4102  001C8C  0100               	movlb	0	; () banked
  4103  001C8E  11E3               	iorwf	(_IR_signal+1)& (0+255),w,b
  4104  001C90  A4D8               	btfss	status,2,c
  4105  001C92  D09F               	goto	l8316
  4106                           
  4107                           ; BSR set to: 0
  4108                           ;sort.c: 218: _delay((unsigned long)((350)*(32000000/4000.0)));
  4109  001C94  0E0F               	movlw	15
  4110  001C96  0100               	movlb	0	; () banked
  4111  001C98  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4112  001C9A  0E35               	movlw	53
  4113  001C9C  0100               	movlb	0	; () banked
  4114  001C9E  6FB1               	movwf	??_Loading& (0+255),b
  4115  001CA0  0E51               	movlw	81
  4116  001CA2                     u11087:
  4117  001CA2  2EE8               	decfsz	wreg,f,c
  4118  001CA4  D7FE               	bra	u11087
  4119  001CA6  2FB1               	decfsz	??_Loading& (0+255),f,b
  4120  001CA8  D7FC               	bra	u11087
  4121  001CAA  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4122  001CAC  D7FA               	bra	u11087
  4123                           
  4124                           ;sort.c: 219: readIR(0);
  4125  001CAE  0E00               	movlw	0
  4126  001CB0  0100               	movlb	0	; () banked
  4127  001CB2  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  4128  001CB4  0E00               	movlw	0
  4129  001CB6  6F82               	movwf	readIR@ana_port& (0+255),b
  4130  001CB8  EC9E  F028         	call	_readIR	;wreg free
  4131                           
  4132                           ;sort.c: 220: if(IR_signal==1){
  4133  001CBC  0100               	movlb	0	; () banked
  4134  001CBE  05E2               	decf	_IR_signal& (0+255),w,b
  4135  001CC0  0100               	movlb	0	; () banked
  4136  001CC2  11E3               	iorwf	(_IR_signal+1)& (0+255),w,b
  4137  001CC4  A4D8               	btfss	status,2,c
  4138  001CC6  D081               	goto	l845
  4139                           
  4140                           ; BSR set to: 0
  4141                           ;sort.c: 221: if(sensor_outputs[0]){
  4142  001CC8  0100               	movlb	0	; () banked
  4143  001CCA  51DA               	movf	_sensor_outputs& (0+255),w,b
  4144  001CCC  0100               	movlb	0	; () banked
  4145  001CCE  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  4146  001CD0  B4D8               	btfsc	status,2,c
  4147  001CD2  D011               	goto	l846
  4148                           
  4149                           ; BSR set to: 0
  4150                           ;sort.c: 222: LATAbits.LATA4 = 1;
  4151  001CD4  8889               	bsf	3977,4,c	;volatile
  4152                           
  4153                           ; BSR set to: 0
  4154                           ;sort.c: 223: _delay((unsigned long)((300)*(32000000/4000.0)));
  4155  001CD6  0E0D               	movlw	13
  4156  001CD8  0100               	movlb	0	; () banked
  4157  001CDA  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4158  001CDC  0E2D               	movlw	45
  4159  001CDE  0100               	movlb	0	; () banked
  4160  001CE0  6FB1               	movwf	??_Loading& (0+255),b
  4161  001CE2  0ED7               	movlw	215
  4162  001CE4                     u11097:
  4163  001CE4  2EE8               	decfsz	wreg,f,c
  4164  001CE6  D7FE               	bra	u11097
  4165  001CE8  2FB1               	decfsz	??_Loading& (0+255),f,b
  4166  001CEA  D7FC               	bra	u11097
  4167  001CEC  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4168  001CEE  D7FA               	bra	u11097
  4169  001CF0  D000               	nop2	
  4170                           
  4171                           ;sort.c: 224: LATAbits.LATA4 = 0;
  4172  001CF2  9889               	bcf	3977,4,c	;volatile
  4173                           
  4174                           ;sort.c: 225: }
  4175  001CF4  D06A               	goto	l845
  4176  001CF6                     l846:
  4177                           
  4178                           ; BSR set to: 0
  4179                           ;sort.c: 226: else{
  4180                           ;sort.c: 227: TMR2IE = 0;
  4181  001CF6  929D               	bcf	3997,1,c	;volatile
  4182                           
  4183                           ; BSR set to: 0
  4184                           ;sort.c: 228: for(int i = 0; i<3000; i++){
  4185  001CF8  0E00               	movlw	0
  4186  001CFA  0100               	movlb	0	; () banked
  4187  001CFC  6FC0               	movwf	(Loading@i_1141+1)& (0+255),b
  4188  001CFE  0E00               	movlw	0
  4189  001D00  6FBF               	movwf	Loading@i_1141& (0+255),b
  4190  001D02                     l8280:
  4191                           
  4192                           ; BSR set to: 0
  4193  001D02  0100               	movlb	0	; () banked
  4194  001D04  BFC0               	btfsc	(Loading@i_1141+1)& (0+255),7,b
  4195  001D06  D041               	goto	l8308
  4196  001D08  0EB8               	movlw	184
  4197  001D0A  0100               	movlb	0	; () banked
  4198  001D0C  5DBF               	subwf	Loading@i_1141& (0+255),w,b
  4199  001D0E  0E0B               	movlw	11
  4200  001D10  0100               	movlb	0	; () banked
  4201  001D12  59C0               	subwfb	(Loading@i_1141+1)& (0+255),w,b
  4202  001D14  B0D8               	btfsc	status,0,c
  4203  001D16  D058               	goto	l849
  4204  001D18  D038               	goto	l8308
  4205  001D1A                     l851:
  4206                           
  4207                           ; BSR set to: 0
  4208                           ;sort.c: 231: LATAbits.LATA4 = 1;
  4209  001D1A  8889               	bsf	3977,4,c	;volatile
  4210                           
  4211                           ; BSR set to: 0
  4212                           ;sort.c: 232: _delay((unsigned long)((75)*(32000000/4000000.0)));
  4213  001D1C  0EC8               	movlw	200
  4214  001D1E                     u11107:
  4215  001D1E  2EE8               	decfsz	wreg,f,c
  4216  001D20  D7FE               	bra	u11107
  4217                           
  4218                           ;sort.c: 233: LATAbits.LATA4 = 0;
  4219  001D22  9889               	bcf	3977,4,c	;volatile
  4220                           
  4221                           ;sort.c: 234: _delay((unsigned long)((25)*(32000000/4000000.0)));
  4222  001D24  0E42               	movlw	66
  4223  001D26                     u11117:
  4224  001D26  2EE8               	decfsz	wreg,f,c
  4225  001D28  D7FE               	bra	u11117
  4226  001D2A  D01C               	goto	L3
  4227  001D2C                     l853:
  4228                           
  4229                           ; BSR set to: 0
  4230                           ;sort.c: 237: LATAbits.LATA4 = 1;
  4231  001D2C  8889               	bsf	3977,4,c	;volatile
  4232                           
  4233                           ; BSR set to: 0
  4234                           ;sort.c: 238: _delay((unsigned long)((80)*(32000000/4000000.0)));
  4235  001D2E  0ED5               	movlw	213
  4236  001D30                     u11127:
  4237  001D30  2EE8               	decfsz	wreg,f,c
  4238  001D32  D7FE               	bra	u11127
  4239  001D34  F000               	nop	
  4240                           
  4241                           ;sort.c: 239: LATAbits.LATA4 = 0;
  4242  001D36  9889               	bcf	3977,4,c	;volatile
  4243                           
  4244                           ;sort.c: 240: _delay((unsigned long)((20)*(32000000/4000000.0)));
  4245  001D38  0E35               	movlw	53
  4246  001D3A                     u11137:
  4247  001D3A  2EE8               	decfsz	wreg,f,c
  4248  001D3C  D7FE               	bra	u11137
  4249  001D3E  D01D               	goto	L4
  4250  001D40                     l854:
  4251                           
  4252                           ; BSR set to: 0
  4253                           ;sort.c: 243: LATAbits.LATA4 = 1;
  4254  001D40  8889               	bsf	3977,4,c	;volatile
  4255                           
  4256                           ; BSR set to: 0
  4257                           ;sort.c: 244: _delay((unsigned long)((85)*(32000000/4000000.0)));
  4258  001D42  0EE2               	movlw	226
  4259  001D44                     u11147:
  4260  001D44  2EE8               	decfsz	wreg,f,c
  4261  001D46  D7FE               	bra	u11147
  4262  001D48  D000               	nop2	
  4263                           
  4264                           ;sort.c: 245: LATAbits.LATA4 = 0;
  4265  001D4A  9889               	bcf	3977,4,c	;volatile
  4266                           
  4267                           ;sort.c: 246: _delay((unsigned long)((15)*(32000000/4000000.0)));
  4268  001D4C  0E28               	movlw	40
  4269  001D4E                     u11157:
  4270  001D4E  2EE8               	decfsz	wreg,f,c
  4271  001D50  D7FE               	bra	u11157
  4272                           
  4273                           ;sort.c: 247: break;
  4274  001D52  D036               	goto	l8310
  4275  001D54                     l855:
  4276                           
  4277                           ; BSR set to: 0
  4278                           ;sort.c: 249: LATAbits.LATA4 = 1;
  4279  001D54  8889               	bsf	3977,4,c	;volatile
  4280                           
  4281                           ; BSR set to: 0
  4282                           ;sort.c: 250: _delay((unsigned long)((90)*(32000000/4000000.0)));
  4283  001D56  0EF0               	movlw	240
  4284  001D58                     u11167:
  4285  001D58  2EE8               	decfsz	wreg,f,c
  4286  001D5A  D7FE               	bra	u11167
  4287                           
  4288                           ;sort.c: 251: LATAbits.LATA4 = 0;
  4289  001D5C  9889               	bcf	3977,4,c	;volatile
  4290                           
  4291                           ;sort.c: 252: _delay((unsigned long)((10)*(32000000/4000000.0)));
  4292  001D5E  0E1A               	movlw	26
  4293  001D60                     u11177:
  4294  001D60  2EE8               	decfsz	wreg,f,c
  4295  001D62  D7FE               	bra	u11177
  4296  001D64                     L3:
  4297  001D64  D000               	nop2	
  4298                           
  4299                           ;sort.c: 253: break;
  4300  001D66  D02C               	goto	l8310
  4301  001D68                     l856:
  4302                           
  4303                           ; BSR set to: 0
  4304                           ;sort.c: 255: LATAbits.LATA4 = 1;
  4305  001D68  8889               	bsf	3977,4,c	;volatile
  4306                           
  4307                           ; BSR set to: 0
  4308                           ;sort.c: 256: _delay((unsigned long)((95)*(32000000/4000000.0)));
  4309  001D6A  0EFD               	movlw	253
  4310  001D6C                     u11187:
  4311  001D6C  2EE8               	decfsz	wreg,f,c
  4312  001D6E  D7FE               	bra	u11187
  4313  001D70  F000               	nop	
  4314                           
  4315                           ;sort.c: 257: LATAbits.LATA4 = 0;
  4316  001D72  9889               	bcf	3977,4,c	;volatile
  4317                           
  4318                           ;sort.c: 258: _delay((unsigned long)((50)*(32000000/4000000.0)));
  4319  001D74  0E85               	movlw	133
  4320  001D76                     u11197:
  4321  001D76  2EE8               	decfsz	wreg,f,c
  4322  001D78  D7FE               	bra	u11197
  4323  001D7A                     L4:
  4324  001D7A  F000               	nop	
  4325                           
  4326                           ;sort.c: 259: break;
  4327  001D7C  D021               	goto	l8310
  4328  001D7E                     l857:
  4329                           
  4330                           ; BSR set to: 0
  4331                           ;sort.c: 261: LATAbits.LATA4 = 1;
  4332  001D7E  8889               	bsf	3977,4,c	;volatile
  4333                           
  4334                           ; BSR set to: 0
  4335                           ;sort.c: 262: _delay((unsigned long)((100)*(32000000/4000000.0)));
  4336  001D80  0EA0               	movlw	160
  4337  001D82                     u11207:
  4338  001D82  D000               	nop2	
  4339  001D84  2EE8               	decfsz	wreg,f,c
  4340  001D86  D7FD               	bra	u11207
  4341                           
  4342                           ;sort.c: 264: }
  4343                           
  4344                           ;sort.c: 263: break;
  4345  001D88  D01B               	goto	l8310
  4346  001D8A                     l8308:
  4347  001D8A  C0C3  F0B1         	movff	Loading@j,??_Loading
  4348  001D8E  C0C4  F0B2         	movff	Loading@j+1,??_Loading+1
  4349                           
  4350                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4351                           ; Switch size 1, requested type "space"
  4352                           ; Number of cases is 1, Range of values is 0 to 0
  4353                           ; switch strategies available:
  4354                           ; Name         Instructions Cycles
  4355                           ; simple_byte            4     3 (average)
  4356                           ;	Chosen strategy is simple_byte
  4357  001D92  0100               	movlb	0	; () banked
  4358  001D94  51B2               	movf	(??_Loading+1)& (0+255),w,b
  4359  001D96  0A00               	xorlw	0	; case 0
  4360  001D98  A4D8               	btfss	status,2,c
  4361  001D9A  D7F1               	goto	l857
  4362                           
  4363                           ; BSR set to: 0
  4364                           ; Switch size 1, requested type "space"
  4365                           ; Number of cases is 5, Range of values is 0 to 4
  4366                           ; switch strategies available:
  4367                           ; Name         Instructions Cycles
  4368                           ; simple_byte           16     9 (average)
  4369                           ;	Chosen strategy is simple_byte
  4370  001D9C  0100               	movlb	0	; () banked
  4371  001D9E  51B1               	movf	??_Loading& (0+255),w,b
  4372  001DA0  0A00               	xorlw	0	; case 0
  4373  001DA2  B4D8               	btfsc	status,2,c
  4374  001DA4  D7BA               	goto	l851
  4375  001DA6  0A01               	xorlw	1	; case 1
  4376  001DA8  B4D8               	btfsc	status,2,c
  4377  001DAA  D7C0               	goto	l853
  4378  001DAC  0A03               	xorlw	3	; case 2
  4379  001DAE  B4D8               	btfsc	status,2,c
  4380  001DB0  D7C7               	goto	l854
  4381  001DB2  0A01               	xorlw	1	; case 3
  4382  001DB4  B4D8               	btfsc	status,2,c
  4383  001DB6  D7CE               	goto	l855
  4384  001DB8  0A07               	xorlw	7	; case 4
  4385  001DBA  B4D8               	btfsc	status,2,c
  4386  001DBC  D7D5               	goto	l856
  4387  001DBE  D7DF               	goto	l857
  4388  001DC0                     l8310:
  4389  001DC0  0100               	movlb	0	; () banked
  4390  001DC2  4BBF               	infsnz	Loading@i_1141& (0+255),f,b
  4391  001DC4  2BC0               	incf	(Loading@i_1141+1)& (0+255),f,b
  4392  001DC6  D79D               	goto	l8280
  4393  001DC8                     l849:
  4394                           
  4395                           ; BSR set to: 0
  4396                           ;sort.c: 265: }
  4397                           ;sort.c: 266: TMR2IE = 1;
  4398  001DC8  829D               	bsf	3997,1,c	;volatile
  4399  001DCA                     l845:
  4400                           
  4401                           ;sort.c: 267: }
  4402                           ;sort.c: 268: }
  4403                           ;sort.c: 269: LATAbits.LATA4 = 0;
  4404  001DCA  9889               	bcf	3977,4,c	;volatile
  4405                           
  4406                           ;sort.c: 270: j++;
  4407  001DCC  0100               	movlb	0	; () banked
  4408  001DCE  4BC3               	infsnz	Loading@j& (0+255),f,b
  4409  001DD0  2BC4               	incf	(Loading@j+1)& (0+255),f,b
  4410  001DD2                     l8316:
  4411                           
  4412                           ; BSR set to: 0
  4413                           ;sort.c: 271: }
  4414                           ;sort.c: 273: if(!IR_signal){
  4415  001DD2  0100               	movlb	0	; () banked
  4416  001DD4  51E2               	movf	_IR_signal& (0+255),w,b
  4417  001DD6  0100               	movlb	0	; () banked
  4418  001DD8  11E3               	iorwf	(_IR_signal+1)& (0+255),w,b
  4419  001DDA  A4D8               	btfss	status,2,c
  4420  001DDC  D01B               	goto	l8328
  4421                           
  4422                           ; BSR set to: 0
  4423                           ;sort.c: 274: _delay((unsigned long)((500)*(32000000/4000.0)));
  4424  001DDE  0E15               	movlw	21
  4425  001DE0  0100               	movlb	0	; () banked
  4426  001DE2  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4427  001DE4  0E4B               	movlw	75
  4428  001DE6  0100               	movlb	0	; () banked
  4429  001DE8  6FB1               	movwf	??_Loading& (0+255),b
  4430  001DEA  0EBE               	movlw	190
  4431  001DEC                     u11217:
  4432  001DEC  2EE8               	decfsz	wreg,f,c
  4433  001DEE  D7FE               	bra	u11217
  4434  001DF0  2FB1               	decfsz	??_Loading& (0+255),f,b
  4435  001DF2  D7FC               	bra	u11217
  4436  001DF4  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4437  001DF6  D7FA               	bra	u11217
  4438  001DF8  F000               	nop	
  4439                           
  4440                           ;sort.c: 275: readIR(0);
  4441  001DFA  0E00               	movlw	0
  4442  001DFC  0100               	movlb	0	; () banked
  4443  001DFE  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  4444  001E00  0E00               	movlw	0
  4445  001E02  6F82               	movwf	readIR@ana_port& (0+255),b
  4446  001E04  EC9E  F028         	call	_readIR	;wreg free
  4447                           
  4448                           ;sort.c: 276: if(IR_signal==1){
  4449  001E08  0100               	movlb	0	; () banked
  4450  001E0A  05E2               	decf	_IR_signal& (0+255),w,b
  4451  001E0C  0100               	movlb	0	; () banked
  4452  001E0E  11E3               	iorwf	(_IR_signal+1)& (0+255),w,b
  4453  001E10  A4D8               	btfss	status,2,c
  4454  001E12  D006               	goto	l861
  4455  001E14                     l8328:
  4456                           
  4457                           ; BSR set to: 0
  4458  001E14  0100               	movlb	0	; () banked
  4459  001E16  05E2               	decf	_IR_signal& (0+255),w,b
  4460  001E18  0100               	movlb	0	; () banked
  4461  001E1A  11E3               	iorwf	(_IR_signal+1)& (0+255),w,b
  4462  001E1C  B4D8               	btfsc	status,2,c
  4463  001E1E  D6AC               	goto	l8234
  4464  001E20                     l861:
  4465                           
  4466                           ; BSR set to: 0
  4467                           ;sort.c: 281: }
  4468                           ;sort.c: 282: }
  4469                           ;sort.c: 283: }
  4470                           ;sort.c: 284: LATBbits.LATB2 = 0;
  4471  001E20  948A               	bcf	3978,2,c	;volatile
  4472  001E22                     l8330:
  4473                           
  4474                           ; BSR set to: 0
  4475                           ;sort.c: 285: }
  4476                           ;sort.c: 286: f_can_coming_to_ID = 1;
  4477  001E22  0E00               	movlw	0
  4478  001E24  0101               	movlb	1	; () banked
  4479  001E26  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4480  001E28  0E01               	movlw	1
  4481  001E2A  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  4482                           
  4483                           ; BSR set to: 1
  4484                           
  4485                           ; BSR set to: 1
  4486  001E2C  0012               	return	
  4487  001E2E                     __end_of_Loading:
  4488                           	opt stack 0
  4489                           tblptru	equ	0xFF8
  4490                           tblptrh	equ	0xFF7
  4491                           tblptrl	equ	0xFF6
  4492                           tablat	equ	0xFF5
  4493                           prodh	equ	0xFF4
  4494                           prodl	equ	0xFF3
  4495                           postinc0	equ	0xFEE
  4496                           wreg	equ	0xFE8
  4497                           postdec1	equ	0xFE5
  4498                           fsr1l	equ	0xFE1
  4499                           status	equ	0xFD8
  4500                           
  4501 ;; *************** function _initSortTimer *****************
  4502 ;; Defined at:
  4503 ;;		line 502 in file "sort.c"
  4504 ;; Parameters:    Size  Location     Type
  4505 ;;		None
  4506 ;; Auto vars:     Size  Location     Type
  4507 ;;  i               2    8[BANK0 ] int 
  4508 ;; Return value:  Size  Location     Type
  4509 ;;                  1    wreg      void 
  4510 ;; Registers used:
  4511 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4512 ;; Tracked objects:
  4513 ;;		On entry : 0/0
  4514 ;;		On exit  : 0/0
  4515 ;;		Unchanged: 0/0
  4516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4518 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4519 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4520 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4521 ;;Total ram usage:        5 bytes
  4522 ;; Hardware stack levels used:    1
  4523 ;; Hardware stack levels required when called:   10
  4524 ;; This function calls:
  4525 ;;		_getRTC
  4526 ;; This function is called by:
  4527 ;;		_Loading
  4528 ;; This function uses a non-reentrant model
  4529 ;;
  4530                           
  4531                           	psect	text3
  4532  004FF0                     __ptext3:
  4533                           	opt stack 0
  4534  004FF0                     _initSortTimer:
  4535                           	opt stack 18
  4536                           
  4537                           ;sort.c: 504: getRTC();
  4538                           
  4539                           ;incstack = 0
  4540  004FF0  EC30  F029         	call	_getRTC	;wreg free
  4541                           
  4542                           ;sort.c: 505: for(int i = 0; i < 7; i++){
  4543  004FF4  0E00               	movlw	0
  4544  004FF6  0100               	movlb	0	; () banked
  4545  004FF8  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  4546  004FFA  0E00               	movlw	0
  4547  004FFC  6F88               	movwf	initSortTimer@i& (0+255),b
  4548  004FFE                     l7608:
  4549                           
  4550                           ; BSR set to: 0
  4551  004FFE  0100               	movlb	0	; () banked
  4552  005000  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  4553  005002  D008               	goto	l7612
  4554  005004  0100               	movlb	0	; () banked
  4555  005006  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  4556  005008  E140               	bnz	l7618
  4557  00500A  0E07               	movlw	7
  4558  00500C  0100               	movlb	0	; () banked
  4559  00500E  5D88               	subwf	initSortTimer@i& (0+255),w,b
  4560  005010  B0D8               	btfsc	status,0,c
  4561  005012  D03B               	goto	l7618
  4562  005014                     l7612:
  4563                           
  4564                           ; BSR set to: 0
  4565                           ;sort.c: 506: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  4566  005014  0E1C               	movlw	low _time
  4567  005016  0100               	movlb	0	; () banked
  4568  005018  2588               	addwf	initSortTimer@i& (0+255),w,b
  4569  00501A  6ED9               	movwf	fsr2l,c
  4570  00501C  0E01               	movlw	high _time
  4571  00501E  0100               	movlb	0	; () banked
  4572  005020  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4573  005022  6EDA               	movwf	fsr2h,c
  4574  005024  50DF               	movf	indf2,w,c
  4575  005026  0100               	movlb	0	; () banked
  4576  005028  6F85               	movwf	??_initSortTimer& (0+255),b
  4577  00502A  0100               	movlb	0	; () banked
  4578  00502C  3B85               	swapf	??_initSortTimer& (0+255),f,b
  4579  00502E  0E0F               	movlw	15
  4580  005030  1785               	andwf	??_initSortTimer& (0+255),f,b
  4581  005032  0E0F               	movlw	15
  4582  005034  0100               	movlb	0	; () banked
  4583  005036  1785               	andwf	??_initSortTimer& (0+255),f,b
  4584  005038  0100               	movlb	0	; () banked
  4585  00503A  5185               	movf	??_initSortTimer& (0+255),w,b
  4586  00503C  0D0A               	mullw	10
  4587  00503E  0E1C               	movlw	low _time
  4588  005040  0100               	movlb	0	; () banked
  4589  005042  2588               	addwf	initSortTimer@i& (0+255),w,b
  4590  005044  6ED9               	movwf	fsr2l,c
  4591  005046  0E01               	movlw	high _time
  4592  005048  0100               	movlb	0	; () banked
  4593  00504A  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4594  00504C  6EDA               	movwf	fsr2h,c
  4595  00504E  50DF               	movf	indf2,w,c
  4596  005050  0B0F               	andlw	15
  4597  005052  0100               	movlb	0	; () banked
  4598  005054  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  4599  005056  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  4600  005058  50F3               	movf	prodl,w,c
  4601  00505A  0100               	movlb	0	; () banked
  4602  00505C  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  4603  00505E  50F4               	movf	prodh,w,c
  4604  005060  0100               	movlb	0	; () banked
  4605  005062  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  4606  005064  90D8               	bcf	status,0,c
  4607  005066  0100               	movlb	0	; () banked
  4608  005068  3588               	rlcf	initSortTimer@i& (0+255),w,b
  4609  00506A  6ED9               	movwf	fsr2l,c
  4610  00506C  0100               	movlb	0	; () banked
  4611  00506E  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  4612  005070  6EDA               	movwf	fsr2h,c
  4613  005072  0E0E               	movlw	low _startTime
  4614  005074  26D9               	addwf	fsr2l,f,c
  4615  005076  0E01               	movlw	high _startTime
  4616  005078  22DA               	addwfc	fsr2h,f,c
  4617  00507A  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  4618  00507E  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  4619                           
  4620                           ; BSR set to: 0
  4621  005082  0100               	movlb	0	; () banked
  4622  005084  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  4623  005086  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  4624  005088  D7BA               	goto	l7608
  4625  00508A                     l7618:
  4626                           
  4627                           ; BSR set to: 0
  4628                           ;sort.c: 507: }
  4629                           ;sort.c: 509: T0CON = 0b00010111;
  4630  00508A  0E17               	movlw	23
  4631  00508C  6ED5               	movwf	4053,c	;volatile
  4632                           
  4633                           ;sort.c: 518: TMR0H = 0b10000101;
  4634  00508E  0E85               	movlw	133
  4635  005090  6ED7               	movwf	4055,c	;volatile
  4636                           
  4637                           ;sort.c: 519: TMR0L = 0b11101110;
  4638  005092  0EEE               	movlw	238
  4639  005094  6ED6               	movwf	4054,c	;volatile
  4640                           
  4641                           ; BSR set to: 0
  4642                           ;sort.c: 520: TMR0ON = 1;
  4643  005096  8ED5               	bsf	4053,7,c	;volatile
  4644                           
  4645                           ; BSR set to: 0
  4646  005098  0012               	return		;funcret
  4647  00509A                     __end_of_initSortTimer:
  4648                           	opt stack 0
  4649                           tblptru	equ	0xFF8
  4650                           tblptrh	equ	0xFF7
  4651                           tblptrl	equ	0xFF6
  4652                           tablat	equ	0xFF5
  4653                           prodh	equ	0xFF4
  4654                           prodl	equ	0xFF3
  4655                           postinc0	equ	0xFEE
  4656                           wreg	equ	0xFE8
  4657                           postdec1	equ	0xFE5
  4658                           fsr1l	equ	0xFE1
  4659                           indf2	equ	0xFDF
  4660                           postinc2	equ	0xFDE
  4661                           postdec2	equ	0xFDD
  4662                           fsr2h	equ	0xFDA
  4663                           fsr2l	equ	0xFD9
  4664                           status	equ	0xFD8
  4665                           
  4666 ;; *************** function _initGlobalVars *****************
  4667 ;; Defined at:
  4668 ;;		line 466 in file "sort.c"
  4669 ;; Parameters:    Size  Location     Type
  4670 ;;		None
  4671 ;; Auto vars:     Size  Location     Type
  4672 ;;		None
  4673 ;; Return value:  Size  Location     Type
  4674 ;;                  1    wreg      void 
  4675 ;; Registers used:
  4676 ;;		wreg, status,2
  4677 ;; Tracked objects:
  4678 ;;		On entry : 0/0
  4679 ;;		On exit  : 0/0
  4680 ;;		Unchanged: 0/0
  4681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4685 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4686 ;;Total ram usage:        0 bytes
  4687 ;; Hardware stack levels used:    1
  4688 ;; Hardware stack levels required when called:    7
  4689 ;; This function calls:
  4690 ;;		Nothing
  4691 ;; This function is called by:
  4692 ;;		_Loading
  4693 ;; This function uses a non-reentrant model
  4694 ;;
  4695                           
  4696                           	psect	text4
  4697  004C14                     __ptext4:
  4698                           	opt stack 0
  4699  004C14                     _initGlobalVars:
  4700                           	opt stack 21
  4701                           
  4702                           ;sort.c: 468: first = 0;
  4703                           
  4704                           ; BSR set to: 0
  4705                           ;incstack = 0
  4706  004C14  0E00               	movlw	0
  4707  004C16  0101               	movlb	1	; () banked
  4708  004C18  6F3A               	movwf	(_first+1)& (0+255),b
  4709  004C1A  0E00               	movlw	0
  4710  004C1C  6F39               	movwf	_first& (0+255),b
  4711                           
  4712                           ;sort.c: 471: f_loadingNewCan = 0;
  4713  004C1E  0E00               	movlw	0
  4714  004C20  0100               	movlb	0	; () banked
  4715  004C22  6FEF               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4716  004C24  0E00               	movlw	0
  4717  004C26  6FEE               	movwf	_f_loadingNewCan& (0+255),b
  4718                           
  4719                           ;sort.c: 472: f_lastCan = 0;
  4720  004C28  0E00               	movlw	0
  4721  004C2A  0100               	movlb	0	; () banked
  4722  004C2C  6FED               	movwf	(_f_lastCan+1)& (0+255),b
  4723  004C2E  0E00               	movlw	0
  4724  004C30  6FEC               	movwf	_f_lastCan& (0+255),b
  4725                           
  4726                           ;sort.c: 473: f_ID_receive = 1;
  4727  004C32  0E00               	movlw	0
  4728  004C34  0101               	movlb	1	; () banked
  4729  004C36  6F30               	movwf	(_f_ID_receive+1)& (0+255),b
  4730  004C38  0E01               	movlw	1
  4731  004C3A  6F2F               	movwf	_f_ID_receive& (0+255),b
  4732                           
  4733                           ;sort.c: 474: f_can_coming_to_ID = 0;
  4734  004C3C  0E00               	movlw	0
  4735  004C3E  0101               	movlb	1	; () banked
  4736  004C40  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4737  004C42  0E00               	movlw	0
  4738  004C44  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  4739                           
  4740                           ;sort.c: 475: f_can_coming_to_distribution = 0;
  4741  004C46  0E00               	movlw	0
  4742  004C48  0101               	movlb	1	; () banked
  4743  004C4A  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  4744  004C4C  0E00               	movlw	0
  4745  004C4E  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  4746                           
  4747                           ;sort.c: 476: f_can_distributed = 1;
  4748  004C50  0E00               	movlw	0
  4749  004C52  0101               	movlb	1	; () banked
  4750  004C54  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
  4751  004C56  0E01               	movlw	1
  4752  004C58  6F35               	movwf	_f_can_distributed& (0+255),b
  4753                           
  4754                           ;sort.c: 477: f_most_recent_sort_time = 0;
  4755  004C5A  0E00               	movlw	0
  4756  004C5C  0101               	movlb	1	; () banked
  4757  004C5E  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  4758  004C60  0E00               	movlw	0
  4759  004C62  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
  4760                           
  4761                           ;sort.c: 480: count_total = 0;
  4762  004C64  0E00               	movlw	0
  4763  004C66  0100               	movlb	0	; () banked
  4764  004C68  6FFF               	movwf	(_count_total+1)& (0+255),b
  4765  004C6A  0E00               	movlw	0
  4766  004C6C  6FFE               	movwf	_count_total& (0+255),b
  4767                           
  4768                           ;sort.c: 481: count_pop_no_tab = 0;
  4769  004C6E  0E00               	movlw	0
  4770  004C70  0101               	movlb	1	; () banked
  4771  004C72  6F28               	movwf	(_count_pop_no_tab+1)& (0+255),b
  4772  004C74  0E00               	movlw	0
  4773  004C76  6F27               	movwf	_count_pop_no_tab& (0+255),b
  4774                           
  4775                           ;sort.c: 482: count_pop_w_tab = 0;
  4776  004C78  0E00               	movlw	0
  4777  004C7A  0101               	movlb	1	; () banked
  4778  004C7C  6F2A               	movwf	(_count_pop_w_tab+1)& (0+255),b
  4779  004C7E  0E00               	movlw	0
  4780  004C80  6F29               	movwf	_count_pop_w_tab& (0+255),b
  4781                           
  4782                           ;sort.c: 483: count_can_w_lab = 0;
  4783  004C82  0E00               	movlw	0
  4784  004C84  0101               	movlb	1	; () banked
  4785  004C86  6F26               	movwf	(_count_can_w_lab+1)& (0+255),b
  4786  004C88  0E00               	movlw	0
  4787  004C8A  6F25               	movwf	_count_can_w_lab& (0+255),b
  4788                           
  4789                           ;sort.c: 484: count_can_no_lab = 0;
  4790  004C8C  0E00               	movlw	0
  4791  004C8E  0101               	movlb	1	; () banked
  4792  004C90  6F24               	movwf	(_count_can_no_lab+1)& (0+255),b
  4793  004C92  0E00               	movlw	0
  4794  004C94  6F23               	movwf	_count_can_no_lab& (0+255),b
  4795                           
  4796                           ;sort.c: 487: most_recent_sort_time = 999;
  4797  004C96  0E03               	movlw	3
  4798  004C98  0101               	movlb	1	; () banked
  4799  004C9A  6F44               	movwf	(_most_recent_sort_time+1)& (0+255),b
  4800  004C9C  0EE7               	movlw	231
  4801  004C9E  6F43               	movwf	_most_recent_sort_time& (0+255),b
  4802                           
  4803                           ;sort.c: 490: motor_toggle_count = 0;
  4804  004CA0  0E00               	movlw	0
  4805  004CA2  0101               	movlb	1	; () banked
  4806  004CA4  6F46               	movwf	(_motor_toggle_count+1)& (0+255),b
  4807  004CA6  0E00               	movlw	0
  4808  004CA8  6F45               	movwf	_motor_toggle_count& (0+255),b
  4809                           
  4810                           ;sort.c: 491: agitator_toggle_count = 0;
  4811  004CAA  0E00               	movlw	0
  4812  004CAC  6E5E               	movwf	_agitator_toggle_count+1,c
  4813  004CAE  0E00               	movlw	0
  4814  004CB0  6E5D               	movwf	_agitator_toggle_count,c
  4815                           
  4816                           ;sort.c: 494: servo_timer_counter = 0;
  4817  004CB2  0E00               	movlw	0
  4818  004CB4  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
  4819  004CB6  0E00               	movlw	0
  4820  004CB8  6E6D               	movwf	_servo_timer_counter,c	;volatile
  4821                           
  4822                           ;sort.c: 495: servo_timer_target = 9999;
  4823  004CBA  0E27               	movlw	39
  4824  004CBC  6E70               	movwf	_servo_timer_target+1,c	;volatile
  4825  004CBE  0E0F               	movlw	15
  4826  004CC0  6E6F               	movwf	_servo_timer_target,c	;volatile
  4827                           
  4828                           ;sort.c: 496: timer2_counter = 0;
  4829  004CC2  0E00               	movlw	0
  4830  004CC4  6E74               	movwf	_timer2_counter+1,c	;volatile
  4831  004CC6  0E00               	movlw	0
  4832  004CC8  6E73               	movwf	_timer2_counter,c	;volatile
  4833                           
  4834                           ;sort.c: 497: f_arm_position = 0;
  4835  004CCA  0E00               	movlw	0
  4836  004CCC  0100               	movlb	0	; () banked
  4837  004CCE  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  4838  004CD0  0E00               	movlw	0
  4839  004CD2  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
  4840                           
  4841                           ; BSR set to: 0
  4842                           ;sort.c: 498: pan_servo_state = -1;
  4843  004CD4  686B               	setf	_pan_servo_state,c	;volatile
  4844  004CD6  686C               	setf	_pan_servo_state+1,c	;volatile
  4845                           
  4846                           ; BSR set to: 0
  4847                           ;sort.c: 499: tilt_servo_state = -1;
  4848  004CD8  6871               	setf	_tilt_servo_state,c	;volatile
  4849  004CDA  6872               	setf	_tilt_servo_state+1,c	;volatile
  4850                           
  4851                           ;sort.c: 500: f_panning_to_bin = 0;
  4852  004CDC  0E00               	movlw	0
  4853  004CDE  6E66               	movwf	_f_panning_to_bin+1,c	;volatile
  4854  004CE0  0E00               	movlw	0
  4855  004CE2  6E65               	movwf	_f_panning_to_bin,c	;volatile
  4856                           
  4857                           ; BSR set to: 0
  4858  004CE4  0012               	return		;funcret
  4859  004CE6                     __end_of_initGlobalVars:
  4860                           	opt stack 0
  4861                           tblptru	equ	0xFF8
  4862                           tblptrh	equ	0xFF7
  4863                           tblptrl	equ	0xFF6
  4864                           tablat	equ	0xFF5
  4865                           prodh	equ	0xFF4
  4866                           prodl	equ	0xFF3
  4867                           postinc0	equ	0xFEE
  4868                           wreg	equ	0xFE8
  4869                           postdec1	equ	0xFE5
  4870                           fsr1l	equ	0xFE1
  4871                           indf2	equ	0xFDF
  4872                           postinc2	equ	0xFDE
  4873                           postdec2	equ	0xFDD
  4874                           fsr2h	equ	0xFDA
  4875                           fsr2l	equ	0xFD9
  4876                           status	equ	0xFD8
  4877                           
  4878 ;; *************** function _getMAG *****************
  4879 ;; Defined at:
  4880 ;;		line 634 in file "sort.c"
  4881 ;; Parameters:    Size  Location     Type
  4882 ;;		None
  4883 ;; Auto vars:     Size  Location     Type
  4884 ;;		None
  4885 ;; Return value:  Size  Location     Type
  4886 ;;                  1    wreg      void 
  4887 ;; Registers used:
  4888 ;;		wreg, status,2, status,0, cstack
  4889 ;; Tracked objects:
  4890 ;;		On entry : 0/0
  4891 ;;		On exit  : 0/0
  4892 ;;		Unchanged: 0/0
  4893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4896 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4897 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4898 ;;Total ram usage:        2 bytes
  4899 ;; Hardware stack levels used:    1
  4900 ;; Hardware stack levels required when called:    9
  4901 ;; This function calls:
  4902 ;;		_readMAG
  4903 ;; This function is called by:
  4904 ;;		_Loading
  4905 ;; This function uses a non-reentrant model
  4906 ;;
  4907                           
  4908                           	psect	text5
  4909  005C38                     __ptext5:
  4910                           	opt stack 0
  4911  005C38                     _getMAG:
  4912                           	opt stack 19
  4913                           
  4914                           ;sort.c: 635: readMAG();
  4915                           
  4916                           ; BSR set to: 0
  4917                           ;incstack = 0
  4918  005C38  ECEC  F02C         	call	_readMAG	;wreg free
  4919                           
  4920                           ;sort.c: 636: if(MAG_signal){
  4921  005C3C  0100               	movlb	0	; () banked
  4922  005C3E  51E4               	movf	_MAG_signal& (0+255),w,b
  4923  005C40  0100               	movlb	0	; () banked
  4924  005C42  11E5               	iorwf	(_MAG_signal+1)& (0+255),w,b
  4925  005C44  B4D8               	btfsc	status,2,c
  4926  005C46  0012               	return	
  4927                           
  4928                           ; BSR set to: 0
  4929                           ;sort.c: 637: _delay((unsigned long)((100)*(32000000/4000.0)));
  4930  005C48  0E05               	movlw	5
  4931  005C4A  0100               	movlb	0	; () banked
  4932  005C4C  6F87               	movwf	(??_getMAG+1)& (0+255),b
  4933  005C4E  0E0F               	movlw	15
  4934  005C50  0100               	movlb	0	; () banked
  4935  005C52  6F86               	movwf	??_getMAG& (0+255),b
  4936  005C54  0EF1               	movlw	241
  4937  005C56                     u11227:
  4938  005C56  2EE8               	decfsz	wreg,f,c
  4939  005C58  D7FE               	bra	u11227
  4940  005C5A  2F86               	decfsz	??_getMAG& (0+255),f,b
  4941  005C5C  D7FC               	bra	u11227
  4942  005C5E  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  4943  005C60  D7FA               	bra	u11227
  4944                           
  4945                           ;sort.c: 638: readMAG();
  4946  005C62  ECEC  F02C         	call	_readMAG	;wreg free
  4947  005C66  0012               	return	
  4948  005C68                     __end_of_getMAG:
  4949                           	opt stack 0
  4950                           tblptru	equ	0xFF8
  4951                           tblptrh	equ	0xFF7
  4952                           tblptrl	equ	0xFF6
  4953                           tablat	equ	0xFF5
  4954                           prodh	equ	0xFF4
  4955                           prodl	equ	0xFF3
  4956                           postinc0	equ	0xFEE
  4957                           wreg	equ	0xFE8
  4958                           postdec1	equ	0xFE5
  4959                           fsr1l	equ	0xFE1
  4960                           indf2	equ	0xFDF
  4961                           postinc2	equ	0xFDE
  4962                           postdec2	equ	0xFDD
  4963                           fsr2h	equ	0xFDA
  4964                           fsr2l	equ	0xFD9
  4965                           status	equ	0xFD8
  4966                           
  4967 ;; *************** function _getIR *****************
  4968 ;; Defined at:
  4969 ;;		line 618 in file "sort.c"
  4970 ;; Parameters:    Size  Location     Type
  4971 ;;  port            2    6[BANK0 ] int 
  4972 ;; Auto vars:     Size  Location     Type
  4973 ;;  i               2    9[BANK0 ] int 
  4974 ;; Return value:  Size  Location     Type
  4975 ;;                  1    wreg      void 
  4976 ;; Registers used:
  4977 ;;		wreg, status,2, status,0, cstack
  4978 ;; Tracked objects:
  4979 ;;		On entry : 0/0
  4980 ;;		On exit  : 0/0
  4981 ;;		Unchanged: 0/0
  4982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4983 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4984 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4985 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4986 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4987 ;;Total ram usage:        5 bytes
  4988 ;; Hardware stack levels used:    1
  4989 ;; Hardware stack levels required when called:    9
  4990 ;; This function calls:
  4991 ;;		_readIR
  4992 ;; This function is called by:
  4993 ;;		_Loading
  4994 ;; This function uses a non-reentrant model
  4995 ;;
  4996                           
  4997                           	psect	text6
  4998  00536A                     __ptext6:
  4999                           	opt stack 0
  5000  00536A                     _getIR:
  5001                           	opt stack 19
  5002                           
  5003                           ;sort.c: 619: readIR(port);
  5004                           
  5005                           ;incstack = 0
  5006  00536A  C086  F082         	movff	getIR@port,readIR@ana_port
  5007  00536E  C087  F083         	movff	getIR@port+1,readIR@ana_port+1
  5008  005372  EC9E  F028         	call	_readIR	;wreg free
  5009                           
  5010                           ;sort.c: 620: for(int i = 0; i < 150; i++){
  5011  005376  0E00               	movlw	0
  5012  005378  0100               	movlb	0	; () banked
  5013  00537A  6F8A               	movwf	(getIR@i+1)& (0+255),b
  5014  00537C  0E00               	movlw	0
  5015  00537E  6F89               	movwf	getIR@i& (0+255),b
  5016  005380                     l7708:
  5017                           
  5018                           ; BSR set to: 0
  5019  005380  0100               	movlb	0	; () banked
  5020  005382  BF8A               	btfsc	(getIR@i+1)& (0+255),7,b
  5021  005384  D008               	goto	l7712
  5022  005386  0100               	movlb	0	; () banked
  5023  005388  518A               	movf	(getIR@i+1)& (0+255),w,b
  5024  00538A  E11E               	bnz	l7724
  5025  00538C  0E96               	movlw	150
  5026  00538E  0100               	movlb	0	; () banked
  5027  005390  5D89               	subwf	getIR@i& (0+255),w,b
  5028  005392  B0D8               	btfsc	status,0,c
  5029  005394  D019               	goto	l7724
  5030  005396                     l7712:
  5031                           
  5032                           ; BSR set to: 0
  5033                           ;sort.c: 621: _delay((unsigned long)((500)*(32000000/4000000.0)));
  5034  005396  0E06               	movlw	6
  5035  005398  0100               	movlb	0	; () banked
  5036  00539A  6F88               	movwf	??_getIR& (0+255),b
  5037  00539C  0E30               	movlw	48
  5038  00539E                     u11237:
  5039  00539E  2EE8               	decfsz	wreg,f,c
  5040  0053A0  D7FE               	bra	u11237
  5041  0053A2  2F88               	decfsz	??_getIR& (0+255),f,b
  5042  0053A4  D7FC               	bra	u11237
  5043  0053A6  F000               	nop	
  5044                           
  5045                           ;sort.c: 622: readIR(port);
  5046  0053A8  C086  F082         	movff	getIR@port,readIR@ana_port
  5047  0053AC  C087  F083         	movff	getIR@port+1,readIR@ana_port+1
  5048  0053B0  EC9E  F028         	call	_readIR	;wreg free
  5049                           
  5050                           ;sort.c: 623: if(!IR_signal){
  5051  0053B4  0100               	movlb	0	; () banked
  5052  0053B6  51E2               	movf	_IR_signal& (0+255),w,b
  5053  0053B8  0100               	movlb	0	; () banked
  5054  0053BA  11E3               	iorwf	(_IR_signal+1)& (0+255),w,b
  5055  0053BC  B4D8               	btfsc	status,2,c
  5056  0053BE  D004               	goto	l7724
  5057                           
  5058                           ; BSR set to: 0
  5059                           
  5060                           ; BSR set to: 0
  5061                           
  5062                           ; BSR set to: 0
  5063                           ;sort.c: 624: break;
  5064  0053C0  0100               	movlb	0	; () banked
  5065  0053C2  4B89               	infsnz	getIR@i& (0+255),f,b
  5066  0053C4  2B8A               	incf	(getIR@i+1)& (0+255),f,b
  5067  0053C6  D7DC               	goto	l7708
  5068  0053C8                     l7724:
  5069                           
  5070                           ; BSR set to: 0
  5071                           ;sort.c: 625: }
  5072                           ;sort.c: 626: }
  5073                           ;sort.c: 627: if(IR_signal==1){
  5074  0053C8  0100               	movlb	0	; () banked
  5075  0053CA  05E2               	decf	_IR_signal& (0+255),w,b
  5076  0053CC  0100               	movlb	0	; () banked
  5077  0053CE  11E3               	iorwf	(_IR_signal+1)& (0+255),w,b
  5078  0053D0  A4D8               	btfss	status,2,c
  5079  0053D2  D006               	goto	l7728
  5080                           
  5081                           ; BSR set to: 0
  5082                           ;sort.c: 628: f_loadingNewCan = 1;
  5083  0053D4  0E00               	movlw	0
  5084  0053D6  0100               	movlb	0	; () banked
  5085  0053D8  6FEF               	movwf	(_f_loadingNewCan+1)& (0+255),b
  5086  0053DA  0E01               	movlw	1
  5087  0053DC  6FEE               	movwf	_f_loadingNewCan& (0+255),b
  5088                           
  5089                           ;sort.c: 629: }
  5090  0053DE  0012               	return	
  5091  0053E0                     l7728:
  5092                           
  5093                           ; BSR set to: 0
  5094                           ;sort.c: 630: else{
  5095                           ;sort.c: 631: f_loadingNewCan = 0;
  5096  0053E0  0E00               	movlw	0
  5097  0053E2  0100               	movlb	0	; () banked
  5098  0053E4  6FEF               	movwf	(_f_loadingNewCan+1)& (0+255),b
  5099  0053E6  0E00               	movlw	0
  5100  0053E8  6FEE               	movwf	_f_loadingNewCan& (0+255),b
  5101  0053EA  0012               	return	
  5102  0053EC                     __end_of_getIR:
  5103                           	opt stack 0
  5104                           tblptru	equ	0xFF8
  5105                           tblptrh	equ	0xFF7
  5106                           tblptrl	equ	0xFF6
  5107                           tablat	equ	0xFF5
  5108                           prodh	equ	0xFF4
  5109                           prodl	equ	0xFF3
  5110                           postinc0	equ	0xFEE
  5111                           wreg	equ	0xFE8
  5112                           postdec1	equ	0xFE5
  5113                           fsr1l	equ	0xFE1
  5114                           indf2	equ	0xFDF
  5115                           postinc2	equ	0xFDE
  5116                           postdec2	equ	0xFDD
  5117                           fsr2h	equ	0xFDA
  5118                           fsr2l	equ	0xFD9
  5119                           status	equ	0xFD8
  5120                           
  5121 ;; *************** function _ID *****************
  5122 ;; Defined at:
  5123 ;;		line 290 in file "sort.c"
  5124 ;; Parameters:    Size  Location     Type
  5125 ;;		None
  5126 ;; Auto vars:     Size  Location     Type
  5127 ;;  i               2   61[BANK0 ] int 
  5128 ;;  i               2   68[BANK0 ] int 
  5129 ;;  j               2   76[BANK0 ] int 
  5130 ;;  i               2   59[BANK0 ] int 
  5131 ;;  i               2   57[BANK0 ] int 
  5132 ;;  i               2   63[BANK0 ] int 
  5133 ;;  res             4   70[BANK0 ] int [2]
  5134 ;;  time            1   51[BANK0 ] const unsigned char 
  5135 ;;  res1            2   74[BANK0 ] int 
  5136 ;;  res2            2   66[BANK0 ] int 
  5137 ;;  time            1   65[BANK0 ] const unsigned char 
  5138 ;;  n               2   78[BANK0 ] const int 
  5139 ;;  reflectivity    2   49[BANK0 ] int 
  5140 ;;  cond1           2   47[BANK0 ] int 
  5141 ;;  reflectivity    2   45[BANK0 ] int 
  5142 ;; Return value:  Size  Location     Type
  5143 ;;                  1    wreg      void 
  5144 ;; Registers used:
  5145 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5146 ;; Tracked objects:
  5147 ;;		On entry : 0/0
  5148 ;;		On exit  : 0/0
  5149 ;;		Unchanged: 0/0
  5150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5152 ;;      Locals:         0      35       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5153 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5154 ;;      Totals:         0      37       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5155 ;;Total ram usage:       37 bytes
  5156 ;; Hardware stack levels used:    1
  5157 ;; Hardware stack levels required when called:   10
  5158 ;; This function calls:
  5159 ;;		___awdiv
  5160 ;;		___awtoft
  5161 ;;		___ftge
  5162 ;;		_delay_ms
  5163 ;;		_lcdInst
  5164 ;;		_printf
  5165 ;;		_readCOND
  5166 ;;		_readIR
  5167 ;; This function is called by:
  5168 ;;		_sort
  5169 ;; This function uses a non-reentrant model
  5170 ;;
  5171                           
  5172                           	psect	text7
  5173  001192                     __ptext7:
  5174                           	opt stack 0
  5175  001192                     _ID:
  5176                           	opt stack 19
  5177                           
  5178                           ;sort.c: 291: if(f_can_coming_to_ID){
  5179                           
  5180                           ; BSR set to: 0
  5181                           ;incstack = 0
  5182  001192  0101               	movlb	1	; () banked
  5183  001194  5131               	movf	_f_can_coming_to_ID& (0+255),w,b
  5184  001196  0101               	movlb	1	; () banked
  5185  001198  1132               	iorwf	(_f_can_coming_to_ID+1)& (0+255),w,b
  5186  00119A  B4D8               	btfsc	status,2,c
  5187  00119C  0012               	return	
  5188                           
  5189                           ; BSR set to: 1
  5190                           ;sort.c: 293: _delay((unsigned long)((750)*(32000000/4000.0)));
  5191  00119E  0E1F               	movlw	31
  5192  0011A0  0100               	movlb	0	; () banked
  5193  0011A2  6FAC               	movwf	(??_ID+1)& (0+255),b
  5194  0011A4  0E71               	movlw	113
  5195  0011A6  0100               	movlb	0	; () banked
  5196  0011A8  6FAB               	movwf	??_ID& (0+255),b
  5197  0011AA  0E1E               	movlw	30
  5198  0011AC                     u11247:
  5199  0011AC  2EE8               	decfsz	wreg,f,c
  5200  0011AE  D7FE               	bra	u11247
  5201  0011B0  2FAB               	decfsz	??_ID& (0+255),f,b
  5202  0011B2  D7FC               	bra	u11247
  5203  0011B4  2FAC               	decfsz	(??_ID+1)& (0+255),f,b
  5204  0011B6  D7FA               	bra	u11247
  5205  0011B8  F000               	nop	
  5206                           
  5207                           ;sort.c: 295: f_arm_position = 0;
  5208  0011BA  0E00               	movlw	0
  5209  0011BC  0100               	movlb	0	; () banked
  5210  0011BE  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  5211  0011C0  0E00               	movlw	0
  5212  0011C2  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
  5213                           
  5214                           ; BSR set to: 0
  5215                           ;sort.c: 297: if(sensor_outputs[0]){
  5216  0011C4  0100               	movlb	0	; () banked
  5217  0011C6  51DA               	movf	_sensor_outputs& (0+255),w,b
  5218  0011C8  0100               	movlb	0	; () banked
  5219  0011CA  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5220  0011CC  B4D8               	btfsc	status,2,c
  5221  0011CE  D031               	goto	l8364
  5222                           
  5223                           ; BSR set to: 0
  5224                           ;sort.c: 299: readIR(3);
  5225  0011D0  0E00               	movlw	0
  5226  0011D2  0100               	movlb	0	; () banked
  5227  0011D4  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  5228  0011D6  0E03               	movlw	3
  5229  0011D8  6F82               	movwf	readIR@ana_port& (0+255),b
  5230  0011DA  EC9E  F028         	call	_readIR	;wreg free
  5231                           
  5232                           ;sort.c: 300: sensor_outputs[1] = IR_signal;
  5233  0011DE  C0E2  F0DC         	movff	_IR_signal,_sensor_outputs+2
  5234  0011E2  C0E3  F0DD         	movff	_IR_signal+1,_sensor_outputs+3
  5235                           
  5236                           ;sort.c: 301: _delay((unsigned long)((10)*(32000000/4000.0)));
  5237  0011E6  0E68               	movlw	104
  5238  0011E8  0100               	movlb	0	; () banked
  5239  0011EA  6FAB               	movwf	??_ID& (0+255),b
  5240  0011EC  0EE4               	movlw	228
  5241  0011EE                     u11257:
  5242  0011EE  2EE8               	decfsz	wreg,f,c
  5243  0011F0  D7FE               	bra	u11257
  5244  0011F2  2FAB               	decfsz	??_ID& (0+255),f,b
  5245  0011F4  D7FC               	bra	u11257
  5246  0011F6  F000               	nop	
  5247                           
  5248                           ;sort.c: 302: readIR(3);
  5249  0011F8  0E00               	movlw	0
  5250  0011FA  0100               	movlb	0	; () banked
  5251  0011FC  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  5252  0011FE  0E03               	movlw	3
  5253  001200  6F82               	movwf	readIR@ana_port& (0+255),b
  5254  001202  EC9E  F028         	call	_readIR	;wreg free
  5255                           
  5256                           ;sort.c: 303: sensor_outputs[1] = sensor_outputs[1] || IR_signal;
  5257  001206  0E01               	movlw	1
  5258  001208  0100               	movlb	0	; () banked
  5259  00120A  6FB4               	movwf	_ID$1143& (0+255),b
  5260                           
  5261                           ; BSR set to: 0
  5262  00120C  0100               	movlb	0	; () banked
  5263  00120E  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5264  001210  0100               	movlb	0	; () banked
  5265  001212  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5266  001214  A4D8               	btfss	status,2,c
  5267  001216  D009               	goto	l8362
  5268                           
  5269                           ; BSR set to: 0
  5270  001218  0100               	movlb	0	; () banked
  5271  00121A  51E2               	movf	_IR_signal& (0+255),w,b
  5272  00121C  0100               	movlb	0	; () banked
  5273  00121E  11E3               	iorwf	(_IR_signal+1)& (0+255),w,b
  5274  001220  A4D8               	btfss	status,2,c
  5275  001222  D003               	goto	l8362
  5276                           
  5277                           ; BSR set to: 0
  5278  001224  0E00               	movlw	0
  5279  001226  0100               	movlb	0	; () banked
  5280  001228  6FB4               	movwf	_ID$1143& (0+255),b
  5281  00122A                     l8362:
  5282                           
  5283                           ; BSR set to: 0
  5284  00122A  C0B4  F0DC         	movff	_ID$1143,_sensor_outputs+2
  5285  00122E  0100               	movlb	0	; () banked
  5286  001230  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  5287  001232                     l8364:
  5288                           
  5289                           ; BSR set to: 0
  5290                           ;sort.c: 304: }
  5291                           ;sort.c: 305: int reflectivity1 = IR_res;
  5292  001232  C0E0  F0AD         	movff	_IR_res,ID@reflectivity1
  5293  001236  C0E1  F0AE         	movff	_IR_res+1,ID@reflectivity1+1
  5294                           
  5295                           ; BSR set to: 0
  5296                           ;sort.c: 307: LATCbits.LATC7 = 1;
  5297  00123A  8E8B               	bsf	3979,7,c	;volatile
  5298                           
  5299                           ;sort.c: 310: const int n = 10;
  5300  00123C  0E00               	movlw	0
  5301  00123E  0100               	movlb	0	; () banked
  5302  001240  6FCF               	movwf	(ID@n+1)& (0+255),b
  5303  001242  0E0A               	movlw	10
  5304  001244  6FCE               	movwf	ID@n& (0+255),b
  5305                           
  5306                           ; BSR set to: 0
  5307                           ;sort.c: 312: if(!sensor_outputs[0]){
  5308  001246  0100               	movlb	0	; () banked
  5309  001248  51DA               	movf	_sensor_outputs& (0+255),w,b
  5310  00124A  0100               	movlb	0	; () banked
  5311  00124C  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5312  00124E  A4D8               	btfss	status,2,c
  5313  001250  D0E3               	goto	l8420
  5314                           
  5315                           ; BSR set to: 0
  5316                           ;sort.c: 313: const unsigned char time = (600 / n);
  5317  001252  0E02               	movlw	2
  5318  001254  0100               	movlb	0	; () banked
  5319  001256  6F87               	movwf	(___awdiv@dividend+1)& (0+255),b
  5320  001258  0E58               	movlw	88
  5321  00125A  6F86               	movwf	___awdiv@dividend& (0+255),b
  5322  00125C  C0CE  F088         	movff	ID@n,___awdiv@divisor
  5323  001260  C0CF  F089         	movff	ID@n+1,___awdiv@divisor+1
  5324  001264  EC3B  F027         	call	___awdiv	;wreg free
  5325  001268  0100               	movlb	0	; () banked
  5326  00126A  5186               	movf	?___awdiv& (0+255),w,b
  5327  00126C  0100               	movlb	0	; () banked
  5328  00126E  6FC1               	movwf	ID@time& (0+255),b
  5329                           
  5330                           ; BSR set to: 0
  5331                           ;sort.c: 314: int res1 = 0;
  5332  001270  0E00               	movlw	0
  5333  001272  0100               	movlb	0	; () banked
  5334  001274  6FCB               	movwf	(ID@res1+1)& (0+255),b
  5335  001276  0E00               	movlw	0
  5336  001278  6FCA               	movwf	ID@res1& (0+255),b
  5337                           
  5338                           ; BSR set to: 0
  5339                           ;sort.c: 315: int res2 = 0;
  5340  00127A  0E00               	movlw	0
  5341  00127C  0100               	movlb	0	; () banked
  5342  00127E  6FC3               	movwf	(ID@res2+1)& (0+255),b
  5343  001280  0E00               	movlw	0
  5344  001282  6FC2               	movwf	ID@res2& (0+255),b
  5345                           
  5346                           ; BSR set to: 0
  5347                           ;sort.c: 316: for(int i = 0; i<n; i++){
  5348  001284  0E00               	movlw	0
  5349  001286  0100               	movlb	0	; () banked
  5350  001288  6FBA               	movwf	(ID@i+1)& (0+255),b
  5351  00128A  0E00               	movlw	0
  5352  00128C  6FB9               	movwf	ID@i& (0+255),b
  5353  00128E                     l8378:
  5354                           
  5355                           ; BSR set to: 0
  5356  00128E  0100               	movlb	0	; () banked
  5357  001290  51CE               	movf	ID@n& (0+255),w,b
  5358  001292  0100               	movlb	0	; () banked
  5359  001294  5DB9               	subwf	ID@i& (0+255),w,b
  5360  001296  0100               	movlb	0	; () banked
  5361  001298  51BA               	movf	(ID@i+1)& (0+255),w,b
  5362  00129A  0A80               	xorlw	128
  5363  00129C  0100               	movlb	0	; () banked
  5364  00129E  6FAB               	movwf	??_ID& (0+255),b
  5365  0012A0  0100               	movlb	0	; () banked
  5366  0012A2  51CF               	movf	(ID@n+1)& (0+255),w,b
  5367  0012A4  0A80               	xorlw	128
  5368  0012A6  0100               	movlb	0	; () banked
  5369  0012A8  59AB               	subwfb	??_ID& (0+255),w,b
  5370  0012AA  B0D8               	btfsc	status,0,c
  5371  0012AC  D012               	goto	l870
  5372                           
  5373                           ; BSR set to: 0
  5374                           ;sort.c: 317: delay_ms(time);
  5375                           
  5376                           ; BSR set to: 0
  5377                           
  5378                           ; BSR set to: 0
  5379  0012AE  0100               	movlb	0	; () banked
  5380  0012B0  51C1               	movf	ID@time& (0+255),w,b
  5381  0012B2  EC93  F02F         	call	_delay_ms
  5382                           
  5383                           ;sort.c: 318: readCOND();
  5384  0012B6  ECC6  F02C         	call	_readCOND	;wreg free
  5385                           
  5386                           ;sort.c: 319: res1 += COND_signal;
  5387  0012BA  0100               	movlb	0	; () banked
  5388  0012BC  51DE               	movf	_COND_signal& (0+255),w,b
  5389  0012BE  0100               	movlb	0	; () banked
  5390  0012C0  27CA               	addwf	ID@res1& (0+255),f,b
  5391  0012C2  0100               	movlb	0	; () banked
  5392  0012C4  51DF               	movf	(_COND_signal+1)& (0+255),w,b
  5393  0012C6  0100               	movlb	0	; () banked
  5394  0012C8  23CB               	addwfc	(ID@res1+1)& (0+255),f,b
  5395                           
  5396                           ; BSR set to: 0
  5397  0012CA  0100               	movlb	0	; () banked
  5398  0012CC  4BB9               	infsnz	ID@i& (0+255),f,b
  5399  0012CE  2BBA               	incf	(ID@i+1)& (0+255),f,b
  5400  0012D0  D7DE               	goto	l8378
  5401  0012D2                     l870:
  5402                           
  5403                           ; BSR set to: 0
  5404                           ;sort.c: 320: }
  5405                           ;sort.c: 321: LATCbits.LATC7 = 0;
  5406  0012D2  9E8B               	bcf	3979,7,c	;volatile
  5407                           
  5408                           ; BSR set to: 0
  5409                           ;sort.c: 322: _delay((unsigned long)((200)*(32000000/4000.0)));
  5410  0012D4  0E09               	movlw	9
  5411  0012D6  0100               	movlb	0	; () banked
  5412  0012D8  6FAC               	movwf	(??_ID+1)& (0+255),b
  5413  0012DA  0E1E               	movlw	30
  5414  0012DC  0100               	movlb	0	; () banked
  5415  0012DE  6FAB               	movwf	??_ID& (0+255),b
  5416  0012E0  0EE4               	movlw	228
  5417  0012E2                     u11267:
  5418  0012E2  2EE8               	decfsz	wreg,f,c
  5419  0012E4  D7FE               	bra	u11267
  5420  0012E6  2FAB               	decfsz	??_ID& (0+255),f,b
  5421  0012E8  D7FC               	bra	u11267
  5422  0012EA  2FAC               	decfsz	(??_ID+1)& (0+255),f,b
  5423  0012EC  D7FA               	bra	u11267
  5424  0012EE  F000               	nop	
  5425                           
  5426                           ;sort.c: 323: LATCbits.LATC7 = 1;
  5427  0012F0  8E8B               	bsf	3979,7,c	;volatile
  5428                           
  5429                           ;sort.c: 324: for(int i = 0; i<n; i++){
  5430  0012F2  0E00               	movlw	0
  5431  0012F4  0100               	movlb	0	; () banked
  5432  0012F6  6FBC               	movwf	(ID@i_1151+1)& (0+255),b
  5433  0012F8  0E00               	movlw	0
  5434  0012FA  6FBB               	movwf	ID@i_1151& (0+255),b
  5435  0012FC                     l8396:
  5436                           
  5437                           ; BSR set to: 0
  5438  0012FC  0100               	movlb	0	; () banked
  5439  0012FE  51CE               	movf	ID@n& (0+255),w,b
  5440  001300  0100               	movlb	0	; () banked
  5441  001302  5DBB               	subwf	ID@i_1151& (0+255),w,b
  5442  001304  0100               	movlb	0	; () banked
  5443  001306  51BC               	movf	(ID@i_1151+1)& (0+255),w,b
  5444  001308  0A80               	xorlw	128
  5445  00130A  0100               	movlb	0	; () banked
  5446  00130C  6FAB               	movwf	??_ID& (0+255),b
  5447  00130E  0100               	movlb	0	; () banked
  5448  001310  51CF               	movf	(ID@n+1)& (0+255),w,b
  5449  001312  0A80               	xorlw	128
  5450  001314  0100               	movlb	0	; () banked
  5451  001316  59AB               	subwfb	??_ID& (0+255),w,b
  5452  001318  B0D8               	btfsc	status,0,c
  5453  00131A  D012               	goto	l872
  5454                           
  5455                           ; BSR set to: 0
  5456                           ;sort.c: 325: delay_ms(time);
  5457                           
  5458                           ; BSR set to: 0
  5459                           
  5460                           ; BSR set to: 0
  5461  00131C  0100               	movlb	0	; () banked
  5462  00131E  51C1               	movf	ID@time& (0+255),w,b
  5463  001320  EC93  F02F         	call	_delay_ms
  5464                           
  5465                           ;sort.c: 326: readCOND();
  5466  001324  ECC6  F02C         	call	_readCOND	;wreg free
  5467                           
  5468                           ;sort.c: 327: res2 += COND_signal;
  5469  001328  0100               	movlb	0	; () banked
  5470  00132A  51DE               	movf	_COND_signal& (0+255),w,b
  5471  00132C  0100               	movlb	0	; () banked
  5472  00132E  27C2               	addwf	ID@res2& (0+255),f,b
  5473  001330  0100               	movlb	0	; () banked
  5474  001332  51DF               	movf	(_COND_signal+1)& (0+255),w,b
  5475  001334  0100               	movlb	0	; () banked
  5476  001336  23C3               	addwfc	(ID@res2+1)& (0+255),f,b
  5477                           
  5478                           ; BSR set to: 0
  5479  001338  0100               	movlb	0	; () banked
  5480  00133A  4BBB               	infsnz	ID@i_1151& (0+255),f,b
  5481  00133C  2BBC               	incf	(ID@i_1151+1)& (0+255),f,b
  5482  00133E  D7DE               	goto	l8396
  5483  001340                     l872:
  5484                           
  5485                           ; BSR set to: 0
  5486                           ;sort.c: 328: }
  5487                           ;sort.c: 329: LATCbits.LATC7 = 0;
  5488  001340  9E8B               	bcf	3979,7,c	;volatile
  5489                           
  5490                           ; BSR set to: 0
  5491                           ;sort.c: 330: res1 = ((res1 / n) > 0.3) ? 1 : 0;
  5492  001342  0E9A               	movlw	154
  5493  001344  0100               	movlb	0	; () banked
  5494  001346  6F92               	movwf	___ftge@ff1& (0+255),b
  5495  001348  0E99               	movlw	153
  5496  00134A  0100               	movlb	0	; () banked
  5497  00134C  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  5498  00134E  0E3E               	movlw	62
  5499  001350  0100               	movlb	0	; () banked
  5500  001352  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  5501  001354  C0CE  F088         	movff	ID@n,___awdiv@divisor
  5502  001358  C0CF  F089         	movff	ID@n+1,___awdiv@divisor+1
  5503  00135C  C0CA  F086         	movff	ID@res1,___awdiv@dividend
  5504  001360  C0CB  F087         	movff	ID@res1+1,___awdiv@dividend+1
  5505  001364  EC3B  F027         	call	___awdiv	;wreg free
  5506  001368  C086  F08E         	movff	?___awdiv,___awtoft@c
  5507  00136C  C087  F08F         	movff	?___awdiv+1,___awtoft@c+1
  5508  001370  EC35  F02D         	call	___awtoft	;wreg free
  5509  001374  C08E  F095         	movff	?___awtoft,___ftge@ff2
  5510  001378  C08F  F096         	movff	?___awtoft+1,___ftge@ff2+1
  5511  00137C  C090  F097         	movff	?___awtoft+2,___ftge@ff2+2
  5512  001380  ECD7  F026         	call	___ftge	;wreg free
  5513  001384  0100               	movlb	0	; () banked
  5514  001386  B0D8               	btfsc	status,0,c
  5515  001388  D002               	goto	u7510
  5516  00138A  0E01               	movlw	1
  5517  00138C  D001               	goto	u7520
  5518  00138E                     u7510:
  5519  00138E  0E00               	movlw	0
  5520  001390                     u7520:
  5521  001390  0100               	movlb	0	; () banked
  5522  001392  6FCA               	movwf	ID@res1& (0+255),b
  5523  001394  6BCB               	clrf	(ID@res1+1)& (0+255),b
  5524                           
  5525                           ;sort.c: 331: res2 = ((res2 / n) > 0.3) ? 1 : 0;
  5526  001396  0E9A               	movlw	154
  5527  001398  0100               	movlb	0	; () banked
  5528  00139A  6F92               	movwf	___ftge@ff1& (0+255),b
  5529  00139C  0E99               	movlw	153
  5530  00139E  0100               	movlb	0	; () banked
  5531  0013A0  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  5532  0013A2  0E3E               	movlw	62
  5533  0013A4  0100               	movlb	0	; () banked
  5534  0013A6  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  5535  0013A8  C0CE  F088         	movff	ID@n,___awdiv@divisor
  5536  0013AC  C0CF  F089         	movff	ID@n+1,___awdiv@divisor+1
  5537  0013B0  C0C2  F086         	movff	ID@res2,___awdiv@dividend
  5538  0013B4  C0C3  F087         	movff	ID@res2+1,___awdiv@dividend+1
  5539  0013B8  EC3B  F027         	call	___awdiv	;wreg free
  5540  0013BC  C086  F08E         	movff	?___awdiv,___awtoft@c
  5541  0013C0  C087  F08F         	movff	?___awdiv+1,___awtoft@c+1
  5542  0013C4  EC35  F02D         	call	___awtoft	;wreg free
  5543  0013C8  C08E  F095         	movff	?___awtoft,___ftge@ff2
  5544  0013CC  C08F  F096         	movff	?___awtoft+1,___ftge@ff2+1
  5545  0013D0  C090  F097         	movff	?___awtoft+2,___ftge@ff2+2
  5546  0013D4  ECD7  F026         	call	___ftge	;wreg free
  5547  0013D8  0100               	movlb	0	; () banked
  5548  0013DA  B0D8               	btfsc	status,0,c
  5549  0013DC  D002               	goto	u7530
  5550  0013DE  0E01               	movlw	1
  5551  0013E0  D001               	goto	u7540
  5552  0013E2                     u7530:
  5553  0013E2  0E00               	movlw	0
  5554  0013E4                     u7540:
  5555  0013E4  0100               	movlb	0	; () banked
  5556  0013E6  6FC2               	movwf	ID@res2& (0+255),b
  5557  0013E8  6BC3               	clrf	(ID@res2+1)& (0+255),b
  5558                           
  5559                           ; BSR set to: 0
  5560                           ;sort.c: 334: sensor_outputs[1] = (res1 || res2);
  5561  0013EA  0E01               	movlw	1
  5562  0013EC  0100               	movlb	0	; () banked
  5563  0013EE  6FB5               	movwf	_ID$1152& (0+255),b
  5564                           
  5565                           ; BSR set to: 0
  5566  0013F0  0100               	movlb	0	; () banked
  5567  0013F2  51CA               	movf	ID@res1& (0+255),w,b
  5568  0013F4  0100               	movlb	0	; () banked
  5569  0013F6  11CB               	iorwf	(ID@res1+1)& (0+255),w,b
  5570  0013F8  A4D8               	btfss	status,2,c
  5571  0013FA  D009               	goto	l8418
  5572                           
  5573                           ; BSR set to: 0
  5574  0013FC  0100               	movlb	0	; () banked
  5575  0013FE  51C2               	movf	ID@res2& (0+255),w,b
  5576  001400  0100               	movlb	0	; () banked
  5577  001402  11C3               	iorwf	(ID@res2+1)& (0+255),w,b
  5578  001404  A4D8               	btfss	status,2,c
  5579  001406  D003               	goto	l8418
  5580                           
  5581                           ; BSR set to: 0
  5582  001408  0E00               	movlw	0
  5583  00140A  0100               	movlb	0	; () banked
  5584  00140C  6FB5               	movwf	_ID$1152& (0+255),b
  5585  00140E                     l8418:
  5586                           
  5587                           ; BSR set to: 0
  5588  00140E  C0B5  F0DC         	movff	_ID$1152,_sensor_outputs+2
  5589  001412  0100               	movlb	0	; () banked
  5590  001414  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  5591                           
  5592                           ;sort.c: 335: }
  5593  001416  D0E3               	goto	l875
  5594  001418                     l8420:
  5595                           
  5596                           ; BSR set to: 0
  5597                           ;sort.c: 336: else{
  5598                           ;sort.c: 337: const unsigned char time = (400 / n);
  5599  001418  0E01               	movlw	1
  5600  00141A  0100               	movlb	0	; () banked
  5601  00141C  6F87               	movwf	(___awdiv@dividend+1)& (0+255),b
  5602  00141E  0E90               	movlw	144
  5603  001420  6F86               	movwf	___awdiv@dividend& (0+255),b
  5604  001422  C0CE  F088         	movff	ID@n,___awdiv@divisor
  5605  001426  C0CF  F089         	movff	ID@n+1,___awdiv@divisor+1
  5606  00142A  EC3B  F027         	call	___awdiv	;wreg free
  5607  00142E  0100               	movlb	0	; () banked
  5608  001430  5186               	movf	?___awdiv& (0+255),w,b
  5609  001432  0100               	movlb	0	; () banked
  5610  001434  6FB3               	movwf	ID@time_1153& (0+255),b
  5611                           
  5612                           ; BSR set to: 0
  5613                           ;sort.c: 338: int res[2];
  5614                           ;sort.c: 340: for(int j = 0; j < 2; j++){
  5615  001436  0E00               	movlw	0
  5616  001438  0100               	movlb	0	; () banked
  5617  00143A  6FCD               	movwf	(ID@j+1)& (0+255),b
  5618  00143C  0E00               	movlw	0
  5619  00143E  6FCC               	movwf	ID@j& (0+255),b
  5620                           
  5621                           ; BSR set to: 0
  5622  001440  0100               	movlb	0	; () banked
  5623  001442  BFCD               	btfsc	(ID@j+1)& (0+255),7,b
  5624  001444  D00A               	goto	l876
  5625  001446  0100               	movlb	0	; () banked
  5626  001448  51CD               	movf	(ID@j+1)& (0+255),w,b
  5627  00144A  E106               	bnz	u7570
  5628  00144C  0E02               	movlw	2
  5629  00144E  0100               	movlb	0	; () banked
  5630  001450  5DCC               	subwf	ID@j& (0+255),w,b
  5631  001452  B0D8               	btfsc	status,0,c
  5632  001454  D0C4               	goto	l875
  5633  001456  D001               	goto	l876
  5634  001458                     u7570:
  5635                           
  5636                           ; BSR set to: 0
  5637  001458  D0C2               	goto	l875
  5638  00145A                     l876:
  5639                           
  5640                           ; BSR set to: 0
  5641                           ;sort.c: 341: LATCbits.LATC7 = 1;
  5642  00145A  8E8B               	bsf	3979,7,c	;volatile
  5643                           
  5644                           ; BSR set to: 0
  5645                           ;sort.c: 342: for(int i = 0; i < n; i++){
  5646  00145C  0E00               	movlw	0
  5647  00145E  0100               	movlb	0	; () banked
  5648  001460  6FBE               	movwf	(ID@i_1156+1)& (0+255),b
  5649  001462  0E00               	movlw	0
  5650  001464  6FBD               	movwf	ID@i_1156& (0+255),b
  5651  001466                     l8430:
  5652                           
  5653                           ; BSR set to: 0
  5654  001466  0100               	movlb	0	; () banked
  5655  001468  51CE               	movf	ID@n& (0+255),w,b
  5656  00146A  0100               	movlb	0	; () banked
  5657  00146C  5DBD               	subwf	ID@i_1156& (0+255),w,b
  5658  00146E  0100               	movlb	0	; () banked
  5659  001470  51BE               	movf	(ID@i_1156+1)& (0+255),w,b
  5660  001472  0A80               	xorlw	128
  5661  001474  0100               	movlb	0	; () banked
  5662  001476  6FAB               	movwf	??_ID& (0+255),b
  5663  001478  0100               	movlb	0	; () banked
  5664  00147A  51CF               	movf	(ID@n+1)& (0+255),w,b
  5665  00147C  0A80               	xorlw	128
  5666  00147E  0100               	movlb	0	; () banked
  5667  001480  59AB               	subwfb	??_ID& (0+255),w,b
  5668  001482  B0D8               	btfsc	status,0,c
  5669  001484  D01A               	goto	l879
  5670                           
  5671                           ; BSR set to: 0
  5672                           ;sort.c: 343: delay_ms(time);
  5673                           
  5674                           ; BSR set to: 0
  5675                           
  5676                           ; BSR set to: 0
  5677  001486  0100               	movlb	0	; () banked
  5678  001488  51B3               	movf	ID@time_1153& (0+255),w,b
  5679  00148A  EC93  F02F         	call	_delay_ms
  5680                           
  5681                           ;sort.c: 344: readCOND();
  5682  00148E  ECC6  F02C         	call	_readCOND	;wreg free
  5683                           
  5684                           ;sort.c: 345: res[j] += COND_signal;
  5685  001492  90D8               	bcf	status,0,c
  5686  001494  0100               	movlb	0	; () banked
  5687  001496  35CC               	rlcf	ID@j& (0+255),w,b
  5688  001498  6ED9               	movwf	fsr2l,c
  5689  00149A  0100               	movlb	0	; () banked
  5690  00149C  35CD               	rlcf	(ID@j+1)& (0+255),w,b
  5691  00149E  6EDA               	movwf	fsr2h,c
  5692  0014A0  0EC6               	movlw	low ID@res
  5693  0014A2  26D9               	addwf	fsr2l,f,c
  5694  0014A4  0E00               	movlw	high ID@res
  5695  0014A6  22DA               	addwfc	fsr2h,f,c
  5696  0014A8  0100               	movlb	0	; () banked
  5697  0014AA  51DE               	movf	_COND_signal& (0+255),w,b
  5698  0014AC  26DE               	addwf	postinc2,f,c
  5699  0014AE  51DF               	movf	(_COND_signal+1)& (0+255),w,b
  5700  0014B0  22DD               	addwfc	postdec2,f,c
  5701                           
  5702                           ; BSR set to: 0
  5703  0014B2  0100               	movlb	0	; () banked
  5704  0014B4  4BBD               	infsnz	ID@i_1156& (0+255),f,b
  5705  0014B6  2BBE               	incf	(ID@i_1156+1)& (0+255),f,b
  5706  0014B8  D7D6               	goto	l8430
  5707  0014BA                     l879:
  5708                           
  5709                           ; BSR set to: 0
  5710                           ;sort.c: 346: }
  5711                           ;sort.c: 347: LATCbits.LATC7 = 0;
  5712  0014BA  9E8B               	bcf	3979,7,c	;volatile
  5713                           
  5714                           ; BSR set to: 0
  5715                           ;sort.c: 349: _delay((unsigned long)((200)*(32000000/4000.0)));
  5716  0014BC  0E09               	movlw	9
  5717  0014BE  0100               	movlb	0	; () banked
  5718  0014C0  6FAC               	movwf	(??_ID+1)& (0+255),b
  5719  0014C2  0E1E               	movlw	30
  5720  0014C4  0100               	movlb	0	; () banked
  5721  0014C6  6FAB               	movwf	??_ID& (0+255),b
  5722  0014C8  0EE4               	movlw	228
  5723  0014CA                     u11277:
  5724  0014CA  2EE8               	decfsz	wreg,f,c
  5725  0014CC  D7FE               	bra	u11277
  5726  0014CE  2FAB               	decfsz	??_ID& (0+255),f,b
  5727  0014D0  D7FC               	bra	u11277
  5728  0014D2  2FAC               	decfsz	(??_ID+1)& (0+255),f,b
  5729  0014D4  D7FA               	bra	u11277
  5730  0014D6  F000               	nop	
  5731                           
  5732                           ;sort.c: 352: res[j] = ((res[j] / n) > 0.3) ? 1 : 0;
  5733  0014D8  0E9A               	movlw	154
  5734  0014DA  0100               	movlb	0	; () banked
  5735  0014DC  6F92               	movwf	___ftge@ff1& (0+255),b
  5736  0014DE  0E99               	movlw	153
  5737  0014E0  0100               	movlb	0	; () banked
  5738  0014E2  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  5739  0014E4  0E3E               	movlw	62
  5740  0014E6  0100               	movlb	0	; () banked
  5741  0014E8  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  5742  0014EA  C0CE  F088         	movff	ID@n,___awdiv@divisor
  5743  0014EE  C0CF  F089         	movff	ID@n+1,___awdiv@divisor+1
  5744  0014F2  90D8               	bcf	status,0,c
  5745  0014F4  0100               	movlb	0	; () banked
  5746  0014F6  35CC               	rlcf	ID@j& (0+255),w,b
  5747  0014F8  6ED9               	movwf	fsr2l,c
  5748  0014FA  0100               	movlb	0	; () banked
  5749  0014FC  35CD               	rlcf	(ID@j+1)& (0+255),w,b
  5750  0014FE  6EDA               	movwf	fsr2h,c
  5751  001500  0EC6               	movlw	low ID@res
  5752  001502  26D9               	addwf	fsr2l,f,c
  5753  001504  0E00               	movlw	high ID@res
  5754  001506  22DA               	addwfc	fsr2h,f,c
  5755  001508  CFDE F086          	movff	postinc2,___awdiv@dividend
  5756  00150C  CFDD F087          	movff	postdec2,___awdiv@dividend+1
  5757  001510  EC3B  F027         	call	___awdiv	;wreg free
  5758  001514  C086  F08E         	movff	?___awdiv,___awtoft@c
  5759  001518  C087  F08F         	movff	?___awdiv+1,___awtoft@c+1
  5760  00151C  EC35  F02D         	call	___awtoft	;wreg free
  5761  001520  C08E  F095         	movff	?___awtoft,___ftge@ff2
  5762  001524  C08F  F096         	movff	?___awtoft+1,___ftge@ff2+1
  5763  001528  C090  F097         	movff	?___awtoft+2,___ftge@ff2+2
  5764  00152C  ECD7  F026         	call	___ftge	;wreg free
  5765  001530  0100               	movlb	0	; () banked
  5766  001532  B0D8               	btfsc	status,0,c
  5767  001534  D002               	goto	u7600
  5768  001536  0E01               	movlw	1
  5769  001538  D001               	goto	u7610
  5770  00153A                     u7600:
  5771  00153A  0E00               	movlw	0
  5772  00153C                     u7610:
  5773  00153C  0100               	movlb	0	; () banked
  5774  00153E  6FAB               	movwf	??_ID& (0+255),b
  5775  001540  6BAC               	clrf	(??_ID+1)& (0+255),b
  5776  001542  90D8               	bcf	status,0,c
  5777  001544  0100               	movlb	0	; () banked
  5778  001546  35CC               	rlcf	ID@j& (0+255),w,b
  5779  001548  6ED9               	movwf	fsr2l,c
  5780  00154A  0100               	movlb	0	; () banked
  5781  00154C  35CD               	rlcf	(ID@j+1)& (0+255),w,b
  5782  00154E  6EDA               	movwf	fsr2h,c
  5783  001550  0EC6               	movlw	low ID@res
  5784  001552  26D9               	addwf	fsr2l,f,c
  5785  001554  0E00               	movlw	high ID@res
  5786  001556  22DA               	addwfc	fsr2h,f,c
  5787  001558  C0AB  FFDE         	movff	??_ID,postinc2
  5788  00155C  C0AC  FFDD         	movff	??_ID+1,postdec2
  5789                           
  5790                           ; BSR set to: 0
  5791                           ;sort.c: 353: if(j==0){
  5792  001560  0100               	movlb	0	; () banked
  5793  001562  51CC               	movf	ID@j& (0+255),w,b
  5794  001564  0100               	movlb	0	; () banked
  5795  001566  11CD               	iorwf	(ID@j+1)& (0+255),w,b
  5796  001568  A4D8               	btfss	status,2,c
  5797  00156A  D010               	goto	l8450
  5798                           
  5799                           ; BSR set to: 0
  5800                           ;sort.c: 354: sensor_outputs[1] = res[j];
  5801  00156C  90D8               	bcf	status,0,c
  5802  00156E  0100               	movlb	0	; () banked
  5803  001570  35CC               	rlcf	ID@j& (0+255),w,b
  5804  001572  6ED9               	movwf	fsr2l,c
  5805  001574  0100               	movlb	0	; () banked
  5806  001576  35CD               	rlcf	(ID@j+1)& (0+255),w,b
  5807  001578  6EDA               	movwf	fsr2h,c
  5808  00157A  0EC6               	movlw	low ID@res
  5809  00157C  26D9               	addwf	fsr2l,f,c
  5810  00157E  0E00               	movlw	high ID@res
  5811  001580  22DA               	addwfc	fsr2h,f,c
  5812  001582  CFDE F0DC          	movff	postinc2,_sensor_outputs+2
  5813  001586  CFDD F0DD          	movff	postdec2,_sensor_outputs+3
  5814                           
  5815                           ;sort.c: 355: }
  5816  00158A  D01F               	goto	l8460
  5817  00158C                     l8450:
  5818                           
  5819                           ; BSR set to: 0
  5820                           ;sort.c: 356: else{
  5821                           ;sort.c: 357: sensor_outputs[1] = sensor_outputs[1] || res[j];
  5822  00158C  0E01               	movlw	1
  5823  00158E  0100               	movlb	0	; () banked
  5824  001590  6FB6               	movwf	_ID$1157& (0+255),b
  5825                           
  5826                           ; BSR set to: 0
  5827  001592  0100               	movlb	0	; () banked
  5828  001594  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5829  001596  0100               	movlb	0	; () banked
  5830  001598  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5831  00159A  A4D8               	btfss	status,2,c
  5832  00159C  D012               	goto	l8458
  5833                           
  5834                           ; BSR set to: 0
  5835  00159E  90D8               	bcf	status,0,c
  5836  0015A0  0100               	movlb	0	; () banked
  5837  0015A2  35CC               	rlcf	ID@j& (0+255),w,b
  5838  0015A4  6ED9               	movwf	fsr2l,c
  5839  0015A6  0100               	movlb	0	; () banked
  5840  0015A8  35CD               	rlcf	(ID@j+1)& (0+255),w,b
  5841  0015AA  6EDA               	movwf	fsr2h,c
  5842  0015AC  0EC6               	movlw	low ID@res
  5843  0015AE  26D9               	addwf	fsr2l,f,c
  5844  0015B0  0E00               	movlw	high ID@res
  5845  0015B2  22DA               	addwfc	fsr2h,f,c
  5846  0015B4  50DE               	movf	postinc2,w,c
  5847  0015B6  10DE               	iorwf	postinc2,w,c
  5848  0015B8  A4D8               	btfss	status,2,c
  5849  0015BA  D003               	goto	l8458
  5850                           
  5851                           ; BSR set to: 0
  5852  0015BC  0E00               	movlw	0
  5853  0015BE  0100               	movlb	0	; () banked
  5854  0015C0  6FB6               	movwf	_ID$1157& (0+255),b
  5855  0015C2                     l8458:
  5856                           
  5857                           ; BSR set to: 0
  5858  0015C2  C0B6  F0DC         	movff	_ID$1157,_sensor_outputs+2
  5859  0015C6  0100               	movlb	0	; () banked
  5860  0015C8  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  5861  0015CA                     l8460:
  5862                           
  5863                           ; BSR set to: 0
  5864  0015CA  0100               	movlb	0	; () banked
  5865  0015CC  4BCC               	infsnz	ID@j& (0+255),f,b
  5866  0015CE  2BCD               	incf	(ID@j+1)& (0+255),f,b
  5867                           
  5868                           ; BSR set to: 0
  5869  0015D0  0100               	movlb	0	; () banked
  5870  0015D2  BFCD               	btfsc	(ID@j+1)& (0+255),7,b
  5871  0015D4  D742               	goto	l876
  5872  0015D6  0100               	movlb	0	; () banked
  5873  0015D8  51CD               	movf	(ID@j+1)& (0+255),w,b
  5874  0015DA  E101               	bnz	l875
  5875  0015DC  D737               	goto	L5
  5876  0015DE                     l875:
  5877                           
  5878                           ; BSR set to: 0
  5879                           ;sort.c: 358: }
  5880                           ;sort.c: 359: }
  5881                           ;sort.c: 360: }
  5882                           ;sort.c: 361: int cond1 = sensor_outputs[1];
  5883  0015DE  C0DC  F0AF         	movff	_sensor_outputs+2,ID@cond1
  5884  0015E2  C0DD  F0B0         	movff	_sensor_outputs+3,ID@cond1+1
  5885                           
  5886                           ; BSR set to: 0
  5887                           ;sort.c: 364: if(sensor_outputs[0]){
  5888  0015E6  0100               	movlb	0	; () banked
  5889  0015E8  51DA               	movf	_sensor_outputs& (0+255),w,b
  5890  0015EA  0100               	movlb	0	; () banked
  5891  0015EC  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5892  0015EE  B4D8               	btfsc	status,2,c
  5893  0015F0  D043               	goto	l8492
  5894                           
  5895                           ; BSR set to: 0
  5896                           ;sort.c: 366: readIR(3);
  5897  0015F2  0E00               	movlw	0
  5898  0015F4  0100               	movlb	0	; () banked
  5899  0015F6  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  5900  0015F8  0E03               	movlw	3
  5901  0015FA  6F82               	movwf	readIR@ana_port& (0+255),b
  5902  0015FC  EC9E  F028         	call	_readIR	;wreg free
  5903                           
  5904                           ;sort.c: 367: sensor_outputs[1] = sensor_outputs[1] || IR_signal;
  5905  001600  0E01               	movlw	1
  5906  001602  0100               	movlb	0	; () banked
  5907  001604  6FB7               	movwf	_ID$1159& (0+255),b
  5908                           
  5909                           ; BSR set to: 0
  5910  001606  0100               	movlb	0	; () banked
  5911  001608  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5912  00160A  0100               	movlb	0	; () banked
  5913  00160C  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5914  00160E  A4D8               	btfss	status,2,c
  5915  001610  D009               	goto	l8476
  5916                           
  5917                           ; BSR set to: 0
  5918  001612  0100               	movlb	0	; () banked
  5919  001614  51E2               	movf	_IR_signal& (0+255),w,b
  5920  001616  0100               	movlb	0	; () banked
  5921  001618  11E3               	iorwf	(_IR_signal+1)& (0+255),w,b
  5922  00161A  A4D8               	btfss	status,2,c
  5923  00161C  D003               	goto	l8476
  5924                           
  5925                           ; BSR set to: 0
  5926  00161E  0E00               	movlw	0
  5927  001620  0100               	movlb	0	; () banked
  5928  001622  6FB7               	movwf	_ID$1159& (0+255),b
  5929  001624                     l8476:
  5930                           
  5931                           ; BSR set to: 0
  5932  001624  C0B7  F0DC         	movff	_ID$1159,_sensor_outputs+2
  5933  001628  0100               	movlb	0	; () banked
  5934  00162A  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  5935                           
  5936                           ; BSR set to: 0
  5937                           ;sort.c: 368: _delay((unsigned long)((10)*(32000000/4000.0)));
  5938  00162C  0E68               	movlw	104
  5939  00162E  0100               	movlb	0	; () banked
  5940  001630  6FAB               	movwf	??_ID& (0+255),b
  5941  001632  0EE4               	movlw	228
  5942  001634                     u11287:
  5943  001634  2EE8               	decfsz	wreg,f,c
  5944  001636  D7FE               	bra	u11287
  5945  001638  2FAB               	decfsz	??_ID& (0+255),f,b
  5946  00163A  D7FC               	bra	u11287
  5947  00163C  F000               	nop	
  5948                           
  5949                           ;sort.c: 369: readIR(3);
  5950  00163E  0E00               	movlw	0
  5951  001640  0100               	movlb	0	; () banked
  5952  001642  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  5953  001644  0E03               	movlw	3
  5954  001646  6F82               	movwf	readIR@ana_port& (0+255),b
  5955  001648  EC9E  F028         	call	_readIR	;wreg free
  5956                           
  5957                           ;sort.c: 370: sensor_outputs[1] = sensor_outputs[1] || IR_signal;
  5958  00164C  0E01               	movlw	1
  5959  00164E  0100               	movlb	0	; () banked
  5960  001650  6FB8               	movwf	_ID$1160& (0+255),b
  5961                           
  5962                           ; BSR set to: 0
  5963  001652  0100               	movlb	0	; () banked
  5964  001654  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5965  001656  0100               	movlb	0	; () banked
  5966  001658  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5967  00165A  A4D8               	btfss	status,2,c
  5968  00165C  D009               	goto	l8490
  5969                           
  5970                           ; BSR set to: 0
  5971  00165E  0100               	movlb	0	; () banked
  5972  001660  51E2               	movf	_IR_signal& (0+255),w,b
  5973  001662  0100               	movlb	0	; () banked
  5974  001664  11E3               	iorwf	(_IR_signal+1)& (0+255),w,b
  5975  001666  A4D8               	btfss	status,2,c
  5976  001668  D003               	goto	l8490
  5977                           
  5978                           ; BSR set to: 0
  5979  00166A  0E00               	movlw	0
  5980  00166C  0100               	movlb	0	; () banked
  5981  00166E  6FB8               	movwf	_ID$1160& (0+255),b
  5982  001670                     l8490:
  5983                           
  5984                           ; BSR set to: 0
  5985  001670  C0B8  F0DC         	movff	_ID$1160,_sensor_outputs+2
  5986  001674  0100               	movlb	0	; () banked
  5987  001676  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  5988  001678                     l8492:
  5989                           
  5990                           ; BSR set to: 0
  5991                           ;sort.c: 371: }
  5992                           ;sort.c: 372: int reflectivity2 = IR_res;
  5993  001678  C0E0  F0B1         	movff	_IR_res,ID@reflectivity2
  5994  00167C  C0E1  F0B2         	movff	_IR_res+1,ID@reflectivity2+1
  5995                           
  5996                           ; BSR set to: 0
  5997                           ;sort.c: 374: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  5998  001680  0E01               	movlw	1
  5999  001682  EC7D  F030         	call	_lcdInst
  6000  001686  0E68               	movlw	104
  6001  001688  0100               	movlb	0	; () banked
  6002  00168A  6FAB               	movwf	??_ID& (0+255),b
  6003  00168C  0EE4               	movlw	228
  6004  00168E                     u11297:
  6005  00168E  2EE8               	decfsz	wreg,f,c
  6006  001690  D7FE               	bra	u11297
  6007  001692  2FAB               	decfsz	??_ID& (0+255),f,b
  6008  001694  D7FC               	bra	u11297
  6009  001696  F000               	nop	
  6010  001698  0E80               	movlw	128
  6011  00169A  EC7D  F030         	call	_lcdInst
  6012                           
  6013                           ;sort.c: 375: printf("r1: %d|r2: %d", reflectivity1, reflectivity2);
  6014  00169E  0E32               	movlw	low STR_64
  6015  0016A0  0100               	movlb	0	; () banked
  6016  0016A2  6F8E               	movwf	printf@f& (0+255),b
  6017  0016A4  0EFF               	movlw	high STR_64
  6018  0016A6  0100               	movlb	0	; () banked
  6019  0016A8  6F8F               	movwf	(printf@f+1)& (0+255),b
  6020  0016AA  C0AD  F090         	movff	ID@reflectivity1,?_printf+2
  6021  0016AE  C0AE  F091         	movff	ID@reflectivity1+1,?_printf+3
  6022  0016B2  C0B1  F092         	movff	ID@reflectivity2,?_printf+4
  6023  0016B6  C0B2  F093         	movff	ID@reflectivity2+1,?_printf+5
  6024  0016BA  EC17  F00F         	call	_printf	;wreg free
  6025                           
  6026                           ;sort.c: 376: lcdInst(0b11000000);;
  6027  0016BE  0EC0               	movlw	192
  6028  0016C0  EC7D  F030         	call	_lcdInst
  6029                           
  6030                           ;sort.c: 377: printf("cond: %d", cond1);
  6031  0016C4  0EA5               	movlw	low STR_65
  6032  0016C6  0100               	movlb	0	; () banked
  6033  0016C8  6F8E               	movwf	printf@f& (0+255),b
  6034  0016CA  0EFF               	movlw	high STR_65
  6035  0016CC  0100               	movlb	0	; () banked
  6036  0016CE  6F8F               	movwf	(printf@f+1)& (0+255),b
  6037  0016D0  C0AF  F090         	movff	ID@cond1,?_printf+2
  6038  0016D4  C0B0  F091         	movff	ID@cond1+1,?_printf+3
  6039  0016D8  EC17  F00F         	call	_printf	;wreg free
  6040                           
  6041                           ;sort.c: 385: if(!sensor_outputs[0]){
  6042  0016DC  0100               	movlb	0	; () banked
  6043  0016DE  51DA               	movf	_sensor_outputs& (0+255),w,b
  6044  0016E0  0100               	movlb	0	; () banked
  6045  0016E2  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  6046  0016E4  A4D8               	btfss	status,2,c
  6047  0016E6  D016               	goto	l8518
  6048                           
  6049                           ; BSR set to: 0
  6050                           ;sort.c: 386: if(!sensor_outputs[1]){
  6051  0016E8  0100               	movlb	0	; () banked
  6052  0016EA  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  6053  0016EC  0100               	movlb	0	; () banked
  6054  0016EE  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  6055  0016F0  A4D8               	btfss	status,2,c
  6056  0016F2  D008               	goto	l8514
  6057                           
  6058                           ; BSR set to: 0
  6059                           ;sort.c: 387: count_pop_no_tab++;
  6060  0016F4  0101               	movlb	1	; () banked
  6061  0016F6  4B27               	infsnz	_count_pop_no_tab& (0+255),f,b
  6062  0016F8  2B28               	incf	(_count_pop_no_tab+1)& (0+255),f,b
  6063                           
  6064                           ; BSR set to: 1
  6065                           ;sort.c: 388: cur_can = 0;
  6066  0016FA  0E00               	movlw	0
  6067  0016FC  0101               	movlb	1	; () banked
  6068  0016FE  6F2C               	movwf	(_cur_can+1)& (0+255),b
  6069  001700  0E00               	movlw	0
  6070  001702  D007               	goto	L6
  6071  001704                     l8514:
  6072                           
  6073                           ;sort.c: 390: else{
  6074                           ;sort.c: 391: count_pop_w_tab++;
  6075  001704  0101               	movlb	1	; () banked
  6076  001706  4B29               	infsnz	_count_pop_w_tab& (0+255),f,b
  6077  001708  2B2A               	incf	(_count_pop_w_tab+1)& (0+255),f,b
  6078                           
  6079                           ; BSR set to: 1
  6080                           ;sort.c: 392: cur_can = 1;
  6081  00170A  0E00               	movlw	0
  6082  00170C  0101               	movlb	1	; () banked
  6083  00170E  6F2C               	movwf	(_cur_can+1)& (0+255),b
  6084  001710  0E01               	movlw	1
  6085  001712                     L6:
  6086  001712  6F2B               	movwf	_cur_can& (0+255),b
  6087  001714                     l8518:
  6088                           
  6089                           ;sort.c: 393: }
  6090                           ;sort.c: 394: }
  6091                           ;sort.c: 395: if(sensor_outputs[0]){
  6092  001714  0100               	movlb	0	; () banked
  6093  001716  51DA               	movf	_sensor_outputs& (0+255),w,b
  6094  001718  0100               	movlb	0	; () banked
  6095  00171A  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  6096  00171C  B4D8               	btfsc	status,2,c
  6097  00171E  D016               	goto	l8530
  6098                           
  6099                           ; BSR set to: 0
  6100                           ;sort.c: 396: if(!sensor_outputs[1]){
  6101  001720  0100               	movlb	0	; () banked
  6102  001722  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  6103  001724  0100               	movlb	0	; () banked
  6104  001726  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  6105  001728  A4D8               	btfss	status,2,c
  6106  00172A  D008               	goto	l8526
  6107                           
  6108                           ; BSR set to: 0
  6109                           ;sort.c: 397: count_can_w_lab++;
  6110  00172C  0101               	movlb	1	; () banked
  6111  00172E  4B25               	infsnz	_count_can_w_lab& (0+255),f,b
  6112  001730  2B26               	incf	(_count_can_w_lab+1)& (0+255),f,b
  6113                           
  6114                           ; BSR set to: 1
  6115                           ;sort.c: 398: cur_can = 2;
  6116  001732  0E00               	movlw	0
  6117  001734  0101               	movlb	1	; () banked
  6118  001736  6F2C               	movwf	(_cur_can+1)& (0+255),b
  6119  001738  0E02               	movlw	2
  6120  00173A  D007               	goto	L7
  6121  00173C                     l8526:
  6122                           
  6123                           ;sort.c: 400: else{
  6124                           ;sort.c: 401: count_can_no_lab++;
  6125  00173C  0101               	movlb	1	; () banked
  6126  00173E  4B23               	infsnz	_count_can_no_lab& (0+255),f,b
  6127  001740  2B24               	incf	(_count_can_no_lab+1)& (0+255),f,b
  6128                           
  6129                           ; BSR set to: 1
  6130                           ;sort.c: 402: cur_can = 3;
  6131  001742  0E00               	movlw	0
  6132  001744  0101               	movlb	1	; () banked
  6133  001746  6F2C               	movwf	(_cur_can+1)& (0+255),b
  6134  001748  0E03               	movlw	3
  6135  00174A                     L7:
  6136  00174A  6F2B               	movwf	_cur_can& (0+255),b
  6137  00174C                     l8530:
  6138  00174C  0101               	movlb	1	; () banked
  6139  00174E  5135               	movf	_f_can_distributed& (0+255),w,b
  6140  001750  0101               	movlb	1	; () banked
  6141  001752  1136               	iorwf	(_f_can_distributed+1)& (0+255),w,b
  6142  001754  B4D8               	btfsc	status,2,c
  6143  001756  D7FA               	goto	l8530
  6144                           
  6145                           ; BSR set to: 1
  6146                           ;sort.c: 408: for(int i=0;i<10000;i++)
  6147                           
  6148                           ; BSR set to: 1
  6149  001758  0E00               	movlw	0
  6150  00175A  0100               	movlb	0	; () banked
  6151  00175C  6FC0               	movwf	(ID@i_1164+1)& (0+255),b
  6152  00175E  0E00               	movlw	0
  6153  001760  6FBF               	movwf	ID@i_1164& (0+255),b
  6154  001762                     l8534:
  6155                           
  6156                           ; BSR set to: 0
  6157  001762  0100               	movlb	0	; () banked
  6158  001764  BFC0               	btfsc	(ID@i_1164+1)& (0+255),7,b
  6159  001766  D008               	goto	l898
  6160  001768  0E10               	movlw	16
  6161  00176A  0100               	movlb	0	; () banked
  6162  00176C  5DBF               	subwf	ID@i_1164& (0+255),w,b
  6163  00176E  0E27               	movlw	39
  6164  001770  0100               	movlb	0	; () banked
  6165  001772  59C0               	subwfb	(ID@i_1164+1)& (0+255),w,b
  6166  001774  B0D8               	btfsc	status,0,c
  6167  001776  D00D               	goto	l899
  6168  001778                     l898:
  6169                           
  6170                           ; BSR set to: 0
  6171                           ;sort.c: 409: {
  6172                           ;sort.c: 410: LATCbits.LATC0 = 1;
  6173  001778  808B               	bsf	3979,0,c	;volatile
  6174                           
  6175                           ; BSR set to: 0
  6176                           ;sort.c: 411: _delay((unsigned long)((10)*(32000000/4000000.0)));
  6177  00177A  0E1A               	movlw	26
  6178  00177C                     u11307:
  6179  00177C  2EE8               	decfsz	wreg,f,c
  6180  00177E  D7FE               	bra	u11307
  6181  001780  D000               	nop2	
  6182                           
  6183                           ;sort.c: 412: LATCbits.LATC0 = 0;
  6184  001782  908B               	bcf	3979,0,c	;volatile
  6185                           
  6186                           ;sort.c: 413: _delay((unsigned long)((90)*(32000000/4000000.0)));
  6187  001784  0EF0               	movlw	240
  6188  001786                     u11317:
  6189  001786  2EE8               	decfsz	wreg,f,c
  6190  001788  D7FE               	bra	u11317
  6191  00178A  0100               	movlb	0	; () banked
  6192  00178C  4BBF               	infsnz	ID@i_1164& (0+255),f,b
  6193  00178E  2BC0               	incf	(ID@i_1164+1)& (0+255),f,b
  6194  001790  D7E8               	goto	l8534
  6195  001792                     l899:
  6196                           
  6197                           ; BSR set to: 0
  6198                           ;sort.c: 414: }
  6199                           ;sort.c: 416: LATCbits.LATC0 = 0;
  6200  001792  908B               	bcf	3979,0,c	;volatile
  6201                           
  6202                           ; BSR set to: 0
  6203                           ;sort.c: 418: f_can_coming_to_distribution = 1;
  6204  001794  0E00               	movlw	0
  6205  001796  0101               	movlb	1	; () banked
  6206  001798  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  6207  00179A  0E01               	movlw	1
  6208  00179C  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  6209                           
  6210                           ; BSR set to: 1
  6211                           ;sort.c: 419: _delay((unsigned long)((500)*(32000000/4000.0)));
  6212  00179E  0E15               	movlw	21
  6213  0017A0  0100               	movlb	0	; () banked
  6214  0017A2  6FAC               	movwf	(??_ID+1)& (0+255),b
  6215  0017A4  0E4B               	movlw	75
  6216  0017A6  0100               	movlb	0	; () banked
  6217  0017A8  6FAB               	movwf	??_ID& (0+255),b
  6218  0017AA  0EBE               	movlw	190
  6219  0017AC                     u11327:
  6220  0017AC  2EE8               	decfsz	wreg,f,c
  6221  0017AE  D7FE               	bra	u11327
  6222  0017B0  2FAB               	decfsz	??_ID& (0+255),f,b
  6223  0017B2  D7FC               	bra	u11327
  6224  0017B4  2FAC               	decfsz	(??_ID+1)& (0+255),f,b
  6225  0017B6  D7FA               	bra	u11327
  6226  0017B8  F000               	nop	
  6227                           
  6228                           ;sort.c: 420: LATCbits.LATC0 = 1;
  6229  0017BA  808B               	bsf	3979,0,c	;volatile
  6230                           
  6231                           ;sort.c: 423: if(!f_lastCan){
  6232  0017BC  0100               	movlb	0	; () banked
  6233  0017BE  51EC               	movf	_f_lastCan& (0+255),w,b
  6234  0017C0  0100               	movlb	0	; () banked
  6235  0017C2  11ED               	iorwf	(_f_lastCan+1)& (0+255),w,b
  6236  0017C4  A4D8               	btfss	status,2,c
  6237  0017C6  D032               	goto	l8566
  6238                           
  6239                           ; BSR set to: 0
  6240                           ;sort.c: 424: for(int i=0; i<46; i++){
  6241  0017C8  0E00               	movlw	0
  6242  0017CA  0100               	movlb	0	; () banked
  6243  0017CC  6FC5               	movwf	(ID@i_1165+1)& (0+255),b
  6244  0017CE  0E00               	movlw	0
  6245  0017D0  6FC4               	movwf	ID@i_1165& (0+255),b
  6246                           
  6247                           ; BSR set to: 0
  6248  0017D2  0100               	movlb	0	; () banked
  6249  0017D4  BFC5               	btfsc	(ID@i_1165+1)& (0+255),7,b
  6250  0017D6  D008               	goto	l8558
  6251  0017D8  0100               	movlb	0	; () banked
  6252  0017DA  51C5               	movf	(ID@i_1165+1)& (0+255),w,b
  6253  0017DC  E126               	bnz	l902
  6254  0017DE  0E2E               	movlw	46
  6255  0017E0  0100               	movlb	0	; () banked
  6256  0017E2  5DC4               	subwf	ID@i_1165& (0+255),w,b
  6257  0017E4  B0D8               	btfsc	status,0,c
  6258  0017E6  D021               	goto	l902
  6259  0017E8                     l8558:
  6260                           
  6261                           ; BSR set to: 0
  6262                           ;sort.c: 425: LATBbits.LATB2 = !LATBbits.LATB2;
  6263  0017E8  B48A               	btfsc	3978,2,c	;volatile
  6264  0017EA  D004               	goto	u7800
  6265  0017EC  0100               	movlb	0	; () banked
  6266  0017EE  6BAB               	clrf	??_ID& (0+255),b
  6267  0017F0  2BAB               	incf	??_ID& (0+255),f,b
  6268  0017F2  D002               	goto	u7818
  6269  0017F4                     u7800:
  6270  0017F4  0100               	movlb	0	; () banked
  6271  0017F6  6BAB               	clrf	??_ID& (0+255),b
  6272  0017F8                     u7818:
  6273  0017F8  0100               	movlb	0	; () banked
  6274  0017FA  47AB               	rlncf	??_ID& (0+255),f,b
  6275  0017FC  47AB               	rlncf	??_ID& (0+255),f,b
  6276  0017FE  508A               	movf	3978,w,c	;volatile
  6277  001800  0100               	movlb	0	; () banked
  6278  001802  19AB               	xorwf	??_ID& (0+255),w,b
  6279  001804  0BFB               	andlw	-5
  6280  001806  19AB               	xorwf	??_ID& (0+255),w,b
  6281  001808  6E8A               	movwf	3978,c	;volatile
  6282                           
  6283                           ; BSR set to: 0
  6284                           ;sort.c: 426: delay_ms(45-i);
  6285  00180A  0100               	movlb	0	; () banked
  6286  00180C  51C4               	movf	ID@i_1165& (0+255),w,b
  6287  00180E  0800               	sublw	0
  6288  001810  0F2D               	addlw	45
  6289  001812  EC93  F02F         	call	_delay_ms
  6290  001816  0100               	movlb	0	; () banked
  6291  001818  4BC4               	infsnz	ID@i_1165& (0+255),f,b
  6292  00181A  2BC5               	incf	(ID@i_1165+1)& (0+255),f,b
  6293                           
  6294                           ; BSR set to: 0
  6295  00181C  0100               	movlb	0	; () banked
  6296  00181E  BFC5               	btfsc	(ID@i_1165+1)& (0+255),7,b
  6297  001820  D7E3               	goto	l8558
  6298  001822  0100               	movlb	0	; () banked
  6299  001824  51C5               	movf	(ID@i_1165+1)& (0+255),w,b
  6300  001826  E101               	bnz	u7820
  6301  001828  D7DA               	goto	L8
  6302  00182A                     u7820:
  6303  00182A                     l902:
  6304                           
  6305                           ; BSR set to: 0
  6306                           ;sort.c: 427: }
  6307                           ;sort.c: 428: LATBbits.LATB2 = 1;
  6308  00182A  848A               	bsf	3978,2,c	;volatile
  6309  00182C                     l8566:
  6310                           
  6311                           ; BSR set to: 0
  6312                           ;sort.c: 429: }
  6313                           ;sort.c: 431: f_can_coming_to_ID = 0;
  6314  00182C  0E00               	movlw	0
  6315  00182E  0101               	movlb	1	; () banked
  6316  001830  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  6317  001832  0E00               	movlw	0
  6318  001834  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  6319  001836  0012               	return	
  6320  001838                     __end_of_ID:
  6321                           	opt stack 0
  6322                           tblptru	equ	0xFF8
  6323                           tblptrh	equ	0xFF7
  6324                           tblptrl	equ	0xFF6
  6325                           tablat	equ	0xFF5
  6326                           prodh	equ	0xFF4
  6327                           prodl	equ	0xFF3
  6328                           postinc0	equ	0xFEE
  6329                           wreg	equ	0xFE8
  6330                           postdec1	equ	0xFE5
  6331                           fsr1l	equ	0xFE1
  6332                           indf2	equ	0xFDF
  6333                           postinc2	equ	0xFDE
  6334                           postdec2	equ	0xFDD
  6335                           fsr2h	equ	0xFDA
  6336                           fsr2l	equ	0xFD9
  6337                           status	equ	0xFD8
  6338                           
  6339 ;; *************** function _readIR *****************
  6340 ;; Defined at:
  6341 ;;		line 23 in file "ADCFunctionality.c"
  6342 ;; Parameters:    Size  Location     Type
  6343 ;;  ana_port        2    2[BANK0 ] int 
  6344 ;; Auto vars:     Size  Location     Type
  6345 ;;		None
  6346 ;; Return value:  Size  Location     Type
  6347 ;;                  1    wreg      void 
  6348 ;; Registers used:
  6349 ;;		wreg, status,2, status,0, cstack
  6350 ;; Tracked objects:
  6351 ;;		On entry : 0/0
  6352 ;;		On exit  : 0/0
  6353 ;;		Unchanged: 0/0
  6354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6355 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6356 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6357 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6358 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6359 ;;Total ram usage:        4 bytes
  6360 ;; Hardware stack levels used:    1
  6361 ;; Hardware stack levels required when called:    8
  6362 ;; This function calls:
  6363 ;;		_readADC
  6364 ;; This function is called by:
  6365 ;;		_Loading
  6366 ;;		_ID
  6367 ;;		_getIR
  6368 ;; This function uses a non-reentrant model
  6369 ;;
  6370                           
  6371                           	psect	text8
  6372  00513C                     __ptext8:
  6373                           	opt stack 0
  6374  00513C                     _readIR:
  6375                           	opt stack 20
  6376                           
  6377                           ;ADCFunctionality.c: 24: readADC(ana_port);
  6378                           
  6379                           ; BSR set to: 1
  6380                           ;incstack = 0
  6381  00513C  0100               	movlb	0	; () banked
  6382  00513E  5182               	movf	readIR@ana_port& (0+255),w,b
  6383  005140  EC68  F02F         	call	_readADC
  6384                           
  6385                           ;ADCFunctionality.c: 25: IR_res = ADRESH<<8 | ADRESL;
  6386  005144  50C3               	movf	4035,w,c	;volatile
  6387  005146  CFC4 F084          	movff	4036,??_readIR	;volatile
  6388  00514A  0100               	movlb	0	; () banked
  6389  00514C  6B85               	clrf	(??_readIR+1)& (0+255),b
  6390  00514E  C084  F085         	movff	??_readIR,??_readIR+1
  6391  005152  0100               	movlb	0	; () banked
  6392  005154  6B84               	clrf	??_readIR& (0+255),b
  6393  005156  0100               	movlb	0	; () banked
  6394  005158  1184               	iorwf	??_readIR& (0+255),w,b
  6395  00515A  0100               	movlb	0	; () banked
  6396  00515C  6FE0               	movwf	_IR_res& (0+255),b
  6397  00515E  0100               	movlb	0	; () banked
  6398  005160  5185               	movf	(??_readIR+1)& (0+255),w,b
  6399  005162  0100               	movlb	0	; () banked
  6400  005164  6FE1               	movwf	(_IR_res+1)& (0+255),b
  6401                           
  6402                           ;ADCFunctionality.c: 26: switch(ana_port){
  6403  005166  D024               	goto	l6970
  6404  005168                     l6964:
  6405                           
  6406                           ; BSR set to: 0
  6407                           ;ADCFunctionality.c: 28: IR_signal = (IR_res > 800) ? 1 : 0;
  6408  005168  0100               	movlb	0	; () banked
  6409  00516A  BFE1               	btfsc	(_IR_res+1)& (0+255),7,b
  6410  00516C  D00A               	goto	u5720
  6411  00516E  0E21               	movlw	33
  6412  005170  0100               	movlb	0	; () banked
  6413  005172  5DE0               	subwf	_IR_res& (0+255),w,b
  6414  005174  0E03               	movlw	3
  6415  005176  0100               	movlb	0	; () banked
  6416  005178  59E1               	subwfb	(_IR_res+1)& (0+255),w,b
  6417  00517A  A0D8               	btfss	status,0,c
  6418  00517C  D002               	goto	u5720
  6419  00517E  0E01               	movlw	1
  6420  005180  D001               	goto	u5730
  6421  005182                     u5720:
  6422  005182  0E00               	movlw	0
  6423  005184                     u5730:
  6424  005184  0100               	movlb	0	; () banked
  6425  005186  6FE2               	movwf	_IR_signal& (0+255),b
  6426  005188  6BE3               	clrf	(_IR_signal+1)& (0+255),b
  6427                           
  6428                           ;ADCFunctionality.c: 29: break;
  6429  00518A  0012               	return	
  6430  00518C                     l6966:
  6431                           
  6432                           ; BSR set to: 0
  6433                           ;ADCFunctionality.c: 31: IR_signal = (IR_res > 250) ? 1 : 0;
  6434  00518C  0100               	movlb	0	; () banked
  6435  00518E  BFE1               	btfsc	(_IR_res+1)& (0+255),7,b
  6436  005190  D00A               	goto	u5740
  6437  005192  0100               	movlb	0	; () banked
  6438  005194  51E1               	movf	(_IR_res+1)& (0+255),w,b
  6439  005196  E105               	bnz	u5741
  6440  005198  0EFB               	movlw	251
  6441  00519A  0100               	movlb	0	; () banked
  6442  00519C  5DE0               	subwf	_IR_res& (0+255),w,b
  6443  00519E  A0D8               	btfss	status,0,c
  6444  0051A0  D002               	goto	u5740
  6445  0051A2                     u5741:
  6446  0051A2  0E01               	movlw	1
  6447  0051A4  D001               	goto	u5750
  6448  0051A6                     u5740:
  6449  0051A6  0E00               	movlw	0
  6450  0051A8                     u5750:
  6451  0051A8  0100               	movlb	0	; () banked
  6452  0051AA  6FE2               	movwf	_IR_signal& (0+255),b
  6453  0051AC  6BE3               	clrf	(_IR_signal+1)& (0+255),b
  6454                           
  6455                           ; BSR set to: 0
  6456                           ;ADCFunctionality.c: 35: }
  6457                           
  6458                           ; BSR set to: 0
  6459                           ;ADCFunctionality.c: 34: break;
  6460                           
  6461                           ;ADCFunctionality.c: 33: default:
  6462                           
  6463                           ;ADCFunctionality.c: 32: break;
  6464  0051AE  0012               	return	
  6465  0051B0                     l6970:
  6466                           
  6467                           ; BSR set to: 0
  6468  0051B0  C082  F084         	movff	readIR@ana_port,??_readIR
  6469  0051B4  C083  F085         	movff	readIR@ana_port+1,??_readIR+1
  6470                           
  6471                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6472                           ; Switch size 1, requested type "space"
  6473                           ; Number of cases is 1, Range of values is 0 to 0
  6474                           ; switch strategies available:
  6475                           ; Name         Instructions Cycles
  6476                           ; simple_byte            4     3 (average)
  6477                           ;	Chosen strategy is simple_byte
  6478  0051B8  0100               	movlb	0	; () banked
  6479  0051BA  5185               	movf	(??_readIR+1)& (0+255),w,b
  6480  0051BC  0A00               	xorlw	0	; case 0
  6481  0051BE  A4D8               	btfss	status,2,c
  6482  0051C0  0012               	return	
  6483                           
  6484                           ; BSR set to: 0
  6485                           ; Switch size 1, requested type "space"
  6486                           ; Number of cases is 2, Range of values is 0 to 3
  6487                           ; switch strategies available:
  6488                           ; Name         Instructions Cycles
  6489                           ; simple_byte            7     4 (average)
  6490                           ;	Chosen strategy is simple_byte
  6491  0051C2  0100               	movlb	0	; () banked
  6492  0051C4  5184               	movf	??_readIR& (0+255),w,b
  6493  0051C6  0A00               	xorlw	0	; case 0
  6494  0051C8  B4D8               	btfsc	status,2,c
  6495  0051CA  D7CE               	goto	l6964
  6496  0051CC  0A03               	xorlw	3	; case 3
  6497  0051CE  A4D8               	btfss	status,2,c
  6498  0051D0  0012               	return	
  6499  0051D2  D7DC               	goto	l6966
  6500  0051D4                     __end_of_readIR:
  6501                           	opt stack 0
  6502                           tblptru	equ	0xFF8
  6503                           tblptrh	equ	0xFF7
  6504                           tblptrl	equ	0xFF6
  6505                           tablat	equ	0xFF5
  6506                           prodh	equ	0xFF4
  6507                           prodl	equ	0xFF3
  6508                           postinc0	equ	0xFEE
  6509                           wreg	equ	0xFE8
  6510                           postdec1	equ	0xFE5
  6511                           fsr1l	equ	0xFE1
  6512                           indf2	equ	0xFDF
  6513                           postinc2	equ	0xFDE
  6514                           postdec2	equ	0xFDD
  6515                           fsr2h	equ	0xFDA
  6516                           fsr2l	equ	0xFD9
  6517                           status	equ	0xFD8
  6518                           
  6519 ;; *************** function _readCOND *****************
  6520 ;; Defined at:
  6521 ;;		line 44 in file "ADCFunctionality.c"
  6522 ;; Parameters:    Size  Location     Type
  6523 ;;		None
  6524 ;; Auto vars:     Size  Location     Type
  6525 ;;  res             2    4[BANK0 ] int 
  6526 ;; Return value:  Size  Location     Type
  6527 ;;                  1    wreg      void 
  6528 ;; Registers used:
  6529 ;;		wreg, status,2, status,0, cstack
  6530 ;; Tracked objects:
  6531 ;;		On entry : 0/0
  6532 ;;		On exit  : 0/0
  6533 ;;		Unchanged: 0/0
  6534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6536 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6537 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6538 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6539 ;;Total ram usage:        4 bytes
  6540 ;; Hardware stack levels used:    1
  6541 ;; Hardware stack levels required when called:    8
  6542 ;; This function calls:
  6543 ;;		_readADC
  6544 ;; This function is called by:
  6545 ;;		_ID
  6546 ;; This function uses a non-reentrant model
  6547 ;;
  6548                           
  6549                           	psect	text9
  6550  00598C                     __ptext9:
  6551                           	opt stack 0
  6552  00598C                     _readCOND:
  6553                           	opt stack 20
  6554                           
  6555                           ;ADCFunctionality.c: 45: readADC(2);
  6556                           
  6557                           ; BSR set to: 0
  6558                           ;incstack = 0
  6559  00598C  0E02               	movlw	2
  6560  00598E  EC68  F02F         	call	_readADC
  6561                           
  6562                           ;ADCFunctionality.c: 46: int res = ADRESH<<8 | ADRESL;
  6563  005992  50C3               	movf	4035,w,c	;volatile
  6564  005994  CFC4 F082          	movff	4036,??_readCOND	;volatile
  6565  005998  0100               	movlb	0	; () banked
  6566  00599A  6B83               	clrf	(??_readCOND+1)& (0+255),b
  6567  00599C  C082  F083         	movff	??_readCOND,??_readCOND+1
  6568  0059A0  0100               	movlb	0	; () banked
  6569  0059A2  6B82               	clrf	??_readCOND& (0+255),b
  6570  0059A4  0100               	movlb	0	; () banked
  6571  0059A6  1182               	iorwf	??_readCOND& (0+255),w,b
  6572  0059A8  0100               	movlb	0	; () banked
  6573  0059AA  6F84               	movwf	readCOND@res& (0+255),b
  6574  0059AC  0100               	movlb	0	; () banked
  6575  0059AE  5183               	movf	(??_readCOND+1)& (0+255),w,b
  6576  0059B0  0100               	movlb	0	; () banked
  6577  0059B2  6F85               	movwf	(readCOND@res+1)& (0+255),b
  6578                           
  6579                           ; BSR set to: 0
  6580                           ;ADCFunctionality.c: 47: COND_signal = (res > 300) ? 1 : 0;
  6581  0059B4  0100               	movlb	0	; () banked
  6582  0059B6  BF85               	btfsc	(readCOND@res+1)& (0+255),7,b
  6583  0059B8  D00A               	goto	u6510
  6584  0059BA  0E2D               	movlw	45
  6585  0059BC  0100               	movlb	0	; () banked
  6586  0059BE  5D84               	subwf	readCOND@res& (0+255),w,b
  6587  0059C0  0E01               	movlw	1
  6588  0059C2  0100               	movlb	0	; () banked
  6589  0059C4  5985               	subwfb	(readCOND@res+1)& (0+255),w,b
  6590  0059C6  A0D8               	btfss	status,0,c
  6591  0059C8  D002               	goto	u6510
  6592  0059CA  0E01               	movlw	1
  6593  0059CC  D001               	goto	u6520
  6594  0059CE                     u6510:
  6595  0059CE  0E00               	movlw	0
  6596  0059D0                     u6520:
  6597  0059D0  0100               	movlb	0	; () banked
  6598  0059D2  6FDE               	movwf	_COND_signal& (0+255),b
  6599  0059D4  6BDF               	clrf	(_COND_signal+1)& (0+255),b
  6600                           
  6601                           ; BSR set to: 0
  6602  0059D6  0012               	return		;funcret
  6603  0059D8                     __end_of_readCOND:
  6604                           	opt stack 0
  6605                           tblptru	equ	0xFF8
  6606                           tblptrh	equ	0xFF7
  6607                           tblptrl	equ	0xFF6
  6608                           tablat	equ	0xFF5
  6609                           prodh	equ	0xFF4
  6610                           prodl	equ	0xFF3
  6611                           postinc0	equ	0xFEE
  6612                           wreg	equ	0xFE8
  6613                           postdec1	equ	0xFE5
  6614                           fsr1l	equ	0xFE1
  6615                           indf2	equ	0xFDF
  6616                           postinc2	equ	0xFDE
  6617                           postdec2	equ	0xFDD
  6618                           fsr2h	equ	0xFDA
  6619                           fsr2l	equ	0xFD9
  6620                           status	equ	0xFD8
  6621                           
  6622 ;; *************** function _delay_ms *****************
  6623 ;; Defined at:
  6624 ;;		line 752 in file "sort.c"
  6625 ;; Parameters:    Size  Location     Type
  6626 ;;  milliseconds    1    wreg     unsigned char 
  6627 ;; Auto vars:     Size  Location     Type
  6628 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  6629 ;; Return value:  Size  Location     Type
  6630 ;;                  1    wreg      void 
  6631 ;; Registers used:
  6632 ;;		wreg, status,2, status,0, cstack
  6633 ;; Tracked objects:
  6634 ;;		On entry : 0/0
  6635 ;;		On exit  : 0/0
  6636 ;;		Unchanged: 0/0
  6637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6639 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6640 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6641 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6642 ;;Total ram usage:        2 bytes
  6643 ;; Hardware stack levels used:    1
  6644 ;; Hardware stack levels required when called:    7
  6645 ;; This function calls:
  6646 ;;		Nothing
  6647 ;; This function is called by:
  6648 ;;		_Loading
  6649 ;;		_ID
  6650 ;; This function uses a non-reentrant model
  6651 ;;
  6652                           
  6653                           	psect	text10
  6654  005F26                     __ptext10:
  6655                           	opt stack 0
  6656  005F26                     _delay_ms:
  6657                           	opt stack 21
  6658                           
  6659                           ; BSR set to: 0
  6660                           ;incstack = 0
  6661                           ;delay_ms@milliseconds stored from wreg
  6662  005F26  0100               	movlb	0	; () banked
  6663  005F28  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  6664                           
  6665                           ;sort.c: 753: while(milliseconds > 0)
  6666  005F2A  D00B               	goto	l7680
  6667  005F2C                     l7676:
  6668                           
  6669                           ;sort.c: 754: {
  6670                           ;sort.c: 755: milliseconds--;
  6671  005F2C  0100               	movlb	0	; () banked
  6672  005F2E  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  6673                           
  6674                           ; BSR set to: 0
  6675                           ;sort.c: 756: _delay((unsigned long)((990)*(32000000/4000000.0)));
  6676  005F30  0E0B               	movlw	11
  6677  005F32  0100               	movlb	0	; () banked
  6678  005F34  6F80               	movwf	??_delay_ms& (0+255),b
  6679  005F36  0E47               	movlw	71
  6680  005F38                     u11337:
  6681  005F38  2EE8               	decfsz	wreg,f,c
  6682  005F3A  D7FE               	bra	u11337
  6683  005F3C  2F80               	decfsz	??_delay_ms& (0+255),f,b
  6684  005F3E  D7FC               	bra	u11337
  6685  005F40  D000               	nop2	
  6686  005F42                     l7680:
  6687  005F42  0100               	movlb	0	; () banked
  6688  005F44  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  6689  005F46  0100               	movlb	0	; () banked
  6690  005F48  B4D8               	btfsc	status,2,c
  6691  005F4A  0012               	return	
  6692  005F4C  D7EF               	goto	l7676
  6693  005F4E                     __end_of_delay_ms:
  6694                           	opt stack 0
  6695                           tblptru	equ	0xFF8
  6696                           tblptrh	equ	0xFF7
  6697                           tblptrl	equ	0xFF6
  6698                           tablat	equ	0xFF5
  6699                           prodh	equ	0xFF4
  6700                           prodl	equ	0xFF3
  6701                           postinc0	equ	0xFEE
  6702                           wreg	equ	0xFE8
  6703                           postdec1	equ	0xFE5
  6704                           fsr1l	equ	0xFE1
  6705                           indf2	equ	0xFDF
  6706                           postinc2	equ	0xFDE
  6707                           postdec2	equ	0xFDD
  6708                           fsr2h	equ	0xFDA
  6709                           fsr2l	equ	0xFD9
  6710                           status	equ	0xFD8
  6711                           
  6712 ;; *************** function ___ftge *****************
  6713 ;; Defined at:
  6714 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  6715 ;; Parameters:    Size  Location     Type
  6716 ;;  ff1             3   18[BANK0 ] float 
  6717 ;;  ff2             3   21[BANK0 ] float 
  6718 ;; Auto vars:     Size  Location     Type
  6719 ;;		None
  6720 ;; Return value:  Size  Location     Type
  6721 ;;		None               void
  6722 ;; Registers used:
  6723 ;;		wreg, status,2, status,0
  6724 ;; Tracked objects:
  6725 ;;		On entry : 0/0
  6726 ;;		On exit  : 0/0
  6727 ;;		Unchanged: 0/0
  6728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6729 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6731 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6732 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6733 ;;Total ram usage:        9 bytes
  6734 ;; Hardware stack levels used:    1
  6735 ;; Hardware stack levels required when called:    7
  6736 ;; This function calls:
  6737 ;;		Nothing
  6738 ;; This function is called by:
  6739 ;;		_ID
  6740 ;; This function uses a non-reentrant model
  6741 ;;
  6742                           
  6743                           	psect	text11
  6744  004DAE                     __ptext11:
  6745                           	opt stack 0
  6746  004DAE                     ___ftge:
  6747                           	opt stack 21
  6748                           
  6749                           ; BSR set to: 0
  6750                           ;incstack = 0
  6751  004DAE  0100               	movlb	0	; () banked
  6752  004DB0  AF94               	btfss	(___ftge@ff1+2)& (0+255),7,b
  6753  004DB2  D01D               	goto	l7798
  6754                           
  6755                           ; BSR set to: 0
  6756  004DB4  C092  F098         	movff	___ftge@ff1,??___ftge
  6757  004DB8  C093  F099         	movff	___ftge@ff1+1,??___ftge+1
  6758  004DBC  C094  F09A         	movff	___ftge@ff1+2,??___ftge+2
  6759  004DC0  0100               	movlb	0	; () banked
  6760  004DC2  1F98               	comf	??___ftge& (0+255),f,b
  6761  004DC4  1F99               	comf	(??___ftge+1)& (0+255),f,b
  6762  004DC6  1F9A               	comf	(??___ftge+2)& (0+255),f,b
  6763  004DC8  2B98               	incf	??___ftge& (0+255),f,b
  6764  004DCA  0E00               	movlw	0
  6765  004DCC  2399               	addwfc	(??___ftge+1)& (0+255),f,b
  6766  004DCE  239A               	addwfc	(??___ftge+2)& (0+255),f,b
  6767  004DD0  0E00               	movlw	0
  6768  004DD2  0100               	movlb	0	; () banked
  6769  004DD4  2598               	addwf	??___ftge& (0+255),w,b
  6770  004DD6  0100               	movlb	0	; () banked
  6771  004DD8  6F92               	movwf	___ftge@ff1& (0+255),b
  6772  004DDA  0E00               	movlw	0
  6773  004DDC  0100               	movlb	0	; () banked
  6774  004DDE  2199               	addwfc	(??___ftge+1)& (0+255),w,b
  6775  004DE0  0100               	movlb	0	; () banked
  6776  004DE2  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  6777  004DE4  0E80               	movlw	128
  6778  004DE6  0100               	movlb	0	; () banked
  6779  004DE8  219A               	addwfc	(??___ftge+2)& (0+255),w,b
  6780  004DEA  0100               	movlb	0	; () banked
  6781  004DEC  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  6782  004DEE                     l7798:
  6783                           
  6784                           ; BSR set to: 0
  6785  004DEE  0100               	movlb	0	; () banked
  6786  004DF0  AF97               	btfss	(___ftge@ff2+2)& (0+255),7,b
  6787  004DF2  D01D               	goto	l7802
  6788                           
  6789                           ; BSR set to: 0
  6790  004DF4  C095  F098         	movff	___ftge@ff2,??___ftge
  6791  004DF8  C096  F099         	movff	___ftge@ff2+1,??___ftge+1
  6792  004DFC  C097  F09A         	movff	___ftge@ff2+2,??___ftge+2
  6793  004E00  0100               	movlb	0	; () banked
  6794  004E02  1F98               	comf	??___ftge& (0+255),f,b
  6795  004E04  1F99               	comf	(??___ftge+1)& (0+255),f,b
  6796  004E06  1F9A               	comf	(??___ftge+2)& (0+255),f,b
  6797  004E08  2B98               	incf	??___ftge& (0+255),f,b
  6798  004E0A  0E00               	movlw	0
  6799  004E0C  2399               	addwfc	(??___ftge+1)& (0+255),f,b
  6800  004E0E  239A               	addwfc	(??___ftge+2)& (0+255),f,b
  6801  004E10  0E00               	movlw	0
  6802  004E12  0100               	movlb	0	; () banked
  6803  004E14  2598               	addwf	??___ftge& (0+255),w,b
  6804  004E16  0100               	movlb	0	; () banked
  6805  004E18  6F95               	movwf	___ftge@ff2& (0+255),b
  6806  004E1A  0E00               	movlw	0
  6807  004E1C  0100               	movlb	0	; () banked
  6808  004E1E  2199               	addwfc	(??___ftge+1)& (0+255),w,b
  6809  004E20  0100               	movlb	0	; () banked
  6810  004E22  6F96               	movwf	(___ftge@ff2+1)& (0+255),b
  6811  004E24  0E80               	movlw	128
  6812  004E26  0100               	movlb	0	; () banked
  6813  004E28  219A               	addwfc	(??___ftge+2)& (0+255),w,b
  6814  004E2A  0100               	movlb	0	; () banked
  6815  004E2C  6F97               	movwf	(___ftge@ff2+2)& (0+255),b
  6816  004E2E                     l7802:
  6817                           
  6818                           ; BSR set to: 0
  6819  004E2E  0E00               	movlw	0
  6820  004E30  0100               	movlb	0	; () banked
  6821  004E32  1B92               	xorwf	___ftge@ff1& (0+255),f,b
  6822  004E34  0E00               	movlw	0
  6823  004E36  0100               	movlb	0	; () banked
  6824  004E38  1B93               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  6825  004E3A  0E80               	movlw	128
  6826  004E3C  0100               	movlb	0	; () banked
  6827  004E3E  1B94               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  6828                           
  6829                           ; BSR set to: 0
  6830  004E40  0E00               	movlw	0
  6831  004E42  0100               	movlb	0	; () banked
  6832  004E44  1B95               	xorwf	___ftge@ff2& (0+255),f,b
  6833  004E46  0E00               	movlw	0
  6834  004E48  0100               	movlb	0	; () banked
  6835  004E4A  1B96               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  6836  004E4C  0E80               	movlw	128
  6837  004E4E  0100               	movlb	0	; () banked
  6838  004E50  1B97               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  6839  004E52  0100               	movlb	0	; () banked
  6840  004E54  5195               	movf	___ftge@ff2& (0+255),w,b
  6841  004E56  0100               	movlb	0	; () banked
  6842  004E58  5D92               	subwf	___ftge@ff1& (0+255),w,b
  6843  004E5A  0100               	movlb	0	; () banked
  6844  004E5C  5196               	movf	(___ftge@ff2+1)& (0+255),w,b
  6845  004E5E  0100               	movlb	0	; () banked
  6846  004E60  5993               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  6847  004E62  0100               	movlb	0	; () banked
  6848  004E64  5197               	movf	(___ftge@ff2+2)& (0+255),w,b
  6849  004E66  0100               	movlb	0	; () banked
  6850  004E68  5994               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  6851  004E6A  B0D8               	btfsc	status,0,c
  6852  004E6C  D002               	goto	l7808
  6853                           
  6854                           ; BSR set to: 0
  6855  004E6E  90D8               	bcf	status,0,c
  6856  004E70  0012               	return	
  6857  004E72                     l7808:
  6858                           
  6859                           ; BSR set to: 0
  6860  004E72  80D8               	bsf	status,0,c
  6861                           
  6862                           ; BSR set to: 0
  6863  004E74  0012               	return	
  6864  004E76                     __end_of___ftge:
  6865                           	opt stack 0
  6866                           tblptru	equ	0xFF8
  6867                           tblptrh	equ	0xFF7
  6868                           tblptrl	equ	0xFF6
  6869                           tablat	equ	0xFF5
  6870                           prodh	equ	0xFF4
  6871                           prodl	equ	0xFF3
  6872                           postinc0	equ	0xFEE
  6873                           wreg	equ	0xFE8
  6874                           postdec1	equ	0xFE5
  6875                           fsr1l	equ	0xFE1
  6876                           indf2	equ	0xFDF
  6877                           postinc2	equ	0xFDE
  6878                           postdec2	equ	0xFDD
  6879                           fsr2h	equ	0xFDA
  6880                           fsr2l	equ	0xFD9
  6881                           status	equ	0xFD8
  6882                           
  6883 ;; *************** function ___awtoft *****************
  6884 ;; Defined at:
  6885 ;;		line 32 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  6886 ;; Parameters:    Size  Location     Type
  6887 ;;  c               2   14[BANK0 ] int 
  6888 ;; Auto vars:     Size  Location     Type
  6889 ;;  sign            1   17[BANK0 ] unsigned char 
  6890 ;; Return value:  Size  Location     Type
  6891 ;;                  3   14[BANK0 ] float 
  6892 ;; Registers used:
  6893 ;;		wreg, status,2, status,0, cstack
  6894 ;; Tracked objects:
  6895 ;;		On entry : 0/0
  6896 ;;		On exit  : 0/0
  6897 ;;		Unchanged: 0/0
  6898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6899 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6900 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6902 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6903 ;;Total ram usage:        4 bytes
  6904 ;; Hardware stack levels used:    1
  6905 ;; Hardware stack levels required when called:    8
  6906 ;; This function calls:
  6907 ;;		___ftpack
  6908 ;; This function is called by:
  6909 ;;		_ID
  6910 ;; This function uses a non-reentrant model
  6911 ;;
  6912                           
  6913                           	psect	text12
  6914  005A6A                     __ptext12:
  6915                           	opt stack 0
  6916  005A6A                     ___awtoft:
  6917                           	opt stack 20
  6918                           
  6919                           ; BSR set to: 0
  6920                           ;incstack = 0
  6921  005A6A  0E00               	movlw	0
  6922  005A6C  0100               	movlb	0	; () banked
  6923  005A6E  6F91               	movwf	___awtoft@sign& (0+255),b
  6924                           
  6925                           ; BSR set to: 0
  6926  005A70  0100               	movlb	0	; () banked
  6927  005A72  AF8F               	btfss	(___awtoft@c+1)& (0+255),7,b
  6928  005A74  D008               	goto	l7790
  6929                           
  6930                           ; BSR set to: 0
  6931  005A76  0100               	movlb	0	; () banked
  6932  005A78  6D8E               	negf	___awtoft@c& (0+255),b
  6933  005A7A  1F8F               	comf	(___awtoft@c+1)& (0+255),f,b
  6934  005A7C  B0D8               	btfsc	status,0,c
  6935  005A7E  2B8F               	incf	(___awtoft@c+1)& (0+255),f,b
  6936                           
  6937                           ; BSR set to: 0
  6938  005A80  0E01               	movlw	1
  6939  005A82  0100               	movlb	0	; () banked
  6940  005A84  6F91               	movwf	___awtoft@sign& (0+255),b
  6941  005A86                     l7790:
  6942                           
  6943                           ; BSR set to: 0
  6944  005A86  C08E  F080         	movff	___awtoft@c,___ftpack@arg
  6945  005A8A  C08F  F081         	movff	___awtoft@c+1,___ftpack@arg+1
  6946  005A8E  0100               	movlb	0	; () banked
  6947  005A90  6B82               	clrf	(___ftpack@arg+2)& (0+255),b
  6948  005A92  0E8E               	movlw	142
  6949  005A94  0100               	movlb	0	; () banked
  6950  005A96  6F83               	movwf	___ftpack@exp& (0+255),b
  6951  005A98  C091  F084         	movff	___awtoft@sign,___ftpack@sign
  6952  005A9C  ECC7  F022         	call	___ftpack	;wreg free
  6953  005AA0  C080  F08E         	movff	?___ftpack,?___awtoft
  6954  005AA4  C081  F08F         	movff	?___ftpack+1,?___awtoft+1
  6955  005AA8  C082  F090         	movff	?___ftpack+2,?___awtoft+2
  6956  005AAC  0012               	return	
  6957  005AAE                     __end_of___awtoft:
  6958                           	opt stack 0
  6959                           tblptru	equ	0xFF8
  6960                           tblptrh	equ	0xFF7
  6961                           tblptrl	equ	0xFF6
  6962                           tablat	equ	0xFF5
  6963                           prodh	equ	0xFF4
  6964                           prodl	equ	0xFF3
  6965                           postinc0	equ	0xFEE
  6966                           wreg	equ	0xFE8
  6967                           postdec1	equ	0xFE5
  6968                           fsr1l	equ	0xFE1
  6969                           indf2	equ	0xFDF
  6970                           postinc2	equ	0xFDE
  6971                           postdec2	equ	0xFDD
  6972                           fsr2h	equ	0xFDA
  6973                           fsr2l	equ	0xFD9
  6974                           status	equ	0xFD8
  6975                           
  6976 ;; *************** function ___ftpack *****************
  6977 ;; Defined at:
  6978 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  6979 ;; Parameters:    Size  Location     Type
  6980 ;;  arg             3    0[BANK0 ] unsigned um
  6981 ;;  exp             1    3[BANK0 ] unsigned char 
  6982 ;;  sign            1    4[BANK0 ] unsigned char 
  6983 ;; Auto vars:     Size  Location     Type
  6984 ;;		None
  6985 ;; Return value:  Size  Location     Type
  6986 ;;                  3    0[BANK0 ] float 
  6987 ;; Registers used:
  6988 ;;		wreg, status,2, status,0
  6989 ;; Tracked objects:
  6990 ;;		On entry : 0/0
  6991 ;;		On exit  : 0/0
  6992 ;;		Unchanged: 0/0
  6993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6994 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6996 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6997 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6998 ;;Total ram usage:        8 bytes
  6999 ;; Hardware stack levels used:    1
  7000 ;; Hardware stack levels required when called:    7
  7001 ;; This function calls:
  7002 ;;		Nothing
  7003 ;; This function is called by:
  7004 ;;		___awtoft
  7005 ;; This function uses a non-reentrant model
  7006 ;;
  7007                           
  7008                           	psect	text13
  7009  00458E                     __ptext13:
  7010                           	opt stack 0
  7011  00458E                     ___ftpack:
  7012                           	opt stack 20
  7013                           
  7014                           ;incstack = 0
  7015  00458E  0100               	movlb	0	; () banked
  7016  004590  5183               	movf	___ftpack@exp& (0+255),w,b
  7017  004592  0100               	movlb	0	; () banked
  7018  004594  B4D8               	btfsc	status,2,c
  7019  004596  D008               	goto	l7174
  7020                           
  7021                           ; BSR set to: 0
  7022  004598  0100               	movlb	0	; () banked
  7023  00459A  5180               	movf	___ftpack@arg& (0+255),w,b
  7024  00459C  0100               	movlb	0	; () banked
  7025  00459E  1181               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  7026  0045A0  0100               	movlb	0	; () banked
  7027  0045A2  1182               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  7028  0045A4  A4D8               	btfss	status,2,c
  7029  0045A6  D011               	goto	l7180
  7030  0045A8                     l7174:
  7031                           
  7032                           ; BSR set to: 0
  7033  0045A8  0E00               	movlw	0
  7034  0045AA  0100               	movlb	0	; () banked
  7035  0045AC  6F80               	movwf	?___ftpack& (0+255),b
  7036  0045AE  0E00               	movlw	0
  7037  0045B0  0100               	movlb	0	; () banked
  7038  0045B2  6F81               	movwf	(?___ftpack+1)& (0+255),b
  7039  0045B4  0E00               	movlw	0
  7040  0045B6  0100               	movlb	0	; () banked
  7041  0045B8  6F82               	movwf	(?___ftpack+2)& (0+255),b
  7042                           
  7043                           ; BSR set to: 0
  7044  0045BA  0012               	return	
  7045  0045BC                     l7178:
  7046                           
  7047                           ; BSR set to: 0
  7048  0045BC  0100               	movlb	0	; () banked
  7049  0045BE  2B83               	incf	___ftpack@exp& (0+255),f,b
  7050  0045C0  0100               	movlb	0	; () banked
  7051  0045C2  90D8               	bcf	status,0,c
  7052  0045C4  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  7053  0045C6  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  7054  0045C8  3380               	rrcf	___ftpack@arg& (0+255),f,b
  7055  0045CA                     l7180:
  7056                           
  7057                           ; BSR set to: 0
  7058  0045CA  0E00               	movlw	0
  7059  0045CC  0100               	movlb	0	; () banked
  7060  0045CE  1580               	andwf	___ftpack@arg& (0+255),w,b
  7061  0045D0  0100               	movlb	0	; () banked
  7062  0045D2  6F85               	movwf	??___ftpack& (0+255),b
  7063  0045D4  0E00               	movlw	0
  7064  0045D6  0100               	movlb	0	; () banked
  7065  0045D8  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  7066  0045DA  0100               	movlb	0	; () banked
  7067  0045DC  6F86               	movwf	(??___ftpack+1)& (0+255),b
  7068  0045DE  0EFE               	movlw	254
  7069  0045E0  0100               	movlb	0	; () banked
  7070  0045E2  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  7071  0045E4  0100               	movlb	0	; () banked
  7072  0045E6  6F87               	movwf	(??___ftpack+2)& (0+255),b
  7073  0045E8  0100               	movlb	0	; () banked
  7074  0045EA  5185               	movf	??___ftpack& (0+255),w,b
  7075  0045EC  0100               	movlb	0	; () banked
  7076  0045EE  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  7077  0045F0  0100               	movlb	0	; () banked
  7078  0045F2  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  7079  0045F4  B4D8               	btfsc	status,2,c
  7080  0045F6  D011               	goto	l7186
  7081  0045F8  D7E1               	goto	l7178
  7082  0045FA                     l7182:
  7083                           
  7084                           ; BSR set to: 0
  7085  0045FA  0100               	movlb	0	; () banked
  7086  0045FC  2B83               	incf	___ftpack@exp& (0+255),f,b
  7087                           
  7088                           ; BSR set to: 0
  7089  0045FE  0E01               	movlw	1
  7090  004600  0100               	movlb	0	; () banked
  7091  004602  2780               	addwf	___ftpack@arg& (0+255),f,b
  7092  004604  0E00               	movlw	0
  7093  004606  0100               	movlb	0	; () banked
  7094  004608  2381               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  7095  00460A  0E00               	movlw	0
  7096  00460C  0100               	movlb	0	; () banked
  7097  00460E  2382               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  7098  004610  0100               	movlb	0	; () banked
  7099  004612  90D8               	bcf	status,0,c
  7100  004614  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  7101  004616  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  7102  004618  3380               	rrcf	___ftpack@arg& (0+255),f,b
  7103  00461A                     l7186:
  7104                           
  7105                           ; BSR set to: 0
  7106  00461A  0E00               	movlw	0
  7107  00461C  0100               	movlb	0	; () banked
  7108  00461E  1580               	andwf	___ftpack@arg& (0+255),w,b
  7109  004620  0100               	movlb	0	; () banked
  7110  004622  6F85               	movwf	??___ftpack& (0+255),b
  7111  004624  0E00               	movlw	0
  7112  004626  0100               	movlb	0	; () banked
  7113  004628  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  7114  00462A  0100               	movlb	0	; () banked
  7115  00462C  6F86               	movwf	(??___ftpack+1)& (0+255),b
  7116  00462E  0EFF               	movlw	255
  7117  004630  0100               	movlb	0	; () banked
  7118  004632  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  7119  004634  0100               	movlb	0	; () banked
  7120  004636  6F87               	movwf	(??___ftpack+2)& (0+255),b
  7121  004638  0100               	movlb	0	; () banked
  7122  00463A  5185               	movf	??___ftpack& (0+255),w,b
  7123  00463C  0100               	movlb	0	; () banked
  7124  00463E  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  7125  004640  0100               	movlb	0	; () banked
  7126  004642  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  7127  004644  B4D8               	btfsc	status,2,c
  7128  004646  D008               	goto	l7190
  7129  004648  D7D8               	goto	l7182
  7130  00464A                     l7188:
  7131                           
  7132                           ; BSR set to: 0
  7133  00464A  0100               	movlb	0	; () banked
  7134  00464C  0783               	decf	___ftpack@exp& (0+255),f,b
  7135  00464E  0100               	movlb	0	; () banked
  7136  004650  90D8               	bcf	status,0,c
  7137  004652  3780               	rlcf	___ftpack@arg& (0+255),f,b
  7138  004654  3781               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  7139  004656  3782               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  7140  004658                     l7190:
  7141                           
  7142                           ; BSR set to: 0
  7143  004658  0100               	movlb	0	; () banked
  7144  00465A  BF81               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  7145  00465C  D004               	goto	l1852
  7146                           
  7147                           ; BSR set to: 0
  7148  00465E  0E02               	movlw	2
  7149  004660  0100               	movlb	0	; () banked
  7150  004662  6183               	cpfslt	___ftpack@exp& (0+255),b
  7151  004664  D7F2               	goto	l7188
  7152  004666                     l1852:
  7153                           
  7154                           ; BSR set to: 0
  7155  004666  0100               	movlb	0	; () banked
  7156  004668  B183               	btfsc	___ftpack@exp& (0+255),0,b
  7157  00466A  D002               	goto	l7196
  7158                           
  7159                           ; BSR set to: 0
  7160  00466C  0100               	movlb	0	; () banked
  7161  00466E  9F81               	bcf	(___ftpack@arg+1)& (0+255),7,b
  7162  004670                     l7196:
  7163                           
  7164                           ; BSR set to: 0
  7165  004670  0100               	movlb	0	; () banked
  7166  004672  90D8               	bcf	status,0,c
  7167  004674  3383               	rrcf	___ftpack@exp& (0+255),f,b
  7168  004676  0100               	movlb	0	; () banked
  7169  004678  5183               	movf	___ftpack@exp& (0+255),w,b
  7170  00467A  0100               	movlb	0	; () banked
  7171  00467C  1382               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  7172                           
  7173                           ; BSR set to: 0
  7174  00467E  0100               	movlb	0	; () banked
  7175  004680  5184               	movf	___ftpack@sign& (0+255),w,b
  7176  004682  0100               	movlb	0	; () banked
  7177  004684  B4D8               	btfsc	status,2,c
  7178  004686  D002               	goto	l7202
  7179                           
  7180                           ; BSR set to: 0
  7181  004688  0100               	movlb	0	; () banked
  7182  00468A  8F82               	bsf	(___ftpack@arg+2)& (0+255),7,b
  7183  00468C                     l7202:
  7184                           
  7185                           ; BSR set to: 0
  7186  00468C  C080  F080         	movff	___ftpack@arg,?___ftpack
  7187  004690  C081  F081         	movff	___ftpack@arg+1,?___ftpack+1
  7188  004694  C082  F082         	movff	___ftpack@arg+2,?___ftpack+2
  7189  004698  0012               	return	
  7190  00469A                     __end_of___ftpack:
  7191                           	opt stack 0
  7192                           tblptru	equ	0xFF8
  7193                           tblptrh	equ	0xFF7
  7194                           tblptrl	equ	0xFF6
  7195                           tablat	equ	0xFF5
  7196                           prodh	equ	0xFF4
  7197                           prodl	equ	0xFF3
  7198                           postinc0	equ	0xFEE
  7199                           wreg	equ	0xFE8
  7200                           postdec1	equ	0xFE5
  7201                           fsr1l	equ	0xFE1
  7202                           indf2	equ	0xFDF
  7203                           postinc2	equ	0xFDE
  7204                           postdec2	equ	0xFDD
  7205                           fsr2h	equ	0xFDA
  7206                           fsr2l	equ	0xFD9
  7207                           status	equ	0xFD8
  7208                           
  7209 ;; *************** function _Distribution *****************
  7210 ;; Defined at:
  7211 ;;		line 434 in file "sort.c"
  7212 ;; Parameters:    Size  Location     Type
  7213 ;;		None
  7214 ;; Auto vars:     Size  Location     Type
  7215 ;;		None
  7216 ;; Return value:  Size  Location     Type
  7217 ;;                  1    wreg      void 
  7218 ;; Registers used:
  7219 ;;		wreg, status,2, status,0, cstack
  7220 ;; Tracked objects:
  7221 ;;		On entry : 0/0
  7222 ;;		On exit  : 0/0
  7223 ;;		Unchanged: 0/0
  7224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7227 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7228 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7229 ;;Total ram usage:        2 bytes
  7230 ;; Hardware stack levels used:    1
  7231 ;; Hardware stack levels required when called:    8
  7232 ;; This function calls:
  7233 ;;		_updateServoPosition
  7234 ;; This function is called by:
  7235 ;;		_sort
  7236 ;; This function uses a non-reentrant model
  7237 ;;
  7238                           
  7239                           	psect	text14
  7240  004986                     __ptext14:
  7241                           	opt stack 0
  7242  004986                     _Distribution:
  7243                           	opt stack 21
  7244                           
  7245                           ;sort.c: 435: if(f_can_coming_to_distribution){
  7246                           
  7247                           ; BSR set to: 0
  7248                           ;incstack = 0
  7249  004986  0101               	movlb	1	; () banked
  7250  004988  5133               	movf	_f_can_coming_to_distribution& (0+255),w,b
  7251  00498A  0101               	movlb	1	; () banked
  7252  00498C  1134               	iorwf	(_f_can_coming_to_distribution+1)& (0+255),w,b
  7253  00498E  B4D8               	btfsc	status,2,c
  7254  004990  0012               	return	
  7255                           
  7256                           ; BSR set to: 1
  7257                           ;sort.c: 436: f_can_distributed = 0;
  7258  004992  0E00               	movlw	0
  7259  004994  0101               	movlb	1	; () banked
  7260  004996  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
  7261  004998  0E00               	movlw	0
  7262  00499A  6F35               	movwf	_f_can_distributed& (0+255),b
  7263                           
  7264                           ;sort.c: 443: switch(cur_can){
  7265  00499C  D034               	goto	l8582
  7266  00499E                     l8572:
  7267                           
  7268                           ;sort.c: 445: updateServoPosition(400, 1);
  7269  00499E  0E01               	movlw	1
  7270  0049A0  0100               	movlb	0	; () banked
  7271  0049A2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  7272  0049A4  0E90               	movlw	144
  7273  0049A6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  7274  0049A8  0E00               	movlw	0
  7275  0049AA  0100               	movlb	0	; () banked
  7276  0049AC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  7277  0049AE  0E01               	movlw	1
  7278  0049B0  6F82               	movwf	updateServoPosition@timer& (0+255),b
  7279  0049B2  ECF6  F029         	call	_updateServoPosition	;wreg free
  7280                           
  7281                           ;sort.c: 446: break;
  7282  0049B6  D03E               	goto	l8584
  7283  0049B8                     l8574:
  7284                           
  7285                           ;sort.c: 448: updateServoPosition(850, 1);
  7286  0049B8  0E03               	movlw	3
  7287  0049BA  0100               	movlb	0	; () banked
  7288  0049BC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  7289  0049BE  0E52               	movlw	82
  7290  0049C0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  7291  0049C2  0E00               	movlw	0
  7292  0049C4  0100               	movlb	0	; () banked
  7293  0049C6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  7294  0049C8  0E01               	movlw	1
  7295  0049CA  6F82               	movwf	updateServoPosition@timer& (0+255),b
  7296  0049CC  ECF6  F029         	call	_updateServoPosition	;wreg free
  7297                           
  7298                           ;sort.c: 449: break;
  7299  0049D0  D031               	goto	l8584
  7300  0049D2                     l8576:
  7301                           
  7302                           ;sort.c: 451: updateServoPosition(1550, 1);
  7303  0049D2  0E06               	movlw	6
  7304  0049D4  0100               	movlb	0	; () banked
  7305  0049D6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  7306  0049D8  0E0E               	movlw	14
  7307  0049DA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  7308  0049DC  0E00               	movlw	0
  7309  0049DE  0100               	movlb	0	; () banked
  7310  0049E0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  7311  0049E2  0E01               	movlw	1
  7312  0049E4  6F82               	movwf	updateServoPosition@timer& (0+255),b
  7313  0049E6  ECF6  F029         	call	_updateServoPosition	;wreg free
  7314                           
  7315                           ;sort.c: 452: break;
  7316  0049EA  D024               	goto	l8584
  7317  0049EC                     l8578:
  7318                           
  7319                           ;sort.c: 454: updateServoPosition(2500, 1);
  7320  0049EC  0E09               	movlw	9
  7321  0049EE  0100               	movlb	0	; () banked
  7322  0049F0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  7323  0049F2  0EC4               	movlw	196
  7324  0049F4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  7325  0049F6  0E00               	movlw	0
  7326  0049F8  0100               	movlb	0	; () banked
  7327  0049FA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  7328  0049FC  0E01               	movlw	1
  7329  0049FE  6F82               	movwf	updateServoPosition@timer& (0+255),b
  7330  004A00  ECF6  F029         	call	_updateServoPosition	;wreg free
  7331                           
  7332                           ;sort.c: 458: }
  7333                           
  7334                           ;sort.c: 457: break;
  7335                           
  7336                           ;sort.c: 456: default:
  7337                           
  7338                           ;sort.c: 455: break;
  7339  004A04  D017               	goto	l8584
  7340  004A06                     l8582:
  7341  004A06  C12B  F088         	movff	_cur_can,??_Distribution
  7342  004A0A  C12C  F089         	movff	_cur_can+1,??_Distribution+1
  7343                           
  7344                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7345                           ; Switch size 1, requested type "space"
  7346                           ; Number of cases is 1, Range of values is 0 to 0
  7347                           ; switch strategies available:
  7348                           ; Name         Instructions Cycles
  7349                           ; simple_byte            4     3 (average)
  7350                           ;	Chosen strategy is simple_byte
  7351  004A0E  0100               	movlb	0	; () banked
  7352  004A10  5189               	movf	(??_Distribution+1)& (0+255),w,b
  7353  004A12  0A00               	xorlw	0	; case 0
  7354  004A14  A4D8               	btfss	status,2,c
  7355  004A16  D00E               	goto	l8584
  7356                           
  7357                           ; BSR set to: 0
  7358                           ; Switch size 1, requested type "space"
  7359                           ; Number of cases is 4, Range of values is 0 to 3
  7360                           ; switch strategies available:
  7361                           ; Name         Instructions Cycles
  7362                           ; simple_byte           13     7 (average)
  7363                           ;	Chosen strategy is simple_byte
  7364  004A18  0100               	movlb	0	; () banked
  7365  004A1A  5188               	movf	??_Distribution& (0+255),w,b
  7366  004A1C  0A00               	xorlw	0	; case 0
  7367  004A1E  B4D8               	btfsc	status,2,c
  7368  004A20  D7BE               	goto	l8572
  7369  004A22  0A01               	xorlw	1	; case 1
  7370  004A24  B4D8               	btfsc	status,2,c
  7371  004A26  D7C8               	goto	l8574
  7372  004A28  0A03               	xorlw	3	; case 2
  7373  004A2A  B4D8               	btfsc	status,2,c
  7374  004A2C  D7D2               	goto	l8576
  7375  004A2E  0A01               	xorlw	1	; case 3
  7376  004A30  B4D8               	btfsc	status,2,c
  7377  004A32  D7DC               	goto	l8578
  7378  004A34                     l8584:
  7379                           
  7380                           ;sort.c: 459: updateServoPosition(1050, 3);
  7381  004A34  0E04               	movlw	4
  7382  004A36  0100               	movlb	0	; () banked
  7383  004A38  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  7384  004A3A  0E1A               	movlw	26
  7385  004A3C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  7386  004A3E  0E00               	movlw	0
  7387  004A40  0100               	movlb	0	; () banked
  7388  004A42  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  7389  004A44  0E03               	movlw	3
  7390  004A46  6F82               	movwf	updateServoPosition@timer& (0+255),b
  7391  004A48  ECF6  F029         	call	_updateServoPosition	;wreg free
  7392                           
  7393                           ;sort.c: 460: servo_timer_target = 750;
  7394  004A4C  0E02               	movlw	2
  7395  004A4E  6E70               	movwf	_servo_timer_target+1,c	;volatile
  7396  004A50  0EEE               	movlw	238
  7397  004A52  6E6F               	movwf	_servo_timer_target,c	;volatile
  7398                           
  7399                           ;sort.c: 461: f_panning_to_bin = 1;
  7400  004A54  0E00               	movlw	0
  7401  004A56  6E66               	movwf	_f_panning_to_bin+1,c	;volatile
  7402  004A58  0E01               	movlw	1
  7403  004A5A  6E65               	movwf	_f_panning_to_bin,c	;volatile
  7404                           
  7405                           ;sort.c: 462: f_can_coming_to_distribution = 0;
  7406  004A5C  0E00               	movlw	0
  7407  004A5E  0101               	movlb	1	; () banked
  7408  004A60  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  7409  004A62  0E00               	movlw	0
  7410  004A64  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  7411  004A66  0012               	return	
  7412  004A68                     __end_of_Distribution:
  7413                           	opt stack 0
  7414                           tblptru	equ	0xFF8
  7415                           tblptrh	equ	0xFF7
  7416                           tblptrl	equ	0xFF6
  7417                           tablat	equ	0xFF5
  7418                           prodh	equ	0xFF4
  7419                           prodl	equ	0xFF3
  7420                           postinc0	equ	0xFEE
  7421                           wreg	equ	0xFE8
  7422                           postdec1	equ	0xFE5
  7423                           fsr1l	equ	0xFE1
  7424                           indf2	equ	0xFDF
  7425                           postinc2	equ	0xFDE
  7426                           postdec2	equ	0xFDD
  7427                           fsr2h	equ	0xFDA
  7428                           fsr2l	equ	0xFD9
  7429                           status	equ	0xFD8
  7430                           
  7431 ;; *************** function _machineConfig *****************
  7432 ;; Defined at:
  7433 ;;		line 15 in file "MachineConfig.c"
  7434 ;; Parameters:    Size  Location     Type
  7435 ;;		None
  7436 ;; Auto vars:     Size  Location     Type
  7437 ;;		None
  7438 ;; Return value:  Size  Location     Type
  7439 ;;                  1    wreg      void 
  7440 ;; Registers used:
  7441 ;;		wreg, status,2
  7442 ;; Tracked objects:
  7443 ;;		On entry : 0/0
  7444 ;;		On exit  : 0/0
  7445 ;;		Unchanged: 0/0
  7446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7448 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7449 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7450 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7451 ;;Total ram usage:        0 bytes
  7452 ;; Hardware stack levels used:    1
  7453 ;; Hardware stack levels required when called:    7
  7454 ;; This function calls:
  7455 ;;		Nothing
  7456 ;; This function is called by:
  7457 ;;		_main
  7458 ;; This function uses a non-reentrant model
  7459 ;;
  7460                           
  7461                           	psect	text15
  7462  005710                     __ptext15:
  7463                           	opt stack 0
  7464  005710                     _machineConfig:
  7465                           	opt stack 23
  7466                           
  7467                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  7468                           
  7469                           ; BSR set to: 1
  7470                           ;incstack = 0
  7471  005710  0EF0               	movlw	240
  7472  005712  6ED3               	movwf	4051,c	;volatile
  7473                           
  7474                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  7475  005714  8C9B               	bsf	3995,6,c	;volatile
  7476                           
  7477                           ;MachineConfig.c: 22: TRISA = 0b00001111;
  7478  005716  0E0F               	movlw	15
  7479  005718  6E92               	movwf	3986,c	;volatile
  7480                           
  7481                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  7482  00571A  0EF2               	movlw	242
  7483  00571C  6E93               	movwf	3987,c	;volatile
  7484                           
  7485                           ;MachineConfig.c: 27: TRISC = 0x00;
  7486  00571E  0E00               	movlw	0
  7487  005720  6E94               	movwf	3988,c	;volatile
  7488                           
  7489                           ;MachineConfig.c: 31: TRISD = 0x00;
  7490  005722  0E00               	movlw	0
  7491  005724  6E95               	movwf	3989,c	;volatile
  7492                           
  7493                           ;MachineConfig.c: 34: TRISE = 0x00;
  7494  005726  0E00               	movlw	0
  7495  005728  6E96               	movwf	3990,c	;volatile
  7496                           
  7497                           ;MachineConfig.c: 37: LATA = 0x00;
  7498  00572A  0E00               	movlw	0
  7499  00572C  6E89               	movwf	3977,c	;volatile
  7500                           
  7501                           ;MachineConfig.c: 38: LATB = 0x00;
  7502  00572E  0E00               	movlw	0
  7503  005730  6E8A               	movwf	3978,c	;volatile
  7504                           
  7505                           ;MachineConfig.c: 39: LATC = 0x00;
  7506  005732  0E00               	movlw	0
  7507  005734  6E8B               	movwf	3979,c	;volatile
  7508                           
  7509                           ;MachineConfig.c: 40: LATD = 0x00;
  7510  005736  0E00               	movlw	0
  7511  005738  6E8C               	movwf	3980,c	;volatile
  7512                           
  7513                           ;MachineConfig.c: 41: LATE = 0x00;
  7514  00573A  0E00               	movlw	0
  7515  00573C  6E8D               	movwf	3981,c	;volatile
  7516                           
  7517                           ;MachineConfig.c: 43: nRBPU = 0;
  7518  00573E  9EF1               	bcf	intcon2,7,c	;volatile
  7519                           
  7520                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  7521  005740  0E00               	movlw	0
  7522  005742  6EC2               	movwf	4034,c	;volatile
  7523                           
  7524                           ;MachineConfig.c: 47: ADCON1 = 0b00001011;
  7525  005744  0E0B               	movlw	11
  7526  005746  6EC1               	movwf	4033,c	;volatile
  7527                           
  7528                           ;MachineConfig.c: 52: CVRCON = 0x00;
  7529  005748  0E00               	movlw	0
  7530  00574A  6EB5               	movwf	4021,c	;volatile
  7531                           
  7532                           ;MachineConfig.c: 53: CMCONbits.CIS = 0;
  7533  00574C  96B4               	bcf	4020,3,c	;volatile
  7534                           
  7535                           ;MachineConfig.c: 54: ADCON2 = 0b10110001;
  7536  00574E  0EB1               	movlw	177
  7537  005750  6EC0               	movwf	4032,c	;volatile
  7538                           
  7539                           ;MachineConfig.c: 57: INT1IE = 1;
  7540  005752  86F0               	bsf	intcon3,3,c	;volatile
  7541                           
  7542                           ;MachineConfig.c: 59: TMR0IE = 1;
  7543  005754  8AF2               	bsf	intcon,5,c	;volatile
  7544                           
  7545                           ;MachineConfig.c: 60: TMR1IE = 1;
  7546  005756  809D               	bsf	3997,0,c	;volatile
  7547                           
  7548                           ;MachineConfig.c: 61: TMR2IE = 1;
  7549  005758  829D               	bsf	3997,1,c	;volatile
  7550                           
  7551                           ;MachineConfig.c: 62: TMR3IE = 1;
  7552  00575A  82A0               	bsf	4000,1,c	;volatile
  7553                           
  7554                           ;MachineConfig.c: 64: T1CON = 0b10110000;
  7555  00575C  0EB0               	movlw	176
  7556  00575E  6ECD               	movwf	4045,c	;volatile
  7557                           
  7558                           ;MachineConfig.c: 65: T2CON = 0b01111011;
  7559  005760  0E7B               	movlw	123
  7560  005762  6ECA               	movwf	4042,c	;volatile
  7561                           
  7562                           ;MachineConfig.c: 66: PR2 = 0x22;
  7563  005764  0E22               	movlw	34
  7564  005766  6ECB               	movwf	4043,c	;volatile
  7565                           
  7566                           ;MachineConfig.c: 67: T3CON = 0b10110000;
  7567  005768  0EB0               	movlw	176
  7568  00576A  6EB1               	movwf	4017,c	;volatile
  7569                           
  7570                           ;MachineConfig.c: 68: PEIE = 1;
  7571  00576C  8CF2               	bsf	intcon,6,c	;volatile
  7572                           
  7573                           ;MachineConfig.c: 69: ADIE = 0;
  7574  00576E  9C9D               	bcf	3997,6,c	;volatile
  7575                           
  7576                           ;MachineConfig.c: 70: (INTCONbits.GIE = 0);
  7577  005770  9EF2               	bcf	intcon,7,c	;volatile
  7578  005772  0012               	return		;funcret
  7579  005774                     __end_of_machineConfig:
  7580                           	opt stack 0
  7581                           tblptru	equ	0xFF8
  7582                           tblptrh	equ	0xFF7
  7583                           tblptrl	equ	0xFF6
  7584                           tablat	equ	0xFF5
  7585                           prodh	equ	0xFF4
  7586                           prodl	equ	0xFF3
  7587                           intcon	equ	0xFF2
  7588                           intcon2	equ	0xFF1
  7589                           intcon3	equ	0xFF0
  7590                           postinc0	equ	0xFEE
  7591                           wreg	equ	0xFE8
  7592                           postdec1	equ	0xFE5
  7593                           fsr1l	equ	0xFE1
  7594                           indf2	equ	0xFDF
  7595                           postinc2	equ	0xFDE
  7596                           postdec2	equ	0xFDD
  7597                           fsr2h	equ	0xFDA
  7598                           fsr2l	equ	0xFD9
  7599                           status	equ	0xFD8
  7600                           
  7601 ;; *************** function _logRun *****************
  7602 ;; Defined at:
  7603 ;;		line 88 in file "EEPROM.c"
  7604 ;; Parameters:    Size  Location     Type
  7605 ;;		None
  7606 ;; Auto vars:     Size  Location     Type
  7607 ;;  byte_i          1   53[BANK0 ] unsigned char 
  7608 ;;  i               2   55[BANK0 ] int 
  7609 ;;  num             1   49[BANK0 ] unsigned char 
  7610 ;;  addr            2   57[BANK0 ] unsigned short 
  7611 ;;  byte11          1   54[BANK0 ] unsigned char 
  7612 ;;  byte3           1   52[BANK0 ] unsigned char 
  7613 ;;  byte2           1   51[BANK0 ] unsigned char 
  7614 ;;  byte1           1   50[BANK0 ] unsigned char 
  7615 ;; Return value:  Size  Location     Type
  7616 ;;                  1    wreg      void 
  7617 ;; Registers used:
  7618 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7619 ;; Tracked objects:
  7620 ;;		On entry : 0/0
  7621 ;;		On exit  : 0/0
  7622 ;;		Unchanged: 0/0
  7623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7625 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7627 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7628 ;;Total ram usage:       10 bytes
  7629 ;; Hardware stack levels used:    1
  7630 ;; Hardware stack levels required when called:   11
  7631 ;; This function calls:
  7632 ;;		_EEPROM_read
  7633 ;;		_EEPROM_write
  7634 ;; This function is called by:
  7635 ;;		_main
  7636 ;; This function uses a non-reentrant model
  7637 ;;
  7638                           
  7639                           	psect	text16
  7640  004328                     __ptext16:
  7641                           	opt stack 0
  7642  004328                     _logRun:
  7643                           	opt stack 19
  7644                           
  7645                           ;EEPROM.c: 101: sel = EEPROM_read(0);
  7646                           
  7647                           ;incstack = 0
  7648  004328  0E00               	movlw	0
  7649  00432A  0100               	movlb	0	; () banked
  7650  00432C  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  7651  00432E  0E00               	movlw	0
  7652  004330  6F80               	movwf	EEPROM_read@address& (0+255),b
  7653  004332  EC40  F030         	call	_EEPROM_read	;wreg free
  7654  004336  0100               	movlb	0	; () banked
  7655  004338  6FFD               	movwf	_sel& (0+255),b
  7656                           
  7657                           ; BSR set to: 0
  7658                           ;EEPROM.c: 102: unsigned short addr = 1 + 11 * sel;
  7659  00433A  0100               	movlb	0	; () banked
  7660  00433C  51FD               	movf	_sel& (0+255),w,b
  7661  00433E  0D0B               	mullw	11
  7662  004340  0E01               	movlw	1
  7663  004342  24F3               	addwf	prodl,w,c
  7664  004344  0100               	movlb	0	; () banked
  7665  004346  6FB9               	movwf	logRun@addr& (0+255),b
  7666  004348  0E00               	movlw	0
  7667  00434A  20F4               	addwfc	prodh,w,c
  7668  00434C  0100               	movlb	0	; () banked
  7669  00434E  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  7670                           
  7671                           ; BSR set to: 0
  7672                           ;EEPROM.c: 105: if (sel < 3){
  7673  004350  0E03               	movlw	3
  7674  004352  0100               	movlb	0	; () banked
  7675  004354  61FD               	cpfslt	_sel& (0+255),b
  7676  004356  D00E               	goto	l10308
  7677                           
  7678                           ; BSR set to: 0
  7679                           ;EEPROM.c: 106: unsigned char num = sel+1;
  7680  004358  0100               	movlb	0	; () banked
  7681  00435A  29FD               	incf	_sel& (0+255),w,b
  7682  00435C  0100               	movlb	0	; () banked
  7683  00435E  6FB1               	movwf	logRun@num& (0+255),b
  7684                           
  7685                           ; BSR set to: 0
  7686                           ;EEPROM.c: 107: EEPROM_write(0, num);
  7687  004360  0E00               	movlw	0
  7688  004362  0100               	movlb	0	; () banked
  7689  004364  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  7690  004366  0E00               	movlw	0
  7691  004368  6FAB               	movwf	EEPROM_write@address& (0+255),b
  7692  00436A  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  7693  00436E  EC4F  F024         	call	_EEPROM_write	;wreg free
  7694                           
  7695                           ;EEPROM.c: 108: }
  7696  004372  D00A               	goto	l10310
  7697  004374                     l10308:
  7698                           
  7699                           ;EEPROM.c: 109: else{
  7700                           ;EEPROM.c: 110: EEPROM_write(0, 0);
  7701  004374  0E00               	movlw	0
  7702  004376  0100               	movlb	0	; () banked
  7703  004378  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  7704  00437A  0E00               	movlw	0
  7705  00437C  6FAB               	movwf	EEPROM_write@address& (0+255),b
  7706  00437E  0E00               	movlw	0
  7707  004380  0100               	movlb	0	; () banked
  7708  004382  6FAD               	movwf	EEPROM_write@data& (0+255),b
  7709  004384  EC4F  F024         	call	_EEPROM_write	;wreg free
  7710  004388                     l10310:
  7711                           
  7712                           ;EEPROM.c: 111: }
  7713                           ;EEPROM.c: 114: unsigned char byte1 = 0b10000000 | count_total;
  7714  004388  0100               	movlb	0	; () banked
  7715  00438A  51FE               	movf	_count_total& (0+255),w,b
  7716  00438C  0980               	iorlw	128
  7717  00438E  0100               	movlb	0	; () banked
  7718  004390  6FB2               	movwf	logRun@byte1& (0+255),b
  7719                           
  7720                           ; BSR set to: 0
  7721                           ;EEPROM.c: 115: EEPROM_write(addr, byte1);
  7722  004392  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7723  004396  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7724  00439A  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  7725  00439E  EC4F  F024         	call	_EEPROM_write	;wreg free
  7726                           
  7727                           ;EEPROM.c: 116: addr++;
  7728  0043A2  0100               	movlb	0	; () banked
  7729  0043A4  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7730  0043A6  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7731                           
  7732                           ; BSR set to: 0
  7733                           ;EEPROM.c: 119: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  7734  0043A8  0101               	movlb	1	; () banked
  7735  0043AA  3927               	swapf	_count_pop_no_tab& (0+255),w,b
  7736  0043AC  0BF0               	andlw	240
  7737  0043AE  0101               	movlb	1	; () banked
  7738  0043B0  1129               	iorwf	_count_pop_w_tab& (0+255),w,b
  7739  0043B2  0100               	movlb	0	; () banked
  7740  0043B4  6FB3               	movwf	logRun@byte2& (0+255),b
  7741                           
  7742                           ; BSR set to: 0
  7743                           ;EEPROM.c: 120: EEPROM_write(addr, byte2);
  7744  0043B6  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7745  0043BA  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7746  0043BE  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  7747  0043C2  EC4F  F024         	call	_EEPROM_write	;wreg free
  7748                           
  7749                           ;EEPROM.c: 121: addr++;
  7750  0043C6  0100               	movlb	0	; () banked
  7751  0043C8  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7752  0043CA  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7753                           
  7754                           ; BSR set to: 0
  7755                           ;EEPROM.c: 122: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  7756  0043CC  0101               	movlb	1	; () banked
  7757  0043CE  3925               	swapf	_count_can_w_lab& (0+255),w,b
  7758  0043D0  0BF0               	andlw	240
  7759  0043D2  0101               	movlb	1	; () banked
  7760  0043D4  1123               	iorwf	_count_can_no_lab& (0+255),w,b
  7761  0043D6  0100               	movlb	0	; () banked
  7762  0043D8  6FB4               	movwf	logRun@byte3& (0+255),b
  7763                           
  7764                           ; BSR set to: 0
  7765                           ;EEPROM.c: 123: EEPROM_write(addr, byte3);
  7766  0043DA  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7767  0043DE  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7768  0043E2  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  7769  0043E6  EC4F  F024         	call	_EEPROM_write	;wreg free
  7770                           
  7771                           ;EEPROM.c: 124: addr++;
  7772  0043EA  0100               	movlb	0	; () banked
  7773  0043EC  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7774  0043EE  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7775                           
  7776                           ; BSR set to: 0
  7777                           ;EEPROM.c: 127: for(int i = 0; i < 7; i++){
  7778  0043F0  0E00               	movlw	0
  7779  0043F2  0100               	movlb	0	; () banked
  7780  0043F4  6FB8               	movwf	(logRun@i+1)& (0+255),b
  7781  0043F6  0E00               	movlw	0
  7782  0043F8  6FB7               	movwf	logRun@i& (0+255),b
  7783                           
  7784                           ; BSR set to: 0
  7785  0043FA  0100               	movlb	0	; () banked
  7786  0043FC  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  7787  0043FE  D008               	goto	l10334
  7788  004400  0100               	movlb	0	; () banked
  7789  004402  51B8               	movf	(logRun@i+1)& (0+255),w,b
  7790  004404  E128               	bnz	l1189
  7791  004406  0E07               	movlw	7
  7792  004408  0100               	movlb	0	; () banked
  7793  00440A  5DB7               	subwf	logRun@i& (0+255),w,b
  7794  00440C  B0D8               	btfsc	status,0,c
  7795  00440E  D023               	goto	l1189
  7796  004410                     l10334:
  7797                           
  7798                           ; BSR set to: 0
  7799                           ;EEPROM.c: 128: unsigned char byte_i = startTime[i];
  7800  004410  90D8               	bcf	status,0,c
  7801  004412  0100               	movlb	0	; () banked
  7802  004414  35B7               	rlcf	logRun@i& (0+255),w,b
  7803  004416  6ED9               	movwf	fsr2l,c
  7804  004418  0100               	movlb	0	; () banked
  7805  00441A  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  7806  00441C  6EDA               	movwf	fsr2h,c
  7807  00441E  0E0E               	movlw	low _startTime
  7808  004420  26D9               	addwf	fsr2l,f,c
  7809  004422  0E01               	movlw	high _startTime
  7810  004424  22DA               	addwfc	fsr2h,f,c
  7811  004426  50DF               	movf	indf2,w,c
  7812  004428  0100               	movlb	0	; () banked
  7813  00442A  6FB5               	movwf	logRun@byte_i& (0+255),b
  7814                           
  7815                           ; BSR set to: 0
  7816                           ;EEPROM.c: 129: EEPROM_write(addr, byte_i);
  7817  00442C  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7818  004430  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7819  004434  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  7820  004438  EC4F  F024         	call	_EEPROM_write	;wreg free
  7821                           
  7822                           ;EEPROM.c: 130: addr++;
  7823  00443C  0100               	movlb	0	; () banked
  7824  00443E  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7825  004440  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7826                           
  7827                           ; BSR set to: 0
  7828  004442  0100               	movlb	0	; () banked
  7829  004444  4BB7               	infsnz	logRun@i& (0+255),f,b
  7830  004446  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  7831                           
  7832                           ; BSR set to: 0
  7833  004448  0100               	movlb	0	; () banked
  7834  00444A  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  7835  00444C  D7E1               	goto	l10334
  7836  00444E  0100               	movlb	0	; () banked
  7837  004450  51B8               	movf	(logRun@i+1)& (0+255),w,b
  7838  004452  E101               	bnz	u10390
  7839  004454  D7D8               	goto	L9
  7840  004456                     u10390:
  7841  004456                     l1189:
  7842                           
  7843                           ; BSR set to: 0
  7844                           ;EEPROM.c: 131: }
  7845                           ;EEPROM.c: 134: unsigned char byte11 = total_time;
  7846  004456  C0FA  F0B6         	movff	_total_time,logRun@byte11
  7847                           
  7848                           ; BSR set to: 0
  7849                           ;EEPROM.c: 135: EEPROM_write(addr, byte11);
  7850  00445A  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7851  00445E  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7852  004462  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  7853  004466  EC4F  F024         	call	_EEPROM_write	;wreg free
  7854  00446A  0012               	return		;funcret
  7855  00446C                     __end_of_logRun:
  7856                           	opt stack 0
  7857                           tblptru	equ	0xFF8
  7858                           tblptrh	equ	0xFF7
  7859                           tblptrl	equ	0xFF6
  7860                           tablat	equ	0xFF5
  7861                           prodh	equ	0xFF4
  7862                           prodl	equ	0xFF3
  7863                           intcon	equ	0xFF2
  7864                           intcon2	equ	0xFF1
  7865                           intcon3	equ	0xFF0
  7866                           postinc0	equ	0xFEE
  7867                           wreg	equ	0xFE8
  7868                           postdec1	equ	0xFE5
  7869                           fsr1l	equ	0xFE1
  7870                           indf2	equ	0xFDF
  7871                           postinc2	equ	0xFDE
  7872                           postdec2	equ	0xFDD
  7873                           fsr2h	equ	0xFDA
  7874                           fsr2l	equ	0xFD9
  7875                           status	equ	0xFD8
  7876                           
  7877 ;; *************** function _initUI *****************
  7878 ;; Defined at:
  7879 ;;		line 62 in file "UI.c"
  7880 ;; Parameters:    Size  Location     Type
  7881 ;;		None
  7882 ;; Auto vars:     Size  Location     Type
  7883 ;;		None
  7884 ;; Return value:  Size  Location     Type
  7885 ;;                  1    wreg      void 
  7886 ;; Registers used:
  7887 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7888 ;; Tracked objects:
  7889 ;;		On entry : 0/0
  7890 ;;		On exit  : 0/0
  7891 ;;		Unchanged: 0/0
  7892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7894 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7896 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7897 ;;Total ram usage:        0 bytes
  7898 ;; Hardware stack levels used:    1
  7899 ;; Hardware stack levels required when called:   12
  7900 ;; This function calls:
  7901 ;;		_change_state_to_menu_start
  7902 ;;		_loadRTC
  7903 ;; This function is called by:
  7904 ;;		_main
  7905 ;; This function uses a non-reentrant model
  7906 ;;
  7907                           
  7908                           	psect	text17
  7909  005C68                     __ptext17:
  7910                           	opt stack 0
  7911  005C68                     _initUI:
  7912                           	opt stack 18
  7913                           
  7914                           ;UI.c: 63: (INTCONbits.GIE = 1);
  7915                           
  7916                           ;incstack = 0
  7917  005C68  8EF2               	bsf	intcon,7,c	;volatile
  7918                           
  7919                           ;UI.c: 64: machine_state = UI_state;
  7920  005C6A  0E00               	movlw	0
  7921  005C6C  0100               	movlb	0	; () banked
  7922  005C6E  6FFC               	movwf	_machine_state& (0+255),b
  7923                           
  7924                           ;UI.c: 65: logstate = 0;
  7925  005C70  0E00               	movlw	0
  7926  005C72  0100               	movlb	0	; () banked
  7927  005C74  6FF9               	movwf	(_logstate+1)& (0+255),b
  7928  005C76  0E00               	movlw	0
  7929  005C78  6FF8               	movwf	_logstate& (0+255),b
  7930                           
  7931                           ; BSR set to: 0
  7932                           ;UI.c: 67: if(RTCflag){
  7933  005C7A  0100               	movlb	0	; () banked
  7934  005C7C  51E6               	movf	_RTCflag& (0+255),w,b
  7935  005C7E  0100               	movlb	0	; () banked
  7936  005C80  11E7               	iorwf	(_RTCflag+1)& (0+255),w,b
  7937  005C82  A4D8               	btfss	status,2,c
  7938                           
  7939                           ; BSR set to: 0
  7940                           ;UI.c: 68: loadRTC();
  7941  005C84  ECEA  F028         	call	_loadRTC	;wreg free
  7942                           
  7943                           ;UI.c: 69: }
  7944                           ;UI.c: 71: change_state_to_menu_start();
  7945  005C88  EC52  F02F         	call	_change_state_to_menu_start	;wreg free
  7946                           
  7947                           ;UI.c: 72: firstboot = 1;
  7948  005C8C  0E00               	movlw	0
  7949  005C8E  0101               	movlb	1	; () banked
  7950  005C90  6F3C               	movwf	(_firstboot+1)& (0+255),b
  7951  005C92  0E01               	movlw	1
  7952  005C94  6F3B               	movwf	_firstboot& (0+255),b
  7953                           
  7954                           ; BSR set to: 1
  7955  005C96  0012               	return		;funcret
  7956  005C98                     __end_of_initUI:
  7957                           	opt stack 0
  7958                           tblptru	equ	0xFF8
  7959                           tblptrh	equ	0xFF7
  7960                           tblptrl	equ	0xFF6
  7961                           tablat	equ	0xFF5
  7962                           prodh	equ	0xFF4
  7963                           prodl	equ	0xFF3
  7964                           intcon	equ	0xFF2
  7965                           intcon2	equ	0xFF1
  7966                           intcon3	equ	0xFF0
  7967                           postinc0	equ	0xFEE
  7968                           wreg	equ	0xFE8
  7969                           postdec1	equ	0xFE5
  7970                           fsr1l	equ	0xFE1
  7971                           indf2	equ	0xFDF
  7972                           postinc2	equ	0xFDE
  7973                           postdec2	equ	0xFDD
  7974                           fsr2h	equ	0xFDA
  7975                           fsr2l	equ	0xFD9
  7976                           status	equ	0xFD8
  7977                           
  7978 ;; *************** function _loadRTC *****************
  7979 ;; Defined at:
  7980 ;;		line 28 in file "RTC.c"
  7981 ;; Parameters:    Size  Location     Type
  7982 ;;		None
  7983 ;; Auto vars:     Size  Location     Type
  7984 ;;  i               2   22[BANK0 ] int 
  7985 ;; Return value:  Size  Location     Type
  7986 ;;                  1    wreg      void 
  7987 ;; Registers used:
  7988 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7989 ;; Tracked objects:
  7990 ;;		On entry : 0/0
  7991 ;;		On exit  : 0/0
  7992 ;;		Unchanged: 0/0
  7993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7995 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7996 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7997 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7998 ;;Total ram usage:        3 bytes
  7999 ;; Hardware stack levels used:    1
  8000 ;; Hardware stack levels required when called:    9
  8001 ;; This function calls:
  8002 ;;		_I2C_Master_Init
  8003 ;;		_I2C_Master_Start
  8004 ;;		_I2C_Master_Stop
  8005 ;;		_I2C_Master_Write
  8006 ;; This function is called by:
  8007 ;;		_initUI
  8008 ;; This function uses a non-reentrant model
  8009 ;;
  8010                           
  8011                           	psect	text18
  8012  0051D4                     __ptext18:
  8013                           	opt stack 0
  8014  0051D4                     _loadRTC:
  8015                           	opt stack 20
  8016                           
  8017                           ;RTC.c: 30: I2C_Master_Init(10000);
  8018                           
  8019                           ; BSR set to: 1
  8020                           ;incstack = 0
  8021  0051D4  0E10               	movlw	16
  8022  0051D6  0100               	movlb	0	; () banked
  8023  0051D8  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  8024  0051DA  0E27               	movlw	39
  8025  0051DC  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  8026  0051DE  0E00               	movlw	0
  8027  0051E0  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  8028  0051E2  0E00               	movlw	0
  8029  0051E4  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  8030  0051E6  ECEB  F02B         	call	_I2C_Master_Init	;wreg free
  8031                           
  8032                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  8033  0051EA  9EF2               	bcf	intcon,7,c	;volatile
  8034                           
  8035                           ;RTC.c: 34: I2C_Master_Start();
  8036  0051EC  ECA3  F030         	call	_I2C_Master_Start	;wreg free
  8037                           
  8038                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  8039  0051F0  0E00               	movlw	0
  8040  0051F2  0100               	movlb	0	; () banked
  8041  0051F4  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8042  0051F6  0ED0               	movlw	208
  8043  0051F8  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8044  0051FA  EC91  F030         	call	_I2C_Master_Write	;wreg free
  8045                           
  8046                           ;RTC.c: 36: I2C_Master_Write(0x00);
  8047  0051FE  0E00               	movlw	0
  8048  005200  0100               	movlb	0	; () banked
  8049  005202  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8050  005204  0E00               	movlw	0
  8051  005206  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8052  005208  EC91  F030         	call	_I2C_Master_Write	;wreg free
  8053                           
  8054                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  8055  00520C  0E00               	movlw	0
  8056  00520E  0100               	movlb	0	; () banked
  8057  005210  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  8058  005212  0E00               	movlw	0
  8059  005214  6F96               	movwf	loadRTC@i& (0+255),b
  8060  005216                     l7890:
  8061                           
  8062                           ; BSR set to: 0
  8063  005216  0100               	movlb	0	; () banked
  8064  005218  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  8065  00521A  D008               	goto	l7894
  8066  00521C  0100               	movlb	0	; () banked
  8067  00521E  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  8068  005220  E11B               	bnz	l7900
  8069  005222  0E07               	movlw	7
  8070  005224  0100               	movlb	0	; () banked
  8071  005226  5D96               	subwf	loadRTC@i& (0+255),w,b
  8072  005228  B0D8               	btfsc	status,0,c
  8073  00522A  D016               	goto	l7900
  8074  00522C                     l7894:
  8075                           
  8076                           ; BSR set to: 0
  8077                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  8078  00522C  0E1C               	movlw	low _time
  8079  00522E  0100               	movlb	0	; () banked
  8080  005230  2596               	addwf	loadRTC@i& (0+255),w,b
  8081  005232  6ED9               	movwf	fsr2l,c
  8082  005234  0E01               	movlw	high _time
  8083  005236  0100               	movlb	0	; () banked
  8084  005238  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  8085  00523A  6EDA               	movwf	fsr2h,c
  8086  00523C  50DF               	movf	indf2,w,c
  8087  00523E  0100               	movlb	0	; () banked
  8088  005240  6F95               	movwf	??_loadRTC& (0+255),b
  8089  005242  0100               	movlb	0	; () banked
  8090  005244  5195               	movf	??_loadRTC& (0+255),w,b
  8091  005246  0100               	movlb	0	; () banked
  8092  005248  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8093  00524A  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  8094  00524C  EC91  F030         	call	_I2C_Master_Write	;wreg free
  8095  005250  0100               	movlb	0	; () banked
  8096  005252  4B96               	infsnz	loadRTC@i& (0+255),f,b
  8097  005254  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  8098  005256  D7DF               	goto	l7890
  8099  005258                     l7900:
  8100                           
  8101                           ; BSR set to: 0
  8102                           ;RTC.c: 39: }
  8103                           ;RTC.c: 40: I2C_Master_Stop();
  8104  005258  EC9F  F030         	call	_I2C_Master_Stop	;wreg free
  8105                           
  8106                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  8107  00525C  8EF2               	bsf	intcon,7,c	;volatile
  8108  00525E  0012               	return		;funcret
  8109  005260                     __end_of_loadRTC:
  8110                           	opt stack 0
  8111                           tblptru	equ	0xFF8
  8112                           tblptrh	equ	0xFF7
  8113                           tblptrl	equ	0xFF6
  8114                           tablat	equ	0xFF5
  8115                           prodh	equ	0xFF4
  8116                           prodl	equ	0xFF3
  8117                           intcon	equ	0xFF2
  8118                           intcon2	equ	0xFF1
  8119                           intcon3	equ	0xFF0
  8120                           postinc0	equ	0xFEE
  8121                           wreg	equ	0xFE8
  8122                           postdec1	equ	0xFE5
  8123                           fsr1l	equ	0xFE1
  8124                           indf2	equ	0xFDF
  8125                           postinc2	equ	0xFDE
  8126                           postdec2	equ	0xFDD
  8127                           fsr2h	equ	0xFDA
  8128                           fsr2l	equ	0xFD9
  8129                           status	equ	0xFD8
  8130                           
  8131 ;; *************** function _I2C_Master_Init *****************
  8132 ;; Defined at:
  8133 ;;		line 15 in file "I2C.c"
  8134 ;; Parameters:    Size  Location     Type
  8135 ;;  c               4   13[BANK0 ] const unsigned long 
  8136 ;; Auto vars:     Size  Location     Type
  8137 ;;		None
  8138 ;; Return value:  Size  Location     Type
  8139 ;;                  1    wreg      void 
  8140 ;; Registers used:
  8141 ;;		wreg, status,2, status,0, cstack
  8142 ;; Tracked objects:
  8143 ;;		On entry : 0/0
  8144 ;;		On exit  : 0/0
  8145 ;;		Unchanged: 0/0
  8146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8147 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8148 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8149 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8150 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8151 ;;Total ram usage:        8 bytes
  8152 ;; Hardware stack levels used:    1
  8153 ;; Hardware stack levels required when called:    8
  8154 ;; This function calls:
  8155 ;;		___lldiv
  8156 ;; This function is called by:
  8157 ;;		_main
  8158 ;;		_loadRTC
  8159 ;; This function uses a non-reentrant model
  8160 ;;
  8161                           
  8162                           	psect	text19
  8163  0057D6                     __ptext19:
  8164                           	opt stack 0
  8165  0057D6                     _I2C_Master_Init:
  8166                           	opt stack 20
  8167                           
  8168                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  8169                           
  8170                           ;incstack = 0
  8171  0057D6  0E00               	movlw	0
  8172  0057D8  6EC7               	movwf	4039,c	;volatile
  8173                           
  8174                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  8175  0057DA  0E28               	movlw	40
  8176  0057DC  6EC6               	movwf	4038,c	;volatile
  8177                           
  8178                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  8179  0057DE  0E00               	movlw	0
  8180  0057E0  6EC5               	movwf	4037,c	;volatile
  8181                           
  8182                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  8183  0057E2  0E00               	movlw	0
  8184  0057E4  0100               	movlb	0	; () banked
  8185  0057E6  6F80               	movwf	___lldiv@dividend& (0+255),b
  8186  0057E8  0E48               	movlw	72
  8187  0057EA  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  8188  0057EC  0EE8               	movlw	232
  8189  0057EE  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  8190  0057F0  0E01               	movlw	1
  8191  0057F2  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  8192  0057F4  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  8193  0057F8  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  8194  0057FC  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  8195  005800  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  8196  005804  0E02               	movlw	2
  8197  005806                     u6535:
  8198  005806  90D8               	bcf	status,0,c
  8199  005808  0100               	movlb	0	; () banked
  8200  00580A  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  8201  00580C  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  8202  00580E  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  8203  005810  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  8204  005812  2EE8               	decfsz	wreg,f,c
  8205  005814  D7F8               	goto	u6535
  8206  005816  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  8207  00581A  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  8208  00581E  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  8209  005822  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  8210  005826  EC9A  F027         	call	___lldiv	;wreg free
  8211  00582A  0100               	movlb	0	; () banked
  8212  00582C  0580               	decf	?___lldiv& (0+255),w,b
  8213  00582E  6EC8               	movwf	4040,c	;volatile
  8214                           
  8215                           ; BSR set to: 0
  8216                           ;I2C.c: 22: TRISC3 = 1;
  8217  005830  8694               	bsf	3988,3,c	;volatile
  8218                           
  8219                           ; BSR set to: 0
  8220                           ;I2C.c: 23: TRISC4 = 1;
  8221  005832  8894               	bsf	3988,4,c	;volatile
  8222                           
  8223                           ; BSR set to: 0
  8224  005834  0012               	return		;funcret
  8225  005836                     __end_of_I2C_Master_Init:
  8226                           	opt stack 0
  8227                           tblptru	equ	0xFF8
  8228                           tblptrh	equ	0xFF7
  8229                           tblptrl	equ	0xFF6
  8230                           tablat	equ	0xFF5
  8231                           prodh	equ	0xFF4
  8232                           prodl	equ	0xFF3
  8233                           intcon	equ	0xFF2
  8234                           intcon2	equ	0xFF1
  8235                           intcon3	equ	0xFF0
  8236                           postinc0	equ	0xFEE
  8237                           wreg	equ	0xFE8
  8238                           postdec1	equ	0xFE5
  8239                           fsr1l	equ	0xFE1
  8240                           indf2	equ	0xFDF
  8241                           postinc2	equ	0xFDE
  8242                           postdec2	equ	0xFDD
  8243                           fsr2h	equ	0xFDA
  8244                           fsr2l	equ	0xFD9
  8245                           status	equ	0xFD8
  8246                           
  8247 ;; *************** function ___lldiv *****************
  8248 ;; Defined at:
  8249 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  8250 ;; Parameters:    Size  Location     Type
  8251 ;;  dividend        4    0[BANK0 ] unsigned long 
  8252 ;;  divisor         4    4[BANK0 ] unsigned long 
  8253 ;; Auto vars:     Size  Location     Type
  8254 ;;  quotient        4    8[BANK0 ] unsigned long 
  8255 ;;  counter         1   12[BANK0 ] unsigned char 
  8256 ;; Return value:  Size  Location     Type
  8257 ;;                  4    0[BANK0 ] unsigned long 
  8258 ;; Registers used:
  8259 ;;		wreg, status,2, status,0
  8260 ;; Tracked objects:
  8261 ;;		On entry : 0/0
  8262 ;;		On exit  : 0/0
  8263 ;;		Unchanged: 0/0
  8264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8265 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8266 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8268 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8269 ;;Total ram usage:       13 bytes
  8270 ;; Hardware stack levels used:    1
  8271 ;; Hardware stack levels required when called:    7
  8272 ;; This function calls:
  8273 ;;		Nothing
  8274 ;; This function is called by:
  8275 ;;		_I2C_Master_Init
  8276 ;; This function uses a non-reentrant model
  8277 ;;
  8278                           
  8279                           	psect	text20
  8280  004F34                     __ptext20:
  8281                           	opt stack 0
  8282  004F34                     ___lldiv:
  8283                           	opt stack 20
  8284                           
  8285                           ; BSR set to: 0
  8286                           ;incstack = 0
  8287  004F34  0E00               	movlw	0
  8288  004F36  0100               	movlb	0	; () banked
  8289  004F38  6F88               	movwf	___lldiv@quotient& (0+255),b
  8290  004F3A  0E00               	movlw	0
  8291  004F3C  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  8292  004F3E  0E00               	movlw	0
  8293  004F40  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  8294  004F42  0E00               	movlw	0
  8295  004F44  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  8296                           
  8297                           ; BSR set to: 0
  8298  004F46  0100               	movlb	0	; () banked
  8299  004F48  5184               	movf	___lldiv@divisor& (0+255),w,b
  8300  004F4A  0100               	movlb	0	; () banked
  8301  004F4C  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  8302  004F4E  0100               	movlb	0	; () banked
  8303  004F50  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  8304  004F52  0100               	movlb	0	; () banked
  8305  004F54  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  8306  004F56  B4D8               	btfsc	status,2,c
  8307  004F58  D042               	goto	l1982
  8308                           
  8309                           ; BSR set to: 0
  8310  004F5A  0E01               	movlw	1
  8311  004F5C  0100               	movlb	0	; () banked
  8312  004F5E  6F8C               	movwf	___lldiv@counter& (0+255),b
  8313  004F60  D008               	goto	l7214
  8314  004F62                     l7212:
  8315                           
  8316                           ; BSR set to: 0
  8317  004F62  0100               	movlb	0	; () banked
  8318  004F64  90D8               	bcf	status,0,c
  8319  004F66  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  8320  004F68  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  8321  004F6A  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  8322  004F6C  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  8323  004F6E  0100               	movlb	0	; () banked
  8324  004F70  2B8C               	incf	___lldiv@counter& (0+255),f,b
  8325  004F72                     l7214:
  8326                           
  8327                           ; BSR set to: 0
  8328  004F72  0100               	movlb	0	; () banked
  8329  004F74  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  8330  004F76  D7F5               	goto	l7212
  8331  004F78                     l7216:
  8332                           
  8333                           ; BSR set to: 0
  8334  004F78  0100               	movlb	0	; () banked
  8335  004F7A  90D8               	bcf	status,0,c
  8336  004F7C  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  8337  004F7E  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  8338  004F80  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  8339  004F82  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  8340                           
  8341                           ; BSR set to: 0
  8342  004F84  0100               	movlb	0	; () banked
  8343  004F86  5184               	movf	___lldiv@divisor& (0+255),w,b
  8344  004F88  0100               	movlb	0	; () banked
  8345  004F8A  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  8346  004F8C  0100               	movlb	0	; () banked
  8347  004F8E  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  8348  004F90  0100               	movlb	0	; () banked
  8349  004F92  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  8350  004F94  0100               	movlb	0	; () banked
  8351  004F96  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  8352  004F98  0100               	movlb	0	; () banked
  8353  004F9A  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  8354  004F9C  0100               	movlb	0	; () banked
  8355  004F9E  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  8356  004FA0  0100               	movlb	0	; () banked
  8357  004FA2  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  8358  004FA4  A0D8               	btfss	status,0,c
  8359  004FA6  D012               	goto	l7224
  8360                           
  8361                           ; BSR set to: 0
  8362  004FA8  0100               	movlb	0	; () banked
  8363  004FAA  5184               	movf	___lldiv@divisor& (0+255),w,b
  8364  004FAC  0100               	movlb	0	; () banked
  8365  004FAE  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  8366  004FB0  0100               	movlb	0	; () banked
  8367  004FB2  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  8368  004FB4  0100               	movlb	0	; () banked
  8369  004FB6  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  8370  004FB8  0100               	movlb	0	; () banked
  8371  004FBA  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  8372  004FBC  0100               	movlb	0	; () banked
  8373  004FBE  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  8374  004FC0  0100               	movlb	0	; () banked
  8375  004FC2  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  8376  004FC4  0100               	movlb	0	; () banked
  8377  004FC6  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  8378                           
  8379                           ; BSR set to: 0
  8380  004FC8  0100               	movlb	0	; () banked
  8381  004FCA  8188               	bsf	___lldiv@quotient& (0+255),0,b
  8382  004FCC                     l7224:
  8383                           
  8384                           ; BSR set to: 0
  8385  004FCC  0100               	movlb	0	; () banked
  8386  004FCE  90D8               	bcf	status,0,c
  8387  004FD0  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  8388  004FD2  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  8389  004FD4  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  8390  004FD6  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  8391                           
  8392                           ; BSR set to: 0
  8393  004FD8  0100               	movlb	0	; () banked
  8394  004FDA  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  8395  004FDC  D7CD               	goto	l7216
  8396  004FDE                     l1982:
  8397                           
  8398                           ; BSR set to: 0
  8399  004FDE  C088  F080         	movff	___lldiv@quotient,?___lldiv
  8400  004FE2  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  8401  004FE6  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  8402  004FEA  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  8403                           
  8404                           ; BSR set to: 0
  8405  004FEE  0012               	return		;funcret
  8406  004FF0                     __end_of___lldiv:
  8407                           	opt stack 0
  8408                           tblptru	equ	0xFF8
  8409                           tblptrh	equ	0xFF7
  8410                           tblptrl	equ	0xFF6
  8411                           tablat	equ	0xFF5
  8412                           prodh	equ	0xFF4
  8413                           prodl	equ	0xFF3
  8414                           intcon	equ	0xFF2
  8415                           intcon2	equ	0xFF1
  8416                           intcon3	equ	0xFF0
  8417                           postinc0	equ	0xFEE
  8418                           wreg	equ	0xFE8
  8419                           postdec1	equ	0xFE5
  8420                           fsr1l	equ	0xFE1
  8421                           indf2	equ	0xFDF
  8422                           postinc2	equ	0xFDE
  8423                           postdec2	equ	0xFDD
  8424                           fsr2h	equ	0xFDA
  8425                           fsr2l	equ	0xFD9
  8426                           status	equ	0xFD8
  8427                           
  8428 ;; *************** function _change_state_to_menu_start *****************
  8429 ;; Defined at:
  8430 ;;		line 477 in file "UI.c"
  8431 ;; Parameters:    Size  Location     Type
  8432 ;;		None
  8433 ;; Auto vars:     Size  Location     Type
  8434 ;;		None
  8435 ;; Return value:  Size  Location     Type
  8436 ;;                  1    wreg      void 
  8437 ;; Registers used:
  8438 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8439 ;; Tracked objects:
  8440 ;;		On entry : 0/0
  8441 ;;		On exit  : 0/0
  8442 ;;		Unchanged: 0/0
  8443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8447 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8448 ;;Total ram usage:        0 bytes
  8449 ;; Hardware stack levels used:    1
  8450 ;; Hardware stack levels required when called:   11
  8451 ;; This function calls:
  8452 ;;		_lcdInst
  8453 ;;		_printRTC
  8454 ;;		_printf
  8455 ;; This function is called by:
  8456 ;;		_initUI
  8457 ;; This function uses a non-reentrant model
  8458 ;;
  8459                           
  8460                           	psect	text21
  8461  005EA4                     __ptext21:
  8462                           	opt stack 0
  8463  005EA4                     _change_state_to_menu_start:
  8464                           	opt stack 18
  8465                           
  8466                           ;UI.c: 478: cur_state = 0;
  8467                           
  8468                           ; BSR set to: 0
  8469                           ;incstack = 0
  8470  005EA4  0E00               	movlw	0
  8471  005EA6  0100               	movlb	0	; () banked
  8472  005EA8  6FE9               	movwf	(_cur_state+1)& (0+255),b
  8473  005EAA  0E00               	movlw	0
  8474  005EAC  6FE8               	movwf	_cur_state& (0+255),b
  8475                           
  8476                           ; BSR set to: 0
  8477                           ;UI.c: 480: lcdInst(0b10000000);;
  8478  005EAE  0E80               	movlw	128
  8479  005EB0  EC7D  F030         	call	_lcdInst
  8480                           
  8481                           ;UI.c: 481: printRTC();
  8482  005EB4  EC02  F01A         	call	_printRTC	;wreg free
  8483                           
  8484                           ;UI.c: 482: lcdInst(0b11000000);;
  8485  005EB8  0EC0               	movlw	192
  8486  005EBA  EC7D  F030         	call	_lcdInst
  8487                           
  8488                           ;UI.c: 483: printf("PUSH TO CONTINUE");
  8489  005EBE  0E10               	movlw	low STR_30
  8490  005EC0  0100               	movlb	0	; () banked
  8491  005EC2  6F8E               	movwf	printf@f& (0+255),b
  8492  005EC4  0EFE               	movlw	high STR_30
  8493  005EC6  0100               	movlb	0	; () banked
  8494  005EC8  6F8F               	movwf	(printf@f+1)& (0+255),b
  8495  005ECA  EC17  F00F         	call	_printf	;wreg free
  8496  005ECE  0012               	return		;funcret
  8497  005ED0                     __end_of_change_state_to_menu_start:
  8498                           	opt stack 0
  8499                           tblptru	equ	0xFF8
  8500                           tblptrh	equ	0xFF7
  8501                           tblptrl	equ	0xFF6
  8502                           tablat	equ	0xFF5
  8503                           prodh	equ	0xFF4
  8504                           prodl	equ	0xFF3
  8505                           intcon	equ	0xFF2
  8506                           intcon2	equ	0xFF1
  8507                           intcon3	equ	0xFF0
  8508                           postinc0	equ	0xFEE
  8509                           wreg	equ	0xFE8
  8510                           postdec1	equ	0xFE5
  8511                           fsr1l	equ	0xFE1
  8512                           indf2	equ	0xFDF
  8513                           postinc2	equ	0xFDE
  8514                           postdec2	equ	0xFDD
  8515                           fsr2h	equ	0xFDA
  8516                           fsr2l	equ	0xFD9
  8517                           status	equ	0xFD8
  8518                           
  8519 ;; *************** function _initTime *****************
  8520 ;; Defined at:
  8521 ;;		line 17 in file "RTC.c"
  8522 ;; Parameters:    Size  Location     Type
  8523 ;;  s               1    wreg     unsigned char 
  8524 ;;  m               1    0[BANK0 ] unsigned char 
  8525 ;;  h               1    1[BANK0 ] unsigned char 
  8526 ;;  w               1    2[BANK0 ] unsigned char 
  8527 ;;  DD              1    3[BANK0 ] unsigned char 
  8528 ;;  MM              1    4[BANK0 ] unsigned char 
  8529 ;;  YY              1    5[BANK0 ] unsigned char 
  8530 ;; Auto vars:     Size  Location     Type
  8531 ;;  s               1    6[BANK0 ] unsigned char 
  8532 ;; Return value:  Size  Location     Type
  8533 ;;                  1    wreg      void 
  8534 ;; Registers used:
  8535 ;;		wreg
  8536 ;; Tracked objects:
  8537 ;;		On entry : 0/0
  8538 ;;		On exit  : 0/0
  8539 ;;		Unchanged: 0/0
  8540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8541 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8542 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8544 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8545 ;;Total ram usage:        7 bytes
  8546 ;; Hardware stack levels used:    1
  8547 ;; Hardware stack levels required when called:    7
  8548 ;; This function calls:
  8549 ;;		Nothing
  8550 ;; This function is called by:
  8551 ;;		_main
  8552 ;; This function uses a non-reentrant model
  8553 ;;
  8554                           
  8555                           	psect	text22
  8556  006008                     __ptext22:
  8557                           	opt stack 0
  8558  006008                     _initTime:
  8559                           	opt stack 23
  8560                           
  8561                           ;incstack = 0
  8562                           ;initTime@s stored from wreg
  8563  006008  0100               	movlb	0	; () banked
  8564  00600A  6F86               	movwf	initTime@s& (0+255),b
  8565                           
  8566                           ;RTC.c: 19: time[0] = s;
  8567  00600C  C086  F11C         	movff	initTime@s,_time
  8568                           
  8569                           ;RTC.c: 20: time[1] = m;
  8570  006010  C080  F11D         	movff	initTime@m,_time+1
  8571                           
  8572                           ;RTC.c: 21: time[2] = h;
  8573  006014  C081  F11E         	movff	initTime@h,_time+2
  8574                           
  8575                           ;RTC.c: 22: time[3] = w;
  8576  006018  C082  F11F         	movff	initTime@w,_time+3
  8577                           
  8578                           ;RTC.c: 23: time[4] = DD;
  8579  00601C  C083  F120         	movff	initTime@DD,_time+4
  8580                           
  8581                           ;RTC.c: 24: time[5] = MM;
  8582  006020  C084  F121         	movff	initTime@MM,_time+5
  8583                           
  8584                           ;RTC.c: 25: time[6] = YY;
  8585  006024  C085  F122         	movff	initTime@YY,_time+6
  8586  006028  0012               	return		;funcret
  8587  00602A                     __end_of_initTime:
  8588                           	opt stack 0
  8589                           tblptru	equ	0xFF8
  8590                           tblptrh	equ	0xFF7
  8591                           tblptrl	equ	0xFF6
  8592                           tablat	equ	0xFF5
  8593                           prodh	equ	0xFF4
  8594                           prodl	equ	0xFF3
  8595                           intcon	equ	0xFF2
  8596                           intcon2	equ	0xFF1
  8597                           intcon3	equ	0xFF0
  8598                           postinc0	equ	0xFEE
  8599                           wreg	equ	0xFE8
  8600                           postdec1	equ	0xFE5
  8601                           fsr1l	equ	0xFE1
  8602                           indf2	equ	0xFDF
  8603                           postinc2	equ	0xFDE
  8604                           postdec2	equ	0xFDD
  8605                           fsr2h	equ	0xFDA
  8606                           fsr2l	equ	0xFD9
  8607                           status	equ	0xFD8
  8608                           
  8609 ;; *************** function _initLCD *****************
  8610 ;; Defined at:
  8611 ;;		line 50 in file "lcd.c"
  8612 ;; Parameters:    Size  Location     Type
  8613 ;;		None
  8614 ;; Auto vars:     Size  Location     Type
  8615 ;;		None
  8616 ;; Return value:  Size  Location     Type
  8617 ;;                  1    wreg      void 
  8618 ;; Registers used:
  8619 ;;		wreg, status,2, status,0, cstack
  8620 ;; Tracked objects:
  8621 ;;		On entry : 0/0
  8622 ;;		On exit  : 0/0
  8623 ;;		Unchanged: 0/0
  8624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8627 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8628 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8629 ;;Total ram usage:        1 bytes
  8630 ;; Hardware stack levels used:    1
  8631 ;; Hardware stack levels required when called:    9
  8632 ;; This function calls:
  8633 ;;		_lcdInst
  8634 ;; This function is called by:
  8635 ;;		_main
  8636 ;; This function uses a non-reentrant model
  8637 ;;
  8638                           
  8639                           	psect	text23
  8640  005A24                     __ptext23:
  8641                           	opt stack 0
  8642  005A24                     _initLCD:
  8643                           	opt stack 21
  8644                           
  8645                           ;lcd.c: 51: _delay((unsigned long)((15)*(32000000/4000.0)));
  8646                           
  8647                           ;incstack = 0
  8648  005A24  0E9C               	movlw	156
  8649  005A26  0100               	movlb	0	; () banked
  8650  005A28  6F83               	movwf	??_initLCD& (0+255),b
  8651  005A2A  0ED7               	movlw	215
  8652  005A2C                     u11347:
  8653  005A2C  2EE8               	decfsz	wreg,f,c
  8654  005A2E  D7FE               	bra	u11347
  8655  005A30  2F83               	decfsz	??_initLCD& (0+255),f,b
  8656  005A32  D7FC               	bra	u11347
  8657                           
  8658                           ;lcd.c: 52: lcdInst(0b00110011);
  8659  005A34  0E33               	movlw	51
  8660  005A36  EC7D  F030         	call	_lcdInst
  8661                           
  8662                           ;lcd.c: 53: lcdInst(0b00110010);
  8663  005A3A  0E32               	movlw	50
  8664  005A3C  EC7D  F030         	call	_lcdInst
  8665                           
  8666                           ;lcd.c: 55: lcdInst(0b00101000);
  8667  005A40  0E28               	movlw	40
  8668  005A42  EC7D  F030         	call	_lcdInst
  8669                           
  8670                           ;lcd.c: 56: lcdInst(0b00001100);
  8671  005A46  0E0C               	movlw	12
  8672  005A48  EC7D  F030         	call	_lcdInst
  8673                           
  8674                           ;lcd.c: 57: lcdInst(0b00000110);
  8675  005A4C  0E06               	movlw	6
  8676  005A4E  EC7D  F030         	call	_lcdInst
  8677                           
  8678                           ;lcd.c: 58: lcdInst(0b00000001);
  8679  005A52  0E01               	movlw	1
  8680  005A54  EC7D  F030         	call	_lcdInst
  8681                           
  8682                           ;lcd.c: 59: _delay((unsigned long)((15)*(32000000/4000.0)));
  8683  005A58  0E9C               	movlw	156
  8684  005A5A  0100               	movlb	0	; () banked
  8685  005A5C  6F83               	movwf	??_initLCD& (0+255),b
  8686  005A5E  0ED7               	movlw	215
  8687  005A60                     u11357:
  8688  005A60  2EE8               	decfsz	wreg,f,c
  8689  005A62  D7FE               	bra	u11357
  8690  005A64  2F83               	decfsz	??_initLCD& (0+255),f,b
  8691  005A66  D7FC               	bra	u11357
  8692  005A68  0012               	return		;funcret
  8693  005A6A                     __end_of_initLCD:
  8694                           	opt stack 0
  8695                           tblptru	equ	0xFF8
  8696                           tblptrh	equ	0xFF7
  8697                           tblptrl	equ	0xFF6
  8698                           tablat	equ	0xFF5
  8699                           prodh	equ	0xFF4
  8700                           prodl	equ	0xFF3
  8701                           intcon	equ	0xFF2
  8702                           intcon2	equ	0xFF1
  8703                           intcon3	equ	0xFF0
  8704                           postinc0	equ	0xFEE
  8705                           wreg	equ	0xFE8
  8706                           postdec1	equ	0xFE5
  8707                           fsr1l	equ	0xFE1
  8708                           indf2	equ	0xFDF
  8709                           postinc2	equ	0xFDE
  8710                           postdec2	equ	0xFDD
  8711                           fsr2h	equ	0xFDA
  8712                           fsr2l	equ	0xFD9
  8713                           status	equ	0xFD8
  8714                           
  8715 ;; *************** function _initEEPROM *****************
  8716 ;; Defined at:
  8717 ;;		line 32 in file "EEPROM.c"
  8718 ;; Parameters:    Size  Location     Type
  8719 ;;		None
  8720 ;; Auto vars:     Size  Location     Type
  8721 ;;		None
  8722 ;; Return value:  Size  Location     Type
  8723 ;;                  1    wreg      void 
  8724 ;; Registers used:
  8725 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8726 ;; Tracked objects:
  8727 ;;		On entry : 0/0
  8728 ;;		On exit  : 0/0
  8729 ;;		Unchanged: 0/0
  8730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8734 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8735 ;;Total ram usage:        0 bytes
  8736 ;; Hardware stack levels used:    1
  8737 ;; Hardware stack levels required when called:   11
  8738 ;; This function calls:
  8739 ;;		_EEPROM_write
  8740 ;; This function is called by:
  8741 ;;		_main
  8742 ;; This function uses a non-reentrant model
  8743 ;;
  8744                           
  8745                           	psect	text24
  8746  006098                     __ptext24:
  8747                           	opt stack 0
  8748  006098                     _initEEPROM:
  8749                           	opt stack 19
  8750                           
  8751                           ;EEPROM.c: 33: EEPROM_write(0, 0x01);
  8752                           
  8753                           ;incstack = 0
  8754  006098  0E00               	movlw	0
  8755  00609A  0100               	movlb	0	; () banked
  8756  00609C  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  8757  00609E  0E00               	movlw	0
  8758  0060A0  6FAB               	movwf	EEPROM_write@address& (0+255),b
  8759  0060A2  0E01               	movlw	1
  8760  0060A4  0100               	movlb	0	; () banked
  8761  0060A6  6FAD               	movwf	EEPROM_write@data& (0+255),b
  8762  0060A8  EC4F  F024         	call	_EEPROM_write	;wreg free
  8763  0060AC  0012               	return		;funcret
  8764  0060AE                     __end_of_initEEPROM:
  8765                           	opt stack 0
  8766                           tblptru	equ	0xFF8
  8767                           tblptrh	equ	0xFF7
  8768                           tblptrl	equ	0xFF6
  8769                           tablat	equ	0xFF5
  8770                           prodh	equ	0xFF4
  8771                           prodl	equ	0xFF3
  8772                           intcon	equ	0xFF2
  8773                           intcon2	equ	0xFF1
  8774                           intcon3	equ	0xFF0
  8775                           postinc0	equ	0xFEE
  8776                           wreg	equ	0xFE8
  8777                           postdec1	equ	0xFE5
  8778                           fsr1l	equ	0xFE1
  8779                           indf2	equ	0xFDF
  8780                           postinc2	equ	0xFDE
  8781                           postdec2	equ	0xFDD
  8782                           fsr2h	equ	0xFDA
  8783                           fsr2l	equ	0xFD9
  8784                           status	equ	0xFD8
  8785                           
  8786 ;; *************** function _EEPROM_write *****************
  8787 ;; Defined at:
  8788 ;;		line 36 in file "EEPROM.c"
  8789 ;; Parameters:    Size  Location     Type
  8790 ;;  address         2   43[BANK0 ] unsigned short 
  8791 ;;  data            1   45[BANK0 ] unsigned char 
  8792 ;; Auto vars:     Size  Location     Type
  8793 ;;  i               1   48[BANK0 ] unsigned char 
  8794 ;;  i               1   47[BANK0 ] unsigned char 
  8795 ;; Return value:  Size  Location     Type
  8796 ;;                  1    wreg      void 
  8797 ;; Registers used:
  8798 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8799 ;; Tracked objects:
  8800 ;;		On entry : 0/0
  8801 ;;		On exit  : 0/0
  8802 ;;		Unchanged: 0/0
  8803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8804 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8805 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8806 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8807 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8808 ;;Total ram usage:        6 bytes
  8809 ;; Hardware stack levels used:    1
  8810 ;; Hardware stack levels required when called:   10
  8811 ;; This function calls:
  8812 ;;		_EEPROM_read
  8813 ;;		_lcdInst
  8814 ;;		_printf
  8815 ;; This function is called by:
  8816 ;;		_Loading
  8817 ;;		_initEEPROM
  8818 ;;		_logRun
  8819 ;; This function uses a non-reentrant model
  8820 ;;
  8821                           
  8822                           	psect	text25
  8823  00489E                     __ptext25:
  8824                           	opt stack 0
  8825  00489E                     _EEPROM_write:
  8826                           	opt stack 18
  8827                           
  8828                           ;EEPROM.c: 37: EECON1bits.WREN = 1;
  8829                           
  8830                           ;incstack = 0
  8831  00489E  84A6               	bsf	4006,2,c	;volatile
  8832                           
  8833                           ;EEPROM.c: 40: EEADRH = (unsigned char)(address >> 8);
  8834  0048A0  0100               	movlb	0	; () banked
  8835  0048A2  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  8836  0048A4  6EAA               	movwf	4010,c	;volatile
  8837                           
  8838                           ; BSR set to: 0
  8839                           ;EEPROM.c: 41: EEADR = (unsigned char)address;
  8840  0048A6  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  8841                           
  8842                           ; BSR set to: 0
  8843                           ;EEPROM.c: 43: EEDATA = data;
  8844  0048AA  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  8845                           
  8846                           ; BSR set to: 0
  8847                           ;EEPROM.c: 44: EECON1bits.EEPGD = 0;
  8848  0048AE  9EA6               	bcf	4006,7,c	;volatile
  8849                           
  8850                           ; BSR set to: 0
  8851                           ;EEPROM.c: 45: EECON1bits.CFGS = 0;
  8852  0048B0  9CA6               	bcf	4006,6,c	;volatile
  8853                           
  8854                           ; BSR set to: 0
  8855                           ;EEPROM.c: 47: (INTCONbits.GIE = 0);
  8856  0048B2  9EF2               	bcf	intcon,7,c	;volatile
  8857                           
  8858                           ;EEPROM.c: 49: EECON2 = 0x55;
  8859  0048B4  0E55               	movlw	85
  8860  0048B6  6EA7               	movwf	4007,c	;volatile
  8861                           
  8862                           ;EEPROM.c: 50: EECON2 = 0x0AA;
  8863  0048B8  0EAA               	movlw	170
  8864  0048BA  6EA7               	movwf	4007,c	;volatile
  8865                           
  8866                           ; BSR set to: 0
  8867                           ;EEPROM.c: 51: EECON1bits.WR = 1;
  8868  0048BC  82A6               	bsf	4006,1,c	;volatile
  8869                           
  8870                           ; BSR set to: 0
  8871                           ;EEPROM.c: 52: (INTCONbits.GIE = 1);
  8872  0048BE  8EF2               	bsf	intcon,7,c	;volatile
  8873  0048C0                     l1167:
  8874  0048C0  A8A1               	btfss	4001,4,c	;volatile
  8875  0048C2  D7FE               	goto	l1167
  8876                           
  8877                           ;EEPROM.c: 57: PIR2bits.EEIF = 0;
  8878  0048C4  98A1               	bcf	4001,4,c	;volatile
  8879                           
  8880                           ;EEPROM.c: 58: EECON1bits.WREN = 0;
  8881  0048C6  94A6               	bcf	4006,2,c	;volatile
  8882                           
  8883                           ;EEPROM.c: 61: if(debug){
  8884  0048C8  0101               	movlb	1	; () banked
  8885  0048CA  512D               	movf	_debug& (0+255),w,b
  8886  0048CC  0101               	movlb	1	; () banked
  8887  0048CE  112E               	iorwf	(_debug+1)& (0+255),w,b
  8888  0048D0  B4D8               	btfsc	status,2,c
  8889  0048D2  0012               	return	
  8890                           
  8891                           ; BSR set to: 1
  8892                           ;EEPROM.c: 62: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8893  0048D4  0E01               	movlw	1
  8894  0048D6  EC7D  F030         	call	_lcdInst
  8895  0048DA  0E68               	movlw	104
  8896  0048DC  0100               	movlb	0	; () banked
  8897  0048DE  6FAE               	movwf	??_EEPROM_write& (0+255),b
  8898  0048E0  0EE4               	movlw	228
  8899  0048E2                     u11367:
  8900  0048E2  2EE8               	decfsz	wreg,f,c
  8901  0048E4  D7FE               	bra	u11367
  8902  0048E6  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  8903  0048E8  D7FC               	bra	u11367
  8904  0048EA  F000               	nop	
  8905                           
  8906                           ;EEPROM.c: 63: lcdInst(0b10000000);;
  8907  0048EC  0E80               	movlw	128
  8908  0048EE  EC7D  F030         	call	_lcdInst
  8909                           
  8910                           ;EEPROM.c: 64: if(EEPROM_read(address)==data){
  8911  0048F2  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  8912  0048F6  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  8913  0048FA  EC40  F030         	call	_EEPROM_read	;wreg free
  8914  0048FE  0100               	movlb	0	; () banked
  8915  004900  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  8916  004902  A4D8               	btfss	status,2,c
  8917  004904  D024               	goto	l7662
  8918                           
  8919                           ; BSR set to: 0
  8920                           ;EEPROM.c: 65: printf("(data: %u, addr: %u)", data, address);
  8921  004906  0EE4               	movlw	low STR_66
  8922  004908  0100               	movlb	0	; () banked
  8923  00490A  6F8E               	movwf	printf@f& (0+255),b
  8924  00490C  0EFA               	movlw	high STR_66
  8925  00490E  0100               	movlb	0	; () banked
  8926  004910  6F8F               	movwf	(printf@f+1)& (0+255),b
  8927  004912  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  8928  004916  0100               	movlb	0	; () banked
  8929  004918  6B91               	clrf	(?_printf+3)& (0+255),b
  8930  00491A  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  8931  00491E  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  8932  004922  EC17  F00F         	call	_printf	;wreg free
  8933                           
  8934                           ;EEPROM.c: 66: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  8935  004926  0E00               	movlw	0
  8936  004928  0100               	movlb	0	; () banked
  8937  00492A  6FAF               	movwf	EEPROM_write@i& (0+255),b
  8938  00492C                     l7654:
  8939                           
  8940                           ; BSR set to: 0
  8941  00492C  0E63               	movlw	99
  8942  00492E  0100               	movlb	0	; () banked
  8943  004930  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  8944  004932  D001               	goto	l7658
  8945  004934  0012               	return	
  8946  004936                     l7658:
  8947                           
  8948                           ; BSR set to: 0
  8949  004936  0E68               	movlw	104
  8950  004938  0100               	movlb	0	; () banked
  8951  00493A  6FAE               	movwf	??_EEPROM_write& (0+255),b
  8952  00493C  0EE4               	movlw	228
  8953  00493E                     u11377:
  8954  00493E  2EE8               	decfsz	wreg,f,c
  8955  004940  D7FE               	bra	u11377
  8956  004942  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  8957  004944  D7FC               	bra	u11377
  8958  004946  F000               	nop	
  8959  004948  0100               	movlb	0	; () banked
  8960  00494A  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  8961  00494C  D7EF               	goto	l7654
  8962  00494E                     l7662:
  8963                           
  8964                           ; BSR set to: 0
  8965                           ;EEPROM.c: 68: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  8966  00494E  0EBD               	movlw	low STR_67
  8967  004950  0100               	movlb	0	; () banked
  8968  004952  6F8E               	movwf	printf@f& (0+255),b
  8969  004954  0EFF               	movlw	high STR_67
  8970  004956  0100               	movlb	0	; () banked
  8971  004958  6F8F               	movwf	(printf@f+1)& (0+255),b
  8972  00495A  EC17  F00F         	call	_printf	;wreg free
  8973  00495E  0E00               	movlw	0
  8974  004960  0100               	movlb	0	; () banked
  8975  004962  6FB0               	movwf	EEPROM_write@i_1420& (0+255),b
  8976  004964                     l7666:
  8977                           
  8978                           ; BSR set to: 0
  8979  004964  0E63               	movlw	99
  8980  004966  0100               	movlb	0	; () banked
  8981  004968  65B0               	cpfsgt	EEPROM_write@i_1420& (0+255),b
  8982  00496A  D001               	goto	l7670
  8983  00496C  0012               	return	
  8984  00496E                     l7670:
  8985                           
  8986                           ; BSR set to: 0
  8987  00496E  0E68               	movlw	104
  8988  004970  0100               	movlb	0	; () banked
  8989  004972  6FAE               	movwf	??_EEPROM_write& (0+255),b
  8990  004974  0EE4               	movlw	228
  8991  004976                     u11387:
  8992  004976  2EE8               	decfsz	wreg,f,c
  8993  004978  D7FE               	bra	u11387
  8994  00497A  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  8995  00497C  D7FC               	bra	u11387
  8996  00497E  F000               	nop	
  8997  004980  0100               	movlb	0	; () banked
  8998  004982  2BB0               	incf	EEPROM_write@i_1420& (0+255),f,b
  8999  004984  D7EF               	goto	l7666
  9000  004986                     __end_of_EEPROM_write:
  9001                           	opt stack 0
  9002                           tblptru	equ	0xFF8
  9003                           tblptrh	equ	0xFF7
  9004                           tblptrl	equ	0xFF6
  9005                           tablat	equ	0xFF5
  9006                           prodh	equ	0xFF4
  9007                           prodl	equ	0xFF3
  9008                           intcon	equ	0xFF2
  9009                           intcon2	equ	0xFF1
  9010                           intcon3	equ	0xFF0
  9011                           postinc0	equ	0xFEE
  9012                           wreg	equ	0xFE8
  9013                           postdec1	equ	0xFE5
  9014                           fsr1l	equ	0xFE1
  9015                           indf2	equ	0xFDF
  9016                           postinc2	equ	0xFDE
  9017                           postdec2	equ	0xFDD
  9018                           fsr2h	equ	0xFDA
  9019                           fsr2l	equ	0xFD9
  9020                           status	equ	0xFD8
  9021                           
  9022 ;; *************** function _EEPROM_read *****************
  9023 ;; Defined at:
  9024 ;;		line 72 in file "EEPROM.c"
  9025 ;; Parameters:    Size  Location     Type
  9026 ;;  address         2    0[BANK0 ] unsigned short 
  9027 ;; Auto vars:     Size  Location     Type
  9028 ;;		None
  9029 ;; Return value:  Size  Location     Type
  9030 ;;                  1    wreg      unsigned char 
  9031 ;; Registers used:
  9032 ;;		wreg, status,2
  9033 ;; Tracked objects:
  9034 ;;		On entry : 0/0
  9035 ;;		On exit  : 0/0
  9036 ;;		Unchanged: 0/0
  9037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9038 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9041 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9042 ;;Total ram usage:        2 bytes
  9043 ;; Hardware stack levels used:    1
  9044 ;; Hardware stack levels required when called:    7
  9045 ;; This function calls:
  9046 ;;		Nothing
  9047 ;; This function is called by:
  9048 ;;		_Loading
  9049 ;;		_EEPROM_write
  9050 ;;		_logRun
  9051 ;; This function uses a non-reentrant model
  9052 ;;
  9053                           
  9054                           	psect	text26
  9055  006080                     __ptext26:
  9056                           	opt stack 0
  9057  006080                     _EEPROM_read:
  9058                           	opt stack 20
  9059                           
  9060                           ;EEPROM.c: 74: EEADRH = (unsigned char)(address >> 8);
  9061                           
  9062                           ;incstack = 0
  9063  006080  0100               	movlb	0	; () banked
  9064  006082  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  9065  006084  6EAA               	movwf	4010,c	;volatile
  9066                           
  9067                           ; BSR set to: 0
  9068                           ;EEPROM.c: 75: EEADR = (unsigned char)address;
  9069  006086  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  9070                           
  9071                           ; BSR set to: 0
  9072                           ;EEPROM.c: 77: EECON1bits.EEPGD = 0;
  9073  00608A  9EA6               	bcf	4006,7,c	;volatile
  9074                           
  9075                           ; BSR set to: 0
  9076                           ;EEPROM.c: 78: EECON1bits.CFGS = 0;
  9077  00608C  9CA6               	bcf	4006,6,c	;volatile
  9078                           
  9079                           ; BSR set to: 0
  9080                           ;EEPROM.c: 79: EECON1bits.RD = 1;
  9081  00608E  80A6               	bsf	4006,0,c	;volatile
  9082  006090                     l1180:
  9083  006090  B0A6               	btfsc	4006,0,c	;volatile
  9084  006092  D7FE               	goto	l1180
  9085                           
  9086                           ;EEPROM.c: 85: return EEDATA;
  9087  006094  50A8               	movf	4008,w,c	;volatile
  9088  006096  0012               	return	
  9089  006098                     __end_of_EEPROM_read:
  9090                           	opt stack 0
  9091                           tblptru	equ	0xFF8
  9092                           tblptrh	equ	0xFF7
  9093                           tblptrl	equ	0xFF6
  9094                           tablat	equ	0xFF5
  9095                           prodh	equ	0xFF4
  9096                           prodl	equ	0xFF3
  9097                           intcon	equ	0xFF2
  9098                           intcon2	equ	0xFF1
  9099                           intcon3	equ	0xFF0
  9100                           postinc0	equ	0xFEE
  9101                           wreg	equ	0xFE8
  9102                           postdec1	equ	0xFE5
  9103                           fsr1l	equ	0xFE1
  9104                           indf2	equ	0xFDF
  9105                           postinc2	equ	0xFDE
  9106                           postdec2	equ	0xFDD
  9107                           fsr2h	equ	0xFDA
  9108                           fsr2l	equ	0xFD9
  9109                           status	equ	0xFD8
  9110                           
  9111 ;; *************** function _UI *****************
  9112 ;; Defined at:
  9113 ;;		line 76 in file "UI.c"
  9114 ;; Parameters:    Size  Location     Type
  9115 ;;		None
  9116 ;; Auto vars:     Size  Location     Type
  9117 ;;  i               1   73[BANK0 ] unsigned char 
  9118 ;;  i               1   85[BANK0 ] unsigned char 
  9119 ;;  i               1   84[BANK0 ] unsigned char 
  9120 ;;  i               1   83[BANK0 ] unsigned char 
  9121 ;;  i               1   82[BANK0 ] unsigned char 
  9122 ;;  i               1   81[BANK0 ] unsigned char 
  9123 ;;  i               1   80[BANK0 ] unsigned char 
  9124 ;;  i               1   79[BANK0 ] unsigned char 
  9125 ;;  i               1   78[BANK0 ] unsigned char 
  9126 ;;  i               1   77[BANK0 ] unsigned char 
  9127 ;;  i               1   76[BANK0 ] unsigned char 
  9128 ;;  i               1   75[BANK0 ] unsigned char 
  9129 ;;  i               1   74[BANK0 ] unsigned char 
  9130 ;;  month           4   86[BANK0 ] unsigned char [4]
  9131 ;;  i               1   72[BANK0 ] unsigned char 
  9132 ;; Return value:  Size  Location     Type
  9133 ;;                  1    wreg      void 
  9134 ;; Registers used:
  9135 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9136 ;; Tracked objects:
  9137 ;;		On entry : 0/0
  9138 ;;		On exit  : 0/0
  9139 ;;		Unchanged: 0/0
  9140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9142 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9143 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9144 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9145 ;;Total ram usage:       22 bytes
  9146 ;; Hardware stack levels used:    1
  9147 ;; Hardware stack levels required when called:   11
  9148 ;; This function calls:
  9149 ;;		___awdiv
  9150 ;;		___awmod
  9151 ;;		_change_state_to_menu_12
  9152 ;;		_change_state_to_menu_22
  9153 ;;		_lcdInst
  9154 ;;		_printRTC
  9155 ;;		_printf
  9156 ;;		_strcpy
  9157 ;; This function is called by:
  9158 ;;		_main
  9159 ;; This function uses a non-reentrant model
  9160 ;;
  9161                           
  9162                           	psect	text27
  9163  000012                     __ptext27:
  9164                           	opt stack 0
  9165  000012                     _UI:
  9166                           	opt stack 19
  9167                           
  9168                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  9169                           
  9170                           ;incstack = 0
  9171  000012  0E02               	movlw	2
  9172  000014  0100               	movlb	0	; () banked
  9173  000016  19FC               	xorwf	_machine_state& (0+255),w,b
  9174  000018  A4D8               	btfss	status,2,c
  9175  00001A  D086               	goto	l9736
  9176                           
  9177                           ; BSR set to: 0
  9178                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9179  00001C  0E01               	movlw	1
  9180  00001E  EC7D  F030         	call	_lcdInst
  9181  000022  0E68               	movlw	104
  9182  000024  0100               	movlb	0	; () banked
  9183  000026  6FC4               	movwf	??_UI& (0+255),b
  9184  000028  0EE4               	movlw	228
  9185  00002A                     u11397:
  9186  00002A  2EE8               	decfsz	wreg,f,c
  9187  00002C  D7FE               	bra	u11397
  9188  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  9189  000030  D7FC               	bra	u11397
  9190  000032  F000               	nop	
  9191                           
  9192                           ;UI.c: 79: lcdInst(0b10000000);;
  9193  000034  0E80               	movlw	128
  9194  000036  EC7D  F030         	call	_lcdInst
  9195                           
  9196                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  9197  00003A  0E89               	movlw	low STR_1
  9198  00003C  0100               	movlb	0	; () banked
  9199  00003E  6F8E               	movwf	printf@f& (0+255),b
  9200  000040  0EFB               	movlw	high STR_1
  9201  000042  0100               	movlb	0	; () banked
  9202  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  9203  000046  0E01               	movlw	1
  9204  000048  0100               	movlb	0	; () banked
  9205  00004A  25FD               	addwf	_sel& (0+255),w,b
  9206  00004C  0100               	movlb	0	; () banked
  9207  00004E  6F90               	movwf	(?_printf+2)& (0+255),b
  9208  000050  0100               	movlb	0	; () banked
  9209  000052  6B91               	clrf	(?_printf+3)& (0+255),b
  9210  000054  0E00               	movlw	0
  9211  000056  2391               	addwfc	(?_printf+3)& (0+255),f,b
  9212  000058  EC17  F00F         	call	_printf	;wreg free
  9213                           
  9214                           ;UI.c: 81: lcdInst(0b11000000);;
  9215  00005C  0EC0               	movlw	192
  9216  00005E  EC7D  F030         	call	_lcdInst
  9217                           
  9218                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  9219  000062  0E0E               	movlw	14
  9220  000064  0100               	movlb	0	; () banked
  9221  000066  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9222  000068  0E10               	movlw	16
  9223  00006A  6F82               	movwf	___awmod@divisor& (0+255),b
  9224  00006C  C0FA  F080         	movff	_total_time,___awmod@dividend
  9225  000070  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  9226  000074  EC4D  F028         	call	___awmod	;wreg free
  9227  000078  C080  F0C6         	movff	?___awmod,_UI$2442
  9228  00007C  C081  F0C7         	movff	?___awmod+1,_UI$2442+1
  9229                           
  9230                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  9231  000080  0E4E               	movlw	low STR_2
  9232  000082  0100               	movlb	0	; () banked
  9233  000084  6F8E               	movwf	printf@f& (0+255),b
  9234  000086  0EFF               	movlw	high STR_2
  9235  000088  0100               	movlb	0	; () banked
  9236  00008A  6F8F               	movwf	(printf@f+1)& (0+255),b
  9237  00008C  0E0E               	movlw	14
  9238  00008E  0100               	movlb	0	; () banked
  9239  000090  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9240  000092  0E10               	movlw	16
  9241  000094  6F82               	movwf	___awmod@divisor& (0+255),b
  9242  000096  C0FA  F080         	movff	_total_time,___awmod@dividend
  9243  00009A  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  9244  00009E  EC4D  F028         	call	___awmod	;wreg free
  9245  0000A2  C080  F086         	movff	?___awmod,___awdiv@dividend
  9246  0000A6  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  9247  0000AA  0E00               	movlw	0
  9248  0000AC  0100               	movlb	0	; () banked
  9249  0000AE  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  9250  0000B0  0E3C               	movlw	60
  9251  0000B2  6F88               	movwf	___awdiv@divisor& (0+255),b
  9252  0000B4  EC3B  F027         	call	___awdiv	;wreg free
  9253  0000B8  C086  F090         	movff	?___awdiv,?_printf+2
  9254  0000BC  C087  F091         	movff	?___awdiv+1,?_printf+3
  9255  0000C0  C0C6  F080         	movff	_UI$2442,___awmod@dividend
  9256  0000C4  C0C7  F081         	movff	_UI$2442+1,___awmod@dividend+1
  9257  0000C8  0E00               	movlw	0
  9258  0000CA  0100               	movlb	0	; () banked
  9259  0000CC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9260  0000CE  0E3C               	movlw	60
  9261  0000D0  6F82               	movwf	___awmod@divisor& (0+255),b
  9262  0000D2  EC4D  F028         	call	___awmod	;wreg free
  9263  0000D6  C080  F092         	movff	?___awmod,?_printf+4
  9264  0000DA  C081  F093         	movff	?___awmod+1,?_printf+5
  9265  0000DE  EC17  F00F         	call	_printf	;wreg free
  9266  0000E2                     l192:
  9267  0000E2  B281               	btfsc	3969,1,c	;volatile
  9268  0000E4  D7FE               	goto	l192
  9269  0000E6                     l195:
  9270  0000E6  A281               	btfss	3969,1,c	;volatile
  9271  0000E8  D7FE               	goto	l195
  9272                           
  9273                           ;UI.c: 86: }
  9274                           ;UI.c: 87: if(cur_state == 12){
  9275  0000EA  0E0C               	movlw	12
  9276  0000EC  0100               	movlb	0	; () banked
  9277  0000EE  19E8               	xorwf	_cur_state& (0+255),w,b
  9278  0000F0  0100               	movlb	0	; () banked
  9279  0000F2  11E9               	iorwf	(_cur_state+1)& (0+255),w,b
  9280  0000F4  A4D8               	btfss	status,2,c
  9281  0000F6  D003               	goto	l9730
  9282                           
  9283                           ; BSR set to: 0
  9284                           ;UI.c: 88: change_state_to_menu_12();
  9285  0000F8  ECB1  F02D         	call	_change_state_to_menu_12	;wreg free
  9286                           
  9287                           ;UI.c: 89: }
  9288  0000FC  D002               	goto	l200
  9289  0000FE                     l9730:
  9290                           
  9291                           ;UI.c: 90: else{
  9292                           ;UI.c: 91: change_state_to_menu_22();
  9293  0000FE  EC95  F02D         	call	_change_state_to_menu_22	;wreg free
  9294  000102                     l200:
  9295  000102  B281               	btfsc	3969,1,c	;volatile
  9296  000104  D7FE               	goto	l200
  9297                           
  9298                           ;UI.c: 94: _delay((unsigned long)((100)*(32000000/4000.0)));
  9299  000106  0E05               	movlw	5
  9300  000108  0100               	movlb	0	; () banked
  9301  00010A  6FC5               	movwf	(??_UI+1)& (0+255),b
  9302  00010C  0E0F               	movlw	15
  9303  00010E  0100               	movlb	0	; () banked
  9304  000110  6FC4               	movwf	??_UI& (0+255),b
  9305  000112  0EF1               	movlw	241
  9306  000114                     u11407:
  9307  000114  2EE8               	decfsz	wreg,f,c
  9308  000116  D7FE               	bra	u11407
  9309  000118  2FC4               	decfsz	??_UI& (0+255),f,b
  9310  00011A  D7FC               	bra	u11407
  9311  00011C  2FC5               	decfsz	(??_UI+1)& (0+255),f,b
  9312  00011E  D7FA               	bra	u11407
  9313                           
  9314                           ;UI.c: 95: machine_state = UI_state;
  9315  000120  0E00               	movlw	0
  9316  000122  0100               	movlb	0	; () banked
  9317  000124  6FFC               	movwf	_machine_state& (0+255),b
  9318                           
  9319                           ;UI.c: 96: }
  9320  000126  D3D2               	goto	l10056
  9321  000128                     l9736:
  9322                           
  9323                           ; BSR set to: 0
  9324                           ;UI.c: 97: else if(cur_state == 0){
  9325  000128  0100               	movlb	0	; () banked
  9326  00012A  51E8               	movf	_cur_state& (0+255),w,b
  9327  00012C  0100               	movlb	0	; () banked
  9328  00012E  11E9               	iorwf	(_cur_state+1)& (0+255),w,b
  9329  000130  A4D8               	btfss	status,2,c
  9330  000132  D3CC               	goto	l10056
  9331                           
  9332                           ; BSR set to: 0
  9333                           ;UI.c: 98: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  9334  000134  0E00               	movlw	0
  9335  000136  0100               	movlb	0	; () banked
  9336  000138  6FC8               	movwf	UI@i& (0+255),b
  9337  00013A                     l9740:
  9338                           
  9339                           ; BSR set to: 0
  9340  00013A  0E63               	movlw	99
  9341  00013C  0100               	movlb	0	; () banked
  9342  00013E  65C8               	cpfsgt	UI@i& (0+255),b
  9343  000140  D001               	goto	l9744
  9344  000142  D00C               	goto	l9748
  9345  000144                     l9744:
  9346                           
  9347                           ; BSR set to: 0
  9348  000144  0E68               	movlw	104
  9349  000146  0100               	movlb	0	; () banked
  9350  000148  6FC4               	movwf	??_UI& (0+255),b
  9351  00014A  0EE4               	movlw	228
  9352  00014C                     u11417:
  9353  00014C  2EE8               	decfsz	wreg,f,c
  9354  00014E  D7FE               	bra	u11417
  9355  000150  2FC4               	decfsz	??_UI& (0+255),f,b
  9356  000152  D7FC               	bra	u11417
  9357  000154  F000               	nop	
  9358  000156  0100               	movlb	0	; () banked
  9359  000158  2BC8               	incf	UI@i& (0+255),f,b
  9360  00015A  D7EF               	goto	l9740
  9361  00015C                     l9748:
  9362                           
  9363                           ; BSR set to: 0
  9364                           ;UI.c: 99: if(cur_state == 0){
  9365  00015C  0100               	movlb	0	; () banked
  9366  00015E  51E8               	movf	_cur_state& (0+255),w,b
  9367  000160  0100               	movlb	0	; () banked
  9368  000162  11E9               	iorwf	(_cur_state+1)& (0+255),w,b
  9369  000164  A4D8               	btfss	status,2,c
  9370  000166  D3B2               	goto	l10056
  9371                           
  9372                           ; BSR set to: 0
  9373                           ;UI.c: 100: printRTC();
  9374  000168  EC02  F01A         	call	_printRTC	;wreg free
  9375                           
  9376                           ;UI.c: 101: }
  9377                           ;UI.c: 102: }
  9378                           ;UI.c: 103: while(logstate){
  9379  00016C  D3AF               	goto	l10056
  9380  00016E                     l9752:
  9381                           
  9382                           ;UI.c: 105: if(!log_completion){
  9383  00016E  0100               	movlb	0	; () banked
  9384  000170  51F2               	movf	_log_completion& (0+255),w,b
  9385  000172  0100               	movlb	0	; () banked
  9386  000174  11F3               	iorwf	(_log_completion+1)& (0+255),w,b
  9387  000176  A4D8               	btfss	status,2,c
  9388  000178  D041               	goto	l9782
  9389                           
  9390                           ; BSR set to: 0
  9391                           ;UI.c: 106: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9392  00017A  0E01               	movlw	1
  9393  00017C  EC7D  F030         	call	_lcdInst
  9394  000180  0E68               	movlw	104
  9395  000182  0100               	movlb	0	; () banked
  9396  000184  6FC4               	movwf	??_UI& (0+255),b
  9397  000186  0EE4               	movlw	228
  9398  000188                     u11427:
  9399  000188  2EE8               	decfsz	wreg,f,c
  9400  00018A  D7FE               	bra	u11427
  9401  00018C  2FC4               	decfsz	??_UI& (0+255),f,b
  9402  00018E  D7FC               	bra	u11427
  9403  000190  F000               	nop	
  9404                           
  9405                           ;UI.c: 107: lcdInst(0b10000000);;
  9406  000192  0E80               	movlw	128
  9407  000194  EC7D  F030         	call	_lcdInst
  9408                           
  9409                           ;UI.c: 108: printf("-- LOG %2d HERE--", log);
  9410  000198  0E77               	movlw	low STR_3
  9411  00019A  0100               	movlb	0	; () banked
  9412  00019C  6F8E               	movwf	printf@f& (0+255),b
  9413  00019E  0EFB               	movlw	high STR_3
  9414  0001A0  0100               	movlb	0	; () banked
  9415  0001A2  6F8F               	movwf	(printf@f+1)& (0+255),b
  9416  0001A4  C0F0  F090         	movff	_log,?_printf+2
  9417  0001A8  C0F1  F091         	movff	_log+1,?_printf+3
  9418  0001AC  EC17  F00F         	call	_printf	;wreg free
  9419                           
  9420                           ;UI.c: 109: lcdInst(0b11000000);;
  9421  0001B0  0EC0               	movlw	192
  9422  0001B2  EC7D  F030         	call	_lcdInst
  9423                           
  9424                           ;UI.c: 110: printf("DIDN'T COMPLETE");
  9425  0001B6  0E63               	movlw	low STR_4
  9426  0001B8  0100               	movlb	0	; () banked
  9427  0001BA  6F8E               	movwf	printf@f& (0+255),b
  9428  0001BC  0EFE               	movlw	high STR_4
  9429  0001BE  0100               	movlb	0	; () banked
  9430  0001C0  6F8F               	movwf	(printf@f+1)& (0+255),b
  9431  0001C2  EC17  F00F         	call	_printf	;wreg free
  9432  0001C6                     l9766:
  9433  0001C6  0E00               	movlw	0
  9434  0001C8  0100               	movlb	0	; () banked
  9435  0001CA  6FC9               	movwf	UI@i_413& (0+255),b
  9436  0001CC                     l9768:
  9437                           
  9438                           ; BSR set to: 0
  9439  0001CC  0E63               	movlw	99
  9440  0001CE  0100               	movlb	0	; () banked
  9441  0001D0  65C9               	cpfsgt	UI@i_413& (0+255),b
  9442  0001D2  D001               	goto	l9772
  9443  0001D4  D00C               	goto	l9776
  9444  0001D6                     l9772:
  9445                           
  9446                           ; BSR set to: 0
  9447  0001D6  0E68               	movlw	104
  9448  0001D8  0100               	movlb	0	; () banked
  9449  0001DA  6FC4               	movwf	??_UI& (0+255),b
  9450  0001DC  0EE4               	movlw	228
  9451  0001DE                     u11437:
  9452  0001DE  2EE8               	decfsz	wreg,f,c
  9453  0001E0  D7FE               	bra	u11437
  9454  0001E2  2FC4               	decfsz	??_UI& (0+255),f,b
  9455  0001E4  D7FC               	bra	u11437
  9456  0001E6  F000               	nop	
  9457  0001E8  0100               	movlb	0	; () banked
  9458  0001EA  2BC9               	incf	UI@i_413& (0+255),f,b
  9459  0001EC  D7EF               	goto	l9768
  9460  0001EE                     l9776:
  9461                           
  9462                           ; BSR set to: 0
  9463  0001EE  0100               	movlb	0	; () banked
  9464  0001F0  51F8               	movf	_logstate& (0+255),w,b
  9465  0001F2  0100               	movlb	0	; () banked
  9466  0001F4  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9467  0001F6  B4D8               	btfsc	status,2,c
  9468  0001F8  0012               	return	
  9469  0001FA  D7E5               	goto	l9766
  9470  0001FC                     l9782:
  9471                           
  9472                           ; BSR set to: 0
  9473                           ;UI.c: 114: else{
  9474                           ;UI.c: 115: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9475  0001FC  0E01               	movlw	1
  9476  0001FE  EC7D  F030         	call	_lcdInst
  9477  000202  0E68               	movlw	104
  9478  000204  0100               	movlb	0	; () banked
  9479  000206  6FC4               	movwf	??_UI& (0+255),b
  9480  000208  0EE4               	movlw	228
  9481  00020A                     u11447:
  9482  00020A  2EE8               	decfsz	wreg,f,c
  9483  00020C  D7FE               	bra	u11447
  9484  00020E  2FC4               	decfsz	??_UI& (0+255),f,b
  9485  000210  D7FC               	bra	u11447
  9486  000212  F000               	nop	
  9487                           
  9488                           ;UI.c: 116: lcdInst(0b10000000);;
  9489  000214  0E80               	movlw	128
  9490  000216  EC7D  F030         	call	_lcdInst
  9491                           
  9492                           ;UI.c: 117: printf("-- LOG %2d HERE--", log);
  9493  00021A  0E77               	movlw	low STR_3
  9494  00021C  0100               	movlb	0	; () banked
  9495  00021E  6F8E               	movwf	printf@f& (0+255),b
  9496  000220  0EFB               	movlw	high STR_3
  9497  000222  0100               	movlb	0	; () banked
  9498  000224  6F8F               	movwf	(printf@f+1)& (0+255),b
  9499  000226  C0F0  F090         	movff	_log,?_printf+2
  9500  00022A  C0F1  F091         	movff	_log+1,?_printf+3
  9501  00022E  EC17  F00F         	call	_printf	;wreg free
  9502                           
  9503                           ;UI.c: 118: lcdInst(0b11000000);;
  9504  000232  0EC0               	movlw	192
  9505  000234  EC7D  F030         	call	_lcdInst
  9506                           
  9507                           ;UI.c: 119: printf("PAUSE < | BACK >");
  9508  000238  0EFF               	movlw	low STR_6
  9509  00023A  0100               	movlb	0	; () banked
  9510  00023C  6F8E               	movwf	printf@f& (0+255),b
  9511  00023E  0EFD               	movlw	high STR_6
  9512  000240  0100               	movlb	0	; () banked
  9513  000242  6F8F               	movwf	(printf@f+1)& (0+255),b
  9514  000244  EC17  F00F         	call	_printf	;wreg free
  9515                           
  9516                           ;UI.c: 121: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9517  000248  0E00               	movlw	0
  9518  00024A  0100               	movlb	0	; () banked
  9519  00024C  6FCA               	movwf	UI@i_416& (0+255),b
  9520  00024E                     l9796:
  9521                           
  9522                           ; BSR set to: 0
  9523  00024E  0E63               	movlw	99
  9524  000250  0100               	movlb	0	; () banked
  9525  000252  65CA               	cpfsgt	UI@i_416& (0+255),b
  9526  000254  D001               	goto	l9800
  9527  000256  D00C               	goto	l9804
  9528  000258                     l9800:
  9529                           
  9530                           ; BSR set to: 0
  9531  000258  0E68               	movlw	104
  9532  00025A  0100               	movlb	0	; () banked
  9533  00025C  6FC4               	movwf	??_UI& (0+255),b
  9534  00025E  0EE4               	movlw	228
  9535  000260                     u11457:
  9536  000260  2EE8               	decfsz	wreg,f,c
  9537  000262  D7FE               	bra	u11457
  9538  000264  2FC4               	decfsz	??_UI& (0+255),f,b
  9539  000266  D7FC               	bra	u11457
  9540  000268  F000               	nop	
  9541  00026A  0100               	movlb	0	; () banked
  9542  00026C  2BCA               	incf	UI@i_416& (0+255),f,b
  9543  00026E  D7EF               	goto	l9796
  9544  000270                     l9804:
  9545                           
  9546                           ; BSR set to: 0
  9547  000270  0100               	movlb	0	; () banked
  9548  000272  51F8               	movf	_logstate& (0+255),w,b
  9549  000274  0100               	movlb	0	; () banked
  9550  000276  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9551  000278  B4D8               	btfsc	status,2,c
  9552  00027A  0012               	return	
  9553                           
  9554                           ; BSR set to: 0
  9555                           ;UI.c: 122: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9556                           
  9557                           ; BSR set to: 0
  9558                           
  9559                           ; BSR set to: 0
  9560  00027C  0E00               	movlw	0
  9561  00027E  0100               	movlb	0	; () banked
  9562  000280  6FCB               	movwf	UI@i_417& (0+255),b
  9563  000282                     l9810:
  9564                           
  9565                           ; BSR set to: 0
  9566  000282  0E63               	movlw	99
  9567  000284  0100               	movlb	0	; () banked
  9568  000286  65CB               	cpfsgt	UI@i_417& (0+255),b
  9569  000288  D001               	goto	l9814
  9570  00028A  D00C               	goto	l9818
  9571  00028C                     l9814:
  9572                           
  9573                           ; BSR set to: 0
  9574  00028C  0E68               	movlw	104
  9575  00028E  0100               	movlb	0	; () banked
  9576  000290  6FC4               	movwf	??_UI& (0+255),b
  9577  000292  0EE4               	movlw	228
  9578  000294                     u11467:
  9579  000294  2EE8               	decfsz	wreg,f,c
  9580  000296  D7FE               	bra	u11467
  9581  000298  2FC4               	decfsz	??_UI& (0+255),f,b
  9582  00029A  D7FC               	bra	u11467
  9583  00029C  F000               	nop	
  9584  00029E  0100               	movlb	0	; () banked
  9585  0002A0  2BCB               	incf	UI@i_417& (0+255),f,b
  9586  0002A2  D7EF               	goto	l9810
  9587  0002A4                     l9818:
  9588                           
  9589                           ; BSR set to: 0
  9590  0002A4  0100               	movlb	0	; () banked
  9591  0002A6  51F8               	movf	_logstate& (0+255),w,b
  9592  0002A8  0100               	movlb	0	; () banked
  9593  0002AA  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9594  0002AC  B4D8               	btfsc	status,2,c
  9595  0002AE  0012               	return	
  9596                           
  9597                           ; BSR set to: 0
  9598                           ;UI.c: 124: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9599                           
  9600                           ; BSR set to: 0
  9601                           
  9602                           ; BSR set to: 0
  9603  0002B0  0E01               	movlw	1
  9604  0002B2  EC7D  F030         	call	_lcdInst
  9605  0002B6  0E68               	movlw	104
  9606  0002B8  0100               	movlb	0	; () banked
  9607  0002BA  6FC4               	movwf	??_UI& (0+255),b
  9608  0002BC  0EE4               	movlw	228
  9609  0002BE                     u11477:
  9610  0002BE  2EE8               	decfsz	wreg,f,c
  9611  0002C0  D7FE               	bra	u11477
  9612  0002C2  2FC4               	decfsz	??_UI& (0+255),f,b
  9613  0002C4  D7FC               	bra	u11477
  9614  0002C6  F000               	nop	
  9615                           
  9616                           ;UI.c: 125: lcdInst(0b10000000);;
  9617  0002C8  0E80               	movlw	128
  9618  0002CA  EC7D  F030         	call	_lcdInst
  9619                           
  9620                           ;UI.c: 126: printf("START:");
  9621  0002CE  0EC4               	movlw	low STR_7
  9622  0002D0  0100               	movlb	0	; () banked
  9623  0002D2  6F8E               	movwf	printf@f& (0+255),b
  9624  0002D4  0EFF               	movlw	high STR_7
  9625  0002D6  0100               	movlb	0	; () banked
  9626  0002D8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9627  0002DA  EC17  F00F         	call	_printf	;wreg free
  9628                           
  9629                           ;UI.c: 127: lcdInst(0b11000000);;
  9630  0002DE  0EC0               	movlw	192
  9631  0002E0  EC7D  F030         	call	_lcdInst
  9632                           
  9633                           ;UI.c: 128: char month[] = "MMM";
  9634  0002E4  C149  F0D6         	movff	UI@F3251,UI@month
  9635  0002E8  C14A  F0D7         	movff	UI@F3251+1,UI@month+1
  9636  0002EC  C14B  F0D8         	movff	UI@F3251+2,UI@month+2
  9637  0002F0  C14C  F0D9         	movff	UI@F3251+3,UI@month+3
  9638                           
  9639                           ;UI.c: 129: switch(log_startTime[5]){
  9640  0002F4  D0C3               	goto	l9862
  9641  0002F6                     l9834:
  9642                           
  9643                           ;UI.c: 131: strcpy(month, "JAN");
  9644  0002F6  0ED6               	movlw	low UI@month
  9645  0002F8  0100               	movlb	0	; () banked
  9646  0002FA  6F80               	movwf	strcpy@to& (0+255),b
  9647  0002FC  0E00               	movlw	high UI@month
  9648  0002FE  0100               	movlb	0	; () banked
  9649  000300  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9650  000302  0EDB               	movlw	low STR_8
  9651  000304  0100               	movlb	0	; () banked
  9652  000306  6F82               	movwf	strcpy@from& (0+255),b
  9653  000308  0EFF               	movlw	high STR_8
  9654  00030A  0100               	movlb	0	; () banked
  9655  00030C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9656  00030E  ECCD  F02D         	call	_strcpy	;wreg free
  9657                           
  9658                           ;UI.c: 132: break;
  9659  000312  D0E6               	goto	l9864
  9660  000314                     l9836:
  9661                           
  9662                           ;UI.c: 134: strcpy(month, "FEB");
  9663  000314  0ED6               	movlw	low UI@month
  9664  000316  0100               	movlb	0	; () banked
  9665  000318  6F80               	movwf	strcpy@to& (0+255),b
  9666  00031A  0E00               	movlw	high UI@month
  9667  00031C  0100               	movlb	0	; () banked
  9668  00031E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9669  000320  0ECB               	movlw	low STR_9
  9670  000322  0100               	movlb	0	; () banked
  9671  000324  6F82               	movwf	strcpy@from& (0+255),b
  9672  000326  0EFF               	movlw	high STR_9
  9673  000328  0100               	movlb	0	; () banked
  9674  00032A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9675  00032C  ECCD  F02D         	call	_strcpy	;wreg free
  9676                           
  9677                           ;UI.c: 135: break;
  9678  000330  D0D7               	goto	l9864
  9679  000332                     l9838:
  9680                           
  9681                           ;UI.c: 137: strcpy(month, "MAR");
  9682  000332  0ED6               	movlw	low UI@month
  9683  000334  0100               	movlb	0	; () banked
  9684  000336  6F80               	movwf	strcpy@to& (0+255),b
  9685  000338  0E00               	movlw	high UI@month
  9686  00033A  0100               	movlb	0	; () banked
  9687  00033C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9688  00033E  0EE7               	movlw	low STR_10
  9689  000340  0100               	movlb	0	; () banked
  9690  000342  6F82               	movwf	strcpy@from& (0+255),b
  9691  000344  0EFF               	movlw	high STR_10
  9692  000346  0100               	movlb	0	; () banked
  9693  000348  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9694  00034A  ECCD  F02D         	call	_strcpy	;wreg free
  9695                           
  9696                           ;UI.c: 138: break;
  9697  00034E  D0C8               	goto	l9864
  9698  000350                     l9840:
  9699                           
  9700                           ;UI.c: 140: strcpy(month, "APR");
  9701  000350  0ED6               	movlw	low UI@month
  9702  000352  0100               	movlb	0	; () banked
  9703  000354  6F80               	movwf	strcpy@to& (0+255),b
  9704  000356  0E00               	movlw	high UI@month
  9705  000358  0100               	movlb	0	; () banked
  9706  00035A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9707  00035C  0EEB               	movlw	low STR_11
  9708  00035E  0100               	movlb	0	; () banked
  9709  000360  6F82               	movwf	strcpy@from& (0+255),b
  9710  000362  0EFF               	movlw	high STR_11
  9711  000364  0100               	movlb	0	; () banked
  9712  000366  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9713  000368  ECCD  F02D         	call	_strcpy	;wreg free
  9714                           
  9715                           ;UI.c: 141: break;
  9716  00036C  D0B9               	goto	l9864
  9717  00036E                     l9842:
  9718                           
  9719                           ;UI.c: 143: strcpy(month, "MAY");
  9720  00036E  0ED6               	movlw	low UI@month
  9721  000370  0100               	movlb	0	; () banked
  9722  000372  6F80               	movwf	strcpy@to& (0+255),b
  9723  000374  0E00               	movlw	high UI@month
  9724  000376  0100               	movlb	0	; () banked
  9725  000378  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9726  00037A  0EFB               	movlw	low STR_12
  9727  00037C  0100               	movlb	0	; () banked
  9728  00037E  6F82               	movwf	strcpy@from& (0+255),b
  9729  000380  0EFF               	movlw	high STR_12
  9730  000382  0100               	movlb	0	; () banked
  9731  000384  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9732  000386  ECCD  F02D         	call	_strcpy	;wreg free
  9733                           
  9734                           ;UI.c: 144: break;
  9735  00038A  D0AA               	goto	l9864
  9736  00038C                     l9844:
  9737                           
  9738                           ;UI.c: 146: strcpy(month, "JUN");
  9739  00038C  0ED6               	movlw	low UI@month
  9740  00038E  0100               	movlb	0	; () banked
  9741  000390  6F80               	movwf	strcpy@to& (0+255),b
  9742  000392  0E00               	movlw	high UI@month
  9743  000394  0100               	movlb	0	; () banked
  9744  000396  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9745  000398  0EDF               	movlw	low STR_13
  9746  00039A  0100               	movlb	0	; () banked
  9747  00039C  6F82               	movwf	strcpy@from& (0+255),b
  9748  00039E  0EFF               	movlw	high STR_13
  9749  0003A0  0100               	movlb	0	; () banked
  9750  0003A2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9751  0003A4  ECCD  F02D         	call	_strcpy	;wreg free
  9752                           
  9753                           ;UI.c: 147: break;
  9754  0003A8  D09B               	goto	l9864
  9755  0003AA                     l9846:
  9756                           
  9757                           ;UI.c: 149: strcpy(month, "JUL");
  9758  0003AA  0ED6               	movlw	low UI@month
  9759  0003AC  0100               	movlb	0	; () banked
  9760  0003AE  6F80               	movwf	strcpy@to& (0+255),b
  9761  0003B0  0E00               	movlw	high UI@month
  9762  0003B2  0100               	movlb	0	; () banked
  9763  0003B4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9764  0003B6  0ED7               	movlw	low STR_14
  9765  0003B8  0100               	movlb	0	; () banked
  9766  0003BA  6F82               	movwf	strcpy@from& (0+255),b
  9767  0003BC  0EFF               	movlw	high STR_14
  9768  0003BE  0100               	movlb	0	; () banked
  9769  0003C0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9770  0003C2  ECCD  F02D         	call	_strcpy	;wreg free
  9771                           
  9772                           ;UI.c: 150: break;
  9773  0003C6  D08C               	goto	l9864
  9774  0003C8                     l9848:
  9775                           
  9776                           ;UI.c: 152: strcpy(month, "AUG");
  9777  0003C8  0ED6               	movlw	low UI@month
  9778  0003CA  0100               	movlb	0	; () banked
  9779  0003CC  6F80               	movwf	strcpy@to& (0+255),b
  9780  0003CE  0E00               	movlw	high UI@month
  9781  0003D0  0100               	movlb	0	; () banked
  9782  0003D2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9783  0003D4  0ED3               	movlw	low STR_15
  9784  0003D6  0100               	movlb	0	; () banked
  9785  0003D8  6F82               	movwf	strcpy@from& (0+255),b
  9786  0003DA  0EFF               	movlw	high STR_15
  9787  0003DC  0100               	movlb	0	; () banked
  9788  0003DE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9789  0003E0  ECCD  F02D         	call	_strcpy	;wreg free
  9790                           
  9791                           ;UI.c: 153: break;
  9792  0003E4  D07D               	goto	l9864
  9793  0003E6                     l9850:
  9794                           
  9795                           ;UI.c: 155: strcpy(month, "SEP");
  9796  0003E6  0ED6               	movlw	low UI@month
  9797  0003E8  0100               	movlb	0	; () banked
  9798  0003EA  6F80               	movwf	strcpy@to& (0+255),b
  9799  0003EC  0E00               	movlw	high UI@month
  9800  0003EE  0100               	movlb	0	; () banked
  9801  0003F0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9802  0003F2  0EE3               	movlw	low STR_16
  9803  0003F4  0100               	movlb	0	; () banked
  9804  0003F6  6F82               	movwf	strcpy@from& (0+255),b
  9805  0003F8  0EFF               	movlw	high STR_16
  9806  0003FA  0100               	movlb	0	; () banked
  9807  0003FC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9808  0003FE  ECCD  F02D         	call	_strcpy	;wreg free
  9809                           
  9810                           ;UI.c: 156: break;
  9811  000402  D06E               	goto	l9864
  9812  000404                     l9852:
  9813                           
  9814                           ;UI.c: 158: strcpy(month, "OCT");
  9815  000404  0ED6               	movlw	low UI@month
  9816  000406  0100               	movlb	0	; () banked
  9817  000408  6F80               	movwf	strcpy@to& (0+255),b
  9818  00040A  0E00               	movlw	high UI@month
  9819  00040C  0100               	movlb	0	; () banked
  9820  00040E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9821  000410  0EF3               	movlw	low STR_17
  9822  000412  0100               	movlb	0	; () banked
  9823  000414  6F82               	movwf	strcpy@from& (0+255),b
  9824  000416  0EFF               	movlw	high STR_17
  9825  000418  0100               	movlb	0	; () banked
  9826  00041A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9827  00041C  ECCD  F02D         	call	_strcpy	;wreg free
  9828                           
  9829                           ;UI.c: 159: break;
  9830  000420  D05F               	goto	l9864
  9831  000422                     l9854:
  9832                           
  9833                           ;UI.c: 161: strcpy(month, "NOV");
  9834  000422  0ED6               	movlw	low UI@month
  9835  000424  0100               	movlb	0	; () banked
  9836  000426  6F80               	movwf	strcpy@to& (0+255),b
  9837  000428  0E00               	movlw	high UI@month
  9838  00042A  0100               	movlb	0	; () banked
  9839  00042C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9840  00042E  0EF7               	movlw	low STR_18
  9841  000430  0100               	movlb	0	; () banked
  9842  000432  6F82               	movwf	strcpy@from& (0+255),b
  9843  000434  0EFF               	movlw	high STR_18
  9844  000436  0100               	movlb	0	; () banked
  9845  000438  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9846  00043A  ECCD  F02D         	call	_strcpy	;wreg free
  9847                           
  9848                           ;UI.c: 162: break;
  9849  00043E  D050               	goto	l9864
  9850  000440                     l9856:
  9851                           
  9852                           ;UI.c: 164: strcpy(month, "DEC");
  9853  000440  0ED6               	movlw	low UI@month
  9854  000442  0100               	movlb	0	; () banked
  9855  000444  6F80               	movwf	strcpy@to& (0+255),b
  9856  000446  0E00               	movlw	high UI@month
  9857  000448  0100               	movlb	0	; () banked
  9858  00044A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9859  00044C  0ECF               	movlw	low STR_19
  9860  00044E  0100               	movlb	0	; () banked
  9861  000450  6F82               	movwf	strcpy@from& (0+255),b
  9862  000452  0EFF               	movlw	high STR_19
  9863  000454  0100               	movlb	0	; () banked
  9864  000456  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9865  000458  ECCD  F02D         	call	_strcpy	;wreg free
  9866                           
  9867                           ;UI.c: 165: break;
  9868  00045C  D041               	goto	l9864
  9869  00045E                     l9858:
  9870                           
  9871                           ;UI.c: 167: strcpy(month, "ERR");
  9872  00045E  0ED6               	movlw	low UI@month
  9873  000460  0100               	movlb	0	; () banked
  9874  000462  6F80               	movwf	strcpy@to& (0+255),b
  9875  000464  0E00               	movlw	high UI@month
  9876  000466  0100               	movlb	0	; () banked
  9877  000468  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9878  00046A  0EEF               	movlw	low STR_20
  9879  00046C  0100               	movlb	0	; () banked
  9880  00046E  6F82               	movwf	strcpy@from& (0+255),b
  9881  000470  0EFF               	movlw	high STR_20
  9882  000472  0100               	movlb	0	; () banked
  9883  000474  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9884  000476  ECCD  F02D         	call	_strcpy	;wreg free
  9885                           
  9886                           ;UI.c: 169: }
  9887                           
  9888                           ;UI.c: 168: break;
  9889  00047A  D032               	goto	l9864
  9890  00047C                     l9862:
  9891  00047C  EE21  F00A         	lfsr	2,_log_startTime+10
  9892  000480  CFDE F0C4          	movff	postinc2,??_UI
  9893  000484  CFDD F0C5          	movff	postdec2,??_UI+1
  9894                           
  9895                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9896                           ; Switch size 1, requested type "space"
  9897                           ; Number of cases is 1, Range of values is 0 to 0
  9898                           ; switch strategies available:
  9899                           ; Name         Instructions Cycles
  9900                           ; simple_byte            4     3 (average)
  9901                           ;	Chosen strategy is simple_byte
  9902  000488  0100               	movlb	0	; () banked
  9903  00048A  51C5               	movf	(??_UI+1)& (0+255),w,b
  9904  00048C  0A00               	xorlw	0	; case 0
  9905  00048E  A4D8               	btfss	status,2,c
  9906  000490  D7E6               	goto	l9858
  9907                           
  9908                           ; BSR set to: 0
  9909                           ; Switch size 1, requested type "space"
  9910                           ; Number of cases is 12, Range of values is 1 to 12
  9911                           ; switch strategies available:
  9912                           ; Name         Instructions Cycles
  9913                           ; simple_byte           37    19 (average)
  9914                           ;	Chosen strategy is simple_byte
  9915  000492  0100               	movlb	0	; () banked
  9916  000494  51C4               	movf	??_UI& (0+255),w,b
  9917  000496  0A01               	xorlw	1	; case 1
  9918  000498  B4D8               	btfsc	status,2,c
  9919  00049A  D72D               	goto	l9834
  9920  00049C  0A03               	xorlw	3	; case 2
  9921  00049E  B4D8               	btfsc	status,2,c
  9922  0004A0  D739               	goto	l9836
  9923  0004A2  0A01               	xorlw	1	; case 3
  9924  0004A4  B4D8               	btfsc	status,2,c
  9925  0004A6  D745               	goto	l9838
  9926  0004A8  0A07               	xorlw	7	; case 4
  9927  0004AA  B4D8               	btfsc	status,2,c
  9928  0004AC  D751               	goto	l9840
  9929  0004AE  0A01               	xorlw	1	; case 5
  9930  0004B0  B4D8               	btfsc	status,2,c
  9931  0004B2  D75D               	goto	l9842
  9932  0004B4  0A03               	xorlw	3	; case 6
  9933  0004B6  B4D8               	btfsc	status,2,c
  9934  0004B8  D769               	goto	l9844
  9935  0004BA  0A01               	xorlw	1	; case 7
  9936  0004BC  B4D8               	btfsc	status,2,c
  9937  0004BE  D775               	goto	l9846
  9938  0004C0  0A0F               	xorlw	15	; case 8
  9939  0004C2  B4D8               	btfsc	status,2,c
  9940  0004C4  D781               	goto	l9848
  9941  0004C6  0A01               	xorlw	1	; case 9
  9942  0004C8  B4D8               	btfsc	status,2,c
  9943  0004CA  D78D               	goto	l9850
  9944  0004CC  0A03               	xorlw	3	; case 10
  9945  0004CE  B4D8               	btfsc	status,2,c
  9946  0004D0  D799               	goto	l9852
  9947  0004D2  0A01               	xorlw	1	; case 11
  9948  0004D4  B4D8               	btfsc	status,2,c
  9949  0004D6  D7A5               	goto	l9854
  9950  0004D8  0A07               	xorlw	7	; case 12
  9951  0004DA  B4D8               	btfsc	status,2,c
  9952  0004DC  D7B1               	goto	l9856
  9953  0004DE  D7BF               	goto	l9858
  9954  0004E0                     l9864:
  9955                           
  9956                           ;UI.c: 170: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  9957  0004E0  0ECC               	movlw	low STR_21
  9958  0004E2  0100               	movlb	0	; () banked
  9959  0004E4  6F8E               	movwf	printf@f& (0+255),b
  9960  0004E6  0EFA               	movlw	high STR_21
  9961  0004E8  0100               	movlb	0	; () banked
  9962  0004EA  6F8F               	movwf	(printf@f+1)& (0+255),b
  9963  0004EC  C108  F090         	movff	_log_startTime+8,?_printf+2
  9964  0004F0  C109  F091         	movff	_log_startTime+9,?_printf+3
  9965  0004F4  0ED6               	movlw	low UI@month
  9966  0004F6  0100               	movlb	0	; () banked
  9967  0004F8  6F92               	movwf	(?_printf+4)& (0+255),b
  9968  0004FA  0E00               	movlw	high UI@month
  9969  0004FC  0100               	movlb	0	; () banked
  9970  0004FE  6F93               	movwf	(?_printf+5)& (0+255),b
  9971  000500  C104  F094         	movff	_log_startTime+4,?_printf+6
  9972  000504  C105  F095         	movff	_log_startTime+5,?_printf+7
  9973  000508  C102  F096         	movff	_log_startTime+2,?_printf+8
  9974  00050C  C103  F097         	movff	_log_startTime+3,?_printf+9
  9975  000510  C100  F098         	movff	_log_startTime,?_printf+10
  9976  000514  C101  F099         	movff	_log_startTime+1,?_printf+11
  9977  000518  EC17  F00F         	call	_printf	;wreg free
  9978                           
  9979                           ;UI.c: 172: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9980  00051C  0E00               	movlw	0
  9981  00051E  0100               	movlb	0	; () banked
  9982  000520  6FCC               	movwf	UI@i_435& (0+255),b
  9983  000522                     l9868:
  9984                           
  9985                           ; BSR set to: 0
  9986  000522  0E63               	movlw	99
  9987  000524  0100               	movlb	0	; () banked
  9988  000526  65CC               	cpfsgt	UI@i_435& (0+255),b
  9989  000528  D001               	goto	l9872
  9990  00052A  D00C               	goto	l9876
  9991  00052C                     l9872:
  9992                           
  9993                           ; BSR set to: 0
  9994  00052C  0E68               	movlw	104
  9995  00052E  0100               	movlb	0	; () banked
  9996  000530  6FC4               	movwf	??_UI& (0+255),b
  9997  000532  0EE4               	movlw	228
  9998  000534                     u11487:
  9999  000534  2EE8               	decfsz	wreg,f,c
 10000  000536  D7FE               	bra	u11487
 10001  000538  2FC4               	decfsz	??_UI& (0+255),f,b
 10002  00053A  D7FC               	bra	u11487
 10003  00053C  F000               	nop	
 10004  00053E  0100               	movlb	0	; () banked
 10005  000540  2BCC               	incf	UI@i_435& (0+255),f,b
 10006  000542  D7EF               	goto	l9868
 10007  000544                     l9876:
 10008                           
 10009                           ; BSR set to: 0
 10010  000544  0100               	movlb	0	; () banked
 10011  000546  51F8               	movf	_logstate& (0+255),w,b
 10012  000548  0100               	movlb	0	; () banked
 10013  00054A  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10014  00054C  B4D8               	btfsc	status,2,c
 10015  00054E  0012               	return	
 10016                           
 10017                           ; BSR set to: 0
 10018                           ;UI.c: 173: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10019                           
 10020                           ; BSR set to: 0
 10021                           
 10022                           ; BSR set to: 0
 10023  000550  0E00               	movlw	0
 10024  000552  0100               	movlb	0	; () banked
 10025  000554  6FCD               	movwf	UI@i_436& (0+255),b
 10026  000556                     l9882:
 10027                           
 10028                           ; BSR set to: 0
 10029  000556  0E63               	movlw	99
 10030  000558  0100               	movlb	0	; () banked
 10031  00055A  65CD               	cpfsgt	UI@i_436& (0+255),b
 10032  00055C  D001               	goto	l9886
 10033  00055E  D00C               	goto	l9890
 10034  000560                     l9886:
 10035                           
 10036                           ; BSR set to: 0
 10037  000560  0E68               	movlw	104
 10038  000562  0100               	movlb	0	; () banked
 10039  000564  6FC4               	movwf	??_UI& (0+255),b
 10040  000566  0EE4               	movlw	228
 10041  000568                     u11497:
 10042  000568  2EE8               	decfsz	wreg,f,c
 10043  00056A  D7FE               	bra	u11497
 10044  00056C  2FC4               	decfsz	??_UI& (0+255),f,b
 10045  00056E  D7FC               	bra	u11497
 10046  000570  F000               	nop	
 10047  000572  0100               	movlb	0	; () banked
 10048  000574  2BCD               	incf	UI@i_436& (0+255),f,b
 10049  000576  D7EF               	goto	l9882
 10050  000578                     l9890:
 10051                           
 10052                           ; BSR set to: 0
 10053  000578  0100               	movlb	0	; () banked
 10054  00057A  51F8               	movf	_logstate& (0+255),w,b
 10055  00057C  0100               	movlb	0	; () banked
 10056  00057E  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10057  000580  B4D8               	btfsc	status,2,c
 10058  000582  0012               	return	
 10059                           
 10060                           ; BSR set to: 0
 10061                           ;UI.c: 175: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
 10062                           
 10063                           ; BSR set to: 0
 10064                           
 10065                           ; BSR set to: 0
 10066  000584  0E01               	movlw	1
 10067  000586  EC7D  F030         	call	_lcdInst
 10068  00058A  0E68               	movlw	104
 10069  00058C  0100               	movlb	0	; () banked
 10070  00058E  6FC4               	movwf	??_UI& (0+255),b
 10071  000590  0EE4               	movlw	228
 10072  000592                     u11507:
 10073  000592  2EE8               	decfsz	wreg,f,c
 10074  000594  D7FE               	bra	u11507
 10075  000596  2FC4               	decfsz	??_UI& (0+255),f,b
 10076  000598  D7FC               	bra	u11507
 10077  00059A  F000               	nop	
 10078                           
 10079                           ;UI.c: 176: lcdInst(0b10000000);;
 10080  00059C  0E80               	movlw	128
 10081  00059E  EC7D  F030         	call	_lcdInst
 10082                           
 10083                           ;UI.c: 177: printf("DURATION:");
 10084  0005A2  0E92               	movlw	low STR_22
 10085  0005A4  0100               	movlb	0	; () banked
 10086  0005A6  6F8E               	movwf	printf@f& (0+255),b
 10087  0005A8  0EFF               	movlw	high STR_22
 10088  0005AA  0100               	movlb	0	; () banked
 10089  0005AC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10090  0005AE  EC17  F00F         	call	_printf	;wreg free
 10091                           
 10092                           ;UI.c: 178: lcdInst(0b11000000);;
 10093  0005B2  0EC0               	movlw	192
 10094  0005B4  EC7D  F030         	call	_lcdInst
 10095                           
 10096                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
 10097  0005B8  0E0E               	movlw	14
 10098  0005BA  0100               	movlb	0	; () banked
 10099  0005BC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
 10100  0005BE  0E10               	movlw	16
 10101  0005C0  6F82               	movwf	___awmod@divisor& (0+255),b
 10102  0005C2  C0F6  F080         	movff	_log_total_time,___awmod@dividend
 10103  0005C6  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
 10104  0005CA  EC4D  F028         	call	___awmod	;wreg free
 10105  0005CE  C080  F0C6         	movff	?___awmod,_UI$2442
 10106  0005D2  C081  F0C7         	movff	?___awmod+1,_UI$2442+1
 10107                           
 10108                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
 10109  0005D6  0E40               	movlw	low STR_23
 10110  0005D8  0100               	movlb	0	; () banked
 10111  0005DA  6F8E               	movwf	printf@f& (0+255),b
 10112  0005DC  0EFF               	movlw	high STR_23
 10113  0005DE  0100               	movlb	0	; () banked
 10114  0005E0  6F8F               	movwf	(printf@f+1)& (0+255),b
 10115  0005E2  0E0E               	movlw	14
 10116  0005E4  0100               	movlb	0	; () banked
 10117  0005E6  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
 10118  0005E8  0E10               	movlw	16
 10119  0005EA  6F82               	movwf	___awmod@divisor& (0+255),b
 10120  0005EC  C0F6  F080         	movff	_log_total_time,___awmod@dividend
 10121  0005F0  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
 10122  0005F4  EC4D  F028         	call	___awmod	;wreg free
 10123  0005F8  C080  F086         	movff	?___awmod,___awdiv@dividend
 10124  0005FC  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
 10125  000600  0E00               	movlw	0
 10126  000602  0100               	movlb	0	; () banked
 10127  000604  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
 10128  000606  0E3C               	movlw	60
 10129  000608  6F88               	movwf	___awdiv@divisor& (0+255),b
 10130  00060A  EC3B  F027         	call	___awdiv	;wreg free
 10131  00060E  C086  F090         	movff	?___awdiv,?_printf+2
 10132  000612  C087  F091         	movff	?___awdiv+1,?_printf+3
 10133  000616  C0C6  F080         	movff	_UI$2442,___awmod@dividend
 10134  00061A  C0C7  F081         	movff	_UI$2442+1,___awmod@dividend+1
 10135  00061E  0E00               	movlw	0
 10136  000620  0100               	movlb	0	; () banked
 10137  000622  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
 10138  000624  0E3C               	movlw	60
 10139  000626  6F82               	movwf	___awmod@divisor& (0+255),b
 10140  000628  EC4D  F028         	call	___awmod	;wreg free
 10141  00062C  C080  F092         	movff	?___awmod,?_printf+4
 10142  000630  C081  F093         	movff	?___awmod+1,?_printf+5
 10143  000634  EC17  F00F         	call	_printf	;wreg free
 10144                           
 10145                           ;UI.c: 181: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10146  000638  0E00               	movlw	0
 10147  00063A  0100               	movlb	0	; () banked
 10148  00063C  6FCE               	movwf	UI@i_439& (0+255),b
 10149  00063E                     l9910:
 10150                           
 10151                           ; BSR set to: 0
 10152  00063E  0E63               	movlw	99
 10153  000640  0100               	movlb	0	; () banked
 10154  000642  65CE               	cpfsgt	UI@i_439& (0+255),b
 10155  000644  D001               	goto	l9914
 10156  000646  D00C               	goto	l9918
 10157  000648                     l9914:
 10158                           
 10159                           ; BSR set to: 0
 10160  000648  0E68               	movlw	104
 10161  00064A  0100               	movlb	0	; () banked
 10162  00064C  6FC4               	movwf	??_UI& (0+255),b
 10163  00064E  0EE4               	movlw	228
 10164  000650                     u11517:
 10165  000650  2EE8               	decfsz	wreg,f,c
 10166  000652  D7FE               	bra	u11517
 10167  000654  2FC4               	decfsz	??_UI& (0+255),f,b
 10168  000656  D7FC               	bra	u11517
 10169  000658  F000               	nop	
 10170  00065A  0100               	movlb	0	; () banked
 10171  00065C  2BCE               	incf	UI@i_439& (0+255),f,b
 10172  00065E  D7EF               	goto	l9910
 10173  000660                     l9918:
 10174                           
 10175                           ; BSR set to: 0
 10176  000660  0100               	movlb	0	; () banked
 10177  000662  51F8               	movf	_logstate& (0+255),w,b
 10178  000664  0100               	movlb	0	; () banked
 10179  000666  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10180  000668  B4D8               	btfsc	status,2,c
 10181  00066A  0012               	return	
 10182                           
 10183                           ; BSR set to: 0
 10184                           ;UI.c: 182: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10185                           
 10186                           ; BSR set to: 0
 10187                           
 10188                           ; BSR set to: 0
 10189  00066C  0E00               	movlw	0
 10190  00066E  0100               	movlb	0	; () banked
 10191  000670  6FCF               	movwf	UI@i_440& (0+255),b
 10192  000672                     l9924:
 10193                           
 10194                           ; BSR set to: 0
 10195  000672  0E63               	movlw	99
 10196  000674  0100               	movlb	0	; () banked
 10197  000676  65CF               	cpfsgt	UI@i_440& (0+255),b
 10198  000678  D001               	goto	l9928
 10199  00067A  D00C               	goto	l9932
 10200  00067C                     l9928:
 10201                           
 10202                           ; BSR set to: 0
 10203  00067C  0E68               	movlw	104
 10204  00067E  0100               	movlb	0	; () banked
 10205  000680  6FC4               	movwf	??_UI& (0+255),b
 10206  000682  0EE4               	movlw	228
 10207  000684                     u11527:
 10208  000684  2EE8               	decfsz	wreg,f,c
 10209  000686  D7FE               	bra	u11527
 10210  000688  2FC4               	decfsz	??_UI& (0+255),f,b
 10211  00068A  D7FC               	bra	u11527
 10212  00068C  F000               	nop	
 10213  00068E  0100               	movlb	0	; () banked
 10214  000690  2BCF               	incf	UI@i_440& (0+255),f,b
 10215  000692  D7EF               	goto	l9924
 10216  000694                     l9932:
 10217                           
 10218                           ; BSR set to: 0
 10219  000694  0100               	movlb	0	; () banked
 10220  000696  51F8               	movf	_logstate& (0+255),w,b
 10221  000698  0100               	movlb	0	; () banked
 10222  00069A  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10223  00069C  B4D8               	btfsc	status,2,c
 10224  00069E  0012               	return	
 10225                           
 10226                           ; BSR set to: 0
 10227                           ;UI.c: 184: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
 10228                           
 10229                           ; BSR set to: 0
 10230                           
 10231                           ; BSR set to: 0
 10232  0006A0  0E01               	movlw	1
 10233  0006A2  EC7D  F030         	call	_lcdInst
 10234  0006A6  0E68               	movlw	104
 10235  0006A8  0100               	movlb	0	; () banked
 10236  0006AA  6FC4               	movwf	??_UI& (0+255),b
 10237  0006AC  0EE4               	movlw	228
 10238  0006AE                     u11537:
 10239  0006AE  2EE8               	decfsz	wreg,f,c
 10240  0006B0  D7FE               	bra	u11537
 10241  0006B2  2FC4               	decfsz	??_UI& (0+255),f,b
 10242  0006B4  D7FC               	bra	u11537
 10243  0006B6  F000               	nop	
 10244                           
 10245                           ;UI.c: 185: lcdInst(0b10000000);;
 10246  0006B8  0E80               	movlw	128
 10247  0006BA  EC7D  F030         	call	_lcdInst
 10248                           
 10249                           ;UI.c: 186: printf(" -- POP  CAN -- ");
 10250  0006BE  0E55               	movlw	low STR_24
 10251  0006C0  0100               	movlb	0	; () banked
 10252  0006C2  6F8E               	movwf	printf@f& (0+255),b
 10253  0006C4  0EFD               	movlw	high STR_24
 10254  0006C6  0100               	movlb	0	; () banked
 10255  0006C8  6F8F               	movwf	(printf@f+1)& (0+255),b
 10256  0006CA  EC17  F00F         	call	_printf	;wreg free
 10257                           
 10258                           ;UI.c: 187: lcdInst(0b11000000);;
 10259  0006CE  0EC0               	movlw	192
 10260  0006D0  EC7D  F030         	call	_lcdInst
 10261                           
 10262                           ;UI.c: 188: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
 10263  0006D4  0E32               	movlw	low STR_25
 10264  0006D6  0100               	movlb	0	; () banked
 10265  0006D8  6F8E               	movwf	printf@f& (0+255),b
 10266  0006DA  0EFE               	movlw	high STR_25
 10267  0006DC  0100               	movlb	0	; () banked
 10268  0006DE  6F8F               	movwf	(printf@f+1)& (0+255),b
 10269  0006E0  C0F4  F090         	movff	_log_count_pop_no_tab,?_printf+2
 10270  0006E4  C0F5  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
 10271  0006E8  C069  F092         	movff	_log_count_pop_w_tab,?_printf+4
 10272  0006EC  C06A  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
 10273  0006F0  EC17  F00F         	call	_printf	;wreg free
 10274                           
 10275                           ;UI.c: 190: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10276  0006F4  0E00               	movlw	0
 10277  0006F6  0100               	movlb	0	; () banked
 10278  0006F8  6FD0               	movwf	UI@i_443& (0+255),b
 10279  0006FA                     l9950:
 10280                           
 10281                           ; BSR set to: 0
 10282  0006FA  0E63               	movlw	99
 10283  0006FC  0100               	movlb	0	; () banked
 10284  0006FE  65D0               	cpfsgt	UI@i_443& (0+255),b
 10285  000700  D001               	goto	l9954
 10286  000702  D00C               	goto	l9958
 10287  000704                     l9954:
 10288                           
 10289                           ; BSR set to: 0
 10290  000704  0E68               	movlw	104
 10291  000706  0100               	movlb	0	; () banked
 10292  000708  6FC4               	movwf	??_UI& (0+255),b
 10293  00070A  0EE4               	movlw	228
 10294  00070C                     u11547:
 10295  00070C  2EE8               	decfsz	wreg,f,c
 10296  00070E  D7FE               	bra	u11547
 10297  000710  2FC4               	decfsz	??_UI& (0+255),f,b
 10298  000712  D7FC               	bra	u11547
 10299  000714  F000               	nop	
 10300  000716  0100               	movlb	0	; () banked
 10301  000718  2BD0               	incf	UI@i_443& (0+255),f,b
 10302  00071A  D7EF               	goto	l9950
 10303  00071C                     l9958:
 10304                           
 10305                           ; BSR set to: 0
 10306  00071C  0100               	movlb	0	; () banked
 10307  00071E  51F8               	movf	_logstate& (0+255),w,b
 10308  000720  0100               	movlb	0	; () banked
 10309  000722  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10310  000724  B4D8               	btfsc	status,2,c
 10311  000726  0012               	return	
 10312                           
 10313                           ; BSR set to: 0
 10314                           ;UI.c: 191: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10315                           
 10316                           ; BSR set to: 0
 10317                           
 10318                           ; BSR set to: 0
 10319  000728  0E00               	movlw	0
 10320  00072A  0100               	movlb	0	; () banked
 10321  00072C  6FD1               	movwf	UI@i_444& (0+255),b
 10322  00072E                     l9964:
 10323                           
 10324                           ; BSR set to: 0
 10325  00072E  0E63               	movlw	99
 10326  000730  0100               	movlb	0	; () banked
 10327  000732  65D1               	cpfsgt	UI@i_444& (0+255),b
 10328  000734  D001               	goto	l9968
 10329  000736  D00C               	goto	l9972
 10330  000738                     l9968:
 10331                           
 10332                           ; BSR set to: 0
 10333  000738  0E68               	movlw	104
 10334  00073A  0100               	movlb	0	; () banked
 10335  00073C  6FC4               	movwf	??_UI& (0+255),b
 10336  00073E  0EE4               	movlw	228
 10337  000740                     u11557:
 10338  000740  2EE8               	decfsz	wreg,f,c
 10339  000742  D7FE               	bra	u11557
 10340  000744  2FC4               	decfsz	??_UI& (0+255),f,b
 10341  000746  D7FC               	bra	u11557
 10342  000748  F000               	nop	
 10343  00074A  0100               	movlb	0	; () banked
 10344  00074C  2BD1               	incf	UI@i_444& (0+255),f,b
 10345  00074E  D7EF               	goto	l9964
 10346  000750                     l9972:
 10347                           
 10348                           ; BSR set to: 0
 10349  000750  0100               	movlb	0	; () banked
 10350  000752  51F8               	movf	_logstate& (0+255),w,b
 10351  000754  0100               	movlb	0	; () banked
 10352  000756  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10353  000758  B4D8               	btfsc	status,2,c
 10354  00075A  0012               	return	
 10355                           
 10356                           ; BSR set to: 0
 10357                           ;UI.c: 193: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
 10358                           
 10359                           ; BSR set to: 0
 10360                           
 10361                           ; BSR set to: 0
 10362  00075C  0E01               	movlw	1
 10363  00075E  EC7D  F030         	call	_lcdInst
 10364  000762  0E68               	movlw	104
 10365  000764  0100               	movlb	0	; () banked
 10366  000766  6FC4               	movwf	??_UI& (0+255),b
 10367  000768  0EE4               	movlw	228
 10368  00076A                     u11567:
 10369  00076A  2EE8               	decfsz	wreg,f,c
 10370  00076C  D7FE               	bra	u11567
 10371  00076E  2FC4               	decfsz	??_UI& (0+255),f,b
 10372  000770  D7FC               	bra	u11567
 10373  000772  F000               	nop	
 10374                           
 10375                           ;UI.c: 194: lcdInst(0b10000000);;
 10376  000774  0E80               	movlw	128
 10377  000776  EC7D  F030         	call	_lcdInst
 10378                           
 10379                           ;UI.c: 195: printf(" -- SOUP CAN -- ");
 10380  00077A  0E66               	movlw	low STR_26
 10381  00077C  0100               	movlb	0	; () banked
 10382  00077E  6F8E               	movwf	printf@f& (0+255),b
 10383  000780  0EFD               	movlw	high STR_26
 10384  000782  0100               	movlb	0	; () banked
 10385  000784  6F8F               	movwf	(printf@f+1)& (0+255),b
 10386  000786  EC17  F00F         	call	_printf	;wreg free
 10387                           
 10388                           ;UI.c: 196: lcdInst(0b11000000);;
 10389  00078A  0EC0               	movlw	192
 10390  00078C  EC7D  F030         	call	_lcdInst
 10391                           
 10392                           ;UI.c: 197: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
 10393  000790  0E21               	movlw	low STR_27
 10394  000792  0100               	movlb	0	; () banked
 10395  000794  6F8E               	movwf	printf@f& (0+255),b
 10396  000796  0EFE               	movlw	high STR_27
 10397  000798  0100               	movlb	0	; () banked
 10398  00079A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10399  00079C  C067  F090         	movff	_log_count_can_no_lab,?_printf+2
 10400  0007A0  C068  F091         	movff	_log_count_can_no_lab+1,?_printf+3
 10401  0007A4  C13F  F092         	movff	_log_count_can_w_lab,?_printf+4
 10402  0007A8  C140  F093         	movff	_log_count_can_w_lab+1,?_printf+5
 10403  0007AC  EC17  F00F         	call	_printf	;wreg free
 10404                           
 10405                           ;UI.c: 199: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10406  0007B0  0E00               	movlw	0
 10407  0007B2  0100               	movlb	0	; () banked
 10408  0007B4  6FD2               	movwf	UI@i_447& (0+255),b
 10409  0007B6                     l9990:
 10410                           
 10411                           ; BSR set to: 0
 10412  0007B6  0E63               	movlw	99
 10413  0007B8  0100               	movlb	0	; () banked
 10414  0007BA  65D2               	cpfsgt	UI@i_447& (0+255),b
 10415  0007BC  D001               	goto	l9994
 10416  0007BE  D00C               	goto	l9998
 10417  0007C0                     l9994:
 10418                           
 10419                           ; BSR set to: 0
 10420  0007C0  0E68               	movlw	104
 10421  0007C2  0100               	movlb	0	; () banked
 10422  0007C4  6FC4               	movwf	??_UI& (0+255),b
 10423  0007C6  0EE4               	movlw	228
 10424  0007C8                     u11577:
 10425  0007C8  2EE8               	decfsz	wreg,f,c
 10426  0007CA  D7FE               	bra	u11577
 10427  0007CC  2FC4               	decfsz	??_UI& (0+255),f,b
 10428  0007CE  D7FC               	bra	u11577
 10429  0007D0  F000               	nop	
 10430  0007D2  0100               	movlb	0	; () banked
 10431  0007D4  2BD2               	incf	UI@i_447& (0+255),f,b
 10432  0007D6  D7EF               	goto	l9990
 10433  0007D8                     l9998:
 10434                           
 10435                           ; BSR set to: 0
 10436  0007D8  0100               	movlb	0	; () banked
 10437  0007DA  51F8               	movf	_logstate& (0+255),w,b
 10438  0007DC  0100               	movlb	0	; () banked
 10439  0007DE  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10440  0007E0  B4D8               	btfsc	status,2,c
 10441  0007E2  0012               	return	
 10442                           
 10443                           ; BSR set to: 0
 10444                           ;UI.c: 200: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10445                           
 10446                           ; BSR set to: 0
 10447                           
 10448                           ; BSR set to: 0
 10449  0007E4  0E00               	movlw	0
 10450  0007E6  0100               	movlb	0	; () banked
 10451  0007E8  6FD3               	movwf	UI@i_448& (0+255),b
 10452  0007EA                     l10004:
 10453                           
 10454                           ; BSR set to: 0
 10455  0007EA  0E63               	movlw	99
 10456  0007EC  0100               	movlb	0	; () banked
 10457  0007EE  65D3               	cpfsgt	UI@i_448& (0+255),b
 10458  0007F0  D001               	goto	l10008
 10459  0007F2  D00C               	goto	l10012
 10460  0007F4                     l10008:
 10461                           
 10462                           ; BSR set to: 0
 10463  0007F4  0E68               	movlw	104
 10464  0007F6  0100               	movlb	0	; () banked
 10465  0007F8  6FC4               	movwf	??_UI& (0+255),b
 10466  0007FA  0EE4               	movlw	228
 10467  0007FC                     u11587:
 10468  0007FC  2EE8               	decfsz	wreg,f,c
 10469  0007FE  D7FE               	bra	u11587
 10470  000800  2FC4               	decfsz	??_UI& (0+255),f,b
 10471  000802  D7FC               	bra	u11587
 10472  000804  F000               	nop	
 10473  000806  0100               	movlb	0	; () banked
 10474  000808  2BD3               	incf	UI@i_448& (0+255),f,b
 10475  00080A  D7EF               	goto	l10004
 10476  00080C                     l10012:
 10477                           
 10478                           ; BSR set to: 0
 10479  00080C  0100               	movlb	0	; () banked
 10480  00080E  51F8               	movf	_logstate& (0+255),w,b
 10481  000810  0100               	movlb	0	; () banked
 10482  000812  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10483  000814  B4D8               	btfsc	status,2,c
 10484  000816  0012               	return	
 10485                           
 10486                           ; BSR set to: 0
 10487                           ;UI.c: 202: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
 10488                           
 10489                           ; BSR set to: 0
 10490                           
 10491                           ; BSR set to: 0
 10492  000818  0E01               	movlw	1
 10493  00081A  EC7D  F030         	call	_lcdInst
 10494  00081E  0E68               	movlw	104
 10495  000820  0100               	movlb	0	; () banked
 10496  000822  6FC4               	movwf	??_UI& (0+255),b
 10497  000824  0EE4               	movlw	228
 10498  000826                     u11597:
 10499  000826  2EE8               	decfsz	wreg,f,c
 10500  000828  D7FE               	bra	u11597
 10501  00082A  2FC4               	decfsz	??_UI& (0+255),f,b
 10502  00082C  D7FC               	bra	u11597
 10503  00082E  F000               	nop	
 10504                           
 10505                           ;UI.c: 203: lcdInst(0b10000000);;
 10506  000830  0E80               	movlw	128
 10507  000832  EC7D  F030         	call	_lcdInst
 10508                           
 10509                           ;UI.c: 204: printf("-- TOTAL CANS --");
 10510  000836  0E77               	movlw	low STR_28
 10511  000838  0100               	movlb	0	; () banked
 10512  00083A  6F8E               	movwf	printf@f& (0+255),b
 10513  00083C  0EFD               	movlw	high STR_28
 10514  00083E  0100               	movlb	0	; () banked
 10515  000840  6F8F               	movwf	(printf@f+1)& (0+255),b
 10516  000842  EC17  F00F         	call	_printf	;wreg free
 10517                           
 10518                           ;UI.c: 205: lcdInst(0b11000000);;
 10519  000846  0EC0               	movlw	192
 10520  000848  EC7D  F030         	call	_lcdInst
 10521                           
 10522                           ;UI.c: 206: printf("%d", log_count_total);
 10523  00084C  0E3D               	movlw	low (STR_64+11)
 10524  00084E  0100               	movlb	0	; () banked
 10525  000850  6F8E               	movwf	printf@f& (0+255),b
 10526  000852  0EFF               	movlw	high (STR_64+11)
 10527  000854  0100               	movlb	0	; () banked
 10528  000856  6F8F               	movwf	(printf@f+1)& (0+255),b
 10529  000858  C141  F090         	movff	_log_count_total,?_printf+2
 10530  00085C  C142  F091         	movff	_log_count_total+1,?_printf+3
 10531  000860  EC17  F00F         	call	_printf	;wreg free
 10532                           
 10533                           ;UI.c: 208: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10534  000864  0E00               	movlw	0
 10535  000866  0100               	movlb	0	; () banked
 10536  000868  6FD4               	movwf	UI@i_451& (0+255),b
 10537  00086A                     l10030:
 10538                           
 10539                           ; BSR set to: 0
 10540  00086A  0E63               	movlw	99
 10541  00086C  0100               	movlb	0	; () banked
 10542  00086E  65D4               	cpfsgt	UI@i_451& (0+255),b
 10543  000870  D001               	goto	l10034
 10544  000872  D00C               	goto	l10038
 10545  000874                     l10034:
 10546                           
 10547                           ; BSR set to: 0
 10548  000874  0E68               	movlw	104
 10549  000876  0100               	movlb	0	; () banked
 10550  000878  6FC4               	movwf	??_UI& (0+255),b
 10551  00087A  0EE4               	movlw	228
 10552  00087C                     u11607:
 10553  00087C  2EE8               	decfsz	wreg,f,c
 10554  00087E  D7FE               	bra	u11607
 10555  000880  2FC4               	decfsz	??_UI& (0+255),f,b
 10556  000882  D7FC               	bra	u11607
 10557  000884  F000               	nop	
 10558  000886  0100               	movlb	0	; () banked
 10559  000888  2BD4               	incf	UI@i_451& (0+255),f,b
 10560  00088A  D7EF               	goto	l10030
 10561  00088C                     l10038:
 10562                           
 10563                           ; BSR set to: 0
 10564  00088C  0100               	movlb	0	; () banked
 10565  00088E  51F8               	movf	_logstate& (0+255),w,b
 10566  000890  0100               	movlb	0	; () banked
 10567  000892  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10568  000894  B4D8               	btfsc	status,2,c
 10569  000896  0012               	return	
 10570                           
 10571                           ; BSR set to: 0
 10572                           ;UI.c: 209: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10573                           
 10574                           ; BSR set to: 0
 10575                           
 10576                           ; BSR set to: 0
 10577  000898  0E00               	movlw	0
 10578  00089A  0100               	movlb	0	; () banked
 10579  00089C  6FD5               	movwf	UI@i_452& (0+255),b
 10580  00089E                     l10044:
 10581                           
 10582                           ; BSR set to: 0
 10583  00089E  0E63               	movlw	99
 10584  0008A0  0100               	movlb	0	; () banked
 10585  0008A2  65D5               	cpfsgt	UI@i_452& (0+255),b
 10586  0008A4  D001               	goto	l10048
 10587  0008A6  D00C               	goto	l10052
 10588  0008A8                     l10048:
 10589                           
 10590                           ; BSR set to: 0
 10591  0008A8  0E68               	movlw	104
 10592  0008AA  0100               	movlb	0	; () banked
 10593  0008AC  6FC4               	movwf	??_UI& (0+255),b
 10594  0008AE  0EE4               	movlw	228
 10595  0008B0                     u11617:
 10596  0008B0  2EE8               	decfsz	wreg,f,c
 10597  0008B2  D7FE               	bra	u11617
 10598  0008B4  2FC4               	decfsz	??_UI& (0+255),f,b
 10599  0008B6  D7FC               	bra	u11617
 10600  0008B8  F000               	nop	
 10601  0008BA  0100               	movlb	0	; () banked
 10602  0008BC  2BD5               	incf	UI@i_452& (0+255),f,b
 10603  0008BE  D7EF               	goto	l10044
 10604  0008C0                     l10052:
 10605                           
 10606                           ; BSR set to: 0
 10607  0008C0  0100               	movlb	0	; () banked
 10608  0008C2  51F8               	movf	_logstate& (0+255),w,b
 10609  0008C4  0100               	movlb	0	; () banked
 10610  0008C6  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10611  0008C8  B4D8               	btfsc	status,2,c
 10612  0008CA  0012               	return	
 10613  0008CC                     l10056:
 10614  0008CC  0100               	movlb	0	; () banked
 10615  0008CE  51F8               	movf	_logstate& (0+255),w,b
 10616  0008D0  0100               	movlb	0	; () banked
 10617  0008D2  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10618  0008D4  B4D8               	btfsc	status,2,c
 10619  0008D6  0012               	return	
 10620  0008D8  D44A               	goto	l9752
 10621  0008DA                     __end_of_UI:
 10622                           	opt stack 0
 10623                           tblptru	equ	0xFF8
 10624                           tblptrh	equ	0xFF7
 10625                           tblptrl	equ	0xFF6
 10626                           tablat	equ	0xFF5
 10627                           prodh	equ	0xFF4
 10628                           prodl	equ	0xFF3
 10629                           intcon	equ	0xFF2
 10630                           intcon2	equ	0xFF1
 10631                           intcon3	equ	0xFF0
 10632                           postinc0	equ	0xFEE
 10633                           wreg	equ	0xFE8
 10634                           postdec1	equ	0xFE5
 10635                           fsr1l	equ	0xFE1
 10636                           indf2	equ	0xFDF
 10637                           postinc2	equ	0xFDE
 10638                           postdec2	equ	0xFDD
 10639                           fsr2h	equ	0xFDA
 10640                           fsr2l	equ	0xFD9
 10641                           status	equ	0xFD8
 10642                           
 10643 ;; *************** function _printRTC *****************
 10644 ;; Defined at:
 10645 ;;		line 63 in file "RTC.c"
 10646 ;; Parameters:    Size  Location     Type
 10647 ;;		None
 10648 ;; Auto vars:     Size  Location     Type
 10649 ;;  i               2   66[BANK0 ] int 
 10650 ;;  INT_time       14   46[BANK0 ] int [7]
 10651 ;;  month           4   62[BANK0 ] unsigned char [4]
 10652 ;;  RTC_month       2   60[BANK0 ] int 
 10653 ;; Return value:  Size  Location     Type
 10654 ;;                  1    wreg      void 
 10655 ;; Registers used:
 10656 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10657 ;; Tracked objects:
 10658 ;;		On entry : 0/0
 10659 ;;		On exit  : 0/0
 10660 ;;		Unchanged: 0/0
 10661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10663 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10664 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10665 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10666 ;;Total ram usage:       25 bytes
 10667 ;; Hardware stack levels used:    1
 10668 ;; Hardware stack levels required when called:   10
 10669 ;; This function calls:
 10670 ;;		_getRTC
 10671 ;;		_lcdInst
 10672 ;;		_printf
 10673 ;;		_strcpy
 10674 ;; This function is called by:
 10675 ;;		_UI
 10676 ;;		_change_state_to_menu_start
 10677 ;; This function uses a non-reentrant model
 10678 ;;
 10679                           
 10680                           	psect	text28
 10681  003404                     __ptext28:
 10682                           	opt stack 0
 10683  003404                     _printRTC:
 10684                           	opt stack 18
 10685                           
 10686                           ;RTC.c: 64: getRTC();
 10687                           
 10688                           ; BSR set to: 0
 10689                           ;incstack = 0
 10690  003404  EC30  F029         	call	_getRTC	;wreg free
 10691                           
 10692                           ;RTC.c: 65: char month[] = "MMM";
 10693  003408  C14D  F0BE         	movff	printRTC@F3241,printRTC@month
 10694  00340C  C14E  F0BF         	movff	printRTC@F3241+1,printRTC@month+1
 10695  003410  C14F  F0C0         	movff	printRTC@F3241+2,printRTC@month+2
 10696  003414  C150  F0C1         	movff	printRTC@F3241+3,printRTC@month+3
 10697                           
 10698                           ;RTC.c: 66: int INT_time[7];
 10699                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 10700  003418  0E00               	movlw	0
 10701  00341A  0100               	movlb	0	; () banked
 10702  00341C  6FC3               	movwf	(printRTC@i+1)& (0+255),b
 10703  00341E  0E00               	movlw	0
 10704  003420  6FC2               	movwf	printRTC@i& (0+255),b
 10705                           
 10706                           ; BSR set to: 0
 10707  003422  0100               	movlb	0	; () banked
 10708  003424  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
 10709  003426  D008               	goto	l7426
 10710  003428  0100               	movlb	0	; () banked
 10711  00342A  51C3               	movf	(printRTC@i+1)& (0+255),w,b
 10712  00342C  E146               	bnz	l634
 10713  00342E  0E07               	movlw	7
 10714  003430  0100               	movlb	0	; () banked
 10715  003432  5DC2               	subwf	printRTC@i& (0+255),w,b
 10716  003434  B0D8               	btfsc	status,0,c
 10717  003436  D041               	goto	l634
 10718  003438                     l7426:
 10719                           
 10720                           ; BSR set to: 0
 10721                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 10722  003438  0E1C               	movlw	low _time
 10723  00343A  0100               	movlb	0	; () banked
 10724  00343C  25C2               	addwf	printRTC@i& (0+255),w,b
 10725  00343E  6ED9               	movwf	fsr2l,c
 10726  003440  0E01               	movlw	high _time
 10727  003442  0100               	movlb	0	; () banked
 10728  003444  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
 10729  003446  6EDA               	movwf	fsr2h,c
 10730  003448  50DF               	movf	indf2,w,c
 10731  00344A  0100               	movlb	0	; () banked
 10732  00344C  6FAB               	movwf	??_printRTC& (0+255),b
 10733  00344E  0100               	movlb	0	; () banked
 10734  003450  3BAB               	swapf	??_printRTC& (0+255),f,b
 10735  003452  0E0F               	movlw	15
 10736  003454  17AB               	andwf	??_printRTC& (0+255),f,b
 10737  003456  0E0F               	movlw	15
 10738  003458  0100               	movlb	0	; () banked
 10739  00345A  17AB               	andwf	??_printRTC& (0+255),f,b
 10740  00345C  0100               	movlb	0	; () banked
 10741  00345E  51AB               	movf	??_printRTC& (0+255),w,b
 10742  003460  0D0A               	mullw	10
 10743  003462  0E1C               	movlw	low _time
 10744  003464  0100               	movlb	0	; () banked
 10745  003466  25C2               	addwf	printRTC@i& (0+255),w,b
 10746  003468  6ED9               	movwf	fsr2l,c
 10747  00346A  0E01               	movlw	high _time
 10748  00346C  0100               	movlb	0	; () banked
 10749  00346E  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
 10750  003470  6EDA               	movwf	fsr2h,c
 10751  003472  50DF               	movf	indf2,w,c
 10752  003474  0B0F               	andlw	15
 10753  003476  0100               	movlb	0	; () banked
 10754  003478  6FAC               	movwf	(??_printRTC+1)& (0+255),b
 10755  00347A  6BAD               	clrf	(??_printRTC+2)& (0+255),b
 10756  00347C  50F3               	movf	prodl,w,c
 10757  00347E  0100               	movlb	0	; () banked
 10758  003480  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
 10759  003482  50F4               	movf	prodh,w,c
 10760  003484  0100               	movlb	0	; () banked
 10761  003486  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
 10762  003488  90D8               	bcf	status,0,c
 10763  00348A  0100               	movlb	0	; () banked
 10764  00348C  35C2               	rlcf	printRTC@i& (0+255),w,b
 10765  00348E  6ED9               	movwf	fsr2l,c
 10766  003490  0100               	movlb	0	; () banked
 10767  003492  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
 10768  003494  6EDA               	movwf	fsr2h,c
 10769  003496  0EAE               	movlw	low printRTC@INT_time
 10770  003498  26D9               	addwf	fsr2l,f,c
 10771  00349A  0E00               	movlw	high printRTC@INT_time
 10772  00349C  22DA               	addwfc	fsr2h,f,c
 10773  00349E  C0AC  FFDE         	movff	??_printRTC+1,postinc2
 10774  0034A2  C0AD  FFDD         	movff	??_printRTC+2,postdec2
 10775                           
 10776                           ; BSR set to: 0
 10777  0034A6  0100               	movlb	0	; () banked
 10778  0034A8  4BC2               	infsnz	printRTC@i& (0+255),f,b
 10779  0034AA  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
 10780                           
 10781                           ; BSR set to: 0
 10782  0034AC  0100               	movlb	0	; () banked
 10783  0034AE  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
 10784  0034B0  D7C3               	goto	l7426
 10785  0034B2  0100               	movlb	0	; () banked
 10786  0034B4  51C3               	movf	(printRTC@i+1)& (0+255),w,b
 10787  0034B6  E101               	bnz	u6550
 10788  0034B8  D7BA               	goto	L10
 10789  0034BA                     u6550:
 10790  0034BA                     l634:
 10791                           
 10792                           ; BSR set to: 0
 10793                           ;RTC.c: 69: }
 10794                           ;RTC.c: 70: int RTC_month = INT_time[5];
 10795  0034BA  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
 10796  0034BE  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
 10797                           
 10798                           ;RTC.c: 72: switch(RTC_month){
 10799  0034C2  D0B4               	goto	l7458
 10800  0034C4                     l7432:
 10801                           
 10802                           ; BSR set to: 0
 10803                           ;RTC.c: 74: strcpy(month, "JAN");
 10804  0034C4  0EBE               	movlw	low printRTC@month
 10805  0034C6  0100               	movlb	0	; () banked
 10806  0034C8  6F80               	movwf	strcpy@to& (0+255),b
 10807  0034CA  0E00               	movlw	high printRTC@month
 10808  0034CC  0100               	movlb	0	; () banked
 10809  0034CE  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10810  0034D0  0EDB               	movlw	low STR_8
 10811  0034D2  0100               	movlb	0	; () banked
 10812  0034D4  6F82               	movwf	strcpy@from& (0+255),b
 10813  0034D6  0EFF               	movlw	high STR_8
 10814  0034D8  0100               	movlb	0	; () banked
 10815  0034DA  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10816  0034DC  ECCD  F02D         	call	_strcpy	;wreg free
 10817                           
 10818                           ;RTC.c: 75: break;
 10819  0034E0  D0D4               	goto	l7460
 10820  0034E2                     l7434:
 10821                           
 10822                           ;RTC.c: 77: strcpy(month, "FEB");
 10823  0034E2  0EBE               	movlw	low printRTC@month
 10824  0034E4  0100               	movlb	0	; () banked
 10825  0034E6  6F80               	movwf	strcpy@to& (0+255),b
 10826  0034E8  0E00               	movlw	high printRTC@month
 10827  0034EA  0100               	movlb	0	; () banked
 10828  0034EC  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10829  0034EE  0ECB               	movlw	low STR_9
 10830  0034F0  0100               	movlb	0	; () banked
 10831  0034F2  6F82               	movwf	strcpy@from& (0+255),b
 10832  0034F4  0EFF               	movlw	high STR_9
 10833  0034F6  0100               	movlb	0	; () banked
 10834  0034F8  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10835  0034FA  ECCD  F02D         	call	_strcpy	;wreg free
 10836                           
 10837                           ;RTC.c: 78: break;
 10838  0034FE  D0C5               	goto	l7460
 10839  003500                     l7436:
 10840                           
 10841                           ;RTC.c: 80: strcpy(month, "MAR");
 10842  003500  0EBE               	movlw	low printRTC@month
 10843  003502  0100               	movlb	0	; () banked
 10844  003504  6F80               	movwf	strcpy@to& (0+255),b
 10845  003506  0E00               	movlw	high printRTC@month
 10846  003508  0100               	movlb	0	; () banked
 10847  00350A  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10848  00350C  0EE7               	movlw	low STR_10
 10849  00350E  0100               	movlb	0	; () banked
 10850  003510  6F82               	movwf	strcpy@from& (0+255),b
 10851  003512  0EFF               	movlw	high STR_10
 10852  003514  0100               	movlb	0	; () banked
 10853  003516  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10854  003518  ECCD  F02D         	call	_strcpy	;wreg free
 10855                           
 10856                           ;RTC.c: 81: break;
 10857  00351C  D0B6               	goto	l7460
 10858  00351E                     l7438:
 10859                           
 10860                           ;RTC.c: 83: strcpy(month, "APR");
 10861  00351E  0EBE               	movlw	low printRTC@month
 10862  003520  0100               	movlb	0	; () banked
 10863  003522  6F80               	movwf	strcpy@to& (0+255),b
 10864  003524  0E00               	movlw	high printRTC@month
 10865  003526  0100               	movlb	0	; () banked
 10866  003528  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10867  00352A  0EEB               	movlw	low STR_11
 10868  00352C  0100               	movlb	0	; () banked
 10869  00352E  6F82               	movwf	strcpy@from& (0+255),b
 10870  003530  0EFF               	movlw	high STR_11
 10871  003532  0100               	movlb	0	; () banked
 10872  003534  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10873  003536  ECCD  F02D         	call	_strcpy	;wreg free
 10874                           
 10875                           ;RTC.c: 84: break;
 10876  00353A  D0A7               	goto	l7460
 10877  00353C                     l7440:
 10878                           
 10879                           ;RTC.c: 86: strcpy(month, "MAY");
 10880  00353C  0EBE               	movlw	low printRTC@month
 10881  00353E  0100               	movlb	0	; () banked
 10882  003540  6F80               	movwf	strcpy@to& (0+255),b
 10883  003542  0E00               	movlw	high printRTC@month
 10884  003544  0100               	movlb	0	; () banked
 10885  003546  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10886  003548  0EFB               	movlw	low STR_12
 10887  00354A  0100               	movlb	0	; () banked
 10888  00354C  6F82               	movwf	strcpy@from& (0+255),b
 10889  00354E  0EFF               	movlw	high STR_12
 10890  003550  0100               	movlb	0	; () banked
 10891  003552  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10892  003554  ECCD  F02D         	call	_strcpy	;wreg free
 10893                           
 10894                           ;RTC.c: 87: break;
 10895  003558  D098               	goto	l7460
 10896  00355A                     l7442:
 10897                           
 10898                           ;RTC.c: 89: strcpy(month, "JUN");
 10899  00355A  0EBE               	movlw	low printRTC@month
 10900  00355C  0100               	movlb	0	; () banked
 10901  00355E  6F80               	movwf	strcpy@to& (0+255),b
 10902  003560  0E00               	movlw	high printRTC@month
 10903  003562  0100               	movlb	0	; () banked
 10904  003564  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10905  003566  0EDF               	movlw	low STR_13
 10906  003568  0100               	movlb	0	; () banked
 10907  00356A  6F82               	movwf	strcpy@from& (0+255),b
 10908  00356C  0EFF               	movlw	high STR_13
 10909  00356E  0100               	movlb	0	; () banked
 10910  003570  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10911  003572  ECCD  F02D         	call	_strcpy	;wreg free
 10912                           
 10913                           ;RTC.c: 90: break;
 10914  003576  D089               	goto	l7460
 10915  003578                     l7444:
 10916                           
 10917                           ;RTC.c: 92: strcpy(month, "JUL");
 10918  003578  0EBE               	movlw	low printRTC@month
 10919  00357A  0100               	movlb	0	; () banked
 10920  00357C  6F80               	movwf	strcpy@to& (0+255),b
 10921  00357E  0E00               	movlw	high printRTC@month
 10922  003580  0100               	movlb	0	; () banked
 10923  003582  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10924  003584  0ED7               	movlw	low STR_14
 10925  003586  0100               	movlb	0	; () banked
 10926  003588  6F82               	movwf	strcpy@from& (0+255),b
 10927  00358A  0EFF               	movlw	high STR_14
 10928  00358C  0100               	movlb	0	; () banked
 10929  00358E  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10930  003590  ECCD  F02D         	call	_strcpy	;wreg free
 10931                           
 10932                           ;RTC.c: 93: break;
 10933  003594  D07A               	goto	l7460
 10934  003596                     l7446:
 10935                           
 10936                           ;RTC.c: 95: strcpy(month, "AUG");
 10937  003596  0EBE               	movlw	low printRTC@month
 10938  003598  0100               	movlb	0	; () banked
 10939  00359A  6F80               	movwf	strcpy@to& (0+255),b
 10940  00359C  0E00               	movlw	high printRTC@month
 10941  00359E  0100               	movlb	0	; () banked
 10942  0035A0  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10943  0035A2  0ED3               	movlw	low STR_15
 10944  0035A4  0100               	movlb	0	; () banked
 10945  0035A6  6F82               	movwf	strcpy@from& (0+255),b
 10946  0035A8  0EFF               	movlw	high STR_15
 10947  0035AA  0100               	movlb	0	; () banked
 10948  0035AC  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10949  0035AE  ECCD  F02D         	call	_strcpy	;wreg free
 10950                           
 10951                           ;RTC.c: 96: break;
 10952  0035B2  D06B               	goto	l7460
 10953  0035B4                     l7448:
 10954                           
 10955                           ;RTC.c: 98: strcpy(month, "SEP");
 10956  0035B4  0EBE               	movlw	low printRTC@month
 10957  0035B6  0100               	movlb	0	; () banked
 10958  0035B8  6F80               	movwf	strcpy@to& (0+255),b
 10959  0035BA  0E00               	movlw	high printRTC@month
 10960  0035BC  0100               	movlb	0	; () banked
 10961  0035BE  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10962  0035C0  0EE3               	movlw	low STR_16
 10963  0035C2  0100               	movlb	0	; () banked
 10964  0035C4  6F82               	movwf	strcpy@from& (0+255),b
 10965  0035C6  0EFF               	movlw	high STR_16
 10966  0035C8  0100               	movlb	0	; () banked
 10967  0035CA  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10968  0035CC  ECCD  F02D         	call	_strcpy	;wreg free
 10969                           
 10970                           ;RTC.c: 99: break;
 10971  0035D0  D05C               	goto	l7460
 10972  0035D2                     l7450:
 10973                           
 10974                           ;RTC.c: 101: strcpy(month, "OCT");
 10975  0035D2  0EBE               	movlw	low printRTC@month
 10976  0035D4  0100               	movlb	0	; () banked
 10977  0035D6  6F80               	movwf	strcpy@to& (0+255),b
 10978  0035D8  0E00               	movlw	high printRTC@month
 10979  0035DA  0100               	movlb	0	; () banked
 10980  0035DC  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10981  0035DE  0EF3               	movlw	low STR_17
 10982  0035E0  0100               	movlb	0	; () banked
 10983  0035E2  6F82               	movwf	strcpy@from& (0+255),b
 10984  0035E4  0EFF               	movlw	high STR_17
 10985  0035E6  0100               	movlb	0	; () banked
 10986  0035E8  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10987  0035EA  ECCD  F02D         	call	_strcpy	;wreg free
 10988                           
 10989                           ;RTC.c: 102: break;
 10990  0035EE  D04D               	goto	l7460
 10991  0035F0                     l7452:
 10992                           
 10993                           ;RTC.c: 104: strcpy(month, "NOV");
 10994  0035F0  0EBE               	movlw	low printRTC@month
 10995  0035F2  0100               	movlb	0	; () banked
 10996  0035F4  6F80               	movwf	strcpy@to& (0+255),b
 10997  0035F6  0E00               	movlw	high printRTC@month
 10998  0035F8  0100               	movlb	0	; () banked
 10999  0035FA  6F81               	movwf	(strcpy@to+1)& (0+255),b
 11000  0035FC  0EF7               	movlw	low STR_18
 11001  0035FE  0100               	movlb	0	; () banked
 11002  003600  6F82               	movwf	strcpy@from& (0+255),b
 11003  003602  0EFF               	movlw	high STR_18
 11004  003604  0100               	movlb	0	; () banked
 11005  003606  6F83               	movwf	(strcpy@from+1)& (0+255),b
 11006  003608  ECCD  F02D         	call	_strcpy	;wreg free
 11007                           
 11008                           ;RTC.c: 105: break;
 11009  00360C  D03E               	goto	l7460
 11010  00360E                     l7454:
 11011                           
 11012                           ;RTC.c: 107: strcpy(month, "DEC");
 11013  00360E  0EBE               	movlw	low printRTC@month
 11014  003610  0100               	movlb	0	; () banked
 11015  003612  6F80               	movwf	strcpy@to& (0+255),b
 11016  003614  0E00               	movlw	high printRTC@month
 11017  003616  0100               	movlb	0	; () banked
 11018  003618  6F81               	movwf	(strcpy@to+1)& (0+255),b
 11019  00361A  0ECF               	movlw	low STR_19
 11020  00361C  0100               	movlb	0	; () banked
 11021  00361E  6F82               	movwf	strcpy@from& (0+255),b
 11022  003620  0EFF               	movlw	high STR_19
 11023  003622  0100               	movlb	0	; () banked
 11024  003624  6F83               	movwf	(strcpy@from+1)& (0+255),b
 11025  003626  ECCD  F02D         	call	_strcpy	;wreg free
 11026                           
 11027                           ;RTC.c: 109: }
 11028                           
 11029                           ;RTC.c: 108: break;
 11030  00362A  D02F               	goto	l7460
 11031  00362C                     l7458:
 11032  00362C  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
 11033  003630  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
 11034                           
 11035                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11036                           ; Switch size 1, requested type "space"
 11037                           ; Number of cases is 1, Range of values is 0 to 0
 11038                           ; switch strategies available:
 11039                           ; Name         Instructions Cycles
 11040                           ; simple_byte            4     3 (average)
 11041                           ;	Chosen strategy is simple_byte
 11042  003634  0100               	movlb	0	; () banked
 11043  003636  51AC               	movf	(??_printRTC+1)& (0+255),w,b
 11044  003638  0A00               	xorlw	0	; case 0
 11045  00363A  A4D8               	btfss	status,2,c
 11046  00363C  D026               	goto	l7460
 11047                           
 11048                           ; BSR set to: 0
 11049                           ; Switch size 1, requested type "space"
 11050                           ; Number of cases is 12, Range of values is 1 to 12
 11051                           ; switch strategies available:
 11052                           ; Name         Instructions Cycles
 11053                           ; simple_byte           37    19 (average)
 11054                           ;	Chosen strategy is simple_byte
 11055  00363E  0100               	movlb	0	; () banked
 11056  003640  51AB               	movf	??_printRTC& (0+255),w,b
 11057  003642  0A01               	xorlw	1	; case 1
 11058  003644  B4D8               	btfsc	status,2,c
 11059  003646  D73E               	goto	l7432
 11060  003648  0A03               	xorlw	3	; case 2
 11061  00364A  B4D8               	btfsc	status,2,c
 11062  00364C  D74A               	goto	l7434
 11063  00364E  0A01               	xorlw	1	; case 3
 11064  003650  B4D8               	btfsc	status,2,c
 11065  003652  D756               	goto	l7436
 11066  003654  0A07               	xorlw	7	; case 4
 11067  003656  B4D8               	btfsc	status,2,c
 11068  003658  D762               	goto	l7438
 11069  00365A  0A01               	xorlw	1	; case 5
 11070  00365C  B4D8               	btfsc	status,2,c
 11071  00365E  D76E               	goto	l7440
 11072  003660  0A03               	xorlw	3	; case 6
 11073  003662  B4D8               	btfsc	status,2,c
 11074  003664  D77A               	goto	l7442
 11075  003666  0A01               	xorlw	1	; case 7
 11076  003668  B4D8               	btfsc	status,2,c
 11077  00366A  D786               	goto	l7444
 11078  00366C  0A0F               	xorlw	15	; case 8
 11079  00366E  B4D8               	btfsc	status,2,c
 11080  003670  D792               	goto	l7446
 11081  003672  0A01               	xorlw	1	; case 9
 11082  003674  B4D8               	btfsc	status,2,c
 11083  003676  D79E               	goto	l7448
 11084  003678  0A03               	xorlw	3	; case 10
 11085  00367A  B4D8               	btfsc	status,2,c
 11086  00367C  D7AA               	goto	l7450
 11087  00367E  0A01               	xorlw	1	; case 11
 11088  003680  B4D8               	btfsc	status,2,c
 11089  003682  D7B6               	goto	l7452
 11090  003684  0A07               	xorlw	7	; case 12
 11091  003686  B4D8               	btfsc	status,2,c
 11092  003688  D7C2               	goto	l7454
 11093  00368A                     l7460:
 11094                           
 11095                           ;RTC.c: 110: lcdInst(0b10000000);;
 11096  00368A  0E80               	movlw	128
 11097  00368C  EC7D  F030         	call	_lcdInst
 11098                           
 11099                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 11100  003690  0ECC               	movlw	low STR_21
 11101  003692  0100               	movlb	0	; () banked
 11102  003694  6F8E               	movwf	printf@f& (0+255),b
 11103  003696  0EFA               	movlw	high STR_21
 11104  003698  0100               	movlb	0	; () banked
 11105  00369A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11106  00369C  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
 11107  0036A0  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
 11108  0036A4  0EBE               	movlw	low printRTC@month
 11109  0036A6  0100               	movlb	0	; () banked
 11110  0036A8  6F92               	movwf	(?_printf+4)& (0+255),b
 11111  0036AA  0E00               	movlw	high printRTC@month
 11112  0036AC  0100               	movlb	0	; () banked
 11113  0036AE  6F93               	movwf	(?_printf+5)& (0+255),b
 11114  0036B0  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
 11115  0036B4  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
 11116  0036B8  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
 11117  0036BC  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
 11118  0036C0  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
 11119  0036C4  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
 11120  0036C8  EC17  F00F         	call	_printf	;wreg free
 11121  0036CC  0012               	return		;funcret
 11122  0036CE                     __end_of_printRTC:
 11123                           	opt stack 0
 11124                           tblptru	equ	0xFF8
 11125                           tblptrh	equ	0xFF7
 11126                           tblptrl	equ	0xFF6
 11127                           tablat	equ	0xFF5
 11128                           prodh	equ	0xFF4
 11129                           prodl	equ	0xFF3
 11130                           intcon	equ	0xFF2
 11131                           intcon2	equ	0xFF1
 11132                           intcon3	equ	0xFF0
 11133                           postinc0	equ	0xFEE
 11134                           wreg	equ	0xFE8
 11135                           postdec1	equ	0xFE5
 11136                           fsr1l	equ	0xFE1
 11137                           indf2	equ	0xFDF
 11138                           postinc2	equ	0xFDE
 11139                           postdec2	equ	0xFDD
 11140                           fsr2h	equ	0xFDA
 11141                           fsr2l	equ	0xFD9
 11142                           status	equ	0xFD8
 11143                           
 11144 ;; *************** function _strcpy *****************
 11145 ;; Defined at:
 11146 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 11147 ;; Parameters:    Size  Location     Type
 11148 ;;  to              2    0[BANK0 ] PTR unsigned char 
 11149 ;;		 -> printRTC@month(4), UI@month(4), 
 11150 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 11151 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 11152 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 11153 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 11154 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 11155 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 11156 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 11157 ;;		 -> STR_8(4), 
 11158 ;; Auto vars:     Size  Location     Type
 11159 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 11160 ;;		 -> printRTC@month(4), UI@month(4), 
 11161 ;; Return value:  Size  Location     Type
 11162 ;;                  2    0[BANK0 ] PTR unsigned char 
 11163 ;; Registers used:
 11164 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 11165 ;; Tracked objects:
 11166 ;;		On entry : 0/0
 11167 ;;		On exit  : 0/0
 11168 ;;		Unchanged: 0/0
 11169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11170 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11171 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11173 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11174 ;;Total ram usage:        6 bytes
 11175 ;; Hardware stack levels used:    1
 11176 ;; Hardware stack levels required when called:    7
 11177 ;; This function calls:
 11178 ;;		Nothing
 11179 ;; This function is called by:
 11180 ;;		_UI
 11181 ;;		_printRTC
 11182 ;; This function uses a non-reentrant model
 11183 ;;
 11184                           
 11185                           	psect	text29
 11186  005B9A                     __ptext29:
 11187                           	opt stack 0
 11188  005B9A                     _strcpy:
 11189                           	opt stack 20
 11190                           
 11191                           ;incstack = 0
 11192  005B9A  C080  F084         	movff	strcpy@to,strcpy@cp
 11193  005B9E  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
 11194  005BA2  D006               	goto	l7124
 11195  005BA4                     l7122:
 11196  005BA4  0100               	movlb	0	; () banked
 11197  005BA6  4B84               	infsnz	strcpy@cp& (0+255),f,b
 11198  005BA8  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
 11199  005BAA  0100               	movlb	0	; () banked
 11200  005BAC  4B82               	infsnz	strcpy@from& (0+255),f,b
 11201  005BAE  2B83               	incf	(strcpy@from+1)& (0+255),f,b
 11202  005BB0                     l7124:
 11203  005BB0  C082  FFF6         	movff	strcpy@from,tblptrl
 11204  005BB4  C083  FFF7         	movff	strcpy@from+1,tblptrh
 11205  005BB8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11206  005BB8  6AF8               	clrf	tblptru,c
 11207  005BBA                     	endif
 11208  005BBA                     	if	0	;tblptru may be non-zero
 11209  005BBA                     	endif
 11210  005BBA  C084  FFD9         	movff	strcpy@cp,fsr2l
 11211  005BBE  C085  FFDA         	movff	strcpy@cp+1,fsr2h
 11212  005BC2  0008               	tblrd		*
 11213  005BC4  CFF5 FFDF          	movff	tablat,indf2
 11214  005BC8  50DF               	movf	indf2,w,c
 11215  005BCA  B4D8               	btfsc	status,2,c
 11216  005BCC  0012               	return	
 11217  005BCE  D7EA               	goto	l7122
 11218  005BD0                     __end_of_strcpy:
 11219                           	opt stack 0
 11220                           tblptru	equ	0xFF8
 11221                           tblptrh	equ	0xFF7
 11222                           tblptrl	equ	0xFF6
 11223                           tablat	equ	0xFF5
 11224                           prodh	equ	0xFF4
 11225                           prodl	equ	0xFF3
 11226                           intcon	equ	0xFF2
 11227                           intcon2	equ	0xFF1
 11228                           intcon3	equ	0xFF0
 11229                           postinc0	equ	0xFEE
 11230                           wreg	equ	0xFE8
 11231                           postdec1	equ	0xFE5
 11232                           fsr1l	equ	0xFE1
 11233                           indf2	equ	0xFDF
 11234                           postinc2	equ	0xFDE
 11235                           postdec2	equ	0xFDD
 11236                           fsr2h	equ	0xFDA
 11237                           fsr2l	equ	0xFD9
 11238                           status	equ	0xFD8
 11239                           
 11240 ;; *************** function _getRTC *****************
 11241 ;; Defined at:
 11242 ;;		line 44 in file "RTC.c"
 11243 ;; Parameters:    Size  Location     Type
 11244 ;;		None
 11245 ;; Auto vars:     Size  Location     Type
 11246 ;;  i               2    3[BANK0 ] int 
 11247 ;; Return value:  Size  Location     Type
 11248 ;;                  1    wreg      void 
 11249 ;; Registers used:
 11250 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11251 ;; Tracked objects:
 11252 ;;		On entry : 0/0
 11253 ;;		On exit  : 0/0
 11254 ;;		Unchanged: 0/0
 11255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11257 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11259 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11260 ;;Total ram usage:        2 bytes
 11261 ;; Hardware stack levels used:    1
 11262 ;; Hardware stack levels required when called:    9
 11263 ;; This function calls:
 11264 ;;		_I2C_Master_Read
 11265 ;;		_I2C_Master_Start
 11266 ;;		_I2C_Master_Stop
 11267 ;;		_I2C_Master_Write
 11268 ;; This function is called by:
 11269 ;;		_printRTC
 11270 ;;		_initSortTimer
 11271 ;; This function uses a non-reentrant model
 11272 ;;
 11273                           
 11274                           	psect	text30
 11275  005260                     __ptext30:
 11276                           	opt stack 0
 11277  005260                     _getRTC:
 11278                           	opt stack 18
 11279                           
 11280                           ;RTC.c: 48: I2C_Master_Start();
 11281                           
 11282                           ;incstack = 0
 11283  005260  ECA3  F030         	call	_I2C_Master_Start	;wreg free
 11284                           
 11285                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 11286  005264  0E00               	movlw	0
 11287  005266  0100               	movlb	0	; () banked
 11288  005268  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 11289  00526A  0ED0               	movlw	208
 11290  00526C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 11291  00526E  EC91  F030         	call	_I2C_Master_Write	;wreg free
 11292                           
 11293                           ;RTC.c: 50: I2C_Master_Write(0x00);
 11294  005272  0E00               	movlw	0
 11295  005274  0100               	movlb	0	; () banked
 11296  005276  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 11297  005278  0E00               	movlw	0
 11298  00527A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 11299  00527C  EC91  F030         	call	_I2C_Master_Write	;wreg free
 11300                           
 11301                           ;RTC.c: 51: I2C_Master_Stop();
 11302  005280  EC9F  F030         	call	_I2C_Master_Stop	;wreg free
 11303                           
 11304                           ;RTC.c: 54: I2C_Master_Start();
 11305  005284  ECA3  F030         	call	_I2C_Master_Start	;wreg free
 11306                           
 11307                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 11308  005288  0E00               	movlw	0
 11309  00528A  0100               	movlb	0	; () banked
 11310  00528C  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 11311  00528E  0ED1               	movlw	209
 11312  005290  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 11313  005292  EC91  F030         	call	_I2C_Master_Write	;wreg free
 11314                           
 11315                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 11316  005296  0E00               	movlw	0
 11317  005298  0100               	movlb	0	; () banked
 11318  00529A  6F84               	movwf	(getRTC@i+1)& (0+255),b
 11319  00529C  0E00               	movlw	0
 11320  00529E  6F83               	movwf	getRTC@i& (0+255),b
 11321  0052A0                     l7130:
 11322                           
 11323                           ; BSR set to: 0
 11324  0052A0  0100               	movlb	0	; () banked
 11325  0052A2  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
 11326  0052A4  D008               	goto	l7134
 11327  0052A6  0100               	movlb	0	; () banked
 11328  0052A8  5184               	movf	(getRTC@i+1)& (0+255),w,b
 11329  0052AA  E115               	bnz	l7140
 11330  0052AC  0E06               	movlw	6
 11331  0052AE  0100               	movlb	0	; () banked
 11332  0052B0  5D83               	subwf	getRTC@i& (0+255),w,b
 11333  0052B2  B0D8               	btfsc	status,0,c
 11334  0052B4  D010               	goto	l7140
 11335  0052B6                     l7134:
 11336                           
 11337                           ; BSR set to: 0
 11338                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 11339  0052B6  0E1C               	movlw	low _time
 11340  0052B8  0100               	movlb	0	; () banked
 11341  0052BA  2583               	addwf	getRTC@i& (0+255),w,b
 11342  0052BC  6ED9               	movwf	fsr2l,c
 11343  0052BE  0E01               	movlw	high _time
 11344  0052C0  0100               	movlb	0	; () banked
 11345  0052C2  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
 11346  0052C4  6EDA               	movwf	fsr2h,c
 11347  0052C6  0E01               	movlw	1
 11348  0052C8  EC24  F02F         	call	_I2C_Master_Read
 11349  0052CC  6EDF               	movwf	indf2,c
 11350  0052CE  0100               	movlb	0	; () banked
 11351  0052D0  4B83               	infsnz	getRTC@i& (0+255),f,b
 11352  0052D2  2B84               	incf	(getRTC@i+1)& (0+255),f,b
 11353  0052D4  D7E5               	goto	l7130
 11354  0052D6                     l7140:
 11355                           
 11356                           ; BSR set to: 0
 11357                           ;RTC.c: 58: }
 11358                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 11359  0052D6  0E00               	movlw	0
 11360  0052D8  EC24  F02F         	call	_I2C_Master_Read
 11361  0052DC  0101               	movlb	1	; () banked
 11362  0052DE  6F22               	movwf	(_time+6)& (0+255),b
 11363                           
 11364                           ;RTC.c: 60: I2C_Master_Stop();
 11365  0052E0  EC9F  F030         	call	_I2C_Master_Stop	;wreg free
 11366  0052E4  0012               	return		;funcret
 11367  0052E6                     __end_of_getRTC:
 11368                           	opt stack 0
 11369                           tblptru	equ	0xFF8
 11370                           tblptrh	equ	0xFF7
 11371                           tblptrl	equ	0xFF6
 11372                           tablat	equ	0xFF5
 11373                           prodh	equ	0xFF4
 11374                           prodl	equ	0xFF3
 11375                           intcon	equ	0xFF2
 11376                           intcon2	equ	0xFF1
 11377                           intcon3	equ	0xFF0
 11378                           postinc0	equ	0xFEE
 11379                           wreg	equ	0xFE8
 11380                           postdec1	equ	0xFE5
 11381                           fsr1l	equ	0xFE1
 11382                           indf2	equ	0xFDF
 11383                           postinc2	equ	0xFDE
 11384                           postdec2	equ	0xFDD
 11385                           fsr2h	equ	0xFDA
 11386                           fsr2l	equ	0xFD9
 11387                           status	equ	0xFD8
 11388                           
 11389 ;; *************** function _I2C_Master_Write *****************
 11390 ;; Defined at:
 11391 ;;		line 49 in file "I2C.c"
 11392 ;; Parameters:    Size  Location     Type
 11393 ;;  d               2    1[BANK0 ] unsigned int 
 11394 ;; Auto vars:     Size  Location     Type
 11395 ;;		None
 11396 ;; Return value:  Size  Location     Type
 11397 ;;                  1    wreg      void 
 11398 ;; Registers used:
 11399 ;;		wreg, status,2, status,0, cstack
 11400 ;; Tracked objects:
 11401 ;;		On entry : 0/0
 11402 ;;		On exit  : 0/0
 11403 ;;		Unchanged: 0/0
 11404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11405 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11408 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11409 ;;Total ram usage:        2 bytes
 11410 ;; Hardware stack levels used:    1
 11411 ;; Hardware stack levels required when called:    8
 11412 ;; This function calls:
 11413 ;;		_I2C_Master_Wait
 11414 ;; This function is called by:
 11415 ;;		_loadRTC
 11416 ;;		_getRTC
 11417 ;; This function uses a non-reentrant model
 11418 ;;
 11419                           
 11420                           	psect	text31
 11421  006122                     __ptext31:
 11422                           	opt stack 0
 11423  006122                     _I2C_Master_Write:
 11424                           	opt stack 18
 11425                           
 11426                           ;I2C.c: 51: I2C_Master_Wait();
 11427                           
 11428                           ;incstack = 0
 11429  006122  EC62  F030         	call	_I2C_Master_Wait	;wreg free
 11430                           
 11431                           ;I2C.c: 52: SSPBUF = d;
 11432  006126  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
 11433  00612A  0012               	return		;funcret
 11434  00612C                     __end_of_I2C_Master_Write:
 11435                           	opt stack 0
 11436                           tblptru	equ	0xFF8
 11437                           tblptrh	equ	0xFF7
 11438                           tblptrl	equ	0xFF6
 11439                           tablat	equ	0xFF5
 11440                           prodh	equ	0xFF4
 11441                           prodl	equ	0xFF3
 11442                           intcon	equ	0xFF2
 11443                           intcon2	equ	0xFF1
 11444                           intcon3	equ	0xFF0
 11445                           postinc0	equ	0xFEE
 11446                           wreg	equ	0xFE8
 11447                           postdec1	equ	0xFE5
 11448                           fsr1l	equ	0xFE1
 11449                           indf2	equ	0xFDF
 11450                           postinc2	equ	0xFDE
 11451                           postdec2	equ	0xFDD
 11452                           fsr2h	equ	0xFDA
 11453                           fsr2l	equ	0xFD9
 11454                           status	equ	0xFD8
 11455                           
 11456 ;; *************** function _I2C_Master_Stop *****************
 11457 ;; Defined at:
 11458 ;;		line 43 in file "I2C.c"
 11459 ;; Parameters:    Size  Location     Type
 11460 ;;		None
 11461 ;; Auto vars:     Size  Location     Type
 11462 ;;		None
 11463 ;; Return value:  Size  Location     Type
 11464 ;;                  1    wreg      void 
 11465 ;; Registers used:
 11466 ;;		wreg, status,2, status,0, cstack
 11467 ;; Tracked objects:
 11468 ;;		On entry : 0/0
 11469 ;;		On exit  : 0/0
 11470 ;;		Unchanged: 0/0
 11471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11473 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11475 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11476 ;;Total ram usage:        0 bytes
 11477 ;; Hardware stack levels used:    1
 11478 ;; Hardware stack levels required when called:    8
 11479 ;; This function calls:
 11480 ;;		_I2C_Master_Wait
 11481 ;; This function is called by:
 11482 ;;		_loadRTC
 11483 ;;		_getRTC
 11484 ;; This function uses a non-reentrant model
 11485 ;;
 11486                           
 11487                           	psect	text32
 11488  00613E                     __ptext32:
 11489                           	opt stack 0
 11490  00613E                     _I2C_Master_Stop:
 11491                           	opt stack 18
 11492                           
 11493                           ;I2C.c: 45: I2C_Master_Wait();
 11494                           
 11495                           ;incstack = 0
 11496  00613E  EC62  F030         	call	_I2C_Master_Wait	;wreg free
 11497                           
 11498                           ;I2C.c: 46: PEN = 1;
 11499  006142  84C5               	bsf	4037,2,c	;volatile
 11500  006144  0012               	return		;funcret
 11501  006146                     __end_of_I2C_Master_Stop:
 11502                           	opt stack 0
 11503                           tblptru	equ	0xFF8
 11504                           tblptrh	equ	0xFF7
 11505                           tblptrl	equ	0xFF6
 11506                           tablat	equ	0xFF5
 11507                           prodh	equ	0xFF4
 11508                           prodl	equ	0xFF3
 11509                           intcon	equ	0xFF2
 11510                           intcon2	equ	0xFF1
 11511                           intcon3	equ	0xFF0
 11512                           postinc0	equ	0xFEE
 11513                           wreg	equ	0xFE8
 11514                           postdec1	equ	0xFE5
 11515                           fsr1l	equ	0xFE1
 11516                           indf2	equ	0xFDF
 11517                           postinc2	equ	0xFDE
 11518                           postdec2	equ	0xFDD
 11519                           fsr2h	equ	0xFDA
 11520                           fsr2l	equ	0xFD9
 11521                           status	equ	0xFD8
 11522                           
 11523 ;; *************** function _I2C_Master_Start *****************
 11524 ;; Defined at:
 11525 ;;		line 31 in file "I2C.c"
 11526 ;; Parameters:    Size  Location     Type
 11527 ;;		None
 11528 ;; Auto vars:     Size  Location     Type
 11529 ;;		None
 11530 ;; Return value:  Size  Location     Type
 11531 ;;                  1    wreg      void 
 11532 ;; Registers used:
 11533 ;;		wreg, status,2, status,0, cstack
 11534 ;; Tracked objects:
 11535 ;;		On entry : 0/0
 11536 ;;		On exit  : 0/0
 11537 ;;		Unchanged: 0/0
 11538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11542 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11543 ;;Total ram usage:        0 bytes
 11544 ;; Hardware stack levels used:    1
 11545 ;; Hardware stack levels required when called:    8
 11546 ;; This function calls:
 11547 ;;		_I2C_Master_Wait
 11548 ;; This function is called by:
 11549 ;;		_loadRTC
 11550 ;;		_getRTC
 11551 ;; This function uses a non-reentrant model
 11552 ;;
 11553                           
 11554                           	psect	text33
 11555  006146                     __ptext33:
 11556                           	opt stack 0
 11557  006146                     _I2C_Master_Start:
 11558                           	opt stack 18
 11559                           
 11560                           ;I2C.c: 33: I2C_Master_Wait();
 11561                           
 11562                           ;incstack = 0
 11563  006146  EC62  F030         	call	_I2C_Master_Wait	;wreg free
 11564                           
 11565                           ;I2C.c: 34: SEN = 1;
 11566  00614A  80C5               	bsf	4037,0,c	;volatile
 11567  00614C  0012               	return		;funcret
 11568  00614E                     __end_of_I2C_Master_Start:
 11569                           	opt stack 0
 11570                           tblptru	equ	0xFF8
 11571                           tblptrh	equ	0xFF7
 11572                           tblptrl	equ	0xFF6
 11573                           tablat	equ	0xFF5
 11574                           prodh	equ	0xFF4
 11575                           prodl	equ	0xFF3
 11576                           intcon	equ	0xFF2
 11577                           intcon2	equ	0xFF1
 11578                           intcon3	equ	0xFF0
 11579                           postinc0	equ	0xFEE
 11580                           wreg	equ	0xFE8
 11581                           postdec1	equ	0xFE5
 11582                           fsr1l	equ	0xFE1
 11583                           indf2	equ	0xFDF
 11584                           postinc2	equ	0xFDE
 11585                           postdec2	equ	0xFDD
 11586                           fsr2h	equ	0xFDA
 11587                           fsr2l	equ	0xFD9
 11588                           status	equ	0xFD8
 11589                           
 11590 ;; *************** function _I2C_Master_Read *****************
 11591 ;; Defined at:
 11592 ;;		line 55 in file "I2C.c"
 11593 ;; Parameters:    Size  Location     Type
 11594 ;;  a               1    wreg     unsigned char 
 11595 ;; Auto vars:     Size  Location     Type
 11596 ;;  a               1    1[BANK0 ] unsigned char 
 11597 ;;  temp            1    2[BANK0 ] unsigned char 
 11598 ;; Return value:  Size  Location     Type
 11599 ;;                  1    wreg      unsigned char 
 11600 ;; Registers used:
 11601 ;;		wreg, status,2, status,0, cstack
 11602 ;; Tracked objects:
 11603 ;;		On entry : 0/0
 11604 ;;		On exit  : 0/0
 11605 ;;		Unchanged: 0/0
 11606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11608 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11610 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11611 ;;Total ram usage:        2 bytes
 11612 ;; Hardware stack levels used:    1
 11613 ;; Hardware stack levels required when called:    8
 11614 ;; This function calls:
 11615 ;;		_I2C_Master_Wait
 11616 ;; This function is called by:
 11617 ;;		_getRTC
 11618 ;; This function uses a non-reentrant model
 11619 ;;
 11620                           
 11621                           	psect	text34
 11622  005E48                     __ptext34:
 11623                           	opt stack 0
 11624  005E48                     _I2C_Master_Read:
 11625                           	opt stack 18
 11626                           
 11627                           ;incstack = 0
 11628                           ;I2C_Master_Read@a stored from wreg
 11629  005E48  0100               	movlb	0	; () banked
 11630  005E4A  6F81               	movwf	I2C_Master_Read@a& (0+255),b
 11631                           
 11632                           ;I2C.c: 57: unsigned char temp;
 11633                           ;I2C.c: 58: I2C_Master_Wait();
 11634  005E4C  EC62  F030         	call	_I2C_Master_Wait	;wreg free
 11635                           
 11636                           ;I2C.c: 59: RCEN = 1;
 11637  005E50  86C5               	bsf	4037,3,c	;volatile
 11638                           
 11639                           ;I2C.c: 60: I2C_Master_Wait();
 11640  005E52  EC62  F030         	call	_I2C_Master_Wait	;wreg free
 11641                           
 11642                           ;I2C.c: 61: temp = SSPBUF;
 11643  005E56  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
 11644                           
 11645                           ;I2C.c: 62: I2C_Master_Wait();
 11646  005E5A  EC62  F030         	call	_I2C_Master_Wait	;wreg free
 11647                           
 11648                           ;I2C.c: 63: ACKDT = (a)?0:1;
 11649  005E5E  0100               	movlb	0	; () banked
 11650  005E60  5181               	movf	I2C_Master_Read@a& (0+255),w,b
 11651  005E62  0100               	movlb	0	; () banked
 11652  005E64  A4D8               	btfss	status,2,c
 11653  005E66  D002               	goto	u5520
 11654  005E68  8AC5               	bsf	4037,5,c	;volatile
 11655  005E6A  D001               	goto	l6808
 11656  005E6C                     u5520:
 11657  005E6C  9AC5               	bcf	4037,5,c	;volatile
 11658  005E6E                     l6808:
 11659                           
 11660                           ;I2C.c: 64: ACKEN = 1;
 11661  005E6E  88C5               	bsf	4037,4,c	;volatile
 11662                           
 11663                           ;I2C.c: 65: return temp;
 11664  005E70  0100               	movlb	0	; () banked
 11665  005E72  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
 11666  005E74  0012               	return	
 11667  005E76                     __end_of_I2C_Master_Read:
 11668                           	opt stack 0
 11669                           tblptru	equ	0xFF8
 11670                           tblptrh	equ	0xFF7
 11671                           tblptrl	equ	0xFF6
 11672                           tablat	equ	0xFF5
 11673                           prodh	equ	0xFF4
 11674                           prodl	equ	0xFF3
 11675                           intcon	equ	0xFF2
 11676                           intcon2	equ	0xFF1
 11677                           intcon3	equ	0xFF0
 11678                           postinc0	equ	0xFEE
 11679                           wreg	equ	0xFE8
 11680                           postdec1	equ	0xFE5
 11681                           fsr1l	equ	0xFE1
 11682                           indf2	equ	0xFDF
 11683                           postinc2	equ	0xFDE
 11684                           postdec2	equ	0xFDD
 11685                           fsr2h	equ	0xFDA
 11686                           fsr2l	equ	0xFD9
 11687                           status	equ	0xFD8
 11688                           
 11689 ;; *************** function _I2C_Master_Wait *****************
 11690 ;; Defined at:
 11691 ;;		line 26 in file "I2C.c"
 11692 ;; Parameters:    Size  Location     Type
 11693 ;;		None
 11694 ;; Auto vars:     Size  Location     Type
 11695 ;;		None
 11696 ;; Return value:  Size  Location     Type
 11697 ;;                  1    wreg      void 
 11698 ;; Registers used:
 11699 ;;		wreg, status,2, status,0
 11700 ;; Tracked objects:
 11701 ;;		On entry : 0/0
 11702 ;;		On exit  : 0/0
 11703 ;;		Unchanged: 0/0
 11704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11706 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11707 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11708 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11709 ;;Total ram usage:        1 bytes
 11710 ;; Hardware stack levels used:    1
 11711 ;; Hardware stack levels required when called:    7
 11712 ;; This function calls:
 11713 ;;		Nothing
 11714 ;; This function is called by:
 11715 ;;		_I2C_Master_Start
 11716 ;;		_I2C_Master_Stop
 11717 ;;		_I2C_Master_Write
 11718 ;;		_I2C_Master_Read
 11719 ;;		_I2C_Master_RepeatedStart
 11720 ;; This function uses a non-reentrant model
 11721 ;;
 11722                           
 11723                           	psect	text35
 11724  0060C4                     __ptext35:
 11725                           	opt stack 0
 11726  0060C4                     _I2C_Master_Wait:
 11727                           	opt stack 18
 11728  0060C4                     l78:
 11729  0060C4  B4C7               	btfsc	4039,2,c	;volatile
 11730  0060C6  D7FE               	goto	l78
 11731  0060C8  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
 11732  0060CC  0E1F               	movlw	31
 11733  0060CE  0100               	movlb	0	; () banked
 11734  0060D0  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
 11735  0060D2  B4D8               	btfsc	status,2,c
 11736  0060D4  0012               	return	
 11737  0060D6  D7F6               	goto	l78
 11738  0060D8                     __end_of_I2C_Master_Wait:
 11739                           	opt stack 0
 11740                           tblptru	equ	0xFF8
 11741                           tblptrh	equ	0xFF7
 11742                           tblptrl	equ	0xFF6
 11743                           tablat	equ	0xFF5
 11744                           prodh	equ	0xFF4
 11745                           prodl	equ	0xFF3
 11746                           intcon	equ	0xFF2
 11747                           intcon2	equ	0xFF1
 11748                           intcon3	equ	0xFF0
 11749                           postinc0	equ	0xFEE
 11750                           wreg	equ	0xFE8
 11751                           postdec1	equ	0xFE5
 11752                           fsr1l	equ	0xFE1
 11753                           indf2	equ	0xFDF
 11754                           postinc2	equ	0xFDE
 11755                           postdec2	equ	0xFDD
 11756                           fsr2h	equ	0xFDA
 11757                           fsr2l	equ	0xFD9
 11758                           status	equ	0xFD8
 11759                           
 11760 ;; *************** function _change_state_to_menu_22 *****************
 11761 ;; Defined at:
 11762 ;;		line 501 in file "UI.c"
 11763 ;; Parameters:    Size  Location     Type
 11764 ;;		None
 11765 ;; Auto vars:     Size  Location     Type
 11766 ;;		None
 11767 ;; Return value:  Size  Location     Type
 11768 ;;                  1    wreg      void 
 11769 ;; Registers used:
 11770 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11771 ;; Tracked objects:
 11772 ;;		On entry : 0/0
 11773 ;;		On exit  : 0/0
 11774 ;;		Unchanged: 0/0
 11775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11779 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11780 ;;Total ram usage:        0 bytes
 11781 ;; Hardware stack levels used:    1
 11782 ;; Hardware stack levels required when called:   10
 11783 ;; This function calls:
 11784 ;;		_lcdInst
 11785 ;;		_printf
 11786 ;; This function is called by:
 11787 ;;		_UI
 11788 ;; This function uses a non-reentrant model
 11789 ;;
 11790                           
 11791                           	psect	text36
 11792  005B2A                     __ptext36:
 11793                           	opt stack 0
 11794  005B2A                     _change_state_to_menu_22:
 11795                           	opt stack 19
 11796                           
 11797                           ;UI.c: 502: cur_state = 22;
 11798                           
 11799                           ; BSR set to: 0
 11800                           ;incstack = 0
 11801  005B2A  0E00               	movlw	0
 11802  005B2C  0100               	movlb	0	; () banked
 11803  005B2E  6FE9               	movwf	(_cur_state+1)& (0+255),b
 11804  005B30  0E16               	movlw	22
 11805  005B32  6FE8               	movwf	_cur_state& (0+255),b
 11806                           
 11807                           ; BSR set to: 0
 11808                           ;UI.c: 504: lcdInst(0b10000000);;
 11809  005B34  0E80               	movlw	128
 11810  005B36  EC7D  F030         	call	_lcdInst
 11811                           
 11812                           ;UI.c: 505: printf("2. SORT        <");
 11813  005B3A  0EDD               	movlw	low STR_34
 11814  005B3C  0100               	movlb	0	; () banked
 11815  005B3E  6F8E               	movwf	printf@f& (0+255),b
 11816  005B40  0EFD               	movlw	high STR_34
 11817  005B42  0100               	movlb	0	; () banked
 11818  005B44  6F8F               	movwf	(printf@f+1)& (0+255),b
 11819  005B46  EC17  F00F         	call	_printf	;wreg free
 11820                           
 11821                           ;UI.c: 506: lcdInst(0b11000000);;
 11822  005B4A  0EC0               	movlw	192
 11823  005B4C  EC7D  F030         	call	_lcdInst
 11824                           
 11825                           ;UI.c: 507: printf("3. LOGS         ");
 11826  005B50  0E22               	movlw	low STR_36
 11827  005B52  0100               	movlb	0	; () banked
 11828  005B54  6F8E               	movwf	printf@f& (0+255),b
 11829  005B56  0EFD               	movlw	high STR_36
 11830  005B58  0100               	movlb	0	; () banked
 11831  005B5A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11832  005B5C  EC17  F00F         	call	_printf	;wreg free
 11833  005B60  0012               	return		;funcret
 11834  005B62                     __end_of_change_state_to_menu_22:
 11835                           	opt stack 0
 11836                           tblptru	equ	0xFF8
 11837                           tblptrh	equ	0xFF7
 11838                           tblptrl	equ	0xFF6
 11839                           tablat	equ	0xFF5
 11840                           prodh	equ	0xFF4
 11841                           prodl	equ	0xFF3
 11842                           intcon	equ	0xFF2
 11843                           intcon2	equ	0xFF1
 11844                           intcon3	equ	0xFF0
 11845                           postinc0	equ	0xFEE
 11846                           wreg	equ	0xFE8
 11847                           postdec1	equ	0xFE5
 11848                           fsr1l	equ	0xFE1
 11849                           indf2	equ	0xFDF
 11850                           postinc2	equ	0xFDE
 11851                           postdec2	equ	0xFDD
 11852                           fsr2h	equ	0xFDA
 11853                           fsr2l	equ	0xFD9
 11854                           status	equ	0xFD8
 11855                           
 11856 ;; *************** function _change_state_to_menu_12 *****************
 11857 ;; Defined at:
 11858 ;;		line 493 in file "UI.c"
 11859 ;; Parameters:    Size  Location     Type
 11860 ;;		None
 11861 ;; Auto vars:     Size  Location     Type
 11862 ;;		None
 11863 ;; Return value:  Size  Location     Type
 11864 ;;                  1    wreg      void 
 11865 ;; Registers used:
 11866 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11867 ;; Tracked objects:
 11868 ;;		On entry : 0/0
 11869 ;;		On exit  : 0/0
 11870 ;;		Unchanged: 0/0
 11871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11873 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11875 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11876 ;;Total ram usage:        0 bytes
 11877 ;; Hardware stack levels used:    1
 11878 ;; Hardware stack levels required when called:   10
 11879 ;; This function calls:
 11880 ;;		_lcdInst
 11881 ;;		_printf
 11882 ;; This function is called by:
 11883 ;;		_UI
 11884 ;; This function uses a non-reentrant model
 11885 ;;
 11886                           
 11887                           	psect	text37
 11888  005B62                     __ptext37:
 11889                           	opt stack 0
 11890  005B62                     _change_state_to_menu_12:
 11891                           	opt stack 19
 11892                           
 11893                           ;UI.c: 494: cur_state = 12;
 11894                           
 11895                           ;incstack = 0
 11896  005B62  0E00               	movlw	0
 11897  005B64  0100               	movlb	0	; () banked
 11898  005B66  6FE9               	movwf	(_cur_state+1)& (0+255),b
 11899  005B68  0E0C               	movlw	12
 11900  005B6A  6FE8               	movwf	_cur_state& (0+255),b
 11901                           
 11902                           ; BSR set to: 0
 11903                           ;UI.c: 496: lcdInst(0b10000000);;
 11904  005B6C  0E80               	movlw	128
 11905  005B6E  EC7D  F030         	call	_lcdInst
 11906                           
 11907                           ;UI.c: 497: printf("1. DATE/TIME    ");
 11908  005B72  0E44               	movlw	low STR_33
 11909  005B74  0100               	movlb	0	; () banked
 11910  005B76  6F8E               	movwf	printf@f& (0+255),b
 11911  005B78  0EFD               	movlw	high STR_33
 11912  005B7A  0100               	movlb	0	; () banked
 11913  005B7C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11914  005B7E  EC17  F00F         	call	_printf	;wreg free
 11915                           
 11916                           ;UI.c: 498: lcdInst(0b11000000);;
 11917  005B82  0EC0               	movlw	192
 11918  005B84  EC7D  F030         	call	_lcdInst
 11919                           
 11920                           ;UI.c: 499: printf("2. SORT        <");
 11921  005B88  0EDD               	movlw	low STR_34
 11922  005B8A  0100               	movlb	0	; () banked
 11923  005B8C  6F8E               	movwf	printf@f& (0+255),b
 11924  005B8E  0EFD               	movlw	high STR_34
 11925  005B90  0100               	movlb	0	; () banked
 11926  005B92  6F8F               	movwf	(printf@f+1)& (0+255),b
 11927  005B94  EC17  F00F         	call	_printf	;wreg free
 11928  005B98  0012               	return		;funcret
 11929  005B9A                     __end_of_change_state_to_menu_12:
 11930                           	opt stack 0
 11931                           tblptru	equ	0xFF8
 11932                           tblptrh	equ	0xFF7
 11933                           tblptrl	equ	0xFF6
 11934                           tablat	equ	0xFF5
 11935                           prodh	equ	0xFF4
 11936                           prodl	equ	0xFF3
 11937                           intcon	equ	0xFF2
 11938                           intcon2	equ	0xFF1
 11939                           intcon3	equ	0xFF0
 11940                           postinc0	equ	0xFEE
 11941                           wreg	equ	0xFE8
 11942                           postdec1	equ	0xFE5
 11943                           fsr1l	equ	0xFE1
 11944                           indf2	equ	0xFDF
 11945                           postinc2	equ	0xFDE
 11946                           postdec2	equ	0xFDD
 11947                           fsr2h	equ	0xFDA
 11948                           fsr2l	equ	0xFD9
 11949                           status	equ	0xFD8
 11950                           
 11951 ;; *************** function ___awmod *****************
 11952 ;; Defined at:
 11953 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 11954 ;; Parameters:    Size  Location     Type
 11955 ;;  dividend        2    0[BANK0 ] int 
 11956 ;;  divisor         2    2[BANK0 ] int 
 11957 ;; Auto vars:     Size  Location     Type
 11958 ;;  sign            1    5[BANK0 ] unsigned char 
 11959 ;;  counter         1    4[BANK0 ] unsigned char 
 11960 ;; Return value:  Size  Location     Type
 11961 ;;                  2    0[BANK0 ] int 
 11962 ;; Registers used:
 11963 ;;		wreg, status,2, status,0
 11964 ;; Tracked objects:
 11965 ;;		On entry : 0/0
 11966 ;;		On exit  : 0/0
 11967 ;;		Unchanged: 0/0
 11968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11969 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11970 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11972 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11973 ;;Total ram usage:        6 bytes
 11974 ;; Hardware stack levels used:    1
 11975 ;; Hardware stack levels required when called:    7
 11976 ;; This function calls:
 11977 ;;		Nothing
 11978 ;; This function is called by:
 11979 ;;		_UI
 11980 ;; This function uses a non-reentrant model
 11981 ;;
 11982                           
 11983                           	psect	text38
 11984  00509A                     __ptext38:
 11985                           	opt stack 0
 11986  00509A                     ___awmod:
 11987                           	opt stack 22
 11988                           
 11989                           ;incstack = 0
 11990  00509A  0E00               	movlw	0
 11991  00509C  0100               	movlb	0	; () banked
 11992  00509E  6F85               	movwf	___awmod@sign& (0+255),b
 11993                           
 11994                           ; BSR set to: 0
 11995  0050A0  0100               	movlb	0	; () banked
 11996  0050A2  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
 11997  0050A4  D008               	goto	l9602
 11998                           
 11999                           ; BSR set to: 0
 12000  0050A6  0100               	movlb	0	; () banked
 12001  0050A8  6D80               	negf	___awmod@dividend& (0+255),b
 12002  0050AA  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 12003  0050AC  B0D8               	btfsc	status,0,c
 12004  0050AE  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 12005                           
 12006                           ; BSR set to: 0
 12007  0050B0  0E01               	movlw	1
 12008  0050B2  0100               	movlb	0	; () banked
 12009  0050B4  6F85               	movwf	___awmod@sign& (0+255),b
 12010  0050B6                     l9602:
 12011                           
 12012                           ; BSR set to: 0
 12013  0050B6  0100               	movlb	0	; () banked
 12014  0050B8  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 12015  0050BA  D005               	goto	l9606
 12016                           
 12017                           ; BSR set to: 0
 12018  0050BC  0100               	movlb	0	; () banked
 12019  0050BE  6D82               	negf	___awmod@divisor& (0+255),b
 12020  0050C0  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
 12021  0050C2  B0D8               	btfsc	status,0,c
 12022  0050C4  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
 12023  0050C6                     l9606:
 12024                           
 12025                           ; BSR set to: 0
 12026  0050C6  0100               	movlb	0	; () banked
 12027  0050C8  5182               	movf	___awmod@divisor& (0+255),w,b
 12028  0050CA  0100               	movlb	0	; () banked
 12029  0050CC  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 12030  0050CE  B4D8               	btfsc	status,2,c
 12031  0050D0  D026               	goto	l9622
 12032                           
 12033                           ; BSR set to: 0
 12034  0050D2  0E01               	movlw	1
 12035  0050D4  0100               	movlb	0	; () banked
 12036  0050D6  6F84               	movwf	___awmod@counter& (0+255),b
 12037  0050D8  D006               	goto	l9612
 12038  0050DA                     l9610:
 12039                           
 12040                           ; BSR set to: 0
 12041  0050DA  0100               	movlb	0	; () banked
 12042  0050DC  90D8               	bcf	status,0,c
 12043  0050DE  3782               	rlcf	___awmod@divisor& (0+255),f,b
 12044  0050E0  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 12045  0050E2  0100               	movlb	0	; () banked
 12046  0050E4  2B84               	incf	___awmod@counter& (0+255),f,b
 12047  0050E6                     l9612:
 12048                           
 12049                           ; BSR set to: 0
 12050  0050E6  0100               	movlb	0	; () banked
 12051  0050E8  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 12052  0050EA  D7F7               	goto	l9610
 12053  0050EC                     l9614:
 12054                           
 12055                           ; BSR set to: 0
 12056  0050EC  0100               	movlb	0	; () banked
 12057  0050EE  5182               	movf	___awmod@divisor& (0+255),w,b
 12058  0050F0  0100               	movlb	0	; () banked
 12059  0050F2  5D80               	subwf	___awmod@dividend& (0+255),w,b
 12060  0050F4  0100               	movlb	0	; () banked
 12061  0050F6  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 12062  0050F8  0100               	movlb	0	; () banked
 12063  0050FA  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 12064  0050FC  A0D8               	btfss	status,0,c
 12065  0050FE  D008               	goto	l9618
 12066                           
 12067                           ; BSR set to: 0
 12068  005100  0100               	movlb	0	; () banked
 12069  005102  5182               	movf	___awmod@divisor& (0+255),w,b
 12070  005104  0100               	movlb	0	; () banked
 12071  005106  5F80               	subwf	___awmod@dividend& (0+255),f,b
 12072  005108  0100               	movlb	0	; () banked
 12073  00510A  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 12074  00510C  0100               	movlb	0	; () banked
 12075  00510E  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 12076  005110                     l9618:
 12077                           
 12078                           ; BSR set to: 0
 12079  005110  0100               	movlb	0	; () banked
 12080  005112  90D8               	bcf	status,0,c
 12081  005114  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 12082  005116  3382               	rrcf	___awmod@divisor& (0+255),f,b
 12083                           
 12084                           ; BSR set to: 0
 12085  005118  0100               	movlb	0	; () banked
 12086  00511A  2F84               	decfsz	___awmod@counter& (0+255),f,b
 12087  00511C  D7E7               	goto	l9614
 12088  00511E                     l9622:
 12089                           
 12090                           ; BSR set to: 0
 12091  00511E  0100               	movlb	0	; () banked
 12092  005120  5185               	movf	___awmod@sign& (0+255),w,b
 12093  005122  0100               	movlb	0	; () banked
 12094  005124  B4D8               	btfsc	status,2,c
 12095  005126  D005               	goto	l9626
 12096                           
 12097                           ; BSR set to: 0
 12098  005128  0100               	movlb	0	; () banked
 12099  00512A  6D80               	negf	___awmod@dividend& (0+255),b
 12100  00512C  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 12101  00512E  B0D8               	btfsc	status,0,c
 12102  005130  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 12103  005132                     l9626:
 12104                           
 12105                           ; BSR set to: 0
 12106  005132  C080  F080         	movff	___awmod@dividend,?___awmod
 12107  005136  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
 12108  00513A  0012               	return	
 12109  00513C                     __end_of___awmod:
 12110                           	opt stack 0
 12111                           tblptru	equ	0xFF8
 12112                           tblptrh	equ	0xFF7
 12113                           tblptrl	equ	0xFF6
 12114                           tablat	equ	0xFF5
 12115                           prodh	equ	0xFF4
 12116                           prodl	equ	0xFF3
 12117                           intcon	equ	0xFF2
 12118                           intcon2	equ	0xFF1
 12119                           intcon3	equ	0xFF0
 12120                           postinc0	equ	0xFEE
 12121                           wreg	equ	0xFE8
 12122                           postdec1	equ	0xFE5
 12123                           fsr1l	equ	0xFE1
 12124                           indf2	equ	0xFDF
 12125                           postinc2	equ	0xFDE
 12126                           postdec2	equ	0xFDD
 12127                           fsr2h	equ	0xFDA
 12128                           fsr2l	equ	0xFD9
 12129                           status	equ	0xFD8
 12130                           
 12131 ;; *************** function ___awdiv *****************
 12132 ;; Defined at:
 12133 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 12134 ;; Parameters:    Size  Location     Type
 12135 ;;  dividend        2    6[BANK0 ] int 
 12136 ;;  divisor         2    8[BANK0 ] int 
 12137 ;; Auto vars:     Size  Location     Type
 12138 ;;  quotient        2   12[BANK0 ] int 
 12139 ;;  sign            1   11[BANK0 ] unsigned char 
 12140 ;;  counter         1   10[BANK0 ] unsigned char 
 12141 ;; Return value:  Size  Location     Type
 12142 ;;                  2    6[BANK0 ] int 
 12143 ;; Registers used:
 12144 ;;		wreg, status,2, status,0
 12145 ;; Tracked objects:
 12146 ;;		On entry : 0/0
 12147 ;;		On exit  : 0/0
 12148 ;;		Unchanged: 0/0
 12149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12150 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12151 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12153 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12154 ;;Total ram usage:        8 bytes
 12155 ;; Hardware stack levels used:    1
 12156 ;; Hardware stack levels required when called:    7
 12157 ;; This function calls:
 12158 ;;		Nothing
 12159 ;; This function is called by:
 12160 ;;		_UI
 12161 ;;		_ID
 12162 ;; This function uses a non-reentrant model
 12163 ;;
 12164                           
 12165                           	psect	text39
 12166  004E76                     __ptext39:
 12167                           	opt stack 0
 12168  004E76                     ___awdiv:
 12169                           	opt stack 21
 12170                           
 12171                           ; BSR set to: 0
 12172                           ;incstack = 0
 12173  004E76  0E00               	movlw	0
 12174  004E78  0100               	movlb	0	; () banked
 12175  004E7A  6F8B               	movwf	___awdiv@sign& (0+255),b
 12176                           
 12177                           ; BSR set to: 0
 12178  004E7C  0100               	movlb	0	; () banked
 12179  004E7E  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 12180  004E80  D008               	goto	l7746
 12181                           
 12182                           ; BSR set to: 0
 12183  004E82  0100               	movlb	0	; () banked
 12184  004E84  6D88               	negf	___awdiv@divisor& (0+255),b
 12185  004E86  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
 12186  004E88  B0D8               	btfsc	status,0,c
 12187  004E8A  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
 12188                           
 12189                           ; BSR set to: 0
 12190  004E8C  0E01               	movlw	1
 12191  004E8E  0100               	movlb	0	; () banked
 12192  004E90  6F8B               	movwf	___awdiv@sign& (0+255),b
 12193  004E92                     l7746:
 12194                           
 12195                           ; BSR set to: 0
 12196  004E92  0100               	movlb	0	; () banked
 12197  004E94  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 12198  004E96  D008               	goto	l7752
 12199                           
 12200                           ; BSR set to: 0
 12201  004E98  0100               	movlb	0	; () banked
 12202  004E9A  6D86               	negf	___awdiv@dividend& (0+255),b
 12203  004E9C  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
 12204  004E9E  B0D8               	btfsc	status,0,c
 12205  004EA0  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
 12206                           
 12207                           ; BSR set to: 0
 12208  004EA2  0E01               	movlw	1
 12209  004EA4  0100               	movlb	0	; () banked
 12210  004EA6  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
 12211  004EA8                     l7752:
 12212                           
 12213                           ; BSR set to: 0
 12214  004EA8  0E00               	movlw	0
 12215  004EAA  0100               	movlb	0	; () banked
 12216  004EAC  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
 12217  004EAE  0E00               	movlw	0
 12218  004EB0  6F8C               	movwf	___awdiv@quotient& (0+255),b
 12219                           
 12220                           ; BSR set to: 0
 12221  004EB2  0100               	movlb	0	; () banked
 12222  004EB4  5188               	movf	___awdiv@divisor& (0+255),w,b
 12223  004EB6  0100               	movlb	0	; () banked
 12224  004EB8  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 12225  004EBA  B4D8               	btfsc	status,2,c
 12226  004EBC  D02C               	goto	l7774
 12227                           
 12228                           ; BSR set to: 0
 12229  004EBE  0E01               	movlw	1
 12230  004EC0  0100               	movlb	0	; () banked
 12231  004EC2  6F8A               	movwf	___awdiv@counter& (0+255),b
 12232  004EC4  D006               	goto	l7760
 12233  004EC6                     l7758:
 12234                           
 12235                           ; BSR set to: 0
 12236  004EC6  0100               	movlb	0	; () banked
 12237  004EC8  90D8               	bcf	status,0,c
 12238  004ECA  3788               	rlcf	___awdiv@divisor& (0+255),f,b
 12239  004ECC  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 12240  004ECE  0100               	movlb	0	; () banked
 12241  004ED0  2B8A               	incf	___awdiv@counter& (0+255),f,b
 12242  004ED2                     l7760:
 12243                           
 12244                           ; BSR set to: 0
 12245  004ED2  0100               	movlb	0	; () banked
 12246  004ED4  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 12247  004ED6  D7F7               	goto	l7758
 12248  004ED8                     l7762:
 12249                           
 12250                           ; BSR set to: 0
 12251  004ED8  0100               	movlb	0	; () banked
 12252  004EDA  90D8               	bcf	status,0,c
 12253  004EDC  378C               	rlcf	___awdiv@quotient& (0+255),f,b
 12254  004EDE  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 12255                           
 12256                           ; BSR set to: 0
 12257  004EE0  0100               	movlb	0	; () banked
 12258  004EE2  5188               	movf	___awdiv@divisor& (0+255),w,b
 12259  004EE4  0100               	movlb	0	; () banked
 12260  004EE6  5D86               	subwf	___awdiv@dividend& (0+255),w,b
 12261  004EE8  0100               	movlb	0	; () banked
 12262  004EEA  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 12263  004EEC  0100               	movlb	0	; () banked
 12264  004EEE  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 12265  004EF0  A0D8               	btfss	status,0,c
 12266  004EF2  D00A               	goto	l7770
 12267                           
 12268                           ; BSR set to: 0
 12269  004EF4  0100               	movlb	0	; () banked
 12270  004EF6  5188               	movf	___awdiv@divisor& (0+255),w,b
 12271  004EF8  0100               	movlb	0	; () banked
 12272  004EFA  5F86               	subwf	___awdiv@dividend& (0+255),f,b
 12273  004EFC  0100               	movlb	0	; () banked
 12274  004EFE  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 12275  004F00  0100               	movlb	0	; () banked
 12276  004F02  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 12277                           
 12278                           ; BSR set to: 0
 12279  004F04  0100               	movlb	0	; () banked
 12280  004F06  818C               	bsf	___awdiv@quotient& (0+255),0,b
 12281  004F08                     l7770:
 12282                           
 12283                           ; BSR set to: 0
 12284  004F08  0100               	movlb	0	; () banked
 12285  004F0A  90D8               	bcf	status,0,c
 12286  004F0C  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 12287  004F0E  3388               	rrcf	___awdiv@divisor& (0+255),f,b
 12288                           
 12289                           ; BSR set to: 0
 12290  004F10  0100               	movlb	0	; () banked
 12291  004F12  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
 12292  004F14  D7E1               	goto	l7762
 12293  004F16                     l7774:
 12294                           
 12295                           ; BSR set to: 0
 12296  004F16  0100               	movlb	0	; () banked
 12297  004F18  518B               	movf	___awdiv@sign& (0+255),w,b
 12298  004F1A  0100               	movlb	0	; () banked
 12299  004F1C  B4D8               	btfsc	status,2,c
 12300  004F1E  D005               	goto	l7778
 12301                           
 12302                           ; BSR set to: 0
 12303  004F20  0100               	movlb	0	; () banked
 12304  004F22  6D8C               	negf	___awdiv@quotient& (0+255),b
 12305  004F24  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 12306  004F26  B0D8               	btfsc	status,0,c
 12307  004F28  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 12308  004F2A                     l7778:
 12309                           
 12310                           ; BSR set to: 0
 12311  004F2A  C08C  F086         	movff	___awdiv@quotient,?___awdiv
 12312  004F2E  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
 12313  004F32  0012               	return	
 12314  004F34                     __end_of___awdiv:
 12315                           	opt stack 0
 12316                           tblptru	equ	0xFF8
 12317                           tblptrh	equ	0xFF7
 12318                           tblptrl	equ	0xFF6
 12319                           tablat	equ	0xFF5
 12320                           prodh	equ	0xFF4
 12321                           prodl	equ	0xFF3
 12322                           intcon	equ	0xFF2
 12323                           intcon2	equ	0xFF1
 12324                           intcon3	equ	0xFF0
 12325                           postinc0	equ	0xFEE
 12326                           wreg	equ	0xFE8
 12327                           postdec1	equ	0xFE5
 12328                           fsr1l	equ	0xFE1
 12329                           indf2	equ	0xFDF
 12330                           postinc2	equ	0xFDE
 12331                           postdec2	equ	0xFDD
 12332                           fsr2h	equ	0xFDA
 12333                           fsr2l	equ	0xFD9
 12334                           status	equ	0xFD8
 12335                           
 12336 ;; *************** function _Test *****************
 12337 ;; Defined at:
 12338 ;;		line 30 in file "Test.c"
 12339 ;; Parameters:    Size  Location     Type
 12340 ;;		None
 12341 ;; Auto vars:     Size  Location     Type
 12342 ;;		None
 12343 ;; Return value:  Size  Location     Type
 12344 ;;                  1    wreg      void 
 12345 ;; Registers used:
 12346 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12347 ;; Tracked objects:
 12348 ;;		On entry : 0/0
 12349 ;;		On exit  : 0/0
 12350 ;;		Unchanged: 0/0
 12351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12354 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12355 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12356 ;;Total ram usage:        2 bytes
 12357 ;; Hardware stack levels used:    1
 12358 ;; Hardware stack levels required when called:   11
 12359 ;; This function calls:
 12360 ;;		_BlockerTest
 12361 ;;		_BothServos
 12362 ;;		_PlatformTest
 12363 ;;		_PortTestDC
 12364 ;;		_PortTestPusher
 12365 ;;		_SpeedTest
 12366 ;;		_actuatorTest
 12367 ;;		_algorithmTest
 12368 ;;		_arm
 12369 ;;		_lcdInst
 12370 ;;		_printf
 12371 ;;		_sensorTest
 12372 ;; This function is called by:
 12373 ;;		_main
 12374 ;; This function uses a non-reentrant model
 12375 ;;
 12376                           
 12377                           	psect	text40
 12378  00469A                     __ptext40:
 12379                           	opt stack 0
 12380  00469A                     _Test:
 12381                           	opt stack 19
 12382                           
 12383                           ;Test.c: 32: while(machine_state == Testing_state){
 12384                           
 12385                           ; BSR set to: 0
 12386                           ;incstack = 0
 12387  00469A  D07C               	goto	l10388
 12388  00469C                     l10348:
 12389                           
 12390                           ;Test.c: 33: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 12391  00469C  0E01               	movlw	1
 12392  00469E  EC7D  F030         	call	_lcdInst
 12393  0046A2  0E68               	movlw	104
 12394  0046A4  0100               	movlb	0	; () banked
 12395  0046A6  6FC6               	movwf	??_Test& (0+255),b
 12396  0046A8  0EE4               	movlw	228
 12397  0046AA                     u11627:
 12398  0046AA  2EE8               	decfsz	wreg,f,c
 12399  0046AC  D7FE               	bra	u11627
 12400  0046AE  2FC6               	decfsz	??_Test& (0+255),f,b
 12401  0046B0  D7FC               	bra	u11627
 12402  0046B2  F000               	nop	
 12403  0046B4  0E80               	movlw	128
 12404  0046B6  EC7D  F030         	call	_lcdInst
 12405                           
 12406                           ;Test.c: 34: printf("2.SNR|4.HI|5.MED");
 12407  0046BA  0E9A               	movlw	low STR_68
 12408  0046BC  0100               	movlb	0	; () banked
 12409  0046BE  6F8E               	movwf	printf@f& (0+255),b
 12410  0046C0  0EFC               	movlw	high STR_68
 12411  0046C2  0100               	movlb	0	; () banked
 12412  0046C4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12413  0046C6  EC17  F00F         	call	_printf	;wreg free
 12414                           
 12415                           ;Test.c: 35: lcdInst(0b11000000);;
 12416  0046CA  0EC0               	movlw	192
 12417  0046CC  EC7D  F030         	call	_lcdInst
 12418                           
 12419                           ;Test.c: 36: printf("B.PLA|8.SV|9.BLK");
 12420  0046D0  0EAB               	movlw	low STR_69
 12421  0046D2  0100               	movlb	0	; () banked
 12422  0046D4  6F8E               	movwf	printf@f& (0+255),b
 12423  0046D6  0EFC               	movlw	high STR_69
 12424  0046D8  0100               	movlb	0	; () banked
 12425  0046DA  6F8F               	movwf	(printf@f+1)& (0+255),b
 12426  0046DC  EC17  F00F         	call	_printf	;wreg free
 12427  0046E0                     l1284:
 12428  0046E0  A281               	btfss	3969,1,c	;volatile
 12429  0046E2  D7FE               	goto	l1284
 12430                           
 12431                           ;Test.c: 38: var = PORTB >> 4;
 12432  0046E4  CF81 F0C6          	movff	3969,??_Test	;volatile
 12433  0046E8  0100               	movlb	0	; () banked
 12434  0046EA  3BC6               	swapf	??_Test& (0+255),f,b
 12435  0046EC  0E0F               	movlw	15
 12436  0046EE  17C6               	andwf	??_Test& (0+255),f,b
 12437  0046F0  0100               	movlb	0	; () banked
 12438  0046F2  51C6               	movf	??_Test& (0+255),w,b
 12439  0046F4  0101               	movlb	1	; () banked
 12440  0046F6  6F47               	movwf	_var& (0+255),b
 12441  0046F8  6B48               	clrf	(_var+1)& (0+255),b
 12442                           
 12443                           ; BSR set to: 1
 12444                           ;Test.c: 39: var++;
 12445  0046FA  0101               	movlb	1	; () banked
 12446  0046FC  4B47               	infsnz	_var& (0+255),f,b
 12447  0046FE  2B48               	incf	(_var+1)& (0+255),f,b
 12448  004700                     l1287:
 12449  004700  A281               	btfss	3969,1,c	;volatile
 12450  004702  D01F               	goto	l10386
 12451  004704  D7FD               	goto	l1287
 12452  004706                     l10364:
 12453                           
 12454                           ;Test.c: 43: algorithmTest();
 12455  004706  EC34  F025         	call	_algorithmTest	;wreg free
 12456                           
 12457                           ;Test.c: 44: break;
 12458  00470A  D044               	goto	l10388
 12459  00470C                     l10366:
 12460                           
 12461                           ;Test.c: 46: sensorTest();
 12462  00470C  EC2A  F013         	call	_sensorTest	;wreg free
 12463                           
 12464                           ;Test.c: 47: break;
 12465  004710  D041               	goto	l10388
 12466  004712                     l10368:
 12467                           
 12468                           ;Test.c: 49: actuatorTest();
 12469  004712  EC6D  F004         	call	_actuatorTest	;wreg free
 12470                           
 12471                           ;Test.c: 50: break;
 12472  004716  D03E               	goto	l10388
 12473  004718                     l10370:
 12474                           
 12475                           ;Test.c: 52: arm();
 12476  004718  ECD0  F023         	call	_arm	;wreg free
 12477                           
 12478                           ;Test.c: 53: break;
 12479  00471C  D03B               	goto	l10388
 12480  00471E                     l10372:
 12481                           
 12482                           ;Test.c: 55: PortTestDC();
 12483  00471E  EC9F  F025         	call	_PortTestDC	;wreg free
 12484                           
 12485                           ;Test.c: 56: break;
 12486  004722  D038               	goto	l10388
 12487  004724                     l10374:
 12488                           
 12489                           ;Test.c: 58: SpeedTest();
 12490  004724  EC73  F029         	call	_SpeedTest	;wreg free
 12491                           
 12492                           ;Test.c: 59: break;
 12493  004728  D035               	goto	l10388
 12494  00472A                     l10376:
 12495                           
 12496                           ;Test.c: 61: PortTestPusher();
 12497  00472A  EC1B  F02C         	call	_PortTestPusher	;wreg free
 12498                           
 12499                           ;Test.c: 62: break;
 12500  00472E  D032               	goto	l10388
 12501  004730                     l10378:
 12502                           
 12503                           ;Test.c: 64: PlatformTest();
 12504  004730  EC80  F018         	call	_PlatformTest	;wreg free
 12505                           
 12506                           ;Test.c: 65: break;
 12507  004734  D02F               	goto	l10388
 12508  004736                     l10380:
 12509                           
 12510                           ;Test.c: 67: BothServos();
 12511  004736  EC33  F011         	call	_BothServos	;wreg free
 12512                           
 12513                           ;Test.c: 68: break;
 12514  00473A  D02C               	goto	l10388
 12515  00473C                     l10382:
 12516                           
 12517                           ;Test.c: 70: BlockerTest();
 12518  00473C  ECB1  F020         	call	_BlockerTest	;wreg free
 12519                           
 12520                           ;Test.c: 74: }
 12521                           
 12522                           ;Test.c: 73: break;
 12523                           
 12524                           ;Test.c: 72: default:
 12525                           
 12526                           ;Test.c: 71: break;
 12527  004740  D029               	goto	l10388
 12528  004742                     l10386:
 12529  004742  C147  F0C6         	movff	_var,??_Test
 12530  004746  C148  F0C7         	movff	_var+1,??_Test+1
 12531                           
 12532                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12533                           ; Switch size 1, requested type "space"
 12534                           ; Number of cases is 1, Range of values is 0 to 0
 12535                           ; switch strategies available:
 12536                           ; Name         Instructions Cycles
 12537                           ; simple_byte            4     3 (average)
 12538                           ;	Chosen strategy is simple_byte
 12539  00474A  0100               	movlb	0	; () banked
 12540  00474C  51C7               	movf	(??_Test+1)& (0+255),w,b
 12541  00474E  0A00               	xorlw	0	; case 0
 12542  004750  A4D8               	btfss	status,2,c
 12543  004752  D020               	goto	l10388
 12544                           
 12545                           ; BSR set to: 0
 12546                           ; Switch size 1, requested type "space"
 12547                           ; Number of cases is 10, Range of values is 1 to 11
 12548                           ; switch strategies available:
 12549                           ; Name         Instructions Cycles
 12550                           ; simple_byte           31    16 (average)
 12551                           ;	Chosen strategy is simple_byte
 12552  004754  0100               	movlb	0	; () banked
 12553  004756  51C6               	movf	??_Test& (0+255),w,b
 12554  004758  0A01               	xorlw	1	; case 1
 12555  00475A  B4D8               	btfsc	status,2,c
 12556  00475C  D7D4               	goto	l10364
 12557  00475E  0A03               	xorlw	3	; case 2
 12558  004760  B4D8               	btfsc	status,2,c
 12559  004762  D7D4               	goto	l10366
 12560  004764  0A01               	xorlw	1	; case 3
 12561  004766  B4D8               	btfsc	status,2,c
 12562  004768  D7D4               	goto	l10368
 12563  00476A  0A07               	xorlw	7	; case 4
 12564  00476C  B4D8               	btfsc	status,2,c
 12565  00476E  D7D4               	goto	l10370
 12566  004770  0A01               	xorlw	1	; case 5
 12567  004772  B4D8               	btfsc	status,2,c
 12568  004774  D7D4               	goto	l10372
 12569  004776  0A03               	xorlw	3	; case 6
 12570  004778  B4D8               	btfsc	status,2,c
 12571  00477A  D7D4               	goto	l10374
 12572  00477C  0A01               	xorlw	1	; case 7
 12573  00477E  B4D8               	btfsc	status,2,c
 12574  004780  D7D4               	goto	l10376
 12575  004782  0A0F               	xorlw	15	; case 8
 12576  004784  B4D8               	btfsc	status,2,c
 12577  004786  D7D4               	goto	l10378
 12578  004788  0A02               	xorlw	2	; case 10
 12579  00478A  B4D8               	btfsc	status,2,c
 12580  00478C  D7D4               	goto	l10380
 12581  00478E  0A01               	xorlw	1	; case 11
 12582  004790  B4D8               	btfsc	status,2,c
 12583  004792  D7D4               	goto	l10382
 12584  004794                     l10388:
 12585  004794  0E03               	movlw	3
 12586  004796  0100               	movlb	0	; () banked
 12587  004798  19FC               	xorwf	_machine_state& (0+255),w,b
 12588  00479A  A4D8               	btfss	status,2,c
 12589  00479C  0012               	return	
 12590  00479E  D77E               	goto	l10348
 12591  0047A0                     __end_of_Test:
 12592                           	opt stack 0
 12593                           tblptru	equ	0xFF8
 12594                           tblptrh	equ	0xFF7
 12595                           tblptrl	equ	0xFF6
 12596                           tablat	equ	0xFF5
 12597                           prodh	equ	0xFF4
 12598                           prodl	equ	0xFF3
 12599                           intcon	equ	0xFF2
 12600                           intcon2	equ	0xFF1
 12601                           intcon3	equ	0xFF0
 12602                           postinc0	equ	0xFEE
 12603                           wreg	equ	0xFE8
 12604                           postdec1	equ	0xFE5
 12605                           fsr1l	equ	0xFE1
 12606                           indf2	equ	0xFDF
 12607                           postinc2	equ	0xFDE
 12608                           postdec2	equ	0xFDD
 12609                           fsr2h	equ	0xFDA
 12610                           fsr2l	equ	0xFD9
 12611                           status	equ	0xFD8
 12612                           
 12613 ;; *************** function _sensorTest *****************
 12614 ;; Defined at:
 12615 ;;		line 122 in file "Test.c"
 12616 ;; Parameters:    Size  Location     Type
 12617 ;;		None
 12618 ;; Auto vars:     Size  Location     Type
 12619 ;;  res             2   47[BANK0 ] int 
 12620 ;;  res             2   45[BANK0 ] int 
 12621 ;; Return value:  Size  Location     Type
 12622 ;;                  1    wreg      void 
 12623 ;; Registers used:
 12624 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12625 ;; Tracked objects:
 12626 ;;		On entry : 0/0
 12627 ;;		On exit  : 0/0
 12628 ;;		Unchanged: 0/0
 12629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12631 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12632 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12633 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12634 ;;Total ram usage:        6 bytes
 12635 ;; Hardware stack levels used:    1
 12636 ;; Hardware stack levels required when called:   10
 12637 ;; This function calls:
 12638 ;;		_lcdInst
 12639 ;;		_printf
 12640 ;;		_readADC
 12641 ;;		_readMAG
 12642 ;; This function is called by:
 12643 ;;		_Test
 12644 ;; This function uses a non-reentrant model
 12645 ;;
 12646                           
 12647                           	psect	text41
 12648  002654                     __ptext41:
 12649                           	opt stack 0
 12650  002654                     _sensorTest:
 12651                           	opt stack 19
 12652                           
 12653                           ;Test.c: 124: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12654                           
 12655                           ; BSR set to: 0
 12656                           ;incstack = 0
 12657  002654  0E01               	movlw	1
 12658  002656  EC7D  F030         	call	_lcdInst
 12659  00265A  0E68               	movlw	104
 12660  00265C  0100               	movlb	0	; () banked
 12661  00265E  6FAB               	movwf	??_sensorTest& (0+255),b
 12662  002660  0EE4               	movlw	228
 12663  002662                     u11637:
 12664  002662  2EE8               	decfsz	wreg,f,c
 12665  002664  D7FE               	bra	u11637
 12666  002666  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12667  002668  D7FC               	bra	u11637
 12668  00266A  F000               	nop	
 12669  00266C  0E80               	movlw	128
 12670  00266E  EC7D  F030         	call	_lcdInst
 12671                           
 12672                           ;Test.c: 125: printf("SENSORS");
 12673  002672  0EAE               	movlw	low STR_77
 12674  002674  0100               	movlb	0	; () banked
 12675  002676  6F8E               	movwf	printf@f& (0+255),b
 12676  002678  0EFF               	movlw	high STR_77
 12677  00267A  0100               	movlb	0	; () banked
 12678  00267C  6F8F               	movwf	(printf@f+1)& (0+255),b
 12679  00267E  EC17  F00F         	call	_printf	;wreg free
 12680                           
 12681                           ;Test.c: 126: lcdInst(0b11000000);;
 12682  002682  0EC0               	movlw	192
 12683  002684  EC7D  F030         	call	_lcdInst
 12684                           
 12685                           ;Test.c: 127: printf("PUSH TO START");
 12686  002688  0E24               	movlw	low STR_71
 12687  00268A  0100               	movlb	0	; () banked
 12688  00268C  6F8E               	movwf	printf@f& (0+255),b
 12689  00268E  0EFF               	movlw	high STR_71
 12690  002690  0100               	movlb	0	; () banked
 12691  002692  6F8F               	movwf	(printf@f+1)& (0+255),b
 12692  002694  EC17  F00F         	call	_printf	;wreg free
 12693                           
 12694                           ;Test.c: 128: _delay((unsigned long)((100)*(32000000/4000.0)));
 12695  002698  0E05               	movlw	5
 12696  00269A  0100               	movlb	0	; () banked
 12697  00269C  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12698  00269E  0E0F               	movlw	15
 12699  0026A0  0100               	movlb	0	; () banked
 12700  0026A2  6FAB               	movwf	??_sensorTest& (0+255),b
 12701  0026A4  0EF1               	movlw	241
 12702  0026A6                     u11647:
 12703  0026A6  2EE8               	decfsz	wreg,f,c
 12704  0026A8  D7FE               	bra	u11647
 12705  0026AA  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12706  0026AC  D7FC               	bra	u11647
 12707  0026AE  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12708  0026B0  D7FA               	bra	u11647
 12709  0026B2                     l1316:
 12710  0026B2  A281               	btfss	3969,1,c	;volatile
 12711  0026B4  D7FE               	goto	l1316
 12712  0026B6                     l1319:
 12713  0026B6  B281               	btfsc	3969,1,c	;volatile
 12714  0026B8  D7FE               	goto	l1319
 12715                           
 12716                           ;Test.c: 131: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12717  0026BA  0E01               	movlw	1
 12718  0026BC  EC7D  F030         	call	_lcdInst
 12719  0026C0  0E68               	movlw	104
 12720  0026C2  0100               	movlb	0	; () banked
 12721  0026C4  6FAB               	movwf	??_sensorTest& (0+255),b
 12722  0026C6  0EE4               	movlw	228
 12723  0026C8                     u11657:
 12724  0026C8  2EE8               	decfsz	wreg,f,c
 12725  0026CA  D7FE               	bra	u11657
 12726  0026CC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12727  0026CE  D7FC               	bra	u11657
 12728  0026D0  F000               	nop	
 12729  0026D2  0E80               	movlw	128
 12730  0026D4  EC7D  F030         	call	_lcdInst
 12731                           
 12732                           ;Test.c: 136: LATCbits.LATC5 = 1;
 12733  0026D8  8A8B               	bsf	3979,5,c	;volatile
 12734                           
 12735                           ;Test.c: 138: while(PORTBbits.RB1 == 0){
 12736  0026DA  D05C               	goto	l8666
 12737  0026DC                     l8648:
 12738                           
 12739                           ;Test.c: 139: readADC(0);
 12740  0026DC  0E00               	movlw	0
 12741  0026DE  EC68  F02F         	call	_readADC
 12742                           
 12743                           ;Test.c: 140: int res = ADRESH<<8 | ADRESL;
 12744  0026E2  50C3               	movf	4035,w,c	;volatile
 12745  0026E4  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 12746  0026E8  0100               	movlb	0	; () banked
 12747  0026EA  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 12748  0026EC  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 12749  0026F0  0100               	movlb	0	; () banked
 12750  0026F2  6BAB               	clrf	??_sensorTest& (0+255),b
 12751  0026F4  0100               	movlb	0	; () banked
 12752  0026F6  11AB               	iorwf	??_sensorTest& (0+255),w,b
 12753  0026F8  0100               	movlb	0	; () banked
 12754  0026FA  6FAD               	movwf	sensorTest@res& (0+255),b
 12755  0026FC  0100               	movlb	0	; () banked
 12756  0026FE  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 12757  002700  0100               	movlb	0	; () banked
 12758  002702  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
 12759                           
 12760                           ; BSR set to: 0
 12761                           ;Test.c: 141: IR_signal = (res > 800) ? 1 : 0;
 12762  002704  0100               	movlb	0	; () banked
 12763  002706  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
 12764  002708  D00A               	goto	u7880
 12765  00270A  0E21               	movlw	33
 12766  00270C  0100               	movlb	0	; () banked
 12767  00270E  5DAD               	subwf	sensorTest@res& (0+255),w,b
 12768  002710  0E03               	movlw	3
 12769  002712  0100               	movlb	0	; () banked
 12770  002714  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
 12771  002716  A0D8               	btfss	status,0,c
 12772  002718  D002               	goto	u7880
 12773  00271A  0E01               	movlw	1
 12774  00271C  D001               	goto	u7890
 12775  00271E                     u7880:
 12776  00271E  0E00               	movlw	0
 12777  002720                     u7890:
 12778  002720  0100               	movlb	0	; () banked
 12779  002722  6FE2               	movwf	_IR_signal& (0+255),b
 12780  002724  6BE3               	clrf	(_IR_signal+1)& (0+255),b
 12781                           
 12782                           ;Test.c: 143: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12783  002726  0E01               	movlw	1
 12784  002728  EC7D  F030         	call	_lcdInst
 12785  00272C  0E68               	movlw	104
 12786  00272E  0100               	movlb	0	; () banked
 12787  002730  6FAB               	movwf	??_sensorTest& (0+255),b
 12788  002732  0EE4               	movlw	228
 12789  002734                     u11667:
 12790  002734  2EE8               	decfsz	wreg,f,c
 12791  002736  D7FE               	bra	u11667
 12792  002738  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12793  00273A  D7FC               	bra	u11667
 12794  00273C  F000               	nop	
 12795  00273E  0E80               	movlw	128
 12796  002740  EC7D  F030         	call	_lcdInst
 12797                           
 12798                           ;Test.c: 144: printf("IR (PUSHER): %d  ", IR_signal);
 12799  002744  0E2F               	movlw	low STR_79
 12800  002746  0100               	movlb	0	; () banked
 12801  002748  6F8E               	movwf	printf@f& (0+255),b
 12802  00274A  0EFB               	movlw	high STR_79
 12803  00274C  0100               	movlb	0	; () banked
 12804  00274E  6F8F               	movwf	(printf@f+1)& (0+255),b
 12805  002750  C0E2  F090         	movff	_IR_signal,?_printf+2
 12806  002754  C0E3  F091         	movff	_IR_signal+1,?_printf+3
 12807  002758  EC17  F00F         	call	_printf	;wreg free
 12808                           
 12809                           ;Test.c: 145: lcdInst(0b11000000);;
 12810  00275C  0EC0               	movlw	192
 12811  00275E  EC7D  F030         	call	_lcdInst
 12812                           
 12813                           ;Test.c: 146: printf("%d", res);
 12814  002762  0E3D               	movlw	low (STR_64+11)
 12815  002764  0100               	movlb	0	; () banked
 12816  002766  6F8E               	movwf	printf@f& (0+255),b
 12817  002768  0EFF               	movlw	high (STR_64+11)
 12818  00276A  0100               	movlb	0	; () banked
 12819  00276C  6F8F               	movwf	(printf@f+1)& (0+255),b
 12820  00276E  C0AD  F090         	movff	sensorTest@res,?_printf+2
 12821  002772  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
 12822  002776  EC17  F00F         	call	_printf	;wreg free
 12823                           
 12824                           ;Test.c: 147: _delay((unsigned long)((100)*(32000000/4000.0)));
 12825  00277A  0E05               	movlw	5
 12826  00277C  0100               	movlb	0	; () banked
 12827  00277E  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12828  002780  0E0F               	movlw	15
 12829  002782  0100               	movlb	0	; () banked
 12830  002784  6FAB               	movwf	??_sensorTest& (0+255),b
 12831  002786  0EF1               	movlw	241
 12832  002788                     u11677:
 12833  002788  2EE8               	decfsz	wreg,f,c
 12834  00278A  D7FE               	bra	u11677
 12835  00278C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12836  00278E  D7FC               	bra	u11677
 12837  002790  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12838  002792  D7FA               	bra	u11677
 12839  002794                     l8666:
 12840  002794  A281               	btfss	3969,1,c	;volatile
 12841  002796  D7A2               	goto	l8648
 12842                           
 12843                           ;Test.c: 148: }
 12844                           ;Test.c: 149: LATCbits.LATC5 = 0;
 12845  002798  9A8B               	bcf	3979,5,c	;volatile
 12846  00279A                     l1325:
 12847  00279A  B281               	btfsc	3969,1,c	;volatile
 12848  00279C  D7FE               	goto	l1325
 12849                           
 12850                           ;Test.c: 155: LATCbits.LATC6 = 1;
 12851  00279E  8C8B               	bsf	3979,6,c	;volatile
 12852                           
 12853                           ;Test.c: 158: while(PORTBbits.RB1 == 0){
 12854                           
 12855                           ;Test.c: 157: while(1){
 12856  0027A0  D05C               	goto	l8686
 12857  0027A2                     l8668:
 12858                           
 12859                           ;Test.c: 159: readADC(3);
 12860  0027A2  0E03               	movlw	3
 12861  0027A4  EC68  F02F         	call	_readADC
 12862                           
 12863                           ;Test.c: 160: int res = ADRESH<<8 | ADRESL;
 12864  0027A8  50C3               	movf	4035,w,c	;volatile
 12865  0027AA  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 12866  0027AE  0100               	movlb	0	; () banked
 12867  0027B0  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 12868  0027B2  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 12869  0027B6  0100               	movlb	0	; () banked
 12870  0027B8  6BAB               	clrf	??_sensorTest& (0+255),b
 12871  0027BA  0100               	movlb	0	; () banked
 12872  0027BC  11AB               	iorwf	??_sensorTest& (0+255),w,b
 12873  0027BE  0100               	movlb	0	; () banked
 12874  0027C0  6FAF               	movwf	sensorTest@res_1732& (0+255),b
 12875  0027C2  0100               	movlb	0	; () banked
 12876  0027C4  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 12877  0027C6  0100               	movlb	0	; () banked
 12878  0027C8  6FB0               	movwf	(sensorTest@res_1732+1)& (0+255),b
 12879                           
 12880                           ; BSR set to: 0
 12881                           ;Test.c: 161: IR_signal = (res > 250) ? 1 : 0;
 12882  0027CA  0100               	movlb	0	; () banked
 12883  0027CC  BFB0               	btfsc	(sensorTest@res_1732+1)& (0+255),7,b
 12884  0027CE  D00A               	goto	u7920
 12885  0027D0  0100               	movlb	0	; () banked
 12886  0027D2  51B0               	movf	(sensorTest@res_1732+1)& (0+255),w,b
 12887  0027D4  E105               	bnz	u7921
 12888  0027D6  0EFB               	movlw	251
 12889  0027D8  0100               	movlb	0	; () banked
 12890  0027DA  5DAF               	subwf	sensorTest@res_1732& (0+255),w,b
 12891  0027DC  A0D8               	btfss	status,0,c
 12892  0027DE  D002               	goto	u7920
 12893  0027E0                     u7921:
 12894  0027E0  0E01               	movlw	1
 12895  0027E2  D001               	goto	u7930
 12896  0027E4                     u7920:
 12897  0027E4  0E00               	movlw	0
 12898  0027E6                     u7930:
 12899  0027E6  0100               	movlb	0	; () banked
 12900  0027E8  6FE2               	movwf	_IR_signal& (0+255),b
 12901  0027EA  6BE3               	clrf	(_IR_signal+1)& (0+255),b
 12902                           
 12903                           ;Test.c: 163: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12904  0027EC  0E01               	movlw	1
 12905  0027EE  EC7D  F030         	call	_lcdInst
 12906  0027F2  0E68               	movlw	104
 12907  0027F4  0100               	movlb	0	; () banked
 12908  0027F6  6FAB               	movwf	??_sensorTest& (0+255),b
 12909  0027F8  0EE4               	movlw	228
 12910  0027FA                     u11687:
 12911  0027FA  2EE8               	decfsz	wreg,f,c
 12912  0027FC  D7FE               	bra	u11687
 12913  0027FE  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12914  002800  D7FC               	bra	u11687
 12915  002802  F000               	nop	
 12916  002804  0E80               	movlw	128
 12917  002806  EC7D  F030         	call	_lcdInst
 12918                           
 12919                           ;Test.c: 164: printf("IR (REFLEC): %d  ", IR_signal);
 12920  00280A  0E1D               	movlw	low STR_81
 12921  00280C  0100               	movlb	0	; () banked
 12922  00280E  6F8E               	movwf	printf@f& (0+255),b
 12923  002810  0EFB               	movlw	high STR_81
 12924  002812  0100               	movlb	0	; () banked
 12925  002814  6F8F               	movwf	(printf@f+1)& (0+255),b
 12926  002816  C0E2  F090         	movff	_IR_signal,?_printf+2
 12927  00281A  C0E3  F091         	movff	_IR_signal+1,?_printf+3
 12928  00281E  EC17  F00F         	call	_printf	;wreg free
 12929                           
 12930                           ;Test.c: 165: lcdInst(0b11000000);;
 12931  002822  0EC0               	movlw	192
 12932  002824  EC7D  F030         	call	_lcdInst
 12933                           
 12934                           ;Test.c: 166: printf("%d", res);
 12935  002828  0E3D               	movlw	low (STR_64+11)
 12936  00282A  0100               	movlb	0	; () banked
 12937  00282C  6F8E               	movwf	printf@f& (0+255),b
 12938  00282E  0EFF               	movlw	high (STR_64+11)
 12939  002830  0100               	movlb	0	; () banked
 12940  002832  6F8F               	movwf	(printf@f+1)& (0+255),b
 12941  002834  C0AF  F090         	movff	sensorTest@res_1732,?_printf+2
 12942  002838  C0B0  F091         	movff	sensorTest@res_1732+1,?_printf+3
 12943  00283C  EC17  F00F         	call	_printf	;wreg free
 12944                           
 12945                           ;Test.c: 167: _delay((unsigned long)((100)*(32000000/4000.0)));
 12946  002840  0E05               	movlw	5
 12947  002842  0100               	movlb	0	; () banked
 12948  002844  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12949  002846  0E0F               	movlw	15
 12950  002848  0100               	movlb	0	; () banked
 12951  00284A  6FAB               	movwf	??_sensorTest& (0+255),b
 12952  00284C  0EF1               	movlw	241
 12953  00284E                     u11697:
 12954  00284E  2EE8               	decfsz	wreg,f,c
 12955  002850  D7FE               	bra	u11697
 12956  002852  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12957  002854  D7FC               	bra	u11697
 12958  002856  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12959  002858  D7FA               	bra	u11697
 12960  00285A                     l8686:
 12961  00285A  A281               	btfss	3969,1,c	;volatile
 12962  00285C  D7A2               	goto	l8668
 12963                           
 12964                           ;Test.c: 168: }
 12965                           ;Test.c: 169: if(PORTB >> 4 == 0b1111){
 12966  00285E  3881               	swapf	3969,w,c	;volatile
 12967  002860  0B0F               	andlw	15
 12968  002862  0A0F               	xorlw	15
 12969  002864  B4D8               	btfsc	status,2,c
 12970  002866  D01D               	goto	l1333
 12971                           
 12972                           ;Test.c: 172: else if(PORTB >> 4 == 0b0000){
 12973                           
 12974                           ;Test.c: 171: }
 12975                           
 12976                           ;Test.c: 170: break;
 12977  002868  CF81 F0AB          	movff	3969,??_sensorTest	;volatile
 12978  00286C  0100               	movlb	0	; () banked
 12979  00286E  3BAB               	swapf	??_sensorTest& (0+255),f,b
 12980  002870  0E0F               	movlw	15
 12981  002872  17AB               	andwf	??_sensorTest& (0+255),f,b
 12982  002874  A4D8               	btfss	status,2,c
 12983  002876  D012               	goto	l1336
 12984                           
 12985                           ; BSR set to: 0
 12986                           ;Test.c: 173: LATCbits.LATC6 = !LATCbits.LATC6;
 12987  002878  BC8B               	btfsc	3979,6,c	;volatile
 12988  00287A  D004               	goto	u7970
 12989  00287C  0100               	movlb	0	; () banked
 12990  00287E  6BAB               	clrf	??_sensorTest& (0+255),b
 12991  002880  2BAB               	incf	??_sensorTest& (0+255),f,b
 12992  002882  D002               	goto	u7988
 12993  002884                     u7970:
 12994  002884  0100               	movlb	0	; () banked
 12995  002886  6BAB               	clrf	??_sensorTest& (0+255),b
 12996  002888                     u7988:
 12997  002888  0100               	movlb	0	; () banked
 12998  00288A  3BAB               	swapf	??_sensorTest& (0+255),f,b
 12999  00288C  47AB               	rlncf	??_sensorTest& (0+255),f,b
 13000  00288E  47AB               	rlncf	??_sensorTest& (0+255),f,b
 13001  002890  508B               	movf	3979,w,c	;volatile
 13002  002892  0100               	movlb	0	; () banked
 13003  002894  19AB               	xorwf	??_sensorTest& (0+255),w,b
 13004  002896  0BBF               	andlw	-65
 13005  002898  19AB               	xorwf	??_sensorTest& (0+255),w,b
 13006  00289A  6E8B               	movwf	3979,c	;volatile
 13007  00289C                     l1336:
 13008  00289C  A281               	btfss	3969,1,c	;volatile
 13009  00289E  D7DD               	goto	l8686
 13010  0028A0  D7FD               	goto	l1336
 13011  0028A2                     l1333:
 13012                           
 13013                           ;Test.c: 176: }
 13014                           ;Test.c: 177: LATCbits.LATC6 = 0;
 13015  0028A2  9C8B               	bcf	3979,6,c	;volatile
 13016  0028A4                     l1340:
 13017  0028A4  B281               	btfsc	3969,1,c	;volatile
 13018  0028A6  D7FE               	goto	l1340
 13019                           
 13020                           ;Test.c: 187: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13021  0028A8  0E01               	movlw	1
 13022  0028AA  EC7D  F030         	call	_lcdInst
 13023  0028AE  0E68               	movlw	104
 13024  0028B0  0100               	movlb	0	; () banked
 13025  0028B2  6FAB               	movwf	??_sensorTest& (0+255),b
 13026  0028B4  0EE4               	movlw	228
 13027  0028B6                     u11707:
 13028  0028B6  2EE8               	decfsz	wreg,f,c
 13029  0028B8  D7FE               	bra	u11707
 13030  0028BA  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 13031  0028BC  D7FC               	bra	u11707
 13032  0028BE  F000               	nop	
 13033  0028C0  0E80               	movlw	128
 13034  0028C2  EC7D  F030         	call	_lcdInst
 13035                           
 13036                           ;Test.c: 188: printf("TST: MAGNETISM");
 13037  0028C6  0EA0               	movlw	low STR_83
 13038  0028C8  0100               	movlb	0	; () banked
 13039  0028CA  6F8E               	movwf	printf@f& (0+255),b
 13040  0028CC  0EFE               	movlw	high STR_83
 13041  0028CE  0100               	movlb	0	; () banked
 13042  0028D0  6F8F               	movwf	(printf@f+1)& (0+255),b
 13043  0028D2  EC17  F00F         	call	_printf	;wreg free
 13044                           
 13045                           ;Test.c: 189: _delay((unsigned long)((100)*(32000000/4000.0)));
 13046  0028D6  0E05               	movlw	5
 13047  0028D8  0100               	movlb	0	; () banked
 13048  0028DA  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 13049  0028DC  0E0F               	movlw	15
 13050  0028DE  0100               	movlb	0	; () banked
 13051  0028E0  6FAB               	movwf	??_sensorTest& (0+255),b
 13052  0028E2  0EF1               	movlw	241
 13053  0028E4                     u11717:
 13054  0028E4  2EE8               	decfsz	wreg,f,c
 13055  0028E6  D7FE               	bra	u11717
 13056  0028E8  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 13057  0028EA  D7FC               	bra	u11717
 13058  0028EC  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 13059  0028EE  D7FA               	bra	u11717
 13060                           
 13061                           ;Test.c: 190: while(PORTBbits.RB1 == 0){
 13062  0028F0  D021               	goto	l8714
 13063  0028F2                     l8708:
 13064                           
 13065                           ;Test.c: 191: readMAG();
 13066  0028F2  ECEC  F02C         	call	_readMAG	;wreg free
 13067                           
 13068                           ;Test.c: 192: lcdInst(0b10000000);;
 13069  0028F6  0E80               	movlw	128
 13070  0028F8  EC7D  F030         	call	_lcdInst
 13071                           
 13072                           ;Test.c: 193: lcdInst(0b11000000);;
 13073  0028FC  0EC0               	movlw	192
 13074  0028FE  EC7D  F030         	call	_lcdInst
 13075                           
 13076                           ;Test.c: 194: printf("MAG_signal: %d ", MAG_signal);
 13077  002902  0E43               	movlw	low STR_84
 13078  002904  0100               	movlb	0	; () banked
 13079  002906  6F8E               	movwf	printf@f& (0+255),b
 13080  002908  0EFE               	movlw	high STR_84
 13081  00290A  0100               	movlb	0	; () banked
 13082  00290C  6F8F               	movwf	(printf@f+1)& (0+255),b
 13083  00290E  C0E4  F090         	movff	_MAG_signal,?_printf+2
 13084  002912  C0E5  F091         	movff	_MAG_signal+1,?_printf+3
 13085  002916  EC17  F00F         	call	_printf	;wreg free
 13086                           
 13087                           ;Test.c: 195: _delay((unsigned long)((100)*(32000000/4000.0)));
 13088  00291A  0E05               	movlw	5
 13089  00291C  0100               	movlb	0	; () banked
 13090  00291E  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 13091  002920  0E0F               	movlw	15
 13092  002922  0100               	movlb	0	; () banked
 13093  002924  6FAB               	movwf	??_sensorTest& (0+255),b
 13094  002926  0EF1               	movlw	241
 13095  002928                     u11727:
 13096  002928  2EE8               	decfsz	wreg,f,c
 13097  00292A  D7FE               	bra	u11727
 13098  00292C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 13099  00292E  D7FC               	bra	u11727
 13100  002930  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 13101  002932  D7FA               	bra	u11727
 13102  002934                     l8714:
 13103  002934  A281               	btfss	3969,1,c	;volatile
 13104  002936  D7DD               	goto	l8708
 13105  002938                     l1346:
 13106  002938  B281               	btfsc	3969,1,c	;volatile
 13107  00293A  D7FE               	goto	l1346
 13108                           
 13109                           ;Test.c: 202: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13110  00293C  0E01               	movlw	1
 13111  00293E  EC7D  F030         	call	_lcdInst
 13112  002942  0E68               	movlw	104
 13113  002944  0100               	movlb	0	; () banked
 13114  002946  6FAB               	movwf	??_sensorTest& (0+255),b
 13115  002948  0EE4               	movlw	228
 13116  00294A                     u11737:
 13117  00294A  2EE8               	decfsz	wreg,f,c
 13118  00294C  D7FE               	bra	u11737
 13119  00294E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 13120  002950  D7FC               	bra	u11737
 13121  002952  F000               	nop	
 13122  002954  0E80               	movlw	128
 13123  002956  EC7D  F030         	call	_lcdInst
 13124                           
 13125                           ;Test.c: 203: printf("TST: COND");
 13126  00295A  0E7E               	movlw	low STR_85
 13127  00295C  0100               	movlb	0	; () banked
 13128  00295E  6F8E               	movwf	printf@f& (0+255),b
 13129  002960  0EFF               	movlw	high STR_85
 13130  002962  0100               	movlb	0	; () banked
 13131  002964  6F8F               	movwf	(printf@f+1)& (0+255),b
 13132  002966  EC17  F00F         	call	_printf	;wreg free
 13133                           
 13134                           ;Test.c: 204: _delay((unsigned long)((100)*(32000000/4000.0)));
 13135  00296A  0E05               	movlw	5
 13136  00296C  0100               	movlb	0	; () banked
 13137  00296E  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 13138  002970  0E0F               	movlw	15
 13139  002972  0100               	movlb	0	; () banked
 13140  002974  6FAB               	movwf	??_sensorTest& (0+255),b
 13141  002976  0EF1               	movlw	241
 13142  002978                     u11747:
 13143  002978  2EE8               	decfsz	wreg,f,c
 13144  00297A  D7FE               	bra	u11747
 13145  00297C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 13146  00297E  D7FC               	bra	u11747
 13147  002980  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 13148  002982  D7FA               	bra	u11747
 13149  002984                     l8726:
 13150                           
 13151                           ;Test.c: 206: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13152  002984  0E01               	movlw	1
 13153  002986  EC7D  F030         	call	_lcdInst
 13154  00298A  0E68               	movlw	104
 13155  00298C  0100               	movlb	0	; () banked
 13156  00298E  6FAB               	movwf	??_sensorTest& (0+255),b
 13157  002990  0EE4               	movlw	228
 13158  002992                     u11757:
 13159  002992  2EE8               	decfsz	wreg,f,c
 13160  002994  D7FE               	bra	u11757
 13161  002996  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 13162  002998  D7FC               	bra	u11757
 13163  00299A  F000               	nop	
 13164  00299C  0E80               	movlw	128
 13165  00299E  EC7D  F030         	call	_lcdInst
 13166                           
 13167                           ;Test.c: 207: printf("TST: COND");
 13168  0029A2  0E7E               	movlw	low STR_85
 13169  0029A4  0100               	movlb	0	; () banked
 13170  0029A6  6F8E               	movwf	printf@f& (0+255),b
 13171  0029A8  0EFF               	movlw	high STR_85
 13172  0029AA  0100               	movlb	0	; () banked
 13173  0029AC  6F8F               	movwf	(printf@f+1)& (0+255),b
 13174  0029AE  EC17  F00F         	call	_printf	;wreg free
 13175                           
 13176                           ;Test.c: 208: while(PORTBbits.RB1 == 0){
 13177  0029B2  D01B               	goto	l8738
 13178  0029B4                     l8734:
 13179                           
 13180                           ;Test.c: 212: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13181  0029B4  0E80               	movlw	128
 13182  0029B6  EC7D  F030         	call	_lcdInst
 13183  0029BA  0EC0               	movlw	192
 13184  0029BC  EC7D  F030         	call	_lcdInst
 13185                           
 13186                           ;Test.c: 213: printf("COND: %d", PORTAbits.RA2);
 13187  0029C0  0E9C               	movlw	low STR_87
 13188  0029C2  0100               	movlb	0	; () banked
 13189  0029C4  6F8E               	movwf	printf@f& (0+255),b
 13190  0029C6  0EFF               	movlw	high STR_87
 13191  0029C8  0100               	movlb	0	; () banked
 13192  0029CA  6F8F               	movwf	(printf@f+1)& (0+255),b
 13193  0029CC  A480               	btfss	3968,2,c	;volatile
 13194  0029CE  D004               	goto	u8030
 13195  0029D0  0100               	movlb	0	; () banked
 13196  0029D2  6BAB               	clrf	??_sensorTest& (0+255),b
 13197  0029D4  2BAB               	incf	??_sensorTest& (0+255),f,b
 13198  0029D6  D002               	goto	u8038
 13199  0029D8                     u8030:
 13200  0029D8  0100               	movlb	0	; () banked
 13201  0029DA  6BAB               	clrf	??_sensorTest& (0+255),b
 13202  0029DC                     u8038:
 13203  0029DC  0100               	movlb	0	; () banked
 13204  0029DE  51AB               	movf	??_sensorTest& (0+255),w,b
 13205  0029E0  0100               	movlb	0	; () banked
 13206  0029E2  6F90               	movwf	(?_printf+2)& (0+255),b
 13207  0029E4  6B91               	clrf	(?_printf+3)& (0+255),b
 13208  0029E6  EC17  F00F         	call	_printf	;wreg free
 13209  0029EA                     l8738:
 13210  0029EA  A281               	btfss	3969,1,c	;volatile
 13211  0029EC  D7E3               	goto	l8734
 13212                           
 13213                           ;Test.c: 214: }
 13214                           ;Test.c: 215: if(PORTB >> 4 == 0b1111){
 13215  0029EE  3881               	swapf	3969,w,c	;volatile
 13216  0029F0  0B0F               	andlw	15
 13217  0029F2  0A0F               	xorlw	15
 13218  0029F4  B4D8               	btfsc	status,2,c
 13219  0029F6  0012               	return	
 13220                           
 13221                           ;Test.c: 218: else{
 13222                           ;Test.c: 219: LATCbits.LATC7 = 1;
 13223                           
 13224                           ;Test.c: 217: }
 13225                           
 13226                           ;Test.c: 216: break;
 13227  0029F8  8E8B               	bsf	3979,7,c	;volatile
 13228                           
 13229                           ;Test.c: 220: while(PORTBbits.RB1 == 1){
 13230  0029FA  D01B               	goto	l8750
 13231  0029FC                     l8746:
 13232                           
 13233                           ;Test.c: 222: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13234  0029FC  0E80               	movlw	128
 13235  0029FE  EC7D  F030         	call	_lcdInst
 13236  002A02  0EC0               	movlw	192
 13237  002A04  EC7D  F030         	call	_lcdInst
 13238                           
 13239                           ;Test.c: 223: printf("COND: %d", PORTAbits.RA2);
 13240  002A08  0E9C               	movlw	low STR_87
 13241  002A0A  0100               	movlb	0	; () banked
 13242  002A0C  6F8E               	movwf	printf@f& (0+255),b
 13243  002A0E  0EFF               	movlw	high STR_87
 13244  002A10  0100               	movlb	0	; () banked
 13245  002A12  6F8F               	movwf	(printf@f+1)& (0+255),b
 13246  002A14  A480               	btfss	3968,2,c	;volatile
 13247  002A16  D004               	goto	u8060
 13248  002A18  0100               	movlb	0	; () banked
 13249  002A1A  6BAB               	clrf	??_sensorTest& (0+255),b
 13250  002A1C  2BAB               	incf	??_sensorTest& (0+255),f,b
 13251  002A1E  D002               	goto	u8068
 13252  002A20                     u8060:
 13253  002A20  0100               	movlb	0	; () banked
 13254  002A22  6BAB               	clrf	??_sensorTest& (0+255),b
 13255  002A24                     u8068:
 13256  002A24  0100               	movlb	0	; () banked
 13257  002A26  51AB               	movf	??_sensorTest& (0+255),w,b
 13258  002A28  0100               	movlb	0	; () banked
 13259  002A2A  6F90               	movwf	(?_printf+2)& (0+255),b
 13260  002A2C  6B91               	clrf	(?_printf+3)& (0+255),b
 13261  002A2E  EC17  F00F         	call	_printf	;wreg free
 13262  002A32                     l8750:
 13263  002A32  B281               	btfsc	3969,1,c	;volatile
 13264  002A34  D7E3               	goto	l8746
 13265                           
 13266                           ;Test.c: 224: }
 13267                           ;Test.c: 225: LATCbits.LATC7 = !1;
 13268  002A36  9E8B               	bcf	3979,7,c	;volatile
 13269  002A38  D7A5               	goto	l8726
 13270  002A3A                     __end_of_sensorTest:
 13271                           	opt stack 0
 13272                           tblptru	equ	0xFF8
 13273                           tblptrh	equ	0xFF7
 13274                           tblptrl	equ	0xFF6
 13275                           tablat	equ	0xFF5
 13276                           prodh	equ	0xFF4
 13277                           prodl	equ	0xFF3
 13278                           intcon	equ	0xFF2
 13279                           intcon2	equ	0xFF1
 13280                           intcon3	equ	0xFF0
 13281                           postinc0	equ	0xFEE
 13282                           wreg	equ	0xFE8
 13283                           postdec1	equ	0xFE5
 13284                           fsr1l	equ	0xFE1
 13285                           indf2	equ	0xFDF
 13286                           postinc2	equ	0xFDE
 13287                           postdec2	equ	0xFDD
 13288                           fsr2h	equ	0xFDA
 13289                           fsr2l	equ	0xFD9
 13290                           status	equ	0xFD8
 13291                           
 13292 ;; *************** function _readMAG *****************
 13293 ;; Defined at:
 13294 ;;		line 38 in file "ADCFunctionality.c"
 13295 ;; Parameters:    Size  Location     Type
 13296 ;;		None
 13297 ;; Auto vars:     Size  Location     Type
 13298 ;;  res             2    4[BANK0 ] int 
 13299 ;; Return value:  Size  Location     Type
 13300 ;;                  1    wreg      void 
 13301 ;; Registers used:
 13302 ;;		wreg, status,2, status,0, cstack
 13303 ;; Tracked objects:
 13304 ;;		On entry : 0/0
 13305 ;;		On exit  : 0/0
 13306 ;;		Unchanged: 0/0
 13307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13309 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13310 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13311 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13312 ;;Total ram usage:        4 bytes
 13313 ;; Hardware stack levels used:    1
 13314 ;; Hardware stack levels required when called:    8
 13315 ;; This function calls:
 13316 ;;		_readADC
 13317 ;; This function is called by:
 13318 ;;		_getMAG
 13319 ;;		_sensorTest
 13320 ;; This function uses a non-reentrant model
 13321 ;;
 13322                           
 13323                           	psect	text42
 13324  0059D8                     __ptext42:
 13325                           	opt stack 0
 13326  0059D8                     _readMAG:
 13327                           	opt stack 19
 13328                           
 13329                           ;ADCFunctionality.c: 39: readADC(1);
 13330                           
 13331                           ;incstack = 0
 13332  0059D8  0E01               	movlw	1
 13333  0059DA  EC68  F02F         	call	_readADC
 13334                           
 13335                           ;ADCFunctionality.c: 40: int res = ADRESH<<8 | ADRESL;
 13336  0059DE  50C3               	movf	4035,w,c	;volatile
 13337  0059E0  CFC4 F082          	movff	4036,??_readMAG	;volatile
 13338  0059E4  0100               	movlb	0	; () banked
 13339  0059E6  6B83               	clrf	(??_readMAG+1)& (0+255),b
 13340  0059E8  C082  F083         	movff	??_readMAG,??_readMAG+1
 13341  0059EC  0100               	movlb	0	; () banked
 13342  0059EE  6B82               	clrf	??_readMAG& (0+255),b
 13343  0059F0  0100               	movlb	0	; () banked
 13344  0059F2  1182               	iorwf	??_readMAG& (0+255),w,b
 13345  0059F4  0100               	movlb	0	; () banked
 13346  0059F6  6F84               	movwf	readMAG@res& (0+255),b
 13347  0059F8  0100               	movlb	0	; () banked
 13348  0059FA  5183               	movf	(??_readMAG+1)& (0+255),w,b
 13349  0059FC  0100               	movlb	0	; () banked
 13350  0059FE  6F85               	movwf	(readMAG@res+1)& (0+255),b
 13351                           
 13352                           ; BSR set to: 0
 13353                           ;ADCFunctionality.c: 41: MAG_signal = (res < 150) ? 1 : 0;
 13354  005A00  0100               	movlb	0	; () banked
 13355  005A02  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 13356  005A04  D008               	goto	u5761
 13357  005A06  0100               	movlb	0	; () banked
 13358  005A08  5185               	movf	(readMAG@res+1)& (0+255),w,b
 13359  005A0A  E107               	bnz	u5760
 13360  005A0C  0E96               	movlw	150
 13361  005A0E  0100               	movlb	0	; () banked
 13362  005A10  5D84               	subwf	readMAG@res& (0+255),w,b
 13363  005A12  B0D8               	btfsc	status,0,c
 13364  005A14  D002               	goto	u5760
 13365  005A16                     u5761:
 13366  005A16  0E01               	movlw	1
 13367  005A18  D001               	goto	u5770
 13368  005A1A                     u5760:
 13369  005A1A  0E00               	movlw	0
 13370  005A1C                     u5770:
 13371  005A1C  0100               	movlb	0	; () banked
 13372  005A1E  6FE4               	movwf	_MAG_signal& (0+255),b
 13373  005A20  6BE5               	clrf	(_MAG_signal+1)& (0+255),b
 13374                           
 13375                           ; BSR set to: 0
 13376  005A22  0012               	return		;funcret
 13377  005A24                     __end_of_readMAG:
 13378                           	opt stack 0
 13379                           tblptru	equ	0xFF8
 13380                           tblptrh	equ	0xFF7
 13381                           tblptrl	equ	0xFF6
 13382                           tablat	equ	0xFF5
 13383                           prodh	equ	0xFF4
 13384                           prodl	equ	0xFF3
 13385                           intcon	equ	0xFF2
 13386                           intcon2	equ	0xFF1
 13387                           intcon3	equ	0xFF0
 13388                           postinc0	equ	0xFEE
 13389                           wreg	equ	0xFE8
 13390                           postdec1	equ	0xFE5
 13391                           fsr1l	equ	0xFE1
 13392                           indf2	equ	0xFDF
 13393                           postinc2	equ	0xFDE
 13394                           postdec2	equ	0xFDD
 13395                           fsr2h	equ	0xFDA
 13396                           fsr2l	equ	0xFD9
 13397                           status	equ	0xFD8
 13398                           
 13399 ;; *************** function _arm *****************
 13400 ;; Defined at:
 13401 ;;		line 663 in file "Test.c"
 13402 ;; Parameters:    Size  Location     Type
 13403 ;;		None
 13404 ;; Auto vars:     Size  Location     Type
 13405 ;;  on              2   44[BANK0 ] int 
 13406 ;; Return value:  Size  Location     Type
 13407 ;;                  1    wreg      void 
 13408 ;; Registers used:
 13409 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13410 ;; Tracked objects:
 13411 ;;		On entry : 0/0
 13412 ;;		On exit  : 0/0
 13413 ;;		Unchanged: 0/0
 13414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13416 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13417 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13418 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13419 ;;Total ram usage:        3 bytes
 13420 ;; Hardware stack levels used:    1
 13421 ;; Hardware stack levels required when called:   10
 13422 ;; This function calls:
 13423 ;;		_lcdInst
 13424 ;;		_printf
 13425 ;;		_stopSignals
 13426 ;; This function is called by:
 13427 ;;		_Test
 13428 ;; This function uses a non-reentrant model
 13429 ;;
 13430                           
 13431                           	psect	text43
 13432  0047A0                     __ptext43:
 13433                           	opt stack 0
 13434  0047A0                     _arm:
 13435                           	opt stack 19
 13436                           
 13437                           ;Test.c: 664: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13438                           
 13439                           ; BSR set to: 0
 13440                           ;incstack = 0
 13441  0047A0  0E01               	movlw	1
 13442  0047A2  EC7D  F030         	call	_lcdInst
 13443  0047A6  0E68               	movlw	104
 13444  0047A8  0100               	movlb	0	; () banked
 13445  0047AA  6FAB               	movwf	??_arm& (0+255),b
 13446  0047AC  0EE4               	movlw	228
 13447  0047AE                     u11767:
 13448  0047AE  2EE8               	decfsz	wreg,f,c
 13449  0047B0  D7FE               	bra	u11767
 13450  0047B2  2FAB               	decfsz	??_arm& (0+255),f,b
 13451  0047B4  D7FC               	bra	u11767
 13452  0047B6  F000               	nop	
 13453  0047B8  0E80               	movlw	128
 13454  0047BA  EC7D  F030         	call	_lcdInst
 13455                           
 13456                           ;Test.c: 665: printf("D WILL RETURN   ");
 13457  0047BE  0E12               	movlw	low STR_125
 13458  0047C0  0100               	movlb	0	; () banked
 13459  0047C2  6F8E               	movwf	printf@f& (0+255),b
 13460  0047C4  0EFC               	movlw	high STR_125
 13461  0047C6  0100               	movlb	0	; () banked
 13462  0047C8  6F8F               	movwf	(printf@f+1)& (0+255),b
 13463  0047CA  EC17  F00F         	call	_printf	;wreg free
 13464                           
 13465                           ;Test.c: 666: lcdInst(0b11000000);;
 13466  0047CE  0EC0               	movlw	192
 13467  0047D0  EC7D  F030         	call	_lcdInst
 13468                           
 13469                           ;Test.c: 667: printf("ELSE TOGGLES ARM");
 13470  0047D4  0EBC               	movlw	low STR_126
 13471  0047D6  0100               	movlb	0	; () banked
 13472  0047D8  6F8E               	movwf	printf@f& (0+255),b
 13473  0047DA  0EFC               	movlw	high STR_126
 13474  0047DC  0100               	movlb	0	; () banked
 13475  0047DE  6F8F               	movwf	(printf@f+1)& (0+255),b
 13476  0047E0  EC17  F00F         	call	_printf	;wreg free
 13477                           
 13478                           ;Test.c: 669: (INTCONbits.GIE = 1);
 13479  0047E4  8EF2               	bsf	intcon,7,c	;volatile
 13480                           
 13481                           ;Test.c: 670: machine_state = Sorting_state;
 13482  0047E6  0E01               	movlw	1
 13483  0047E8  0100               	movlb	0	; () banked
 13484  0047EA  6FFC               	movwf	_machine_state& (0+255),b
 13485                           
 13486                           ; BSR set to: 0
 13487                           ;Test.c: 671: f_arm_position = 1;
 13488  0047EC  0E00               	movlw	0
 13489  0047EE  0100               	movlb	0	; () banked
 13490  0047F0  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 13491  0047F2  0E01               	movlw	1
 13492  0047F4  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
 13493                           
 13494                           ; BSR set to: 0
 13495                           ;Test.c: 672: timer2_counter = 0;
 13496  0047F6  0E00               	movlw	0
 13497  0047F8  6E74               	movwf	_timer2_counter+1,c	;volatile
 13498  0047FA  0E00               	movlw	0
 13499  0047FC  6E73               	movwf	_timer2_counter,c	;volatile
 13500                           
 13501                           ; BSR set to: 0
 13502                           ;Test.c: 673: LATBbits.LATB3 = 1;
 13503  0047FE  868A               	bsf	3978,3,c	;volatile
 13504                           
 13505                           ; BSR set to: 0
 13506                           ;Test.c: 674: TMR2ON = 1;
 13507  004800  84CA               	bsf	4042,2,c	;volatile
 13508                           
 13509                           ; BSR set to: 0
 13510                           ;Test.c: 675: was_low_2 = 0;
 13511  004802  0E00               	movlw	0
 13512  004804  6E7A               	movwf	_was_low_2+1,c	;volatile
 13513  004806  0E00               	movlw	0
 13514  004808  6E79               	movwf	_was_low_2,c	;volatile
 13515                           
 13516                           ; BSR set to: 0
 13517                           ;Test.c: 677: int on = 0;
 13518  00480A  0E00               	movlw	0
 13519  00480C  0100               	movlb	0	; () banked
 13520  00480E  6FAD               	movwf	(arm@on+1)& (0+255),b
 13521  004810  0E00               	movlw	0
 13522  004812  6FAC               	movwf	arm@on& (0+255),b
 13523  004814                     l9204:
 13524                           
 13525                           ;Test.c: 679: if(on){
 13526  004814  0100               	movlb	0	; () banked
 13527  004816  51AC               	movf	arm@on& (0+255),w,b
 13528  004818  0100               	movlb	0	; () banked
 13529  00481A  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 13530  00481C  B4D8               	btfsc	status,2,c
 13531  00481E  D01C               	goto	l9216
 13532                           
 13533                           ; BSR set to: 0
 13534                           ;Test.c: 680: on = !on;
 13535  004820  0100               	movlb	0	; () banked
 13536  004822  51AC               	movf	arm@on& (0+255),w,b
 13537  004824  0100               	movlb	0	; () banked
 13538  004826  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 13539  004828  A4D8               	btfss	status,2,c
 13540  00482A  D002               	goto	u8650
 13541  00482C  0E01               	movlw	1
 13542  00482E  D001               	goto	u8660
 13543  004830                     u8650:
 13544  004830  0E00               	movlw	0
 13545  004832                     u8660:
 13546  004832  0100               	movlb	0	; () banked
 13547  004834  6FAC               	movwf	arm@on& (0+255),b
 13548  004836  6BAD               	clrf	(arm@on+1)& (0+255),b
 13549                           
 13550                           ;Test.c: 681: while(PORTBbits.RB1 == 0){
 13551  004838  D005               	goto	l9210
 13552  00483A                     l9208:
 13553                           
 13554                           ; BSR set to: 0
 13555                           ;Test.c: 682: f_arm_position = 0;
 13556  00483A  0E00               	movlw	0
 13557  00483C  0100               	movlb	0	; () banked
 13558  00483E  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 13559  004840  0E00               	movlw	0
 13560  004842  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
 13561  004844                     l9210:
 13562                           
 13563                           ; BSR set to: 0
 13564  004844  A281               	btfss	3969,1,c	;volatile
 13565  004846  D7F9               	goto	l9208
 13566                           
 13567                           ; BSR set to: 0
 13568                           ;Test.c: 683: }
 13569                           ;Test.c: 684: if(PORTB >> 4 == 0b1111){
 13570                           
 13571                           ; BSR set to: 0
 13572  004848  3881               	swapf	3969,w,c	;volatile
 13573  00484A  0B0F               	andlw	15
 13574  00484C  0A0F               	xorlw	15
 13575  00484E  B4D8               	btfsc	status,2,c
 13576  004850  D01F               	goto	l1531
 13577  004852                     l1532:
 13578  004852  A281               	btfss	3969,1,c	;volatile
 13579  004854  D7DF               	goto	l9204
 13580  004856  D7FD               	goto	l1532
 13581  004858                     l9216:
 13582                           
 13583                           ;Test.c: 689: else{
 13584                           ;Test.c: 690: on = !on;
 13585  004858  0100               	movlb	0	; () banked
 13586  00485A  51AC               	movf	arm@on& (0+255),w,b
 13587  00485C  0100               	movlb	0	; () banked
 13588  00485E  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 13589  004860  A4D8               	btfss	status,2,c
 13590  004862  D002               	goto	u8700
 13591  004864  0E01               	movlw	1
 13592  004866  D001               	goto	u8710
 13593  004868                     u8700:
 13594  004868  0E00               	movlw	0
 13595  00486A                     u8710:
 13596  00486A  0100               	movlb	0	; () banked
 13597  00486C  6FAC               	movwf	arm@on& (0+255),b
 13598  00486E  6BAD               	clrf	(arm@on+1)& (0+255),b
 13599                           
 13600                           ;Test.c: 691: while(PORTBbits.RB1 == 0){
 13601  004870  D005               	goto	l9220
 13602  004872                     l9218:
 13603                           
 13604                           ; BSR set to: 0
 13605                           ;Test.c: 692: f_arm_position = 1;
 13606  004872  0E00               	movlw	0
 13607  004874  0100               	movlb	0	; () banked
 13608  004876  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 13609  004878  0E01               	movlw	1
 13610  00487A  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
 13611  00487C                     l9220:
 13612                           
 13613                           ; BSR set to: 0
 13614  00487C  A281               	btfss	3969,1,c	;volatile
 13615  00487E  D7F9               	goto	l9218
 13616                           
 13617                           ; BSR set to: 0
 13618                           ;Test.c: 693: }
 13619                           ;Test.c: 694: if(PORTB >> 4 == 0b1111){
 13620                           
 13621                           ; BSR set to: 0
 13622  004880  3881               	swapf	3969,w,c	;volatile
 13623  004882  0B0F               	andlw	15
 13624  004884  0A0F               	xorlw	15
 13625  004886  B4D8               	btfsc	status,2,c
 13626  004888  D003               	goto	l1531
 13627  00488A                     l1540:
 13628  00488A  A281               	btfss	3969,1,c	;volatile
 13629  00488C  D7C3               	goto	l9204
 13630  00488E  D7FD               	goto	l1540
 13631  004890                     l1531:
 13632                           
 13633                           ; BSR set to: 0
 13634                           ;Test.c: 698: }
 13635                           ;Test.c: 699: }
 13636                           ;Test.c: 701: (INTCONbits.GIE = 0);
 13637  004890  9EF2               	bcf	intcon,7,c	;volatile
 13638                           
 13639                           ; BSR set to: 0
 13640                           ;Test.c: 702: stopSignals();
 13641  004892  EC24  F030         	call	_stopSignals	;wreg free
 13642                           
 13643                           ;Test.c: 703: machine_state = Testing_state;
 13644  004896  0E03               	movlw	3
 13645  004898  0100               	movlb	0	; () banked
 13646  00489A  6FFC               	movwf	_machine_state& (0+255),b
 13647                           
 13648                           ; BSR set to: 0
 13649  00489C  0012               	return		;funcret
 13650  00489E                     __end_of_arm:
 13651                           	opt stack 0
 13652                           tblptru	equ	0xFF8
 13653                           tblptrh	equ	0xFF7
 13654                           tblptrl	equ	0xFF6
 13655                           tablat	equ	0xFF5
 13656                           prodh	equ	0xFF4
 13657                           prodl	equ	0xFF3
 13658                           intcon	equ	0xFF2
 13659                           intcon2	equ	0xFF1
 13660                           intcon3	equ	0xFF0
 13661                           postinc0	equ	0xFEE
 13662                           wreg	equ	0xFE8
 13663                           postdec1	equ	0xFE5
 13664                           fsr1l	equ	0xFE1
 13665                           indf2	equ	0xFDF
 13666                           postinc2	equ	0xFDE
 13667                           postdec2	equ	0xFDD
 13668                           fsr2h	equ	0xFDA
 13669                           fsr2l	equ	0xFD9
 13670                           status	equ	0xFD8
 13671                           
 13672 ;; *************** function _algorithmTest *****************
 13673 ;; Defined at:
 13674 ;;		line 78 in file "Test.c"
 13675 ;; Parameters:    Size  Location     Type
 13676 ;;		None
 13677 ;; Auto vars:     Size  Location     Type
 13678 ;;		None
 13679 ;; Return value:  Size  Location     Type
 13680 ;;                  1    wreg      void 
 13681 ;; Registers used:
 13682 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13683 ;; Tracked objects:
 13684 ;;		On entry : 0/0
 13685 ;;		On exit  : 0/0
 13686 ;;		Unchanged: 0/0
 13687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13690 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13691 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13692 ;;Total ram usage:        2 bytes
 13693 ;; Hardware stack levels used:    1
 13694 ;; Hardware stack levels required when called:   10
 13695 ;; This function calls:
 13696 ;;		_lcdInst
 13697 ;;		_printf
 13698 ;; This function is called by:
 13699 ;;		_Test
 13700 ;; This function uses a non-reentrant model
 13701 ;;
 13702                           
 13703                           	psect	text44
 13704  004A68                     __ptext44:
 13705                           	opt stack 0
 13706  004A68                     _algorithmTest:
 13707                           	opt stack 19
 13708                           
 13709                           ;Test.c: 80: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 13710                           
 13711                           ; BSR set to: 0
 13712                           ;incstack = 0
 13713  004A68  0E01               	movlw	1
 13714  004A6A  EC7D  F030         	call	_lcdInst
 13715  004A6E  0E68               	movlw	104
 13716  004A70  0100               	movlb	0	; () banked
 13717  004A72  6FAB               	movwf	??_algorithmTest& (0+255),b
 13718  004A74  0EE4               	movlw	228
 13719  004A76                     u11777:
 13720  004A76  2EE8               	decfsz	wreg,f,c
 13721  004A78  D7FE               	bra	u11777
 13722  004A7A  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 13723  004A7C  D7FC               	bra	u11777
 13724  004A7E  F000               	nop	
 13725  004A80  0E80               	movlw	128
 13726  004A82  EC7D  F030         	call	_lcdInst
 13727                           
 13728                           ;Test.c: 81: printf("ALGORITHM TEST");
 13729  004A86  0EEB               	movlw	low STR_70
 13730  004A88  0100               	movlb	0	; () banked
 13731  004A8A  6F8E               	movwf	printf@f& (0+255),b
 13732  004A8C  0EFE               	movlw	high STR_70
 13733  004A8E  0100               	movlb	0	; () banked
 13734  004A90  6F8F               	movwf	(printf@f+1)& (0+255),b
 13735  004A92  EC17  F00F         	call	_printf	;wreg free
 13736                           
 13737                           ;Test.c: 82: lcdInst(0b11000000);;
 13738  004A96  0EC0               	movlw	192
 13739  004A98  EC7D  F030         	call	_lcdInst
 13740                           
 13741                           ;Test.c: 83: printf("PUSH TO START");
 13742  004A9C  0E24               	movlw	low STR_71
 13743  004A9E  0100               	movlb	0	; () banked
 13744  004AA0  6F8E               	movwf	printf@f& (0+255),b
 13745  004AA2  0EFF               	movlw	high STR_71
 13746  004AA4  0100               	movlb	0	; () banked
 13747  004AA6  6F8F               	movwf	(printf@f+1)& (0+255),b
 13748  004AA8  EC17  F00F         	call	_printf	;wreg free
 13749                           
 13750                           ;Test.c: 84: _delay((unsigned long)((100)*(32000000/4000.0)));
 13751  004AAC  0E05               	movlw	5
 13752  004AAE  0100               	movlb	0	; () banked
 13753  004AB0  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 13754  004AB2  0E0F               	movlw	15
 13755  004AB4  0100               	movlb	0	; () banked
 13756  004AB6  6FAB               	movwf	??_algorithmTest& (0+255),b
 13757  004AB8  0EF1               	movlw	241
 13758  004ABA                     u11787:
 13759  004ABA  2EE8               	decfsz	wreg,f,c
 13760  004ABC  D7FE               	bra	u11787
 13761  004ABE  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 13762  004AC0  D7FC               	bra	u11787
 13763  004AC2  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 13764  004AC4  D7FA               	bra	u11787
 13765  004AC6                     l1307:
 13766  004AC6  A281               	btfss	3969,1,c	;volatile
 13767  004AC8  D7FE               	goto	l1307
 13768  004ACA                     l1310:
 13769  004ACA  B281               	btfsc	3969,1,c	;volatile
 13770  004ACC  D7FE               	goto	l1310
 13771                           
 13772                           ;Test.c: 87: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 13773  004ACE  0E01               	movlw	1
 13774  004AD0  EC7D  F030         	call	_lcdInst
 13775  004AD4  0E68               	movlw	104
 13776  004AD6  0100               	movlb	0	; () banked
 13777  004AD8  6FAB               	movwf	??_algorithmTest& (0+255),b
 13778  004ADA  0EE4               	movlw	228
 13779  004ADC                     u11797:
 13780  004ADC  2EE8               	decfsz	wreg,f,c
 13781  004ADE  D7FE               	bra	u11797
 13782  004AE0  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 13783  004AE2  D7FC               	bra	u11797
 13784  004AE4  F000               	nop	
 13785  004AE6  0E80               	movlw	128
 13786  004AE8  EC7D  F030         	call	_lcdInst
 13787                           
 13788                           ;Test.c: 92: printf("ALG1: 9 POPNOTAB");
 13789  004AEC  0E67               	movlw	low STR_72
 13790  004AEE  0100               	movlb	0	; () banked
 13791  004AF0  6F8E               	movwf	printf@f& (0+255),b
 13792  004AF2  0EFC               	movlw	high STR_72
 13793  004AF4  0100               	movlb	0	; () banked
 13794  004AF6  6F8F               	movwf	(printf@f+1)& (0+255),b
 13795  004AF8  EC17  F00F         	call	_printf	;wreg free
 13796                           
 13797                           ;Test.c: 99: printf("ALG2: 12 CANS");
 13798  004AFC  0E08               	movlw	low STR_73
 13799  004AFE  0100               	movlb	0	; () banked
 13800  004B00  6F8E               	movwf	printf@f& (0+255),b
 13801  004B02  0EFF               	movlw	high STR_73
 13802  004B04  0100               	movlb	0	; () banked
 13803  004B06  6F8F               	movwf	(printf@f+1)& (0+255),b
 13804  004B08  EC17  F00F         	call	_printf	;wreg free
 13805                           
 13806                           ;Test.c: 108: printf("ALG3: 1 CAN");
 13807  004B0C  0E5C               	movlw	low STR_74
 13808  004B0E  0100               	movlb	0	; () banked
 13809  004B10  6F8E               	movwf	printf@f& (0+255),b
 13810  004B12  0EFF               	movlw	high STR_74
 13811  004B14  0100               	movlb	0	; () banked
 13812  004B16  6F8F               	movwf	(printf@f+1)& (0+255),b
 13813  004B18  EC17  F00F         	call	_printf	;wreg free
 13814                           
 13815                           ;Test.c: 114: printf("ALG4: ALL CANS");
 13816  004B1C  0ECD               	movlw	low STR_75
 13817  004B1E  0100               	movlb	0	; () banked
 13818  004B20  6F8E               	movwf	printf@f& (0+255),b
 13819  004B22  0EFE               	movlw	high STR_75
 13820  004B24  0100               	movlb	0	; () banked
 13821  004B26  6F8F               	movwf	(printf@f+1)& (0+255),b
 13822  004B28  EC17  F00F         	call	_printf	;wreg free
 13823                           
 13824                           ;Test.c: 119: printf("ALG5: NO CANS");
 13825  004B2C  0E16               	movlw	low STR_76
 13826  004B2E  0100               	movlb	0	; () banked
 13827  004B30  6F8E               	movwf	printf@f& (0+255),b
 13828  004B32  0EFF               	movlw	high STR_76
 13829  004B34  0100               	movlb	0	; () banked
 13830  004B36  6F8F               	movwf	(printf@f+1)& (0+255),b
 13831  004B38  EC17  F00F         	call	_printf	;wreg free
 13832  004B3C  0012               	return		;funcret
 13833  004B3E                     __end_of_algorithmTest:
 13834                           	opt stack 0
 13835                           tblptru	equ	0xFF8
 13836                           tblptrh	equ	0xFF7
 13837                           tblptrl	equ	0xFF6
 13838                           tablat	equ	0xFF5
 13839                           prodh	equ	0xFF4
 13840                           prodl	equ	0xFF3
 13841                           intcon	equ	0xFF2
 13842                           intcon2	equ	0xFF1
 13843                           intcon3	equ	0xFF0
 13844                           postinc0	equ	0xFEE
 13845                           wreg	equ	0xFE8
 13846                           postdec1	equ	0xFE5
 13847                           fsr1l	equ	0xFE1
 13848                           indf2	equ	0xFDF
 13849                           postinc2	equ	0xFDE
 13850                           postdec2	equ	0xFDD
 13851                           fsr2h	equ	0xFDA
 13852                           fsr2l	equ	0xFD9
 13853                           status	equ	0xFD8
 13854                           
 13855 ;; *************** function _actuatorTest *****************
 13856 ;; Defined at:
 13857 ;;		line 230 in file "Test.c"
 13858 ;; Parameters:    Size  Location     Type
 13859 ;;		None
 13860 ;; Auto vars:     Size  Location     Type
 13861 ;;  i               1   45[BANK0 ] unsigned char 
 13862 ;;  i               1   67[BANK0 ] unsigned char 
 13863 ;;  i               1   66[BANK0 ] unsigned char 
 13864 ;;  i               1   65[BANK0 ] unsigned char 
 13865 ;;  i               1   64[BANK0 ] unsigned char 
 13866 ;;  i               1   63[BANK0 ] unsigned char 
 13867 ;;  i               1   62[BANK0 ] unsigned char 
 13868 ;;  i               1   61[BANK0 ] unsigned char 
 13869 ;;  i               1   60[BANK0 ] unsigned char 
 13870 ;;  i               1   59[BANK0 ] unsigned char 
 13871 ;;  i               1   58[BANK0 ] unsigned char 
 13872 ;;  i               1   57[BANK0 ] unsigned char 
 13873 ;;  i               1   56[BANK0 ] unsigned char 
 13874 ;;  i               1   55[BANK0 ] unsigned char 
 13875 ;;  i               1   54[BANK0 ] unsigned char 
 13876 ;;  i               1   53[BANK0 ] unsigned char 
 13877 ;;  i               1   52[BANK0 ] unsigned char 
 13878 ;;  i               1   51[BANK0 ] unsigned char 
 13879 ;;  i               1   50[BANK0 ] unsigned char 
 13880 ;;  i               1   49[BANK0 ] unsigned char 
 13881 ;;  i               1   48[BANK0 ] unsigned char 
 13882 ;;  i               1   47[BANK0 ] unsigned char 
 13883 ;;  i               1   46[BANK0 ] unsigned char 
 13884 ;;  i               2   68[BANK0 ] int 
 13885 ;; Return value:  Size  Location     Type
 13886 ;;                  1    wreg      void 
 13887 ;; Registers used:
 13888 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13889 ;; Tracked objects:
 13890 ;;		On entry : 0/0
 13891 ;;		On exit  : 0/0
 13892 ;;		Unchanged: 0/0
 13893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13895 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13896 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13897 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13898 ;;Total ram usage:       27 bytes
 13899 ;; Hardware stack levels used:    1
 13900 ;; Hardware stack levels required when called:   10
 13901 ;; This function calls:
 13902 ;;		_lcdInst
 13903 ;;		_printf
 13904 ;;		_updateServoPosition
 13905 ;; This function is called by:
 13906 ;;		_Test
 13907 ;; This function uses a non-reentrant model
 13908 ;;
 13909                           
 13910                           	psect	text45
 13911  0008DA                     __ptext45:
 13912                           	opt stack 0
 13913  0008DA                     _actuatorTest:
 13914                           	opt stack 19
 13915                           
 13916                           ;Test.c: 232: int i = 0;
 13917                           
 13918                           ;incstack = 0
 13919  0008DA  0E00               	movlw	0
 13920  0008DC  0100               	movlb	0	; () banked
 13921  0008DE  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13922  0008E0  0E00               	movlw	0
 13923  0008E2  6FC4               	movwf	actuatorTest@i& (0+255),b
 13924                           
 13925                           ; BSR set to: 0
 13926                           ;Test.c: 234: (INTCONbits.GIE = 1);
 13927  0008E4  8EF2               	bsf	intcon,7,c	;volatile
 13928                           
 13929                           ; BSR set to: 0
 13930                           ;Test.c: 235: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13931  0008E6  0E01               	movlw	1
 13932  0008E8  EC7D  F030         	call	_lcdInst
 13933  0008EC  0E68               	movlw	104
 13934  0008EE  0100               	movlb	0	; () banked
 13935  0008F0  6FAB               	movwf	??_actuatorTest& (0+255),b
 13936  0008F2  0EE4               	movlw	228
 13937  0008F4                     u11807:
 13938  0008F4  2EE8               	decfsz	wreg,f,c
 13939  0008F6  D7FE               	bra	u11807
 13940  0008F8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13941  0008FA  D7FC               	bra	u11807
 13942  0008FC  F000               	nop	
 13943  0008FE  0E80               	movlw	128
 13944  000900  EC7D  F030         	call	_lcdInst
 13945                           
 13946                           ;Test.c: 236: printf("ACTUATORS");
 13947  000904  0E88               	movlw	low STR_89
 13948  000906  0100               	movlb	0	; () banked
 13949  000908  6F8E               	movwf	printf@f& (0+255),b
 13950  00090A  0EFF               	movlw	high STR_89
 13951  00090C  0100               	movlb	0	; () banked
 13952  00090E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13953  000910  EC17  F00F         	call	_printf	;wreg free
 13954                           
 13955                           ;Test.c: 237: lcdInst(0b11000000);;
 13956  000914  0EC0               	movlw	192
 13957  000916  EC7D  F030         	call	_lcdInst
 13958                           
 13959                           ;Test.c: 238: printf("PUSH TO START");
 13960  00091A  0E24               	movlw	low STR_71
 13961  00091C  0100               	movlb	0	; () banked
 13962  00091E  6F8E               	movwf	printf@f& (0+255),b
 13963  000920  0EFF               	movlw	high STR_71
 13964  000922  0100               	movlb	0	; () banked
 13965  000924  6F8F               	movwf	(printf@f+1)& (0+255),b
 13966  000926  EC17  F00F         	call	_printf	;wreg free
 13967                           
 13968                           ;Test.c: 239: _delay((unsigned long)((100)*(32000000/4000.0)));
 13969  00092A  0E05               	movlw	5
 13970  00092C  0100               	movlb	0	; () banked
 13971  00092E  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13972  000930  0E0F               	movlw	15
 13973  000932  0100               	movlb	0	; () banked
 13974  000934  6FAB               	movwf	??_actuatorTest& (0+255),b
 13975  000936  0EF1               	movlw	241
 13976  000938                     u11817:
 13977  000938  2EE8               	decfsz	wreg,f,c
 13978  00093A  D7FE               	bra	u11817
 13979  00093C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13980  00093E  D7FC               	bra	u11817
 13981  000940  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13982  000942  D7FA               	bra	u11817
 13983  000944                     l1363:
 13984  000944  A281               	btfss	3969,1,c	;volatile
 13985  000946  D7FE               	goto	l1363
 13986  000948                     l1366:
 13987  000948  B281               	btfsc	3969,1,c	;volatile
 13988  00094A  D7FE               	goto	l1366
 13989                           
 13990                           ;Test.c: 242: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13991  00094C  0E01               	movlw	1
 13992  00094E  EC7D  F030         	call	_lcdInst
 13993  000952  0E68               	movlw	104
 13994  000954  0100               	movlb	0	; () banked
 13995  000956  6FAB               	movwf	??_actuatorTest& (0+255),b
 13996  000958  0EE4               	movlw	228
 13997  00095A                     u11827:
 13998  00095A  2EE8               	decfsz	wreg,f,c
 13999  00095C  D7FE               	bra	u11827
 14000  00095E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14001  000960  D7FC               	bra	u11827
 14002  000962  F000               	nop	
 14003  000964  0E80               	movlw	128
 14004  000966  EC7D  F030         	call	_lcdInst
 14005                           
 14006                           ;Test.c: 247: printf("TST: DC MOTORS");
 14007  00096A  0EDC               	movlw	low STR_91
 14008  00096C  0100               	movlb	0	; () banked
 14009  00096E  6F8E               	movwf	printf@f& (0+255),b
 14010  000970  0EFE               	movlw	high STR_91
 14011  000972  0100               	movlb	0	; () banked
 14012  000974  6F8F               	movwf	(printf@f+1)& (0+255),b
 14013  000976  EC17  F00F         	call	_printf	;wreg free
 14014                           
 14015                           ;Test.c: 248: lcdInst(0b11000000);;
 14016  00097A  0EC0               	movlw	192
 14017  00097C  EC7D  F030         	call	_lcdInst
 14018                           
 14019                           ;Test.c: 249: printf("PIN RA5 HIGH.");
 14020  000980  0EFA               	movlw	low STR_92
 14021  000982  0100               	movlb	0	; () banked
 14022  000984  6F8E               	movwf	printf@f& (0+255),b
 14023  000986  0EFE               	movlw	high STR_92
 14024  000988  0100               	movlb	0	; () banked
 14025  00098A  6F8F               	movwf	(printf@f+1)& (0+255),b
 14026  00098C  EC17  F00F         	call	_printf	;wreg free
 14027                           
 14028                           ;Test.c: 250: LATBbits.LATB2 = 1;
 14029  000990  848A               	bsf	3978,2,c	;volatile
 14030                           
 14031                           ;Test.c: 251: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 14032  000992  0E00               	movlw	0
 14033  000994  0100               	movlb	0	; () banked
 14034  000996  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 14035  000998  0E00               	movlw	0
 14036  00099A  6FC4               	movwf	actuatorTest@i& (0+255),b
 14037                           
 14038                           ; BSR set to: 0
 14039  00099C  0100               	movlb	0	; () banked
 14040  00099E  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 14041  0009A0  D008               	goto	l8790
 14042  0009A2  0100               	movlb	0	; () banked
 14043  0009A4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 14044  0009A6  E123               	bnz	l1370
 14045  0009A8  0E05               	movlw	5
 14046  0009AA  0100               	movlb	0	; () banked
 14047  0009AC  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 14048  0009AE  B0D8               	btfsc	status,0,c
 14049  0009B0  D01E               	goto	l1370
 14050  0009B2                     l8790:
 14051                           
 14052                           ; BSR set to: 0
 14053  0009B2  0E00               	movlw	0
 14054  0009B4  0100               	movlb	0	; () banked
 14055  0009B6  6FAD               	movwf	actuatorTest@i_1755& (0+255),b
 14056  0009B8                     l8792:
 14057                           
 14058                           ; BSR set to: 0
 14059  0009B8  0E63               	movlw	99
 14060  0009BA  0100               	movlb	0	; () banked
 14061  0009BC  65AD               	cpfsgt	actuatorTest@i_1755& (0+255),b
 14062  0009BE  D001               	goto	l8796
 14063  0009C0  D00C               	goto	l8800
 14064  0009C2                     l8796:
 14065                           
 14066                           ; BSR set to: 0
 14067  0009C2  0E68               	movlw	104
 14068  0009C4  0100               	movlb	0	; () banked
 14069  0009C6  6FAB               	movwf	??_actuatorTest& (0+255),b
 14070  0009C8  0EE4               	movlw	228
 14071  0009CA                     u11837:
 14072  0009CA  2EE8               	decfsz	wreg,f,c
 14073  0009CC  D7FE               	bra	u11837
 14074  0009CE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14075  0009D0  D7FC               	bra	u11837
 14076  0009D2  F000               	nop	
 14077  0009D4  0100               	movlb	0	; () banked
 14078  0009D6  2BAD               	incf	actuatorTest@i_1755& (0+255),f,b
 14079  0009D8  D7EF               	goto	l8792
 14080  0009DA                     l8800:
 14081                           
 14082                           ; BSR set to: 0
 14083  0009DA  0100               	movlb	0	; () banked
 14084  0009DC  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 14085  0009DE  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 14086                           
 14087                           ; BSR set to: 0
 14088  0009E0  0100               	movlb	0	; () banked
 14089  0009E2  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 14090  0009E4  D7E6               	goto	l8790
 14091  0009E6  0100               	movlb	0	; () banked
 14092  0009E8  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 14093  0009EA  E101               	bnz	u8130
 14094  0009EC  D7DD               	goto	L11
 14095  0009EE                     u8130:
 14096  0009EE                     l1370:
 14097                           
 14098                           ; BSR set to: 0
 14099                           ;Test.c: 252: LATBbits.LATB2 = 0;
 14100  0009EE  948A               	bcf	3978,2,c	;volatile
 14101                           
 14102                           ; BSR set to: 0
 14103                           ;Test.c: 253: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14104  0009F0  0E01               	movlw	1
 14105  0009F2  EC7D  F030         	call	_lcdInst
 14106  0009F6  0E68               	movlw	104
 14107  0009F8  0100               	movlb	0	; () banked
 14108  0009FA  6FAB               	movwf	??_actuatorTest& (0+255),b
 14109  0009FC  0EE4               	movlw	228
 14110  0009FE                     u11847:
 14111  0009FE  2EE8               	decfsz	wreg,f,c
 14112  000A00  D7FE               	bra	u11847
 14113  000A02  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14114  000A04  D7FC               	bra	u11847
 14115  000A06  F000               	nop	
 14116  000A08  0E80               	movlw	128
 14117  000A0A  EC7D  F030         	call	_lcdInst
 14118                           
 14119                           ;Test.c: 259: printf("TST: COND SOLN'D");
 14120  000A0E  0E78               	movlw	low STR_93
 14121  000A10  0100               	movlb	0	; () banked
 14122  000A12  6F8E               	movwf	printf@f& (0+255),b
 14123  000A14  0EFC               	movlw	high STR_93
 14124  000A16  0100               	movlb	0	; () banked
 14125  000A18  6F8F               	movwf	(printf@f+1)& (0+255),b
 14126  000A1A  EC17  F00F         	call	_printf	;wreg free
 14127                           
 14128                           ;Test.c: 260: lcdInst(0b11000000);;
 14129  000A1E  0EC0               	movlw	192
 14130  000A20  EC7D  F030         	call	_lcdInst
 14131                           
 14132                           ;Test.c: 261: printf("PIN RA3...");
 14133  000A24  0E68               	movlw	low STR_94
 14134  000A26  0100               	movlb	0	; () banked
 14135  000A28  6F8E               	movwf	printf@f& (0+255),b
 14136  000A2A  0EFF               	movlw	high STR_94
 14137  000A2C  0100               	movlb	0	; () banked
 14138  000A2E  6F8F               	movwf	(printf@f+1)& (0+255),b
 14139  000A30  EC17  F00F         	call	_printf	;wreg free
 14140                           
 14141                           ;Test.c: 262: for(i=0;i<5;i++){
 14142  000A34  0E00               	movlw	0
 14143  000A36  0100               	movlb	0	; () banked
 14144  000A38  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 14145  000A3A  0E00               	movlw	0
 14146  000A3C  6FC4               	movwf	actuatorTest@i& (0+255),b
 14147                           
 14148                           ; BSR set to: 0
 14149  000A3E  0100               	movlb	0	; () banked
 14150  000A40  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 14151  000A42  D008               	goto	l1373
 14152  000A44  0100               	movlb	0	; () banked
 14153  000A46  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 14154  000A48  E12C               	bnz	l1374
 14155  000A4A  0E05               	movlw	5
 14156  000A4C  0100               	movlb	0	; () banked
 14157  000A4E  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 14158  000A50  B0D8               	btfsc	status,0,c
 14159  000A52  D027               	goto	l1374
 14160  000A54                     l1373:
 14161                           
 14162                           ; BSR set to: 0
 14163                           ;Test.c: 263: LATCbits.LATC7 = 1;
 14164  000A54  8E8B               	bsf	3979,7,c	;volatile
 14165                           
 14166                           ; BSR set to: 0
 14167                           ;Test.c: 264: _delay((unsigned long)((300)*(32000000/4000.0)));
 14168  000A56  0E0D               	movlw	13
 14169  000A58  0100               	movlb	0	; () banked
 14170  000A5A  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 14171  000A5C  0E2D               	movlw	45
 14172  000A5E  0100               	movlb	0	; () banked
 14173  000A60  6FAB               	movwf	??_actuatorTest& (0+255),b
 14174  000A62  0ED7               	movlw	215
 14175  000A64                     u11857:
 14176  000A64  2EE8               	decfsz	wreg,f,c
 14177  000A66  D7FE               	bra	u11857
 14178  000A68  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14179  000A6A  D7FC               	bra	u11857
 14180  000A6C  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 14181  000A6E  D7FA               	bra	u11857
 14182  000A70  D000               	nop2	
 14183                           
 14184                           ;Test.c: 265: LATCbits.LATC7 = !1;
 14185  000A72  9E8B               	bcf	3979,7,c	;volatile
 14186                           
 14187                           ;Test.c: 266: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 14188  000A74  0E1D               	movlw	29
 14189  000A76  0100               	movlb	0	; () banked
 14190  000A78  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 14191  000A7A  0E69               	movlw	105
 14192  000A7C  0100               	movlb	0	; () banked
 14193  000A7E  6FAB               	movwf	??_actuatorTest& (0+255),b
 14194  000A80  0EA5               	movlw	165
 14195  000A82                     u11867:
 14196  000A82  2EE8               	decfsz	wreg,f,c
 14197  000A84  D7FE               	bra	u11867
 14198  000A86  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14199  000A88  D7FC               	bra	u11867
 14200  000A8A  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 14201  000A8C  D7FA               	bra	u11867
 14202  000A8E  0100               	movlb	0	; () banked
 14203  000A90  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 14204  000A92  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 14205  000A94  0100               	movlb	0	; () banked
 14206  000A96  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 14207  000A98  D7DD               	goto	l1373
 14208  000A9A  0100               	movlb	0	; () banked
 14209  000A9C  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 14210  000A9E  E101               	bnz	u8150
 14211  000AA0  D7D4               	goto	L12
 14212  000AA2                     u8150:
 14213  000AA2                     l1374:
 14214                           
 14215                           ; BSR set to: 0
 14216                           ;Test.c: 267: }
 14217                           ;Test.c: 268: LATCbits.LATC7 = !1;
 14218  000AA2  9E8B               	bcf	3979,7,c	;volatile
 14219                           
 14220                           ; BSR set to: 0
 14221                           ;Test.c: 269: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14222  000AA4  0E01               	movlw	1
 14223  000AA6  EC7D  F030         	call	_lcdInst
 14224  000AAA  0E68               	movlw	104
 14225  000AAC  0100               	movlb	0	; () banked
 14226  000AAE  6FAB               	movwf	??_actuatorTest& (0+255),b
 14227  000AB0  0EE4               	movlw	228
 14228  000AB2                     u11877:
 14229  000AB2  2EE8               	decfsz	wreg,f,c
 14230  000AB4  D7FE               	bra	u11877
 14231  000AB6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14232  000AB8  D7FC               	bra	u11877
 14233  000ABA  F000               	nop	
 14234  000ABC  0E80               	movlw	128
 14235  000ABE  EC7D  F030         	call	_lcdInst
 14236                           
 14237                           ;Test.c: 275: printf("TST: PUSH SOLN'D");
 14238  000AC2  0E89               	movlw	low STR_95
 14239  000AC4  0100               	movlb	0	; () banked
 14240  000AC6  6F8E               	movwf	printf@f& (0+255),b
 14241  000AC8  0EFC               	movlw	high STR_95
 14242  000ACA  0100               	movlb	0	; () banked
 14243  000ACC  6F8F               	movwf	(printf@f+1)& (0+255),b
 14244  000ACE  EC17  F00F         	call	_printf	;wreg free
 14245                           
 14246                           ;Test.c: 276: lcdInst(0b11000000);;
 14247  000AD2  0EC0               	movlw	192
 14248  000AD4  EC7D  F030         	call	_lcdInst
 14249                           
 14250                           ;Test.c: 277: printf("PIN RA4...");
 14251  000AD8  0E73               	movlw	low STR_96
 14252  000ADA  0100               	movlb	0	; () banked
 14253  000ADC  6F8E               	movwf	printf@f& (0+255),b
 14254  000ADE  0EFF               	movlw	high STR_96
 14255  000AE0  0100               	movlb	0	; () banked
 14256  000AE2  6F8F               	movwf	(printf@f+1)& (0+255),b
 14257  000AE4  EC17  F00F         	call	_printf	;wreg free
 14258                           
 14259                           ;Test.c: 278: for(i=0;i<5;i++){
 14260  000AE8  0E00               	movlw	0
 14261  000AEA  0100               	movlb	0	; () banked
 14262  000AEC  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 14263  000AEE  0E00               	movlw	0
 14264  000AF0  6FC4               	movwf	actuatorTest@i& (0+255),b
 14265                           
 14266                           ; BSR set to: 0
 14267  000AF2  0100               	movlb	0	; () banked
 14268  000AF4  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 14269  000AF6  D008               	goto	l1375
 14270  000AF8  0100               	movlb	0	; () banked
 14271  000AFA  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 14272  000AFC  E12C               	bnz	l1376
 14273  000AFE  0E05               	movlw	5
 14274  000B00  0100               	movlb	0	; () banked
 14275  000B02  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 14276  000B04  B0D8               	btfsc	status,0,c
 14277  000B06  D027               	goto	l1376
 14278  000B08                     l1375:
 14279                           
 14280                           ; BSR set to: 0
 14281                           ;Test.c: 279: LATAbits.LATA4 = 1;
 14282  000B08  8889               	bsf	3977,4,c	;volatile
 14283                           
 14284                           ; BSR set to: 0
 14285                           ;Test.c: 280: _delay((unsigned long)((300)*(32000000/4000.0)));
 14286  000B0A  0E0D               	movlw	13
 14287  000B0C  0100               	movlb	0	; () banked
 14288  000B0E  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 14289  000B10  0E2D               	movlw	45
 14290  000B12  0100               	movlb	0	; () banked
 14291  000B14  6FAB               	movwf	??_actuatorTest& (0+255),b
 14292  000B16  0ED7               	movlw	215
 14293  000B18                     u11887:
 14294  000B18  2EE8               	decfsz	wreg,f,c
 14295  000B1A  D7FE               	bra	u11887
 14296  000B1C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14297  000B1E  D7FC               	bra	u11887
 14298  000B20  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 14299  000B22  D7FA               	bra	u11887
 14300  000B24  D000               	nop2	
 14301                           
 14302                           ;Test.c: 281: LATAbits.LATA4 = !1;
 14303  000B26  9889               	bcf	3977,4,c	;volatile
 14304                           
 14305                           ;Test.c: 282: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 14306  000B28  0E1D               	movlw	29
 14307  000B2A  0100               	movlb	0	; () banked
 14308  000B2C  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 14309  000B2E  0E69               	movlw	105
 14310  000B30  0100               	movlb	0	; () banked
 14311  000B32  6FAB               	movwf	??_actuatorTest& (0+255),b
 14312  000B34  0EA5               	movlw	165
 14313  000B36                     u11897:
 14314  000B36  2EE8               	decfsz	wreg,f,c
 14315  000B38  D7FE               	bra	u11897
 14316  000B3A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14317  000B3C  D7FC               	bra	u11897
 14318  000B3E  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 14319  000B40  D7FA               	bra	u11897
 14320  000B42  0100               	movlb	0	; () banked
 14321  000B44  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 14322  000B46  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 14323  000B48  0100               	movlb	0	; () banked
 14324  000B4A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 14325  000B4C  D7DD               	goto	l1375
 14326  000B4E  0100               	movlb	0	; () banked
 14327  000B50  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 14328  000B52  E101               	bnz	u8170
 14329  000B54  D7D4               	goto	L13
 14330  000B56                     u8170:
 14331  000B56                     l1376:
 14332                           
 14333                           ; BSR set to: 0
 14334                           ;Test.c: 283: }
 14335                           ;Test.c: 284: LATAbits.LATA4 = !1;
 14336  000B56  9889               	bcf	3977,4,c	;volatile
 14337                           
 14338                           ; BSR set to: 0
 14339                           ;Test.c: 285: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14340  000B58  0E01               	movlw	1
 14341  000B5A  EC7D  F030         	call	_lcdInst
 14342  000B5E  0E68               	movlw	104
 14343  000B60  0100               	movlb	0	; () banked
 14344  000B62  6FAB               	movwf	??_actuatorTest& (0+255),b
 14345  000B64  0EE4               	movlw	228
 14346  000B66                     u11907:
 14347  000B66  2EE8               	decfsz	wreg,f,c
 14348  000B68  D7FE               	bra	u11907
 14349  000B6A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14350  000B6C  D7FC               	bra	u11907
 14351  000B6E  F000               	nop	
 14352  000B70  0E80               	movlw	128
 14353  000B72  EC7D  F030         	call	_lcdInst
 14354                           
 14355                           ;Test.c: 288: machine_state = Sorting_state;
 14356  000B76  0E01               	movlw	1
 14357  000B78  0100               	movlb	0	; () banked
 14358  000B7A  6FFC               	movwf	_machine_state& (0+255),b
 14359                           
 14360                           ; BSR set to: 0
 14361                           ;Test.c: 289: was_low_1 = 0;
 14362  000B7C  0E00               	movlw	0
 14363  000B7E  6E78               	movwf	_was_low_1+1,c	;volatile
 14364  000B80  0E00               	movlw	0
 14365  000B82  6E77               	movwf	_was_low_1,c	;volatile
 14366                           
 14367                           ; BSR set to: 0
 14368                           ;Test.c: 290: was_low_1 = 0;
 14369  000B84  0E00               	movlw	0
 14370  000B86  6E78               	movwf	_was_low_1+1,c	;volatile
 14371  000B88  0E00               	movlw	0
 14372  000B8A  6E77               	movwf	_was_low_1,c	;volatile
 14373                           
 14374                           ; BSR set to: 0
 14375                           ;Test.c: 297: printf("TST: PAN SERVO");
 14376  000B8C  0EBE               	movlw	low STR_97
 14377  000B8E  0100               	movlb	0	; () banked
 14378  000B90  6F8E               	movwf	printf@f& (0+255),b
 14379  000B92  0EFE               	movlw	high STR_97
 14380  000B94  0100               	movlb	0	; () banked
 14381  000B96  6F8F               	movwf	(printf@f+1)& (0+255),b
 14382  000B98  EC17  F00F         	call	_printf	;wreg free
 14383                           
 14384                           ;Test.c: 298: lcdInst(0b11000000);;
 14385  000B9C  0EC0               	movlw	192
 14386  000B9E  EC7D  F030         	call	_lcdInst
 14387                           
 14388                           ;Test.c: 299: printf("MIDDLE -- 2s    ");
 14389  000BA2  0EF0               	movlw	low STR_98
 14390  000BA4  0100               	movlb	0	; () banked
 14391  000BA6  6F8E               	movwf	printf@f& (0+255),b
 14392  000BA8  0EFB               	movlw	high STR_98
 14393  000BAA  0100               	movlb	0	; () banked
 14394  000BAC  6F8F               	movwf	(printf@f+1)& (0+255),b
 14395  000BAE  EC17  F00F         	call	_printf	;wreg free
 14396                           
 14397                           ;Test.c: 300: updateServoPosition(1200, 1);
 14398  000BB2  0E04               	movlw	4
 14399  000BB4  0100               	movlb	0	; () banked
 14400  000BB6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14401  000BB8  0EB0               	movlw	176
 14402  000BBA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14403  000BBC  0E00               	movlw	0
 14404  000BBE  0100               	movlb	0	; () banked
 14405  000BC0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14406  000BC2  0E01               	movlw	1
 14407  000BC4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14408  000BC6  ECF6  F029         	call	_updateServoPosition	;wreg free
 14409                           
 14410                           ;Test.c: 301: TMR1ON = 1;
 14411  000BCA  80CD               	bsf	4045,0,c	;volatile
 14412                           
 14413                           ;Test.c: 302: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14414  000BCC  0E00               	movlw	0
 14415  000BCE  0100               	movlb	0	; () banked
 14416  000BD0  6FAE               	movwf	actuatorTest@i_1762& (0+255),b
 14417  000BD2                     l8876:
 14418                           
 14419                           ; BSR set to: 0
 14420  000BD2  0E63               	movlw	99
 14421  000BD4  0100               	movlb	0	; () banked
 14422  000BD6  65AE               	cpfsgt	actuatorTest@i_1762& (0+255),b
 14423  000BD8  D001               	goto	l8880
 14424  000BDA  D00C               	goto	l8884
 14425  000BDC                     l8880:
 14426                           
 14427                           ; BSR set to: 0
 14428  000BDC  0E68               	movlw	104
 14429  000BDE  0100               	movlb	0	; () banked
 14430  000BE0  6FAB               	movwf	??_actuatorTest& (0+255),b
 14431  000BE2  0EE4               	movlw	228
 14432  000BE4                     u11917:
 14433  000BE4  2EE8               	decfsz	wreg,f,c
 14434  000BE6  D7FE               	bra	u11917
 14435  000BE8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14436  000BEA  D7FC               	bra	u11917
 14437  000BEC  F000               	nop	
 14438  000BEE  0100               	movlb	0	; () banked
 14439  000BF0  2BAE               	incf	actuatorTest@i_1762& (0+255),f,b
 14440  000BF2  D7EF               	goto	l8876
 14441  000BF4                     l8884:
 14442                           
 14443                           ; BSR set to: 0
 14444  000BF4  0E00               	movlw	0
 14445  000BF6  0100               	movlb	0	; () banked
 14446  000BF8  6FAF               	movwf	actuatorTest@i_1763& (0+255),b
 14447  000BFA                     l8886:
 14448                           
 14449                           ; BSR set to: 0
 14450  000BFA  0E63               	movlw	99
 14451  000BFC  0100               	movlb	0	; () banked
 14452  000BFE  65AF               	cpfsgt	actuatorTest@i_1763& (0+255),b
 14453  000C00  D001               	goto	l8890
 14454  000C02  D00C               	goto	l8894
 14455  000C04                     l8890:
 14456                           
 14457                           ; BSR set to: 0
 14458  000C04  0E68               	movlw	104
 14459  000C06  0100               	movlb	0	; () banked
 14460  000C08  6FAB               	movwf	??_actuatorTest& (0+255),b
 14461  000C0A  0EE4               	movlw	228
 14462  000C0C                     u11927:
 14463  000C0C  2EE8               	decfsz	wreg,f,c
 14464  000C0E  D7FE               	bra	u11927
 14465  000C10  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14466  000C12  D7FC               	bra	u11927
 14467  000C14  F000               	nop	
 14468  000C16  0100               	movlb	0	; () banked
 14469  000C18  2BAF               	incf	actuatorTest@i_1763& (0+255),f,b
 14470  000C1A  D7EF               	goto	l8886
 14471  000C1C                     l8894:
 14472                           
 14473                           ; BSR set to: 0
 14474                           ;Test.c: 304: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14475  000C1C  0E80               	movlw	128
 14476  000C1E  EC7D  F030         	call	_lcdInst
 14477  000C22  0EC0               	movlw	192
 14478  000C24  EC7D  F030         	call	_lcdInst
 14479                           
 14480                           ;Test.c: 305: printf("RIGHT -- 2s     ");
 14481  000C28  0EDF               	movlw	low STR_99
 14482  000C2A  0100               	movlb	0	; () banked
 14483  000C2C  6F8E               	movwf	printf@f& (0+255),b
 14484  000C2E  0EFB               	movlw	high STR_99
 14485  000C30  0100               	movlb	0	; () banked
 14486  000C32  6F8F               	movwf	(printf@f+1)& (0+255),b
 14487  000C34  EC17  F00F         	call	_printf	;wreg free
 14488                           
 14489                           ;Test.c: 306: updateServoPosition(400, 1);
 14490  000C38  0E01               	movlw	1
 14491  000C3A  0100               	movlb	0	; () banked
 14492  000C3C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14493  000C3E  0E90               	movlw	144
 14494  000C40  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14495  000C42  0E00               	movlw	0
 14496  000C44  0100               	movlb	0	; () banked
 14497  000C46  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14498  000C48  0E01               	movlw	1
 14499  000C4A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14500  000C4C  ECF6  F029         	call	_updateServoPosition	;wreg free
 14501                           
 14502                           ;Test.c: 307: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14503  000C50  0E00               	movlw	0
 14504  000C52  0100               	movlb	0	; () banked
 14505  000C54  6FB0               	movwf	actuatorTest@i_1765& (0+255),b
 14506  000C56                     l8902:
 14507                           
 14508                           ; BSR set to: 0
 14509  000C56  0E63               	movlw	99
 14510  000C58  0100               	movlb	0	; () banked
 14511  000C5A  65B0               	cpfsgt	actuatorTest@i_1765& (0+255),b
 14512  000C5C  D001               	goto	l8906
 14513  000C5E  D00C               	goto	l8910
 14514  000C60                     l8906:
 14515                           
 14516                           ; BSR set to: 0
 14517  000C60  0E68               	movlw	104
 14518  000C62  0100               	movlb	0	; () banked
 14519  000C64  6FAB               	movwf	??_actuatorTest& (0+255),b
 14520  000C66  0EE4               	movlw	228
 14521  000C68                     u11937:
 14522  000C68  2EE8               	decfsz	wreg,f,c
 14523  000C6A  D7FE               	bra	u11937
 14524  000C6C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14525  000C6E  D7FC               	bra	u11937
 14526  000C70  F000               	nop	
 14527  000C72  0100               	movlb	0	; () banked
 14528  000C74  2BB0               	incf	actuatorTest@i_1765& (0+255),f,b
 14529  000C76  D7EF               	goto	l8902
 14530  000C78                     l8910:
 14531                           
 14532                           ; BSR set to: 0
 14533  000C78  0E00               	movlw	0
 14534  000C7A  0100               	movlb	0	; () banked
 14535  000C7C  6FB1               	movwf	actuatorTest@i_1766& (0+255),b
 14536  000C7E                     l8912:
 14537                           
 14538                           ; BSR set to: 0
 14539  000C7E  0E63               	movlw	99
 14540  000C80  0100               	movlb	0	; () banked
 14541  000C82  65B1               	cpfsgt	actuatorTest@i_1766& (0+255),b
 14542  000C84  D001               	goto	l8916
 14543  000C86  D00C               	goto	l8920
 14544  000C88                     l8916:
 14545                           
 14546                           ; BSR set to: 0
 14547  000C88  0E68               	movlw	104
 14548  000C8A  0100               	movlb	0	; () banked
 14549  000C8C  6FAB               	movwf	??_actuatorTest& (0+255),b
 14550  000C8E  0EE4               	movlw	228
 14551  000C90                     u11947:
 14552  000C90  2EE8               	decfsz	wreg,f,c
 14553  000C92  D7FE               	bra	u11947
 14554  000C94  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14555  000C96  D7FC               	bra	u11947
 14556  000C98  F000               	nop	
 14557  000C9A  0100               	movlb	0	; () banked
 14558  000C9C  2BB1               	incf	actuatorTest@i_1766& (0+255),f,b
 14559  000C9E  D7EF               	goto	l8912
 14560  000CA0                     l8920:
 14561                           
 14562                           ; BSR set to: 0
 14563                           ;Test.c: 309: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14564  000CA0  0E80               	movlw	128
 14565  000CA2  EC7D  F030         	call	_lcdInst
 14566  000CA6  0EC0               	movlw	192
 14567  000CA8  EC7D  F030         	call	_lcdInst
 14568                           
 14569                           ;Test.c: 310: printf("LEFT -- 2s      ");
 14570  000CAC  0EBD               	movlw	low STR_100
 14571  000CAE  0100               	movlb	0	; () banked
 14572  000CB0  6F8E               	movwf	printf@f& (0+255),b
 14573  000CB2  0EFB               	movlw	high STR_100
 14574  000CB4  0100               	movlb	0	; () banked
 14575  000CB6  6F8F               	movwf	(printf@f+1)& (0+255),b
 14576  000CB8  EC17  F00F         	call	_printf	;wreg free
 14577                           
 14578                           ;Test.c: 311: updateServoPosition(2500, 1);
 14579  000CBC  0E09               	movlw	9
 14580  000CBE  0100               	movlb	0	; () banked
 14581  000CC0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14582  000CC2  0EC4               	movlw	196
 14583  000CC4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14584  000CC6  0E00               	movlw	0
 14585  000CC8  0100               	movlb	0	; () banked
 14586  000CCA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14587  000CCC  0E01               	movlw	1
 14588  000CCE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14589  000CD0  ECF6  F029         	call	_updateServoPosition	;wreg free
 14590                           
 14591                           ;Test.c: 312: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14592  000CD4  0E00               	movlw	0
 14593  000CD6  0100               	movlb	0	; () banked
 14594  000CD8  6FB2               	movwf	actuatorTest@i_1768& (0+255),b
 14595  000CDA                     l8928:
 14596                           
 14597                           ; BSR set to: 0
 14598  000CDA  0E63               	movlw	99
 14599  000CDC  0100               	movlb	0	; () banked
 14600  000CDE  65B2               	cpfsgt	actuatorTest@i_1768& (0+255),b
 14601  000CE0  D001               	goto	l8932
 14602  000CE2  D00C               	goto	l8936
 14603  000CE4                     l8932:
 14604                           
 14605                           ; BSR set to: 0
 14606  000CE4  0E68               	movlw	104
 14607  000CE6  0100               	movlb	0	; () banked
 14608  000CE8  6FAB               	movwf	??_actuatorTest& (0+255),b
 14609  000CEA  0EE4               	movlw	228
 14610  000CEC                     u11957:
 14611  000CEC  2EE8               	decfsz	wreg,f,c
 14612  000CEE  D7FE               	bra	u11957
 14613  000CF0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14614  000CF2  D7FC               	bra	u11957
 14615  000CF4  F000               	nop	
 14616  000CF6  0100               	movlb	0	; () banked
 14617  000CF8  2BB2               	incf	actuatorTest@i_1768& (0+255),f,b
 14618  000CFA  D7EF               	goto	l8928
 14619  000CFC                     l8936:
 14620                           
 14621                           ; BSR set to: 0
 14622  000CFC  0E00               	movlw	0
 14623  000CFE  0100               	movlb	0	; () banked
 14624  000D00  6FB3               	movwf	actuatorTest@i_1769& (0+255),b
 14625  000D02                     l8938:
 14626                           
 14627                           ; BSR set to: 0
 14628  000D02  0E63               	movlw	99
 14629  000D04  0100               	movlb	0	; () banked
 14630  000D06  65B3               	cpfsgt	actuatorTest@i_1769& (0+255),b
 14631  000D08  D001               	goto	l8942
 14632  000D0A  D00C               	goto	l8946
 14633  000D0C                     l8942:
 14634                           
 14635                           ; BSR set to: 0
 14636  000D0C  0E68               	movlw	104
 14637  000D0E  0100               	movlb	0	; () banked
 14638  000D10  6FAB               	movwf	??_actuatorTest& (0+255),b
 14639  000D12  0EE4               	movlw	228
 14640  000D14                     u11967:
 14641  000D14  2EE8               	decfsz	wreg,f,c
 14642  000D16  D7FE               	bra	u11967
 14643  000D18  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14644  000D1A  D7FC               	bra	u11967
 14645  000D1C  F000               	nop	
 14646  000D1E  0100               	movlb	0	; () banked
 14647  000D20  2BB3               	incf	actuatorTest@i_1769& (0+255),f,b
 14648  000D22  D7EF               	goto	l8938
 14649  000D24                     l8946:
 14650                           
 14651                           ; BSR set to: 0
 14652                           ;Test.c: 314: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14653  000D24  0E80               	movlw	128
 14654  000D26  EC7D  F030         	call	_lcdInst
 14655  000D2A  0EC0               	movlw	192
 14656  000D2C  EC7D  F030         	call	_lcdInst
 14657                           
 14658                           ;Test.c: 315: printf("MID-LEFT -- 2s  ");
 14659  000D30  0E45               	movlw	low STR_101
 14660  000D32  0100               	movlb	0	; () banked
 14661  000D34  6F8E               	movwf	printf@f& (0+255),b
 14662  000D36  0EFC               	movlw	high STR_101
 14663  000D38  0100               	movlb	0	; () banked
 14664  000D3A  6F8F               	movwf	(printf@f+1)& (0+255),b
 14665  000D3C  EC17  F00F         	call	_printf	;wreg free
 14666                           
 14667                           ;Test.c: 316: updateServoPosition(1550, 1);
 14668  000D40  0E06               	movlw	6
 14669  000D42  0100               	movlb	0	; () banked
 14670  000D44  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14671  000D46  0E0E               	movlw	14
 14672  000D48  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14673  000D4A  0E00               	movlw	0
 14674  000D4C  0100               	movlb	0	; () banked
 14675  000D4E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14676  000D50  0E01               	movlw	1
 14677  000D52  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14678  000D54  ECF6  F029         	call	_updateServoPosition	;wreg free
 14679                           
 14680                           ;Test.c: 317: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14681  000D58  0E00               	movlw	0
 14682  000D5A  0100               	movlb	0	; () banked
 14683  000D5C  6FB4               	movwf	actuatorTest@i_1771& (0+255),b
 14684  000D5E                     l8954:
 14685                           
 14686                           ; BSR set to: 0
 14687  000D5E  0E63               	movlw	99
 14688  000D60  0100               	movlb	0	; () banked
 14689  000D62  65B4               	cpfsgt	actuatorTest@i_1771& (0+255),b
 14690  000D64  D001               	goto	l8958
 14691  000D66  D00C               	goto	l8962
 14692  000D68                     l8958:
 14693                           
 14694                           ; BSR set to: 0
 14695  000D68  0E68               	movlw	104
 14696  000D6A  0100               	movlb	0	; () banked
 14697  000D6C  6FAB               	movwf	??_actuatorTest& (0+255),b
 14698  000D6E  0EE4               	movlw	228
 14699  000D70                     u11977:
 14700  000D70  2EE8               	decfsz	wreg,f,c
 14701  000D72  D7FE               	bra	u11977
 14702  000D74  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14703  000D76  D7FC               	bra	u11977
 14704  000D78  F000               	nop	
 14705  000D7A  0100               	movlb	0	; () banked
 14706  000D7C  2BB4               	incf	actuatorTest@i_1771& (0+255),f,b
 14707  000D7E  D7EF               	goto	l8954
 14708  000D80                     l8962:
 14709                           
 14710                           ; BSR set to: 0
 14711  000D80  0E00               	movlw	0
 14712  000D82  0100               	movlb	0	; () banked
 14713  000D84  6FB5               	movwf	actuatorTest@i_1772& (0+255),b
 14714  000D86                     l8964:
 14715                           
 14716                           ; BSR set to: 0
 14717  000D86  0E63               	movlw	99
 14718  000D88  0100               	movlb	0	; () banked
 14719  000D8A  65B5               	cpfsgt	actuatorTest@i_1772& (0+255),b
 14720  000D8C  D001               	goto	l8968
 14721  000D8E  D00C               	goto	l8972
 14722  000D90                     l8968:
 14723                           
 14724                           ; BSR set to: 0
 14725  000D90  0E68               	movlw	104
 14726  000D92  0100               	movlb	0	; () banked
 14727  000D94  6FAB               	movwf	??_actuatorTest& (0+255),b
 14728  000D96  0EE4               	movlw	228
 14729  000D98                     u11987:
 14730  000D98  2EE8               	decfsz	wreg,f,c
 14731  000D9A  D7FE               	bra	u11987
 14732  000D9C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14733  000D9E  D7FC               	bra	u11987
 14734  000DA0  F000               	nop	
 14735  000DA2  0100               	movlb	0	; () banked
 14736  000DA4  2BB5               	incf	actuatorTest@i_1772& (0+255),f,b
 14737  000DA6  D7EF               	goto	l8964
 14738  000DA8                     l8972:
 14739                           
 14740                           ; BSR set to: 0
 14741                           ;Test.c: 319: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14742  000DA8  0E80               	movlw	128
 14743  000DAA  EC7D  F030         	call	_lcdInst
 14744  000DAE  0EC0               	movlw	192
 14745  000DB0  EC7D  F030         	call	_lcdInst
 14746                           
 14747                           ;Test.c: 320: printf("MID-RIGHT -- 2s ");
 14748  000DB4  0E56               	movlw	low STR_102
 14749  000DB6  0100               	movlb	0	; () banked
 14750  000DB8  6F8E               	movwf	printf@f& (0+255),b
 14751  000DBA  0EFC               	movlw	high STR_102
 14752  000DBC  0100               	movlb	0	; () banked
 14753  000DBE  6F8F               	movwf	(printf@f+1)& (0+255),b
 14754  000DC0  EC17  F00F         	call	_printf	;wreg free
 14755                           
 14756                           ;Test.c: 321: updateServoPosition(850, 1);
 14757  000DC4  0E03               	movlw	3
 14758  000DC6  0100               	movlb	0	; () banked
 14759  000DC8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14760  000DCA  0E52               	movlw	82
 14761  000DCC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14762  000DCE  0E00               	movlw	0
 14763  000DD0  0100               	movlb	0	; () banked
 14764  000DD2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14765  000DD4  0E01               	movlw	1
 14766  000DD6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14767  000DD8  ECF6  F029         	call	_updateServoPosition	;wreg free
 14768                           
 14769                           ;Test.c: 322: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14770  000DDC  0E00               	movlw	0
 14771  000DDE  0100               	movlb	0	; () banked
 14772  000DE0  6FB6               	movwf	actuatorTest@i_1774& (0+255),b
 14773  000DE2                     l8980:
 14774                           
 14775                           ; BSR set to: 0
 14776  000DE2  0E63               	movlw	99
 14777  000DE4  0100               	movlb	0	; () banked
 14778  000DE6  65B6               	cpfsgt	actuatorTest@i_1774& (0+255),b
 14779  000DE8  D001               	goto	l8984
 14780  000DEA  D00C               	goto	l8988
 14781  000DEC                     l8984:
 14782                           
 14783                           ; BSR set to: 0
 14784  000DEC  0E68               	movlw	104
 14785  000DEE  0100               	movlb	0	; () banked
 14786  000DF0  6FAB               	movwf	??_actuatorTest& (0+255),b
 14787  000DF2  0EE4               	movlw	228
 14788  000DF4                     u11997:
 14789  000DF4  2EE8               	decfsz	wreg,f,c
 14790  000DF6  D7FE               	bra	u11997
 14791  000DF8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14792  000DFA  D7FC               	bra	u11997
 14793  000DFC  F000               	nop	
 14794  000DFE  0100               	movlb	0	; () banked
 14795  000E00  2BB6               	incf	actuatorTest@i_1774& (0+255),f,b
 14796  000E02  D7EF               	goto	l8980
 14797  000E04                     l8988:
 14798                           
 14799                           ; BSR set to: 0
 14800  000E04  0E00               	movlw	0
 14801  000E06  0100               	movlb	0	; () banked
 14802  000E08  6FB7               	movwf	actuatorTest@i_1775& (0+255),b
 14803  000E0A                     l8990:
 14804                           
 14805                           ; BSR set to: 0
 14806  000E0A  0E63               	movlw	99
 14807  000E0C  0100               	movlb	0	; () banked
 14808  000E0E  65B7               	cpfsgt	actuatorTest@i_1775& (0+255),b
 14809  000E10  D001               	goto	l8994
 14810  000E12  D00C               	goto	l8998
 14811  000E14                     l8994:
 14812                           
 14813                           ; BSR set to: 0
 14814  000E14  0E68               	movlw	104
 14815  000E16  0100               	movlb	0	; () banked
 14816  000E18  6FAB               	movwf	??_actuatorTest& (0+255),b
 14817  000E1A  0EE4               	movlw	228
 14818  000E1C                     u12007:
 14819  000E1C  2EE8               	decfsz	wreg,f,c
 14820  000E1E  D7FE               	bra	u12007
 14821  000E20  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14822  000E22  D7FC               	bra	u12007
 14823  000E24  F000               	nop	
 14824  000E26  0100               	movlb	0	; () banked
 14825  000E28  2BB7               	incf	actuatorTest@i_1775& (0+255),f,b
 14826  000E2A  D7EF               	goto	l8990
 14827  000E2C                     l8998:
 14828                           
 14829                           ; BSR set to: 0
 14830                           ;Test.c: 324: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14831  000E2C  0E80               	movlw	128
 14832  000E2E  EC7D  F030         	call	_lcdInst
 14833  000E32  0EC0               	movlw	192
 14834  000E34  EC7D  F030         	call	_lcdInst
 14835                           
 14836                           ;Test.c: 325: printf("MID -- 2s       ");
 14837  000E38  0E9B               	movlw	low STR_103
 14838  000E3A  0100               	movlb	0	; () banked
 14839  000E3C  6F8E               	movwf	printf@f& (0+255),b
 14840  000E3E  0EFB               	movlw	high STR_103
 14841  000E40  0100               	movlb	0	; () banked
 14842  000E42  6F8F               	movwf	(printf@f+1)& (0+255),b
 14843  000E44  EC17  F00F         	call	_printf	;wreg free
 14844                           
 14845                           ;Test.c: 326: updateServoPosition(1200, 1);
 14846  000E48  0E04               	movlw	4
 14847  000E4A  0100               	movlb	0	; () banked
 14848  000E4C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14849  000E4E  0EB0               	movlw	176
 14850  000E50  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14851  000E52  0E00               	movlw	0
 14852  000E54  0100               	movlb	0	; () banked
 14853  000E56  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14854  000E58  0E01               	movlw	1
 14855  000E5A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14856  000E5C  ECF6  F029         	call	_updateServoPosition	;wreg free
 14857                           
 14858                           ;Test.c: 327: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14859  000E60  0E00               	movlw	0
 14860  000E62  0100               	movlb	0	; () banked
 14861  000E64  6FB8               	movwf	actuatorTest@i_1777& (0+255),b
 14862  000E66                     l9006:
 14863                           
 14864                           ; BSR set to: 0
 14865  000E66  0E63               	movlw	99
 14866  000E68  0100               	movlb	0	; () banked
 14867  000E6A  65B8               	cpfsgt	actuatorTest@i_1777& (0+255),b
 14868  000E6C  D001               	goto	l9010
 14869  000E6E  D00C               	goto	l9014
 14870  000E70                     l9010:
 14871                           
 14872                           ; BSR set to: 0
 14873  000E70  0E68               	movlw	104
 14874  000E72  0100               	movlb	0	; () banked
 14875  000E74  6FAB               	movwf	??_actuatorTest& (0+255),b
 14876  000E76  0EE4               	movlw	228
 14877  000E78                     u12017:
 14878  000E78  2EE8               	decfsz	wreg,f,c
 14879  000E7A  D7FE               	bra	u12017
 14880  000E7C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14881  000E7E  D7FC               	bra	u12017
 14882  000E80  F000               	nop	
 14883  000E82  0100               	movlb	0	; () banked
 14884  000E84  2BB8               	incf	actuatorTest@i_1777& (0+255),f,b
 14885  000E86  D7EF               	goto	l9006
 14886  000E88                     l9014:
 14887                           
 14888                           ; BSR set to: 0
 14889  000E88  0E00               	movlw	0
 14890  000E8A  0100               	movlb	0	; () banked
 14891  000E8C  6FB9               	movwf	actuatorTest@i_1778& (0+255),b
 14892  000E8E                     l9016:
 14893                           
 14894                           ; BSR set to: 0
 14895  000E8E  0E63               	movlw	99
 14896  000E90  0100               	movlb	0	; () banked
 14897  000E92  65B9               	cpfsgt	actuatorTest@i_1778& (0+255),b
 14898  000E94  D001               	goto	l9020
 14899  000E96  D00C               	goto	l1400
 14900  000E98                     l9020:
 14901                           
 14902                           ; BSR set to: 0
 14903  000E98  0E68               	movlw	104
 14904  000E9A  0100               	movlb	0	; () banked
 14905  000E9C  6FAB               	movwf	??_actuatorTest& (0+255),b
 14906  000E9E  0EE4               	movlw	228
 14907  000EA0                     u12027:
 14908  000EA0  2EE8               	decfsz	wreg,f,c
 14909  000EA2  D7FE               	bra	u12027
 14910  000EA4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14911  000EA6  D7FC               	bra	u12027
 14912  000EA8  F000               	nop	
 14913  000EAA  0100               	movlb	0	; () banked
 14914  000EAC  2BB9               	incf	actuatorTest@i_1778& (0+255),f,b
 14915  000EAE  D7EF               	goto	l9016
 14916  000EB0                     l1400:
 14917                           
 14918                           ; BSR set to: 0
 14919                           ;Test.c: 328: TMR1ON = 0;
 14920  000EB0  90CD               	bcf	4045,0,c	;volatile
 14921                           
 14922                           ; BSR set to: 0
 14923                           ;Test.c: 335: printf("TST: TILT SERVO");
 14924  000EB2  0E53               	movlw	low STR_104
 14925  000EB4  0100               	movlb	0	; () banked
 14926  000EB6  6F8E               	movwf	printf@f& (0+255),b
 14927  000EB8  0EFE               	movlw	high STR_104
 14928  000EBA  0100               	movlb	0	; () banked
 14929  000EBC  6F8F               	movwf	(printf@f+1)& (0+255),b
 14930  000EBE  EC17  F00F         	call	_printf	;wreg free
 14931                           
 14932                           ;Test.c: 336: lcdInst(0b11000000);;
 14933  000EC2  0EC0               	movlw	192
 14934  000EC4  EC7D  F030         	call	_lcdInst
 14935                           
 14936                           ;Test.c: 337: printf("LEVEL -- 2s     ");
 14937  000EC8  0ECE               	movlw	low STR_105
 14938  000ECA  0100               	movlb	0	; () banked
 14939  000ECC  6F8E               	movwf	printf@f& (0+255),b
 14940  000ECE  0EFB               	movlw	high STR_105
 14941  000ED0  0100               	movlb	0	; () banked
 14942  000ED2  6F8F               	movwf	(printf@f+1)& (0+255),b
 14943  000ED4  EC17  F00F         	call	_printf	;wreg free
 14944                           
 14945                           ;Test.c: 338: updateServoPosition(1050, 3);
 14946  000ED8  0E04               	movlw	4
 14947  000EDA  0100               	movlb	0	; () banked
 14948  000EDC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14949  000EDE  0E1A               	movlw	26
 14950  000EE0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14951  000EE2  0E00               	movlw	0
 14952  000EE4  0100               	movlb	0	; () banked
 14953  000EE6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14954  000EE8  0E03               	movlw	3
 14955  000EEA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14956  000EEC  ECF6  F029         	call	_updateServoPosition	;wreg free
 14957                           
 14958                           ;Test.c: 339: TMR3ON = 1;
 14959  000EF0  80B1               	bsf	4017,0,c	;volatile
 14960                           
 14961                           ;Test.c: 340: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14962  000EF2  0E00               	movlw	0
 14963  000EF4  0100               	movlb	0	; () banked
 14964  000EF6  6FBA               	movwf	actuatorTest@i_1781& (0+255),b
 14965  000EF8                     l9034:
 14966                           
 14967                           ; BSR set to: 0
 14968  000EF8  0E63               	movlw	99
 14969  000EFA  0100               	movlb	0	; () banked
 14970  000EFC  65BA               	cpfsgt	actuatorTest@i_1781& (0+255),b
 14971  000EFE  D001               	goto	l9038
 14972  000F00  D00C               	goto	l9042
 14973  000F02                     l9038:
 14974                           
 14975                           ; BSR set to: 0
 14976  000F02  0E68               	movlw	104
 14977  000F04  0100               	movlb	0	; () banked
 14978  000F06  6FAB               	movwf	??_actuatorTest& (0+255),b
 14979  000F08  0EE4               	movlw	228
 14980  000F0A                     u12037:
 14981  000F0A  2EE8               	decfsz	wreg,f,c
 14982  000F0C  D7FE               	bra	u12037
 14983  000F0E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14984  000F10  D7FC               	bra	u12037
 14985  000F12  F000               	nop	
 14986  000F14  0100               	movlb	0	; () banked
 14987  000F16  2BBA               	incf	actuatorTest@i_1781& (0+255),f,b
 14988  000F18  D7EF               	goto	l9034
 14989  000F1A                     l9042:
 14990                           
 14991                           ; BSR set to: 0
 14992  000F1A  0E00               	movlw	0
 14993  000F1C  0100               	movlb	0	; () banked
 14994  000F1E  6FBB               	movwf	actuatorTest@i_1782& (0+255),b
 14995  000F20                     l9044:
 14996                           
 14997                           ; BSR set to: 0
 14998  000F20  0E63               	movlw	99
 14999  000F22  0100               	movlb	0	; () banked
 15000  000F24  65BB               	cpfsgt	actuatorTest@i_1782& (0+255),b
 15001  000F26  D001               	goto	l9048
 15002  000F28  D00C               	goto	l9052
 15003  000F2A                     l9048:
 15004                           
 15005                           ; BSR set to: 0
 15006  000F2A  0E68               	movlw	104
 15007  000F2C  0100               	movlb	0	; () banked
 15008  000F2E  6FAB               	movwf	??_actuatorTest& (0+255),b
 15009  000F30  0EE4               	movlw	228
 15010  000F32                     u12047:
 15011  000F32  2EE8               	decfsz	wreg,f,c
 15012  000F34  D7FE               	bra	u12047
 15013  000F36  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 15014  000F38  D7FC               	bra	u12047
 15015  000F3A  F000               	nop	
 15016  000F3C  0100               	movlb	0	; () banked
 15017  000F3E  2BBB               	incf	actuatorTest@i_1782& (0+255),f,b
 15018  000F40  D7EF               	goto	l9044
 15019  000F42                     l9052:
 15020                           
 15021                           ; BSR set to: 0
 15022                           ;Test.c: 342: lcdInst(0b10000000);;lcdInst(0b11000000);;
 15023  000F42  0E80               	movlw	128
 15024  000F44  EC7D  F030         	call	_lcdInst
 15025  000F48  0EC0               	movlw	192
 15026  000F4A  EC7D  F030         	call	_lcdInst
 15027                           
 15028                           ;Test.c: 343: printf("DROP -- 2s      ");
 15029  000F4E  0EAC               	movlw	low STR_106
 15030  000F50  0100               	movlb	0	; () banked
 15031  000F52  6F8E               	movwf	printf@f& (0+255),b
 15032  000F54  0EFB               	movlw	high STR_106
 15033  000F56  0100               	movlb	0	; () banked
 15034  000F58  6F8F               	movwf	(printf@f+1)& (0+255),b
 15035  000F5A  EC17  F00F         	call	_printf	;wreg free
 15036                           
 15037                           ;Test.c: 344: updateServoPosition(1260, 3);
 15038  000F5E  0E04               	movlw	4
 15039  000F60  0100               	movlb	0	; () banked
 15040  000F62  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15041  000F64  0EEC               	movlw	236
 15042  000F66  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15043  000F68  0E00               	movlw	0
 15044  000F6A  0100               	movlb	0	; () banked
 15045  000F6C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15046  000F6E  0E03               	movlw	3
 15047  000F70  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15048  000F72  ECF6  F029         	call	_updateServoPosition	;wreg free
 15049                           
 15050                           ;Test.c: 345: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 15051  000F76  0E00               	movlw	0
 15052  000F78  0100               	movlb	0	; () banked
 15053  000F7A  6FBC               	movwf	actuatorTest@i_1784& (0+255),b
 15054  000F7C                     l9060:
 15055                           
 15056                           ; BSR set to: 0
 15057  000F7C  0E63               	movlw	99
 15058  000F7E  0100               	movlb	0	; () banked
 15059  000F80  65BC               	cpfsgt	actuatorTest@i_1784& (0+255),b
 15060  000F82  D001               	goto	l9064
 15061  000F84  D00C               	goto	l9068
 15062  000F86                     l9064:
 15063                           
 15064                           ; BSR set to: 0
 15065  000F86  0E68               	movlw	104
 15066  000F88  0100               	movlb	0	; () banked
 15067  000F8A  6FAB               	movwf	??_actuatorTest& (0+255),b
 15068  000F8C  0EE4               	movlw	228
 15069  000F8E                     u12057:
 15070  000F8E  2EE8               	decfsz	wreg,f,c
 15071  000F90  D7FE               	bra	u12057
 15072  000F92  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 15073  000F94  D7FC               	bra	u12057
 15074  000F96  F000               	nop	
 15075  000F98  0100               	movlb	0	; () banked
 15076  000F9A  2BBC               	incf	actuatorTest@i_1784& (0+255),f,b
 15077  000F9C  D7EF               	goto	l9060
 15078  000F9E                     l9068:
 15079                           
 15080                           ; BSR set to: 0
 15081  000F9E  0E00               	movlw	0
 15082  000FA0  0100               	movlb	0	; () banked
 15083  000FA2  6FBD               	movwf	actuatorTest@i_1785& (0+255),b
 15084  000FA4                     l9070:
 15085                           
 15086                           ; BSR set to: 0
 15087  000FA4  0E63               	movlw	99
 15088  000FA6  0100               	movlb	0	; () banked
 15089  000FA8  65BD               	cpfsgt	actuatorTest@i_1785& (0+255),b
 15090  000FAA  D001               	goto	l9074
 15091  000FAC  D00C               	goto	l9078
 15092  000FAE                     l9074:
 15093                           
 15094                           ; BSR set to: 0
 15095  000FAE  0E68               	movlw	104
 15096  000FB0  0100               	movlb	0	; () banked
 15097  000FB2  6FAB               	movwf	??_actuatorTest& (0+255),b
 15098  000FB4  0EE4               	movlw	228
 15099  000FB6                     u12067:
 15100  000FB6  2EE8               	decfsz	wreg,f,c
 15101  000FB8  D7FE               	bra	u12067
 15102  000FBA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 15103  000FBC  D7FC               	bra	u12067
 15104  000FBE  F000               	nop	
 15105  000FC0  0100               	movlb	0	; () banked
 15106  000FC2  2BBD               	incf	actuatorTest@i_1785& (0+255),f,b
 15107  000FC4  D7EF               	goto	l9070
 15108  000FC6                     l9078:
 15109                           
 15110                           ; BSR set to: 0
 15111                           ;Test.c: 347: lcdInst(0b10000000);;lcdInst(0b11000000);;
 15112  000FC6  0E80               	movlw	128
 15113  000FC8  EC7D  F030         	call	_lcdInst
 15114  000FCC  0EC0               	movlw	192
 15115  000FCE  EC7D  F030         	call	_lcdInst
 15116                           
 15117                           ;Test.c: 348: printf("LEVEL -- 2s     ");
 15118  000FD2  0ECE               	movlw	low STR_105
 15119  000FD4  0100               	movlb	0	; () banked
 15120  000FD6  6F8E               	movwf	printf@f& (0+255),b
 15121  000FD8  0EFB               	movlw	high STR_105
 15122  000FDA  0100               	movlb	0	; () banked
 15123  000FDC  6F8F               	movwf	(printf@f+1)& (0+255),b
 15124  000FDE  EC17  F00F         	call	_printf	;wreg free
 15125                           
 15126                           ;Test.c: 349: updateServoPosition(1050, 3);
 15127  000FE2  0E04               	movlw	4
 15128  000FE4  0100               	movlb	0	; () banked
 15129  000FE6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15130  000FE8  0E1A               	movlw	26
 15131  000FEA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15132  000FEC  0E00               	movlw	0
 15133  000FEE  0100               	movlb	0	; () banked
 15134  000FF0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15135  000FF2  0E03               	movlw	3
 15136  000FF4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15137  000FF6  ECF6  F029         	call	_updateServoPosition	;wreg free
 15138                           
 15139                           ;Test.c: 350: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 15140  000FFA  0E00               	movlw	0
 15141  000FFC  0100               	movlb	0	; () banked
 15142  000FFE  6FBE               	movwf	actuatorTest@i_1787& (0+255),b
 15143  001000                     l9086:
 15144                           
 15145                           ; BSR set to: 0
 15146  001000  0E63               	movlw	99
 15147  001002  0100               	movlb	0	; () banked
 15148  001004  65BE               	cpfsgt	actuatorTest@i_1787& (0+255),b
 15149  001006  D001               	goto	l9090
 15150  001008  D00C               	goto	l9094
 15151  00100A                     l9090:
 15152                           
 15153                           ; BSR set to: 0
 15154  00100A  0E68               	movlw	104
 15155  00100C  0100               	movlb	0	; () banked
 15156  00100E  6FAB               	movwf	??_actuatorTest& (0+255),b
 15157  001010  0EE4               	movlw	228
 15158  001012                     u12077:
 15159  001012  2EE8               	decfsz	wreg,f,c
 15160  001014  D7FE               	bra	u12077
 15161  001016  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 15162  001018  D7FC               	bra	u12077
 15163  00101A  F000               	nop	
 15164  00101C  0100               	movlb	0	; () banked
 15165  00101E  2BBE               	incf	actuatorTest@i_1787& (0+255),f,b
 15166  001020  D7EF               	goto	l9086
 15167  001022                     l9094:
 15168                           
 15169                           ; BSR set to: 0
 15170  001022  0E00               	movlw	0
 15171  001024  0100               	movlb	0	; () banked
 15172  001026  6FBF               	movwf	actuatorTest@i_1788& (0+255),b
 15173  001028                     l9096:
 15174                           
 15175                           ; BSR set to: 0
 15176  001028  0E63               	movlw	99
 15177  00102A  0100               	movlb	0	; () banked
 15178  00102C  65BF               	cpfsgt	actuatorTest@i_1788& (0+255),b
 15179  00102E  D001               	goto	l9100
 15180  001030  D00C               	goto	l1412
 15181  001032                     l9100:
 15182                           
 15183                           ; BSR set to: 0
 15184  001032  0E68               	movlw	104
 15185  001034  0100               	movlb	0	; () banked
 15186  001036  6FAB               	movwf	??_actuatorTest& (0+255),b
 15187  001038  0EE4               	movlw	228
 15188  00103A                     u12087:
 15189  00103A  2EE8               	decfsz	wreg,f,c
 15190  00103C  D7FE               	bra	u12087
 15191  00103E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 15192  001040  D7FC               	bra	u12087
 15193  001042  F000               	nop	
 15194  001044  0100               	movlb	0	; () banked
 15195  001046  2BBF               	incf	actuatorTest@i_1788& (0+255),f,b
 15196  001048  D7EF               	goto	l9096
 15197  00104A                     l1412:
 15198                           
 15199                           ; BSR set to: 0
 15200                           ;Test.c: 351: TMR3ON = 0;
 15201  00104A  90B1               	bcf	4017,0,c	;volatile
 15202                           
 15203                           ;Test.c: 352: (INTCONbits.GIE = 0);
 15204  00104C  9EF2               	bcf	intcon,7,c	;volatile
 15205                           
 15206                           ; BSR set to: 0
 15207                           ;Test.c: 357: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15208  00104E  0E01               	movlw	1
 15209  001050  EC7D  F030         	call	_lcdInst
 15210  001054  0E68               	movlw	104
 15211  001056  0100               	movlb	0	; () banked
 15212  001058  6FAB               	movwf	??_actuatorTest& (0+255),b
 15213  00105A  0EE4               	movlw	228
 15214  00105C                     u12097:
 15215  00105C  2EE8               	decfsz	wreg,f,c
 15216  00105E  D7FE               	bra	u12097
 15217  001060  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 15218  001062  D7FC               	bra	u12097
 15219  001064  F000               	nop	
 15220  001066  0E80               	movlw	128
 15221  001068  EC7D  F030         	call	_lcdInst
 15222                           
 15223                           ;Test.c: 358: printf("TST: CAM SERVO");
 15224  00106C  0EAF               	movlw	low STR_108
 15225  00106E  0100               	movlb	0	; () banked
 15226  001070  6F8E               	movwf	printf@f& (0+255),b
 15227  001072  0EFE               	movlw	high STR_108
 15228  001074  0100               	movlb	0	; () banked
 15229  001076  6F8F               	movwf	(printf@f+1)& (0+255),b
 15230  001078  EC17  F00F         	call	_printf	;wreg free
 15231                           
 15232                           ;Test.c: 359: lcdInst(0b11000000);;
 15233  00107C  0EC0               	movlw	192
 15234  00107E  EC7D  F030         	call	_lcdInst
 15235                           
 15236                           ;Test.c: 360: printf("CAM UP  |RC0=1");
 15237  001082  0E91               	movlw	low STR_109
 15238  001084  0100               	movlb	0	; () banked
 15239  001086  6F8E               	movwf	printf@f& (0+255),b
 15240  001088  0EFE               	movlw	high STR_109
 15241  00108A  0100               	movlb	0	; () banked
 15242  00108C  6F8F               	movwf	(printf@f+1)& (0+255),b
 15243  00108E  EC17  F00F         	call	_printf	;wreg free
 15244                           
 15245                           ;Test.c: 361: LATCbits.LATC0 = 1;
 15246  001092  808B               	bsf	3979,0,c	;volatile
 15247                           
 15248                           ;Test.c: 362: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 15249  001094  0E00               	movlw	0
 15250  001096  0100               	movlb	0	; () banked
 15251  001098  6FC0               	movwf	actuatorTest@i_1791& (0+255),b
 15252  00109A                     l9120:
 15253                           
 15254                           ; BSR set to: 0
 15255  00109A  0E63               	movlw	99
 15256  00109C  0100               	movlb	0	; () banked
 15257  00109E  65C0               	cpfsgt	actuatorTest@i_1791& (0+255),b
 15258  0010A0  D001               	goto	l9124
 15259  0010A2  D00C               	goto	l9128
 15260  0010A4                     l9124:
 15261                           
 15262                           ; BSR set to: 0
 15263  0010A4  0E68               	movlw	104
 15264  0010A6  0100               	movlb	0	; () banked
 15265  0010A8  6FAB               	movwf	??_actuatorTest& (0+255),b
 15266  0010AA  0EE4               	movlw	228
 15267  0010AC                     u12107:
 15268  0010AC  2EE8               	decfsz	wreg,f,c
 15269  0010AE  D7FE               	bra	u12107
 15270  0010B0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 15271  0010B2  D7FC               	bra	u12107
 15272  0010B4  F000               	nop	
 15273  0010B6  0100               	movlb	0	; () banked
 15274  0010B8  2BC0               	incf	actuatorTest@i_1791& (0+255),f,b
 15275  0010BA  D7EF               	goto	l9120
 15276  0010BC                     l9128:
 15277                           
 15278                           ; BSR set to: 0
 15279  0010BC  0E00               	movlw	0
 15280  0010BE  0100               	movlb	0	; () banked
 15281  0010C0  6FC1               	movwf	actuatorTest@i_1792& (0+255),b
 15282  0010C2                     l9130:
 15283                           
 15284                           ; BSR set to: 0
 15285  0010C2  0E63               	movlw	99
 15286  0010C4  0100               	movlb	0	; () banked
 15287  0010C6  65C1               	cpfsgt	actuatorTest@i_1792& (0+255),b
 15288  0010C8  D001               	goto	l9134
 15289  0010CA  D00C               	goto	l9138
 15290  0010CC                     l9134:
 15291                           
 15292                           ; BSR set to: 0
 15293  0010CC  0E68               	movlw	104
 15294  0010CE  0100               	movlb	0	; () banked
 15295  0010D0  6FAB               	movwf	??_actuatorTest& (0+255),b
 15296  0010D2  0EE4               	movlw	228
 15297  0010D4                     u12117:
 15298  0010D4  2EE8               	decfsz	wreg,f,c
 15299  0010D6  D7FE               	bra	u12117
 15300  0010D8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 15301  0010DA  D7FC               	bra	u12117
 15302  0010DC  F000               	nop	
 15303  0010DE  0100               	movlb	0	; () banked
 15304  0010E0  2BC1               	incf	actuatorTest@i_1792& (0+255),f,b
 15305  0010E2  D7EF               	goto	l9130
 15306  0010E4                     l9138:
 15307                           
 15308                           ; BSR set to: 0
 15309                           ;Test.c: 363: lcdInst(0b10000000);;lcdInst(0b11000000);;
 15310  0010E4  0E80               	movlw	128
 15311  0010E6  EC7D  F030         	call	_lcdInst
 15312  0010EA  0EC0               	movlw	192
 15313  0010EC  EC7D  F030         	call	_lcdInst
 15314                           
 15315                           ;Test.c: 364: printf("CAM DWN |RC0=0");
 15316  0010F0  0E82               	movlw	low STR_110
 15317  0010F2  0100               	movlb	0	; () banked
 15318  0010F4  6F8E               	movwf	printf@f& (0+255),b
 15319  0010F6  0EFE               	movlw	high STR_110
 15320  0010F8  0100               	movlb	0	; () banked
 15321  0010FA  6F8F               	movwf	(printf@f+1)& (0+255),b
 15322  0010FC  EC17  F00F         	call	_printf	;wreg free
 15323                           
 15324                           ;Test.c: 367: for(i=0;i<10000;i++)
 15325  001100  0E00               	movlw	0
 15326  001102  0100               	movlb	0	; () banked
 15327  001104  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 15328  001106  0E00               	movlw	0
 15329  001108  6FC4               	movwf	actuatorTest@i& (0+255),b
 15330  00110A                     l9144:
 15331                           
 15332                           ; BSR set to: 0
 15333  00110A  0100               	movlb	0	; () banked
 15334  00110C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 15335  00110E  D008               	goto	l1417
 15336  001110  0E10               	movlw	16
 15337  001112  0100               	movlb	0	; () banked
 15338  001114  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 15339  001116  0E27               	movlw	39
 15340  001118  0100               	movlb	0	; () banked
 15341  00111A  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 15342  00111C  B0D8               	btfsc	status,0,c
 15343  00111E  D00D               	goto	l9154
 15344  001120                     l1417:
 15345                           
 15346                           ; BSR set to: 0
 15347                           ;Test.c: 368: {
 15348                           ;Test.c: 369: LATCbits.LATC0 = 1;
 15349  001120  808B               	bsf	3979,0,c	;volatile
 15350                           
 15351                           ; BSR set to: 0
 15352                           ;Test.c: 370: _delay((unsigned long)((10)*(32000000/4000000.0)));
 15353  001122  0E1A               	movlw	26
 15354  001124                     u12127:
 15355  001124  2EE8               	decfsz	wreg,f,c
 15356  001126  D7FE               	bra	u12127
 15357  001128  D000               	nop2	
 15358                           
 15359                           ;Test.c: 371: LATCbits.LATC0 = 0;
 15360  00112A  908B               	bcf	3979,0,c	;volatile
 15361                           
 15362                           ;Test.c: 372: _delay((unsigned long)((90)*(32000000/4000000.0)));
 15363  00112C  0EF0               	movlw	240
 15364  00112E                     u12137:
 15365  00112E  2EE8               	decfsz	wreg,f,c
 15366  001130  D7FE               	bra	u12137
 15367  001132  0100               	movlb	0	; () banked
 15368  001134  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 15369  001136  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 15370  001138  D7E8               	goto	l9144
 15371  00113A                     l9154:
 15372                           
 15373                           ; BSR set to: 0
 15374                           ;Test.c: 373: }
 15375                           ;Test.c: 375: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 15376  00113A  0E00               	movlw	0
 15377  00113C  0100               	movlb	0	; () banked
 15378  00113E  6FC2               	movwf	actuatorTest@i_1794& (0+255),b
 15379  001140                     l9156:
 15380                           
 15381                           ; BSR set to: 0
 15382  001140  0E63               	movlw	99
 15383  001142  0100               	movlb	0	; () banked
 15384  001144  65C2               	cpfsgt	actuatorTest@i_1794& (0+255),b
 15385  001146  D001               	goto	l9160
 15386  001148  D00C               	goto	l9164
 15387  00114A                     l9160:
 15388                           
 15389                           ; BSR set to: 0
 15390  00114A  0E68               	movlw	104
 15391  00114C  0100               	movlb	0	; () banked
 15392  00114E  6FAB               	movwf	??_actuatorTest& (0+255),b
 15393  001150  0EE4               	movlw	228
 15394  001152                     u12147:
 15395  001152  2EE8               	decfsz	wreg,f,c
 15396  001154  D7FE               	bra	u12147
 15397  001156  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 15398  001158  D7FC               	bra	u12147
 15399  00115A  F000               	nop	
 15400  00115C  0100               	movlb	0	; () banked
 15401  00115E  2BC2               	incf	actuatorTest@i_1794& (0+255),f,b
 15402  001160  D7EF               	goto	l9156
 15403  001162                     l9164:
 15404                           
 15405                           ; BSR set to: 0
 15406  001162  0E00               	movlw	0
 15407  001164  0100               	movlb	0	; () banked
 15408  001166  6FC3               	movwf	actuatorTest@i_1795& (0+255),b
 15409  001168                     l9166:
 15410                           
 15411                           ; BSR set to: 0
 15412  001168  0E63               	movlw	99
 15413  00116A  0100               	movlb	0	; () banked
 15414  00116C  65C3               	cpfsgt	actuatorTest@i_1795& (0+255),b
 15415  00116E  D001               	goto	l9170
 15416  001170  D00C               	goto	l9174
 15417  001172                     l9170:
 15418                           
 15419                           ; BSR set to: 0
 15420  001172  0E68               	movlw	104
 15421  001174  0100               	movlb	0	; () banked
 15422  001176  6FAB               	movwf	??_actuatorTest& (0+255),b
 15423  001178  0EE4               	movlw	228
 15424  00117A                     u12157:
 15425  00117A  2EE8               	decfsz	wreg,f,c
 15426  00117C  D7FE               	bra	u12157
 15427  00117E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 15428  001180  D7FC               	bra	u12157
 15429  001182  F000               	nop	
 15430  001184  0100               	movlb	0	; () banked
 15431  001186  2BC3               	incf	actuatorTest@i_1795& (0+255),f,b
 15432  001188  D7EF               	goto	l9166
 15433  00118A                     l9174:
 15434                           
 15435                           ; BSR set to: 0
 15436                           ;Test.c: 376: machine_state = Testing_state;
 15437  00118A  0E03               	movlw	3
 15438  00118C  0100               	movlb	0	; () banked
 15439  00118E  6FFC               	movwf	_machine_state& (0+255),b
 15440                           
 15441                           ; BSR set to: 0
 15442  001190  0012               	return		;funcret
 15443  001192                     __end_of_actuatorTest:
 15444                           	opt stack 0
 15445                           tblptru	equ	0xFF8
 15446                           tblptrh	equ	0xFF7
 15447                           tblptrl	equ	0xFF6
 15448                           tablat	equ	0xFF5
 15449                           prodh	equ	0xFF4
 15450                           prodl	equ	0xFF3
 15451                           intcon	equ	0xFF2
 15452                           intcon2	equ	0xFF1
 15453                           intcon3	equ	0xFF0
 15454                           postinc0	equ	0xFEE
 15455                           wreg	equ	0xFE8
 15456                           postdec1	equ	0xFE5
 15457                           fsr1l	equ	0xFE1
 15458                           indf2	equ	0xFDF
 15459                           postinc2	equ	0xFDE
 15460                           postdec2	equ	0xFDD
 15461                           fsr2h	equ	0xFDA
 15462                           fsr2l	equ	0xFD9
 15463                           status	equ	0xFD8
 15464                           
 15465 ;; *************** function _SpeedTest *****************
 15466 ;; Defined at:
 15467 ;;		line 565 in file "Test.c"
 15468 ;; Parameters:    Size  Location     Type
 15469 ;;		None
 15470 ;; Auto vars:     Size  Location     Type
 15471 ;;		None
 15472 ;; Return value:  Size  Location     Type
 15473 ;;                  1    wreg      void 
 15474 ;; Registers used:
 15475 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15476 ;; Tracked objects:
 15477 ;;		On entry : 0/0
 15478 ;;		On exit  : 0/0
 15479 ;;		Unchanged: 0/0
 15480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15483 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15484 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15485 ;;Total ram usage:        1 bytes
 15486 ;; Hardware stack levels used:    1
 15487 ;; Hardware stack levels required when called:   10
 15488 ;; This function calls:
 15489 ;;		_lcdInst
 15490 ;;		_printf
 15491 ;; This function is called by:
 15492 ;;		_Test
 15493 ;; This function uses a non-reentrant model
 15494 ;;
 15495                           
 15496                           	psect	text46
 15497  0052E6                     __ptext46:
 15498                           	opt stack 0
 15499  0052E6                     _SpeedTest:
 15500                           	opt stack 19
 15501                           
 15502                           ;Test.c: 567: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15503                           
 15504                           ; BSR set to: 0
 15505                           ;incstack = 0
 15506  0052E6  0E01               	movlw	1
 15507  0052E8  EC7D  F030         	call	_lcdInst
 15508  0052EC  0E68               	movlw	104
 15509  0052EE  0100               	movlb	0	; () banked
 15510  0052F0  6FAB               	movwf	??_SpeedTest& (0+255),b
 15511  0052F2  0EE4               	movlw	228
 15512  0052F4                     u12167:
 15513  0052F4  2EE8               	decfsz	wreg,f,c
 15514  0052F6  D7FE               	bra	u12167
 15515  0052F8  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 15516  0052FA  D7FC               	bra	u12167
 15517  0052FC  F000               	nop	
 15518  0052FE  0E80               	movlw	128
 15519  005300  EC7D  F030         	call	_lcdInst
 15520                           
 15521                           ;Test.c: 568: printf("S: D WILL RETURN ");
 15522  005304  0E41               	movlw	low STR_119
 15523  005306  0100               	movlb	0	; () banked
 15524  005308  6F8E               	movwf	printf@f& (0+255),b
 15525  00530A  0EFB               	movlw	high STR_119
 15526  00530C  0100               	movlb	0	; () banked
 15527  00530E  6F8F               	movwf	(printf@f+1)& (0+255),b
 15528  005310  EC17  F00F         	call	_printf	;wreg free
 15529                           
 15530                           ;Test.c: 569: lcdInst(0b11000000);;
 15531  005314  0EC0               	movlw	192
 15532  005316  EC7D  F030         	call	_lcdInst
 15533                           
 15534                           ;Test.c: 570: printf("OTHER SETS RA5   ");
 15535  00531A  0E0B               	movlw	low STR_120
 15536  00531C  0100               	movlb	0	; () banked
 15537  00531E  6F8E               	movwf	printf@f& (0+255),b
 15538  005320  0EFB               	movlw	high STR_120
 15539  005322  0100               	movlb	0	; () banked
 15540  005324  6F8F               	movwf	(printf@f+1)& (0+255),b
 15541  005326  EC17  F00F         	call	_printf	;wreg free
 15542  00532A                     l1487:
 15543  00532A  A281               	btfss	3969,1,c	;volatile
 15544  00532C  D7FE               	goto	l1487
 15545                           
 15546                           ;Test.c: 575: }
 15547                           ;Test.c: 576: if(PORTB >> 4 == 0b1111){
 15548  00532E  3881               	swapf	3969,w,c	;volatile
 15549  005330  0B0F               	andlw	15
 15550  005332  0A0F               	xorlw	15
 15551  005334  B4D8               	btfsc	status,2,c
 15552  005336  0012               	return	
 15553  005338  D014               	goto	l9286
 15554  00533A                     l1494:
 15555                           
 15556                           ;Test.c: 581: LATBbits.LATB2 = 1;
 15557  00533A  848A               	bsf	3978,2,c	;volatile
 15558                           
 15559                           ;Test.c: 582: _delay((unsigned long)((5)*(32000000/4000.0)));
 15560  00533C  0E34               	movlw	52
 15561  00533E  0100               	movlb	0	; () banked
 15562  005340  6FAB               	movwf	??_SpeedTest& (0+255),b
 15563  005342  0EF1               	movlw	241
 15564  005344                     u12177:
 15565  005344  2EE8               	decfsz	wreg,f,c
 15566  005346  D7FE               	bra	u12177
 15567  005348  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 15568  00534A  D7FC               	bra	u12177
 15569  00534C  D000               	nop2	
 15570                           
 15571                           ;Test.c: 583: LATBbits.LATB2 = 0;
 15572  00534E  948A               	bcf	3978,2,c	;volatile
 15573                           
 15574                           ;Test.c: 584: _delay((unsigned long)((5)*(32000000/4000.0)));
 15575  005350  0E34               	movlw	52
 15576  005352  0100               	movlb	0	; () banked
 15577  005354  6FAB               	movwf	??_SpeedTest& (0+255),b
 15578  005356  0EF1               	movlw	241
 15579  005358                     u12187:
 15580  005358  2EE8               	decfsz	wreg,f,c
 15581  00535A  D7FE               	bra	u12187
 15582  00535C  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 15583  00535E  D7FC               	bra	u12187
 15584  005360  D000               	nop2	
 15585  005362                     l9286:
 15586  005362  B281               	btfsc	3969,1,c	;volatile
 15587  005364  D7EA               	goto	l1494
 15588                           
 15589                           ;Test.c: 587: }
 15590                           ;Test.c: 588: LATBbits.LATB2 = 0;
 15591  005366  948A               	bcf	3978,2,c	;volatile
 15592  005368  D7E0               	goto	l1487
 15593  00536A                     __end_of_SpeedTest:
 15594                           	opt stack 0
 15595                           tblptru	equ	0xFF8
 15596                           tblptrh	equ	0xFF7
 15597                           tblptrl	equ	0xFF6
 15598                           tablat	equ	0xFF5
 15599                           prodh	equ	0xFF4
 15600                           prodl	equ	0xFF3
 15601                           intcon	equ	0xFF2
 15602                           intcon2	equ	0xFF1
 15603                           intcon3	equ	0xFF0
 15604                           postinc0	equ	0xFEE
 15605                           wreg	equ	0xFE8
 15606                           postdec1	equ	0xFE5
 15607                           fsr1l	equ	0xFE1
 15608                           indf2	equ	0xFDF
 15609                           postinc2	equ	0xFDE
 15610                           postdec2	equ	0xFDD
 15611                           fsr2h	equ	0xFDA
 15612                           fsr2l	equ	0xFD9
 15613                           status	equ	0xFD8
 15614                           
 15615 ;; *************** function _PortTestPusher *****************
 15616 ;; Defined at:
 15617 ;;		line 706 in file "Test.c"
 15618 ;; Parameters:    Size  Location     Type
 15619 ;;		None
 15620 ;; Auto vars:     Size  Location     Type
 15621 ;;		None
 15622 ;; Return value:  Size  Location     Type
 15623 ;;                  1    wreg      void 
 15624 ;; Registers used:
 15625 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15626 ;; Tracked objects:
 15627 ;;		On entry : 0/0
 15628 ;;		On exit  : 0/0
 15629 ;;		Unchanged: 0/0
 15630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15633 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15634 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15635 ;;Total ram usage:        1 bytes
 15636 ;; Hardware stack levels used:    1
 15637 ;; Hardware stack levels required when called:   10
 15638 ;; This function calls:
 15639 ;;		_lcdInst
 15640 ;;		_printf
 15641 ;; This function is called by:
 15642 ;;		_Test
 15643 ;; This function uses a non-reentrant model
 15644 ;;
 15645                           
 15646                           	psect	text47
 15647  005836                     __ptext47:
 15648                           	opt stack 0
 15649  005836                     _PortTestPusher:
 15650                           	opt stack 19
 15651                           
 15652                           ;Test.c: 707: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15653                           
 15654                           ;incstack = 0
 15655  005836  0E01               	movlw	1
 15656  005838  EC7D  F030         	call	_lcdInst
 15657  00583C  0E68               	movlw	104
 15658  00583E  0100               	movlb	0	; () banked
 15659  005840  6FAB               	movwf	??_PortTestPusher& (0+255),b
 15660  005842  0EE4               	movlw	228
 15661  005844                     u12197:
 15662  005844  2EE8               	decfsz	wreg,f,c
 15663  005846  D7FE               	bra	u12197
 15664  005848  2FAB               	decfsz	??_PortTestPusher& (0+255),f,b
 15665  00584A  D7FC               	bra	u12197
 15666  00584C  F000               	nop	
 15667  00584E  0E80               	movlw	128
 15668  005850  EC7D  F030         	call	_lcdInst
 15669                           
 15670                           ;Test.c: 708: printf("D WILL RETURN    ");
 15671  005854  0EF9               	movlw	low STR_112
 15672  005856  0100               	movlb	0	; () banked
 15673  005858  6F8E               	movwf	printf@f& (0+255),b
 15674  00585A  0EFA               	movlw	high STR_112
 15675  00585C  0100               	movlb	0	; () banked
 15676  00585E  6F8F               	movwf	(printf@f+1)& (0+255),b
 15677  005860  EC17  F00F         	call	_printf	;wreg free
 15678                           
 15679                           ;Test.c: 709: lcdInst(0b11000000);;
 15680  005864  0EC0               	movlw	192
 15681  005866  EC7D  F030         	call	_lcdInst
 15682                           
 15683                           ;Test.c: 710: printf("OTHER SETS PUSHER");
 15684  00586A  0E65               	movlw	low STR_128
 15685  00586C  0100               	movlb	0	; () banked
 15686  00586E  6F8E               	movwf	printf@f& (0+255),b
 15687  005870  0EFB               	movlw	high STR_128
 15688  005872  0100               	movlb	0	; () banked
 15689  005874  6F8F               	movwf	(printf@f+1)& (0+255),b
 15690  005876  EC17  F00F         	call	_printf	;wreg free
 15691  00587A                     l1548:
 15692  00587A  A281               	btfss	3969,1,c	;volatile
 15693  00587C  D7FE               	goto	l1548
 15694                           
 15695                           ;Test.c: 715: }
 15696                           ;Test.c: 716: if(PORTB >> 4 == 0b1111){
 15697  00587E  3881               	swapf	3969,w,c	;volatile
 15698  005880  0B0F               	andlw	15
 15699  005882  0A0F               	xorlw	15
 15700  005884  B4D8               	btfsc	status,2,c
 15701  005886  0012               	return	
 15702                           
 15703                           ;Test.c: 719: else{
 15704                           ;Test.c: 720: LATAbits.LATA4 = 1;
 15705                           
 15706                           ;Test.c: 718: }
 15707                           
 15708                           ;Test.c: 717: break;
 15709  005888  8889               	bsf	3977,4,c	;volatile
 15710  00588A                     l1554:
 15711  00588A  B281               	btfsc	3969,1,c	;volatile
 15712  00588C  D7FE               	goto	l1554
 15713                           
 15714                           ;Test.c: 723: }
 15715                           ;Test.c: 724: LATAbits.LATA4 = 0;
 15716  00588E  9889               	bcf	3977,4,c	;volatile
 15717  005890  D7F4               	goto	l1548
 15718  005892                     __end_of_PortTestPusher:
 15719                           	opt stack 0
 15720                           tblptru	equ	0xFF8
 15721                           tblptrh	equ	0xFF7
 15722                           tblptrl	equ	0xFF6
 15723                           tablat	equ	0xFF5
 15724                           prodh	equ	0xFF4
 15725                           prodl	equ	0xFF3
 15726                           intcon	equ	0xFF2
 15727                           intcon2	equ	0xFF1
 15728                           intcon3	equ	0xFF0
 15729                           postinc0	equ	0xFEE
 15730                           wreg	equ	0xFE8
 15731                           postdec1	equ	0xFE5
 15732                           fsr1l	equ	0xFE1
 15733                           indf2	equ	0xFDF
 15734                           postinc2	equ	0xFDE
 15735                           postdec2	equ	0xFDD
 15736                           fsr2h	equ	0xFDA
 15737                           fsr2l	equ	0xFD9
 15738                           status	equ	0xFD8
 15739                           
 15740 ;; *************** function _PortTestDC *****************
 15741 ;; Defined at:
 15742 ;;		line 439 in file "Test.c"
 15743 ;; Parameters:    Size  Location     Type
 15744 ;;		None
 15745 ;; Auto vars:     Size  Location     Type
 15746 ;;		None
 15747 ;; Return value:  Size  Location     Type
 15748 ;;                  1    wreg      void 
 15749 ;; Registers used:
 15750 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15751 ;; Tracked objects:
 15752 ;;		On entry : 0/0
 15753 ;;		On exit  : 0/0
 15754 ;;		Unchanged: 0/0
 15755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15757 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15758 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15759 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15760 ;;Total ram usage:        1 bytes
 15761 ;; Hardware stack levels used:    1
 15762 ;; Hardware stack levels required when called:   10
 15763 ;; This function calls:
 15764 ;;		_lcdInst
 15765 ;;		_printf
 15766 ;; This function is called by:
 15767 ;;		_Test
 15768 ;; This function uses a non-reentrant model
 15769 ;;
 15770                           
 15771                           	psect	text48
 15772  004B3E                     __ptext48:
 15773                           	opt stack 0
 15774  004B3E                     _PortTestDC:
 15775                           	opt stack 19
 15776                           
 15777                           ;Test.c: 440: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15778                           
 15779                           ;incstack = 0
 15780  004B3E  0E01               	movlw	1
 15781  004B40  EC7D  F030         	call	_lcdInst
 15782  004B44  0E68               	movlw	104
 15783  004B46  0100               	movlb	0	; () banked
 15784  004B48  6FAB               	movwf	??_PortTestDC& (0+255),b
 15785  004B4A  0EE4               	movlw	228
 15786  004B4C                     u12207:
 15787  004B4C  2EE8               	decfsz	wreg,f,c
 15788  004B4E  D7FE               	bra	u12207
 15789  004B50  2FAB               	decfsz	??_PortTestDC& (0+255),f,b
 15790  004B52  D7FC               	bra	u12207
 15791  004B54  F000               	nop	
 15792  004B56  0E80               	movlw	128
 15793  004B58  EC7D  F030         	call	_lcdInst
 15794                           
 15795                           ;Test.c: 441: printf("D WILL RETURN    ");
 15796  004B5C  0EF9               	movlw	low STR_112
 15797  004B5E  0100               	movlb	0	; () banked
 15798  004B60  6F8E               	movwf	printf@f& (0+255),b
 15799  004B62  0EFA               	movlw	high STR_112
 15800  004B64  0100               	movlb	0	; () banked
 15801  004B66  6F8F               	movwf	(printf@f+1)& (0+255),b
 15802  004B68  EC17  F00F         	call	_printf	;wreg free
 15803                           
 15804                           ;Test.c: 442: lcdInst(0b11000000);;
 15805  004B6C  0EC0               	movlw	192
 15806  004B6E  EC7D  F030         	call	_lcdInst
 15807                           
 15808                           ;Test.c: 443: printf("OTHER SETS DC   ");
 15809  004B72  0E01               	movlw	low STR_113
 15810  004B74  0100               	movlb	0	; () banked
 15811  004B76  6F8E               	movwf	printf@f& (0+255),b
 15812  004B78  0EFC               	movlw	high STR_113
 15813  004B7A  0100               	movlb	0	; () banked
 15814  004B7C  6F8F               	movwf	(printf@f+1)& (0+255),b
 15815  004B7E  EC17  F00F         	call	_printf	;wreg free
 15816  004B82                     l1430:
 15817  004B82  A281               	btfss	3969,1,c	;volatile
 15818  004B84  D7FE               	goto	l1430
 15819                           
 15820                           ;Test.c: 448: }
 15821                           ;Test.c: 449: if(PORTB >> 4 == 0b1111){
 15822  004B86  3881               	swapf	3969,w,c	;volatile
 15823  004B88  0B0F               	andlw	15
 15824  004B8A  0A0F               	xorlw	15
 15825  004B8C  B4D8               	btfsc	status,2,c
 15826  004B8E  0012               	return	
 15827                           
 15828                           ;Test.c: 452: else if(PORTB >> 4 == 0b0000){
 15829                           
 15830                           ;Test.c: 451: }
 15831                           
 15832                           ;Test.c: 450: break;
 15833  004B90  CF81 F0AB          	movff	3969,??_PortTestDC	;volatile
 15834  004B94  0100               	movlb	0	; () banked
 15835  004B96  3BAB               	swapf	??_PortTestDC& (0+255),f,b
 15836  004B98  0E0F               	movlw	15
 15837  004B9A  17AB               	andwf	??_PortTestDC& (0+255),f,b
 15838  004B9C  A4D8               	btfss	status,2,c
 15839  004B9E  D010               	goto	l9252
 15840                           
 15841                           ; BSR set to: 0
 15842                           ;Test.c: 454: LATBbits.LATB2 = !LATBbits.LATB2;
 15843  004BA0  B48A               	btfsc	3978,2,c	;volatile
 15844  004BA2  D004               	goto	u8780
 15845  004BA4  0100               	movlb	0	; () banked
 15846  004BA6  6BAB               	clrf	??_PortTestDC& (0+255),b
 15847  004BA8  2BAB               	incf	??_PortTestDC& (0+255),f,b
 15848  004BAA  D002               	goto	u8798
 15849  004BAC                     u8780:
 15850  004BAC  0100               	movlb	0	; () banked
 15851  004BAE  6BAB               	clrf	??_PortTestDC& (0+255),b
 15852  004BB0                     u8798:
 15853  004BB0  0100               	movlb	0	; () banked
 15854  004BB2  47AB               	rlncf	??_PortTestDC& (0+255),f,b
 15855  004BB4  47AB               	rlncf	??_PortTestDC& (0+255),f,b
 15856  004BB6  508A               	movf	3978,w,c	;volatile
 15857  004BB8  0100               	movlb	0	; () banked
 15858  004BBA  19AB               	xorwf	??_PortTestDC& (0+255),w,b
 15859  004BBC  0BFB               	andlw	-5
 15860  004BBE  D011               	goto	L14
 15861  004BC0                     l9252:
 15862                           
 15863                           ; BSR set to: 0
 15864                           ;Test.c: 456: else if(PORTB >> 4 == 0b0001){
 15865  004BC0  3881               	swapf	3969,w,c	;volatile
 15866  004BC2  0B0F               	andlw	15
 15867  004BC4  06E8               	decf	wreg,f,c
 15868  004BC6  A4D8               	btfss	status,2,c
 15869  004BC8  D00F               	goto	l9256
 15870                           
 15871                           ; BSR set to: 0
 15872                           ;Test.c: 458: LATBbits.LATB0 = !LATBbits.LATB0;
 15873  004BCA  B08A               	btfsc	3978,0,c	;volatile
 15874  004BCC  D004               	goto	u8810
 15875  004BCE  0100               	movlb	0	; () banked
 15876  004BD0  6BAB               	clrf	??_PortTestDC& (0+255),b
 15877  004BD2  2BAB               	incf	??_PortTestDC& (0+255),f,b
 15878  004BD4  D002               	goto	u8828
 15879  004BD6                     u8810:
 15880  004BD6  0100               	movlb	0	; () banked
 15881  004BD8  6BAB               	clrf	??_PortTestDC& (0+255),b
 15882  004BDA                     u8828:
 15883  004BDA  508A               	movf	3978,w,c	;volatile
 15884  004BDC  0100               	movlb	0	; () banked
 15885  004BDE  19AB               	xorwf	??_PortTestDC& (0+255),w,b
 15886  004BE0  0BFE               	andlw	-2
 15887  004BE2                     L14:
 15888  004BE2  19AB               	xorwf	??_PortTestDC& (0+255),w,b
 15889  004BE4  6E8A               	movwf	3978,c	;volatile
 15890                           
 15891                           ;Test.c: 459: }
 15892  004BE6  D013               	goto	l1449
 15893  004BE8                     l9256:
 15894                           
 15895                           ; BSR set to: 0
 15896                           ;Test.c: 460: else if(PORTB >> 4 == 0b0100){
 15897  004BE8  3881               	swapf	3969,w,c	;volatile
 15898  004BEA  0B0F               	andlw	15
 15899  004BEC  0A04               	xorlw	4
 15900  004BEE  A4D8               	btfss	status,2,c
 15901  004BF0  D005               	goto	l9260
 15902                           
 15903                           ; BSR set to: 0
 15904                           ;Test.c: 461: LATBbits.LATB2 = 1;
 15905  004BF2  848A               	bsf	3978,2,c	;volatile
 15906  004BF4                     l1441:
 15907  004BF4  B281               	btfsc	3969,1,c	;volatile
 15908  004BF6  D7FE               	goto	l1441
 15909                           
 15910                           ;Test.c: 463: LATBbits.LATB2 = 0;
 15911  004BF8  948A               	bcf	3978,2,c	;volatile
 15912                           
 15913                           ;Test.c: 464: }
 15914  004BFA  D009               	goto	l1449
 15915  004BFC                     l9260:
 15916                           
 15917                           ;Test.c: 465: else if(PORTB >> 4 == 0b0101){
 15918  004BFC  3881               	swapf	3969,w,c	;volatile
 15919  004BFE  0B0F               	andlw	15
 15920  004C00  0A05               	xorlw	5
 15921  004C02  A4D8               	btfss	status,2,c
 15922  004C04  D004               	goto	l1449
 15923                           
 15924                           ;Test.c: 466: LATBbits.LATB0 = 1;
 15925  004C06  808A               	bsf	3978,0,c	;volatile
 15926  004C08                     l1446:
 15927  004C08  B281               	btfsc	3969,1,c	;volatile
 15928  004C0A  D7FE               	goto	l1446
 15929                           
 15930                           ;Test.c: 468: LATBbits.LATB0 = 0;
 15931  004C0C  908A               	bcf	3978,0,c	;volatile
 15932  004C0E                     l1449:
 15933  004C0E  A281               	btfss	3969,1,c	;volatile
 15934  004C10  D7B8               	goto	l1430
 15935  004C12  D7FD               	goto	l1449
 15936  004C14                     __end_of_PortTestDC:
 15937                           	opt stack 0
 15938                           tblptru	equ	0xFF8
 15939                           tblptrh	equ	0xFF7
 15940                           tblptrl	equ	0xFF6
 15941                           tablat	equ	0xFF5
 15942                           prodh	equ	0xFF4
 15943                           prodl	equ	0xFF3
 15944                           intcon	equ	0xFF2
 15945                           intcon2	equ	0xFF1
 15946                           intcon3	equ	0xFF0
 15947                           postinc0	equ	0xFEE
 15948                           wreg	equ	0xFE8
 15949                           postdec1	equ	0xFE5
 15950                           fsr1l	equ	0xFE1
 15951                           indf2	equ	0xFDF
 15952                           postinc2	equ	0xFDE
 15953                           postdec2	equ	0xFDD
 15954                           fsr2h	equ	0xFDA
 15955                           fsr2l	equ	0xFD9
 15956                           status	equ	0xFD8
 15957                           
 15958 ;; *************** function _PlatformTest *****************
 15959 ;; Defined at:
 15960 ;;		line 474 in file "Test.c"
 15961 ;; Parameters:    Size  Location     Type
 15962 ;;		None
 15963 ;; Auto vars:     Size  Location     Type
 15964 ;;  i               2   51[BANK0 ] int 
 15965 ;;  i               2   49[BANK0 ] int 
 15966 ;;  res             2   47[BANK0 ] int 
 15967 ;;  res             2   45[BANK0 ] int 
 15968 ;;  on              2   53[BANK0 ] int 
 15969 ;; Return value:  Size  Location     Type
 15970 ;;                  1    wreg      void 
 15971 ;; Registers used:
 15972 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15973 ;; Tracked objects:
 15974 ;;		On entry : 0/0
 15975 ;;		On exit  : 0/0
 15976 ;;		Unchanged: 0/0
 15977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15979 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15980 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15981 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15982 ;;Total ram usage:       12 bytes
 15983 ;; Hardware stack levels used:    1
 15984 ;; Hardware stack levels required when called:   10
 15985 ;; This function calls:
 15986 ;;		_lcdInst
 15987 ;;		_printf
 15988 ;;		_readADC
 15989 ;;		_stopSignals
 15990 ;; This function is called by:
 15991 ;;		_Test
 15992 ;; This function uses a non-reentrant model
 15993 ;;
 15994                           
 15995                           	psect	text49
 15996  003100                     __ptext49:
 15997                           	opt stack 0
 15998  003100                     _PlatformTest:
 15999                           	opt stack 19
 16000                           
 16001                           ;Test.c: 475: LATCbits.LATC5 = 1;
 16002                           
 16003                           ;incstack = 0
 16004  003100  8A8B               	bsf	3979,5,c	;volatile
 16005                           
 16006                           ;Test.c: 477: (INTCONbits.GIE = 1);
 16007  003102  8EF2               	bsf	intcon,7,c	;volatile
 16008                           
 16009                           ;Test.c: 478: machine_state = Sorting_state;
 16010  003104  0E01               	movlw	1
 16011  003106  0100               	movlb	0	; () banked
 16012  003108  6FFC               	movwf	_machine_state& (0+255),b
 16013                           
 16014                           ;Test.c: 479: f_arm_position = 0;
 16015  00310A  0E00               	movlw	0
 16016  00310C  0100               	movlb	0	; () banked
 16017  00310E  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 16018  003110  0E00               	movlw	0
 16019  003112  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
 16020                           
 16021                           ;Test.c: 480: timer2_counter = 0;
 16022  003114  0E00               	movlw	0
 16023  003116  6E74               	movwf	_timer2_counter+1,c	;volatile
 16024  003118  0E00               	movlw	0
 16025  00311A  6E73               	movwf	_timer2_counter,c	;volatile
 16026                           
 16027                           ; BSR set to: 0
 16028                           ;Test.c: 481: LATBbits.LATB3 = 0;
 16029  00311C  968A               	bcf	3978,3,c	;volatile
 16030                           
 16031                           ; BSR set to: 0
 16032                           ;Test.c: 482: TMR2IE = 1;
 16033  00311E  829D               	bsf	3997,1,c	;volatile
 16034                           
 16035                           ; BSR set to: 0
 16036                           ;Test.c: 483: TMR2ON = 1;
 16037  003120  84CA               	bsf	4042,2,c	;volatile
 16038                           
 16039                           ;Test.c: 484: was_low_2 = 0;
 16040  003122  0E00               	movlw	0
 16041  003124  6E7A               	movwf	_was_low_2+1,c	;volatile
 16042  003126  0E00               	movlw	0
 16043  003128  6E79               	movwf	_was_low_2,c	;volatile
 16044                           
 16045                           ;Test.c: 486: int on = 1;
 16046  00312A  0E00               	movlw	0
 16047  00312C  0100               	movlb	0	; () banked
 16048  00312E  6FB6               	movwf	(PlatformTest@on+1)& (0+255),b
 16049  003130  0E01               	movlw	1
 16050  003132  6FB5               	movwf	PlatformTest@on& (0+255),b
 16051                           
 16052                           ; BSR set to: 0
 16053                           ;Test.c: 487: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 16054  003134  0E01               	movlw	1
 16055  003136  EC7D  F030         	call	_lcdInst
 16056  00313A  0E68               	movlw	104
 16057  00313C  0100               	movlb	0	; () banked
 16058  00313E  6FAB               	movwf	??_PlatformTest& (0+255),b
 16059  003140  0EE4               	movlw	228
 16060  003142                     u12217:
 16061  003142  2EE8               	decfsz	wreg,f,c
 16062  003144  D7FE               	bra	u12217
 16063  003146  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 16064  003148  D7FC               	bra	u12217
 16065  00314A  F000               	nop	
 16066  00314C  0E80               	movlw	128
 16067  00314E  EC7D  F030         	call	_lcdInst
 16068                           
 16069                           ;Test.c: 488: printf("1: DC | A: ARM  ");
 16070  003152  0E34               	movlw	low STR_114
 16071  003154  0100               	movlb	0	; () banked
 16072  003156  6F8E               	movwf	printf@f& (0+255),b
 16073  003158  0EFC               	movlw	high STR_114
 16074  00315A  0100               	movlb	0	; () banked
 16075  00315C  6F8F               	movwf	(printf@f+1)& (0+255),b
 16076  00315E  EC17  F00F         	call	_printf	;wreg free
 16077                           
 16078                           ;Test.c: 490: while(PORTBbits.RB1 == 0){
 16079  003162  D058               	goto	l9342
 16080  003164                     l9324:
 16081                           
 16082                           ;Test.c: 491: readADC(0);
 16083  003164  0E00               	movlw	0
 16084  003166  EC68  F02F         	call	_readADC
 16085                           
 16086                           ;Test.c: 492: int res = ADRESH<<8 | ADRESL;
 16087  00316A  50C3               	movf	4035,w,c	;volatile
 16088  00316C  CFC4 F0AB          	movff	4036,??_PlatformTest	;volatile
 16089  003170  0100               	movlb	0	; () banked
 16090  003172  6BAC               	clrf	(??_PlatformTest+1)& (0+255),b
 16091  003174  C0AB  F0AC         	movff	??_PlatformTest,??_PlatformTest+1
 16092  003178  0100               	movlb	0	; () banked
 16093  00317A  6BAB               	clrf	??_PlatformTest& (0+255),b
 16094  00317C  0100               	movlb	0	; () banked
 16095  00317E  11AB               	iorwf	??_PlatformTest& (0+255),w,b
 16096  003180  0100               	movlb	0	; () banked
 16097  003182  6FAD               	movwf	PlatformTest@res& (0+255),b
 16098  003184  0100               	movlb	0	; () banked
 16099  003186  51AC               	movf	(??_PlatformTest+1)& (0+255),w,b
 16100  003188  0100               	movlb	0	; () banked
 16101  00318A  6FAE               	movwf	(PlatformTest@res+1)& (0+255),b
 16102                           
 16103                           ; BSR set to: 0
 16104                           ;Test.c: 493: IR_signal = (res > 800) ? 1 : 0;
 16105  00318C  0100               	movlb	0	; () banked
 16106  00318E  BFAE               	btfsc	(PlatformTest@res+1)& (0+255),7,b
 16107  003190  D00A               	goto	u8940
 16108  003192  0E21               	movlw	33
 16109  003194  0100               	movlb	0	; () banked
 16110  003196  5DAD               	subwf	PlatformTest@res& (0+255),w,b
 16111  003198  0E03               	movlw	3
 16112  00319A  0100               	movlb	0	; () banked
 16113  00319C  59AE               	subwfb	(PlatformTest@res+1)& (0+255),w,b
 16114  00319E  A0D8               	btfss	status,0,c
 16115  0031A0  D002               	goto	u8940
 16116  0031A2  0E01               	movlw	1
 16117  0031A4  D001               	goto	u8950
 16118  0031A6                     u8940:
 16119  0031A6  0E00               	movlw	0
 16120  0031A8                     u8950:
 16121  0031A8  0100               	movlb	0	; () banked
 16122  0031AA  6FE2               	movwf	_IR_signal& (0+255),b
 16123  0031AC  6BE3               	clrf	(_IR_signal+1)& (0+255),b
 16124                           
 16125                           ;Test.c: 495: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 16126  0031AE  0E01               	movlw	1
 16127  0031B0  EC7D  F030         	call	_lcdInst
 16128  0031B4  0E68               	movlw	104
 16129  0031B6  0100               	movlb	0	; () banked
 16130  0031B8  6FAB               	movwf	??_PlatformTest& (0+255),b
 16131  0031BA  0EE4               	movlw	228
 16132  0031BC                     u12227:
 16133  0031BC  2EE8               	decfsz	wreg,f,c
 16134  0031BE  D7FE               	bra	u12227
 16135  0031C0  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 16136  0031C2  D7FC               	bra	u12227
 16137  0031C4  F000               	nop	
 16138  0031C6  0E80               	movlw	128
 16139  0031C8  EC7D  F030         	call	_lcdInst
 16140                           
 16141                           ;Test.c: 496: printf("1: DC | A: ARM  ");
 16142  0031CC  0E34               	movlw	low STR_114
 16143  0031CE  0100               	movlb	0	; () banked
 16144  0031D0  6F8E               	movwf	printf@f& (0+255),b
 16145  0031D2  0EFC               	movlw	high STR_114
 16146  0031D4  0100               	movlb	0	; () banked
 16147  0031D6  6F8F               	movwf	(printf@f+1)& (0+255),b
 16148  0031D8  EC17  F00F         	call	_printf	;wreg free
 16149                           
 16150                           ;Test.c: 497: lcdInst(0b11000000);;
 16151  0031DC  0EC0               	movlw	192
 16152  0031DE  EC7D  F030         	call	_lcdInst
 16153                           
 16154                           ;Test.c: 498: printf("5:H|6:L|IR:%d   ", res);
 16155  0031E2  0E23               	movlw	low STR_116
 16156  0031E4  0100               	movlb	0	; () banked
 16157  0031E6  6F8E               	movwf	printf@f& (0+255),b
 16158  0031E8  0EFC               	movlw	high STR_116
 16159  0031EA  0100               	movlb	0	; () banked
 16160  0031EC  6F8F               	movwf	(printf@f+1)& (0+255),b
 16161  0031EE  C0AD  F090         	movff	PlatformTest@res,?_printf+2
 16162  0031F2  C0AE  F091         	movff	PlatformTest@res+1,?_printf+3
 16163  0031F6  EC17  F00F         	call	_printf	;wreg free
 16164                           
 16165                           ;Test.c: 499: _delay((unsigned long)((100)*(32000000/4000.0)));
 16166  0031FA  0E05               	movlw	5
 16167  0031FC  0100               	movlb	0	; () banked
 16168  0031FE  6FAC               	movwf	(??_PlatformTest+1)& (0+255),b
 16169  003200  0E0F               	movlw	15
 16170  003202  0100               	movlb	0	; () banked
 16171  003204  6FAB               	movwf	??_PlatformTest& (0+255),b
 16172  003206  0EF1               	movlw	241
 16173  003208                     u12237:
 16174  003208  2EE8               	decfsz	wreg,f,c
 16175  00320A  D7FE               	bra	u12237
 16176  00320C  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 16177  00320E  D7FC               	bra	u12237
 16178  003210  2FAC               	decfsz	(??_PlatformTest+1)& (0+255),f,b
 16179  003212  D7FA               	bra	u12237
 16180  003214                     l9342:
 16181  003214  B281               	btfsc	3969,1,c	;volatile
 16182  003216  D059               	goto	l9362
 16183  003218  D7A5               	goto	l9324
 16184  00321A                     l9344:
 16185                           
 16186                           ;Test.c: 504: readADC(0);
 16187  00321A  0E00               	movlw	0
 16188  00321C  EC68  F02F         	call	_readADC
 16189                           
 16190                           ;Test.c: 505: int res = ADRESH<<8 | ADRESL;
 16191  003220  50C3               	movf	4035,w,c	;volatile
 16192  003222  CFC4 F0AB          	movff	4036,??_PlatformTest	;volatile
 16193  003226  0100               	movlb	0	; () banked
 16194  003228  6BAC               	clrf	(??_PlatformTest+1)& (0+255),b
 16195  00322A  C0AB  F0AC         	movff	??_PlatformTest,??_PlatformTest+1
 16196  00322E  0100               	movlb	0	; () banked
 16197  003230  6BAB               	clrf	??_PlatformTest& (0+255),b
 16198  003232  0100               	movlb	0	; () banked
 16199  003234  11AB               	iorwf	??_PlatformTest& (0+255),w,b
 16200  003236  0100               	movlb	0	; () banked
 16201  003238  6FAF               	movwf	PlatformTest@res_1807& (0+255),b
 16202  00323A  0100               	movlb	0	; () banked
 16203  00323C  51AC               	movf	(??_PlatformTest+1)& (0+255),w,b
 16204  00323E  0100               	movlb	0	; () banked
 16205  003240  6FB0               	movwf	(PlatformTest@res_1807+1)& (0+255),b
 16206                           
 16207                           ; BSR set to: 0
 16208                           ;Test.c: 506: IR_signal = (res > 800) ? 1 : 0;
 16209  003242  0100               	movlb	0	; () banked
 16210  003244  BFB0               	btfsc	(PlatformTest@res_1807+1)& (0+255),7,b
 16211  003246  D00A               	goto	u8970
 16212  003248  0E21               	movlw	33
 16213  00324A  0100               	movlb	0	; () banked
 16214  00324C  5DAF               	subwf	PlatformTest@res_1807& (0+255),w,b
 16215  00324E  0E03               	movlw	3
 16216  003250  0100               	movlb	0	; () banked
 16217  003252  59B0               	subwfb	(PlatformTest@res_1807+1)& (0+255),w,b
 16218  003254  A0D8               	btfss	status,0,c
 16219  003256  D002               	goto	u8970
 16220  003258  0E01               	movlw	1
 16221  00325A  D001               	goto	u8980
 16222  00325C                     u8970:
 16223  00325C  0E00               	movlw	0
 16224  00325E                     u8980:
 16225  00325E  0100               	movlb	0	; () banked
 16226  003260  6FE2               	movwf	_IR_signal& (0+255),b
 16227  003262  6BE3               	clrf	(_IR_signal+1)& (0+255),b
 16228                           
 16229                           ;Test.c: 508: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 16230  003264  0E01               	movlw	1
 16231  003266  EC7D  F030         	call	_lcdInst
 16232  00326A  0E68               	movlw	104
 16233  00326C  0100               	movlb	0	; () banked
 16234  00326E  6FAB               	movwf	??_PlatformTest& (0+255),b
 16235  003270  0EE4               	movlw	228
 16236  003272                     u12247:
 16237  003272  2EE8               	decfsz	wreg,f,c
 16238  003274  D7FE               	bra	u12247
 16239  003276  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 16240  003278  D7FC               	bra	u12247
 16241  00327A  F000               	nop	
 16242  00327C  0E80               	movlw	128
 16243  00327E  EC7D  F030         	call	_lcdInst
 16244                           
 16245                           ;Test.c: 509: printf("1: DC | A: ARM  ");
 16246  003282  0E34               	movlw	low STR_114
 16247  003284  0100               	movlb	0	; () banked
 16248  003286  6F8E               	movwf	printf@f& (0+255),b
 16249  003288  0EFC               	movlw	high STR_114
 16250  00328A  0100               	movlb	0	; () banked
 16251  00328C  6F8F               	movwf	(printf@f+1)& (0+255),b
 16252  00328E  EC17  F00F         	call	_printf	;wreg free
 16253                           
 16254                           ;Test.c: 510: lcdInst(0b11000000);;
 16255  003292  0EC0               	movlw	192
 16256  003294  EC7D  F030         	call	_lcdInst
 16257                           
 16258                           ;Test.c: 511: printf("5:H|6:L|IR:%d   ", res);
 16259  003298  0E23               	movlw	low STR_116
 16260  00329A  0100               	movlb	0	; () banked
 16261  00329C  6F8E               	movwf	printf@f& (0+255),b
 16262  00329E  0EFC               	movlw	high STR_116
 16263  0032A0  0100               	movlb	0	; () banked
 16264  0032A2  6F8F               	movwf	(printf@f+1)& (0+255),b
 16265  0032A4  C0AF  F090         	movff	PlatformTest@res_1807,?_printf+2
 16266  0032A8  C0B0  F091         	movff	PlatformTest@res_1807+1,?_printf+3
 16267  0032AC  EC17  F00F         	call	_printf	;wreg free
 16268                           
 16269                           ;Test.c: 512: _delay((unsigned long)((100)*(32000000/4000.0)));
 16270  0032B0  0E05               	movlw	5
 16271  0032B2  0100               	movlb	0	; () banked
 16272  0032B4  6FAC               	movwf	(??_PlatformTest+1)& (0+255),b
 16273  0032B6  0E0F               	movlw	15
 16274  0032B8  0100               	movlb	0	; () banked
 16275  0032BA  6FAB               	movwf	??_PlatformTest& (0+255),b
 16276  0032BC  0EF1               	movlw	241
 16277  0032BE                     u12257:
 16278  0032BE  2EE8               	decfsz	wreg,f,c
 16279  0032C0  D7FE               	bra	u12257
 16280  0032C2  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 16281  0032C4  D7FC               	bra	u12257
 16282  0032C6  2FAC               	decfsz	(??_PlatformTest+1)& (0+255),f,b
 16283  0032C8  D7FA               	bra	u12257
 16284  0032CA                     l9362:
 16285  0032CA  A281               	btfss	3969,1,c	;volatile
 16286  0032CC  D7A6               	goto	l9344
 16287                           
 16288                           ;Test.c: 513: }
 16289                           ;Test.c: 514: if(PORTB >> 4 == 0b1111){
 16290  0032CE  3881               	swapf	3969,w,c	;volatile
 16291  0032D0  0B0F               	andlw	15
 16292  0032D2  0A0F               	xorlw	15
 16293  0032D4  B4D8               	btfsc	status,2,c
 16294  0032D6  D08F               	goto	l1464
 16295                           
 16296                           ;Test.c: 517: else if(PORTB >> 4 == 0b0000){
 16297                           
 16298                           ;Test.c: 516: }
 16299                           
 16300                           ;Test.c: 515: break;
 16301  0032D8  CF81 F0AB          	movff	3969,??_PlatformTest	;volatile
 16302  0032DC  0100               	movlb	0	; () banked
 16303  0032DE  3BAB               	swapf	??_PlatformTest& (0+255),f,b
 16304  0032E0  0E0F               	movlw	15
 16305  0032E2  17AB               	andwf	??_PlatformTest& (0+255),f,b
 16306  0032E4  A4D8               	btfss	status,2,c
 16307  0032E6  D012               	goto	l9374
 16308                           
 16309                           ; BSR set to: 0
 16310                           ;Test.c: 518: LATBbits.LATB2 = !LATBbits.LATB2;
 16311  0032E8  B48A               	btfsc	3978,2,c	;volatile
 16312  0032EA  D004               	goto	u9020
 16313  0032EC  0100               	movlb	0	; () banked
 16314  0032EE  6BAB               	clrf	??_PlatformTest& (0+255),b
 16315  0032F0  2BAB               	incf	??_PlatformTest& (0+255),f,b
 16316  0032F2  D002               	goto	u9038
 16317  0032F4                     u9020:
 16318  0032F4  0100               	movlb	0	; () banked
 16319  0032F6  6BAB               	clrf	??_PlatformTest& (0+255),b
 16320  0032F8                     u9038:
 16321  0032F8  0100               	movlb	0	; () banked
 16322  0032FA  47AB               	rlncf	??_PlatformTest& (0+255),f,b
 16323  0032FC  47AB               	rlncf	??_PlatformTest& (0+255),f,b
 16324  0032FE  508A               	movf	3978,w,c	;volatile
 16325  003300  0100               	movlb	0	; () banked
 16326  003302  19AB               	xorwf	??_PlatformTest& (0+255),w,b
 16327  003304  0BFB               	andlw	-5
 16328  003306  19AB               	xorwf	??_PlatformTest& (0+255),w,b
 16329  003308  6E8A               	movwf	3978,c	;volatile
 16330                           
 16331                           ;Test.c: 519: }
 16332  00330A  D072               	goto	l1479
 16333  00330C                     l9374:
 16334                           
 16335                           ; BSR set to: 0
 16336                           ;Test.c: 520: else if(PORTB >> 4 == 0b0011){
 16337  00330C  3881               	swapf	3969,w,c	;volatile
 16338  00330E  0B0F               	andlw	15
 16339  003310  0A03               	xorlw	3
 16340  003312  A4D8               	btfss	status,2,c
 16341  003314  D020               	goto	l9386
 16342                           
 16343                           ; BSR set to: 0
 16344                           ;Test.c: 521: if(on){
 16345  003316  0100               	movlb	0	; () banked
 16346  003318  51B5               	movf	PlatformTest@on& (0+255),w,b
 16347  00331A  0100               	movlb	0	; () banked
 16348  00331C  11B6               	iorwf	(PlatformTest@on+1)& (0+255),w,b
 16349  00331E  B4D8               	btfsc	status,2,c
 16350  003320  D010               	goto	l9382
 16351                           
 16352                           ; BSR set to: 0
 16353                           ;Test.c: 522: f_arm_position = 1;
 16354  003322  0E00               	movlw	0
 16355  003324  0100               	movlb	0	; () banked
 16356  003326  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 16357  003328  0E01               	movlw	1
 16358  00332A  D00F               	goto	L15
 16359  00332C                     l9380:
 16360                           
 16361                           ; BSR set to: 0
 16362                           ;Test.c: 523: on = !on;
 16363  00332C  0100               	movlb	0	; () banked
 16364  00332E  51B5               	movf	PlatformTest@on& (0+255),w,b
 16365  003330  0100               	movlb	0	; () banked
 16366  003332  11B6               	iorwf	(PlatformTest@on+1)& (0+255),w,b
 16367  003334  A4D8               	btfss	status,2,c
 16368  003336  D00D               	goto	u9080
 16369  003338  D00A               	goto	u9081
 16370  00333A                     u9070:
 16371  00333A  0100               	movlb	0	; () banked
 16372  00333C  6FB5               	movwf	PlatformTest@on& (0+255),b
 16373  00333E  6BB6               	clrf	(PlatformTest@on+1)& (0+255),b
 16374                           
 16375                           ;Test.c: 524: }
 16376  003340  D057               	goto	l1479
 16377  003342                     l9382:
 16378                           
 16379                           ; BSR set to: 0
 16380                           ;Test.c: 525: else{
 16381                           ;Test.c: 526: f_arm_position = 0;
 16382  003342  0E00               	movlw	0
 16383  003344  0100               	movlb	0	; () banked
 16384  003346  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 16385  003348  0E00               	movlw	0
 16386  00334A                     L15:
 16387  00334A  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
 16388  00334C  D7EF               	goto	l9380
 16389  00334E                     u9081:
 16390  00334E  0E01               	movlw	1
 16391  003350  D7F4               	goto	u9070
 16392  003352                     u9080:
 16393  003352  0E00               	movlw	0
 16394  003354  D7F2               	goto	u9070
 16395  003356                     l9386:
 16396                           
 16397                           ; BSR set to: 0
 16398                           ;Test.c: 530: else if(PORTB >> 4 == 0b0101){
 16399  003356  3881               	swapf	3969,w,c	;volatile
 16400  003358  0B0F               	andlw	15
 16401  00335A  0A05               	xorlw	5
 16402  00335C  A4D8               	btfss	status,2,c
 16403  00335E  D022               	goto	l9402
 16404                           
 16405                           ; BSR set to: 0
 16406                           ;Test.c: 532: (INTCONbits.GIE = 0);
 16407  003360  9EF2               	bcf	intcon,7,c	;volatile
 16408                           
 16409                           ;Test.c: 533: TMR2IE = 0;
 16410  003362  929D               	bcf	3997,1,c	;volatile
 16411                           
 16412                           ; BSR set to: 0
 16413                           ;Test.c: 534: for(int i = 0; i<3000; i++){
 16414  003364  0E00               	movlw	0
 16415  003366  0100               	movlb	0	; () banked
 16416  003368  6FB2               	movwf	(PlatformTest@i+1)& (0+255),b
 16417  00336A  0E00               	movlw	0
 16418  00336C  6FB1               	movwf	PlatformTest@i& (0+255),b
 16419  00336E                     l9392:
 16420                           
 16421                           ; BSR set to: 0
 16422  00336E  0100               	movlb	0	; () banked
 16423  003370  BFB2               	btfsc	(PlatformTest@i+1)& (0+255),7,b
 16424  003372  D008               	goto	l1473
 16425  003374  0EB8               	movlw	184
 16426  003376  0100               	movlb	0	; () banked
 16427  003378  5DB1               	subwf	PlatformTest@i& (0+255),w,b
 16428  00337A  0E0B               	movlw	11
 16429  00337C  0100               	movlb	0	; () banked
 16430  00337E  59B2               	subwfb	(PlatformTest@i+1)& (0+255),w,b
 16431  003380  B0D8               	btfsc	status,0,c
 16432  003382  D00D               	goto	l1474
 16433  003384                     l1473:
 16434                           
 16435                           ; BSR set to: 0
 16436                           ;Test.c: 535: LATAbits.LATA4 = 1;
 16437  003384  8889               	bsf	3977,4,c	;volatile
 16438                           
 16439                           ; BSR set to: 0
 16440                           ;Test.c: 536: _delay((unsigned long)((75)*(32000000/4000000.0)));
 16441  003386  0EC8               	movlw	200
 16442  003388                     u12267:
 16443  003388  2EE8               	decfsz	wreg,f,c
 16444  00338A  D7FE               	bra	u12267
 16445                           
 16446                           ;Test.c: 537: LATAbits.LATA4 = 0;
 16447  00338C  9889               	bcf	3977,4,c	;volatile
 16448                           
 16449                           ;Test.c: 538: _delay((unsigned long)((25)*(32000000/4000000.0)));
 16450  00338E  0E42               	movlw	66
 16451  003390                     u12277:
 16452  003390  2EE8               	decfsz	wreg,f,c
 16453  003392  D7FE               	bra	u12277
 16454  003394  D000               	nop2	
 16455  003396  0100               	movlb	0	; () banked
 16456  003398  4BB1               	infsnz	PlatformTest@i& (0+255),f,b
 16457  00339A  2BB2               	incf	(PlatformTest@i+1)& (0+255),f,b
 16458  00339C  D7E8               	goto	l9392
 16459  00339E                     l1474:
 16460                           
 16461                           ; BSR set to: 0
 16462                           ;Test.c: 539: }
 16463                           ;Test.c: 540: TMR2IE = 1;
 16464  00339E  829D               	bsf	3997,1,c	;volatile
 16465                           
 16466                           ;Test.c: 541: (INTCONbits.GIE = 1);
 16467  0033A0  8EF2               	bsf	intcon,7,c	;volatile
 16468                           
 16469                           ;Test.c: 542: }
 16470  0033A2  D026               	goto	l1479
 16471  0033A4                     l9402:
 16472                           
 16473                           ; BSR set to: 0
 16474                           ;Test.c: 543: else if (PORTB >> 4 == 0b0110){
 16475  0033A4  3881               	swapf	3969,w,c	;volatile
 16476  0033A6  0B0F               	andlw	15
 16477  0033A8  0A06               	xorlw	6
 16478  0033AA  A4D8               	btfss	status,2,c
 16479  0033AC  D021               	goto	l1479
 16480                           
 16481                           ; BSR set to: 0
 16482                           ;Test.c: 545: (INTCONbits.GIE = 0);
 16483  0033AE  9EF2               	bcf	intcon,7,c	;volatile
 16484                           
 16485                           ;Test.c: 546: TMR2IE = 0;
 16486  0033B0  929D               	bcf	3997,1,c	;volatile
 16487                           
 16488                           ; BSR set to: 0
 16489                           ;Test.c: 547: for(int i = 0; i<3000; i++){
 16490  0033B2  0E00               	movlw	0
 16491  0033B4  0100               	movlb	0	; () banked
 16492  0033B6  6FB4               	movwf	(PlatformTest@i_1811+1)& (0+255),b
 16493  0033B8  0E00               	movlw	0
 16494  0033BA  6FB3               	movwf	PlatformTest@i_1811& (0+255),b
 16495  0033BC                     l9408:
 16496                           
 16497                           ; BSR set to: 0
 16498  0033BC  0100               	movlb	0	; () banked
 16499  0033BE  BFB4               	btfsc	(PlatformTest@i_1811+1)& (0+255),7,b
 16500  0033C0  D008               	goto	l1477
 16501  0033C2  0EB8               	movlw	184
 16502  0033C4  0100               	movlb	0	; () banked
 16503  0033C6  5DB3               	subwf	PlatformTest@i_1811& (0+255),w,b
 16504  0033C8  0E0B               	movlw	11
 16505  0033CA  0100               	movlb	0	; () banked
 16506  0033CC  59B4               	subwfb	(PlatformTest@i_1811+1)& (0+255),w,b
 16507  0033CE  B0D8               	btfsc	status,0,c
 16508  0033D0  D00D               	goto	l1478
 16509  0033D2                     l1477:
 16510                           
 16511                           ; BSR set to: 0
 16512                           ;Test.c: 548: LATAbits.LATA4 = 1;
 16513  0033D2  8889               	bsf	3977,4,c	;volatile
 16514                           
 16515                           ; BSR set to: 0
 16516                           ;Test.c: 549: _delay((unsigned long)((58)*(32000000/4000000.0)));
 16517  0033D4  0E9A               	movlw	154
 16518  0033D6                     u12287:
 16519  0033D6  2EE8               	decfsz	wreg,f,c
 16520  0033D8  D7FE               	bra	u12287
 16521  0033DA  D000               	nop2	
 16522                           
 16523                           ;Test.c: 550: LATAbits.LATA4 = 0;
 16524  0033DC  9889               	bcf	3977,4,c	;volatile
 16525                           
 16526                           ;Test.c: 551: _delay((unsigned long)((42)*(32000000/4000000.0)));
 16527  0033DE  0E70               	movlw	112
 16528  0033E0                     u12297:
 16529  0033E0  2EE8               	decfsz	wreg,f,c
 16530  0033E2  D7FE               	bra	u12297
 16531  0033E4  0100               	movlb	0	; () banked
 16532  0033E6  4BB3               	infsnz	PlatformTest@i_1811& (0+255),f,b
 16533  0033E8  2BB4               	incf	(PlatformTest@i_1811+1)& (0+255),f,b
 16534  0033EA  D7E8               	goto	l9408
 16535  0033EC                     l1478:
 16536                           
 16537                           ; BSR set to: 0
 16538                           ;Test.c: 552: }
 16539                           ;Test.c: 553: (INTCONbits.GIE = 1);
 16540  0033EC  8EF2               	bsf	intcon,7,c	;volatile
 16541                           
 16542                           ;Test.c: 554: TMR2IE = 1;
 16543  0033EE  829D               	bsf	3997,1,c	;volatile
 16544  0033F0                     l1479:
 16545  0033F0  A281               	btfss	3969,1,c	;volatile
 16546  0033F2  D76B               	goto	l9362
 16547  0033F4  D7FD               	goto	l1479
 16548  0033F6                     l1464:
 16549                           
 16550                           ;Test.c: 558: }
 16551                           ;Test.c: 560: LATCbits.LATC5 = 0;
 16552  0033F6  9A8B               	bcf	3979,5,c	;volatile
 16553                           
 16554                           ;Test.c: 561: stopSignals();
 16555  0033F8  EC24  F030         	call	_stopSignals	;wreg free
 16556                           
 16557                           ;Test.c: 562: machine_state = Testing_state;
 16558  0033FC  0E03               	movlw	3
 16559  0033FE  0100               	movlb	0	; () banked
 16560  003400  6FFC               	movwf	_machine_state& (0+255),b
 16561                           
 16562                           ; BSR set to: 0
 16563  003402  0012               	return		;funcret
 16564  003404                     __end_of_PlatformTest:
 16565                           	opt stack 0
 16566                           tblptru	equ	0xFF8
 16567                           tblptrh	equ	0xFF7
 16568                           tblptrl	equ	0xFF6
 16569                           tablat	equ	0xFF5
 16570                           prodh	equ	0xFF4
 16571                           prodl	equ	0xFF3
 16572                           intcon	equ	0xFF2
 16573                           intcon2	equ	0xFF1
 16574                           intcon3	equ	0xFF0
 16575                           postinc0	equ	0xFEE
 16576                           wreg	equ	0xFE8
 16577                           postdec1	equ	0xFE5
 16578                           fsr1l	equ	0xFE1
 16579                           indf2	equ	0xFDF
 16580                           postinc2	equ	0xFDE
 16581                           postdec2	equ	0xFDD
 16582                           fsr2h	equ	0xFDA
 16583                           fsr2l	equ	0xFD9
 16584                           status	equ	0xFD8
 16585                           
 16586 ;; *************** function _BothServos *****************
 16587 ;; Defined at:
 16588 ;;		line 379 in file "Test.c"
 16589 ;; Parameters:    Size  Location     Type
 16590 ;;		None
 16591 ;; Auto vars:     Size  Location     Type
 16592 ;;		None
 16593 ;; Return value:  Size  Location     Type
 16594 ;;                  1    wreg      void 
 16595 ;; Registers used:
 16596 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16597 ;; Tracked objects:
 16598 ;;		On entry : 0/0
 16599 ;;		On exit  : 0/0
 16600 ;;		Unchanged: 0/0
 16601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16603 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16604 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16605 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16606 ;;Total ram usage:        2 bytes
 16607 ;; Hardware stack levels used:    1
 16608 ;; Hardware stack levels required when called:   10
 16609 ;; This function calls:
 16610 ;;		_initServos
 16611 ;;		_lcdInst
 16612 ;;		_printf
 16613 ;;		_stopSignals
 16614 ;;		_updateServoPosition
 16615 ;; This function is called by:
 16616 ;;		_Test
 16617 ;; This function uses a non-reentrant model
 16618 ;;
 16619                           
 16620                           	psect	text50
 16621  002266                     __ptext50:
 16622                           	opt stack 0
 16623  002266                     _BothServos:
 16624                           	opt stack 19
 16625                           
 16626                           ;Test.c: 380: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 16627                           
 16628                           ; BSR set to: 0
 16629                           ;incstack = 0
 16630  002266  0E01               	movlw	1
 16631  002268  EC7D  F030         	call	_lcdInst
 16632  00226C  0E68               	movlw	104
 16633  00226E  0100               	movlb	0	; () banked
 16634  002270  6FAB               	movwf	??_BothServos& (0+255),b
 16635  002272  0EE4               	movlw	228
 16636  002274                     u12307:
 16637  002274  2EE8               	decfsz	wreg,f,c
 16638  002276  D7FE               	bra	u12307
 16639  002278  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16640  00227A  D7FC               	bra	u12307
 16641  00227C  F000               	nop	
 16642  00227E  0E80               	movlw	128
 16643  002280  EC7D  F030         	call	_lcdInst
 16644                           
 16645                           ;Test.c: 381: printf("TST: BOTH SERVOS");
 16646  002284  0ECD               	movlw	low STR_111
 16647  002286  0100               	movlb	0	; () banked
 16648  002288  6F8E               	movwf	printf@f& (0+255),b
 16649  00228A  0EFC               	movlw	high STR_111
 16650  00228C  0100               	movlb	0	; () banked
 16651  00228E  6F8F               	movwf	(printf@f+1)& (0+255),b
 16652  002290  EC17  F00F         	call	_printf	;wreg free
 16653                           
 16654                           ;Test.c: 382: TMR1ON = 1;
 16655  002294  80CD               	bsf	4045,0,c	;volatile
 16656                           
 16657                           ;Test.c: 383: TMR3ON = 1;
 16658  002296  80B1               	bsf	4017,0,c	;volatile
 16659                           
 16660                           ;Test.c: 384: machine_state = Sorting_state;
 16661  002298  0E01               	movlw	1
 16662  00229A  0100               	movlb	0	; () banked
 16663  00229C  6FFC               	movwf	_machine_state& (0+255),b
 16664                           
 16665                           ; BSR set to: 0
 16666                           ;Test.c: 385: was_low_1 = 0;
 16667  00229E  0E00               	movlw	0
 16668  0022A0  6E78               	movwf	_was_low_1+1,c	;volatile
 16669  0022A2  0E00               	movlw	0
 16670  0022A4  6E77               	movwf	_was_low_1,c	;volatile
 16671                           
 16672                           ; BSR set to: 0
 16673                           ;Test.c: 386: was_low_3 = 0;
 16674  0022A6  0E00               	movlw	0
 16675  0022A8  6E7C               	movwf	_was_low_3+1,c	;volatile
 16676  0022AA  0E00               	movlw	0
 16677  0022AC  6E7B               	movwf	_was_low_3,c	;volatile
 16678                           
 16679                           ; BSR set to: 0
 16680                           ;Test.c: 392: initServos();
 16681  0022AE  EC35  F02A         	call	_initServos	;wreg free
 16682                           
 16683                           ;Test.c: 393: _delay((unsigned long)((1500)*(32000000/4000.0)));
 16684  0022B2  0E3D               	movlw	61
 16685  0022B4  0100               	movlb	0	; () banked
 16686  0022B6  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16687  0022B8  0EE1               	movlw	225
 16688  0022BA  0100               	movlb	0	; () banked
 16689  0022BC  6FAB               	movwf	??_BothServos& (0+255),b
 16690  0022BE  0E3F               	movlw	63
 16691  0022C0                     u12317:
 16692  0022C0  2EE8               	decfsz	wreg,f,c
 16693  0022C2  D7FE               	bra	u12317
 16694  0022C4  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16695  0022C6  D7FC               	bra	u12317
 16696  0022C8  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16697  0022CA  D7FA               	bra	u12317
 16698  0022CC  D000               	nop2	
 16699                           
 16700                           ;Test.c: 395: updateServoPosition(400, 1);
 16701  0022CE  0E01               	movlw	1
 16702  0022D0  0100               	movlb	0	; () banked
 16703  0022D2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16704  0022D4  0E90               	movlw	144
 16705  0022D6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16706  0022D8  0E00               	movlw	0
 16707  0022DA  0100               	movlb	0	; () banked
 16708  0022DC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16709  0022DE  0E01               	movlw	1
 16710  0022E0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16711  0022E2  ECF6  F029         	call	_updateServoPosition	;wreg free
 16712                           
 16713                           ;Test.c: 396: updateServoPosition(1050, 3);
 16714  0022E6  0E04               	movlw	4
 16715  0022E8  0100               	movlb	0	; () banked
 16716  0022EA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16717  0022EC  0E1A               	movlw	26
 16718  0022EE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16719  0022F0  0E00               	movlw	0
 16720  0022F2  0100               	movlb	0	; () banked
 16721  0022F4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16722  0022F6  0E03               	movlw	3
 16723  0022F8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16724  0022FA  ECF6  F029         	call	_updateServoPosition	;wreg free
 16725                           
 16726                           ;Test.c: 397: _delay((unsigned long)((750)*(32000000/4000.0)));
 16727  0022FE  0E1F               	movlw	31
 16728  002300  0100               	movlb	0	; () banked
 16729  002302  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16730  002304  0E71               	movlw	113
 16731  002306  0100               	movlb	0	; () banked
 16732  002308  6FAB               	movwf	??_BothServos& (0+255),b
 16733  00230A  0E1E               	movlw	30
 16734  00230C                     u12327:
 16735  00230C  2EE8               	decfsz	wreg,f,c
 16736  00230E  D7FE               	bra	u12327
 16737  002310  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16738  002312  D7FC               	bra	u12327
 16739  002314  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16740  002316  D7FA               	bra	u12327
 16741  002318  F000               	nop	
 16742                           
 16743                           ;Test.c: 398: updateServoPosition(1260, 3);
 16744  00231A  0E04               	movlw	4
 16745  00231C  0100               	movlb	0	; () banked
 16746  00231E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16747  002320  0EEC               	movlw	236
 16748  002322  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16749  002324  0E00               	movlw	0
 16750  002326  0100               	movlb	0	; () banked
 16751  002328  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16752  00232A  0E03               	movlw	3
 16753  00232C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16754  00232E  ECF6  F029         	call	_updateServoPosition	;wreg free
 16755                           
 16756                           ;Test.c: 399: _delay((unsigned long)((700)*(32000000/4000.0)));
 16757  002332  0E1D               	movlw	29
 16758  002334  0100               	movlb	0	; () banked
 16759  002336  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16760  002338  0E69               	movlw	105
 16761  00233A  0100               	movlb	0	; () banked
 16762  00233C  6FAB               	movwf	??_BothServos& (0+255),b
 16763  00233E  0EA5               	movlw	165
 16764  002340                     u12337:
 16765  002340  2EE8               	decfsz	wreg,f,c
 16766  002342  D7FE               	bra	u12337
 16767  002344  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16768  002346  D7FC               	bra	u12337
 16769  002348  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16770  00234A  D7FA               	bra	u12337
 16771                           
 16772                           ;Test.c: 400: updateServoPosition(1050, 3);
 16773  00234C  0E04               	movlw	4
 16774  00234E  0100               	movlb	0	; () banked
 16775  002350  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16776  002352  0E1A               	movlw	26
 16777  002354  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16778  002356  0E00               	movlw	0
 16779  002358  0100               	movlb	0	; () banked
 16780  00235A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16781  00235C  0E03               	movlw	3
 16782  00235E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16783  002360  ECF6  F029         	call	_updateServoPosition	;wreg free
 16784                           
 16785                           ;Test.c: 401: _delay((unsigned long)((750)*(32000000/4000.0)));
 16786  002364  0E1F               	movlw	31
 16787  002366  0100               	movlb	0	; () banked
 16788  002368  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16789  00236A  0E71               	movlw	113
 16790  00236C  0100               	movlb	0	; () banked
 16791  00236E  6FAB               	movwf	??_BothServos& (0+255),b
 16792  002370  0E1E               	movlw	30
 16793  002372                     u12347:
 16794  002372  2EE8               	decfsz	wreg,f,c
 16795  002374  D7FE               	bra	u12347
 16796  002376  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16797  002378  D7FC               	bra	u12347
 16798  00237A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16799  00237C  D7FA               	bra	u12347
 16800  00237E  F000               	nop	
 16801                           
 16802                           ;Test.c: 403: updateServoPosition(850, 1);
 16803  002380  0E03               	movlw	3
 16804  002382  0100               	movlb	0	; () banked
 16805  002384  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16806  002386  0E52               	movlw	82
 16807  002388  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16808  00238A  0E00               	movlw	0
 16809  00238C  0100               	movlb	0	; () banked
 16810  00238E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16811  002390  0E01               	movlw	1
 16812  002392  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16813  002394  ECF6  F029         	call	_updateServoPosition	;wreg free
 16814                           
 16815                           ;Test.c: 404: updateServoPosition(1050, 3);
 16816  002398  0E04               	movlw	4
 16817  00239A  0100               	movlb	0	; () banked
 16818  00239C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16819  00239E  0E1A               	movlw	26
 16820  0023A0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16821  0023A2  0E00               	movlw	0
 16822  0023A4  0100               	movlb	0	; () banked
 16823  0023A6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16824  0023A8  0E03               	movlw	3
 16825  0023AA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16826  0023AC  ECF6  F029         	call	_updateServoPosition	;wreg free
 16827                           
 16828                           ;Test.c: 405: _delay((unsigned long)((750)*(32000000/4000.0)));
 16829  0023B0  0E1F               	movlw	31
 16830  0023B2  0100               	movlb	0	; () banked
 16831  0023B4  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16832  0023B6  0E71               	movlw	113
 16833  0023B8  0100               	movlb	0	; () banked
 16834  0023BA  6FAB               	movwf	??_BothServos& (0+255),b
 16835  0023BC  0E1E               	movlw	30
 16836  0023BE                     u12357:
 16837  0023BE  2EE8               	decfsz	wreg,f,c
 16838  0023C0  D7FE               	bra	u12357
 16839  0023C2  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16840  0023C4  D7FC               	bra	u12357
 16841  0023C6  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16842  0023C8  D7FA               	bra	u12357
 16843  0023CA  F000               	nop	
 16844                           
 16845                           ;Test.c: 406: updateServoPosition(1260, 3);
 16846  0023CC  0E04               	movlw	4
 16847  0023CE  0100               	movlb	0	; () banked
 16848  0023D0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16849  0023D2  0EEC               	movlw	236
 16850  0023D4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16851  0023D6  0E00               	movlw	0
 16852  0023D8  0100               	movlb	0	; () banked
 16853  0023DA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16854  0023DC  0E03               	movlw	3
 16855  0023DE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16856  0023E0  ECF6  F029         	call	_updateServoPosition	;wreg free
 16857                           
 16858                           ;Test.c: 407: _delay((unsigned long)((700)*(32000000/4000.0)));
 16859  0023E4  0E1D               	movlw	29
 16860  0023E6  0100               	movlb	0	; () banked
 16861  0023E8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16862  0023EA  0E69               	movlw	105
 16863  0023EC  0100               	movlb	0	; () banked
 16864  0023EE  6FAB               	movwf	??_BothServos& (0+255),b
 16865  0023F0  0EA5               	movlw	165
 16866  0023F2                     u12367:
 16867  0023F2  2EE8               	decfsz	wreg,f,c
 16868  0023F4  D7FE               	bra	u12367
 16869  0023F6  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16870  0023F8  D7FC               	bra	u12367
 16871  0023FA  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16872  0023FC  D7FA               	bra	u12367
 16873                           
 16874                           ;Test.c: 408: updateServoPosition(1050, 3);
 16875  0023FE  0E04               	movlw	4
 16876  002400  0100               	movlb	0	; () banked
 16877  002402  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16878  002404  0E1A               	movlw	26
 16879  002406  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16880  002408  0E00               	movlw	0
 16881  00240A  0100               	movlb	0	; () banked
 16882  00240C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16883  00240E  0E03               	movlw	3
 16884  002410  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16885  002412  ECF6  F029         	call	_updateServoPosition	;wreg free
 16886                           
 16887                           ;Test.c: 409: _delay((unsigned long)((750)*(32000000/4000.0)));
 16888  002416  0E1F               	movlw	31
 16889  002418  0100               	movlb	0	; () banked
 16890  00241A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16891  00241C  0E71               	movlw	113
 16892  00241E  0100               	movlb	0	; () banked
 16893  002420  6FAB               	movwf	??_BothServos& (0+255),b
 16894  002422  0E1E               	movlw	30
 16895  002424                     u12377:
 16896  002424  2EE8               	decfsz	wreg,f,c
 16897  002426  D7FE               	bra	u12377
 16898  002428  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16899  00242A  D7FC               	bra	u12377
 16900  00242C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16901  00242E  D7FA               	bra	u12377
 16902  002430  F000               	nop	
 16903                           
 16904                           ;Test.c: 411: updateServoPosition(400, 1);
 16905  002432  0E01               	movlw	1
 16906  002434  0100               	movlb	0	; () banked
 16907  002436  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16908  002438  0E90               	movlw	144
 16909  00243A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16910  00243C  0E00               	movlw	0
 16911  00243E  0100               	movlb	0	; () banked
 16912  002440  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16913  002442  0E01               	movlw	1
 16914  002444  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16915  002446  ECF6  F029         	call	_updateServoPosition	;wreg free
 16916                           
 16917                           ;Test.c: 412: updateServoPosition(1050, 3);
 16918  00244A  0E04               	movlw	4
 16919  00244C  0100               	movlb	0	; () banked
 16920  00244E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16921  002450  0E1A               	movlw	26
 16922  002452  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16923  002454  0E00               	movlw	0
 16924  002456  0100               	movlb	0	; () banked
 16925  002458  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16926  00245A  0E03               	movlw	3
 16927  00245C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16928  00245E  ECF6  F029         	call	_updateServoPosition	;wreg free
 16929                           
 16930                           ;Test.c: 413: _delay((unsigned long)((750)*(32000000/4000.0)));
 16931  002462  0E1F               	movlw	31
 16932  002464  0100               	movlb	0	; () banked
 16933  002466  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16934  002468  0E71               	movlw	113
 16935  00246A  0100               	movlb	0	; () banked
 16936  00246C  6FAB               	movwf	??_BothServos& (0+255),b
 16937  00246E  0E1E               	movlw	30
 16938  002470                     u12387:
 16939  002470  2EE8               	decfsz	wreg,f,c
 16940  002472  D7FE               	bra	u12387
 16941  002474  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16942  002476  D7FC               	bra	u12387
 16943  002478  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16944  00247A  D7FA               	bra	u12387
 16945  00247C  F000               	nop	
 16946                           
 16947                           ;Test.c: 414: updateServoPosition(1260, 3);
 16948  00247E  0E04               	movlw	4
 16949  002480  0100               	movlb	0	; () banked
 16950  002482  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16951  002484  0EEC               	movlw	236
 16952  002486  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16953  002488  0E00               	movlw	0
 16954  00248A  0100               	movlb	0	; () banked
 16955  00248C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16956  00248E  0E03               	movlw	3
 16957  002490  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16958  002492  ECF6  F029         	call	_updateServoPosition	;wreg free
 16959                           
 16960                           ;Test.c: 415: _delay((unsigned long)((700)*(32000000/4000.0)));
 16961  002496  0E1D               	movlw	29
 16962  002498  0100               	movlb	0	; () banked
 16963  00249A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16964  00249C  0E69               	movlw	105
 16965  00249E  0100               	movlb	0	; () banked
 16966  0024A0  6FAB               	movwf	??_BothServos& (0+255),b
 16967  0024A2  0EA5               	movlw	165
 16968  0024A4                     u12397:
 16969  0024A4  2EE8               	decfsz	wreg,f,c
 16970  0024A6  D7FE               	bra	u12397
 16971  0024A8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16972  0024AA  D7FC               	bra	u12397
 16973  0024AC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16974  0024AE  D7FA               	bra	u12397
 16975                           
 16976                           ;Test.c: 416: updateServoPosition(1050, 3);
 16977  0024B0  0E04               	movlw	4
 16978  0024B2  0100               	movlb	0	; () banked
 16979  0024B4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16980  0024B6  0E1A               	movlw	26
 16981  0024B8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16982  0024BA  0E00               	movlw	0
 16983  0024BC  0100               	movlb	0	; () banked
 16984  0024BE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16985  0024C0  0E03               	movlw	3
 16986  0024C2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16987  0024C4  ECF6  F029         	call	_updateServoPosition	;wreg free
 16988                           
 16989                           ;Test.c: 417: _delay((unsigned long)((1500)*(32000000/4000.0)));
 16990  0024C8  0E3D               	movlw	61
 16991  0024CA  0100               	movlb	0	; () banked
 16992  0024CC  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16993  0024CE  0EE1               	movlw	225
 16994  0024D0  0100               	movlb	0	; () banked
 16995  0024D2  6FAB               	movwf	??_BothServos& (0+255),b
 16996  0024D4  0E3F               	movlw	63
 16997  0024D6                     u12407:
 16998  0024D6  2EE8               	decfsz	wreg,f,c
 16999  0024D8  D7FE               	bra	u12407
 17000  0024DA  2FAB               	decfsz	??_BothServos& (0+255),f,b
 17001  0024DC  D7FC               	bra	u12407
 17002  0024DE  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 17003  0024E0  D7FA               	bra	u12407
 17004  0024E2  D000               	nop2	
 17005                           
 17006                           ;Test.c: 419: updateServoPosition(1550, 1);
 17007  0024E4  0E06               	movlw	6
 17008  0024E6  0100               	movlb	0	; () banked
 17009  0024E8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 17010  0024EA  0E0E               	movlw	14
 17011  0024EC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 17012  0024EE  0E00               	movlw	0
 17013  0024F0  0100               	movlb	0	; () banked
 17014  0024F2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 17015  0024F4  0E01               	movlw	1
 17016  0024F6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 17017  0024F8  ECF6  F029         	call	_updateServoPosition	;wreg free
 17018                           
 17019                           ;Test.c: 420: updateServoPosition(1050, 3);
 17020  0024FC  0E04               	movlw	4
 17021  0024FE  0100               	movlb	0	; () banked
 17022  002500  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 17023  002502  0E1A               	movlw	26
 17024  002504  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 17025  002506  0E00               	movlw	0
 17026  002508  0100               	movlb	0	; () banked
 17027  00250A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 17028  00250C  0E03               	movlw	3
 17029  00250E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 17030  002510  ECF6  F029         	call	_updateServoPosition	;wreg free
 17031                           
 17032                           ;Test.c: 421: _delay((unsigned long)((750)*(32000000/4000.0)));
 17033  002514  0E1F               	movlw	31
 17034  002516  0100               	movlb	0	; () banked
 17035  002518  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 17036  00251A  0E71               	movlw	113
 17037  00251C  0100               	movlb	0	; () banked
 17038  00251E  6FAB               	movwf	??_BothServos& (0+255),b
 17039  002520  0E1E               	movlw	30
 17040  002522                     u12417:
 17041  002522  2EE8               	decfsz	wreg,f,c
 17042  002524  D7FE               	bra	u12417
 17043  002526  2FAB               	decfsz	??_BothServos& (0+255),f,b
 17044  002528  D7FC               	bra	u12417
 17045  00252A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 17046  00252C  D7FA               	bra	u12417
 17047  00252E  F000               	nop	
 17048                           
 17049                           ;Test.c: 422: updateServoPosition(1390, 3);
 17050  002530  0E05               	movlw	5
 17051  002532  0100               	movlb	0	; () banked
 17052  002534  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 17053  002536  0E6E               	movlw	110
 17054  002538  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 17055  00253A  0E00               	movlw	0
 17056  00253C  0100               	movlb	0	; () banked
 17057  00253E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 17058  002540  0E03               	movlw	3
 17059  002542  6F82               	movwf	updateServoPosition@timer& (0+255),b
 17060  002544  ECF6  F029         	call	_updateServoPosition	;wreg free
 17061                           
 17062                           ;Test.c: 423: _delay((unsigned long)((700)*(32000000/4000.0)));
 17063  002548  0E1D               	movlw	29
 17064  00254A  0100               	movlb	0	; () banked
 17065  00254C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 17066  00254E  0E69               	movlw	105
 17067  002550  0100               	movlb	0	; () banked
 17068  002552  6FAB               	movwf	??_BothServos& (0+255),b
 17069  002554  0EA5               	movlw	165
 17070  002556                     u12427:
 17071  002556  2EE8               	decfsz	wreg,f,c
 17072  002558  D7FE               	bra	u12427
 17073  00255A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 17074  00255C  D7FC               	bra	u12427
 17075  00255E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 17076  002560  D7FA               	bra	u12427
 17077                           
 17078                           ;Test.c: 424: updateServoPosition(1050, 3);
 17079  002562  0E04               	movlw	4
 17080  002564  0100               	movlb	0	; () banked
 17081  002566  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 17082  002568  0E1A               	movlw	26
 17083  00256A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 17084  00256C  0E00               	movlw	0
 17085  00256E  0100               	movlb	0	; () banked
 17086  002570  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 17087  002572  0E03               	movlw	3
 17088  002574  6F82               	movwf	updateServoPosition@timer& (0+255),b
 17089  002576  ECF6  F029         	call	_updateServoPosition	;wreg free
 17090                           
 17091                           ;Test.c: 425: _delay((unsigned long)((750)*(32000000/4000.0)));
 17092  00257A  0E1F               	movlw	31
 17093  00257C  0100               	movlb	0	; () banked
 17094  00257E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 17095  002580  0E71               	movlw	113
 17096  002582  0100               	movlb	0	; () banked
 17097  002584  6FAB               	movwf	??_BothServos& (0+255),b
 17098  002586  0E1E               	movlw	30
 17099  002588                     u12437:
 17100  002588  2EE8               	decfsz	wreg,f,c
 17101  00258A  D7FE               	bra	u12437
 17102  00258C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 17103  00258E  D7FC               	bra	u12437
 17104  002590  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 17105  002592  D7FA               	bra	u12437
 17106  002594  F000               	nop	
 17107                           
 17108                           ;Test.c: 427: updateServoPosition(2500, 1);
 17109  002596  0E09               	movlw	9
 17110  002598  0100               	movlb	0	; () banked
 17111  00259A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 17112  00259C  0EC4               	movlw	196
 17113  00259E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 17114  0025A0  0E00               	movlw	0
 17115  0025A2  0100               	movlb	0	; () banked
 17116  0025A4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 17117  0025A6  0E01               	movlw	1
 17118  0025A8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 17119  0025AA  ECF6  F029         	call	_updateServoPosition	;wreg free
 17120                           
 17121                           ;Test.c: 428: updateServoPosition(1050, 3);
 17122  0025AE  0E04               	movlw	4
 17123  0025B0  0100               	movlb	0	; () banked
 17124  0025B2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 17125  0025B4  0E1A               	movlw	26
 17126  0025B6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 17127  0025B8  0E00               	movlw	0
 17128  0025BA  0100               	movlb	0	; () banked
 17129  0025BC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 17130  0025BE  0E03               	movlw	3
 17131  0025C0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 17132  0025C2  ECF6  F029         	call	_updateServoPosition	;wreg free
 17133                           
 17134                           ;Test.c: 429: _delay((unsigned long)((750)*(32000000/4000.0)));
 17135  0025C6  0E1F               	movlw	31
 17136  0025C8  0100               	movlb	0	; () banked
 17137  0025CA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 17138  0025CC  0E71               	movlw	113
 17139  0025CE  0100               	movlb	0	; () banked
 17140  0025D0  6FAB               	movwf	??_BothServos& (0+255),b
 17141  0025D2  0E1E               	movlw	30
 17142  0025D4                     u12447:
 17143  0025D4  2EE8               	decfsz	wreg,f,c
 17144  0025D6  D7FE               	bra	u12447
 17145  0025D8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 17146  0025DA  D7FC               	bra	u12447
 17147  0025DC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 17148  0025DE  D7FA               	bra	u12447
 17149  0025E0  F000               	nop	
 17150                           
 17151                           ;Test.c: 430: updateServoPosition(1390, 3);
 17152  0025E2  0E05               	movlw	5
 17153  0025E4  0100               	movlb	0	; () banked
 17154  0025E6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 17155  0025E8  0E6E               	movlw	110
 17156  0025EA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 17157  0025EC  0E00               	movlw	0
 17158  0025EE  0100               	movlb	0	; () banked
 17159  0025F0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 17160  0025F2  0E03               	movlw	3
 17161  0025F4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 17162  0025F6  ECF6  F029         	call	_updateServoPosition	;wreg free
 17163                           
 17164                           ;Test.c: 431: _delay((unsigned long)((700)*(32000000/4000.0)));
 17165  0025FA  0E1D               	movlw	29
 17166  0025FC  0100               	movlb	0	; () banked
 17167  0025FE  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 17168  002600  0E69               	movlw	105
 17169  002602  0100               	movlb	0	; () banked
 17170  002604  6FAB               	movwf	??_BothServos& (0+255),b
 17171  002606  0EA5               	movlw	165
 17172  002608                     u12457:
 17173  002608  2EE8               	decfsz	wreg,f,c
 17174  00260A  D7FE               	bra	u12457
 17175  00260C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 17176  00260E  D7FC               	bra	u12457
 17177  002610  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 17178  002612  D7FA               	bra	u12457
 17179                           
 17180                           ;Test.c: 432: updateServoPosition(1050, 3);
 17181  002614  0E04               	movlw	4
 17182  002616  0100               	movlb	0	; () banked
 17183  002618  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 17184  00261A  0E1A               	movlw	26
 17185  00261C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 17186  00261E  0E00               	movlw	0
 17187  002620  0100               	movlb	0	; () banked
 17188  002622  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 17189  002624  0E03               	movlw	3
 17190  002626  6F82               	movwf	updateServoPosition@timer& (0+255),b
 17191  002628  ECF6  F029         	call	_updateServoPosition	;wreg free
 17192                           
 17193                           ;Test.c: 433: _delay((unsigned long)((750)*(32000000/4000.0)));
 17194  00262C  0E1F               	movlw	31
 17195  00262E  0100               	movlb	0	; () banked
 17196  002630  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 17197  002632  0E71               	movlw	113
 17198  002634  0100               	movlb	0	; () banked
 17199  002636  6FAB               	movwf	??_BothServos& (0+255),b
 17200  002638  0E1E               	movlw	30
 17201  00263A                     u12467:
 17202  00263A  2EE8               	decfsz	wreg,f,c
 17203  00263C  D7FE               	bra	u12467
 17204  00263E  2FAB               	decfsz	??_BothServos& (0+255),f,b
 17205  002640  D7FC               	bra	u12467
 17206  002642  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 17207  002644  D7FA               	bra	u12467
 17208  002646  F000               	nop	
 17209                           
 17210                           ;Test.c: 435: stopSignals();
 17211  002648  EC24  F030         	call	_stopSignals	;wreg free
 17212                           
 17213                           ;Test.c: 436: machine_state = Testing_state;
 17214  00264C  0E03               	movlw	3
 17215  00264E  0100               	movlb	0	; () banked
 17216  002650  6FFC               	movwf	_machine_state& (0+255),b
 17217                           
 17218                           ; BSR set to: 0
 17219  002652  0012               	return		;funcret
 17220  002654                     __end_of_BothServos:
 17221                           	opt stack 0
 17222                           tblptru	equ	0xFF8
 17223                           tblptrh	equ	0xFF7
 17224                           tblptrl	equ	0xFF6
 17225                           tablat	equ	0xFF5
 17226                           prodh	equ	0xFF4
 17227                           prodl	equ	0xFF3
 17228                           intcon	equ	0xFF2
 17229                           intcon2	equ	0xFF1
 17230                           intcon3	equ	0xFF0
 17231                           postinc0	equ	0xFEE
 17232                           wreg	equ	0xFE8
 17233                           postdec1	equ	0xFE5
 17234                           fsr1l	equ	0xFE1
 17235                           indf2	equ	0xFDF
 17236                           postinc2	equ	0xFDE
 17237                           postdec2	equ	0xFDD
 17238                           fsr2h	equ	0xFDA
 17239                           fsr2l	equ	0xFD9
 17240                           status	equ	0xFD8
 17241                           
 17242 ;; *************** function _stopSignals *****************
 17243 ;; Defined at:
 17244 ;;		line 71 in file "main.c"
 17245 ;; Parameters:    Size  Location     Type
 17246 ;;		None
 17247 ;; Auto vars:     Size  Location     Type
 17248 ;;		None
 17249 ;; Return value:  Size  Location     Type
 17250 ;;                  1    wreg      void 
 17251 ;; Registers used:
 17252 ;;		wreg, status,2
 17253 ;; Tracked objects:
 17254 ;;		On entry : 0/0
 17255 ;;		On exit  : 0/0
 17256 ;;		Unchanged: 0/0
 17257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17261 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17262 ;;Total ram usage:        0 bytes
 17263 ;; Hardware stack levels used:    1
 17264 ;; Hardware stack levels required when called:    7
 17265 ;; This function calls:
 17266 ;;		Nothing
 17267 ;; This function is called by:
 17268 ;;		_main
 17269 ;;		_BothServos
 17270 ;;		_PlatformTest
 17271 ;;		_arm
 17272 ;; This function uses a non-reentrant model
 17273 ;;
 17274                           
 17275                           	psect	text51
 17276  006048                     __ptext51:
 17277                           	opt stack 0
 17278  006048                     _stopSignals:
 17279                           	opt stack 23
 17280                           
 17281                           ;main.c: 72: LATA = 0x00;
 17282                           
 17283                           ; BSR set to: 0
 17284                           ;incstack = 0
 17285  006048  0E00               	movlw	0
 17286  00604A  6E89               	movwf	3977,c	;volatile
 17287                           
 17288                           ;main.c: 73: LATB = 0x00;
 17289  00604C  0E00               	movlw	0
 17290  00604E  6E8A               	movwf	3978,c	;volatile
 17291                           
 17292                           ;main.c: 74: LATC = 0x00;
 17293  006050  0E00               	movlw	0
 17294  006052  6E8B               	movwf	3979,c	;volatile
 17295                           
 17296                           ;main.c: 75: LATD = 0x00;
 17297  006054  0E00               	movlw	0
 17298  006056  6E8C               	movwf	3980,c	;volatile
 17299                           
 17300                           ;main.c: 76: LATE = 0x00;
 17301  006058  0E00               	movlw	0
 17302  00605A  6E8D               	movwf	3981,c	;volatile
 17303                           
 17304                           ;main.c: 77: TMR1IE = 0;
 17305  00605C  909D               	bcf	3997,0,c	;volatile
 17306                           
 17307                           ;main.c: 78: TMR2IE = 0;
 17308  00605E  929D               	bcf	3997,1,c	;volatile
 17309                           
 17310                           ;main.c: 79: TMR3IE = 0;
 17311  006060  92A0               	bcf	4000,1,c	;volatile
 17312  006062  0012               	return		;funcret
 17313  006064                     __end_of_stopSignals:
 17314                           	opt stack 0
 17315                           tblptru	equ	0xFF8
 17316                           tblptrh	equ	0xFF7
 17317                           tblptrl	equ	0xFF6
 17318                           tablat	equ	0xFF5
 17319                           prodh	equ	0xFF4
 17320                           prodl	equ	0xFF3
 17321                           intcon	equ	0xFF2
 17322                           intcon2	equ	0xFF1
 17323                           intcon3	equ	0xFF0
 17324                           postinc0	equ	0xFEE
 17325                           wreg	equ	0xFE8
 17326                           postdec1	equ	0xFE5
 17327                           fsr1l	equ	0xFE1
 17328                           indf2	equ	0xFDF
 17329                           postinc2	equ	0xFDE
 17330                           postdec2	equ	0xFDD
 17331                           fsr2h	equ	0xFDA
 17332                           fsr2l	equ	0xFD9
 17333                           status	equ	0xFD8
 17334                           
 17335 ;; *************** function _initServos *****************
 17336 ;; Defined at:
 17337 ;;		line 522 in file "sort.c"
 17338 ;; Parameters:    Size  Location     Type
 17339 ;;		None
 17340 ;; Auto vars:     Size  Location     Type
 17341 ;;		None
 17342 ;; Return value:  Size  Location     Type
 17343 ;;                  1    wreg      void 
 17344 ;; Registers used:
 17345 ;;		wreg, status,2, status,0, cstack
 17346 ;; Tracked objects:
 17347 ;;		On entry : 0/0
 17348 ;;		On exit  : 0/0
 17349 ;;		Unchanged: 0/0
 17350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17353 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17354 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17355 ;;Total ram usage:        1 bytes
 17356 ;; Hardware stack levels used:    1
 17357 ;; Hardware stack levels required when called:    8
 17358 ;; This function calls:
 17359 ;;		_updateServoPosition
 17360 ;; This function is called by:
 17361 ;;		_Loading
 17362 ;;		_BothServos
 17363 ;; This function uses a non-reentrant model
 17364 ;;
 17365                           
 17366                           	psect	text52
 17367  00546A                     __ptext52:
 17368                           	opt stack 0
 17369  00546A                     _initServos:
 17370                           	opt stack 20
 17371                           
 17372                           ;sort.c: 524: updateServoPosition(1200, 1);
 17373                           
 17374                           ;incstack = 0
 17375  00546A  0E04               	movlw	4
 17376  00546C  0100               	movlb	0	; () banked
 17377  00546E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 17378  005470  0EB0               	movlw	176
 17379  005472  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 17380  005474  0E00               	movlw	0
 17381  005476  0100               	movlb	0	; () banked
 17382  005478  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 17383  00547A  0E01               	movlw	1
 17384  00547C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 17385  00547E  ECF6  F029         	call	_updateServoPosition	;wreg free
 17386                           
 17387                           ;sort.c: 525: updateServoPosition(1050, 3);
 17388  005482  0E04               	movlw	4
 17389  005484  0100               	movlb	0	; () banked
 17390  005486  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 17391  005488  0E1A               	movlw	26
 17392  00548A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 17393  00548C  0E00               	movlw	0
 17394  00548E  0100               	movlb	0	; () banked
 17395  005490  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 17396  005492  0E03               	movlw	3
 17397  005494  6F82               	movwf	updateServoPosition@timer& (0+255),b
 17398  005496  ECF6  F029         	call	_updateServoPosition	;wreg free
 17399                           
 17400                           ;sort.c: 526: TMR1ON = 1;
 17401  00549A  80CD               	bsf	4045,0,c	;volatile
 17402                           
 17403                           ;sort.c: 527: was_low_1 = 0;
 17404  00549C  0E00               	movlw	0
 17405  00549E  6E78               	movwf	_was_low_1+1,c	;volatile
 17406  0054A0  0E00               	movlw	0
 17407  0054A2  6E77               	movwf	_was_low_1,c	;volatile
 17408                           
 17409                           ;sort.c: 529: _delay((unsigned long)((5)*(32000000/4000.0)));
 17410  0054A4  0E34               	movlw	52
 17411  0054A6  0100               	movlb	0	; () banked
 17412  0054A8  6F88               	movwf	??_initServos& (0+255),b
 17413  0054AA  0EF1               	movlw	241
 17414  0054AC                     u12477:
 17415  0054AC  2EE8               	decfsz	wreg,f,c
 17416  0054AE  D7FE               	bra	u12477
 17417  0054B0  2F88               	decfsz	??_initServos& (0+255),f,b
 17418  0054B2  D7FC               	bra	u12477
 17419  0054B4  D000               	nop2	
 17420                           
 17421                           ;sort.c: 531: TMR3ON = 1;
 17422  0054B6  80B1               	bsf	4017,0,c	;volatile
 17423                           
 17424                           ;sort.c: 532: was_low_3 = 0;
 17425  0054B8  0E00               	movlw	0
 17426  0054BA  6E7C               	movwf	_was_low_3+1,c	;volatile
 17427  0054BC  0E00               	movlw	0
 17428  0054BE  6E7B               	movwf	_was_low_3,c	;volatile
 17429                           
 17430                           ;sort.c: 535: _delay((unsigned long)((1)*(32000000/4000.0)));
 17431  0054C0  0E0B               	movlw	11
 17432  0054C2  0100               	movlb	0	; () banked
 17433  0054C4  6F88               	movwf	??_initServos& (0+255),b
 17434  0054C6  0E62               	movlw	98
 17435  0054C8                     u12487:
 17436  0054C8  2EE8               	decfsz	wreg,f,c
 17437  0054CA  D7FE               	bra	u12487
 17438  0054CC  2F88               	decfsz	??_initServos& (0+255),f,b
 17439  0054CE  D7FC               	bra	u12487
 17440  0054D0  F000               	nop	
 17441                           
 17442                           ;sort.c: 536: LATBbits.LATB3 = 0;
 17443  0054D2  968A               	bcf	3978,3,c	;volatile
 17444                           
 17445                           ;sort.c: 537: TMR2ON = 1;
 17446  0054D4  84CA               	bsf	4042,2,c	;volatile
 17447                           
 17448                           ;sort.c: 538: was_low_2 = 0;
 17449  0054D6  0E00               	movlw	0
 17450  0054D8  6E7A               	movwf	_was_low_2+1,c	;volatile
 17451  0054DA  0E00               	movlw	0
 17452  0054DC  6E79               	movwf	_was_low_2,c	;volatile
 17453                           
 17454                           ;sort.c: 540: LATCbits.LATC0 = 1;
 17455  0054DE  808B               	bsf	3979,0,c	;volatile
 17456  0054E0  0012               	return		;funcret
 17457  0054E2                     __end_of_initServos:
 17458                           	opt stack 0
 17459                           tblptru	equ	0xFF8
 17460                           tblptrh	equ	0xFF7
 17461                           tblptrl	equ	0xFF6
 17462                           tablat	equ	0xFF5
 17463                           prodh	equ	0xFF4
 17464                           prodl	equ	0xFF3
 17465                           intcon	equ	0xFF2
 17466                           intcon2	equ	0xFF1
 17467                           intcon3	equ	0xFF0
 17468                           postinc0	equ	0xFEE
 17469                           wreg	equ	0xFE8
 17470                           postdec1	equ	0xFE5
 17471                           fsr1l	equ	0xFE1
 17472                           indf2	equ	0xFDF
 17473                           postinc2	equ	0xFDE
 17474                           postdec2	equ	0xFDD
 17475                           fsr2h	equ	0xFDA
 17476                           fsr2l	equ	0xFD9
 17477                           status	equ	0xFD8
 17478                           
 17479 ;; *************** function _updateServoPosition *****************
 17480 ;; Defined at:
 17481 ;;		line 642 in file "sort.c"
 17482 ;; Parameters:    Size  Location     Type
 17483 ;;  time_us         2    0[BANK0 ] int 
 17484 ;;  timer           2    2[BANK0 ] int 
 17485 ;; Auto vars:     Size  Location     Type
 17486 ;;  my_time         2    6[BANK0 ] unsigned int 
 17487 ;; Return value:  Size  Location     Type
 17488 ;;                  1    wreg      void 
 17489 ;; Registers used:
 17490 ;;		wreg, status,2, status,0
 17491 ;; Tracked objects:
 17492 ;;		On entry : 0/0
 17493 ;;		On exit  : 0/0
 17494 ;;		Unchanged: 0/0
 17495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17496 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17497 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17498 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17499 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17500 ;;Total ram usage:        8 bytes
 17501 ;; Hardware stack levels used:    1
 17502 ;; Hardware stack levels required when called:    7
 17503 ;; This function calls:
 17504 ;;		Nothing
 17505 ;; This function is called by:
 17506 ;;		_Distribution
 17507 ;;		_initServos
 17508 ;;		_actuatorTest
 17509 ;;		_BothServos
 17510 ;; This function uses a non-reentrant model
 17511 ;;
 17512                           
 17513                           	psect	text53
 17514  0053EC                     __ptext53:
 17515                           	opt stack 0
 17516  0053EC                     _updateServoPosition:
 17517                           	opt stack 20
 17518                           
 17519                           ;sort.c: 643: unsigned int my_time = 65535 - time_us;
 17520                           
 17521                           ;incstack = 0
 17522  0053EC  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 17523  0053F0  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 17524  0053F4  0100               	movlb	0	; () banked
 17525  0053F6  1F84               	comf	??_updateServoPosition& (0+255),f,b
 17526  0053F8  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 17527  0053FA  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 17528  0053FC  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 17529  0053FE  0EFF               	movlw	255
 17530  005400  0100               	movlb	0	; () banked
 17531  005402  2584               	addwf	??_updateServoPosition& (0+255),w,b
 17532  005404  0100               	movlb	0	; () banked
 17533  005406  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 17534  005408  0EFF               	movlw	255
 17535  00540A  0100               	movlb	0	; () banked
 17536  00540C  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 17537  00540E  0100               	movlb	0	; () banked
 17538  005410  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 17539                           
 17540                           ;sort.c: 644: switch(timer){
 17541  005412  D019               	goto	l7164
 17542  005414                     l7158:
 17543                           
 17544                           ; BSR set to: 0
 17545                           ;sort.c: 646: servoTimes[0] = my_time >> 8;
 17546  005414  0100               	movlb	0	; () banked
 17547  005416  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 17548  005418  6E55               	movwf	_servoTimes,c
 17549  00541A  6A56               	clrf	_servoTimes+1,c
 17550                           
 17551                           ;sort.c: 647: servoTimes[1] = my_time & 0xFF;
 17552  00541C  0100               	movlb	0	; () banked
 17553  00541E  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 17554  005420  6E57               	movwf	_servoTimes+2,c
 17555  005422  6A58               	clrf	_servoTimes+3,c
 17556                           
 17557                           ; BSR set to: 0
 17558                           ;sort.c: 649: pan_servo_state = time_us;
 17559  005424  C080  F06B         	movff	updateServoPosition@time_us,_pan_servo_state	;volatile
 17560  005428  C081  F06C         	movff	updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 17561  00542C                     l969:
 17562                           
 17563                           ; BSR set to: 0
 17564                           ;sort.c: 651: servoTimes[2] = my_time >> 8;
 17565  00542C  0100               	movlb	0	; () banked
 17566  00542E  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 17567  005430  6E59               	movwf	_servoTimes+4,c
 17568  005432  6A5A               	clrf	_servoTimes+5,c
 17569                           
 17570                           ;sort.c: 652: servoTimes[3] = my_time & 0xFF;
 17571  005434  0100               	movlb	0	; () banked
 17572  005436  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 17573  005438  6E5B               	movwf	_servoTimes+6,c
 17574  00543A  6A5C               	clrf	_servoTimes+7,c
 17575                           
 17576                           ; BSR set to: 0
 17577                           ;sort.c: 654: tilt_servo_state = time_us;
 17578  00543C  C080  F071         	movff	updateServoPosition@time_us,_tilt_servo_state	;volatile
 17579  005440  C081  F072         	movff	updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 17580                           
 17581                           ;sort.c: 655: }
 17582  005444  0012               	return	
 17583  005446                     l7164:
 17584                           
 17585                           ; BSR set to: 0
 17586  005446  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 17587  00544A  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 17588                           
 17589                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17590                           ; Switch size 1, requested type "space"
 17591                           ; Number of cases is 1, Range of values is 0 to 0
 17592                           ; switch strategies available:
 17593                           ; Name         Instructions Cycles
 17594                           ; simple_byte            4     3 (average)
 17595                           ;	Chosen strategy is simple_byte
 17596  00544E  0100               	movlb	0	; () banked
 17597  005450  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 17598  005452  0A00               	xorlw	0	; case 0
 17599  005454  A4D8               	btfss	status,2,c
 17600  005456  0012               	return	
 17601                           
 17602                           ; BSR set to: 0
 17603                           ; Switch size 1, requested type "space"
 17604                           ; Number of cases is 2, Range of values is 1 to 3
 17605                           ; switch strategies available:
 17606                           ; Name         Instructions Cycles
 17607                           ; simple_byte            7     4 (average)
 17608                           ;	Chosen strategy is simple_byte
 17609  005458  0100               	movlb	0	; () banked
 17610  00545A  5184               	movf	??_updateServoPosition& (0+255),w,b
 17611  00545C  0A01               	xorlw	1	; case 1
 17612  00545E  B4D8               	btfsc	status,2,c
 17613  005460  D7D9               	goto	l7158
 17614  005462  0A02               	xorlw	2	; case 3
 17615  005464  A4D8               	btfss	status,2,c
 17616  005466  0012               	return	
 17617  005468  D7E1               	goto	l969
 17618  00546A                     __end_of_updateServoPosition:
 17619                           	opt stack 0
 17620                           tblptru	equ	0xFF8
 17621                           tblptrh	equ	0xFF7
 17622                           tblptrl	equ	0xFF6
 17623                           tablat	equ	0xFF5
 17624                           prodh	equ	0xFF4
 17625                           prodl	equ	0xFF3
 17626                           intcon	equ	0xFF2
 17627                           intcon2	equ	0xFF1
 17628                           intcon3	equ	0xFF0
 17629                           postinc0	equ	0xFEE
 17630                           wreg	equ	0xFE8
 17631                           postdec1	equ	0xFE5
 17632                           fsr1l	equ	0xFE1
 17633                           indf2	equ	0xFDF
 17634                           postinc2	equ	0xFDE
 17635                           postdec2	equ	0xFDD
 17636                           fsr2h	equ	0xFDA
 17637                           fsr2l	equ	0xFD9
 17638                           status	equ	0xFD8
 17639                           
 17640 ;; *************** function _BlockerTest *****************
 17641 ;; Defined at:
 17642 ;;		line 605 in file "Test.c"
 17643 ;; Parameters:    Size  Location     Type
 17644 ;;		None
 17645 ;; Auto vars:     Size  Location     Type
 17646 ;;  i               2   45[BANK0 ] int 
 17647 ;;  cond_flag       2   51[BANK0 ] int 
 17648 ;;  cam_flag        2   49[BANK0 ] int 
 17649 ;;  res             2   47[BANK0 ] int 
 17650 ;; Return value:  Size  Location     Type
 17651 ;;                  1    wreg      void 
 17652 ;; Registers used:
 17653 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17654 ;; Tracked objects:
 17655 ;;		On entry : 0/0
 17656 ;;		On exit  : 0/0
 17657 ;;		Unchanged: 0/0
 17658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17660 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17661 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17662 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17663 ;;Total ram usage:       10 bytes
 17664 ;; Hardware stack levels used:    1
 17665 ;; Hardware stack levels required when called:   10
 17666 ;; This function calls:
 17667 ;;		_lcdInst
 17668 ;;		_printf
 17669 ;;		_readADC
 17670 ;; This function is called by:
 17671 ;;		_Test
 17672 ;; This function uses a non-reentrant model
 17673 ;;
 17674                           
 17675                           	psect	text54
 17676  004162                     __ptext54:
 17677                           	opt stack 0
 17678  004162                     _BlockerTest:
 17679                           	opt stack 19
 17680                           
 17681                           ;Test.c: 606: readADC(2);
 17682                           
 17683                           ; BSR set to: 0
 17684                           ;incstack = 0
 17685  004162  0E02               	movlw	2
 17686  004164  EC68  F02F         	call	_readADC
 17687                           
 17688                           ;Test.c: 607: int res = ADRESH<<8 | ADRESL;
 17689  004168  50C3               	movf	4035,w,c	;volatile
 17690  00416A  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 17691  00416E  0100               	movlb	0	; () banked
 17692  004170  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 17693  004172  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 17694  004176  0100               	movlb	0	; () banked
 17695  004178  6BAB               	clrf	??_BlockerTest& (0+255),b
 17696  00417A  0100               	movlb	0	; () banked
 17697  00417C  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 17698  00417E  0100               	movlb	0	; () banked
 17699  004180  6FAF               	movwf	BlockerTest@res& (0+255),b
 17700  004182  0100               	movlb	0	; () banked
 17701  004184  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 17702  004186  0100               	movlb	0	; () banked
 17703  004188  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 17704                           
 17705                           ; BSR set to: 0
 17706                           ;Test.c: 609: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 17707  00418A  0E01               	movlw	1
 17708  00418C  EC7D  F030         	call	_lcdInst
 17709  004190  0E68               	movlw	104
 17710  004192  0100               	movlb	0	; () banked
 17711  004194  6FAB               	movwf	??_BlockerTest& (0+255),b
 17712  004196  0EE4               	movlw	228
 17713  004198                     u12497:
 17714  004198  2EE8               	decfsz	wreg,f,c
 17715  00419A  D7FE               	bra	u12497
 17716  00419C  2FAB               	decfsz	??_BlockerTest& (0+255),f,b
 17717  00419E  D7FC               	bra	u12497
 17718  0041A0  F000               	nop	
 17719  0041A2  0E80               	movlw	128
 17720  0041A4  EC7D  F030         	call	_lcdInst
 17721                           
 17722                           ;Test.c: 610: printf("D:RET|2:C %d  ", res);
 17723  0041A8  0E73               	movlw	low STR_121
 17724  0041AA  0100               	movlb	0	; () banked
 17725  0041AC  6F8E               	movwf	printf@f& (0+255),b
 17726  0041AE  0EFE               	movlw	high STR_121
 17727  0041B0  0100               	movlb	0	; () banked
 17728  0041B2  6F8F               	movwf	(printf@f+1)& (0+255),b
 17729  0041B4  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 17730  0041B8  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 17731  0041BC  EC17  F00F         	call	_printf	;wreg free
 17732                           
 17733                           ;Test.c: 611: lcdInst(0b11000000);;
 17734  0041C0  0EC0               	movlw	192
 17735  0041C2  EC7D  F030         	call	_lcdInst
 17736                           
 17737                           ;Test.c: 612: printf("OTHER: CAM TOGGLE");
 17738  0041C6  0E53               	movlw	low STR_122
 17739  0041C8  0100               	movlb	0	; () banked
 17740  0041CA  6F8E               	movwf	printf@f& (0+255),b
 17741  0041CC  0EFB               	movlw	high STR_122
 17742  0041CE  0100               	movlb	0	; () banked
 17743  0041D0  6F8F               	movwf	(printf@f+1)& (0+255),b
 17744  0041D2  EC17  F00F         	call	_printf	;wreg free
 17745                           
 17746                           ;Test.c: 613: int cam_flag = 1;
 17747  0041D6  0E00               	movlw	0
 17748  0041D8  0100               	movlb	0	; () banked
 17749  0041DA  6FB2               	movwf	(BlockerTest@cam_flag+1)& (0+255),b
 17750  0041DC  0E01               	movlw	1
 17751  0041DE  6FB1               	movwf	BlockerTest@cam_flag& (0+255),b
 17752                           
 17753                           ; BSR set to: 0
 17754                           ;Test.c: 614: int cond_flag = 0;
 17755  0041E0  0E00               	movlw	0
 17756  0041E2  0100               	movlb	0	; () banked
 17757  0041E4  6FB4               	movwf	(BlockerTest@cond_flag+1)& (0+255),b
 17758  0041E6  0E00               	movlw	0
 17759  0041E8  6FB3               	movwf	BlockerTest@cond_flag& (0+255),b
 17760                           
 17761                           ; BSR set to: 0
 17762                           ;Test.c: 617: while(PORTBbits.RB1 == 0){
 17763                           
 17764                           ;Test.c: 616: while(1){
 17765  0041EA  D023               	goto	l9546
 17766  0041EC                     l9538:
 17767                           
 17768                           ;Test.c: 618: readADC(2);
 17769  0041EC  0E02               	movlw	2
 17770  0041EE  EC68  F02F         	call	_readADC
 17771                           
 17772                           ;Test.c: 619: res = ADRESH<<8 | ADRESL;
 17773  0041F2  50C3               	movf	4035,w,c	;volatile
 17774  0041F4  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 17775  0041F8  0100               	movlb	0	; () banked
 17776  0041FA  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 17777  0041FC  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 17778  004200  0100               	movlb	0	; () banked
 17779  004202  6BAB               	clrf	??_BlockerTest& (0+255),b
 17780  004204  0100               	movlb	0	; () banked
 17781  004206  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 17782  004208  0100               	movlb	0	; () banked
 17783  00420A  6FAF               	movwf	BlockerTest@res& (0+255),b
 17784  00420C  0100               	movlb	0	; () banked
 17785  00420E  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 17786  004210  0100               	movlb	0	; () banked
 17787  004212  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 17788                           
 17789                           ; BSR set to: 0
 17790                           ;Test.c: 620: lcdInst(0b10000000);;
 17791  004214  0E80               	movlw	128
 17792  004216  EC7D  F030         	call	_lcdInst
 17793                           
 17794                           ;Test.c: 621: printf("D:RET|2:C %d  ", res);
 17795  00421A  0E73               	movlw	low STR_121
 17796  00421C  0100               	movlb	0	; () banked
 17797  00421E  6F8E               	movwf	printf@f& (0+255),b
 17798  004220  0EFE               	movlw	high STR_121
 17799  004222  0100               	movlb	0	; () banked
 17800  004224  6F8F               	movwf	(printf@f+1)& (0+255),b
 17801  004226  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 17802  00422A  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 17803  00422E  EC17  F00F         	call	_printf	;wreg free
 17804  004232                     l9546:
 17805  004232  A281               	btfss	3969,1,c	;volatile
 17806  004234  D7DB               	goto	l9538
 17807                           
 17808                           ;Test.c: 622: }
 17809                           ;Test.c: 623: if(PORTB >> 4 == 0b1111){
 17810  004236  3881               	swapf	3969,w,c	;volatile
 17811  004238  0B0F               	andlw	15
 17812  00423A  0A0F               	xorlw	15
 17813  00423C  B4D8               	btfsc	status,2,c
 17814  00423E  0012               	return	
 17815                           
 17816                           ;Test.c: 626: else if(PORTB >> 4 == 0b0001){
 17817                           
 17818                           ;Test.c: 625: }
 17819                           
 17820                           ;Test.c: 624: break;
 17821  004240  3881               	swapf	3969,w,c	;volatile
 17822  004242  0B0F               	andlw	15
 17823  004244  06E8               	decf	wreg,f,c
 17824  004246  A4D8               	btfss	status,2,c
 17825  004248  D016               	goto	l9564
 17826                           
 17827                           ;Test.c: 627: if(cond_flag){
 17828  00424A  0100               	movlb	0	; () banked
 17829  00424C  51B3               	movf	BlockerTest@cond_flag& (0+255),w,b
 17830  00424E  0100               	movlb	0	; () banked
 17831  004250  11B4               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 17832  004252  B4D8               	btfsc	status,2,c
 17833  004254  D007               	goto	l1511
 17834                           
 17835                           ; BSR set to: 0
 17836                           ;Test.c: 628: LATCbits.LATC7 = 1;
 17837  004256  8E8B               	bsf	3979,7,c	;volatile
 17838  004258  D006               	goto	l9562
 17839  00425A                     u9211:
 17840  00425A  0E01               	movlw	1
 17841  00425C                     u9220:
 17842  00425C  0100               	movlb	0	; () banked
 17843  00425E  6FB3               	movwf	BlockerTest@cond_flag& (0+255),b
 17844  004260  6BB4               	clrf	(BlockerTest@cond_flag+1)& (0+255),b
 17845                           
 17846                           ;Test.c: 630: }
 17847  004262  D05F               	goto	l9592
 17848  004264                     l1511:
 17849                           
 17850                           ; BSR set to: 0
 17851                           ;Test.c: 631: else{
 17852                           ;Test.c: 632: LATCbits.LATC7 = 0;
 17853  004264  9E8B               	bcf	3979,7,c	;volatile
 17854  004266                     l9562:
 17855                           
 17856                           ; BSR set to: 0
 17857                           ;Test.c: 633: cond_flag = !cond_flag;
 17858  004266  0100               	movlb	0	; () banked
 17859  004268  51B3               	movf	BlockerTest@cond_flag& (0+255),w,b
 17860  00426A  0100               	movlb	0	; () banked
 17861  00426C  11B4               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 17862  00426E  B4D8               	btfsc	status,2,c
 17863  004270  D7F4               	goto	u9211
 17864  004272  0E00               	movlw	0
 17865  004274  D7F3               	goto	u9220
 17866  004276                     l9564:
 17867                           
 17868                           ;Test.c: 636: else{
 17869                           ;Test.c: 637: if(cam_flag){
 17870  004276  0100               	movlb	0	; () banked
 17871  004278  51B1               	movf	BlockerTest@cam_flag& (0+255),w,b
 17872  00427A  0100               	movlb	0	; () banked
 17873  00427C  11B2               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 17874  00427E  B4D8               	btfsc	status,2,c
 17875  004280  D007               	goto	l9570
 17876                           
 17877                           ; BSR set to: 0
 17878                           ;Test.c: 638: LATCbits.LATC0 = 1;
 17879  004282  808B               	bsf	3979,0,c	;volatile
 17880  004284  D023               	goto	l9582
 17881  004286                     u9261:
 17882  004286  0E01               	movlw	1
 17883  004288                     u9270:
 17884  004288  0100               	movlb	0	; () banked
 17885  00428A  6FB1               	movwf	BlockerTest@cam_flag& (0+255),b
 17886  00428C  6BB2               	clrf	(BlockerTest@cam_flag+1)& (0+255),b
 17887                           
 17888                           ;Test.c: 640: }
 17889  00428E  D049               	goto	l9592
 17890  004290                     l9570:
 17891                           
 17892                           ; BSR set to: 0
 17893                           ;Test.c: 641: else{
 17894                           ;Test.c: 642: for(int i=0;i<5000;i++)
 17895  004290  0E00               	movlw	0
 17896  004292  0100               	movlb	0	; () banked
 17897  004294  6FAE               	movwf	(BlockerTest@i+1)& (0+255),b
 17898  004296  0E00               	movlw	0
 17899  004298  6FAD               	movwf	BlockerTest@i& (0+255),b
 17900  00429A                     l9572:
 17901                           
 17902                           ; BSR set to: 0
 17903  00429A  0100               	movlb	0	; () banked
 17904  00429C  BFAE               	btfsc	(BlockerTest@i+1)& (0+255),7,b
 17905  00429E  D008               	goto	l1516
 17906  0042A0  0E88               	movlw	136
 17907  0042A2  0100               	movlb	0	; () banked
 17908  0042A4  5DAD               	subwf	BlockerTest@i& (0+255),w,b
 17909  0042A6  0E13               	movlw	19
 17910  0042A8  0100               	movlb	0	; () banked
 17911  0042AA  59AE               	subwfb	(BlockerTest@i+1)& (0+255),w,b
 17912  0042AC  B0D8               	btfsc	status,0,c
 17913  0042AE  D00D               	goto	l1517
 17914  0042B0                     l1516:
 17915                           
 17916                           ; BSR set to: 0
 17917                           ;Test.c: 643: {
 17918                           ;Test.c: 644: LATCbits.LATC0 = 1;
 17919  0042B0  808B               	bsf	3979,0,c	;volatile
 17920                           
 17921                           ; BSR set to: 0
 17922                           ;Test.c: 645: _delay((unsigned long)((10)*(32000000/4000000.0)));
 17923  0042B2  0E1A               	movlw	26
 17924  0042B4                     u12507:
 17925  0042B4  2EE8               	decfsz	wreg,f,c
 17926  0042B6  D7FE               	bra	u12507
 17927  0042B8  D000               	nop2	
 17928                           
 17929                           ;Test.c: 646: LATCbits.LATC0 = 0;
 17930  0042BA  908B               	bcf	3979,0,c	;volatile
 17931                           
 17932                           ;Test.c: 647: _delay((unsigned long)((90)*(32000000/4000000.0)));
 17933  0042BC  0EF0               	movlw	240
 17934  0042BE                     u12517:
 17935  0042BE  2EE8               	decfsz	wreg,f,c
 17936  0042C0  D7FE               	bra	u12517
 17937  0042C2  0100               	movlb	0	; () banked
 17938  0042C4  4BAD               	infsnz	BlockerTest@i& (0+255),f,b
 17939  0042C6  2BAE               	incf	(BlockerTest@i+1)& (0+255),f,b
 17940  0042C8  D7E8               	goto	l9572
 17941  0042CA                     l1517:
 17942                           
 17943                           ; BSR set to: 0
 17944                           ;Test.c: 648: }
 17945                           ;Test.c: 649: LATCbits.LATC0 = 0;
 17946  0042CA  908B               	bcf	3979,0,c	;volatile
 17947  0042CC                     l9582:
 17948                           
 17949                           ; BSR set to: 0
 17950                           ;Test.c: 650: cam_flag = !cam_flag;
 17951  0042CC  0100               	movlb	0	; () banked
 17952  0042CE  51B1               	movf	BlockerTest@cam_flag& (0+255),w,b
 17953  0042D0  0100               	movlb	0	; () banked
 17954  0042D2  11B2               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 17955  0042D4  B4D8               	btfsc	status,2,c
 17956  0042D6  D7D7               	goto	u9261
 17957  0042D8  0E00               	movlw	0
 17958  0042DA  D7D6               	goto	u9270
 17959  0042DC                     l9584:
 17960                           
 17961                           ;Test.c: 655: readADC(2);
 17962  0042DC  0E02               	movlw	2
 17963  0042DE  EC68  F02F         	call	_readADC
 17964                           
 17965                           ;Test.c: 656: res = ADRESH<<8 | ADRESL;
 17966  0042E2  50C3               	movf	4035,w,c	;volatile
 17967  0042E4  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 17968  0042E8  0100               	movlb	0	; () banked
 17969  0042EA  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 17970  0042EC  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 17971  0042F0  0100               	movlb	0	; () banked
 17972  0042F2  6BAB               	clrf	??_BlockerTest& (0+255),b
 17973  0042F4  0100               	movlb	0	; () banked
 17974  0042F6  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 17975  0042F8  0100               	movlb	0	; () banked
 17976  0042FA  6FAF               	movwf	BlockerTest@res& (0+255),b
 17977  0042FC  0100               	movlb	0	; () banked
 17978  0042FE  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 17979  004300  0100               	movlb	0	; () banked
 17980  004302  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 17981                           
 17982                           ; BSR set to: 0
 17983                           ;Test.c: 657: lcdInst(0b10000000);;
 17984  004304  0E80               	movlw	128
 17985  004306  EC7D  F030         	call	_lcdInst
 17986                           
 17987                           ;Test.c: 658: printf("D:RET|2:C %d  ", res);
 17988  00430A  0E73               	movlw	low STR_121
 17989  00430C  0100               	movlb	0	; () banked
 17990  00430E  6F8E               	movwf	printf@f& (0+255),b
 17991  004310  0EFE               	movlw	high STR_121
 17992  004312  0100               	movlb	0	; () banked
 17993  004314  6F8F               	movwf	(printf@f+1)& (0+255),b
 17994  004316  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 17995  00431A  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 17996  00431E  EC17  F00F         	call	_printf	;wreg free
 17997  004322                     l9592:
 17998  004322  A281               	btfss	3969,1,c	;volatile
 17999  004324  D786               	goto	l9546
 18000  004326  D7DA               	goto	l9584
 18001  004328                     __end_of_BlockerTest:
 18002                           	opt stack 0
 18003                           tblptru	equ	0xFF8
 18004                           tblptrh	equ	0xFF7
 18005                           tblptrl	equ	0xFF6
 18006                           tablat	equ	0xFF5
 18007                           prodh	equ	0xFF4
 18008                           prodl	equ	0xFF3
 18009                           intcon	equ	0xFF2
 18010                           intcon2	equ	0xFF1
 18011                           intcon3	equ	0xFF0
 18012                           postinc0	equ	0xFEE
 18013                           wreg	equ	0xFE8
 18014                           postdec1	equ	0xFE5
 18015                           fsr1l	equ	0xFE1
 18016                           indf2	equ	0xFDF
 18017                           postinc2	equ	0xFDE
 18018                           postdec2	equ	0xFDD
 18019                           fsr2h	equ	0xFDA
 18020                           fsr2l	equ	0xFD9
 18021                           status	equ	0xFD8
 18022                           
 18023 ;; *************** function _readADC *****************
 18024 ;; Defined at:
 18025 ;;		line 15 in file "ADCFunctionality.c"
 18026 ;; Parameters:    Size  Location     Type
 18027 ;;  channel         1    wreg     unsigned char 
 18028 ;; Auto vars:     Size  Location     Type
 18029 ;;  channel         1    1[BANK0 ] unsigned char 
 18030 ;; Return value:  Size  Location     Type
 18031 ;;                  1    wreg      void 
 18032 ;; Registers used:
 18033 ;;		wreg, status,2, status,0, cstack
 18034 ;; Tracked objects:
 18035 ;;		On entry : 0/0
 18036 ;;		On exit  : 0/0
 18037 ;;		Unchanged: 0/0
 18038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18040 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18041 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18042 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18043 ;;Total ram usage:        2 bytes
 18044 ;; Hardware stack levels used:    1
 18045 ;; Hardware stack levels required when called:    7
 18046 ;; This function calls:
 18047 ;;		Nothing
 18048 ;; This function is called by:
 18049 ;;		_readIR
 18050 ;;		_readMAG
 18051 ;;		_readCOND
 18052 ;;		_sensorTest
 18053 ;;		_PlatformTest
 18054 ;;		_BlockerTest
 18055 ;; This function uses a non-reentrant model
 18056 ;;
 18057                           
 18058                           	psect	text55
 18059  005ED0                     __ptext55:
 18060                           	opt stack 0
 18061  005ED0                     _readADC:
 18062                           	opt stack 20
 18063                           
 18064                           ;incstack = 0
 18065                           ;readADC@channel stored from wreg
 18066  005ED0  0100               	movlb	0	; () banked
 18067  005ED2  6F81               	movwf	readADC@channel& (0+255),b
 18068                           
 18069                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 18070  005ED4  0100               	movlb	0	; () banked
 18071  005ED6  4581               	rlncf	readADC@channel& (0+255),w,b
 18072  005ED8  46E8               	rlncf	wreg,f,c
 18073  005EDA  0BFC               	andlw	252
 18074  005EDC  6EC2               	movwf	4034,c	;volatile
 18075                           
 18076                           ; BSR set to: 0
 18077                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 18078  005EDE  80C2               	bsf	4034,0,c	;volatile
 18079                           
 18080                           ; BSR set to: 0
 18081                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 18082  005EE0  82C2               	bsf	4034,1,c	;volatile
 18083                           
 18084                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 18085  005EE2  D009               	goto	l6786
 18086  005EE4                     l6784:
 18087  005EE4  0E34               	movlw	52
 18088  005EE6  0100               	movlb	0	; () banked
 18089  005EE8  6F80               	movwf	??_readADC& (0+255),b
 18090  005EEA  0EF1               	movlw	241
 18091  005EEC                     u12527:
 18092  005EEC  2EE8               	decfsz	wreg,f,c
 18093  005EEE  D7FE               	bra	u12527
 18094  005EF0  2F80               	decfsz	??_readADC& (0+255),f,b
 18095  005EF2  D7FC               	bra	u12527
 18096  005EF4  D000               	nop2	
 18097  005EF6                     l6786:
 18098  005EF6  A2C2               	btfss	4034,1,c	;volatile
 18099  005EF8  0012               	return	
 18100  005EFA  D7F4               	goto	l6784
 18101  005EFC                     __end_of_readADC:
 18102                           	opt stack 0
 18103                           tblptru	equ	0xFF8
 18104                           tblptrh	equ	0xFF7
 18105                           tblptrl	equ	0xFF6
 18106                           tablat	equ	0xFF5
 18107                           prodh	equ	0xFF4
 18108                           prodl	equ	0xFF3
 18109                           intcon	equ	0xFF2
 18110                           intcon2	equ	0xFF1
 18111                           intcon3	equ	0xFF0
 18112                           postinc0	equ	0xFEE
 18113                           wreg	equ	0xFE8
 18114                           postdec1	equ	0xFE5
 18115                           fsr1l	equ	0xFE1
 18116                           indf2	equ	0xFDF
 18117                           postinc2	equ	0xFDE
 18118                           postdec2	equ	0xFDD
 18119                           fsr2h	equ	0xFDA
 18120                           fsr2l	equ	0xFD9
 18121                           status	equ	0xFD8
 18122                           
 18123 ;; *************** function _printf *****************
 18124 ;; Defined at:
 18125 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 18126 ;; Parameters:    Size  Location     Type
 18127 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 18128 ;;		 -> STR_128(18), STR_127(18), STR_126(17), STR_125(17), 
 18129 ;;		 -> STR_124(15), STR_123(15), STR_122(18), STR_121(15), 
 18130 ;;		 -> STR_120(18), STR_119(18), STR_118(17), STR_117(17), 
 18131 ;;		 -> STR_116(17), STR_115(17), STR_114(17), STR_113(17), 
 18132 ;;		 -> STR_112(18), STR_111(17), STR_110(15), STR_109(15), 
 18133 ;;		 -> STR_108(15), STR_107(17), STR_106(17), STR_105(17), 
 18134 ;;		 -> STR_104(16), STR_103(17), STR_102(17), STR_101(17), 
 18135 ;;		 -> STR_100(17), STR_99(17), STR_98(17), STR_97(15), 
 18136 ;;		 -> STR_96(11), STR_95(17), STR_94(11), STR_93(17), 
 18137 ;;		 -> STR_92(14), STR_91(15), STR_90(14), STR_89(10), 
 18138 ;;		 -> STR_88(9), STR_87(9), STR_86(10), STR_85(10), 
 18139 ;;		 -> STR_84(16), STR_83(15), STR_82(3), STR_81(18), 
 18140 ;;		 -> STR_80(3), STR_79(18), STR_78(14), STR_77(8), 
 18141 ;;		 -> STR_76(14), STR_75(15), STR_74(12), STR_73(14), 
 18142 ;;		 -> STR_72(17), STR_71(14), STR_70(15), STR_69(17), 
 18143 ;;		 -> STR_68(17), STR_67(7), STR_66(21), STR_65(9), 
 18144 ;;		 -> STR_64(14), STR_63(24), STR_50(17), STR_49(17), 
 18145 ;;		 -> STR_48(17), STR_47(17), STR_46(17), STR_45(17), 
 18146 ;;		 -> STR_44(17), STR_43(17), STR_42(17), STR_41(17), 
 18147 ;;		 -> STR_40(17), STR_39(17), STR_38(17), STR_37(17), 
 18148 ;;		 -> STR_36(17), STR_35(17), STR_34(17), STR_33(17), 
 18149 ;;		 -> STR_32(17), STR_31(17), STR_30(17), STR_29(3), 
 18150 ;;		 -> STR_28(17), STR_27(17), STR_26(17), STR_25(17), 
 18151 ;;		 -> STR_24(17), STR_23(14), STR_22(10), STR_21(24), 
 18152 ;;		 -> STR_7(7), STR_6(17), STR_5(18), STR_4(16), 
 18153 ;;		 -> STR_3(18), STR_2(14), STR_1(18), 
 18154 ;; Auto vars:     Size  Location     Type
 18155 ;;  tmpval          4    0        struct .
 18156 ;;  width           2   41[BANK0 ] int 
 18157 ;;  val             2   37[BANK0 ] unsigned int 
 18158 ;;  len             2   35[BANK0 ] unsigned int 
 18159 ;;  ap              2   33[BANK0 ] PTR void [1]
 18160 ;;		 -> ?i2_printf(2), ?_printf(2), 
 18161 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 18162 ;;		 -> STR_129(7), ID@res(4), ID@res1(2), count_total(2), 
 18163 ;;		 -> printRTC@month(4), UI@month(4), 
 18164 ;;  c               1   40[BANK0 ] char 
 18165 ;;  flag            1   39[BANK0 ] unsigned char 
 18166 ;;  prec            1   30[BANK0 ] char 
 18167 ;; Return value:  Size  Location     Type
 18168 ;;                  2   14[BANK0 ] int 
 18169 ;; Registers used:
 18170 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18171 ;; Tracked objects:
 18172 ;;		On entry : 0/0
 18173 ;;		On exit  : 0/0
 18174 ;;		Unchanged: 0/0
 18175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18176 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18177 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18178 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18179 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18180 ;;Total ram usage:       29 bytes
 18181 ;; Hardware stack levels used:    1
 18182 ;; Hardware stack levels required when called:    9
 18183 ;; This function calls:
 18184 ;;		___lwdiv
 18185 ;;		___lwmod
 18186 ;;		___wmul
 18187 ;;		_isdigit
 18188 ;;		_putch
 18189 ;; This function is called by:
 18190 ;;		_UI
 18191 ;;		_change_state_to_menu_start
 18192 ;;		_change_state_to_menu_12
 18193 ;;		_change_state_to_menu_22
 18194 ;;		_printRTC
 18195 ;;		_ID
 18196 ;;		_EEPROM_write
 18197 ;;		_Test
 18198 ;;		_algorithmTest
 18199 ;;		_sensorTest
 18200 ;;		_actuatorTest
 18201 ;;		_BothServos
 18202 ;;		_PortTestDC
 18203 ;;		_PlatformTest
 18204 ;;		_SpeedTest
 18205 ;;		_BlockerTest
 18206 ;;		_arm
 18207 ;;		_PortTestPusher
 18208 ;; This function uses a non-reentrant model
 18209 ;;
 18210                           
 18211                           	psect	text56
 18212  001E2E                     __ptext56:
 18213                           	opt stack 0
 18214  001E2E                     _printf:
 18215                           	opt stack 18
 18216                           
 18217                           ;doprnt.c: 466: va_list ap;
 18218                           ;doprnt.c: 499: signed char c;
 18219                           ;doprnt.c: 501: int width;
 18220                           ;doprnt.c: 506: signed char prec;
 18221                           ;doprnt.c: 508: unsigned char flag;
 18222                           ;doprnt.c: 523: union {
 18223                           ;doprnt.c: 524: unsigned long vd;
 18224                           ;doprnt.c: 525: double integ;
 18225                           ;doprnt.c: 526: } tmpval;
 18226                           ;doprnt.c: 528: unsigned int val;
 18227                           ;doprnt.c: 529: unsigned len;
 18228                           ;doprnt.c: 530: const char * cp;
 18229                           ;doprnt.c: 533: *ap = __va_start();
 18230                           
 18231                           ;incstack = 0
 18232  001E2E  0E90               	movlw	low (?_printf+2)
 18233  001E30  0100               	movlb	0	; () banked
 18234  001E32  6FA1               	movwf	printf@ap& (0+255),b
 18235  001E34  0E00               	movlw	high (?_printf+2)
 18236  001E36  0100               	movlb	0	; () banked
 18237  001E38  6FA2               	movwf	(printf@ap+1)& (0+255),b
 18238                           
 18239                           ;doprnt.c: 536: while(c = *f++) {
 18240  001E3A  D205               	goto	l7118
 18241  001E3C                     l6988:
 18242                           
 18243                           ; BSR set to: 0
 18244                           ;doprnt.c: 538: if(c != '%')
 18245  001E3C  0E25               	movlw	37
 18246  001E3E  0100               	movlb	0	; () banked
 18247  001E40  19A8               	xorwf	printf@c& (0+255),w,b
 18248  001E42  B4D8               	btfsc	status,2,c
 18249  001E44  D005               	goto	l6992
 18250                           
 18251                           ; BSR set to: 0
 18252                           ;doprnt.c: 540: {
 18253                           ;doprnt.c: 541: (putch(c) );
 18254  001E46  0100               	movlb	0	; () banked
 18255  001E48  51A8               	movf	printf@c& (0+255),w,b
 18256  001E4A  EC75  F030         	call	_putch
 18257                           
 18258                           ;doprnt.c: 542: continue;
 18259  001E4E  D1FB               	goto	l7118
 18260  001E50                     l6992:
 18261                           
 18262                           ;doprnt.c: 543: }
 18263                           ;doprnt.c: 546: width = 0;
 18264  001E50  0E00               	movlw	0
 18265  001E52  0100               	movlb	0	; () banked
 18266  001E54  6FAA               	movwf	(printf@width+1)& (0+255),b
 18267  001E56  0E00               	movlw	0
 18268  001E58  6FA9               	movwf	printf@width& (0+255),b
 18269                           
 18270                           ;doprnt.c: 548: flag = 0;
 18271  001E5A  0E00               	movlw	0
 18272  001E5C  0100               	movlb	0	; () banked
 18273  001E5E  6FA7               	movwf	printf@flag& (0+255),b
 18274                           
 18275                           ; BSR set to: 0
 18276                           ;doprnt.c: 551: switch(*f) {
 18277                           
 18278                           ;doprnt.c: 550: for(;;) {
 18279  001E60  D005               	goto	l6998
 18280  001E62                     l6994:
 18281                           
 18282                           ;doprnt.c: 580: flag |= 0x04;
 18283  001E62  0100               	movlb	0	; () banked
 18284  001E64  85A7               	bsf	printf@flag& (0+255),2,b
 18285                           
 18286                           ;doprnt.c: 581: f++;
 18287  001E66  0100               	movlb	0	; () banked
 18288  001E68  4B8E               	infsnz	printf@f& (0+255),f,b
 18289  001E6A  2B8F               	incf	(printf@f+1)& (0+255),f,b
 18290  001E6C                     l6998:
 18291  001E6C  C08E  FFF6         	movff	printf@f,tblptrl
 18292  001E70  C08F  FFF7         	movff	printf@f+1,tblptrh
 18293  001E74                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18294  001E74  6AF8               	clrf	tblptru,c
 18295  001E76                     	endif
 18296  001E76                     	if	0	;tblptru may be non-zero
 18297  001E76                     	endif
 18298  001E76  0008               	tblrd		*
 18299  001E78  50F5               	movf	tablat,w,c
 18300                           
 18301                           ; Switch size 1, requested type "space"
 18302                           ; Number of cases is 1, Range of values is 48 to 48
 18303                           ; switch strategies available:
 18304                           ; Name         Instructions Cycles
 18305                           ; simple_byte            4     3 (average)
 18306                           ;	Chosen strategy is simple_byte
 18307  001E7A  0A30               	xorlw	48	; case 48
 18308  001E7C  B4D8               	btfsc	status,2,c
 18309  001E7E  D7F1               	goto	l6994
 18310                           
 18311                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 18312                           
 18313                           ;doprnt.c: 586: }
 18314                           
 18315                           ;doprnt.c: 585: break;
 18316  001E80  C08E  FFF6         	movff	printf@f,tblptrl
 18317  001E84  C08F  FFF7         	movff	printf@f+1,tblptrh
 18318  001E88                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18319  001E88  6AF8               	clrf	tblptru,c
 18320  001E8A                     	endif
 18321  001E8A                     	if	0	;tblptru may be non-zero
 18322  001E8A                     	endif
 18323  001E8A  0008               	tblrd		*
 18324  001E8C  50F5               	movf	tablat,w,c
 18325  001E8E  EC7E  F02F         	call	_isdigit
 18326  001E92  A0D8               	btfss	status,0,c
 18327  001E94  D0D2               	goto	l7046
 18328                           
 18329                           ;doprnt.c: 598: width = 0;
 18330  001E96  0E00               	movlw	0
 18331  001E98  0100               	movlb	0	; () banked
 18332  001E9A  6FAA               	movwf	(printf@width+1)& (0+255),b
 18333  001E9C  0E00               	movlw	0
 18334  001E9E  6FA9               	movwf	printf@width& (0+255),b
 18335  001EA0                     l7004:
 18336                           
 18337                           ;doprnt.c: 600: width *= 10;
 18338  001EA0  C0A9  F080         	movff	printf@width,___wmul@multiplier
 18339  001EA4  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 18340  001EA8  0E00               	movlw	0
 18341  001EAA  0100               	movlb	0	; () banked
 18342  001EAC  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 18343  001EAE  0E0A               	movlw	10
 18344  001EB0  6F82               	movwf	___wmul@multiplicand& (0+255),b
 18345  001EB2  ECE8  F02D         	call	___wmul	;wreg free
 18346  001EB6  C080  F0A9         	movff	?___wmul,printf@width
 18347  001EBA  C081  F0AA         	movff	?___wmul+1,printf@width+1
 18348                           
 18349                           ;doprnt.c: 601: width += *f++ - '0';
 18350  001EBE  0ED0               	movlw	208
 18351  001EC0  0100               	movlb	0	; () banked
 18352  001EC2  6F9A               	movwf	??_printf& (0+255),b
 18353  001EC4  0EFF               	movlw	255
 18354  001EC6  0100               	movlb	0	; () banked
 18355  001EC8  6F9B               	movwf	(??_printf+1)& (0+255),b
 18356  001ECA  C08E  FFF6         	movff	printf@f,tblptrl
 18357  001ECE  C08F  FFF7         	movff	printf@f+1,tblptrh
 18358  001ED2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18359  001ED2  6AF8               	clrf	tblptru,c
 18360  001ED4                     	endif
 18361  001ED4                     	if	0	;tblptru may be non-zero
 18362  001ED4                     	endif
 18363  001ED4  0008               	tblrd		*
 18364  001ED6  50F5               	movf	tablat,w,c
 18365  001ED8  0100               	movlb	0	; () banked
 18366  001EDA  6F9C               	movwf	(??_printf+2)& (0+255),b
 18367  001EDC  6B9D               	clrf	(??_printf+3)& (0+255),b
 18368  001EDE  0100               	movlb	0	; () banked
 18369  001EE0  519A               	movf	??_printf& (0+255),w,b
 18370  001EE2  0100               	movlb	0	; () banked
 18371  001EE4  279C               	addwf	(??_printf+2)& (0+255),f,b
 18372  001EE6  0100               	movlb	0	; () banked
 18373  001EE8  519B               	movf	(??_printf+1)& (0+255),w,b
 18374  001EEA  0100               	movlb	0	; () banked
 18375  001EEC  239D               	addwfc	(??_printf+3)& (0+255),f,b
 18376  001EEE  0100               	movlb	0	; () banked
 18377  001EF0  519C               	movf	(??_printf+2)& (0+255),w,b
 18378  001EF2  0100               	movlb	0	; () banked
 18379  001EF4  27A9               	addwf	printf@width& (0+255),f,b
 18380  001EF6  0100               	movlb	0	; () banked
 18381  001EF8  519D               	movf	(??_printf+3)& (0+255),w,b
 18382  001EFA  0100               	movlb	0	; () banked
 18383  001EFC  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 18384                           
 18385                           ; BSR set to: 0
 18386  001EFE  0100               	movlb	0	; () banked
 18387  001F00  4B8E               	infsnz	printf@f& (0+255),f,b
 18388  001F02  2B8F               	incf	(printf@f+1)& (0+255),f,b
 18389                           
 18390                           ; BSR set to: 0
 18391                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 18392  001F04  C08E  FFF6         	movff	printf@f,tblptrl
 18393  001F08  C08F  FFF7         	movff	printf@f+1,tblptrh
 18394  001F0C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18395  001F0C  6AF8               	clrf	tblptru,c
 18396  001F0E                     	endif
 18397  001F0E                     	if	0	;tblptru may be non-zero
 18398  001F0E                     	endif
 18399  001F0E  0008               	tblrd		*
 18400  001F10  50F5               	movf	tablat,w,c
 18401  001F12  EC7E  F02F         	call	_isdigit
 18402  001F16  A0D8               	btfss	status,0,c
 18403  001F18  D090               	goto	l7046
 18404  001F1A  D7C2               	goto	l7004
 18405  001F1C                     l7012:
 18406                           
 18407                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 18408  001F1C  C0A1  FFD9         	movff	printf@ap,fsr2l
 18409  001F20  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 18410  001F24  CFDE F09F          	movff	postinc2,printf@cp
 18411  001F28  CFDD F0A0          	movff	postdec2,printf@cp+1
 18412  001F2C  0E02               	movlw	2
 18413  001F2E  0100               	movlb	0	; () banked
 18414  001F30  27A1               	addwf	printf@ap& (0+255),f,b
 18415  001F32  0E00               	movlw	0
 18416  001F34  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 18417                           
 18418                           ; BSR set to: 0
 18419                           ;doprnt.c: 740: if(!cp)
 18420  001F36  0100               	movlb	0	; () banked
 18421  001F38  519F               	movf	printf@cp& (0+255),w,b
 18422  001F3A  0100               	movlb	0	; () banked
 18423  001F3C  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 18424  001F3E  A4D8               	btfss	status,2,c
 18425  001F40  D006               	goto	l7020
 18426                           
 18427                           ; BSR set to: 0
 18428                           ;doprnt.c: 741: cp = "(null)";
 18429  001F42  0EB6               	movlw	low STR_129
 18430  001F44  0100               	movlb	0	; () banked
 18431  001F46  6F9F               	movwf	printf@cp& (0+255),b
 18432  001F48  0EFF               	movlw	high STR_129
 18433  001F4A  0100               	movlb	0	; () banked
 18434  001F4C  6FA0               	movwf	(printf@cp+1)& (0+255),b
 18435  001F4E                     l7020:
 18436                           
 18437                           ; BSR set to: 0
 18438                           ;doprnt.c: 745: len = 0;
 18439  001F4E  0E00               	movlw	0
 18440  001F50  0100               	movlb	0	; () banked
 18441  001F52  6FA4               	movwf	(printf@len+1)& (0+255),b
 18442  001F54  0E00               	movlw	0
 18443  001F56  6FA3               	movwf	printf@len& (0+255),b
 18444                           
 18445                           ;doprnt.c: 746: while(cp[len])
 18446  001F58  D003               	goto	l7024
 18447  001F5A                     l7022:
 18448                           
 18449                           ;doprnt.c: 747: len++;
 18450  001F5A  0100               	movlb	0	; () banked
 18451  001F5C  4BA3               	infsnz	printf@len& (0+255),f,b
 18452  001F5E  2BA4               	incf	(printf@len+1)& (0+255),f,b
 18453  001F60                     l7024:
 18454                           
 18455                           ; BSR set to: 0
 18456  001F60  0100               	movlb	0	; () banked
 18457  001F62  51A3               	movf	printf@len& (0+255),w,b
 18458  001F64  0100               	movlb	0	; () banked
 18459  001F66  259F               	addwf	printf@cp& (0+255),w,b
 18460  001F68  0100               	movlb	0	; () banked
 18461  001F6A  6F9A               	movwf	??_printf& (0+255),b
 18462  001F6C  0100               	movlb	0	; () banked
 18463  001F6E  51A4               	movf	(printf@len+1)& (0+255),w,b
 18464  001F70  0100               	movlb	0	; () banked
 18465  001F72  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 18466  001F74  0100               	movlb	0	; () banked
 18467  001F76  6F9B               	movwf	(??_printf+1)& (0+255),b
 18468  001F78  C09A  FFF6         	movff	??_printf,tblptrl
 18469  001F7C  C09B  FFF7         	movff	??_printf+1,tblptrh
 18470  001F80  0E00               	movlw	low (__mediumconst shr (0+16))
 18471  001F82  6EF8               	movwf	tblptru,c
 18472  001F84  0E0F               	movlw	(high __ramtop+-1)
 18473  001F86  64F7               	cpfsgt	tblptrh,c
 18474  001F88  D003               	bra	u5827
 18475  001F8A  0008               	tblrd		*
 18476  001F8C  50F5               	movf	tablat,w,c
 18477  001F8E  D005               	bra	u5820
 18478  001F90                     u5827:
 18479  001F90  CFF6 FFE9          	movff	tblptrl,fsr0l
 18480  001F94  CFF7 FFEA          	movff	tblptrh,fsr0h
 18481  001F98  50EF               	movf	indf0,w,c
 18482  001F9A                     u5820:
 18483  001F9A  0900               	iorlw	0
 18484  001F9C  A4D8               	btfss	status,2,c
 18485  001F9E  D7DD               	goto	l7022
 18486                           
 18487                           ;doprnt.c: 757: if(width > len)
 18488  001FA0  0100               	movlb	0	; () banked
 18489  001FA2  51A9               	movf	printf@width& (0+255),w,b
 18490  001FA4  0100               	movlb	0	; () banked
 18491  001FA6  5DA3               	subwf	printf@len& (0+255),w,b
 18492  001FA8  0100               	movlb	0	; () banked
 18493  001FAA  51AA               	movf	(printf@width+1)& (0+255),w,b
 18494  001FAC  0100               	movlb	0	; () banked
 18495  001FAE  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 18496  001FB0  B0D8               	btfsc	status,0,c
 18497  001FB2  D009               	goto	l7030
 18498                           
 18499                           ; BSR set to: 0
 18500                           ;doprnt.c: 758: width -= len;
 18501  001FB4  0100               	movlb	0	; () banked
 18502  001FB6  51A3               	movf	printf@len& (0+255),w,b
 18503  001FB8  0100               	movlb	0	; () banked
 18504  001FBA  5FA9               	subwf	printf@width& (0+255),f,b
 18505  001FBC  0100               	movlb	0	; () banked
 18506  001FBE  51A4               	movf	(printf@len+1)& (0+255),w,b
 18507  001FC0  0100               	movlb	0	; () banked
 18508  001FC2  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 18509  001FC4  D009               	goto	l7034
 18510  001FC6                     l7030:
 18511                           
 18512                           ; BSR set to: 0
 18513                           ;doprnt.c: 759: else
 18514                           ;doprnt.c: 760: width = 0;
 18515  001FC6  0E00               	movlw	0
 18516  001FC8  0100               	movlb	0	; () banked
 18517  001FCA  6FAA               	movwf	(printf@width+1)& (0+255),b
 18518  001FCC  0E00               	movlw	0
 18519  001FCE  6FA9               	movwf	printf@width& (0+255),b
 18520                           
 18521                           ; BSR set to: 0
 18522                           ;doprnt.c: 764: while(width--)
 18523  001FD0  D003               	goto	l7034
 18524  001FD2                     l7032:
 18525                           
 18526                           ; BSR set to: 0
 18527                           ;doprnt.c: 765: (putch(' ') );
 18528  001FD2  0E20               	movlw	32
 18529  001FD4  EC75  F030         	call	_putch
 18530  001FD8                     l7034:
 18531  001FD8  0100               	movlb	0	; () banked
 18532  001FDA  07A9               	decf	printf@width& (0+255),f,b
 18533  001FDC  A0D8               	btfss	status,0,c
 18534  001FDE  07AA               	decf	(printf@width+1)& (0+255),f,b
 18535  001FE0  0100               	movlb	0	; () banked
 18536  001FE2  29A9               	incf	printf@width& (0+255),w,b
 18537  001FE4  E1F6               	bnz	l7032
 18538  001FE6  0100               	movlb	0	; () banked
 18539  001FE8  29AA               	incf	(printf@width+1)& (0+255),w,b
 18540  001FEA  B4D8               	btfsc	status,2,c
 18541  001FEC  D017               	goto	l7040
 18542  001FEE  D7F1               	goto	l7032
 18543  001FF0                     l7036:
 18544                           
 18545                           ; BSR set to: 0
 18546                           ;doprnt.c: 768: (putch(*cp++) );
 18547  001FF0  C09F  FFF6         	movff	printf@cp,tblptrl
 18548  001FF4  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 18549  001FF8  0E00               	movlw	low (__mediumconst shr (0+16))
 18550  001FFA  6EF8               	movwf	tblptru,c
 18551  001FFC  0E0F               	movlw	(high __ramtop+-1)
 18552  001FFE  64F7               	cpfsgt	tblptrh,c
 18553  002000  D003               	bra	u5867
 18554  002002  0008               	tblrd		*
 18555  002004  50F5               	movf	tablat,w,c
 18556  002006  D005               	bra	u5860
 18557  002008                     u5867:
 18558  002008  CFF6 FFE9          	movff	tblptrl,fsr0l
 18559  00200C  CFF7 FFEA          	movff	tblptrh,fsr0h
 18560  002010  50EF               	movf	indf0,w,c
 18561  002012                     u5860:
 18562  002012  EC75  F030         	call	_putch
 18563  002016  0100               	movlb	0	; () banked
 18564  002018  4B9F               	infsnz	printf@cp& (0+255),f,b
 18565  00201A  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 18566  00201C                     l7040:
 18567                           
 18568                           ; BSR set to: 0
 18569  00201C  0100               	movlb	0	; () banked
 18570  00201E  07A3               	decf	printf@len& (0+255),f,b
 18571  002020  A0D8               	btfss	status,0,c
 18572  002022  07A4               	decf	(printf@len+1)& (0+255),f,b
 18573  002024  0100               	movlb	0	; () banked
 18574  002026  29A3               	incf	printf@len& (0+255),w,b
 18575  002028  E1E3               	bnz	l7036
 18576  00202A  0100               	movlb	0	; () banked
 18577  00202C  29A4               	incf	(printf@len+1)& (0+255),w,b
 18578  00202E  B4D8               	btfsc	status,2,c
 18579  002030  D10A               	goto	l7118
 18580  002032  D7DE               	goto	l7036
 18581  002034                     l7042:
 18582                           
 18583                           ; BSR set to: 0
 18584                           ;doprnt.c: 818: flag |= 0x40;
 18585  002034  0100               	movlb	0	; () banked
 18586  002036  8DA7               	bsf	printf@flag& (0+255),6,b
 18587                           
 18588                           ; BSR set to: 0
 18589                           ;doprnt.c: 822: }
 18590                           
 18591                           ;doprnt.c: 819: break;
 18592  002038  D01D               	goto	l1588
 18593  00203A                     l7046:
 18594  00203A  C08E  FFF6         	movff	printf@f,tblptrl
 18595  00203E  C08F  FFF7         	movff	printf@f+1,tblptrh
 18596  002042  0100               	movlb	0	; () banked
 18597  002044  4B8E               	infsnz	printf@f& (0+255),f,b
 18598  002046  2B8F               	incf	(printf@f+1)& (0+255),f,b
 18599  002048                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18600  002048  6AF8               	clrf	tblptru,c
 18601  00204A                     	endif
 18602  00204A                     	if	0	;tblptru may be non-zero
 18603  00204A                     	endif
 18604  00204A  0008               	tblrd		*
 18605  00204C  CFF5 F0A8          	movff	tablat,printf@c
 18606  002050  0100               	movlb	0	; () banked
 18607  002052  51A8               	movf	printf@c& (0+255),w,b
 18608                           
 18609                           ; Switch size 1, requested type "space"
 18610                           ; Number of cases is 5, Range of values is 0 to 117
 18611                           ; switch strategies available:
 18612                           ; Name         Instructions Cycles
 18613                           ; simple_byte           16     9 (average)
 18614                           ;	Chosen strategy is simple_byte
 18615  002054  0A00               	xorlw	0	; case 0
 18616  002056  B4D8               	btfsc	status,2,c
 18617  002058  0012               	return	
 18618  00205A  0A64               	xorlw	100	; case 100
 18619  00205C  B4D8               	btfsc	status,2,c
 18620  00205E  D00A               	goto	l1588
 18621  002060  0A0D               	xorlw	13	; case 105
 18622  002062  B4D8               	btfsc	status,2,c
 18623  002064  D007               	goto	l1588
 18624  002066  0A1A               	xorlw	26	; case 115
 18625  002068  B4D8               	btfsc	status,2,c
 18626  00206A  D758               	goto	l7012
 18627  00206C  0A06               	xorlw	6	; case 117
 18628  00206E  B4D8               	btfsc	status,2,c
 18629  002070  D7E1               	goto	l7042
 18630  002072  D0E9               	goto	l7118
 18631  002074                     l1588:
 18632                           
 18633                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 18634  002074  0100               	movlb	0	; () banked
 18635  002076  BDA7               	btfsc	printf@flag& (0+255),6,b
 18636  002078  D019               	goto	l7058
 18637                           
 18638                           ; BSR set to: 0
 18639                           ;doprnt.c: 1253: {
 18640                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 18641  00207A  C0A1  FFD9         	movff	printf@ap,fsr2l
 18642  00207E  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 18643  002082  CFDE F0A5          	movff	postinc2,printf@val
 18644  002086  CFDD F0A6          	movff	postdec2,printf@val+1
 18645                           
 18646                           ; BSR set to: 0
 18647  00208A  0E02               	movlw	2
 18648  00208C  0100               	movlb	0	; () banked
 18649  00208E  27A1               	addwf	printf@ap& (0+255),f,b
 18650  002090  0E00               	movlw	0
 18651  002092  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 18652                           
 18653                           ; BSR set to: 0
 18654                           ;doprnt.c: 1261: if((int)val < 0) {
 18655  002094  0100               	movlb	0	; () banked
 18656  002096  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 18657  002098  D016               	goto	l7062
 18658                           
 18659                           ; BSR set to: 0
 18660                           ;doprnt.c: 1262: flag |= 0x03;
 18661  00209A  0E03               	movlw	3
 18662  00209C  0100               	movlb	0	; () banked
 18663  00209E  13A7               	iorwf	printf@flag& (0+255),f,b
 18664                           
 18665                           ; BSR set to: 0
 18666                           ;doprnt.c: 1263: val = -val;
 18667  0020A0  0100               	movlb	0	; () banked
 18668  0020A2  6DA5               	negf	printf@val& (0+255),b
 18669  0020A4  1FA6               	comf	(printf@val+1)& (0+255),f,b
 18670  0020A6  B0D8               	btfsc	status,0,c
 18671  0020A8  2BA6               	incf	(printf@val+1)& (0+255),f,b
 18672                           
 18673                           ; BSR set to: 0
 18674                           ;doprnt.c: 1264: }
 18675                           ;doprnt.c: 1266: }
 18676  0020AA  D00D               	goto	l7062
 18677  0020AC                     l7058:
 18678                           
 18679                           ; BSR set to: 0
 18680                           ;doprnt.c: 1268: else
 18681                           ;doprnt.c: 1273: {
 18682                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 18683  0020AC  C0A1  FFD9         	movff	printf@ap,fsr2l
 18684  0020B0  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 18685  0020B4  CFDE F0A5          	movff	postinc2,printf@val
 18686  0020B8  CFDD F0A6          	movff	postdec2,printf@val+1
 18687                           
 18688                           ; BSR set to: 0
 18689  0020BC  0E02               	movlw	2
 18690  0020BE  0100               	movlb	0	; () banked
 18691  0020C0  27A1               	addwf	printf@ap& (0+255),f,b
 18692  0020C2  0E00               	movlw	0
 18693  0020C4  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 18694  0020C6                     l7062:
 18695                           
 18696                           ; BSR set to: 0
 18697                           ;doprnt.c: 1287: }
 18698                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 18699  0020C6  0E01               	movlw	1
 18700  0020C8  0100               	movlb	0	; () banked
 18701  0020CA  6FA8               	movwf	printf@c& (0+255),b
 18702  0020CC                     l7064:
 18703                           
 18704                           ; BSR set to: 0
 18705  0020CC  0E05               	movlw	5
 18706  0020CE  0100               	movlb	0	; () banked
 18707  0020D0  19A8               	xorwf	printf@c& (0+255),w,b
 18708  0020D2  B4D8               	btfsc	status,2,c
 18709  0020D4  D019               	goto	l7076
 18710                           
 18711                           ; BSR set to: 0
 18712                           ;doprnt.c: 1306: if(val < dpowers[c])
 18713                           
 18714                           ; BSR set to: 0
 18715                           
 18716                           ; BSR set to: 0
 18717  0020D6  0100               	movlb	0	; () banked
 18718  0020D8  51A8               	movf	printf@c& (0+255),w,b
 18719  0020DA  0D02               	mullw	2
 18720  0020DC  0EC2               	movlw	low _dpowers
 18721  0020DE  24F3               	addwf	prodl,w,c
 18722  0020E0  6EF6               	movwf	tblptrl,c
 18723  0020E2  0EFA               	movlw	high _dpowers
 18724  0020E4  20F4               	addwfc	prodh,w,c
 18725  0020E6  6EF7               	movwf	tblptrh,c
 18726  0020E8                     	if	1	;There are 3 active tblptr bytes
 18727  0020E8  6AF8               	clrf	tblptru,c
 18728  0020EA  0E00               	movlw	low (__mediumconst shr (0+16))
 18729  0020EC  22F8               	addwfc	tblptru,f,c
 18730  0020EE                     	endif
 18731  0020EE  0009               	tblrd		*+
 18732  0020F0  50F5               	movf	tablat,w,c
 18733  0020F2  0100               	movlb	0	; () banked
 18734  0020F4  5DA5               	subwf	printf@val& (0+255),w,b
 18735  0020F6  0009               	tblrd		*+
 18736  0020F8  50F5               	movf	tablat,w,c
 18737  0020FA  0100               	movlb	0	; () banked
 18738  0020FC  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 18739  0020FE  A0D8               	btfss	status,0,c
 18740  002100  D003               	goto	l7076
 18741                           
 18742                           ; BSR set to: 0
 18743                           
 18744                           ; BSR set to: 0
 18745                           
 18746                           ; BSR set to: 0
 18747                           ;doprnt.c: 1307: break;
 18748  002102  0100               	movlb	0	; () banked
 18749  002104  2BA8               	incf	printf@c& (0+255),f,b
 18750  002106  D7E2               	goto	l7064
 18751  002108                     l7076:
 18752                           
 18753                           ; BSR set to: 0
 18754                           ;doprnt.c: 1345: if(width && flag & 0x03)
 18755  002108  0100               	movlb	0	; () banked
 18756  00210A  51A9               	movf	printf@width& (0+255),w,b
 18757  00210C  0100               	movlb	0	; () banked
 18758  00210E  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18759  002110  B4D8               	btfsc	status,2,c
 18760  002112  D00B               	goto	l7082
 18761                           
 18762                           ; BSR set to: 0
 18763  002114  C0A7  F09A         	movff	printf@flag,??_printf
 18764  002118  0E03               	movlw	3
 18765  00211A  0100               	movlb	0	; () banked
 18766  00211C  179A               	andwf	??_printf& (0+255),f,b
 18767  00211E  B4D8               	btfsc	status,2,c
 18768  002120  D004               	goto	l7082
 18769                           
 18770                           ; BSR set to: 0
 18771                           ;doprnt.c: 1346: width--;
 18772  002122  0100               	movlb	0	; () banked
 18773  002124  07A9               	decf	printf@width& (0+255),f,b
 18774  002126  A0D8               	btfss	status,0,c
 18775  002128  07AA               	decf	(printf@width+1)& (0+255),f,b
 18776  00212A                     l7082:
 18777                           
 18778                           ; BSR set to: 0
 18779                           ;doprnt.c: 1381: if(width > c)
 18780  00212A  0E80               	movlw	128
 18781  00212C  0100               	movlb	0	; () banked
 18782  00212E  BFA8               	btfsc	printf@c& (0+255),7,b
 18783  002130  0E7F               	movlw	127
 18784  002132  0100               	movlb	0	; () banked
 18785  002134  6F9A               	movwf	??_printf& (0+255),b
 18786  002136  0100               	movlb	0	; () banked
 18787  002138  51A9               	movf	printf@width& (0+255),w,b
 18788  00213A  0100               	movlb	0	; () banked
 18789  00213C  5DA8               	subwf	printf@c& (0+255),w,b
 18790  00213E  0100               	movlb	0	; () banked
 18791  002140  51AA               	movf	(printf@width+1)& (0+255),w,b
 18792  002142  0A80               	xorlw	128
 18793  002144  0100               	movlb	0	; () banked
 18794  002146  599A               	subwfb	??_printf& (0+255),w,b
 18795  002148  B0D8               	btfsc	status,0,c
 18796  00214A  D00B               	goto	l7086
 18797                           
 18798                           ; BSR set to: 0
 18799                           ;doprnt.c: 1382: width -= c;
 18800  00214C  0100               	movlb	0	; () banked
 18801  00214E  51A8               	movf	printf@c& (0+255),w,b
 18802  002150  0100               	movlb	0	; () banked
 18803  002152  5FA9               	subwf	printf@width& (0+255),f,b
 18804  002154  0E00               	movlw	0
 18805  002156  0100               	movlb	0	; () banked
 18806  002158  BFA8               	btfsc	printf@c& (0+255),7,b
 18807  00215A  0EFF               	movlw	255
 18808  00215C  0100               	movlb	0	; () banked
 18809  00215E  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 18810  002160  D005               	goto	l7088
 18811  002162                     l7086:
 18812                           
 18813                           ; BSR set to: 0
 18814                           ;doprnt.c: 1383: else
 18815                           ;doprnt.c: 1384: width = 0;
 18816  002162  0E00               	movlw	0
 18817  002164  0100               	movlb	0	; () banked
 18818  002166  6FAA               	movwf	(printf@width+1)& (0+255),b
 18819  002168  0E00               	movlw	0
 18820  00216A  6FA9               	movwf	printf@width& (0+255),b
 18821  00216C                     l7088:
 18822                           
 18823                           ; BSR set to: 0
 18824                           ;doprnt.c: 1387: if(flag & 0x04) {
 18825  00216C  0100               	movlb	0	; () banked
 18826  00216E  A5A7               	btfss	printf@flag& (0+255),2,b
 18827  002170  D018               	goto	l7100
 18828                           
 18829                           ; BSR set to: 0
 18830                           ;doprnt.c: 1392: if(flag & 0x03)
 18831  002172  C0A7  F09A         	movff	printf@flag,??_printf
 18832  002176  0E03               	movlw	3
 18833  002178  0100               	movlb	0	; () banked
 18834  00217A  179A               	andwf	??_printf& (0+255),f,b
 18835  00217C  B4D8               	btfsc	status,2,c
 18836  00217E  D003               	goto	l7094
 18837                           
 18838                           ; BSR set to: 0
 18839                           ;doprnt.c: 1393: (putch('-') );
 18840  002180  0E2D               	movlw	45
 18841  002182  EC75  F030         	call	_putch
 18842  002186                     l7094:
 18843                           
 18844                           ;doprnt.c: 1415: if(width)
 18845  002186  0100               	movlb	0	; () banked
 18846  002188  51A9               	movf	printf@width& (0+255),w,b
 18847  00218A  0100               	movlb	0	; () banked
 18848  00218C  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18849  00218E  B4D8               	btfsc	status,2,c
 18850  002190  D025               	goto	l7110
 18851                           
 18852                           ; BSR set to: 0
 18853                           ;doprnt.c: 1417: (putch('0') );
 18854                           
 18855                           ; BSR set to: 0
 18856                           
 18857                           ;doprnt.c: 1416: do
 18858  002192  0E30               	movlw	48
 18859  002194  EC75  F030         	call	_putch
 18860                           
 18861                           ;doprnt.c: 1418: while(--width);
 18862  002198  0100               	movlb	0	; () banked
 18863  00219A  07A9               	decf	printf@width& (0+255),f,b
 18864  00219C  A0D8               	btfss	status,0,c
 18865  00219E  07AA               	decf	(printf@width+1)& (0+255),f,b
 18866  0021A0  D7F2               	goto	l7094
 18867  0021A2                     l7100:
 18868                           
 18869                           ; BSR set to: 0
 18870                           ;doprnt.c: 1422: {
 18871                           ;doprnt.c: 1424: if(width
 18872                           ;doprnt.c: 1428: )
 18873  0021A2  0100               	movlb	0	; () banked
 18874  0021A4  51A9               	movf	printf@width& (0+255),w,b
 18875  0021A6  0100               	movlb	0	; () banked
 18876  0021A8  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18877  0021AA  B4D8               	btfsc	status,2,c
 18878  0021AC  D00D               	goto	l7106
 18879  0021AE                     l7102:
 18880                           
 18881                           ; BSR set to: 0
 18882                           ;doprnt.c: 1430: (putch(' ') );
 18883  0021AE  0E20               	movlw	32
 18884  0021B0  EC75  F030         	call	_putch
 18885                           
 18886                           ;doprnt.c: 1431: while(--width);
 18887  0021B4  0100               	movlb	0	; () banked
 18888  0021B6  07A9               	decf	printf@width& (0+255),f,b
 18889  0021B8  A0D8               	btfss	status,0,c
 18890  0021BA  07AA               	decf	(printf@width+1)& (0+255),f,b
 18891  0021BC  0100               	movlb	0	; () banked
 18892  0021BE  51A9               	movf	printf@width& (0+255),w,b
 18893  0021C0  0100               	movlb	0	; () banked
 18894  0021C2  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18895  0021C4  A4D8               	btfss	status,2,c
 18896  0021C6  D7F3               	goto	l7102
 18897  0021C8                     l7106:
 18898                           
 18899                           ; BSR set to: 0
 18900                           ;doprnt.c: 1438: if(flag & 0x03)
 18901  0021C8  C0A7  F09A         	movff	printf@flag,??_printf
 18902  0021CC  0E03               	movlw	3
 18903  0021CE  0100               	movlb	0	; () banked
 18904  0021D0  179A               	andwf	??_printf& (0+255),f,b
 18905  0021D2  B4D8               	btfsc	status,2,c
 18906  0021D4  D003               	goto	l7110
 18907                           
 18908                           ; BSR set to: 0
 18909                           ;doprnt.c: 1439: (putch('-') );
 18910  0021D6  0E2D               	movlw	45
 18911  0021D8  EC75  F030         	call	_putch
 18912  0021DC                     l7110:
 18913                           
 18914                           ;doprnt.c: 1469: }
 18915                           ;doprnt.c: 1472: prec = c;
 18916  0021DC  C0A8  F09E         	movff	printf@c,printf@prec
 18917                           
 18918                           ;doprnt.c: 1474: while(prec--) {
 18919  0021E0  D02C               	goto	l7116
 18920  0021E2                     l7112:
 18921                           
 18922                           ;doprnt.c: 1478: {
 18923                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 18924  0021E2  0100               	movlb	0	; () banked
 18925  0021E4  519E               	movf	printf@prec& (0+255),w,b
 18926  0021E6  0D02               	mullw	2
 18927  0021E8  0EC2               	movlw	low _dpowers
 18928  0021EA  24F3               	addwf	prodl,w,c
 18929  0021EC  6EF6               	movwf	tblptrl,c
 18930  0021EE  0EFA               	movlw	high _dpowers
 18931  0021F0  20F4               	addwfc	prodh,w,c
 18932  0021F2  6EF7               	movwf	tblptrh,c
 18933  0021F4                     	if	1	;There are 3 active tblptr bytes
 18934  0021F4  6AF8               	clrf	tblptru,c
 18935  0021F6  0E00               	movlw	low (__mediumconst shr (0+16))
 18936  0021F8  22F8               	addwfc	tblptru,f,c
 18937  0021FA                     	endif
 18938  0021FA  0009               	tblrd		*+
 18939  0021FC  CFF5 F082          	movff	tablat,___lwdiv@divisor
 18940  002200  000A               	tblrd		*-
 18941  002202  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 18942  002206  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 18943  00220A  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 18944  00220E  EC71  F02A         	call	___lwdiv	;wreg free
 18945  002212  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 18946  002216  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 18947  00221A  0E00               	movlw	0
 18948  00221C  0100               	movlb	0	; () banked
 18949  00221E  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 18950  002220  0E0A               	movlw	10
 18951  002222  6F89               	movwf	___lwmod@divisor& (0+255),b
 18952  002224  ECBA  F02B         	call	___lwmod	;wreg free
 18953  002228  0100               	movlb	0	; () banked
 18954  00222A  5187               	movf	?___lwmod& (0+255),w,b
 18955  00222C  0F30               	addlw	48
 18956  00222E  0100               	movlb	0	; () banked
 18957  002230  6FA8               	movwf	printf@c& (0+255),b
 18958                           
 18959                           ; BSR set to: 0
 18960                           ;doprnt.c: 1523: }
 18961                           ;doprnt.c: 1524: (putch(c) );
 18962  002232  0100               	movlb	0	; () banked
 18963  002234  51A8               	movf	printf@c& (0+255),w,b
 18964  002236  EC75  F030         	call	_putch
 18965  00223A                     l7116:
 18966  00223A  0100               	movlb	0	; () banked
 18967  00223C  079E               	decf	printf@prec& (0+255),f,b
 18968  00223E  0100               	movlb	0	; () banked
 18969  002240  299E               	incf	printf@prec& (0+255),w,b
 18970  002242  A4D8               	btfss	status,2,c
 18971  002244  D7CE               	goto	l7112
 18972  002246                     l7118:
 18973  002246  C08E  FFF6         	movff	printf@f,tblptrl
 18974  00224A  C08F  FFF7         	movff	printf@f+1,tblptrh
 18975  00224E  0100               	movlb	0	; () banked
 18976  002250  4B8E               	infsnz	printf@f& (0+255),f,b
 18977  002252  2B8F               	incf	(printf@f+1)& (0+255),f,b
 18978  002254                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18979  002254  6AF8               	clrf	tblptru,c
 18980  002256                     	endif
 18981  002256                     	if	0	;tblptru may be non-zero
 18982  002256                     	endif
 18983  002256  0008               	tblrd		*
 18984  002258  CFF5 F0A8          	movff	tablat,printf@c
 18985  00225C  0100               	movlb	0	; () banked
 18986  00225E  51A8               	movf	printf@c& (0+255),w,b
 18987  002260  B4D8               	btfsc	status,2,c
 18988  002262  0012               	return	
 18989  002264  D5EB               	goto	l6988
 18990  002266                     __end_of_printf:
 18991                           	opt stack 0
 18992                           tblptru	equ	0xFF8
 18993                           tblptrh	equ	0xFF7
 18994                           tblptrl	equ	0xFF6
 18995                           tablat	equ	0xFF5
 18996                           prodh	equ	0xFF4
 18997                           prodl	equ	0xFF3
 18998                           intcon	equ	0xFF2
 18999                           intcon2	equ	0xFF1
 19000                           intcon3	equ	0xFF0
 19001                           indf0	equ	0xFEF
 19002                           postinc0	equ	0xFEE
 19003                           fsr0h	equ	0xFEA
 19004                           fsr0l	equ	0xFE9
 19005                           wreg	equ	0xFE8
 19006                           postdec1	equ	0xFE5
 19007                           fsr1l	equ	0xFE1
 19008                           indf2	equ	0xFDF
 19009                           postinc2	equ	0xFDE
 19010                           postdec2	equ	0xFDD
 19011                           fsr2h	equ	0xFDA
 19012                           fsr2l	equ	0xFD9
 19013                           status	equ	0xFD8
 19014                           
 19015 ;; *************** function _putch *****************
 19016 ;; Defined at:
 19017 ;;		line 20 in file "lcd.c"
 19018 ;; Parameters:    Size  Location     Type
 19019 ;;  data            1    wreg     unsigned char 
 19020 ;; Auto vars:     Size  Location     Type
 19021 ;;  data            1    2[BANK0 ] unsigned char 
 19022 ;; Return value:  Size  Location     Type
 19023 ;;                  1    wreg      void 
 19024 ;; Registers used:
 19025 ;;		wreg, status,2, status,0, cstack
 19026 ;; Tracked objects:
 19027 ;;		On entry : 0/0
 19028 ;;		On exit  : 0/0
 19029 ;;		Unchanged: 0/0
 19030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19032 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19034 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19035 ;;Total ram usage:        1 bytes
 19036 ;; Hardware stack levels used:    1
 19037 ;; Hardware stack levels required when called:    8
 19038 ;; This function calls:
 19039 ;;		_lcdNibble
 19040 ;; This function is called by:
 19041 ;;		_printf
 19042 ;; This function uses a non-reentrant model
 19043 ;;
 19044                           
 19045                           	psect	text57
 19046  0060EA                     __ptext57:
 19047                           	opt stack 0
 19048  0060EA                     _putch:
 19049                           	opt stack 18
 19050                           
 19051                           ;incstack = 0
 19052                           ;putch@data stored from wreg
 19053  0060EA  0100               	movlb	0	; () banked
 19054  0060EC  6F82               	movwf	putch@data& (0+255),b
 19055                           
 19056                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 19057  0060EE  848C               	bsf	3980,2,c	;volatile
 19058                           
 19059                           ;lcd.c: 22: lcdNibble(data);
 19060  0060F0  0100               	movlb	0	; () banked
 19061  0060F2  5182               	movf	putch@data& (0+255),w,b
 19062  0060F4  EC1E  F02B         	call	_lcdNibble
 19063  0060F8  0012               	return		;funcret
 19064  0060FA                     __end_of_putch:
 19065                           	opt stack 0
 19066                           tblptru	equ	0xFF8
 19067                           tblptrh	equ	0xFF7
 19068                           tblptrl	equ	0xFF6
 19069                           tablat	equ	0xFF5
 19070                           prodh	equ	0xFF4
 19071                           prodl	equ	0xFF3
 19072                           intcon	equ	0xFF2
 19073                           intcon2	equ	0xFF1
 19074                           intcon3	equ	0xFF0
 19075                           indf0	equ	0xFEF
 19076                           postinc0	equ	0xFEE
 19077                           fsr0h	equ	0xFEA
 19078                           fsr0l	equ	0xFE9
 19079                           wreg	equ	0xFE8
 19080                           postdec1	equ	0xFE5
 19081                           fsr1l	equ	0xFE1
 19082                           indf2	equ	0xFDF
 19083                           postinc2	equ	0xFDE
 19084                           postdec2	equ	0xFDD
 19085                           fsr2h	equ	0xFDA
 19086                           fsr2l	equ	0xFD9
 19087                           status	equ	0xFD8
 19088                           
 19089 ;; *************** function _isdigit *****************
 19090 ;; Defined at:
 19091 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 19092 ;; Parameters:    Size  Location     Type
 19093 ;;  c               1    wreg     unsigned char 
 19094 ;; Auto vars:     Size  Location     Type
 19095 ;;  c               1    2[BANK0 ] unsigned char 
 19096 ;; Return value:  Size  Location     Type
 19097 ;;		None               void
 19098 ;; Registers used:
 19099 ;;		wreg, status,2, status,0
 19100 ;; Tracked objects:
 19101 ;;		On entry : 0/0
 19102 ;;		On exit  : 0/0
 19103 ;;		Unchanged: 0/0
 19104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19106 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19107 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19108 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19109 ;;Total ram usage:        3 bytes
 19110 ;; Hardware stack levels used:    1
 19111 ;; Hardware stack levels required when called:    7
 19112 ;; This function calls:
 19113 ;;		Nothing
 19114 ;; This function is called by:
 19115 ;;		_printf
 19116 ;; This function uses a non-reentrant model
 19117 ;;
 19118                           
 19119                           	psect	text58
 19120  005EFC                     __ptext58:
 19121                           	opt stack 0
 19122  005EFC                     _isdigit:
 19123                           	opt stack 19
 19124                           
 19125                           ;incstack = 0
 19126                           ;isdigit@c stored from wreg
 19127  005EFC  0100               	movlb	0	; () banked
 19128  005EFE  6F82               	movwf	isdigit@c& (0+255),b
 19129  005F00  0E00               	movlw	0
 19130  005F02  0100               	movlb	0	; () banked
 19131  005F04  6F81               	movwf	_isdigit$2080& (0+255),b
 19132                           
 19133                           ; BSR set to: 0
 19134  005F06  0E3A               	movlw	58
 19135  005F08  0100               	movlb	0	; () banked
 19136  005F0A  6182               	cpfslt	isdigit@c& (0+255),b
 19137  005F0C  D007               	goto	l6826
 19138                           
 19139                           ; BSR set to: 0
 19140  005F0E  0E2F               	movlw	47
 19141  005F10  0100               	movlb	0	; () banked
 19142  005F12  6582               	cpfsgt	isdigit@c& (0+255),b
 19143  005F14  D003               	goto	l6826
 19144                           
 19145                           ; BSR set to: 0
 19146  005F16  0E01               	movlw	1
 19147  005F18  0100               	movlb	0	; () banked
 19148  005F1A  6F81               	movwf	_isdigit$2080& (0+255),b
 19149  005F1C                     l6826:
 19150                           
 19151                           ; BSR set to: 0
 19152  005F1C  C081  F080         	movff	_isdigit$2080,??_isdigit
 19153  005F20  0100               	movlb	0	; () banked
 19154  005F22  3180               	rrcf	??_isdigit& (0+255),w,b
 19155  005F24  0012               	return	
 19156  005F26                     __end_of_isdigit:
 19157                           	opt stack 0
 19158                           tblptru	equ	0xFF8
 19159                           tblptrh	equ	0xFF7
 19160                           tblptrl	equ	0xFF6
 19161                           tablat	equ	0xFF5
 19162                           prodh	equ	0xFF4
 19163                           prodl	equ	0xFF3
 19164                           intcon	equ	0xFF2
 19165                           intcon2	equ	0xFF1
 19166                           intcon3	equ	0xFF0
 19167                           indf0	equ	0xFEF
 19168                           postinc0	equ	0xFEE
 19169                           fsr0h	equ	0xFEA
 19170                           fsr0l	equ	0xFE9
 19171                           wreg	equ	0xFE8
 19172                           postdec1	equ	0xFE5
 19173                           fsr1l	equ	0xFE1
 19174                           indf2	equ	0xFDF
 19175                           postinc2	equ	0xFDE
 19176                           postdec2	equ	0xFDD
 19177                           fsr2h	equ	0xFDA
 19178                           fsr2l	equ	0xFD9
 19179                           status	equ	0xFD8
 19180                           
 19181 ;; *************** function ___wmul *****************
 19182 ;; Defined at:
 19183 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 19184 ;; Parameters:    Size  Location     Type
 19185 ;;  multiplier      2    0[BANK0 ] unsigned int 
 19186 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 19187 ;; Auto vars:     Size  Location     Type
 19188 ;;  product         2    4[BANK0 ] unsigned int 
 19189 ;; Return value:  Size  Location     Type
 19190 ;;                  2    0[BANK0 ] unsigned int 
 19191 ;; Registers used:
 19192 ;;		wreg, status,2, status,0, prodl, prodh
 19193 ;; Tracked objects:
 19194 ;;		On entry : 0/0
 19195 ;;		On exit  : 0/0
 19196 ;;		Unchanged: 0/0
 19197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19198 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19199 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19200 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19201 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19202 ;;Total ram usage:        6 bytes
 19203 ;; Hardware stack levels used:    1
 19204 ;; Hardware stack levels required when called:    7
 19205 ;; This function calls:
 19206 ;;		Nothing
 19207 ;; This function is called by:
 19208 ;;		_printf
 19209 ;; This function uses a non-reentrant model
 19210 ;;
 19211                           
 19212                           	psect	text59
 19213  005BD0                     __ptext59:
 19214                           	opt stack 0
 19215  005BD0                     ___wmul:
 19216                           	opt stack 19
 19217                           
 19218                           ; BSR set to: 0
 19219                           ;incstack = 0
 19220  005BD0  0100               	movlb	0	; () banked
 19221  005BD2  5180               	movf	___wmul@multiplier& (0+255),w,b
 19222  005BD4  0100               	movlb	0	; () banked
 19223  005BD6  0382               	mulwf	___wmul@multiplicand& (0+255),b
 19224  005BD8  CFF3 F084          	movff	prodl,___wmul@product
 19225  005BDC  CFF4 F085          	movff	prodh,___wmul@product+1
 19226  005BE0  0100               	movlb	0	; () banked
 19227  005BE2  5180               	movf	___wmul@multiplier& (0+255),w,b
 19228  005BE4  0100               	movlb	0	; () banked
 19229  005BE6  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 19230  005BE8  50F3               	movf	prodl,w,c
 19231  005BEA  0100               	movlb	0	; () banked
 19232  005BEC  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 19233  005BEE  0100               	movlb	0	; () banked
 19234  005BF0  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 19235  005BF2  0100               	movlb	0	; () banked
 19236  005BF4  0382               	mulwf	___wmul@multiplicand& (0+255),b
 19237  005BF6  50F3               	movf	prodl,w,c
 19238  005BF8  0100               	movlb	0	; () banked
 19239  005BFA  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 19240                           
 19241                           ; BSR set to: 0
 19242  005BFC  C084  F080         	movff	___wmul@product,?___wmul
 19243  005C00  C085  F081         	movff	___wmul@product+1,?___wmul+1
 19244  005C04  0012               	return	
 19245  005C06                     __end_of___wmul:
 19246                           	opt stack 0
 19247                           tblptru	equ	0xFF8
 19248                           tblptrh	equ	0xFF7
 19249                           tblptrl	equ	0xFF6
 19250                           tablat	equ	0xFF5
 19251                           prodh	equ	0xFF4
 19252                           prodl	equ	0xFF3
 19253                           intcon	equ	0xFF2
 19254                           intcon2	equ	0xFF1
 19255                           intcon3	equ	0xFF0
 19256                           indf0	equ	0xFEF
 19257                           postinc0	equ	0xFEE
 19258                           fsr0h	equ	0xFEA
 19259                           fsr0l	equ	0xFE9
 19260                           wreg	equ	0xFE8
 19261                           postdec1	equ	0xFE5
 19262                           fsr1l	equ	0xFE1
 19263                           indf2	equ	0xFDF
 19264                           postinc2	equ	0xFDE
 19265                           postdec2	equ	0xFDD
 19266                           fsr2h	equ	0xFDA
 19267                           fsr2l	equ	0xFD9
 19268                           status	equ	0xFD8
 19269                           
 19270 ;; *************** function ___lwmod *****************
 19271 ;; Defined at:
 19272 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 19273 ;; Parameters:    Size  Location     Type
 19274 ;;  dividend        2    7[BANK0 ] unsigned int 
 19275 ;;  divisor         2    9[BANK0 ] unsigned int 
 19276 ;; Auto vars:     Size  Location     Type
 19277 ;;  counter         1   11[BANK0 ] unsigned char 
 19278 ;; Return value:  Size  Location     Type
 19279 ;;                  2    7[BANK0 ] unsigned int 
 19280 ;; Registers used:
 19281 ;;		wreg, status,2, status,0
 19282 ;; Tracked objects:
 19283 ;;		On entry : 0/0
 19284 ;;		On exit  : 0/0
 19285 ;;		Unchanged: 0/0
 19286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19287 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19288 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19290 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19291 ;;Total ram usage:        5 bytes
 19292 ;; Hardware stack levels used:    1
 19293 ;; Hardware stack levels required when called:    7
 19294 ;; This function calls:
 19295 ;;		Nothing
 19296 ;; This function is called by:
 19297 ;;		_printf
 19298 ;; This function uses a non-reentrant model
 19299 ;;
 19300                           
 19301                           	psect	text60
 19302  005774                     __ptext60:
 19303                           	opt stack 0
 19304  005774                     ___lwmod:
 19305                           	opt stack 19
 19306                           
 19307                           ; BSR set to: 0
 19308                           ;incstack = 0
 19309  005774  0100               	movlb	0	; () banked
 19310  005776  5189               	movf	___lwmod@divisor& (0+255),w,b
 19311  005778  0100               	movlb	0	; () banked
 19312  00577A  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 19313  00577C  B4D8               	btfsc	status,2,c
 19314  00577E  D026               	goto	l2045
 19315                           
 19316                           ; BSR set to: 0
 19317  005780  0E01               	movlw	1
 19318  005782  0100               	movlb	0	; () banked
 19319  005784  6F8B               	movwf	___lwmod@counter& (0+255),b
 19320  005786  D006               	goto	l6864
 19321  005788                     l6862:
 19322                           
 19323                           ; BSR set to: 0
 19324  005788  0100               	movlb	0	; () banked
 19325  00578A  90D8               	bcf	status,0,c
 19326  00578C  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 19327  00578E  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 19328  005790  0100               	movlb	0	; () banked
 19329  005792  2B8B               	incf	___lwmod@counter& (0+255),f,b
 19330  005794                     l6864:
 19331                           
 19332                           ; BSR set to: 0
 19333  005794  0100               	movlb	0	; () banked
 19334  005796  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 19335  005798  D7F7               	goto	l6862
 19336  00579A                     l6866:
 19337                           
 19338                           ; BSR set to: 0
 19339  00579A  0100               	movlb	0	; () banked
 19340  00579C  5189               	movf	___lwmod@divisor& (0+255),w,b
 19341  00579E  0100               	movlb	0	; () banked
 19342  0057A0  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 19343  0057A2  0100               	movlb	0	; () banked
 19344  0057A4  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 19345  0057A6  0100               	movlb	0	; () banked
 19346  0057A8  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 19347  0057AA  A0D8               	btfss	status,0,c
 19348  0057AC  D008               	goto	l6870
 19349                           
 19350                           ; BSR set to: 0
 19351  0057AE  0100               	movlb	0	; () banked
 19352  0057B0  5189               	movf	___lwmod@divisor& (0+255),w,b
 19353  0057B2  0100               	movlb	0	; () banked
 19354  0057B4  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 19355  0057B6  0100               	movlb	0	; () banked
 19356  0057B8  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 19357  0057BA  0100               	movlb	0	; () banked
 19358  0057BC  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 19359  0057BE                     l6870:
 19360                           
 19361                           ; BSR set to: 0
 19362  0057BE  0100               	movlb	0	; () banked
 19363  0057C0  90D8               	bcf	status,0,c
 19364  0057C2  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 19365  0057C4  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 19366                           
 19367                           ; BSR set to: 0
 19368  0057C6  0100               	movlb	0	; () banked
 19369  0057C8  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 19370  0057CA  D7E7               	goto	l6866
 19371  0057CC                     l2045:
 19372                           
 19373                           ; BSR set to: 0
 19374  0057CC  C087  F087         	movff	___lwmod@dividend,?___lwmod
 19375  0057D0  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 19376                           
 19377                           ; BSR set to: 0
 19378  0057D4  0012               	return		;funcret
 19379  0057D6                     __end_of___lwmod:
 19380                           	opt stack 0
 19381                           tblptru	equ	0xFF8
 19382                           tblptrh	equ	0xFF7
 19383                           tblptrl	equ	0xFF6
 19384                           tablat	equ	0xFF5
 19385                           prodh	equ	0xFF4
 19386                           prodl	equ	0xFF3
 19387                           intcon	equ	0xFF2
 19388                           intcon2	equ	0xFF1
 19389                           intcon3	equ	0xFF0
 19390                           indf0	equ	0xFEF
 19391                           postinc0	equ	0xFEE
 19392                           fsr0h	equ	0xFEA
 19393                           fsr0l	equ	0xFE9
 19394                           wreg	equ	0xFE8
 19395                           postdec1	equ	0xFE5
 19396                           fsr1l	equ	0xFE1
 19397                           indf2	equ	0xFDF
 19398                           postinc2	equ	0xFDE
 19399                           postdec2	equ	0xFDD
 19400                           fsr2h	equ	0xFDA
 19401                           fsr2l	equ	0xFD9
 19402                           status	equ	0xFD8
 19403                           
 19404 ;; *************** function ___lwdiv *****************
 19405 ;; Defined at:
 19406 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 19407 ;; Parameters:    Size  Location     Type
 19408 ;;  dividend        2    0[BANK0 ] unsigned int 
 19409 ;;  divisor         2    2[BANK0 ] unsigned int 
 19410 ;; Auto vars:     Size  Location     Type
 19411 ;;  quotient        2    4[BANK0 ] unsigned int 
 19412 ;;  counter         1    6[BANK0 ] unsigned char 
 19413 ;; Return value:  Size  Location     Type
 19414 ;;                  2    0[BANK0 ] unsigned int 
 19415 ;; Registers used:
 19416 ;;		wreg, status,2, status,0
 19417 ;; Tracked objects:
 19418 ;;		On entry : 0/0
 19419 ;;		On exit  : 0/0
 19420 ;;		Unchanged: 0/0
 19421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19422 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19423 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19425 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19426 ;;Total ram usage:        7 bytes
 19427 ;; Hardware stack levels used:    1
 19428 ;; Hardware stack levels required when called:    7
 19429 ;; This function calls:
 19430 ;;		Nothing
 19431 ;; This function is called by:
 19432 ;;		_printf
 19433 ;; This function uses a non-reentrant model
 19434 ;;
 19435                           
 19436                           	psect	text61
 19437  0054E2                     __ptext61:
 19438                           	opt stack 0
 19439  0054E2                     ___lwdiv:
 19440                           	opt stack 19
 19441                           
 19442                           ; BSR set to: 0
 19443                           ;incstack = 0
 19444  0054E2  0E00               	movlw	0
 19445  0054E4  0100               	movlb	0	; () banked
 19446  0054E6  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 19447  0054E8  0E00               	movlw	0
 19448  0054EA  6F84               	movwf	___lwdiv@quotient& (0+255),b
 19449                           
 19450                           ; BSR set to: 0
 19451  0054EC  0100               	movlb	0	; () banked
 19452  0054EE  5182               	movf	___lwdiv@divisor& (0+255),w,b
 19453  0054F0  0100               	movlb	0	; () banked
 19454  0054F2  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 19455  0054F4  B4D8               	btfsc	status,2,c
 19456  0054F6  D02C               	goto	l2035
 19457                           
 19458                           ; BSR set to: 0
 19459  0054F8  0E01               	movlw	1
 19460  0054FA  0100               	movlb	0	; () banked
 19461  0054FC  6F86               	movwf	___lwdiv@counter& (0+255),b
 19462  0054FE  D006               	goto	l6844
 19463  005500                     l6842:
 19464                           
 19465                           ; BSR set to: 0
 19466  005500  0100               	movlb	0	; () banked
 19467  005502  90D8               	bcf	status,0,c
 19468  005504  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 19469  005506  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 19470  005508  0100               	movlb	0	; () banked
 19471  00550A  2B86               	incf	___lwdiv@counter& (0+255),f,b
 19472  00550C                     l6844:
 19473                           
 19474                           ; BSR set to: 0
 19475  00550C  0100               	movlb	0	; () banked
 19476  00550E  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 19477  005510  D7F7               	goto	l6842
 19478  005512                     l6846:
 19479                           
 19480                           ; BSR set to: 0
 19481  005512  0100               	movlb	0	; () banked
 19482  005514  90D8               	bcf	status,0,c
 19483  005516  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 19484  005518  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 19485                           
 19486                           ; BSR set to: 0
 19487  00551A  0100               	movlb	0	; () banked
 19488  00551C  5182               	movf	___lwdiv@divisor& (0+255),w,b
 19489  00551E  0100               	movlb	0	; () banked
 19490  005520  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 19491  005522  0100               	movlb	0	; () banked
 19492  005524  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 19493  005526  0100               	movlb	0	; () banked
 19494  005528  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 19495  00552A  A0D8               	btfss	status,0,c
 19496  00552C  D00A               	goto	l6854
 19497                           
 19498                           ; BSR set to: 0
 19499  00552E  0100               	movlb	0	; () banked
 19500  005530  5182               	movf	___lwdiv@divisor& (0+255),w,b
 19501  005532  0100               	movlb	0	; () banked
 19502  005534  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 19503  005536  0100               	movlb	0	; () banked
 19504  005538  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 19505  00553A  0100               	movlb	0	; () banked
 19506  00553C  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 19507                           
 19508                           ; BSR set to: 0
 19509  00553E  0100               	movlb	0	; () banked
 19510  005540  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 19511  005542                     l6854:
 19512                           
 19513                           ; BSR set to: 0
 19514  005542  0100               	movlb	0	; () banked
 19515  005544  90D8               	bcf	status,0,c
 19516  005546  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 19517  005548  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 19518                           
 19519                           ; BSR set to: 0
 19520  00554A  0100               	movlb	0	; () banked
 19521  00554C  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 19522  00554E  D7E1               	goto	l6846
 19523  005550                     l2035:
 19524                           
 19525                           ; BSR set to: 0
 19526  005550  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 19527  005554  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 19528                           
 19529                           ; BSR set to: 0
 19530  005558  0012               	return		;funcret
 19531  00555A                     __end_of___lwdiv:
 19532                           	opt stack 0
 19533                           tblptru	equ	0xFF8
 19534                           tblptrh	equ	0xFF7
 19535                           tblptrl	equ	0xFF6
 19536                           tablat	equ	0xFF5
 19537                           prodh	equ	0xFF4
 19538                           prodl	equ	0xFF3
 19539                           intcon	equ	0xFF2
 19540                           intcon2	equ	0xFF1
 19541                           intcon3	equ	0xFF0
 19542                           indf0	equ	0xFEF
 19543                           postinc0	equ	0xFEE
 19544                           fsr0h	equ	0xFEA
 19545                           fsr0l	equ	0xFE9
 19546                           wreg	equ	0xFE8
 19547                           postdec1	equ	0xFE5
 19548                           fsr1l	equ	0xFE1
 19549                           indf2	equ	0xFDF
 19550                           postinc2	equ	0xFDE
 19551                           postdec2	equ	0xFDD
 19552                           fsr2h	equ	0xFDA
 19553                           fsr2l	equ	0xFD9
 19554                           status	equ	0xFD8
 19555                           
 19556 ;; *************** function _lcdInst *****************
 19557 ;; Defined at:
 19558 ;;		line 15 in file "lcd.c"
 19559 ;; Parameters:    Size  Location     Type
 19560 ;;  data            1    wreg     unsigned char 
 19561 ;; Auto vars:     Size  Location     Type
 19562 ;;  data            1    2[BANK0 ] unsigned char 
 19563 ;; Return value:  Size  Location     Type
 19564 ;;                  1    wreg      void 
 19565 ;; Registers used:
 19566 ;;		wreg, status,2, status,0, cstack
 19567 ;; Tracked objects:
 19568 ;;		On entry : 0/0
 19569 ;;		On exit  : 0/0
 19570 ;;		Unchanged: 0/0
 19571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19573 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19575 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19576 ;;Total ram usage:        1 bytes
 19577 ;; Hardware stack levels used:    1
 19578 ;; Hardware stack levels required when called:    8
 19579 ;; This function calls:
 19580 ;;		_lcdNibble
 19581 ;; This function is called by:
 19582 ;;		_UI
 19583 ;;		_change_state_to_menu_start
 19584 ;;		_change_state_to_menu_12
 19585 ;;		_change_state_to_menu_22
 19586 ;;		_initLCD
 19587 ;;		_printRTC
 19588 ;;		_Loading
 19589 ;;		_ID
 19590 ;;		_EEPROM_write
 19591 ;;		_Test
 19592 ;;		_algorithmTest
 19593 ;;		_sensorTest
 19594 ;;		_actuatorTest
 19595 ;;		_BothServos
 19596 ;;		_PortTestDC
 19597 ;;		_PlatformTest
 19598 ;;		_SpeedTest
 19599 ;;		_BlockerTest
 19600 ;;		_arm
 19601 ;;		_PortTestPusher
 19602 ;; This function uses a non-reentrant model
 19603 ;;
 19604                           
 19605                           	psect	text62
 19606  0060FA                     __ptext62:
 19607                           	opt stack 0
 19608  0060FA                     _lcdInst:
 19609                           	opt stack 20
 19610                           
 19611                           ; BSR set to: 0
 19612                           ;incstack = 0
 19613                           ;lcdInst@data stored from wreg
 19614  0060FA  0100               	movlb	0	; () banked
 19615  0060FC  6F82               	movwf	lcdInst@data& (0+255),b
 19616                           
 19617                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 19618  0060FE  948C               	bcf	3980,2,c	;volatile
 19619                           
 19620                           ;lcd.c: 17: lcdNibble(data);
 19621  006100  0100               	movlb	0	; () banked
 19622  006102  5182               	movf	lcdInst@data& (0+255),w,b
 19623  006104  EC1E  F02B         	call	_lcdNibble
 19624  006108  0012               	return		;funcret
 19625  00610A                     __end_of_lcdInst:
 19626                           	opt stack 0
 19627                           tblptru	equ	0xFF8
 19628                           tblptrh	equ	0xFF7
 19629                           tblptrl	equ	0xFF6
 19630                           tablat	equ	0xFF5
 19631                           prodh	equ	0xFF4
 19632                           prodl	equ	0xFF3
 19633                           intcon	equ	0xFF2
 19634                           intcon2	equ	0xFF1
 19635                           intcon3	equ	0xFF0
 19636                           indf0	equ	0xFEF
 19637                           postinc0	equ	0xFEE
 19638                           fsr0h	equ	0xFEA
 19639                           fsr0l	equ	0xFE9
 19640                           wreg	equ	0xFE8
 19641                           postdec1	equ	0xFE5
 19642                           fsr1l	equ	0xFE1
 19643                           indf2	equ	0xFDF
 19644                           postinc2	equ	0xFDE
 19645                           postdec2	equ	0xFDD
 19646                           fsr2h	equ	0xFDA
 19647                           fsr2l	equ	0xFD9
 19648                           status	equ	0xFD8
 19649                           
 19650 ;; *************** function _lcdNibble *****************
 19651 ;; Defined at:
 19652 ;;		line 25 in file "lcd.c"
 19653 ;; Parameters:    Size  Location     Type
 19654 ;;  data            1    wreg     unsigned char 
 19655 ;; Auto vars:     Size  Location     Type
 19656 ;;  data            1    1[BANK0 ] unsigned char 
 19657 ;;  temp            1    0[BANK0 ] unsigned char 
 19658 ;; Return value:  Size  Location     Type
 19659 ;;                  1    wreg      void 
 19660 ;; Registers used:
 19661 ;;		wreg, status,2, status,0
 19662 ;; Tracked objects:
 19663 ;;		On entry : 0/0
 19664 ;;		On exit  : 0/0
 19665 ;;		Unchanged: 0/0
 19666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19668 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19670 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19671 ;;Total ram usage:        2 bytes
 19672 ;; Hardware stack levels used:    1
 19673 ;; Hardware stack levels required when called:    7
 19674 ;; This function calls:
 19675 ;;		Nothing
 19676 ;; This function is called by:
 19677 ;;		_lcdInst
 19678 ;;		_putch
 19679 ;; This function uses a non-reentrant model
 19680 ;;
 19681                           
 19682                           	psect	text63
 19683  00563C                     __ptext63:
 19684                           	opt stack 0
 19685  00563C                     _lcdNibble:
 19686                           	opt stack 20
 19687                           
 19688                           ;incstack = 0
 19689                           ;lcdNibble@data stored from wreg
 19690  00563C  0100               	movlb	0	; () banked
 19691  00563E  6F81               	movwf	lcdNibble@data& (0+255),b
 19692                           
 19693                           ;lcd.c: 27: (INTCONbits.GIE = 0);
 19694  005640  9EF2               	bcf	intcon,7,c	;volatile
 19695                           
 19696                           ;lcd.c: 28: char temp = data & 0xF0;
 19697  005642  0100               	movlb	0	; () banked
 19698  005644  5181               	movf	lcdNibble@data& (0+255),w,b
 19699  005646  0BF0               	andlw	240
 19700  005648  0100               	movlb	0	; () banked
 19701  00564A  6F80               	movwf	lcdNibble@temp& (0+255),b
 19702                           
 19703                           ;lcd.c: 29: LATD = LATD & 0x0F;
 19704  00564C  508C               	movf	3980,w,c	;volatile
 19705  00564E  0B0F               	andlw	15
 19706  005650  6E8C               	movwf	3980,c	;volatile
 19707                           
 19708                           ;lcd.c: 30: LATD = temp | LATD;
 19709  005652  0100               	movlb	0	; () banked
 19710  005654  5180               	movf	lcdNibble@temp& (0+255),w,b
 19711  005656  108C               	iorwf	3980,w,c	;volatile
 19712  005658  6E8C               	movwf	3980,c	;volatile
 19713                           
 19714                           ; BSR set to: 0
 19715                           ;lcd.c: 32: LATDbits.LATD3 = 1;
 19716  00565A  868C               	bsf	3980,3,c	;volatile
 19717                           
 19718                           ; BSR set to: 0
 19719                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19720  00565C  0E42               	movlw	66
 19721  00565E                     u12537:
 19722  00565E  2EE8               	decfsz	wreg,f,c
 19723  005660  D7FE               	bra	u12537
 19724  005662  D000               	nop2	
 19725                           
 19726                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 19727  005664  968C               	bcf	3980,3,c	;volatile
 19728                           
 19729                           ;lcd.c: 35: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19730  005666  0E42               	movlw	66
 19731  005668                     u12547:
 19732  005668  2EE8               	decfsz	wreg,f,c
 19733  00566A  D7FE               	bra	u12547
 19734  00566C  D000               	nop2	
 19735                           
 19736                           ;lcd.c: 37: data = data << 4;
 19737  00566E  0100               	movlb	0	; () banked
 19738  005670  3981               	swapf	lcdNibble@data& (0+255),w,b
 19739  005672  0BF0               	andlw	240
 19740  005674  0100               	movlb	0	; () banked
 19741  005676  6F81               	movwf	lcdNibble@data& (0+255),b
 19742                           
 19743                           ;lcd.c: 39: temp = data & 0xF0;
 19744  005678  0100               	movlb	0	; () banked
 19745  00567A  5181               	movf	lcdNibble@data& (0+255),w,b
 19746  00567C  0BF0               	andlw	240
 19747  00567E  0100               	movlb	0	; () banked
 19748  005680  6F80               	movwf	lcdNibble@temp& (0+255),b
 19749                           
 19750                           ;lcd.c: 40: LATD = LATD & 0x0F;
 19751  005682  508C               	movf	3980,w,c	;volatile
 19752  005684  0B0F               	andlw	15
 19753  005686  6E8C               	movwf	3980,c	;volatile
 19754                           
 19755                           ;lcd.c: 41: LATD = temp | LATD;
 19756  005688  0100               	movlb	0	; () banked
 19757  00568A  5180               	movf	lcdNibble@temp& (0+255),w,b
 19758  00568C  108C               	iorwf	3980,w,c	;volatile
 19759  00568E  6E8C               	movwf	3980,c	;volatile
 19760                           
 19761                           ; BSR set to: 0
 19762                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 19763  005690  868C               	bsf	3980,3,c	;volatile
 19764                           
 19765                           ; BSR set to: 0
 19766                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19767  005692  0E42               	movlw	66
 19768  005694                     u12557:
 19769  005694  2EE8               	decfsz	wreg,f,c
 19770  005696  D7FE               	bra	u12557
 19771  005698  D000               	nop2	
 19772                           
 19773                           ;lcd.c: 45: LATDbits.LATD3 = 0;
 19774  00569A  968C               	bcf	3980,3,c	;volatile
 19775                           
 19776                           ;lcd.c: 46: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19777  00569C  0E42               	movlw	66
 19778  00569E                     u12567:
 19779  00569E  2EE8               	decfsz	wreg,f,c
 19780  0056A0  D7FE               	bra	u12567
 19781  0056A2  D000               	nop2	
 19782                           
 19783                           ;lcd.c: 47: (INTCONbits.GIE = 1);
 19784  0056A4  8EF2               	bsf	intcon,7,c	;volatile
 19785  0056A6  0012               	return		;funcret
 19786  0056A8                     __end_of_lcdNibble:
 19787                           	opt stack 0
 19788                           tblptru	equ	0xFF8
 19789                           tblptrh	equ	0xFF7
 19790                           tblptrl	equ	0xFF6
 19791                           tablat	equ	0xFF5
 19792                           prodh	equ	0xFF4
 19793                           prodl	equ	0xFF3
 19794                           intcon	equ	0xFF2
 19795                           intcon2	equ	0xFF1
 19796                           intcon3	equ	0xFF0
 19797                           indf0	equ	0xFEF
 19798                           postinc0	equ	0xFEE
 19799                           fsr0h	equ	0xFEA
 19800                           fsr0l	equ	0xFE9
 19801                           wreg	equ	0xFE8
 19802                           postdec1	equ	0xFE5
 19803                           fsr1l	equ	0xFE1
 19804                           indf2	equ	0xFDF
 19805                           postinc2	equ	0xFDE
 19806                           postdec2	equ	0xFDD
 19807                           fsr2h	equ	0xFDA
 19808                           fsr2l	equ	0xFD9
 19809                           status	equ	0xFD8
 19810                           
 19811 ;; *************** function _handler *****************
 19812 ;; Defined at:
 19813 ;;		line 16 in file "interruptHandler.c"
 19814 ;; Parameters:    Size  Location     Type
 19815 ;;		None
 19816 ;; Auto vars:     Size  Location     Type
 19817 ;;		None
 19818 ;; Return value:  Size  Location     Type
 19819 ;;                  1    wreg      void 
 19820 ;; Registers used:
 19821 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19822 ;; Tracked objects:
 19823 ;;		On entry : 0/0
 19824 ;;		On exit  : 0/0
 19825 ;;		Unchanged: 0/0
 19826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19829 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19830 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19831 ;;Total ram usage:       16 bytes
 19832 ;; Hardware stack levels used:    1
 19833 ;; Hardware stack levels required when called:    6
 19834 ;; This function calls:
 19835 ;;		_printSortTimer
 19836 ;;		_updateArmState
 19837 ;;		_updateMenu
 19838 ;;		_updateServoStates
 19839 ;;		i2_change_state_to_menu_start
 19840 ;; This function is called by:
 19841 ;;		Interrupt level 2
 19842 ;; This function uses a non-reentrant model
 19843 ;;
 19844                           
 19845                           	psect	intcode
 19846  000008                     __pintcode:
 19847                           	opt stack 0
 19848  000008                     _handler:
 19849                           	opt stack 18
 19850                           
 19851                           ;incstack = 0
 19852  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 19853  00000A  EDD8  F01E         	call	int_func,f	;refresh shadow registers
 19854                           tblptru	equ	0xFF8
 19855                           tblptrh	equ	0xFF7
 19856                           tblptrl	equ	0xFF6
 19857                           tablat	equ	0xFF5
 19858                           prodh	equ	0xFF4
 19859                           prodl	equ	0xFF3
 19860                           intcon	equ	0xFF2
 19861                           intcon2	equ	0xFF1
 19862                           intcon3	equ	0xFF0
 19863                           indf0	equ	0xFEF
 19864                           postinc0	equ	0xFEE
 19865                           fsr0h	equ	0xFEA
 19866                           fsr0l	equ	0xFE9
 19867                           wreg	equ	0xFE8
 19868                           postdec1	equ	0xFE5
 19869                           fsr1l	equ	0xFE1
 19870                           indf2	equ	0xFDF
 19871                           postinc2	equ	0xFDE
 19872                           postdec2	equ	0xFDD
 19873                           fsr2h	equ	0xFDA
 19874                           fsr2l	equ	0xFD9
 19875                           status	equ	0xFD8
 19876                           
 19877                           	psect	intcode_body
 19878  003DB0                     __pintcode_body:
 19879                           	opt stack 18
 19880  003DB0                     int_func:
 19881                           	opt stack 18
 19882  003DB0  0006               	pop		; remove dummy address from shadow register refresh
 19883  003DB2  CFFA F047          	movff	pclath,??_handler+2
 19884  003DB6  CFFB F048          	movff	pclatu,??_handler+3
 19885  003DBA  CFE9 F049          	movff	fsr0l,??_handler+4
 19886  003DBE  CFEA F04A          	movff	fsr0h,??_handler+5
 19887  003DC2  CFE1 F04B          	movff	fsr1l,??_handler+6
 19888  003DC6  CFE2 F04C          	movff	fsr1h,??_handler+7
 19889  003DCA  CFD9 F04D          	movff	fsr2l,??_handler+8
 19890  003DCE  CFDA F04E          	movff	fsr2h,??_handler+9
 19891  003DD2  CFF3 F04F          	movff	prodl,??_handler+10
 19892  003DD6  CFF4 F050          	movff	prodh,??_handler+11
 19893  003DDA  CFF6 F051          	movff	tblptrl,??_handler+12
 19894  003DDE  CFF7 F052          	movff	tblptrh,??_handler+13
 19895  003DE2  CFF8 F053          	movff	tblptru,??_handler+14
 19896  003DE6  CFF5 F054          	movff	tablat,??_handler+15
 19897                           
 19898                           ;interruptHandler.c: 18: if(INT1IF){
 19899  003DEA  A0F0               	btfss	intcon3,0,c	;volatile
 19900  003DEC  D034               	goto	i2l10662
 19901                           
 19902                           ;interruptHandler.c: 19: INT1IF = 0;
 19903  003DEE  90F0               	bcf	intcon3,0,c	;volatile
 19904                           
 19905                           ;interruptHandler.c: 20: input = keys[(PORTB & 0xF0) >> 4];
 19906  003DF0  3881               	swapf	3969,w,c	;volatile
 19907  003DF2  0B0F               	andlw	15
 19908  003DF4  0B0F               	andlw	15
 19909  003DF6  6E45               	movwf	??_handler& (0+255),c
 19910  003DF8  6A46               	clrf	(??_handler+1)& (0+255),c
 19911  003DFA  0EB1               	movlw	low _keys
 19912  003DFC  2445               	addwf	??_handler,w,c
 19913  003DFE  6EF6               	movwf	tblptrl,c
 19914  003E00  0EFA               	movlw	high _keys
 19915  003E02  2046               	addwfc	??_handler+1,w,c
 19916  003E04  6EF7               	movwf	tblptrh,c
 19917  003E06                     	if	1	;There are 3 active tblptr bytes
 19918  003E06  6AF8               	clrf	tblptru,c
 19919  003E08  0E00               	movlw	low (__mediumconst shr (0+16))
 19920  003E0A  22F8               	addwfc	tblptru,f,c
 19921  003E0C                     	endif
 19922  003E0C  0008               	tblrd		*
 19923  003E0E  CFF5 F07D          	movff	tablat,_input	;volatile
 19924                           
 19925                           ;interruptHandler.c: 21: if(input == '*'){
 19926  003E12  0E2A               	movlw	42
 19927  003E14  187D               	xorwf	_input,w,c	;volatile
 19928  003E16  B4D8               	btfsc	status,2,c
 19929  003E18  D00D               	goto	i2l10656
 19930  003E1A  D018               	goto	i2l10658
 19931  003E1C                     i2l10646:
 19932                           
 19933                           ;interruptHandler.c: 24: machine_state = Testing_state;
 19934  003E1C  0E03               	movlw	3
 19935  003E1E  D007               	goto	L16
 19936  003E20                     i2l10648:
 19937                           
 19938                           ; BSR set to: 0
 19939                           ;interruptHandler.c: 27: machine_state = UI_state;
 19940  003E20  0E00               	movlw	0
 19941  003E22  0100               	movlb	0	; () banked
 19942  003E24  6FFC               	movwf	_machine_state& (0+255),b
 19943                           
 19944                           ; BSR set to: 0
 19945                           ;interruptHandler.c: 28: change_state_to_menu_start();
 19946  003E26  ECA7  F02F         	call	i2_change_state_to_menu_start	;wreg free
 19947                           
 19948                           ;interruptHandler.c: 29: break;
 19949  003E2A  D015               	goto	i2l10662
 19950  003E2C                     i2l10652:
 19951                           
 19952                           ;interruptHandler.c: 31: machine_state = DoneSorting_state;
 19953  003E2C  0E02               	movlw	2
 19954  003E2E                     L16:
 19955  003E2E  0100               	movlb	0	; () banked
 19956  003E30  6FFC               	movwf	_machine_state& (0+255),b
 19957                           
 19958                           ; BSR set to: 0
 19959                           ;interruptHandler.c: 33: }
 19960                           
 19961                           ;interruptHandler.c: 32: break;
 19962  003E32  D011               	goto	i2l10662
 19963  003E34                     i2l10656:
 19964  003E34  0100               	movlb	0	; () banked
 19965  003E36  51FC               	movf	_machine_state& (0+255),w,b
 19966                           
 19967                           ; Switch size 1, requested type "space"
 19968                           ; Number of cases is 3, Range of values is 0 to 3
 19969                           ; switch strategies available:
 19970                           ; Name         Instructions Cycles
 19971                           ; simple_byte           10     6 (average)
 19972                           ;	Chosen strategy is simple_byte
 19973  003E38  0A00               	xorlw	0	; case 0
 19974  003E3A  B4D8               	btfsc	status,2,c
 19975  003E3C  D7EF               	goto	i2l10646
 19976  003E3E  0A01               	xorlw	1	; case 1
 19977  003E40  B4D8               	btfsc	status,2,c
 19978  003E42  D7F4               	goto	i2l10652
 19979  003E44  0A02               	xorlw	2	; case 3
 19980  003E46  B4D8               	btfsc	status,2,c
 19981  003E48  D7EB               	goto	i2l10648
 19982                           
 19983                           ; BSR set to: 0
 19984                           ;interruptHandler.c: 34: }
 19985  003E4A  D005               	goto	i2l10662
 19986  003E4C                     i2l10658:
 19987                           
 19988                           ;interruptHandler.c: 35: else if(machine_state == UI_state){
 19989  003E4C  0100               	movlb	0	; () banked
 19990  003E4E  51FC               	movf	_machine_state& (0+255),w,b
 19991  003E50  B4D8               	btfsc	status,2,c
 19992                           
 19993                           ; BSR set to: 0
 19994                           ;interruptHandler.c: 36: updateMenu();
 19995  003E52  EC67  F01B         	call	_updateMenu	;wreg free
 19996  003E56                     i2l10662:
 19997                           
 19998                           ;interruptHandler.c: 37: }
 19999                           ;interruptHandler.c: 38: }
 20000                           ;interruptHandler.c: 41: if(TMR0IF){
 20001  003E56  A4F2               	btfss	intcon,2,c	;volatile
 20002  003E58  D00C               	goto	i2l10676
 20003                           
 20004                           ;interruptHandler.c: 42: TMR0IF = 0;
 20005  003E5A  94F2               	bcf	intcon,2,c	;volatile
 20006                           
 20007                           ;interruptHandler.c: 43: if(machine_state == Sorting_state){
 20008  003E5C  0100               	movlb	0	; () banked
 20009  003E5E  05FC               	decf	_machine_state& (0+255),w,b
 20010  003E60  A4D8               	btfss	status,2,c
 20011  003E62  D007               	goto	i2l10676
 20012                           
 20013                           ; BSR set to: 0
 20014                           ;interruptHandler.c: 44: printSortTimer();
 20015  003E64  ECD4  F016         	call	_printSortTimer	;wreg free
 20016                           
 20017                           ;interruptHandler.c: 46: TMR0H = 0b10000101;
 20018  003E68  0E85               	movlw	133
 20019  003E6A  6ED7               	movwf	4055,c	;volatile
 20020                           
 20021                           ;interruptHandler.c: 47: TMR0L = 0b11101110;
 20022  003E6C  0EEE               	movlw	238
 20023  003E6E  6ED6               	movwf	4054,c	;volatile
 20024                           
 20025                           ;interruptHandler.c: 48: TMR0ON = 1;
 20026  003E70  8ED5               	bsf	4053,7,c	;volatile
 20027  003E72                     i2l10676:
 20028                           
 20029                           ;interruptHandler.c: 49: }
 20030                           ;interruptHandler.c: 50: }
 20031                           ;interruptHandler.c: 53: if(TMR1IF){
 20032  003E72  A09E               	btfss	3998,0,c	;volatile
 20033  003E74  D028               	goto	i2l10704
 20034                           
 20035                           ;interruptHandler.c: 54: TMR1IF = 0;
 20036  003E76  909E               	bcf	3998,0,c	;volatile
 20037                           
 20038                           ;interruptHandler.c: 55: TMR1ON = 0;
 20039  003E78  90CD               	bcf	4045,0,c	;volatile
 20040                           
 20041                           ;interruptHandler.c: 56: if(machine_state == Sorting_state){
 20042  003E7A  0100               	movlb	0	; () banked
 20043  003E7C  05FC               	decf	_machine_state& (0+255),w,b
 20044  003E7E  A4D8               	btfss	status,2,c
 20045  003E80  D022               	goto	i2l10704
 20046                           
 20047                           ; BSR set to: 0
 20048                           ;interruptHandler.c: 57: if(was_low_1){
 20049  003E82  5077               	movf	_was_low_1,w,c	;volatile
 20050  003E84  1078               	iorwf	_was_low_1+1,w,c	;volatile
 20051  003E86  B4D8               	btfsc	status,2,c
 20052  003E88  D00A               	goto	i2l1088
 20053                           
 20054                           ; BSR set to: 0
 20055                           ;interruptHandler.c: 58: LATCbits.LATC1 = 1;
 20056  003E8A  828B               	bsf	3979,1,c	;volatile
 20057                           
 20058                           ; BSR set to: 0
 20059                           ;interruptHandler.c: 59: was_low_1 = 0;
 20060  003E8C  0E00               	movlw	0
 20061  003E8E  6E78               	movwf	_was_low_1+1,c	;volatile
 20062  003E90  0E00               	movlw	0
 20063  003E92  6E77               	movwf	_was_low_1,c	;volatile
 20064                           
 20065                           ; BSR set to: 0
 20066                           ;interruptHandler.c: 60: TMR1H = servoTimes[0];
 20067  003E94  C055  FFCF         	movff	_servoTimes,4047	;volatile
 20068                           
 20069                           ; BSR set to: 0
 20070                           ;interruptHandler.c: 61: TMR1L = servoTimes[1];
 20071  003E98  C057  FFCE         	movff	_servoTimes+2,4046	;volatile
 20072                           
 20073                           ;interruptHandler.c: 62: }
 20074  003E9C  D00D               	goto	i2l10698
 20075  003E9E                     i2l1088:
 20076                           
 20077                           ; BSR set to: 0
 20078                           ;interruptHandler.c: 63: else{
 20079                           ;interruptHandler.c: 64: LATCbits.LATC1 = 0;
 20080  003E9E  928B               	bcf	3979,1,c	;volatile
 20081                           
 20082                           ; BSR set to: 0
 20083                           ;interruptHandler.c: 65: was_low_1 = 1;
 20084  003EA0  0E00               	movlw	0
 20085  003EA2  6E78               	movwf	_was_low_1+1,c	;volatile
 20086  003EA4  0E01               	movlw	1
 20087  003EA6  6E77               	movwf	_was_low_1,c	;volatile
 20088                           
 20089                           ; BSR set to: 0
 20090                           ;interruptHandler.c: 66: TMR1H = 20000 - servoTimes[0];
 20091  003EA8  5055               	movf	_servoTimes,w,c
 20092  003EAA  0800               	sublw	0
 20093  003EAC  0F20               	addlw	32
 20094  003EAE  6ECF               	movwf	4047,c	;volatile
 20095                           
 20096                           ; BSR set to: 0
 20097                           ;interruptHandler.c: 67: TMR1L = 20000 - servoTimes[1];
 20098  003EB0  5057               	movf	_servoTimes+2,w,c
 20099  003EB2  0800               	sublw	0
 20100  003EB4  0F20               	addlw	32
 20101  003EB6  6ECE               	movwf	4046,c	;volatile
 20102  003EB8                     i2l10698:
 20103                           
 20104                           ; BSR set to: 0
 20105                           ;interruptHandler.c: 68: }
 20106                           ;interruptHandler.c: 69: TMR1ON = 1;
 20107  003EB8  80CD               	bsf	4045,0,c	;volatile
 20108                           
 20109                           ; BSR set to: 0
 20110                           ;interruptHandler.c: 70: servo_timer_counter += 10;
 20111  003EBA  0E0A               	movlw	10
 20112  003EBC  266D               	addwf	_servo_timer_counter,f,c	;volatile
 20113  003EBE  0E00               	movlw	0
 20114  003EC0  226E               	addwfc	_servo_timer_counter+1,f,c	;volatile
 20115                           
 20116                           ; BSR set to: 0
 20117                           ;interruptHandler.c: 72: updateServoStates();
 20118  003EC2  ECCD  F01F         	call	_updateServoStates	;wreg free
 20119  003EC6                     i2l10704:
 20120                           
 20121                           ;interruptHandler.c: 73: }
 20122                           ;interruptHandler.c: 74: }
 20123                           ;interruptHandler.c: 77: if(TMR2IF){
 20124  003EC6  A29E               	btfss	3998,1,c	;volatile
 20125  003EC8  D026               	goto	i2l10730
 20126                           
 20127                           ;interruptHandler.c: 80: TMR2IF = 0;
 20128  003ECA  929E               	bcf	3998,1,c	;volatile
 20129                           
 20130                           ;interruptHandler.c: 81: TMR2ON = 0;
 20131  003ECC  94CA               	bcf	4042,2,c	;volatile
 20132                           
 20133                           ;interruptHandler.c: 82: timer2_counter++;
 20134  003ECE  4A73               	infsnz	_timer2_counter,f,c	;volatile
 20135  003ED0  2A74               	incf	_timer2_counter+1,f,c	;volatile
 20136                           
 20137                           ;interruptHandler.c: 83: if(machine_state == Sorting_state){
 20138  003ED2  0100               	movlb	0	; () banked
 20139  003ED4  05FC               	decf	_machine_state& (0+255),w,b
 20140  003ED6  A4D8               	btfss	status,2,c
 20141  003ED8  D01E               	goto	i2l10730
 20142                           
 20143                           ; BSR set to: 0
 20144                           ;interruptHandler.c: 84: if(was_low_2 && (timer2_counter == 2)){
 20145  003EDA  5079               	movf	_was_low_2,w,c	;volatile
 20146  003EDC  107A               	iorwf	_was_low_2+1,w,c	;volatile
 20147  003EDE  B4D8               	btfsc	status,2,c
 20148  003EE0  D00A               	goto	i2l10720
 20149                           
 20150                           ; BSR set to: 0
 20151  003EE2  0E02               	movlw	2
 20152  003EE4  1873               	xorwf	_timer2_counter,w,c	;volatile
 20153  003EE6  1074               	iorwf	_timer2_counter+1,w,c	;volatile
 20154  003EE8  A4D8               	btfss	status,2,c
 20155  003EEA  D005               	goto	i2l10720
 20156                           
 20157                           ; BSR set to: 0
 20158                           ;interruptHandler.c: 86: LATBbits.LATB3 = 1;
 20159  003EEC  868A               	bsf	3978,3,c	;volatile
 20160                           
 20161                           ; BSR set to: 0
 20162                           ;interruptHandler.c: 87: was_low_2 = 0;
 20163  003EEE  0E00               	movlw	0
 20164  003EF0  6E7A               	movwf	_was_low_2+1,c	;volatile
 20165  003EF2  0E00               	movlw	0
 20166  003EF4  D008               	goto	L17
 20167  003EF6                     i2l10720:
 20168                           
 20169                           ; BSR set to: 0
 20170                           ;interruptHandler.c: 90: else if(!was_low_2){
 20171  003EF6  5079               	movf	_was_low_2,w,c	;volatile
 20172  003EF8  107A               	iorwf	_was_low_2+1,w,c	;volatile
 20173  003EFA  A4D8               	btfss	status,2,c
 20174  003EFC  D009               	goto	i2l10726
 20175                           
 20176                           ; BSR set to: 0
 20177                           ;interruptHandler.c: 91: LATBbits.LATB3 = 0;
 20178  003EFE  968A               	bcf	3978,3,c	;volatile
 20179                           
 20180                           ; BSR set to: 0
 20181                           ;interruptHandler.c: 92: was_low_2 = 1;
 20182  003F00  0E00               	movlw	0
 20183  003F02  6E7A               	movwf	_was_low_2+1,c	;volatile
 20184  003F04  0E01               	movlw	1
 20185  003F06                     L17:
 20186  003F06  6E79               	movwf	_was_low_2,c	;volatile
 20187                           
 20188                           ;interruptHandler.c: 93: timer2_counter = 0;
 20189  003F08  0E00               	movlw	0
 20190  003F0A  6E74               	movwf	_timer2_counter+1,c	;volatile
 20191  003F0C  0E00               	movlw	0
 20192  003F0E  6E73               	movwf	_timer2_counter,c	;volatile
 20193  003F10                     i2l10726:
 20194                           
 20195                           ; BSR set to: 0
 20196                           ;interruptHandler.c: 94: }
 20197                           ;interruptHandler.c: 95: updateArmState();
 20198  003F10  EC78  F02D         	call	_updateArmState	;wreg free
 20199                           
 20200                           ;interruptHandler.c: 96: TMR2ON = 1;
 20201  003F14  84CA               	bsf	4042,2,c	;volatile
 20202  003F16                     i2l10730:
 20203                           
 20204                           ;interruptHandler.c: 97: }
 20205                           ;interruptHandler.c: 98: }
 20206                           ;interruptHandler.c: 101: if(TMR3IF){
 20207  003F16  A2A1               	btfss	4001,1,c	;volatile
 20208  003F18  D022               	goto	i2l1099
 20209                           
 20210                           ;interruptHandler.c: 102: TMR3IF = 0;
 20211  003F1A  92A1               	bcf	4001,1,c	;volatile
 20212                           
 20213                           ;interruptHandler.c: 103: TMR3ON = 0;
 20214  003F1C  90B1               	bcf	4017,0,c	;volatile
 20215                           
 20216                           ;interruptHandler.c: 104: if(machine_state == Sorting_state){
 20217  003F1E  0100               	movlb	0	; () banked
 20218  003F20  05FC               	decf	_machine_state& (0+255),w,b
 20219  003F22  A4D8               	btfss	status,2,c
 20220  003F24  D01C               	goto	i2l1099
 20221                           
 20222                           ; BSR set to: 0
 20223                           ;interruptHandler.c: 105: if(was_low_3){
 20224  003F26  507B               	movf	_was_low_3,w,c	;volatile
 20225  003F28  107C               	iorwf	_was_low_3+1,w,c	;volatile
 20226  003F2A  B4D8               	btfsc	status,2,c
 20227  003F2C  D00A               	goto	i2l1097
 20228                           
 20229                           ; BSR set to: 0
 20230                           ;interruptHandler.c: 106: LATCbits.LATC2 = 1;
 20231  003F2E  848B               	bsf	3979,2,c	;volatile
 20232                           
 20233                           ; BSR set to: 0
 20234                           ;interruptHandler.c: 107: was_low_3 = 0;
 20235  003F30  0E00               	movlw	0
 20236  003F32  6E7C               	movwf	_was_low_3+1,c	;volatile
 20237  003F34  0E00               	movlw	0
 20238  003F36  6E7B               	movwf	_was_low_3,c	;volatile
 20239                           
 20240                           ; BSR set to: 0
 20241                           ;interruptHandler.c: 108: TMR3H = servoTimes[2];
 20242  003F38  C059  FFB3         	movff	_servoTimes+4,4019	;volatile
 20243                           
 20244                           ; BSR set to: 0
 20245                           ;interruptHandler.c: 109: TMR3L = servoTimes[3];
 20246  003F3C  C05B  FFB2         	movff	_servoTimes+6,4018	;volatile
 20247                           
 20248                           ;interruptHandler.c: 110: }
 20249  003F40  D00D               	goto	i2l10752
 20250  003F42                     i2l1097:
 20251                           
 20252                           ; BSR set to: 0
 20253                           ;interruptHandler.c: 111: else{
 20254                           ;interruptHandler.c: 112: LATCbits.LATC2 = 0;
 20255  003F42  948B               	bcf	3979,2,c	;volatile
 20256                           
 20257                           ; BSR set to: 0
 20258                           ;interruptHandler.c: 113: was_low_3 = 1;
 20259  003F44  0E00               	movlw	0
 20260  003F46  6E7C               	movwf	_was_low_3+1,c	;volatile
 20261  003F48  0E01               	movlw	1
 20262  003F4A  6E7B               	movwf	_was_low_3,c	;volatile
 20263                           
 20264                           ; BSR set to: 0
 20265                           ;interruptHandler.c: 114: TMR3H = 20000 - servoTimes[2];
 20266  003F4C  5059               	movf	_servoTimes+4,w,c
 20267  003F4E  0800               	sublw	0
 20268  003F50  0F20               	addlw	32
 20269  003F52  6EB3               	movwf	4019,c	;volatile
 20270                           
 20271                           ; BSR set to: 0
 20272                           ;interruptHandler.c: 115: TMR3L = 20000 - servoTimes[3];
 20273  003F54  505B               	movf	_servoTimes+6,w,c
 20274  003F56  0800               	sublw	0
 20275  003F58  0F20               	addlw	32
 20276  003F5A  6EB2               	movwf	4018,c	;volatile
 20277  003F5C                     i2l10752:
 20278                           
 20279                           ; BSR set to: 0
 20280                           ;interruptHandler.c: 116: }
 20281                           ;interruptHandler.c: 117: TMR3ON = 1;
 20282  003F5C  80B1               	bsf	4017,0,c	;volatile
 20283  003F5E                     i2l1099:
 20284  003F5E  C054  FFF5         	movff	??_handler+15,tablat
 20285  003F62  C053  FFF8         	movff	??_handler+14,tblptru
 20286  003F66  C052  FFF7         	movff	??_handler+13,tblptrh
 20287  003F6A  C051  FFF6         	movff	??_handler+12,tblptrl
 20288  003F6E  C050  FFF4         	movff	??_handler+11,prodh
 20289  003F72  C04F  FFF3         	movff	??_handler+10,prodl
 20290  003F76  C04E  FFDA         	movff	??_handler+9,fsr2h
 20291  003F7A  C04D  FFD9         	movff	??_handler+8,fsr2l
 20292  003F7E  C04C  FFE2         	movff	??_handler+7,fsr1h
 20293  003F82  C04B  FFE1         	movff	??_handler+6,fsr1l
 20294  003F86  C04A  FFEA         	movff	??_handler+5,fsr0h
 20295  003F8A  C049  FFE9         	movff	??_handler+4,fsr0l
 20296  003F8E  C048  FFFB         	movff	??_handler+3,pclatu
 20297  003F92  C047  FFFA         	movff	??_handler+2,pclath
 20298  003F96  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 20299  003F98  0011               	retfie		f
 20300  003F9A                     __end_of_handler:
 20301                           	opt stack 0
 20302                           pclatu	equ	0xFFB
 20303                           pclath	equ	0xFFA
 20304                           tblptru	equ	0xFF8
 20305                           tblptrh	equ	0xFF7
 20306                           tblptrl	equ	0xFF6
 20307                           tablat	equ	0xFF5
 20308                           prodh	equ	0xFF4
 20309                           prodl	equ	0xFF3
 20310                           intcon	equ	0xFF2
 20311                           intcon2	equ	0xFF1
 20312                           intcon3	equ	0xFF0
 20313                           indf0	equ	0xFEF
 20314                           postinc0	equ	0xFEE
 20315                           fsr0h	equ	0xFEA
 20316                           fsr0l	equ	0xFE9
 20317                           wreg	equ	0xFE8
 20318                           postdec1	equ	0xFE5
 20319                           fsr1h	equ	0xFE2
 20320                           fsr1l	equ	0xFE1
 20321                           indf2	equ	0xFDF
 20322                           postinc2	equ	0xFDE
 20323                           postdec2	equ	0xFDD
 20324                           fsr2h	equ	0xFDA
 20325                           fsr2l	equ	0xFD9
 20326                           status	equ	0xFD8
 20327                           
 20328 ;; *************** function _updateServoStates *****************
 20329 ;; Defined at:
 20330 ;;		line 657 in file "sort.c"
 20331 ;; Parameters:    Size  Location     Type
 20332 ;;		None
 20333 ;; Auto vars:     Size  Location     Type
 20334 ;;		None
 20335 ;; Return value:  Size  Location     Type
 20336 ;;                  1    wreg      void 
 20337 ;; Registers used:
 20338 ;;		wreg, status,2, status,0, cstack
 20339 ;; Tracked objects:
 20340 ;;		On entry : 0/0
 20341 ;;		On exit  : 0/0
 20342 ;;		Unchanged: 0/0
 20343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20345 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20346 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20347 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20348 ;;Total ram usage:        2 bytes
 20349 ;; Hardware stack levels used:    1
 20350 ;; Hardware stack levels required when called:    1
 20351 ;; This function calls:
 20352 ;;		i2_updateServoPosition
 20353 ;; This function is called by:
 20354 ;;		_handler
 20355 ;; This function uses a non-reentrant model
 20356 ;;
 20357                           
 20358                           	psect	text65
 20359  003F9A                     __ptext65:
 20360                           	opt stack 0
 20361  003F9A                     _updateServoStates:
 20362                           	opt stack 22
 20363                           
 20364                           ;sort.c: 659: if(servo_timer_counter >= servo_timer_target){
 20365                           
 20366                           ;incstack = 0
 20367  003F9A  506F               	movf	_servo_timer_target,w,c	;volatile
 20368  003F9C  5C6D               	subwf	_servo_timer_counter,w,c	;volatile
 20369  003F9E  506E               	movf	_servo_timer_counter+1,w,c	;volatile
 20370  003FA0  0A80               	xorlw	128
 20371  003FA2  6E09               	movwf	??_updateServoStates& (0+255),c
 20372  003FA4  5070               	movf	_servo_timer_target+1,w,c	;volatile
 20373  003FA6  0A80               	xorlw	128
 20374  003FA8  5809               	subwfb	??_updateServoStates& (0+255),w,c
 20375  003FAA  A0D8               	btfss	status,0,c
 20376  003FAC  0012               	return	
 20377                           
 20378                           ;sort.c: 661: if(f_panning_to_bin){
 20379  003FAE  5065               	movf	_f_panning_to_bin,w,c	;volatile
 20380  003FB0  1066               	iorwf	_f_panning_to_bin+1,w,c	;volatile
 20381  003FB2  A4D8               	btfss	status,2,c
 20382  003FB4  D036               	goto	i2l10520
 20383  003FB6  D05F               	goto	i2l10524
 20384  003FB8                     i2l10494:
 20385                           
 20386                           ;sort.c: 665: updateServoPosition(1260, 3);
 20387  003FB8  0E04               	movlw	4
 20388  003FBA  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20389  003FBC  0EEC               	movlw	236
 20390  003FBE  6E01               	movwf	i2updateServoPosition@time_us,c
 20391  003FC0  0E00               	movlw	0
 20392  003FC2  6E04               	movwf	i2updateServoPosition@timer+1,c
 20393  003FC4  0E03               	movlw	3
 20394  003FC6  6E03               	movwf	i2updateServoPosition@timer,c
 20395  003FC8  EC54  F02B         	call	i2_updateServoPosition	;wreg free
 20396  003FCC  D025               	goto	i2l10514
 20397  003FCE                     i2l10498:
 20398                           
 20399                           ;sort.c: 667: servo_timer_target = 700;
 20400  003FCE  0E02               	movlw	2
 20401  003FD0  6E70               	movwf	_servo_timer_target+1,c	;volatile
 20402  003FD2  0EBC               	movlw	188
 20403  003FD4  6E6F               	movwf	_servo_timer_target,c	;volatile
 20404                           
 20405                           ;sort.c: 668: break;
 20406  003FD6  D04A               	goto	i2l10522
 20407  003FD8                     i2l10500:
 20408                           
 20409                           ;sort.c: 670: updateServoPosition(1260, 3);
 20410  003FD8  0E04               	movlw	4
 20411  003FDA  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20412  003FDC  0EEC               	movlw	236
 20413  003FDE  6E01               	movwf	i2updateServoPosition@time_us,c
 20414  003FE0  0E00               	movlw	0
 20415  003FE2  6E04               	movwf	i2updateServoPosition@timer+1,c
 20416  003FE4  0E03               	movlw	3
 20417  003FE6  6E03               	movwf	i2updateServoPosition@timer,c
 20418  003FE8  EC54  F02B         	call	i2_updateServoPosition	;wreg free
 20419  003FEC  D015               	goto	i2l10514
 20420  003FEE                     i2l10506:
 20421                           
 20422                           ;sort.c: 676: updateServoPosition(1390, 3);
 20423  003FEE  0E05               	movlw	5
 20424  003FF0  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20425  003FF2  0E6E               	movlw	110
 20426  003FF4  6E01               	movwf	i2updateServoPosition@time_us,c
 20427  003FF6  0E00               	movlw	0
 20428  003FF8  6E04               	movwf	i2updateServoPosition@timer+1,c
 20429  003FFA  0E03               	movlw	3
 20430  003FFC  6E03               	movwf	i2updateServoPosition@timer,c
 20431  003FFE  EC54  F02B         	call	i2_updateServoPosition	;wreg free
 20432  004002  D00A               	goto	i2l10514
 20433  004004                     i2l10512:
 20434                           
 20435                           ;sort.c: 681: updateServoPosition(1390, 3);
 20436  004004  0E05               	movlw	5
 20437  004006  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20438  004008  0E6E               	movlw	110
 20439  00400A  6E01               	movwf	i2updateServoPosition@time_us,c
 20440  00400C  0E00               	movlw	0
 20441  00400E  6E04               	movwf	i2updateServoPosition@timer+1,c
 20442  004010  0E03               	movlw	3
 20443  004012  6E03               	movwf	i2updateServoPosition@timer,c
 20444  004014  EC54  F02B         	call	i2_updateServoPosition	;wreg free
 20445  004018                     i2l10514:
 20446                           
 20447                           ;sort.c: 682: servo_timer_counter = 0;
 20448  004018  0E00               	movlw	0
 20449  00401A  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 20450  00401C  0E00               	movlw	0
 20451  00401E  6E6D               	movwf	_servo_timer_counter,c	;volatile
 20452  004020  D7D6               	goto	i2l10498
 20453  004022                     i2l10520:
 20454  004022  C06B  F009         	movff	_pan_servo_state,??_updateServoStates	;volatile
 20455  004026  C06C  F00A         	movff	_pan_servo_state+1,??_updateServoStates+1	;volatile
 20456                           
 20457                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 20458                           ; Switch size 1, requested type "space"
 20459                           ; Number of cases is 4, Range of values is 1 to 9
 20460                           ; switch strategies available:
 20461                           ; Name         Instructions Cycles
 20462                           ; simple_byte           13     7 (average)
 20463                           ;	Chosen strategy is simple_byte
 20464  00402A  500A               	movf	??_updateServoStates+1,w,c
 20465  00402C  0A01               	xorlw	1	; case 1
 20466  00402E  B4D8               	btfsc	status,2,c
 20467  004030  D00A               	goto	i2l11198
 20468  004032  0A02               	xorlw	2	; case 3
 20469  004034  B4D8               	btfsc	status,2,c
 20470  004036  D00C               	goto	i2l11200
 20471  004038  0A05               	xorlw	5	; case 6
 20472  00403A  B4D8               	btfsc	status,2,c
 20473  00403C  D00E               	goto	i2l11202
 20474  00403E  0A0F               	xorlw	15	; case 9
 20475  004040  B4D8               	btfsc	status,2,c
 20476  004042  D010               	goto	i2l11204
 20477  004044  D013               	goto	i2l10522
 20478  004046                     i2l11198:
 20479                           
 20480                           ; Switch size 1, requested type "space"
 20481                           ; Number of cases is 1, Range of values is 144 to 144
 20482                           ; switch strategies available:
 20483                           ; Name         Instructions Cycles
 20484                           ; simple_byte            4     3 (average)
 20485                           ;	Chosen strategy is simple_byte
 20486  004046  5009               	movf	??_updateServoStates,w,c
 20487  004048  0A90               	xorlw	144	; case 144
 20488  00404A  B4D8               	btfsc	status,2,c
 20489  00404C  D7B5               	goto	i2l10494
 20490  00404E  D00E               	goto	i2l10522
 20491  004050                     i2l11200:
 20492                           
 20493                           ; Switch size 1, requested type "space"
 20494                           ; Number of cases is 1, Range of values is 82 to 82
 20495                           ; switch strategies available:
 20496                           ; Name         Instructions Cycles
 20497                           ; simple_byte            4     3 (average)
 20498                           ;	Chosen strategy is simple_byte
 20499  004050  5009               	movf	??_updateServoStates,w,c
 20500  004052  0A52               	xorlw	82	; case 82
 20501  004054  B4D8               	btfsc	status,2,c
 20502  004056  D7C0               	goto	i2l10500
 20503  004058  D009               	goto	i2l10522
 20504  00405A                     i2l11202:
 20505                           
 20506                           ; Switch size 1, requested type "space"
 20507                           ; Number of cases is 1, Range of values is 14 to 14
 20508                           ; switch strategies available:
 20509                           ; Name         Instructions Cycles
 20510                           ; simple_byte            4     3 (average)
 20511                           ;	Chosen strategy is simple_byte
 20512  00405A  5009               	movf	??_updateServoStates,w,c
 20513  00405C  0A0E               	xorlw	14	; case 14
 20514  00405E  B4D8               	btfsc	status,2,c
 20515  004060  D7C6               	goto	i2l10506
 20516  004062  D004               	goto	i2l10522
 20517  004064                     i2l11204:
 20518                           
 20519                           ; Switch size 1, requested type "space"
 20520                           ; Number of cases is 1, Range of values is 196 to 196
 20521                           ; switch strategies available:
 20522                           ; Name         Instructions Cycles
 20523                           ; simple_byte            4     3 (average)
 20524                           ;	Chosen strategy is simple_byte
 20525  004064  5009               	movf	??_updateServoStates,w,c
 20526  004066  0AC4               	xorlw	196	; case 196
 20527  004068  B4D8               	btfsc	status,2,c
 20528  00406A  D7CC               	goto	i2l10512
 20529  00406C                     i2l10522:
 20530                           
 20531                           ;sort.c: 688: f_panning_to_bin = 0;
 20532  00406C  0E00               	movlw	0
 20533  00406E  6E66               	movwf	_f_panning_to_bin+1,c	;volatile
 20534  004070  0E00               	movlw	0
 20535  004072  6E65               	movwf	_f_panning_to_bin,c	;volatile
 20536                           
 20537                           ;sort.c: 689: }
 20538  004074  0012               	return	
 20539  004076                     i2l10524:
 20540                           
 20541                           ;sort.c: 690: else if(pan_servo_state == 1200){
 20542  004076  0EB0               	movlw	176
 20543  004078  186B               	xorwf	_pan_servo_state,w,c	;volatile
 20544  00407A  E15A               	bnz	i2l10554
 20545  00407C  0E04               	movlw	4
 20546  00407E  186C               	xorwf	_pan_servo_state+1,w,c	;volatile
 20547  004080  A4D8               	btfss	status,2,c
 20548  004082  D056               	goto	i2l10554
 20549                           
 20550                           ;sort.c: 692: servo_timer_counter = 0;
 20551  004084  0E00               	movlw	0
 20552  004086  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 20553  004088  0E00               	movlw	0
 20554  00408A  6E6D               	movwf	_servo_timer_counter,c	;volatile
 20555                           
 20556                           ;sort.c: 693: }
 20557  00408C  0012               	return	
 20558  00408E                     i2l10528:
 20559                           
 20560                           ;sort.c: 698: updateServoPosition(1050, 3);
 20561  00408E  0E04               	movlw	4
 20562  004090  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20563  004092  0E1A               	movlw	26
 20564  004094  6E01               	movwf	i2updateServoPosition@time_us,c
 20565  004096  0E00               	movlw	0
 20566  004098  6E04               	movwf	i2updateServoPosition@timer+1,c
 20567  00409A  0E03               	movlw	3
 20568  00409C  6E03               	movwf	i2updateServoPosition@timer,c
 20569  00409E  EC54  F02B         	call	i2_updateServoPosition	;wreg free
 20570                           
 20571                           ;sort.c: 699: servo_timer_counter = 0;
 20572  0040A2  0E00               	movlw	0
 20573  0040A4  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 20574  0040A6  0E00               	movlw	0
 20575  0040A8  6E6D               	movwf	_servo_timer_counter,c	;volatile
 20576                           
 20577                           ;sort.c: 700: servo_timer_target = 750;
 20578  0040AA  0E02               	movlw	2
 20579  0040AC  6E70               	movwf	_servo_timer_target+1,c	;volatile
 20580  0040AE  0EEE               	movlw	238
 20581  0040B0  6E6F               	movwf	_servo_timer_target,c	;volatile
 20582                           
 20583                           ;sort.c: 701: break;
 20584  0040B2  0012               	return	
 20585  0040B4                     i2l10534:
 20586                           
 20587                           ;sort.c: 703: updateServoPosition(1050, 3);
 20588  0040B4  0E04               	movlw	4
 20589  0040B6  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20590  0040B8  0E1A               	movlw	26
 20591  0040BA  6E01               	movwf	i2updateServoPosition@time_us,c
 20592  0040BC  0E00               	movlw	0
 20593  0040BE  6E04               	movwf	i2updateServoPosition@timer+1,c
 20594  0040C0  0E03               	movlw	3
 20595  0040C2  6E03               	movwf	i2updateServoPosition@timer,c
 20596  0040C4  EC54  F02B         	call	i2_updateServoPosition	;wreg free
 20597                           
 20598                           ;sort.c: 704: servo_timer_counter = 0;
 20599  0040C8  0E00               	movlw	0
 20600  0040CA  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 20601  0040CC  0E00               	movlw	0
 20602  0040CE  6E6D               	movwf	_servo_timer_counter,c	;volatile
 20603                           
 20604                           ;sort.c: 705: servo_timer_target = 750;
 20605  0040D0  0E02               	movlw	2
 20606  0040D2  6E70               	movwf	_servo_timer_target+1,c	;volatile
 20607  0040D4  0EEE               	movlw	238
 20608  0040D6  6E6F               	movwf	_servo_timer_target,c	;volatile
 20609                           
 20610                           ;sort.c: 706: break;
 20611  0040D8  0012               	return	
 20612  0040DA                     i2l10540:
 20613                           
 20614                           ;sort.c: 709: updateServoPosition(1200, 1);
 20615  0040DA  0E04               	movlw	4
 20616  0040DC  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20617  0040DE  0EB0               	movlw	176
 20618  0040E0  6E01               	movwf	i2updateServoPosition@time_us,c
 20619  0040E2  0E00               	movlw	0
 20620  0040E4  6E04               	movwf	i2updateServoPosition@timer+1,c
 20621  0040E6  0E01               	movlw	1
 20622  0040E8  6E03               	movwf	i2updateServoPosition@timer,c
 20623  0040EA  EC54  F02B         	call	i2_updateServoPosition	;wreg free
 20624                           
 20625                           ;sort.c: 710: updateServoPosition(1050, 3);
 20626  0040EE  0E04               	movlw	4
 20627  0040F0  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20628  0040F2  0E1A               	movlw	26
 20629  0040F4  6E01               	movwf	i2updateServoPosition@time_us,c
 20630  0040F6  0E00               	movlw	0
 20631  0040F8  6E04               	movwf	i2updateServoPosition@timer+1,c
 20632  0040FA  0E03               	movlw	3
 20633  0040FC  6E03               	movwf	i2updateServoPosition@timer,c
 20634  0040FE  EC54  F02B         	call	i2_updateServoPosition	;wreg free
 20635                           
 20636                           ;sort.c: 711: servo_timer_counter = 0;
 20637  004102  0E00               	movlw	0
 20638  004104  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 20639  004106  0E00               	movlw	0
 20640  004108  6E6D               	movwf	_servo_timer_counter,c	;volatile
 20641                           
 20642                           ;sort.c: 712: servo_timer_target = 9999;
 20643  00410A  0E27               	movlw	39
 20644  00410C  6E70               	movwf	_servo_timer_target+1,c	;volatile
 20645  00410E  0E0F               	movlw	15
 20646  004110  6E6F               	movwf	_servo_timer_target,c	;volatile
 20647                           
 20648                           ;sort.c: 714: f_can_distributed = 1;
 20649  004112  0E00               	movlw	0
 20650  004114  0101               	movlb	1	; () banked
 20651  004116  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
 20652  004118  0E01               	movlw	1
 20653  00411A  6F35               	movwf	_f_can_distributed& (0+255),b
 20654                           
 20655                           ; BSR set to: 1
 20656                           ;sort.c: 715: if(f_lastCan == 1){
 20657  00411C  0100               	movlb	0	; () banked
 20658  00411E  05EC               	decf	_f_lastCan& (0+255),w,b
 20659  004120  0100               	movlb	0	; () banked
 20660  004122  11ED               	iorwf	(_f_lastCan+1)& (0+255),w,b
 20661  004124  A4D8               	btfss	status,2,c
 20662  004126  0012               	return	
 20663                           
 20664                           ; BSR set to: 0
 20665                           ;sort.c: 716: machine_state = DoneSorting_state;
 20666  004128  0E02               	movlw	2
 20667  00412A  0100               	movlb	0	; () banked
 20668  00412C  6FFC               	movwf	_machine_state& (0+255),b
 20669                           
 20670                           ; BSR set to: 0
 20671                           ;sort.c: 722: }
 20672                           
 20673                           ; BSR set to: 0
 20674                           ;sort.c: 721: break;
 20675                           
 20676                           ;sort.c: 720: default:
 20677                           
 20678                           ; BSR set to: 0
 20679                           ;sort.c: 717: }
 20680                           ;sort.c: 718: break;
 20681  00412E  0012               	return	
 20682  004130                     i2l10554:
 20683  004130  C071  F009         	movff	_tilt_servo_state,??_updateServoStates	;volatile
 20684  004134  C072  F00A         	movff	_tilt_servo_state+1,??_updateServoStates+1	;volatile
 20685                           
 20686                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 20687                           ; Switch size 1, requested type "space"
 20688                           ; Number of cases is 2, Range of values is 4 to 5
 20689                           ; switch strategies available:
 20690                           ; Name         Instructions Cycles
 20691                           ; simple_byte            7     4 (average)
 20692                           ;	Chosen strategy is simple_byte
 20693  004138  500A               	movf	??_updateServoStates+1,w,c
 20694  00413A  0A04               	xorlw	4	; case 4
 20695  00413C  B4D8               	btfsc	status,2,c
 20696  00413E  D004               	goto	i2l11206
 20697  004140  0A01               	xorlw	1	; case 5
 20698  004142  A4D8               	btfss	status,2,c
 20699  004144  0012               	return	
 20700  004146  D008               	goto	i2l11208
 20701  004148                     i2l11206:
 20702                           
 20703                           ; Switch size 1, requested type "space"
 20704                           ; Number of cases is 2, Range of values is 26 to 236
 20705                           ; switch strategies available:
 20706                           ; Name         Instructions Cycles
 20707                           ; simple_byte            7     4 (average)
 20708                           ;	Chosen strategy is simple_byte
 20709  004148  5009               	movf	??_updateServoStates,w,c
 20710  00414A  0A1A               	xorlw	26	; case 26
 20711  00414C  B4D8               	btfsc	status,2,c
 20712  00414E  D7C5               	goto	i2l10540
 20713  004150  0AF6               	xorlw	246	; case 236
 20714  004152  A4D8               	btfss	status,2,c
 20715  004154  0012               	return	
 20716  004156  D79B               	goto	i2l10528
 20717  004158                     i2l11208:
 20718                           
 20719                           ; Switch size 1, requested type "space"
 20720                           ; Number of cases is 1, Range of values is 110 to 110
 20721                           ; switch strategies available:
 20722                           ; Name         Instructions Cycles
 20723                           ; simple_byte            4     3 (average)
 20724                           ;	Chosen strategy is simple_byte
 20725  004158  5009               	movf	??_updateServoStates,w,c
 20726  00415A  0A6E               	xorlw	110	; case 110
 20727  00415C  A4D8               	btfss	status,2,c
 20728  00415E  0012               	return	
 20729  004160  D7A9               	goto	i2l10534
 20730  004162                     __end_of_updateServoStates:
 20731                           	opt stack 0
 20732                           pclatu	equ	0xFFB
 20733                           pclath	equ	0xFFA
 20734                           tblptru	equ	0xFF8
 20735                           tblptrh	equ	0xFF7
 20736                           tblptrl	equ	0xFF6
 20737                           tablat	equ	0xFF5
 20738                           prodh	equ	0xFF4
 20739                           prodl	equ	0xFF3
 20740                           intcon	equ	0xFF2
 20741                           intcon2	equ	0xFF1
 20742                           intcon3	equ	0xFF0
 20743                           indf0	equ	0xFEF
 20744                           postinc0	equ	0xFEE
 20745                           fsr0h	equ	0xFEA
 20746                           fsr0l	equ	0xFE9
 20747                           wreg	equ	0xFE8
 20748                           postdec1	equ	0xFE5
 20749                           fsr1h	equ	0xFE2
 20750                           fsr1l	equ	0xFE1
 20751                           indf2	equ	0xFDF
 20752                           postinc2	equ	0xFDE
 20753                           postdec2	equ	0xFDD
 20754                           fsr2h	equ	0xFDA
 20755                           fsr2l	equ	0xFD9
 20756                           status	equ	0xFD8
 20757                           
 20758 ;; *************** function i2_updateServoPosition *****************
 20759 ;; Defined at:
 20760 ;;		line 642 in file "sort.c"
 20761 ;; Parameters:    Size  Location     Type
 20762 ;;  time_us         2    0[COMRAM] int 
 20763 ;;  timer           2    2[COMRAM] int 
 20764 ;; Auto vars:     Size  Location     Type
 20765 ;;  updateServoP    2    6[COMRAM] unsigned int 
 20766 ;; Return value:  Size  Location     Type
 20767 ;;                  1    wreg      void 
 20768 ;; Registers used:
 20769 ;;		wreg, status,2, status,0
 20770 ;; Tracked objects:
 20771 ;;		On entry : 0/0
 20772 ;;		On exit  : 0/0
 20773 ;;		Unchanged: 0/0
 20774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20775 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20776 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20777 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20778 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20779 ;;Total ram usage:        8 bytes
 20780 ;; Hardware stack levels used:    1
 20781 ;; This function calls:
 20782 ;;		Nothing
 20783 ;; This function is called by:
 20784 ;;		_updateServoStates
 20785 ;; This function uses a non-reentrant model
 20786 ;;
 20787                           
 20788                           	psect	text66
 20789  0056A8                     __ptext66:
 20790                           	opt stack 0
 20791  0056A8                     i2_updateServoPosition:
 20792                           	opt stack 22
 20793                           
 20794                           ;sort.c: 643: unsigned int my_time = 65535 - time_us;
 20795                           
 20796                           ;incstack = 0
 20797  0056A8  C001  F005         	movff	i2updateServoPosition@time_us,??i2_updateServoPosition
 20798  0056AC  C002  F006         	movff	i2updateServoPosition@time_us+1,??i2_updateServoPosition+1
 20799  0056B0  1E05               	comf	??i2_updateServoPosition,f,c
 20800  0056B2  1E06               	comf	??i2_updateServoPosition+1,f,c
 20801  0056B4  4A05               	infsnz	??i2_updateServoPosition,f,c
 20802  0056B6  2A06               	incf	??i2_updateServoPosition+1,f,c
 20803  0056B8  0EFF               	movlw	255
 20804  0056BA  2405               	addwf	??i2_updateServoPosition,w,c
 20805  0056BC  6E07               	movwf	i2updateServoPosition@my_time,c
 20806  0056BE  0EFF               	movlw	255
 20807  0056C0  2006               	addwfc	??i2_updateServoPosition+1,w,c
 20808  0056C2  6E08               	movwf	i2updateServoPosition@my_time+1,c
 20809                           
 20810                           ;sort.c: 644: switch(timer){
 20811  0056C4  D015               	goto	i2l9648
 20812  0056C6                     i2l9642:
 20813                           
 20814                           ;sort.c: 646: servoTimes[0] = my_time >> 8;
 20815  0056C6  5008               	movf	i2updateServoPosition@my_time+1,w,c
 20816  0056C8  6E55               	movwf	_servoTimes,c
 20817  0056CA  6A56               	clrf	_servoTimes+1,c
 20818                           
 20819                           ;sort.c: 647: servoTimes[1] = my_time & 0xFF;
 20820  0056CC  5007               	movf	i2updateServoPosition@my_time,w,c
 20821  0056CE  6E57               	movwf	_servoTimes+2,c
 20822  0056D0  6A58               	clrf	_servoTimes+3,c
 20823                           
 20824                           ;sort.c: 649: pan_servo_state = time_us;
 20825  0056D2  C001  F06B         	movff	i2updateServoPosition@time_us,_pan_servo_state	;volatile
 20826  0056D6  C002  F06C         	movff	i2updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 20827  0056DA                     i2l969:
 20828                           
 20829                           ;sort.c: 651: servoTimes[2] = my_time >> 8;
 20830  0056DA  5008               	movf	i2updateServoPosition@my_time+1,w,c
 20831  0056DC  6E59               	movwf	_servoTimes+4,c
 20832  0056DE  6A5A               	clrf	_servoTimes+5,c
 20833                           
 20834                           ;sort.c: 652: servoTimes[3] = my_time & 0xFF;
 20835  0056E0  5007               	movf	i2updateServoPosition@my_time,w,c
 20836  0056E2  6E5B               	movwf	_servoTimes+6,c
 20837  0056E4  6A5C               	clrf	_servoTimes+7,c
 20838                           
 20839                           ;sort.c: 654: tilt_servo_state = time_us;
 20840  0056E6  C001  F071         	movff	i2updateServoPosition@time_us,_tilt_servo_state	;volatile
 20841  0056EA  C002  F072         	movff	i2updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 20842                           
 20843                           ;sort.c: 655: }
 20844  0056EE  0012               	return	
 20845  0056F0                     i2l9648:
 20846  0056F0  C003  F005         	movff	i2updateServoPosition@timer,??i2_updateServoPosition
 20847  0056F4  C004  F006         	movff	i2updateServoPosition@timer+1,??i2_updateServoPosition+1
 20848                           
 20849                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20850                           ; Switch size 1, requested type "space"
 20851                           ; Number of cases is 1, Range of values is 0 to 0
 20852                           ; switch strategies available:
 20853                           ; Name         Instructions Cycles
 20854                           ; simple_byte            4     3 (average)
 20855                           ;	Chosen strategy is simple_byte
 20856  0056F8  5006               	movf	??i2_updateServoPosition+1,w,c
 20857  0056FA  0A00               	xorlw	0	; case 0
 20858  0056FC  A4D8               	btfss	status,2,c
 20859  0056FE  0012               	return	
 20860                           
 20861                           ; Switch size 1, requested type "space"
 20862                           ; Number of cases is 2, Range of values is 1 to 3
 20863                           ; switch strategies available:
 20864                           ; Name         Instructions Cycles
 20865                           ; simple_byte            7     4 (average)
 20866                           ;	Chosen strategy is simple_byte
 20867  005700  5005               	movf	??i2_updateServoPosition,w,c
 20868  005702  0A01               	xorlw	1	; case 1
 20869  005704  B4D8               	btfsc	status,2,c
 20870  005706  D7DF               	goto	i2l9642
 20871  005708  0A02               	xorlw	2	; case 3
 20872  00570A  A4D8               	btfss	status,2,c
 20873  00570C  0012               	return	
 20874  00570E  D7E5               	goto	i2l969
 20875  005710                     __end_ofi2_updateServoPosition:
 20876                           	opt stack 0
 20877                           pclatu	equ	0xFFB
 20878                           pclath	equ	0xFFA
 20879                           tblptru	equ	0xFF8
 20880                           tblptrh	equ	0xFF7
 20881                           tblptrl	equ	0xFF6
 20882                           tablat	equ	0xFF5
 20883                           prodh	equ	0xFF4
 20884                           prodl	equ	0xFF3
 20885                           intcon	equ	0xFF2
 20886                           intcon2	equ	0xFF1
 20887                           intcon3	equ	0xFF0
 20888                           indf0	equ	0xFEF
 20889                           postinc0	equ	0xFEE
 20890                           fsr0h	equ	0xFEA
 20891                           fsr0l	equ	0xFE9
 20892                           wreg	equ	0xFE8
 20893                           postdec1	equ	0xFE5
 20894                           fsr1h	equ	0xFE2
 20895                           fsr1l	equ	0xFE1
 20896                           indf2	equ	0xFDF
 20897                           postinc2	equ	0xFDE
 20898                           postdec2	equ	0xFDD
 20899                           fsr2h	equ	0xFDA
 20900                           fsr2l	equ	0xFD9
 20901                           status	equ	0xFD8
 20902                           
 20903 ;; *************** function _updateMenu *****************
 20904 ;; Defined at:
 20905 ;;		line 216 in file "UI.c"
 20906 ;; Parameters:    Size  Location     Type
 20907 ;;		None
 20908 ;; Auto vars:     Size  Location     Type
 20909 ;;		None
 20910 ;; Return value:  Size  Location     Type
 20911 ;;                  1    wreg      void 
 20912 ;; Registers used:
 20913 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20914 ;; Tracked objects:
 20915 ;;		On entry : 0/0
 20916 ;;		On exit  : 0/0
 20917 ;;		Unchanged: 0/0
 20918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20920 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20921 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20922 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20923 ;;Total ram usage:        2 bytes
 20924 ;; Hardware stack levels used:    1
 20925 ;; Hardware stack levels required when called:    5
 20926 ;; This function calls:
 20927 ;;		_change_state_to_logs_11
 20928 ;;		_change_state_to_logs_12
 20929 ;;		_change_state_to_logs_22
 20930 ;;		_change_state_to_logs_23
 20931 ;;		_change_state_to_logs_33
 20932 ;;		_change_state_to_logs_34
 20933 ;;		_change_state_to_menu_11
 20934 ;;		_change_state_to_menu_23
 20935 ;;		_dispLogs
 20936 ;;		_inputHandler
 20937 ;;		i2_change_state_to_menu_12
 20938 ;;		i2_change_state_to_menu_22
 20939 ;;		i2_change_state_to_menu_start
 20940 ;; This function is called by:
 20941 ;;		_handler
 20942 ;; This function uses a non-reentrant model
 20943 ;;
 20944                           
 20945                           	psect	text67
 20946  0036CE                     __ptext67:
 20947                           	opt stack 0
 20948  0036CE                     _updateMenu:
 20949                           	opt stack 18
 20950                           
 20951                           ;UI.c: 217: up = 0; down = 0; enter = 0; back = 0;
 20952                           
 20953                           ;incstack = 0
 20954  0036CE  0E00               	movlw	0
 20955  0036D0  6E76               	movwf	_up+1,c
 20956  0036D2  0E00               	movlw	0
 20957  0036D4  6E75               	movwf	_up,c
 20958  0036D6  0E00               	movlw	0
 20959  0036D8  6E62               	movwf	_down+1,c
 20960  0036DA  0E00               	movlw	0
 20961  0036DC  6E61               	movwf	_down,c
 20962  0036DE  0E00               	movlw	0
 20963  0036E0  6E64               	movwf	_enter+1,c
 20964  0036E2  0E00               	movlw	0
 20965  0036E4  6E63               	movwf	_enter,c
 20966  0036E6  0E00               	movlw	0
 20967  0036E8  6E60               	movwf	_back+1,c
 20968  0036EA  0E00               	movlw	0
 20969  0036EC  6E5F               	movwf	_back,c
 20970                           
 20971                           ;UI.c: 218: (INTCONbits.GIE = 0);
 20972  0036EE  9EF2               	bcf	intcon,7,c	;volatile
 20973                           
 20974                           ;UI.c: 220: if (inputHandler()
 20975                           ;UI.c: 223: ){
 20976  0036F0  ECE2  F01D         	call	_inputHandler	;wreg free
 20977  0036F4  502A               	movf	?_inputHandler,w,c
 20978  0036F6  102B               	iorwf	?_inputHandler+1,w,c
 20979  0036F8  A4D8               	btfss	status,2,c
 20980  0036FA  D112               	goto	i2l10218
 20981  0036FC  D146               	goto	i2l275
 20982  0036FE                     i2l10070:
 20983                           
 20984                           ;UI.c: 227: change_state_to_menu_11();
 20985  0036FE  EC94  F02E         	call	_change_state_to_menu_11	;wreg free
 20986                           
 20987                           ;UI.c: 228: break;
 20988  003702  D143               	goto	i2l275
 20989  003704                     i2l10072:
 20990                           
 20991                           ;UI.c: 231: if(up){
 20992  003704  5075               	movf	_up,w,c
 20993  003706  1076               	iorwf	_up+1,w,c
 20994  003708  B4D8               	btfsc	status,2,c
 20995  00370A  D003               	goto	i2l10076
 20996                           
 20997                           ;UI.c: 232: change_state_to_menu_23();
 20998  00370C  EC7C  F02E         	call	_change_state_to_menu_23	;wreg free
 20999                           
 21000                           ;UI.c: 233: }
 21001  003710  D13C               	goto	i2l275
 21002  003712                     i2l10076:
 21003                           
 21004                           ;UI.c: 234: else if(down){
 21005  003712  5061               	movf	_down,w,c
 21006  003714  1062               	iorwf	_down+1,w,c
 21007  003716  B4D8               	btfsc	status,2,c
 21008  003718  D003               	goto	i2l10080
 21009                           
 21010                           ;UI.c: 235: change_state_to_menu_12();
 21011  00371A  EC64  F02E         	call	i2_change_state_to_menu_12	;wreg free
 21012                           
 21013                           ;UI.c: 236: }
 21014  00371E  D135               	goto	i2l275
 21015  003720                     i2l10080:
 21016                           
 21017                           ;UI.c: 237: else if(enter){
 21018  003720  5063               	movf	_enter,w,c
 21019  003722  1064               	iorwf	_enter+1,w,c
 21020  003724  B4D8               	btfsc	status,2,c
 21021  003726  D131               	goto	i2l275
 21022                           
 21023                           ;UI.c: 238: change_state_to_menu_start();
 21024  003728  ECA7  F02F         	call	i2_change_state_to_menu_start	;wreg free
 21025                           
 21026                           ;UI.c: 239: }
 21027                           ;UI.c: 240: break;
 21028  00372C  D12E               	goto	i2l275
 21029  00372E                     i2l10084:
 21030                           
 21031                           ;UI.c: 243: if(up){
 21032  00372E  5075               	movf	_up,w,c
 21033  003730  1076               	iorwf	_up+1,w,c
 21034  003732  B4D8               	btfsc	status,2,c
 21035  003734  D003               	goto	i2l10088
 21036                           
 21037                           ;UI.c: 244: change_state_to_menu_11();
 21038  003736  EC94  F02E         	call	_change_state_to_menu_11	;wreg free
 21039                           
 21040                           ;UI.c: 245: }
 21041  00373A  D127               	goto	i2l275
 21042  00373C                     i2l10088:
 21043                           
 21044                           ;UI.c: 246: else if(down){
 21045  00373C  5061               	movf	_down,w,c
 21046  00373E  1062               	iorwf	_down+1,w,c
 21047  003740  B4D8               	btfsc	status,2,c
 21048  003742  D011               	goto	i2l10104
 21049                           
 21050                           ;UI.c: 247: change_state_to_menu_23();
 21051  003744  EC7C  F02E         	call	_change_state_to_menu_23	;wreg free
 21052                           
 21053                           ;UI.c: 248: }
 21054  003748  D120               	goto	i2l275
 21055  00374A                     i2l10096:
 21056                           
 21057                           ;UI.c: 255: if(up){
 21058  00374A  5075               	movf	_up,w,c
 21059  00374C  1076               	iorwf	_up+1,w,c
 21060  00374E  B4D8               	btfsc	status,2,c
 21061  003750  D003               	goto	i2l10100
 21062                           
 21063                           ;UI.c: 256: change_state_to_menu_11();
 21064  003752  EC94  F02E         	call	_change_state_to_menu_11	;wreg free
 21065                           
 21066                           ;UI.c: 257: }
 21067  003756  D119               	goto	i2l275
 21068  003758                     i2l10100:
 21069                           
 21070                           ;UI.c: 258: else if(down){
 21071  003758  5061               	movf	_down,w,c
 21072  00375A  1062               	iorwf	_down+1,w,c
 21073  00375C  B4D8               	btfsc	status,2,c
 21074  00375E  D003               	goto	i2l10104
 21075                           
 21076                           ;UI.c: 259: change_state_to_menu_23();
 21077  003760  EC7C  F02E         	call	_change_state_to_menu_23	;wreg free
 21078                           
 21079                           ;UI.c: 260: }
 21080  003764  D112               	goto	i2l275
 21081  003766                     i2l10104:
 21082                           
 21083                           ;UI.c: 261: else if(enter){
 21084  003766  5063               	movf	_enter,w,c
 21085  003768  1064               	iorwf	_enter+1,w,c
 21086  00376A  B4D8               	btfsc	status,2,c
 21087  00376C  D10E               	goto	i2l275
 21088                           
 21089                           ;UI.c: 262: machine_state = Sorting_state;
 21090  00376E  0E01               	movlw	1
 21091  003770  0100               	movlb	0	; () banked
 21092  003772  6FFC               	movwf	_machine_state& (0+255),b
 21093                           
 21094                           ; BSR set to: 0
 21095                           ;UI.c: 263: }
 21096                           ;UI.c: 264: break;
 21097                           
 21098                           ; BSR set to: 0
 21099                           
 21100                           ; BSR set to: 0
 21101  003774  D10A               	goto	i2l275
 21102  003776                     i2l10108:
 21103                           
 21104                           ;UI.c: 267: if(up){
 21105  003776  5075               	movf	_up,w,c
 21106  003778  1076               	iorwf	_up+1,w,c
 21107  00377A  B4D8               	btfsc	status,2,c
 21108  00377C  D003               	goto	i2l10112
 21109                           
 21110                           ;UI.c: 268: change_state_to_menu_22();
 21111  00377E  EC4C  F02E         	call	i2_change_state_to_menu_22	;wreg free
 21112                           
 21113                           ;UI.c: 269: }
 21114  003782  D103               	goto	i2l275
 21115  003784                     i2l10112:
 21116                           
 21117                           ;UI.c: 270: else if(down){
 21118  003784  5061               	movf	_down,w,c
 21119  003786  1062               	iorwf	_down+1,w,c
 21120  003788  B4D8               	btfsc	status,2,c
 21121  00378A  D003               	goto	i2l10116
 21122                           
 21123                           ;UI.c: 271: change_state_to_menu_11();
 21124  00378C  EC94  F02E         	call	_change_state_to_menu_11	;wreg free
 21125                           
 21126                           ;UI.c: 272: }
 21127  003790  D0FC               	goto	i2l275
 21128  003792                     i2l10116:
 21129                           
 21130                           ;UI.c: 273: else if(enter){
 21131  003792  5063               	movf	_enter,w,c
 21132  003794  1064               	iorwf	_enter+1,w,c
 21133  003796  B4D8               	btfsc	status,2,c
 21134  003798  D0F8               	goto	i2l275
 21135                           
 21136                           ;UI.c: 274: change_state_to_logs_11();
 21137  00379A  EC0C  F02F         	call	_change_state_to_logs_11	;wreg free
 21138                           
 21139                           ;UI.c: 275: }
 21140                           ;UI.c: 276: break;
 21141  00379E  D0F5               	goto	i2l275
 21142  0037A0                     i2l10120:
 21143                           
 21144                           ;UI.c: 279: if(up){
 21145  0037A0  5075               	movf	_up,w,c
 21146  0037A2  1076               	iorwf	_up+1,w,c
 21147  0037A4  B4D8               	btfsc	status,2,c
 21148  0037A6  D003               	goto	i2l10124
 21149                           
 21150                           ;UI.c: 280: change_state_to_logs_34();
 21151  0037A8  ECAC  F02E         	call	_change_state_to_logs_34	;wreg free
 21152                           
 21153                           ;UI.c: 281: }
 21154  0037AC  D0EE               	goto	i2l275
 21155  0037AE                     i2l10124:
 21156                           
 21157                           ;UI.c: 282: else if(down){
 21158  0037AE  5061               	movf	_down,w,c
 21159  0037B0  1062               	iorwf	_down+1,w,c
 21160  0037B2  B4D8               	btfsc	status,2,c
 21161  0037B4  D003               	goto	i2l10128
 21162                           
 21163                           ;UI.c: 283: change_state_to_logs_12();
 21164  0037B6  ECF4  F02E         	call	_change_state_to_logs_12	;wreg free
 21165                           
 21166                           ;UI.c: 284: }
 21167  0037BA  D0E7               	goto	i2l275
 21168  0037BC                     i2l10128:
 21169                           
 21170                           ;UI.c: 285: else if(enter){
 21171  0037BC  5063               	movf	_enter,w,c
 21172  0037BE  1064               	iorwf	_enter+1,w,c
 21173  0037C0  B4D8               	btfsc	status,2,c
 21174  0037C2  D007               	goto	i2l10132
 21175                           
 21176                           ;UI.c: 286: dispLogs(1);
 21177  0037C4  0E00               	movlw	0
 21178  0037C6  6E13               	movwf	dispLogs@myLog+1,c
 21179  0037C8  0E01               	movlw	1
 21180  0037CA  6E12               	movwf	dispLogs@myLog,c
 21181  0037CC  ECE1  F02F         	call	_dispLogs	;wreg free
 21182                           
 21183                           ;UI.c: 287: }
 21184  0037D0  D0DC               	goto	i2l275
 21185  0037D2                     i2l10132:
 21186                           
 21187                           ;UI.c: 288: else if(back){
 21188  0037D2  505F               	movf	_back,w,c
 21189  0037D4  1060               	iorwf	_back+1,w,c
 21190  0037D6  B4D8               	btfsc	status,2,c
 21191  0037D8  D0D8               	goto	i2l275
 21192                           
 21193                           ;UI.c: 289: change_state_to_menu_23();
 21194  0037DA  EC7C  F02E         	call	_change_state_to_menu_23	;wreg free
 21195                           
 21196                           ;UI.c: 290: }
 21197                           ;UI.c: 291: break;
 21198  0037DE  D0D5               	goto	i2l275
 21199  0037E0                     i2l10136:
 21200                           
 21201                           ;UI.c: 294: if(up){
 21202  0037E0  5075               	movf	_up,w,c
 21203  0037E2  1076               	iorwf	_up+1,w,c
 21204  0037E4  B4D8               	btfsc	status,2,c
 21205  0037E6  D003               	goto	i2l10140
 21206                           
 21207                           ;UI.c: 295: change_state_to_logs_11();
 21208  0037E8  EC0C  F02F         	call	_change_state_to_logs_11	;wreg free
 21209                           
 21210                           ;UI.c: 296: }
 21211  0037EC  D0CE               	goto	i2l275
 21212  0037EE                     i2l10140:
 21213                           
 21214                           ;UI.c: 297: else if(down){
 21215  0037EE  5061               	movf	_down,w,c
 21216  0037F0  1062               	iorwf	_down+1,w,c
 21217  0037F2  B4D8               	btfsc	status,2,c
 21218  0037F4  D003               	goto	i2l10144
 21219                           
 21220                           ;UI.c: 298: change_state_to_logs_23();
 21221  0037F6  EC3B  F02F         	call	_change_state_to_logs_23	;wreg free
 21222                           
 21223                           ;UI.c: 299: }
 21224  0037FA  D0C7               	goto	i2l275
 21225  0037FC                     i2l10144:
 21226                           
 21227                           ;UI.c: 300: else if(enter){
 21228  0037FC  5063               	movf	_enter,w,c
 21229  0037FE  1064               	iorwf	_enter+1,w,c
 21230  003800  B4D8               	btfsc	status,2,c
 21231  003802  D007               	goto	i2l10148
 21232                           
 21233                           ;UI.c: 301: dispLogs(2);
 21234  003804  0E00               	movlw	0
 21235  003806  6E13               	movwf	dispLogs@myLog+1,c
 21236  003808  0E02               	movlw	2
 21237  00380A  6E12               	movwf	dispLogs@myLog,c
 21238  00380C  ECE1  F02F         	call	_dispLogs	;wreg free
 21239                           
 21240                           ;UI.c: 302: }
 21241  003810  D0BC               	goto	i2l275
 21242  003812                     i2l10148:
 21243                           
 21244                           ;UI.c: 303: else if(back){
 21245  003812  505F               	movf	_back,w,c
 21246  003814  1060               	iorwf	_back+1,w,c
 21247  003816  B4D8               	btfsc	status,2,c
 21248  003818  D0B8               	goto	i2l275
 21249                           
 21250                           ;UI.c: 304: change_state_to_menu_23();
 21251  00381A  EC7C  F02E         	call	_change_state_to_menu_23	;wreg free
 21252                           
 21253                           ;UI.c: 305: }
 21254                           ;UI.c: 306: break;
 21255  00381E  D0B5               	goto	i2l275
 21256  003820                     i2l10152:
 21257                           
 21258                           ;UI.c: 309: if(up){
 21259  003820  5075               	movf	_up,w,c
 21260  003822  1076               	iorwf	_up+1,w,c
 21261  003824  B4D8               	btfsc	status,2,c
 21262  003826  D003               	goto	i2l10156
 21263                           
 21264                           ;UI.c: 310: change_state_to_logs_11();
 21265  003828  EC0C  F02F         	call	_change_state_to_logs_11	;wreg free
 21266                           
 21267                           ;UI.c: 311: }
 21268  00382C  D0AE               	goto	i2l275
 21269  00382E                     i2l10156:
 21270                           
 21271                           ;UI.c: 312: else if(down){
 21272  00382E  5061               	movf	_down,w,c
 21273  003830  1062               	iorwf	_down+1,w,c
 21274  003832  B4D8               	btfsc	status,2,c
 21275  003834  D003               	goto	i2l10160
 21276                           
 21277                           ;UI.c: 313: change_state_to_logs_23();
 21278  003836  EC3B  F02F         	call	_change_state_to_logs_23	;wreg free
 21279                           
 21280                           ;UI.c: 314: }
 21281  00383A  D0A7               	goto	i2l275
 21282  00383C                     i2l10160:
 21283                           
 21284                           ;UI.c: 315: else if(enter){
 21285  00383C  5063               	movf	_enter,w,c
 21286  00383E  1064               	iorwf	_enter+1,w,c
 21287  003840  B4D8               	btfsc	status,2,c
 21288  003842  D007               	goto	i2l10164
 21289                           
 21290                           ;UI.c: 316: dispLogs(2);
 21291  003844  0E00               	movlw	0
 21292  003846  6E13               	movwf	dispLogs@myLog+1,c
 21293  003848  0E02               	movlw	2
 21294  00384A  6E12               	movwf	dispLogs@myLog,c
 21295  00384C  ECE1  F02F         	call	_dispLogs	;wreg free
 21296                           
 21297                           ;UI.c: 317: }
 21298  003850  D09C               	goto	i2l275
 21299  003852                     i2l10164:
 21300                           
 21301                           ;UI.c: 318: else if(back){
 21302  003852  505F               	movf	_back,w,c
 21303  003854  1060               	iorwf	_back+1,w,c
 21304  003856  B4D8               	btfsc	status,2,c
 21305  003858  D098               	goto	i2l275
 21306                           
 21307                           ;UI.c: 319: change_state_to_menu_23();
 21308  00385A  EC7C  F02E         	call	_change_state_to_menu_23	;wreg free
 21309                           
 21310                           ;UI.c: 320: }
 21311                           ;UI.c: 321: break;
 21312  00385E  D095               	goto	i2l275
 21313  003860                     i2l10168:
 21314                           
 21315                           ;UI.c: 324: if(up){
 21316  003860  5075               	movf	_up,w,c
 21317  003862  1076               	iorwf	_up+1,w,c
 21318  003864  B4D8               	btfsc	status,2,c
 21319  003866  D003               	goto	i2l10172
 21320                           
 21321                           ;UI.c: 325: change_state_to_logs_22();
 21322  003868  ECDC  F02E         	call	_change_state_to_logs_22	;wreg free
 21323                           
 21324                           ;UI.c: 326: }
 21325  00386C  D08E               	goto	i2l275
 21326  00386E                     i2l10172:
 21327                           
 21328                           ;UI.c: 327: else if(down){
 21329  00386E  5061               	movf	_down,w,c
 21330  003870  1062               	iorwf	_down+1,w,c
 21331  003872  B4D8               	btfsc	status,2,c
 21332  003874  D003               	goto	i2l10176
 21333                           
 21334                           ;UI.c: 328: change_state_to_logs_34();
 21335  003876  ECAC  F02E         	call	_change_state_to_logs_34	;wreg free
 21336                           
 21337                           ;UI.c: 329: }
 21338  00387A  D087               	goto	i2l275
 21339  00387C                     i2l10176:
 21340                           
 21341                           ;UI.c: 330: else if(enter){
 21342  00387C  5063               	movf	_enter,w,c
 21343  00387E  1064               	iorwf	_enter+1,w,c
 21344  003880  B4D8               	btfsc	status,2,c
 21345  003882  D007               	goto	i2l10180
 21346                           
 21347                           ;UI.c: 331: dispLogs(3);
 21348  003884  0E00               	movlw	0
 21349  003886  6E13               	movwf	dispLogs@myLog+1,c
 21350  003888  0E03               	movlw	3
 21351  00388A  6E12               	movwf	dispLogs@myLog,c
 21352  00388C  ECE1  F02F         	call	_dispLogs	;wreg free
 21353                           
 21354                           ;UI.c: 332: }
 21355  003890  D07C               	goto	i2l275
 21356  003892                     i2l10180:
 21357                           
 21358                           ;UI.c: 333: else if(back){
 21359  003892  505F               	movf	_back,w,c
 21360  003894  1060               	iorwf	_back+1,w,c
 21361  003896  B4D8               	btfsc	status,2,c
 21362  003898  D078               	goto	i2l275
 21363                           
 21364                           ;UI.c: 334: change_state_to_menu_23();
 21365  00389A  EC7C  F02E         	call	_change_state_to_menu_23	;wreg free
 21366                           
 21367                           ;UI.c: 335: }
 21368                           ;UI.c: 336: break;
 21369  00389E  D075               	goto	i2l275
 21370  0038A0                     i2l10184:
 21371                           
 21372                           ;UI.c: 339: if(up){
 21373  0038A0  5075               	movf	_up,w,c
 21374  0038A2  1076               	iorwf	_up+1,w,c
 21375  0038A4  B4D8               	btfsc	status,2,c
 21376  0038A6  D003               	goto	i2l10188
 21377                           
 21378                           ;UI.c: 340: change_state_to_logs_22();
 21379  0038A8  ECDC  F02E         	call	_change_state_to_logs_22	;wreg free
 21380                           
 21381                           ;UI.c: 341: }
 21382  0038AC  D06E               	goto	i2l275
 21383  0038AE                     i2l10188:
 21384                           
 21385                           ;UI.c: 342: else if(down){
 21386  0038AE  5061               	movf	_down,w,c
 21387  0038B0  1062               	iorwf	_down+1,w,c
 21388  0038B2  B4D8               	btfsc	status,2,c
 21389  0038B4  D003               	goto	i2l10192
 21390                           
 21391                           ;UI.c: 343: change_state_to_logs_34();
 21392  0038B6  ECAC  F02E         	call	_change_state_to_logs_34	;wreg free
 21393                           
 21394                           ;UI.c: 344: }
 21395  0038BA  D067               	goto	i2l275
 21396  0038BC                     i2l10192:
 21397                           
 21398                           ;UI.c: 345: else if(enter){
 21399  0038BC  5063               	movf	_enter,w,c
 21400  0038BE  1064               	iorwf	_enter+1,w,c
 21401  0038C0  B4D8               	btfsc	status,2,c
 21402  0038C2  D007               	goto	i2l10196
 21403                           
 21404                           ;UI.c: 346: dispLogs(3);
 21405  0038C4  0E00               	movlw	0
 21406  0038C6  6E13               	movwf	dispLogs@myLog+1,c
 21407  0038C8  0E03               	movlw	3
 21408  0038CA  6E12               	movwf	dispLogs@myLog,c
 21409  0038CC  ECE1  F02F         	call	_dispLogs	;wreg free
 21410                           
 21411                           ;UI.c: 347: }
 21412  0038D0  D05C               	goto	i2l275
 21413  0038D2                     i2l10196:
 21414                           
 21415                           ;UI.c: 348: else if(back){
 21416  0038D2  505F               	movf	_back,w,c
 21417  0038D4  1060               	iorwf	_back+1,w,c
 21418  0038D6  B4D8               	btfsc	status,2,c
 21419  0038D8  D058               	goto	i2l275
 21420                           
 21421                           ;UI.c: 349: change_state_to_menu_23();
 21422  0038DA  EC7C  F02E         	call	_change_state_to_menu_23	;wreg free
 21423                           
 21424                           ;UI.c: 350: }
 21425                           ;UI.c: 351: break;
 21426  0038DE  D055               	goto	i2l275
 21427  0038E0                     i2l10200:
 21428                           
 21429                           ;UI.c: 354: if(up){
 21430  0038E0  5075               	movf	_up,w,c
 21431  0038E2  1076               	iorwf	_up+1,w,c
 21432  0038E4  B4D8               	btfsc	status,2,c
 21433  0038E6  D003               	goto	i2l10204
 21434                           
 21435                           ;UI.c: 355: change_state_to_logs_33();
 21436  0038E8  ECC4  F02E         	call	_change_state_to_logs_33	;wreg free
 21437                           
 21438                           ;UI.c: 356: }
 21439  0038EC  D04E               	goto	i2l275
 21440  0038EE                     i2l10204:
 21441                           
 21442                           ;UI.c: 357: else if(down){
 21443  0038EE  5061               	movf	_down,w,c
 21444  0038F0  1062               	iorwf	_down+1,w,c
 21445  0038F2  B4D8               	btfsc	status,2,c
 21446  0038F4  D003               	goto	i2l10208
 21447                           
 21448                           ;UI.c: 358: change_state_to_logs_11();
 21449  0038F6  EC0C  F02F         	call	_change_state_to_logs_11	;wreg free
 21450                           
 21451                           ;UI.c: 359: }
 21452  0038FA  D047               	goto	i2l275
 21453  0038FC                     i2l10208:
 21454                           
 21455                           ;UI.c: 360: else if(enter){
 21456  0038FC  5063               	movf	_enter,w,c
 21457  0038FE  1064               	iorwf	_enter+1,w,c
 21458  003900  B4D8               	btfsc	status,2,c
 21459  003902  D007               	goto	i2l10212
 21460                           
 21461                           ;UI.c: 361: dispLogs(4);
 21462  003904  0E00               	movlw	0
 21463  003906  6E13               	movwf	dispLogs@myLog+1,c
 21464  003908  0E04               	movlw	4
 21465  00390A  6E12               	movwf	dispLogs@myLog,c
 21466  00390C  ECE1  F02F         	call	_dispLogs	;wreg free
 21467                           
 21468                           ;UI.c: 362: }
 21469  003910  D03C               	goto	i2l275
 21470  003912                     i2l10212:
 21471                           
 21472                           ;UI.c: 363: else if(back){
 21473  003912  505F               	movf	_back,w,c
 21474  003914  1060               	iorwf	_back+1,w,c
 21475  003916  B4D8               	btfsc	status,2,c
 21476  003918  D038               	goto	i2l275
 21477                           
 21478                           ;UI.c: 364: change_state_to_menu_23();
 21479  00391A  EC7C  F02E         	call	_change_state_to_menu_23	;wreg free
 21480                           
 21481                           ;UI.c: 370: }
 21482                           
 21483                           ;UI.c: 369: break;
 21484                           
 21485                           ;UI.c: 368: default:
 21486                           
 21487                           ;UI.c: 365: }
 21488                           ;UI.c: 366: break;
 21489  00391E  D035               	goto	i2l275
 21490  003920                     i2l10218:
 21491  003920  C0E8  F043         	movff	_cur_state,??_updateMenu
 21492  003924  C0E9  F044         	movff	_cur_state+1,??_updateMenu+1
 21493                           
 21494                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 21495                           ; Switch size 1, requested type "space"
 21496                           ; Number of cases is 3, Range of values is 0 to 4
 21497                           ; switch strategies available:
 21498                           ; Name         Instructions Cycles
 21499                           ; simple_byte           10     6 (average)
 21500                           ;	Chosen strategy is simple_byte
 21501  003928  5044               	movf	??_updateMenu+1,w,c
 21502  00392A  0A00               	xorlw	0	; case 0
 21503  00392C  B4D8               	btfsc	status,2,c
 21504  00392E  D007               	goto	i2l11212
 21505  003930  0A03               	xorlw	3	; case 3
 21506  003932  B4D8               	btfsc	status,2,c
 21507  003934  D015               	goto	i2l11214
 21508  003936  0A07               	xorlw	7	; case 4
 21509  003938  B4D8               	btfsc	status,2,c
 21510  00393A  D020               	goto	i2l11216
 21511  00393C  D026               	goto	i2l275
 21512  00393E                     i2l11212:
 21513                           
 21514                           ; Switch size 1, requested type "space"
 21515                           ; Number of cases is 5, Range of values is 0 to 23
 21516                           ; switch strategies available:
 21517                           ; Name         Instructions Cycles
 21518                           ; simple_byte           16     9 (average)
 21519                           ;	Chosen strategy is simple_byte
 21520  00393E  5043               	movf	??_updateMenu,w,c
 21521  003940  0A00               	xorlw	0	; case 0
 21522  003942  B4D8               	btfsc	status,2,c
 21523  003944  D6DC               	goto	i2l10070
 21524  003946  0A0B               	xorlw	11	; case 11
 21525  003948  B4D8               	btfsc	status,2,c
 21526  00394A  D6DC               	goto	i2l10072
 21527  00394C  0A07               	xorlw	7	; case 12
 21528  00394E  B4D8               	btfsc	status,2,c
 21529  003950  D6EE               	goto	i2l10084
 21530  003952  0A1A               	xorlw	26	; case 22
 21531  003954  B4D8               	btfsc	status,2,c
 21532  003956  D6F9               	goto	i2l10096
 21533  003958  0A01               	xorlw	1	; case 23
 21534  00395A  B4D8               	btfsc	status,2,c
 21535  00395C  D70C               	goto	i2l10108
 21536  00395E  D015               	goto	i2l275
 21537  003960                     i2l11214:
 21538                           
 21539                           ; Switch size 1, requested type "space"
 21540                           ; Number of cases is 4, Range of values is 243 to 255
 21541                           ; switch strategies available:
 21542                           ; Name         Instructions Cycles
 21543                           ; simple_byte           13     7 (average)
 21544                           ;	Chosen strategy is simple_byte
 21545  003960  5043               	movf	??_updateMenu,w,c
 21546  003962  0AF3               	xorlw	243	; case 243
 21547  003964  B4D8               	btfsc	status,2,c
 21548  003966  D71C               	goto	i2l10120
 21549  003968  0A07               	xorlw	7	; case 244
 21550  00396A  B4D8               	btfsc	status,2,c
 21551  00396C  D739               	goto	i2l10136
 21552  00396E  0A0A               	xorlw	10	; case 254
 21553  003970  B4D8               	btfsc	status,2,c
 21554  003972  D756               	goto	i2l10152
 21555  003974  0A01               	xorlw	1	; case 255
 21556  003976  B4D8               	btfsc	status,2,c
 21557  003978  D773               	goto	i2l10168
 21558  00397A  D007               	goto	i2l275
 21559  00397C                     i2l11216:
 21560                           
 21561                           ; Switch size 1, requested type "space"
 21562                           ; Number of cases is 2, Range of values is 9 to 10
 21563                           ; switch strategies available:
 21564                           ; Name         Instructions Cycles
 21565                           ; simple_byte            7     4 (average)
 21566                           ;	Chosen strategy is simple_byte
 21567  00397C  5043               	movf	??_updateMenu,w,c
 21568  00397E  0A09               	xorlw	9	; case 9
 21569  003980  B4D8               	btfsc	status,2,c
 21570  003982  D78E               	goto	i2l10184
 21571  003984  0A03               	xorlw	3	; case 10
 21572  003986  B4D8               	btfsc	status,2,c
 21573  003988  D7AB               	goto	i2l10200
 21574  00398A                     i2l275:
 21575                           
 21576                           ;UI.c: 371: }
 21577                           ;UI.c: 372: (INTCONbits.GIE = 1);
 21578  00398A  8EF2               	bsf	intcon,7,c	;volatile
 21579  00398C  0012               	return		;funcret
 21580  00398E                     __end_of_updateMenu:
 21581                           	opt stack 0
 21582                           pclatu	equ	0xFFB
 21583                           pclath	equ	0xFFA
 21584                           tblptru	equ	0xFF8
 21585                           tblptrh	equ	0xFF7
 21586                           tblptrl	equ	0xFF6
 21587                           tablat	equ	0xFF5
 21588                           prodh	equ	0xFF4
 21589                           prodl	equ	0xFF3
 21590                           intcon	equ	0xFF2
 21591                           intcon2	equ	0xFF1
 21592                           intcon3	equ	0xFF0
 21593                           indf0	equ	0xFEF
 21594                           postinc0	equ	0xFEE
 21595                           fsr0h	equ	0xFEA
 21596                           fsr0l	equ	0xFE9
 21597                           wreg	equ	0xFE8
 21598                           postdec1	equ	0xFE5
 21599                           fsr1h	equ	0xFE2
 21600                           fsr1l	equ	0xFE1
 21601                           indf2	equ	0xFDF
 21602                           postinc2	equ	0xFDE
 21603                           postdec2	equ	0xFDD
 21604                           fsr2h	equ	0xFDA
 21605                           fsr2l	equ	0xFD9
 21606                           status	equ	0xFD8
 21607                           
 21608 ;; *************** function i2_change_state_to_menu_start *****************
 21609 ;; Defined at:
 21610 ;;		line 477 in file "UI.c"
 21611 ;; Parameters:    Size  Location     Type
 21612 ;;		None
 21613 ;; Auto vars:     Size  Location     Type
 21614 ;;		None
 21615 ;; Return value:  Size  Location     Type
 21616 ;;                  1    wreg      void 
 21617 ;; Registers used:
 21618 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21619 ;; Tracked objects:
 21620 ;;		On entry : 0/0
 21621 ;;		On exit  : 0/0
 21622 ;;		Unchanged: 0/0
 21623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21627 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21628 ;;Total ram usage:        0 bytes
 21629 ;; Hardware stack levels used:    1
 21630 ;; Hardware stack levels required when called:    4
 21631 ;; This function calls:
 21632 ;;		i2_lcdInst
 21633 ;;		i2_printRTC
 21634 ;;		i2_printf
 21635 ;; This function is called by:
 21636 ;;		_updateMenu
 21637 ;;		_handler
 21638 ;; This function uses a non-reentrant model
 21639 ;;
 21640                           
 21641                           	psect	text68
 21642  005F4E                     __ptext68:
 21643                           	opt stack 0
 21644  005F4E                     i2_change_state_to_menu_start:
 21645                           	opt stack 19
 21646                           
 21647                           ;UI.c: 478: cur_state = 0;
 21648                           
 21649                           ;incstack = 0
 21650  005F4E  0E00               	movlw	0
 21651  005F50  0100               	movlb	0	; () banked
 21652  005F52  6FE9               	movwf	(_cur_state+1)& (0+255),b
 21653  005F54  0E00               	movlw	0
 21654  005F56  6FE8               	movwf	_cur_state& (0+255),b
 21655                           
 21656                           ; BSR set to: 0
 21657                           ;UI.c: 480: lcdInst(0b10000000);;
 21658  005F58  0E80               	movlw	128
 21659  005F5A  EC8B  F030         	call	i2_lcdInst
 21660                           
 21661                           ;UI.c: 481: printRTC();
 21662  005F5E  ECC7  F01C         	call	i2_printRTC	;wreg free
 21663                           
 21664                           ;UI.c: 482: lcdInst(0b11000000);;
 21665  005F62  0EC0               	movlw	192
 21666  005F64  EC8B  F030         	call	i2_lcdInst
 21667                           
 21668                           ;UI.c: 483: printf("PUSH TO CONTINUE");
 21669  005F68  0E10               	movlw	low STR_30
 21670  005F6A  6E0D               	movwf	i2printf@f,c
 21671  005F6C  0EFE               	movlw	high STR_30
 21672  005F6E  6E0E               	movwf	i2printf@f+1,c
 21673  005F70  EC1D  F015         	call	i2_printf	;wreg free
 21674  005F74  0012               	return		;funcret
 21675  005F76                     __end_ofi2_change_state_to_menu_start:
 21676                           	opt stack 0
 21677                           pclatu	equ	0xFFB
 21678                           pclath	equ	0xFFA
 21679                           tblptru	equ	0xFF8
 21680                           tblptrh	equ	0xFF7
 21681                           tblptrl	equ	0xFF6
 21682                           tablat	equ	0xFF5
 21683                           prodh	equ	0xFF4
 21684                           prodl	equ	0xFF3
 21685                           intcon	equ	0xFF2
 21686                           intcon2	equ	0xFF1
 21687                           intcon3	equ	0xFF0
 21688                           indf0	equ	0xFEF
 21689                           postinc0	equ	0xFEE
 21690                           fsr0h	equ	0xFEA
 21691                           fsr0l	equ	0xFE9
 21692                           wreg	equ	0xFE8
 21693                           postdec1	equ	0xFE5
 21694                           fsr1h	equ	0xFE2
 21695                           fsr1l	equ	0xFE1
 21696                           indf2	equ	0xFDF
 21697                           postinc2	equ	0xFDE
 21698                           postdec2	equ	0xFDD
 21699                           fsr2h	equ	0xFDA
 21700                           fsr2l	equ	0xFD9
 21701                           status	equ	0xFD8
 21702                           
 21703 ;; *************** function i2_printRTC *****************
 21704 ;; Defined at:
 21705 ;;		line 63 in file "RTC.c"
 21706 ;; Parameters:    Size  Location     Type
 21707 ;;		None
 21708 ;; Auto vars:     Size  Location     Type
 21709 ;;  printRTC       14   44[COMRAM] int [7]
 21710 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 21711 ;;  printRTC        2   64[COMRAM] int 
 21712 ;;  printRTC        2   58[COMRAM] int 
 21713 ;; Return value:  Size  Location     Type
 21714 ;;                  1    wreg      void 
 21715 ;; Registers used:
 21716 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21717 ;; Tracked objects:
 21718 ;;		On entry : 0/0
 21719 ;;		On exit  : 0/0
 21720 ;;		Unchanged: 0/0
 21721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21723 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21724 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21725 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21726 ;;Total ram usage:       25 bytes
 21727 ;; Hardware stack levels used:    1
 21728 ;; Hardware stack levels required when called:    3
 21729 ;; This function calls:
 21730 ;;		i2_getRTC
 21731 ;;		i2_lcdInst
 21732 ;;		i2_printf
 21733 ;;		i2_strcpy
 21734 ;; This function is called by:
 21735 ;;		i2_change_state_to_menu_start
 21736 ;; This function uses a non-reentrant model
 21737 ;;
 21738                           
 21739                           	psect	text69
 21740  00398E                     __ptext69:
 21741                           	opt stack 0
 21742  00398E                     i2_printRTC:
 21743                           	opt stack 19
 21744                           
 21745                           ;RTC.c: 64: getRTC();
 21746                           
 21747                           ;incstack = 0
 21748  00398E  ECAD  F02A         	call	i2_getRTC	;wreg free
 21749                           
 21750                           ;RTC.c: 65: char month[] = "MMM";
 21751  003992  C14D  F03D         	movff	printRTC@F3241,i2printRTC@month
 21752  003996  C14E  F03E         	movff	printRTC@F3241+1,i2printRTC@month+1
 21753  00399A  C14F  F03F         	movff	printRTC@F3241+2,i2printRTC@month+2
 21754  00399E  C150  F040         	movff	printRTC@F3241+3,i2printRTC@month+3
 21755                           
 21756                           ;RTC.c: 66: int INT_time[7];
 21757                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 21758  0039A2  0E00               	movlw	0
 21759  0039A4  6E42               	movwf	i2printRTC@i+1,c
 21760  0039A6  0E00               	movlw	0
 21761  0039A8  6E41               	movwf	i2printRTC@i,c
 21762  0039AA  BE42               	btfsc	i2printRTC@i+1,7,c
 21763  0039AC  D006               	goto	i2l7842
 21764  0039AE  5042               	movf	i2printRTC@i+1,w,c
 21765  0039B0  E135               	bnz	i2l634
 21766  0039B2  0E07               	movlw	7
 21767  0039B4  5C41               	subwf	i2printRTC@i,w,c
 21768  0039B6  B0D8               	btfsc	status,0,c
 21769  0039B8  D031               	goto	i2l634
 21770  0039BA                     i2l7842:
 21771                           
 21772                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 21773  0039BA  0E1C               	movlw	low _time
 21774  0039BC  2441               	addwf	i2printRTC@i,w,c
 21775  0039BE  6ED9               	movwf	fsr2l,c
 21776  0039C0  0E01               	movlw	high _time
 21777  0039C2  2042               	addwfc	i2printRTC@i+1,w,c
 21778  0039C4  6EDA               	movwf	fsr2h,c
 21779  0039C6  50DF               	movf	indf2,w,c
 21780  0039C8  6E2A               	movwf	??i2_printRTC& (0+255),c
 21781  0039CA  3A2A               	swapf	??i2_printRTC,f,c
 21782  0039CC  0E0F               	movlw	15
 21783  0039CE  162A               	andwf	??i2_printRTC,f,c
 21784  0039D0  0E0F               	movlw	15
 21785  0039D2  162A               	andwf	??i2_printRTC,f,c
 21786  0039D4  502A               	movf	??i2_printRTC,w,c
 21787  0039D6  0D0A               	mullw	10
 21788  0039D8  0E1C               	movlw	low _time
 21789  0039DA  2441               	addwf	i2printRTC@i,w,c
 21790  0039DC  6ED9               	movwf	fsr2l,c
 21791  0039DE  0E01               	movlw	high _time
 21792  0039E0  2042               	addwfc	i2printRTC@i+1,w,c
 21793  0039E2  6EDA               	movwf	fsr2h,c
 21794  0039E4  50DF               	movf	indf2,w,c
 21795  0039E6  0B0F               	andlw	15
 21796  0039E8  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 21797  0039EA  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 21798  0039EC  50F3               	movf	prodl,w,c
 21799  0039EE  262B               	addwf	??i2_printRTC+1,f,c
 21800  0039F0  50F4               	movf	prodh,w,c
 21801  0039F2  222C               	addwfc	??i2_printRTC+2,f,c
 21802  0039F4  90D8               	bcf	status,0,c
 21803  0039F6  3441               	rlcf	i2printRTC@i,w,c
 21804  0039F8  6ED9               	movwf	fsr2l,c
 21805  0039FA  3442               	rlcf	i2printRTC@i+1,w,c
 21806  0039FC  6EDA               	movwf	fsr2h,c
 21807  0039FE  0E2D               	movlw	low i2printRTC@INT_time
 21808  003A00  26D9               	addwf	fsr2l,f,c
 21809  003A02  0E00               	movlw	high i2printRTC@INT_time
 21810  003A04  22DA               	addwfc	fsr2h,f,c
 21811  003A06  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 21812  003A0A  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 21813  003A0E  4A41               	infsnz	i2printRTC@i,f,c
 21814  003A10  2A42               	incf	i2printRTC@i+1,f,c
 21815  003A12  BE42               	btfsc	i2printRTC@i+1,7,c
 21816  003A14  D7D2               	goto	i2l7842
 21817  003A16  5042               	movf	i2printRTC@i+1,w,c
 21818  003A18  E101               	bnz	i2u684_40
 21819  003A1A  D7CB               	goto	L18
 21820  003A1C                     i2u684_40:
 21821  003A1C                     i2l634:
 21822                           
 21823                           ;RTC.c: 69: }
 21824                           ;RTC.c: 70: int RTC_month = INT_time[5];
 21825  003A1C  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 21826  003A20  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 21827                           
 21828                           ;RTC.c: 72: switch(RTC_month){
 21829  003A24  D084               	goto	i2l7874
 21830  003A26                     i2l7848:
 21831                           
 21832                           ;RTC.c: 74: strcpy(month, "JAN");
 21833  003A26  0E3D               	movlw	low i2printRTC@month
 21834  003A28  6E01               	movwf	i2strcpy@to,c
 21835  003A2A  0E00               	movlw	high i2printRTC@month
 21836  003A2C  6E02               	movwf	i2strcpy@to+1,c
 21837  003A2E  0EDB               	movlw	low STR_8
 21838  003A30  6E03               	movwf	i2strcpy@from,c
 21839  003A32  0EFF               	movlw	high STR_8
 21840  003A34  6E04               	movwf	i2strcpy@from+1,c
 21841  003A36  EC03  F02E         	call	i2_strcpy	;wreg free
 21842                           
 21843                           ;RTC.c: 75: break;
 21844  003A3A  D0A6               	goto	i2l7876
 21845  003A3C                     i2l7850:
 21846                           
 21847                           ;RTC.c: 77: strcpy(month, "FEB");
 21848  003A3C  0E3D               	movlw	low i2printRTC@month
 21849  003A3E  6E01               	movwf	i2strcpy@to,c
 21850  003A40  0E00               	movlw	high i2printRTC@month
 21851  003A42  6E02               	movwf	i2strcpy@to+1,c
 21852  003A44  0ECB               	movlw	low STR_9
 21853  003A46  6E03               	movwf	i2strcpy@from,c
 21854  003A48  0EFF               	movlw	high STR_9
 21855  003A4A  6E04               	movwf	i2strcpy@from+1,c
 21856  003A4C  EC03  F02E         	call	i2_strcpy	;wreg free
 21857                           
 21858                           ;RTC.c: 78: break;
 21859  003A50  D09B               	goto	i2l7876
 21860  003A52                     i2l7852:
 21861                           
 21862                           ;RTC.c: 80: strcpy(month, "MAR");
 21863  003A52  0E3D               	movlw	low i2printRTC@month
 21864  003A54  6E01               	movwf	i2strcpy@to,c
 21865  003A56  0E00               	movlw	high i2printRTC@month
 21866  003A58  6E02               	movwf	i2strcpy@to+1,c
 21867  003A5A  0EE7               	movlw	low STR_10
 21868  003A5C  6E03               	movwf	i2strcpy@from,c
 21869  003A5E  0EFF               	movlw	high STR_10
 21870  003A60  6E04               	movwf	i2strcpy@from+1,c
 21871  003A62  EC03  F02E         	call	i2_strcpy	;wreg free
 21872                           
 21873                           ;RTC.c: 81: break;
 21874  003A66  D090               	goto	i2l7876
 21875  003A68                     i2l7854:
 21876                           
 21877                           ;RTC.c: 83: strcpy(month, "APR");
 21878  003A68  0E3D               	movlw	low i2printRTC@month
 21879  003A6A  6E01               	movwf	i2strcpy@to,c
 21880  003A6C  0E00               	movlw	high i2printRTC@month
 21881  003A6E  6E02               	movwf	i2strcpy@to+1,c
 21882  003A70  0EEB               	movlw	low STR_11
 21883  003A72  6E03               	movwf	i2strcpy@from,c
 21884  003A74  0EFF               	movlw	high STR_11
 21885  003A76  6E04               	movwf	i2strcpy@from+1,c
 21886  003A78  EC03  F02E         	call	i2_strcpy	;wreg free
 21887                           
 21888                           ;RTC.c: 84: break;
 21889  003A7C  D085               	goto	i2l7876
 21890  003A7E                     i2l7856:
 21891                           
 21892                           ;RTC.c: 86: strcpy(month, "MAY");
 21893  003A7E  0E3D               	movlw	low i2printRTC@month
 21894  003A80  6E01               	movwf	i2strcpy@to,c
 21895  003A82  0E00               	movlw	high i2printRTC@month
 21896  003A84  6E02               	movwf	i2strcpy@to+1,c
 21897  003A86  0EFB               	movlw	low STR_12
 21898  003A88  6E03               	movwf	i2strcpy@from,c
 21899  003A8A  0EFF               	movlw	high STR_12
 21900  003A8C  6E04               	movwf	i2strcpy@from+1,c
 21901  003A8E  EC03  F02E         	call	i2_strcpy	;wreg free
 21902                           
 21903                           ;RTC.c: 87: break;
 21904  003A92  D07A               	goto	i2l7876
 21905  003A94                     i2l7858:
 21906                           
 21907                           ;RTC.c: 89: strcpy(month, "JUN");
 21908  003A94  0E3D               	movlw	low i2printRTC@month
 21909  003A96  6E01               	movwf	i2strcpy@to,c
 21910  003A98  0E00               	movlw	high i2printRTC@month
 21911  003A9A  6E02               	movwf	i2strcpy@to+1,c
 21912  003A9C  0EDF               	movlw	low STR_13
 21913  003A9E  6E03               	movwf	i2strcpy@from,c
 21914  003AA0  0EFF               	movlw	high STR_13
 21915  003AA2  6E04               	movwf	i2strcpy@from+1,c
 21916  003AA4  EC03  F02E         	call	i2_strcpy	;wreg free
 21917                           
 21918                           ;RTC.c: 90: break;
 21919  003AA8  D06F               	goto	i2l7876
 21920  003AAA                     i2l7860:
 21921                           
 21922                           ;RTC.c: 92: strcpy(month, "JUL");
 21923  003AAA  0E3D               	movlw	low i2printRTC@month
 21924  003AAC  6E01               	movwf	i2strcpy@to,c
 21925  003AAE  0E00               	movlw	high i2printRTC@month
 21926  003AB0  6E02               	movwf	i2strcpy@to+1,c
 21927  003AB2  0ED7               	movlw	low STR_14
 21928  003AB4  6E03               	movwf	i2strcpy@from,c
 21929  003AB6  0EFF               	movlw	high STR_14
 21930  003AB8  6E04               	movwf	i2strcpy@from+1,c
 21931  003ABA  EC03  F02E         	call	i2_strcpy	;wreg free
 21932                           
 21933                           ;RTC.c: 93: break;
 21934  003ABE  D064               	goto	i2l7876
 21935  003AC0                     i2l7862:
 21936                           
 21937                           ;RTC.c: 95: strcpy(month, "AUG");
 21938  003AC0  0E3D               	movlw	low i2printRTC@month
 21939  003AC2  6E01               	movwf	i2strcpy@to,c
 21940  003AC4  0E00               	movlw	high i2printRTC@month
 21941  003AC6  6E02               	movwf	i2strcpy@to+1,c
 21942  003AC8  0ED3               	movlw	low STR_15
 21943  003ACA  6E03               	movwf	i2strcpy@from,c
 21944  003ACC  0EFF               	movlw	high STR_15
 21945  003ACE  6E04               	movwf	i2strcpy@from+1,c
 21946  003AD0  EC03  F02E         	call	i2_strcpy	;wreg free
 21947                           
 21948                           ;RTC.c: 96: break;
 21949  003AD4  D059               	goto	i2l7876
 21950  003AD6                     i2l7864:
 21951                           
 21952                           ;RTC.c: 98: strcpy(month, "SEP");
 21953  003AD6  0E3D               	movlw	low i2printRTC@month
 21954  003AD8  6E01               	movwf	i2strcpy@to,c
 21955  003ADA  0E00               	movlw	high i2printRTC@month
 21956  003ADC  6E02               	movwf	i2strcpy@to+1,c
 21957  003ADE  0EE3               	movlw	low STR_16
 21958  003AE0  6E03               	movwf	i2strcpy@from,c
 21959  003AE2  0EFF               	movlw	high STR_16
 21960  003AE4  6E04               	movwf	i2strcpy@from+1,c
 21961  003AE6  EC03  F02E         	call	i2_strcpy	;wreg free
 21962                           
 21963                           ;RTC.c: 99: break;
 21964  003AEA  D04E               	goto	i2l7876
 21965  003AEC                     i2l7866:
 21966                           
 21967                           ;RTC.c: 101: strcpy(month, "OCT");
 21968  003AEC  0E3D               	movlw	low i2printRTC@month
 21969  003AEE  6E01               	movwf	i2strcpy@to,c
 21970  003AF0  0E00               	movlw	high i2printRTC@month
 21971  003AF2  6E02               	movwf	i2strcpy@to+1,c
 21972  003AF4  0EF3               	movlw	low STR_17
 21973  003AF6  6E03               	movwf	i2strcpy@from,c
 21974  003AF8  0EFF               	movlw	high STR_17
 21975  003AFA  6E04               	movwf	i2strcpy@from+1,c
 21976  003AFC  EC03  F02E         	call	i2_strcpy	;wreg free
 21977                           
 21978                           ;RTC.c: 102: break;
 21979  003B00  D043               	goto	i2l7876
 21980  003B02                     i2l7868:
 21981                           
 21982                           ;RTC.c: 104: strcpy(month, "NOV");
 21983  003B02  0E3D               	movlw	low i2printRTC@month
 21984  003B04  6E01               	movwf	i2strcpy@to,c
 21985  003B06  0E00               	movlw	high i2printRTC@month
 21986  003B08  6E02               	movwf	i2strcpy@to+1,c
 21987  003B0A  0EF7               	movlw	low STR_18
 21988  003B0C  6E03               	movwf	i2strcpy@from,c
 21989  003B0E  0EFF               	movlw	high STR_18
 21990  003B10  6E04               	movwf	i2strcpy@from+1,c
 21991  003B12  EC03  F02E         	call	i2_strcpy	;wreg free
 21992                           
 21993                           ;RTC.c: 105: break;
 21994  003B16  D038               	goto	i2l7876
 21995  003B18                     i2l7870:
 21996                           
 21997                           ;RTC.c: 107: strcpy(month, "DEC");
 21998  003B18  0E3D               	movlw	low i2printRTC@month
 21999  003B1A  6E01               	movwf	i2strcpy@to,c
 22000  003B1C  0E00               	movlw	high i2printRTC@month
 22001  003B1E  6E02               	movwf	i2strcpy@to+1,c
 22002  003B20  0ECF               	movlw	low STR_19
 22003  003B22  6E03               	movwf	i2strcpy@from,c
 22004  003B24  0EFF               	movlw	high STR_19
 22005  003B26  6E04               	movwf	i2strcpy@from+1,c
 22006  003B28  EC03  F02E         	call	i2_strcpy	;wreg free
 22007                           
 22008                           ;RTC.c: 109: }
 22009                           
 22010                           ;RTC.c: 108: break;
 22011  003B2C  D02D               	goto	i2l7876
 22012  003B2E                     i2l7874:
 22013  003B2E  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 22014  003B32  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 22015                           
 22016                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 22017                           ; Switch size 1, requested type "space"
 22018                           ; Number of cases is 1, Range of values is 0 to 0
 22019                           ; switch strategies available:
 22020                           ; Name         Instructions Cycles
 22021                           ; simple_byte            4     3 (average)
 22022                           ;	Chosen strategy is simple_byte
 22023  003B36  502B               	movf	??i2_printRTC+1,w,c
 22024  003B38  0A00               	xorlw	0	; case 0
 22025  003B3A  A4D8               	btfss	status,2,c
 22026  003B3C  D025               	goto	i2l7876
 22027                           
 22028                           ; Switch size 1, requested type "space"
 22029                           ; Number of cases is 12, Range of values is 1 to 12
 22030                           ; switch strategies available:
 22031                           ; Name         Instructions Cycles
 22032                           ; simple_byte           37    19 (average)
 22033                           ;	Chosen strategy is simple_byte
 22034  003B3E  502A               	movf	??i2_printRTC,w,c
 22035  003B40  0A01               	xorlw	1	; case 1
 22036  003B42  B4D8               	btfsc	status,2,c
 22037  003B44  D770               	goto	i2l7848
 22038  003B46  0A03               	xorlw	3	; case 2
 22039  003B48  B4D8               	btfsc	status,2,c
 22040  003B4A  D778               	goto	i2l7850
 22041  003B4C  0A01               	xorlw	1	; case 3
 22042  003B4E  B4D8               	btfsc	status,2,c
 22043  003B50  D780               	goto	i2l7852
 22044  003B52  0A07               	xorlw	7	; case 4
 22045  003B54  B4D8               	btfsc	status,2,c
 22046  003B56  D788               	goto	i2l7854
 22047  003B58  0A01               	xorlw	1	; case 5
 22048  003B5A  B4D8               	btfsc	status,2,c
 22049  003B5C  D790               	goto	i2l7856
 22050  003B5E  0A03               	xorlw	3	; case 6
 22051  003B60  B4D8               	btfsc	status,2,c
 22052  003B62  D798               	goto	i2l7858
 22053  003B64  0A01               	xorlw	1	; case 7
 22054  003B66  B4D8               	btfsc	status,2,c
 22055  003B68  D7A0               	goto	i2l7860
 22056  003B6A  0A0F               	xorlw	15	; case 8
 22057  003B6C  B4D8               	btfsc	status,2,c
 22058  003B6E  D7A8               	goto	i2l7862
 22059  003B70  0A01               	xorlw	1	; case 9
 22060  003B72  B4D8               	btfsc	status,2,c
 22061  003B74  D7B0               	goto	i2l7864
 22062  003B76  0A03               	xorlw	3	; case 10
 22063  003B78  B4D8               	btfsc	status,2,c
 22064  003B7A  D7B8               	goto	i2l7866
 22065  003B7C  0A01               	xorlw	1	; case 11
 22066  003B7E  B4D8               	btfsc	status,2,c
 22067  003B80  D7C0               	goto	i2l7868
 22068  003B82  0A07               	xorlw	7	; case 12
 22069  003B84  B4D8               	btfsc	status,2,c
 22070  003B86  D7C8               	goto	i2l7870
 22071  003B88                     i2l7876:
 22072                           
 22073                           ;RTC.c: 110: lcdInst(0b10000000);;
 22074  003B88  0E80               	movlw	128
 22075  003B8A  EC8B  F030         	call	i2_lcdInst
 22076                           
 22077                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 22078  003B8E  0ECC               	movlw	low STR_21
 22079  003B90  6E0D               	movwf	i2printf@f,c
 22080  003B92  0EFA               	movlw	high STR_21
 22081  003B94  6E0E               	movwf	i2printf@f+1,c
 22082  003B96  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 22083  003B9A  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 22084  003B9E  0E3D               	movlw	low i2printRTC@month
 22085  003BA0  6E11               	movwf	?i2_printf+4,c
 22086  003BA2  0E00               	movlw	high i2printRTC@month
 22087  003BA4  6E12               	movwf	?i2_printf+5,c
 22088  003BA6  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 22089  003BAA  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 22090  003BAE  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 22091  003BB2  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 22092  003BB6  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 22093  003BBA  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 22094  003BBE  EC1D  F015         	call	i2_printf	;wreg free
 22095  003BC2  0012               	return		;funcret
 22096  003BC4                     __end_ofi2_printRTC:
 22097                           	opt stack 0
 22098                           pclatu	equ	0xFFB
 22099                           pclath	equ	0xFFA
 22100                           tblptru	equ	0xFF8
 22101                           tblptrh	equ	0xFF7
 22102                           tblptrl	equ	0xFF6
 22103                           tablat	equ	0xFF5
 22104                           prodh	equ	0xFF4
 22105                           prodl	equ	0xFF3
 22106                           intcon	equ	0xFF2
 22107                           intcon2	equ	0xFF1
 22108                           intcon3	equ	0xFF0
 22109                           indf0	equ	0xFEF
 22110                           postinc0	equ	0xFEE
 22111                           fsr0h	equ	0xFEA
 22112                           fsr0l	equ	0xFE9
 22113                           wreg	equ	0xFE8
 22114                           postdec1	equ	0xFE5
 22115                           fsr1h	equ	0xFE2
 22116                           fsr1l	equ	0xFE1
 22117                           indf2	equ	0xFDF
 22118                           postinc2	equ	0xFDE
 22119                           postdec2	equ	0xFDD
 22120                           fsr2h	equ	0xFDA
 22121                           fsr2l	equ	0xFD9
 22122                           status	equ	0xFD8
 22123                           
 22124 ;; *************** function i2_strcpy *****************
 22125 ;; Defined at:
 22126 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 22127 ;; Parameters:    Size  Location     Type
 22128 ;;  to              2    0[COMRAM] PTR unsigned char 
 22129 ;;		 -> printRTC@month(4), UI@month(4), 
 22130 ;;  from            2    2[COMRAM] PTR const unsigned char 
 22131 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 22132 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 22133 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 22134 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 22135 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 22136 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 22137 ;;		 -> STR_8(4), 
 22138 ;; Auto vars:     Size  Location     Type
 22139 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 22140 ;;		 -> printRTC@month(4), UI@month(4), 
 22141 ;; Return value:  Size  Location     Type
 22142 ;;                  2    0[COMRAM] PTR unsigned char 
 22143 ;; Registers used:
 22144 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 22145 ;; Tracked objects:
 22146 ;;		On entry : 0/0
 22147 ;;		On exit  : 0/0
 22148 ;;		Unchanged: 0/0
 22149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22150 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22151 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22153 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22154 ;;Total ram usage:        6 bytes
 22155 ;; Hardware stack levels used:    1
 22156 ;; This function calls:
 22157 ;;		Nothing
 22158 ;; This function is called by:
 22159 ;;		i2_printRTC
 22160 ;; This function uses a non-reentrant model
 22161 ;;
 22162                           
 22163                           	psect	text70
 22164  005C06                     __ptext70:
 22165                           	opt stack 0
 22166  005C06                     i2_strcpy:
 22167                           	opt stack 21
 22168                           
 22169                           ;incstack = 0
 22170  005C06  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 22171  005C0A  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 22172  005C0E  D004               	goto	i2l7400
 22173  005C10                     i2l7398:
 22174  005C10  4A05               	infsnz	i2strcpy@cp,f,c
 22175  005C12  2A06               	incf	i2strcpy@cp+1,f,c
 22176  005C14  4A03               	infsnz	i2strcpy@from,f,c
 22177  005C16  2A04               	incf	i2strcpy@from+1,f,c
 22178  005C18                     i2l7400:
 22179  005C18  C003  FFF6         	movff	i2strcpy@from,tblptrl
 22180  005C1C  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 22181  005C20                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22182  005C20  6AF8               	clrf	tblptru,c
 22183  005C22                     	endif
 22184  005C22                     	if	0	;tblptru may be non-zero
 22185  005C22                     	endif
 22186  005C22  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 22187  005C26  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 22188  005C2A  0008               	tblrd		*
 22189  005C2C  CFF5 FFDF          	movff	tablat,indf2
 22190  005C30  50DF               	movf	indf2,w,c
 22191  005C32  B4D8               	btfsc	status,2,c
 22192  005C34  0012               	return	
 22193  005C36  D7EC               	goto	i2l7398
 22194  005C38                     __end_ofi2_strcpy:
 22195                           	opt stack 0
 22196                           pclatu	equ	0xFFB
 22197                           pclath	equ	0xFFA
 22198                           tblptru	equ	0xFF8
 22199                           tblptrh	equ	0xFF7
 22200                           tblptrl	equ	0xFF6
 22201                           tablat	equ	0xFF5
 22202                           prodh	equ	0xFF4
 22203                           prodl	equ	0xFF3
 22204                           intcon	equ	0xFF2
 22205                           intcon2	equ	0xFF1
 22206                           intcon3	equ	0xFF0
 22207                           indf0	equ	0xFEF
 22208                           postinc0	equ	0xFEE
 22209                           fsr0h	equ	0xFEA
 22210                           fsr0l	equ	0xFE9
 22211                           wreg	equ	0xFE8
 22212                           postdec1	equ	0xFE5
 22213                           fsr1h	equ	0xFE2
 22214                           fsr1l	equ	0xFE1
 22215                           indf2	equ	0xFDF
 22216                           postinc2	equ	0xFDE
 22217                           postdec2	equ	0xFDD
 22218                           fsr2h	equ	0xFDA
 22219                           fsr2l	equ	0xFD9
 22220                           status	equ	0xFD8
 22221                           
 22222 ;; *************** function _inputHandler *****************
 22223 ;; Defined at:
 22224 ;;		line 375 in file "UI.c"
 22225 ;; Parameters:    Size  Location     Type
 22226 ;;		None
 22227 ;; Auto vars:     Size  Location     Type
 22228 ;;		None
 22229 ;; Return value:  Size  Location     Type
 22230 ;;                  2   41[COMRAM] int 
 22231 ;; Registers used:
 22232 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22233 ;; Tracked objects:
 22234 ;;		On entry : 0/0
 22235 ;;		On exit  : 0/0
 22236 ;;		Unchanged: 0/0
 22237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22238 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22240 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22241 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22242 ;;Total ram usage:        4 bytes
 22243 ;; Hardware stack levels used:    1
 22244 ;; Hardware stack levels required when called:    4
 22245 ;; This function calls:
 22246 ;;		_change_state_to_logs_11
 22247 ;;		_change_state_to_logs_12
 22248 ;;		_change_state_to_logs_22
 22249 ;;		_change_state_to_logs_23
 22250 ;;		_change_state_to_logs_33
 22251 ;;		_change_state_to_logs_34
 22252 ;;		_change_state_to_menu_11
 22253 ;;		_change_state_to_menu_23
 22254 ;;		i2_change_state_to_menu_12
 22255 ;;		i2_change_state_to_menu_22
 22256 ;; This function is called by:
 22257 ;;		_updateMenu
 22258 ;; This function uses a non-reentrant model
 22259 ;;
 22260                           
 22261                           	psect	text71
 22262  003BC4                     __ptext71:
 22263                           	opt stack 0
 22264  003BC4                     _inputHandler:
 22265                           	opt stack 18
 22266                           
 22267                           ;UI.c: 380: if(firstboot){
 22268                           
 22269                           ;incstack = 0
 22270  003BC4  0101               	movlb	1	; () banked
 22271  003BC6  513B               	movf	_firstboot& (0+255),w,b
 22272  003BC8  0101               	movlb	1	; () banked
 22273  003BCA  113C               	iorwf	(_firstboot+1)& (0+255),w,b
 22274  003BCC  B4D8               	btfsc	status,2,c
 22275  003BCE  D00C               	goto	i2l7944
 22276                           
 22277                           ; BSR set to: 1
 22278                           ;UI.c: 381: change_state_to_menu_11();
 22279  003BD0  EC94  F02E         	call	_change_state_to_menu_11	;wreg free
 22280                           
 22281                           ;UI.c: 382: firstboot = 0;
 22282  003BD4  0E00               	movlw	0
 22283  003BD6  0101               	movlb	1	; () banked
 22284  003BD8  6F3C               	movwf	(_firstboot+1)& (0+255),b
 22285  003BDA  0E00               	movlw	0
 22286  003BDC  6F3B               	movwf	_firstboot& (0+255),b
 22287                           
 22288                           ; BSR set to: 1
 22289                           ;UI.c: 383: return 0;
 22290  003BDE  0E00               	movlw	0
 22291  003BE0  6E2B               	movwf	?_inputHandler+1,c
 22292  003BE2  0E00               	movlw	0
 22293  003BE4  6E2A               	movwf	?_inputHandler,c
 22294                           
 22295                           ; BSR set to: 1
 22296  003BE6  0012               	return	
 22297  003BE8                     i2l7944:
 22298                           
 22299                           ; BSR set to: 1
 22300                           ;UI.c: 384: }
 22301                           ;UI.c: 385: if (logstate){
 22302  003BE8  0100               	movlb	0	; () banked
 22303  003BEA  51F8               	movf	_logstate& (0+255),w,b
 22304  003BEC  0100               	movlb	0	; () banked
 22305  003BEE  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 22306  003BF0  B4D8               	btfsc	status,2,c
 22307  003BF2  D0C7               	goto	i2l8062
 22308                           
 22309                           ; BSR set to: 0
 22310                           ;UI.c: 386: if(input == 'C' && PORTBbits.RB1 == 1){
 22311  003BF4  0E43               	movlw	67
 22312  003BF6  187D               	xorwf	_input,w,c	;volatile
 22313  003BF8  A4D8               	btfss	status,2,c
 22314  003BFA  D012               	goto	i2l7962
 22315                           
 22316                           ; BSR set to: 0
 22317  003BFC  B281               	btfsc	3969,1,c	;volatile
 22318  003BFE  D009               	goto	i2l7954
 22319  003C00  D00F               	goto	i2l7962
 22320  003C02                     i2l7952:
 22321                           
 22322                           ;UI.c: 389: _delay((unsigned long)((10)*(32000000/4000.0)));
 22323  003C02  0E68               	movlw	104
 22324  003C04  6E2C               	movwf	??_inputHandler& (0+255),c
 22325  003C06  0EE4               	movlw	228
 22326  003C08                     i2u1257_47:
 22327  003C08  2EE8               	decfsz	wreg,f,c
 22328  003C0A  D7FE               	bra	i2u1257_47
 22329  003C0C  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 22330  003C0E  D7FC               	bra	i2u1257_47
 22331  003C10  D000               	nop2	
 22332  003C12                     i2l7954:
 22333  003C12  B281               	btfsc	3969,1,c	;volatile
 22334  003C14  D7F6               	goto	i2l7952
 22335  003C16                     i2l7956:
 22336                           
 22337                           ;UI.c: 390: }
 22338                           ;UI.c: 391: return 0;
 22339  003C16  0E00               	movlw	0
 22340  003C18  6E2B               	movwf	?_inputHandler+1,c
 22341  003C1A  0E00               	movlw	0
 22342  003C1C  6E2A               	movwf	?_inputHandler,c
 22343  003C1E  0012               	return	
 22344  003C20                     i2l7962:
 22345                           
 22346                           ;UI.c: 393: else if (input == 'D'){
 22347  003C20  0E44               	movlw	68
 22348  003C22  187D               	xorwf	_input,w,c	;volatile
 22349  003C24  A4D8               	btfss	status,2,c
 22350  003C26  D7F7               	goto	i2l7956
 22351                           
 22352                           ;UI.c: 395: logstate = 0;
 22353  003C28  0E00               	movlw	0
 22354  003C2A  0100               	movlb	0	; () banked
 22355  003C2C  6FF9               	movwf	(_logstate+1)& (0+255),b
 22356  003C2E  0E00               	movlw	0
 22357  003C30  6FF8               	movwf	_logstate& (0+255),b
 22358                           
 22359                           ;UI.c: 396: switch(cur_state){
 22360  003C32  D012               	goto	i2l7980
 22361  003C34                     i2l7966:
 22362                           
 22363                           ;UI.c: 398: change_state_to_logs_11();
 22364  003C34  EC0C  F02F         	call	_change_state_to_logs_11	;wreg free
 22365                           
 22366                           ;UI.c: 399: break;
 22367  003C38  D7EE               	goto	i2l7956
 22368  003C3A                     i2l7968:
 22369                           
 22370                           ;UI.c: 401: change_state_to_logs_12();
 22371  003C3A  ECF4  F02E         	call	_change_state_to_logs_12	;wreg free
 22372                           
 22373                           ;UI.c: 402: break;
 22374  003C3E  D7EB               	goto	i2l7956
 22375  003C40                     i2l7970:
 22376                           
 22377                           ;UI.c: 404: change_state_to_logs_22();
 22378  003C40  ECDC  F02E         	call	_change_state_to_logs_22	;wreg free
 22379                           
 22380                           ;UI.c: 405: break;
 22381  003C44  D7E8               	goto	i2l7956
 22382  003C46                     i2l7972:
 22383                           
 22384                           ;UI.c: 407: change_state_to_logs_23();
 22385  003C46  EC3B  F02F         	call	_change_state_to_logs_23	;wreg free
 22386                           
 22387                           ;UI.c: 408: break;
 22388  003C4A  D7E5               	goto	i2l7956
 22389  003C4C                     i2l7974:
 22390                           
 22391                           ;UI.c: 410: change_state_to_logs_33();
 22392  003C4C  ECC4  F02E         	call	_change_state_to_logs_33	;wreg free
 22393                           
 22394                           ;UI.c: 411: break;
 22395  003C50  D7E2               	goto	i2l7956
 22396  003C52                     i2l7976:
 22397                           
 22398                           ;UI.c: 413: change_state_to_logs_34();
 22399  003C52  ECAC  F02E         	call	_change_state_to_logs_34	;wreg free
 22400                           
 22401                           ;UI.c: 415: }
 22402                           
 22403                           ;UI.c: 414: break;
 22404  003C56  D7DF               	goto	i2l7956
 22405  003C58                     i2l7980:
 22406  003C58  C0E8  F02C         	movff	_cur_state,??_inputHandler
 22407  003C5C  C0E9  F02D         	movff	_cur_state+1,??_inputHandler+1
 22408                           
 22409                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 22410                           ; Switch size 1, requested type "space"
 22411                           ; Number of cases is 2, Range of values is 3 to 4
 22412                           ; switch strategies available:
 22413                           ; Name         Instructions Cycles
 22414                           ; simple_byte            7     4 (average)
 22415                           ;	Chosen strategy is simple_byte
 22416  003C60  502D               	movf	??_inputHandler+1,w,c
 22417  003C62  0A03               	xorlw	3	; case 3
 22418  003C64  B4D8               	btfsc	status,2,c
 22419  003C66  D004               	goto	i2l11220
 22420  003C68  0A07               	xorlw	7	; case 4
 22421  003C6A  B4D8               	btfsc	status,2,c
 22422  003C6C  D00F               	goto	i2l11222
 22423  003C6E  D7D3               	goto	i2l7956
 22424  003C70                     i2l11220:
 22425                           
 22426                           ; Switch size 1, requested type "space"
 22427                           ; Number of cases is 4, Range of values is 243 to 255
 22428                           ; switch strategies available:
 22429                           ; Name         Instructions Cycles
 22430                           ; simple_byte           13     7 (average)
 22431                           ;	Chosen strategy is simple_byte
 22432  003C70  502C               	movf	??_inputHandler,w,c
 22433  003C72  0AF3               	xorlw	243	; case 243
 22434  003C74  B4D8               	btfsc	status,2,c
 22435  003C76  D7DE               	goto	i2l7966
 22436  003C78  0A07               	xorlw	7	; case 244
 22437  003C7A  B4D8               	btfsc	status,2,c
 22438  003C7C  D7DE               	goto	i2l7968
 22439  003C7E  0A0A               	xorlw	10	; case 254
 22440  003C80  B4D8               	btfsc	status,2,c
 22441  003C82  D7DE               	goto	i2l7970
 22442  003C84  0A01               	xorlw	1	; case 255
 22443  003C86  B4D8               	btfsc	status,2,c
 22444  003C88  D7DE               	goto	i2l7972
 22445  003C8A  D7C5               	goto	i2l7956
 22446  003C8C                     i2l11222:
 22447                           
 22448                           ; Switch size 1, requested type "space"
 22449                           ; Number of cases is 2, Range of values is 9 to 10
 22450                           ; switch strategies available:
 22451                           ; Name         Instructions Cycles
 22452                           ; simple_byte            7     4 (average)
 22453                           ;	Chosen strategy is simple_byte
 22454  003C8C  502C               	movf	??_inputHandler,w,c
 22455  003C8E  0A09               	xorlw	9	; case 9
 22456  003C90  B4D8               	btfsc	status,2,c
 22457  003C92  D7DC               	goto	i2l7974
 22458  003C94  0A03               	xorlw	3	; case 10
 22459  003C96  B4D8               	btfsc	status,2,c
 22460  003C98  D7DC               	goto	i2l7976
 22461  003C9A  D7BD               	goto	i2l7956
 22462  003C9C                     i2l7992:
 22463                           
 22464                           ;UI.c: 425: if(cur_state == 11){
 22465  003C9C  0E0B               	movlw	11
 22466  003C9E  0100               	movlb	0	; () banked
 22467  003CA0  19E8               	xorwf	_cur_state& (0+255),w,b
 22468  003CA2  0100               	movlb	0	; () banked
 22469  003CA4  11E9               	iorwf	(_cur_state+1)& (0+255),w,b
 22470  003CA6  A4D8               	btfss	status,2,c
 22471  003CA8  D005               	goto	i2l8000
 22472                           
 22473                           ; BSR set to: 0
 22474                           ;UI.c: 426: return 0;
 22475  003CAA  0E00               	movlw	0
 22476  003CAC  6E2B               	movwf	?_inputHandler+1,c
 22477  003CAE  0E00               	movlw	0
 22478  003CB0  6E2A               	movwf	?_inputHandler,c
 22479                           
 22480                           ; BSR set to: 0
 22481  003CB2  0012               	return	
 22482  003CB4                     i2l8000:
 22483                           
 22484                           ; BSR set to: 0
 22485                           ;UI.c: 428: else{
 22486                           ;UI.c: 429: change_state_to_menu_11();
 22487  003CB4  EC94  F02E         	call	_change_state_to_menu_11	;wreg free
 22488                           
 22489                           ;UI.c: 430: }
 22490                           ;UI.c: 431: return 0;
 22491  003CB8  0E00               	movlw	0
 22492  003CBA  6E2B               	movwf	?_inputHandler+1,c
 22493  003CBC  0E00               	movlw	0
 22494  003CBE  6E2A               	movwf	?_inputHandler,c
 22495  003CC0  0012               	return	
 22496  003CC2                     i2l8006:
 22497                           
 22498                           ;UI.c: 433: if(cur_state == 22 || cur_state == 12){
 22499  003CC2  0E16               	movlw	22
 22500  003CC4  0100               	movlb	0	; () banked
 22501  003CC6  19E8               	xorwf	_cur_state& (0+255),w,b
 22502  003CC8  0100               	movlb	0	; () banked
 22503  003CCA  11E9               	iorwf	(_cur_state+1)& (0+255),w,b
 22504  003CCC  B4D8               	btfsc	status,2,c
 22505  003CCE  D007               	goto	i2l8010
 22506                           
 22507                           ; BSR set to: 0
 22508  003CD0  0E0C               	movlw	12
 22509  003CD2  0100               	movlb	0	; () banked
 22510  003CD4  19E8               	xorwf	_cur_state& (0+255),w,b
 22511  003CD6  0100               	movlb	0	; () banked
 22512  003CD8  11E9               	iorwf	(_cur_state+1)& (0+255),w,b
 22513  003CDA  A4D8               	btfss	status,2,c
 22514  003CDC  D005               	goto	i2l8016
 22515  003CDE                     i2l8010:
 22516                           
 22517                           ; BSR set to: 0
 22518                           ;UI.c: 434: return 0;
 22519  003CDE  0E00               	movlw	0
 22520  003CE0  6E2B               	movwf	?_inputHandler+1,c
 22521  003CE2  0E00               	movlw	0
 22522  003CE4  6E2A               	movwf	?_inputHandler,c
 22523                           
 22524                           ; BSR set to: 0
 22525  003CE6  0012               	return	
 22526  003CE8                     i2l8016:
 22527                           
 22528                           ; BSR set to: 0
 22529                           ;UI.c: 436: else if(cur_state == 23){
 22530  003CE8  0E17               	movlw	23
 22531  003CEA  0100               	movlb	0	; () banked
 22532  003CEC  19E8               	xorwf	_cur_state& (0+255),w,b
 22533  003CEE  0100               	movlb	0	; () banked
 22534  003CF0  11E9               	iorwf	(_cur_state+1)& (0+255),w,b
 22535  003CF2  A4D8               	btfss	status,2,c
 22536  003CF4  D003               	goto	i2l8020
 22537                           
 22538                           ; BSR set to: 0
 22539                           ;UI.c: 437: change_state_to_menu_22();
 22540  003CF6  EC4C  F02E         	call	i2_change_state_to_menu_22	;wreg free
 22541                           
 22542                           ;UI.c: 438: }
 22543  003CFA  D002               	goto	i2l8022
 22544  003CFC                     i2l8020:
 22545                           
 22546                           ;UI.c: 439: else{
 22547                           ;UI.c: 440: change_state_to_menu_12();
 22548  003CFC  EC64  F02E         	call	i2_change_state_to_menu_12	;wreg free
 22549  003D00                     i2l8022:
 22550                           
 22551                           ;UI.c: 441: }
 22552                           ;UI.c: 442: return 0;
 22553  003D00  0E00               	movlw	0
 22554  003D02  6E2B               	movwf	?_inputHandler+1,c
 22555  003D04  0E00               	movlw	0
 22556  003D06  6E2A               	movwf	?_inputHandler,c
 22557  003D08  0012               	return	
 22558  003D0A                     i2l8026:
 22559                           
 22560                           ;UI.c: 444: if(cur_state == 23){
 22561  003D0A  0E17               	movlw	23
 22562  003D0C  0100               	movlb	0	; () banked
 22563  003D0E  19E8               	xorwf	_cur_state& (0+255),w,b
 22564  003D10  0100               	movlb	0	; () banked
 22565  003D12  11E9               	iorwf	(_cur_state+1)& (0+255),w,b
 22566  003D14  A4D8               	btfss	status,2,c
 22567  003D16  D005               	goto	i2l8034
 22568                           
 22569                           ; BSR set to: 0
 22570                           ;UI.c: 445: return 0;
 22571  003D18  0E00               	movlw	0
 22572  003D1A  6E2B               	movwf	?_inputHandler+1,c
 22573  003D1C  0E00               	movlw	0
 22574  003D1E  6E2A               	movwf	?_inputHandler,c
 22575                           
 22576                           ; BSR set to: 0
 22577  003D20  0012               	return	
 22578  003D22                     i2l8034:
 22579                           
 22580                           ; BSR set to: 0
 22581                           ;UI.c: 447: else{
 22582                           ;UI.c: 448: change_state_to_menu_23();
 22583  003D22  EC7C  F02E         	call	_change_state_to_menu_23	;wreg free
 22584                           
 22585                           ;UI.c: 449: }
 22586                           ;UI.c: 450: return 0;
 22587  003D26  0E00               	movlw	0
 22588  003D28  6E2B               	movwf	?_inputHandler+1,c
 22589  003D2A  0E00               	movlw	0
 22590  003D2C  6E2A               	movwf	?_inputHandler,c
 22591  003D2E  0012               	return	
 22592  003D30                     i2l8040:
 22593                           
 22594                           ;UI.c: 453: up = 1;
 22595  003D30  0E00               	movlw	0
 22596  003D32  6E76               	movwf	_up+1,c
 22597  003D34  0E01               	movlw	1
 22598  003D36  6E75               	movwf	_up,c
 22599                           
 22600                           ;UI.c: 454: return 1;
 22601  003D38  0E00               	movlw	0
 22602  003D3A  6E2B               	movwf	?_inputHandler+1,c
 22603  003D3C  0E01               	movlw	1
 22604  003D3E  6E2A               	movwf	?_inputHandler,c
 22605  003D40  0012               	return	
 22606  003D42                     i2l8044:
 22607                           
 22608                           ;UI.c: 456: down = 1;
 22609  003D42  0E00               	movlw	0
 22610  003D44  6E62               	movwf	_down+1,c
 22611  003D46  0E01               	movlw	1
 22612  003D48  6E61               	movwf	_down,c
 22613                           
 22614                           ;UI.c: 457: return 1;
 22615  003D4A  0E00               	movlw	0
 22616  003D4C  6E2B               	movwf	?_inputHandler+1,c
 22617  003D4E  0E01               	movlw	1
 22618  003D50  6E2A               	movwf	?_inputHandler,c
 22619  003D52  0012               	return	
 22620  003D54                     i2l8048:
 22621                           
 22622                           ;UI.c: 459: enter = 1;
 22623  003D54  0E00               	movlw	0
 22624  003D56  6E64               	movwf	_enter+1,c
 22625  003D58  0E01               	movlw	1
 22626  003D5A  6E63               	movwf	_enter,c
 22627                           
 22628                           ;UI.c: 460: return 1;
 22629  003D5C  0E00               	movlw	0
 22630  003D5E  6E2B               	movwf	?_inputHandler+1,c
 22631  003D60  0E01               	movlw	1
 22632  003D62  6E2A               	movwf	?_inputHandler,c
 22633  003D64  0012               	return	
 22634  003D66                     i2l8052:
 22635                           
 22636                           ;UI.c: 462: back = 1;
 22637  003D66  0E00               	movlw	0
 22638  003D68  6E60               	movwf	_back+1,c
 22639  003D6A  0E01               	movlw	1
 22640  003D6C  6E5F               	movwf	_back,c
 22641                           
 22642                           ;UI.c: 463: return 1;
 22643  003D6E  0E00               	movlw	0
 22644  003D70  6E2B               	movwf	?_inputHandler+1,c
 22645  003D72  0E01               	movlw	1
 22646  003D74  6E2A               	movwf	?_inputHandler,c
 22647  003D76  0012               	return	
 22648  003D78                     i2l8056:
 22649                           
 22650                           ;UI.c: 466: return 1;
 22651  003D78  0E00               	movlw	0
 22652  003D7A  6E2B               	movwf	?_inputHandler+1,c
 22653  003D7C  0E01               	movlw	1
 22654  003D7E  6E2A               	movwf	?_inputHandler,c
 22655                           
 22656                           ;UI.c: 467: }
 22657  003D80  0012               	return	
 22658  003D82                     i2l8062:
 22659  003D82  507D               	movf	_input,w,c	;volatile
 22660                           
 22661                           ; Switch size 1, requested type "space"
 22662                           ; Number of cases is 7, Range of values is 49 to 68
 22663                           ; switch strategies available:
 22664                           ; Name         Instructions Cycles
 22665                           ; simple_byte           22    12 (average)
 22666                           ;	Chosen strategy is simple_byte
 22667  003D84  0A31               	xorlw	49	; case 49
 22668  003D86  B4D8               	btfsc	status,2,c
 22669  003D88  D789               	goto	i2l7992
 22670  003D8A  0A03               	xorlw	3	; case 50
 22671  003D8C  B4D8               	btfsc	status,2,c
 22672  003D8E  D799               	goto	i2l8006
 22673  003D90  0A01               	xorlw	1	; case 51
 22674  003D92  B4D8               	btfsc	status,2,c
 22675  003D94  D7BA               	goto	i2l8026
 22676  003D96  0A72               	xorlw	114	; case 65
 22677  003D98  B4D8               	btfsc	status,2,c
 22678  003D9A  D7CA               	goto	i2l8040
 22679  003D9C  0A03               	xorlw	3	; case 66
 22680  003D9E  B4D8               	btfsc	status,2,c
 22681  003DA0  D7D0               	goto	i2l8044
 22682  003DA2  0A01               	xorlw	1	; case 67
 22683  003DA4  B4D8               	btfsc	status,2,c
 22684  003DA6  D7D6               	goto	i2l8048
 22685  003DA8  0A07               	xorlw	7	; case 68
 22686  003DAA  B4D8               	btfsc	status,2,c
 22687  003DAC  D7DC               	goto	i2l8052
 22688  003DAE  D7E4               	goto	i2l8056
 22689  003DB0                     __end_of_inputHandler:
 22690                           	opt stack 0
 22691                           pclatu	equ	0xFFB
 22692                           pclath	equ	0xFFA
 22693                           tblptru	equ	0xFF8
 22694                           tblptrh	equ	0xFF7
 22695                           tblptrl	equ	0xFF6
 22696                           tablat	equ	0xFF5
 22697                           prodh	equ	0xFF4
 22698                           prodl	equ	0xFF3
 22699                           intcon	equ	0xFF2
 22700                           intcon2	equ	0xFF1
 22701                           intcon3	equ	0xFF0
 22702                           indf0	equ	0xFEF
 22703                           postinc0	equ	0xFEE
 22704                           fsr0h	equ	0xFEA
 22705                           fsr0l	equ	0xFE9
 22706                           wreg	equ	0xFE8
 22707                           postdec1	equ	0xFE5
 22708                           fsr1h	equ	0xFE2
 22709                           fsr1l	equ	0xFE1
 22710                           indf2	equ	0xFDF
 22711                           postinc2	equ	0xFDE
 22712                           postdec2	equ	0xFDD
 22713                           fsr2h	equ	0xFDA
 22714                           fsr2l	equ	0xFD9
 22715                           status	equ	0xFD8
 22716                           
 22717 ;; *************** function i2_change_state_to_menu_22 *****************
 22718 ;; Defined at:
 22719 ;;		line 501 in file "UI.c"
 22720 ;; Parameters:    Size  Location     Type
 22721 ;;		None
 22722 ;; Auto vars:     Size  Location     Type
 22723 ;;		None
 22724 ;; Return value:  Size  Location     Type
 22725 ;;                  1    wreg      void 
 22726 ;; Registers used:
 22727 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22728 ;; Tracked objects:
 22729 ;;		On entry : 0/0
 22730 ;;		On exit  : 0/0
 22731 ;;		Unchanged: 0/0
 22732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22734 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22736 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22737 ;;Total ram usage:        0 bytes
 22738 ;; Hardware stack levels used:    1
 22739 ;; Hardware stack levels required when called:    3
 22740 ;; This function calls:
 22741 ;;		i2_lcdInst
 22742 ;;		i2_printf
 22743 ;; This function is called by:
 22744 ;;		_updateMenu
 22745 ;;		_inputHandler
 22746 ;; This function uses a non-reentrant model
 22747 ;;
 22748                           
 22749                           	psect	text72
 22750  005C98                     __ptext72:
 22751                           	opt stack 0
 22752  005C98                     i2_change_state_to_menu_22:
 22753                           	opt stack 19
 22754                           
 22755                           ;UI.c: 502: cur_state = 22;
 22756                           
 22757                           ;incstack = 0
 22758  005C98  0E00               	movlw	0
 22759  005C9A  0100               	movlb	0	; () banked
 22760  005C9C  6FE9               	movwf	(_cur_state+1)& (0+255),b
 22761  005C9E  0E16               	movlw	22
 22762  005CA0  6FE8               	movwf	_cur_state& (0+255),b
 22763                           
 22764                           ; BSR set to: 0
 22765                           ;UI.c: 504: lcdInst(0b10000000);;
 22766  005CA2  0E80               	movlw	128
 22767  005CA4  EC8B  F030         	call	i2_lcdInst
 22768                           
 22769                           ;UI.c: 505: printf("2. SORT        <");
 22770  005CA8  0EDD               	movlw	low STR_34
 22771  005CAA  6E0D               	movwf	i2printf@f,c
 22772  005CAC  0EFD               	movlw	high STR_34
 22773  005CAE  6E0E               	movwf	i2printf@f+1,c
 22774  005CB0  EC1D  F015         	call	i2_printf	;wreg free
 22775                           
 22776                           ;UI.c: 506: lcdInst(0b11000000);;
 22777  005CB4  0EC0               	movlw	192
 22778  005CB6  EC8B  F030         	call	i2_lcdInst
 22779                           
 22780                           ;UI.c: 507: printf("3. LOGS         ");
 22781  005CBA  0E22               	movlw	low STR_36
 22782  005CBC  6E0D               	movwf	i2printf@f,c
 22783  005CBE  0EFD               	movlw	high STR_36
 22784  005CC0  6E0E               	movwf	i2printf@f+1,c
 22785  005CC2  EC1D  F015         	call	i2_printf	;wreg free
 22786  005CC6  0012               	return		;funcret
 22787  005CC8                     __end_ofi2_change_state_to_menu_22:
 22788                           	opt stack 0
 22789                           pclatu	equ	0xFFB
 22790                           pclath	equ	0xFFA
 22791                           tblptru	equ	0xFF8
 22792                           tblptrh	equ	0xFF7
 22793                           tblptrl	equ	0xFF6
 22794                           tablat	equ	0xFF5
 22795                           prodh	equ	0xFF4
 22796                           prodl	equ	0xFF3
 22797                           intcon	equ	0xFF2
 22798                           intcon2	equ	0xFF1
 22799                           intcon3	equ	0xFF0
 22800                           indf0	equ	0xFEF
 22801                           postinc0	equ	0xFEE
 22802                           fsr0h	equ	0xFEA
 22803                           fsr0l	equ	0xFE9
 22804                           wreg	equ	0xFE8
 22805                           postdec1	equ	0xFE5
 22806                           fsr1h	equ	0xFE2
 22807                           fsr1l	equ	0xFE1
 22808                           indf2	equ	0xFDF
 22809                           postinc2	equ	0xFDE
 22810                           postdec2	equ	0xFDD
 22811                           fsr2h	equ	0xFDA
 22812                           fsr2l	equ	0xFD9
 22813                           status	equ	0xFD8
 22814                           
 22815 ;; *************** function i2_change_state_to_menu_12 *****************
 22816 ;; Defined at:
 22817 ;;		line 493 in file "UI.c"
 22818 ;; Parameters:    Size  Location     Type
 22819 ;;		None
 22820 ;; Auto vars:     Size  Location     Type
 22821 ;;		None
 22822 ;; Return value:  Size  Location     Type
 22823 ;;                  1    wreg      void 
 22824 ;; Registers used:
 22825 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22826 ;; Tracked objects:
 22827 ;;		On entry : 0/0
 22828 ;;		On exit  : 0/0
 22829 ;;		Unchanged: 0/0
 22830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22834 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22835 ;;Total ram usage:        0 bytes
 22836 ;; Hardware stack levels used:    1
 22837 ;; Hardware stack levels required when called:    3
 22838 ;; This function calls:
 22839 ;;		i2_lcdInst
 22840 ;;		i2_printf
 22841 ;; This function is called by:
 22842 ;;		_updateMenu
 22843 ;;		_inputHandler
 22844 ;; This function uses a non-reentrant model
 22845 ;;
 22846                           
 22847                           	psect	text73
 22848  005CC8                     __ptext73:
 22849                           	opt stack 0
 22850  005CC8                     i2_change_state_to_menu_12:
 22851                           	opt stack 19
 22852                           
 22853                           ;UI.c: 494: cur_state = 12;
 22854                           
 22855                           ;incstack = 0
 22856  005CC8  0E00               	movlw	0
 22857  005CCA  0100               	movlb	0	; () banked
 22858  005CCC  6FE9               	movwf	(_cur_state+1)& (0+255),b
 22859  005CCE  0E0C               	movlw	12
 22860  005CD0  6FE8               	movwf	_cur_state& (0+255),b
 22861                           
 22862                           ; BSR set to: 0
 22863                           ;UI.c: 496: lcdInst(0b10000000);;
 22864  005CD2  0E80               	movlw	128
 22865  005CD4  EC8B  F030         	call	i2_lcdInst
 22866                           
 22867                           ;UI.c: 497: printf("1. DATE/TIME    ");
 22868  005CD8  0E44               	movlw	low STR_33
 22869  005CDA  6E0D               	movwf	i2printf@f,c
 22870  005CDC  0EFD               	movlw	high STR_33
 22871  005CDE  6E0E               	movwf	i2printf@f+1,c
 22872  005CE0  EC1D  F015         	call	i2_printf	;wreg free
 22873                           
 22874                           ;UI.c: 498: lcdInst(0b11000000);;
 22875  005CE4  0EC0               	movlw	192
 22876  005CE6  EC8B  F030         	call	i2_lcdInst
 22877                           
 22878                           ;UI.c: 499: printf("2. SORT        <");
 22879  005CEA  0EDD               	movlw	low STR_34
 22880  005CEC  6E0D               	movwf	i2printf@f,c
 22881  005CEE  0EFD               	movlw	high STR_34
 22882  005CF0  6E0E               	movwf	i2printf@f+1,c
 22883  005CF2  EC1D  F015         	call	i2_printf	;wreg free
 22884  005CF6  0012               	return		;funcret
 22885  005CF8                     __end_ofi2_change_state_to_menu_12:
 22886                           	opt stack 0
 22887                           pclatu	equ	0xFFB
 22888                           pclath	equ	0xFFA
 22889                           tblptru	equ	0xFF8
 22890                           tblptrh	equ	0xFF7
 22891                           tblptrl	equ	0xFF6
 22892                           tablat	equ	0xFF5
 22893                           prodh	equ	0xFF4
 22894                           prodl	equ	0xFF3
 22895                           intcon	equ	0xFF2
 22896                           intcon2	equ	0xFF1
 22897                           intcon3	equ	0xFF0
 22898                           indf0	equ	0xFEF
 22899                           postinc0	equ	0xFEE
 22900                           fsr0h	equ	0xFEA
 22901                           fsr0l	equ	0xFE9
 22902                           wreg	equ	0xFE8
 22903                           postdec1	equ	0xFE5
 22904                           fsr1h	equ	0xFE2
 22905                           fsr1l	equ	0xFE1
 22906                           indf2	equ	0xFDF
 22907                           postinc2	equ	0xFDE
 22908                           postdec2	equ	0xFDD
 22909                           fsr2h	equ	0xFDA
 22910                           fsr2l	equ	0xFD9
 22911                           status	equ	0xFD8
 22912                           
 22913 ;; *************** function _change_state_to_menu_23 *****************
 22914 ;; Defined at:
 22915 ;;		line 509 in file "UI.c"
 22916 ;; Parameters:    Size  Location     Type
 22917 ;;		None
 22918 ;; Auto vars:     Size  Location     Type
 22919 ;;		None
 22920 ;; Return value:  Size  Location     Type
 22921 ;;                  1    wreg      void 
 22922 ;; Registers used:
 22923 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22924 ;; Tracked objects:
 22925 ;;		On entry : 0/0
 22926 ;;		On exit  : 0/0
 22927 ;;		Unchanged: 0/0
 22928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22932 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22933 ;;Total ram usage:        0 bytes
 22934 ;; Hardware stack levels used:    1
 22935 ;; Hardware stack levels required when called:    3
 22936 ;; This function calls:
 22937 ;;		i2_lcdInst
 22938 ;;		i2_printf
 22939 ;; This function is called by:
 22940 ;;		_updateMenu
 22941 ;;		_inputHandler
 22942 ;; This function uses a non-reentrant model
 22943 ;;
 22944                           
 22945                           	psect	text74
 22946  005CF8                     __ptext74:
 22947                           	opt stack 0
 22948  005CF8                     _change_state_to_menu_23:
 22949                           	opt stack 18
 22950                           
 22951                           ;UI.c: 510: cur_state = 23;
 22952                           
 22953                           ;incstack = 0
 22954  005CF8  0E00               	movlw	0
 22955  005CFA  0100               	movlb	0	; () banked
 22956  005CFC  6FE9               	movwf	(_cur_state+1)& (0+255),b
 22957  005CFE  0E17               	movlw	23
 22958  005D00  6FE8               	movwf	_cur_state& (0+255),b
 22959                           
 22960                           ; BSR set to: 0
 22961                           ;UI.c: 512: lcdInst(0b10000000);;
 22962  005D02  0E80               	movlw	128
 22963  005D04  EC8B  F030         	call	i2_lcdInst
 22964                           
 22965                           ;UI.c: 513: printf("2. SORT         ");
 22966  005D08  0E33               	movlw	low STR_32
 22967  005D0A  6E0D               	movwf	i2printf@f,c
 22968  005D0C  0EFD               	movlw	high STR_32
 22969  005D0E  6E0E               	movwf	i2printf@f+1,c
 22970  005D10  EC1D  F015         	call	i2_printf	;wreg free
 22971                           
 22972                           ;UI.c: 514: lcdInst(0b11000000);;
 22973  005D14  0EC0               	movlw	192
 22974  005D16  EC8B  F030         	call	i2_lcdInst
 22975                           
 22976                           ;UI.c: 515: printf("3. LOGS        <");
 22977  005D1A  0ECC               	movlw	low STR_38
 22978  005D1C  6E0D               	movwf	i2printf@f,c
 22979  005D1E  0EFD               	movlw	high STR_38
 22980  005D20  6E0E               	movwf	i2printf@f+1,c
 22981  005D22  EC1D  F015         	call	i2_printf	;wreg free
 22982  005D26  0012               	return		;funcret
 22983  005D28                     __end_of_change_state_to_menu_23:
 22984                           	opt stack 0
 22985                           pclatu	equ	0xFFB
 22986                           pclath	equ	0xFFA
 22987                           tblptru	equ	0xFF8
 22988                           tblptrh	equ	0xFF7
 22989                           tblptrl	equ	0xFF6
 22990                           tablat	equ	0xFF5
 22991                           prodh	equ	0xFF4
 22992                           prodl	equ	0xFF3
 22993                           intcon	equ	0xFF2
 22994                           intcon2	equ	0xFF1
 22995                           intcon3	equ	0xFF0
 22996                           indf0	equ	0xFEF
 22997                           postinc0	equ	0xFEE
 22998                           fsr0h	equ	0xFEA
 22999                           fsr0l	equ	0xFE9
 23000                           wreg	equ	0xFE8
 23001                           postdec1	equ	0xFE5
 23002                           fsr1h	equ	0xFE2
 23003                           fsr1l	equ	0xFE1
 23004                           indf2	equ	0xFDF
 23005                           postinc2	equ	0xFDE
 23006                           postdec2	equ	0xFDD
 23007                           fsr2h	equ	0xFDA
 23008                           fsr2l	equ	0xFD9
 23009                           status	equ	0xFD8
 23010                           
 23011 ;; *************** function _change_state_to_menu_11 *****************
 23012 ;; Defined at:
 23013 ;;		line 485 in file "UI.c"
 23014 ;; Parameters:    Size  Location     Type
 23015 ;;		None
 23016 ;; Auto vars:     Size  Location     Type
 23017 ;;		None
 23018 ;; Return value:  Size  Location     Type
 23019 ;;                  1    wreg      void 
 23020 ;; Registers used:
 23021 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23022 ;; Tracked objects:
 23023 ;;		On entry : 0/0
 23024 ;;		On exit  : 0/0
 23025 ;;		Unchanged: 0/0
 23026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23030 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23031 ;;Total ram usage:        0 bytes
 23032 ;; Hardware stack levels used:    1
 23033 ;; Hardware stack levels required when called:    3
 23034 ;; This function calls:
 23035 ;;		i2_lcdInst
 23036 ;;		i2_printf
 23037 ;; This function is called by:
 23038 ;;		_updateMenu
 23039 ;;		_inputHandler
 23040 ;; This function uses a non-reentrant model
 23041 ;;
 23042                           
 23043                           	psect	text75
 23044  005D28                     __ptext75:
 23045                           	opt stack 0
 23046  005D28                     _change_state_to_menu_11:
 23047                           	opt stack 18
 23048                           
 23049                           ;UI.c: 486: cur_state = 11;
 23050                           
 23051                           ;incstack = 0
 23052  005D28  0E00               	movlw	0
 23053  005D2A  0100               	movlb	0	; () banked
 23054  005D2C  6FE9               	movwf	(_cur_state+1)& (0+255),b
 23055  005D2E  0E0B               	movlw	11
 23056  005D30  6FE8               	movwf	_cur_state& (0+255),b
 23057                           
 23058                           ; BSR set to: 0
 23059                           ;UI.c: 488: lcdInst(0b10000000);;
 23060  005D32  0E80               	movlw	128
 23061  005D34  EC8B  F030         	call	i2_lcdInst
 23062                           
 23063                           ;UI.c: 489: printf("1. DATE/TIME   <");
 23064  005D38  0EEE               	movlw	low STR_31
 23065  005D3A  6E0D               	movwf	i2printf@f,c
 23066  005D3C  0EFD               	movlw	high STR_31
 23067  005D3E  6E0E               	movwf	i2printf@f+1,c
 23068  005D40  EC1D  F015         	call	i2_printf	;wreg free
 23069                           
 23070                           ;UI.c: 490: lcdInst(0b11000000);;
 23071  005D44  0EC0               	movlw	192
 23072  005D46  EC8B  F030         	call	i2_lcdInst
 23073                           
 23074                           ;UI.c: 491: printf("2. SORT         ");
 23075  005D4A  0E33               	movlw	low STR_32
 23076  005D4C  6E0D               	movwf	i2printf@f,c
 23077  005D4E  0EFD               	movlw	high STR_32
 23078  005D50  6E0E               	movwf	i2printf@f+1,c
 23079  005D52  EC1D  F015         	call	i2_printf	;wreg free
 23080  005D56  0012               	return		;funcret
 23081  005D58                     __end_of_change_state_to_menu_11:
 23082                           	opt stack 0
 23083                           pclatu	equ	0xFFB
 23084                           pclath	equ	0xFFA
 23085                           tblptru	equ	0xFF8
 23086                           tblptrh	equ	0xFF7
 23087                           tblptrl	equ	0xFF6
 23088                           tablat	equ	0xFF5
 23089                           prodh	equ	0xFF4
 23090                           prodl	equ	0xFF3
 23091                           intcon	equ	0xFF2
 23092                           intcon2	equ	0xFF1
 23093                           intcon3	equ	0xFF0
 23094                           indf0	equ	0xFEF
 23095                           postinc0	equ	0xFEE
 23096                           fsr0h	equ	0xFEA
 23097                           fsr0l	equ	0xFE9
 23098                           wreg	equ	0xFE8
 23099                           postdec1	equ	0xFE5
 23100                           fsr1h	equ	0xFE2
 23101                           fsr1l	equ	0xFE1
 23102                           indf2	equ	0xFDF
 23103                           postinc2	equ	0xFDE
 23104                           postdec2	equ	0xFDD
 23105                           fsr2h	equ	0xFDA
 23106                           fsr2l	equ	0xFD9
 23107                           status	equ	0xFD8
 23108                           
 23109 ;; *************** function _change_state_to_logs_34 *****************
 23110 ;; Defined at:
 23111 ;;		line 552 in file "UI.c"
 23112 ;; Parameters:    Size  Location     Type
 23113 ;;		None
 23114 ;; Auto vars:     Size  Location     Type
 23115 ;;		None
 23116 ;; Return value:  Size  Location     Type
 23117 ;;                  1    wreg      void 
 23118 ;; Registers used:
 23119 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23120 ;; Tracked objects:
 23121 ;;		On entry : 0/0
 23122 ;;		On exit  : 0/0
 23123 ;;		Unchanged: 0/0
 23124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23128 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23129 ;;Total ram usage:        0 bytes
 23130 ;; Hardware stack levels used:    1
 23131 ;; Hardware stack levels required when called:    3
 23132 ;; This function calls:
 23133 ;;		i2_lcdInst
 23134 ;;		i2_printf
 23135 ;; This function is called by:
 23136 ;;		_updateMenu
 23137 ;;		_inputHandler
 23138 ;; This function uses a non-reentrant model
 23139 ;;
 23140                           
 23141                           	psect	text76
 23142  005D58                     __ptext76:
 23143                           	opt stack 0
 23144  005D58                     _change_state_to_logs_34:
 23145                           	opt stack 18
 23146                           
 23147                           ;UI.c: 553: cur_state = 1034;
 23148                           
 23149                           ;incstack = 0
 23150  005D58  0E04               	movlw	4
 23151  005D5A  0100               	movlb	0	; () banked
 23152  005D5C  6FE9               	movwf	(_cur_state+1)& (0+255),b
 23153  005D5E  0E0A               	movlw	10
 23154  005D60  6FE8               	movwf	_cur_state& (0+255),b
 23155                           
 23156                           ; BSR set to: 0
 23157                           ;UI.c: 554: lcdInst(0b10000000);;
 23158  005D62  0E80               	movlw	128
 23159  005D64  EC8B  F030         	call	i2_lcdInst
 23160                           
 23161                           ;UI.c: 555: printf("LOG 3           ");
 23162  005D68  0E00               	movlw	low STR_44
 23163  005D6A  6E0D               	movwf	i2printf@f,c
 23164  005D6C  0EFD               	movlw	high STR_44
 23165  005D6E  6E0E               	movwf	i2printf@f+1,c
 23166  005D70  EC1D  F015         	call	i2_printf	;wreg free
 23167                           
 23168                           ;UI.c: 556: lcdInst(0b11000000);;
 23169  005D74  0EC0               	movlw	192
 23170  005D76  EC8B  F030         	call	i2_lcdInst
 23171                           
 23172                           ;UI.c: 557: printf("LOG 4          <");
 23173  005D7A  0EBB               	movlw	low STR_50
 23174  005D7C  6E0D               	movwf	i2printf@f,c
 23175  005D7E  0EFD               	movlw	high STR_50
 23176  005D80  6E0E               	movwf	i2printf@f+1,c
 23177  005D82  EC1D  F015         	call	i2_printf	;wreg free
 23178  005D86  0012               	return		;funcret
 23179  005D88                     __end_of_change_state_to_logs_34:
 23180                           	opt stack 0
 23181                           pclatu	equ	0xFFB
 23182                           pclath	equ	0xFFA
 23183                           tblptru	equ	0xFF8
 23184                           tblptrh	equ	0xFF7
 23185                           tblptrl	equ	0xFF6
 23186                           tablat	equ	0xFF5
 23187                           prodh	equ	0xFF4
 23188                           prodl	equ	0xFF3
 23189                           intcon	equ	0xFF2
 23190                           intcon2	equ	0xFF1
 23191                           intcon3	equ	0xFF0
 23192                           indf0	equ	0xFEF
 23193                           postinc0	equ	0xFEE
 23194                           fsr0h	equ	0xFEA
 23195                           fsr0l	equ	0xFE9
 23196                           wreg	equ	0xFE8
 23197                           postdec1	equ	0xFE5
 23198                           fsr1h	equ	0xFE2
 23199                           fsr1l	equ	0xFE1
 23200                           indf2	equ	0xFDF
 23201                           postinc2	equ	0xFDE
 23202                           postdec2	equ	0xFDD
 23203                           fsr2h	equ	0xFDA
 23204                           fsr2l	equ	0xFD9
 23205                           status	equ	0xFD8
 23206                           
 23207 ;; *************** function _change_state_to_logs_33 *****************
 23208 ;; Defined at:
 23209 ;;		line 545 in file "UI.c"
 23210 ;; Parameters:    Size  Location     Type
 23211 ;;		None
 23212 ;; Auto vars:     Size  Location     Type
 23213 ;;		None
 23214 ;; Return value:  Size  Location     Type
 23215 ;;                  1    wreg      void 
 23216 ;; Registers used:
 23217 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23218 ;; Tracked objects:
 23219 ;;		On entry : 0/0
 23220 ;;		On exit  : 0/0
 23221 ;;		Unchanged: 0/0
 23222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23226 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23227 ;;Total ram usage:        0 bytes
 23228 ;; Hardware stack levels used:    1
 23229 ;; Hardware stack levels required when called:    3
 23230 ;; This function calls:
 23231 ;;		i2_lcdInst
 23232 ;;		i2_printf
 23233 ;; This function is called by:
 23234 ;;		_updateMenu
 23235 ;;		_inputHandler
 23236 ;; This function uses a non-reentrant model
 23237 ;;
 23238                           
 23239                           	psect	text77
 23240  005D88                     __ptext77:
 23241                           	opt stack 0
 23242  005D88                     _change_state_to_logs_33:
 23243                           	opt stack 18
 23244                           
 23245                           ;UI.c: 546: cur_state = 1033;
 23246                           
 23247                           ;incstack = 0
 23248  005D88  0E04               	movlw	4
 23249  005D8A  0100               	movlb	0	; () banked
 23250  005D8C  6FE9               	movwf	(_cur_state+1)& (0+255),b
 23251  005D8E  0E09               	movlw	9
 23252  005D90  6FE8               	movwf	_cur_state& (0+255),b
 23253                           
 23254                           ; BSR set to: 0
 23255                           ;UI.c: 547: lcdInst(0b10000000);;
 23256  005D92  0E80               	movlw	128
 23257  005D94  EC8B  F030         	call	i2_lcdInst
 23258                           
 23259                           ;UI.c: 548: printf("LOG 3          <");
 23260  005D98  0EAA               	movlw	low STR_46
 23261  005D9A  6E0D               	movwf	i2printf@f,c
 23262  005D9C  0EFD               	movlw	high STR_46
 23263  005D9E  6E0E               	movwf	i2printf@f+1,c
 23264  005DA0  EC1D  F015         	call	i2_printf	;wreg free
 23265                           
 23266                           ;UI.c: 549: lcdInst(0b11000000);;
 23267  005DA4  0EC0               	movlw	192
 23268  005DA6  EC8B  F030         	call	i2_lcdInst
 23269                           
 23270                           ;UI.c: 550: printf("LOG 4           ");
 23271  005DAA  0E11               	movlw	low STR_48
 23272  005DAC  6E0D               	movwf	i2printf@f,c
 23273  005DAE  0EFD               	movlw	high STR_48
 23274  005DB0  6E0E               	movwf	i2printf@f+1,c
 23275  005DB2  EC1D  F015         	call	i2_printf	;wreg free
 23276  005DB6  0012               	return		;funcret
 23277  005DB8                     __end_of_change_state_to_logs_33:
 23278                           	opt stack 0
 23279                           pclatu	equ	0xFFB
 23280                           pclath	equ	0xFFA
 23281                           tblptru	equ	0xFF8
 23282                           tblptrh	equ	0xFF7
 23283                           tblptrl	equ	0xFF6
 23284                           tablat	equ	0xFF5
 23285                           prodh	equ	0xFF4
 23286                           prodl	equ	0xFF3
 23287                           intcon	equ	0xFF2
 23288                           intcon2	equ	0xFF1
 23289                           intcon3	equ	0xFF0
 23290                           indf0	equ	0xFEF
 23291                           postinc0	equ	0xFEE
 23292                           fsr0h	equ	0xFEA
 23293                           fsr0l	equ	0xFE9
 23294                           wreg	equ	0xFE8
 23295                           postdec1	equ	0xFE5
 23296                           fsr1h	equ	0xFE2
 23297                           fsr1l	equ	0xFE1
 23298                           indf2	equ	0xFDF
 23299                           postinc2	equ	0xFDE
 23300                           postdec2	equ	0xFDD
 23301                           fsr2h	equ	0xFDA
 23302                           fsr2l	equ	0xFD9
 23303                           status	equ	0xFD8
 23304                           
 23305 ;; *************** function _change_state_to_logs_23 *****************
 23306 ;; Defined at:
 23307 ;;		line 538 in file "UI.c"
 23308 ;; Parameters:    Size  Location     Type
 23309 ;;		None
 23310 ;; Auto vars:     Size  Location     Type
 23311 ;;		None
 23312 ;; Return value:  Size  Location     Type
 23313 ;;                  1    wreg      void 
 23314 ;; Registers used:
 23315 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23316 ;; Tracked objects:
 23317 ;;		On entry : 0/0
 23318 ;;		On exit  : 0/0
 23319 ;;		Unchanged: 0/0
 23320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23324 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23325 ;;Total ram usage:        0 bytes
 23326 ;; Hardware stack levels used:    1
 23327 ;; Hardware stack levels required when called:    3
 23328 ;; This function calls:
 23329 ;;		i2_lcdInst
 23330 ;;		i2_printf
 23331 ;; This function is called by:
 23332 ;;		_updateMenu
 23333 ;;		_inputHandler
 23334 ;; This function uses a non-reentrant model
 23335 ;;
 23336                           
 23337                           	psect	text78
 23338  005E76                     __ptext78:
 23339                           	opt stack 0
 23340  005E76                     _change_state_to_logs_23:
 23341                           	opt stack 18
 23342                           
 23343                           ;UI.c: 539: cur_state = 1023;
 23344                           
 23345                           ;incstack = 0
 23346  005E76  0E03               	movlw	3
 23347  005E78  0100               	movlb	0	; () banked
 23348  005E7A  6FE9               	movwf	(_cur_state+1)& (0+255),b
 23349  005E7C  69E8               	setf	_cur_state& (0+255),b
 23350                           
 23351                           ; BSR set to: 0
 23352                           ;UI.c: 540: lcdInst(0b10000000);;
 23353  005E7E  0E80               	movlw	128
 23354  005E80  EC8B  F030         	call	i2_lcdInst
 23355                           
 23356                           ;UI.c: 541: printf("LOG 2           ");
 23357  005E84  0EEF               	movlw	low STR_40
 23358  005E86  6E0D               	movwf	i2printf@f,c
 23359  005E88  0EFC               	movlw	high STR_40
 23360  005E8A  6E0E               	movwf	i2printf@f+1,c
 23361  005E8C  EC1D  F015         	call	i2_printf	;wreg free
 23362                           
 23363                           ;UI.c: 542: lcdInst(0b11000000);;
 23364  005E90  0EC0               	movlw	192
 23365  005E92  EC8B  F030         	call	i2_lcdInst
 23366                           
 23367                           ;UI.c: 543: printf("LOG 3          <");
 23368  005E96  0EAA               	movlw	low STR_46
 23369  005E98  6E0D               	movwf	i2printf@f,c
 23370  005E9A  0EFD               	movlw	high STR_46
 23371  005E9C  6E0E               	movwf	i2printf@f+1,c
 23372  005E9E  EC1D  F015         	call	i2_printf	;wreg free
 23373  005EA2  0012               	return		;funcret
 23374  005EA4                     __end_of_change_state_to_logs_23:
 23375                           	opt stack 0
 23376                           pclatu	equ	0xFFB
 23377                           pclath	equ	0xFFA
 23378                           tblptru	equ	0xFF8
 23379                           tblptrh	equ	0xFF7
 23380                           tblptrl	equ	0xFF6
 23381                           tablat	equ	0xFF5
 23382                           prodh	equ	0xFF4
 23383                           prodl	equ	0xFF3
 23384                           intcon	equ	0xFF2
 23385                           intcon2	equ	0xFF1
 23386                           intcon3	equ	0xFF0
 23387                           indf0	equ	0xFEF
 23388                           postinc0	equ	0xFEE
 23389                           fsr0h	equ	0xFEA
 23390                           fsr0l	equ	0xFE9
 23391                           wreg	equ	0xFE8
 23392                           postdec1	equ	0xFE5
 23393                           fsr1h	equ	0xFE2
 23394                           fsr1l	equ	0xFE1
 23395                           indf2	equ	0xFDF
 23396                           postinc2	equ	0xFDE
 23397                           postdec2	equ	0xFDD
 23398                           fsr2h	equ	0xFDA
 23399                           fsr2l	equ	0xFD9
 23400                           status	equ	0xFD8
 23401                           
 23402 ;; *************** function _change_state_to_logs_22 *****************
 23403 ;; Defined at:
 23404 ;;		line 531 in file "UI.c"
 23405 ;; Parameters:    Size  Location     Type
 23406 ;;		None
 23407 ;; Auto vars:     Size  Location     Type
 23408 ;;		None
 23409 ;; Return value:  Size  Location     Type
 23410 ;;                  1    wreg      void 
 23411 ;; Registers used:
 23412 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23413 ;; Tracked objects:
 23414 ;;		On entry : 0/0
 23415 ;;		On exit  : 0/0
 23416 ;;		Unchanged: 0/0
 23417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23421 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23422 ;;Total ram usage:        0 bytes
 23423 ;; Hardware stack levels used:    1
 23424 ;; Hardware stack levels required when called:    3
 23425 ;; This function calls:
 23426 ;;		i2_lcdInst
 23427 ;;		i2_printf
 23428 ;; This function is called by:
 23429 ;;		_updateMenu
 23430 ;;		_inputHandler
 23431 ;; This function uses a non-reentrant model
 23432 ;;
 23433                           
 23434                           	psect	text79
 23435  005DB8                     __ptext79:
 23436                           	opt stack 0
 23437  005DB8                     _change_state_to_logs_22:
 23438                           	opt stack 18
 23439                           
 23440                           ;UI.c: 532: cur_state = 1022;
 23441                           
 23442                           ;incstack = 0
 23443  005DB8  0E03               	movlw	3
 23444  005DBA  0100               	movlb	0	; () banked
 23445  005DBC  6FE9               	movwf	(_cur_state+1)& (0+255),b
 23446  005DBE  0EFE               	movlw	254
 23447  005DC0  6FE8               	movwf	_cur_state& (0+255),b
 23448                           
 23449                           ; BSR set to: 0
 23450                           ;UI.c: 533: lcdInst(0b10000000);;
 23451  005DC2  0E80               	movlw	128
 23452  005DC4  EC8B  F030         	call	i2_lcdInst
 23453                           
 23454                           ;UI.c: 534: printf("LOG 2          <");
 23455  005DC8  0E99               	movlw	low STR_42
 23456  005DCA  6E0D               	movwf	i2printf@f,c
 23457  005DCC  0EFD               	movlw	high STR_42
 23458  005DCE  6E0E               	movwf	i2printf@f+1,c
 23459  005DD0  EC1D  F015         	call	i2_printf	;wreg free
 23460                           
 23461                           ;UI.c: 535: lcdInst(0b11000000);;
 23462  005DD4  0EC0               	movlw	192
 23463  005DD6  EC8B  F030         	call	i2_lcdInst
 23464                           
 23465                           ;UI.c: 536: printf("LOG 3           ");
 23466  005DDA  0E00               	movlw	low STR_44
 23467  005DDC  6E0D               	movwf	i2printf@f,c
 23468  005DDE  0EFD               	movlw	high STR_44
 23469  005DE0  6E0E               	movwf	i2printf@f+1,c
 23470  005DE2  EC1D  F015         	call	i2_printf	;wreg free
 23471  005DE6  0012               	return		;funcret
 23472  005DE8                     __end_of_change_state_to_logs_22:
 23473                           	opt stack 0
 23474                           pclatu	equ	0xFFB
 23475                           pclath	equ	0xFFA
 23476                           tblptru	equ	0xFF8
 23477                           tblptrh	equ	0xFF7
 23478                           tblptrl	equ	0xFF6
 23479                           tablat	equ	0xFF5
 23480                           prodh	equ	0xFF4
 23481                           prodl	equ	0xFF3
 23482                           intcon	equ	0xFF2
 23483                           intcon2	equ	0xFF1
 23484                           intcon3	equ	0xFF0
 23485                           indf0	equ	0xFEF
 23486                           postinc0	equ	0xFEE
 23487                           fsr0h	equ	0xFEA
 23488                           fsr0l	equ	0xFE9
 23489                           wreg	equ	0xFE8
 23490                           postdec1	equ	0xFE5
 23491                           fsr1h	equ	0xFE2
 23492                           fsr1l	equ	0xFE1
 23493                           indf2	equ	0xFDF
 23494                           postinc2	equ	0xFDE
 23495                           postdec2	equ	0xFDD
 23496                           fsr2h	equ	0xFDA
 23497                           fsr2l	equ	0xFD9
 23498                           status	equ	0xFD8
 23499                           
 23500 ;; *************** function _change_state_to_logs_12 *****************
 23501 ;; Defined at:
 23502 ;;		line 524 in file "UI.c"
 23503 ;; Parameters:    Size  Location     Type
 23504 ;;		None
 23505 ;; Auto vars:     Size  Location     Type
 23506 ;;		None
 23507 ;; Return value:  Size  Location     Type
 23508 ;;                  1    wreg      void 
 23509 ;; Registers used:
 23510 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23511 ;; Tracked objects:
 23512 ;;		On entry : 0/0
 23513 ;;		On exit  : 0/0
 23514 ;;		Unchanged: 0/0
 23515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23519 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23520 ;;Total ram usage:        0 bytes
 23521 ;; Hardware stack levels used:    1
 23522 ;; Hardware stack levels required when called:    3
 23523 ;; This function calls:
 23524 ;;		i2_lcdInst
 23525 ;;		i2_printf
 23526 ;; This function is called by:
 23527 ;;		_updateMenu
 23528 ;;		_inputHandler
 23529 ;; This function uses a non-reentrant model
 23530 ;;
 23531                           
 23532                           	psect	text80
 23533  005DE8                     __ptext80:
 23534                           	opt stack 0
 23535  005DE8                     _change_state_to_logs_12:
 23536                           	opt stack 18
 23537                           
 23538                           ;UI.c: 525: cur_state = 1012;
 23539                           
 23540                           ;incstack = 0
 23541  005DE8  0E03               	movlw	3
 23542  005DEA  0100               	movlb	0	; () banked
 23543  005DEC  6FE9               	movwf	(_cur_state+1)& (0+255),b
 23544  005DEE  0EF4               	movlw	244
 23545  005DF0  6FE8               	movwf	_cur_state& (0+255),b
 23546                           
 23547                           ; BSR set to: 0
 23548                           ;UI.c: 526: lcdInst(0b10000000);;
 23549  005DF2  0E80               	movlw	128
 23550  005DF4  EC8B  F030         	call	i2_lcdInst
 23551                           
 23552                           ;UI.c: 527: printf("LOG 1           ");
 23553  005DF8  0EDE               	movlw	low STR_41
 23554  005DFA  6E0D               	movwf	i2printf@f,c
 23555  005DFC  0EFC               	movlw	high STR_41
 23556  005DFE  6E0E               	movwf	i2printf@f+1,c
 23557  005E00  EC1D  F015         	call	i2_printf	;wreg free
 23558                           
 23559                           ;UI.c: 528: lcdInst(0b11000000);;
 23560  005E04  0EC0               	movlw	192
 23561  005E06  EC8B  F030         	call	i2_lcdInst
 23562                           
 23563                           ;UI.c: 529: printf("LOG 2          <");
 23564  005E0A  0E99               	movlw	low STR_42
 23565  005E0C  6E0D               	movwf	i2printf@f,c
 23566  005E0E  0EFD               	movlw	high STR_42
 23567  005E10  6E0E               	movwf	i2printf@f+1,c
 23568  005E12  EC1D  F015         	call	i2_printf	;wreg free
 23569  005E16  0012               	return		;funcret
 23570  005E18                     __end_of_change_state_to_logs_12:
 23571                           	opt stack 0
 23572                           pclatu	equ	0xFFB
 23573                           pclath	equ	0xFFA
 23574                           tblptru	equ	0xFF8
 23575                           tblptrh	equ	0xFF7
 23576                           tblptrl	equ	0xFF6
 23577                           tablat	equ	0xFF5
 23578                           prodh	equ	0xFF4
 23579                           prodl	equ	0xFF3
 23580                           intcon	equ	0xFF2
 23581                           intcon2	equ	0xFF1
 23582                           intcon3	equ	0xFF0
 23583                           indf0	equ	0xFEF
 23584                           postinc0	equ	0xFEE
 23585                           fsr0h	equ	0xFEA
 23586                           fsr0l	equ	0xFE9
 23587                           wreg	equ	0xFE8
 23588                           postdec1	equ	0xFE5
 23589                           fsr1h	equ	0xFE2
 23590                           fsr1l	equ	0xFE1
 23591                           indf2	equ	0xFDF
 23592                           postinc2	equ	0xFDE
 23593                           postdec2	equ	0xFDD
 23594                           fsr2h	equ	0xFDA
 23595                           fsr2l	equ	0xFD9
 23596                           status	equ	0xFD8
 23597                           
 23598 ;; *************** function _change_state_to_logs_11 *****************
 23599 ;; Defined at:
 23600 ;;		line 517 in file "UI.c"
 23601 ;; Parameters:    Size  Location     Type
 23602 ;;		None
 23603 ;; Auto vars:     Size  Location     Type
 23604 ;;		None
 23605 ;; Return value:  Size  Location     Type
 23606 ;;                  1    wreg      void 
 23607 ;; Registers used:
 23608 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23609 ;; Tracked objects:
 23610 ;;		On entry : 0/0
 23611 ;;		On exit  : 0/0
 23612 ;;		Unchanged: 0/0
 23613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23617 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23618 ;;Total ram usage:        0 bytes
 23619 ;; Hardware stack levels used:    1
 23620 ;; Hardware stack levels required when called:    3
 23621 ;; This function calls:
 23622 ;;		i2_lcdInst
 23623 ;;		i2_printf
 23624 ;; This function is called by:
 23625 ;;		_updateMenu
 23626 ;;		_inputHandler
 23627 ;; This function uses a non-reentrant model
 23628 ;;
 23629                           
 23630                           	psect	text81
 23631  005E18                     __ptext81:
 23632                           	opt stack 0
 23633  005E18                     _change_state_to_logs_11:
 23634                           	opt stack 18
 23635                           
 23636                           ;UI.c: 518: cur_state = 1011;
 23637                           
 23638                           ;incstack = 0
 23639  005E18  0E03               	movlw	3
 23640  005E1A  0100               	movlb	0	; () banked
 23641  005E1C  6FE9               	movwf	(_cur_state+1)& (0+255),b
 23642  005E1E  0EF3               	movlw	243
 23643  005E20  6FE8               	movwf	_cur_state& (0+255),b
 23644                           
 23645                           ; BSR set to: 0
 23646                           ;UI.c: 519: lcdInst(0b10000000);;
 23647  005E22  0E80               	movlw	128
 23648  005E24  EC8B  F030         	call	i2_lcdInst
 23649                           
 23650                           ;UI.c: 520: printf("LOG 1          <");
 23651  005E28  0E88               	movlw	low STR_39
 23652  005E2A  6E0D               	movwf	i2printf@f,c
 23653  005E2C  0EFD               	movlw	high STR_39
 23654  005E2E  6E0E               	movwf	i2printf@f+1,c
 23655  005E30  EC1D  F015         	call	i2_printf	;wreg free
 23656                           
 23657                           ;UI.c: 521: lcdInst(0b11000000);;
 23658  005E34  0EC0               	movlw	192
 23659  005E36  EC8B  F030         	call	i2_lcdInst
 23660                           
 23661                           ;UI.c: 522: printf("LOG 2           ");
 23662  005E3A  0EEF               	movlw	low STR_40
 23663  005E3C  6E0D               	movwf	i2printf@f,c
 23664  005E3E  0EFC               	movlw	high STR_40
 23665  005E40  6E0E               	movwf	i2printf@f+1,c
 23666  005E42  EC1D  F015         	call	i2_printf	;wreg free
 23667  005E46  0012               	return		;funcret
 23668  005E48                     __end_of_change_state_to_logs_11:
 23669                           	opt stack 0
 23670                           pclatu	equ	0xFFB
 23671                           pclath	equ	0xFFA
 23672                           tblptru	equ	0xFF8
 23673                           tblptrh	equ	0xFF7
 23674                           tblptrl	equ	0xFF6
 23675                           tablat	equ	0xFF5
 23676                           prodh	equ	0xFF4
 23677                           prodl	equ	0xFF3
 23678                           intcon	equ	0xFF2
 23679                           intcon2	equ	0xFF1
 23680                           intcon3	equ	0xFF0
 23681                           indf0	equ	0xFEF
 23682                           postinc0	equ	0xFEE
 23683                           fsr0h	equ	0xFEA
 23684                           fsr0l	equ	0xFE9
 23685                           wreg	equ	0xFE8
 23686                           postdec1	equ	0xFE5
 23687                           fsr1h	equ	0xFE2
 23688                           fsr1l	equ	0xFE1
 23689                           indf2	equ	0xFDF
 23690                           postinc2	equ	0xFDE
 23691                           postdec2	equ	0xFDD
 23692                           fsr2h	equ	0xFDA
 23693                           fsr2l	equ	0xFD9
 23694                           status	equ	0xFD8
 23695                           
 23696 ;; *************** function i2_printf *****************
 23697 ;; Defined at:
 23698 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 23699 ;; Parameters:    Size  Location     Type
 23700 ;;  f               2   12[COMRAM] PTR const unsigned char 
 23701 ;;		 -> STR_128(18), STR_127(18), STR_126(17), STR_125(17), 
 23702 ;;		 -> STR_124(15), STR_123(15), STR_122(18), STR_121(15), 
 23703 ;;		 -> STR_120(18), STR_119(18), STR_118(17), STR_117(17), 
 23704 ;;		 -> STR_116(17), STR_115(17), STR_114(17), STR_113(17), 
 23705 ;;		 -> STR_112(18), STR_111(17), STR_110(15), STR_109(15), 
 23706 ;;		 -> STR_108(15), STR_107(17), STR_106(17), STR_105(17), 
 23707 ;;		 -> STR_104(16), STR_103(17), STR_102(17), STR_101(17), 
 23708 ;;		 -> STR_100(17), STR_99(17), STR_98(17), STR_97(15), 
 23709 ;;		 -> STR_96(11), STR_95(17), STR_94(11), STR_93(17), 
 23710 ;;		 -> STR_92(14), STR_91(15), STR_90(14), STR_89(10), 
 23711 ;;		 -> STR_88(9), STR_87(9), STR_86(10), STR_85(10), 
 23712 ;;		 -> STR_84(16), STR_83(15), STR_82(3), STR_81(18), 
 23713 ;;		 -> STR_80(3), STR_79(18), STR_78(14), STR_77(8), 
 23714 ;;		 -> STR_76(14), STR_75(15), STR_74(12), STR_73(14), 
 23715 ;;		 -> STR_72(17), STR_71(14), STR_70(15), STR_69(17), 
 23716 ;;		 -> STR_68(17), STR_67(7), STR_66(21), STR_65(9), 
 23717 ;;		 -> STR_64(14), STR_63(24), STR_50(17), STR_49(17), 
 23718 ;;		 -> STR_48(17), STR_47(17), STR_46(17), STR_45(17), 
 23719 ;;		 -> STR_44(17), STR_43(17), STR_42(17), STR_41(17), 
 23720 ;;		 -> STR_40(17), STR_39(17), STR_38(17), STR_37(17), 
 23721 ;;		 -> STR_36(17), STR_35(17), STR_34(17), STR_33(17), 
 23722 ;;		 -> STR_32(17), STR_31(17), STR_30(17), STR_29(3), 
 23723 ;;		 -> STR_28(17), STR_27(17), STR_26(17), STR_25(17), 
 23724 ;;		 -> STR_24(17), STR_23(14), STR_22(10), STR_21(24), 
 23725 ;;		 -> STR_7(7), STR_6(17), STR_5(18), STR_4(16), 
 23726 ;;		 -> STR_3(18), STR_2(14), STR_1(18), 
 23727 ;; Auto vars:     Size  Location     Type
 23728 ;;  printf          4    0        struct .
 23729 ;;  printf          2   39[COMRAM] int 
 23730 ;;  printf          2   35[COMRAM] unsigned int 
 23731 ;;  printf          2   33[COMRAM] unsigned int 
 23732 ;;  printf          2   31[COMRAM] PTR void [1]
 23733 ;;		 -> ?i2_printf(2), ?_printf(2), 
 23734 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 23735 ;;		 -> STR_129(7), ID@res(4), ID@res1(2), count_total(2), 
 23736 ;;		 -> printRTC@month(4), UI@month(4), 
 23737 ;;  printf          1   38[COMRAM] char 
 23738 ;;  printf          1   37[COMRAM] unsigned char 
 23739 ;;  printf          1   28[COMRAM] char 
 23740 ;; Return value:  Size  Location     Type
 23741 ;;                  2   12[COMRAM] int 
 23742 ;; Registers used:
 23743 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23744 ;; Tracked objects:
 23745 ;;		On entry : 0/0
 23746 ;;		On exit  : 0/0
 23747 ;;		Unchanged: 0/0
 23748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23749 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23750 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23751 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23752 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23753 ;;Total ram usage:       29 bytes
 23754 ;; Hardware stack levels used:    1
 23755 ;; Hardware stack levels required when called:    2
 23756 ;; This function calls:
 23757 ;;		i2___lwdiv
 23758 ;;		i2___lwmod
 23759 ;;		i2___wmul
 23760 ;;		i2_isdigit
 23761 ;;		i2_putch
 23762 ;; This function is called by:
 23763 ;;		_change_state_to_menu_11
 23764 ;;		_change_state_to_menu_23
 23765 ;;		_change_state_to_logs_11
 23766 ;;		_change_state_to_logs_12
 23767 ;;		_change_state_to_logs_22
 23768 ;;		_change_state_to_logs_23
 23769 ;;		_change_state_to_logs_33
 23770 ;;		_change_state_to_logs_34
 23771 ;;		i2_change_state_to_menu_start
 23772 ;;		i2_change_state_to_menu_12
 23773 ;;		i2_change_state_to_menu_22
 23774 ;;		i2_printRTC
 23775 ;; This function uses a non-reentrant model
 23776 ;;
 23777                           
 23778                           	psect	text82
 23779  002A3A                     __ptext82:
 23780                           	opt stack 0
 23781  002A3A                     i2_printf:
 23782                           	opt stack 20
 23783                           
 23784                           ;doprnt.c: 466: va_list ap;
 23785                           ;doprnt.c: 499: signed char c;
 23786                           ;doprnt.c: 501: int width;
 23787                           ;doprnt.c: 506: signed char prec;
 23788                           ;doprnt.c: 508: unsigned char flag;
 23789                           ;doprnt.c: 523: union {
 23790                           ;doprnt.c: 524: unsigned long vd;
 23791                           ;doprnt.c: 525: double integ;
 23792                           ;doprnt.c: 526: } tmpval;
 23793                           ;doprnt.c: 528: unsigned int val;
 23794                           ;doprnt.c: 529: unsigned len;
 23795                           ;doprnt.c: 530: const char * cp;
 23796                           ;doprnt.c: 533: *ap = __va_start();
 23797                           
 23798                           ;incstack = 0
 23799  002A3A  0E0F               	movlw	low (?i2_printf+2)
 23800  002A3C  6E20               	movwf	i2printf@ap,c
 23801  002A3E  0E00               	movlw	high (?i2_printf+2)
 23802  002A40  6E21               	movwf	i2printf@ap+1,c
 23803                           
 23804                           ;doprnt.c: 536: while(c = *f++) {
 23805  002A42  D1A4               	goto	i2l7394
 23806  002A44                     i2l7264:
 23807                           
 23808                           ;doprnt.c: 538: if(c != '%')
 23809  002A44  0E25               	movlw	37
 23810  002A46  1827               	xorwf	i2printf@c,w,c
 23811  002A48  B4D8               	btfsc	status,2,c
 23812  002A4A  D004               	goto	i2l7268
 23813                           
 23814                           ;doprnt.c: 540: {
 23815                           ;doprnt.c: 541: (putch(c) );
 23816  002A4C  5027               	movf	i2printf@c,w,c
 23817  002A4E  EC85  F030         	call	i2_putch
 23818                           
 23819                           ;doprnt.c: 542: continue;
 23820  002A52  D19C               	goto	i2l7394
 23821  002A54                     i2l7268:
 23822                           
 23823                           ;doprnt.c: 543: }
 23824                           ;doprnt.c: 546: width = 0;
 23825  002A54  0E00               	movlw	0
 23826  002A56  6E29               	movwf	i2printf@width+1,c
 23827  002A58  0E00               	movlw	0
 23828  002A5A  6E28               	movwf	i2printf@width,c
 23829                           
 23830                           ;doprnt.c: 548: flag = 0;
 23831  002A5C  0E00               	movlw	0
 23832  002A5E  6E26               	movwf	i2printf@flag,c
 23833                           
 23834                           ;doprnt.c: 551: switch(*f) {
 23835                           
 23836                           ;doprnt.c: 550: for(;;) {
 23837  002A60  D003               	goto	i2l7274
 23838  002A62                     i2l7270:
 23839                           
 23840                           ;doprnt.c: 580: flag |= 0x04;
 23841  002A62  8426               	bsf	i2printf@flag,2,c
 23842                           
 23843                           ;doprnt.c: 581: f++;
 23844  002A64  4A0D               	infsnz	i2printf@f,f,c
 23845  002A66  2A0E               	incf	i2printf@f+1,f,c
 23846  002A68                     i2l7274:
 23847  002A68  C00D  FFF6         	movff	i2printf@f,tblptrl
 23848  002A6C  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 23849  002A70                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 23850  002A70  6AF8               	clrf	tblptru,c
 23851  002A72                     	endif
 23852  002A72                     	if	0	;tblptru may be non-zero
 23853  002A72                     	endif
 23854  002A72  0008               	tblrd		*
 23855  002A74  50F5               	movf	tablat,w,c
 23856                           
 23857                           ; Switch size 1, requested type "space"
 23858                           ; Number of cases is 1, Range of values is 48 to 48
 23859                           ; switch strategies available:
 23860                           ; Name         Instructions Cycles
 23861                           ; simple_byte            4     3 (average)
 23862                           ;	Chosen strategy is simple_byte
 23863  002A76  0A30               	xorlw	48	; case 48
 23864  002A78  B4D8               	btfsc	status,2,c
 23865  002A7A  D7F3               	goto	i2l7270
 23866                           
 23867                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 23868                           
 23869                           ;doprnt.c: 586: }
 23870                           
 23871                           ;doprnt.c: 585: break;
 23872  002A7C  C00D  FFF6         	movff	i2printf@f,tblptrl
 23873  002A80  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 23874  002A84                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 23875  002A84  6AF8               	clrf	tblptru,c
 23876  002A86                     	endif
 23877  002A86                     	if	0	;tblptru may be non-zero
 23878  002A86                     	endif
 23879  002A86  0008               	tblrd		*
 23880  002A88  50F5               	movf	tablat,w,c
 23881  002A8A  EC15  F030         	call	i2_isdigit
 23882  002A8E  A0D8               	btfss	status,0,c
 23883  002A90  D0A6               	goto	i2l7322
 23884                           
 23885                           ;doprnt.c: 598: width = 0;
 23886  002A92  0E00               	movlw	0
 23887  002A94  6E29               	movwf	i2printf@width+1,c
 23888  002A96  0E00               	movlw	0
 23889  002A98  6E28               	movwf	i2printf@width,c
 23890  002A9A                     i2l7280:
 23891                           
 23892                           ;doprnt.c: 600: width *= 10;
 23893  002A9A  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 23894  002A9E  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 23895  002AA2  0E00               	movlw	0
 23896  002AA4  6E04               	movwf	i2___wmul@multiplicand+1,c
 23897  002AA6  0E0A               	movlw	10
 23898  002AA8  6E03               	movwf	i2___wmul@multiplicand,c
 23899  002AAA  ECCE  F02F         	call	i2___wmul	;wreg free
 23900  002AAE  C001  F028         	movff	?i2___wmul,i2printf@width
 23901  002AB2  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 23902                           
 23903                           ;doprnt.c: 601: width += *f++ - '0';
 23904  002AB6  0ED0               	movlw	208
 23905  002AB8  6E19               	movwf	??i2_printf& (0+255),c
 23906  002ABA  0EFF               	movlw	255
 23907  002ABC  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 23908  002ABE  C00D  FFF6         	movff	i2printf@f,tblptrl
 23909  002AC2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 23910  002AC6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 23911  002AC6  6AF8               	clrf	tblptru,c
 23912  002AC8                     	endif
 23913  002AC8                     	if	0	;tblptru may be non-zero
 23914  002AC8                     	endif
 23915  002AC8  0008               	tblrd		*
 23916  002ACA  50F5               	movf	tablat,w,c
 23917  002ACC  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 23918  002ACE  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 23919  002AD0  5019               	movf	??i2_printf,w,c
 23920  002AD2  261B               	addwf	??i2_printf+2,f,c
 23921  002AD4  501A               	movf	??i2_printf+1,w,c
 23922  002AD6  221C               	addwfc	??i2_printf+3,f,c
 23923  002AD8  501B               	movf	??i2_printf+2,w,c
 23924  002ADA  2628               	addwf	i2printf@width,f,c
 23925  002ADC  501C               	movf	??i2_printf+3,w,c
 23926  002ADE  2229               	addwfc	i2printf@width+1,f,c
 23927  002AE0  4A0D               	infsnz	i2printf@f,f,c
 23928  002AE2  2A0E               	incf	i2printf@f+1,f,c
 23929                           
 23930                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 23931  002AE4  C00D  FFF6         	movff	i2printf@f,tblptrl
 23932  002AE8  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 23933  002AEC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 23934  002AEC  6AF8               	clrf	tblptru,c
 23935  002AEE                     	endif
 23936  002AEE                     	if	0	;tblptru may be non-zero
 23937  002AEE                     	endif
 23938  002AEE  0008               	tblrd		*
 23939  002AF0  50F5               	movf	tablat,w,c
 23940  002AF2  EC15  F030         	call	i2_isdigit
 23941  002AF6  A0D8               	btfss	status,0,c
 23942  002AF8  D072               	goto	i2l7322
 23943  002AFA  D7CF               	goto	i2l7280
 23944  002AFC                     i2l7288:
 23945                           
 23946                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 23947  002AFC  C020  FFD9         	movff	i2printf@ap,fsr2l
 23948  002B00  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 23949  002B04  CFDE F01E          	movff	postinc2,i2printf@cp
 23950  002B08  CFDD F01F          	movff	postdec2,i2printf@cp+1
 23951  002B0C  0E02               	movlw	2
 23952  002B0E  2620               	addwf	i2printf@ap,f,c
 23953  002B10  0E00               	movlw	0
 23954  002B12  2221               	addwfc	i2printf@ap+1,f,c
 23955                           
 23956                           ;doprnt.c: 740: if(!cp)
 23957  002B14  501E               	movf	i2printf@cp,w,c
 23958  002B16  101F               	iorwf	i2printf@cp+1,w,c
 23959  002B18  A4D8               	btfss	status,2,c
 23960  002B1A  D004               	goto	i2l7296
 23961                           
 23962                           ;doprnt.c: 741: cp = "(null)";
 23963  002B1C  0EB6               	movlw	low STR_129
 23964  002B1E  6E1E               	movwf	i2printf@cp,c
 23965  002B20  0EFF               	movlw	high STR_129
 23966  002B22  6E1F               	movwf	i2printf@cp+1,c
 23967  002B24                     i2l7296:
 23968                           
 23969                           ;doprnt.c: 745: len = 0;
 23970  002B24  0E00               	movlw	0
 23971  002B26  6E23               	movwf	i2printf@len+1,c
 23972  002B28  0E00               	movlw	0
 23973  002B2A  6E22               	movwf	i2printf@len,c
 23974                           
 23975                           ;doprnt.c: 746: while(cp[len])
 23976  002B2C  D002               	goto	i2l7300
 23977  002B2E                     i2l7298:
 23978                           
 23979                           ;doprnt.c: 747: len++;
 23980  002B2E  4A22               	infsnz	i2printf@len,f,c
 23981  002B30  2A23               	incf	i2printf@len+1,f,c
 23982  002B32                     i2l7300:
 23983  002B32  5022               	movf	i2printf@len,w,c
 23984  002B34  241E               	addwf	i2printf@cp,w,c
 23985  002B36  6E19               	movwf	??i2_printf& (0+255),c
 23986  002B38  5023               	movf	i2printf@len+1,w,c
 23987  002B3A  201F               	addwfc	i2printf@cp+1,w,c
 23988  002B3C  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 23989  002B3E  C019  FFF6         	movff	??i2_printf,tblptrl
 23990  002B42  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 23991  002B46  0E00               	movlw	low (__mediumconst shr (0+16))
 23992  002B48  6EF8               	movwf	tblptru,c
 23993  002B4A  0E0F               	movlw	(high __ramtop+-1)
 23994  002B4C  64F7               	cpfsgt	tblptrh,c
 23995  002B4E  D003               	bra	i2u627_47
 23996  002B50  0008               	tblrd		*
 23997  002B52  50F5               	movf	tablat,w,c
 23998  002B54  D005               	bra	i2u627_40
 23999  002B56                     i2u627_47:
 24000  002B56  CFF6 FFE9          	movff	tblptrl,fsr0l
 24001  002B5A  CFF7 FFEA          	movff	tblptrh,fsr0h
 24002  002B5E  50EF               	movf	indf0,w,c
 24003  002B60                     i2u627_40:
 24004  002B60  0900               	iorlw	0
 24005  002B62  A4D8               	btfss	status,2,c
 24006  002B64  D7E4               	goto	i2l7298
 24007                           
 24008                           ;doprnt.c: 757: if(width > len)
 24009  002B66  5028               	movf	i2printf@width,w,c
 24010  002B68  5C22               	subwf	i2printf@len,w,c
 24011  002B6A  5029               	movf	i2printf@width+1,w,c
 24012  002B6C  5823               	subwfb	i2printf@len+1,w,c
 24013  002B6E  B0D8               	btfsc	status,0,c
 24014  002B70  D005               	goto	i2l7306
 24015                           
 24016                           ;doprnt.c: 758: width -= len;
 24017  002B72  5022               	movf	i2printf@len,w,c
 24018  002B74  5E28               	subwf	i2printf@width,f,c
 24019  002B76  5023               	movf	i2printf@len+1,w,c
 24020  002B78  5A29               	subwfb	i2printf@width+1,f,c
 24021  002B7A  D008               	goto	i2l7310
 24022  002B7C                     i2l7306:
 24023                           
 24024                           ;doprnt.c: 759: else
 24025                           ;doprnt.c: 760: width = 0;
 24026  002B7C  0E00               	movlw	0
 24027  002B7E  6E29               	movwf	i2printf@width+1,c
 24028  002B80  0E00               	movlw	0
 24029  002B82  6E28               	movwf	i2printf@width,c
 24030                           
 24031                           ;doprnt.c: 764: while(width--)
 24032  002B84  D003               	goto	i2l7310
 24033  002B86                     i2l7308:
 24034                           
 24035                           ;doprnt.c: 765: (putch(' ') );
 24036  002B86  0E20               	movlw	32
 24037  002B88  EC85  F030         	call	i2_putch
 24038  002B8C                     i2l7310:
 24039  002B8C  0628               	decf	i2printf@width,f,c
 24040  002B8E  A0D8               	btfss	status,0,c
 24041  002B90  0629               	decf	i2printf@width+1,f,c
 24042  002B92  2828               	incf	i2printf@width,w,c
 24043  002B94  E1F8               	bnz	i2l7308
 24044  002B96  2829               	incf	i2printf@width+1,w,c
 24045  002B98  B4D8               	btfsc	status,2,c
 24046  002B9A  D016               	goto	i2l7316
 24047  002B9C  D7F4               	goto	i2l7308
 24048  002B9E                     i2l7312:
 24049                           
 24050                           ;doprnt.c: 768: (putch(*cp++) );
 24051  002B9E  C01E  FFF6         	movff	i2printf@cp,tblptrl
 24052  002BA2  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 24053  002BA6  0E00               	movlw	low (__mediumconst shr (0+16))
 24054  002BA8  6EF8               	movwf	tblptru,c
 24055  002BAA  0E0F               	movlw	(high __ramtop+-1)
 24056  002BAC  64F7               	cpfsgt	tblptrh,c
 24057  002BAE  D003               	bra	i2u631_47
 24058  002BB0  0008               	tblrd		*
 24059  002BB2  50F5               	movf	tablat,w,c
 24060  002BB4  D005               	bra	i2u631_40
 24061  002BB6                     i2u631_47:
 24062  002BB6  CFF6 FFE9          	movff	tblptrl,fsr0l
 24063  002BBA  CFF7 FFEA          	movff	tblptrh,fsr0h
 24064  002BBE  50EF               	movf	indf0,w,c
 24065  002BC0                     i2u631_40:
 24066  002BC0  EC85  F030         	call	i2_putch
 24067  002BC4  4A1E               	infsnz	i2printf@cp,f,c
 24068  002BC6  2A1F               	incf	i2printf@cp+1,f,c
 24069  002BC8                     i2l7316:
 24070  002BC8  0622               	decf	i2printf@len,f,c
 24071  002BCA  A0D8               	btfss	status,0,c
 24072  002BCC  0623               	decf	i2printf@len+1,f,c
 24073  002BCE  2822               	incf	i2printf@len,w,c
 24074  002BD0  E1E6               	bnz	i2l7312
 24075  002BD2  2823               	incf	i2printf@len+1,w,c
 24076  002BD4  B4D8               	btfsc	status,2,c
 24077  002BD6  D0DA               	goto	i2l7394
 24078  002BD8  D7E2               	goto	i2l7312
 24079  002BDA                     i2l7318:
 24080                           
 24081                           ;doprnt.c: 818: flag |= 0x40;
 24082  002BDA  8C26               	bsf	i2printf@flag,6,c
 24083                           
 24084                           ;doprnt.c: 822: }
 24085                           
 24086                           ;doprnt.c: 819: break;
 24087  002BDC  D01B               	goto	i2l1588
 24088  002BDE                     i2l7322:
 24089  002BDE  C00D  FFF6         	movff	i2printf@f,tblptrl
 24090  002BE2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24091  002BE6  4A0D               	infsnz	i2printf@f,f,c
 24092  002BE8  2A0E               	incf	i2printf@f+1,f,c
 24093  002BEA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24094  002BEA  6AF8               	clrf	tblptru,c
 24095  002BEC                     	endif
 24096  002BEC                     	if	0	;tblptru may be non-zero
 24097  002BEC                     	endif
 24098  002BEC  0008               	tblrd		*
 24099  002BEE  CFF5 F027          	movff	tablat,i2printf@c
 24100  002BF2  5027               	movf	i2printf@c,w,c
 24101                           
 24102                           ; Switch size 1, requested type "space"
 24103                           ; Number of cases is 5, Range of values is 0 to 117
 24104                           ; switch strategies available:
 24105                           ; Name         Instructions Cycles
 24106                           ; simple_byte           16     9 (average)
 24107                           ;	Chosen strategy is simple_byte
 24108  002BF4  0A00               	xorlw	0	; case 0
 24109  002BF6  B4D8               	btfsc	status,2,c
 24110  002BF8  0012               	return	
 24111  002BFA  0A64               	xorlw	100	; case 100
 24112  002BFC  B4D8               	btfsc	status,2,c
 24113  002BFE  D00A               	goto	i2l1588
 24114  002C00  0A0D               	xorlw	13	; case 105
 24115  002C02  B4D8               	btfsc	status,2,c
 24116  002C04  D007               	goto	i2l1588
 24117  002C06  0A1A               	xorlw	26	; case 115
 24118  002C08  B4D8               	btfsc	status,2,c
 24119  002C0A  D778               	goto	i2l7288
 24120  002C0C  0A06               	xorlw	6	; case 117
 24121  002C0E  B4D8               	btfsc	status,2,c
 24122  002C10  D7E4               	goto	i2l7318
 24123  002C12  D0BC               	goto	i2l7394
 24124  002C14                     i2l1588:
 24125                           
 24126                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 24127  002C14  BC26               	btfsc	i2printf@flag,6,c
 24128  002C16  D015               	goto	i2l7334
 24129                           
 24130                           ;doprnt.c: 1253: {
 24131                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 24132  002C18  C020  FFD9         	movff	i2printf@ap,fsr2l
 24133  002C1C  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 24134  002C20  CFDE F024          	movff	postinc2,i2printf@val
 24135  002C24  CFDD F025          	movff	postdec2,i2printf@val+1
 24136  002C28  0E02               	movlw	2
 24137  002C2A  2620               	addwf	i2printf@ap,f,c
 24138  002C2C  0E00               	movlw	0
 24139  002C2E  2221               	addwfc	i2printf@ap+1,f,c
 24140                           
 24141                           ;doprnt.c: 1261: if((int)val < 0) {
 24142  002C30  AE25               	btfss	i2printf@val+1,7,c
 24143  002C32  D013               	goto	i2l7338
 24144                           
 24145                           ;doprnt.c: 1262: flag |= 0x03;
 24146  002C34  0E03               	movlw	3
 24147  002C36  1226               	iorwf	i2printf@flag,f,c
 24148                           
 24149                           ;doprnt.c: 1263: val = -val;
 24150  002C38  6C24               	negf	i2printf@val,c
 24151  002C3A  1E25               	comf	i2printf@val+1,f,c
 24152  002C3C  B0D8               	btfsc	status,0,c
 24153  002C3E  2A25               	incf	i2printf@val+1,f,c
 24154                           
 24155                           ;doprnt.c: 1264: }
 24156                           ;doprnt.c: 1266: }
 24157  002C40  D00C               	goto	i2l7338
 24158  002C42                     i2l7334:
 24159                           
 24160                           ;doprnt.c: 1268: else
 24161                           ;doprnt.c: 1273: {
 24162                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 24163  002C42  C020  FFD9         	movff	i2printf@ap,fsr2l
 24164  002C46  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 24165  002C4A  CFDE F024          	movff	postinc2,i2printf@val
 24166  002C4E  CFDD F025          	movff	postdec2,i2printf@val+1
 24167  002C52  0E02               	movlw	2
 24168  002C54  2620               	addwf	i2printf@ap,f,c
 24169  002C56  0E00               	movlw	0
 24170  002C58  2221               	addwfc	i2printf@ap+1,f,c
 24171  002C5A                     i2l7338:
 24172                           
 24173                           ;doprnt.c: 1287: }
 24174                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 24175  002C5A  0E01               	movlw	1
 24176  002C5C  6E27               	movwf	i2printf@c,c
 24177  002C5E                     i2l7340:
 24178  002C5E  0E05               	movlw	5
 24179  002C60  1827               	xorwf	i2printf@c,w,c
 24180  002C62  B4D8               	btfsc	status,2,c
 24181  002C64  D015               	goto	i2l7352
 24182                           
 24183                           ;doprnt.c: 1306: if(val < dpowers[c])
 24184  002C66  5027               	movf	i2printf@c,w,c
 24185  002C68  0D02               	mullw	2
 24186  002C6A  0EC2               	movlw	low _dpowers
 24187  002C6C  24F3               	addwf	prodl,w,c
 24188  002C6E  6EF6               	movwf	tblptrl,c
 24189  002C70  0EFA               	movlw	high _dpowers
 24190  002C72  20F4               	addwfc	prodh,w,c
 24191  002C74  6EF7               	movwf	tblptrh,c
 24192  002C76                     	if	1	;There are 3 active tblptr bytes
 24193  002C76  6AF8               	clrf	tblptru,c
 24194  002C78  0E00               	movlw	low (__mediumconst shr (0+16))
 24195  002C7A  22F8               	addwfc	tblptru,f,c
 24196  002C7C                     	endif
 24197  002C7C  0009               	tblrd		*+
 24198  002C7E  50F5               	movf	tablat,w,c
 24199  002C80  5C24               	subwf	i2printf@val,w,c
 24200  002C82  0009               	tblrd		*+
 24201  002C84  50F5               	movf	tablat,w,c
 24202  002C86  5825               	subwfb	i2printf@val+1,w,c
 24203  002C88  A0D8               	btfss	status,0,c
 24204  002C8A  D002               	goto	i2l7352
 24205                           
 24206                           ;doprnt.c: 1307: break;
 24207  002C8C  2A27               	incf	i2printf@c,f,c
 24208  002C8E  D7E7               	goto	i2l7340
 24209  002C90                     i2l7352:
 24210                           
 24211                           ;doprnt.c: 1345: if(width && flag & 0x03)
 24212  002C90  5028               	movf	i2printf@width,w,c
 24213  002C92  1029               	iorwf	i2printf@width+1,w,c
 24214  002C94  B4D8               	btfsc	status,2,c
 24215  002C96  D009               	goto	i2l7358
 24216  002C98  C026  F019         	movff	i2printf@flag,??i2_printf
 24217  002C9C  0E03               	movlw	3
 24218  002C9E  1619               	andwf	??i2_printf,f,c
 24219  002CA0  B4D8               	btfsc	status,2,c
 24220  002CA2  D003               	goto	i2l7358
 24221                           
 24222                           ;doprnt.c: 1346: width--;
 24223  002CA4  0628               	decf	i2printf@width,f,c
 24224  002CA6  A0D8               	btfss	status,0,c
 24225  002CA8  0629               	decf	i2printf@width+1,f,c
 24226  002CAA                     i2l7358:
 24227                           
 24228                           ;doprnt.c: 1381: if(width > c)
 24229  002CAA  0E80               	movlw	128
 24230  002CAC  BE27               	btfsc	i2printf@c,7,c
 24231  002CAE  0E7F               	movlw	127
 24232  002CB0  6E19               	movwf	??i2_printf& (0+255),c
 24233  002CB2  5028               	movf	i2printf@width,w,c
 24234  002CB4  5C27               	subwf	i2printf@c,w,c
 24235  002CB6  5029               	movf	i2printf@width+1,w,c
 24236  002CB8  0A80               	xorlw	128
 24237  002CBA  5819               	subwfb	??i2_printf& (0+255),w,c
 24238  002CBC  B0D8               	btfsc	status,0,c
 24239  002CBE  D007               	goto	i2l7362
 24240                           
 24241                           ;doprnt.c: 1382: width -= c;
 24242  002CC0  5027               	movf	i2printf@c,w,c
 24243  002CC2  5E28               	subwf	i2printf@width,f,c
 24244  002CC4  0E00               	movlw	0
 24245  002CC6  BE27               	btfsc	i2printf@c,7,c
 24246  002CC8  0EFF               	movlw	255
 24247  002CCA  5A29               	subwfb	i2printf@width+1,f,c
 24248  002CCC  D004               	goto	i2l7364
 24249  002CCE                     i2l7362:
 24250                           
 24251                           ;doprnt.c: 1383: else
 24252                           ;doprnt.c: 1384: width = 0;
 24253  002CCE  0E00               	movlw	0
 24254  002CD0  6E29               	movwf	i2printf@width+1,c
 24255  002CD2  0E00               	movlw	0
 24256  002CD4  6E28               	movwf	i2printf@width,c
 24257  002CD6                     i2l7364:
 24258                           
 24259                           ;doprnt.c: 1387: if(flag & 0x04) {
 24260  002CD6  A426               	btfss	i2printf@flag,2,c
 24261  002CD8  D014               	goto	i2l7376
 24262                           
 24263                           ;doprnt.c: 1392: if(flag & 0x03)
 24264  002CDA  C026  F019         	movff	i2printf@flag,??i2_printf
 24265  002CDE  0E03               	movlw	3
 24266  002CE0  1619               	andwf	??i2_printf,f,c
 24267  002CE2  B4D8               	btfsc	status,2,c
 24268  002CE4  D003               	goto	i2l7370
 24269                           
 24270                           ;doprnt.c: 1393: (putch('-') );
 24271  002CE6  0E2D               	movlw	45
 24272  002CE8  EC85  F030         	call	i2_putch
 24273  002CEC                     i2l7370:
 24274                           
 24275                           ;doprnt.c: 1415: if(width)
 24276  002CEC  5028               	movf	i2printf@width,w,c
 24277  002CEE  1029               	iorwf	i2printf@width+1,w,c
 24278  002CF0  B4D8               	btfsc	status,2,c
 24279  002CF2  D01E               	goto	i2l7386
 24280                           
 24281                           ;doprnt.c: 1417: (putch('0') );
 24282                           
 24283                           ;doprnt.c: 1416: do
 24284  002CF4  0E30               	movlw	48
 24285  002CF6  EC85  F030         	call	i2_putch
 24286                           
 24287                           ;doprnt.c: 1418: while(--width);
 24288  002CFA  0628               	decf	i2printf@width,f,c
 24289  002CFC  A0D8               	btfss	status,0,c
 24290  002CFE  0629               	decf	i2printf@width+1,f,c
 24291  002D00  D7F5               	goto	i2l7370
 24292  002D02                     i2l7376:
 24293                           
 24294                           ;doprnt.c: 1422: {
 24295                           ;doprnt.c: 1424: if(width
 24296                           ;doprnt.c: 1428: )
 24297  002D02  5028               	movf	i2printf@width,w,c
 24298  002D04  1029               	iorwf	i2printf@width+1,w,c
 24299  002D06  B4D8               	btfsc	status,2,c
 24300  002D08  D00A               	goto	i2l7382
 24301  002D0A                     i2l7378:
 24302                           
 24303                           ;doprnt.c: 1430: (putch(' ') );
 24304  002D0A  0E20               	movlw	32
 24305  002D0C  EC85  F030         	call	i2_putch
 24306                           
 24307                           ;doprnt.c: 1431: while(--width);
 24308  002D10  0628               	decf	i2printf@width,f,c
 24309  002D12  A0D8               	btfss	status,0,c
 24310  002D14  0629               	decf	i2printf@width+1,f,c
 24311  002D16  5028               	movf	i2printf@width,w,c
 24312  002D18  1029               	iorwf	i2printf@width+1,w,c
 24313  002D1A  A4D8               	btfss	status,2,c
 24314  002D1C  D7F6               	goto	i2l7378
 24315  002D1E                     i2l7382:
 24316                           
 24317                           ;doprnt.c: 1438: if(flag & 0x03)
 24318  002D1E  C026  F019         	movff	i2printf@flag,??i2_printf
 24319  002D22  0E03               	movlw	3
 24320  002D24  1619               	andwf	??i2_printf,f,c
 24321  002D26  B4D8               	btfsc	status,2,c
 24322  002D28  D003               	goto	i2l7386
 24323                           
 24324                           ;doprnt.c: 1439: (putch('-') );
 24325  002D2A  0E2D               	movlw	45
 24326  002D2C  EC85  F030         	call	i2_putch
 24327  002D30                     i2l7386:
 24328                           
 24329                           ;doprnt.c: 1469: }
 24330                           ;doprnt.c: 1472: prec = c;
 24331  002D30  C027  F01D         	movff	i2printf@c,i2printf@prec
 24332                           
 24333                           ;doprnt.c: 1474: while(prec--) {
 24334  002D34  D027               	goto	i2l7392
 24335  002D36                     i2l7388:
 24336                           
 24337                           ;doprnt.c: 1478: {
 24338                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 24339  002D36  501D               	movf	i2printf@prec,w,c
 24340  002D38  0D02               	mullw	2
 24341  002D3A  0EC2               	movlw	low _dpowers
 24342  002D3C  24F3               	addwf	prodl,w,c
 24343  002D3E  6EF6               	movwf	tblptrl,c
 24344  002D40  0EFA               	movlw	high _dpowers
 24345  002D42  20F4               	addwfc	prodh,w,c
 24346  002D44  6EF7               	movwf	tblptrh,c
 24347  002D46                     	if	1	;There are 3 active tblptr bytes
 24348  002D46  6AF8               	clrf	tblptru,c
 24349  002D48  0E00               	movlw	low (__mediumconst shr (0+16))
 24350  002D4A  22F8               	addwfc	tblptru,f,c
 24351  002D4C                     	endif
 24352  002D4C  0009               	tblrd		*+
 24353  002D4E  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 24354  002D52  000A               	tblrd		*-
 24355  002D54  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 24356  002D58  C024  F001         	movff	i2printf@val,i2___lwdiv@dividend
 24357  002D5C  C025  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 24358  002D60  EC76  F02C         	call	i2___lwdiv	;wreg free
 24359  002D64  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
 24360  002D68  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 24361  002D6C  0E00               	movlw	0
 24362  002D6E  6E0B               	movwf	i2___lwmod@divisor+1,c
 24363  002D70  0E0A               	movlw	10
 24364  002D72  6E0A               	movwf	i2___lwmod@divisor,c
 24365  002D74  EC57  F02D         	call	i2___lwmod	;wreg free
 24366  002D78  5008               	movf	?i2___lwmod,w,c
 24367  002D7A  0F30               	addlw	48
 24368  002D7C  6E27               	movwf	i2printf@c,c
 24369                           
 24370                           ;doprnt.c: 1523: }
 24371                           ;doprnt.c: 1524: (putch(c) );
 24372  002D7E  5027               	movf	i2printf@c,w,c
 24373  002D80  EC85  F030         	call	i2_putch
 24374  002D84                     i2l7392:
 24375  002D84  061D               	decf	i2printf@prec,f,c
 24376  002D86  281D               	incf	i2printf@prec,w,c
 24377  002D88  A4D8               	btfss	status,2,c
 24378  002D8A  D7D5               	goto	i2l7388
 24379  002D8C                     i2l7394:
 24380  002D8C  C00D  FFF6         	movff	i2printf@f,tblptrl
 24381  002D90  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24382  002D94  4A0D               	infsnz	i2printf@f,f,c
 24383  002D96  2A0E               	incf	i2printf@f+1,f,c
 24384  002D98                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24385  002D98  6AF8               	clrf	tblptru,c
 24386  002D9A                     	endif
 24387  002D9A                     	if	0	;tblptru may be non-zero
 24388  002D9A                     	endif
 24389  002D9A  0008               	tblrd		*
 24390  002D9C  CFF5 F027          	movff	tablat,i2printf@c
 24391  002DA0  5027               	movf	i2printf@c,w,c
 24392  002DA2  B4D8               	btfsc	status,2,c
 24393  002DA4  0012               	return	
 24394  002DA6  D64E               	goto	i2l7264
 24395  002DA8                     __end_ofi2_printf:
 24396                           	opt stack 0
 24397                           pclatu	equ	0xFFB
 24398                           pclath	equ	0xFFA
 24399                           tblptru	equ	0xFF8
 24400                           tblptrh	equ	0xFF7
 24401                           tblptrl	equ	0xFF6
 24402                           tablat	equ	0xFF5
 24403                           prodh	equ	0xFF4
 24404                           prodl	equ	0xFF3
 24405                           intcon	equ	0xFF2
 24406                           intcon2	equ	0xFF1
 24407                           intcon3	equ	0xFF0
 24408                           indf0	equ	0xFEF
 24409                           postinc0	equ	0xFEE
 24410                           fsr0h	equ	0xFEA
 24411                           fsr0l	equ	0xFE9
 24412                           wreg	equ	0xFE8
 24413                           postdec1	equ	0xFE5
 24414                           fsr1h	equ	0xFE2
 24415                           fsr1l	equ	0xFE1
 24416                           indf2	equ	0xFDF
 24417                           postinc2	equ	0xFDE
 24418                           postdec2	equ	0xFDD
 24419                           fsr2h	equ	0xFDA
 24420                           fsr2l	equ	0xFD9
 24421                           status	equ	0xFD8
 24422                           
 24423 ;; *************** function i2_putch *****************
 24424 ;; Defined at:
 24425 ;;		line 20 in file "lcd.c"
 24426 ;; Parameters:    Size  Location     Type
 24427 ;;  data            1    wreg     unsigned char 
 24428 ;; Auto vars:     Size  Location     Type
 24429 ;;  data            1    2[COMRAM] unsigned char 
 24430 ;; Return value:  Size  Location     Type
 24431 ;;                  1    wreg      void 
 24432 ;; Registers used:
 24433 ;;		wreg, status,2, status,0, cstack
 24434 ;; Tracked objects:
 24435 ;;		On entry : 0/0
 24436 ;;		On exit  : 0/0
 24437 ;;		Unchanged: 0/0
 24438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24440 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24442 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24443 ;;Total ram usage:        1 bytes
 24444 ;; Hardware stack levels used:    1
 24445 ;; Hardware stack levels required when called:    1
 24446 ;; This function calls:
 24447 ;;		i2_lcdNibble
 24448 ;; This function is called by:
 24449 ;;		i2_printf
 24450 ;; This function uses a non-reentrant model
 24451 ;;
 24452                           
 24453                           	psect	text83
 24454  00610A                     __ptext83:
 24455                           	opt stack 0
 24456  00610A                     i2_putch:
 24457                           	opt stack 20
 24458                           
 24459                           ;incstack = 0
 24460                           ;i2putch@data stored from wreg
 24461  00610A  6E03               	movwf	i2putch@data,c
 24462                           
 24463                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 24464  00610C  848C               	bsf	3980,2,c	;volatile
 24465                           
 24466                           ;lcd.c: 22: lcdNibble(data);
 24467  00610E  5003               	movf	i2putch@data,w,c
 24468  006110  EC49  F02C         	call	i2_lcdNibble
 24469  006114  0012               	return		;funcret
 24470  006116                     __end_ofi2_putch:
 24471                           	opt stack 0
 24472                           pclatu	equ	0xFFB
 24473                           pclath	equ	0xFFA
 24474                           tblptru	equ	0xFF8
 24475                           tblptrh	equ	0xFF7
 24476                           tblptrl	equ	0xFF6
 24477                           tablat	equ	0xFF5
 24478                           prodh	equ	0xFF4
 24479                           prodl	equ	0xFF3
 24480                           intcon	equ	0xFF2
 24481                           intcon2	equ	0xFF1
 24482                           intcon3	equ	0xFF0
 24483                           indf0	equ	0xFEF
 24484                           postinc0	equ	0xFEE
 24485                           fsr0h	equ	0xFEA
 24486                           fsr0l	equ	0xFE9
 24487                           wreg	equ	0xFE8
 24488                           postdec1	equ	0xFE5
 24489                           fsr1h	equ	0xFE2
 24490                           fsr1l	equ	0xFE1
 24491                           indf2	equ	0xFDF
 24492                           postinc2	equ	0xFDE
 24493                           postdec2	equ	0xFDD
 24494                           fsr2h	equ	0xFDA
 24495                           fsr2l	equ	0xFD9
 24496                           status	equ	0xFD8
 24497                           
 24498 ;; *************** function i2_isdigit *****************
 24499 ;; Defined at:
 24500 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 24501 ;; Parameters:    Size  Location     Type
 24502 ;;  c               1    wreg     unsigned char 
 24503 ;; Auto vars:     Size  Location     Type
 24504 ;;  c               1    2[COMRAM] unsigned char 
 24505 ;; Return value:  Size  Location     Type
 24506 ;;		None               void
 24507 ;; Registers used:
 24508 ;;		wreg, status,2, status,0
 24509 ;; Tracked objects:
 24510 ;;		On entry : 0/0
 24511 ;;		On exit  : 0/0
 24512 ;;		Unchanged: 0/0
 24513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24515 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24516 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24517 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24518 ;;Total ram usage:        3 bytes
 24519 ;; Hardware stack levels used:    1
 24520 ;; This function calls:
 24521 ;;		Nothing
 24522 ;; This function is called by:
 24523 ;;		i2_printf
 24524 ;; This function uses a non-reentrant model
 24525 ;;
 24526                           
 24527                           	psect	text84
 24528  00602A                     __ptext84:
 24529                           	opt stack 0
 24530  00602A                     i2_isdigit:
 24531                           	opt stack 21
 24532                           
 24533                           ;incstack = 0
 24534                           ;i2isdigit@c stored from wreg
 24535  00602A  6E03               	movwf	i2isdigit@c,c
 24536  00602C  0E00               	movlw	0
 24537  00602E  6E02               	movwf	i2_isdigit$2080,c
 24538  006030  0E3A               	movlw	58
 24539  006032  6003               	cpfslt	i2isdigit@c,c
 24540  006034  D005               	goto	i2l6918
 24541  006036  0E2F               	movlw	47
 24542  006038  6403               	cpfsgt	i2isdigit@c,c
 24543  00603A  D002               	goto	i2l6918
 24544  00603C  0E01               	movlw	1
 24545  00603E  6E02               	movwf	i2_isdigit$2080,c
 24546  006040                     i2l6918:
 24547  006040  C002  F001         	movff	i2_isdigit$2080,??i2_isdigit
 24548  006044  3001               	rrcf	??i2_isdigit,w,c
 24549  006046  0012               	return	
 24550  006048                     __end_ofi2_isdigit:
 24551                           	opt stack 0
 24552                           pclatu	equ	0xFFB
 24553                           pclath	equ	0xFFA
 24554                           tblptru	equ	0xFF8
 24555                           tblptrh	equ	0xFF7
 24556                           tblptrl	equ	0xFF6
 24557                           tablat	equ	0xFF5
 24558                           prodh	equ	0xFF4
 24559                           prodl	equ	0xFF3
 24560                           intcon	equ	0xFF2
 24561                           intcon2	equ	0xFF1
 24562                           intcon3	equ	0xFF0
 24563                           indf0	equ	0xFEF
 24564                           postinc0	equ	0xFEE
 24565                           fsr0h	equ	0xFEA
 24566                           fsr0l	equ	0xFE9
 24567                           wreg	equ	0xFE8
 24568                           postdec1	equ	0xFE5
 24569                           fsr1h	equ	0xFE2
 24570                           fsr1l	equ	0xFE1
 24571                           indf2	equ	0xFDF
 24572                           postinc2	equ	0xFDE
 24573                           postdec2	equ	0xFDD
 24574                           fsr2h	equ	0xFDA
 24575                           fsr2l	equ	0xFD9
 24576                           status	equ	0xFD8
 24577                           
 24578 ;; *************** function i2_lcdInst *****************
 24579 ;; Defined at:
 24580 ;;		line 15 in file "lcd.c"
 24581 ;; Parameters:    Size  Location     Type
 24582 ;;  data            1    wreg     unsigned char 
 24583 ;; Auto vars:     Size  Location     Type
 24584 ;;  data            1    2[COMRAM] unsigned char 
 24585 ;; Return value:  Size  Location     Type
 24586 ;;                  1    wreg      void 
 24587 ;; Registers used:
 24588 ;;		wreg, status,2, status,0, cstack
 24589 ;; Tracked objects:
 24590 ;;		On entry : 0/0
 24591 ;;		On exit  : 0/0
 24592 ;;		Unchanged: 0/0
 24593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24595 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24597 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24598 ;;Total ram usage:        1 bytes
 24599 ;; Hardware stack levels used:    1
 24600 ;; Hardware stack levels required when called:    1
 24601 ;; This function calls:
 24602 ;;		i2_lcdNibble
 24603 ;; This function is called by:
 24604 ;;		_change_state_to_menu_11
 24605 ;;		_change_state_to_menu_23
 24606 ;;		_change_state_to_logs_11
 24607 ;;		_change_state_to_logs_12
 24608 ;;		_change_state_to_logs_22
 24609 ;;		_change_state_to_logs_23
 24610 ;;		_change_state_to_logs_33
 24611 ;;		_change_state_to_logs_34
 24612 ;;		i2_change_state_to_menu_start
 24613 ;;		i2_change_state_to_menu_12
 24614 ;;		i2_change_state_to_menu_22
 24615 ;;		i2_printRTC
 24616 ;; This function uses a non-reentrant model
 24617 ;;
 24618                           
 24619                           	psect	text85
 24620  006116                     __ptext85:
 24621                           	opt stack 0
 24622  006116                     i2_lcdInst:
 24623                           	opt stack 20
 24624                           
 24625                           ;incstack = 0
 24626                           ;i2lcdInst@data stored from wreg
 24627  006116  6E03               	movwf	i2lcdInst@data,c
 24628                           
 24629                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 24630  006118  948C               	bcf	3980,2,c	;volatile
 24631                           
 24632                           ;lcd.c: 17: lcdNibble(data);
 24633  00611A  5003               	movf	i2lcdInst@data,w,c
 24634  00611C  EC49  F02C         	call	i2_lcdNibble
 24635  006120  0012               	return		;funcret
 24636  006122                     __end_ofi2_lcdInst:
 24637                           	opt stack 0
 24638                           pclatu	equ	0xFFB
 24639                           pclath	equ	0xFFA
 24640                           tblptru	equ	0xFF8
 24641                           tblptrh	equ	0xFF7
 24642                           tblptrl	equ	0xFF6
 24643                           tablat	equ	0xFF5
 24644                           prodh	equ	0xFF4
 24645                           prodl	equ	0xFF3
 24646                           intcon	equ	0xFF2
 24647                           intcon2	equ	0xFF1
 24648                           intcon3	equ	0xFF0
 24649                           indf0	equ	0xFEF
 24650                           postinc0	equ	0xFEE
 24651                           fsr0h	equ	0xFEA
 24652                           fsr0l	equ	0xFE9
 24653                           wreg	equ	0xFE8
 24654                           postdec1	equ	0xFE5
 24655                           fsr1h	equ	0xFE2
 24656                           fsr1l	equ	0xFE1
 24657                           indf2	equ	0xFDF
 24658                           postinc2	equ	0xFDE
 24659                           postdec2	equ	0xFDD
 24660                           fsr2h	equ	0xFDA
 24661                           fsr2l	equ	0xFD9
 24662                           status	equ	0xFD8
 24663                           
 24664 ;; *************** function i2_lcdNibble *****************
 24665 ;; Defined at:
 24666 ;;		line 25 in file "lcd.c"
 24667 ;; Parameters:    Size  Location     Type
 24668 ;;  data            1    wreg     unsigned char 
 24669 ;; Auto vars:     Size  Location     Type
 24670 ;;  data            1    1[COMRAM] unsigned char 
 24671 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 24672 ;; Return value:  Size  Location     Type
 24673 ;;                  1    wreg      void 
 24674 ;; Registers used:
 24675 ;;		wreg, status,2, status,0
 24676 ;; Tracked objects:
 24677 ;;		On entry : 0/0
 24678 ;;		On exit  : 0/0
 24679 ;;		Unchanged: 0/0
 24680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24682 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24684 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24685 ;;Total ram usage:        2 bytes
 24686 ;; Hardware stack levels used:    1
 24687 ;; This function calls:
 24688 ;;		Nothing
 24689 ;; This function is called by:
 24690 ;;		i2_lcdInst
 24691 ;;		i2_putch
 24692 ;; This function uses a non-reentrant model
 24693 ;;
 24694                           
 24695                           	psect	text86
 24696  005892                     __ptext86:
 24697                           	opt stack 0
 24698  005892                     i2_lcdNibble:
 24699                           	opt stack 20
 24700                           
 24701                           ;incstack = 0
 24702                           ;i2lcdNibble@data stored from wreg
 24703  005892  6E02               	movwf	i2lcdNibble@data,c
 24704                           
 24705                           ;lcd.c: 27: (INTCONbits.GIE = 0);
 24706  005894  9EF2               	bcf	intcon,7,c	;volatile
 24707                           
 24708                           ;lcd.c: 28: char temp = data & 0xF0;
 24709  005896  5002               	movf	i2lcdNibble@data,w,c
 24710  005898  0BF0               	andlw	240
 24711  00589A  6E01               	movwf	i2lcdNibble@temp,c
 24712                           
 24713                           ;lcd.c: 29: LATD = LATD & 0x0F;
 24714  00589C  508C               	movf	3980,w,c	;volatile
 24715  00589E  0B0F               	andlw	15
 24716  0058A0  6E8C               	movwf	3980,c	;volatile
 24717                           
 24718                           ;lcd.c: 30: LATD = temp | LATD;
 24719  0058A2  5001               	movf	i2lcdNibble@temp,w,c
 24720  0058A4  108C               	iorwf	3980,w,c	;volatile
 24721  0058A6  6E8C               	movwf	3980,c	;volatile
 24722                           
 24723                           ;lcd.c: 32: LATDbits.LATD3 = 1;
 24724  0058A8  868C               	bsf	3980,3,c	;volatile
 24725                           
 24726                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
 24727  0058AA  0E42               	movlw	66
 24728  0058AC                     i2u1258_47:
 24729  0058AC  2EE8               	decfsz	wreg,f,c
 24730  0058AE  D7FE               	bra	i2u1258_47
 24731  0058B0  D000               	nop2	
 24732                           
 24733                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 24734  0058B2  968C               	bcf	3980,3,c	;volatile
 24735                           
 24736                           ;lcd.c: 35: _delay((unsigned long)((25)*(32000000/4000000.0)));
 24737  0058B4  0E42               	movlw	66
 24738  0058B6                     i2u1259_47:
 24739  0058B6  2EE8               	decfsz	wreg,f,c
 24740  0058B8  D7FE               	bra	i2u1259_47
 24741  0058BA  D000               	nop2	
 24742                           
 24743                           ;lcd.c: 37: data = data << 4;
 24744  0058BC  3802               	swapf	i2lcdNibble@data,w,c
 24745  0058BE  0BF0               	andlw	240
 24746  0058C0  6E02               	movwf	i2lcdNibble@data,c
 24747                           
 24748                           ;lcd.c: 39: temp = data & 0xF0;
 24749  0058C2  5002               	movf	i2lcdNibble@data,w,c
 24750  0058C4  0BF0               	andlw	240
 24751  0058C6  6E01               	movwf	i2lcdNibble@temp,c
 24752                           
 24753                           ;lcd.c: 40: LATD = LATD & 0x0F;
 24754  0058C8  508C               	movf	3980,w,c	;volatile
 24755  0058CA  0B0F               	andlw	15
 24756  0058CC  6E8C               	movwf	3980,c	;volatile
 24757                           
 24758                           ;lcd.c: 41: LATD = temp | LATD;
 24759  0058CE  5001               	movf	i2lcdNibble@temp,w,c
 24760  0058D0  108C               	iorwf	3980,w,c	;volatile
 24761  0058D2  6E8C               	movwf	3980,c	;volatile
 24762                           
 24763                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 24764  0058D4  868C               	bsf	3980,3,c	;volatile
 24765                           
 24766                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
 24767  0058D6  0E42               	movlw	66
 24768  0058D8                     i2u1260_47:
 24769  0058D8  2EE8               	decfsz	wreg,f,c
 24770  0058DA  D7FE               	bra	i2u1260_47
 24771  0058DC  D000               	nop2	
 24772                           
 24773                           ;lcd.c: 45: LATDbits.LATD3 = 0;
 24774  0058DE  968C               	bcf	3980,3,c	;volatile
 24775                           
 24776                           ;lcd.c: 46: _delay((unsigned long)((25)*(32000000/4000000.0)));
 24777  0058E0  0E42               	movlw	66
 24778  0058E2                     i2u1261_47:
 24779  0058E2  2EE8               	decfsz	wreg,f,c
 24780  0058E4  D7FE               	bra	i2u1261_47
 24781  0058E6  D000               	nop2	
 24782                           
 24783                           ;lcd.c: 47: (INTCONbits.GIE = 1);
 24784  0058E8  8EF2               	bsf	intcon,7,c	;volatile
 24785  0058EA  0012               	return		;funcret
 24786  0058EC                     __end_ofi2_lcdNibble:
 24787                           	opt stack 0
 24788                           pclatu	equ	0xFFB
 24789                           pclath	equ	0xFFA
 24790                           tblptru	equ	0xFF8
 24791                           tblptrh	equ	0xFF7
 24792                           tblptrl	equ	0xFF6
 24793                           tablat	equ	0xFF5
 24794                           prodh	equ	0xFF4
 24795                           prodl	equ	0xFF3
 24796                           intcon	equ	0xFF2
 24797                           intcon2	equ	0xFF1
 24798                           intcon3	equ	0xFF0
 24799                           indf0	equ	0xFEF
 24800                           postinc0	equ	0xFEE
 24801                           fsr0h	equ	0xFEA
 24802                           fsr0l	equ	0xFE9
 24803                           wreg	equ	0xFE8
 24804                           postdec1	equ	0xFE5
 24805                           fsr1h	equ	0xFE2
 24806                           fsr1l	equ	0xFE1
 24807                           indf2	equ	0xFDF
 24808                           postinc2	equ	0xFDE
 24809                           postdec2	equ	0xFDD
 24810                           fsr2h	equ	0xFDA
 24811                           fsr2l	equ	0xFD9
 24812                           status	equ	0xFD8
 24813                           
 24814 ;; *************** function _dispLogs *****************
 24815 ;; Defined at:
 24816 ;;		line 470 in file "UI.c"
 24817 ;; Parameters:    Size  Location     Type
 24818 ;;  myLog           2   17[COMRAM] int 
 24819 ;; Auto vars:     Size  Location     Type
 24820 ;;		None
 24821 ;; Return value:  Size  Location     Type
 24822 ;;                  1    wreg      void 
 24823 ;; Registers used:
 24824 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 24825 ;; Tracked objects:
 24826 ;;		On entry : 0/0
 24827 ;;		On exit  : 0/0
 24828 ;;		Unchanged: 0/0
 24829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24830 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24833 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24834 ;;Total ram usage:        2 bytes
 24835 ;; Hardware stack levels used:    1
 24836 ;; Hardware stack levels required when called:    2
 24837 ;; This function calls:
 24838 ;;		_retrieveLog
 24839 ;; This function is called by:
 24840 ;;		_updateMenu
 24841 ;; This function uses a non-reentrant model
 24842 ;;
 24843                           
 24844                           	psect	text87
 24845  005FC2                     __ptext87:
 24846                           	opt stack 0
 24847  005FC2                     _dispLogs:
 24848                           	opt stack 20
 24849                           
 24850                           ;UI.c: 471: logstate = 1;
 24851                           
 24852                           ;incstack = 0
 24853  005FC2  0E00               	movlw	0
 24854  005FC4  0100               	movlb	0	; () banked
 24855  005FC6  6FF9               	movwf	(_logstate+1)& (0+255),b
 24856  005FC8  0E01               	movlw	1
 24857  005FCA  6FF8               	movwf	_logstate& (0+255),b
 24858                           
 24859                           ; BSR set to: 0
 24860                           ;UI.c: 472: log = myLog;
 24861  005FCC  C012  F0F0         	movff	dispLogs@myLog,_log
 24862  005FD0  C013  F0F1         	movff	dispLogs@myLog+1,_log+1
 24863                           
 24864                           ; BSR set to: 0
 24865                           ;UI.c: 473: retrieveLog(myLog - 1);
 24866  005FD4  0EFF               	movlw	255
 24867  005FD6  2412               	addwf	dispLogs@myLog,w,c
 24868  005FD8  6E07               	movwf	retrieveLog@logNum,c
 24869  005FDA  0EFF               	movlw	255
 24870  005FDC  2013               	addwfc	dispLogs@myLog+1,w,c
 24871  005FDE  6E08               	movwf	retrieveLog@logNum+1,c
 24872  005FE0  EC36  F022         	call	_retrieveLog	;wreg free
 24873  005FE4  0012               	return		;funcret
 24874  005FE6                     __end_of_dispLogs:
 24875                           	opt stack 0
 24876                           pclatu	equ	0xFFB
 24877                           pclath	equ	0xFFA
 24878                           tblptru	equ	0xFF8
 24879                           tblptrh	equ	0xFF7
 24880                           tblptrl	equ	0xFF6
 24881                           tablat	equ	0xFF5
 24882                           prodh	equ	0xFF4
 24883                           prodl	equ	0xFF3
 24884                           intcon	equ	0xFF2
 24885                           intcon2	equ	0xFF1
 24886                           intcon3	equ	0xFF0
 24887                           indf0	equ	0xFEF
 24888                           postinc0	equ	0xFEE
 24889                           fsr0h	equ	0xFEA
 24890                           fsr0l	equ	0xFE9
 24891                           wreg	equ	0xFE8
 24892                           postdec1	equ	0xFE5
 24893                           fsr1h	equ	0xFE2
 24894                           fsr1l	equ	0xFE1
 24895                           indf2	equ	0xFDF
 24896                           postinc2	equ	0xFDE
 24897                           postdec2	equ	0xFDD
 24898                           fsr2h	equ	0xFDA
 24899                           fsr2l	equ	0xFD9
 24900                           status	equ	0xFD8
 24901                           
 24902 ;; *************** function _retrieveLog *****************
 24903 ;; Defined at:
 24904 ;;		line 138 in file "EEPROM.c"
 24905 ;; Parameters:    Size  Location     Type
 24906 ;;  logNum          2    6[COMRAM] int 
 24907 ;; Auto vars:     Size  Location     Type
 24908 ;;  i               2   13[COMRAM] int 
 24909 ;;  addr            2   15[COMRAM] unsigned short 
 24910 ;;  byte3           1   12[COMRAM] unsigned char 
 24911 ;;  byte2           1   11[COMRAM] unsigned char 
 24912 ;;  byte1           1   10[COMRAM] unsigned char 
 24913 ;; Return value:  Size  Location     Type
 24914 ;;                  1    wreg      void 
 24915 ;; Registers used:
 24916 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 24917 ;; Tracked objects:
 24918 ;;		On entry : 0/0
 24919 ;;		On exit  : 0/0
 24920 ;;		Unchanged: 0/0
 24921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24922 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24923 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24924 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24925 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24926 ;;Total ram usage:       11 bytes
 24927 ;; Hardware stack levels used:    1
 24928 ;; Hardware stack levels required when called:    1
 24929 ;; This function calls:
 24930 ;;		i2_EEPROM_read
 24931 ;;		i2___wmul
 24932 ;; This function is called by:
 24933 ;;		_dispLogs
 24934 ;; This function uses a non-reentrant model
 24935 ;;
 24936                           
 24937                           	psect	text88
 24938  00446C                     __ptext88:
 24939                           	opt stack 0
 24940  00446C                     _retrieveLog:
 24941                           	opt stack 20
 24942                           
 24943                           ;EEPROM.c: 144: unsigned short addr = 1 + logNum * 11;
 24944                           
 24945                           ;incstack = 0
 24946  00446C  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 24947  004470  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 24948  004474  0E00               	movlw	0
 24949  004476  6E04               	movwf	i2___wmul@multiplicand+1,c
 24950  004478  0E0B               	movlw	11
 24951  00447A  6E03               	movwf	i2___wmul@multiplicand,c
 24952  00447C  ECCE  F02F         	call	i2___wmul	;wreg free
 24953  004480  0E01               	movlw	1
 24954  004482  2401               	addwf	?i2___wmul,w,c
 24955  004484  6E10               	movwf	retrieveLog@addr,c
 24956  004486  0E00               	movlw	0
 24957  004488  2002               	addwfc	?i2___wmul+1,w,c
 24958  00448A  6E11               	movwf	retrieveLog@addr+1,c
 24959                           
 24960                           ;EEPROM.c: 147: unsigned char byte1 = EEPROM_read(addr);
 24961  00448C  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 24962  004490  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 24963  004494  EC57  F030         	call	i2_EEPROM_read	;wreg free
 24964  004498  6E0B               	movwf	retrieveLog@byte1,c
 24965                           
 24966                           ;EEPROM.c: 148: log_completion = (int)(byte1 & 0b10000000);
 24967  00449A  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 24968  00449E  0E80               	movlw	128
 24969  0044A0  1609               	andwf	??_retrieveLog,f,c
 24970  0044A2  5009               	movf	??_retrieveLog,w,c
 24971  0044A4  0100               	movlb	0	; () banked
 24972  0044A6  6FF2               	movwf	_log_completion& (0+255),b
 24973  0044A8  6BF3               	clrf	(_log_completion+1)& (0+255),b
 24974                           
 24975                           ; BSR set to: 0
 24976                           ;EEPROM.c: 149: log_count_total = (int)(byte1 & 0b00001111);
 24977  0044AA  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 24978  0044AE  0E0F               	movlw	15
 24979  0044B0  1609               	andwf	??_retrieveLog,f,c
 24980  0044B2  5009               	movf	??_retrieveLog,w,c
 24981  0044B4  0101               	movlb	1	; () banked
 24982  0044B6  6F41               	movwf	_log_count_total& (0+255),b
 24983  0044B8  6B42               	clrf	(_log_count_total+1)& (0+255),b
 24984                           
 24985                           ; BSR set to: 1
 24986                           ;EEPROM.c: 150: addr++;
 24987  0044BA  4A10               	infsnz	retrieveLog@addr,f,c
 24988  0044BC  2A11               	incf	retrieveLog@addr+1,f,c
 24989                           
 24990                           ; BSR set to: 1
 24991                           ;EEPROM.c: 153: unsigned char byte2 = EEPROM_read(addr);
 24992  0044BE  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 24993  0044C2  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 24994  0044C6  EC57  F030         	call	i2_EEPROM_read	;wreg free
 24995  0044CA  6E0C               	movwf	retrieveLog@byte2,c
 24996                           
 24997                           ;EEPROM.c: 154: log_count_pop_no_tab = (int)((byte2 & 0b11110000)>> 4);
 24998  0044CC  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 24999  0044D0  3A09               	swapf	??_retrieveLog,f,c
 25000  0044D2  0E0F               	movlw	15
 25001  0044D4  1609               	andwf	??_retrieveLog,f,c
 25002  0044D6  0E0F               	movlw	15
 25003  0044D8  1609               	andwf	??_retrieveLog,f,c
 25004  0044DA  5009               	movf	??_retrieveLog,w,c
 25005  0044DC  0100               	movlb	0	; () banked
 25006  0044DE  6FF4               	movwf	_log_count_pop_no_tab& (0+255),b
 25007  0044E0  6BF5               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 25008                           
 25009                           ; BSR set to: 0
 25010                           ;EEPROM.c: 155: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 25011  0044E2  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 25012  0044E6  0E0F               	movlw	15
 25013  0044E8  1609               	andwf	??_retrieveLog,f,c
 25014  0044EA  5009               	movf	??_retrieveLog,w,c
 25015  0044EC  6E69               	movwf	_log_count_pop_w_tab,c
 25016  0044EE  6A6A               	clrf	_log_count_pop_w_tab+1,c
 25017                           
 25018                           ; BSR set to: 0
 25019                           ;EEPROM.c: 156: addr++;
 25020  0044F0  4A10               	infsnz	retrieveLog@addr,f,c
 25021  0044F2  2A11               	incf	retrieveLog@addr+1,f,c
 25022                           
 25023                           ; BSR set to: 0
 25024                           ;EEPROM.c: 157: unsigned char byte3 = EEPROM_read(addr);
 25025  0044F4  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 25026  0044F8  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 25027  0044FC  EC57  F030         	call	i2_EEPROM_read	;wreg free
 25028  004500  6E0D               	movwf	retrieveLog@byte3,c
 25029                           
 25030                           ;EEPROM.c: 158: log_count_can_w_lab = (int)((byte3 & 0b11110000)>> 4);
 25031  004502  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 25032  004506  3A09               	swapf	??_retrieveLog,f,c
 25033  004508  0E0F               	movlw	15
 25034  00450A  1609               	andwf	??_retrieveLog,f,c
 25035  00450C  0E0F               	movlw	15
 25036  00450E  1609               	andwf	??_retrieveLog,f,c
 25037  004510  5009               	movf	??_retrieveLog,w,c
 25038  004512  0101               	movlb	1	; () banked
 25039  004514  6F3F               	movwf	_log_count_can_w_lab& (0+255),b
 25040  004516  6B40               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 25041                           
 25042                           ; BSR set to: 1
 25043                           ;EEPROM.c: 159: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 25044  004518  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 25045  00451C  0E0F               	movlw	15
 25046  00451E  1609               	andwf	??_retrieveLog,f,c
 25047  004520  5009               	movf	??_retrieveLog,w,c
 25048  004522  6E67               	movwf	_log_count_can_no_lab,c
 25049  004524  6A68               	clrf	_log_count_can_no_lab+1,c
 25050                           
 25051                           ; BSR set to: 1
 25052                           ;EEPROM.c: 160: addr++;
 25053  004526  4A10               	infsnz	retrieveLog@addr,f,c
 25054  004528  2A11               	incf	retrieveLog@addr+1,f,c
 25055                           
 25056                           ; BSR set to: 1
 25057                           ;EEPROM.c: 163: for(int i = 0; i < 7; i++){
 25058  00452A  0E00               	movlw	0
 25059  00452C  6E0F               	movwf	retrieveLog@i+1,c
 25060  00452E  0E00               	movlw	0
 25061  004530  6E0E               	movwf	retrieveLog@i,c
 25062  004532                     i2l7576:
 25063                           
 25064                           ; BSR set to: 1
 25065  004532  BE0F               	btfsc	retrieveLog@i+1,7,c
 25066  004534  D006               	goto	i2l7580
 25067  004536  500F               	movf	retrieveLog@i+1,w,c
 25068  004538  E11E               	bnz	i2l7588
 25069  00453A  0E07               	movlw	7
 25070  00453C  5C0E               	subwf	retrieveLog@i,w,c
 25071  00453E  B0D8               	btfsc	status,0,c
 25072  004540  D01A               	goto	i2l7588
 25073  004542                     i2l7580:
 25074                           
 25075                           ;EEPROM.c: 164: log_startTime[i] = (int)EEPROM_read(addr);
 25076  004542  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 25077  004546  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 25078  00454A  EC57  F030         	call	i2_EEPROM_read	;wreg free
 25079  00454E  6E09               	movwf	??_retrieveLog& (0+255),c
 25080  004550  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 25081  004552  90D8               	bcf	status,0,c
 25082  004554  340E               	rlcf	retrieveLog@i,w,c
 25083  004556  6ED9               	movwf	fsr2l,c
 25084  004558  340F               	rlcf	retrieveLog@i+1,w,c
 25085  00455A  6EDA               	movwf	fsr2h,c
 25086  00455C  0E00               	movlw	low _log_startTime
 25087  00455E  26D9               	addwf	fsr2l,f,c
 25088  004560  0E01               	movlw	high _log_startTime
 25089  004562  22DA               	addwfc	fsr2h,f,c
 25090  004564  C009  FFDE         	movff	??_retrieveLog,postinc2
 25091  004568  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 25092                           
 25093                           ;EEPROM.c: 165: addr++;
 25094  00456C  4A10               	infsnz	retrieveLog@addr,f,c
 25095  00456E  2A11               	incf	retrieveLog@addr+1,f,c
 25096  004570  4A0E               	infsnz	retrieveLog@i,f,c
 25097  004572  2A0F               	incf	retrieveLog@i+1,f,c
 25098  004574  D7DE               	goto	i2l7576
 25099  004576                     i2l7588:
 25100                           
 25101                           ;EEPROM.c: 166: }
 25102                           ;EEPROM.c: 169: log_total_time = (int)EEPROM_read(addr);
 25103  004576  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 25104  00457A  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 25105  00457E  EC57  F030         	call	i2_EEPROM_read	;wreg free
 25106  004582  6E09               	movwf	??_retrieveLog& (0+255),c
 25107  004584  5009               	movf	??_retrieveLog,w,c
 25108  004586  0100               	movlb	0	; () banked
 25109  004588  6FF6               	movwf	_log_total_time& (0+255),b
 25110  00458A  6BF7               	clrf	(_log_total_time+1)& (0+255),b
 25111                           
 25112                           ; BSR set to: 0
 25113  00458C  0012               	return		;funcret
 25114  00458E                     __end_of_retrieveLog:
 25115                           	opt stack 0
 25116                           pclatu	equ	0xFFB
 25117                           pclath	equ	0xFFA
 25118                           tblptru	equ	0xFF8
 25119                           tblptrh	equ	0xFF7
 25120                           tblptrl	equ	0xFF6
 25121                           tablat	equ	0xFF5
 25122                           prodh	equ	0xFF4
 25123                           prodl	equ	0xFF3
 25124                           intcon	equ	0xFF2
 25125                           intcon2	equ	0xFF1
 25126                           intcon3	equ	0xFF0
 25127                           indf0	equ	0xFEF
 25128                           postinc0	equ	0xFEE
 25129                           fsr0h	equ	0xFEA
 25130                           fsr0l	equ	0xFE9
 25131                           wreg	equ	0xFE8
 25132                           postdec1	equ	0xFE5
 25133                           fsr1h	equ	0xFE2
 25134                           fsr1l	equ	0xFE1
 25135                           indf2	equ	0xFDF
 25136                           postinc2	equ	0xFDE
 25137                           postdec2	equ	0xFDD
 25138                           fsr2h	equ	0xFDA
 25139                           fsr2l	equ	0xFD9
 25140                           status	equ	0xFD8
 25141                           
 25142 ;; *************** function i2_EEPROM_read *****************
 25143 ;; Defined at:
 25144 ;;		line 72 in file "EEPROM.c"
 25145 ;; Parameters:    Size  Location     Type
 25146 ;;  address         2    0[COMRAM] unsigned short 
 25147 ;; Auto vars:     Size  Location     Type
 25148 ;;		None
 25149 ;; Return value:  Size  Location     Type
 25150 ;;                  1    wreg      unsigned char 
 25151 ;; Registers used:
 25152 ;;		wreg, status,2
 25153 ;; Tracked objects:
 25154 ;;		On entry : 0/0
 25155 ;;		On exit  : 0/0
 25156 ;;		Unchanged: 0/0
 25157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25158 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25161 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25162 ;;Total ram usage:        2 bytes
 25163 ;; Hardware stack levels used:    1
 25164 ;; This function calls:
 25165 ;;		Nothing
 25166 ;; This function is called by:
 25167 ;;		_retrieveLog
 25168 ;; This function uses a non-reentrant model
 25169 ;;
 25170                           
 25171                           	psect	text89
 25172  0060AE                     __ptext89:
 25173                           	opt stack 0
 25174  0060AE                     i2_EEPROM_read:
 25175                           	opt stack 20
 25176                           
 25177                           ;EEPROM.c: 74: EEADRH = (unsigned char)(address >> 8);
 25178                           
 25179                           ; BSR set to: 0
 25180                           ;incstack = 0
 25181  0060AE  5002               	movf	i2EEPROM_read@address+1,w,c
 25182  0060B0  6EAA               	movwf	4010,c	;volatile
 25183                           
 25184                           ;EEPROM.c: 75: EEADR = (unsigned char)address;
 25185  0060B2  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 25186                           
 25187                           ;EEPROM.c: 77: EECON1bits.EEPGD = 0;
 25188  0060B6  9EA6               	bcf	4006,7,c	;volatile
 25189                           
 25190                           ;EEPROM.c: 78: EECON1bits.CFGS = 0;
 25191  0060B8  9CA6               	bcf	4006,6,c	;volatile
 25192                           
 25193                           ;EEPROM.c: 79: EECON1bits.RD = 1;
 25194  0060BA  80A6               	bsf	4006,0,c	;volatile
 25195  0060BC                     i2l1180:
 25196  0060BC  B0A6               	btfsc	4006,0,c	;volatile
 25197  0060BE  D7FE               	goto	i2l1180
 25198                           
 25199                           ;EEPROM.c: 85: return EEDATA;
 25200  0060C0  50A8               	movf	4008,w,c	;volatile
 25201  0060C2  0012               	return	
 25202  0060C4                     __end_ofi2_EEPROM_read:
 25203                           	opt stack 0
 25204                           pclatu	equ	0xFFB
 25205                           pclath	equ	0xFFA
 25206                           tblptru	equ	0xFF8
 25207                           tblptrh	equ	0xFF7
 25208                           tblptrl	equ	0xFF6
 25209                           tablat	equ	0xFF5
 25210                           prodh	equ	0xFF4
 25211                           prodl	equ	0xFF3
 25212                           intcon	equ	0xFF2
 25213                           intcon2	equ	0xFF1
 25214                           intcon3	equ	0xFF0
 25215                           indf0	equ	0xFEF
 25216                           postinc0	equ	0xFEE
 25217                           fsr0h	equ	0xFEA
 25218                           fsr0l	equ	0xFE9
 25219                           wreg	equ	0xFE8
 25220                           postdec1	equ	0xFE5
 25221                           fsr1h	equ	0xFE2
 25222                           fsr1l	equ	0xFE1
 25223                           indf2	equ	0xFDF
 25224                           postinc2	equ	0xFDE
 25225                           postdec2	equ	0xFDD
 25226                           fsr2h	equ	0xFDA
 25227                           fsr2l	equ	0xFD9
 25228                           status	equ	0xFD8
 25229                           
 25230 ;; *************** function _updateArmState *****************
 25231 ;; Defined at:
 25232 ;;		line 726 in file "sort.c"
 25233 ;; Parameters:    Size  Location     Type
 25234 ;;		None
 25235 ;; Auto vars:     Size  Location     Type
 25236 ;;		None
 25237 ;; Return value:  Size  Location     Type
 25238 ;;                  1    wreg      void 
 25239 ;; Registers used:
 25240 ;;		wreg, status,2, status,0
 25241 ;; Tracked objects:
 25242 ;;		On entry : 0/0
 25243 ;;		On exit  : 0/0
 25244 ;;		Unchanged: 0/0
 25245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25247 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25248 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25249 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25250 ;;Total ram usage:        2 bytes
 25251 ;; Hardware stack levels used:    1
 25252 ;; This function calls:
 25253 ;;		Nothing
 25254 ;; This function is called by:
 25255 ;;		_handler
 25256 ;; This function uses a non-reentrant model
 25257 ;;
 25258                           
 25259                           	psect	text90
 25260  005AF0                     __ptext90:
 25261                           	opt stack 0
 25262  005AF0                     _updateArmState:
 25263                           	opt stack 23
 25264                           
 25265                           ;sort.c: 733: if(!was_low_2){
 25266                           
 25267                           ;incstack = 0
 25268  005AF0  5079               	movf	_was_low_2,w,c	;volatile
 25269  005AF2  107A               	iorwf	_was_low_2+1,w,c	;volatile
 25270  005AF4  B4D8               	btfsc	status,2,c
 25271  005AF6  D007               	goto	i2l10590
 25272  005AF8  D016               	goto	i2l996
 25273  005AFA                     i2l10584:
 25274                           
 25275                           ;sort.c: 738: PR2 = 0x20;
 25276  005AFA  0E20               	movlw	32
 25277  005AFC  6ECB               	movwf	4043,c	;volatile
 25278                           
 25279                           ;sort.c: 739: break;
 25280  005AFE  0012               	return	
 25281  005B00                     i2l10586:
 25282                           
 25283                           ;sort.c: 742: PR2 = 0x40;
 25284  005B00  0E40               	movlw	64
 25285  005B02  6ECB               	movwf	4043,c	;volatile
 25286                           
 25287                           ;sort.c: 744: }
 25288                           
 25289                           ;sort.c: 743: break;
 25290  005B04  0012               	return	
 25291  005B06                     i2l10590:
 25292  005B06  C0EA  F001         	movff	_f_arm_position,??_updateArmState	;volatile
 25293  005B0A  C0EB  F002         	movff	_f_arm_position+1,??_updateArmState+1	;volatile
 25294                           
 25295                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 25296                           ; Switch size 1, requested type "space"
 25297                           ; Number of cases is 1, Range of values is 0 to 0
 25298                           ; switch strategies available:
 25299                           ; Name         Instructions Cycles
 25300                           ; simple_byte            4     3 (average)
 25301                           ;	Chosen strategy is simple_byte
 25302  005B0E  5002               	movf	??_updateArmState+1,w,c
 25303  005B10  0A00               	xorlw	0	; case 0
 25304  005B12  A4D8               	btfss	status,2,c
 25305  005B14  0012               	return	
 25306                           
 25307                           ; Switch size 1, requested type "space"
 25308                           ; Number of cases is 2, Range of values is 0 to 1
 25309                           ; switch strategies available:
 25310                           ; Name         Instructions Cycles
 25311                           ; simple_byte            7     4 (average)
 25312                           ;	Chosen strategy is simple_byte
 25313  005B16  5001               	movf	??_updateArmState,w,c
 25314  005B18  0A00               	xorlw	0	; case 0
 25315  005B1A  B4D8               	btfsc	status,2,c
 25316  005B1C  D7EE               	goto	i2l10584
 25317  005B1E  0A01               	xorlw	1	; case 1
 25318  005B20  A4D8               	btfss	status,2,c
 25319                           
 25320                           ;sort.c: 745: }
 25321  005B22  0012               	return	
 25322  005B24  D7ED               	goto	i2l10586
 25323  005B26                     i2l996:
 25324                           
 25325                           ;sort.c: 746: else{
 25326                           ;sort.c: 748: PR2 = 0xFF;
 25327  005B26  68CB               	setf	4043,c	;volatile
 25328  005B28  0012               	return	
 25329  005B2A                     __end_of_updateArmState:
 25330                           	opt stack 0
 25331                           pclatu	equ	0xFFB
 25332                           pclath	equ	0xFFA
 25333                           tblptru	equ	0xFF8
 25334                           tblptrh	equ	0xFF7
 25335                           tblptrl	equ	0xFF6
 25336                           tablat	equ	0xFF5
 25337                           prodh	equ	0xFF4
 25338                           prodl	equ	0xFF3
 25339                           intcon	equ	0xFF2
 25340                           intcon2	equ	0xFF1
 25341                           intcon3	equ	0xFF0
 25342                           indf0	equ	0xFEF
 25343                           postinc0	equ	0xFEE
 25344                           fsr0h	equ	0xFEA
 25345                           fsr0l	equ	0xFE9
 25346                           wreg	equ	0xFE8
 25347                           postdec1	equ	0xFE5
 25348                           fsr1h	equ	0xFE2
 25349                           fsr1l	equ	0xFE1
 25350                           indf2	equ	0xFDF
 25351                           postinc2	equ	0xFDE
 25352                           postdec2	equ	0xFDD
 25353                           fsr2h	equ	0xFDA
 25354                           fsr2l	equ	0xFD9
 25355                           status	equ	0xFD8
 25356                           
 25357 ;; *************** function _printSortTimer *****************
 25358 ;; Defined at:
 25359 ;;		line 542 in file "sort.c"
 25360 ;; Parameters:    Size  Location     Type
 25361 ;;		None
 25362 ;; Auto vars:     Size  Location     Type
 25363 ;;  i               2   41[COMRAM] int 
 25364 ;;  i               2   43[COMRAM] int 
 25365 ;;  curTime        14   19[COMRAM] int [7]
 25366 ;;  timeDiff        2   39[COMRAM] unsigned int 
 25367 ;;  cur_sec         2   35[COMRAM] unsigned int 
 25368 ;;  start_sec       2   33[COMRAM] unsigned int 
 25369 ;;  sec             2   17[COMRAM] int 
 25370 ;;  min             2   15[COMRAM] int 
 25371 ;; Return value:  Size  Location     Type
 25372 ;;                  1    wreg      void 
 25373 ;; Registers used:
 25374 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25375 ;; Tracked objects:
 25376 ;;		On entry : 0/0
 25377 ;;		On exit  : 0/0
 25378 ;;		Unchanged: 0/0
 25379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25381 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25382 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25383 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25384 ;;Total ram usage:       33 bytes
 25385 ;; Hardware stack levels used:    1
 25386 ;; Hardware stack levels required when called:    3
 25387 ;; This function calls:
 25388 ;;		i2___awmod
 25389 ;;		i2___lwdiv
 25390 ;;		i2___lwmod
 25391 ;;		i2___wmul
 25392 ;;		i2_delay_ms
 25393 ;;		i2_getRTC
 25394 ;; This function is called by:
 25395 ;;		_handler
 25396 ;; This function uses a non-reentrant model
 25397 ;;
 25398                           
 25399                           	psect	text91
 25400  002DA8                     __ptext91:
 25401                           	opt stack 0
 25402  002DA8                     _printSortTimer:
 25403                           	opt stack 20
 25404                           
 25405                           ;sort.c: 543: getRTC();
 25406                           
 25407                           ;incstack = 0
 25408  002DA8  ECAD  F02A         	call	i2_getRTC	;wreg free
 25409                           
 25410                           ;sort.c: 544: int curTime[7];
 25411                           ;sort.c: 545: for(int i = 0; i < 7; i++){
 25412  002DAC  0E00               	movlw	0
 25413  002DAE  6E2D               	movwf	printSortTimer@i+1,c
 25414  002DB0  0E00               	movlw	0
 25415  002DB2  6E2C               	movwf	printSortTimer@i,c
 25416  002DB4                     i2l10398:
 25417  002DB4  BE2D               	btfsc	printSortTimer@i+1,7,c
 25418  002DB6  D006               	goto	i2l10402
 25419  002DB8  502D               	movf	printSortTimer@i+1,w,c
 25420  002DBA  E131               	bnz	i2l10408
 25421  002DBC  0E07               	movlw	7
 25422  002DBE  5C2C               	subwf	printSortTimer@i,w,c
 25423  002DC0  B0D8               	btfsc	status,0,c
 25424  002DC2  D02D               	goto	i2l10408
 25425  002DC4                     i2l10402:
 25426                           
 25427                           ;sort.c: 546: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 25428  002DC4  0E1C               	movlw	low _time
 25429  002DC6  242C               	addwf	printSortTimer@i,w,c
 25430  002DC8  6ED9               	movwf	fsr2l,c
 25431  002DCA  0E01               	movlw	high _time
 25432  002DCC  202D               	addwfc	printSortTimer@i+1,w,c
 25433  002DCE  6EDA               	movwf	fsr2h,c
 25434  002DD0  50DF               	movf	indf2,w,c
 25435  002DD2  6E0D               	movwf	??_printSortTimer& (0+255),c
 25436  002DD4  3A0D               	swapf	??_printSortTimer,f,c
 25437  002DD6  0E0F               	movlw	15
 25438  002DD8  160D               	andwf	??_printSortTimer,f,c
 25439  002DDA  0E0F               	movlw	15
 25440  002DDC  160D               	andwf	??_printSortTimer,f,c
 25441  002DDE  500D               	movf	??_printSortTimer,w,c
 25442  002DE0  0D0A               	mullw	10
 25443  002DE2  0E1C               	movlw	low _time
 25444  002DE4  242C               	addwf	printSortTimer@i,w,c
 25445  002DE6  6ED9               	movwf	fsr2l,c
 25446  002DE8  0E01               	movlw	high _time
 25447  002DEA  202D               	addwfc	printSortTimer@i+1,w,c
 25448  002DEC  6EDA               	movwf	fsr2h,c
 25449  002DEE  50DF               	movf	indf2,w,c
 25450  002DF0  0B0F               	andlw	15
 25451  002DF2  6E0E               	movwf	(??_printSortTimer+1)& (0+255),c
 25452  002DF4  6A0F               	clrf	(??_printSortTimer+2)& (0+255),c
 25453  002DF6  50F3               	movf	prodl,w,c
 25454  002DF8  260E               	addwf	??_printSortTimer+1,f,c
 25455  002DFA  50F4               	movf	prodh,w,c
 25456  002DFC  220F               	addwfc	??_printSortTimer+2,f,c
 25457  002DFE  90D8               	bcf	status,0,c
 25458  002E00  342C               	rlcf	printSortTimer@i,w,c
 25459  002E02  6ED9               	movwf	fsr2l,c
 25460  002E04  342D               	rlcf	printSortTimer@i+1,w,c
 25461  002E06  6EDA               	movwf	fsr2h,c
 25462  002E08  0E14               	movlw	low printSortTimer@curTime
 25463  002E0A  26D9               	addwf	fsr2l,f,c
 25464  002E0C  0E00               	movlw	high printSortTimer@curTime
 25465  002E0E  22DA               	addwfc	fsr2h,f,c
 25466  002E10  C00E  FFDE         	movff	??_printSortTimer+1,postinc2
 25467  002E14  C00F  FFDD         	movff	??_printSortTimer+2,postdec2
 25468  002E18  4A2C               	infsnz	printSortTimer@i,f,c
 25469  002E1A  2A2D               	incf	printSortTimer@i+1,f,c
 25470  002E1C  D7CB               	goto	i2l10398
 25471  002E1E                     i2l10408:
 25472                           
 25473                           ;sort.c: 547: }
 25474                           ;sort.c: 548: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 25475  002E1E  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 25476  002E22  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 25477  002E26  0E00               	movlw	0
 25478  002E28  6E04               	movwf	i2___wmul@multiplicand+1,c
 25479  002E2A  0E3C               	movlw	60
 25480  002E2C  6E03               	movwf	i2___wmul@multiplicand,c
 25481  002E2E  ECCE  F02F         	call	i2___wmul	;wreg free
 25482  002E32  C001  F00D         	movff	?i2___wmul,??_printSortTimer
 25483  002E36  C002  F00E         	movff	?i2___wmul+1,??_printSortTimer+1
 25484  002E3A  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 25485  002E3E  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 25486  002E42  0E0E               	movlw	14
 25487  002E44  6E04               	movwf	i2___wmul@multiplicand+1,c
 25488  002E46  0E10               	movlw	16
 25489  002E48  6E03               	movwf	i2___wmul@multiplicand,c
 25490  002E4A  ECCE  F02F         	call	i2___wmul	;wreg free
 25491  002E4E  5001               	movf	?i2___wmul,w,c
 25492  002E50  260D               	addwf	??_printSortTimer,f,c
 25493  002E52  5002               	movf	?i2___wmul+1,w,c
 25494  002E54  220E               	addwfc	??_printSortTimer+1,f,c
 25495  002E56  0101               	movlb	1	; () banked
 25496  002E58  510E               	movf	_startTime& (0+255),w,b
 25497  002E5A  240D               	addwf	??_printSortTimer,w,c
 25498  002E5C  6E22               	movwf	printSortTimer@start_sec,c
 25499  002E5E  0101               	movlb	1	; () banked
 25500  002E60  510F               	movf	(_startTime+1)& (0+255),w,b
 25501  002E62  200E               	addwfc	??_printSortTimer+1,w,c
 25502  002E64  6E23               	movwf	printSortTimer@start_sec+1,c
 25503                           
 25504                           ;sort.c: 549: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 25505  002E66  C016  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 25506  002E6A  C017  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 25507  002E6E  0E00               	movlw	0
 25508  002E70  6E04               	movwf	i2___wmul@multiplicand+1,c
 25509  002E72  0E3C               	movlw	60
 25510  002E74  6E03               	movwf	i2___wmul@multiplicand,c
 25511  002E76  ECCE  F02F         	call	i2___wmul	;wreg free
 25512  002E7A  C001  F00D         	movff	?i2___wmul,??_printSortTimer
 25513  002E7E  C002  F00E         	movff	?i2___wmul+1,??_printSortTimer+1
 25514  002E82  C018  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 25515  002E86  C019  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 25516  002E8A  0E0E               	movlw	14
 25517  002E8C  6E04               	movwf	i2___wmul@multiplicand+1,c
 25518  002E8E  0E10               	movlw	16
 25519  002E90  6E03               	movwf	i2___wmul@multiplicand,c
 25520  002E92  ECCE  F02F         	call	i2___wmul	;wreg free
 25521  002E96  5001               	movf	?i2___wmul,w,c
 25522  002E98  260D               	addwf	??_printSortTimer,f,c
 25523  002E9A  5002               	movf	?i2___wmul+1,w,c
 25524  002E9C  220E               	addwfc	??_printSortTimer+1,f,c
 25525  002E9E  5014               	movf	printSortTimer@curTime,w,c
 25526  002EA0  240D               	addwf	??_printSortTimer,w,c
 25527  002EA2  6E24               	movwf	printSortTimer@cur_sec,c
 25528  002EA4  5015               	movf	printSortTimer@curTime+1,w,c
 25529  002EA6  200E               	addwfc	??_printSortTimer+1,w,c
 25530  002EA8  6E25               	movwf	printSortTimer@cur_sec+1,c
 25531                           
 25532                           ;sort.c: 550: unsigned int timeDiff = cur_sec - start_sec;
 25533  002EAA  C022  F00D         	movff	printSortTimer@start_sec,??_printSortTimer
 25534  002EAE  C023  F00E         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 25535  002EB2  1E0D               	comf	??_printSortTimer,f,c
 25536  002EB4  1E0E               	comf	??_printSortTimer+1,f,c
 25537  002EB6  4A0D               	infsnz	??_printSortTimer,f,c
 25538  002EB8  2A0E               	incf	??_printSortTimer+1,f,c
 25539  002EBA  5024               	movf	printSortTimer@cur_sec,w,c
 25540  002EBC  240D               	addwf	??_printSortTimer,w,c
 25541  002EBE  6E28               	movwf	printSortTimer@timeDiff,c
 25542  002EC0  5025               	movf	printSortTimer@cur_sec+1,w,c
 25543  002EC2  200E               	addwfc	??_printSortTimer+1,w,c
 25544  002EC4  6E29               	movwf	printSortTimer@timeDiff+1,c
 25545                           
 25546                           ;sort.c: 552: total_time = timeDiff;
 25547  002EC6  C028  F0FA         	movff	printSortTimer@timeDiff,_total_time
 25548  002ECA  C029  F0FB         	movff	printSortTimer@timeDiff+1,_total_time+1
 25549                           
 25550                           ;sort.c: 554: if(f_most_recent_sort_time){
 25551  002ECE  0101               	movlb	1	; () banked
 25552  002ED0  5137               	movf	_f_most_recent_sort_time& (0+255),w,b
 25553  002ED2  0101               	movlb	1	; () banked
 25554  002ED4  1138               	iorwf	(_f_most_recent_sort_time+1)& (0+255),w,b
 25555  002ED6  B4D8               	btfsc	status,2,c
 25556  002ED8  D009               	goto	i2l10420
 25557                           
 25558                           ; BSR set to: 1
 25559                           ;sort.c: 555: most_recent_sort_time = total_time;
 25560  002EDA  C0FA  F143         	movff	_total_time,_most_recent_sort_time
 25561  002EDE  C0FB  F144         	movff	_total_time+1,_most_recent_sort_time+1
 25562                           
 25563                           ; BSR set to: 1
 25564                           ;sort.c: 556: f_most_recent_sort_time = 0;
 25565  002EE2  0E00               	movlw	0
 25566  002EE4  0101               	movlb	1	; () banked
 25567  002EE6  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
 25568  002EE8  0E00               	movlw	0
 25569  002EEA  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
 25570  002EEC                     i2l10420:
 25571                           
 25572                           ; BSR set to: 1
 25573                           ;sort.c: 557: }
 25574                           ;sort.c: 560: if(total_time >= 20){
 25575  002EEC  0100               	movlb	0	; () banked
 25576  002EEE  BFFB               	btfsc	(_total_time+1)& (0+255),7,b
 25577  002EF0  D05B               	goto	i2l931
 25578  002EF2  0100               	movlb	0	; () banked
 25579  002EF4  51FB               	movf	(_total_time+1)& (0+255),w,b
 25580  002EF6  E105               	bnz	i2u1046_40
 25581  002EF8  0E14               	movlw	20
 25582  002EFA  0100               	movlb	0	; () banked
 25583  002EFC  5DFA               	subwf	_total_time& (0+255),w,b
 25584  002EFE  A0D8               	btfss	status,0,c
 25585  002F00  D053               	goto	i2l931
 25586  002F02                     i2u1046_40:
 25587                           
 25588                           ; BSR set to: 0
 25589                           ;sort.c: 561: if(LATBbits.LATB2 == 0){
 25590  002F02  B48A               	btfsc	3978,2,c	;volatile
 25591  002F04  D036               	goto	i2l10442
 25592                           
 25593                           ; BSR set to: 0
 25594                           ;sort.c: 562: motor_toggle_count++;
 25595  002F06  0101               	movlb	1	; () banked
 25596  002F08  4B45               	infsnz	_motor_toggle_count& (0+255),f,b
 25597  002F0A  2B46               	incf	(_motor_toggle_count+1)& (0+255),f,b
 25598                           
 25599                           ; BSR set to: 1
 25600                           ;sort.c: 563: if(motor_toggle_count == 2){
 25601  002F0C  0E02               	movlw	2
 25602  002F0E  0101               	movlb	1	; () banked
 25603  002F10  1945               	xorwf	_motor_toggle_count& (0+255),w,b
 25604  002F12  0101               	movlb	1	; () banked
 25605  002F14  1146               	iorwf	(_motor_toggle_count+1)& (0+255),w,b
 25606  002F16  A4D8               	btfss	status,2,c
 25607  002F18  D047               	goto	i2l931
 25608                           
 25609                           ; BSR set to: 1
 25610                           ;sort.c: 564: motor_toggle_count = 0;
 25611  002F1A  0E00               	movlw	0
 25612  002F1C  0101               	movlb	1	; () banked
 25613  002F1E  6F46               	movwf	(_motor_toggle_count+1)& (0+255),b
 25614  002F20  0E00               	movlw	0
 25615  002F22  6F45               	movwf	_motor_toggle_count& (0+255),b
 25616                           
 25617                           ;sort.c: 565: for(int i=0; i<46; i++){
 25618  002F24  0E00               	movlw	0
 25619  002F26  6E2B               	movwf	printSortTimer@i_1177+1,c
 25620  002F28  0E00               	movlw	0
 25621  002F2A  6E2A               	movwf	printSortTimer@i_1177,c
 25622                           
 25623                           ; BSR set to: 1
 25624  002F2C  BE2B               	btfsc	printSortTimer@i_1177+1,7,c
 25625  002F2E  D006               	goto	i2l10434
 25626  002F30  502B               	movf	printSortTimer@i_1177+1,w,c
 25627  002F32  E11D               	bnz	i2l935
 25628  002F34  0E2E               	movlw	46
 25629  002F36  5C2A               	subwf	printSortTimer@i_1177,w,c
 25630  002F38  B0D8               	btfsc	status,0,c
 25631  002F3A  D019               	goto	i2l935
 25632  002F3C                     i2l10434:
 25633                           
 25634                           ;sort.c: 566: LATBbits.LATB2 = !LATBbits.LATB2;
 25635  002F3C  B48A               	btfsc	3978,2,c	;volatile
 25636  002F3E  D003               	goto	i2u1050_40
 25637  002F40  6A0D               	clrf	??_printSortTimer& (0+255),c
 25638  002F42  2A0D               	incf	??_printSortTimer& (0+255),f,c
 25639  002F44  D001               	goto	i2u1051_48
 25640  002F46                     i2u1050_40:
 25641  002F46  6A0D               	clrf	??_printSortTimer& (0+255),c
 25642  002F48                     i2u1051_48:
 25643  002F48  460D               	rlncf	??_printSortTimer,f,c
 25644  002F4A  460D               	rlncf	??_printSortTimer,f,c
 25645  002F4C  508A               	movf	3978,w,c	;volatile
 25646  002F4E  180D               	xorwf	??_printSortTimer,w,c
 25647  002F50  0BFB               	andlw	-5
 25648  002F52  180D               	xorwf	??_printSortTimer,w,c
 25649  002F54  6E8A               	movwf	3978,c	;volatile
 25650                           
 25651                           ;sort.c: 567: delay_ms(45-i);
 25652  002F56  502A               	movf	printSortTimer@i_1177,w,c
 25653  002F58  0800               	sublw	0
 25654  002F5A  0F2D               	addlw	45
 25655  002F5C  EC32  F030         	call	i2_delay_ms
 25656  002F60  4A2A               	infsnz	printSortTimer@i_1177,f,c
 25657  002F62  2A2B               	incf	printSortTimer@i_1177+1,f,c
 25658  002F64  BE2B               	btfsc	printSortTimer@i_1177+1,7,c
 25659  002F66  D7EA               	goto	i2l10434
 25660  002F68  502B               	movf	printSortTimer@i_1177+1,w,c
 25661  002F6A  E101               	bnz	i2u1052_40
 25662  002F6C  D7E3               	goto	L19
 25663  002F6E                     i2u1052_40:
 25664  002F6E                     i2l935:
 25665                           
 25666                           ;sort.c: 568: }
 25667                           ;sort.c: 569: LATBbits.LATB2 = 1;
 25668  002F6E  848A               	bsf	3978,2,c	;volatile
 25669                           
 25670                           ;sort.c: 570: }
 25671                           ;sort.c: 571: }
 25672  002F70  D01B               	goto	i2l931
 25673  002F72                     i2l10442:
 25674                           
 25675                           ;sort.c: 572: else if(total_time % 20 == 0){
 25676  002F72  C0FA  F001         	movff	_total_time,i2___awmod@dividend
 25677  002F76  C0FB  F002         	movff	_total_time+1,i2___awmod@dividend+1
 25678  002F7A  0E00               	movlw	0
 25679  002F7C  6E04               	movwf	i2___awmod@divisor+1,c
 25680  002F7E  0E14               	movlw	20
 25681  002F80  6E03               	movwf	i2___awmod@divisor,c
 25682  002F82  ECE6  F02A         	call	i2___awmod	;wreg free
 25683  002F86  5001               	movf	?i2___awmod,w,c
 25684  002F88  1002               	iorwf	?i2___awmod+1,w,c
 25685  002F8A  A4D8               	btfss	status,2,c
 25686  002F8C  D00D               	goto	i2l931
 25687                           
 25688                           ;sort.c: 573: LATBbits.LATB2 = !LATBbits.LATB2;
 25689  002F8E  B48A               	btfsc	3978,2,c	;volatile
 25690  002F90  D003               	goto	i2u1054_40
 25691  002F92  6A0D               	clrf	??_printSortTimer& (0+255),c
 25692  002F94  2A0D               	incf	??_printSortTimer& (0+255),f,c
 25693  002F96  D001               	goto	i2u1055_48
 25694  002F98                     i2u1054_40:
 25695  002F98  6A0D               	clrf	??_printSortTimer& (0+255),c
 25696  002F9A                     i2u1055_48:
 25697  002F9A  460D               	rlncf	??_printSortTimer,f,c
 25698  002F9C  460D               	rlncf	??_printSortTimer,f,c
 25699  002F9E  508A               	movf	3978,w,c	;volatile
 25700  002FA0  180D               	xorwf	??_printSortTimer,w,c
 25701  002FA2  0BFB               	andlw	-5
 25702  002FA4  180D               	xorwf	??_printSortTimer,w,c
 25703  002FA6  6E8A               	movwf	3978,c	;volatile
 25704  002FA8                     i2l931:
 25705                           
 25706                           ;sort.c: 574: }
 25707                           ;sort.c: 575: }
 25708                           ;sort.c: 579: if((total_time >= 30) && (count_total >= 6)){
 25709  002FA8  0100               	movlb	0	; () banked
 25710  002FAA  BFFB               	btfsc	(_total_time+1)& (0+255),7,b
 25711  002FAC  D029               	goto	i2l10462
 25712  002FAE  0100               	movlb	0	; () banked
 25713  002FB0  51FB               	movf	(_total_time+1)& (0+255),w,b
 25714  002FB2  E105               	bnz	i2u1056_40
 25715  002FB4  0E1E               	movlw	30
 25716  002FB6  0100               	movlb	0	; () banked
 25717  002FB8  5DFA               	subwf	_total_time& (0+255),w,b
 25718  002FBA  A0D8               	btfss	status,0,c
 25719  002FBC  D021               	goto	i2l10462
 25720  002FBE                     i2u1056_40:
 25721                           
 25722                           ; BSR set to: 0
 25723  002FBE  0100               	movlb	0	; () banked
 25724  002FC0  BFFF               	btfsc	(_count_total+1)& (0+255),7,b
 25725  002FC2  D01E               	goto	i2l10462
 25726  002FC4  0100               	movlb	0	; () banked
 25727  002FC6  51FF               	movf	(_count_total+1)& (0+255),w,b
 25728  002FC8  E105               	bnz	i2u1057_40
 25729  002FCA  0E06               	movlw	6
 25730  002FCC  0100               	movlb	0	; () banked
 25731  002FCE  5DFE               	subwf	_count_total& (0+255),w,b
 25732  002FD0  A0D8               	btfss	status,0,c
 25733  002FD2  D016               	goto	i2l10462
 25734  002FD4                     i2u1057_40:
 25735                           
 25736                           ; BSR set to: 0
 25737                           ;sort.c: 580: if(LATBbits.LATB0 == 1){
 25738  002FD4  A08A               	btfss	3978,0,c	;volatile
 25739  002FD6  D003               	goto	i2l10458
 25740  002FD8                     i2l10450:
 25741                           
 25742                           ; BSR set to: 0
 25743                           ;sort.c: 581: agitator_toggle_count++;
 25744  002FD8  4A5D               	infsnz	_agitator_toggle_count,f,c
 25745  002FDA  2A5E               	incf	_agitator_toggle_count+1,f,c
 25746  002FDC  D01F               	goto	i2l10468
 25747  002FDE                     i2l10458:
 25748                           
 25749                           ; BSR set to: 0
 25750                           ;sort.c: 587: else if(total_time % 30 == 0){
 25751  002FDE  C0FA  F001         	movff	_total_time,i2___awmod@dividend
 25752  002FE2  C0FB  F002         	movff	_total_time+1,i2___awmod@dividend+1
 25753  002FE6  0E00               	movlw	0
 25754  002FE8  6E04               	movwf	i2___awmod@divisor+1,c
 25755  002FEA  0E1E               	movlw	30
 25756  002FEC  6E03               	movwf	i2___awmod@divisor,c
 25757  002FEE  ECE6  F02A         	call	i2___awmod	;wreg free
 25758  002FF2  D029               	goto	L20
 25759  002FF4                     i2u1062_48:
 25760  002FF4  508A               	movf	3978,w,c	;volatile
 25761  002FF6  180D               	xorwf	??_printSortTimer,w,c
 25762  002FF8  0BFE               	andlw	-2
 25763  002FFA  180D               	xorwf	??_printSortTimer,w,c
 25764  002FFC  6E8A               	movwf	3978,c	;volatile
 25765                           
 25766                           ;sort.c: 589: }
 25767                           ;sort.c: 590: }
 25768  002FFE  D02E               	goto	i2l943
 25769  003000                     i2l10462:
 25770                           
 25771                           ;sort.c: 591: else if(total_time >= 60){
 25772  003000  0100               	movlb	0	; () banked
 25773  003002  BFFB               	btfsc	(_total_time+1)& (0+255),7,b
 25774  003004  D02B               	goto	i2l943
 25775  003006  0100               	movlb	0	; () banked
 25776  003008  51FB               	movf	(_total_time+1)& (0+255),w,b
 25777  00300A  E105               	bnz	i2u1063_40
 25778  00300C  0E3C               	movlw	60
 25779  00300E  0100               	movlb	0	; () banked
 25780  003010  5DFA               	subwf	_total_time& (0+255),w,b
 25781  003012  A0D8               	btfss	status,0,c
 25782  003014  D023               	goto	i2l943
 25783  003016                     i2u1063_40:
 25784                           
 25785                           ; BSR set to: 0
 25786                           ;sort.c: 592: if(LATBbits.LATB0 == 1){
 25787  003016  A08A               	btfss	3978,0,c	;volatile
 25788  003018  D00C               	goto	i2l10474
 25789  00301A  D7DE               	goto	i2l10450
 25790  00301C                     i2l10468:
 25791                           
 25792                           ; BSR set to: 0
 25793                           ;sort.c: 594: if(agitator_toggle_count == 2){
 25794  00301C  0E02               	movlw	2
 25795  00301E  185D               	xorwf	_agitator_toggle_count,w,c
 25796  003020  105E               	iorwf	_agitator_toggle_count+1,w,c
 25797  003022  A4D8               	btfss	status,2,c
 25798  003024  D01B               	goto	i2l943
 25799                           
 25800                           ; BSR set to: 0
 25801                           ;sort.c: 595: agitator_toggle_count = 0;
 25802  003026  0E00               	movlw	0
 25803  003028  6E5E               	movwf	_agitator_toggle_count+1,c
 25804  00302A  0E00               	movlw	0
 25805  00302C  6E5D               	movwf	_agitator_toggle_count,c
 25806                           
 25807                           ; BSR set to: 0
 25808                           ;sort.c: 596: LATBbits.LATB0 = 0;
 25809  00302E  908A               	bcf	3978,0,c	;volatile
 25810                           
 25811                           ; BSR set to: 0
 25812                           ;sort.c: 597: }
 25813                           ;sort.c: 598: }
 25814  003030  D015               	goto	i2l943
 25815  003032                     i2l10474:
 25816                           
 25817                           ; BSR set to: 0
 25818                           ;sort.c: 599: else if(total_time % 30 == 0){
 25819  003032  C0FA  F001         	movff	_total_time,i2___awmod@dividend
 25820  003036  C0FB  F002         	movff	_total_time+1,i2___awmod@dividend+1
 25821  00303A  0E00               	movlw	0
 25822  00303C  6E04               	movwf	i2___awmod@divisor+1,c
 25823  00303E  0E1E               	movlw	30
 25824  003040  6E03               	movwf	i2___awmod@divisor,c
 25825  003042  ECE6  F02A         	call	i2___awmod	;wreg free
 25826  003046                     L20:
 25827  003046  5001               	movf	?i2___awmod,w,c
 25828  003048  1002               	iorwf	?i2___awmod+1,w,c
 25829  00304A  A4D8               	btfss	status,2,c
 25830  00304C  D007               	goto	i2l943
 25831                           
 25832                           ;sort.c: 600: LATBbits.LATB0 = !LATBbits.LATB0;
 25833  00304E  B08A               	btfsc	3978,0,c	;volatile
 25834  003050  D003               	goto	i2u1067_40
 25835  003052  6A0D               	clrf	??_printSortTimer& (0+255),c
 25836  003054  2A0D               	incf	??_printSortTimer& (0+255),f,c
 25837  003056  D7CE               	goto	i2u1062_48
 25838  003058                     i2u1067_40:
 25839  003058  6A0D               	clrf	??_printSortTimer& (0+255),c
 25840  00305A  D7CC               	goto	i2u1062_48
 25841  00305C                     i2l943:
 25842                           
 25843                           ;sort.c: 601: }
 25844                           ;sort.c: 602: }
 25845                           ;sort.c: 604: if((total_time - most_recent_sort_time == 42) || (total_time == 179)){
 25846  00305C  C143  F00D         	movff	_most_recent_sort_time,??_printSortTimer
 25847  003060  C144  F00E         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 25848  003064  1E0D               	comf	??_printSortTimer,f,c
 25849  003066  1E0E               	comf	??_printSortTimer+1,f,c
 25850  003068  4A0D               	infsnz	??_printSortTimer,f,c
 25851  00306A  2A0E               	incf	??_printSortTimer+1,f,c
 25852  00306C  0100               	movlb	0	; () banked
 25853  00306E  51FA               	movf	_total_time& (0+255),w,b
 25854  003070  260D               	addwf	??_printSortTimer,f,c
 25855  003072  0100               	movlb	0	; () banked
 25856  003074  51FB               	movf	(_total_time+1)& (0+255),w,b
 25857  003076  220E               	addwfc	??_printSortTimer+1,f,c
 25858  003078  0E2A               	movlw	42
 25859  00307A  180D               	xorwf	??_printSortTimer,w,c
 25860  00307C  100E               	iorwf	??_printSortTimer+1,w,c
 25861  00307E  B4D8               	btfsc	status,2,c
 25862  003080  D007               	goto	i2l10480
 25863                           
 25864                           ; BSR set to: 0
 25865  003082  0EB3               	movlw	179
 25866  003084  0100               	movlb	0	; () banked
 25867  003086  19FA               	xorwf	_total_time& (0+255),w,b
 25868  003088  0100               	movlb	0	; () banked
 25869  00308A  11FB               	iorwf	(_total_time+1)& (0+255),w,b
 25870  00308C  A4D8               	btfss	status,2,c
 25871  00308E  D003               	goto	i2l10482
 25872  003090                     i2l10480:
 25873                           
 25874                           ; BSR set to: 0
 25875                           ;sort.c: 605: machine_state = DoneSorting_state;
 25876  003090  0E02               	movlw	2
 25877  003092  0100               	movlb	0	; () banked
 25878  003094  6FFC               	movwf	_machine_state& (0+255),b
 25879  003096                     i2l10482:
 25880                           
 25881                           ; BSR set to: 0
 25882                           ;sort.c: 607: }
 25883                           ;sort.c: 609: int min = (timeDiff % 3600) / 60;
 25884  003096  0E0E               	movlw	14
 25885  003098  6E0B               	movwf	i2___lwmod@divisor+1,c
 25886  00309A  0E10               	movlw	16
 25887  00309C  6E0A               	movwf	i2___lwmod@divisor,c
 25888  00309E  C028  F008         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 25889  0030A2  C029  F009         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 25890  0030A6  EC57  F02D         	call	i2___lwmod	;wreg free
 25891  0030AA  C008  F001         	movff	?i2___lwmod,i2___lwdiv@dividend
 25892  0030AE  C009  F002         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 25893  0030B2  0E00               	movlw	0
 25894  0030B4  6E04               	movwf	i2___lwdiv@divisor+1,c
 25895  0030B6  0E3C               	movlw	60
 25896  0030B8  6E03               	movwf	i2___lwdiv@divisor,c
 25897  0030BA  EC76  F02C         	call	i2___lwdiv	;wreg free
 25898  0030BE  C001  F010         	movff	?i2___lwdiv,printSortTimer@min
 25899  0030C2  C002  F011         	movff	?i2___lwdiv+1,printSortTimer@min+1
 25900                           
 25901                           ;sort.c: 610: int sec = (timeDiff % 3600) % 60;
 25902  0030C6  0E0E               	movlw	14
 25903  0030C8  6E0B               	movwf	i2___lwmod@divisor+1,c
 25904  0030CA  0E10               	movlw	16
 25905  0030CC  6E0A               	movwf	i2___lwmod@divisor,c
 25906  0030CE  C028  F008         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 25907  0030D2  C029  F009         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 25908  0030D6  EC57  F02D         	call	i2___lwmod	;wreg free
 25909  0030DA  C008  F026         	movff	?i2___lwmod,_printSortTimer$2582
 25910  0030DE  C009  F027         	movff	?i2___lwmod+1,_printSortTimer$2582+1
 25911                           
 25912                           ;sort.c: 610: int sec = (timeDiff % 3600) % 60;
 25913  0030E2  C026  F008         	movff	_printSortTimer$2582,i2___lwmod@dividend
 25914  0030E6  C027  F009         	movff	_printSortTimer$2582+1,i2___lwmod@dividend+1
 25915  0030EA  0E00               	movlw	0
 25916  0030EC  6E0B               	movwf	i2___lwmod@divisor+1,c
 25917  0030EE  0E3C               	movlw	60
 25918  0030F0  6E0A               	movwf	i2___lwmod@divisor,c
 25919  0030F2  EC57  F02D         	call	i2___lwmod	;wreg free
 25920  0030F6  C008  F012         	movff	?i2___lwmod,printSortTimer@sec
 25921  0030FA  C009  F013         	movff	?i2___lwmod+1,printSortTimer@sec+1
 25922  0030FE  0012               	return		;funcret
 25923  003100                     __end_of_printSortTimer:
 25924                           	opt stack 0
 25925                           pclatu	equ	0xFFB
 25926                           pclath	equ	0xFFA
 25927                           tblptru	equ	0xFF8
 25928                           tblptrh	equ	0xFF7
 25929                           tblptrl	equ	0xFF6
 25930                           tablat	equ	0xFF5
 25931                           prodh	equ	0xFF4
 25932                           prodl	equ	0xFF3
 25933                           intcon	equ	0xFF2
 25934                           intcon2	equ	0xFF1
 25935                           intcon3	equ	0xFF0
 25936                           indf0	equ	0xFEF
 25937                           postinc0	equ	0xFEE
 25938                           fsr0h	equ	0xFEA
 25939                           fsr0l	equ	0xFE9
 25940                           wreg	equ	0xFE8
 25941                           postdec1	equ	0xFE5
 25942                           fsr1h	equ	0xFE2
 25943                           fsr1l	equ	0xFE1
 25944                           indf2	equ	0xFDF
 25945                           postinc2	equ	0xFDE
 25946                           postdec2	equ	0xFDD
 25947                           fsr2h	equ	0xFDA
 25948                           fsr2l	equ	0xFD9
 25949                           status	equ	0xFD8
 25950                           
 25951 ;; *************** function i2_getRTC *****************
 25952 ;; Defined at:
 25953 ;;		line 44 in file "RTC.c"
 25954 ;; Parameters:    Size  Location     Type
 25955 ;;		None
 25956 ;; Auto vars:     Size  Location     Type
 25957 ;;  getRTC          2    3[COMRAM] int 
 25958 ;; Return value:  Size  Location     Type
 25959 ;;                  1    wreg      void 
 25960 ;; Registers used:
 25961 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25962 ;; Tracked objects:
 25963 ;;		On entry : 0/0
 25964 ;;		On exit  : 0/0
 25965 ;;		Unchanged: 0/0
 25966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25968 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25970 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25971 ;;Total ram usage:        2 bytes
 25972 ;; Hardware stack levels used:    1
 25973 ;; Hardware stack levels required when called:    2
 25974 ;; This function calls:
 25975 ;;		i2_I2C_Master_Read
 25976 ;;		i2_I2C_Master_Start
 25977 ;;		i2_I2C_Master_Stop
 25978 ;;		i2_I2C_Master_Write
 25979 ;; This function is called by:
 25980 ;;		_printSortTimer
 25981 ;;		i2_printRTC
 25982 ;; This function uses a non-reentrant model
 25983 ;;
 25984                           
 25985                           	psect	text92
 25986  00555A                     __ptext92:
 25987                           	opt stack 0
 25988  00555A                     i2_getRTC:
 25989                           	opt stack 19
 25990                           
 25991                           ;RTC.c: 48: I2C_Master_Start();
 25992                           
 25993                           ;incstack = 0
 25994  00555A  ECAB  F030         	call	i2_I2C_Master_Start	;wreg free
 25995                           
 25996                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 25997  00555E  0E00               	movlw	0
 25998  005560  6E03               	movwf	i2I2C_Master_Write@d+1,c
 25999  005562  0ED0               	movlw	208
 26000  005564  6E02               	movwf	i2I2C_Master_Write@d,c
 26001  005566  EC96  F030         	call	i2_I2C_Master_Write	;wreg free
 26002                           
 26003                           ;RTC.c: 50: I2C_Master_Write(0x00);
 26004  00556A  0E00               	movlw	0
 26005  00556C  6E03               	movwf	i2I2C_Master_Write@d+1,c
 26006  00556E  0E00               	movlw	0
 26007  005570  6E02               	movwf	i2I2C_Master_Write@d,c
 26008  005572  EC96  F030         	call	i2_I2C_Master_Write	;wreg free
 26009                           
 26010                           ;RTC.c: 51: I2C_Master_Stop();
 26011  005576  ECA7  F030         	call	i2_I2C_Master_Stop	;wreg free
 26012                           
 26013                           ;RTC.c: 54: I2C_Master_Start();
 26014  00557A  ECAB  F030         	call	i2_I2C_Master_Start	;wreg free
 26015                           
 26016                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 26017  00557E  0E00               	movlw	0
 26018  005580  6E03               	movwf	i2I2C_Master_Write@d+1,c
 26019  005582  0ED1               	movlw	209
 26020  005584  6E02               	movwf	i2I2C_Master_Write@d,c
 26021  005586  EC96  F030         	call	i2_I2C_Master_Write	;wreg free
 26022                           
 26023                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 26024  00558A  0E00               	movlw	0
 26025  00558C  6E05               	movwf	i2getRTC@i+1,c
 26026  00558E  0E00               	movlw	0
 26027  005590  6E04               	movwf	i2getRTC@i,c
 26028  005592                     i2l7236:
 26029  005592  BE05               	btfsc	i2getRTC@i+1,7,c
 26030  005594  D006               	goto	i2l7240
 26031  005596  5005               	movf	i2getRTC@i+1,w,c
 26032  005598  E111               	bnz	i2l7246
 26033  00559A  0E06               	movlw	6
 26034  00559C  5C04               	subwf	i2getRTC@i,w,c
 26035  00559E  B0D8               	btfsc	status,0,c
 26036  0055A0  D00D               	goto	i2l7246
 26037  0055A2                     i2l7240:
 26038                           
 26039                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 26040  0055A2  0E1C               	movlw	low _time
 26041  0055A4  2404               	addwf	i2getRTC@i,w,c
 26042  0055A6  6ED9               	movwf	fsr2l,c
 26043  0055A8  0E01               	movlw	high _time
 26044  0055AA  2005               	addwfc	i2getRTC@i+1,w,c
 26045  0055AC  6EDA               	movwf	fsr2h,c
 26046  0055AE  0E01               	movlw	1
 26047  0055B0  ECBB  F02F         	call	i2_I2C_Master_Read
 26048  0055B4  6EDF               	movwf	indf2,c
 26049  0055B6  4A04               	infsnz	i2getRTC@i,f,c
 26050  0055B8  2A05               	incf	i2getRTC@i+1,f,c
 26051  0055BA  D7EB               	goto	i2l7236
 26052  0055BC                     i2l7246:
 26053                           
 26054                           ;RTC.c: 58: }
 26055                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 26056  0055BC  0E00               	movlw	0
 26057  0055BE  ECBB  F02F         	call	i2_I2C_Master_Read
 26058  0055C2  0101               	movlb	1	; () banked
 26059  0055C4  6F22               	movwf	(_time+6)& (0+255),b
 26060                           
 26061                           ;RTC.c: 60: I2C_Master_Stop();
 26062  0055C6  ECA7  F030         	call	i2_I2C_Master_Stop	;wreg free
 26063  0055CA  0012               	return		;funcret
 26064  0055CC                     __end_ofi2_getRTC:
 26065                           	opt stack 0
 26066                           pclatu	equ	0xFFB
 26067                           pclath	equ	0xFFA
 26068                           tblptru	equ	0xFF8
 26069                           tblptrh	equ	0xFF7
 26070                           tblptrl	equ	0xFF6
 26071                           tablat	equ	0xFF5
 26072                           prodh	equ	0xFF4
 26073                           prodl	equ	0xFF3
 26074                           intcon	equ	0xFF2
 26075                           intcon2	equ	0xFF1
 26076                           intcon3	equ	0xFF0
 26077                           indf0	equ	0xFEF
 26078                           postinc0	equ	0xFEE
 26079                           fsr0h	equ	0xFEA
 26080                           fsr0l	equ	0xFE9
 26081                           wreg	equ	0xFE8
 26082                           postdec1	equ	0xFE5
 26083                           fsr1h	equ	0xFE2
 26084                           fsr1l	equ	0xFE1
 26085                           indf2	equ	0xFDF
 26086                           postinc2	equ	0xFDE
 26087                           postdec2	equ	0xFDD
 26088                           fsr2h	equ	0xFDA
 26089                           fsr2l	equ	0xFD9
 26090                           status	equ	0xFD8
 26091                           
 26092 ;; *************** function i2_I2C_Master_Write *****************
 26093 ;; Defined at:
 26094 ;;		line 49 in file "I2C.c"
 26095 ;; Parameters:    Size  Location     Type
 26096 ;;  d               2    1[COMRAM] unsigned int 
 26097 ;; Auto vars:     Size  Location     Type
 26098 ;;		None
 26099 ;; Return value:  Size  Location     Type
 26100 ;;                  1    wreg      void 
 26101 ;; Registers used:
 26102 ;;		wreg, status,2, status,0, cstack
 26103 ;; Tracked objects:
 26104 ;;		On entry : 0/0
 26105 ;;		On exit  : 0/0
 26106 ;;		Unchanged: 0/0
 26107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26108 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26111 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26112 ;;Total ram usage:        2 bytes
 26113 ;; Hardware stack levels used:    1
 26114 ;; Hardware stack levels required when called:    1
 26115 ;; This function calls:
 26116 ;;		i2_I2C_Master_Wait
 26117 ;; This function is called by:
 26118 ;;		i2_getRTC
 26119 ;; This function uses a non-reentrant model
 26120 ;;
 26121                           
 26122                           	psect	text93
 26123  00612C                     __ptext93:
 26124                           	opt stack 0
 26125  00612C                     i2_I2C_Master_Write:
 26126                           	opt stack 19
 26127                           
 26128                           ;I2C.c: 51: I2C_Master_Wait();
 26129                           
 26130                           ;incstack = 0
 26131  00612C  EC6C  F030         	call	i2_I2C_Master_Wait	;wreg free
 26132                           
 26133                           ;I2C.c: 52: SSPBUF = d;
 26134  006130  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 26135  006134  0012               	return		;funcret
 26136  006136                     __end_ofi2_I2C_Master_Write:
 26137                           	opt stack 0
 26138                           pclatu	equ	0xFFB
 26139                           pclath	equ	0xFFA
 26140                           tblptru	equ	0xFF8
 26141                           tblptrh	equ	0xFF7
 26142                           tblptrl	equ	0xFF6
 26143                           tablat	equ	0xFF5
 26144                           prodh	equ	0xFF4
 26145                           prodl	equ	0xFF3
 26146                           intcon	equ	0xFF2
 26147                           intcon2	equ	0xFF1
 26148                           intcon3	equ	0xFF0
 26149                           indf0	equ	0xFEF
 26150                           postinc0	equ	0xFEE
 26151                           fsr0h	equ	0xFEA
 26152                           fsr0l	equ	0xFE9
 26153                           wreg	equ	0xFE8
 26154                           postdec1	equ	0xFE5
 26155                           fsr1h	equ	0xFE2
 26156                           fsr1l	equ	0xFE1
 26157                           indf2	equ	0xFDF
 26158                           postinc2	equ	0xFDE
 26159                           postdec2	equ	0xFDD
 26160                           fsr2h	equ	0xFDA
 26161                           fsr2l	equ	0xFD9
 26162                           status	equ	0xFD8
 26163                           
 26164 ;; *************** function i2_I2C_Master_Stop *****************
 26165 ;; Defined at:
 26166 ;;		line 43 in file "I2C.c"
 26167 ;; Parameters:    Size  Location     Type
 26168 ;;		None
 26169 ;; Auto vars:     Size  Location     Type
 26170 ;;		None
 26171 ;; Return value:  Size  Location     Type
 26172 ;;                  1    wreg      void 
 26173 ;; Registers used:
 26174 ;;		wreg, status,2, status,0, cstack
 26175 ;; Tracked objects:
 26176 ;;		On entry : 0/0
 26177 ;;		On exit  : 0/0
 26178 ;;		Unchanged: 0/0
 26179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26181 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26183 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26184 ;;Total ram usage:        0 bytes
 26185 ;; Hardware stack levels used:    1
 26186 ;; Hardware stack levels required when called:    1
 26187 ;; This function calls:
 26188 ;;		i2_I2C_Master_Wait
 26189 ;; This function is called by:
 26190 ;;		i2_getRTC
 26191 ;; This function uses a non-reentrant model
 26192 ;;
 26193                           
 26194                           	psect	text94
 26195  00614E                     __ptext94:
 26196                           	opt stack 0
 26197  00614E                     i2_I2C_Master_Stop:
 26198                           	opt stack 19
 26199                           
 26200                           ;I2C.c: 45: I2C_Master_Wait();
 26201                           
 26202                           ;incstack = 0
 26203  00614E  EC6C  F030         	call	i2_I2C_Master_Wait	;wreg free
 26204                           
 26205                           ;I2C.c: 46: PEN = 1;
 26206  006152  84C5               	bsf	4037,2,c	;volatile
 26207  006154  0012               	return		;funcret
 26208  006156                     __end_ofi2_I2C_Master_Stop:
 26209                           	opt stack 0
 26210                           pclatu	equ	0xFFB
 26211                           pclath	equ	0xFFA
 26212                           tblptru	equ	0xFF8
 26213                           tblptrh	equ	0xFF7
 26214                           tblptrl	equ	0xFF6
 26215                           tablat	equ	0xFF5
 26216                           prodh	equ	0xFF4
 26217                           prodl	equ	0xFF3
 26218                           intcon	equ	0xFF2
 26219                           intcon2	equ	0xFF1
 26220                           intcon3	equ	0xFF0
 26221                           indf0	equ	0xFEF
 26222                           postinc0	equ	0xFEE
 26223                           fsr0h	equ	0xFEA
 26224                           fsr0l	equ	0xFE9
 26225                           wreg	equ	0xFE8
 26226                           postdec1	equ	0xFE5
 26227                           fsr1h	equ	0xFE2
 26228                           fsr1l	equ	0xFE1
 26229                           indf2	equ	0xFDF
 26230                           postinc2	equ	0xFDE
 26231                           postdec2	equ	0xFDD
 26232                           fsr2h	equ	0xFDA
 26233                           fsr2l	equ	0xFD9
 26234                           status	equ	0xFD8
 26235                           
 26236 ;; *************** function i2_I2C_Master_Start *****************
 26237 ;; Defined at:
 26238 ;;		line 31 in file "I2C.c"
 26239 ;; Parameters:    Size  Location     Type
 26240 ;;		None
 26241 ;; Auto vars:     Size  Location     Type
 26242 ;;		None
 26243 ;; Return value:  Size  Location     Type
 26244 ;;                  1    wreg      void 
 26245 ;; Registers used:
 26246 ;;		wreg, status,2, status,0, cstack
 26247 ;; Tracked objects:
 26248 ;;		On entry : 0/0
 26249 ;;		On exit  : 0/0
 26250 ;;		Unchanged: 0/0
 26251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26253 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26255 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26256 ;;Total ram usage:        0 bytes
 26257 ;; Hardware stack levels used:    1
 26258 ;; Hardware stack levels required when called:    1
 26259 ;; This function calls:
 26260 ;;		i2_I2C_Master_Wait
 26261 ;; This function is called by:
 26262 ;;		i2_getRTC
 26263 ;; This function uses a non-reentrant model
 26264 ;;
 26265                           
 26266                           	psect	text95
 26267  006156                     __ptext95:
 26268                           	opt stack 0
 26269  006156                     i2_I2C_Master_Start:
 26270                           	opt stack 19
 26271                           
 26272                           ;I2C.c: 33: I2C_Master_Wait();
 26273                           
 26274                           ;incstack = 0
 26275  006156  EC6C  F030         	call	i2_I2C_Master_Wait	;wreg free
 26276                           
 26277                           ;I2C.c: 34: SEN = 1;
 26278  00615A  80C5               	bsf	4037,0,c	;volatile
 26279  00615C  0012               	return		;funcret
 26280  00615E                     __end_ofi2_I2C_Master_Start:
 26281                           	opt stack 0
 26282                           pclatu	equ	0xFFB
 26283                           pclath	equ	0xFFA
 26284                           tblptru	equ	0xFF8
 26285                           tblptrh	equ	0xFF7
 26286                           tblptrl	equ	0xFF6
 26287                           tablat	equ	0xFF5
 26288                           prodh	equ	0xFF4
 26289                           prodl	equ	0xFF3
 26290                           intcon	equ	0xFF2
 26291                           intcon2	equ	0xFF1
 26292                           intcon3	equ	0xFF0
 26293                           indf0	equ	0xFEF
 26294                           postinc0	equ	0xFEE
 26295                           fsr0h	equ	0xFEA
 26296                           fsr0l	equ	0xFE9
 26297                           wreg	equ	0xFE8
 26298                           postdec1	equ	0xFE5
 26299                           fsr1h	equ	0xFE2
 26300                           fsr1l	equ	0xFE1
 26301                           indf2	equ	0xFDF
 26302                           postinc2	equ	0xFDE
 26303                           postdec2	equ	0xFDD
 26304                           fsr2h	equ	0xFDA
 26305                           fsr2l	equ	0xFD9
 26306                           status	equ	0xFD8
 26307                           
 26308 ;; *************** function i2_I2C_Master_Read *****************
 26309 ;; Defined at:
 26310 ;;		line 55 in file "I2C.c"
 26311 ;; Parameters:    Size  Location     Type
 26312 ;;  a               1    wreg     unsigned char 
 26313 ;; Auto vars:     Size  Location     Type
 26314 ;;  a               1    1[COMRAM] unsigned char 
 26315 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 26316 ;; Return value:  Size  Location     Type
 26317 ;;                  1    wreg      unsigned char 
 26318 ;; Registers used:
 26319 ;;		wreg, status,2, status,0, cstack
 26320 ;; Tracked objects:
 26321 ;;		On entry : 0/0
 26322 ;;		On exit  : 0/0
 26323 ;;		Unchanged: 0/0
 26324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26326 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26328 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26329 ;;Total ram usage:        2 bytes
 26330 ;; Hardware stack levels used:    1
 26331 ;; Hardware stack levels required when called:    1
 26332 ;; This function calls:
 26333 ;;		i2_I2C_Master_Wait
 26334 ;; This function is called by:
 26335 ;;		i2_getRTC
 26336 ;; This function uses a non-reentrant model
 26337 ;;
 26338                           
 26339                           	psect	text96
 26340  005F76                     __ptext96:
 26341                           	opt stack 0
 26342  005F76                     i2_I2C_Master_Read:
 26343                           	opt stack 19
 26344                           
 26345                           ;incstack = 0
 26346                           ;i2I2C_Master_Read@a stored from wreg
 26347  005F76  6E02               	movwf	i2I2C_Master_Read@a,c
 26348                           
 26349                           ;I2C.c: 57: unsigned char temp;
 26350                           ;I2C.c: 58: I2C_Master_Wait();
 26351  005F78  EC6C  F030         	call	i2_I2C_Master_Wait	;wreg free
 26352                           
 26353                           ;I2C.c: 59: RCEN = 1;
 26354  005F7C  86C5               	bsf	4037,3,c	;volatile
 26355                           
 26356                           ;I2C.c: 60: I2C_Master_Wait();
 26357  005F7E  EC6C  F030         	call	i2_I2C_Master_Wait	;wreg free
 26358                           
 26359                           ;I2C.c: 61: temp = SSPBUF;
 26360  005F82  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 26361                           
 26362                           ;I2C.c: 62: I2C_Master_Wait();
 26363  005F86  EC6C  F030         	call	i2_I2C_Master_Wait	;wreg free
 26364                           
 26365                           ;I2C.c: 63: ACKDT = (a)?0:1;
 26366  005F8A  5002               	movf	i2I2C_Master_Read@a,w,c
 26367  005F8C  A4D8               	btfss	status,2,c
 26368  005F8E  D002               	goto	i2u562_40
 26369  005F90  8AC5               	bsf	4037,5,c	;volatile
 26370  005F92  D001               	goto	i2l6894
 26371  005F94                     i2u562_40:
 26372  005F94  9AC5               	bcf	4037,5,c	;volatile
 26373  005F96                     i2l6894:
 26374                           
 26375                           ;I2C.c: 64: ACKEN = 1;
 26376  005F96  88C5               	bsf	4037,4,c	;volatile
 26377                           
 26378                           ;I2C.c: 65: return temp;
 26379  005F98  5003               	movf	i2I2C_Master_Read@temp,w,c
 26380  005F9A  0012               	return	
 26381  005F9C                     __end_ofi2_I2C_Master_Read:
 26382                           	opt stack 0
 26383                           pclatu	equ	0xFFB
 26384                           pclath	equ	0xFFA
 26385                           tblptru	equ	0xFF8
 26386                           tblptrh	equ	0xFF7
 26387                           tblptrl	equ	0xFF6
 26388                           tablat	equ	0xFF5
 26389                           prodh	equ	0xFF4
 26390                           prodl	equ	0xFF3
 26391                           intcon	equ	0xFF2
 26392                           intcon2	equ	0xFF1
 26393                           intcon3	equ	0xFF0
 26394                           indf0	equ	0xFEF
 26395                           postinc0	equ	0xFEE
 26396                           fsr0h	equ	0xFEA
 26397                           fsr0l	equ	0xFE9
 26398                           wreg	equ	0xFE8
 26399                           postdec1	equ	0xFE5
 26400                           fsr1h	equ	0xFE2
 26401                           fsr1l	equ	0xFE1
 26402                           indf2	equ	0xFDF
 26403                           postinc2	equ	0xFDE
 26404                           postdec2	equ	0xFDD
 26405                           fsr2h	equ	0xFDA
 26406                           fsr2l	equ	0xFD9
 26407                           status	equ	0xFD8
 26408                           
 26409 ;; *************** function i2_I2C_Master_Wait *****************
 26410 ;; Defined at:
 26411 ;;		line 26 in file "I2C.c"
 26412 ;; Parameters:    Size  Location     Type
 26413 ;;		None
 26414 ;; Auto vars:     Size  Location     Type
 26415 ;;		None
 26416 ;; Return value:  Size  Location     Type
 26417 ;;                  1    wreg      void 
 26418 ;; Registers used:
 26419 ;;		wreg, status,2, status,0
 26420 ;; Tracked objects:
 26421 ;;		On entry : 0/0
 26422 ;;		On exit  : 0/0
 26423 ;;		Unchanged: 0/0
 26424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26427 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26428 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26429 ;;Total ram usage:        1 bytes
 26430 ;; Hardware stack levels used:    1
 26431 ;; This function calls:
 26432 ;;		Nothing
 26433 ;; This function is called by:
 26434 ;;		i2_I2C_Master_Start
 26435 ;;		i2_I2C_Master_Stop
 26436 ;;		i2_I2C_Master_Write
 26437 ;;		i2_I2C_Master_Read
 26438 ;; This function uses a non-reentrant model
 26439 ;;
 26440                           
 26441                           	psect	text97
 26442  0060D8                     __ptext97:
 26443                           	opt stack 0
 26444  0060D8                     i2_I2C_Master_Wait:
 26445                           	opt stack 19
 26446  0060D8                     i2l78:
 26447  0060D8  B4C7               	btfsc	4039,2,c	;volatile
 26448  0060DA  D7FE               	goto	i2l78
 26449  0060DC  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 26450  0060E0  0E1F               	movlw	31
 26451  0060E2  1601               	andwf	??i2_I2C_Master_Wait,f,c
 26452  0060E4  B4D8               	btfsc	status,2,c
 26453  0060E6  0012               	return	
 26454  0060E8  D7F7               	goto	i2l78
 26455  0060EA                     __end_ofi2_I2C_Master_Wait:
 26456                           	opt stack 0
 26457                           pclatu	equ	0xFFB
 26458                           pclath	equ	0xFFA
 26459                           tblptru	equ	0xFF8
 26460                           tblptrh	equ	0xFF7
 26461                           tblptrl	equ	0xFF6
 26462                           tablat	equ	0xFF5
 26463                           prodh	equ	0xFF4
 26464                           prodl	equ	0xFF3
 26465                           intcon	equ	0xFF2
 26466                           intcon2	equ	0xFF1
 26467                           intcon3	equ	0xFF0
 26468                           indf0	equ	0xFEF
 26469                           postinc0	equ	0xFEE
 26470                           fsr0h	equ	0xFEA
 26471                           fsr0l	equ	0xFE9
 26472                           wreg	equ	0xFE8
 26473                           postdec1	equ	0xFE5
 26474                           fsr1h	equ	0xFE2
 26475                           fsr1l	equ	0xFE1
 26476                           indf2	equ	0xFDF
 26477                           postinc2	equ	0xFDE
 26478                           postdec2	equ	0xFDD
 26479                           fsr2h	equ	0xFDA
 26480                           fsr2l	equ	0xFD9
 26481                           status	equ	0xFD8
 26482                           
 26483 ;; *************** function i2_delay_ms *****************
 26484 ;; Defined at:
 26485 ;;		line 752 in file "sort.c"
 26486 ;; Parameters:    Size  Location     Type
 26487 ;;  milliseconds    1    wreg     unsigned char 
 26488 ;; Auto vars:     Size  Location     Type
 26489 ;;  milliseconds    1    1[COMRAM] unsigned char 
 26490 ;; Return value:  Size  Location     Type
 26491 ;;                  1    wreg      void 
 26492 ;; Registers used:
 26493 ;;		wreg, status,2, status,0, cstack
 26494 ;; Tracked objects:
 26495 ;;		On entry : 0/0
 26496 ;;		On exit  : 0/0
 26497 ;;		Unchanged: 0/0
 26498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26500 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26501 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26502 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26503 ;;Total ram usage:        2 bytes
 26504 ;; Hardware stack levels used:    1
 26505 ;; This function calls:
 26506 ;;		Nothing
 26507 ;; This function is called by:
 26508 ;;		_printSortTimer
 26509 ;; This function uses a non-reentrant model
 26510 ;;
 26511                           
 26512                           	psect	text98
 26513  006064                     __ptext98:
 26514                           	opt stack 0
 26515  006064                     i2_delay_ms:
 26516                           	opt stack 22
 26517                           
 26518                           ;incstack = 0
 26519                           ;i2delay_ms@milliseconds stored from wreg
 26520  006064  6E02               	movwf	i2delay_ms@milliseconds,c
 26521                           
 26522                           ;sort.c: 753: while(milliseconds > 0)
 26523  006066  D008               	goto	i2l9660
 26524  006068                     i2l9656:
 26525                           
 26526                           ;sort.c: 754: {
 26527                           ;sort.c: 755: milliseconds--;
 26528  006068  0602               	decf	i2delay_ms@milliseconds,f,c
 26529                           
 26530                           ;sort.c: 756: _delay((unsigned long)((990)*(32000000/4000000.0)));
 26531  00606A  0E0B               	movlw	11
 26532  00606C  6E01               	movwf	??i2_delay_ms& (0+255),c
 26533  00606E  0E48               	movlw	72
 26534  006070                     i2u1262_47:
 26535  006070  2EE8               	decfsz	wreg,f,c
 26536  006072  D7FE               	bra	i2u1262_47
 26537  006074  2E01               	decfsz	??i2_delay_ms& (0+255),f,c
 26538  006076  D7FC               	bra	i2u1262_47
 26539  006078                     i2l9660:
 26540  006078  5002               	movf	i2delay_ms@milliseconds,w,c
 26541  00607A  B4D8               	btfsc	status,2,c
 26542  00607C  0012               	return	
 26543  00607E  D7F4               	goto	i2l9656
 26544  006080                     __end_ofi2_delay_ms:
 26545                           	opt stack 0
 26546                           pclatu	equ	0xFFB
 26547                           pclath	equ	0xFFA
 26548                           tblptru	equ	0xFF8
 26549                           tblptrh	equ	0xFF7
 26550                           tblptrl	equ	0xFF6
 26551                           tablat	equ	0xFF5
 26552                           prodh	equ	0xFF4
 26553                           prodl	equ	0xFF3
 26554                           intcon	equ	0xFF2
 26555                           intcon2	equ	0xFF1
 26556                           intcon3	equ	0xFF0
 26557                           indf0	equ	0xFEF
 26558                           postinc0	equ	0xFEE
 26559                           fsr0h	equ	0xFEA
 26560                           fsr0l	equ	0xFE9
 26561                           wreg	equ	0xFE8
 26562                           postdec1	equ	0xFE5
 26563                           fsr1h	equ	0xFE2
 26564                           fsr1l	equ	0xFE1
 26565                           indf2	equ	0xFDF
 26566                           postinc2	equ	0xFDE
 26567                           postdec2	equ	0xFDD
 26568                           fsr2h	equ	0xFDA
 26569                           fsr2l	equ	0xFD9
 26570                           status	equ	0xFD8
 26571                           
 26572 ;; *************** function i2___wmul *****************
 26573 ;; Defined at:
 26574 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 26575 ;; Parameters:    Size  Location     Type
 26576 ;;  multiplier      2    0[COMRAM] unsigned int 
 26577 ;;  multiplicand    2    2[COMRAM] unsigned int 
 26578 ;; Auto vars:     Size  Location     Type
 26579 ;;  __wmul          2    4[COMRAM] unsigned int 
 26580 ;; Return value:  Size  Location     Type
 26581 ;;                  2    0[COMRAM] unsigned int 
 26582 ;; Registers used:
 26583 ;;		wreg, status,2, status,0, prodl, prodh
 26584 ;; Tracked objects:
 26585 ;;		On entry : 0/0
 26586 ;;		On exit  : 0/0
 26587 ;;		Unchanged: 0/0
 26588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26589 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26590 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26592 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26593 ;;Total ram usage:        6 bytes
 26594 ;; Hardware stack levels used:    1
 26595 ;; This function calls:
 26596 ;;		Nothing
 26597 ;; This function is called by:
 26598 ;;		_printSortTimer
 26599 ;;		_retrieveLog
 26600 ;;		i2_printf
 26601 ;; This function uses a non-reentrant model
 26602 ;;
 26603                           
 26604                           	psect	text99
 26605  005F9C                     __ptext99:
 26606                           	opt stack 0
 26607  005F9C                     i2___wmul:
 26608                           	opt stack 21
 26609                           
 26610                           ;incstack = 0
 26611  005F9C  5001               	movf	i2___wmul@multiplier,w,c
 26612  005F9E  0203               	mulwf	i2___wmul@multiplicand,c
 26613  005FA0  CFF3 F005          	movff	prodl,i2___wmul@product
 26614  005FA4  CFF4 F006          	movff	prodh,i2___wmul@product+1
 26615  005FA8  5001               	movf	i2___wmul@multiplier,w,c
 26616  005FAA  0204               	mulwf	i2___wmul@multiplicand+1,c
 26617  005FAC  50F3               	movf	prodl,w,c
 26618  005FAE  2606               	addwf	i2___wmul@product+1,f,c
 26619  005FB0  5002               	movf	i2___wmul@multiplier+1,w,c
 26620  005FB2  0203               	mulwf	i2___wmul@multiplicand,c
 26621  005FB4  50F3               	movf	prodl,w,c
 26622  005FB6  2606               	addwf	i2___wmul@product+1,f,c
 26623  005FB8  C005  F001         	movff	i2___wmul@product,?i2___wmul
 26624  005FBC  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 26625  005FC0  0012               	return	
 26626  005FC2                     __end_ofi2___wmul:
 26627                           	opt stack 0
 26628                           pclatu	equ	0xFFB
 26629                           pclath	equ	0xFFA
 26630                           tblptru	equ	0xFF8
 26631                           tblptrh	equ	0xFF7
 26632                           tblptrl	equ	0xFF6
 26633                           tablat	equ	0xFF5
 26634                           prodh	equ	0xFF4
 26635                           prodl	equ	0xFF3
 26636                           intcon	equ	0xFF2
 26637                           intcon2	equ	0xFF1
 26638                           intcon3	equ	0xFF0
 26639                           indf0	equ	0xFEF
 26640                           postinc0	equ	0xFEE
 26641                           fsr0h	equ	0xFEA
 26642                           fsr0l	equ	0xFE9
 26643                           wreg	equ	0xFE8
 26644                           postdec1	equ	0xFE5
 26645                           fsr1h	equ	0xFE2
 26646                           fsr1l	equ	0xFE1
 26647                           indf2	equ	0xFDF
 26648                           postinc2	equ	0xFDE
 26649                           postdec2	equ	0xFDD
 26650                           fsr2h	equ	0xFDA
 26651                           fsr2l	equ	0xFD9
 26652                           status	equ	0xFD8
 26653                           
 26654 ;; *************** function i2___lwmod *****************
 26655 ;; Defined at:
 26656 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 26657 ;; Parameters:    Size  Location     Type
 26658 ;;  dividend        2    7[COMRAM] unsigned int 
 26659 ;;  divisor         2    9[COMRAM] unsigned int 
 26660 ;; Auto vars:     Size  Location     Type
 26661 ;;  __lwmod         1   11[COMRAM] unsigned char 
 26662 ;; Return value:  Size  Location     Type
 26663 ;;                  2    7[COMRAM] unsigned int 
 26664 ;; Registers used:
 26665 ;;		wreg, status,2, status,0
 26666 ;; Tracked objects:
 26667 ;;		On entry : 0/0
 26668 ;;		On exit  : 0/0
 26669 ;;		Unchanged: 0/0
 26670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26671 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26672 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26674 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26675 ;;Total ram usage:        5 bytes
 26676 ;; Hardware stack levels used:    1
 26677 ;; This function calls:
 26678 ;;		Nothing
 26679 ;; This function is called by:
 26680 ;;		_printSortTimer
 26681 ;;		i2_printf
 26682 ;; This function uses a non-reentrant model
 26683 ;;
 26684                           
 26685                           	psect	text100
 26686  005AAE                     __ptext100:
 26687                           	opt stack 0
 26688  005AAE                     i2___lwmod:
 26689                           	opt stack 21
 26690                           
 26691                           ;incstack = 0
 26692  005AAE  500A               	movf	i2___lwmod@divisor,w,c
 26693  005AB0  100B               	iorwf	i2___lwmod@divisor+1,w,c
 26694  005AB2  B4D8               	btfsc	status,2,c
 26695  005AB4  D018               	goto	i2l2045
 26696  005AB6  0E01               	movlw	1
 26697  005AB8  6E0C               	movwf	i2___lwmod@counter,c
 26698  005ABA  D004               	goto	i2l6950
 26699  005ABC                     i2l6948:
 26700  005ABC  90D8               	bcf	status,0,c
 26701  005ABE  360A               	rlcf	i2___lwmod@divisor,f,c
 26702  005AC0  360B               	rlcf	i2___lwmod@divisor+1,f,c
 26703  005AC2  2A0C               	incf	i2___lwmod@counter,f,c
 26704  005AC4                     i2l6950:
 26705  005AC4  AE0B               	btfss	i2___lwmod@divisor+1,7,c
 26706  005AC6  D7FA               	goto	i2l6948
 26707  005AC8                     i2l6952:
 26708  005AC8  500A               	movf	i2___lwmod@divisor,w,c
 26709  005ACA  5C08               	subwf	i2___lwmod@dividend,w,c
 26710  005ACC  500B               	movf	i2___lwmod@divisor+1,w,c
 26711  005ACE  5809               	subwfb	i2___lwmod@dividend+1,w,c
 26712  005AD0  A0D8               	btfss	status,0,c
 26713  005AD2  D004               	goto	i2l6956
 26714  005AD4  500A               	movf	i2___lwmod@divisor,w,c
 26715  005AD6  5E08               	subwf	i2___lwmod@dividend,f,c
 26716  005AD8  500B               	movf	i2___lwmod@divisor+1,w,c
 26717  005ADA  5A09               	subwfb	i2___lwmod@dividend+1,f,c
 26718  005ADC                     i2l6956:
 26719  005ADC  90D8               	bcf	status,0,c
 26720  005ADE  320B               	rrcf	i2___lwmod@divisor+1,f,c
 26721  005AE0  320A               	rrcf	i2___lwmod@divisor,f,c
 26722  005AE2  2E0C               	decfsz	i2___lwmod@counter,f,c
 26723  005AE4  D7F1               	goto	i2l6952
 26724  005AE6                     i2l2045:
 26725  005AE6  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
 26726  005AEA  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 26727  005AEE  0012               	return		;funcret
 26728  005AF0                     __end_ofi2___lwmod:
 26729                           	opt stack 0
 26730                           pclatu	equ	0xFFB
 26731                           pclath	equ	0xFFA
 26732                           tblptru	equ	0xFF8
 26733                           tblptrh	equ	0xFF7
 26734                           tblptrl	equ	0xFF6
 26735                           tablat	equ	0xFF5
 26736                           prodh	equ	0xFF4
 26737                           prodl	equ	0xFF3
 26738                           intcon	equ	0xFF2
 26739                           intcon2	equ	0xFF1
 26740                           intcon3	equ	0xFF0
 26741                           indf0	equ	0xFEF
 26742                           postinc0	equ	0xFEE
 26743                           fsr0h	equ	0xFEA
 26744                           fsr0l	equ	0xFE9
 26745                           wreg	equ	0xFE8
 26746                           postdec1	equ	0xFE5
 26747                           fsr1h	equ	0xFE2
 26748                           fsr1l	equ	0xFE1
 26749                           indf2	equ	0xFDF
 26750                           postinc2	equ	0xFDE
 26751                           postdec2	equ	0xFDD
 26752                           fsr2h	equ	0xFDA
 26753                           fsr2l	equ	0xFD9
 26754                           status	equ	0xFD8
 26755                           
 26756 ;; *************** function i2___lwdiv *****************
 26757 ;; Defined at:
 26758 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 26759 ;; Parameters:    Size  Location     Type
 26760 ;;  dividend        2    0[COMRAM] unsigned int 
 26761 ;;  divisor         2    2[COMRAM] unsigned int 
 26762 ;; Auto vars:     Size  Location     Type
 26763 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 26764 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 26765 ;; Return value:  Size  Location     Type
 26766 ;;                  2    0[COMRAM] unsigned int 
 26767 ;; Registers used:
 26768 ;;		wreg, status,2, status,0
 26769 ;; Tracked objects:
 26770 ;;		On entry : 0/0
 26771 ;;		On exit  : 0/0
 26772 ;;		Unchanged: 0/0
 26773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26774 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26775 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26777 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26778 ;;Total ram usage:        7 bytes
 26779 ;; Hardware stack levels used:    1
 26780 ;; This function calls:
 26781 ;;		Nothing
 26782 ;; This function is called by:
 26783 ;;		_printSortTimer
 26784 ;;		i2_printf
 26785 ;; This function uses a non-reentrant model
 26786 ;;
 26787                           
 26788                           	psect	text101
 26789  0058EC                     __ptext101:
 26790                           	opt stack 0
 26791  0058EC                     i2___lwdiv:
 26792                           	opt stack 21
 26793                           
 26794                           ;incstack = 0
 26795  0058EC  0E00               	movlw	0
 26796  0058EE  6E06               	movwf	i2___lwdiv@quotient+1,c
 26797  0058F0  0E00               	movlw	0
 26798  0058F2  6E05               	movwf	i2___lwdiv@quotient,c
 26799  0058F4  5003               	movf	i2___lwdiv@divisor,w,c
 26800  0058F6  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 26801  0058F8  B4D8               	btfsc	status,2,c
 26802  0058FA  D01C               	goto	i2l2035
 26803  0058FC  0E01               	movlw	1
 26804  0058FE  6E07               	movwf	i2___lwdiv@counter,c
 26805  005900  D004               	goto	i2l6930
 26806  005902                     i2l6928:
 26807  005902  90D8               	bcf	status,0,c
 26808  005904  3603               	rlcf	i2___lwdiv@divisor,f,c
 26809  005906  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 26810  005908  2A07               	incf	i2___lwdiv@counter,f,c
 26811  00590A                     i2l6930:
 26812  00590A  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 26813  00590C  D7FA               	goto	i2l6928
 26814  00590E                     i2l6932:
 26815  00590E  90D8               	bcf	status,0,c
 26816  005910  3605               	rlcf	i2___lwdiv@quotient,f,c
 26817  005912  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 26818  005914  5003               	movf	i2___lwdiv@divisor,w,c
 26819  005916  5C01               	subwf	i2___lwdiv@dividend,w,c
 26820  005918  5004               	movf	i2___lwdiv@divisor+1,w,c
 26821  00591A  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 26822  00591C  A0D8               	btfss	status,0,c
 26823  00591E  D005               	goto	i2l6940
 26824  005920  5003               	movf	i2___lwdiv@divisor,w,c
 26825  005922  5E01               	subwf	i2___lwdiv@dividend,f,c
 26826  005924  5004               	movf	i2___lwdiv@divisor+1,w,c
 26827  005926  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 26828  005928  8005               	bsf	i2___lwdiv@quotient,0,c
 26829  00592A                     i2l6940:
 26830  00592A  90D8               	bcf	status,0,c
 26831  00592C  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 26832  00592E  3203               	rrcf	i2___lwdiv@divisor,f,c
 26833  005930  2E07               	decfsz	i2___lwdiv@counter,f,c
 26834  005932  D7ED               	goto	i2l6932
 26835  005934                     i2l2035:
 26836  005934  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 26837  005938  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 26838  00593C  0012               	return		;funcret
 26839  00593E                     __end_ofi2___lwdiv:
 26840                           	opt stack 0
 26841                           pclatu	equ	0xFFB
 26842                           pclath	equ	0xFFA
 26843                           tblptru	equ	0xFF8
 26844                           tblptrh	equ	0xFF7
 26845                           tblptrl	equ	0xFF6
 26846                           tablat	equ	0xFF5
 26847                           prodh	equ	0xFF4
 26848                           prodl	equ	0xFF3
 26849                           intcon	equ	0xFF2
 26850                           intcon2	equ	0xFF1
 26851                           intcon3	equ	0xFF0
 26852                           indf0	equ	0xFEF
 26853                           postinc0	equ	0xFEE
 26854                           fsr0h	equ	0xFEA
 26855                           fsr0l	equ	0xFE9
 26856                           wreg	equ	0xFE8
 26857                           postdec1	equ	0xFE5
 26858                           fsr1h	equ	0xFE2
 26859                           fsr1l	equ	0xFE1
 26860                           indf2	equ	0xFDF
 26861                           postinc2	equ	0xFDE
 26862                           postdec2	equ	0xFDD
 26863                           fsr2h	equ	0xFDA
 26864                           fsr2l	equ	0xFD9
 26865                           status	equ	0xFD8
 26866                           
 26867 ;; *************** function i2___awmod *****************
 26868 ;; Defined at:
 26869 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 26870 ;; Parameters:    Size  Location     Type
 26871 ;;  dividend        2    0[COMRAM] int 
 26872 ;;  divisor         2    2[COMRAM] int 
 26873 ;; Auto vars:     Size  Location     Type
 26874 ;;  __awmod         1    5[COMRAM] unsigned char 
 26875 ;;  __awmod         1    4[COMRAM] unsigned char 
 26876 ;; Return value:  Size  Location     Type
 26877 ;;                  2    0[COMRAM] int 
 26878 ;; Registers used:
 26879 ;;		wreg, status,2, status,0
 26880 ;; Tracked objects:
 26881 ;;		On entry : 0/0
 26882 ;;		On exit  : 0/0
 26883 ;;		Unchanged: 0/0
 26884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26885 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26886 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26887 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26888 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26889 ;;Total ram usage:        6 bytes
 26890 ;; Hardware stack levels used:    1
 26891 ;; This function calls:
 26892 ;;		Nothing
 26893 ;; This function is called by:
 26894 ;;		_printSortTimer
 26895 ;; This function uses a non-reentrant model
 26896 ;;
 26897                           
 26898                           	psect	text102
 26899  0055CC                     __ptext102:
 26900                           	opt stack 0
 26901  0055CC                     i2___awmod:
 26902                           	opt stack 22
 26903                           
 26904                           ;incstack = 0
 26905  0055CC  0E00               	movlw	0
 26906  0055CE  6E06               	movwf	i2___awmod@sign,c
 26907  0055D0  AE02               	btfss	i2___awmod@dividend+1,7,c
 26908  0055D2  D006               	goto	i2l9670
 26909  0055D4  6C01               	negf	i2___awmod@dividend,c
 26910  0055D6  1E02               	comf	i2___awmod@dividend+1,f,c
 26911  0055D8  B0D8               	btfsc	status,0,c
 26912  0055DA  2A02               	incf	i2___awmod@dividend+1,f,c
 26913  0055DC  0E01               	movlw	1
 26914  0055DE  6E06               	movwf	i2___awmod@sign,c
 26915  0055E0                     i2l9670:
 26916  0055E0  AE04               	btfss	i2___awmod@divisor+1,7,c
 26917  0055E2  D004               	goto	i2l9674
 26918  0055E4  6C03               	negf	i2___awmod@divisor,c
 26919  0055E6  1E04               	comf	i2___awmod@divisor+1,f,c
 26920  0055E8  B0D8               	btfsc	status,0,c
 26921  0055EA  2A04               	incf	i2___awmod@divisor+1,f,c
 26922  0055EC                     i2l9674:
 26923  0055EC  5003               	movf	i2___awmod@divisor,w,c
 26924  0055EE  1004               	iorwf	i2___awmod@divisor+1,w,c
 26925  0055F0  B4D8               	btfsc	status,2,c
 26926  0055F2  D018               	goto	i2l9690
 26927  0055F4  0E01               	movlw	1
 26928  0055F6  6E05               	movwf	i2___awmod@counter,c
 26929  0055F8  D004               	goto	i2l9680
 26930  0055FA                     i2l9678:
 26931  0055FA  90D8               	bcf	status,0,c
 26932  0055FC  3603               	rlcf	i2___awmod@divisor,f,c
 26933  0055FE  3604               	rlcf	i2___awmod@divisor+1,f,c
 26934  005600  2A05               	incf	i2___awmod@counter,f,c
 26935  005602                     i2l9680:
 26936  005602  AE04               	btfss	i2___awmod@divisor+1,7,c
 26937  005604  D7FA               	goto	i2l9678
 26938  005606                     i2l9682:
 26939  005606  5003               	movf	i2___awmod@divisor,w,c
 26940  005608  5C01               	subwf	i2___awmod@dividend,w,c
 26941  00560A  5004               	movf	i2___awmod@divisor+1,w,c
 26942  00560C  5802               	subwfb	i2___awmod@dividend+1,w,c
 26943  00560E  A0D8               	btfss	status,0,c
 26944  005610  D004               	goto	i2l9686
 26945  005612  5003               	movf	i2___awmod@divisor,w,c
 26946  005614  5E01               	subwf	i2___awmod@dividend,f,c
 26947  005616  5004               	movf	i2___awmod@divisor+1,w,c
 26948  005618  5A02               	subwfb	i2___awmod@dividend+1,f,c
 26949  00561A                     i2l9686:
 26950  00561A  90D8               	bcf	status,0,c
 26951  00561C  3204               	rrcf	i2___awmod@divisor+1,f,c
 26952  00561E  3203               	rrcf	i2___awmod@divisor,f,c
 26953  005620  2E05               	decfsz	i2___awmod@counter,f,c
 26954  005622  D7F1               	goto	i2l9682
 26955  005624                     i2l9690:
 26956  005624  5006               	movf	i2___awmod@sign,w,c
 26957  005626  B4D8               	btfsc	status,2,c
 26958  005628  D004               	goto	i2l9694
 26959  00562A  6C01               	negf	i2___awmod@dividend,c
 26960  00562C  1E02               	comf	i2___awmod@dividend+1,f,c
 26961  00562E  B0D8               	btfsc	status,0,c
 26962  005630  2A02               	incf	i2___awmod@dividend+1,f,c
 26963  005632                     i2l9694:
 26964  005632  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 26965  005636  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 26966  00563A  0012               	return	
 26967  00563C                     __end_ofi2___awmod:
 26968                           	opt stack 0
 26969                           pclatu	equ	0xFFB
 26970                           pclath	equ	0xFFA
 26971                           tblptru	equ	0xFF8
 26972                           tblptrh	equ	0xFF7
 26973                           tblptrl	equ	0xFF6
 26974                           tablat	equ	0xFF5
 26975                           prodh	equ	0xFF4
 26976                           prodl	equ	0xFF3
 26977                           intcon	equ	0xFF2
 26978                           intcon2	equ	0xFF1
 26979                           intcon3	equ	0xFF0
 26980                           indf0	equ	0xFEF
 26981                           postinc0	equ	0xFEE
 26982                           fsr0h	equ	0xFEA
 26983                           fsr0l	equ	0xFE9
 26984                           wreg	equ	0xFE8
 26985                           postdec1	equ	0xFE5
 26986                           fsr1h	equ	0xFE2
 26987                           fsr1l	equ	0xFE1
 26988                           indf2	equ	0xFDF
 26989                           postinc2	equ	0xFDE
 26990                           postdec2	equ	0xFDD
 26991                           fsr2h	equ	0xFDA
 26992                           fsr2l	equ	0xFD9
 26993                           status	equ	0xFD8
 26994                           pclatu	equ	0xFFB
 26995                           pclath	equ	0xFFA
 26996                           tblptru	equ	0xFF8
 26997                           tblptrh	equ	0xFF7
 26998                           tblptrl	equ	0xFF6
 26999                           tablat	equ	0xFF5
 27000                           prodh	equ	0xFF4
 27001                           prodl	equ	0xFF3
 27002                           intcon	equ	0xFF2
 27003                           intcon2	equ	0xFF1
 27004                           intcon3	equ	0xFF0
 27005                           indf0	equ	0xFEF
 27006                           postinc0	equ	0xFEE
 27007                           fsr0h	equ	0xFEA
 27008                           fsr0l	equ	0xFE9
 27009                           wreg	equ	0xFE8
 27010                           postdec1	equ	0xFE5
 27011                           fsr1h	equ	0xFE2
 27012                           fsr1l	equ	0xFE1
 27013                           indf2	equ	0xFDF
 27014                           postinc2	equ	0xFDE
 27015                           postdec2	equ	0xFDD
 27016                           fsr2h	equ	0xFDA
 27017                           fsr2l	equ	0xFD9
 27018                           status	equ	0xFD8
 27019                           
 27020                           	psect	rparam
 27021  0000                     pclatu	equ	0xFFB
 27022                           pclath	equ	0xFFA
 27023                           tblptru	equ	0xFF8
 27024                           tblptrh	equ	0xFF7
 27025                           tblptrl	equ	0xFF6
 27026                           tablat	equ	0xFF5
 27027                           prodh	equ	0xFF4
 27028                           prodl	equ	0xFF3
 27029                           intcon	equ	0xFF2
 27030                           intcon2	equ	0xFF1
 27031                           intcon3	equ	0xFF0
 27032                           indf0	equ	0xFEF
 27033                           postinc0	equ	0xFEE
 27034                           fsr0h	equ	0xFEA
 27035                           fsr0l	equ	0xFE9
 27036                           wreg	equ	0xFE8
 27037                           postdec1	equ	0xFE5
 27038                           fsr1h	equ	0xFE2
 27039                           fsr1l	equ	0xFE1
 27040                           indf2	equ	0xFDF
 27041                           postinc2	equ	0xFDE
 27042                           postdec2	equ	0xFDD
 27043                           fsr2h	equ	0xFDA
 27044                           fsr2l	equ	0xFD9
 27045                           status	equ	0xFD8
 27046                           
 27047                           	psect	temp
 27048  00007E                     btemp:
 27049                           	opt stack 0
 27050  00007E                     	ds	1
 27051  0000                     int$flags	set	btemp
 27052                           pclatu	equ	0xFFB
 27053                           pclath	equ	0xFFA
 27054                           tblptru	equ	0xFF8
 27055                           tblptrh	equ	0xFF7
 27056                           tblptrl	equ	0xFF6
 27057                           tablat	equ	0xFF5
 27058                           prodh	equ	0xFF4
 27059                           prodl	equ	0xFF3
 27060                           intcon	equ	0xFF2
 27061                           intcon2	equ	0xFF1
 27062                           intcon3	equ	0xFF0
 27063                           indf0	equ	0xFEF
 27064                           postinc0	equ	0xFEE
 27065                           fsr0h	equ	0xFEA
 27066                           fsr0l	equ	0xFE9
 27067                           wreg	equ	0xFE8
 27068                           postdec1	equ	0xFE5
 27069                           fsr1h	equ	0xFE2
 27070                           fsr1l	equ	0xFE1
 27071                           indf2	equ	0xFDF
 27072                           postinc2	equ	0xFDE
 27073                           postdec2	equ	0xFDD
 27074                           fsr2h	equ	0xFDA
 27075                           fsr2l	equ	0xFD9
 27076                           status	equ	0xFD8


Data Sizes:
    Strings     1331
    Constant    27
    Data        8
    BSS         152
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     84     125
    BANK0           128     90     128
    BANK1           256      0      81
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_129(CODE[7]), ID@res(BANK0[4]), ID@res1(BANK0[2]), count_total(BANK0[2]), 
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_128(CODE[18]), STR_127(CODE[18]), STR_126(CODE[17]), STR_125(CODE[17]), 
		 -> STR_124(CODE[15]), STR_123(CODE[15]), STR_122(CODE[18]), STR_121(CODE[15]), 
		 -> STR_120(CODE[18]), STR_119(CODE[18]), STR_118(CODE[17]), STR_117(CODE[17]), 
		 -> STR_116(CODE[17]), STR_115(CODE[17]), STR_114(CODE[17]), STR_113(CODE[17]), 
		 -> STR_112(CODE[18]), STR_111(CODE[17]), STR_110(CODE[15]), STR_109(CODE[15]), 
		 -> STR_108(CODE[15]), STR_107(CODE[17]), STR_106(CODE[17]), STR_105(CODE[17]), 
		 -> STR_104(CODE[16]), STR_103(CODE[17]), STR_102(CODE[17]), STR_101(CODE[17]), 
		 -> STR_100(CODE[17]), STR_99(CODE[17]), STR_98(CODE[17]), STR_97(CODE[15]), 
		 -> STR_96(CODE[11]), STR_95(CODE[17]), STR_94(CODE[11]), STR_93(CODE[17]), 
		 -> STR_92(CODE[14]), STR_91(CODE[15]), STR_90(CODE[14]), STR_89(CODE[10]), 
		 -> STR_88(CODE[9]), STR_87(CODE[9]), STR_86(CODE[10]), STR_85(CODE[10]), 
		 -> STR_84(CODE[16]), STR_83(CODE[15]), STR_82(CODE[3]), STR_81(CODE[18]), 
		 -> STR_80(CODE[3]), STR_79(CODE[18]), STR_78(CODE[14]), STR_77(CODE[8]), 
		 -> STR_76(CODE[14]), STR_75(CODE[15]), STR_74(CODE[12]), STR_73(CODE[14]), 
		 -> STR_72(CODE[17]), STR_71(CODE[14]), STR_70(CODE[15]), STR_69(CODE[17]), 
		 -> STR_68(CODE[17]), STR_67(CODE[7]), STR_66(CODE[21]), STR_65(CODE[9]), 
		 -> STR_64(CODE[14]), STR_63(CODE[24]), STR_50(CODE[17]), STR_49(CODE[17]), 
		 -> STR_48(CODE[17]), STR_47(CODE[17]), STR_46(CODE[17]), STR_45(CODE[17]), 
		 -> STR_44(CODE[17]), STR_43(CODE[17]), STR_42(CODE[17]), STR_41(CODE[17]), 
		 -> STR_40(CODE[17]), STR_39(CODE[17]), STR_38(CODE[17]), STR_37(CODE[17]), 
		 -> STR_36(CODE[17]), STR_35(CODE[17]), STR_34(CODE[17]), STR_33(CODE[17]), 
		 -> STR_32(CODE[17]), STR_31(CODE[17]), STR_30(CODE[17]), STR_29(CODE[3]), 
		 -> STR_28(CODE[17]), STR_27(CODE[17]), STR_26(CODE[17]), STR_25(CODE[17]), 
		 -> STR_24(CODE[17]), STR_23(CODE[14]), STR_22(CODE[10]), STR_21(CODE[24]), 
		 -> STR_7(CODE[7]), STR_6(CODE[17]), STR_5(CODE[18]), STR_4(CODE[16]), 
		 -> STR_3(CODE[18]), STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_updateMenu
    _updateServoStates->i2_updateServoPosition
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2_lcdInst->i2_lcdNibble
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2___lwmod
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait
    i2___lwmod->i2___lwdiv

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_ID
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getMAG->_readMAG
    _getIR->_readIR
    _ID->_printf
    _readIR->_readADC
    _readCOND->_readADC
    ___ftge->___awtoft
    ___awtoft->___awdiv
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _initEEPROM->_EEPROM_write
    _EEPROM_write->_printf
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _arm->_printf
    _algorithmTest->_printf
    _actuatorTest->_printf
    _SpeedTest->_printf
    _PortTestPusher->_printf
    _PortTestDC->_printf
    _PlatformTest->_printf
    _BothServos->_printf
    _initServos->_updateServoPosition
    _BlockerTest->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  253090
                    _I2C_Master_Init
                               _Test
                                 _UI
                         _initEEPROM
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   40267
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                             20    20      0   19848
                                             49 BANK0     20    20      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                             _getMAG
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _getIR                                                5     3      2     924
                                              6 BANK0      5     3      2
                             _readIR
 ---------------------------------------------------------------------------------
 (2) _ID                                                  37    37      0   15026
                                             43 BANK0     37    37      0
                            ___awdiv
                           ___awtoft
                             ___ftge
                           _delay_ms
                            _lcdInst
                             _printf
                           _readCOND
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _readIR                                               4     2      2     770
                                              2 BANK0      4     2      2
                            _readADC
 ---------------------------------------------------------------------------------
 (3) _readCOND                                             4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     520
                                             18 BANK0      9     3      6
                            ___awdiv (ARG)
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2236
                                             14 BANK0      4     1      3
                            ___awdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1953
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    5393
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   11658
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   23456
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   22542
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _initEEPROM                                           0     0      0   10911
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   10911
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   47532
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   13455
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    9087
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    9087
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1292
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1196
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0  118153
                                             70 BANK0      2     2      0
                        _BlockerTest
                         _BothServos
                       _PlatformTest
                         _PortTestDC
                     _PortTestPusher
                          _SpeedTest
                       _actuatorTest
                      _algorithmTest
                                _arm
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           6     6      0    9244
                                             43 BANK0      6     6      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _arm                                                  3     3      0    9156
                                             43 BANK0      3     3      0
                            _lcdInst
                             _printf
                        _stopSignals
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    9087
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   15723
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _SpeedTest                                            1     1      0    9087
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTestPusher                                       1     1      0    9087
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTestDC                                           1     1      0    9087
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PlatformTest                                        12    12      0    9360
                                             43 BANK0     12    12      0
                            _lcdInst
                             _printf
                            _readADC
                        _stopSignals
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   19873
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                        _stopSignals
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    5393
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    5393
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _BlockerTest                                         10    10      0    9362
                                             43 BANK0     10    10      0
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    8952
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     366
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   80040
                                             68 COMRAM    16    16      0
                     _printSortTimer
                     _updateArmState
                         _updateMenu
                  _updateServoStates
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) _updateServoStates                                    2     2      0     593
                                              8 COMRAM     2     2      0
              i2_updateServoPosition
 ---------------------------------------------------------------------------------
 (9) i2_updateServoPosition                                8     4      4     593
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   69711
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) i2_change_state_to_menu_start                         0     0      0    7536
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printRTC                                          25    25      0    4501
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (10) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30350
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3035
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3035
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3035
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3035
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3035
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3035
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3035
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3035
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3035
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3035
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printf                                            33    21     12    2900
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _updateArmState                                       2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    2200
                                             12 COMRAM    33    33      0
                          i2___awmod
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                         i2_delay_ms
                           i2_getRTC
 ---------------------------------------------------------------------------------
 (10) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i2_delay_ms                                           2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (10) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) i2___lwmod                                           5     1      4     367
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___lwdiv                                           7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (9) i2___awmod                                            6     2      4     452
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BlockerTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _stopSignals
       _updateServoPosition
     _PlatformTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _stopSignals
     _PortTestDC
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTestPusher
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _SpeedTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _arm
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _stopSignals
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initEEPROM
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       ___awdiv
         ___awmod (ARG)
       ___awtoft
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       ___ftge
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
       _delay_ms
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readCOND
         _readADC
       _readIR
         _readADC
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _getMAG
         _readMAG
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _readIR
         _readADC
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___awmod
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2___wmul
     i2_delay_ms
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
   _updateArmState
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
           i2___lwmod
             i2___lwdiv (ARG)
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
           i2___lwmod
             i2___lwdiv (ARG)
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
           i2___lwmod
             i2___lwdiv (ARG)
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
           i2___lwmod
             i2___lwdiv (ARG)
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
           i2___lwmod
             i2___lwdiv (ARG)
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
           i2___lwmod
             i2___lwdiv (ARG)
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
           i2___lwmod
             i2___lwdiv (ARG)
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
           i2___lwmod
             i2___lwdiv (ARG)
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
           i2___lwmod
             i2___lwdiv (ARG)
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
           i2___lwmod
             i2___lwdiv (ARG)
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
           i2___lwmod
             i2___lwdiv (ARG)
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
   _updateServoStates
     i2_updateServoPosition
   i2_change_state_to_menu_start
     i2_lcdInst
       i2_lcdNibble
     i2_printRTC
       i2_getRTC
         i2_I2C_Master_Read
           i2_I2C_Master_Wait
         i2_I2C_Master_Start
           i2_I2C_Master_Wait
         i2_I2C_Master_Stop
           i2_I2C_Master_Wait
         i2_I2C_Master_Write
           i2_I2C_Master_Wait
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
       i2_strcpy
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      51       7       31.6%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     54      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     14E      34        0.0%
DATA                 0      0     14E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Wed Apr 12 12:32:46 2017

                                    _i 013D                     i2_I2C_Master_Start 6156  
                   i2_I2C_Master_Write 612C                                     _ID 1192  
                                   l78 60C4                       _f_panning_to_bin 0065  
                          __CFG_CPD$ON 000000                                     _UI 0012  
                         ___awdiv@sign 008B                                     _up 0075  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0001  
                          __CFG_BORV$3 000000                     EEPROM_read@address 0080  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
               __end_of_updateArmState 5B2A                                    ID@i 00B9  
                                  ID@j 00CC                                    ID@n 00CE  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l200 0102  
                                  l192 00E2                                    l195 00E6  
                                  l515 4D88                                    l634 34BA  
                                  l804 1910                                    l902 182A  
                                  l814 19E4                                    l824 1AFE  
                                  l816 1A38                                    l817 1A1E  
                                  l851 1D1A                                    l827 1B38  
                                  l861 1E20                                    l853 1D2C  
                                  l845 1DCA                                    l837 1BCA  
                                  l870 12D2                                    l854 1D40  
                                  l846 1CF6                                    l855 1D54  
                                  l839 1C2C                                    l872 1340  
                                  l856 1D68                                    l857 1D7E  
                                  l849 1DC8                                    l875 15DE  
                                  l876 145A                                    l879 14BA  
                                  l969 542C                                    l898 1778  
                                  l899 1792                           __CFG_CPB$OFF 000000  
                                  _PR2 000FCB                                    _PEN 007E2A  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
            __end_of_updateServoStates 4162                         ?_machineConfig 0001  
                  ?i2_I2C_Master_Write 0002                                    _arm 47A0  
                                  _log 00F0                                    _sel 00FD  
                                  _var 0147                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
                  __end_of_BlockerTest 4328                    _log_count_can_w_lab 013F  
                           i2_delay_ms 6064        __end_of_change_state_to_menu_11 5D58  
      __end_of_change_state_to_menu_12 5B9A        __end_of_change_state_to_menu_22 5B62  
      __end_of_change_state_to_menu_23 5D28           _f_can_coming_to_distribution 0133  
                       ??_Distribution 0088        __end_of_change_state_to_logs_11 5E48  
      __end_of_change_state_to_logs_12 5E18        __end_of_change_state_to_logs_22 5DE8  
      __end_of_change_state_to_logs_23 5EA4        __end_of_change_state_to_logs_33 5DB8  
      __end_of_change_state_to_logs_34 5D88                                   ??_ID 00AB  
                                 ??_UI 00C4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1310 4ACA  
                                 l1400 0EB0                                   l2035 5550  
                                 l1307 4AC6                                   l1412 104A  
                                 l1340 28A4                                   l1316 26B2  
                                 l1180 6090                                   l2045 57CC  
                                 l1333 28A2                                   l1325 279A  
                                 l1430 4B82                                   l1511 4264  
                                 l1319 26B6                                   l1167 48C0  
                                 l1336 289C                                   l1441 4BF4  
                                 l1417 1120                                   l1370 09EE  
                                 l1346 2938                                   l1363 0944  
                                 l1531 4890                                   l1516 42B0  
                                 l1540 488A                                   l1532 4852  
                                 l1284 46E0                                   l1517 42CA  
                                 l1373 0A54                                   l1189 4456  
                                 l1446 4C08                                   l1374 0AA2  
                                 l1366 0948                                   l1375 0B08  
                                 l1287 4700                                   l1464 33F6  
                                 l1376 0B56                                   l1473 3384  
                                 l1449 4C0E                                   l1474 339E  
                                 l1554 588A                                   l1548 587A  
                                 l1477 33D2                                   ?_arm 0001  
                                 l1478 33EC                                   l1494 533A  
                                 l1479 33F0                                   l1487 532A  
                                 l1588 2074                                   l1852 4666  
                                 l7100 21A2                                   l7020 1F4E  
                                 l7012 1F1C                                   l7004 1EA0  
                                 l7102 21AE                                   l7110 21DC  
                                 l7030 1FC6                                   l7022 1F5A  
                                 l1982 4FDE                                   l7112 21E2  
                                 l7040 201C                                   l7032 1FD2  
                                 l7024 1F60                                   l7106 21C8  
                                 l7042 2034                                   l7034 1FD8  
                                 l7130 52A0                                   l7122 5BA4  
                                 l7202 468C                                   l7116 223A  
                                 l7036 1FF0                                   l7140 52D6  
                                 l7124 5BB0                                   l7212 4F62  
                                 l7062 20C6                                   l7046 203A  
                                 l7118 2246                                   l7134 52B6  
                                 l7214 4F72                                   l8110 18CE  
                                 l7064 20CC                                   l7224 4FCC  
                                 l7216 4F78                                   l8120 1918  
                                 l7082 212A                                   l7058 20AC  
                                 l9010 0E70                                   l8202 1ACA  
                                 l7076 2108                                   l7164 5446  
                                 l9100 1032                                   l9020 0E98  
                                 l7180 45CA                                   l8220 1B22  
                                 l7094 2186                                   l7086 2162  
                                 l7158 5414                                   l9014 0E88  
                                 l9006 0E66                                   l7190 4658  
                                 l7182 45FA                                   l7174 45A8  
                                 l8310 1DC0                                   l8230 1B52  
                                 _ADIE 007CEE                                   l7088 216C  
                                 l9120 109A                                   l9016 0E8E  
                                 l7440 353C                                   l7432 34C4  
                                 l8240 1BA2                                   l8208 1AE8  
                                 l8136 195E                                   l9130 10C2  
                                 l9042 0F1A                                   l9034 0EF8  
                                 l9210 4844                                   l7450 35D2  
                                 l7442 355A                                   l7434 34E2  
                                 l7426 3438                                   l7186 461A  
                                 l7178 45BC                                   l8242 1BAE  
                                 l8234 1B78                                   l8218 1B18  
                                 l8330 1E22                                   l8170 1A08  
                                 l9124 10A4                                   l9060 0F7C  
                                 l9052 0F42                                   l9044 0F20  
                                 l9220 487C                                   l9204 4814  
                                 l7452 35F0                                   l7444 3578  
                                 l7436 3500                                   l7460 368A  
                                 l7196 4670                                   l7188 464A  
                                 l8420 1418                                   l7612 5014  
                                 l8308 1D8A                                   l8316 1DD2  
                                 l9134 10CC                                   l9070 0FA4  
                                 l9038 0F02                                   l7454 360E  
                                 l7446 3596                                   l7438 351E  
                                 l8430 1466                                   l8254 1C06  
                                 l8246 1BCE                                   l8262 1C88  
                                 l8158 19CE                                   l9160 114A  
                                 l9144 110A                                   l9128 10BC  
                                 l9064 0F86                                   l9048 0F2A  
                                 l9208 483A                                   l9216 4858  
                                 l6808 5E6E                                   l7448 35B4  
                                 l7712 5396                                   l7608 4FFE  
                                 l8280 1D02                                   l8328 1E14  
                                 l8168 19FE                                   l6842 5500  
                                 l6826 5F1C                                   l9402 33A4  
                                 l9170 1172                                   l9154 113A  
                                 l9138 10E4                                   l9090 100A  
                                 l9074 0FAE                                   l9218 4872  
                                 l7458 362C                                   l7802 4E2E  
                                 l8530 174C                                   l8514 1704  
                                 l8450 158C                                   l8418 140E  
                                 l8362 122A                                   l7618 508A  
                                 l6844 550C                                   l9324 3164  
                                 l9260 4BFC                                   l9252 4BC0  
                                 l9164 1162                                   l9156 1140  
                                 l9068 0F9E                                   l7900 5258  
                                 l8460 15CA                                   l8364 1232  
                                 l7724 53C8                                   l7708 5380  
                                 l6854 5542                                   l6846 5512  
                                 l6870 57BE                                   l6862 5788  
                                 l9342 3214                                   l9174 118A  
                                 l9166 1168                                   l9094 1022  
                                 l9086 1000                                   l9078 0FC6  
                                 l7670 496E                                   l7654 492C  
                                 l7662 494E                                   l8534 1762  
                                 l8526 173C                                   l8518 1714  
                                 l6864 5794                                   l6784 5EE4  
                                 l9408 33BC                                   l9344 321A  
                                 l9256 4BE8                                   l9096 1028  
                                 l8800 09DA                                   l7760 4ED2  
                                 l7752 4EA8                                   l7808 4E72  
                                 l7680 5F42                                   l7728 53E0  
                                 l6866 579A                                   l6786 5EF6  
                                 l9362 32CA                                   l8714 2934  
                                 l7770 4F08                                   l7762 4ED8  
                                 l7746 4E92                                   l9610 50DA  
                                 l9602 50B6                                   l7666 4964  
                                 l7658 4936                                   l6970 51B0  
                                 l8490 1670                                   l8458 15C2  
                                 l8378 128E                                   l9380 332C  
                                 l8708 28F2                                   l9612 50E6  
                                 l8572 499E                                   l7676 5F2C  
                                 l6964 5168                                   l8476 1624  
                                 l8492 1678                                   l8396 12FC  
                                 l9382 3342                                   l9374 330C  
                                 l9286 5362                                   l8910 0C78  
                                 l8902 0C56                                   l8750 2A32  
                                 l8734 29B4                                   l8726 2984  
                                 l7758 4EC6                                   l7774 4F16  
                                 l9614 50EC                                   l9622 511E  
                                 l9606 50C6                                   l8574 49B8  
                                 l8582 4A06                                   l7790 5A86  
                                 l6966 518C                                   l8558 17E8  
                                 l8566 182C                                   l6992 1E50  
                                 l9392 336E                                   l8920 0CA0  
                                 l8912 0C7E                                   l8648 26DC  
                                 l9800 0258                                   l8576 49D2  
                                 l8584 4A34                                   l6994 1E62  
                                 l9570 4290                                   l9562 4266  
                                 l9538 41EC                                   l9546 4232  
                                 l9386 3356                                   l8906 0C60  
                                 l8746 29FC                                   l8738 29EA  
                                 l8666 2794                                   l7778 4F2A  
                                 l9626 5132                                   l9618 5110  
                                 l9810 0282                                   l9730 00FE  
                                 l7890 5216                                   l8578 49EC  
                                 l6988 1E3C                                   l9572 429A  
                                 l9564 4276                                   l8932 0CE4  
                                 l8916 0C88                                   l8668 27A2  
                                 l9804 0270                                   l9740 013A  
                                 l6998 1E6C                                   l9582 42CC  
                                 l8942 0D0C                                   l8790 09B2  
                                 l8686 285A                                   l9910 063E  
                                 l9814 028C                                   l7894 522C  
                                 l7798 4DEE                                   l9584 42DC  
                                 l9592 4322                                   l8936 0CFC  
                                 l8928 0CDA                                   l8880 0BDC  
                                 l8792 09B8                                   l9840 0350  
                                 l9752 016E                                   l9744 0144  
                                 l9736 0128                                   l8962 0D80  
                                 l8954 0D5E                                   l8946 0D24  
                                 l8938 0D02                                   l8890 0C04  
                                 l9914 0648                                   l9850 03E6  
                                 l9842 036E                                   l9834 02F6  
                                 l9818 02A4                                   l8980 0DE2  
                                 l8972 0DA8                                   l8964 0D86  
                                 l8884 0BF4                                   l8876 0BD2  
                                 l8796 09C2                                   l9932 0694  
                                 l9924 0672                                   l9852 0404  
                                 l9844 038C                                   l9836 0314  
                                 l9772 01D6                                   l9748 015C  
                                 l8990 0E0A                                   l8958 0D68  
                                 l8894 0C1C                                   l8886 0BFA  
                                 l9950 06FA                                   l9918 0660  
                                 l9854 0422                                   l9846 03AA  
                                 l9838 0332                                   l9862 047C  
                                 l9766 01C6                                   l9782 01FC  
                                 STR_1 FB89                                   l8984 0DEC  
                                 l8968 0D90                                   l9928 067C  
                                 l9872 052C                                   l9856 0440  
                                 l9848 03C8                                   l9864 04E0  
                                 l9776 01EE                                   l9768 01CC  
                                 STR_2 FF4E                                   STR_3 FB77  
                                 l8994 0E14                                   l9954 0704  
                                 l9890 0578                                   l9882 0556  
                                 l9858 045E                                   STR_4 FE63  
                                 STR_5 FB77                                   l8988 0E04  
                                 l9972 0750                                   l9964 072E  
                                 l9876 0544                                   l9868 0522  
                                 l9796 024E                                   STR_6 FDFF  
                                 STR_7 FFC4                                   l8998 0E2C  
                                 l9990 07B6                                   l9958 071C  
                                 l9886 0560                                   STR_8 FFDB  
                                 STR_9 FFCB                                   l9968 0738  
                                 l9994 07C0                                   l9998 07D8  
              ??i2_updateServoPosition 0005                                   _LATA 000F89  
                                 _LATB 000F8A                                   _LATC 000F8B  
                                 _LATD 000F8C                                   _LATE 000F8D  
                                 u7000 18DA                                   _PEIE 007F96  
                                 u7020 1910                                   u5520 5E6C  
                                 u7018 18DE                                   u7300 1C3E  
                                 _RCEN 007E2B                                   u8030 29D8  
                                 u6510 59CE                                   u6520 59D0  
                                 u5720 5182                                   u7320 1C64  
                                 u8130 09EE                                   u5730 5184  
                                 u7330 1C66                                   u5820 1F9A  
                                 u9020 32F4                                   u8060 2A20  
                                 u5740 51A6                                   u5741 51A2  
                                 u8150 0AA2                                   u8038 29DC  
                                 u6550 34BA                                   u5750 51A8  
                                 u7510 138E                                   u7318 1C42  
                                 u6535 5806                                   u5760 5A1A  
                                 u7600 153A                                   u7520 1390  
                                 u5761 5A16                                   u8170 0B56  
                                 u5770 5A1C                                   u7610 153C  
                                 u7530 13E2                                   u5827 1F90  
                                 u9211 425A                                   u5860 2012  
                                 u9220 425C                                   u8068 2A24  
                                 u7540 13E4                                   i2l78 60D8  
                                 u9070 333A                                   u9038 32F8  
                                 u9080 3352                                   u7800 17F4  
                                 u9081 334E                                   u7570 1458  
                                 u5867 2008                                   u8700 4868  
                                 u7820 182A                                   u9261 4286  
                                 u9270 4288                                   u8710 486A  
                                 u7920 27E4                                   u7921 27E0  
                                 u8810 4BD6                                   u8650 4830  
                                 u7930 27E6                                   u7818 17F8  
                                 u8660 4832                                   u7880 271E  
                                 u7970 2884                                   u7890 2720  
                                 u8940 31A6                                   u8828 4BDA  
                                 u8780 4BAC                                   u8950 31A8  
                                 u8970 325C                                   u8980 325E  
                                 u7988 2888                                   u8798 4BB0  
                                 _RSEN 007E29                            _stopSignals 6048  
                                 _Test 469A                                   _back 005F  
                                 _main 4CE6                                   _down 0061  
                         ___ftpack@arg 0080                                   _keys FAB1  
                         ___ftpack@exp 0083                                   _time 011C  
                                 fsr0h 000FEA                                   fsr1h 000FE2  
                   i2___lwdiv@quotient 0005                                   indf0 000FEF  
                                 fsr2h 000FDA                                   fsr0l 000FE9  
                                 indf2 000FDF                                   fsr1l 000FE1  
                                 fsr2l 000FD9                                   _sort 5FE6  
                                 btemp 007E                   ??i2_I2C_Master_Start 0002  
                 ??i2_I2C_Master_Write 0004                                   prodh 000FF4  
                                 prodl 000FF3                                   start 000E  
                        __CFG_IESO$OFF 000000                   _log_count_can_no_lab 0067  
                      __end_ofi2_putch 6116                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                             i2_printRTC 398E  
                          i2_lcdNibble 5892                        __end_of_Loading 1E2E  
                 __end_of_actuatorTest 1192                                  ??_arm 00AB  
                                ID@res 00C6             i2updateServoPosition@timer 0003  
                     ?_I2C_Master_Init 008D                       ?_I2C_Master_Read 0001  
                     ?_I2C_Master_Wait 0001            ??i2_change_state_to_menu_12 002A  
          ??i2_change_state_to_menu_22 002A                       ?_I2C_Master_Stop 0001  
                                ?_Test 0001                                  l10012 080C  
                                l10004 07EA                                  l10030 086A  
                                l10008 07F4                                  l10034 0874  
                                l10052 08C0                                  l10044 089E  
                                l10038 088C                                  l10310 4388  
                                l10048 08A8                                  l10056 08CC  
                                l10308 4374                                  l10334 4410  
                                l10370 4718                                  l10610 4D46  
                                l10380 4736                                  l10372 471E  
                                l10364 4706                                  l10348 469C  
                                l10620 4D66                                  l10382 473C  
                                l10374 4724                                  l10366 470C  
                                l10630 4D84                                  l10376 472A  
                                l10368 4712                                  l10616 4D5A  
                                l10608 4D30                                  l10378 4730  
                                l10386 4742                                  l10618 4D60  
                                l10634 4D8A                                  l10388 4794  
                                l10628 4D7E                   __end_of_EEPROM_write 4986  
                          ID@time_1153 00B3                                  ?_main 0001  
                                _ACKEN 007E2C                                  _ACKDT 007E2D  
                      __end_of___awdiv 4F34                        ?_updateArmState 0001  
                                _EEADR 000FA9                                  STR_10 FFE7  
                                STR_11 FFEB                                  STR_12 FFFB  
                                STR_20 FFEF                                  STR_13 FFDF  
                                STR_21 FACC                                  STR_14 FFD7  
                                STR_22 FF92                                  STR_30 FE10  
                                STR_15 FFD3                                  STR_23 FF40  
                                STR_31 FDEE                                  STR_16 FFE3  
                                STR_24 FD55                                  STR_32 FD33  
                                STR_40 FCEF                                  STR_17 FFF3  
                                STR_25 FE32                                  STR_33 FD44  
                                STR_41 FCDE                                  STR_18 FFF7  
                                STR_34 FDDD                                  STR_50 FDBB  
                                STR_42 FD99                                  STR_26 FD66  
                                STR_43 FD99                                  STR_35 FDDD  
                                STR_51 FFDB                                  STR_19 FFCF  
                                STR_27 FE21                                  STR_52 FFCB  
                                STR_60 FFF3                                  STR_28 FD77  
                                STR_36 FD22                                  STR_44 FD00  
                      __end_of___awmod 513C                                  STR_45 FCEF  
                                STR_37 FD33                                  STR_53 FFE7  
                                STR_61 FFF7                                  STR_29 FF3D  
                                STR_62 FFCF                                  STR_54 FFEB  
                                STR_70 FEEB                                  STR_38 FDCC  
                                STR_46 FDAA                                  STR_47 FDAA  
                                STR_55 FFFB                                  STR_63 FACC  
                                STR_71 FF24                                  STR_39 FD88  
                                STR_56 FFDF                                  STR_80 FF3D  
                                STR_64 FF32                                  STR_48 FD11  
                                STR_72 FC67                                  STR_49 FD00  
                                STR_57 FFD7                                  STR_65 FFA5  
                                STR_73 FF08                                  STR_81 FB1D  
                                STR_58 FFD3                                  STR_90 FF24  
                                STR_82 FF3D                                  STR_74 FF5C  
                                STR_66 FAE4                                  STR_59 FFE3  
                                STR_67 FFBD                                  STR_91 FEDC  
                                STR_75 FECD                                  STR_83 FEA0  
                                STR_76 FF16                                  STR_92 FEFA  
                                STR_84 FE43                                  STR_68 FC9A  
                                STR_77 FFAE                                  STR_85 FF7E  
                                STR_69 FCAB                                  STR_93 FC78  
                                STR_86 FF7E                                  STR_78 FF24  
                                STR_94 FF68                                  STR_87 FF9C  
                                STR_95 FC89                                  STR_79 FB2F  
                                STR_88 FF9C                                  STR_96 FF73  
                                STR_89 FF88                                  STR_97 FEBE  
                                STR_98 FBF0                                  STR_99 FBDF  
         i2updateServoPosition@my_time 0007                                  ?_sort 0001  
                      __end_of___lldiv 4FF0           i2updateServoPosition@time_us 0001  
                                u11007 1A7C                                  u11017 1B02  
                                u11107 1D1E                                  u11027 1B0A  
                                u11117 1D26                                  u11037 1B3C  
                                u12007 0E1C                                  u11207 1D82  
                                u11127 1D30                                  u11047 1B46  
                                _T0CON 000FD5                                  u12017 0E78  
                                u11217 1DEC                                  u11137 1D3A  
                                u11057 1B60                                  u12107 10AC  
                                u12027 0EA0                                  u11307 177C  
                                u11227 5C56                                  u11147 1D44  
                                u11067 1C1E                        ___awdiv@divisor 0088  
                                u12117 10D4                                  u12037 0F0A  
                                u11317 1786                                  u11237 539E  
                                u11157 1D4E                                  u11077 1C7A  
                                u10390 4456                                  u12207 4B4C  
                                u12127 1124                                  u12047 0F32  
                                u11407 0114                                  u11327 17AC  
                                u11247 11AC                                  u11167 1D58  
                                u11087 1CA2                                  _T1CON 000FCD  
                                u12217 3142                                  u12137 112E  
                                u12057 0F8E                                  u11417 014C  
                                u11337 5F38                                  u11257 11EE  
                                u11177 1D60                                  u11097 1CE4  
                                u12307 2274                                  u12227 31BC  
                                u12147 1152                                  u12067 0FB6  
                                u11507 0592                                  u11427 0188  
                                u11347 5A2C                                  u11267 12E2  
                                u11187 1D6C                                  u12317 22C0  
                                u12237 3208                                  u12157 117A  
                                u12077 1012                                  u11517 0650  
                                u11437 01DE                                  u11357 5A60  
                                u11277 14CA                                  u11197 1D76  
                                u12407 24D6                                  u12327 230C  
                                u12247 3272                                  u12167 52F4  
                                u12087 103A                                  u11607 087C  
                                u11527 0684                                  u11447 020A  
                                u11367 48E2                                  u11287 1634  
                                _T2CON 000FCA                                  u12417 2522  
                                u12337 2340                                  u12257 32BE  
                                u12177 5344                                  u12097 105C  
                                u11617 08B0                                  u11537 06AE  
                                u11457 0260                                  u11377 493E  
                                u11297 168E                                  u12507 42B4  
                                u12427 2556                                  u12347 2372  
                                u12267 3388                                  u12187 5358  
                                u11707 28B6                                  u11627 46AA  
                                u11547 070C                                  u11467 0294  
                                u11387 4976                                  u12517 42BE  
                                u12437 2588                                  u12357 23BE  
                                u12277 3390                                  u12197 5844  
                                u11717 28E4                                  u11637 2662  
                                u11557 0740                                  u11477 02BE  
                                u11397 002A                                  u12527 5EEC  
                                u12447 25D4                                  u12367 23F2  
                                u12287 33D6                                  u11807 08F4  
                                u11727 2928                                  u11647 26A6  
                                u11567 076A                                  u11487 0534  
                                _T3CON 000FB1                                  u12537 565E  
                                u12457 2608                                  u12377 2424  
                                u12297 33E0                                  u11817 0938  
                                u11737 294A                                  u11657 26C8  
                                u11577 07C8                                  u11497 0568  
                                u10937 185C                                  u12547 5668  
                                u12467 263A                                  u12387 2470  
                                u11907 0B66                                  u11827 095A  
                                u11747 2978                                  u11667 2734  
                                u11587 07FC                                  u10947 198C  
                                u12557 5694                                  u12477 54AC  
                                u12397 24A4                                  u11917 0BE4  
                                u11837 09CA                                  u11757 2992  
                                u11677 2788                                  u11597 0826  
                                u10957 19E8                                  u12567 569E  
                                u12487 54C8                                  u11927 0C0C  
                                u11847 09FE                                  u11767 47AE  
                                u11687 27FA                                  u10967 19F0  
                                u12497 4198                                  u11937 0C68  
                                u11857 0A64                                  u11777 4A76  
                                u11697 284E                                  u10977 1A22  
                                u11947 0C90                                  u11867 0A82  
                                u11787 4ABA                                  u10987 1A2C  
                                u11957 0CEC                                  u11877 0AB2  
                                u11797 4ADC                                  u10997 1A48  
                                u11967 0D14                                  u11887 0B18  
                                u11977 0D70                                  u11897 0B36  
                                u11987 0D98                                  u11997 0DF4  
                      __end_of___lwdiv 555A                        __end_of___lwmod 57D6  
                                i2l275 398A                                  i2l634 3A1C  
                                i2l931 2FA8                                  i2l943 305C  
                                i2l935 2F6E                        ___awdiv@counter 008A  
                                i2l969 56DA                                  i2l996 5B26  
                                _TMR0H 000FD7                                  _TMR1H 000FCF  
                                _TMR0L 000FD6                                  _TMR3H 000FB3  
                                _TMR1L 000FCE                                  _TMR3L 000FB2  
                           _BothServos 2266                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst 610A                        __end_of_handler 3F9A  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _nRBPU 007F8F  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_readADC 5EFC  
                      __end_of_initLCD 5A6A                         __CFG_EBTRB$OFF 000000  
                                _debug 012D                             i2isdigit@c 0003  
                        ___awtoft@sign 0091                                  _getIR 536A  
                      __end_of_loadRTC 5260                        __end_of_readMAG 5A24  
                      __end_of_dpowers FACC                                  _first 0139  
                                _enter 0063                                  arm@on 00AC  
                      __end_of_isdigit 5F26                                  _input 007D  
                        ___ftpack@sign 0084                                  _putch 60EA  
                                pclath 000FFA                                  tablat 000FF5  
                     __end_ofi2___wmul 5FC2                       __end_ofi2_getRTC 55CC  
                  _log_count_pop_w_tab 0069                                  status 000FD8  
                          readCOND@res 0084                     __size_ofi2___awmod 0070  
                       __CFG_PBADEN$ON 000000                          i2printf@width 0028  
                     __end_ofi2_printf 2DA8                     __size_ofi2___lwdiv 0052  
                   __size_ofi2___lwmod 0042                       __end_ofi2_strcpy 5C38  
                          Loading@addr 00B3                       _count_can_no_lab 0123  
                 printSortTimer@i_1177 002A                   __size_of_EEPROM_read 0018  
                      __initialization 593E                         readIR@ana_port 0082  
                         __end_of_Test 47A0                     __size_ofi2_lcdInst 000C  
                         __end_of_main 4DAE                           __end_of_keys FAC2  
                         __end_of_sort 6008                             i2printf@ap 0020  
                           i2printf@cp 001E                     __size_ofi2_isdigit 001E  
                          _BlockerTest 4162                                 ??_Test 00C6  
  __size_of_change_state_to_menu_start 002C                        ??_machineConfig 0080  
                               ??_main 00DA                                 ??_sort 00D0  
                        __activetblptr 000003                                 ID@res1 00CA  
                               ID@res2 00C2             __size_of_updateServoStates 01C8  
                               ID@time 00C1             updateServoPosition@my_time 0086  
           updateServoPosition@time_us 0080                             i2strcpy@cp 0005  
                           i2strcpy@to 0001                      ?_I2C_Master_Start 0001  
                  EEPROM_write@address 00AB                 __size_ofi2_EEPROM_read 0016  
                    ?_I2C_Master_Write 0081                            ?i2_delay_ms 0001  
                               ?_getIR 0086                     ??_I2C_Master_Start 0081  
                               _ADCON0 000FC2                                 _ADCON1 000FC1  
                   ??_I2C_Master_Write 0083                                 _ADCON2 000FC0  
                               STR_100 FBBD                                 STR_101 FC45  
                               STR_110 FE82                                 STR_102 FC56  
                               STR_111 FCCD                                 STR_103 FB9B  
                               STR_104 FE53                                 STR_120 FB0B  
                               STR_112 FAF9                                 STR_121 FE73  
                               STR_113 FC01                                 STR_105 FBCE  
                               STR_114 FC34                                 STR_106 FBAC  
                               STR_122 FB53                                 _ADRESH 000FC4  
                               STR_107 FBCE                                 STR_115 FC34  
                               STR_123 FE73                                 STR_124 FE73  
                               STR_108 FEAF                                 STR_116 FC23  
                               _EEADRH 000FAA                                 STR_117 FC34  
                               STR_109 FE91                                 STR_125 FC12  
                               STR_118 FC23                                 STR_126 FCBC  
                               _ADRESL 000FC3                                 STR_127 FAF9  
                               STR_119 FB41                                 STR_128 FB65  
                               STR_129 FFB6                                 _EEDATA 000FA8  
                               _EECON2 000FA7                       ___awdiv@dividend 0086  
                      i2lcdNibble@data 0002                       __end_of___awtoft 5AAE  
                               ?_putch 0001                       __end_of___ftpack 469A  
               __size_of_initSortTimer 00AA                        i2lcdNibble@temp 0001  
            i2_change_state_to_menu_12 5CC8              i2_change_state_to_menu_22 5C98  
                               _INT1IE 007F83                                 _INT1IF 007F80  
                               _CVRCON 000FB5                                 i2l2035 5934  
                               i2l1180 60BC                                 i2l2045 5AE6  
                               i2l1088 3E9E                                 i2l1097 3F42  
                               i2l1099 3F5E                                 i2l1588 2C14  
                               i2l8000 3CB4                                 i2l8010 3CDE  
                               i2l7300 2B32                                 i2l8020 3CFC  
                               i2l7310 2B8C                                 i2l8022 3D00  
                               i2l8006 3CC2                                 i2l7240 55A2  
                               i2l7312 2B9E                                 i2l8040 3D30  
                               i2l8016 3CE8                                 i2l7400 5C18  
                               i2l7306 2B7C                                 i2l7322 2BDE  
                               i2l8034 3D22                                 i2l8026 3D0A  
                               i2l7236 5592                                 i2l7340 2C5E  
                               i2l7316 2BC8                                 i2l7308 2B86  
                               i2l8052 3D66                                 i2l8044 3D42  
                               i2l7246 55BC                                 i2l7334 2C42  
                               i2l7318 2BDA                                 i2l7270 2A62  
                               i2l8062 3D82                                 i2l7352 2C90  
                               i2l7280 2A9A                                 i2l7264 2A44  
                               i2l8056 3D78                                 i2l8048 3D54  
                               i2l7370 2CEC                                 i2l7362 2CCE  
                               i2l7338 2C5A                                 i2l7274 2A68  
                               i2l7364 2CD6                                 i2l7268 2A54  
                               i2l7382 2D1E                                 i2l7358 2CAA  
                               i2l7392 2D84                                 i2l7376 2D02  
                               i2l7296 2B24                                 i2l7288 2AFC  
                               i2l6930 590A                                 i2l7378 2D0A  
                               i2l7386 2D30                                 i2l7298 2B2E  
                               i2l7394 2D8C                                 i2l6940 592A  
                               i2l6932 590E                                 i2l7580 4542  
                               i2l7388 2D36                                 i2l6950 5AC4  
                               i2l6918 6040                                 i2l7398 5C10  
                               i2l6928 5902                                 i2l6952 5AC8  
                               i2l7576 4532                                 i2l7850 3A3C  
                               i2l7842 39BA                                 i2l6956 5ADC  
                               i2l6948 5ABC                                 i2l7588 4576  
                               i2l7860 3AAA                                 i2l7852 3A52  
                               i2l6894 5F96                                 i2l7870 3B18  
                               i2l7862 3AC0                                 i2l7854 3A68  
                               i2l7952 3C02                                 i2l7944 3BE8  
                               i2l7864 3AD6                                 i2l7856 3A7E  
                               i2l7848 3A26                                 i2l7970 3C40  
                               i2l7954 3C12                                 i2l7962 3C20  
                               i2l7866 3AEC                                 i2l7858 3A94  
                               i2l7874 3B2E                                 i2l9642 56C6  
                               i2l9660 6078                                 i2l7972 3C46  
                               i2l7980 3C58                                 i2l7956 3C16  
                               i2l7868 3B02                                 i2l7876 3B88  
                               i2l9670 55E0                                 i2l7974 3C4C  
                               i2l7966 3C34                                 i2l9680 5602  
                               i2l9656 6068                                 i2l7992 3C9C  
                               i2l7976 3C52                                 i2l7968 3C3A  
                               i2l9648 56F0                                 i2l9682 5606  
                               i2l9690 5624                                 i2l9674 55EC  
                               i2l9694 5632                                 i2l9686 561A  
                               i2l9678 55FA                _f_most_recent_sort_time 0137  
                        PlatformTest@i 00B1                                 _OSCCON 000FD3  
                               _TMR0IE 007F95                                 _TMR0IF 007F92  
                            ??i2_putch 0003                                 _TMR1IE 007CE8  
                               _TMR1IF 007CF0                                 _TMR2IE 007CE9  
                               _TMR2IF 007CF1                                 _TMR3IE 007D01  
                               _TMR3IF 007D09                                 _TMR0ON 007EAF  
                               _TMR1ON 007E68                                 _TMR2ON 007E52  
                               _TMR3ON 007D88                                 _SSPADD 000FC8  
                               _TRISC3 007CA3                                 _TRISC4 007CA4  
                               _SSPBUF 000FC9                                 _IR_res 00E0  
                            ??_Loading 00B1                       __end_of_delay_ms 5F4E  
                 delay_ms@milliseconds 0081                         __CFG_XINST$OFF 000000  
                     __end_of_dispLogs 5FE6                                 ___ftge 4DAE  
                          ?i2_printRTC 0001                       retrieveLog@byte1 000B  
                     retrieveLog@byte2 000C                       retrieveLog@byte3 000D  
                 __end_of_Distribution 4A68                                 ___wmul 5BD0  
                            ??___awdiv 008A                         __CFG_STVREN$ON 000000  
                               _getMAG 5C38                              ??___awmod 0084  
                          logRun@byte1 00B2                            logRun@byte2 00B3  
                          logRun@byte3 00B4                       __end_of_readCOND 59D8  
                               _getRTC 5260                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 000D                       __end_of_initTime 602A  
                               _initUI 5C68                                 _readIR 513C  
                               _logRun 4328                                 getIR@i 0089  
                               clear_0 5964                                 clear_1 5970  
                               clear_2 597C                       ___awdiv@quotient 008C  
                      ___awmod@divisor 0082                             _PortTestDC 4B3E  
                      ___awmod@counter 0084                              ??_lcdInst 0082  
                               _printf 1E2E                              ??_handler 0045  
              __size_of_initGlobalVars 00D2                           ?_retrieveLog 0007  
                               _strcpy 5B9A                     __size_of_SpeedTest 0084  
                            ??_readADC 0080                              ??_initLCD 0083  
                            ??_loadRTC 0095                              ??_readMAG 0082  
 __end_ofi2_change_state_to_menu_start 5F76  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 5F4E                            ?_BothServos 0001  
                            ??_isdigit 0080                      __end_ofi2___awmod 563C  
                    __end_ofi2___lwdiv 593E                       __end_of_printRTC 36CE  
                         __mediumconst FAB0                      __end_ofi2___lwmod 5AF0  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                   _log_count_pop_no_tab 00F4  
                       i2___awmod@sign 0006                  __end_of_algorithmTest 4B3E  
                    __end_ofi2_lcdInst 6122                      __end_ofi2_isdigit 6048  
                           __accesstop 0080                __end_of__initialization 5982  
                        ?_inputHandler 002A                             ___ftge@ff1 0092  
                           ___ftge@ff2 0095                  _most_recent_sort_time 0143  
                        ___rparam_used 000001                          ?_PlatformTest 0001  
              printSortTimer@start_sec 0022                  __size_of_actuatorTest 08B8  
                           ___awtoft@c 008E                          i2_EEPROM_read 60AE  
                         Loading@byte1 00B5                     i2___lwmod@dividend 0008  
                       __pcstackCOMRAM 0001                  _agitator_toggle_count 005D  
                __size_of_EEPROM_write 00E8                    __size_ofi2_delay_ms 001C  
                         __pidataBANK1 6136                    BlockerTest@cam_flag 00B1  
                        __end_of_getIR 53EC                            i2printRTC@i 0041  
                        _initSortTimer 4FF0            __end_of_updateServoPosition 546A  
                        __end_of_putch 60FA                        ID@reflectivity1 00AD  
                      ID@reflectivity2 00B1                            i2printf@len 0022  
                          i2printf@val 0024                             __end_of_ID 1838  
                           __end_of_UI 08DA                              ?i2___wmul 0001  
                   __size_of_lcdNibble 006C                              ?i2_getRTC 0001  
                          i2putch@data 0003                  printSortTimer@curTime 0014  
   __end_of_change_state_to_menu_start 5ED0          ?i2_change_state_to_menu_start 0001  
           _change_state_to_menu_start 5EA4                  printSortTimer@cur_sec 0024  
                            ?i2_printf 000D                                ??_getIR 0088  
                            ?i2_strcpy 0001                       _count_pop_no_tab 0127  
                  __size_ofi2_printRTC 0236                                ??_putch 0082  
                         _actuatorTest 08DA                __size_of_PortTestPusher 005C  
                           __pbssBANK0 00DA                             __pbssBANK1 0100  
                              ID@cond1 00AF                           ?_stopSignals 0001  
                       ??_inputHandler 002C         __size_ofi2_updateServoPosition 0068  
        __end_ofi2_updateServoPosition 5710                           _EEPROM_write 489E  
                       ??_PlatformTest 00AB               ?_change_state_to_menu_11 0001  
             ?_change_state_to_menu_12 0001               ?_change_state_to_menu_22 0001  
             ?_change_state_to_menu_23 0001                                UI@F3251 0149  
                    __end_of_SpeedTest 536A                         ?i2_EEPROM_read 0001  
             ?_change_state_to_logs_11 0001               ?_change_state_to_logs_12 0001  
             ?_change_state_to_logs_22 0001               ?_change_state_to_logs_23 0001  
             ?_change_state_to_logs_33 0001               ?_change_state_to_logs_34 0001  
                  __size_of_BothServos 03EE                      printRTC@RTC_month 00BC  
                              ?___ftge 0092                                _ID$1143 00B4  
                              _ID$1160 00B8                                _ID$1152 00B5  
                              _ID$1157 00B6                                _ID$1159 00B7  
                         ?i2_lcdNibble 0001                                UI@i_413 00C9  
                              UI@i_440 00CF                                UI@i_416 00CA  
                              UI@i_417 00CB                                UI@i_451 00D4  
                              UI@i_443 00D0                                UI@i_435 00CC  
                              UI@i_452 00D5                                UI@i_444 00D1  
                              UI@i_436 00CD                                UI@i_447 00D2  
                              UI@i_439 00CE                                UI@i_448 00D3  
                     ??_updateArmState 0001                         ?_initSortTimer 0001  
                              ?___wmul 0080                                ?_getMAG 0001  
                              ?_getRTC 0001                                ?_initUI 0001  
                              ?_readIR 0082                                ?_logRun 0001  
             updateServoPosition@timer 0082                                UI@month 00D6  
                            ?___awtoft 008E                              ?___ftpack 0080  
                          ?_PortTestDC 0001                                ?_printf 008E  
                              _UI$2442 00C6                                ?_strcpy 0080  
                      _pan_servo_state 006B                             ??i2___wmul 0005  
                           ??i2_getRTC 0004                                i2l10100 3758  
                              i2l10200 38E0                                i2l10120 37A0  
                              i2l10112 3784                                i2l10104 3766  
                              i2l10212 3912                                i2l10204 38EE  
                              i2l10140 37EE                                i2l10132 37D2  
                              i2l10124 37AE                                i2l10116 3792  
                              i2l10108 3776                                i2l10070 36FE  
                              i2l10208 38FC                                i2l10160 383C  
                              i2l10152 3820                                i2l10144 37FC  
                              i2l10136 37E0                                i2l10128 37BC  
                              i2l10080 3720                                i2l10072 3704  
                              i2l11200 4050                                i2l10402 2DC4  
                              i2l10218 3920                                i2l11202 405A  
                              i2l10420 2EEC                                i2l11220 3C70  
                              i2l11212 393E                                i2l10180 3892  
                              i2l10172 386E                                i2l10164 3852  
                              i2l10156 382E                                i2l10148 3812  
                              i2l10084 372E                                i2l10076 3712  
                              i2l11204 4064                                i2l10500 3FD8  
                              i2l11222 3C8C                                i2l11214 3960  
                              i2l11206 4148                                i2l10408 2E1E  
                              i2l11216 397C                                i2l10192 38BC  
                              i2l10184 38A0                                i2l10176 387C  
                              i2l10168 3860                                i2l10096 374A  
                              i2l10088 373C                                i2l11208 4158  
                              i2l10512 4004                                i2l10520 4022  
                              i2l10450 2FD8                                i2l10434 2F3C  
                              i2l10442 2F72                                i2l10514 4018  
                              i2l10506 3FEE                                i2l10522 406C  
                              i2l10196 38D2                                i2l10188 38AE  
                              i2l10540 40DA                                i2l10524 4076  
                              i2l10462 3000                                i2l10534 40B4  
                              i2l10480 3090                                i2l10528 408E  
                              i2l10720 3EF6                                i2l10704 3EC6  
                              i2l10482 3096                                i2l10474 3032  
                              i2l10458 2FDE                                i2l10554 4130  
                              i2l10730 3F16                                i2l10468 301C  
                              i2l10652 3E2C                                i2l10398 2DB4  
                              i2l10590 5B06                                i2l11198 4046  
                              i2l10494 3FB8                                i2l10726 3F10  
                              i2l10646 3E1C                                i2l10662 3E56  
                              i2l10584 5AFA                                i2l10752 3F5C  
                              i2l10648 3E20                                i2l10656 3E34  
                              i2l10586 5B00                                i2l10498 3FCE  
                              i2l10658 3E4C                                i2l10676 3E72  
                              i2l10698 3EB8                              ?_delay_ms 0001  
                       PlatformTest@on 00B5                             ??i2_printf 0019  
                           ??i2_strcpy 0005                              ?_dispLogs 0012  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                              _SSPSTAT 000FC7                                _RTCflag 00E6  
                            ?_readCOND 0001                             _initEEPROM 6098  
                              i2_putch 610A                              ?_initTime 0080  
                      _f_loadingNewCan 00EE                        i2printRTC@month 003D  
                __size_of_Distribution 00E2            __size_ofi2_I2C_Master_Start 0008  
                    __end_of_lcdNibble 56A8                                _Loading 1838  
          __size_ofi2_I2C_Master_Write 000A                       EEPROM_write@data 00AD  
                              __Hparam 0000                                __Lparam 0000  
   __size_ofi2_change_state_to_menu_12 0030     __size_ofi2_change_state_to_menu_22 0030  
                            ?_printRTC 0001                        __size_of___ftge 00C8  
                              ___awdiv 4E76                                ___awmod 509A  
                           _initServos 546A                                ___lldiv 4F34  
                      __size_of___wmul 0036                        __size_of_getMAG 0030  
                              ___lwdiv 54E2                                ___lwmod 5774  
                      __size_of_getRTC 0086                        printSortTimer@i 002C  
                            _CMCONbits 000FB4                      retrieveLog@logNum 0007  
                         logRun@byte11 00B6                           ?_BlockerTest 0001  
                      __size_of_initUI 0030                        __size_of_readIR 0098  
                              __pcinit 593E                             ??___awtoft 0091  
                 i2EEPROM_read@address 0001                        __size_of_logRun 0144  
                           ??___ftpack 0085                           logRun@byte_i 00B5  
                              __ramtop 1000                         _initGlobalVars 4C14  
                              _lcdInst 60FA                                _handler 0008  
                              __ptext0 4CE6                                __ptext1 5FE6  
                              __ptext2 1838                                __ptext3 4FF0  
                              __ptext4 4C14                                __ptext5 5C38  
                              __ptext6 536A                                __ptext7 1192  
                              __ptext8 513C                                __ptext9 598C  
                      __size_of_printf 0438                                _readADC 5ED0  
                      __size_of_strcpy 0036                                _initLCD 5A24  
                              _cur_can 012B                                _loadRTC 51D4  
                              _readMAG 59D8                                _dpowers FAC2  
                   actuatorTest@i_1762 00AE                     actuatorTest@i_1771 00B4  
                   actuatorTest@i_1763 00AF                     actuatorTest@i_1755 00AD  
                         __size_of_arm 00FE                     actuatorTest@i_1772 00B5  
                   actuatorTest@i_1781 00BA                     actuatorTest@i_1765 00B0  
                   actuatorTest@i_1782 00BB                     actuatorTest@i_1774 00B6  
                   actuatorTest@i_1766 00B1                     actuatorTest@i_1791 00C0  
                   actuatorTest@i_1775 00B7                     actuatorTest@i_1792 00C1  
                   actuatorTest@i_1784 00BC                     actuatorTest@i_1768 00B2  
                   actuatorTest@i_1785 00BD                     actuatorTest@i_1777 00B8  
                   actuatorTest@i_1769 00B3                     actuatorTest@i_1794 00C2  
                   actuatorTest@i_1778 00B9                     actuatorTest@i_1795 00C3  
                   actuatorTest@i_1787 00BE                     actuatorTest@i_1788 00BF  
                              _isdigit 5EFC                       ___awmod@dividend 0080  
                              getRTC@i 0083                   __size_of_retrieveLog 0122  
                   _motor_toggle_count 0145                           ??i2_delay_ms 0001  
                           ??_delay_ms 0080               __size_of_I2C_Master_Init 0060  
             __size_of_I2C_Master_Read 002E                          _log_startTime 0100  
             __size_of_I2C_Master_Wait 0014               __size_of_I2C_Master_Stop 0008  
                           ??_dispLogs 0014                           _Distribution 4986  
                 PlatformTest@res_1807 00AF                         __pintcode_body 3DB0  
                 end_of_initialization 5982                             ??_readCOND 0082  
                              logRun@i 00B7                             ??_initTime 0086  
                      ??i2_EEPROM_read 0003                                int_func 3DB0  
                  i2___wmul@multiplier 0001                          ??_EEPROM_read 0082  
                  __size_of_PortTestDC 00D6                              i2u1050_40 2F46  
                            i2u1052_40 2F6E                              i2u1051_48 2F48  
                            i2u1054_40 2F98                              i2u1046_40 2F02  
                            i2u1063_40 3016                              i2u1062_48 2FF4  
                            i2u1056_40 2FBE                              i2u1055_48 2F9A  
                            i2u1057_40 2FD4                              i2u1067_40 3058  
                            i2u1260_47 58D8                              i2u1261_47 58E2  
                            i2u1262_47 6070                              i2u1257_47 3C08  
                            i2u1258_47 58AC                              i2u1259_47 58B6  
            __size_of_I2C_Master_Start 0008              __size_of_I2C_Master_Write 000A  
                      ___lldiv@divisor 0084                        ___lldiv@counter 008C  
                      ??_initSortTimer 0085                                printf@c 00A8  
                         ??i2_printRTC 002A                                printf@f 008E  
                           ??_printRTC 00AB                       I2C_Master_Init@c 008D  
                     I2C_Master_Read@a 0081                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc2 000FDE                     __end_ofi2_delay_ms 6080  
               __end_of_initGlobalVars 4CE6                             _sensorTest 2654  
                           _servoTimes 0055                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 3DB0  
                         ??_BothServos 00AB                  __end_of_machineConfig 5774  
                 __end_of_PlatformTest 3404                             _updateMenu 36CE  
                    i2_I2C_Master_Read 5F76                              _IR_signal 00E2  
                    i2_I2C_Master_Wait 60D8                      i2_I2C_Master_Stop 614E  
                            i2___awmod 55CC                      i2___lwdiv@divisor 0003  
                      _log_count_total 0141                         _PortTestPusher 5836  
                            i2___lwdiv 58EC                              i2___lwmod 5AAE  
                    i2___lwdiv@counter 0007                     ?i2_I2C_Master_Read 0001  
                   ?i2_I2C_Master_Wait 0001                     __end_ofi2_printRTC 3BC4  
                   ?i2_I2C_Master_Stop 0001                          actuatorTest@i 00C4  
         ??_change_state_to_menu_start 00C4                            ?_initEEPROM 0001  
                            i2_lcdInst 6116                          Loading@i_1141 00BF  
                        Loading@i_1126 00B7                          Loading@i_1135 00B9  
                        Loading@i_1138 00BB                          Loading@i_1139 00BD  
                           _total_time 00FA                            printf@width 00A9  
                 __size_of_stopSignals 001C                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 602A                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002                              i2getRTC@i 0004  
                   __end_of_BothServos 2654                    __end_of_EEPROM_read 6098  
                          ?_initServos 0001                        ?_initGlobalVars 0001  
                       __end_of___ftge 4E76                           _Loading$1137 00B6  
                       __end_of___wmul 5C06                         __end_of_getMAG 5C68  
                       __end_of_getRTC 52E6                   __size_ofi2_lcdNibble 005A  
                       _timer2_counter 0073                          EEPROM_write@i 00AF  
                        i2lcdInst@data 0003                         __end_of_initUI 5C98  
                       __end_of_readIR 51D4                         __end_of_logRun 446C  
                     i2___wmul@product 0005                         __end_of_printf 2266  
                         i2printf@flag 0026                         __end_of_strcpy 5BD0  
            __end_ofi2_I2C_Master_Read 5F9C              __end_ofi2_I2C_Master_Wait 60EA  
                         i2printf@prec 001D                    start_initialization 593E  
            __end_ofi2_I2C_Master_Stop 6156                             readMAG@res 0084  
                    __size_ofi2___wmul 0026                        _count_can_w_lab 0125  
          ?_change_state_to_menu_start 0001                      __size_ofi2_getRTC 0072  
               __end_of_PortTestPusher 5892                            __end_of_arm 489E  
                            i2printf@c 0027                              i2printf@f 000D  
                   EEPROM_write@i_1420 00B0                  i2I2C_Master_Read@temp 0003  
                           ?i2___awmod 0001                   BlockerTest@cond_flag 00B3  
                           ?i2___lwdiv 0001                             ?i2___lwmod 0008  
                    __size_ofi2_printf 036E                      __size_ofi2_strcpy 0032  
                    ??_I2C_Master_Init 0091                      ??_I2C_Master_Read 0081  
                    ??_I2C_Master_Wait 0080                             ?i2_lcdInst 0001  
                    ??_I2C_Master_Stop 0081                       __CFG_OSC$INTIO67 000000  
                           ?i2_isdigit 0001                             initTime@DD 0083  
                           initTime@MM 0084                             initTime@YY 0085  
                      retrieveLog@addr 0010                             logRun@addr 00B9  
                             ??___ftge 0098                              _SpeedTest 52E6  
                             ??___wmul 0084                               ??_getMAG 0086  
                             ??_getRTC 0083                 __size_of_algorithmTest 00D6  
                          ?_sensorTest 0001                            __pdataBANK1 0149  
                     __CFG_LPT1OSC$OFF 000000                               ??_initUI 00C4  
                             ??_readIR 0084                               ??_logRun 00B1  
                             ID@i_1151 00BB                               ID@i_1164 00BF  
                             ID@i_1156 00BD                               ID@i_1165 00C4  
                         ??_PortTestDC 00AB                 printSortTimer@timeDiff 0028  
     __size_of_change_state_to_menu_11 0030       __size_of_change_state_to_menu_12 0038  
     __size_of_change_state_to_menu_22 0038       __size_of_change_state_to_menu_23 0030  
                             ??_printf 009A       __size_of_change_state_to_logs_11 0030  
     __size_of_change_state_to_logs_12 0030       __size_of_change_state_to_logs_22 0030  
     __size_of_change_state_to_logs_23 002E       __size_of_change_state_to_logs_33 0030  
     __size_of_change_state_to_logs_34 0030                               ??_strcpy 0084  
                  __size_of_initEEPROM 0016                   __size_of_BlockerTest 01C6  
                  _printSortTimer$2582 0026                      __size_of___awtoft 0044  
                    __size_of___ftpack 010C                            __pbssCOMRAM 0055  
         __size_of_updateServoPosition 007E                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                        ?_PortTestPusher 0001  
              __size_of_printSortTimer 0358                      i2___lwmod@divisor 000A  
                    i2___lwmod@counter 000C                           _isdigit$2080 0081  
                    __size_of_delay_ms 0028                         initSortTimer@i 0088  
                    printSortTimer@min 0010                      printSortTimer@sec 0012  
                  __size_of_initServos 0078                      __size_of_dispLogs 0024  
                     printRTC@INT_time 00AE                       _tilt_servo_state 0071  
                         i2strcpy@from 0003                               ?i2_putch 0001  
                      _count_pop_w_tab 0129                      __size_of_readCOND 004C  
                          _EEPROM_read 6080                       _I2C_Master_Start 6146  
                   __end_of_PortTestDC 4C14                              _f_lastCan 00EC  
                             ?_Loading 0001                    i2I2C_Master_Write@d 0002  
                     _I2C_Master_Write 6122                      __size_of_initTime 0022  
                i2_updateServoPosition 56A8                       ___lwdiv@dividend 0080  
                    __CFG_CCP2MX$PORTC 000000                              __pintcode 0008  
                           ?_SpeedTest 0001                          __pmediumconst FAB0  
                            _lcdNibble 563C                  __size_of_inputHandler 01EC  
                             ?___awdiv 0086                              __ptext100 5AAE  
                            __ptext101 58EC                              __ptext102 55CC  
                             ?___awmod 0080                               ?___lldiv 0080  
                       _sensor_outputs 00DA                               ?___lwdiv 0080  
                             ?___lwmod 0087                  __size_of_PlatformTest 0304  
                    __size_of_printRTC 02CA                               ?_lcdInst 0001  
                             ?_handler 0001                               ?_readADC 0001  
                             ?_initLCD 0001                               ?_loadRTC 0001  
                             ?_readMAG 0001                               ?_isdigit 0001  
           __size_ofi2_I2C_Master_Read 0026             __size_ofi2_I2C_Master_Wait 0012  
           __size_ofi2_I2C_Master_Stop 0008                              _firstboot 013B  
                            _cur_state 00E8                       ___lwdiv@quotient 0084  
                       __size_of_getIR 0082                            ??i2___awmod 0005  
                        _algorithmTest 4A68                            ??i2___lwdiv 0005  
                          _COND_signal 00DE                            ??i2___lwmod 000C  
                       __size_of_putch 0010                            __size_of_ID 06A6  
                            getIR@port 0086                            __size_of_UI 08C8  
                  __size_of_sensorTest 03E6             __end_ofi2_I2C_Master_Start 615E  
           __end_ofi2_I2C_Master_Write 6136                            ??i2_lcdInst 0003  
                       ___wmul@product 0084                               _LATAbits 000F89  
                             _LATBbits 000F8A                               _LATCbits 000F8B  
                             _LATDbits 000F8C                           _inputHandler 3BC4  
                          ??i2_isdigit 0001                           _PlatformTest 3100  
                         BlockerTest@i 00AD                               _PIR2bits 000FA1  
                             i2u631_40 2BC0                        PlatformTest@res 00AD  
                             i2u631_47 2BB6                               i2u562_40 5F94  
                             i2u627_40 2B60                               i2u627_47 2B56  
                             i2u684_40 3A1C                    __size_of_updateMenu 02C0  
                       _log_completion 00F2                       __CFG_WDTPS$32768 000000  
                           ?_lcdNibble 0001                              _was_low_1 0077  
                            _was_low_2 0079                              _was_low_3 007B  
                        ??_retrieveLog 0009                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 0080                              _startTime 010E  
                             i2___wmul 5F9C                          lcdNibble@data 0081  
                             i2_getRTC 555A                             printf@flag 00A7  
                        lcdNibble@temp 0080                             printf@prec 009E  
              __size_of_updateArmState 003A                               Loading@i 00C1  
                             Loading@j 00C3                               i2_printf 2A3A  
                             i2_strcpy 5C06                         ?_algorithmTest 0001  
                  I2C_Master_Read@temp 0082                              copy_data0 5952  
                   i2___awmod@dividend 0001                           ??_initEEPROM 00B1  
               ?i2_updateServoPosition 0001                       __size_ofi2_putch 000C  
                           _EECON1bits 000FA6                  __end_ofi2_EEPROM_read 60C4  
                          _count_total 00FE                 i2delay_ms@milliseconds 0002  
                     ??_initGlobalVars 0080                               __Hrparam 0000  
                     __size_of_Loading 05F6                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                              logRun@num 00B1  
                          ??_SpeedTest 00AB                  __end_of_initSortTimer 509A  
                         ??_initServos 0088                       __size_of___awdiv 00BE  
                     __size_of___awmod 00A2                _change_state_to_menu_11 5D28  
           ?i2_change_state_to_menu_12 0001                _change_state_to_menu_12 5B62  
           ?i2_change_state_to_menu_22 0001                _change_state_to_menu_22 5B2A  
              _change_state_to_menu_23 5CF8                  i2___wmul@multiplicand 0003  
                     __size_of___lldiv 00BC                       __size_of___lwdiv 0078  
              _change_state_to_logs_11 5E18                _change_state_to_logs_12 5DE8  
              _change_state_to_logs_22 5DB8                _change_state_to_logs_23 5E76  
              _change_state_to_logs_33 5D88                _change_state_to_logs_34 5D58  
                     __size_of___lwmod 0062                         readADC@channel 0081  
                             ___awtoft 5A6A                               ___ftpack 458E  
                   i2I2C_Master_Read@a 0002                       __size_of_lcdInst 0010  
                     __size_of_handler 3F92                     __end_of_initEEPROM 60AE  
                      _I2C_Master_Init 57D6                       __size_of_readADC 002C  
                      _I2C_Master_Read 5E48                       __size_of_initLCD 0046  
                         _f_ID_receive 012F                       __size_of_loadRTC 008C  
                     __size_of_readMAG 004C                        _I2C_Master_Wait 60C4  
                      _I2C_Master_Stop 613E                       __size_of_isdigit 002A  
                             _delay_ms 5F26                         _printSortTimer 2DA8  
                      ___lwdiv@divisor 0082                        ___lwdiv@counter 0086  
                  __end_of_retrieveLog 458E                               __ptext10 5F26  
                             __ptext11 4DAE                               __ptext20 4F34  
                             __ptext12 5A6A                               __ptext21 5EA4  
                             __ptext13 458E                               __ptext30 5260  
                             __ptext22 6008                               __ptext14 4986  
                             __ptext31 6122                               __ptext23 5A24  
                             __ptext15 5710                               __ptext40 469A  
                             __ptext32 613E                               __ptext24 6098  
                             __ptext16 4328                               __ptext41 2654  
                             __ptext33 6146                               __ptext25 489E  
                             __ptext17 5C68                               __ptext50 2266  
                             __ptext42 59D8                               __ptext34 5E48  
                             __ptext26 6080                               __ptext18 51D4  
                             __ptext51 6048                               __ptext43 47A0  
                             __ptext35 60C4                               __ptext27 0012  
                             __ptext19 57D6                               __ptext60 5774  
                             __ptext52 546A                               __ptext44 4A68  
                             __ptext36 5B2A                               __ptext28 3404  
                             __ptext61 54E2                               __ptext53 53EC  
                             __ptext45 08DA                               __ptext37 5B62  
                             __ptext29 5B9A                               __ptext70 5C06  
                             __ptext62 60FA                               __ptext54 4162  
                             __ptext46 52E6                               __ptext38 509A  
                             __ptext71 3BC4                               __ptext63 563C  
                             __ptext55 5ED0                               __ptext47 5836  
                             __ptext39 4E76                               __ptext80 5DE8  
                             __ptext72 5C98                               __ptext56 1E2E  
                             __ptext48 4B3E                               __ptext81 5E18  
                             __ptext73 5CC8                               __ptext65 3F9A  
                             __ptext57 60EA                               __ptext49 3100  
                             __ptext90 5AF0                               __ptext82 2A3A  
                             __ptext74 5CF8                               __ptext66 56A8  
                             __ptext58 5EFC                               __ptext91 2DA8  
                             __ptext83 610A                               __ptext75 5D28  
                             __ptext67 36CE                               __ptext59 5BD0  
                             __ptext92 555A                               __ptext84 602A  
                             __ptext76 5D58                               __ptext68 5F4E  
                             __ptext93 612C                               __ptext85 6116  
                             __ptext77 5D88                               __ptext69 398E  
                             __ptext94 614E                               __ptext86 5892  
                             __ptext78 5E76                               __ptext95 6156  
                             __ptext87 5FC2                               __ptext79 5DB8  
                             __ptext96 5F76                               __ptext88 446C  
                             __ptext97 60D8                               __ptext89 60AE  
                             __ptext98 6064                               __ptext99 5F9C  
                             _dispLogs 5FC2                          ?_actuatorTest 0001  
                   PlatformTest@i_1811 00B3                               _readCOND 598C  
                        ??_stopSignals 0080                             strcpy@from 0082  
                       i2_isdigit$2080 0002                     __end_of_initServos 54E2  
                        __size_of_Test 0106                          ?_EEPROM_write 00AB  
                             _initTime 6008                          __size_of_main 00C8  
                        __size_of_sort 0022         ??i2_change_state_to_menu_start 0043  
                             _logstate 00F8                    _updateServoPosition 53EC  
               __size_of_machineConfig 0064                          ??i2_lcdNibble 0001  
                             _printRTC 3404                            ??_lcdNibble 0080  
                            printRTC@i 00C2                               int$flags 007E  
                         ??_sensorTest 00AB                         _log_total_time 00F6  
                   _f_can_coming_to_ID 0131                              printf@len 00A3  
                            printf@val 00A5      __end_ofi2_change_state_to_menu_12 5CF8  
    __end_ofi2_change_state_to_menu_22 5CC8                       ??_PortTestPusher 00AB  
                             loadRTC@i 0096                      i2___awmod@divisor 0003  
               __end_of_printSortTimer 3100                              putch@data 0082  
                    i2___awmod@counter 0005               __end_of_I2C_Master_Start 614E  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 612C  
                           _INTCONbits 000FF2                   ?_updateServoPosition 0080  
                         ??_updateMenu 0043                        ??_algorithmTest 00AB  
                           _MAG_signal 00E4                               isdigit@c 0082  
                        sensorTest@res 00AD                         ??_actuatorTest 00AB  
                   sensorTest@res_1732 00AF                    _servo_timer_counter 006D  
                             intlevel2 0000                         ??_EEPROM_write 00AE  
                       BlockerTest@res 00AF                     __end_of_sensorTest 2A3A  
                     ___lwmod@dividend 0087                       ___lldiv@dividend 0080  
                         ?_EEPROM_read 0080                    __end_of_stopSignals 6064  
            ??_change_state_to_menu_11 002A              ??_change_state_to_menu_12 00AB  
            ??_change_state_to_menu_22 00AB              ??_change_state_to_menu_23 002A  
            ??_change_state_to_logs_11 002A              ??_change_state_to_logs_12 002A  
            ??_change_state_to_logs_22 002A              ??_change_state_to_logs_23 002A  
            ??_change_state_to_logs_33 002A              ??_change_state_to_logs_34 002A  
                             printf@ap 00A1                               printf@cp 009F  
                   __end_of_updateMenu 398E                __end_of_I2C_Master_Init 5836  
              __end_of_I2C_Master_Read 5E76                __end_of_I2C_Master_Wait 60D8  
                        ??_BlockerTest 00AB                __end_of_I2C_Master_Stop 6146  
                          lcdInst@data 0082                          printRTC@F3241 014D  
                         retrieveLog@i 000E                            _retrieveLog 446C  
                  __end_ofi2_lcdNibble 58EC                  ??_updateServoPosition 0084  
                      ?_printSortTimer 0001                     _servo_timer_target 006F  
                     ___lldiv@quotient 0088                      I2C_Master_Write@d 0081  
                      ___lwmod@divisor 0089                         _updateArmState 5AF0  
                    _f_can_distributed 0135                               strcpy@cp 0084  
                             strcpy@to 0080                          _machineConfig 5710  
                      ___lwmod@counter 008B                      _updateServoStates 3F9A  
                        printRTC@month 00BE                          ?_Distribution 0001  
                   ?_updateServoStates 0001                          _machine_state 00FC  
                        dispLogs@myLog 0012                         _f_arm_position 00EA  
                  ??_updateServoStates 0009                     i2printRTC@INT_time 002D  
