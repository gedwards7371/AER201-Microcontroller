

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Wed Mar 22 13:39:42 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   108                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   109                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   110  0000                     
   111                           ; Version 1.40
   112                           ; Generated 01/12/2016 GMT
   113                           ; 
   114                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   115                           ; All rights reserved.
   116                           ; 
   117                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   118                           ; 
   119                           ; Redistribution and use in source and binary forms, with or without modification, are
   120                           ; permitted provided that the following conditions are met:
   121                           ; 
   122                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   123                           ;        conditions and the following disclaimer.
   124                           ; 
   125                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   126                           ;        of conditions and the following disclaimer in the documentation and/or other
   127                           ;        materials provided with the distribution.
   128                           ; 
   129                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   130                           ;        software without specific prior written permission.
   131                           ; 
   132                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   133                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   134                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   135                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   136                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   137                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   138                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   139                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   140                           ; 
   141                           ; 
   142                           ; Code-generator required, PIC18F4620 Definitions
   143                           ; 
   144                           ; SFR Addresses
   145  0000                     
   146                           	psect	idataBANK1
   147  0047FE                     __pidataBANK1:
   148                           	opt stack 0
   149                           
   150                           ;initializer for UI@F3225
   151  0047FE  4D                 	db	77
   152  0047FF  4D                 	db	77
   153  004800  4D                 	db	77
   154  004801  00                 	db	0
   155                           
   156                           ;initializer for printRTC@F3216
   157  004802  4D                 	db	77
   158  004803  4D                 	db	77
   159  004804  4D                 	db	77
   160  004805  00                 	db	0
   161                           
   162                           	psect	mediumconst
   163  00FB24                     __pmediumconst:
   164                           	opt stack 0
   165  00FB24  00                 	db	0
   166  00FB25                     _keys:
   167                           	opt stack 0
   168  00FB25  31                 	db	49
   169  00FB26  32                 	db	50
   170  00FB27  33                 	db	51
   171  00FB28  41                 	db	65
   172  00FB29  34                 	db	52
   173  00FB2A  35                 	db	53
   174  00FB2B  36                 	db	54
   175  00FB2C  42                 	db	66
   176  00FB2D  37                 	db	55
   177  00FB2E  38                 	db	56
   178  00FB2F  39                 	db	57
   179  00FB30  43                 	db	67
   180  00FB31  2A                 	db	42
   181  00FB32  30                 	db	48
   182  00FB33  23                 	db	35
   183  00FB34  44                 	db	68
   184  00FB35  00                 	db	0
   185  00FB36                     __end_of_keys:
   186                           	opt stack 0
   187  00FB36                     _dpowers:
   188                           	opt stack 0
   189  00FB36  0001               	dw	1
   190  00FB38  000A               	dw	10
   191  00FB3A  0064               	dw	100
   192  00FB3C  03E8               	dw	1000
   193  00FB3E  2710               	dw	10000
   194  00FB40                     __end_of_dpowers:
   195                           	opt stack 0
   196  0000                     _ADCON0	set	4034
   197  0000                     _ADCON0bits	set	4034
   198  0000                     _ADCON1	set	4033
   199  0000                     _ADCON2	set	4032
   200  0000                     _ADRESH	set	4036
   201  0000                     _ADRESL	set	4035
   202  0000                     _CMCONbits	set	4020
   203  0000                     _CVRCON	set	4021
   204  0000                     _EEADR	set	4009
   205  0000                     _EEADRH	set	4010
   206  0000                     _EECON1bits	set	4006
   207  0000                     _EECON2	set	4007
   208  0000                     _EEDATA	set	4008
   209  0000                     _INTCONbits	set	4082
   210  0000                     _LATA	set	3977
   211  0000                     _LATAbits	set	3977
   212  0000                     _LATB	set	3978
   213  0000                     _LATC	set	3979
   214  0000                     _LATCbits	set	3979
   215  0000                     _LATD	set	3980
   216  0000                     _LATDbits	set	3980
   217  0000                     _LATE	set	3981
   218  0000                     _LATEbits	set	3981
   219  0000                     _OSCCON	set	4051
   220  0000                     _OSCTUNEbits	set	3995
   221  0000                     _PIR2bits	set	4001
   222  0000                     _PORTAbits	set	3968
   223  0000                     _PORTB	set	3969
   224  0000                     _PORTBbits	set	3969
   225  0000                     _SSPADD	set	4040
   226  0000                     _SSPBUF	set	4041
   227  0000                     _SSPCON1	set	4038
   228  0000                     _SSPCON2	set	4037
   229  0000                     _SSPSTAT	set	4039
   230  0000                     _T0CON	set	4053
   231  0000                     _T1CON	set	4045
   232  0000                     _T3CON	set	4017
   233  0000                     _TMR0H	set	4055
   234  0000                     _TMR0L	set	4054
   235  0000                     _TMR1H	set	4047
   236  0000                     _TMR1L	set	4046
   237  0000                     _TMR3H	set	4019
   238  0000                     _TMR3L	set	4018
   239  0000                     _TRISA	set	3986
   240  0000                     _TRISB	set	3987
   241  0000                     _TRISC	set	3988
   242  0000                     _TRISD	set	3989
   243  0000                     _TRISE	set	3990
   244  0000                     _ACKDT	set	32301
   245  0000                     _ACKEN	set	32300
   246  0000                     _ADIE	set	31982
   247  0000                     _INT1IE	set	32643
   248  0000                     _INT1IF	set	32640
   249  0000                     _PEIE	set	32662
   250  0000                     _PEN	set	32298
   251  0000                     _RCEN	set	32299
   252  0000                     _RSEN	set	32297
   253  0000                     _SEN	set	32296
   254  0000                     _TMR0IE	set	32661
   255  0000                     _TMR0IF	set	32658
   256  0000                     _TMR0ON	set	32431
   257  0000                     _TMR1IE	set	31976
   258  0000                     _TMR1IF	set	31984
   259  0000                     _TMR1ON	set	32360
   260  0000                     _TMR2IE	set	31977
   261  0000                     _TMR3IE	set	32001
   262  0000                     _TMR3IF	set	32009
   263  0000                     _TMR3ON	set	32136
   264  0000                     _TRISC3	set	31907
   265  0000                     _TRISC4	set	31908
   266  0000                     _nRBPU	set	32655
   267  00FB40                     STR_21:
   268  00FB40  25                 	db	37
   269  00FB41  30                 	db	48	;'0'
   270  00FB42  32                 	db	50	;'2'
   271  00FB43  64                 	db	100	;'d'
   272  00FB44  25                 	db	37
   273  00FB45  73                 	db	115	;'s'
   274  00FB46  20                 	db	32
   275  00FB47  7C                 	db	124
   276  00FB48  20                 	db	32
   277  00FB49  25                 	db	37
   278  00FB4A  30                 	db	48	;'0'
   279  00FB4B  32                 	db	50	;'2'
   280  00FB4C  64                 	db	100	;'d'
   281  00FB4D  3A                 	db	58	;':'
   282  00FB4E  25                 	db	37
   283  00FB4F  30                 	db	48	;'0'
   284  00FB50  32                 	db	50	;'2'
   285  00FB51  64                 	db	100	;'d'
   286  00FB52  3A                 	db	58	;':'
   287  00FB53  25                 	db	37
   288  00FB54  30                 	db	48	;'0'
   289  00FB55  32                 	db	50	;'2'
   290  00FB56  64                 	db	100	;'d'
   291  00FB57  00                 	db	0
   292  00FB58                     STR_66:
   293  00FB58  28                 	db	40
   294  00FB59  64                 	db	100	;'d'
   295  00FB5A  61                 	db	97	;'a'
   296  00FB5B  74                 	db	116	;'t'
   297  00FB5C  61                 	db	97	;'a'
   298  00FB5D  3A                 	db	58	;':'
   299  00FB5E  20                 	db	32
   300  00FB5F  25                 	db	37
   301  00FB60  75                 	db	117	;'u'
   302  00FB61  2C                 	db	44
   303  00FB62  20                 	db	32
   304  00FB63  61                 	db	97	;'a'
   305  00FB64  64                 	db	100	;'d'
   306  00FB65  64                 	db	100	;'d'
   307  00FB66  72                 	db	114	;'r'
   308  00FB67  3A                 	db	58	;':'
   309  00FB68  20                 	db	32
   310  00FB69  25                 	db	37
   311  00FB6A  75                 	db	117	;'u'
   312  00FB6B  29                 	db	41
   313  00FB6C  00                 	db	0
   314  00FB6D                     STR_111:
   315  00FB6D  44                 	db	68	;'D'
   316  00FB6E  20                 	db	32
   317  00FB6F  57                 	db	87	;'W'
   318  00FB70  49                 	db	73	;'I'
   319  00FB71  4C                 	db	76	;'L'
   320  00FB72  4C                 	db	76	;'L'
   321  00FB73  20                 	db	32
   322  00FB74  52                 	db	82	;'R'
   323  00FB75  45                 	db	69	;'E'
   324  00FB76  54                 	db	84	;'T'
   325  00FB77  55                 	db	85	;'U'
   326  00FB78  52                 	db	82	;'R'
   327  00FB79  4E                 	db	78	;'N'
   328  00FB7A  20                 	db	32
   329  00FB7B  20                 	db	32
   330  00FB7C  20                 	db	32
   331  00FB7D  20                 	db	32
   332  00FB7E  00                 	db	0
   333  00FB7F                     STR_112:
   334  00FB7F  4F                 	db	79	;'O'
   335  00FB80  54                 	db	84	;'T'
   336  00FB81  48                 	db	72	;'H'
   337  00FB82  45                 	db	69	;'E'
   338  00FB83  52                 	db	82	;'R'
   339  00FB84  20                 	db	32
   340  00FB85  53                 	db	83	;'S'
   341  00FB86  45                 	db	69	;'E'
   342  00FB87  54                 	db	84	;'T'
   343  00FB88  53                 	db	83	;'S'
   344  00FB89  20                 	db	32
   345  00FB8A  52                 	db	82	;'R'
   346  00FB8B  41                 	db	65	;'A'
   347  00FB8C  35                 	db	53	;'5'
   348  00FB8D  20                 	db	32
   349  00FB8E  20                 	db	32
   350  00FB8F  20                 	db	32
   351  00FB90  00                 	db	0
   352  00FB91                     STR_3:
   353  00FB91  2D                 	db	45
   354  00FB92  2D                 	db	45
   355  00FB93  20                 	db	32
   356  00FB94  4C                 	db	76	;'L'
   357  00FB95  4F                 	db	79	;'O'
   358  00FB96  47                 	db	71	;'G'
   359  00FB97  20                 	db	32
   360  00FB98  25                 	db	37
   361  00FB99  32                 	db	50	;'2'
   362  00FB9A  64                 	db	100	;'d'
   363  00FB9B  20                 	db	32
   364  00FB9C  48                 	db	72	;'H'
   365  00FB9D  45                 	db	69	;'E'
   366  00FB9E  52                 	db	82	;'R'
   367  00FB9F  45                 	db	69	;'E'
   368  00FBA0  2D                 	db	45
   369  00FBA1  2D                 	db	45
   370  00FBA2  00                 	db	0
   371  00FBA3                     STR_1:
   372  00FBA3  52                 	db	82	;'R'
   373  00FBA4  45                 	db	69	;'E'
   374  00FBA5  53                 	db	83	;'S'
   375  00FBA6  55                 	db	85	;'U'
   376  00FBA7  4C                 	db	76	;'L'
   377  00FBA8  54                 	db	84	;'T'
   378  00FBA9  53                 	db	83	;'S'
   379  00FBAA  20                 	db	32
   380  00FBAB  49                 	db	73	;'I'
   381  00FBAC  4E                 	db	78	;'N'
   382  00FBAD  20                 	db	32
   383  00FBAE  4C                 	db	76	;'L'
   384  00FBAF  4F                 	db	79	;'O'
   385  00FBB0  47                 	db	71	;'G'
   386  00FBB1  20                 	db	32
   387  00FBB2  25                 	db	37
   388  00FBB3  64                 	db	100	;'d'
   389  00FBB4  00                 	db	0
   390  00FBB5                     STR_102:
   391  00FBB5  4D                 	db	77	;'M'
   392  00FBB6  49                 	db	73	;'I'
   393  00FBB7  44                 	db	68	;'D'
   394  00FBB8  20                 	db	32
   395  00FBB9  2D                 	db	45
   396  00FBBA  2D                 	db	45
   397  00FBBB  20                 	db	32
   398  00FBBC  32                 	db	50	;'2'
   399  00FBBD  73                 	db	115	;'s'
   400  00FBBE  20                 	db	32
   401  00FBBF  20                 	db	32
   402  00FBC0  20                 	db	32
   403  00FBC1  20                 	db	32
   404  00FBC2  20                 	db	32
   405  00FBC3  20                 	db	32
   406  00FBC4  20                 	db	32
   407  00FBC5  00                 	db	0
   408  00FBC6                     STR_105:
   409  00FBC6  44                 	db	68	;'D'
   410  00FBC7  52                 	db	82	;'R'
   411  00FBC8  4F                 	db	79	;'O'
   412  00FBC9  50                 	db	80	;'P'
   413  00FBCA  20                 	db	32
   414  00FBCB  2D                 	db	45
   415  00FBCC  2D                 	db	45
   416  00FBCD  20                 	db	32
   417  00FBCE  32                 	db	50	;'2'
   418  00FBCF  73                 	db	115	;'s'
   419  00FBD0  20                 	db	32
   420  00FBD1  20                 	db	32
   421  00FBD2  20                 	db	32
   422  00FBD3  20                 	db	32
   423  00FBD4  20                 	db	32
   424  00FBD5  20                 	db	32
   425  00FBD6  00                 	db	0
   426  00FBD7                     STR_99:
   427  00FBD7  4C                 	db	76	;'L'
   428  00FBD8  45                 	db	69	;'E'
   429  00FBD9  46                 	db	70	;'F'
   430  00FBDA  54                 	db	84	;'T'
   431  00FBDB  20                 	db	32
   432  00FBDC  2D                 	db	45
   433  00FBDD  2D                 	db	45
   434  00FBDE  20                 	db	32
   435  00FBDF  32                 	db	50	;'2'
   436  00FBE0  73                 	db	115	;'s'
   437  00FBE1  20                 	db	32
   438  00FBE2  20                 	db	32
   439  00FBE3  20                 	db	32
   440  00FBE4  20                 	db	32
   441  00FBE5  20                 	db	32
   442  00FBE6  20                 	db	32
   443  00FBE7  00                 	db	0
   444  00FBE8                     STR_104:
   445  00FBE8  4C                 	db	76	;'L'
   446  00FBE9  45                 	db	69	;'E'
   447  00FBEA  56                 	db	86	;'V'
   448  00FBEB  45                 	db	69	;'E'
   449  00FBEC  4C                 	db	76	;'L'
   450  00FBED  20                 	db	32
   451  00FBEE  2D                 	db	45
   452  00FBEF  2D                 	db	45
   453  00FBF0  20                 	db	32
   454  00FBF1  32                 	db	50	;'2'
   455  00FBF2  73                 	db	115	;'s'
   456  00FBF3  20                 	db	32
   457  00FBF4  20                 	db	32
   458  00FBF5  20                 	db	32
   459  00FBF6  20                 	db	32
   460  00FBF7  20                 	db	32
   461  00FBF8  00                 	db	0
   462  00FBF9                     STR_98:
   463  00FBF9  52                 	db	82	;'R'
   464  00FBFA  49                 	db	73	;'I'
   465  00FBFB  47                 	db	71	;'G'
   466  00FBFC  48                 	db	72	;'H'
   467  00FBFD  54                 	db	84	;'T'
   468  00FBFE  20                 	db	32
   469  00FBFF  2D                 	db	45
   470  00FC00  2D                 	db	45
   471  00FC01  20                 	db	32
   472  00FC02  32                 	db	50	;'2'
   473  00FC03  73                 	db	115	;'s'
   474  00FC04  20                 	db	32
   475  00FC05  20                 	db	32
   476  00FC06  20                 	db	32
   477  00FC07  20                 	db	32
   478  00FC08  20                 	db	32
   479  00FC09  00                 	db	0
   480  00FC0A                     STR_97:
   481  00FC0A  4D                 	db	77	;'M'
   482  00FC0B  49                 	db	73	;'I'
   483  00FC0C  44                 	db	68	;'D'
   484  00FC0D  44                 	db	68	;'D'
   485  00FC0E  4C                 	db	76	;'L'
   486  00FC0F  45                 	db	69	;'E'
   487  00FC10  20                 	db	32
   488  00FC11  2D                 	db	45
   489  00FC12  2D                 	db	45
   490  00FC13  20                 	db	32
   491  00FC14  32                 	db	50	;'2'
   492  00FC15  73                 	db	115	;'s'
   493  00FC16  20                 	db	32
   494  00FC17  20                 	db	32
   495  00FC18  20                 	db	32
   496  00FC19  20                 	db	32
   497  00FC1A  00                 	db	0
   498  00FC1B                     STR_114:
   499  00FC1B  44                 	db	68	;'D'
   500  00FC1C  20                 	db	32
   501  00FC1D  57                 	db	87	;'W'
   502  00FC1E  49                 	db	73	;'I'
   503  00FC1F  4C                 	db	76	;'L'
   504  00FC20  4C                 	db	76	;'L'
   505  00FC21  20                 	db	32
   506  00FC22  52                 	db	82	;'R'
   507  00FC23  45                 	db	69	;'E'
   508  00FC24  54                 	db	84	;'T'
   509  00FC25  55                 	db	85	;'U'
   510  00FC26  52                 	db	82	;'R'
   511  00FC27  4E                 	db	78	;'N'
   512  00FC28  20                 	db	32
   513  00FC29  20                 	db	32
   514  00FC2A  20                 	db	32
   515  00FC2B  00                 	db	0
   516  00FC2C                     STR_100:
   517  00FC2C  4D                 	db	77	;'M'
   518  00FC2D  49                 	db	73	;'I'
   519  00FC2E  44                 	db	68	;'D'
   520  00FC2F  2D                 	db	45
   521  00FC30  4C                 	db	76	;'L'
   522  00FC31  45                 	db	69	;'E'
   523  00FC32  46                 	db	70	;'F'
   524  00FC33  54                 	db	84	;'T'
   525  00FC34  20                 	db	32
   526  00FC35  2D                 	db	45
   527  00FC36  2D                 	db	45
   528  00FC37  20                 	db	32
   529  00FC38  32                 	db	50	;'2'
   530  00FC39  73                 	db	115	;'s'
   531  00FC3A  20                 	db	32
   532  00FC3B  20                 	db	32
   533  00FC3C  00                 	db	0
   534  00FC3D                     STR_101:
   535  00FC3D  4D                 	db	77	;'M'
   536  00FC3E  49                 	db	73	;'I'
   537  00FC3F  44                 	db	68	;'D'
   538  00FC40  2D                 	db	45
   539  00FC41  52                 	db	82	;'R'
   540  00FC42  49                 	db	73	;'I'
   541  00FC43  47                 	db	71	;'G'
   542  00FC44  48                 	db	72	;'H'
   543  00FC45  54                 	db	84	;'T'
   544  00FC46  20                 	db	32
   545  00FC47  2D                 	db	45
   546  00FC48  2D                 	db	45
   547  00FC49  20                 	db	32
   548  00FC4A  32                 	db	50	;'2'
   549  00FC4B  73                 	db	115	;'s'
   550  00FC4C  20                 	db	32
   551  00FC4D  00                 	db	0
   552  00FC4E                     STR_115:
   553  00FC4E  45                 	db	69	;'E'
   554  00FC4F  4C                 	db	76	;'L'
   555  00FC50  53                 	db	83	;'S'
   556  00FC51  45                 	db	69	;'E'
   557  00FC52  20                 	db	32
   558  00FC53  54                 	db	84	;'T'
   559  00FC54  4F                 	db	79	;'O'
   560  00FC55  47                 	db	71	;'G'
   561  00FC56  47                 	db	71	;'G'
   562  00FC57  4C                 	db	76	;'L'
   563  00FC58  45                 	db	69	;'E'
   564  00FC59  53                 	db	83	;'S'
   565  00FC5A  20                 	db	32
   566  00FC5B  52                 	db	82	;'R'
   567  00FC5C  41                 	db	65	;'A'
   568  00FC5D  35                 	db	53	;'5'
   569  00FC5E  00                 	db	0
   570  00FC5F                     STR_72:
   571  00FC5F  41                 	db	65	;'A'
   572  00FC60  4C                 	db	76	;'L'
   573  00FC61  47                 	db	71	;'G'
   574  00FC62  31                 	db	49	;'1'
   575  00FC63  3A                 	db	58	;':'
   576  00FC64  20                 	db	32
   577  00FC65  39                 	db	57	;'9'
   578  00FC66  20                 	db	32
   579  00FC67  50                 	db	80	;'P'
   580  00FC68  4F                 	db	79	;'O'
   581  00FC69  50                 	db	80	;'P'
   582  00FC6A  4E                 	db	78	;'N'
   583  00FC6B  4F                 	db	79	;'O'
   584  00FC6C  54                 	db	84	;'T'
   585  00FC6D  41                 	db	65	;'A'
   586  00FC6E  42                 	db	66	;'B'
   587  00FC6F  00                 	db	0
   588  00FC70                     STR_68:
   589  00FC70  31                 	db	49	;'1'
   590  00FC71  2E                 	db	46
   591  00FC72  41                 	db	65	;'A'
   592  00FC73  4C                 	db	76	;'L'
   593  00FC74  47                 	db	71	;'G'
   594  00FC75  7C                 	db	124
   595  00FC76  32                 	db	50	;'2'
   596  00FC77  2E                 	db	46
   597  00FC78  53                 	db	83	;'S'
   598  00FC79  4E                 	db	78	;'N'
   599  00FC7A  52                 	db	82	;'R'
   600  00FC7B  7C                 	db	124
   601  00FC7C  33                 	db	51	;'3'
   602  00FC7D  2E                 	db	46
   603  00FC7E  41                 	db	65	;'A'
   604  00FC7F  43                 	db	67	;'C'
   605  00FC80  00                 	db	0
   606  00FC81                     STR_92:
   607  00FC81  54                 	db	84	;'T'
   608  00FC82  53                 	db	83	;'S'
   609  00FC83  54                 	db	84	;'T'
   610  00FC84  3A                 	db	58	;':'
   611  00FC85  20                 	db	32
   612  00FC86  43                 	db	67	;'C'
   613  00FC87  4F                 	db	79	;'O'
   614  00FC88  4E                 	db	78	;'N'
   615  00FC89  44                 	db	68	;'D'
   616  00FC8A  20                 	db	32
   617  00FC8B  53                 	db	83	;'S'
   618  00FC8C  4F                 	db	79	;'O'
   619  00FC8D  4C                 	db	76	;'L'
   620  00FC8E  4E                 	db	78	;'N'
   621  00FC8F  27                 	db	39
   622  00FC90  44                 	db	68	;'D'
   623  00FC91  00                 	db	0
   624  00FC92                     STR_94:
   625  00FC92  54                 	db	84	;'T'
   626  00FC93  53                 	db	83	;'S'
   627  00FC94  54                 	db	84	;'T'
   628  00FC95  3A                 	db	58	;':'
   629  00FC96  20                 	db	32
   630  00FC97  50                 	db	80	;'P'
   631  00FC98  55                 	db	85	;'U'
   632  00FC99  53                 	db	83	;'S'
   633  00FC9A  48                 	db	72	;'H'
   634  00FC9B  20                 	db	32
   635  00FC9C  53                 	db	83	;'S'
   636  00FC9D  4F                 	db	79	;'O'
   637  00FC9E  4C                 	db	76	;'L'
   638  00FC9F  4E                 	db	78	;'N'
   639  00FCA0  27                 	db	39
   640  00FCA1  44                 	db	68	;'D'
   641  00FCA2  00                 	db	0
   642  00FCA3                     STR_69:
   643  00FCA3  34                 	db	52	;'4'
   644  00FCA4  2E                 	db	46
   645  00FCA5  48                 	db	72	;'H'
   646  00FCA6  49                 	db	73	;'I'
   647  00FCA7  7C                 	db	124
   648  00FCA8  35                 	db	53	;'5'
   649  00FCA9  2E                 	db	46
   650  00FCAA  54                 	db	84	;'T'
   651  00FCAB  4F                 	db	79	;'O'
   652  00FCAC  47                 	db	71	;'G'
   653  00FCAD  7C                 	db	124
   654  00FCAE  36                 	db	54	;'6'
   655  00FCAF  2E                 	db	46
   656  00FCB0  45                 	db	69	;'E'
   657  00FCB1  45                 	db	69	;'E'
   658  00FCB2  50                 	db	80	;'P'
   659  00FCB3  00                 	db	0
   660  00FCB4                     STR_110:
   661  00FCB4  54                 	db	84	;'T'
   662  00FCB5  53                 	db	83	;'S'
   663  00FCB6  54                 	db	84	;'T'
   664  00FCB7  3A                 	db	58	;':'
   665  00FCB8  20                 	db	32
   666  00FCB9  42                 	db	66	;'B'
   667  00FCBA  4F                 	db	79	;'O'
   668  00FCBB  54                 	db	84	;'T'
   669  00FCBC  48                 	db	72	;'H'
   670  00FCBD  20                 	db	32
   671  00FCBE  53                 	db	83	;'S'
   672  00FCBF  45                 	db	69	;'E'
   673  00FCC0  52                 	db	82	;'R'
   674  00FCC1  56                 	db	86	;'V'
   675  00FCC2  4F                 	db	79	;'O'
   676  00FCC3  53                 	db	83	;'S'
   677  00FCC4  00                 	db	0
   678  00FCC5                     STR_41:
   679  00FCC5  4C                 	db	76	;'L'
   680  00FCC6  4F                 	db	79	;'O'
   681  00FCC7  47                 	db	71	;'G'
   682  00FCC8  20                 	db	32
   683  00FCC9  31                 	db	49	;'1'
   684  00FCCA  20                 	db	32
   685  00FCCB  20                 	db	32
   686  00FCCC  20                 	db	32
   687  00FCCD  20                 	db	32
   688  00FCCE  20                 	db	32
   689  00FCCF  20                 	db	32
   690  00FCD0  20                 	db	32
   691  00FCD1  20                 	db	32
   692  00FCD2  20                 	db	32
   693  00FCD3  20                 	db	32
   694  00FCD4  20                 	db	32
   695  00FCD5  00                 	db	0
   696  00FCD6                     STR_40:
   697  00FCD6  4C                 	db	76	;'L'
   698  00FCD7  4F                 	db	79	;'O'
   699  00FCD8  47                 	db	71	;'G'
   700  00FCD9  20                 	db	32
   701  00FCDA  32                 	db	50	;'2'
   702  00FCDB  20                 	db	32
   703  00FCDC  20                 	db	32
   704  00FCDD  20                 	db	32
   705  00FCDE  20                 	db	32
   706  00FCDF  20                 	db	32
   707  00FCE0  20                 	db	32
   708  00FCE1  20                 	db	32
   709  00FCE2  20                 	db	32
   710  00FCE3  20                 	db	32
   711  00FCE4  20                 	db	32
   712  00FCE5  20                 	db	32
   713  00FCE6  00                 	db	0
   714  00FCE7                     STR_44:
   715  00FCE7  4C                 	db	76	;'L'
   716  00FCE8  4F                 	db	79	;'O'
   717  00FCE9  47                 	db	71	;'G'
   718  00FCEA  20                 	db	32
   719  00FCEB  33                 	db	51	;'3'
   720  00FCEC  20                 	db	32
   721  00FCED  20                 	db	32
   722  00FCEE  20                 	db	32
   723  00FCEF  20                 	db	32
   724  00FCF0  20                 	db	32
   725  00FCF1  20                 	db	32
   726  00FCF2  20                 	db	32
   727  00FCF3  20                 	db	32
   728  00FCF4  20                 	db	32
   729  00FCF5  20                 	db	32
   730  00FCF6  20                 	db	32
   731  00FCF7  00                 	db	0
   732  00FCF8                     STR_48:
   733  00FCF8  4C                 	db	76	;'L'
   734  00FCF9  4F                 	db	79	;'O'
   735  00FCFA  47                 	db	71	;'G'
   736  00FCFB  20                 	db	32
   737  00FCFC  34                 	db	52	;'4'
   738  00FCFD  20                 	db	32
   739  00FCFE  20                 	db	32
   740  00FCFF  20                 	db	32
   741  00FD00  20                 	db	32
   742  00FD01  20                 	db	32
   743  00FD02  20                 	db	32
   744  00FD03  20                 	db	32
   745  00FD04  20                 	db	32
   746  00FD05  20                 	db	32
   747  00FD06  20                 	db	32
   748  00FD07  20                 	db	32
   749  00FD08  00                 	db	0
   750  00FD09                     STR_36:
   751  00FD09  33                 	db	51	;'3'
   752  00FD0A  2E                 	db	46
   753  00FD0B  20                 	db	32
   754  00FD0C  4C                 	db	76	;'L'
   755  00FD0D  4F                 	db	79	;'O'
   756  00FD0E  47                 	db	71	;'G'
   757  00FD0F  53                 	db	83	;'S'
   758  00FD10  20                 	db	32
   759  00FD11  20                 	db	32
   760  00FD12  20                 	db	32
   761  00FD13  20                 	db	32
   762  00FD14  20                 	db	32
   763  00FD15  20                 	db	32
   764  00FD16  20                 	db	32
   765  00FD17  20                 	db	32
   766  00FD18  20                 	db	32
   767  00FD19  00                 	db	0
   768  00FD1A                     STR_32:
   769  00FD1A  32                 	db	50	;'2'
   770  00FD1B  2E                 	db	46
   771  00FD1C  20                 	db	32
   772  00FD1D  53                 	db	83	;'S'
   773  00FD1E  4F                 	db	79	;'O'
   774  00FD1F  52                 	db	82	;'R'
   775  00FD20  54                 	db	84	;'T'
   776  00FD21  20                 	db	32
   777  00FD22  20                 	db	32
   778  00FD23  20                 	db	32
   779  00FD24  20                 	db	32
   780  00FD25  20                 	db	32
   781  00FD26  20                 	db	32
   782  00FD27  20                 	db	32
   783  00FD28  20                 	db	32
   784  00FD29  20                 	db	32
   785  00FD2A  00                 	db	0
   786  00FD2B                     STR_33:
   787  00FD2B  31                 	db	49	;'1'
   788  00FD2C  2E                 	db	46
   789  00FD2D  20                 	db	32
   790  00FD2E  44                 	db	68	;'D'
   791  00FD2F  41                 	db	65	;'A'
   792  00FD30  54                 	db	84	;'T'
   793  00FD31  45                 	db	69	;'E'
   794  00FD32  2F                 	db	47
   795  00FD33  54                 	db	84	;'T'
   796  00FD34  49                 	db	73	;'I'
   797  00FD35  4D                 	db	77	;'M'
   798  00FD36  45                 	db	69	;'E'
   799  00FD37  20                 	db	32
   800  00FD38  20                 	db	32
   801  00FD39  20                 	db	32
   802  00FD3A  20                 	db	32
   803  00FD3B  00                 	db	0
   804  00FD3C                     STR_24:
   805  00FD3C  20                 	db	32
   806  00FD3D  2D                 	db	45
   807  00FD3E  2D                 	db	45
   808  00FD3F  20                 	db	32
   809  00FD40  50                 	db	80	;'P'
   810  00FD41  4F                 	db	79	;'O'
   811  00FD42  50                 	db	80	;'P'
   812  00FD43  20                 	db	32
   813  00FD44  20                 	db	32
   814  00FD45  43                 	db	67	;'C'
   815  00FD46  41                 	db	65	;'A'
   816  00FD47  4E                 	db	78	;'N'
   817  00FD48  20                 	db	32
   818  00FD49  2D                 	db	45
   819  00FD4A  2D                 	db	45
   820  00FD4B  20                 	db	32
   821  00FD4C  00                 	db	0
   822  00FD4D                     STR_26:
   823  00FD4D  20                 	db	32
   824  00FD4E  2D                 	db	45
   825  00FD4F  2D                 	db	45
   826  00FD50  20                 	db	32
   827  00FD51  53                 	db	83	;'S'
   828  00FD52  4F                 	db	79	;'O'
   829  00FD53  55                 	db	85	;'U'
   830  00FD54  50                 	db	80	;'P'
   831  00FD55  20                 	db	32
   832  00FD56  43                 	db	67	;'C'
   833  00FD57  41                 	db	65	;'A'
   834  00FD58  4E                 	db	78	;'N'
   835  00FD59  20                 	db	32
   836  00FD5A  2D                 	db	45
   837  00FD5B  2D                 	db	45
   838  00FD5C  20                 	db	32
   839  00FD5D  00                 	db	0
   840  00FD5E                     STR_28:
   841  00FD5E  2D                 	db	45
   842  00FD5F  2D                 	db	45
   843  00FD60  20                 	db	32
   844  00FD61  54                 	db	84	;'T'
   845  00FD62  4F                 	db	79	;'O'
   846  00FD63  54                 	db	84	;'T'
   847  00FD64  41                 	db	65	;'A'
   848  00FD65  4C                 	db	76	;'L'
   849  00FD66  20                 	db	32
   850  00FD67  43                 	db	67	;'C'
   851  00FD68  41                 	db	65	;'A'
   852  00FD69  4E                 	db	78	;'N'
   853  00FD6A  53                 	db	83	;'S'
   854  00FD6B  20                 	db	32
   855  00FD6C  2D                 	db	45
   856  00FD6D  2D                 	db	45
   857  00FD6E  00                 	db	0
   858  00FD6F                     STR_39:
   859  00FD6F  4C                 	db	76	;'L'
   860  00FD70  4F                 	db	79	;'O'
   861  00FD71  47                 	db	71	;'G'
   862  00FD72  20                 	db	32
   863  00FD73  31                 	db	49	;'1'
   864  00FD74  20                 	db	32
   865  00FD75  20                 	db	32
   866  00FD76  20                 	db	32
   867  00FD77  20                 	db	32
   868  00FD78  20                 	db	32
   869  00FD79  20                 	db	32
   870  00FD7A  20                 	db	32
   871  00FD7B  20                 	db	32
   872  00FD7C  20                 	db	32
   873  00FD7D  20                 	db	32
   874  00FD7E  3C                 	db	60	;'<'
   875  00FD7F  00                 	db	0
   876  00FD80                     STR_42:
   877  00FD80  4C                 	db	76	;'L'
   878  00FD81  4F                 	db	79	;'O'
   879  00FD82  47                 	db	71	;'G'
   880  00FD83  20                 	db	32
   881  00FD84  32                 	db	50	;'2'
   882  00FD85  20                 	db	32
   883  00FD86  20                 	db	32
   884  00FD87  20                 	db	32
   885  00FD88  20                 	db	32
   886  00FD89  20                 	db	32
   887  00FD8A  20                 	db	32
   888  00FD8B  20                 	db	32
   889  00FD8C  20                 	db	32
   890  00FD8D  20                 	db	32
   891  00FD8E  20                 	db	32
   892  00FD8F  3C                 	db	60	;'<'
   893  00FD90  00                 	db	0
   894  00FD91                     STR_46:
   895  00FD91  4C                 	db	76	;'L'
   896  00FD92  4F                 	db	79	;'O'
   897  00FD93  47                 	db	71	;'G'
   898  00FD94  20                 	db	32
   899  00FD95  33                 	db	51	;'3'
   900  00FD96  20                 	db	32
   901  00FD97  20                 	db	32
   902  00FD98  20                 	db	32
   903  00FD99  20                 	db	32
   904  00FD9A  20                 	db	32
   905  00FD9B  20                 	db	32
   906  00FD9C  20                 	db	32
   907  00FD9D  20                 	db	32
   908  00FD9E  20                 	db	32
   909  00FD9F  20                 	db	32
   910  00FDA0  3C                 	db	60	;'<'
   911  00FDA1  00                 	db	0
   912  00FDA2                     STR_50:
   913  00FDA2  4C                 	db	76	;'L'
   914  00FDA3  4F                 	db	79	;'O'
   915  00FDA4  47                 	db	71	;'G'
   916  00FDA5  20                 	db	32
   917  00FDA6  34                 	db	52	;'4'
   918  00FDA7  20                 	db	32
   919  00FDA8  20                 	db	32
   920  00FDA9  20                 	db	32
   921  00FDAA  20                 	db	32
   922  00FDAB  20                 	db	32
   923  00FDAC  20                 	db	32
   924  00FDAD  20                 	db	32
   925  00FDAE  20                 	db	32
   926  00FDAF  20                 	db	32
   927  00FDB0  20                 	db	32
   928  00FDB1  3C                 	db	60	;'<'
   929  00FDB2  00                 	db	0
   930  00FDB3                     STR_38:
   931  00FDB3  33                 	db	51	;'3'
   932  00FDB4  2E                 	db	46
   933  00FDB5  20                 	db	32
   934  00FDB6  4C                 	db	76	;'L'
   935  00FDB7  4F                 	db	79	;'O'
   936  00FDB8  47                 	db	71	;'G'
   937  00FDB9  53                 	db	83	;'S'
   938  00FDBA  20                 	db	32
   939  00FDBB  20                 	db	32
   940  00FDBC  20                 	db	32
   941  00FDBD  20                 	db	32
   942  00FDBE  20                 	db	32
   943  00FDBF  20                 	db	32
   944  00FDC0  20                 	db	32
   945  00FDC1  20                 	db	32
   946  00FDC2  3C                 	db	60	;'<'
   947  00FDC3  00                 	db	0
   948  00FDC4                     STR_34:
   949  00FDC4  32                 	db	50	;'2'
   950  00FDC5  2E                 	db	46
   951  00FDC6  20                 	db	32
   952  00FDC7  53                 	db	83	;'S'
   953  00FDC8  4F                 	db	79	;'O'
   954  00FDC9  52                 	db	82	;'R'
   955  00FDCA  54                 	db	84	;'T'
   956  00FDCB  20                 	db	32
   957  00FDCC  20                 	db	32
   958  00FDCD  20                 	db	32
   959  00FDCE  20                 	db	32
   960  00FDCF  20                 	db	32
   961  00FDD0  20                 	db	32
   962  00FDD1  20                 	db	32
   963  00FDD2  20                 	db	32
   964  00FDD3  3C                 	db	60	;'<'
   965  00FDD4  00                 	db	0
   966  00FDD5                     STR_31:
   967  00FDD5  31                 	db	49	;'1'
   968  00FDD6  2E                 	db	46
   969  00FDD7  20                 	db	32
   970  00FDD8  44                 	db	68	;'D'
   971  00FDD9  41                 	db	65	;'A'
   972  00FDDA  54                 	db	84	;'T'
   973  00FDDB  45                 	db	69	;'E'
   974  00FDDC  2F                 	db	47
   975  00FDDD  54                 	db	84	;'T'
   976  00FDDE  49                 	db	73	;'I'
   977  00FDDF  4D                 	db	77	;'M'
   978  00FDE0  45                 	db	69	;'E'
   979  00FDE1  20                 	db	32
   980  00FDE2  20                 	db	32
   981  00FDE3  20                 	db	32
   982  00FDE4  3C                 	db	60	;'<'
   983  00FDE5  00                 	db	0
   984  00FDE6                     STR_6:
   985  00FDE6  50                 	db	80	;'P'
   986  00FDE7  41                 	db	65	;'A'
   987  00FDE8  55                 	db	85	;'U'
   988  00FDE9  53                 	db	83	;'S'
   989  00FDEA  45                 	db	69	;'E'
   990  00FDEB  20                 	db	32
   991  00FDEC  3C                 	db	60	;'<'
   992  00FDED  20                 	db	32
   993  00FDEE  7C                 	db	124
   994  00FDEF  20                 	db	32
   995  00FDF0  42                 	db	66	;'B'
   996  00FDF1  41                 	db	65	;'A'
   997  00FDF2  43                 	db	67	;'C'
   998  00FDF3  4B                 	db	75	;'K'
   999  00FDF4  20                 	db	32
  1000  00FDF5  3E                 	db	62	;'>'
  1001  00FDF6  00                 	db	0
  1002  00FDF7                     STR_30:
  1003  00FDF7  50                 	db	80	;'P'
  1004  00FDF8  55                 	db	85	;'U'
  1005  00FDF9  53                 	db	83	;'S'
  1006  00FDFA  48                 	db	72	;'H'
  1007  00FDFB  20                 	db	32
  1008  00FDFC  54                 	db	84	;'T'
  1009  00FDFD  4F                 	db	79	;'O'
  1010  00FDFE  20                 	db	32
  1011  00FDFF  43                 	db	67	;'C'
  1012  00FE00  4F                 	db	79	;'O'
  1013  00FE01  4E                 	db	78	;'N'
  1014  00FE02  54                 	db	84	;'T'
  1015  00FE03  49                 	db	73	;'I'
  1016  00FE04  4E                 	db	78	;'N'
  1017  00FE05  55                 	db	85	;'U'
  1018  00FE06  45                 	db	69	;'E'
  1019  00FE07  00                 	db	0
  1020  00FE08                     STR_27:
  1021  00FE08  4E                 	db	78	;'N'
  1022  00FE09  4C                 	db	76	;'L'
  1023  00FE0A  41                 	db	65	;'A'
  1024  00FE0B  42                 	db	66	;'B'
  1025  00FE0C  3A                 	db	58	;':'
  1026  00FE0D  20                 	db	32
  1027  00FE0E  25                 	db	37
  1028  00FE0F  64                 	db	100	;'d'
  1029  00FE10  7C                 	db	124
  1030  00FE11  4C                 	db	76	;'L'
  1031  00FE12  41                 	db	65	;'A'
  1032  00FE13  42                 	db	66	;'B'
  1033  00FE14  3A                 	db	58	;':'
  1034  00FE15  20                 	db	32
  1035  00FE16  25                 	db	37
  1036  00FE17  64                 	db	100	;'d'
  1037  00FE18  00                 	db	0
  1038  00FE19                     STR_25:
  1039  00FE19  4E                 	db	78	;'N'
  1040  00FE1A  54                 	db	84	;'T'
  1041  00FE1B  41                 	db	65	;'A'
  1042  00FE1C  42                 	db	66	;'B'
  1043  00FE1D  3A                 	db	58	;':'
  1044  00FE1E  20                 	db	32
  1045  00FE1F  25                 	db	37
  1046  00FE20  64                 	db	100	;'d'
  1047  00FE21  7C                 	db	124
  1048  00FE22  54                 	db	84	;'T'
  1049  00FE23  41                 	db	65	;'A'
  1050  00FE24  42                 	db	66	;'B'
  1051  00FE25  3A                 	db	58	;':'
  1052  00FE26  20                 	db	32
  1053  00FE27  25                 	db	37
  1054  00FE28  64                 	db	100	;'d'
  1055  00FE29  00                 	db	0
  1056  00FE2A                     STR_83:
  1057  00FE2A  4D                 	db	77	;'M'
  1058  00FE2B  41                 	db	65	;'A'
  1059  00FE2C  47                 	db	71	;'G'
  1060  00FE2D  5F                 	db	95	;'_'
  1061  00FE2E  73                 	db	115	;'s'
  1062  00FE2F  69                 	db	105	;'i'
  1063  00FE30  67                 	db	103	;'g'
  1064  00FE31  6E                 	db	110	;'n'
  1065  00FE32  61                 	db	97	;'a'
  1066  00FE33  6C                 	db	108	;'l'
  1067  00FE34  3A                 	db	58	;':'
  1068  00FE35  20                 	db	32
  1069  00FE36  25                 	db	37
  1070  00FE37  64                 	db	100	;'d'
  1071  00FE38  20                 	db	32
  1072  00FE39  00                 	db	0
  1073  00FE3A                     STR_103:
  1074  00FE3A  54                 	db	84	;'T'
  1075  00FE3B  53                 	db	83	;'S'
  1076  00FE3C  54                 	db	84	;'T'
  1077  00FE3D  3A                 	db	58	;':'
  1078  00FE3E  20                 	db	32
  1079  00FE3F  54                 	db	84	;'T'
  1080  00FE40  49                 	db	73	;'I'
  1081  00FE41  4C                 	db	76	;'L'
  1082  00FE42  54                 	db	84	;'T'
  1083  00FE43  20                 	db	32
  1084  00FE44  53                 	db	83	;'S'
  1085  00FE45  45                 	db	69	;'E'
  1086  00FE46  52                 	db	82	;'R'
  1087  00FE47  56                 	db	86	;'V'
  1088  00FE48  4F                 	db	79	;'O'
  1089  00FE49  00                 	db	0
  1090  00FE4A                     STR_4:
  1091  00FE4A  44                 	db	68	;'D'
  1092  00FE4B  49                 	db	73	;'I'
  1093  00FE4C  44                 	db	68	;'D'
  1094  00FE4D  4E                 	db	78	;'N'
  1095  00FE4E  27                 	db	39
  1096  00FE4F  54                 	db	84	;'T'
  1097  00FE50  20                 	db	32
  1098  00FE51  43                 	db	67	;'C'
  1099  00FE52  4F                 	db	79	;'O'
  1100  00FE53  4D                 	db	77	;'M'
  1101  00FE54  50                 	db	80	;'P'
  1102  00FE55  4C                 	db	76	;'L'
  1103  00FE56  45                 	db	69	;'E'
  1104  00FE57  54                 	db	84	;'T'
  1105  00FE58  45                 	db	69	;'E'
  1106  00FE59  00                 	db	0
  1107  00FE5A                     STR_80:
  1108  00FE5A  49                 	db	73	;'I'
  1109  00FE5B  52                 	db	82	;'R'
  1110  00FE5C  5F                 	db	95	;'_'
  1111  00FE5D  73                 	db	115	;'s'
  1112  00FE5E  69                 	db	105	;'i'
  1113  00FE5F  67                 	db	103	;'g'
  1114  00FE60  6E                 	db	110	;'n'
  1115  00FE61  61                 	db	97	;'a'
  1116  00FE62  6C                 	db	108	;'l'
  1117  00FE63  3A                 	db	58	;':'
  1118  00FE64  20                 	db	32
  1119  00FE65  25                 	db	37
  1120  00FE66  64                 	db	100	;'d'
  1121  00FE67  20                 	db	32
  1122  00FE68  00                 	db	0
  1123  00FE69                     STR_109:
  1124  00FE69  43                 	db	67	;'C'
  1125  00FE6A  41                 	db	65	;'A'
  1126  00FE6B  4D                 	db	77	;'M'
  1127  00FE6C  20                 	db	32
  1128  00FE6D  44                 	db	68	;'D'
  1129  00FE6E  57                 	db	87	;'W'
  1130  00FE6F  4E                 	db	78	;'N'
  1131  00FE70  20                 	db	32
  1132  00FE71  7C                 	db	124
  1133  00FE72  52                 	db	82	;'R'
  1134  00FE73  43                 	db	67	;'C'
  1135  00FE74  30                 	db	48	;'0'
  1136  00FE75  3D                 	db	61	;'='
  1137  00FE76  30                 	db	48	;'0'
  1138  00FE77  00                 	db	0
  1139  00FE78                     STR_108:
  1140  00FE78  43                 	db	67	;'C'
  1141  00FE79  41                 	db	65	;'A'
  1142  00FE7A  4D                 	db	77	;'M'
  1143  00FE7B  20                 	db	32
  1144  00FE7C  55                 	db	85	;'U'
  1145  00FE7D  50                 	db	80	;'P'
  1146  00FE7E  20                 	db	32
  1147  00FE7F  20                 	db	32
  1148  00FE80  7C                 	db	124
  1149  00FE81  52                 	db	82	;'R'
  1150  00FE82  43                 	db	67	;'C'
  1151  00FE83  30                 	db	48	;'0'
  1152  00FE84  3D                 	db	61	;'='
  1153  00FE85  31                 	db	49	;'1'
  1154  00FE86  00                 	db	0
  1155  00FE87                     STR_82:
  1156  00FE87  54                 	db	84	;'T'
  1157  00FE88  53                 	db	83	;'S'
  1158  00FE89  54                 	db	84	;'T'
  1159  00FE8A  3A                 	db	58	;':'
  1160  00FE8B  20                 	db	32
  1161  00FE8C  4D                 	db	77	;'M'
  1162  00FE8D  41                 	db	65	;'A'
  1163  00FE8E  47                 	db	71	;'G'
  1164  00FE8F  4E                 	db	78	;'N'
  1165  00FE90  45                 	db	69	;'E'
  1166  00FE91  54                 	db	84	;'T'
  1167  00FE92  49                 	db	73	;'I'
  1168  00FE93  53                 	db	83	;'S'
  1169  00FE94  4D                 	db	77	;'M'
  1170  00FE95  00                 	db	0
  1171  00FE96                     STR_107:
  1172  00FE96  54                 	db	84	;'T'
  1173  00FE97  53                 	db	83	;'S'
  1174  00FE98  54                 	db	84	;'T'
  1175  00FE99  3A                 	db	58	;':'
  1176  00FE9A  20                 	db	32
  1177  00FE9B  43                 	db	67	;'C'
  1178  00FE9C  41                 	db	65	;'A'
  1179  00FE9D  4D                 	db	77	;'M'
  1180  00FE9E  20                 	db	32
  1181  00FE9F  53                 	db	83	;'S'
  1182  00FEA0  45                 	db	69	;'E'
  1183  00FEA1  52                 	db	82	;'R'
  1184  00FEA2  56                 	db	86	;'V'
  1185  00FEA3  4F                 	db	79	;'O'
  1186  00FEA4  00                 	db	0
  1187  00FEA5                     STR_96:
  1188  00FEA5  54                 	db	84	;'T'
  1189  00FEA6  53                 	db	83	;'S'
  1190  00FEA7  54                 	db	84	;'T'
  1191  00FEA8  3A                 	db	58	;':'
  1192  00FEA9  20                 	db	32
  1193  00FEAA  50                 	db	80	;'P'
  1194  00FEAB  41                 	db	65	;'A'
  1195  00FEAC  4E                 	db	78	;'N'
  1196  00FEAD  20                 	db	32
  1197  00FEAE  53                 	db	83	;'S'
  1198  00FEAF  45                 	db	69	;'E'
  1199  00FEB0  52                 	db	82	;'R'
  1200  00FEB1  56                 	db	86	;'V'
  1201  00FEB2  4F                 	db	79	;'O'
  1202  00FEB3  00                 	db	0
  1203  00FEB4                     STR_75:
  1204  00FEB4  41                 	db	65	;'A'
  1205  00FEB5  4C                 	db	76	;'L'
  1206  00FEB6  47                 	db	71	;'G'
  1207  00FEB7  34                 	db	52	;'4'
  1208  00FEB8  3A                 	db	58	;':'
  1209  00FEB9  20                 	db	32
  1210  00FEBA  41                 	db	65	;'A'
  1211  00FEBB  4C                 	db	76	;'L'
  1212  00FEBC  4C                 	db	76	;'L'
  1213  00FEBD  20                 	db	32
  1214  00FEBE  43                 	db	67	;'C'
  1215  00FEBF  41                 	db	65	;'A'
  1216  00FEC0  4E                 	db	78	;'N'
  1217  00FEC1  53                 	db	83	;'S'
  1218  00FEC2  00                 	db	0
  1219  00FEC3                     STR_90:
  1220  00FEC3  54                 	db	84	;'T'
  1221  00FEC4  53                 	db	83	;'S'
  1222  00FEC5  54                 	db	84	;'T'
  1223  00FEC6  3A                 	db	58	;':'
  1224  00FEC7  20                 	db	32
  1225  00FEC8  44                 	db	68	;'D'
  1226  00FEC9  43                 	db	67	;'C'
  1227  00FECA  20                 	db	32
  1228  00FECB  4D                 	db	77	;'M'
  1229  00FECC  4F                 	db	79	;'O'
  1230  00FECD  54                 	db	84	;'T'
  1231  00FECE  4F                 	db	79	;'O'
  1232  00FECF  52                 	db	82	;'R'
  1233  00FED0  53                 	db	83	;'S'
  1234  00FED1  00                 	db	0
  1235  00FED2                     STR_70:
  1236  00FED2  41                 	db	65	;'A'
  1237  00FED3  4C                 	db	76	;'L'
  1238  00FED4  47                 	db	71	;'G'
  1239  00FED5  4F                 	db	79	;'O'
  1240  00FED6  52                 	db	82	;'R'
  1241  00FED7  49                 	db	73	;'I'
  1242  00FED8  54                 	db	84	;'T'
  1243  00FED9  48                 	db	72	;'H'
  1244  00FEDA  4D                 	db	77	;'M'
  1245  00FEDB  20                 	db	32
  1246  00FEDC  54                 	db	84	;'T'
  1247  00FEDD  45                 	db	69	;'E'
  1248  00FEDE  53                 	db	83	;'S'
  1249  00FEDF  54                 	db	84	;'T'
  1250  00FEE0  00                 	db	0
  1251  00FEE1                     STR_91:
  1252  00FEE1  50                 	db	80	;'P'
  1253  00FEE2  49                 	db	73	;'I'
  1254  00FEE3  4E                 	db	78	;'N'
  1255  00FEE4  20                 	db	32
  1256  00FEE5  52                 	db	82	;'R'
  1257  00FEE6  41                 	db	65	;'A'
  1258  00FEE7  35                 	db	53	;'5'
  1259  00FEE8  20                 	db	32
  1260  00FEE9  48                 	db	72	;'H'
  1261  00FEEA  49                 	db	73	;'I'
  1262  00FEEB  47                 	db	71	;'G'
  1263  00FEEC  48                 	db	72	;'H'
  1264  00FEED  2E                 	db	46
  1265  00FEEE  00                 	db	0
  1266  00FEEF                     STR_73:
  1267  00FEEF  41                 	db	65	;'A'
  1268  00FEF0  4C                 	db	76	;'L'
  1269  00FEF1  47                 	db	71	;'G'
  1270  00FEF2  32                 	db	50	;'2'
  1271  00FEF3  3A                 	db	58	;':'
  1272  00FEF4  20                 	db	32
  1273  00FEF5  31                 	db	49	;'1'
  1274  00FEF6  32                 	db	50	;'2'
  1275  00FEF7  20                 	db	32
  1276  00FEF8  43                 	db	67	;'C'
  1277  00FEF9  41                 	db	65	;'A'
  1278  00FEFA  4E                 	db	78	;'N'
  1279  00FEFB  53                 	db	83	;'S'
  1280  00FEFC  00                 	db	0
  1281  00FEFD                     STR_76:
  1282  00FEFD  41                 	db	65	;'A'
  1283  00FEFE  4C                 	db	76	;'L'
  1284  00FEFF  47                 	db	71	;'G'
  1285  00FF00  35                 	db	53	;'5'
  1286  00FF01  3A                 	db	58	;':'
  1287  00FF02  20                 	db	32
  1288  00FF03  4E                 	db	78	;'N'
  1289  00FF04  4F                 	db	79	;'O'
  1290  00FF05  20                 	db	32
  1291  00FF06  43                 	db	67	;'C'
  1292  00FF07  41                 	db	65	;'A'
  1293  00FF08  4E                 	db	78	;'N'
  1294  00FF09  53                 	db	83	;'S'
  1295  00FF0A  00                 	db	0
  1296  00FF0B                     STR_71:
  1297  00FF0B  50                 	db	80	;'P'
  1298  00FF0C  55                 	db	85	;'U'
  1299  00FF0D  53                 	db	83	;'S'
  1300  00FF0E  48                 	db	72	;'H'
  1301  00FF0F  20                 	db	32
  1302  00FF10  54                 	db	84	;'T'
  1303  00FF11  4F                 	db	79	;'O'
  1304  00FF12  20                 	db	32
  1305  00FF13  53                 	db	83	;'S'
  1306  00FF14  54                 	db	84	;'T'
  1307  00FF15  41                 	db	65	;'A'
  1308  00FF16  52                 	db	82	;'R'
  1309  00FF17  54                 	db	84	;'T'
  1310  00FF18  00                 	db	0
  1311  00FF19                     STR_23:
  1312  00FF19  25                 	db	37
  1313  00FF1A  64                 	db	100	;'d'
  1314  00FF1B  20                 	db	32
  1315  00FF1C  4D                 	db	77	;'M'
  1316  00FF1D  49                 	db	73	;'I'
  1317  00FF1E  4E                 	db	78	;'N'
  1318  00FF1F  20                 	db	32
  1319  00FF20  25                 	db	37
  1320  00FF21  64                 	db	100	;'d'
  1321  00FF22  20                 	db	32
  1322  00FF23  53                 	db	83	;'S'
  1323  00FF24  45                 	db	69	;'E'
  1324  00FF25  43                 	db	67	;'C'
  1325  00FF26  00                 	db	0
  1326  00FF27                     STR_2:
  1327  00FF27  54                 	db	84	;'T'
  1328  00FF28  49                 	db	73	;'I'
  1329  00FF29  4D                 	db	77	;'M'
  1330  00FF2A  45                 	db	69	;'E'
  1331  00FF2B  3A                 	db	58	;':'
  1332  00FF2C  20                 	db	32
  1333  00FF2D  25                 	db	37
  1334  00FF2E  64                 	db	100	;'d'
  1335  00FF2F  3A                 	db	58	;':'
  1336  00FF30  25                 	db	37
  1337  00FF31  30                 	db	48	;'0'
  1338  00FF32  32                 	db	50	;'2'
  1339  00FF33  64                 	db	100	;'d'
  1340  00FF34  00                 	db	0
  1341  00FF35                     STR_79:
  1342  00FF35  54                 	db	84	;'T'
  1343  00FF36  53                 	db	83	;'S'
  1344  00FF37  54                 	db	84	;'T'
  1345  00FF38  3A                 	db	58	;':'
  1346  00FF39  20                 	db	32
  1347  00FF3A  49                 	db	73	;'I'
  1348  00FF3B  52                 	db	82	;'R'
  1349  00FF3C  20                 	db	32
  1350  00FF3D  53                 	db	83	;'S'
  1351  00FF3E  4E                 	db	78	;'N'
  1352  00FF3F  53                 	db	83	;'S'
  1353  00FF40  52                 	db	82	;'R'
  1354  00FF41  00                 	db	0
  1355  00FF42                     STR_65:
  1356  00FF42  54                 	db	84	;'T'
  1357  00FF43  49                 	db	73	;'I'
  1358  00FF44  4D                 	db	77	;'M'
  1359  00FF45  45                 	db	69	;'E'
  1360  00FF46  20                 	db	32
  1361  00FF47  25                 	db	37
  1362  00FF48  64                 	db	100	;'d'
  1363  00FF49  3A                 	db	58	;':'
  1364  00FF4A  25                 	db	37
  1365  00FF4B  30                 	db	48	;'0'
  1366  00FF4C  32                 	db	50	;'2'
  1367  00FF4D  64                 	db	100	;'d'
  1368  00FF4E  00                 	db	0
  1369  00FF4F                     STR_74:
  1370  00FF4F  41                 	db	65	;'A'
  1371  00FF50  4C                 	db	76	;'L'
  1372  00FF51  47                 	db	71	;'G'
  1373  00FF52  33                 	db	51	;'3'
  1374  00FF53  3A                 	db	58	;':'
  1375  00FF54  20                 	db	32
  1376  00FF55  31                 	db	49	;'1'
  1377  00FF56  20                 	db	32
  1378  00FF57  43                 	db	67	;'C'
  1379  00FF58  41                 	db	65	;'A'
  1380  00FF59  4E                 	db	78	;'N'
  1381  00FF5A  00                 	db	0
  1382  00FF5B                     STR_93:
  1383  00FF5B  50                 	db	80	;'P'
  1384  00FF5C  49                 	db	73	;'I'
  1385  00FF5D  4E                 	db	78	;'N'
  1386  00FF5E  20                 	db	32
  1387  00FF5F  52                 	db	82	;'R'
  1388  00FF60  41                 	db	65	;'A'
  1389  00FF61  33                 	db	51	;'3'
  1390  00FF62  2E                 	db	46
  1391  00FF63  2E                 	db	46
  1392  00FF64  2E                 	db	46
  1393  00FF65  00                 	db	0
  1394  00FF66                     STR_95:
  1395  00FF66  50                 	db	80	;'P'
  1396  00FF67  49                 	db	73	;'I'
  1397  00FF68  4E                 	db	78	;'N'
  1398  00FF69  20                 	db	32
  1399  00FF6A  52                 	db	82	;'R'
  1400  00FF6B  41                 	db	65	;'A'
  1401  00FF6C  34                 	db	52	;'4'
  1402  00FF6D  2E                 	db	46
  1403  00FF6E  2E                 	db	46
  1404  00FF6F  2E                 	db	46
  1405  00FF70  00                 	db	0
  1406  00FF71                     STR_113:
  1407  00FF71  50                 	db	80	;'P'
  1408  00FF72  55                 	db	85	;'U'
  1409  00FF73  53                 	db	83	;'S'
  1410  00FF74  48                 	db	72	;'H'
  1411  00FF75  45                 	db	69	;'E'
  1412  00FF76  52                 	db	82	;'R'
  1413  00FF77  20                 	db	32
  1414  00FF78  54                 	db	84	;'T'
  1415  00FF79  53                 	db	83	;'S'
  1416  00FF7A  54                 	db	84	;'T'
  1417  00FF7B  00                 	db	0
  1418  00FF7C                     STR_64:
  1419  00FF7C  53                 	db	83	;'S'
  1420  00FF7D  4F                 	db	79	;'O'
  1421  00FF7E  52                 	db	82	;'R'
  1422  00FF7F  54                 	db	84	;'T'
  1423  00FF80  49                 	db	73	;'I'
  1424  00FF81  4E                 	db	78	;'N'
  1425  00FF82  47                 	db	71	;'G'
  1426  00FF83  2E                 	db	46
  1427  00FF84  2E                 	db	46
  1428  00FF85  2E                 	db	46
  1429  00FF86  00                 	db	0
  1430  00FF87                     STR_84:
  1431  00FF87  54                 	db	84	;'T'
  1432  00FF88  53                 	db	83	;'S'
  1433  00FF89  54                 	db	84	;'T'
  1434  00FF8A  3A                 	db	58	;':'
  1435  00FF8B  20                 	db	32
  1436  00FF8C  43                 	db	67	;'C'
  1437  00FF8D  4F                 	db	79	;'O'
  1438  00FF8E  4E                 	db	78	;'N'
  1439  00FF8F  44                 	db	68	;'D'
  1440  00FF90  00                 	db	0
  1441  00FF91                     STR_88:
  1442  00FF91  41                 	db	65	;'A'
  1443  00FF92  43                 	db	67	;'C'
  1444  00FF93  54                 	db	84	;'T'
  1445  00FF94  55                 	db	85	;'U'
  1446  00FF95  41                 	db	65	;'A'
  1447  00FF96  54                 	db	84	;'T'
  1448  00FF97  4F                 	db	79	;'O'
  1449  00FF98  52                 	db	82	;'R'
  1450  00FF99  53                 	db	83	;'S'
  1451  00FF9A  00                 	db	0
  1452  00FF9B                     STR_22:
  1453  00FF9B  44                 	db	68	;'D'
  1454  00FF9C  55                 	db	85	;'U'
  1455  00FF9D  52                 	db	82	;'R'
  1456  00FF9E  41                 	db	65	;'A'
  1457  00FF9F  54                 	db	84	;'T'
  1458  00FFA0  49                 	db	73	;'I'
  1459  00FFA1  4F                 	db	79	;'O'
  1460  00FFA2  4E                 	db	78	;'N'
  1461  00FFA3  3A                 	db	58	;':'
  1462  00FFA4  00                 	db	0
  1463  00FFA5                     STR_86:
  1464  00FFA5  43                 	db	67	;'C'
  1465  00FFA6  4F                 	db	79	;'O'
  1466  00FFA7  4E                 	db	78	;'N'
  1467  00FFA8  44                 	db	68	;'D'
  1468  00FFA9  3A                 	db	58	;':'
  1469  00FFAA  20                 	db	32
  1470  00FFAB  25                 	db	37
  1471  00FFAC  64                 	db	100	;'d'
  1472  00FFAD  00                 	db	0
  1473  00FFAE                     STR_77:
  1474  00FFAE  53                 	db	83	;'S'
  1475  00FFAF  45                 	db	69	;'E'
  1476  00FFB0  4E                 	db	78	;'N'
  1477  00FFB1  53                 	db	83	;'S'
  1478  00FFB2  4F                 	db	79	;'O'
  1479  00FFB3  52                 	db	82	;'R'
  1480  00FFB4  53                 	db	83	;'S'
  1481  00FFB5  00                 	db	0
  1482  00FFB6                     STR_116:
  1483  00FFB6  28                 	db	40
  1484  00FFB7  6E                 	db	110	;'n'
  1485  00FFB8  75                 	db	117	;'u'
  1486  00FFB9  6C                 	db	108	;'l'
  1487  00FFBA  6C                 	db	108	;'l'
  1488  00FFBB  29                 	db	41
  1489  00FFBC  00                 	db	0
  1490  00FFBD                     STR_67:
  1491  00FFBD  46                 	db	70	;'F'
  1492  00FFBE  41                 	db	65	;'A'
  1493  00FFBF  49                 	db	73	;'I'
  1494  00FFC0  4C                 	db	76	;'L'
  1495  00FFC1  45                 	db	69	;'E'
  1496  00FFC2  44                 	db	68	;'D'
  1497  00FFC3  00                 	db	0
  1498  00FFC4                     STR_7:
  1499  00FFC4  53                 	db	83	;'S'
  1500  00FFC5  54                 	db	84	;'T'
  1501  00FFC6  41                 	db	65	;'A'
  1502  00FFC7  52                 	db	82	;'R'
  1503  00FFC8  54                 	db	84	;'T'
  1504  00FFC9  3A                 	db	58	;':'
  1505  00FFCA  00                 	db	0
  1506  00FFCB                     STR_9:
  1507  00FFCB  46                 	db	70	;'F'
  1508  00FFCC  45                 	db	69	;'E'
  1509  00FFCD  42                 	db	66	;'B'
  1510  00FFCE  00                 	db	0
  1511  00FFCF                     STR_19:
  1512  00FFCF  44                 	db	68	;'D'
  1513  00FFD0  45                 	db	69	;'E'
  1514  00FFD1  43                 	db	67	;'C'
  1515  00FFD2  00                 	db	0
  1516  00FFD3                     STR_15:
  1517  00FFD3  41                 	db	65	;'A'
  1518  00FFD4  55                 	db	85	;'U'
  1519  00FFD5  47                 	db	71	;'G'
  1520  00FFD6  00                 	db	0
  1521  00FFD7                     STR_14:
  1522  00FFD7  4A                 	db	74	;'J'
  1523  00FFD8  55                 	db	85	;'U'
  1524  00FFD9  4C                 	db	76	;'L'
  1525  00FFDA  00                 	db	0
  1526  00FFDB                     STR_8:
  1527  00FFDB  4A                 	db	74	;'J'
  1528  00FFDC  41                 	db	65	;'A'
  1529  00FFDD  4E                 	db	78	;'N'
  1530  00FFDE  00                 	db	0
  1531  00FFDF                     STR_13:
  1532  00FFDF  4A                 	db	74	;'J'
  1533  00FFE0  55                 	db	85	;'U'
  1534  00FFE1  4E                 	db	78	;'N'
  1535  00FFE2  00                 	db	0
  1536  00FFE3                     STR_16:
  1537  00FFE3  53                 	db	83	;'S'
  1538  00FFE4  45                 	db	69	;'E'
  1539  00FFE5  50                 	db	80	;'P'
  1540  00FFE6  00                 	db	0
  1541  00FFE7                     STR_10:
  1542  00FFE7  4D                 	db	77	;'M'
  1543  00FFE8  41                 	db	65	;'A'
  1544  00FFE9  52                 	db	82	;'R'
  1545  00FFEA  00                 	db	0
  1546  00FFEB                     STR_11:
  1547  00FFEB  41                 	db	65	;'A'
  1548  00FFEC  50                 	db	80	;'P'
  1549  00FFED  52                 	db	82	;'R'
  1550  00FFEE  00                 	db	0
  1551  00FFEF                     STR_20:
  1552  00FFEF  45                 	db	69	;'E'
  1553  00FFF0  52                 	db	82	;'R'
  1554  00FFF1  52                 	db	82	;'R'
  1555  00FFF2  00                 	db	0
  1556  00FFF3                     STR_17:
  1557  00FFF3  4F                 	db	79	;'O'
  1558  00FFF4  43                 	db	67	;'C'
  1559  00FFF5  54                 	db	84	;'T'
  1560  00FFF6  00                 	db	0
  1561  00FFF7                     STR_18:
  1562  00FFF7  4E                 	db	78	;'N'
  1563  00FFF8  4F                 	db	79	;'O'
  1564  00FFF9  56                 	db	86	;'V'
  1565  00FFFA  00                 	db	0
  1566  00FFFB                     STR_12:
  1567  00FFFB  4D                 	db	77	;'M'
  1568  00FFFC  41                 	db	65	;'A'
  1569  00FFFD  59                 	db	89	;'Y'
  1570  00FFFE  00                 	db	0
  1571  0000                     
  1572                           ; #config settings
  1573  00FFFF  00                 	db	0	; dummy byte at the end
  1574  0000                     
  1575                           	psect	cinit
  1576  0040BC                     __pcinit:
  1577                           	opt stack 0
  1578  0040BC                     start_initialization:
  1579                           	opt stack 0
  1580  0040BC                     __initialization:
  1581                           	opt stack 0
  1582                           
  1583                           ; Initialize objects allocated to BANK1 (8 bytes)
  1584                           ; load TBLPTR registers with __pidataBANK1
  1585  0040BC  0EFE               	movlw	low __pidataBANK1
  1586  0040BE  6EF6               	movwf	tblptrl,c
  1587  0040C0  0E47               	movlw	high __pidataBANK1
  1588  0040C2  6EF7               	movwf	tblptrh,c
  1589  0040C4  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1590  0040C6  6EF8               	movwf	tblptru,c
  1591  0040C8  EE01  F02F         	lfsr	0,__pdataBANK1
  1592  0040CC  EE10 F008          	lfsr	1,8
  1593  0040D0                     copy_data0:
  1594  0040D0  0009               	tblrd		*+
  1595  0040D2  CFF5 FFEE          	movff	tablat,postinc0
  1596  0040D6  50E5               	movf	postdec1,w,c
  1597  0040D8  50E1               	movf	fsr1l,w,c
  1598  0040DA  E1FA               	bnz	copy_data0
  1599                           
  1600                           ; Clear objects allocated to BANK1 (47 bytes)
  1601  0040DC  EE01  F000         	lfsr	0,__pbssBANK1
  1602  0040E0  0E2F               	movlw	47
  1603  0040E2                     clear_0:
  1604  0040E2  6AEE               	clrf	postinc0,c
  1605  0040E4  06E8               	decf	wreg,f,c
  1606  0040E6  E1FD               	bnz	clear_0
  1607                           
  1608                           ; Clear objects allocated to BANK0 (38 bytes)
  1609  0040E8  EE00  F0DA         	lfsr	0,__pbssBANK0
  1610  0040EC  0E26               	movlw	38
  1611  0040EE                     clear_1:
  1612  0040EE  6AEE               	clrf	postinc0,c
  1613  0040F0  06E8               	decf	wreg,f,c
  1614  0040F2  E1FD               	bnz	clear_1
  1615                           
  1616                           ; Clear objects allocated to COMRAM (35 bytes)
  1617  0040F4  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1618  0040F8  0E23               	movlw	35
  1619  0040FA                     clear_2:
  1620  0040FA  6AEE               	clrf	postinc0,c
  1621  0040FC  06E8               	decf	wreg,f,c
  1622  0040FE  E1FD               	bnz	clear_2
  1623  004100                     end_of_initialization:
  1624                           	opt stack 0
  1625  004100                     __end_of__initialization:
  1626                           	opt stack 0
  1627  004100  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1628  004102  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1629  004104  0100               	movlb	0
  1630  004106  EFC4  F01A         	goto	_main	;jump to C main() function
  1631                           tblptru	equ	0xFF8
  1632                           tblptrh	equ	0xFF7
  1633                           tblptrl	equ	0xFF6
  1634                           tablat	equ	0xFF5
  1635                           postinc0	equ	0xFEE
  1636                           wreg	equ	0xFE8
  1637                           postdec1	equ	0xFE5
  1638                           fsr1l	equ	0xFE1
  1639                           
  1640                           	psect	bssCOMRAM
  1641  00005B                     __pbssCOMRAM:
  1642                           	opt stack 0
  1643  00005B                     _back:
  1644                           	opt stack 0
  1645  00005B                     	ds	2
  1646  00005D                     _count_can_no_lab:
  1647                           	opt stack 0
  1648  00005D                     	ds	2
  1649  00005F                     _count_can_w_lab:
  1650                           	opt stack 0
  1651  00005F                     	ds	2
  1652  000061                     _count_pop_no_tab:
  1653                           	opt stack 0
  1654  000061                     	ds	2
  1655  000063                     _count_pop_w_tab:
  1656                           	opt stack 0
  1657  000063                     	ds	2
  1658  000065                     _debug:
  1659                           	opt stack 0
  1660  000065                     	ds	2
  1661  000067                     _down:
  1662                           	opt stack 0
  1663  000067                     	ds	2
  1664  000069                     _enter:
  1665                           	opt stack 0
  1666  000069                     	ds	2
  1667  00006B                     _f_ID_receive:
  1668                           	opt stack 0
  1669  00006B                     	ds	2
  1670  00006D                     _f_can_coming_to_ID:
  1671                           	opt stack 0
  1672  00006D                     	ds	2
  1673  00006F                     _f_can_coming_to_distribution:
  1674                           	opt stack 0
  1675  00006F                     	ds	2
  1676  000071                     _f_lastCan:
  1677                           	opt stack 0
  1678  000071                     	ds	2
  1679  000073                     _first:
  1680                           	opt stack 0
  1681  000073                     	ds	2
  1682  000075                     _firstboot:
  1683                           	opt stack 0
  1684  000075                     	ds	2
  1685  000077                     _up:
  1686                           	opt stack 0
  1687  000077                     	ds	2
  1688  000079                     _was_low_1:
  1689                           	opt stack 0
  1690  000079                     	ds	2
  1691  00007B                     _was_low_3:
  1692                           	opt stack 0
  1693  00007B                     	ds	2
  1694  00007D                     _input:
  1695                           	opt stack 0
  1696  00007D                     	ds	1
  1697                           tblptru	equ	0xFF8
  1698                           tblptrh	equ	0xFF7
  1699                           tblptrl	equ	0xFF6
  1700                           tablat	equ	0xFF5
  1701                           postinc0	equ	0xFEE
  1702                           wreg	equ	0xFE8
  1703                           postdec1	equ	0xFE5
  1704                           fsr1l	equ	0xFE1
  1705                           
  1706                           	psect	bssBANK0
  1707  0000DA                     __pbssBANK0:
  1708                           	opt stack 0
  1709  0000DA                     _IR_signal:
  1710                           	opt stack 0
  1711  0000DA                     	ds	2
  1712  0000DC                     _MAG_signal:
  1713                           	opt stack 0
  1714  0000DC                     	ds	2
  1715  0000DE                     _RTCflag:
  1716                           	opt stack 0
  1717  0000DE                     	ds	2
  1718  0000E0                     _cur_state:
  1719                           	opt stack 0
  1720  0000E0                     	ds	2
  1721  0000E2                     _f_loadingNewCan:
  1722                           	opt stack 0
  1723  0000E2                     	ds	2
  1724  0000E4                     _i:
  1725                           	opt stack 0
  1726  0000E4                     	ds	2
  1727  0000E6                     _log:
  1728                           	opt stack 0
  1729  0000E6                     	ds	2
  1730  0000E8                     _log_completion:
  1731                           	opt stack 0
  1732  0000E8                     	ds	2
  1733  0000EA                     _log_count_can_no_lab:
  1734                           	opt stack 0
  1735  0000EA                     	ds	2
  1736  0000EC                     _log_count_can_w_lab:
  1737                           	opt stack 0
  1738  0000EC                     	ds	2
  1739  0000EE                     _log_count_pop_no_tab:
  1740                           	opt stack 0
  1741  0000EE                     	ds	2
  1742  0000F0                     _log_count_pop_w_tab:
  1743                           	opt stack 0
  1744  0000F0                     	ds	2
  1745  0000F2                     _log_count_total:
  1746                           	opt stack 0
  1747  0000F2                     	ds	2
  1748  0000F4                     _log_total_time:
  1749                           	opt stack 0
  1750  0000F4                     	ds	2
  1751  0000F6                     _logstate:
  1752                           	opt stack 0
  1753  0000F6                     	ds	2
  1754  0000F8                     _total_time:
  1755                           	opt stack 0
  1756  0000F8                     	ds	2
  1757  0000FA                     _var:
  1758                           	opt stack 0
  1759  0000FA                     	ds	2
  1760  0000FC                     _machine_state:
  1761                           	opt stack 0
  1762  0000FC                     	ds	1
  1763  0000FD                     _sel:
  1764                           	opt stack 0
  1765  0000FD                     	ds	1
  1766  0000FE                     _count_total:
  1767                           	opt stack 0
  1768  0000FE                     	ds	2
  1769                           tblptru	equ	0xFF8
  1770                           tblptrh	equ	0xFF7
  1771                           tblptrl	equ	0xFF6
  1772                           tablat	equ	0xFF5
  1773                           postinc0	equ	0xFEE
  1774                           wreg	equ	0xFE8
  1775                           postdec1	equ	0xFE5
  1776                           fsr1l	equ	0xFE1
  1777                           
  1778                           	psect	bssBANK1
  1779  000100                     __pbssBANK1:
  1780                           	opt stack 0
  1781  000100                     _log_startTime:
  1782                           	opt stack 0
  1783  000100                     	ds	14
  1784  00010E                     _startTime:
  1785                           	opt stack 0
  1786  00010E                     	ds	14
  1787  00011C                     _servoTimes:
  1788                           	opt stack 0
  1789  00011C                     	ds	8
  1790  000124                     _time:
  1791                           	opt stack 0
  1792  000124                     	ds	7
  1793  00012B                     _cur_can:
  1794                           	opt stack 0
  1795  00012B                     	ds	2
  1796  00012D                     _f_can_distributed:
  1797                           	opt stack 0
  1798  00012D                     	ds	2
  1799                           tblptru	equ	0xFF8
  1800                           tblptrh	equ	0xFF7
  1801                           tblptrl	equ	0xFF6
  1802                           tablat	equ	0xFF5
  1803                           postinc0	equ	0xFEE
  1804                           wreg	equ	0xFE8
  1805                           postdec1	equ	0xFE5
  1806                           fsr1l	equ	0xFE1
  1807                           
  1808                           	psect	dataBANK1
  1809  00012F                     __pdataBANK1:
  1810                           	opt stack 0
  1811  00012F                     UI@F3225:
  1812                           	opt stack 0
  1813  00012F                     	ds	4
  1814  000133                     printRTC@F3216:
  1815                           	opt stack 0
  1816  000133                     	ds	4
  1817                           tblptru	equ	0xFF8
  1818                           tblptrh	equ	0xFF7
  1819                           tblptrl	equ	0xFF6
  1820                           tablat	equ	0xFF5
  1821                           postinc0	equ	0xFEE
  1822                           wreg	equ	0xFE8
  1823                           postdec1	equ	0xFE5
  1824                           fsr1l	equ	0xFE1
  1825                           
  1826                           	psect	cstackBANK0
  1827  000080                     __pcstackBANK0:
  1828                           	opt stack 0
  1829  000080                     ??_delay_ms:
  1830  000080                     ??_PortTests:
  1831  000080                     ??_isdigit:
  1832  000080                     ??_readADC:
  1833  000080                     ??_I2C_Master_Wait:
  1834  000080                     ?___wmul:
  1835                           	opt stack 0
  1836  000080                     ?___awmod:
  1837                           	opt stack 0
  1838  000080                     ?___lwdiv:
  1839                           	opt stack 0
  1840  000080                     ?___lldiv:
  1841                           	opt stack 0
  1842  000080                     lcdNibble@temp:
  1843                           	opt stack 0
  1844  000080                     initTime@m:
  1845                           	opt stack 0
  1846  000080                     updateServoPosition@time_us:
  1847                           	opt stack 0
  1848  000080                     EEPROM_read@address:
  1849                           	opt stack 0
  1850  000080                     ___wmul@multiplier:
  1851                           	opt stack 0
  1852  000080                     ___awmod@dividend:
  1853                           	opt stack 0
  1854  000080                     ___lwdiv@dividend:
  1855                           	opt stack 0
  1856  000080                     strcpy@to:
  1857                           	opt stack 0
  1858  000080                     ___lldiv@dividend:
  1859                           	opt stack 0
  1860                           
  1861                           ; 4 bytes @ 0x0
  1862  000080                     	ds	1
  1863  000081                     readADC@channel:
  1864                           	opt stack 0
  1865  000081                     I2C_Master_Read@a:
  1866                           	opt stack 0
  1867  000081                     lcdNibble@data:
  1868                           	opt stack 0
  1869  000081                     initTime@h:
  1870                           	opt stack 0
  1871  000081                     delay_ms@milliseconds:
  1872                           	opt stack 0
  1873  000081                     _isdigit$1942:
  1874                           	opt stack 0
  1875  000081                     I2C_Master_Write@d:
  1876                           	opt stack 0
  1877                           
  1878                           ; 2 bytes @ 0x1
  1879  000081                     	ds	1
  1880  000082                     ??_readIR:
  1881  000082                     ??_readMAG:
  1882  000082                     I2C_Master_Read@temp:
  1883                           	opt stack 0
  1884  000082                     lcdInst@data:
  1885                           	opt stack 0
  1886  000082                     putch@data:
  1887                           	opt stack 0
  1888  000082                     initTime@w:
  1889                           	opt stack 0
  1890  000082                     isdigit@c:
  1891                           	opt stack 0
  1892  000082                     updateServoPosition@timer:
  1893                           	opt stack 0
  1894  000082                     ___wmul@multiplicand:
  1895                           	opt stack 0
  1896  000082                     ___awmod@divisor:
  1897                           	opt stack 0
  1898  000082                     ___lwdiv@divisor:
  1899                           	opt stack 0
  1900  000082                     strcpy@from:
  1901                           	opt stack 0
  1902                           
  1903                           ; 2 bytes @ 0x2
  1904  000082                     	ds	1
  1905  000083                     ??_initLCD:
  1906  000083                     initTime@DD:
  1907                           	opt stack 0
  1908  000083                     getRTC@i:
  1909                           	opt stack 0
  1910                           
  1911                           ; 2 bytes @ 0x3
  1912  000083                     	ds	1
  1913  000084                     ??_updateServoPosition:
  1914  000084                     initTime@MM:
  1915                           	opt stack 0
  1916  000084                     ___awmod@counter:
  1917                           	opt stack 0
  1918  000084                     readIR@res:
  1919                           	opt stack 0
  1920  000084                     readMAG@res:
  1921                           	opt stack 0
  1922  000084                     ___wmul@product:
  1923                           	opt stack 0
  1924  000084                     ___lwdiv@quotient:
  1925                           	opt stack 0
  1926  000084                     strcpy@cp:
  1927                           	opt stack 0
  1928  000084                     ___lldiv@divisor:
  1929                           	opt stack 0
  1930                           
  1931                           ; 4 bytes @ 0x4
  1932  000084                     	ds	1
  1933  000085                     ??_initSortTimer:
  1934  000085                     initTime@YY:
  1935                           	opt stack 0
  1936  000085                     ___awmod@sign:
  1937                           	opt stack 0
  1938                           
  1939                           ; 1 bytes @ 0x5
  1940  000085                     	ds	1
  1941  000086                     ??_getIR:
  1942  000086                     ??_getMAG:
  1943  000086                     ?___awdiv:
  1944                           	opt stack 0
  1945  000086                     initTime@s:
  1946                           	opt stack 0
  1947  000086                     ___lwdiv@counter:
  1948                           	opt stack 0
  1949  000086                     updateServoPosition@my_time:
  1950                           	opt stack 0
  1951  000086                     ___awdiv@dividend:
  1952                           	opt stack 0
  1953                           
  1954                           ; 2 bytes @ 0x6
  1955  000086                     	ds	1
  1956  000087                     ?___lwmod:
  1957                           	opt stack 0
  1958  000087                     ___lwmod@dividend:
  1959                           	opt stack 0
  1960                           
  1961                           ; 2 bytes @ 0x7
  1962  000087                     	ds	1
  1963  000088                     ??_ID:
  1964  000088                     ??_Distribution:
  1965  000088                     ??_initServos:
  1966  000088                     initSortTimer@i:
  1967                           	opt stack 0
  1968  000088                     ___awdiv@divisor:
  1969                           	opt stack 0
  1970  000088                     ___lldiv@quotient:
  1971                           	opt stack 0
  1972                           
  1973                           ; 4 bytes @ 0x8
  1974  000088                     	ds	1
  1975  000089                     ___lwmod@divisor:
  1976                           	opt stack 0
  1977                           
  1978                           ; 2 bytes @ 0x9
  1979  000089                     	ds	1
  1980  00008A                     ___awdiv@counter:
  1981                           	opt stack 0
  1982  00008A                     ID@i:
  1983                           	opt stack 0
  1984                           
  1985                           ; 2 bytes @ 0xA
  1986  00008A                     	ds	1
  1987  00008B                     ___awdiv@sign:
  1988                           	opt stack 0
  1989  00008B                     ___lwmod@counter:
  1990                           	opt stack 0
  1991                           
  1992                           ; 1 bytes @ 0xB
  1993  00008B                     	ds	1
  1994  00008C                     ___lldiv@counter:
  1995                           	opt stack 0
  1996  00008C                     ___awdiv@quotient:
  1997                           	opt stack 0
  1998  00008C                     ID@sensor_outputs:
  1999                           	opt stack 0
  2000                           
  2001                           ; 6 bytes @ 0xC
  2002  00008C                     	ds	1
  2003  00008D                     I2C_Master_Init@c:
  2004                           	opt stack 0
  2005                           
  2006                           ; 4 bytes @ 0xD
  2007  00008D                     	ds	1
  2008  00008E                     ?_printf:
  2009                           	opt stack 0
  2010  00008E                     printf@f:
  2011                           	opt stack 0
  2012                           
  2013                           ; 2 bytes @ 0xE
  2014  00008E                     	ds	3
  2015  000091                     ??_I2C_Master_Init:
  2016                           
  2017                           ; 1 bytes @ 0x11
  2018  000091                     	ds	4
  2019  000095                     ??_loadRTC:
  2020                           
  2021                           ; 1 bytes @ 0x15
  2022  000095                     	ds	1
  2023  000096                     loadRTC@i:
  2024                           	opt stack 0
  2025                           
  2026                           ; 2 bytes @ 0x16
  2027  000096                     	ds	4
  2028  00009A                     ??_printf:
  2029                           
  2030                           ; 1 bytes @ 0x1A
  2031  00009A                     	ds	4
  2032  00009E                     printf@prec:
  2033                           	opt stack 0
  2034                           
  2035                           ; 1 bytes @ 0x1E
  2036  00009E                     	ds	1
  2037  00009F                     printf@cp:
  2038                           	opt stack 0
  2039                           
  2040                           ; 2 bytes @ 0x1F
  2041  00009F                     	ds	2
  2042  0000A1                     printf@ap:
  2043                           	opt stack 0
  2044                           
  2045                           ; 2 bytes @ 0x21
  2046  0000A1                     	ds	2
  2047  0000A3                     printf@len:
  2048                           	opt stack 0
  2049                           
  2050                           ; 2 bytes @ 0x23
  2051  0000A3                     	ds	2
  2052  0000A5                     printf@val:
  2053                           	opt stack 0
  2054                           
  2055                           ; 2 bytes @ 0x25
  2056  0000A5                     	ds	2
  2057  0000A7                     printf@flag:
  2058                           	opt stack 0
  2059                           
  2060                           ; 1 bytes @ 0x27
  2061  0000A7                     	ds	1
  2062  0000A8                     printf@c:
  2063                           	opt stack 0
  2064                           
  2065                           ; 1 bytes @ 0x28
  2066  0000A8                     	ds	1
  2067  0000A9                     printf@width:
  2068                           	opt stack 0
  2069                           
  2070                           ; 2 bytes @ 0x29
  2071  0000A9                     	ds	2
  2072  0000AB                     ??_printRTC:
  2073  0000AB                     ??_algorithmTest:
  2074  0000AB                     ??_sensorTest:
  2075  0000AB                     ??_actuatorTest:
  2076  0000AB                     ??_PortTestA5:
  2077  0000AB                     ??_ToggleTestA5:
  2078  0000AB                     ??_PusherTestA5:
  2079  0000AB                     ??_BothServos:
  2080  0000AB                     EEPROM_write@address:
  2081                           	opt stack 0
  2082                           
  2083                           ; 2 bytes @ 0x2B
  2084  0000AB                     	ds	1
  2085  0000AC                     ToggleTestA5@on:
  2086                           	opt stack 0
  2087                           
  2088                           ; 2 bytes @ 0x2C
  2089  0000AC                     	ds	1
  2090  0000AD                     EEPROM_write@data:
  2091                           	opt stack 0
  2092  0000AD                     actuatorTest@i_1637:
  2093                           	opt stack 0
  2094  0000AD                     sensorTest@res:
  2095                           	opt stack 0
  2096                           
  2097                           ; 2 bytes @ 0x2D
  2098  0000AD                     	ds	1
  2099  0000AE                     ??_EEPROM_write:
  2100  0000AE                     actuatorTest@i_1644:
  2101                           	opt stack 0
  2102  0000AE                     printRTC@INT_time:
  2103                           	opt stack 0
  2104                           
  2105                           ; 14 bytes @ 0x2E
  2106  0000AE                     	ds	1
  2107  0000AF                     EEPROM_write@i:
  2108                           	opt stack 0
  2109  0000AF                     actuatorTest@i_1645:
  2110                           	opt stack 0
  2111                           
  2112                           ; 1 bytes @ 0x2F
  2113  0000AF                     	ds	1
  2114  0000B0                     EEPROM_write@i_1328:
  2115                           	opt stack 0
  2116  0000B0                     actuatorTest@i_1647:
  2117                           	opt stack 0
  2118                           
  2119                           ; 1 bytes @ 0x30
  2120  0000B0                     	ds	1
  2121  0000B1                     ??_Loading:
  2122  0000B1                     logRun@num:
  2123                           	opt stack 0
  2124  0000B1                     actuatorTest@i_1648:
  2125                           	opt stack 0
  2126                           
  2127                           ; 1 bytes @ 0x31
  2128  0000B1                     	ds	1
  2129  0000B2                     logRun@byte1:
  2130                           	opt stack 0
  2131  0000B2                     actuatorTest@i_1650:
  2132                           	opt stack 0
  2133                           
  2134                           ; 1 bytes @ 0x32
  2135  0000B2                     	ds	1
  2136  0000B3                     logRun@byte2:
  2137                           	opt stack 0
  2138  0000B3                     actuatorTest@i_1651:
  2139                           	opt stack 0
  2140  0000B3                     Loading@addr:
  2141                           	opt stack 0
  2142                           
  2143                           ; 2 bytes @ 0x33
  2144  0000B3                     	ds	1
  2145  0000B4                     logRun@byte3:
  2146                           	opt stack 0
  2147  0000B4                     actuatorTest@i_1653:
  2148                           	opt stack 0
  2149                           
  2150                           ; 1 bytes @ 0x34
  2151  0000B4                     	ds	1
  2152  0000B5                     Loading@byte1:
  2153                           	opt stack 0
  2154  0000B5                     logRun@byte_i:
  2155                           	opt stack 0
  2156  0000B5                     actuatorTest@i_1654:
  2157                           	opt stack 0
  2158                           
  2159                           ; 1 bytes @ 0x35
  2160  0000B5                     	ds	1
  2161  0000B6                     logRun@byte11:
  2162                           	opt stack 0
  2163  0000B6                     actuatorTest@i_1656:
  2164                           	opt stack 0
  2165  0000B6                     Loading@i:
  2166                           	opt stack 0
  2167                           
  2168                           ; 2 bytes @ 0x36
  2169  0000B6                     	ds	1
  2170  0000B7                     actuatorTest@i_1657:
  2171                           	opt stack 0
  2172  0000B7                     logRun@i:
  2173                           	opt stack 0
  2174                           
  2175                           ; 2 bytes @ 0x37
  2176  0000B7                     	ds	1
  2177  0000B8                     actuatorTest@i_1659:
  2178                           	opt stack 0
  2179                           
  2180                           ; 1 bytes @ 0x38
  2181  0000B8                     	ds	1
  2182  0000B9                     actuatorTest@i_1660:
  2183                           	opt stack 0
  2184  0000B9                     logRun@addr:
  2185                           	opt stack 0
  2186                           
  2187                           ; 2 bytes @ 0x39
  2188  0000B9                     	ds	1
  2189  0000BA                     actuatorTest@i_1663:
  2190                           	opt stack 0
  2191                           
  2192                           ; 1 bytes @ 0x3A
  2193  0000BA                     	ds	1
  2194  0000BB                     actuatorTest@i_1664:
  2195                           	opt stack 0
  2196                           
  2197                           ; 1 bytes @ 0x3B
  2198  0000BB                     	ds	1
  2199  0000BC                     actuatorTest@i_1666:
  2200                           	opt stack 0
  2201  0000BC                     printRTC@RTC_month:
  2202                           	opt stack 0
  2203                           
  2204                           ; 2 bytes @ 0x3C
  2205  0000BC                     	ds	1
  2206  0000BD                     actuatorTest@i_1667:
  2207                           	opt stack 0
  2208                           
  2209                           ; 1 bytes @ 0x3D
  2210  0000BD                     	ds	1
  2211  0000BE                     actuatorTest@i_1669:
  2212                           	opt stack 0
  2213  0000BE                     printRTC@month:
  2214                           	opt stack 0
  2215                           
  2216                           ; 4 bytes @ 0x3E
  2217  0000BE                     	ds	1
  2218  0000BF                     actuatorTest@i_1670:
  2219                           	opt stack 0
  2220                           
  2221                           ; 1 bytes @ 0x3F
  2222  0000BF                     	ds	1
  2223  0000C0                     actuatorTest@i_1673:
  2224                           	opt stack 0
  2225                           
  2226                           ; 1 bytes @ 0x40
  2227  0000C0                     	ds	1
  2228  0000C1                     actuatorTest@i_1674:
  2229                           	opt stack 0
  2230                           
  2231                           ; 1 bytes @ 0x41
  2232  0000C1                     	ds	1
  2233  0000C2                     actuatorTest@i_1676:
  2234                           	opt stack 0
  2235  0000C2                     printRTC@i:
  2236                           	opt stack 0
  2237                           
  2238                           ; 2 bytes @ 0x42
  2239  0000C2                     	ds	1
  2240  0000C3                     actuatorTest@i_1677:
  2241                           	opt stack 0
  2242                           
  2243                           ; 1 bytes @ 0x43
  2244  0000C3                     	ds	1
  2245  0000C4                     ??_UI:
  2246  0000C4                     actuatorTest@i:
  2247                           	opt stack 0
  2248                           
  2249                           ; 2 bytes @ 0x44
  2250  0000C4                     	ds	2
  2251  0000C6                     ??_Test:
  2252  0000C6                     _UI$2295:
  2253                           	opt stack 0
  2254                           
  2255                           ; 2 bytes @ 0x46
  2256  0000C6                     	ds	2
  2257  0000C8                     UI@i:
  2258                           	opt stack 0
  2259                           
  2260                           ; 1 bytes @ 0x48
  2261  0000C8                     	ds	1
  2262  0000C9                     UI@i_409:
  2263                           	opt stack 0
  2264                           
  2265                           ; 1 bytes @ 0x49
  2266  0000C9                     	ds	1
  2267  0000CA                     UI@i_412:
  2268                           	opt stack 0
  2269                           
  2270                           ; 1 bytes @ 0x4A
  2271  0000CA                     	ds	1
  2272  0000CB                     UI@i_413:
  2273                           	opt stack 0
  2274                           
  2275                           ; 1 bytes @ 0x4B
  2276  0000CB                     	ds	1
  2277  0000CC                     UI@i_431:
  2278                           	opt stack 0
  2279                           
  2280                           ; 1 bytes @ 0x4C
  2281  0000CC                     	ds	1
  2282  0000CD                     UI@i_432:
  2283                           	opt stack 0
  2284                           
  2285                           ; 1 bytes @ 0x4D
  2286  0000CD                     	ds	1
  2287  0000CE                     UI@i_435:
  2288                           	opt stack 0
  2289                           
  2290                           ; 1 bytes @ 0x4E
  2291  0000CE                     	ds	1
  2292  0000CF                     UI@i_436:
  2293                           	opt stack 0
  2294                           
  2295                           ; 1 bytes @ 0x4F
  2296  0000CF                     	ds	1
  2297  0000D0                     UI@i_439:
  2298                           	opt stack 0
  2299                           
  2300                           ; 1 bytes @ 0x50
  2301  0000D0                     	ds	1
  2302  0000D1                     UI@i_440:
  2303                           	opt stack 0
  2304                           
  2305                           ; 1 bytes @ 0x51
  2306  0000D1                     	ds	1
  2307  0000D2                     UI@i_443:
  2308                           	opt stack 0
  2309                           
  2310                           ; 1 bytes @ 0x52
  2311  0000D2                     	ds	1
  2312  0000D3                     UI@i_444:
  2313                           	opt stack 0
  2314                           
  2315                           ; 1 bytes @ 0x53
  2316  0000D3                     	ds	1
  2317  0000D4                     UI@i_447:
  2318                           	opt stack 0
  2319                           
  2320                           ; 1 bytes @ 0x54
  2321  0000D4                     	ds	1
  2322  0000D5                     UI@i_448:
  2323                           	opt stack 0
  2324                           
  2325                           ; 1 bytes @ 0x55
  2326  0000D5                     	ds	1
  2327  0000D6                     UI@month:
  2328                           	opt stack 0
  2329                           
  2330                           ; 4 bytes @ 0x56
  2331  0000D6                     	ds	4
  2332  0000DA                     tblptru	equ	0xFF8
  2333                           tblptrh	equ	0xFF7
  2334                           tblptrl	equ	0xFF6
  2335                           tablat	equ	0xFF5
  2336                           postinc0	equ	0xFEE
  2337                           wreg	equ	0xFE8
  2338                           postdec1	equ	0xFE5
  2339                           fsr1l	equ	0xFE1
  2340                           
  2341                           ; 1 bytes @ 0x5A
  2342                           
  2343                           	psect	cstackCOMRAM
  2344  000001                     __pcstackCOMRAM:
  2345                           	opt stack 0
  2346  000001                     ??i2_I2C_Master_Wait:
  2347  000001                     ??i2_isdigit:
  2348  000001                     ?i2___wmul:
  2349                           	opt stack 0
  2350  000001                     ?i2___lwmod:
  2351                           	opt stack 0
  2352  000001                     i2lcdNibble@temp:
  2353                           	opt stack 0
  2354  000001                     i2EEPROM_read@address:
  2355                           	opt stack 0
  2356  000001                     i2___wmul@multiplier:
  2357                           	opt stack 0
  2358  000001                     i2___lwmod@dividend:
  2359                           	opt stack 0
  2360  000001                     i2strcpy@to:
  2361                           	opt stack 0
  2362                           
  2363                           ; 2 bytes @ 0x0
  2364  000001                     	ds	1
  2365  000002                     i2I2C_Master_Read@a:
  2366                           	opt stack 0
  2367  000002                     i2lcdNibble@data:
  2368                           	opt stack 0
  2369  000002                     i2_isdigit$1942:
  2370                           	opt stack 0
  2371  000002                     i2I2C_Master_Write@d:
  2372                           	opt stack 0
  2373                           
  2374                           ; 2 bytes @ 0x1
  2375  000002                     	ds	1
  2376  000003                     i2I2C_Master_Read@temp:
  2377                           	opt stack 0
  2378  000003                     i2lcdInst@data:
  2379                           	opt stack 0
  2380  000003                     i2putch@data:
  2381                           	opt stack 0
  2382  000003                     i2isdigit@c:
  2383                           	opt stack 0
  2384  000003                     i2___wmul@multiplicand:
  2385                           	opt stack 0
  2386  000003                     i2___lwmod@divisor:
  2387                           	opt stack 0
  2388  000003                     i2strcpy@from:
  2389                           	opt stack 0
  2390                           
  2391                           ; 2 bytes @ 0x2
  2392  000003                     	ds	1
  2393  000004                     i2getRTC@i:
  2394                           	opt stack 0
  2395                           
  2396                           ; 2 bytes @ 0x3
  2397  000004                     	ds	1
  2398  000005                     i2___lwmod@counter:
  2399                           	opt stack 0
  2400  000005                     i2___wmul@product:
  2401                           	opt stack 0
  2402  000005                     i2strcpy@cp:
  2403                           	opt stack 0
  2404                           
  2405                           ; 2 bytes @ 0x4
  2406  000005                     	ds	1
  2407  000006                     ?i2___lwdiv:
  2408                           	opt stack 0
  2409  000006                     i2___lwdiv@dividend:
  2410                           	opt stack 0
  2411                           
  2412                           ; 2 bytes @ 0x5
  2413  000006                     	ds	1
  2414  000007                     retrieveLog@logNum:
  2415                           	opt stack 0
  2416                           
  2417                           ; 2 bytes @ 0x6
  2418  000007                     	ds	1
  2419  000008                     i2___lwdiv@divisor:
  2420                           	opt stack 0
  2421                           
  2422                           ; 2 bytes @ 0x7
  2423  000008                     	ds	1
  2424  000009                     ??_retrieveLog:
  2425                           
  2426                           ; 1 bytes @ 0x8
  2427  000009                     	ds	1
  2428  00000A                     i2___lwdiv@quotient:
  2429                           	opt stack 0
  2430                           
  2431                           ; 2 bytes @ 0x9
  2432  00000A                     	ds	1
  2433  00000B                     retrieveLog@byte1:
  2434                           	opt stack 0
  2435                           
  2436                           ; 1 bytes @ 0xA
  2437  00000B                     	ds	1
  2438  00000C                     retrieveLog@byte2:
  2439                           	opt stack 0
  2440  00000C                     i2___lwdiv@counter:
  2441                           	opt stack 0
  2442                           
  2443                           ; 1 bytes @ 0xB
  2444  00000C                     	ds	1
  2445  00000D                     ?i2_printf:
  2446                           	opt stack 0
  2447  00000D                     retrieveLog@byte3:
  2448                           	opt stack 0
  2449  00000D                     i2printf@f:
  2450                           	opt stack 0
  2451                           
  2452                           ; 2 bytes @ 0xC
  2453  00000D                     	ds	1
  2454  00000E                     retrieveLog@i:
  2455                           	opt stack 0
  2456                           
  2457                           ; 2 bytes @ 0xD
  2458  00000E                     	ds	2
  2459  000010                     retrieveLog@addr:
  2460                           	opt stack 0
  2461                           
  2462                           ; 2 bytes @ 0xF
  2463  000010                     	ds	2
  2464  000012                     dispLogs@myLog:
  2465                           	opt stack 0
  2466                           
  2467                           ; 2 bytes @ 0x11
  2468  000012                     	ds	2
  2469  000014                     
  2470                           ; 1 bytes @ 0x13
  2471  000014                     	ds	5
  2472  000019                     ??i2_printf:
  2473                           
  2474                           ; 1 bytes @ 0x18
  2475  000019                     	ds	4
  2476  00001D                     i2printf@prec:
  2477                           	opt stack 0
  2478                           
  2479                           ; 1 bytes @ 0x1C
  2480  00001D                     	ds	1
  2481  00001E                     i2printf@cp:
  2482                           	opt stack 0
  2483                           
  2484                           ; 2 bytes @ 0x1D
  2485  00001E                     	ds	2
  2486  000020                     i2printf@ap:
  2487                           	opt stack 0
  2488                           
  2489                           ; 2 bytes @ 0x1F
  2490  000020                     	ds	2
  2491  000022                     i2printf@len:
  2492                           	opt stack 0
  2493                           
  2494                           ; 2 bytes @ 0x21
  2495  000022                     	ds	2
  2496  000024                     i2printf@val:
  2497                           	opt stack 0
  2498                           
  2499                           ; 2 bytes @ 0x23
  2500  000024                     	ds	2
  2501  000026                     i2printf@flag:
  2502                           	opt stack 0
  2503                           
  2504                           ; 1 bytes @ 0x25
  2505  000026                     	ds	1
  2506  000027                     i2printf@c:
  2507                           	opt stack 0
  2508                           
  2509                           ; 1 bytes @ 0x26
  2510  000027                     	ds	1
  2511  000028                     i2printf@width:
  2512                           	opt stack 0
  2513                           
  2514                           ; 2 bytes @ 0x27
  2515  000028                     	ds	2
  2516  00002A                     ??_printSortTimer:
  2517  00002A                     ??i2_printRTC:
  2518  00002A                     ?_inputHandler:
  2519                           	opt stack 0
  2520                           
  2521                           ; 2 bytes @ 0x29
  2522  00002A                     	ds	2
  2523  00002C                     ??_inputHandler:
  2524                           
  2525                           ; 1 bytes @ 0x2B
  2526  00002C                     	ds	1
  2527  00002D                     printSortTimer@hour:
  2528                           	opt stack 0
  2529  00002D                     i2printRTC@INT_time:
  2530                           	opt stack 0
  2531                           
  2532                           ; 14 bytes @ 0x2C
  2533  00002D                     	ds	2
  2534  00002F                     printSortTimer@curTime:
  2535                           	opt stack 0
  2536                           
  2537                           ; 14 bytes @ 0x2E
  2538  00002F                     	ds	12
  2539  00003B                     i2printRTC@RTC_month:
  2540                           	opt stack 0
  2541                           
  2542                           ; 2 bytes @ 0x3A
  2543  00003B                     	ds	2
  2544  00003D                     printSortTimer@start_sec:
  2545                           	opt stack 0
  2546  00003D                     i2printRTC@month:
  2547                           	opt stack 0
  2548                           
  2549                           ; 4 bytes @ 0x3C
  2550  00003D                     	ds	2
  2551  00003F                     printSortTimer@cur_sec:
  2552                           	opt stack 0
  2553                           
  2554                           ; 2 bytes @ 0x3E
  2555  00003F                     	ds	2
  2556  000041                     printSortTimer@min:
  2557                           	opt stack 0
  2558  000041                     i2printRTC@i:
  2559                           	opt stack 0
  2560                           
  2561                           ; 2 bytes @ 0x40
  2562  000041                     	ds	2
  2563  000043                     ??_updateMenu:
  2564  000043                     printSortTimer@sec:
  2565                           	opt stack 0
  2566                           
  2567                           ; 2 bytes @ 0x42
  2568  000043                     	ds	2
  2569  000045                     _printSortTimer$2415:
  2570                           	opt stack 0
  2571                           
  2572                           ; 2 bytes @ 0x44
  2573  000045                     	ds	2
  2574  000047                     printSortTimer@timeDiff:
  2575                           	opt stack 0
  2576                           
  2577                           ; 2 bytes @ 0x46
  2578  000047                     	ds	2
  2579  000049                     printSortTimer@i:
  2580                           	opt stack 0
  2581                           
  2582                           ; 2 bytes @ 0x48
  2583  000049                     	ds	2
  2584  00004B                     ??_handler:
  2585                           
  2586                           ; 1 bytes @ 0x4A
  2587  00004B                     	ds	16
  2588                           tblptru	equ	0xFF8
  2589                           tblptrh	equ	0xFF7
  2590                           tblptrl	equ	0xFF6
  2591                           tablat	equ	0xFF5
  2592                           postinc0	equ	0xFEE
  2593                           wreg	equ	0xFE8
  2594                           postdec1	equ	0xFE5
  2595                           fsr1l	equ	0xFE1
  2596                           
  2597 ;;
  2598 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2599 ;;
  2600 ;; *************** function _main *****************
  2601 ;; Defined at:
  2602 ;;		line 19 in file "main.c"
  2603 ;; Parameters:    Size  Location     Type
  2604 ;;		None
  2605 ;; Auto vars:     Size  Location     Type
  2606 ;;		None
  2607 ;; Return value:  Size  Location     Type
  2608 ;;                  1    wreg      void 
  2609 ;; Registers used:
  2610 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2611 ;; Tracked objects:
  2612 ;;		On entry : 0/0
  2613 ;;		On exit  : 0/0
  2614 ;;		Unchanged: 0/0
  2615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2619 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2620 ;;Total ram usage:        0 bytes
  2621 ;; Hardware stack levels required when called:   13
  2622 ;; This function calls:
  2623 ;;		_I2C_Master_Init
  2624 ;;		_Test
  2625 ;;		_UI
  2626 ;;		_initLCD
  2627 ;;		_initTime
  2628 ;;		_initUI
  2629 ;;		_logRun
  2630 ;;		_machineConfig
  2631 ;;		_sort
  2632 ;;		_stopSignals
  2633 ;; This function is called by:
  2634 ;;		Startup code after reset
  2635 ;; This function uses a non-reentrant model
  2636 ;;
  2637                           
  2638                           	psect	text0
  2639  003588                     __ptext0:
  2640                           	opt stack 0
  2641  003588                     _main:
  2642                           	opt stack 18
  2643                           
  2644                           ;main.c: 20: machineConfig();
  2645                           
  2646                           ;incstack = 0
  2647  003588  EC5A  F01F         	call	_machineConfig	;wreg free
  2648                           
  2649                           ;main.c: 21: initLCD();
  2650  00358C  ECD1  F020         	call	_initLCD	;wreg free
  2651                           
  2652                           ;main.c: 24: RTCflag = 0;
  2653  003590  0E00               	movlw	0
  2654  003592  0100               	movlb	0	; () banked
  2655  003594  6FDF               	movwf	(_RTCflag+1)& (0+255),b
  2656  003596  0E00               	movlw	0
  2657  003598  6FDE               	movwf	_RTCflag& (0+255),b
  2658                           
  2659                           ;main.c: 25: if(RTCflag){
  2660  00359A  0100               	movlb	0	; () banked
  2661  00359C  51DE               	movf	_RTCflag& (0+255),w,b
  2662  00359E  0100               	movlb	0	; () banked
  2663  0035A0  11DF               	iorwf	(_RTCflag+1)& (0+255),w,b
  2664  0035A2  B4D8               	btfsc	status,2,c
  2665  0035A4  D016               	goto	l8083
  2666                           
  2667                           ; BSR set to: 0
  2668                           ;main.c: 26: initTime(0x42, 0x20, 0x15, 0x04, 0x15, 0x03, 0x17);
  2669  0035A6  0E20               	movlw	32
  2670  0035A8  0100               	movlb	0	; () banked
  2671  0035AA  6F80               	movwf	initTime@m& (0+255),b
  2672  0035AC  0E15               	movlw	21
  2673  0035AE  0100               	movlb	0	; () banked
  2674  0035B0  6F81               	movwf	initTime@h& (0+255),b
  2675  0035B2  0E04               	movlw	4
  2676  0035B4  0100               	movlb	0	; () banked
  2677  0035B6  6F82               	movwf	initTime@w& (0+255),b
  2678  0035B8  0E15               	movlw	21
  2679  0035BA  0100               	movlb	0	; () banked
  2680  0035BC  6F83               	movwf	initTime@DD& (0+255),b
  2681  0035BE  0E03               	movlw	3
  2682  0035C0  0100               	movlb	0	; () banked
  2683  0035C2  6F84               	movwf	initTime@MM& (0+255),b
  2684  0035C4  0E17               	movlw	23
  2685  0035C6  0100               	movlb	0	; () banked
  2686  0035C8  6F85               	movwf	initTime@YY& (0+255),b
  2687  0035CA  0E42               	movlw	66
  2688  0035CC  EC84  F023         	call	_initTime
  2689                           
  2690                           ;main.c: 27: }
  2691  0035D0  D00B               	goto	l8085
  2692  0035D2                     l8083:
  2693                           
  2694                           ;main.c: 28: else{
  2695                           ;main.c: 29: I2C_Master_Init(10000);
  2696  0035D2  0E10               	movlw	16
  2697  0035D4  0100               	movlb	0	; () banked
  2698  0035D6  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2699  0035D8  0E27               	movlw	39
  2700  0035DA  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2701  0035DC  0E00               	movlw	0
  2702  0035DE  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2703  0035E0  0E00               	movlw	0
  2704  0035E2  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2705  0035E4  EC2A  F01F         	call	_I2C_Master_Init	;wreg free
  2706  0035E8                     l8085:
  2707                           
  2708                           ;main.c: 30: }
  2709                           ;main.c: 32: initUI();
  2710  0035E8  EC8D  F022         	call	_initUI	;wreg free
  2711                           
  2712                           ;main.c: 33: first = 1;
  2713  0035EC  0E00               	movlw	0
  2714  0035EE  6E74               	movwf	_first+1,c
  2715  0035F0  0E01               	movlw	1
  2716  0035F2  6E73               	movwf	_first,c
  2717                           
  2718                           ;main.c: 44: switch(machine_state){
  2719                           
  2720                           ;main.c: 43: while(1){
  2721  0035F4  D017               	goto	l8107
  2722  0035F6                     l8089:
  2723                           
  2724                           ;main.c: 46: UI();
  2725  0035F6  EC65  F004         	call	_UI	;wreg free
  2726                           
  2727                           ;main.c: 47: break;
  2728  0035FA  D014               	goto	l8107
  2729  0035FC                     l8091:
  2730                           
  2731                           ;main.c: 49: sort();
  2732  0035FC  EC73  F023         	call	_sort	;wreg free
  2733                           
  2734                           ;main.c: 50: break;
  2735  003600  D011               	goto	l8107
  2736  003602                     l8093:
  2737                           
  2738                           ;main.c: 52: stopSignals();
  2739  003602  ECB0  F023         	call	_stopSignals	;wreg free
  2740                           
  2741                           ;main.c: 53: logRun();
  2742  003606  EC38  F018         	call	_logRun	;wreg free
  2743                           
  2744                           ;main.c: 54: first = 1;
  2745  00360A  0E00               	movlw	0
  2746  00360C  6E74               	movwf	_first+1,c
  2747  00360E  0E01               	movlw	1
  2748  003610  6E73               	movwf	_first,c
  2749                           
  2750                           ;main.c: 55: UI();
  2751  003612  EC65  F004         	call	_UI	;wreg free
  2752                           
  2753                           ;main.c: 56: break;
  2754  003616  D006               	goto	l8107
  2755  003618                     l8101:
  2756                           
  2757                           ;main.c: 58: Test();
  2758  003618  EC63  F019         	call	_Test	;wreg free
  2759                           
  2760                           ;main.c: 59: break;
  2761  00361C  D003               	goto	l8107
  2762  00361E                     l8103:
  2763                           
  2764                           ;main.c: 61: stopSignals();
  2765  00361E  ECB0  F023         	call	_stopSignals	;wreg free
  2766  003622                     l487:
  2767  003622  D7FF               	goto	l487
  2768  003624                     l8107:
  2769  003624  0100               	movlb	0	; () banked
  2770  003626  51FC               	movf	_machine_state& (0+255),w,b
  2771                           
  2772                           ; Switch size 1, requested type "space"
  2773                           ; Number of cases is 5, Range of values is 0 to 4
  2774                           ; switch strategies available:
  2775                           ; Name         Instructions Cycles
  2776                           ; simple_byte           16     9 (average)
  2777                           ;	Chosen strategy is simple_byte
  2778  003628  0A00               	xorlw	0	; case 0
  2779  00362A  B4D8               	btfsc	status,2,c
  2780  00362C  D7E4               	goto	l8089
  2781  00362E  0A01               	xorlw	1	; case 1
  2782  003630  B4D8               	btfsc	status,2,c
  2783  003632  D7E4               	goto	l8091
  2784  003634  0A03               	xorlw	3	; case 2
  2785  003636  B4D8               	btfsc	status,2,c
  2786  003638  D7E4               	goto	l8093
  2787  00363A  0A01               	xorlw	1	; case 3
  2788  00363C  B4D8               	btfsc	status,2,c
  2789  00363E  D7EC               	goto	l8101
  2790  003640  0A07               	xorlw	7	; case 4
  2791  003642  B4D8               	btfsc	status,2,c
  2792  003644  D7EC               	goto	l8103
  2793                           
  2794                           ; BSR set to: 0
  2795                           
  2796                           ; BSR set to: 0
  2797  003646  D7EE               	goto	l8107
  2798  003648                     __end_of_main:
  2799                           	opt stack 0
  2800                           tblptru	equ	0xFF8
  2801                           tblptrh	equ	0xFF7
  2802                           tblptrl	equ	0xFF6
  2803                           tablat	equ	0xFF5
  2804                           postinc0	equ	0xFEE
  2805                           wreg	equ	0xFE8
  2806                           postdec1	equ	0xFE5
  2807                           fsr1l	equ	0xFE1
  2808                           status	equ	0xFD8
  2809                           
  2810 ;; *************** function _stopSignals *****************
  2811 ;; Defined at:
  2812 ;;		line 70 in file "main.c"
  2813 ;; Parameters:    Size  Location     Type
  2814 ;;		None
  2815 ;; Auto vars:     Size  Location     Type
  2816 ;;		None
  2817 ;; Return value:  Size  Location     Type
  2818 ;;                  1    wreg      void 
  2819 ;; Registers used:
  2820 ;;		wreg, status,2
  2821 ;; Tracked objects:
  2822 ;;		On entry : 0/0
  2823 ;;		On exit  : 0/0
  2824 ;;		Unchanged: 0/0
  2825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2827 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2829 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2830 ;;Total ram usage:        0 bytes
  2831 ;; Hardware stack levels used:    1
  2832 ;; Hardware stack levels required when called:    7
  2833 ;; This function calls:
  2834 ;;		Nothing
  2835 ;; This function is called by:
  2836 ;;		_main
  2837 ;; This function uses a non-reentrant model
  2838 ;;
  2839                           
  2840                           	psect	text1
  2841  004760                     __ptext1:
  2842                           	opt stack 0
  2843  004760                     _stopSignals:
  2844                           	opt stack 23
  2845                           
  2846                           ;main.c: 71: LATA = 0x00;
  2847                           
  2848                           ; BSR set to: 0
  2849                           ;incstack = 0
  2850  004760  0E00               	movlw	0
  2851  004762  6E89               	movwf	3977,c	;volatile
  2852                           
  2853                           ;main.c: 72: LATB = 0x00;
  2854  004764  0E00               	movlw	0
  2855  004766  6E8A               	movwf	3978,c	;volatile
  2856                           
  2857                           ;main.c: 73: LATC = 0x00;
  2858  004768  0E00               	movlw	0
  2859  00476A  6E8B               	movwf	3979,c	;volatile
  2860                           
  2861                           ;main.c: 74: LATD = 0x00;
  2862  00476C  0E00               	movlw	0
  2863  00476E  6E8C               	movwf	3980,c	;volatile
  2864                           
  2865                           ;main.c: 75: LATE = 0x00;
  2866  004770  0E00               	movlw	0
  2867  004772  6E8D               	movwf	3981,c	;volatile
  2868  004774  0012               	return		;funcret
  2869  004776                     __end_of_stopSignals:
  2870                           	opt stack 0
  2871                           tblptru	equ	0xFF8
  2872                           tblptrh	equ	0xFF7
  2873                           tblptrl	equ	0xFF6
  2874                           tablat	equ	0xFF5
  2875                           postinc0	equ	0xFEE
  2876                           wreg	equ	0xFE8
  2877                           postdec1	equ	0xFE5
  2878                           fsr1l	equ	0xFE1
  2879                           status	equ	0xFD8
  2880                           
  2881 ;; *************** function _sort *****************
  2882 ;; Defined at:
  2883 ;;		line 55 in file "sort.c"
  2884 ;; Parameters:    Size  Location     Type
  2885 ;;		None
  2886 ;; Auto vars:     Size  Location     Type
  2887 ;;		None
  2888 ;; Return value:  Size  Location     Type
  2889 ;;                  1    wreg      void 
  2890 ;; Registers used:
  2891 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2892 ;; Tracked objects:
  2893 ;;		On entry : 0/0
  2894 ;;		On exit  : 0/0
  2895 ;;		Unchanged: 0/0
  2896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2900 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2901 ;;Total ram usage:        0 bytes
  2902 ;; Hardware stack levels used:    1
  2903 ;; Hardware stack levels required when called:   12
  2904 ;; This function calls:
  2905 ;;		_Distribution
  2906 ;;		_ID
  2907 ;;		_Loading
  2908 ;; This function is called by:
  2909 ;;		_main
  2910 ;; This function uses a non-reentrant model
  2911 ;;
  2912                           
  2913                           	psect	text2
  2914  0046E6                     __ptext2:
  2915                           	opt stack 0
  2916  0046E6                     _sort:
  2917                           	opt stack 18
  2918                           
  2919                           ;sort.c: 56: if(machine_state == Sorting_state){
  2920                           
  2921                           ;incstack = 0
  2922  0046E6  0100               	movlb	0	; () banked
  2923  0046E8  05FC               	decf	_machine_state& (0+255),w,b
  2924  0046EA  B4D8               	btfsc	status,2,c
  2925                           
  2926                           ; BSR set to: 0
  2927                           ;sort.c: 57: Loading();
  2928  0046EC  EC60  F015         	call	_Loading	;wreg free
  2929                           
  2930                           ;sort.c: 58: }
  2931                           ;sort.c: 59: if(machine_state == Sorting_state){
  2932  0046F0  0100               	movlb	0	; () banked
  2933  0046F2  05FC               	decf	_machine_state& (0+255),w,b
  2934  0046F4  B4D8               	btfsc	status,2,c
  2935                           
  2936                           ; BSR set to: 0
  2937                           ;sort.c: 60: ID();
  2938  0046F6  ECD7  F016         	call	_ID	;wreg free
  2939                           
  2940                           ;sort.c: 61: }
  2941                           ;sort.c: 62: if(machine_state == Sorting_state){
  2942  0046FA  0100               	movlb	0	; () banked
  2943  0046FC  05FC               	decf	_machine_state& (0+255),w,b
  2944  0046FE  A4D8               	btfss	status,2,c
  2945  004700  0012               	return	
  2946                           
  2947                           ; BSR set to: 0
  2948                           ;sort.c: 63: Distribution();
  2949  004702  EC89  F017         	call	_Distribution	;wreg free
  2950  004706  0012               	return	
  2951  004708                     __end_of_sort:
  2952                           	opt stack 0
  2953                           tblptru	equ	0xFF8
  2954                           tblptrh	equ	0xFF7
  2955                           tblptrl	equ	0xFF6
  2956                           tablat	equ	0xFF5
  2957                           postinc0	equ	0xFEE
  2958                           wreg	equ	0xFE8
  2959                           postdec1	equ	0xFE5
  2960                           fsr1l	equ	0xFE1
  2961                           status	equ	0xFD8
  2962                           
  2963 ;; *************** function _Loading *****************
  2964 ;; Defined at:
  2965 ;;		line 67 in file "sort.c"
  2966 ;; Parameters:    Size  Location     Type
  2967 ;;		None
  2968 ;; Auto vars:     Size  Location     Type
  2969 ;;  i               2   54[BANK0 ] int 
  2970 ;;  addr            2   51[BANK0 ] unsigned short 
  2971 ;;  byte1           1   53[BANK0 ] unsigned char 
  2972 ;; Return value:  Size  Location     Type
  2973 ;;                  1    wreg      void 
  2974 ;; Registers used:
  2975 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2976 ;; Tracked objects:
  2977 ;;		On entry : 0/0
  2978 ;;		On exit  : 0/0
  2979 ;;		Unchanged: 0/0
  2980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2982 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2983 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2984 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2985 ;;Total ram usage:        7 bytes
  2986 ;; Hardware stack levels used:    1
  2987 ;; Hardware stack levels required when called:   11
  2988 ;; This function calls:
  2989 ;;		_EEPROM_read
  2990 ;;		_EEPROM_write
  2991 ;;		_delay_ms
  2992 ;;		_getIR
  2993 ;;		_initGlobalVars
  2994 ;;		_initServos
  2995 ;;		_initSortTimer
  2996 ;;		_lcdInst
  2997 ;; This function is called by:
  2998 ;;		_sort
  2999 ;; This function uses a non-reentrant model
  3000 ;;
  3001                           
  3002                           	psect	text3
  3003  002AC0                     __ptext3:
  3004                           	opt stack 0
  3005  002AC0                     _Loading:
  3006                           	opt stack 18
  3007                           
  3008                           ;sort.c: 68: if(first){
  3009                           
  3010                           ;incstack = 0
  3011  002AC0  5073               	movf	_first,w,c
  3012  002AC2  1074               	iorwf	_first+1,w,c
  3013  002AC4  B4D8               	btfsc	status,2,c
  3014  002AC6  D074               	goto	l6401
  3015                           
  3016                           ;sort.c: 69: initGlobalVars();
  3017  002AC8  EC91  F01E         	call	_initGlobalVars	;wreg free
  3018                           
  3019                           ;sort.c: 70: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3020  002ACC  0E01               	movlw	1
  3021  002ACE  ECE1  F023         	call	_lcdInst
  3022  002AD2  0E68               	movlw	104
  3023  002AD4  0100               	movlb	0	; () banked
  3024  002AD6  6FB1               	movwf	??_Loading& (0+255),b
  3025  002AD8  0EE4               	movlw	228
  3026  002ADA                     u7037:
  3027  002ADA  2EE8               	decfsz	wreg,f,c
  3028  002ADC  D7FE               	bra	u7037
  3029  002ADE  2FB1               	decfsz	??_Loading& (0+255),f,b
  3030  002AE0  D7FC               	bra	u7037
  3031  002AE2  F000               	nop	
  3032                           
  3033                           ;sort.c: 71: initSortTimer();
  3034  002AE4  ECE1  F01B         	call	_initSortTimer	;wreg free
  3035                           
  3036                           ;sort.c: 72: LATCbits.LATC5 = 1;
  3037  002AE8  8A8B               	bsf	3979,5,c	;volatile
  3038                           
  3039                           ;sort.c: 77: sel = EEPROM_read(0);
  3040  002AEA  0E00               	movlw	0
  3041  002AEC  0100               	movlb	0	; () banked
  3042  002AEE  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3043  002AF0  0E00               	movlw	0
  3044  002AF2  6F80               	movwf	EEPROM_read@address& (0+255),b
  3045  002AF4  ECA4  F023         	call	_EEPROM_read	;wreg free
  3046  002AF8  0100               	movlb	0	; () banked
  3047  002AFA  6FFD               	movwf	_sel& (0+255),b
  3048                           
  3049                           ; BSR set to: 0
  3050                           ;sort.c: 78: unsigned short addr = 1 + 11 * sel;
  3051  002AFC  0100               	movlb	0	; () banked
  3052  002AFE  51FD               	movf	_sel& (0+255),w,b
  3053  002B00  0D0B               	mullw	11
  3054  002B02  0E01               	movlw	1
  3055  002B04  24F3               	addwf	prodl,w,c
  3056  002B06  0100               	movlb	0	; () banked
  3057  002B08  6FB3               	movwf	Loading@addr& (0+255),b
  3058  002B0A  0E00               	movlw	0
  3059  002B0C  20F4               	addwfc	prodh,w,c
  3060  002B0E  0100               	movlb	0	; () banked
  3061  002B10  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3062                           
  3063                           ; BSR set to: 0
  3064                           ;sort.c: 79: unsigned char byte1 = 0b01111111;
  3065  002B12  0E7F               	movlw	127
  3066  002B14  0100               	movlb	0	; () banked
  3067  002B16  6FB5               	movwf	Loading@byte1& (0+255),b
  3068                           
  3069                           ; BSR set to: 0
  3070                           ;sort.c: 80: EEPROM_write(addr, byte1);
  3071  002B18  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3072  002B1C  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3073  002B20  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3074  002B24  ECE7  F019         	call	_EEPROM_write	;wreg free
  3075                           
  3076                           ;sort.c: 83: LATAbits.LATA5 = 0;
  3077  002B28  9A89               	bcf	3977,5,c	;volatile
  3078                           
  3079                           ;sort.c: 85: for(int i=0; i<46; i++){
  3080  002B2A  0E00               	movlw	0
  3081  002B2C  0100               	movlb	0	; () banked
  3082  002B2E  6FB7               	movwf	(Loading@i+1)& (0+255),b
  3083  002B30  0E00               	movlw	0
  3084  002B32  6FB6               	movwf	Loading@i& (0+255),b
  3085                           
  3086                           ; BSR set to: 0
  3087  002B34  0100               	movlb	0	; () banked
  3088  002B36  BFB7               	btfsc	(Loading@i+1)& (0+255),7,b
  3089  002B38  D008               	goto	l6389
  3090  002B3A  0100               	movlb	0	; () banked
  3091  002B3C  51B7               	movf	(Loading@i+1)& (0+255),w,b
  3092  002B3E  E126               	bnz	l730
  3093  002B40  0E2E               	movlw	46
  3094  002B42  0100               	movlb	0	; () banked
  3095  002B44  5DB6               	subwf	Loading@i& (0+255),w,b
  3096  002B46  B0D8               	btfsc	status,0,c
  3097  002B48  D021               	goto	l730
  3098  002B4A                     l6389:
  3099                           
  3100                           ; BSR set to: 0
  3101                           ;sort.c: 86: LATAbits.LATA5 = !LATAbits.LATA5;
  3102  002B4A  BA89               	btfsc	3977,5,c	;volatile
  3103  002B4C  D004               	goto	u4810
  3104  002B4E  0100               	movlb	0	; () banked
  3105  002B50  6BB1               	clrf	??_Loading& (0+255),b
  3106  002B52  2BB1               	incf	??_Loading& (0+255),f,b
  3107  002B54  D002               	goto	u4828
  3108  002B56                     u4810:
  3109  002B56  0100               	movlb	0	; () banked
  3110  002B58  6BB1               	clrf	??_Loading& (0+255),b
  3111  002B5A                     u4828:
  3112  002B5A  0100               	movlb	0	; () banked
  3113  002B5C  3BB1               	swapf	??_Loading& (0+255),f,b
  3114  002B5E  47B1               	rlncf	??_Loading& (0+255),f,b
  3115  002B60  5089               	movf	3977,w,c	;volatile
  3116  002B62  0100               	movlb	0	; () banked
  3117  002B64  19B1               	xorwf	??_Loading& (0+255),w,b
  3118  002B66  0BDF               	andlw	-33
  3119  002B68  19B1               	xorwf	??_Loading& (0+255),w,b
  3120  002B6A  6E89               	movwf	3977,c	;volatile
  3121                           
  3122                           ; BSR set to: 0
  3123                           ;sort.c: 87: delay_ms(45-i);
  3124  002B6C  0100               	movlb	0	; () banked
  3125  002B6E  51B6               	movf	Loading@i& (0+255),w,b
  3126  002B70  0800               	sublw	0
  3127  002B72  0F2D               	addlw	45
  3128  002B74  EC13  F023         	call	_delay_ms
  3129  002B78  0100               	movlb	0	; () banked
  3130  002B7A  4BB6               	infsnz	Loading@i& (0+255),f,b
  3131  002B7C  2BB7               	incf	(Loading@i+1)& (0+255),f,b
  3132                           
  3133                           ; BSR set to: 0
  3134  002B7E  0100               	movlb	0	; () banked
  3135  002B80  BFB7               	btfsc	(Loading@i+1)& (0+255),7,b
  3136  002B82  D7E3               	goto	l6389
  3137  002B84  0100               	movlb	0	; () banked
  3138  002B86  51B7               	movf	(Loading@i+1)& (0+255),w,b
  3139  002B88  E101               	bnz	u4830
  3140  002B8A  D7DA               	goto	L1
  3141  002B8C                     u4830:
  3142  002B8C                     l730:
  3143                           
  3144                           ; BSR set to: 0
  3145                           ;sort.c: 88: }
  3146                           ;sort.c: 89: LATAbits.LATA5 = 1;
  3147  002B8C  8A89               	bsf	3977,5,c	;volatile
  3148                           
  3149                           ; BSR set to: 0
  3150                           ;sort.c: 92: initServos();
  3151  002B8E  EC88  F01F         	call	_initServos	;wreg free
  3152                           
  3153                           ;sort.c: 93: _delay((unsigned long)((5000)*(32000000/4000.0)));
  3154  002B92  0ECB               	movlw	203
  3155  002B94  0100               	movlb	0	; () banked
  3156  002B96  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3157  002B98  0EEC               	movlw	236
  3158  002B9A  0100               	movlb	0	; () banked
  3159  002B9C  6FB1               	movwf	??_Loading& (0+255),b
  3160  002B9E  0E84               	movlw	132
  3161  002BA0                     u7047:
  3162  002BA0  2EE8               	decfsz	wreg,f,c
  3163  002BA2  D7FE               	bra	u7047
  3164  002BA4  2FB1               	decfsz	??_Loading& (0+255),f,b
  3165  002BA6  D7FC               	bra	u7047
  3166  002BA8  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3167  002BAA  D7FA               	bra	u7047
  3168  002BAC  F000               	nop	
  3169                           
  3170                           ;sort.c: 94: }
  3171  002BAE  0012               	return	
  3172  002BB0                     l6401:
  3173                           
  3174                           ;sort.c: 95: else{
  3175                           ;sort.c: 98: if(!f_loadingNewCan){
  3176  002BB0  0100               	movlb	0	; () banked
  3177  002BB2  51E2               	movf	_f_loadingNewCan& (0+255),w,b
  3178  002BB4  0100               	movlb	0	; () banked
  3179  002BB6  11E3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3180  002BB8  A4D8               	btfss	status,2,c
  3181  002BBA  D017               	goto	l6417
  3182                           
  3183                           ; BSR set to: 0
  3184                           ;sort.c: 100: getIR();
  3185  002BBC  EC0B  F020         	call	_getIR	;wreg free
  3186                           
  3187                           ;sort.c: 102: if(!f_loadingNewCan){
  3188  002BC0  0100               	movlb	0	; () banked
  3189  002BC2  51E2               	movf	_f_loadingNewCan& (0+255),w,b
  3190  002BC4  0100               	movlb	0	; () banked
  3191  002BC6  11E3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3192  002BC8  B4D8               	btfsc	status,2,c
  3193  002BCA  0012               	return	
  3194                           
  3195                           ; BSR set to: 0
  3196                           ;sort.c: 106: else{
  3197                           ;sort.c: 107: count_total++;
  3198                           
  3199                           ; BSR set to: 0
  3200                           
  3201                           ; BSR set to: 0
  3202                           ;sort.c: 104: }
  3203                           
  3204                           ; BSR set to: 0
  3205                           ;sort.c: 103: return;
  3206  002BCC  0100               	movlb	0	; () banked
  3207  002BCE  4BFE               	infsnz	_count_total& (0+255),f,b
  3208  002BD0  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3209                           
  3210                           ; BSR set to: 0
  3211                           ;sort.c: 108: if(count_total == 12){
  3212  002BD2  0E0C               	movlw	12
  3213  002BD4  0100               	movlb	0	; () banked
  3214  002BD6  19FE               	xorwf	_count_total& (0+255),w,b
  3215  002BD8  0100               	movlb	0	; () banked
  3216  002BDA  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3217  002BDC  A4D8               	btfss	status,2,c
  3218  002BDE  0012               	return	
  3219                           
  3220                           ; BSR set to: 0
  3221                           ;sort.c: 109: f_lastCan = 1;
  3222  002BE0  0E00               	movlw	0
  3223  002BE2  6E72               	movwf	_f_lastCan+1,c
  3224  002BE4  0E01               	movlw	1
  3225  002BE6  6E71               	movwf	_f_lastCan,c
  3226                           
  3227                           ; BSR set to: 0
  3228                           ;sort.c: 110: }
  3229                           ;sort.c: 111: }
  3230                           ;sort.c: 112: }
  3231                           
  3232                           ; BSR set to: 0
  3233  002BE8  0012               	return	
  3234  002BEA                     l6417:
  3235                           
  3236                           ; BSR set to: 0
  3237                           ;sort.c: 115: else if(f_ID_receive){
  3238  002BEA  506B               	movf	_f_ID_receive,w,c
  3239  002BEC  106C               	iorwf	_f_ID_receive+1,w,c
  3240  002BEE  B4D8               	btfsc	status,2,c
  3241  002BF0  0012               	return	
  3242                           
  3243                           ; BSR set to: 0
  3244                           ;sort.c: 116: f_loadingNewCan = 0;
  3245  002BF2  0E00               	movlw	0
  3246  002BF4  0100               	movlb	0	; () banked
  3247  002BF6  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3248  002BF8  0E00               	movlw	0
  3249  002BFA  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3250                           
  3251                           ; BSR set to: 0
  3252                           ;sort.c: 117: _delay((unsigned long)((1500)*(32000000/4000.0)));
  3253  002BFC  0E3D               	movlw	61
  3254  002BFE  0100               	movlb	0	; () banked
  3255  002C00  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3256  002C02  0EE1               	movlw	225
  3257  002C04  0100               	movlb	0	; () banked
  3258  002C06  6FB1               	movwf	??_Loading& (0+255),b
  3259  002C08  0E3F               	movlw	63
  3260  002C0A                     u7057:
  3261  002C0A  2EE8               	decfsz	wreg,f,c
  3262  002C0C  D7FE               	bra	u7057
  3263  002C0E  2FB1               	decfsz	??_Loading& (0+255),f,b
  3264  002C10  D7FC               	bra	u7057
  3265  002C12  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3266  002C14  D7FA               	bra	u7057
  3267  002C16  D000               	nop2	
  3268                           
  3269                           ;sort.c: 118: LATAbits.LATA4 = 1;
  3270  002C18  8889               	bsf	3977,4,c	;volatile
  3271                           
  3272                           ;sort.c: 119: _delay((unsigned long)((100)*(32000000/4000.0)));
  3273  002C1A  0E05               	movlw	5
  3274  002C1C  0100               	movlb	0	; () banked
  3275  002C1E  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3276  002C20  0E0F               	movlw	15
  3277  002C22  0100               	movlb	0	; () banked
  3278  002C24  6FB1               	movwf	??_Loading& (0+255),b
  3279  002C26  0EF1               	movlw	241
  3280  002C28                     u7067:
  3281  002C28  2EE8               	decfsz	wreg,f,c
  3282  002C2A  D7FE               	bra	u7067
  3283  002C2C  2FB1               	decfsz	??_Loading& (0+255),f,b
  3284  002C2E  D7FC               	bra	u7067
  3285  002C30  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3286  002C32  D7FA               	bra	u7067
  3287                           
  3288                           ;sort.c: 120: LATAbits.LATA4 = 0;
  3289  002C34  9889               	bcf	3977,4,c	;volatile
  3290                           
  3291                           ;sort.c: 121: f_can_coming_to_ID = 1;
  3292  002C36  0E00               	movlw	0
  3293  002C38  6E6E               	movwf	_f_can_coming_to_ID+1,c
  3294  002C3A  0E01               	movlw	1
  3295  002C3C  6E6D               	movwf	_f_can_coming_to_ID,c
  3296  002C3E  0012               	return	
  3297  002C40                     __end_of_Loading:
  3298                           	opt stack 0
  3299                           tblptru	equ	0xFF8
  3300                           tblptrh	equ	0xFF7
  3301                           tblptrl	equ	0xFF6
  3302                           tablat	equ	0xFF5
  3303                           prodh	equ	0xFF4
  3304                           prodl	equ	0xFF3
  3305                           postinc0	equ	0xFEE
  3306                           wreg	equ	0xFE8
  3307                           postdec1	equ	0xFE5
  3308                           fsr1l	equ	0xFE1
  3309                           status	equ	0xFD8
  3310                           
  3311 ;; *************** function _initSortTimer *****************
  3312 ;; Defined at:
  3313 ;;		line 253 in file "sort.c"
  3314 ;; Parameters:    Size  Location     Type
  3315 ;;		None
  3316 ;; Auto vars:     Size  Location     Type
  3317 ;;  i               2    8[BANK0 ] int 
  3318 ;; Return value:  Size  Location     Type
  3319 ;;                  1    wreg      void 
  3320 ;; Registers used:
  3321 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3322 ;; Tracked objects:
  3323 ;;		On entry : 0/0
  3324 ;;		On exit  : 0/0
  3325 ;;		Unchanged: 0/0
  3326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3328 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3329 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3330 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3331 ;;Total ram usage:        5 bytes
  3332 ;; Hardware stack levels used:    1
  3333 ;; Hardware stack levels required when called:   10
  3334 ;; This function calls:
  3335 ;;		_getRTC
  3336 ;; This function is called by:
  3337 ;;		_Loading
  3338 ;; This function uses a non-reentrant model
  3339 ;;
  3340                           
  3341                           	psect	text4
  3342  0037C2                     __ptext4:
  3343                           	opt stack 0
  3344  0037C2                     _initSortTimer:
  3345                           	opt stack 18
  3346                           
  3347                           ;sort.c: 255: getRTC();
  3348                           
  3349                           ;incstack = 0
  3350  0037C2  EC5C  F01D         	call	_getRTC	;wreg free
  3351                           
  3352                           ;sort.c: 256: for(int i = 0; i < 7; i++){
  3353  0037C6  0E00               	movlw	0
  3354  0037C8  0100               	movlb	0	; () banked
  3355  0037CA  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  3356  0037CC  0E00               	movlw	0
  3357  0037CE  6F88               	movwf	initSortTimer@i& (0+255),b
  3358  0037D0                     l5985:
  3359                           
  3360                           ; BSR set to: 0
  3361  0037D0  0100               	movlb	0	; () banked
  3362  0037D2  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  3363  0037D4  D008               	goto	l5989
  3364  0037D6  0100               	movlb	0	; () banked
  3365  0037D8  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  3366  0037DA  E140               	bnz	l5995
  3367  0037DC  0E07               	movlw	7
  3368  0037DE  0100               	movlb	0	; () banked
  3369  0037E0  5D88               	subwf	initSortTimer@i& (0+255),w,b
  3370  0037E2  B0D8               	btfsc	status,0,c
  3371  0037E4  D03B               	goto	l5995
  3372  0037E6                     l5989:
  3373                           
  3374                           ; BSR set to: 0
  3375                           ;sort.c: 257: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  3376  0037E6  0E24               	movlw	low _time
  3377  0037E8  0100               	movlb	0	; () banked
  3378  0037EA  2588               	addwf	initSortTimer@i& (0+255),w,b
  3379  0037EC  6ED9               	movwf	fsr2l,c
  3380  0037EE  0E01               	movlw	high _time
  3381  0037F0  0100               	movlb	0	; () banked
  3382  0037F2  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3383  0037F4  6EDA               	movwf	fsr2h,c
  3384  0037F6  50DF               	movf	indf2,w,c
  3385  0037F8  0100               	movlb	0	; () banked
  3386  0037FA  6F85               	movwf	??_initSortTimer& (0+255),b
  3387  0037FC  0100               	movlb	0	; () banked
  3388  0037FE  3B85               	swapf	??_initSortTimer& (0+255),f,b
  3389  003800  0E0F               	movlw	15
  3390  003802  1785               	andwf	??_initSortTimer& (0+255),f,b
  3391  003804  0E0F               	movlw	15
  3392  003806  0100               	movlb	0	; () banked
  3393  003808  1785               	andwf	??_initSortTimer& (0+255),f,b
  3394  00380A  0100               	movlb	0	; () banked
  3395  00380C  5185               	movf	??_initSortTimer& (0+255),w,b
  3396  00380E  0D0A               	mullw	10
  3397  003810  0E24               	movlw	low _time
  3398  003812  0100               	movlb	0	; () banked
  3399  003814  2588               	addwf	initSortTimer@i& (0+255),w,b
  3400  003816  6ED9               	movwf	fsr2l,c
  3401  003818  0E01               	movlw	high _time
  3402  00381A  0100               	movlb	0	; () banked
  3403  00381C  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3404  00381E  6EDA               	movwf	fsr2h,c
  3405  003820  50DF               	movf	indf2,w,c
  3406  003822  0B0F               	andlw	15
  3407  003824  0100               	movlb	0	; () banked
  3408  003826  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  3409  003828  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  3410  00382A  50F3               	movf	prodl,w,c
  3411  00382C  0100               	movlb	0	; () banked
  3412  00382E  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  3413  003830  50F4               	movf	prodh,w,c
  3414  003832  0100               	movlb	0	; () banked
  3415  003834  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  3416  003836  90D8               	bcf	status,0,c
  3417  003838  0100               	movlb	0	; () banked
  3418  00383A  3588               	rlcf	initSortTimer@i& (0+255),w,b
  3419  00383C  6ED9               	movwf	fsr2l,c
  3420  00383E  0100               	movlb	0	; () banked
  3421  003840  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  3422  003842  6EDA               	movwf	fsr2h,c
  3423  003844  0E0E               	movlw	low _startTime
  3424  003846  26D9               	addwf	fsr2l,f,c
  3425  003848  0E01               	movlw	high _startTime
  3426  00384A  22DA               	addwfc	fsr2h,f,c
  3427  00384C  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  3428  003850  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  3429                           
  3430                           ; BSR set to: 0
  3431  003854  0100               	movlb	0	; () banked
  3432  003856  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  3433  003858  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  3434  00385A  D7BA               	goto	l5985
  3435  00385C                     l5995:
  3436                           
  3437                           ; BSR set to: 0
  3438                           ;sort.c: 258: }
  3439                           ;sort.c: 260: T0CON = 0b00010111;
  3440  00385C  0E17               	movlw	23
  3441  00385E  6ED5               	movwf	4053,c	;volatile
  3442                           
  3443                           ;sort.c: 269: TMR0H = 0b10000101;
  3444  003860  0E85               	movlw	133
  3445  003862  6ED7               	movwf	4055,c	;volatile
  3446                           
  3447                           ;sort.c: 270: TMR0L = 0b11101110;
  3448  003864  0EEE               	movlw	238
  3449  003866  6ED6               	movwf	4054,c	;volatile
  3450                           
  3451                           ; BSR set to: 0
  3452                           ;sort.c: 271: TMR0ON = 1;
  3453  003868  8ED5               	bsf	4053,7,c	;volatile
  3454                           
  3455                           ; BSR set to: 0
  3456  00386A  0012               	return		;funcret
  3457  00386C                     __end_of_initSortTimer:
  3458                           	opt stack 0
  3459                           tblptru	equ	0xFF8
  3460                           tblptrh	equ	0xFF7
  3461                           tblptrl	equ	0xFF6
  3462                           tablat	equ	0xFF5
  3463                           prodh	equ	0xFF4
  3464                           prodl	equ	0xFF3
  3465                           postinc0	equ	0xFEE
  3466                           wreg	equ	0xFE8
  3467                           postdec1	equ	0xFE5
  3468                           fsr1l	equ	0xFE1
  3469                           indf2	equ	0xFDF
  3470                           postinc2	equ	0xFDE
  3471                           postdec2	equ	0xFDD
  3472                           fsr2h	equ	0xFDA
  3473                           fsr2l	equ	0xFD9
  3474                           status	equ	0xFD8
  3475                           
  3476 ;; *************** function _initGlobalVars *****************
  3477 ;; Defined at:
  3478 ;;		line 234 in file "sort.c"
  3479 ;; Parameters:    Size  Location     Type
  3480 ;;		None
  3481 ;; Auto vars:     Size  Location     Type
  3482 ;;		None
  3483 ;; Return value:  Size  Location     Type
  3484 ;;                  1    wreg      void 
  3485 ;; Registers used:
  3486 ;;		wreg, status,2
  3487 ;; Tracked objects:
  3488 ;;		On entry : 0/0
  3489 ;;		On exit  : 0/0
  3490 ;;		Unchanged: 0/0
  3491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3493 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3495 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3496 ;;Total ram usage:        0 bytes
  3497 ;; Hardware stack levels used:    1
  3498 ;; Hardware stack levels required when called:    7
  3499 ;; This function calls:
  3500 ;;		Nothing
  3501 ;; This function is called by:
  3502 ;;		_Loading
  3503 ;; This function uses a non-reentrant model
  3504 ;;
  3505                           
  3506                           	psect	text5
  3507  003D22                     __ptext5:
  3508                           	opt stack 0
  3509  003D22                     _initGlobalVars:
  3510                           	opt stack 21
  3511                           
  3512                           ;sort.c: 236: first = 0;
  3513                           
  3514                           ; BSR set to: 0
  3515                           ;incstack = 0
  3516  003D22  0E00               	movlw	0
  3517  003D24  6E74               	movwf	_first+1,c
  3518  003D26  0E00               	movlw	0
  3519  003D28  6E73               	movwf	_first,c
  3520                           
  3521                           ;sort.c: 239: f_loadingNewCan = 0;
  3522  003D2A  0E00               	movlw	0
  3523  003D2C  0100               	movlb	0	; () banked
  3524  003D2E  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3525  003D30  0E00               	movlw	0
  3526  003D32  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3527                           
  3528                           ;sort.c: 240: f_lastCan = 0;
  3529  003D34  0E00               	movlw	0
  3530  003D36  6E72               	movwf	_f_lastCan+1,c
  3531  003D38  0E00               	movlw	0
  3532  003D3A  6E71               	movwf	_f_lastCan,c
  3533                           
  3534                           ;sort.c: 241: f_ID_receive = 1;
  3535  003D3C  0E00               	movlw	0
  3536  003D3E  6E6C               	movwf	_f_ID_receive+1,c
  3537  003D40  0E01               	movlw	1
  3538  003D42  6E6B               	movwf	_f_ID_receive,c
  3539                           
  3540                           ;sort.c: 242: f_can_coming_to_ID = 0;
  3541  003D44  0E00               	movlw	0
  3542  003D46  6E6E               	movwf	_f_can_coming_to_ID+1,c
  3543  003D48  0E00               	movlw	0
  3544  003D4A  6E6D               	movwf	_f_can_coming_to_ID,c
  3545                           
  3546                           ;sort.c: 243: f_can_coming_to_distribution = 0;
  3547  003D4C  0E00               	movlw	0
  3548  003D4E  6E70               	movwf	_f_can_coming_to_distribution+1,c
  3549  003D50  0E00               	movlw	0
  3550  003D52  6E6F               	movwf	_f_can_coming_to_distribution,c
  3551                           
  3552                           ;sort.c: 244: f_can_distributed = 0;
  3553  003D54  0E00               	movlw	0
  3554  003D56  0101               	movlb	1	; () banked
  3555  003D58  6F2E               	movwf	(_f_can_distributed+1)& (0+255),b
  3556  003D5A  0E00               	movlw	0
  3557  003D5C  6F2D               	movwf	_f_can_distributed& (0+255),b
  3558                           
  3559                           ;sort.c: 247: count_total = 0;
  3560  003D5E  0E00               	movlw	0
  3561  003D60  0100               	movlb	0	; () banked
  3562  003D62  6FFF               	movwf	(_count_total+1)& (0+255),b
  3563  003D64  0E00               	movlw	0
  3564  003D66  6FFE               	movwf	_count_total& (0+255),b
  3565                           
  3566                           ;sort.c: 248: count_pop_no_tab = 0;
  3567  003D68  0E00               	movlw	0
  3568  003D6A  6E62               	movwf	_count_pop_no_tab+1,c
  3569  003D6C  0E00               	movlw	0
  3570  003D6E  6E61               	movwf	_count_pop_no_tab,c
  3571                           
  3572                           ;sort.c: 249: count_pop_w_tab = 0;
  3573  003D70  0E00               	movlw	0
  3574  003D72  6E64               	movwf	_count_pop_w_tab+1,c
  3575  003D74  0E00               	movlw	0
  3576  003D76  6E63               	movwf	_count_pop_w_tab,c
  3577                           
  3578                           ;sort.c: 250: count_can_w_lab = 0;
  3579  003D78  0E00               	movlw	0
  3580  003D7A  6E60               	movwf	_count_can_w_lab+1,c
  3581  003D7C  0E00               	movlw	0
  3582  003D7E  6E5F               	movwf	_count_can_w_lab,c
  3583                           
  3584                           ;sort.c: 251: count_can_no_lab = 0;
  3585  003D80  0E00               	movlw	0
  3586  003D82  6E5E               	movwf	_count_can_no_lab+1,c
  3587  003D84  0E00               	movlw	0
  3588  003D86  6E5D               	movwf	_count_can_no_lab,c
  3589                           
  3590                           ; BSR set to: 0
  3591  003D88  0012               	return		;funcret
  3592  003D8A                     __end_of_initGlobalVars:
  3593                           	opt stack 0
  3594                           tblptru	equ	0xFF8
  3595                           tblptrh	equ	0xFF7
  3596                           tblptrl	equ	0xFF6
  3597                           tablat	equ	0xFF5
  3598                           prodh	equ	0xFF4
  3599                           prodl	equ	0xFF3
  3600                           postinc0	equ	0xFEE
  3601                           wreg	equ	0xFE8
  3602                           postdec1	equ	0xFE5
  3603                           fsr1l	equ	0xFE1
  3604                           indf2	equ	0xFDF
  3605                           postinc2	equ	0xFDE
  3606                           postdec2	equ	0xFDD
  3607                           fsr2h	equ	0xFDA
  3608                           fsr2l	equ	0xFD9
  3609                           status	equ	0xFD8
  3610                           
  3611 ;; *************** function _getIR *****************
  3612 ;; Defined at:
  3613 ;;		line 311 in file "sort.c"
  3614 ;; Parameters:    Size  Location     Type
  3615 ;;		None
  3616 ;; Auto vars:     Size  Location     Type
  3617 ;;		None
  3618 ;; Return value:  Size  Location     Type
  3619 ;;                  1    wreg      void 
  3620 ;; Registers used:
  3621 ;;		wreg, status,2, status,0, cstack
  3622 ;; Tracked objects:
  3623 ;;		On entry : 0/0
  3624 ;;		On exit  : 0/0
  3625 ;;		Unchanged: 0/0
  3626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3629 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3630 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3631 ;;Total ram usage:        2 bytes
  3632 ;; Hardware stack levels used:    1
  3633 ;; Hardware stack levels required when called:    9
  3634 ;; This function calls:
  3635 ;;		_readIR
  3636 ;; This function is called by:
  3637 ;;		_Loading
  3638 ;; This function uses a non-reentrant model
  3639 ;;
  3640                           
  3641                           	psect	text6
  3642  004016                     __ptext6:
  3643                           	opt stack 0
  3644  004016                     _getIR:
  3645                           	opt stack 19
  3646                           
  3647                           ;sort.c: 312: readIR();
  3648                           
  3649                           ; BSR set to: 0
  3650                           ;incstack = 0
  3651  004016  EC85  F020         	call	_readIR	;wreg free
  3652                           
  3653                           ;sort.c: 314: if(IR_signal==1){
  3654  00401A  0100               	movlb	0	; () banked
  3655  00401C  05DA               	decf	_IR_signal& (0+255),w,b
  3656  00401E  0100               	movlb	0	; () banked
  3657  004020  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3658  004022  A4D8               	btfss	status,2,c
  3659  004024  0012               	return	
  3660                           
  3661                           ; BSR set to: 0
  3662                           ;sort.c: 315: _delay((unsigned long)((500)*(32000000/4000.0)));
  3663  004026  0E15               	movlw	21
  3664  004028  0100               	movlb	0	; () banked
  3665  00402A  6F87               	movwf	(??_getIR+1)& (0+255),b
  3666  00402C  0E4B               	movlw	75
  3667  00402E  0100               	movlb	0	; () banked
  3668  004030  6F86               	movwf	??_getIR& (0+255),b
  3669  004032  0EBE               	movlw	190
  3670  004034                     u7077:
  3671  004034  2EE8               	decfsz	wreg,f,c
  3672  004036  D7FE               	bra	u7077
  3673  004038  2F86               	decfsz	??_getIR& (0+255),f,b
  3674  00403A  D7FC               	bra	u7077
  3675  00403C  2F87               	decfsz	(??_getIR+1)& (0+255),f,b
  3676  00403E  D7FA               	bra	u7077
  3677  004040  F000               	nop	
  3678                           
  3679                           ;sort.c: 316: readIR();
  3680  004042  EC85  F020         	call	_readIR	;wreg free
  3681                           
  3682                           ;sort.c: 317: if(IR_signal==1){
  3683  004046  0100               	movlb	0	; () banked
  3684  004048  05DA               	decf	_IR_signal& (0+255),w,b
  3685  00404A  0100               	movlb	0	; () banked
  3686  00404C  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3687  00404E  A4D8               	btfss	status,2,c
  3688  004050  D006               	goto	l6085
  3689                           
  3690                           ; BSR set to: 0
  3691                           ;sort.c: 318: f_loadingNewCan = 1;
  3692  004052  0E00               	movlw	0
  3693  004054  0100               	movlb	0	; () banked
  3694  004056  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3695  004058  0E01               	movlw	1
  3696  00405A  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3697                           
  3698                           ;sort.c: 319: }
  3699  00405C  0012               	return	
  3700  00405E                     l6085:
  3701                           
  3702                           ; BSR set to: 0
  3703                           ;sort.c: 320: else{
  3704                           ;sort.c: 321: f_loadingNewCan = 0;
  3705  00405E  0E00               	movlw	0
  3706  004060  0100               	movlb	0	; () banked
  3707  004062  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3708  004064  0E00               	movlw	0
  3709  004066  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3710                           
  3711                           ; BSR set to: 0
  3712  004068  0012               	return	
  3713  00406A                     __end_of_getIR:
  3714                           	opt stack 0
  3715                           tblptru	equ	0xFF8
  3716                           tblptrh	equ	0xFF7
  3717                           tblptrl	equ	0xFF6
  3718                           tablat	equ	0xFF5
  3719                           prodh	equ	0xFF4
  3720                           prodl	equ	0xFF3
  3721                           postinc0	equ	0xFEE
  3722                           wreg	equ	0xFE8
  3723                           postdec1	equ	0xFE5
  3724                           fsr1l	equ	0xFE1
  3725                           indf2	equ	0xFDF
  3726                           postinc2	equ	0xFDE
  3727                           postdec2	equ	0xFDD
  3728                           fsr2h	equ	0xFDA
  3729                           fsr2l	equ	0xFD9
  3730                           status	equ	0xFD8
  3731                           
  3732 ;; *************** function _readIR *****************
  3733 ;; Defined at:
  3734 ;;		line 23 in file "ADCFunctionality.c"
  3735 ;; Parameters:    Size  Location     Type
  3736 ;;		None
  3737 ;; Auto vars:     Size  Location     Type
  3738 ;;  res             2    4[BANK0 ] int 
  3739 ;; Return value:  Size  Location     Type
  3740 ;;                  1    wreg      void 
  3741 ;; Registers used:
  3742 ;;		wreg, status,2, status,0, cstack
  3743 ;; Tracked objects:
  3744 ;;		On entry : 0/0
  3745 ;;		On exit  : 0/0
  3746 ;;		Unchanged: 0/0
  3747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3749 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3750 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3751 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3752 ;;Total ram usage:        4 bytes
  3753 ;; Hardware stack levels used:    1
  3754 ;; Hardware stack levels required when called:    8
  3755 ;; This function calls:
  3756 ;;		_readADC
  3757 ;; This function is called by:
  3758 ;;		_getIR
  3759 ;; This function uses a non-reentrant model
  3760 ;;
  3761                           
  3762                           	psect	text7
  3763  00410A                     __ptext7:
  3764                           	opt stack 0
  3765  00410A                     _readIR:
  3766                           	opt stack 19
  3767                           
  3768                           ;ADCFunctionality.c: 24: readADC(0);
  3769                           
  3770                           ; BSR set to: 0
  3771                           ;incstack = 0
  3772  00410A  0E00               	movlw	0
  3773  00410C  ECE8  F022         	call	_readADC
  3774                           
  3775                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  3776  004110  50C3               	movf	4035,w,c	;volatile
  3777  004112  CFC4 F082          	movff	4036,??_readIR	;volatile
  3778  004116  0100               	movlb	0	; () banked
  3779  004118  6B83               	clrf	(??_readIR+1)& (0+255),b
  3780  00411A  C082  F083         	movff	??_readIR,??_readIR+1
  3781  00411E  0100               	movlb	0	; () banked
  3782  004120  6B82               	clrf	??_readIR& (0+255),b
  3783  004122  0100               	movlb	0	; () banked
  3784  004124  1182               	iorwf	??_readIR& (0+255),w,b
  3785  004126  0100               	movlb	0	; () banked
  3786  004128  6F84               	movwf	readIR@res& (0+255),b
  3787  00412A  0100               	movlb	0	; () banked
  3788  00412C  5183               	movf	(??_readIR+1)& (0+255),w,b
  3789  00412E  0100               	movlb	0	; () banked
  3790  004130  6F85               	movwf	(readIR@res+1)& (0+255),b
  3791                           
  3792                           ; BSR set to: 0
  3793                           ;ADCFunctionality.c: 26: IR_signal = (res > 1000) ? 1 : 0;
  3794  004132  0100               	movlb	0	; () banked
  3795  004134  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  3796  004136  D00A               	goto	u3770
  3797  004138  0EE9               	movlw	233
  3798  00413A  0100               	movlb	0	; () banked
  3799  00413C  5D84               	subwf	readIR@res& (0+255),w,b
  3800  00413E  0E03               	movlw	3
  3801  004140  0100               	movlb	0	; () banked
  3802  004142  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  3803  004144  A0D8               	btfss	status,0,c
  3804  004146  D002               	goto	u3770
  3805  004148  0E01               	movlw	1
  3806  00414A  D001               	goto	u3780
  3807  00414C                     u3770:
  3808  00414C  0E00               	movlw	0
  3809  00414E                     u3780:
  3810  00414E  0100               	movlb	0	; () banked
  3811  004150  6FDA               	movwf	_IR_signal& (0+255),b
  3812  004152  6BDB               	clrf	(_IR_signal+1)& (0+255),b
  3813                           
  3814                           ; BSR set to: 0
  3815  004154  0012               	return		;funcret
  3816  004156                     __end_of_readIR:
  3817                           	opt stack 0
  3818                           tblptru	equ	0xFF8
  3819                           tblptrh	equ	0xFF7
  3820                           tblptrl	equ	0xFF6
  3821                           tablat	equ	0xFF5
  3822                           prodh	equ	0xFF4
  3823                           prodl	equ	0xFF3
  3824                           postinc0	equ	0xFEE
  3825                           wreg	equ	0xFE8
  3826                           postdec1	equ	0xFE5
  3827                           fsr1l	equ	0xFE1
  3828                           indf2	equ	0xFDF
  3829                           postinc2	equ	0xFDE
  3830                           postdec2	equ	0xFDD
  3831                           fsr2h	equ	0xFDA
  3832                           fsr2l	equ	0xFD9
  3833                           status	equ	0xFD8
  3834                           
  3835 ;; *************** function _delay_ms *****************
  3836 ;; Defined at:
  3837 ;;		line 346 in file "sort.c"
  3838 ;; Parameters:    Size  Location     Type
  3839 ;;  milliseconds    1    wreg     unsigned char 
  3840 ;; Auto vars:     Size  Location     Type
  3841 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  3842 ;; Return value:  Size  Location     Type
  3843 ;;                  1    wreg      void 
  3844 ;; Registers used:
  3845 ;;		wreg, status,2, status,0, cstack
  3846 ;; Tracked objects:
  3847 ;;		On entry : 0/0
  3848 ;;		On exit  : 0/0
  3849 ;;		Unchanged: 0/0
  3850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3852 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3853 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3854 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3855 ;;Total ram usage:        2 bytes
  3856 ;; Hardware stack levels used:    1
  3857 ;; Hardware stack levels required when called:    7
  3858 ;; This function calls:
  3859 ;;		Nothing
  3860 ;; This function is called by:
  3861 ;;		_Loading
  3862 ;; This function uses a non-reentrant model
  3863 ;;
  3864                           
  3865                           	psect	text8
  3866  004626                     __ptext8:
  3867                           	opt stack 0
  3868  004626                     _delay_ms:
  3869                           	opt stack 21
  3870                           
  3871                           ; BSR set to: 0
  3872                           ;incstack = 0
  3873                           ;delay_ms@milliseconds stored from wreg
  3874  004626  0100               	movlb	0	; () banked
  3875  004628  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  3876                           
  3877                           ;sort.c: 347: while(milliseconds > 0)
  3878  00462A  D00B               	goto	l6057
  3879  00462C                     l6053:
  3880                           
  3881                           ;sort.c: 348: {
  3882                           ;sort.c: 349: milliseconds--;
  3883  00462C  0100               	movlb	0	; () banked
  3884  00462E  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  3885                           
  3886                           ; BSR set to: 0
  3887                           ;sort.c: 350: _delay((unsigned long)((990)*(32000000/4000000.0)));
  3888  004630  0E0B               	movlw	11
  3889  004632  0100               	movlb	0	; () banked
  3890  004634  6F80               	movwf	??_delay_ms& (0+255),b
  3891  004636  0E47               	movlw	71
  3892  004638                     u7087:
  3893  004638  2EE8               	decfsz	wreg,f,c
  3894  00463A  D7FE               	bra	u7087
  3895  00463C  2F80               	decfsz	??_delay_ms& (0+255),f,b
  3896  00463E  D7FC               	bra	u7087
  3897  004640  D000               	nop2	
  3898  004642                     l6057:
  3899  004642  0100               	movlb	0	; () banked
  3900  004644  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  3901  004646  0100               	movlb	0	; () banked
  3902  004648  B4D8               	btfsc	status,2,c
  3903  00464A  0012               	return	
  3904  00464C  D7EF               	goto	l6053
  3905  00464E                     __end_of_delay_ms:
  3906                           	opt stack 0
  3907                           tblptru	equ	0xFF8
  3908                           tblptrh	equ	0xFF7
  3909                           tblptrl	equ	0xFF6
  3910                           tablat	equ	0xFF5
  3911                           prodh	equ	0xFF4
  3912                           prodl	equ	0xFF3
  3913                           postinc0	equ	0xFEE
  3914                           wreg	equ	0xFE8
  3915                           postdec1	equ	0xFE5
  3916                           fsr1l	equ	0xFE1
  3917                           indf2	equ	0xFDF
  3918                           postinc2	equ	0xFDE
  3919                           postdec2	equ	0xFDD
  3920                           fsr2h	equ	0xFDA
  3921                           fsr2l	equ	0xFD9
  3922                           status	equ	0xFD8
  3923                           
  3924 ;; *************** function _ID *****************
  3925 ;; Defined at:
  3926 ;;		line 125 in file "sort.c"
  3927 ;; Parameters:    Size  Location     Type
  3928 ;;		None
  3929 ;; Auto vars:     Size  Location     Type
  3930 ;;  i               2   10[BANK0 ] int 
  3931 ;;  sensor_outpu    6   12[BANK0 ] int [3]
  3932 ;; Return value:  Size  Location     Type
  3933 ;;                  1    wreg      void 
  3934 ;; Registers used:
  3935 ;;		wreg, status,2, status,0, cstack
  3936 ;; Tracked objects:
  3937 ;;		On entry : 0/0
  3938 ;;		On exit  : 0/0
  3939 ;;		Unchanged: 0/0
  3940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3942 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3943 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3944 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3945 ;;Total ram usage:       10 bytes
  3946 ;; Hardware stack levels used:    1
  3947 ;; Hardware stack levels required when called:   10
  3948 ;; This function calls:
  3949 ;;		_getMAG
  3950 ;; This function is called by:
  3951 ;;		_sort
  3952 ;; This function uses a non-reentrant model
  3953 ;;
  3954                           
  3955                           	psect	text9
  3956  002DAE                     __ptext9:
  3957                           	opt stack 0
  3958  002DAE                     _ID:
  3959                           	opt stack 19
  3960                           
  3961                           ;sort.c: 126: if(f_can_coming_to_ID){
  3962                           
  3963                           ; BSR set to: 0
  3964                           ;incstack = 0
  3965  002DAE  506D               	movf	_f_can_coming_to_ID,w,c
  3966  002DB0  106E               	iorwf	_f_can_coming_to_ID+1,w,c
  3967  002DB2  B4D8               	btfsc	status,2,c
  3968  002DB4  0012               	return	
  3969                           
  3970                           ;sort.c: 128: _delay((unsigned long)((750)*(32000000/4000.0)));
  3971  002DB6  0E1F               	movlw	31
  3972  002DB8  0100               	movlb	0	; () banked
  3973  002DBA  6F89               	movwf	(??_ID+1)& (0+255),b
  3974  002DBC  0E71               	movlw	113
  3975  002DBE  0100               	movlb	0	; () banked
  3976  002DC0  6F88               	movwf	??_ID& (0+255),b
  3977  002DC2  0E1E               	movlw	30
  3978  002DC4                     u7097:
  3979  002DC4  2EE8               	decfsz	wreg,f,c
  3980  002DC6  D7FE               	bra	u7097
  3981  002DC8  2F88               	decfsz	??_ID& (0+255),f,b
  3982  002DCA  D7FC               	bra	u7097
  3983  002DCC  2F89               	decfsz	(??_ID+1)& (0+255),f,b
  3984  002DCE  D7FA               	bra	u7097
  3985  002DD0  F000               	nop	
  3986                           
  3987                           ;sort.c: 133: int sensor_outputs[3];
  3988                           ;sort.c: 137: sensor_outputs[0] = PORTAbits.RA2;
  3989  002DD2  A480               	btfss	3968,2,c	;volatile
  3990  002DD4  D004               	goto	u4890
  3991  002DD6  0100               	movlb	0	; () banked
  3992  002DD8  6B88               	clrf	??_ID& (0+255),b
  3993  002DDA  2B88               	incf	??_ID& (0+255),f,b
  3994  002DDC  D002               	goto	u4898
  3995  002DDE                     u4890:
  3996  002DDE  0100               	movlb	0	; () banked
  3997  002DE0  6B88               	clrf	??_ID& (0+255),b
  3998  002DE2                     u4898:
  3999  002DE2  0100               	movlb	0	; () banked
  4000  002DE4  5188               	movf	??_ID& (0+255),w,b
  4001  002DE6  0100               	movlb	0	; () banked
  4002  002DE8  6F8C               	movwf	ID@sensor_outputs& (0+255),b
  4003  002DEA  6B8D               	clrf	(ID@sensor_outputs+1)& (0+255),b
  4004                           
  4005                           ; BSR set to: 0
  4006                           ;sort.c: 139: if(!sensor_outputs[0]){
  4007  002DEC  0100               	movlb	0	; () banked
  4008  002DEE  518C               	movf	ID@sensor_outputs& (0+255),w,b
  4009  002DF0  0100               	movlb	0	; () banked
  4010  002DF2  118D               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  4011  002DF4  A4D8               	btfss	status,2,c
  4012  002DF6  D029               	goto	l6451
  4013                           
  4014                           ; BSR set to: 0
  4015                           ;sort.c: 140: getMAG();
  4016  002DF8  EC83  F021         	call	_getMAG	;wreg free
  4017                           
  4018                           ;sort.c: 141: sensor_outputs[1] = MAG_signal;
  4019  002DFC  C0DC  F08E         	movff	_MAG_signal,ID@sensor_outputs+2
  4020  002E00  C0DD  F08F         	movff	_MAG_signal+1,ID@sensor_outputs+3
  4021                           
  4022                           ;sort.c: 142: if(!sensor_outputs[1]){
  4023  002E04  0100               	movlb	0	; () banked
  4024  002E06  518E               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  4025  002E08  0100               	movlb	0	; () banked
  4026  002E0A  118F               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  4027  002E0C  A4D8               	btfss	status,2,c
  4028  002E0E  D01D               	goto	l6451
  4029                           
  4030                           ; BSR set to: 0
  4031                           ;sort.c: 143: LATAbits.LATA3 = 1;
  4032  002E10  8689               	bsf	3977,3,c	;volatile
  4033                           
  4034                           ; BSR set to: 0
  4035                           ;sort.c: 145: _delay((unsigned long)((600)*(32000000/4000.0)));
  4036  002E12  0E19               	movlw	25
  4037  002E14  0100               	movlb	0	; () banked
  4038  002E16  6F89               	movwf	(??_ID+1)& (0+255),b
  4039  002E18  0E5A               	movlw	90
  4040  002E1A  0100               	movlb	0	; () banked
  4041  002E1C  6F88               	movwf	??_ID& (0+255),b
  4042  002E1E  0EB1               	movlw	177
  4043  002E20                     u7107:
  4044  002E20  2EE8               	decfsz	wreg,f,c
  4045  002E22  D7FE               	bra	u7107
  4046  002E24  2F88               	decfsz	??_ID& (0+255),f,b
  4047  002E26  D7FC               	bra	u7107
  4048  002E28  2F89               	decfsz	(??_ID+1)& (0+255),f,b
  4049  002E2A  D7FA               	bra	u7107
  4050  002E2C  D000               	nop2	
  4051                           
  4052                           ;sort.c: 146: sensor_outputs[2] = PORTAbits.RA2;
  4053  002E2E  A480               	btfss	3968,2,c	;volatile
  4054  002E30  D004               	goto	u4920
  4055  002E32  0100               	movlb	0	; () banked
  4056  002E34  6B88               	clrf	??_ID& (0+255),b
  4057  002E36  2B88               	incf	??_ID& (0+255),f,b
  4058  002E38  D002               	goto	u4928
  4059  002E3A                     u4920:
  4060  002E3A  0100               	movlb	0	; () banked
  4061  002E3C  6B88               	clrf	??_ID& (0+255),b
  4062  002E3E                     u4928:
  4063  002E3E  0100               	movlb	0	; () banked
  4064  002E40  5188               	movf	??_ID& (0+255),w,b
  4065  002E42  0100               	movlb	0	; () banked
  4066  002E44  6F90               	movwf	(ID@sensor_outputs+4)& (0+255),b
  4067  002E46  6B91               	clrf	(ID@sensor_outputs+5)& (0+255),b
  4068                           
  4069                           ; BSR set to: 0
  4070                           ;sort.c: 147: LATAbits.LATA3 = 0;
  4071  002E48  9689               	bcf	3977,3,c	;volatile
  4072  002E4A                     l6451:
  4073                           
  4074                           ; BSR set to: 0
  4075                           ;sort.c: 148: }
  4076                           ;sort.c: 149: }
  4077                           ;sort.c: 157: if(!sensor_outputs[0]){
  4078  002E4A  0100               	movlb	0	; () banked
  4079  002E4C  518C               	movf	ID@sensor_outputs& (0+255),w,b
  4080  002E4E  0100               	movlb	0	; () banked
  4081  002E50  118D               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  4082  002E52  A4D8               	btfss	status,2,c
  4083  002E54  D021               	goto	l6469
  4084                           
  4085                           ; BSR set to: 0
  4086                           ;sort.c: 158: if(!sensor_outputs[1]){
  4087  002E56  0100               	movlb	0	; () banked
  4088  002E58  518E               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  4089  002E5A  0100               	movlb	0	; () banked
  4090  002E5C  118F               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  4091  002E5E  A4D8               	btfss	status,2,c
  4092  002E60  D014               	goto	l6465
  4093                           
  4094                           ; BSR set to: 0
  4095                           ;sort.c: 159: if(!sensor_outputs[2]){
  4096  002E62  0100               	movlb	0	; () banked
  4097  002E64  5190               	movf	(ID@sensor_outputs+4)& (0+255),w,b
  4098  002E66  0100               	movlb	0	; () banked
  4099  002E68  1191               	iorwf	(ID@sensor_outputs+5)& (0+255),w,b
  4100  002E6A  A4D8               	btfss	status,2,c
  4101  002E6C  D007               	goto	l6461
  4102                           
  4103                           ; BSR set to: 0
  4104                           ;sort.c: 160: count_pop_no_tab++;
  4105  002E6E  4A61               	infsnz	_count_pop_no_tab,f,c
  4106  002E70  2A62               	incf	_count_pop_no_tab+1,f,c
  4107                           
  4108                           ; BSR set to: 0
  4109                           ;sort.c: 161: cur_can = 0;
  4110  002E72  0E00               	movlw	0
  4111  002E74  0101               	movlb	1	; () banked
  4112  002E76  6F2C               	movwf	(_cur_can+1)& (0+255),b
  4113  002E78  0E00               	movlw	0
  4114  002E7A  D014               	goto	L4
  4115  002E7C                     l6461:
  4116                           
  4117                           ;sort.c: 163: else{
  4118                           ;sort.c: 164: count_pop_w_tab++;
  4119  002E7C  4A63               	infsnz	_count_pop_w_tab,f,c
  4120  002E7E  2A64               	incf	_count_pop_w_tab+1,f,c
  4121                           
  4122                           ;sort.c: 165: cur_can = 1;
  4123  002E80  0E00               	movlw	0
  4124  002E82  0101               	movlb	1	; () banked
  4125  002E84  6F2C               	movwf	(_cur_can+1)& (0+255),b
  4126  002E86  0E01               	movlw	1
  4127  002E88  D00D               	goto	L4
  4128  002E8A                     l6465:
  4129                           
  4130                           ;sort.c: 168: else{
  4131                           ;sort.c: 169: count_can_w_lab++;
  4132  002E8A  4A5F               	infsnz	_count_can_w_lab,f,c
  4133  002E8C  2A60               	incf	_count_can_w_lab+1,f,c
  4134                           
  4135                           ;sort.c: 170: cur_can = 2;
  4136  002E8E  0E00               	movlw	0
  4137  002E90  0101               	movlb	1	; () banked
  4138  002E92  6F2C               	movwf	(_cur_can+1)& (0+255),b
  4139  002E94  0E02               	movlw	2
  4140  002E96  D006               	goto	L4
  4141  002E98                     l6469:
  4142                           
  4143                           ;sort.c: 173: else{
  4144                           ;sort.c: 174: count_can_no_lab++;
  4145  002E98  4A5D               	infsnz	_count_can_no_lab,f,c
  4146  002E9A  2A5E               	incf	_count_can_no_lab+1,f,c
  4147                           
  4148                           ;sort.c: 175: cur_can = 3;
  4149  002E9C  0E00               	movlw	0
  4150  002E9E  0101               	movlb	1	; () banked
  4151  002EA0  6F2C               	movwf	(_cur_can+1)& (0+255),b
  4152  002EA2  0E03               	movlw	3
  4153  002EA4                     L4:
  4154  002EA4  6F2B               	movwf	_cur_can& (0+255),b
  4155                           
  4156                           ; BSR set to: 1
  4157                           ;sort.c: 176: }
  4158                           ;sort.c: 180: for(int i=0;i<10000;i++)
  4159                           
  4160                           ; BSR set to: 1
  4161  002EA6  0E00               	movlw	0
  4162  002EA8  0100               	movlb	0	; () banked
  4163  002EAA  6F8B               	movwf	(ID@i+1)& (0+255),b
  4164  002EAC  0E00               	movlw	0
  4165  002EAE  6F8A               	movwf	ID@i& (0+255),b
  4166  002EB0                     l6475:
  4167                           
  4168                           ; BSR set to: 0
  4169  002EB0  0100               	movlb	0	; () banked
  4170  002EB2  BF8B               	btfsc	(ID@i+1)& (0+255),7,b
  4171  002EB4  D008               	goto	l750
  4172  002EB6  0E10               	movlw	16
  4173  002EB8  0100               	movlb	0	; () banked
  4174  002EBA  5D8A               	subwf	ID@i& (0+255),w,b
  4175  002EBC  0E27               	movlw	39
  4176  002EBE  0100               	movlb	0	; () banked
  4177  002EC0  598B               	subwfb	(ID@i+1)& (0+255),w,b
  4178  002EC2  B0D8               	btfsc	status,0,c
  4179  002EC4  D00D               	goto	l751
  4180  002EC6                     l750:
  4181                           
  4182                           ; BSR set to: 0
  4183                           ;sort.c: 181: {
  4184                           ;sort.c: 182: LATCbits.LATC0 = 1;
  4185  002EC6  808B               	bsf	3979,0,c	;volatile
  4186                           
  4187                           ; BSR set to: 0
  4188                           ;sort.c: 183: _delay((unsigned long)((10)*(32000000/4000000.0)));
  4189  002EC8  0E1A               	movlw	26
  4190  002ECA                     u7117:
  4191  002ECA  2EE8               	decfsz	wreg,f,c
  4192  002ECC  D7FE               	bra	u7117
  4193  002ECE  D000               	nop2	
  4194                           
  4195                           ;sort.c: 184: LATCbits.LATC0 = 0;
  4196  002ED0  908B               	bcf	3979,0,c	;volatile
  4197                           
  4198                           ;sort.c: 185: _delay((unsigned long)((90)*(32000000/4000000.0)));
  4199  002ED2  0EF0               	movlw	240
  4200  002ED4                     u7127:
  4201  002ED4  2EE8               	decfsz	wreg,f,c
  4202  002ED6  D7FE               	bra	u7127
  4203  002ED8  0100               	movlb	0	; () banked
  4204  002EDA  4B8A               	infsnz	ID@i& (0+255),f,b
  4205  002EDC  2B8B               	incf	(ID@i+1)& (0+255),f,b
  4206  002EDE  D7E8               	goto	l6475
  4207  002EE0                     l751:
  4208                           
  4209                           ; BSR set to: 0
  4210                           ;sort.c: 186: }
  4211                           ;sort.c: 187: LATCbits.LATC0 = 0;
  4212  002EE0  908B               	bcf	3979,0,c	;volatile
  4213                           
  4214                           ; BSR set to: 0
  4215                           ;sort.c: 189: f_can_coming_to_distribution = 1;
  4216  002EE2  0E00               	movlw	0
  4217  002EE4  6E70               	movwf	_f_can_coming_to_distribution+1,c
  4218  002EE6  0E01               	movlw	1
  4219  002EE8  6E6F               	movwf	_f_can_coming_to_distribution,c
  4220                           
  4221                           ; BSR set to: 0
  4222                           ;sort.c: 190: _delay((unsigned long)((1500)*(32000000/4000.0)));
  4223  002EEA  0E3D               	movlw	61
  4224  002EEC  0100               	movlb	0	; () banked
  4225  002EEE  6F89               	movwf	(??_ID+1)& (0+255),b
  4226  002EF0  0EE1               	movlw	225
  4227  002EF2  0100               	movlb	0	; () banked
  4228  002EF4  6F88               	movwf	??_ID& (0+255),b
  4229  002EF6  0E3F               	movlw	63
  4230  002EF8                     u7137:
  4231  002EF8  2EE8               	decfsz	wreg,f,c
  4232  002EFA  D7FE               	bra	u7137
  4233  002EFC  2F88               	decfsz	??_ID& (0+255),f,b
  4234  002EFE  D7FC               	bra	u7137
  4235  002F00  2F89               	decfsz	(??_ID+1)& (0+255),f,b
  4236  002F02  D7FA               	bra	u7137
  4237  002F04  D000               	nop2	
  4238                           
  4239                           ;sort.c: 191: LATCbits.LATC0 = 1;
  4240  002F06  808B               	bsf	3979,0,c	;volatile
  4241                           
  4242                           ;sort.c: 193: f_can_coming_to_ID = 0;
  4243  002F08  0E00               	movlw	0
  4244  002F0A  6E6E               	movwf	_f_can_coming_to_ID+1,c
  4245  002F0C  0E00               	movlw	0
  4246  002F0E  6E6D               	movwf	_f_can_coming_to_ID,c
  4247  002F10  0012               	return	
  4248  002F12                     __end_of_ID:
  4249                           	opt stack 0
  4250                           tblptru	equ	0xFF8
  4251                           tblptrh	equ	0xFF7
  4252                           tblptrl	equ	0xFF6
  4253                           tablat	equ	0xFF5
  4254                           prodh	equ	0xFF4
  4255                           prodl	equ	0xFF3
  4256                           postinc0	equ	0xFEE
  4257                           wreg	equ	0xFE8
  4258                           postdec1	equ	0xFE5
  4259                           fsr1l	equ	0xFE1
  4260                           indf2	equ	0xFDF
  4261                           postinc2	equ	0xFDE
  4262                           postdec2	equ	0xFDD
  4263                           fsr2h	equ	0xFDA
  4264                           fsr2l	equ	0xFD9
  4265                           status	equ	0xFD8
  4266                           
  4267 ;; *************** function _getMAG *****************
  4268 ;; Defined at:
  4269 ;;		line 325 in file "sort.c"
  4270 ;; Parameters:    Size  Location     Type
  4271 ;;		None
  4272 ;; Auto vars:     Size  Location     Type
  4273 ;;		None
  4274 ;; Return value:  Size  Location     Type
  4275 ;;                  1    wreg      void 
  4276 ;; Registers used:
  4277 ;;		wreg, status,2, status,0, cstack
  4278 ;; Tracked objects:
  4279 ;;		On entry : 0/0
  4280 ;;		On exit  : 0/0
  4281 ;;		Unchanged: 0/0
  4282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4285 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4286 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4287 ;;Total ram usage:        2 bytes
  4288 ;; Hardware stack levels used:    1
  4289 ;; Hardware stack levels required when called:    9
  4290 ;; This function calls:
  4291 ;;		_readMAG
  4292 ;; This function is called by:
  4293 ;;		_ID
  4294 ;; This function uses a non-reentrant model
  4295 ;;
  4296                           
  4297                           	psect	text10
  4298  004306                     __ptext10:
  4299                           	opt stack 0
  4300  004306                     _getMAG:
  4301                           	opt stack 19
  4302                           
  4303                           ;sort.c: 326: readMAG();
  4304                           
  4305                           ;incstack = 0
  4306  004306  ECAB  F020         	call	_readMAG	;wreg free
  4307                           
  4308                           ;sort.c: 328: if(MAG_signal==1){
  4309  00430A  0100               	movlb	0	; () banked
  4310  00430C  05DC               	decf	_MAG_signal& (0+255),w,b
  4311  00430E  0100               	movlb	0	; () banked
  4312  004310  11DD               	iorwf	(_MAG_signal+1)& (0+255),w,b
  4313  004312  A4D8               	btfss	status,2,c
  4314  004314  0012               	return	
  4315                           
  4316                           ; BSR set to: 0
  4317                           ;sort.c: 329: _delay((unsigned long)((500)*(32000000/4000.0)));
  4318  004316  0E15               	movlw	21
  4319  004318  0100               	movlb	0	; () banked
  4320  00431A  6F87               	movwf	(??_getMAG+1)& (0+255),b
  4321  00431C  0E4B               	movlw	75
  4322  00431E  0100               	movlb	0	; () banked
  4323  004320  6F86               	movwf	??_getMAG& (0+255),b
  4324  004322  0EBE               	movlw	190
  4325  004324                     u7147:
  4326  004324  2EE8               	decfsz	wreg,f,c
  4327  004326  D7FE               	bra	u7147
  4328  004328  2F86               	decfsz	??_getMAG& (0+255),f,b
  4329  00432A  D7FC               	bra	u7147
  4330  00432C  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  4331  00432E  D7FA               	bra	u7147
  4332  004330  F000               	nop	
  4333                           
  4334                           ;sort.c: 330: readMAG();
  4335  004332  ECAB  F020         	call	_readMAG	;wreg free
  4336  004336  0012               	return	
  4337  004338                     __end_of_getMAG:
  4338                           	opt stack 0
  4339                           tblptru	equ	0xFF8
  4340                           tblptrh	equ	0xFF7
  4341                           tblptrl	equ	0xFF6
  4342                           tablat	equ	0xFF5
  4343                           prodh	equ	0xFF4
  4344                           prodl	equ	0xFF3
  4345                           postinc0	equ	0xFEE
  4346                           wreg	equ	0xFE8
  4347                           postdec1	equ	0xFE5
  4348                           fsr1l	equ	0xFE1
  4349                           indf2	equ	0xFDF
  4350                           postinc2	equ	0xFDE
  4351                           postdec2	equ	0xFDD
  4352                           fsr2h	equ	0xFDA
  4353                           fsr2l	equ	0xFD9
  4354                           status	equ	0xFD8
  4355                           
  4356 ;; *************** function _Distribution *****************
  4357 ;; Defined at:
  4358 ;;		line 196 in file "sort.c"
  4359 ;; Parameters:    Size  Location     Type
  4360 ;;		None
  4361 ;; Auto vars:     Size  Location     Type
  4362 ;;		None
  4363 ;; Return value:  Size  Location     Type
  4364 ;;                  1    wreg      void 
  4365 ;; Registers used:
  4366 ;;		wreg, status,2, status,0, cstack
  4367 ;; Tracked objects:
  4368 ;;		On entry : 0/0
  4369 ;;		On exit  : 0/0
  4370 ;;		Unchanged: 0/0
  4371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4374 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4375 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4376 ;;Total ram usage:        2 bytes
  4377 ;; Hardware stack levels used:    1
  4378 ;; Hardware stack levels required when called:    8
  4379 ;; This function calls:
  4380 ;;		_updateServoPosition
  4381 ;; This function is called by:
  4382 ;;		_sort
  4383 ;; This function uses a non-reentrant model
  4384 ;;
  4385                           
  4386                           	psect	text11
  4387  002F12                     __ptext11:
  4388                           	opt stack 0
  4389  002F12                     _Distribution:
  4390                           	opt stack 21
  4391                           
  4392                           ;sort.c: 197: if(f_can_coming_to_distribution){
  4393                           
  4394                           ;incstack = 0
  4395  002F12  506F               	movf	_f_can_coming_to_distribution,w,c
  4396  002F14  1070               	iorwf	_f_can_coming_to_distribution+1,w,c
  4397  002F16  B4D8               	btfsc	status,2,c
  4398  002F18  0012               	return	
  4399  002F1A  D034               	goto	l6507
  4400  002F1C                     l6497:
  4401                           
  4402                           ;sort.c: 202: updateServoPosition(500, 1);
  4403  002F1C  0E01               	movlw	1
  4404  002F1E  0100               	movlb	0	; () banked
  4405  002F20  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4406  002F22  0EF4               	movlw	244
  4407  002F24  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4408  002F26  0E00               	movlw	0
  4409  002F28  0100               	movlb	0	; () banked
  4410  002F2A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4411  002F2C  0E01               	movlw	1
  4412  002F2E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4413  002F30  EC1D  F01E         	call	_updateServoPosition	;wreg free
  4414                           
  4415                           ;sort.c: 203: break;
  4416  002F34  D03E               	goto	l6509
  4417  002F36                     l6499:
  4418                           
  4419                           ;sort.c: 205: updateServoPosition(750, 1);
  4420  002F36  0E02               	movlw	2
  4421  002F38  0100               	movlb	0	; () banked
  4422  002F3A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4423  002F3C  0EEE               	movlw	238
  4424  002F3E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4425  002F40  0E00               	movlw	0
  4426  002F42  0100               	movlb	0	; () banked
  4427  002F44  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4428  002F46  0E01               	movlw	1
  4429  002F48  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4430  002F4A  EC1D  F01E         	call	_updateServoPosition	;wreg free
  4431                           
  4432                           ;sort.c: 206: break;
  4433  002F4E  D031               	goto	l6509
  4434  002F50                     l6501:
  4435                           
  4436                           ;sort.c: 208: updateServoPosition(1700, 1);
  4437  002F50  0E06               	movlw	6
  4438  002F52  0100               	movlb	0	; () banked
  4439  002F54  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4440  002F56  0EA4               	movlw	164
  4441  002F58  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4442  002F5A  0E00               	movlw	0
  4443  002F5C  0100               	movlb	0	; () banked
  4444  002F5E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4445  002F60  0E01               	movlw	1
  4446  002F62  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4447  002F64  EC1D  F01E         	call	_updateServoPosition	;wreg free
  4448                           
  4449                           ;sort.c: 209: break;
  4450  002F68  D024               	goto	l6509
  4451  002F6A                     l6503:
  4452                           
  4453                           ;sort.c: 211: updateServoPosition(2100, 1);
  4454  002F6A  0E08               	movlw	8
  4455  002F6C  0100               	movlb	0	; () banked
  4456  002F6E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4457  002F70  0E34               	movlw	52
  4458  002F72  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4459  002F74  0E00               	movlw	0
  4460  002F76  0100               	movlb	0	; () banked
  4461  002F78  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4462  002F7A  0E01               	movlw	1
  4463  002F7C  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4464  002F7E  EC1D  F01E         	call	_updateServoPosition	;wreg free
  4465                           
  4466                           ;sort.c: 215: }
  4467                           
  4468                           ;sort.c: 214: break;
  4469                           
  4470                           ;sort.c: 213: default:
  4471                           
  4472                           ;sort.c: 212: break;
  4473  002F82  D017               	goto	l6509
  4474  002F84                     l6507:
  4475  002F84  C12B  F088         	movff	_cur_can,??_Distribution
  4476  002F88  C12C  F089         	movff	_cur_can+1,??_Distribution+1
  4477                           
  4478                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4479                           ; Switch size 1, requested type "space"
  4480                           ; Number of cases is 1, Range of values is 0 to 0
  4481                           ; switch strategies available:
  4482                           ; Name         Instructions Cycles
  4483                           ; simple_byte            4     3 (average)
  4484                           ;	Chosen strategy is simple_byte
  4485  002F8C  0100               	movlb	0	; () banked
  4486  002F8E  5189               	movf	(??_Distribution+1)& (0+255),w,b
  4487  002F90  0A00               	xorlw	0	; case 0
  4488  002F92  A4D8               	btfss	status,2,c
  4489  002F94  D00E               	goto	l6509
  4490                           
  4491                           ; BSR set to: 0
  4492                           ; Switch size 1, requested type "space"
  4493                           ; Number of cases is 4, Range of values is 0 to 3
  4494                           ; switch strategies available:
  4495                           ; Name         Instructions Cycles
  4496                           ; simple_byte           13     7 (average)
  4497                           ;	Chosen strategy is simple_byte
  4498  002F96  0100               	movlb	0	; () banked
  4499  002F98  5188               	movf	??_Distribution& (0+255),w,b
  4500  002F9A  0A00               	xorlw	0	; case 0
  4501  002F9C  B4D8               	btfsc	status,2,c
  4502  002F9E  D7BE               	goto	l6497
  4503  002FA0  0A01               	xorlw	1	; case 1
  4504  002FA2  B4D8               	btfsc	status,2,c
  4505  002FA4  D7C8               	goto	l6499
  4506  002FA6  0A03               	xorlw	3	; case 2
  4507  002FA8  B4D8               	btfsc	status,2,c
  4508  002FAA  D7D2               	goto	l6501
  4509  002FAC  0A01               	xorlw	1	; case 3
  4510  002FAE  B4D8               	btfsc	status,2,c
  4511  002FB0  D7DC               	goto	l6503
  4512  002FB2                     l6509:
  4513                           
  4514                           ;sort.c: 216: _delay((unsigned long)((1500)*(32000000/4000.0)));
  4515  002FB2  0E3D               	movlw	61
  4516  002FB4  0100               	movlb	0	; () banked
  4517  002FB6  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4518  002FB8  0EE1               	movlw	225
  4519  002FBA  0100               	movlb	0	; () banked
  4520  002FBC  6F88               	movwf	??_Distribution& (0+255),b
  4521  002FBE  0E3F               	movlw	63
  4522  002FC0                     u7157:
  4523  002FC0  2EE8               	decfsz	wreg,f,c
  4524  002FC2  D7FE               	bra	u7157
  4525  002FC4  2F88               	decfsz	??_Distribution& (0+255),f,b
  4526  002FC6  D7FC               	bra	u7157
  4527  002FC8  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4528  002FCA  D7FA               	bra	u7157
  4529  002FCC  D000               	nop2	
  4530                           
  4531                           ;sort.c: 219: updateServoPosition(1350, 3);
  4532  002FCE  0E05               	movlw	5
  4533  002FD0  0100               	movlb	0	; () banked
  4534  002FD2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4535  002FD4  0E46               	movlw	70
  4536  002FD6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4537  002FD8  0E00               	movlw	0
  4538  002FDA  0100               	movlb	0	; () banked
  4539  002FDC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4540  002FDE  0E03               	movlw	3
  4541  002FE0  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4542  002FE2  EC1D  F01E         	call	_updateServoPosition	;wreg free
  4543                           
  4544                           ;sort.c: 220: _delay((unsigned long)((2000)*(32000000/4000.0)));
  4545  002FE6  0E52               	movlw	82
  4546  002FE8  0100               	movlb	0	; () banked
  4547  002FEA  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4548  002FEC  0E2B               	movlw	43
  4549  002FEE  0100               	movlb	0	; () banked
  4550  002FF0  6F88               	movwf	??_Distribution& (0+255),b
  4551  002FF2  0E00               	movlw	0
  4552  002FF4                     u7167:
  4553  002FF4  2EE8               	decfsz	wreg,f,c
  4554  002FF6  D7FE               	bra	u7167
  4555  002FF8  2F88               	decfsz	??_Distribution& (0+255),f,b
  4556  002FFA  D7FC               	bra	u7167
  4557  002FFC  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4558  002FFE  D7FA               	bra	u7167
  4559  003000  F000               	nop	
  4560                           
  4561                           ;sort.c: 223: updateServoPosition(1150, 3);
  4562  003002  0E04               	movlw	4
  4563  003004  0100               	movlb	0	; () banked
  4564  003006  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4565  003008  0E7E               	movlw	126
  4566  00300A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4567  00300C  0E00               	movlw	0
  4568  00300E  0100               	movlb	0	; () banked
  4569  003010  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4570  003012  0E03               	movlw	3
  4571  003014  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4572  003016  EC1D  F01E         	call	_updateServoPosition	;wreg free
  4573                           
  4574                           ;sort.c: 224: _delay((unsigned long)((750)*(32000000/4000.0)));
  4575  00301A  0E1F               	movlw	31
  4576  00301C  0100               	movlb	0	; () banked
  4577  00301E  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4578  003020  0E71               	movlw	113
  4579  003022  0100               	movlb	0	; () banked
  4580  003024  6F88               	movwf	??_Distribution& (0+255),b
  4581  003026  0E1E               	movlw	30
  4582  003028                     u7177:
  4583  003028  2EE8               	decfsz	wreg,f,c
  4584  00302A  D7FE               	bra	u7177
  4585  00302C  2F88               	decfsz	??_Distribution& (0+255),f,b
  4586  00302E  D7FC               	bra	u7177
  4587  003030  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4588  003032  D7FA               	bra	u7177
  4589  003034  F000               	nop	
  4590                           
  4591                           ;sort.c: 225: updateServoPosition(1200, 1);
  4592  003036  0E04               	movlw	4
  4593  003038  0100               	movlb	0	; () banked
  4594  00303A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4595  00303C  0EB0               	movlw	176
  4596  00303E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4597  003040  0E00               	movlw	0
  4598  003042  0100               	movlb	0	; () banked
  4599  003044  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4600  003046  0E01               	movlw	1
  4601  003048  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4602  00304A  EC1D  F01E         	call	_updateServoPosition	;wreg free
  4603                           
  4604                           ;sort.c: 226: f_can_coming_to_distribution = 0;
  4605  00304E  0E00               	movlw	0
  4606  003050  6E70               	movwf	_f_can_coming_to_distribution+1,c
  4607  003052  0E00               	movlw	0
  4608  003054  6E6F               	movwf	_f_can_coming_to_distribution,c
  4609                           
  4610                           ;sort.c: 227: f_can_distributed = 1;
  4611  003056  0E00               	movlw	0
  4612  003058  0101               	movlb	1	; () banked
  4613  00305A  6F2E               	movwf	(_f_can_distributed+1)& (0+255),b
  4614  00305C  0E01               	movlw	1
  4615  00305E  6F2D               	movwf	_f_can_distributed& (0+255),b
  4616                           
  4617                           ; BSR set to: 1
  4618                           ;sort.c: 228: if(f_lastCan == 1){
  4619  003060  0471               	decf	_f_lastCan,w,c
  4620  003062  1072               	iorwf	_f_lastCan+1,w,c
  4621  003064  A4D8               	btfss	status,2,c
  4622  003066  0012               	return	
  4623                           
  4624                           ; BSR set to: 1
  4625                           ;sort.c: 229: machine_state = DoneSorting_state;
  4626  003068  0E02               	movlw	2
  4627  00306A  0100               	movlb	0	; () banked
  4628  00306C  6FFC               	movwf	_machine_state& (0+255),b
  4629                           
  4630                           ; BSR set to: 0
  4631  00306E  0012               	return	
  4632  003070                     __end_of_Distribution:
  4633                           	opt stack 0
  4634                           tblptru	equ	0xFF8
  4635                           tblptrh	equ	0xFF7
  4636                           tblptrl	equ	0xFF6
  4637                           tablat	equ	0xFF5
  4638                           prodh	equ	0xFF4
  4639                           prodl	equ	0xFF3
  4640                           postinc0	equ	0xFEE
  4641                           wreg	equ	0xFE8
  4642                           postdec1	equ	0xFE5
  4643                           fsr1l	equ	0xFE1
  4644                           indf2	equ	0xFDF
  4645                           postinc2	equ	0xFDE
  4646                           postdec2	equ	0xFDD
  4647                           fsr2h	equ	0xFDA
  4648                           fsr2l	equ	0xFD9
  4649                           status	equ	0xFD8
  4650                           
  4651 ;; *************** function _machineConfig *****************
  4652 ;; Defined at:
  4653 ;;		line 15 in file "MachineConfig.c"
  4654 ;; Parameters:    Size  Location     Type
  4655 ;;		None
  4656 ;; Auto vars:     Size  Location     Type
  4657 ;;		None
  4658 ;; Return value:  Size  Location     Type
  4659 ;;                  1    wreg      void 
  4660 ;; Registers used:
  4661 ;;		wreg, status,2
  4662 ;; Tracked objects:
  4663 ;;		On entry : 0/0
  4664 ;;		On exit  : 0/0
  4665 ;;		Unchanged: 0/0
  4666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4670 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4671 ;;Total ram usage:        0 bytes
  4672 ;; Hardware stack levels used:    1
  4673 ;; Hardware stack levels required when called:    7
  4674 ;; This function calls:
  4675 ;;		Nothing
  4676 ;; This function is called by:
  4677 ;;		_main
  4678 ;; This function uses a non-reentrant model
  4679 ;;
  4680                           
  4681                           	psect	text12
  4682  003EB4                     __ptext12:
  4683                           	opt stack 0
  4684  003EB4                     _machineConfig:
  4685                           	opt stack 23
  4686                           
  4687                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  4688                           
  4689                           ;incstack = 0
  4690  003EB4  0EF0               	movlw	240
  4691  003EB6  6ED3               	movwf	4051,c	;volatile
  4692                           
  4693                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  4694  003EB8  8C9B               	bsf	3995,6,c	;volatile
  4695                           
  4696                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  4697  003EBA  0E07               	movlw	7
  4698  003EBC  6E92               	movwf	3986,c	;volatile
  4699                           
  4700                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  4701  003EBE  0EF2               	movlw	242
  4702  003EC0  6E93               	movwf	3987,c	;volatile
  4703                           
  4704                           ;MachineConfig.c: 27: TRISC = 0x00;
  4705  003EC2  0E00               	movlw	0
  4706  003EC4  6E94               	movwf	3988,c	;volatile
  4707                           
  4708                           ;MachineConfig.c: 31: TRISD = 0x00;
  4709  003EC6  0E00               	movlw	0
  4710  003EC8  6E95               	movwf	3989,c	;volatile
  4711                           
  4712                           ;MachineConfig.c: 34: TRISE = 0x00;
  4713  003ECA  0E00               	movlw	0
  4714  003ECC  6E96               	movwf	3990,c	;volatile
  4715                           
  4716                           ;MachineConfig.c: 37: LATA = 0x00;
  4717  003ECE  0E00               	movlw	0
  4718  003ED0  6E89               	movwf	3977,c	;volatile
  4719                           
  4720                           ;MachineConfig.c: 38: LATB = 0x00;
  4721  003ED2  0E00               	movlw	0
  4722  003ED4  6E8A               	movwf	3978,c	;volatile
  4723                           
  4724                           ;MachineConfig.c: 39: LATC = 0x00;
  4725  003ED6  0E00               	movlw	0
  4726  003ED8  6E8B               	movwf	3979,c	;volatile
  4727                           
  4728                           ;MachineConfig.c: 40: LATD = 0x00;
  4729  003EDA  0E00               	movlw	0
  4730  003EDC  6E8C               	movwf	3980,c	;volatile
  4731                           
  4732                           ;MachineConfig.c: 41: LATE = 0x00;
  4733  003EDE  0E00               	movlw	0
  4734  003EE0  6E8D               	movwf	3981,c	;volatile
  4735                           
  4736                           ;MachineConfig.c: 43: nRBPU = 0;
  4737  003EE2  9EF1               	bcf	intcon2,7,c	;volatile
  4738                           
  4739                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  4740  003EE4  0E00               	movlw	0
  4741  003EE6  6EC2               	movwf	4034,c	;volatile
  4742                           
  4743                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  4744  003EE8  0E0D               	movlw	13
  4745  003EEA  6EC1               	movwf	4033,c	;volatile
  4746                           
  4747                           ;MachineConfig.c: 50: CVRCON = 0x00;
  4748  003EEC  0E00               	movlw	0
  4749  003EEE  6EB5               	movwf	4021,c	;volatile
  4750                           
  4751                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  4752  003EF0  96B4               	bcf	4020,3,c	;volatile
  4753                           
  4754                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  4755  003EF2  0EB1               	movlw	177
  4756  003EF4  6EC0               	movwf	4032,c	;volatile
  4757                           
  4758                           ;MachineConfig.c: 55: INT1IE = 1;
  4759  003EF6  86F0               	bsf	intcon3,3,c	;volatile
  4760                           
  4761                           ;MachineConfig.c: 57: TMR0IE = 1;
  4762  003EF8  8AF2               	bsf	intcon,5,c	;volatile
  4763                           
  4764                           ;MachineConfig.c: 58: TMR1IE = 1;
  4765  003EFA  809D               	bsf	3997,0,c	;volatile
  4766                           
  4767                           ;MachineConfig.c: 59: T1CON = 0b10110000;
  4768  003EFC  0EB0               	movlw	176
  4769  003EFE  6ECD               	movwf	4045,c	;volatile
  4770                           
  4771                           ;MachineConfig.c: 60: T3CON = 0b10110000;
  4772  003F00  0EB0               	movlw	176
  4773  003F02  6EB1               	movwf	4017,c	;volatile
  4774                           
  4775                           ;MachineConfig.c: 61: TMR2IE = 1;
  4776  003F04  829D               	bsf	3997,1,c	;volatile
  4777                           
  4778                           ;MachineConfig.c: 62: TMR3IE = 1;
  4779  003F06  82A0               	bsf	4000,1,c	;volatile
  4780                           
  4781                           ;MachineConfig.c: 63: PEIE = 1;
  4782  003F08  8CF2               	bsf	intcon,6,c	;volatile
  4783                           
  4784                           ;MachineConfig.c: 64: ADIE = 0;
  4785  003F0A  9C9D               	bcf	3997,6,c	;volatile
  4786                           
  4787                           ;MachineConfig.c: 65: (INTCONbits.GIE = 0);
  4788  003F0C  9EF2               	bcf	intcon,7,c	;volatile
  4789  003F0E  0012               	return		;funcret
  4790  003F10                     __end_of_machineConfig:
  4791                           	opt stack 0
  4792                           tblptru	equ	0xFF8
  4793                           tblptrh	equ	0xFF7
  4794                           tblptrl	equ	0xFF6
  4795                           tablat	equ	0xFF5
  4796                           prodh	equ	0xFF4
  4797                           prodl	equ	0xFF3
  4798                           intcon	equ	0xFF2
  4799                           intcon2	equ	0xFF1
  4800                           intcon3	equ	0xFF0
  4801                           postinc0	equ	0xFEE
  4802                           wreg	equ	0xFE8
  4803                           postdec1	equ	0xFE5
  4804                           fsr1l	equ	0xFE1
  4805                           indf2	equ	0xFDF
  4806                           postinc2	equ	0xFDE
  4807                           postdec2	equ	0xFDD
  4808                           fsr2h	equ	0xFDA
  4809                           fsr2l	equ	0xFD9
  4810                           status	equ	0xFD8
  4811                           
  4812 ;; *************** function _logRun *****************
  4813 ;; Defined at:
  4814 ;;		line 84 in file "EEPROM.c"
  4815 ;; Parameters:    Size  Location     Type
  4816 ;;		None
  4817 ;; Auto vars:     Size  Location     Type
  4818 ;;  byte_i          1   53[BANK0 ] unsigned char 
  4819 ;;  i               2   55[BANK0 ] int 
  4820 ;;  num             1   49[BANK0 ] unsigned char 
  4821 ;;  addr            2   57[BANK0 ] unsigned short 
  4822 ;;  byte11          1   54[BANK0 ] unsigned char 
  4823 ;;  byte3           1   52[BANK0 ] unsigned char 
  4824 ;;  byte2           1   51[BANK0 ] unsigned char 
  4825 ;;  byte1           1   50[BANK0 ] unsigned char 
  4826 ;; Return value:  Size  Location     Type
  4827 ;;                  1    wreg      void 
  4828 ;; Registers used:
  4829 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4830 ;; Tracked objects:
  4831 ;;		On entry : 0/0
  4832 ;;		On exit  : 0/0
  4833 ;;		Unchanged: 0/0
  4834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4836 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4838 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4839 ;;Total ram usage:       10 bytes
  4840 ;; Hardware stack levels used:    1
  4841 ;; Hardware stack levels required when called:   11
  4842 ;; This function calls:
  4843 ;;		_EEPROM_read
  4844 ;;		_EEPROM_write
  4845 ;; This function is called by:
  4846 ;;		_main
  4847 ;; This function uses a non-reentrant model
  4848 ;;
  4849                           
  4850                           	psect	text13
  4851  003070                     __ptext13:
  4852                           	opt stack 0
  4853  003070                     _logRun:
  4854                           	opt stack 19
  4855                           
  4856                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  4857                           
  4858                           ;incstack = 0
  4859  003070  0E00               	movlw	0
  4860  003072  0100               	movlb	0	; () banked
  4861  003074  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  4862  003076  0E00               	movlw	0
  4863  003078  6F80               	movwf	EEPROM_read@address& (0+255),b
  4864  00307A  ECA4  F023         	call	_EEPROM_read	;wreg free
  4865  00307E  0100               	movlb	0	; () banked
  4866  003080  6FFD               	movwf	_sel& (0+255),b
  4867                           
  4868                           ; BSR set to: 0
  4869                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  4870  003082  0100               	movlb	0	; () banked
  4871  003084  51FD               	movf	_sel& (0+255),w,b
  4872  003086  0D0B               	mullw	11
  4873  003088  0E01               	movlw	1
  4874  00308A  24F3               	addwf	prodl,w,c
  4875  00308C  0100               	movlb	0	; () banked
  4876  00308E  6FB9               	movwf	logRun@addr& (0+255),b
  4877  003090  0E00               	movlw	0
  4878  003092  20F4               	addwfc	prodh,w,c
  4879  003094  0100               	movlb	0	; () banked
  4880  003096  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  4881                           
  4882                           ; BSR set to: 0
  4883                           ;EEPROM.c: 101: if (sel < 3){
  4884  003098  0E03               	movlw	3
  4885  00309A  0100               	movlb	0	; () banked
  4886  00309C  61FD               	cpfslt	_sel& (0+255),b
  4887  00309E  D00E               	goto	l7949
  4888                           
  4889                           ; BSR set to: 0
  4890                           ;EEPROM.c: 102: unsigned char num = sel+1;
  4891  0030A0  0100               	movlb	0	; () banked
  4892  0030A2  29FD               	incf	_sel& (0+255),w,b
  4893  0030A4  0100               	movlb	0	; () banked
  4894  0030A6  6FB1               	movwf	logRun@num& (0+255),b
  4895                           
  4896                           ; BSR set to: 0
  4897                           ;EEPROM.c: 103: EEPROM_write(0, num);
  4898  0030A8  0E00               	movlw	0
  4899  0030AA  0100               	movlb	0	; () banked
  4900  0030AC  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  4901  0030AE  0E00               	movlw	0
  4902  0030B0  6FAB               	movwf	EEPROM_write@address& (0+255),b
  4903  0030B2  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  4904  0030B6  ECE7  F019         	call	_EEPROM_write	;wreg free
  4905                           
  4906                           ;EEPROM.c: 104: }
  4907  0030BA  D00A               	goto	l7951
  4908  0030BC                     l7949:
  4909                           
  4910                           ;EEPROM.c: 105: else{
  4911                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  4912  0030BC  0E00               	movlw	0
  4913  0030BE  0100               	movlb	0	; () banked
  4914  0030C0  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  4915  0030C2  0E00               	movlw	0
  4916  0030C4  6FAB               	movwf	EEPROM_write@address& (0+255),b
  4917  0030C6  0E00               	movlw	0
  4918  0030C8  0100               	movlb	0	; () banked
  4919  0030CA  6FAD               	movwf	EEPROM_write@data& (0+255),b
  4920  0030CC  ECE7  F019         	call	_EEPROM_write	;wreg free
  4921  0030D0                     l7951:
  4922                           
  4923                           ;EEPROM.c: 107: }
  4924                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  4925  0030D0  0100               	movlb	0	; () banked
  4926  0030D2  51FE               	movf	_count_total& (0+255),w,b
  4927  0030D4  0980               	iorlw	128
  4928  0030D6  0100               	movlb	0	; () banked
  4929  0030D8  6FB2               	movwf	logRun@byte1& (0+255),b
  4930                           
  4931                           ; BSR set to: 0
  4932                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  4933  0030DA  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4934  0030DE  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4935  0030E2  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  4936  0030E6  ECE7  F019         	call	_EEPROM_write	;wreg free
  4937                           
  4938                           ;EEPROM.c: 112: addr++;
  4939  0030EA  0100               	movlb	0	; () banked
  4940  0030EC  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4941  0030EE  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4942                           
  4943                           ; BSR set to: 0
  4944                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  4945  0030F0  3861               	swapf	_count_pop_no_tab,w,c
  4946  0030F2  0BF0               	andlw	240
  4947  0030F4  1063               	iorwf	_count_pop_w_tab,w,c
  4948  0030F6  0100               	movlb	0	; () banked
  4949  0030F8  6FB3               	movwf	logRun@byte2& (0+255),b
  4950                           
  4951                           ; BSR set to: 0
  4952                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  4953  0030FA  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4954  0030FE  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4955  003102  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  4956  003106  ECE7  F019         	call	_EEPROM_write	;wreg free
  4957                           
  4958                           ;EEPROM.c: 117: addr++;
  4959  00310A  0100               	movlb	0	; () banked
  4960  00310C  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4961  00310E  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4962                           
  4963                           ; BSR set to: 0
  4964                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  4965  003110  385F               	swapf	_count_can_w_lab,w,c
  4966  003112  0BF0               	andlw	240
  4967  003114  105D               	iorwf	_count_can_no_lab,w,c
  4968  003116  0100               	movlb	0	; () banked
  4969  003118  6FB4               	movwf	logRun@byte3& (0+255),b
  4970                           
  4971                           ; BSR set to: 0
  4972                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  4973  00311A  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4974  00311E  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4975  003122  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  4976  003126  ECE7  F019         	call	_EEPROM_write	;wreg free
  4977                           
  4978                           ;EEPROM.c: 120: addr++;
  4979  00312A  0100               	movlb	0	; () banked
  4980  00312C  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4981  00312E  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4982                           
  4983                           ; BSR set to: 0
  4984                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  4985  003130  0E00               	movlw	0
  4986  003132  0100               	movlb	0	; () banked
  4987  003134  6FB8               	movwf	(logRun@i+1)& (0+255),b
  4988  003136  0E00               	movlw	0
  4989  003138  6FB7               	movwf	logRun@i& (0+255),b
  4990                           
  4991                           ; BSR set to: 0
  4992  00313A  0100               	movlb	0	; () banked
  4993  00313C  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  4994  00313E  D008               	goto	l7975
  4995  003140  0100               	movlb	0	; () banked
  4996  003142  51B8               	movf	(logRun@i+1)& (0+255),w,b
  4997  003144  E128               	bnz	l952
  4998  003146  0E07               	movlw	7
  4999  003148  0100               	movlb	0	; () banked
  5000  00314A  5DB7               	subwf	logRun@i& (0+255),w,b
  5001  00314C  B0D8               	btfsc	status,0,c
  5002  00314E  D023               	goto	l952
  5003  003150                     l7975:
  5004                           
  5005                           ; BSR set to: 0
  5006                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  5007  003150  90D8               	bcf	status,0,c
  5008  003152  0100               	movlb	0	; () banked
  5009  003154  35B7               	rlcf	logRun@i& (0+255),w,b
  5010  003156  6ED9               	movwf	fsr2l,c
  5011  003158  0100               	movlb	0	; () banked
  5012  00315A  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  5013  00315C  6EDA               	movwf	fsr2h,c
  5014  00315E  0E0E               	movlw	low _startTime
  5015  003160  26D9               	addwf	fsr2l,f,c
  5016  003162  0E01               	movlw	high _startTime
  5017  003164  22DA               	addwfc	fsr2h,f,c
  5018  003166  50DF               	movf	indf2,w,c
  5019  003168  0100               	movlb	0	; () banked
  5020  00316A  6FB5               	movwf	logRun@byte_i& (0+255),b
  5021                           
  5022                           ; BSR set to: 0
  5023                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  5024  00316C  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5025  003170  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5026  003174  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  5027  003178  ECE7  F019         	call	_EEPROM_write	;wreg free
  5028                           
  5029                           ;EEPROM.c: 126: addr++;
  5030  00317C  0100               	movlb	0	; () banked
  5031  00317E  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5032  003180  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5033                           
  5034                           ; BSR set to: 0
  5035  003182  0100               	movlb	0	; () banked
  5036  003184  4BB7               	infsnz	logRun@i& (0+255),f,b
  5037  003186  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  5038                           
  5039                           ; BSR set to: 0
  5040  003188  0100               	movlb	0	; () banked
  5041  00318A  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  5042  00318C  D7E1               	goto	l7975
  5043  00318E  0100               	movlb	0	; () banked
  5044  003190  51B8               	movf	(logRun@i+1)& (0+255),w,b
  5045  003192  E101               	bnz	u6850
  5046  003194  D7D8               	goto	L5
  5047  003196                     u6850:
  5048  003196                     l952:
  5049                           
  5050                           ; BSR set to: 0
  5051                           ;EEPROM.c: 127: }
  5052                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  5053  003196  C0F8  F0B6         	movff	_total_time,logRun@byte11
  5054                           
  5055                           ; BSR set to: 0
  5056                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  5057  00319A  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5058  00319E  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5059  0031A2  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  5060  0031A6  ECE7  F019         	call	_EEPROM_write	;wreg free
  5061  0031AA  0012               	return		;funcret
  5062  0031AC                     __end_of_logRun:
  5063                           	opt stack 0
  5064                           tblptru	equ	0xFF8
  5065                           tblptrh	equ	0xFF7
  5066                           tblptrl	equ	0xFF6
  5067                           tablat	equ	0xFF5
  5068                           prodh	equ	0xFF4
  5069                           prodl	equ	0xFF3
  5070                           intcon	equ	0xFF2
  5071                           intcon2	equ	0xFF1
  5072                           intcon3	equ	0xFF0
  5073                           postinc0	equ	0xFEE
  5074                           wreg	equ	0xFE8
  5075                           postdec1	equ	0xFE5
  5076                           fsr1l	equ	0xFE1
  5077                           indf2	equ	0xFDF
  5078                           postinc2	equ	0xFDE
  5079                           postdec2	equ	0xFDD
  5080                           fsr2h	equ	0xFDA
  5081                           fsr2l	equ	0xFD9
  5082                           status	equ	0xFD8
  5083                           
  5084 ;; *************** function _EEPROM_write *****************
  5085 ;; Defined at:
  5086 ;;		line 32 in file "EEPROM.c"
  5087 ;; Parameters:    Size  Location     Type
  5088 ;;  address         2   43[BANK0 ] unsigned short 
  5089 ;;  data            1   45[BANK0 ] unsigned char 
  5090 ;; Auto vars:     Size  Location     Type
  5091 ;;  i               1   48[BANK0 ] unsigned char 
  5092 ;;  i               1   47[BANK0 ] unsigned char 
  5093 ;; Return value:  Size  Location     Type
  5094 ;;                  1    wreg      void 
  5095 ;; Registers used:
  5096 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5097 ;; Tracked objects:
  5098 ;;		On entry : 0/0
  5099 ;;		On exit  : 0/0
  5100 ;;		Unchanged: 0/0
  5101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5102 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5103 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5104 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5105 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5106 ;;Total ram usage:        6 bytes
  5107 ;; Hardware stack levels used:    1
  5108 ;; Hardware stack levels required when called:   10
  5109 ;; This function calls:
  5110 ;;		_EEPROM_read
  5111 ;;		_lcdInst
  5112 ;;		_printf
  5113 ;; This function is called by:
  5114 ;;		_Loading
  5115 ;;		_logRun
  5116 ;; This function uses a non-reentrant model
  5117 ;;
  5118                           
  5119                           	psect	text14
  5120  0033CE                     __ptext14:
  5121                           	opt stack 0
  5122  0033CE                     _EEPROM_write:
  5123                           	opt stack 18
  5124                           
  5125                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  5126                           
  5127                           ;incstack = 0
  5128  0033CE  84A6               	bsf	4006,2,c	;volatile
  5129                           
  5130                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  5131  0033D0  0100               	movlb	0	; () banked
  5132  0033D2  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  5133  0033D4  6EAA               	movwf	4010,c	;volatile
  5134                           
  5135                           ; BSR set to: 0
  5136                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  5137  0033D6  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  5138                           
  5139                           ; BSR set to: 0
  5140                           ;EEPROM.c: 39: EEDATA = data;
  5141  0033DA  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  5142                           
  5143                           ; BSR set to: 0
  5144                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  5145  0033DE  9EA6               	bcf	4006,7,c	;volatile
  5146                           
  5147                           ; BSR set to: 0
  5148                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  5149  0033E0  9CA6               	bcf	4006,6,c	;volatile
  5150                           
  5151                           ; BSR set to: 0
  5152                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  5153  0033E2  9EF2               	bcf	intcon,7,c	;volatile
  5154                           
  5155                           ;EEPROM.c: 45: EECON2 = 0x55;
  5156  0033E4  0E55               	movlw	85
  5157  0033E6  6EA7               	movwf	4007,c	;volatile
  5158                           
  5159                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  5160  0033E8  0EAA               	movlw	170
  5161  0033EA  6EA7               	movwf	4007,c	;volatile
  5162                           
  5163                           ; BSR set to: 0
  5164                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  5165  0033EC  82A6               	bsf	4006,1,c	;volatile
  5166                           
  5167                           ; BSR set to: 0
  5168                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  5169  0033EE  8EF2               	bsf	intcon,7,c	;volatile
  5170  0033F0                     l930:
  5171  0033F0  A8A1               	btfss	4001,4,c	;volatile
  5172  0033F2  D7FE               	goto	l930
  5173                           
  5174                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  5175  0033F4  98A1               	bcf	4001,4,c	;volatile
  5176                           
  5177                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  5178  0033F6  94A6               	bcf	4006,2,c	;volatile
  5179                           
  5180                           ;EEPROM.c: 57: if(debug){
  5181  0033F8  5065               	movf	_debug,w,c
  5182  0033FA  1066               	iorwf	_debug+1,w,c
  5183  0033FC  B4D8               	btfsc	status,2,c
  5184  0033FE  0012               	return	
  5185                           
  5186                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5187  003400  0E01               	movlw	1
  5188  003402  ECE1  F023         	call	_lcdInst
  5189  003406  0E68               	movlw	104
  5190  003408  0100               	movlb	0	; () banked
  5191  00340A  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5192  00340C  0EE4               	movlw	228
  5193  00340E                     u7187:
  5194  00340E  2EE8               	decfsz	wreg,f,c
  5195  003410  D7FE               	bra	u7187
  5196  003412  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5197  003414  D7FC               	bra	u7187
  5198  003416  F000               	nop	
  5199                           
  5200                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  5201  003418  0E80               	movlw	128
  5202  00341A  ECE1  F023         	call	_lcdInst
  5203                           
  5204                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  5205  00341E  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  5206  003422  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  5207  003426  ECA4  F023         	call	_EEPROM_read	;wreg free
  5208  00342A  0100               	movlb	0	; () banked
  5209  00342C  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  5210  00342E  A4D8               	btfss	status,2,c
  5211  003430  D024               	goto	l6039
  5212                           
  5213                           ; BSR set to: 0
  5214                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  5215  003432  0E58               	movlw	low STR_66
  5216  003434  0100               	movlb	0	; () banked
  5217  003436  6F8E               	movwf	printf@f& (0+255),b
  5218  003438  0EFB               	movlw	high STR_66
  5219  00343A  0100               	movlb	0	; () banked
  5220  00343C  6F8F               	movwf	(printf@f+1)& (0+255),b
  5221  00343E  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  5222  003442  0100               	movlb	0	; () banked
  5223  003444  6B91               	clrf	(?_printf+3)& (0+255),b
  5224  003446  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  5225  00344A  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  5226  00344E  ECB8  F008         	call	_printf	;wreg free
  5227                           
  5228                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  5229  003452  0E00               	movlw	0
  5230  003454  0100               	movlb	0	; () banked
  5231  003456  6FAF               	movwf	EEPROM_write@i& (0+255),b
  5232  003458                     l6031:
  5233                           
  5234                           ; BSR set to: 0
  5235  003458  0E63               	movlw	99
  5236  00345A  0100               	movlb	0	; () banked
  5237  00345C  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  5238  00345E  D001               	goto	l6035
  5239  003460  0012               	return	
  5240  003462                     l6035:
  5241                           
  5242                           ; BSR set to: 0
  5243  003462  0E68               	movlw	104
  5244  003464  0100               	movlb	0	; () banked
  5245  003466  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5246  003468  0EE4               	movlw	228
  5247  00346A                     u7197:
  5248  00346A  2EE8               	decfsz	wreg,f,c
  5249  00346C  D7FE               	bra	u7197
  5250  00346E  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5251  003470  D7FC               	bra	u7197
  5252  003472  F000               	nop	
  5253  003474  0100               	movlb	0	; () banked
  5254  003476  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  5255  003478  D7EF               	goto	l6031
  5256  00347A                     l6039:
  5257                           
  5258                           ; BSR set to: 0
  5259                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  5260  00347A  0EBD               	movlw	low STR_67
  5261  00347C  0100               	movlb	0	; () banked
  5262  00347E  6F8E               	movwf	printf@f& (0+255),b
  5263  003480  0EFF               	movlw	high STR_67
  5264  003482  0100               	movlb	0	; () banked
  5265  003484  6F8F               	movwf	(printf@f+1)& (0+255),b
  5266  003486  ECB8  F008         	call	_printf	;wreg free
  5267  00348A  0E00               	movlw	0
  5268  00348C  0100               	movlb	0	; () banked
  5269  00348E  6FB0               	movwf	EEPROM_write@i_1328& (0+255),b
  5270  003490                     l6043:
  5271                           
  5272                           ; BSR set to: 0
  5273  003490  0E63               	movlw	99
  5274  003492  0100               	movlb	0	; () banked
  5275  003494  65B0               	cpfsgt	EEPROM_write@i_1328& (0+255),b
  5276  003496  D001               	goto	l6047
  5277  003498  0012               	return	
  5278  00349A                     l6047:
  5279                           
  5280                           ; BSR set to: 0
  5281  00349A  0E68               	movlw	104
  5282  00349C  0100               	movlb	0	; () banked
  5283  00349E  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5284  0034A0  0EE4               	movlw	228
  5285  0034A2                     u7207:
  5286  0034A2  2EE8               	decfsz	wreg,f,c
  5287  0034A4  D7FE               	bra	u7207
  5288  0034A6  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5289  0034A8  D7FC               	bra	u7207
  5290  0034AA  F000               	nop	
  5291  0034AC  0100               	movlb	0	; () banked
  5292  0034AE  2BB0               	incf	EEPROM_write@i_1328& (0+255),f,b
  5293  0034B0  D7EF               	goto	l6043
  5294  0034B2                     __end_of_EEPROM_write:
  5295                           	opt stack 0
  5296                           tblptru	equ	0xFF8
  5297                           tblptrh	equ	0xFF7
  5298                           tblptrl	equ	0xFF6
  5299                           tablat	equ	0xFF5
  5300                           prodh	equ	0xFF4
  5301                           prodl	equ	0xFF3
  5302                           intcon	equ	0xFF2
  5303                           intcon2	equ	0xFF1
  5304                           intcon3	equ	0xFF0
  5305                           postinc0	equ	0xFEE
  5306                           wreg	equ	0xFE8
  5307                           postdec1	equ	0xFE5
  5308                           fsr1l	equ	0xFE1
  5309                           indf2	equ	0xFDF
  5310                           postinc2	equ	0xFDE
  5311                           postdec2	equ	0xFDD
  5312                           fsr2h	equ	0xFDA
  5313                           fsr2l	equ	0xFD9
  5314                           status	equ	0xFD8
  5315                           
  5316 ;; *************** function _EEPROM_read *****************
  5317 ;; Defined at:
  5318 ;;		line 68 in file "EEPROM.c"
  5319 ;; Parameters:    Size  Location     Type
  5320 ;;  address         2    0[BANK0 ] unsigned short 
  5321 ;; Auto vars:     Size  Location     Type
  5322 ;;		None
  5323 ;; Return value:  Size  Location     Type
  5324 ;;                  1    wreg      unsigned char 
  5325 ;; Registers used:
  5326 ;;		wreg, status,2
  5327 ;; Tracked objects:
  5328 ;;		On entry : 0/0
  5329 ;;		On exit  : 0/0
  5330 ;;		Unchanged: 0/0
  5331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5332 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5335 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5336 ;;Total ram usage:        2 bytes
  5337 ;; Hardware stack levels used:    1
  5338 ;; Hardware stack levels required when called:    7
  5339 ;; This function calls:
  5340 ;;		Nothing
  5341 ;; This function is called by:
  5342 ;;		_Loading
  5343 ;;		_EEPROM_write
  5344 ;;		_logRun
  5345 ;; This function uses a non-reentrant model
  5346 ;;
  5347                           
  5348                           	psect	text15
  5349  004748                     __ptext15:
  5350                           	opt stack 0
  5351  004748                     _EEPROM_read:
  5352                           	opt stack 20
  5353                           
  5354                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  5355                           
  5356                           ;incstack = 0
  5357  004748  0100               	movlb	0	; () banked
  5358  00474A  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  5359  00474C  6EAA               	movwf	4010,c	;volatile
  5360                           
  5361                           ; BSR set to: 0
  5362                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  5363  00474E  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  5364                           
  5365                           ; BSR set to: 0
  5366                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  5367  004752  9EA6               	bcf	4006,7,c	;volatile
  5368                           
  5369                           ; BSR set to: 0
  5370                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  5371  004754  9CA6               	bcf	4006,6,c	;volatile
  5372                           
  5373                           ; BSR set to: 0
  5374                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  5375  004756  80A6               	bsf	4006,0,c	;volatile
  5376  004758                     l943:
  5377  004758  B0A6               	btfsc	4006,0,c	;volatile
  5378  00475A  D7FE               	goto	l943
  5379                           
  5380                           ;EEPROM.c: 81: return EEDATA;
  5381  00475C  50A8               	movf	4008,w,c	;volatile
  5382  00475E  0012               	return	
  5383  004760                     __end_of_EEPROM_read:
  5384                           	opt stack 0
  5385                           tblptru	equ	0xFF8
  5386                           tblptrh	equ	0xFF7
  5387                           tblptrl	equ	0xFF6
  5388                           tablat	equ	0xFF5
  5389                           prodh	equ	0xFF4
  5390                           prodl	equ	0xFF3
  5391                           intcon	equ	0xFF2
  5392                           intcon2	equ	0xFF1
  5393                           intcon3	equ	0xFF0
  5394                           postinc0	equ	0xFEE
  5395                           wreg	equ	0xFE8
  5396                           postdec1	equ	0xFE5
  5397                           fsr1l	equ	0xFE1
  5398                           indf2	equ	0xFDF
  5399                           postinc2	equ	0xFDE
  5400                           postdec2	equ	0xFDD
  5401                           fsr2h	equ	0xFDA
  5402                           fsr2l	equ	0xFD9
  5403                           status	equ	0xFD8
  5404                           
  5405 ;; *************** function _initUI *****************
  5406 ;; Defined at:
  5407 ;;		line 62 in file "UI.c"
  5408 ;; Parameters:    Size  Location     Type
  5409 ;;		None
  5410 ;; Auto vars:     Size  Location     Type
  5411 ;;		None
  5412 ;; Return value:  Size  Location     Type
  5413 ;;                  1    wreg      void 
  5414 ;; Registers used:
  5415 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5416 ;; Tracked objects:
  5417 ;;		On entry : 0/0
  5418 ;;		On exit  : 0/0
  5419 ;;		Unchanged: 0/0
  5420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5424 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5425 ;;Total ram usage:        0 bytes
  5426 ;; Hardware stack levels used:    1
  5427 ;; Hardware stack levels required when called:   12
  5428 ;; This function calls:
  5429 ;;		_change_state_to_menu_start
  5430 ;;		_loadRTC
  5431 ;; This function is called by:
  5432 ;;		_main
  5433 ;; This function uses a non-reentrant model
  5434 ;;
  5435                           
  5436                           	psect	text16
  5437  00451A                     __ptext16:
  5438                           	opt stack 0
  5439  00451A                     _initUI:
  5440                           	opt stack 18
  5441                           
  5442                           ;UI.c: 63: (INTCONbits.GIE = 1);
  5443                           
  5444                           ;incstack = 0
  5445  00451A  8EF2               	bsf	intcon,7,c	;volatile
  5446                           
  5447                           ;UI.c: 64: machine_state = UI_state;
  5448  00451C  0E00               	movlw	0
  5449  00451E  0100               	movlb	0	; () banked
  5450  004520  6FFC               	movwf	_machine_state& (0+255),b
  5451                           
  5452                           ;UI.c: 65: logstate = 0;
  5453  004522  0E00               	movlw	0
  5454  004524  0100               	movlb	0	; () banked
  5455  004526  6FF7               	movwf	(_logstate+1)& (0+255),b
  5456  004528  0E00               	movlw	0
  5457  00452A  6FF6               	movwf	_logstate& (0+255),b
  5458                           
  5459                           ; BSR set to: 0
  5460                           ;UI.c: 67: if(RTCflag){
  5461  00452C  0100               	movlb	0	; () banked
  5462  00452E  51DE               	movf	_RTCflag& (0+255),w,b
  5463  004530  0100               	movlb	0	; () banked
  5464  004532  11DF               	iorwf	(_RTCflag+1)& (0+255),w,b
  5465  004534  A4D8               	btfss	status,2,c
  5466                           
  5467                           ; BSR set to: 0
  5468                           ;UI.c: 68: loadRTC();
  5469  004536  ECD2  F01C         	call	_loadRTC	;wreg free
  5470                           
  5471                           ;UI.c: 69: }
  5472                           ;UI.c: 71: change_state_to_menu_start();
  5473  00453A  ECD2  F022         	call	_change_state_to_menu_start	;wreg free
  5474                           
  5475                           ;UI.c: 72: firstboot = 1;
  5476  00453E  0E00               	movlw	0
  5477  004540  6E76               	movwf	_firstboot+1,c
  5478  004542  0E01               	movlw	1
  5479  004544  6E75               	movwf	_firstboot,c
  5480  004546  0012               	return		;funcret
  5481  004548                     __end_of_initUI:
  5482                           	opt stack 0
  5483                           tblptru	equ	0xFF8
  5484                           tblptrh	equ	0xFF7
  5485                           tblptrl	equ	0xFF6
  5486                           tablat	equ	0xFF5
  5487                           prodh	equ	0xFF4
  5488                           prodl	equ	0xFF3
  5489                           intcon	equ	0xFF2
  5490                           intcon2	equ	0xFF1
  5491                           intcon3	equ	0xFF0
  5492                           postinc0	equ	0xFEE
  5493                           wreg	equ	0xFE8
  5494                           postdec1	equ	0xFE5
  5495                           fsr1l	equ	0xFE1
  5496                           indf2	equ	0xFDF
  5497                           postinc2	equ	0xFDE
  5498                           postdec2	equ	0xFDD
  5499                           fsr2h	equ	0xFDA
  5500                           fsr2l	equ	0xFD9
  5501                           status	equ	0xFD8
  5502                           
  5503 ;; *************** function _loadRTC *****************
  5504 ;; Defined at:
  5505 ;;		line 28 in file "RTC.c"
  5506 ;; Parameters:    Size  Location     Type
  5507 ;;		None
  5508 ;; Auto vars:     Size  Location     Type
  5509 ;;  i               2   22[BANK0 ] int 
  5510 ;; Return value:  Size  Location     Type
  5511 ;;                  1    wreg      void 
  5512 ;; Registers used:
  5513 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5514 ;; Tracked objects:
  5515 ;;		On entry : 0/0
  5516 ;;		On exit  : 0/0
  5517 ;;		Unchanged: 0/0
  5518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5520 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5521 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5522 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5523 ;;Total ram usage:        3 bytes
  5524 ;; Hardware stack levels used:    1
  5525 ;; Hardware stack levels required when called:    9
  5526 ;; This function calls:
  5527 ;;		_I2C_Master_Init
  5528 ;;		_I2C_Master_Start
  5529 ;;		_I2C_Master_Stop
  5530 ;;		_I2C_Master_Write
  5531 ;; This function is called by:
  5532 ;;		_initUI
  5533 ;; This function uses a non-reentrant model
  5534 ;;
  5535                           
  5536                           	psect	text17
  5537  0039A4                     __ptext17:
  5538                           	opt stack 0
  5539  0039A4                     _loadRTC:
  5540                           	opt stack 20
  5541                           
  5542                           ;RTC.c: 30: I2C_Master_Init(10000);
  5543                           
  5544                           ;incstack = 0
  5545  0039A4  0E10               	movlw	16
  5546  0039A6  0100               	movlb	0	; () banked
  5547  0039A8  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  5548  0039AA  0E27               	movlw	39
  5549  0039AC  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  5550  0039AE  0E00               	movlw	0
  5551  0039B0  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  5552  0039B2  0E00               	movlw	0
  5553  0039B4  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  5554  0039B6  EC2A  F01F         	call	_I2C_Master_Init	;wreg free
  5555                           
  5556                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  5557  0039BA  9EF2               	bcf	intcon,7,c	;volatile
  5558                           
  5559                           ;RTC.c: 34: I2C_Master_Start();
  5560  0039BC  EC07  F024         	call	_I2C_Master_Start	;wreg free
  5561                           
  5562                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  5563  0039C0  0E00               	movlw	0
  5564  0039C2  0100               	movlb	0	; () banked
  5565  0039C4  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5566  0039C6  0ED0               	movlw	208
  5567  0039C8  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5568  0039CA  ECF5  F023         	call	_I2C_Master_Write	;wreg free
  5569                           
  5570                           ;RTC.c: 36: I2C_Master_Write(0x00);
  5571  0039CE  0E00               	movlw	0
  5572  0039D0  0100               	movlb	0	; () banked
  5573  0039D2  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5574  0039D4  0E00               	movlw	0
  5575  0039D6  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5576  0039D8  ECF5  F023         	call	_I2C_Master_Write	;wreg free
  5577                           
  5578                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  5579  0039DC  0E00               	movlw	0
  5580  0039DE  0100               	movlb	0	; () banked
  5581  0039E0  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  5582  0039E2  0E00               	movlw	0
  5583  0039E4  6F96               	movwf	loadRTC@i& (0+255),b
  5584  0039E6                     l6173:
  5585                           
  5586                           ; BSR set to: 0
  5587  0039E6  0100               	movlb	0	; () banked
  5588  0039E8  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  5589  0039EA  D008               	goto	l6177
  5590  0039EC  0100               	movlb	0	; () banked
  5591  0039EE  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  5592  0039F0  E11B               	bnz	l6183
  5593  0039F2  0E07               	movlw	7
  5594  0039F4  0100               	movlb	0	; () banked
  5595  0039F6  5D96               	subwf	loadRTC@i& (0+255),w,b
  5596  0039F8  B0D8               	btfsc	status,0,c
  5597  0039FA  D016               	goto	l6183
  5598  0039FC                     l6177:
  5599                           
  5600                           ; BSR set to: 0
  5601                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  5602  0039FC  0E24               	movlw	low _time
  5603  0039FE  0100               	movlb	0	; () banked
  5604  003A00  2596               	addwf	loadRTC@i& (0+255),w,b
  5605  003A02  6ED9               	movwf	fsr2l,c
  5606  003A04  0E01               	movlw	high _time
  5607  003A06  0100               	movlb	0	; () banked
  5608  003A08  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  5609  003A0A  6EDA               	movwf	fsr2h,c
  5610  003A0C  50DF               	movf	indf2,w,c
  5611  003A0E  0100               	movlb	0	; () banked
  5612  003A10  6F95               	movwf	??_loadRTC& (0+255),b
  5613  003A12  0100               	movlb	0	; () banked
  5614  003A14  5195               	movf	??_loadRTC& (0+255),w,b
  5615  003A16  0100               	movlb	0	; () banked
  5616  003A18  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5617  003A1A  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  5618  003A1C  ECF5  F023         	call	_I2C_Master_Write	;wreg free
  5619  003A20  0100               	movlb	0	; () banked
  5620  003A22  4B96               	infsnz	loadRTC@i& (0+255),f,b
  5621  003A24  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  5622  003A26  D7DF               	goto	l6173
  5623  003A28                     l6183:
  5624                           
  5625                           ; BSR set to: 0
  5626                           ;RTC.c: 39: }
  5627                           ;RTC.c: 40: I2C_Master_Stop();
  5628  003A28  EC03  F024         	call	_I2C_Master_Stop	;wreg free
  5629                           
  5630                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  5631  003A2C  8EF2               	bsf	intcon,7,c	;volatile
  5632  003A2E  0012               	return		;funcret
  5633  003A30                     __end_of_loadRTC:
  5634                           	opt stack 0
  5635                           tblptru	equ	0xFF8
  5636                           tblptrh	equ	0xFF7
  5637                           tblptrl	equ	0xFF6
  5638                           tablat	equ	0xFF5
  5639                           prodh	equ	0xFF4
  5640                           prodl	equ	0xFF3
  5641                           intcon	equ	0xFF2
  5642                           intcon2	equ	0xFF1
  5643                           intcon3	equ	0xFF0
  5644                           postinc0	equ	0xFEE
  5645                           wreg	equ	0xFE8
  5646                           postdec1	equ	0xFE5
  5647                           fsr1l	equ	0xFE1
  5648                           indf2	equ	0xFDF
  5649                           postinc2	equ	0xFDE
  5650                           postdec2	equ	0xFDD
  5651                           fsr2h	equ	0xFDA
  5652                           fsr2l	equ	0xFD9
  5653                           status	equ	0xFD8
  5654                           
  5655 ;; *************** function _I2C_Master_Init *****************
  5656 ;; Defined at:
  5657 ;;		line 15 in file "I2C.c"
  5658 ;; Parameters:    Size  Location     Type
  5659 ;;  c               4   13[BANK0 ] const unsigned long 
  5660 ;; Auto vars:     Size  Location     Type
  5661 ;;		None
  5662 ;; Return value:  Size  Location     Type
  5663 ;;                  1    wreg      void 
  5664 ;; Registers used:
  5665 ;;		wreg, status,2, status,0, cstack
  5666 ;; Tracked objects:
  5667 ;;		On entry : 0/0
  5668 ;;		On exit  : 0/0
  5669 ;;		Unchanged: 0/0
  5670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5671 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5673 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5674 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5675 ;;Total ram usage:        8 bytes
  5676 ;; Hardware stack levels used:    1
  5677 ;; Hardware stack levels required when called:    8
  5678 ;; This function calls:
  5679 ;;		___lldiv
  5680 ;; This function is called by:
  5681 ;;		_main
  5682 ;;		_loadRTC
  5683 ;; This function uses a non-reentrant model
  5684 ;;
  5685                           
  5686                           	psect	text18
  5687  003E54                     __ptext18:
  5688                           	opt stack 0
  5689  003E54                     _I2C_Master_Init:
  5690                           	opt stack 20
  5691                           
  5692                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  5693                           
  5694                           ;incstack = 0
  5695  003E54  0E00               	movlw	0
  5696  003E56  6EC7               	movwf	4039,c	;volatile
  5697                           
  5698                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  5699  003E58  0E28               	movlw	40
  5700  003E5A  6EC6               	movwf	4038,c	;volatile
  5701                           
  5702                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  5703  003E5C  0E00               	movlw	0
  5704  003E5E  6EC5               	movwf	4037,c	;volatile
  5705                           
  5706                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  5707  003E60  0E00               	movlw	0
  5708  003E62  0100               	movlb	0	; () banked
  5709  003E64  6F80               	movwf	___lldiv@dividend& (0+255),b
  5710  003E66  0E48               	movlw	72
  5711  003E68  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  5712  003E6A  0EE8               	movlw	232
  5713  003E6C  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  5714  003E6E  0E01               	movlw	1
  5715  003E70  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  5716  003E72  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  5717  003E76  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  5718  003E7A  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  5719  003E7E  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  5720  003E82  0E02               	movlw	2
  5721  003E84                     u4465:
  5722  003E84  90D8               	bcf	status,0,c
  5723  003E86  0100               	movlb	0	; () banked
  5724  003E88  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  5725  003E8A  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  5726  003E8C  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  5727  003E8E  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  5728  003E90  2EE8               	decfsz	wreg,f,c
  5729  003E92  D7F8               	goto	u4465
  5730  003E94  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  5731  003E98  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5732  003E9C  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5733  003EA0  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5734  003EA4  EC83  F01B         	call	___lldiv	;wreg free
  5735  003EA8  0100               	movlb	0	; () banked
  5736  003EAA  0580               	decf	?___lldiv& (0+255),w,b
  5737  003EAC  6EC8               	movwf	4040,c	;volatile
  5738                           
  5739                           ; BSR set to: 0
  5740                           ;I2C.c: 22: TRISC3 = 1;
  5741  003EAE  8694               	bsf	3988,3,c	;volatile
  5742                           
  5743                           ; BSR set to: 0
  5744                           ;I2C.c: 23: TRISC4 = 1;
  5745  003EB0  8894               	bsf	3988,4,c	;volatile
  5746                           
  5747                           ; BSR set to: 0
  5748  003EB2  0012               	return		;funcret
  5749  003EB4                     __end_of_I2C_Master_Init:
  5750                           	opt stack 0
  5751                           tblptru	equ	0xFF8
  5752                           tblptrh	equ	0xFF7
  5753                           tblptrl	equ	0xFF6
  5754                           tablat	equ	0xFF5
  5755                           prodh	equ	0xFF4
  5756                           prodl	equ	0xFF3
  5757                           intcon	equ	0xFF2
  5758                           intcon2	equ	0xFF1
  5759                           intcon3	equ	0xFF0
  5760                           postinc0	equ	0xFEE
  5761                           wreg	equ	0xFE8
  5762                           postdec1	equ	0xFE5
  5763                           fsr1l	equ	0xFE1
  5764                           indf2	equ	0xFDF
  5765                           postinc2	equ	0xFDE
  5766                           postdec2	equ	0xFDD
  5767                           fsr2h	equ	0xFDA
  5768                           fsr2l	equ	0xFD9
  5769                           status	equ	0xFD8
  5770                           
  5771 ;; *************** function ___lldiv *****************
  5772 ;; Defined at:
  5773 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5774 ;; Parameters:    Size  Location     Type
  5775 ;;  dividend        4    0[BANK0 ] unsigned long 
  5776 ;;  divisor         4    4[BANK0 ] unsigned long 
  5777 ;; Auto vars:     Size  Location     Type
  5778 ;;  quotient        4    8[BANK0 ] unsigned long 
  5779 ;;  counter         1   12[BANK0 ] unsigned char 
  5780 ;; Return value:  Size  Location     Type
  5781 ;;                  4    0[BANK0 ] unsigned long 
  5782 ;; Registers used:
  5783 ;;		wreg, status,2, status,0
  5784 ;; Tracked objects:
  5785 ;;		On entry : 0/0
  5786 ;;		On exit  : 0/0
  5787 ;;		Unchanged: 0/0
  5788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5789 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5790 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5792 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5793 ;;Total ram usage:       13 bytes
  5794 ;; Hardware stack levels used:    1
  5795 ;; Hardware stack levels required when called:    7
  5796 ;; This function calls:
  5797 ;;		Nothing
  5798 ;; This function is called by:
  5799 ;;		_I2C_Master_Init
  5800 ;; This function uses a non-reentrant model
  5801 ;;
  5802                           
  5803                           	psect	text19
  5804  003706                     __ptext19:
  5805                           	opt stack 0
  5806  003706                     ___lldiv:
  5807                           	opt stack 20
  5808                           
  5809                           ; BSR set to: 0
  5810                           ;incstack = 0
  5811  003706  0E00               	movlw	0
  5812  003708  0100               	movlb	0	; () banked
  5813  00370A  6F88               	movwf	___lldiv@quotient& (0+255),b
  5814  00370C  0E00               	movlw	0
  5815  00370E  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  5816  003710  0E00               	movlw	0
  5817  003712  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  5818  003714  0E00               	movlw	0
  5819  003716  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  5820                           
  5821                           ; BSR set to: 0
  5822  003718  0100               	movlb	0	; () banked
  5823  00371A  5184               	movf	___lldiv@divisor& (0+255),w,b
  5824  00371C  0100               	movlb	0	; () banked
  5825  00371E  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  5826  003720  0100               	movlb	0	; () banked
  5827  003722  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  5828  003724  0100               	movlb	0	; () banked
  5829  003726  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  5830  003728  B4D8               	btfsc	status,2,c
  5831  00372A  D042               	goto	l1653
  5832                           
  5833                           ; BSR set to: 0
  5834  00372C  0E01               	movlw	1
  5835  00372E  0100               	movlb	0	; () banked
  5836  003730  6F8C               	movwf	___lldiv@counter& (0+255),b
  5837  003732  D008               	goto	l5609
  5838  003734                     l5607:
  5839                           
  5840                           ; BSR set to: 0
  5841  003734  0100               	movlb	0	; () banked
  5842  003736  90D8               	bcf	status,0,c
  5843  003738  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  5844  00373A  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  5845  00373C  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  5846  00373E  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  5847  003740  0100               	movlb	0	; () banked
  5848  003742  2B8C               	incf	___lldiv@counter& (0+255),f,b
  5849  003744                     l5609:
  5850                           
  5851                           ; BSR set to: 0
  5852  003744  0100               	movlb	0	; () banked
  5853  003746  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  5854  003748  D7F5               	goto	l5607
  5855  00374A                     l5611:
  5856                           
  5857                           ; BSR set to: 0
  5858  00374A  0100               	movlb	0	; () banked
  5859  00374C  90D8               	bcf	status,0,c
  5860  00374E  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  5861  003750  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  5862  003752  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  5863  003754  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  5864                           
  5865                           ; BSR set to: 0
  5866  003756  0100               	movlb	0	; () banked
  5867  003758  5184               	movf	___lldiv@divisor& (0+255),w,b
  5868  00375A  0100               	movlb	0	; () banked
  5869  00375C  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  5870  00375E  0100               	movlb	0	; () banked
  5871  003760  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5872  003762  0100               	movlb	0	; () banked
  5873  003764  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  5874  003766  0100               	movlb	0	; () banked
  5875  003768  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5876  00376A  0100               	movlb	0	; () banked
  5877  00376C  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  5878  00376E  0100               	movlb	0	; () banked
  5879  003770  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5880  003772  0100               	movlb	0	; () banked
  5881  003774  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  5882  003776  A0D8               	btfss	status,0,c
  5883  003778  D012               	goto	l5619
  5884                           
  5885                           ; BSR set to: 0
  5886  00377A  0100               	movlb	0	; () banked
  5887  00377C  5184               	movf	___lldiv@divisor& (0+255),w,b
  5888  00377E  0100               	movlb	0	; () banked
  5889  003780  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  5890  003782  0100               	movlb	0	; () banked
  5891  003784  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5892  003786  0100               	movlb	0	; () banked
  5893  003788  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  5894  00378A  0100               	movlb	0	; () banked
  5895  00378C  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5896  00378E  0100               	movlb	0	; () banked
  5897  003790  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  5898  003792  0100               	movlb	0	; () banked
  5899  003794  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5900  003796  0100               	movlb	0	; () banked
  5901  003798  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  5902                           
  5903                           ; BSR set to: 0
  5904  00379A  0100               	movlb	0	; () banked
  5905  00379C  8188               	bsf	___lldiv@quotient& (0+255),0,b
  5906  00379E                     l5619:
  5907                           
  5908                           ; BSR set to: 0
  5909  00379E  0100               	movlb	0	; () banked
  5910  0037A0  90D8               	bcf	status,0,c
  5911  0037A2  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  5912  0037A4  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  5913  0037A6  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  5914  0037A8  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  5915                           
  5916                           ; BSR set to: 0
  5917  0037AA  0100               	movlb	0	; () banked
  5918  0037AC  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  5919  0037AE  D7CD               	goto	l5611
  5920  0037B0                     l1653:
  5921                           
  5922                           ; BSR set to: 0
  5923  0037B0  C088  F080         	movff	___lldiv@quotient,?___lldiv
  5924  0037B4  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  5925  0037B8  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  5926  0037BC  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  5927                           
  5928                           ; BSR set to: 0
  5929  0037C0  0012               	return		;funcret
  5930  0037C2                     __end_of___lldiv:
  5931                           	opt stack 0
  5932                           tblptru	equ	0xFF8
  5933                           tblptrh	equ	0xFF7
  5934                           tblptrl	equ	0xFF6
  5935                           tablat	equ	0xFF5
  5936                           prodh	equ	0xFF4
  5937                           prodl	equ	0xFF3
  5938                           intcon	equ	0xFF2
  5939                           intcon2	equ	0xFF1
  5940                           intcon3	equ	0xFF0
  5941                           postinc0	equ	0xFEE
  5942                           wreg	equ	0xFE8
  5943                           postdec1	equ	0xFE5
  5944                           fsr1l	equ	0xFE1
  5945                           indf2	equ	0xFDF
  5946                           postinc2	equ	0xFDE
  5947                           postdec2	equ	0xFDD
  5948                           fsr2h	equ	0xFDA
  5949                           fsr2l	equ	0xFD9
  5950                           status	equ	0xFD8
  5951                           
  5952 ;; *************** function _change_state_to_menu_start *****************
  5953 ;; Defined at:
  5954 ;;		line 474 in file "UI.c"
  5955 ;; Parameters:    Size  Location     Type
  5956 ;;		None
  5957 ;; Auto vars:     Size  Location     Type
  5958 ;;		None
  5959 ;; Return value:  Size  Location     Type
  5960 ;;                  1    wreg      void 
  5961 ;; Registers used:
  5962 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5963 ;; Tracked objects:
  5964 ;;		On entry : 0/0
  5965 ;;		On exit  : 0/0
  5966 ;;		Unchanged: 0/0
  5967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5971 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5972 ;;Total ram usage:        0 bytes
  5973 ;; Hardware stack levels used:    1
  5974 ;; Hardware stack levels required when called:   11
  5975 ;; This function calls:
  5976 ;;		_lcdInst
  5977 ;;		_printRTC
  5978 ;;		_printf
  5979 ;; This function is called by:
  5980 ;;		_initUI
  5981 ;; This function uses a non-reentrant model
  5982 ;;
  5983                           
  5984                           	psect	text20
  5985  0045A4                     __ptext20:
  5986                           	opt stack 0
  5987  0045A4                     _change_state_to_menu_start:
  5988                           	opt stack 18
  5989                           
  5990                           ;UI.c: 475: cur_state = 0;
  5991                           
  5992                           ; BSR set to: 0
  5993                           ;incstack = 0
  5994  0045A4  0E00               	movlw	0
  5995  0045A6  0100               	movlb	0	; () banked
  5996  0045A8  6FE1               	movwf	(_cur_state+1)& (0+255),b
  5997  0045AA  0E00               	movlw	0
  5998  0045AC  6FE0               	movwf	_cur_state& (0+255),b
  5999                           
  6000                           ; BSR set to: 0
  6001                           ;UI.c: 477: lcdInst(0b10000000);;
  6002  0045AE  0E80               	movlw	128
  6003  0045B0  ECE1  F023         	call	_lcdInst
  6004                           
  6005                           ;UI.c: 478: printRTC();
  6006  0045B4  EC94  F00F         	call	_printRTC	;wreg free
  6007                           
  6008                           ;UI.c: 479: lcdInst(0b11000000);;
  6009  0045B8  0EC0               	movlw	192
  6010  0045BA  ECE1  F023         	call	_lcdInst
  6011                           
  6012                           ;UI.c: 480: printf("PUSH TO CONTINUE");
  6013  0045BE  0EF7               	movlw	low STR_30
  6014  0045C0  0100               	movlb	0	; () banked
  6015  0045C2  6F8E               	movwf	printf@f& (0+255),b
  6016  0045C4  0EFD               	movlw	high STR_30
  6017  0045C6  0100               	movlb	0	; () banked
  6018  0045C8  6F8F               	movwf	(printf@f+1)& (0+255),b
  6019  0045CA  ECB8  F008         	call	_printf	;wreg free
  6020  0045CE  0012               	return		;funcret
  6021  0045D0                     __end_of_change_state_to_menu_start:
  6022                           	opt stack 0
  6023                           tblptru	equ	0xFF8
  6024                           tblptrh	equ	0xFF7
  6025                           tblptrl	equ	0xFF6
  6026                           tablat	equ	0xFF5
  6027                           prodh	equ	0xFF4
  6028                           prodl	equ	0xFF3
  6029                           intcon	equ	0xFF2
  6030                           intcon2	equ	0xFF1
  6031                           intcon3	equ	0xFF0
  6032                           postinc0	equ	0xFEE
  6033                           wreg	equ	0xFE8
  6034                           postdec1	equ	0xFE5
  6035                           fsr1l	equ	0xFE1
  6036                           indf2	equ	0xFDF
  6037                           postinc2	equ	0xFDE
  6038                           postdec2	equ	0xFDD
  6039                           fsr2h	equ	0xFDA
  6040                           fsr2l	equ	0xFD9
  6041                           status	equ	0xFD8
  6042                           
  6043 ;; *************** function _initTime *****************
  6044 ;; Defined at:
  6045 ;;		line 17 in file "RTC.c"
  6046 ;; Parameters:    Size  Location     Type
  6047 ;;  s               1    wreg     unsigned char 
  6048 ;;  m               1    0[BANK0 ] unsigned char 
  6049 ;;  h               1    1[BANK0 ] unsigned char 
  6050 ;;  w               1    2[BANK0 ] unsigned char 
  6051 ;;  DD              1    3[BANK0 ] unsigned char 
  6052 ;;  MM              1    4[BANK0 ] unsigned char 
  6053 ;;  YY              1    5[BANK0 ] unsigned char 
  6054 ;; Auto vars:     Size  Location     Type
  6055 ;;  s               1    6[BANK0 ] unsigned char 
  6056 ;; Return value:  Size  Location     Type
  6057 ;;                  1    wreg      void 
  6058 ;; Registers used:
  6059 ;;		wreg
  6060 ;; Tracked objects:
  6061 ;;		On entry : 0/0
  6062 ;;		On exit  : 0/0
  6063 ;;		Unchanged: 0/0
  6064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6065 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6066 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6068 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6069 ;;Total ram usage:        7 bytes
  6070 ;; Hardware stack levels used:    1
  6071 ;; Hardware stack levels required when called:    7
  6072 ;; This function calls:
  6073 ;;		Nothing
  6074 ;; This function is called by:
  6075 ;;		_main
  6076 ;; This function uses a non-reentrant model
  6077 ;;
  6078                           
  6079                           	psect	text21
  6080  004708                     __ptext21:
  6081                           	opt stack 0
  6082  004708                     _initTime:
  6083                           	opt stack 23
  6084                           
  6085                           ;incstack = 0
  6086                           ;initTime@s stored from wreg
  6087  004708  0100               	movlb	0	; () banked
  6088  00470A  6F86               	movwf	initTime@s& (0+255),b
  6089                           
  6090                           ;RTC.c: 19: time[0] = s;
  6091  00470C  C086  F124         	movff	initTime@s,_time
  6092                           
  6093                           ;RTC.c: 20: time[1] = m;
  6094  004710  C080  F125         	movff	initTime@m,_time+1
  6095                           
  6096                           ;RTC.c: 21: time[2] = h;
  6097  004714  C081  F126         	movff	initTime@h,_time+2
  6098                           
  6099                           ;RTC.c: 22: time[3] = w;
  6100  004718  C082  F127         	movff	initTime@w,_time+3
  6101                           
  6102                           ;RTC.c: 23: time[4] = DD;
  6103  00471C  C083  F128         	movff	initTime@DD,_time+4
  6104                           
  6105                           ;RTC.c: 24: time[5] = MM;
  6106  004720  C084  F129         	movff	initTime@MM,_time+5
  6107                           
  6108                           ;RTC.c: 25: time[6] = YY;
  6109  004724  C085  F12A         	movff	initTime@YY,_time+6
  6110  004728  0012               	return		;funcret
  6111  00472A                     __end_of_initTime:
  6112                           	opt stack 0
  6113                           tblptru	equ	0xFF8
  6114                           tblptrh	equ	0xFF7
  6115                           tblptrl	equ	0xFF6
  6116                           tablat	equ	0xFF5
  6117                           prodh	equ	0xFF4
  6118                           prodl	equ	0xFF3
  6119                           intcon	equ	0xFF2
  6120                           intcon2	equ	0xFF1
  6121                           intcon3	equ	0xFF0
  6122                           postinc0	equ	0xFEE
  6123                           wreg	equ	0xFE8
  6124                           postdec1	equ	0xFE5
  6125                           fsr1l	equ	0xFE1
  6126                           indf2	equ	0xFDF
  6127                           postinc2	equ	0xFDE
  6128                           postdec2	equ	0xFDD
  6129                           fsr2h	equ	0xFDA
  6130                           fsr2l	equ	0xFD9
  6131                           status	equ	0xFD8
  6132                           
  6133 ;; *************** function _initLCD *****************
  6134 ;; Defined at:
  6135 ;;		line 48 in file "lcd.c"
  6136 ;; Parameters:    Size  Location     Type
  6137 ;;		None
  6138 ;; Auto vars:     Size  Location     Type
  6139 ;;		None
  6140 ;; Return value:  Size  Location     Type
  6141 ;;                  1    wreg      void 
  6142 ;; Registers used:
  6143 ;;		wreg, status,2, status,0, cstack
  6144 ;; Tracked objects:
  6145 ;;		On entry : 0/0
  6146 ;;		On exit  : 0/0
  6147 ;;		Unchanged: 0/0
  6148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6151 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6152 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6153 ;;Total ram usage:        1 bytes
  6154 ;; Hardware stack levels used:    1
  6155 ;; Hardware stack levels required when called:    9
  6156 ;; This function calls:
  6157 ;;		_lcdInst
  6158 ;; This function is called by:
  6159 ;;		_main
  6160 ;; This function uses a non-reentrant model
  6161 ;;
  6162                           
  6163                           	psect	text22
  6164  0041A2                     __ptext22:
  6165                           	opt stack 0
  6166  0041A2                     _initLCD:
  6167                           	opt stack 21
  6168                           
  6169                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  6170                           
  6171                           ;incstack = 0
  6172  0041A2  0E9C               	movlw	156
  6173  0041A4  0100               	movlb	0	; () banked
  6174  0041A6  6F83               	movwf	??_initLCD& (0+255),b
  6175  0041A8  0ED7               	movlw	215
  6176  0041AA                     u7217:
  6177  0041AA  2EE8               	decfsz	wreg,f,c
  6178  0041AC  D7FE               	bra	u7217
  6179  0041AE  2F83               	decfsz	??_initLCD& (0+255),f,b
  6180  0041B0  D7FC               	bra	u7217
  6181                           
  6182                           ;lcd.c: 50: lcdInst(0b00110011);
  6183  0041B2  0E33               	movlw	51
  6184  0041B4  ECE1  F023         	call	_lcdInst
  6185                           
  6186                           ;lcd.c: 51: lcdInst(0b00110010);
  6187  0041B8  0E32               	movlw	50
  6188  0041BA  ECE1  F023         	call	_lcdInst
  6189                           
  6190                           ;lcd.c: 53: lcdInst(0b00101000);
  6191  0041BE  0E28               	movlw	40
  6192  0041C0  ECE1  F023         	call	_lcdInst
  6193                           
  6194                           ;lcd.c: 54: lcdInst(0b00001100);
  6195  0041C4  0E0C               	movlw	12
  6196  0041C6  ECE1  F023         	call	_lcdInst
  6197                           
  6198                           ;lcd.c: 55: lcdInst(0b00000110);
  6199  0041CA  0E06               	movlw	6
  6200  0041CC  ECE1  F023         	call	_lcdInst
  6201                           
  6202                           ;lcd.c: 56: lcdInst(0b00000001);
  6203  0041D0  0E01               	movlw	1
  6204  0041D2  ECE1  F023         	call	_lcdInst
  6205                           
  6206                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  6207  0041D6  0E9C               	movlw	156
  6208  0041D8  0100               	movlb	0	; () banked
  6209  0041DA  6F83               	movwf	??_initLCD& (0+255),b
  6210  0041DC  0ED7               	movlw	215
  6211  0041DE                     u7227:
  6212  0041DE  2EE8               	decfsz	wreg,f,c
  6213  0041E0  D7FE               	bra	u7227
  6214  0041E2  2F83               	decfsz	??_initLCD& (0+255),f,b
  6215  0041E4  D7FC               	bra	u7227
  6216  0041E6  0012               	return		;funcret
  6217  0041E8                     __end_of_initLCD:
  6218                           	opt stack 0
  6219                           tblptru	equ	0xFF8
  6220                           tblptrh	equ	0xFF7
  6221                           tblptrl	equ	0xFF6
  6222                           tablat	equ	0xFF5
  6223                           prodh	equ	0xFF4
  6224                           prodl	equ	0xFF3
  6225                           intcon	equ	0xFF2
  6226                           intcon2	equ	0xFF1
  6227                           intcon3	equ	0xFF0
  6228                           postinc0	equ	0xFEE
  6229                           wreg	equ	0xFE8
  6230                           postdec1	equ	0xFE5
  6231                           fsr1l	equ	0xFE1
  6232                           indf2	equ	0xFDF
  6233                           postinc2	equ	0xFDE
  6234                           postdec2	equ	0xFDD
  6235                           fsr2h	equ	0xFDA
  6236                           fsr2l	equ	0xFD9
  6237                           status	equ	0xFD8
  6238                           
  6239 ;; *************** function _UI *****************
  6240 ;; Defined at:
  6241 ;;		line 76 in file "UI.c"
  6242 ;; Parameters:    Size  Location     Type
  6243 ;;		None
  6244 ;; Auto vars:     Size  Location     Type
  6245 ;;  i               1   73[BANK0 ] unsigned char 
  6246 ;;  i               1   85[BANK0 ] unsigned char 
  6247 ;;  i               1   84[BANK0 ] unsigned char 
  6248 ;;  i               1   83[BANK0 ] unsigned char 
  6249 ;;  i               1   82[BANK0 ] unsigned char 
  6250 ;;  i               1   81[BANK0 ] unsigned char 
  6251 ;;  i               1   80[BANK0 ] unsigned char 
  6252 ;;  i               1   79[BANK0 ] unsigned char 
  6253 ;;  i               1   78[BANK0 ] unsigned char 
  6254 ;;  i               1   77[BANK0 ] unsigned char 
  6255 ;;  i               1   76[BANK0 ] unsigned char 
  6256 ;;  i               1   75[BANK0 ] unsigned char 
  6257 ;;  i               1   74[BANK0 ] unsigned char 
  6258 ;;  month           4   86[BANK0 ] unsigned char [4]
  6259 ;;  i               1   72[BANK0 ] unsigned char 
  6260 ;; Return value:  Size  Location     Type
  6261 ;;                  1    wreg      void 
  6262 ;; Registers used:
  6263 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6264 ;; Tracked objects:
  6265 ;;		On entry : 0/0
  6266 ;;		On exit  : 0/0
  6267 ;;		Unchanged: 0/0
  6268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6270 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6271 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6272 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6273 ;;Total ram usage:       22 bytes
  6274 ;; Hardware stack levels used:    1
  6275 ;; Hardware stack levels required when called:   11
  6276 ;; This function calls:
  6277 ;;		___awdiv
  6278 ;;		___awmod
  6279 ;;		_change_state_to_menu_12
  6280 ;;		_change_state_to_menu_22
  6281 ;;		_lcdInst
  6282 ;;		_printRTC
  6283 ;;		_printf
  6284 ;;		_strcpy
  6285 ;; This function is called by:
  6286 ;;		_main
  6287 ;; This function uses a non-reentrant model
  6288 ;;
  6289                           
  6290                           	psect	text23
  6291  0008CA                     __ptext23:
  6292                           	opt stack 0
  6293  0008CA                     _UI:
  6294                           	opt stack 19
  6295                           
  6296                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  6297                           
  6298                           ;incstack = 0
  6299  0008CA  0E02               	movlw	2
  6300  0008CC  0100               	movlb	0	; () banked
  6301  0008CE  19FC               	xorwf	_machine_state& (0+255),w,b
  6302  0008D0  A4D8               	btfss	status,2,c
  6303  0008D2  D075               	goto	l7377
  6304                           
  6305                           ; BSR set to: 0
  6306                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6307  0008D4  0E01               	movlw	1
  6308  0008D6  ECE1  F023         	call	_lcdInst
  6309  0008DA  0E68               	movlw	104
  6310  0008DC  0100               	movlb	0	; () banked
  6311  0008DE  6FC4               	movwf	??_UI& (0+255),b
  6312  0008E0  0EE4               	movlw	228
  6313  0008E2                     u7237:
  6314  0008E2  2EE8               	decfsz	wreg,f,c
  6315  0008E4  D7FE               	bra	u7237
  6316  0008E6  2FC4               	decfsz	??_UI& (0+255),f,b
  6317  0008E8  D7FC               	bra	u7237
  6318  0008EA  F000               	nop	
  6319                           
  6320                           ;UI.c: 79: lcdInst(0b10000000);;
  6321  0008EC  0E80               	movlw	128
  6322  0008EE  ECE1  F023         	call	_lcdInst
  6323                           
  6324                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  6325  0008F2  0EA3               	movlw	low STR_1
  6326  0008F4  0100               	movlb	0	; () banked
  6327  0008F6  6F8E               	movwf	printf@f& (0+255),b
  6328  0008F8  0EFB               	movlw	high STR_1
  6329  0008FA  0100               	movlb	0	; () banked
  6330  0008FC  6F8F               	movwf	(printf@f+1)& (0+255),b
  6331  0008FE  0E01               	movlw	1
  6332  000900  0100               	movlb	0	; () banked
  6333  000902  25FD               	addwf	_sel& (0+255),w,b
  6334  000904  0100               	movlb	0	; () banked
  6335  000906  6F90               	movwf	(?_printf+2)& (0+255),b
  6336  000908  0100               	movlb	0	; () banked
  6337  00090A  6B91               	clrf	(?_printf+3)& (0+255),b
  6338  00090C  0E00               	movlw	0
  6339  00090E  2391               	addwfc	(?_printf+3)& (0+255),f,b
  6340  000910  ECB8  F008         	call	_printf	;wreg free
  6341                           
  6342                           ;UI.c: 81: lcdInst(0b11000000);;
  6343  000914  0EC0               	movlw	192
  6344  000916  ECE1  F023         	call	_lcdInst
  6345                           
  6346                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  6347  00091A  0E0E               	movlw	14
  6348  00091C  0100               	movlb	0	; () banked
  6349  00091E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6350  000920  0E10               	movlw	16
  6351  000922  6F82               	movwf	___awmod@divisor& (0+255),b
  6352  000924  C0F8  F080         	movff	_total_time,___awmod@dividend
  6353  000928  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  6354  00092C  EC36  F01C         	call	___awmod	;wreg free
  6355  000930  C080  F0C6         	movff	?___awmod,_UI$2295
  6356  000934  C081  F0C7         	movff	?___awmod+1,_UI$2295+1
  6357                           
  6358                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  6359  000938  0E27               	movlw	low STR_2
  6360  00093A  0100               	movlb	0	; () banked
  6361  00093C  6F8E               	movwf	printf@f& (0+255),b
  6362  00093E  0EFF               	movlw	high STR_2
  6363  000940  0100               	movlb	0	; () banked
  6364  000942  6F8F               	movwf	(printf@f+1)& (0+255),b
  6365  000944  0E0E               	movlw	14
  6366  000946  0100               	movlb	0	; () banked
  6367  000948  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6368  00094A  0E10               	movlw	16
  6369  00094C  6F82               	movwf	___awmod@divisor& (0+255),b
  6370  00094E  C0F8  F080         	movff	_total_time,___awmod@dividend
  6371  000952  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  6372  000956  EC36  F01C         	call	___awmod	;wreg free
  6373  00095A  C080  F086         	movff	?___awmod,___awdiv@dividend
  6374  00095E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  6375  000962  0E00               	movlw	0
  6376  000964  0100               	movlb	0	; () banked
  6377  000966  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6378  000968  0E3C               	movlw	60
  6379  00096A  6F88               	movwf	___awdiv@divisor& (0+255),b
  6380  00096C  EC24  F01B         	call	___awdiv	;wreg free
  6381  000970  C086  F090         	movff	?___awdiv,?_printf+2
  6382  000974  C087  F091         	movff	?___awdiv+1,?_printf+3
  6383  000978  C0C6  F080         	movff	_UI$2295,___awmod@dividend
  6384  00097C  C0C7  F081         	movff	_UI$2295+1,___awmod@dividend+1
  6385  000980  0E00               	movlw	0
  6386  000982  0100               	movlb	0	; () banked
  6387  000984  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6388  000986  0E3C               	movlw	60
  6389  000988  6F82               	movwf	___awmod@divisor& (0+255),b
  6390  00098A  EC36  F01C         	call	___awmod	;wreg free
  6391  00098E  C080  F092         	movff	?___awmod,?_printf+4
  6392  000992  C081  F093         	movff	?___awmod+1,?_printf+5
  6393  000996  ECB8  F008         	call	_printf	;wreg free
  6394                           
  6395                           ;UI.c: 83: machine_state = UI_state;
  6396  00099A  0E00               	movlw	0
  6397  00099C  0100               	movlb	0	; () banked
  6398  00099E  6FFC               	movwf	_machine_state& (0+255),b
  6399  0009A0                     l180:
  6400  0009A0  A281               	btfss	3969,1,c	;volatile
  6401  0009A2  D7FE               	goto	l180
  6402                           
  6403                           ;UI.c: 86: }
  6404                           ;UI.c: 87: if(cur_state==12){
  6405  0009A4  0E0C               	movlw	12
  6406  0009A6  0100               	movlb	0	; () banked
  6407  0009A8  19E0               	xorwf	_cur_state& (0+255),w,b
  6408  0009AA  0100               	movlb	0	; () banked
  6409  0009AC  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
  6410  0009AE  A4D8               	btfss	status,2,c
  6411  0009B0  D003               	goto	l7375
  6412                           
  6413                           ; BSR set to: 0
  6414                           ;UI.c: 88: change_state_to_menu_12();
  6415  0009B2  EC31  F021         	call	_change_state_to_menu_12	;wreg free
  6416                           
  6417                           ;UI.c: 89: }
  6418  0009B6  D3D5               	goto	l7697
  6419  0009B8                     l7375:
  6420                           
  6421                           ;UI.c: 90: else{
  6422                           ;UI.c: 91: change_state_to_menu_22();
  6423  0009B8  EC15  F021         	call	_change_state_to_menu_22	;wreg free
  6424                           
  6425                           ;UI.c: 92: }
  6426                           ;UI.c: 93: }
  6427  0009BC  D3D2               	goto	l7697
  6428  0009BE                     l7377:
  6429                           
  6430                           ;UI.c: 94: else if(cur_state == 0){
  6431  0009BE  0100               	movlb	0	; () banked
  6432  0009C0  51E0               	movf	_cur_state& (0+255),w,b
  6433  0009C2  0100               	movlb	0	; () banked
  6434  0009C4  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
  6435  0009C6  A4D8               	btfss	status,2,c
  6436  0009C8  D3CC               	goto	l7697
  6437                           
  6438                           ; BSR set to: 0
  6439                           ;UI.c: 95: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  6440  0009CA  0E00               	movlw	0
  6441  0009CC  0100               	movlb	0	; () banked
  6442  0009CE  6FC8               	movwf	UI@i& (0+255),b
  6443  0009D0                     l7381:
  6444                           
  6445                           ; BSR set to: 0
  6446  0009D0  0E63               	movlw	99
  6447  0009D2  0100               	movlb	0	; () banked
  6448  0009D4  65C8               	cpfsgt	UI@i& (0+255),b
  6449  0009D6  D001               	goto	l7385
  6450  0009D8  D00C               	goto	l7389
  6451  0009DA                     l7385:
  6452                           
  6453                           ; BSR set to: 0
  6454  0009DA  0E68               	movlw	104
  6455  0009DC  0100               	movlb	0	; () banked
  6456  0009DE  6FC4               	movwf	??_UI& (0+255),b
  6457  0009E0  0EE4               	movlw	228
  6458  0009E2                     u7247:
  6459  0009E2  2EE8               	decfsz	wreg,f,c
  6460  0009E4  D7FE               	bra	u7247
  6461  0009E6  2FC4               	decfsz	??_UI& (0+255),f,b
  6462  0009E8  D7FC               	bra	u7247
  6463  0009EA  F000               	nop	
  6464  0009EC  0100               	movlb	0	; () banked
  6465  0009EE  2BC8               	incf	UI@i& (0+255),f,b
  6466  0009F0  D7EF               	goto	l7381
  6467  0009F2                     l7389:
  6468                           
  6469                           ; BSR set to: 0
  6470                           ;UI.c: 96: if(cur_state == 0){
  6471  0009F2  0100               	movlb	0	; () banked
  6472  0009F4  51E0               	movf	_cur_state& (0+255),w,b
  6473  0009F6  0100               	movlb	0	; () banked
  6474  0009F8  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
  6475  0009FA  A4D8               	btfss	status,2,c
  6476  0009FC  D3B2               	goto	l7697
  6477                           
  6478                           ; BSR set to: 0
  6479                           ;UI.c: 97: printRTC();
  6480  0009FE  EC94  F00F         	call	_printRTC	;wreg free
  6481                           
  6482                           ;UI.c: 98: }
  6483                           ;UI.c: 99: }
  6484                           ;UI.c: 100: while(logstate){
  6485  000A02  D3AF               	goto	l7697
  6486  000A04                     l7393:
  6487                           
  6488                           ;UI.c: 102: if(!log_completion){
  6489  000A04  0100               	movlb	0	; () banked
  6490  000A06  51E8               	movf	_log_completion& (0+255),w,b
  6491  000A08  0100               	movlb	0	; () banked
  6492  000A0A  11E9               	iorwf	(_log_completion+1)& (0+255),w,b
  6493  000A0C  A4D8               	btfss	status,2,c
  6494  000A0E  D041               	goto	l7423
  6495                           
  6496                           ; BSR set to: 0
  6497                           ;UI.c: 103: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6498  000A10  0E01               	movlw	1
  6499  000A12  ECE1  F023         	call	_lcdInst
  6500  000A16  0E68               	movlw	104
  6501  000A18  0100               	movlb	0	; () banked
  6502  000A1A  6FC4               	movwf	??_UI& (0+255),b
  6503  000A1C  0EE4               	movlw	228
  6504  000A1E                     u7257:
  6505  000A1E  2EE8               	decfsz	wreg,f,c
  6506  000A20  D7FE               	bra	u7257
  6507  000A22  2FC4               	decfsz	??_UI& (0+255),f,b
  6508  000A24  D7FC               	bra	u7257
  6509  000A26  F000               	nop	
  6510                           
  6511                           ;UI.c: 104: lcdInst(0b10000000);;
  6512  000A28  0E80               	movlw	128
  6513  000A2A  ECE1  F023         	call	_lcdInst
  6514                           
  6515                           ;UI.c: 105: printf("-- LOG %2d HERE--", log);
  6516  000A2E  0E91               	movlw	low STR_3
  6517  000A30  0100               	movlb	0	; () banked
  6518  000A32  6F8E               	movwf	printf@f& (0+255),b
  6519  000A34  0EFB               	movlw	high STR_3
  6520  000A36  0100               	movlb	0	; () banked
  6521  000A38  6F8F               	movwf	(printf@f+1)& (0+255),b
  6522  000A3A  C0E6  F090         	movff	_log,?_printf+2
  6523  000A3E  C0E7  F091         	movff	_log+1,?_printf+3
  6524  000A42  ECB8  F008         	call	_printf	;wreg free
  6525                           
  6526                           ;UI.c: 106: lcdInst(0b11000000);;
  6527  000A46  0EC0               	movlw	192
  6528  000A48  ECE1  F023         	call	_lcdInst
  6529                           
  6530                           ;UI.c: 107: printf("DIDN'T COMPLETE");
  6531  000A4C  0E4A               	movlw	low STR_4
  6532  000A4E  0100               	movlb	0	; () banked
  6533  000A50  6F8E               	movwf	printf@f& (0+255),b
  6534  000A52  0EFE               	movlw	high STR_4
  6535  000A54  0100               	movlb	0	; () banked
  6536  000A56  6F8F               	movwf	(printf@f+1)& (0+255),b
  6537  000A58  ECB8  F008         	call	_printf	;wreg free
  6538  000A5C                     l7407:
  6539  000A5C  0E00               	movlw	0
  6540  000A5E  0100               	movlb	0	; () banked
  6541  000A60  6FC9               	movwf	UI@i_409& (0+255),b
  6542  000A62                     l7409:
  6543                           
  6544                           ; BSR set to: 0
  6545  000A62  0E63               	movlw	99
  6546  000A64  0100               	movlb	0	; () banked
  6547  000A66  65C9               	cpfsgt	UI@i_409& (0+255),b
  6548  000A68  D001               	goto	l7413
  6549  000A6A  D00C               	goto	l7417
  6550  000A6C                     l7413:
  6551                           
  6552                           ; BSR set to: 0
  6553  000A6C  0E68               	movlw	104
  6554  000A6E  0100               	movlb	0	; () banked
  6555  000A70  6FC4               	movwf	??_UI& (0+255),b
  6556  000A72  0EE4               	movlw	228
  6557  000A74                     u7267:
  6558  000A74  2EE8               	decfsz	wreg,f,c
  6559  000A76  D7FE               	bra	u7267
  6560  000A78  2FC4               	decfsz	??_UI& (0+255),f,b
  6561  000A7A  D7FC               	bra	u7267
  6562  000A7C  F000               	nop	
  6563  000A7E  0100               	movlb	0	; () banked
  6564  000A80  2BC9               	incf	UI@i_409& (0+255),f,b
  6565  000A82  D7EF               	goto	l7409
  6566  000A84                     l7417:
  6567                           
  6568                           ; BSR set to: 0
  6569  000A84  0100               	movlb	0	; () banked
  6570  000A86  51F6               	movf	_logstate& (0+255),w,b
  6571  000A88  0100               	movlb	0	; () banked
  6572  000A8A  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6573  000A8C  B4D8               	btfsc	status,2,c
  6574  000A8E  0012               	return	
  6575  000A90  D7E5               	goto	l7407
  6576  000A92                     l7423:
  6577                           
  6578                           ; BSR set to: 0
  6579                           ;UI.c: 111: else{
  6580                           ;UI.c: 112: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6581  000A92  0E01               	movlw	1
  6582  000A94  ECE1  F023         	call	_lcdInst
  6583  000A98  0E68               	movlw	104
  6584  000A9A  0100               	movlb	0	; () banked
  6585  000A9C  6FC4               	movwf	??_UI& (0+255),b
  6586  000A9E  0EE4               	movlw	228
  6587  000AA0                     u7277:
  6588  000AA0  2EE8               	decfsz	wreg,f,c
  6589  000AA2  D7FE               	bra	u7277
  6590  000AA4  2FC4               	decfsz	??_UI& (0+255),f,b
  6591  000AA6  D7FC               	bra	u7277
  6592  000AA8  F000               	nop	
  6593                           
  6594                           ;UI.c: 113: lcdInst(0b10000000);;
  6595  000AAA  0E80               	movlw	128
  6596  000AAC  ECE1  F023         	call	_lcdInst
  6597                           
  6598                           ;UI.c: 114: printf("-- LOG %2d HERE--", log);
  6599  000AB0  0E91               	movlw	low STR_3
  6600  000AB2  0100               	movlb	0	; () banked
  6601  000AB4  6F8E               	movwf	printf@f& (0+255),b
  6602  000AB6  0EFB               	movlw	high STR_3
  6603  000AB8  0100               	movlb	0	; () banked
  6604  000ABA  6F8F               	movwf	(printf@f+1)& (0+255),b
  6605  000ABC  C0E6  F090         	movff	_log,?_printf+2
  6606  000AC0  C0E7  F091         	movff	_log+1,?_printf+3
  6607  000AC4  ECB8  F008         	call	_printf	;wreg free
  6608                           
  6609                           ;UI.c: 115: lcdInst(0b11000000);;
  6610  000AC8  0EC0               	movlw	192
  6611  000ACA  ECE1  F023         	call	_lcdInst
  6612                           
  6613                           ;UI.c: 116: printf("PAUSE < | BACK >");
  6614  000ACE  0EE6               	movlw	low STR_6
  6615  000AD0  0100               	movlb	0	; () banked
  6616  000AD2  6F8E               	movwf	printf@f& (0+255),b
  6617  000AD4  0EFD               	movlw	high STR_6
  6618  000AD6  0100               	movlb	0	; () banked
  6619  000AD8  6F8F               	movwf	(printf@f+1)& (0+255),b
  6620  000ADA  ECB8  F008         	call	_printf	;wreg free
  6621                           
  6622                           ;UI.c: 118: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6623  000ADE  0E00               	movlw	0
  6624  000AE0  0100               	movlb	0	; () banked
  6625  000AE2  6FCA               	movwf	UI@i_412& (0+255),b
  6626  000AE4                     l7437:
  6627                           
  6628                           ; BSR set to: 0
  6629  000AE4  0E63               	movlw	99
  6630  000AE6  0100               	movlb	0	; () banked
  6631  000AE8  65CA               	cpfsgt	UI@i_412& (0+255),b
  6632  000AEA  D001               	goto	l7441
  6633  000AEC  D00C               	goto	l7445
  6634  000AEE                     l7441:
  6635                           
  6636                           ; BSR set to: 0
  6637  000AEE  0E68               	movlw	104
  6638  000AF0  0100               	movlb	0	; () banked
  6639  000AF2  6FC4               	movwf	??_UI& (0+255),b
  6640  000AF4  0EE4               	movlw	228
  6641  000AF6                     u7287:
  6642  000AF6  2EE8               	decfsz	wreg,f,c
  6643  000AF8  D7FE               	bra	u7287
  6644  000AFA  2FC4               	decfsz	??_UI& (0+255),f,b
  6645  000AFC  D7FC               	bra	u7287
  6646  000AFE  F000               	nop	
  6647  000B00  0100               	movlb	0	; () banked
  6648  000B02  2BCA               	incf	UI@i_412& (0+255),f,b
  6649  000B04  D7EF               	goto	l7437
  6650  000B06                     l7445:
  6651                           
  6652                           ; BSR set to: 0
  6653  000B06  0100               	movlb	0	; () banked
  6654  000B08  51F6               	movf	_logstate& (0+255),w,b
  6655  000B0A  0100               	movlb	0	; () banked
  6656  000B0C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6657  000B0E  B4D8               	btfsc	status,2,c
  6658  000B10  0012               	return	
  6659                           
  6660                           ; BSR set to: 0
  6661                           ;UI.c: 119: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6662                           
  6663                           ; BSR set to: 0
  6664                           
  6665                           ; BSR set to: 0
  6666  000B12  0E00               	movlw	0
  6667  000B14  0100               	movlb	0	; () banked
  6668  000B16  6FCB               	movwf	UI@i_413& (0+255),b
  6669  000B18                     l7451:
  6670                           
  6671                           ; BSR set to: 0
  6672  000B18  0E63               	movlw	99
  6673  000B1A  0100               	movlb	0	; () banked
  6674  000B1C  65CB               	cpfsgt	UI@i_413& (0+255),b
  6675  000B1E  D001               	goto	l7455
  6676  000B20  D00C               	goto	l7459
  6677  000B22                     l7455:
  6678                           
  6679                           ; BSR set to: 0
  6680  000B22  0E68               	movlw	104
  6681  000B24  0100               	movlb	0	; () banked
  6682  000B26  6FC4               	movwf	??_UI& (0+255),b
  6683  000B28  0EE4               	movlw	228
  6684  000B2A                     u7297:
  6685  000B2A  2EE8               	decfsz	wreg,f,c
  6686  000B2C  D7FE               	bra	u7297
  6687  000B2E  2FC4               	decfsz	??_UI& (0+255),f,b
  6688  000B30  D7FC               	bra	u7297
  6689  000B32  F000               	nop	
  6690  000B34  0100               	movlb	0	; () banked
  6691  000B36  2BCB               	incf	UI@i_413& (0+255),f,b
  6692  000B38  D7EF               	goto	l7451
  6693  000B3A                     l7459:
  6694                           
  6695                           ; BSR set to: 0
  6696  000B3A  0100               	movlb	0	; () banked
  6697  000B3C  51F6               	movf	_logstate& (0+255),w,b
  6698  000B3E  0100               	movlb	0	; () banked
  6699  000B40  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6700  000B42  B4D8               	btfsc	status,2,c
  6701  000B44  0012               	return	
  6702                           
  6703                           ; BSR set to: 0
  6704                           ;UI.c: 121: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6705                           
  6706                           ; BSR set to: 0
  6707                           
  6708                           ; BSR set to: 0
  6709  000B46  0E01               	movlw	1
  6710  000B48  ECE1  F023         	call	_lcdInst
  6711  000B4C  0E68               	movlw	104
  6712  000B4E  0100               	movlb	0	; () banked
  6713  000B50  6FC4               	movwf	??_UI& (0+255),b
  6714  000B52  0EE4               	movlw	228
  6715  000B54                     u7307:
  6716  000B54  2EE8               	decfsz	wreg,f,c
  6717  000B56  D7FE               	bra	u7307
  6718  000B58  2FC4               	decfsz	??_UI& (0+255),f,b
  6719  000B5A  D7FC               	bra	u7307
  6720  000B5C  F000               	nop	
  6721                           
  6722                           ;UI.c: 122: lcdInst(0b10000000);;
  6723  000B5E  0E80               	movlw	128
  6724  000B60  ECE1  F023         	call	_lcdInst
  6725                           
  6726                           ;UI.c: 123: printf("START:");
  6727  000B64  0EC4               	movlw	low STR_7
  6728  000B66  0100               	movlb	0	; () banked
  6729  000B68  6F8E               	movwf	printf@f& (0+255),b
  6730  000B6A  0EFF               	movlw	high STR_7
  6731  000B6C  0100               	movlb	0	; () banked
  6732  000B6E  6F8F               	movwf	(printf@f+1)& (0+255),b
  6733  000B70  ECB8  F008         	call	_printf	;wreg free
  6734                           
  6735                           ;UI.c: 124: lcdInst(0b11000000);;
  6736  000B74  0EC0               	movlw	192
  6737  000B76  ECE1  F023         	call	_lcdInst
  6738                           
  6739                           ;UI.c: 125: char month[] = "MMM";
  6740  000B7A  C12F  F0D6         	movff	UI@F3225,UI@month
  6741  000B7E  C130  F0D7         	movff	UI@F3225+1,UI@month+1
  6742  000B82  C131  F0D8         	movff	UI@F3225+2,UI@month+2
  6743  000B86  C132  F0D9         	movff	UI@F3225+3,UI@month+3
  6744                           
  6745                           ;UI.c: 126: switch(log_startTime[5]){
  6746  000B8A  D0C3               	goto	l7503
  6747  000B8C                     l7475:
  6748                           
  6749                           ;UI.c: 128: strcpy(month, "JAN");
  6750  000B8C  0ED6               	movlw	low UI@month
  6751  000B8E  0100               	movlb	0	; () banked
  6752  000B90  6F80               	movwf	strcpy@to& (0+255),b
  6753  000B92  0E00               	movlw	high UI@month
  6754  000B94  0100               	movlb	0	; () banked
  6755  000B96  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6756  000B98  0EDB               	movlw	low STR_8
  6757  000B9A  0100               	movlb	0	; () banked
  6758  000B9C  6F82               	movwf	strcpy@from& (0+255),b
  6759  000B9E  0EFF               	movlw	high STR_8
  6760  000BA0  0100               	movlb	0	; () banked
  6761  000BA2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6762  000BA4  EC4D  F021         	call	_strcpy	;wreg free
  6763                           
  6764                           ;UI.c: 129: break;
  6765  000BA8  D0E6               	goto	l7505
  6766  000BAA                     l7477:
  6767                           
  6768                           ;UI.c: 131: strcpy(month, "FEB");
  6769  000BAA  0ED6               	movlw	low UI@month
  6770  000BAC  0100               	movlb	0	; () banked
  6771  000BAE  6F80               	movwf	strcpy@to& (0+255),b
  6772  000BB0  0E00               	movlw	high UI@month
  6773  000BB2  0100               	movlb	0	; () banked
  6774  000BB4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6775  000BB6  0ECB               	movlw	low STR_9
  6776  000BB8  0100               	movlb	0	; () banked
  6777  000BBA  6F82               	movwf	strcpy@from& (0+255),b
  6778  000BBC  0EFF               	movlw	high STR_9
  6779  000BBE  0100               	movlb	0	; () banked
  6780  000BC0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6781  000BC2  EC4D  F021         	call	_strcpy	;wreg free
  6782                           
  6783                           ;UI.c: 132: break;
  6784  000BC6  D0D7               	goto	l7505
  6785  000BC8                     l7479:
  6786                           
  6787                           ;UI.c: 134: strcpy(month, "MAR");
  6788  000BC8  0ED6               	movlw	low UI@month
  6789  000BCA  0100               	movlb	0	; () banked
  6790  000BCC  6F80               	movwf	strcpy@to& (0+255),b
  6791  000BCE  0E00               	movlw	high UI@month
  6792  000BD0  0100               	movlb	0	; () banked
  6793  000BD2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6794  000BD4  0EE7               	movlw	low STR_10
  6795  000BD6  0100               	movlb	0	; () banked
  6796  000BD8  6F82               	movwf	strcpy@from& (0+255),b
  6797  000BDA  0EFF               	movlw	high STR_10
  6798  000BDC  0100               	movlb	0	; () banked
  6799  000BDE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6800  000BE0  EC4D  F021         	call	_strcpy	;wreg free
  6801                           
  6802                           ;UI.c: 135: break;
  6803  000BE4  D0C8               	goto	l7505
  6804  000BE6                     l7481:
  6805                           
  6806                           ;UI.c: 137: strcpy(month, "APR");
  6807  000BE6  0ED6               	movlw	low UI@month
  6808  000BE8  0100               	movlb	0	; () banked
  6809  000BEA  6F80               	movwf	strcpy@to& (0+255),b
  6810  000BEC  0E00               	movlw	high UI@month
  6811  000BEE  0100               	movlb	0	; () banked
  6812  000BF0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6813  000BF2  0EEB               	movlw	low STR_11
  6814  000BF4  0100               	movlb	0	; () banked
  6815  000BF6  6F82               	movwf	strcpy@from& (0+255),b
  6816  000BF8  0EFF               	movlw	high STR_11
  6817  000BFA  0100               	movlb	0	; () banked
  6818  000BFC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6819  000BFE  EC4D  F021         	call	_strcpy	;wreg free
  6820                           
  6821                           ;UI.c: 138: break;
  6822  000C02  D0B9               	goto	l7505
  6823  000C04                     l7483:
  6824                           
  6825                           ;UI.c: 140: strcpy(month, "MAY");
  6826  000C04  0ED6               	movlw	low UI@month
  6827  000C06  0100               	movlb	0	; () banked
  6828  000C08  6F80               	movwf	strcpy@to& (0+255),b
  6829  000C0A  0E00               	movlw	high UI@month
  6830  000C0C  0100               	movlb	0	; () banked
  6831  000C0E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6832  000C10  0EFB               	movlw	low STR_12
  6833  000C12  0100               	movlb	0	; () banked
  6834  000C14  6F82               	movwf	strcpy@from& (0+255),b
  6835  000C16  0EFF               	movlw	high STR_12
  6836  000C18  0100               	movlb	0	; () banked
  6837  000C1A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6838  000C1C  EC4D  F021         	call	_strcpy	;wreg free
  6839                           
  6840                           ;UI.c: 141: break;
  6841  000C20  D0AA               	goto	l7505
  6842  000C22                     l7485:
  6843                           
  6844                           ;UI.c: 143: strcpy(month, "JUN");
  6845  000C22  0ED6               	movlw	low UI@month
  6846  000C24  0100               	movlb	0	; () banked
  6847  000C26  6F80               	movwf	strcpy@to& (0+255),b
  6848  000C28  0E00               	movlw	high UI@month
  6849  000C2A  0100               	movlb	0	; () banked
  6850  000C2C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6851  000C2E  0EDF               	movlw	low STR_13
  6852  000C30  0100               	movlb	0	; () banked
  6853  000C32  6F82               	movwf	strcpy@from& (0+255),b
  6854  000C34  0EFF               	movlw	high STR_13
  6855  000C36  0100               	movlb	0	; () banked
  6856  000C38  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6857  000C3A  EC4D  F021         	call	_strcpy	;wreg free
  6858                           
  6859                           ;UI.c: 144: break;
  6860  000C3E  D09B               	goto	l7505
  6861  000C40                     l7487:
  6862                           
  6863                           ;UI.c: 146: strcpy(month, "JUL");
  6864  000C40  0ED6               	movlw	low UI@month
  6865  000C42  0100               	movlb	0	; () banked
  6866  000C44  6F80               	movwf	strcpy@to& (0+255),b
  6867  000C46  0E00               	movlw	high UI@month
  6868  000C48  0100               	movlb	0	; () banked
  6869  000C4A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6870  000C4C  0ED7               	movlw	low STR_14
  6871  000C4E  0100               	movlb	0	; () banked
  6872  000C50  6F82               	movwf	strcpy@from& (0+255),b
  6873  000C52  0EFF               	movlw	high STR_14
  6874  000C54  0100               	movlb	0	; () banked
  6875  000C56  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6876  000C58  EC4D  F021         	call	_strcpy	;wreg free
  6877                           
  6878                           ;UI.c: 147: break;
  6879  000C5C  D08C               	goto	l7505
  6880  000C5E                     l7489:
  6881                           
  6882                           ;UI.c: 149: strcpy(month, "AUG");
  6883  000C5E  0ED6               	movlw	low UI@month
  6884  000C60  0100               	movlb	0	; () banked
  6885  000C62  6F80               	movwf	strcpy@to& (0+255),b
  6886  000C64  0E00               	movlw	high UI@month
  6887  000C66  0100               	movlb	0	; () banked
  6888  000C68  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6889  000C6A  0ED3               	movlw	low STR_15
  6890  000C6C  0100               	movlb	0	; () banked
  6891  000C6E  6F82               	movwf	strcpy@from& (0+255),b
  6892  000C70  0EFF               	movlw	high STR_15
  6893  000C72  0100               	movlb	0	; () banked
  6894  000C74  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6895  000C76  EC4D  F021         	call	_strcpy	;wreg free
  6896                           
  6897                           ;UI.c: 150: break;
  6898  000C7A  D07D               	goto	l7505
  6899  000C7C                     l7491:
  6900                           
  6901                           ;UI.c: 152: strcpy(month, "SEP");
  6902  000C7C  0ED6               	movlw	low UI@month
  6903  000C7E  0100               	movlb	0	; () banked
  6904  000C80  6F80               	movwf	strcpy@to& (0+255),b
  6905  000C82  0E00               	movlw	high UI@month
  6906  000C84  0100               	movlb	0	; () banked
  6907  000C86  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6908  000C88  0EE3               	movlw	low STR_16
  6909  000C8A  0100               	movlb	0	; () banked
  6910  000C8C  6F82               	movwf	strcpy@from& (0+255),b
  6911  000C8E  0EFF               	movlw	high STR_16
  6912  000C90  0100               	movlb	0	; () banked
  6913  000C92  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6914  000C94  EC4D  F021         	call	_strcpy	;wreg free
  6915                           
  6916                           ;UI.c: 153: break;
  6917  000C98  D06E               	goto	l7505
  6918  000C9A                     l7493:
  6919                           
  6920                           ;UI.c: 155: strcpy(month, "OCT");
  6921  000C9A  0ED6               	movlw	low UI@month
  6922  000C9C  0100               	movlb	0	; () banked
  6923  000C9E  6F80               	movwf	strcpy@to& (0+255),b
  6924  000CA0  0E00               	movlw	high UI@month
  6925  000CA2  0100               	movlb	0	; () banked
  6926  000CA4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6927  000CA6  0EF3               	movlw	low STR_17
  6928  000CA8  0100               	movlb	0	; () banked
  6929  000CAA  6F82               	movwf	strcpy@from& (0+255),b
  6930  000CAC  0EFF               	movlw	high STR_17
  6931  000CAE  0100               	movlb	0	; () banked
  6932  000CB0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6933  000CB2  EC4D  F021         	call	_strcpy	;wreg free
  6934                           
  6935                           ;UI.c: 156: break;
  6936  000CB6  D05F               	goto	l7505
  6937  000CB8                     l7495:
  6938                           
  6939                           ;UI.c: 158: strcpy(month, "NOV");
  6940  000CB8  0ED6               	movlw	low UI@month
  6941  000CBA  0100               	movlb	0	; () banked
  6942  000CBC  6F80               	movwf	strcpy@to& (0+255),b
  6943  000CBE  0E00               	movlw	high UI@month
  6944  000CC0  0100               	movlb	0	; () banked
  6945  000CC2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6946  000CC4  0EF7               	movlw	low STR_18
  6947  000CC6  0100               	movlb	0	; () banked
  6948  000CC8  6F82               	movwf	strcpy@from& (0+255),b
  6949  000CCA  0EFF               	movlw	high STR_18
  6950  000CCC  0100               	movlb	0	; () banked
  6951  000CCE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6952  000CD0  EC4D  F021         	call	_strcpy	;wreg free
  6953                           
  6954                           ;UI.c: 159: break;
  6955  000CD4  D050               	goto	l7505
  6956  000CD6                     l7497:
  6957                           
  6958                           ;UI.c: 161: strcpy(month, "DEC");
  6959  000CD6  0ED6               	movlw	low UI@month
  6960  000CD8  0100               	movlb	0	; () banked
  6961  000CDA  6F80               	movwf	strcpy@to& (0+255),b
  6962  000CDC  0E00               	movlw	high UI@month
  6963  000CDE  0100               	movlb	0	; () banked
  6964  000CE0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6965  000CE2  0ECF               	movlw	low STR_19
  6966  000CE4  0100               	movlb	0	; () banked
  6967  000CE6  6F82               	movwf	strcpy@from& (0+255),b
  6968  000CE8  0EFF               	movlw	high STR_19
  6969  000CEA  0100               	movlb	0	; () banked
  6970  000CEC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6971  000CEE  EC4D  F021         	call	_strcpy	;wreg free
  6972                           
  6973                           ;UI.c: 162: break;
  6974  000CF2  D041               	goto	l7505
  6975  000CF4                     l7499:
  6976                           
  6977                           ;UI.c: 164: strcpy(month, "ERR");
  6978  000CF4  0ED6               	movlw	low UI@month
  6979  000CF6  0100               	movlb	0	; () banked
  6980  000CF8  6F80               	movwf	strcpy@to& (0+255),b
  6981  000CFA  0E00               	movlw	high UI@month
  6982  000CFC  0100               	movlb	0	; () banked
  6983  000CFE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6984  000D00  0EEF               	movlw	low STR_20
  6985  000D02  0100               	movlb	0	; () banked
  6986  000D04  6F82               	movwf	strcpy@from& (0+255),b
  6987  000D06  0EFF               	movlw	high STR_20
  6988  000D08  0100               	movlb	0	; () banked
  6989  000D0A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6990  000D0C  EC4D  F021         	call	_strcpy	;wreg free
  6991                           
  6992                           ;UI.c: 166: }
  6993                           
  6994                           ;UI.c: 165: break;
  6995  000D10  D032               	goto	l7505
  6996  000D12                     l7503:
  6997  000D12  EE21  F00A         	lfsr	2,_log_startTime+10
  6998  000D16  CFDE F0C4          	movff	postinc2,??_UI
  6999  000D1A  CFDD F0C5          	movff	postdec2,??_UI+1
  7000                           
  7001                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7002                           ; Switch size 1, requested type "space"
  7003                           ; Number of cases is 1, Range of values is 0 to 0
  7004                           ; switch strategies available:
  7005                           ; Name         Instructions Cycles
  7006                           ; simple_byte            4     3 (average)
  7007                           ;	Chosen strategy is simple_byte
  7008  000D1E  0100               	movlb	0	; () banked
  7009  000D20  51C5               	movf	(??_UI+1)& (0+255),w,b
  7010  000D22  0A00               	xorlw	0	; case 0
  7011  000D24  A4D8               	btfss	status,2,c
  7012  000D26  D7E6               	goto	l7499
  7013                           
  7014                           ; BSR set to: 0
  7015                           ; Switch size 1, requested type "space"
  7016                           ; Number of cases is 12, Range of values is 1 to 12
  7017                           ; switch strategies available:
  7018                           ; Name         Instructions Cycles
  7019                           ; simple_byte           37    19 (average)
  7020                           ;	Chosen strategy is simple_byte
  7021  000D28  0100               	movlb	0	; () banked
  7022  000D2A  51C4               	movf	??_UI& (0+255),w,b
  7023  000D2C  0A01               	xorlw	1	; case 1
  7024  000D2E  B4D8               	btfsc	status,2,c
  7025  000D30  D72D               	goto	l7475
  7026  000D32  0A03               	xorlw	3	; case 2
  7027  000D34  B4D8               	btfsc	status,2,c
  7028  000D36  D739               	goto	l7477
  7029  000D38  0A01               	xorlw	1	; case 3
  7030  000D3A  B4D8               	btfsc	status,2,c
  7031  000D3C  D745               	goto	l7479
  7032  000D3E  0A07               	xorlw	7	; case 4
  7033  000D40  B4D8               	btfsc	status,2,c
  7034  000D42  D751               	goto	l7481
  7035  000D44  0A01               	xorlw	1	; case 5
  7036  000D46  B4D8               	btfsc	status,2,c
  7037  000D48  D75D               	goto	l7483
  7038  000D4A  0A03               	xorlw	3	; case 6
  7039  000D4C  B4D8               	btfsc	status,2,c
  7040  000D4E  D769               	goto	l7485
  7041  000D50  0A01               	xorlw	1	; case 7
  7042  000D52  B4D8               	btfsc	status,2,c
  7043  000D54  D775               	goto	l7487
  7044  000D56  0A0F               	xorlw	15	; case 8
  7045  000D58  B4D8               	btfsc	status,2,c
  7046  000D5A  D781               	goto	l7489
  7047  000D5C  0A01               	xorlw	1	; case 9
  7048  000D5E  B4D8               	btfsc	status,2,c
  7049  000D60  D78D               	goto	l7491
  7050  000D62  0A03               	xorlw	3	; case 10
  7051  000D64  B4D8               	btfsc	status,2,c
  7052  000D66  D799               	goto	l7493
  7053  000D68  0A01               	xorlw	1	; case 11
  7054  000D6A  B4D8               	btfsc	status,2,c
  7055  000D6C  D7A5               	goto	l7495
  7056  000D6E  0A07               	xorlw	7	; case 12
  7057  000D70  B4D8               	btfsc	status,2,c
  7058  000D72  D7B1               	goto	l7497
  7059  000D74  D7BF               	goto	l7499
  7060  000D76                     l7505:
  7061                           
  7062                           ;UI.c: 167: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  7063  000D76  0E40               	movlw	low STR_21
  7064  000D78  0100               	movlb	0	; () banked
  7065  000D7A  6F8E               	movwf	printf@f& (0+255),b
  7066  000D7C  0EFB               	movlw	high STR_21
  7067  000D7E  0100               	movlb	0	; () banked
  7068  000D80  6F8F               	movwf	(printf@f+1)& (0+255),b
  7069  000D82  C108  F090         	movff	_log_startTime+8,?_printf+2
  7070  000D86  C109  F091         	movff	_log_startTime+9,?_printf+3
  7071  000D8A  0ED6               	movlw	low UI@month
  7072  000D8C  0100               	movlb	0	; () banked
  7073  000D8E  6F92               	movwf	(?_printf+4)& (0+255),b
  7074  000D90  0E00               	movlw	high UI@month
  7075  000D92  0100               	movlb	0	; () banked
  7076  000D94  6F93               	movwf	(?_printf+5)& (0+255),b
  7077  000D96  C104  F094         	movff	_log_startTime+4,?_printf+6
  7078  000D9A  C105  F095         	movff	_log_startTime+5,?_printf+7
  7079  000D9E  C102  F096         	movff	_log_startTime+2,?_printf+8
  7080  000DA2  C103  F097         	movff	_log_startTime+3,?_printf+9
  7081  000DA6  C100  F098         	movff	_log_startTime,?_printf+10
  7082  000DAA  C101  F099         	movff	_log_startTime+1,?_printf+11
  7083  000DAE  ECB8  F008         	call	_printf	;wreg free
  7084                           
  7085                           ;UI.c: 169: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7086  000DB2  0E00               	movlw	0
  7087  000DB4  0100               	movlb	0	; () banked
  7088  000DB6  6FCC               	movwf	UI@i_431& (0+255),b
  7089  000DB8                     l7509:
  7090                           
  7091                           ; BSR set to: 0
  7092  000DB8  0E63               	movlw	99
  7093  000DBA  0100               	movlb	0	; () banked
  7094  000DBC  65CC               	cpfsgt	UI@i_431& (0+255),b
  7095  000DBE  D001               	goto	l7513
  7096  000DC0  D00C               	goto	l7517
  7097  000DC2                     l7513:
  7098                           
  7099                           ; BSR set to: 0
  7100  000DC2  0E68               	movlw	104
  7101  000DC4  0100               	movlb	0	; () banked
  7102  000DC6  6FC4               	movwf	??_UI& (0+255),b
  7103  000DC8  0EE4               	movlw	228
  7104  000DCA                     u7317:
  7105  000DCA  2EE8               	decfsz	wreg,f,c
  7106  000DCC  D7FE               	bra	u7317
  7107  000DCE  2FC4               	decfsz	??_UI& (0+255),f,b
  7108  000DD0  D7FC               	bra	u7317
  7109  000DD2  F000               	nop	
  7110  000DD4  0100               	movlb	0	; () banked
  7111  000DD6  2BCC               	incf	UI@i_431& (0+255),f,b
  7112  000DD8  D7EF               	goto	l7509
  7113  000DDA                     l7517:
  7114                           
  7115                           ; BSR set to: 0
  7116  000DDA  0100               	movlb	0	; () banked
  7117  000DDC  51F6               	movf	_logstate& (0+255),w,b
  7118  000DDE  0100               	movlb	0	; () banked
  7119  000DE0  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7120  000DE2  B4D8               	btfsc	status,2,c
  7121  000DE4  0012               	return	
  7122                           
  7123                           ; BSR set to: 0
  7124                           ;UI.c: 170: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7125                           
  7126                           ; BSR set to: 0
  7127                           
  7128                           ; BSR set to: 0
  7129  000DE6  0E00               	movlw	0
  7130  000DE8  0100               	movlb	0	; () banked
  7131  000DEA  6FCD               	movwf	UI@i_432& (0+255),b
  7132  000DEC                     l7523:
  7133                           
  7134                           ; BSR set to: 0
  7135  000DEC  0E63               	movlw	99
  7136  000DEE  0100               	movlb	0	; () banked
  7137  000DF0  65CD               	cpfsgt	UI@i_432& (0+255),b
  7138  000DF2  D001               	goto	l7527
  7139  000DF4  D00C               	goto	l7531
  7140  000DF6                     l7527:
  7141                           
  7142                           ; BSR set to: 0
  7143  000DF6  0E68               	movlw	104
  7144  000DF8  0100               	movlb	0	; () banked
  7145  000DFA  6FC4               	movwf	??_UI& (0+255),b
  7146  000DFC  0EE4               	movlw	228
  7147  000DFE                     u7327:
  7148  000DFE  2EE8               	decfsz	wreg,f,c
  7149  000E00  D7FE               	bra	u7327
  7150  000E02  2FC4               	decfsz	??_UI& (0+255),f,b
  7151  000E04  D7FC               	bra	u7327
  7152  000E06  F000               	nop	
  7153  000E08  0100               	movlb	0	; () banked
  7154  000E0A  2BCD               	incf	UI@i_432& (0+255),f,b
  7155  000E0C  D7EF               	goto	l7523
  7156  000E0E                     l7531:
  7157                           
  7158                           ; BSR set to: 0
  7159  000E0E  0100               	movlb	0	; () banked
  7160  000E10  51F6               	movf	_logstate& (0+255),w,b
  7161  000E12  0100               	movlb	0	; () banked
  7162  000E14  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7163  000E16  B4D8               	btfsc	status,2,c
  7164  000E18  0012               	return	
  7165                           
  7166                           ; BSR set to: 0
  7167                           ;UI.c: 172: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7168                           
  7169                           ; BSR set to: 0
  7170                           
  7171                           ; BSR set to: 0
  7172  000E1A  0E01               	movlw	1
  7173  000E1C  ECE1  F023         	call	_lcdInst
  7174  000E20  0E68               	movlw	104
  7175  000E22  0100               	movlb	0	; () banked
  7176  000E24  6FC4               	movwf	??_UI& (0+255),b
  7177  000E26  0EE4               	movlw	228
  7178  000E28                     u7337:
  7179  000E28  2EE8               	decfsz	wreg,f,c
  7180  000E2A  D7FE               	bra	u7337
  7181  000E2C  2FC4               	decfsz	??_UI& (0+255),f,b
  7182  000E2E  D7FC               	bra	u7337
  7183  000E30  F000               	nop	
  7184                           
  7185                           ;UI.c: 173: lcdInst(0b10000000);;
  7186  000E32  0E80               	movlw	128
  7187  000E34  ECE1  F023         	call	_lcdInst
  7188                           
  7189                           ;UI.c: 174: printf("DURATION:");
  7190  000E38  0E9B               	movlw	low STR_22
  7191  000E3A  0100               	movlb	0	; () banked
  7192  000E3C  6F8E               	movwf	printf@f& (0+255),b
  7193  000E3E  0EFF               	movlw	high STR_22
  7194  000E40  0100               	movlb	0	; () banked
  7195  000E42  6F8F               	movwf	(printf@f+1)& (0+255),b
  7196  000E44  ECB8  F008         	call	_printf	;wreg free
  7197                           
  7198                           ;UI.c: 175: lcdInst(0b11000000);;
  7199  000E48  0EC0               	movlw	192
  7200  000E4A  ECE1  F023         	call	_lcdInst
  7201                           
  7202                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  7203  000E4E  0E0E               	movlw	14
  7204  000E50  0100               	movlb	0	; () banked
  7205  000E52  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7206  000E54  0E10               	movlw	16
  7207  000E56  6F82               	movwf	___awmod@divisor& (0+255),b
  7208  000E58  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  7209  000E5C  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  7210  000E60  EC36  F01C         	call	___awmod	;wreg free
  7211  000E64  C080  F0C6         	movff	?___awmod,_UI$2295
  7212  000E68  C081  F0C7         	movff	?___awmod+1,_UI$2295+1
  7213                           
  7214                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  7215  000E6C  0E19               	movlw	low STR_23
  7216  000E6E  0100               	movlb	0	; () banked
  7217  000E70  6F8E               	movwf	printf@f& (0+255),b
  7218  000E72  0EFF               	movlw	high STR_23
  7219  000E74  0100               	movlb	0	; () banked
  7220  000E76  6F8F               	movwf	(printf@f+1)& (0+255),b
  7221  000E78  0E0E               	movlw	14
  7222  000E7A  0100               	movlb	0	; () banked
  7223  000E7C  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7224  000E7E  0E10               	movlw	16
  7225  000E80  6F82               	movwf	___awmod@divisor& (0+255),b
  7226  000E82  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  7227  000E86  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  7228  000E8A  EC36  F01C         	call	___awmod	;wreg free
  7229  000E8E  C080  F086         	movff	?___awmod,___awdiv@dividend
  7230  000E92  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7231  000E96  0E00               	movlw	0
  7232  000E98  0100               	movlb	0	; () banked
  7233  000E9A  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7234  000E9C  0E3C               	movlw	60
  7235  000E9E  6F88               	movwf	___awdiv@divisor& (0+255),b
  7236  000EA0  EC24  F01B         	call	___awdiv	;wreg free
  7237  000EA4  C086  F090         	movff	?___awdiv,?_printf+2
  7238  000EA8  C087  F091         	movff	?___awdiv+1,?_printf+3
  7239  000EAC  C0C6  F080         	movff	_UI$2295,___awmod@dividend
  7240  000EB0  C0C7  F081         	movff	_UI$2295+1,___awmod@dividend+1
  7241  000EB4  0E00               	movlw	0
  7242  000EB6  0100               	movlb	0	; () banked
  7243  000EB8  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7244  000EBA  0E3C               	movlw	60
  7245  000EBC  6F82               	movwf	___awmod@divisor& (0+255),b
  7246  000EBE  EC36  F01C         	call	___awmod	;wreg free
  7247  000EC2  C080  F092         	movff	?___awmod,?_printf+4
  7248  000EC6  C081  F093         	movff	?___awmod+1,?_printf+5
  7249  000ECA  ECB8  F008         	call	_printf	;wreg free
  7250                           
  7251                           ;UI.c: 178: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7252  000ECE  0E00               	movlw	0
  7253  000ED0  0100               	movlb	0	; () banked
  7254  000ED2  6FCE               	movwf	UI@i_435& (0+255),b
  7255  000ED4                     l7551:
  7256                           
  7257                           ; BSR set to: 0
  7258  000ED4  0E63               	movlw	99
  7259  000ED6  0100               	movlb	0	; () banked
  7260  000ED8  65CE               	cpfsgt	UI@i_435& (0+255),b
  7261  000EDA  D001               	goto	l7555
  7262  000EDC  D00C               	goto	l7559
  7263  000EDE                     l7555:
  7264                           
  7265                           ; BSR set to: 0
  7266  000EDE  0E68               	movlw	104
  7267  000EE0  0100               	movlb	0	; () banked
  7268  000EE2  6FC4               	movwf	??_UI& (0+255),b
  7269  000EE4  0EE4               	movlw	228
  7270  000EE6                     u7347:
  7271  000EE6  2EE8               	decfsz	wreg,f,c
  7272  000EE8  D7FE               	bra	u7347
  7273  000EEA  2FC4               	decfsz	??_UI& (0+255),f,b
  7274  000EEC  D7FC               	bra	u7347
  7275  000EEE  F000               	nop	
  7276  000EF0  0100               	movlb	0	; () banked
  7277  000EF2  2BCE               	incf	UI@i_435& (0+255),f,b
  7278  000EF4  D7EF               	goto	l7551
  7279  000EF6                     l7559:
  7280                           
  7281                           ; BSR set to: 0
  7282  000EF6  0100               	movlb	0	; () banked
  7283  000EF8  51F6               	movf	_logstate& (0+255),w,b
  7284  000EFA  0100               	movlb	0	; () banked
  7285  000EFC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7286  000EFE  B4D8               	btfsc	status,2,c
  7287  000F00  0012               	return	
  7288                           
  7289                           ; BSR set to: 0
  7290                           ;UI.c: 179: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7291                           
  7292                           ; BSR set to: 0
  7293                           
  7294                           ; BSR set to: 0
  7295  000F02  0E00               	movlw	0
  7296  000F04  0100               	movlb	0	; () banked
  7297  000F06  6FCF               	movwf	UI@i_436& (0+255),b
  7298  000F08                     l7565:
  7299                           
  7300                           ; BSR set to: 0
  7301  000F08  0E63               	movlw	99
  7302  000F0A  0100               	movlb	0	; () banked
  7303  000F0C  65CF               	cpfsgt	UI@i_436& (0+255),b
  7304  000F0E  D001               	goto	l7569
  7305  000F10  D00C               	goto	l7573
  7306  000F12                     l7569:
  7307                           
  7308                           ; BSR set to: 0
  7309  000F12  0E68               	movlw	104
  7310  000F14  0100               	movlb	0	; () banked
  7311  000F16  6FC4               	movwf	??_UI& (0+255),b
  7312  000F18  0EE4               	movlw	228
  7313  000F1A                     u7357:
  7314  000F1A  2EE8               	decfsz	wreg,f,c
  7315  000F1C  D7FE               	bra	u7357
  7316  000F1E  2FC4               	decfsz	??_UI& (0+255),f,b
  7317  000F20  D7FC               	bra	u7357
  7318  000F22  F000               	nop	
  7319  000F24  0100               	movlb	0	; () banked
  7320  000F26  2BCF               	incf	UI@i_436& (0+255),f,b
  7321  000F28  D7EF               	goto	l7565
  7322  000F2A                     l7573:
  7323                           
  7324                           ; BSR set to: 0
  7325  000F2A  0100               	movlb	0	; () banked
  7326  000F2C  51F6               	movf	_logstate& (0+255),w,b
  7327  000F2E  0100               	movlb	0	; () banked
  7328  000F30  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7329  000F32  B4D8               	btfsc	status,2,c
  7330  000F34  0012               	return	
  7331                           
  7332                           ; BSR set to: 0
  7333                           ;UI.c: 181: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7334                           
  7335                           ; BSR set to: 0
  7336                           
  7337                           ; BSR set to: 0
  7338  000F36  0E01               	movlw	1
  7339  000F38  ECE1  F023         	call	_lcdInst
  7340  000F3C  0E68               	movlw	104
  7341  000F3E  0100               	movlb	0	; () banked
  7342  000F40  6FC4               	movwf	??_UI& (0+255),b
  7343  000F42  0EE4               	movlw	228
  7344  000F44                     u7367:
  7345  000F44  2EE8               	decfsz	wreg,f,c
  7346  000F46  D7FE               	bra	u7367
  7347  000F48  2FC4               	decfsz	??_UI& (0+255),f,b
  7348  000F4A  D7FC               	bra	u7367
  7349  000F4C  F000               	nop	
  7350                           
  7351                           ;UI.c: 182: lcdInst(0b10000000);;
  7352  000F4E  0E80               	movlw	128
  7353  000F50  ECE1  F023         	call	_lcdInst
  7354                           
  7355                           ;UI.c: 183: printf(" -- POP  CAN -- ");
  7356  000F54  0E3C               	movlw	low STR_24
  7357  000F56  0100               	movlb	0	; () banked
  7358  000F58  6F8E               	movwf	printf@f& (0+255),b
  7359  000F5A  0EFD               	movlw	high STR_24
  7360  000F5C  0100               	movlb	0	; () banked
  7361  000F5E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7362  000F60  ECB8  F008         	call	_printf	;wreg free
  7363                           
  7364                           ;UI.c: 184: lcdInst(0b11000000);;
  7365  000F64  0EC0               	movlw	192
  7366  000F66  ECE1  F023         	call	_lcdInst
  7367                           
  7368                           ;UI.c: 185: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  7369  000F6A  0E19               	movlw	low STR_25
  7370  000F6C  0100               	movlb	0	; () banked
  7371  000F6E  6F8E               	movwf	printf@f& (0+255),b
  7372  000F70  0EFE               	movlw	high STR_25
  7373  000F72  0100               	movlb	0	; () banked
  7374  000F74  6F8F               	movwf	(printf@f+1)& (0+255),b
  7375  000F76  C0EE  F090         	movff	_log_count_pop_no_tab,?_printf+2
  7376  000F7A  C0EF  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  7377  000F7E  C0F0  F092         	movff	_log_count_pop_w_tab,?_printf+4
  7378  000F82  C0F1  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  7379  000F86  ECB8  F008         	call	_printf	;wreg free
  7380                           
  7381                           ;UI.c: 187: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7382  000F8A  0E00               	movlw	0
  7383  000F8C  0100               	movlb	0	; () banked
  7384  000F8E  6FD0               	movwf	UI@i_439& (0+255),b
  7385  000F90                     l7591:
  7386                           
  7387                           ; BSR set to: 0
  7388  000F90  0E63               	movlw	99
  7389  000F92  0100               	movlb	0	; () banked
  7390  000F94  65D0               	cpfsgt	UI@i_439& (0+255),b
  7391  000F96  D001               	goto	l7595
  7392  000F98  D00C               	goto	l7599
  7393  000F9A                     l7595:
  7394                           
  7395                           ; BSR set to: 0
  7396  000F9A  0E68               	movlw	104
  7397  000F9C  0100               	movlb	0	; () banked
  7398  000F9E  6FC4               	movwf	??_UI& (0+255),b
  7399  000FA0  0EE4               	movlw	228
  7400  000FA2                     u7377:
  7401  000FA2  2EE8               	decfsz	wreg,f,c
  7402  000FA4  D7FE               	bra	u7377
  7403  000FA6  2FC4               	decfsz	??_UI& (0+255),f,b
  7404  000FA8  D7FC               	bra	u7377
  7405  000FAA  F000               	nop	
  7406  000FAC  0100               	movlb	0	; () banked
  7407  000FAE  2BD0               	incf	UI@i_439& (0+255),f,b
  7408  000FB0  D7EF               	goto	l7591
  7409  000FB2                     l7599:
  7410                           
  7411                           ; BSR set to: 0
  7412  000FB2  0100               	movlb	0	; () banked
  7413  000FB4  51F6               	movf	_logstate& (0+255),w,b
  7414  000FB6  0100               	movlb	0	; () banked
  7415  000FB8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7416  000FBA  B4D8               	btfsc	status,2,c
  7417  000FBC  0012               	return	
  7418                           
  7419                           ; BSR set to: 0
  7420                           ;UI.c: 188: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7421                           
  7422                           ; BSR set to: 0
  7423                           
  7424                           ; BSR set to: 0
  7425  000FBE  0E00               	movlw	0
  7426  000FC0  0100               	movlb	0	; () banked
  7427  000FC2  6FD1               	movwf	UI@i_440& (0+255),b
  7428  000FC4                     l7605:
  7429                           
  7430                           ; BSR set to: 0
  7431  000FC4  0E63               	movlw	99
  7432  000FC6  0100               	movlb	0	; () banked
  7433  000FC8  65D1               	cpfsgt	UI@i_440& (0+255),b
  7434  000FCA  D001               	goto	l7609
  7435  000FCC  D00C               	goto	l7613
  7436  000FCE                     l7609:
  7437                           
  7438                           ; BSR set to: 0
  7439  000FCE  0E68               	movlw	104
  7440  000FD0  0100               	movlb	0	; () banked
  7441  000FD2  6FC4               	movwf	??_UI& (0+255),b
  7442  000FD4  0EE4               	movlw	228
  7443  000FD6                     u7387:
  7444  000FD6  2EE8               	decfsz	wreg,f,c
  7445  000FD8  D7FE               	bra	u7387
  7446  000FDA  2FC4               	decfsz	??_UI& (0+255),f,b
  7447  000FDC  D7FC               	bra	u7387
  7448  000FDE  F000               	nop	
  7449  000FE0  0100               	movlb	0	; () banked
  7450  000FE2  2BD1               	incf	UI@i_440& (0+255),f,b
  7451  000FE4  D7EF               	goto	l7605
  7452  000FE6                     l7613:
  7453                           
  7454                           ; BSR set to: 0
  7455  000FE6  0100               	movlb	0	; () banked
  7456  000FE8  51F6               	movf	_logstate& (0+255),w,b
  7457  000FEA  0100               	movlb	0	; () banked
  7458  000FEC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7459  000FEE  B4D8               	btfsc	status,2,c
  7460  000FF0  0012               	return	
  7461                           
  7462                           ; BSR set to: 0
  7463                           ;UI.c: 190: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7464                           
  7465                           ; BSR set to: 0
  7466                           
  7467                           ; BSR set to: 0
  7468  000FF2  0E01               	movlw	1
  7469  000FF4  ECE1  F023         	call	_lcdInst
  7470  000FF8  0E68               	movlw	104
  7471  000FFA  0100               	movlb	0	; () banked
  7472  000FFC  6FC4               	movwf	??_UI& (0+255),b
  7473  000FFE  0EE4               	movlw	228
  7474  001000                     u7397:
  7475  001000  2EE8               	decfsz	wreg,f,c
  7476  001002  D7FE               	bra	u7397
  7477  001004  2FC4               	decfsz	??_UI& (0+255),f,b
  7478  001006  D7FC               	bra	u7397
  7479  001008  F000               	nop	
  7480                           
  7481                           ;UI.c: 191: lcdInst(0b10000000);;
  7482  00100A  0E80               	movlw	128
  7483  00100C  ECE1  F023         	call	_lcdInst
  7484                           
  7485                           ;UI.c: 192: printf(" -- SOUP CAN -- ");
  7486  001010  0E4D               	movlw	low STR_26
  7487  001012  0100               	movlb	0	; () banked
  7488  001014  6F8E               	movwf	printf@f& (0+255),b
  7489  001016  0EFD               	movlw	high STR_26
  7490  001018  0100               	movlb	0	; () banked
  7491  00101A  6F8F               	movwf	(printf@f+1)& (0+255),b
  7492  00101C  ECB8  F008         	call	_printf	;wreg free
  7493                           
  7494                           ;UI.c: 193: lcdInst(0b11000000);;
  7495  001020  0EC0               	movlw	192
  7496  001022  ECE1  F023         	call	_lcdInst
  7497                           
  7498                           ;UI.c: 194: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  7499  001026  0E08               	movlw	low STR_27
  7500  001028  0100               	movlb	0	; () banked
  7501  00102A  6F8E               	movwf	printf@f& (0+255),b
  7502  00102C  0EFE               	movlw	high STR_27
  7503  00102E  0100               	movlb	0	; () banked
  7504  001030  6F8F               	movwf	(printf@f+1)& (0+255),b
  7505  001032  C0EA  F090         	movff	_log_count_can_no_lab,?_printf+2
  7506  001036  C0EB  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  7507  00103A  C0EC  F092         	movff	_log_count_can_w_lab,?_printf+4
  7508  00103E  C0ED  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  7509  001042  ECB8  F008         	call	_printf	;wreg free
  7510                           
  7511                           ;UI.c: 196: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7512  001046  0E00               	movlw	0
  7513  001048  0100               	movlb	0	; () banked
  7514  00104A  6FD2               	movwf	UI@i_443& (0+255),b
  7515  00104C                     l7631:
  7516                           
  7517                           ; BSR set to: 0
  7518  00104C  0E63               	movlw	99
  7519  00104E  0100               	movlb	0	; () banked
  7520  001050  65D2               	cpfsgt	UI@i_443& (0+255),b
  7521  001052  D001               	goto	l7635
  7522  001054  D00C               	goto	l7639
  7523  001056                     l7635:
  7524                           
  7525                           ; BSR set to: 0
  7526  001056  0E68               	movlw	104
  7527  001058  0100               	movlb	0	; () banked
  7528  00105A  6FC4               	movwf	??_UI& (0+255),b
  7529  00105C  0EE4               	movlw	228
  7530  00105E                     u7407:
  7531  00105E  2EE8               	decfsz	wreg,f,c
  7532  001060  D7FE               	bra	u7407
  7533  001062  2FC4               	decfsz	??_UI& (0+255),f,b
  7534  001064  D7FC               	bra	u7407
  7535  001066  F000               	nop	
  7536  001068  0100               	movlb	0	; () banked
  7537  00106A  2BD2               	incf	UI@i_443& (0+255),f,b
  7538  00106C  D7EF               	goto	l7631
  7539  00106E                     l7639:
  7540                           
  7541                           ; BSR set to: 0
  7542  00106E  0100               	movlb	0	; () banked
  7543  001070  51F6               	movf	_logstate& (0+255),w,b
  7544  001072  0100               	movlb	0	; () banked
  7545  001074  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7546  001076  B4D8               	btfsc	status,2,c
  7547  001078  0012               	return	
  7548                           
  7549                           ; BSR set to: 0
  7550                           ;UI.c: 197: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7551                           
  7552                           ; BSR set to: 0
  7553                           
  7554                           ; BSR set to: 0
  7555  00107A  0E00               	movlw	0
  7556  00107C  0100               	movlb	0	; () banked
  7557  00107E  6FD3               	movwf	UI@i_444& (0+255),b
  7558  001080                     l7645:
  7559                           
  7560                           ; BSR set to: 0
  7561  001080  0E63               	movlw	99
  7562  001082  0100               	movlb	0	; () banked
  7563  001084  65D3               	cpfsgt	UI@i_444& (0+255),b
  7564  001086  D001               	goto	l7649
  7565  001088  D00C               	goto	l7653
  7566  00108A                     l7649:
  7567                           
  7568                           ; BSR set to: 0
  7569  00108A  0E68               	movlw	104
  7570  00108C  0100               	movlb	0	; () banked
  7571  00108E  6FC4               	movwf	??_UI& (0+255),b
  7572  001090  0EE4               	movlw	228
  7573  001092                     u7417:
  7574  001092  2EE8               	decfsz	wreg,f,c
  7575  001094  D7FE               	bra	u7417
  7576  001096  2FC4               	decfsz	??_UI& (0+255),f,b
  7577  001098  D7FC               	bra	u7417
  7578  00109A  F000               	nop	
  7579  00109C  0100               	movlb	0	; () banked
  7580  00109E  2BD3               	incf	UI@i_444& (0+255),f,b
  7581  0010A0  D7EF               	goto	l7645
  7582  0010A2                     l7653:
  7583                           
  7584                           ; BSR set to: 0
  7585  0010A2  0100               	movlb	0	; () banked
  7586  0010A4  51F6               	movf	_logstate& (0+255),w,b
  7587  0010A6  0100               	movlb	0	; () banked
  7588  0010A8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7589  0010AA  B4D8               	btfsc	status,2,c
  7590  0010AC  0012               	return	
  7591                           
  7592                           ; BSR set to: 0
  7593                           ;UI.c: 199: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7594                           
  7595                           ; BSR set to: 0
  7596                           
  7597                           ; BSR set to: 0
  7598  0010AE  0E01               	movlw	1
  7599  0010B0  ECE1  F023         	call	_lcdInst
  7600  0010B4  0E68               	movlw	104
  7601  0010B6  0100               	movlb	0	; () banked
  7602  0010B8  6FC4               	movwf	??_UI& (0+255),b
  7603  0010BA  0EE4               	movlw	228
  7604  0010BC                     u7427:
  7605  0010BC  2EE8               	decfsz	wreg,f,c
  7606  0010BE  D7FE               	bra	u7427
  7607  0010C0  2FC4               	decfsz	??_UI& (0+255),f,b
  7608  0010C2  D7FC               	bra	u7427
  7609  0010C4  F000               	nop	
  7610                           
  7611                           ;UI.c: 200: lcdInst(0b10000000);;
  7612  0010C6  0E80               	movlw	128
  7613  0010C8  ECE1  F023         	call	_lcdInst
  7614                           
  7615                           ;UI.c: 201: printf("-- TOTAL CANS --");
  7616  0010CC  0E5E               	movlw	low STR_28
  7617  0010CE  0100               	movlb	0	; () banked
  7618  0010D0  6F8E               	movwf	printf@f& (0+255),b
  7619  0010D2  0EFD               	movlw	high STR_28
  7620  0010D4  0100               	movlb	0	; () banked
  7621  0010D6  6F8F               	movwf	(printf@f+1)& (0+255),b
  7622  0010D8  ECB8  F008         	call	_printf	;wreg free
  7623                           
  7624                           ;UI.c: 202: lcdInst(0b11000000);;
  7625  0010DC  0EC0               	movlw	192
  7626  0010DE  ECE1  F023         	call	_lcdInst
  7627                           
  7628                           ;UI.c: 203: printf("%d", log_count_total);
  7629  0010E2  0E16               	movlw	low (STR_27+14)
  7630  0010E4  0100               	movlb	0	; () banked
  7631  0010E6  6F8E               	movwf	printf@f& (0+255),b
  7632  0010E8  0EFE               	movlw	high (STR_27+14)
  7633  0010EA  0100               	movlb	0	; () banked
  7634  0010EC  6F8F               	movwf	(printf@f+1)& (0+255),b
  7635  0010EE  C0F2  F090         	movff	_log_count_total,?_printf+2
  7636  0010F2  C0F3  F091         	movff	_log_count_total+1,?_printf+3
  7637  0010F6  ECB8  F008         	call	_printf	;wreg free
  7638                           
  7639                           ;UI.c: 205: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7640  0010FA  0E00               	movlw	0
  7641  0010FC  0100               	movlb	0	; () banked
  7642  0010FE  6FD4               	movwf	UI@i_447& (0+255),b
  7643  001100                     l7671:
  7644                           
  7645                           ; BSR set to: 0
  7646  001100  0E63               	movlw	99
  7647  001102  0100               	movlb	0	; () banked
  7648  001104  65D4               	cpfsgt	UI@i_447& (0+255),b
  7649  001106  D001               	goto	l7675
  7650  001108  D00C               	goto	l7679
  7651  00110A                     l7675:
  7652                           
  7653                           ; BSR set to: 0
  7654  00110A  0E68               	movlw	104
  7655  00110C  0100               	movlb	0	; () banked
  7656  00110E  6FC4               	movwf	??_UI& (0+255),b
  7657  001110  0EE4               	movlw	228
  7658  001112                     u7437:
  7659  001112  2EE8               	decfsz	wreg,f,c
  7660  001114  D7FE               	bra	u7437
  7661  001116  2FC4               	decfsz	??_UI& (0+255),f,b
  7662  001118  D7FC               	bra	u7437
  7663  00111A  F000               	nop	
  7664  00111C  0100               	movlb	0	; () banked
  7665  00111E  2BD4               	incf	UI@i_447& (0+255),f,b
  7666  001120  D7EF               	goto	l7671
  7667  001122                     l7679:
  7668                           
  7669                           ; BSR set to: 0
  7670  001122  0100               	movlb	0	; () banked
  7671  001124  51F6               	movf	_logstate& (0+255),w,b
  7672  001126  0100               	movlb	0	; () banked
  7673  001128  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7674  00112A  B4D8               	btfsc	status,2,c
  7675  00112C  0012               	return	
  7676                           
  7677                           ; BSR set to: 0
  7678                           ;UI.c: 206: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7679                           
  7680                           ; BSR set to: 0
  7681                           
  7682                           ; BSR set to: 0
  7683  00112E  0E00               	movlw	0
  7684  001130  0100               	movlb	0	; () banked
  7685  001132  6FD5               	movwf	UI@i_448& (0+255),b
  7686  001134                     l7685:
  7687                           
  7688                           ; BSR set to: 0
  7689  001134  0E63               	movlw	99
  7690  001136  0100               	movlb	0	; () banked
  7691  001138  65D5               	cpfsgt	UI@i_448& (0+255),b
  7692  00113A  D001               	goto	l7689
  7693  00113C  D00C               	goto	l7693
  7694  00113E                     l7689:
  7695                           
  7696                           ; BSR set to: 0
  7697  00113E  0E68               	movlw	104
  7698  001140  0100               	movlb	0	; () banked
  7699  001142  6FC4               	movwf	??_UI& (0+255),b
  7700  001144  0EE4               	movlw	228
  7701  001146                     u7447:
  7702  001146  2EE8               	decfsz	wreg,f,c
  7703  001148  D7FE               	bra	u7447
  7704  00114A  2FC4               	decfsz	??_UI& (0+255),f,b
  7705  00114C  D7FC               	bra	u7447
  7706  00114E  F000               	nop	
  7707  001150  0100               	movlb	0	; () banked
  7708  001152  2BD5               	incf	UI@i_448& (0+255),f,b
  7709  001154  D7EF               	goto	l7685
  7710  001156                     l7693:
  7711                           
  7712                           ; BSR set to: 0
  7713  001156  0100               	movlb	0	; () banked
  7714  001158  51F6               	movf	_logstate& (0+255),w,b
  7715  00115A  0100               	movlb	0	; () banked
  7716  00115C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7717  00115E  B4D8               	btfsc	status,2,c
  7718  001160  0012               	return	
  7719  001162                     l7697:
  7720  001162  0100               	movlb	0	; () banked
  7721  001164  51F6               	movf	_logstate& (0+255),w,b
  7722  001166  0100               	movlb	0	; () banked
  7723  001168  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7724  00116A  B4D8               	btfsc	status,2,c
  7725  00116C  0012               	return	
  7726  00116E  D44A               	goto	l7393
  7727  001170                     __end_of_UI:
  7728                           	opt stack 0
  7729                           tblptru	equ	0xFF8
  7730                           tblptrh	equ	0xFF7
  7731                           tblptrl	equ	0xFF6
  7732                           tablat	equ	0xFF5
  7733                           prodh	equ	0xFF4
  7734                           prodl	equ	0xFF3
  7735                           intcon	equ	0xFF2
  7736                           intcon2	equ	0xFF1
  7737                           intcon3	equ	0xFF0
  7738                           postinc0	equ	0xFEE
  7739                           wreg	equ	0xFE8
  7740                           postdec1	equ	0xFE5
  7741                           fsr1l	equ	0xFE1
  7742                           indf2	equ	0xFDF
  7743                           postinc2	equ	0xFDE
  7744                           postdec2	equ	0xFDD
  7745                           fsr2h	equ	0xFDA
  7746                           fsr2l	equ	0xFD9
  7747                           status	equ	0xFD8
  7748                           
  7749 ;; *************** function _printRTC *****************
  7750 ;; Defined at:
  7751 ;;		line 63 in file "RTC.c"
  7752 ;; Parameters:    Size  Location     Type
  7753 ;;		None
  7754 ;; Auto vars:     Size  Location     Type
  7755 ;;  i               2   66[BANK0 ] int 
  7756 ;;  INT_time       14   46[BANK0 ] int [7]
  7757 ;;  month           4   62[BANK0 ] unsigned char [4]
  7758 ;;  RTC_month       2   60[BANK0 ] int 
  7759 ;; Return value:  Size  Location     Type
  7760 ;;                  1    wreg      void 
  7761 ;; Registers used:
  7762 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7763 ;; Tracked objects:
  7764 ;;		On entry : 0/0
  7765 ;;		On exit  : 0/0
  7766 ;;		Unchanged: 0/0
  7767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7769 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7770 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7771 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7772 ;;Total ram usage:       25 bytes
  7773 ;; Hardware stack levels used:    1
  7774 ;; Hardware stack levels required when called:   10
  7775 ;; This function calls:
  7776 ;;		_getRTC
  7777 ;;		_lcdInst
  7778 ;;		_printf
  7779 ;;		_strcpy
  7780 ;; This function is called by:
  7781 ;;		_UI
  7782 ;;		_change_state_to_menu_start
  7783 ;; This function uses a non-reentrant model
  7784 ;;
  7785                           
  7786                           	psect	text24
  7787  001F28                     __ptext24:
  7788                           	opt stack 0
  7789  001F28                     _printRTC:
  7790                           	opt stack 18
  7791                           
  7792                           ;RTC.c: 64: getRTC();
  7793                           
  7794                           ; BSR set to: 0
  7795                           ;incstack = 0
  7796  001F28  EC5C  F01D         	call	_getRTC	;wreg free
  7797                           
  7798                           ;RTC.c: 65: char month[] = "MMM";
  7799  001F2C  C133  F0BE         	movff	printRTC@F3216,printRTC@month
  7800  001F30  C134  F0BF         	movff	printRTC@F3216+1,printRTC@month+1
  7801  001F34  C135  F0C0         	movff	printRTC@F3216+2,printRTC@month+2
  7802  001F38  C136  F0C1         	movff	printRTC@F3216+3,printRTC@month+3
  7803                           
  7804                           ;RTC.c: 66: int INT_time[7];
  7805                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  7806  001F3C  0E00               	movlw	0
  7807  001F3E  0100               	movlb	0	; () banked
  7808  001F40  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  7809  001F42  0E00               	movlw	0
  7810  001F44  6FC2               	movwf	printRTC@i& (0+255),b
  7811                           
  7812                           ; BSR set to: 0
  7813  001F46  0100               	movlb	0	; () banked
  7814  001F48  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7815  001F4A  D008               	goto	l5815
  7816  001F4C  0100               	movlb	0	; () banked
  7817  001F4E  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7818  001F50  E146               	bnz	l602
  7819  001F52  0E07               	movlw	7
  7820  001F54  0100               	movlb	0	; () banked
  7821  001F56  5DC2               	subwf	printRTC@i& (0+255),w,b
  7822  001F58  B0D8               	btfsc	status,0,c
  7823  001F5A  D041               	goto	l602
  7824  001F5C                     l5815:
  7825                           
  7826                           ; BSR set to: 0
  7827                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  7828  001F5C  0E24               	movlw	low _time
  7829  001F5E  0100               	movlb	0	; () banked
  7830  001F60  25C2               	addwf	printRTC@i& (0+255),w,b
  7831  001F62  6ED9               	movwf	fsr2l,c
  7832  001F64  0E01               	movlw	high _time
  7833  001F66  0100               	movlb	0	; () banked
  7834  001F68  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7835  001F6A  6EDA               	movwf	fsr2h,c
  7836  001F6C  50DF               	movf	indf2,w,c
  7837  001F6E  0100               	movlb	0	; () banked
  7838  001F70  6FAB               	movwf	??_printRTC& (0+255),b
  7839  001F72  0100               	movlb	0	; () banked
  7840  001F74  3BAB               	swapf	??_printRTC& (0+255),f,b
  7841  001F76  0E0F               	movlw	15
  7842  001F78  17AB               	andwf	??_printRTC& (0+255),f,b
  7843  001F7A  0E0F               	movlw	15
  7844  001F7C  0100               	movlb	0	; () banked
  7845  001F7E  17AB               	andwf	??_printRTC& (0+255),f,b
  7846  001F80  0100               	movlb	0	; () banked
  7847  001F82  51AB               	movf	??_printRTC& (0+255),w,b
  7848  001F84  0D0A               	mullw	10
  7849  001F86  0E24               	movlw	low _time
  7850  001F88  0100               	movlb	0	; () banked
  7851  001F8A  25C2               	addwf	printRTC@i& (0+255),w,b
  7852  001F8C  6ED9               	movwf	fsr2l,c
  7853  001F8E  0E01               	movlw	high _time
  7854  001F90  0100               	movlb	0	; () banked
  7855  001F92  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7856  001F94  6EDA               	movwf	fsr2h,c
  7857  001F96  50DF               	movf	indf2,w,c
  7858  001F98  0B0F               	andlw	15
  7859  001F9A  0100               	movlb	0	; () banked
  7860  001F9C  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  7861  001F9E  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  7862  001FA0  50F3               	movf	prodl,w,c
  7863  001FA2  0100               	movlb	0	; () banked
  7864  001FA4  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  7865  001FA6  50F4               	movf	prodh,w,c
  7866  001FA8  0100               	movlb	0	; () banked
  7867  001FAA  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  7868  001FAC  90D8               	bcf	status,0,c
  7869  001FAE  0100               	movlb	0	; () banked
  7870  001FB0  35C2               	rlcf	printRTC@i& (0+255),w,b
  7871  001FB2  6ED9               	movwf	fsr2l,c
  7872  001FB4  0100               	movlb	0	; () banked
  7873  001FB6  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  7874  001FB8  6EDA               	movwf	fsr2h,c
  7875  001FBA  0EAE               	movlw	low printRTC@INT_time
  7876  001FBC  26D9               	addwf	fsr2l,f,c
  7877  001FBE  0E00               	movlw	high printRTC@INT_time
  7878  001FC0  22DA               	addwfc	fsr2h,f,c
  7879  001FC2  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  7880  001FC6  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  7881                           
  7882                           ; BSR set to: 0
  7883  001FCA  0100               	movlb	0	; () banked
  7884  001FCC  4BC2               	infsnz	printRTC@i& (0+255),f,b
  7885  001FCE  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  7886                           
  7887                           ; BSR set to: 0
  7888  001FD0  0100               	movlb	0	; () banked
  7889  001FD2  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7890  001FD4  D7C3               	goto	l5815
  7891  001FD6  0100               	movlb	0	; () banked
  7892  001FD8  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7893  001FDA  E101               	bnz	u4480
  7894  001FDC  D7BA               	goto	L6
  7895  001FDE                     u4480:
  7896  001FDE                     l602:
  7897                           
  7898                           ; BSR set to: 0
  7899                           ;RTC.c: 69: }
  7900                           ;RTC.c: 70: int RTC_month = INT_time[5];
  7901  001FDE  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  7902  001FE2  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  7903                           
  7904                           ;RTC.c: 71: switch(RTC_month){
  7905  001FE6  D0B4               	goto	l5847
  7906  001FE8                     l5821:
  7907                           
  7908                           ; BSR set to: 0
  7909                           ;RTC.c: 73: strcpy(month, "JAN");
  7910  001FE8  0EBE               	movlw	low printRTC@month
  7911  001FEA  0100               	movlb	0	; () banked
  7912  001FEC  6F80               	movwf	strcpy@to& (0+255),b
  7913  001FEE  0E00               	movlw	high printRTC@month
  7914  001FF0  0100               	movlb	0	; () banked
  7915  001FF2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7916  001FF4  0EDB               	movlw	low STR_8
  7917  001FF6  0100               	movlb	0	; () banked
  7918  001FF8  6F82               	movwf	strcpy@from& (0+255),b
  7919  001FFA  0EFF               	movlw	high STR_8
  7920  001FFC  0100               	movlb	0	; () banked
  7921  001FFE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7922  002000  EC4D  F021         	call	_strcpy	;wreg free
  7923                           
  7924                           ;RTC.c: 74: break;
  7925  002004  D0D4               	goto	l5849
  7926  002006                     l5823:
  7927                           
  7928                           ;RTC.c: 76: strcpy(month, "FEB");
  7929  002006  0EBE               	movlw	low printRTC@month
  7930  002008  0100               	movlb	0	; () banked
  7931  00200A  6F80               	movwf	strcpy@to& (0+255),b
  7932  00200C  0E00               	movlw	high printRTC@month
  7933  00200E  0100               	movlb	0	; () banked
  7934  002010  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7935  002012  0ECB               	movlw	low STR_9
  7936  002014  0100               	movlb	0	; () banked
  7937  002016  6F82               	movwf	strcpy@from& (0+255),b
  7938  002018  0EFF               	movlw	high STR_9
  7939  00201A  0100               	movlb	0	; () banked
  7940  00201C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7941  00201E  EC4D  F021         	call	_strcpy	;wreg free
  7942                           
  7943                           ;RTC.c: 77: break;
  7944  002022  D0C5               	goto	l5849
  7945  002024                     l5825:
  7946                           
  7947                           ;RTC.c: 79: strcpy(month, "MAR");
  7948  002024  0EBE               	movlw	low printRTC@month
  7949  002026  0100               	movlb	0	; () banked
  7950  002028  6F80               	movwf	strcpy@to& (0+255),b
  7951  00202A  0E00               	movlw	high printRTC@month
  7952  00202C  0100               	movlb	0	; () banked
  7953  00202E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7954  002030  0EE7               	movlw	low STR_10
  7955  002032  0100               	movlb	0	; () banked
  7956  002034  6F82               	movwf	strcpy@from& (0+255),b
  7957  002036  0EFF               	movlw	high STR_10
  7958  002038  0100               	movlb	0	; () banked
  7959  00203A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7960  00203C  EC4D  F021         	call	_strcpy	;wreg free
  7961                           
  7962                           ;RTC.c: 80: break;
  7963  002040  D0B6               	goto	l5849
  7964  002042                     l5827:
  7965                           
  7966                           ;RTC.c: 82: strcpy(month, "APR");
  7967  002042  0EBE               	movlw	low printRTC@month
  7968  002044  0100               	movlb	0	; () banked
  7969  002046  6F80               	movwf	strcpy@to& (0+255),b
  7970  002048  0E00               	movlw	high printRTC@month
  7971  00204A  0100               	movlb	0	; () banked
  7972  00204C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7973  00204E  0EEB               	movlw	low STR_11
  7974  002050  0100               	movlb	0	; () banked
  7975  002052  6F82               	movwf	strcpy@from& (0+255),b
  7976  002054  0EFF               	movlw	high STR_11
  7977  002056  0100               	movlb	0	; () banked
  7978  002058  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7979  00205A  EC4D  F021         	call	_strcpy	;wreg free
  7980                           
  7981                           ;RTC.c: 83: break;
  7982  00205E  D0A7               	goto	l5849
  7983  002060                     l5829:
  7984                           
  7985                           ;RTC.c: 85: strcpy(month, "MAY");
  7986  002060  0EBE               	movlw	low printRTC@month
  7987  002062  0100               	movlb	0	; () banked
  7988  002064  6F80               	movwf	strcpy@to& (0+255),b
  7989  002066  0E00               	movlw	high printRTC@month
  7990  002068  0100               	movlb	0	; () banked
  7991  00206A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7992  00206C  0EFB               	movlw	low STR_12
  7993  00206E  0100               	movlb	0	; () banked
  7994  002070  6F82               	movwf	strcpy@from& (0+255),b
  7995  002072  0EFF               	movlw	high STR_12
  7996  002074  0100               	movlb	0	; () banked
  7997  002076  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7998  002078  EC4D  F021         	call	_strcpy	;wreg free
  7999                           
  8000                           ;RTC.c: 86: break;
  8001  00207C  D098               	goto	l5849
  8002  00207E                     l5831:
  8003                           
  8004                           ;RTC.c: 88: strcpy(month, "JUN");
  8005  00207E  0EBE               	movlw	low printRTC@month
  8006  002080  0100               	movlb	0	; () banked
  8007  002082  6F80               	movwf	strcpy@to& (0+255),b
  8008  002084  0E00               	movlw	high printRTC@month
  8009  002086  0100               	movlb	0	; () banked
  8010  002088  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8011  00208A  0EDF               	movlw	low STR_13
  8012  00208C  0100               	movlb	0	; () banked
  8013  00208E  6F82               	movwf	strcpy@from& (0+255),b
  8014  002090  0EFF               	movlw	high STR_13
  8015  002092  0100               	movlb	0	; () banked
  8016  002094  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8017  002096  EC4D  F021         	call	_strcpy	;wreg free
  8018                           
  8019                           ;RTC.c: 89: break;
  8020  00209A  D089               	goto	l5849
  8021  00209C                     l5833:
  8022                           
  8023                           ;RTC.c: 91: strcpy(month, "JUL");
  8024  00209C  0EBE               	movlw	low printRTC@month
  8025  00209E  0100               	movlb	0	; () banked
  8026  0020A0  6F80               	movwf	strcpy@to& (0+255),b
  8027  0020A2  0E00               	movlw	high printRTC@month
  8028  0020A4  0100               	movlb	0	; () banked
  8029  0020A6  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8030  0020A8  0ED7               	movlw	low STR_14
  8031  0020AA  0100               	movlb	0	; () banked
  8032  0020AC  6F82               	movwf	strcpy@from& (0+255),b
  8033  0020AE  0EFF               	movlw	high STR_14
  8034  0020B0  0100               	movlb	0	; () banked
  8035  0020B2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8036  0020B4  EC4D  F021         	call	_strcpy	;wreg free
  8037                           
  8038                           ;RTC.c: 92: break;
  8039  0020B8  D07A               	goto	l5849
  8040  0020BA                     l5835:
  8041                           
  8042                           ;RTC.c: 94: strcpy(month, "AUG");
  8043  0020BA  0EBE               	movlw	low printRTC@month
  8044  0020BC  0100               	movlb	0	; () banked
  8045  0020BE  6F80               	movwf	strcpy@to& (0+255),b
  8046  0020C0  0E00               	movlw	high printRTC@month
  8047  0020C2  0100               	movlb	0	; () banked
  8048  0020C4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8049  0020C6  0ED3               	movlw	low STR_15
  8050  0020C8  0100               	movlb	0	; () banked
  8051  0020CA  6F82               	movwf	strcpy@from& (0+255),b
  8052  0020CC  0EFF               	movlw	high STR_15
  8053  0020CE  0100               	movlb	0	; () banked
  8054  0020D0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8055  0020D2  EC4D  F021         	call	_strcpy	;wreg free
  8056                           
  8057                           ;RTC.c: 95: break;
  8058  0020D6  D06B               	goto	l5849
  8059  0020D8                     l5837:
  8060                           
  8061                           ;RTC.c: 97: strcpy(month, "SEP");
  8062  0020D8  0EBE               	movlw	low printRTC@month
  8063  0020DA  0100               	movlb	0	; () banked
  8064  0020DC  6F80               	movwf	strcpy@to& (0+255),b
  8065  0020DE  0E00               	movlw	high printRTC@month
  8066  0020E0  0100               	movlb	0	; () banked
  8067  0020E2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8068  0020E4  0EE3               	movlw	low STR_16
  8069  0020E6  0100               	movlb	0	; () banked
  8070  0020E8  6F82               	movwf	strcpy@from& (0+255),b
  8071  0020EA  0EFF               	movlw	high STR_16
  8072  0020EC  0100               	movlb	0	; () banked
  8073  0020EE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8074  0020F0  EC4D  F021         	call	_strcpy	;wreg free
  8075                           
  8076                           ;RTC.c: 98: break;
  8077  0020F4  D05C               	goto	l5849
  8078  0020F6                     l5839:
  8079                           
  8080                           ;RTC.c: 100: strcpy(month, "OCT");
  8081  0020F6  0EBE               	movlw	low printRTC@month
  8082  0020F8  0100               	movlb	0	; () banked
  8083  0020FA  6F80               	movwf	strcpy@to& (0+255),b
  8084  0020FC  0E00               	movlw	high printRTC@month
  8085  0020FE  0100               	movlb	0	; () banked
  8086  002100  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8087  002102  0EF3               	movlw	low STR_17
  8088  002104  0100               	movlb	0	; () banked
  8089  002106  6F82               	movwf	strcpy@from& (0+255),b
  8090  002108  0EFF               	movlw	high STR_17
  8091  00210A  0100               	movlb	0	; () banked
  8092  00210C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8093  00210E  EC4D  F021         	call	_strcpy	;wreg free
  8094                           
  8095                           ;RTC.c: 101: break;
  8096  002112  D04D               	goto	l5849
  8097  002114                     l5841:
  8098                           
  8099                           ;RTC.c: 103: strcpy(month, "NOV");
  8100  002114  0EBE               	movlw	low printRTC@month
  8101  002116  0100               	movlb	0	; () banked
  8102  002118  6F80               	movwf	strcpy@to& (0+255),b
  8103  00211A  0E00               	movlw	high printRTC@month
  8104  00211C  0100               	movlb	0	; () banked
  8105  00211E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8106  002120  0EF7               	movlw	low STR_18
  8107  002122  0100               	movlb	0	; () banked
  8108  002124  6F82               	movwf	strcpy@from& (0+255),b
  8109  002126  0EFF               	movlw	high STR_18
  8110  002128  0100               	movlb	0	; () banked
  8111  00212A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8112  00212C  EC4D  F021         	call	_strcpy	;wreg free
  8113                           
  8114                           ;RTC.c: 104: break;
  8115  002130  D03E               	goto	l5849
  8116  002132                     l5843:
  8117                           
  8118                           ;RTC.c: 106: strcpy(month, "DEC");
  8119  002132  0EBE               	movlw	low printRTC@month
  8120  002134  0100               	movlb	0	; () banked
  8121  002136  6F80               	movwf	strcpy@to& (0+255),b
  8122  002138  0E00               	movlw	high printRTC@month
  8123  00213A  0100               	movlb	0	; () banked
  8124  00213C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8125  00213E  0ECF               	movlw	low STR_19
  8126  002140  0100               	movlb	0	; () banked
  8127  002142  6F82               	movwf	strcpy@from& (0+255),b
  8128  002144  0EFF               	movlw	high STR_19
  8129  002146  0100               	movlb	0	; () banked
  8130  002148  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8131  00214A  EC4D  F021         	call	_strcpy	;wreg free
  8132                           
  8133                           ;RTC.c: 108: }
  8134                           
  8135                           ;RTC.c: 107: break;
  8136  00214E  D02F               	goto	l5849
  8137  002150                     l5847:
  8138  002150  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  8139  002154  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  8140                           
  8141                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8142                           ; Switch size 1, requested type "space"
  8143                           ; Number of cases is 1, Range of values is 0 to 0
  8144                           ; switch strategies available:
  8145                           ; Name         Instructions Cycles
  8146                           ; simple_byte            4     3 (average)
  8147                           ;	Chosen strategy is simple_byte
  8148  002158  0100               	movlb	0	; () banked
  8149  00215A  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  8150  00215C  0A00               	xorlw	0	; case 0
  8151  00215E  A4D8               	btfss	status,2,c
  8152  002160  D026               	goto	l5849
  8153                           
  8154                           ; BSR set to: 0
  8155                           ; Switch size 1, requested type "space"
  8156                           ; Number of cases is 12, Range of values is 1 to 12
  8157                           ; switch strategies available:
  8158                           ; Name         Instructions Cycles
  8159                           ; simple_byte           37    19 (average)
  8160                           ;	Chosen strategy is simple_byte
  8161  002162  0100               	movlb	0	; () banked
  8162  002164  51AB               	movf	??_printRTC& (0+255),w,b
  8163  002166  0A01               	xorlw	1	; case 1
  8164  002168  B4D8               	btfsc	status,2,c
  8165  00216A  D73E               	goto	l5821
  8166  00216C  0A03               	xorlw	3	; case 2
  8167  00216E  B4D8               	btfsc	status,2,c
  8168  002170  D74A               	goto	l5823
  8169  002172  0A01               	xorlw	1	; case 3
  8170  002174  B4D8               	btfsc	status,2,c
  8171  002176  D756               	goto	l5825
  8172  002178  0A07               	xorlw	7	; case 4
  8173  00217A  B4D8               	btfsc	status,2,c
  8174  00217C  D762               	goto	l5827
  8175  00217E  0A01               	xorlw	1	; case 5
  8176  002180  B4D8               	btfsc	status,2,c
  8177  002182  D76E               	goto	l5829
  8178  002184  0A03               	xorlw	3	; case 6
  8179  002186  B4D8               	btfsc	status,2,c
  8180  002188  D77A               	goto	l5831
  8181  00218A  0A01               	xorlw	1	; case 7
  8182  00218C  B4D8               	btfsc	status,2,c
  8183  00218E  D786               	goto	l5833
  8184  002190  0A0F               	xorlw	15	; case 8
  8185  002192  B4D8               	btfsc	status,2,c
  8186  002194  D792               	goto	l5835
  8187  002196  0A01               	xorlw	1	; case 9
  8188  002198  B4D8               	btfsc	status,2,c
  8189  00219A  D79E               	goto	l5837
  8190  00219C  0A03               	xorlw	3	; case 10
  8191  00219E  B4D8               	btfsc	status,2,c
  8192  0021A0  D7AA               	goto	l5839
  8193  0021A2  0A01               	xorlw	1	; case 11
  8194  0021A4  B4D8               	btfsc	status,2,c
  8195  0021A6  D7B6               	goto	l5841
  8196  0021A8  0A07               	xorlw	7	; case 12
  8197  0021AA  B4D8               	btfsc	status,2,c
  8198  0021AC  D7C2               	goto	l5843
  8199  0021AE                     l5849:
  8200                           
  8201                           ;RTC.c: 109: lcdInst(0b10000000);;
  8202  0021AE  0E80               	movlw	128
  8203  0021B0  ECE1  F023         	call	_lcdInst
  8204                           
  8205                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  8206  0021B4  0E40               	movlw	low STR_21
  8207  0021B6  0100               	movlb	0	; () banked
  8208  0021B8  6F8E               	movwf	printf@f& (0+255),b
  8209  0021BA  0EFB               	movlw	high STR_21
  8210  0021BC  0100               	movlb	0	; () banked
  8211  0021BE  6F8F               	movwf	(printf@f+1)& (0+255),b
  8212  0021C0  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  8213  0021C4  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  8214  0021C8  0EBE               	movlw	low printRTC@month
  8215  0021CA  0100               	movlb	0	; () banked
  8216  0021CC  6F92               	movwf	(?_printf+4)& (0+255),b
  8217  0021CE  0E00               	movlw	high printRTC@month
  8218  0021D0  0100               	movlb	0	; () banked
  8219  0021D2  6F93               	movwf	(?_printf+5)& (0+255),b
  8220  0021D4  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  8221  0021D8  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  8222  0021DC  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  8223  0021E0  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  8224  0021E4  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  8225  0021E8  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  8226  0021EC  ECB8  F008         	call	_printf	;wreg free
  8227  0021F0  0012               	return		;funcret
  8228  0021F2                     __end_of_printRTC:
  8229                           	opt stack 0
  8230                           tblptru	equ	0xFF8
  8231                           tblptrh	equ	0xFF7
  8232                           tblptrl	equ	0xFF6
  8233                           tablat	equ	0xFF5
  8234                           prodh	equ	0xFF4
  8235                           prodl	equ	0xFF3
  8236                           intcon	equ	0xFF2
  8237                           intcon2	equ	0xFF1
  8238                           intcon3	equ	0xFF0
  8239                           postinc0	equ	0xFEE
  8240                           wreg	equ	0xFE8
  8241                           postdec1	equ	0xFE5
  8242                           fsr1l	equ	0xFE1
  8243                           indf2	equ	0xFDF
  8244                           postinc2	equ	0xFDE
  8245                           postdec2	equ	0xFDD
  8246                           fsr2h	equ	0xFDA
  8247                           fsr2l	equ	0xFD9
  8248                           status	equ	0xFD8
  8249                           
  8250 ;; *************** function _strcpy *****************
  8251 ;; Defined at:
  8252 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  8253 ;; Parameters:    Size  Location     Type
  8254 ;;  to              2    0[BANK0 ] PTR unsigned char 
  8255 ;;		 -> printRTC@month(4), UI@month(4), 
  8256 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  8257 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  8258 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  8259 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  8260 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  8261 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  8262 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  8263 ;;		 -> STR_8(4), 
  8264 ;; Auto vars:     Size  Location     Type
  8265 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  8266 ;;		 -> printRTC@month(4), UI@month(4), 
  8267 ;; Return value:  Size  Location     Type
  8268 ;;                  2    0[BANK0 ] PTR unsigned char 
  8269 ;; Registers used:
  8270 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8271 ;; Tracked objects:
  8272 ;;		On entry : 0/0
  8273 ;;		On exit  : 0/0
  8274 ;;		Unchanged: 0/0
  8275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8276 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8277 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8279 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8280 ;;Total ram usage:        6 bytes
  8281 ;; Hardware stack levels used:    1
  8282 ;; Hardware stack levels required when called:    7
  8283 ;; This function calls:
  8284 ;;		Nothing
  8285 ;; This function is called by:
  8286 ;;		_UI
  8287 ;;		_printRTC
  8288 ;; This function uses a non-reentrant model
  8289 ;;
  8290                           
  8291                           	psect	text25
  8292  00429A                     __ptext25:
  8293                           	opt stack 0
  8294  00429A                     _strcpy:
  8295                           	opt stack 20
  8296                           
  8297                           ;incstack = 0
  8298  00429A  C080  F084         	movff	strcpy@to,strcpy@cp
  8299  00429E  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  8300  0042A2  D006               	goto	l5559
  8301  0042A4                     l5557:
  8302  0042A4  0100               	movlb	0	; () banked
  8303  0042A6  4B84               	infsnz	strcpy@cp& (0+255),f,b
  8304  0042A8  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  8305  0042AA  0100               	movlb	0	; () banked
  8306  0042AC  4B82               	infsnz	strcpy@from& (0+255),f,b
  8307  0042AE  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  8308  0042B0                     l5559:
  8309  0042B0  C082  FFF6         	movff	strcpy@from,tblptrl
  8310  0042B4  C083  FFF7         	movff	strcpy@from+1,tblptrh
  8311  0042B8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8312  0042B8  6AF8               	clrf	tblptru,c
  8313  0042BA                     	endif
  8314  0042BA                     	if	0	;tblptru may be non-zero
  8315  0042BA                     	endif
  8316  0042BA  C084  FFD9         	movff	strcpy@cp,fsr2l
  8317  0042BE  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  8318  0042C2  0008               	tblrd		*
  8319  0042C4  CFF5 FFDF          	movff	tablat,indf2
  8320  0042C8  50DF               	movf	indf2,w,c
  8321  0042CA  B4D8               	btfsc	status,2,c
  8322  0042CC  0012               	return	
  8323  0042CE  D7EA               	goto	l5557
  8324  0042D0                     __end_of_strcpy:
  8325                           	opt stack 0
  8326                           tblptru	equ	0xFF8
  8327                           tblptrh	equ	0xFF7
  8328                           tblptrl	equ	0xFF6
  8329                           tablat	equ	0xFF5
  8330                           prodh	equ	0xFF4
  8331                           prodl	equ	0xFF3
  8332                           intcon	equ	0xFF2
  8333                           intcon2	equ	0xFF1
  8334                           intcon3	equ	0xFF0
  8335                           postinc0	equ	0xFEE
  8336                           wreg	equ	0xFE8
  8337                           postdec1	equ	0xFE5
  8338                           fsr1l	equ	0xFE1
  8339                           indf2	equ	0xFDF
  8340                           postinc2	equ	0xFDE
  8341                           postdec2	equ	0xFDD
  8342                           fsr2h	equ	0xFDA
  8343                           fsr2l	equ	0xFD9
  8344                           status	equ	0xFD8
  8345                           
  8346 ;; *************** function _getRTC *****************
  8347 ;; Defined at:
  8348 ;;		line 44 in file "RTC.c"
  8349 ;; Parameters:    Size  Location     Type
  8350 ;;		None
  8351 ;; Auto vars:     Size  Location     Type
  8352 ;;  i               2    3[BANK0 ] int 
  8353 ;; Return value:  Size  Location     Type
  8354 ;;                  1    wreg      void 
  8355 ;; Registers used:
  8356 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8357 ;; Tracked objects:
  8358 ;;		On entry : 0/0
  8359 ;;		On exit  : 0/0
  8360 ;;		Unchanged: 0/0
  8361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8363 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8365 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8366 ;;Total ram usage:        2 bytes
  8367 ;; Hardware stack levels used:    1
  8368 ;; Hardware stack levels required when called:    9
  8369 ;; This function calls:
  8370 ;;		_I2C_Master_Read
  8371 ;;		_I2C_Master_Start
  8372 ;;		_I2C_Master_Stop
  8373 ;;		_I2C_Master_Write
  8374 ;; This function is called by:
  8375 ;;		_printRTC
  8376 ;;		_initSortTimer
  8377 ;; This function uses a non-reentrant model
  8378 ;;
  8379                           
  8380                           	psect	text26
  8381  003AB8                     __ptext26:
  8382                           	opt stack 0
  8383  003AB8                     _getRTC:
  8384                           	opt stack 18
  8385                           
  8386                           ;RTC.c: 48: I2C_Master_Start();
  8387                           
  8388                           ;incstack = 0
  8389  003AB8  EC07  F024         	call	_I2C_Master_Start	;wreg free
  8390                           
  8391                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  8392  003ABC  0E00               	movlw	0
  8393  003ABE  0100               	movlb	0	; () banked
  8394  003AC0  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8395  003AC2  0ED0               	movlw	208
  8396  003AC4  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8397  003AC6  ECF5  F023         	call	_I2C_Master_Write	;wreg free
  8398                           
  8399                           ;RTC.c: 50: I2C_Master_Write(0x00);
  8400  003ACA  0E00               	movlw	0
  8401  003ACC  0100               	movlb	0	; () banked
  8402  003ACE  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8403  003AD0  0E00               	movlw	0
  8404  003AD2  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8405  003AD4  ECF5  F023         	call	_I2C_Master_Write	;wreg free
  8406                           
  8407                           ;RTC.c: 51: I2C_Master_Stop();
  8408  003AD8  EC03  F024         	call	_I2C_Master_Stop	;wreg free
  8409                           
  8410                           ;RTC.c: 54: I2C_Master_Start();
  8411  003ADC  EC07  F024         	call	_I2C_Master_Start	;wreg free
  8412                           
  8413                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  8414  003AE0  0E00               	movlw	0
  8415  003AE2  0100               	movlb	0	; () banked
  8416  003AE4  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8417  003AE6  0ED1               	movlw	209
  8418  003AE8  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8419  003AEA  ECF5  F023         	call	_I2C_Master_Write	;wreg free
  8420                           
  8421                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  8422  003AEE  0E00               	movlw	0
  8423  003AF0  0100               	movlb	0	; () banked
  8424  003AF2  6F84               	movwf	(getRTC@i+1)& (0+255),b
  8425  003AF4  0E00               	movlw	0
  8426  003AF6  6F83               	movwf	getRTC@i& (0+255),b
  8427  003AF8                     l5565:
  8428                           
  8429                           ; BSR set to: 0
  8430  003AF8  0100               	movlb	0	; () banked
  8431  003AFA  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  8432  003AFC  D008               	goto	l5569
  8433  003AFE  0100               	movlb	0	; () banked
  8434  003B00  5184               	movf	(getRTC@i+1)& (0+255),w,b
  8435  003B02  E115               	bnz	l5575
  8436  003B04  0E06               	movlw	6
  8437  003B06  0100               	movlb	0	; () banked
  8438  003B08  5D83               	subwf	getRTC@i& (0+255),w,b
  8439  003B0A  B0D8               	btfsc	status,0,c
  8440  003B0C  D010               	goto	l5575
  8441  003B0E                     l5569:
  8442                           
  8443                           ; BSR set to: 0
  8444                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  8445  003B0E  0E24               	movlw	low _time
  8446  003B10  0100               	movlb	0	; () banked
  8447  003B12  2583               	addwf	getRTC@i& (0+255),w,b
  8448  003B14  6ED9               	movwf	fsr2l,c
  8449  003B16  0E01               	movlw	high _time
  8450  003B18  0100               	movlb	0	; () banked
  8451  003B1A  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  8452  003B1C  6EDA               	movwf	fsr2h,c
  8453  003B1E  0E01               	movlw	1
  8454  003B20  ECA4  F022         	call	_I2C_Master_Read
  8455  003B24  6EDF               	movwf	indf2,c
  8456  003B26  0100               	movlb	0	; () banked
  8457  003B28  4B83               	infsnz	getRTC@i& (0+255),f,b
  8458  003B2A  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  8459  003B2C  D7E5               	goto	l5565
  8460  003B2E                     l5575:
  8461                           
  8462                           ; BSR set to: 0
  8463                           ;RTC.c: 58: }
  8464                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  8465  003B2E  0E00               	movlw	0
  8466  003B30  ECA4  F022         	call	_I2C_Master_Read
  8467  003B34  0101               	movlb	1	; () banked
  8468  003B36  6F2A               	movwf	(_time+6)& (0+255),b
  8469                           
  8470                           ;RTC.c: 60: I2C_Master_Stop();
  8471  003B38  EC03  F024         	call	_I2C_Master_Stop	;wreg free
  8472  003B3C  0012               	return		;funcret
  8473  003B3E                     __end_of_getRTC:
  8474                           	opt stack 0
  8475                           tblptru	equ	0xFF8
  8476                           tblptrh	equ	0xFF7
  8477                           tblptrl	equ	0xFF6
  8478                           tablat	equ	0xFF5
  8479                           prodh	equ	0xFF4
  8480                           prodl	equ	0xFF3
  8481                           intcon	equ	0xFF2
  8482                           intcon2	equ	0xFF1
  8483                           intcon3	equ	0xFF0
  8484                           postinc0	equ	0xFEE
  8485                           wreg	equ	0xFE8
  8486                           postdec1	equ	0xFE5
  8487                           fsr1l	equ	0xFE1
  8488                           indf2	equ	0xFDF
  8489                           postinc2	equ	0xFDE
  8490                           postdec2	equ	0xFDD
  8491                           fsr2h	equ	0xFDA
  8492                           fsr2l	equ	0xFD9
  8493                           status	equ	0xFD8
  8494                           
  8495 ;; *************** function _I2C_Master_Write *****************
  8496 ;; Defined at:
  8497 ;;		line 49 in file "I2C.c"
  8498 ;; Parameters:    Size  Location     Type
  8499 ;;  d               2    1[BANK0 ] unsigned int 
  8500 ;; Auto vars:     Size  Location     Type
  8501 ;;		None
  8502 ;; Return value:  Size  Location     Type
  8503 ;;                  1    wreg      void 
  8504 ;; Registers used:
  8505 ;;		wreg, status,2, status,0, cstack
  8506 ;; Tracked objects:
  8507 ;;		On entry : 0/0
  8508 ;;		On exit  : 0/0
  8509 ;;		Unchanged: 0/0
  8510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8511 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8514 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8515 ;;Total ram usage:        2 bytes
  8516 ;; Hardware stack levels used:    1
  8517 ;; Hardware stack levels required when called:    8
  8518 ;; This function calls:
  8519 ;;		_I2C_Master_Wait
  8520 ;; This function is called by:
  8521 ;;		_loadRTC
  8522 ;;		_getRTC
  8523 ;; This function uses a non-reentrant model
  8524 ;;
  8525                           
  8526                           	psect	text27
  8527  0047EA                     __ptext27:
  8528                           	opt stack 0
  8529  0047EA                     _I2C_Master_Write:
  8530                           	opt stack 18
  8531                           
  8532                           ;I2C.c: 51: I2C_Master_Wait();
  8533                           
  8534                           ;incstack = 0
  8535  0047EA  ECC6  F023         	call	_I2C_Master_Wait	;wreg free
  8536                           
  8537                           ;I2C.c: 52: SSPBUF = d;
  8538  0047EE  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  8539  0047F2  0012               	return		;funcret
  8540  0047F4                     __end_of_I2C_Master_Write:
  8541                           	opt stack 0
  8542                           tblptru	equ	0xFF8
  8543                           tblptrh	equ	0xFF7
  8544                           tblptrl	equ	0xFF6
  8545                           tablat	equ	0xFF5
  8546                           prodh	equ	0xFF4
  8547                           prodl	equ	0xFF3
  8548                           intcon	equ	0xFF2
  8549                           intcon2	equ	0xFF1
  8550                           intcon3	equ	0xFF0
  8551                           postinc0	equ	0xFEE
  8552                           wreg	equ	0xFE8
  8553                           postdec1	equ	0xFE5
  8554                           fsr1l	equ	0xFE1
  8555                           indf2	equ	0xFDF
  8556                           postinc2	equ	0xFDE
  8557                           postdec2	equ	0xFDD
  8558                           fsr2h	equ	0xFDA
  8559                           fsr2l	equ	0xFD9
  8560                           status	equ	0xFD8
  8561                           
  8562 ;; *************** function _I2C_Master_Stop *****************
  8563 ;; Defined at:
  8564 ;;		line 43 in file "I2C.c"
  8565 ;; Parameters:    Size  Location     Type
  8566 ;;		None
  8567 ;; Auto vars:     Size  Location     Type
  8568 ;;		None
  8569 ;; Return value:  Size  Location     Type
  8570 ;;                  1    wreg      void 
  8571 ;; Registers used:
  8572 ;;		wreg, status,2, status,0, cstack
  8573 ;; Tracked objects:
  8574 ;;		On entry : 0/0
  8575 ;;		On exit  : 0/0
  8576 ;;		Unchanged: 0/0
  8577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8581 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8582 ;;Total ram usage:        0 bytes
  8583 ;; Hardware stack levels used:    1
  8584 ;; Hardware stack levels required when called:    8
  8585 ;; This function calls:
  8586 ;;		_I2C_Master_Wait
  8587 ;; This function is called by:
  8588 ;;		_loadRTC
  8589 ;;		_getRTC
  8590 ;; This function uses a non-reentrant model
  8591 ;;
  8592                           
  8593                           	psect	text28
  8594  004806                     __ptext28:
  8595                           	opt stack 0
  8596  004806                     _I2C_Master_Stop:
  8597                           	opt stack 18
  8598                           
  8599                           ;I2C.c: 45: I2C_Master_Wait();
  8600                           
  8601                           ;incstack = 0
  8602  004806  ECC6  F023         	call	_I2C_Master_Wait	;wreg free
  8603                           
  8604                           ;I2C.c: 46: PEN = 1;
  8605  00480A  84C5               	bsf	4037,2,c	;volatile
  8606  00480C  0012               	return		;funcret
  8607  00480E                     __end_of_I2C_Master_Stop:
  8608                           	opt stack 0
  8609                           tblptru	equ	0xFF8
  8610                           tblptrh	equ	0xFF7
  8611                           tblptrl	equ	0xFF6
  8612                           tablat	equ	0xFF5
  8613                           prodh	equ	0xFF4
  8614                           prodl	equ	0xFF3
  8615                           intcon	equ	0xFF2
  8616                           intcon2	equ	0xFF1
  8617                           intcon3	equ	0xFF0
  8618                           postinc0	equ	0xFEE
  8619                           wreg	equ	0xFE8
  8620                           postdec1	equ	0xFE5
  8621                           fsr1l	equ	0xFE1
  8622                           indf2	equ	0xFDF
  8623                           postinc2	equ	0xFDE
  8624                           postdec2	equ	0xFDD
  8625                           fsr2h	equ	0xFDA
  8626                           fsr2l	equ	0xFD9
  8627                           status	equ	0xFD8
  8628                           
  8629 ;; *************** function _I2C_Master_Start *****************
  8630 ;; Defined at:
  8631 ;;		line 31 in file "I2C.c"
  8632 ;; Parameters:    Size  Location     Type
  8633 ;;		None
  8634 ;; Auto vars:     Size  Location     Type
  8635 ;;		None
  8636 ;; Return value:  Size  Location     Type
  8637 ;;                  1    wreg      void 
  8638 ;; Registers used:
  8639 ;;		wreg, status,2, status,0, cstack
  8640 ;; Tracked objects:
  8641 ;;		On entry : 0/0
  8642 ;;		On exit  : 0/0
  8643 ;;		Unchanged: 0/0
  8644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8648 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8649 ;;Total ram usage:        0 bytes
  8650 ;; Hardware stack levels used:    1
  8651 ;; Hardware stack levels required when called:    8
  8652 ;; This function calls:
  8653 ;;		_I2C_Master_Wait
  8654 ;; This function is called by:
  8655 ;;		_loadRTC
  8656 ;;		_getRTC
  8657 ;; This function uses a non-reentrant model
  8658 ;;
  8659                           
  8660                           	psect	text29
  8661  00480E                     __ptext29:
  8662                           	opt stack 0
  8663  00480E                     _I2C_Master_Start:
  8664                           	opt stack 18
  8665                           
  8666                           ;I2C.c: 33: I2C_Master_Wait();
  8667                           
  8668                           ;incstack = 0
  8669  00480E  ECC6  F023         	call	_I2C_Master_Wait	;wreg free
  8670                           
  8671                           ;I2C.c: 34: SEN = 1;
  8672  004812  80C5               	bsf	4037,0,c	;volatile
  8673  004814  0012               	return		;funcret
  8674  004816                     __end_of_I2C_Master_Start:
  8675                           	opt stack 0
  8676                           tblptru	equ	0xFF8
  8677                           tblptrh	equ	0xFF7
  8678                           tblptrl	equ	0xFF6
  8679                           tablat	equ	0xFF5
  8680                           prodh	equ	0xFF4
  8681                           prodl	equ	0xFF3
  8682                           intcon	equ	0xFF2
  8683                           intcon2	equ	0xFF1
  8684                           intcon3	equ	0xFF0
  8685                           postinc0	equ	0xFEE
  8686                           wreg	equ	0xFE8
  8687                           postdec1	equ	0xFE5
  8688                           fsr1l	equ	0xFE1
  8689                           indf2	equ	0xFDF
  8690                           postinc2	equ	0xFDE
  8691                           postdec2	equ	0xFDD
  8692                           fsr2h	equ	0xFDA
  8693                           fsr2l	equ	0xFD9
  8694                           status	equ	0xFD8
  8695                           
  8696 ;; *************** function _I2C_Master_Read *****************
  8697 ;; Defined at:
  8698 ;;		line 55 in file "I2C.c"
  8699 ;; Parameters:    Size  Location     Type
  8700 ;;  a               1    wreg     unsigned char 
  8701 ;; Auto vars:     Size  Location     Type
  8702 ;;  a               1    1[BANK0 ] unsigned char 
  8703 ;;  temp            1    2[BANK0 ] unsigned char 
  8704 ;; Return value:  Size  Location     Type
  8705 ;;                  1    wreg      unsigned char 
  8706 ;; Registers used:
  8707 ;;		wreg, status,2, status,0, cstack
  8708 ;; Tracked objects:
  8709 ;;		On entry : 0/0
  8710 ;;		On exit  : 0/0
  8711 ;;		Unchanged: 0/0
  8712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8714 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8716 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8717 ;;Total ram usage:        2 bytes
  8718 ;; Hardware stack levels used:    1
  8719 ;; Hardware stack levels required when called:    8
  8720 ;; This function calls:
  8721 ;;		_I2C_Master_Wait
  8722 ;; This function is called by:
  8723 ;;		_getRTC
  8724 ;; This function uses a non-reentrant model
  8725 ;;
  8726                           
  8727                           	psect	text30
  8728  004548                     __ptext30:
  8729                           	opt stack 0
  8730  004548                     _I2C_Master_Read:
  8731                           	opt stack 18
  8732                           
  8733                           ;incstack = 0
  8734                           ;I2C_Master_Read@a stored from wreg
  8735  004548  0100               	movlb	0	; () banked
  8736  00454A  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  8737                           
  8738                           ;I2C.c: 57: unsigned char temp;
  8739                           ;I2C.c: 58: I2C_Master_Wait();
  8740  00454C  ECC6  F023         	call	_I2C_Master_Wait	;wreg free
  8741                           
  8742                           ;I2C.c: 59: RCEN = 1;
  8743  004550  86C5               	bsf	4037,3,c	;volatile
  8744                           
  8745                           ;I2C.c: 60: I2C_Master_Wait();
  8746  004552  ECC6  F023         	call	_I2C_Master_Wait	;wreg free
  8747                           
  8748                           ;I2C.c: 61: temp = SSPBUF;
  8749  004556  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  8750                           
  8751                           ;I2C.c: 62: I2C_Master_Wait();
  8752  00455A  ECC6  F023         	call	_I2C_Master_Wait	;wreg free
  8753                           
  8754                           ;I2C.c: 63: ACKDT = (a)?0:1;
  8755  00455E  0100               	movlb	0	; () banked
  8756  004560  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  8757  004562  0100               	movlb	0	; () banked
  8758  004564  A4D8               	btfss	status,2,c
  8759  004566  D002               	goto	u3570
  8760  004568  8AC5               	bsf	4037,5,c	;volatile
  8761  00456A  D001               	goto	l5253
  8762  00456C                     u3570:
  8763  00456C  9AC5               	bcf	4037,5,c	;volatile
  8764  00456E                     l5253:
  8765                           
  8766                           ;I2C.c: 64: ACKEN = 1;
  8767  00456E  88C5               	bsf	4037,4,c	;volatile
  8768                           
  8769                           ;I2C.c: 65: return temp;
  8770  004570  0100               	movlb	0	; () banked
  8771  004572  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  8772  004574  0012               	return	
  8773  004576                     __end_of_I2C_Master_Read:
  8774                           	opt stack 0
  8775                           tblptru	equ	0xFF8
  8776                           tblptrh	equ	0xFF7
  8777                           tblptrl	equ	0xFF6
  8778                           tablat	equ	0xFF5
  8779                           prodh	equ	0xFF4
  8780                           prodl	equ	0xFF3
  8781                           intcon	equ	0xFF2
  8782                           intcon2	equ	0xFF1
  8783                           intcon3	equ	0xFF0
  8784                           postinc0	equ	0xFEE
  8785                           wreg	equ	0xFE8
  8786                           postdec1	equ	0xFE5
  8787                           fsr1l	equ	0xFE1
  8788                           indf2	equ	0xFDF
  8789                           postinc2	equ	0xFDE
  8790                           postdec2	equ	0xFDD
  8791                           fsr2h	equ	0xFDA
  8792                           fsr2l	equ	0xFD9
  8793                           status	equ	0xFD8
  8794                           
  8795 ;; *************** function _I2C_Master_Wait *****************
  8796 ;; Defined at:
  8797 ;;		line 26 in file "I2C.c"
  8798 ;; Parameters:    Size  Location     Type
  8799 ;;		None
  8800 ;; Auto vars:     Size  Location     Type
  8801 ;;		None
  8802 ;; Return value:  Size  Location     Type
  8803 ;;                  1    wreg      void 
  8804 ;; Registers used:
  8805 ;;		wreg, status,2, status,0
  8806 ;; Tracked objects:
  8807 ;;		On entry : 0/0
  8808 ;;		On exit  : 0/0
  8809 ;;		Unchanged: 0/0
  8810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8812 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8813 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8814 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8815 ;;Total ram usage:        1 bytes
  8816 ;; Hardware stack levels used:    1
  8817 ;; Hardware stack levels required when called:    7
  8818 ;; This function calls:
  8819 ;;		Nothing
  8820 ;; This function is called by:
  8821 ;;		_I2C_Master_Start
  8822 ;;		_I2C_Master_Stop
  8823 ;;		_I2C_Master_Write
  8824 ;;		_I2C_Master_Read
  8825 ;;		_I2C_Master_RepeatedStart
  8826 ;; This function uses a non-reentrant model
  8827 ;;
  8828                           
  8829                           	psect	text31
  8830  00478C                     __ptext31:
  8831                           	opt stack 0
  8832  00478C                     _I2C_Master_Wait:
  8833                           	opt stack 18
  8834  00478C                     l66:
  8835  00478C  B4C7               	btfsc	4039,2,c	;volatile
  8836  00478E  D7FE               	goto	l66
  8837  004790  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  8838  004794  0E1F               	movlw	31
  8839  004796  0100               	movlb	0	; () banked
  8840  004798  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  8841  00479A  B4D8               	btfsc	status,2,c
  8842  00479C  0012               	return	
  8843  00479E  D7F6               	goto	l66
  8844  0047A0                     __end_of_I2C_Master_Wait:
  8845                           	opt stack 0
  8846                           tblptru	equ	0xFF8
  8847                           tblptrh	equ	0xFF7
  8848                           tblptrl	equ	0xFF6
  8849                           tablat	equ	0xFF5
  8850                           prodh	equ	0xFF4
  8851                           prodl	equ	0xFF3
  8852                           intcon	equ	0xFF2
  8853                           intcon2	equ	0xFF1
  8854                           intcon3	equ	0xFF0
  8855                           postinc0	equ	0xFEE
  8856                           wreg	equ	0xFE8
  8857                           postdec1	equ	0xFE5
  8858                           fsr1l	equ	0xFE1
  8859                           indf2	equ	0xFDF
  8860                           postinc2	equ	0xFDE
  8861                           postdec2	equ	0xFDD
  8862                           fsr2h	equ	0xFDA
  8863                           fsr2l	equ	0xFD9
  8864                           status	equ	0xFD8
  8865                           
  8866 ;; *************** function _change_state_to_menu_22 *****************
  8867 ;; Defined at:
  8868 ;;		line 498 in file "UI.c"
  8869 ;; Parameters:    Size  Location     Type
  8870 ;;		None
  8871 ;; Auto vars:     Size  Location     Type
  8872 ;;		None
  8873 ;; Return value:  Size  Location     Type
  8874 ;;                  1    wreg      void 
  8875 ;; Registers used:
  8876 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8877 ;; Tracked objects:
  8878 ;;		On entry : 0/0
  8879 ;;		On exit  : 0/0
  8880 ;;		Unchanged: 0/0
  8881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8885 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8886 ;;Total ram usage:        0 bytes
  8887 ;; Hardware stack levels used:    1
  8888 ;; Hardware stack levels required when called:   10
  8889 ;; This function calls:
  8890 ;;		_lcdInst
  8891 ;;		_printf
  8892 ;; This function is called by:
  8893 ;;		_UI
  8894 ;; This function uses a non-reentrant model
  8895 ;;
  8896                           
  8897                           	psect	text32
  8898  00422A                     __ptext32:
  8899                           	opt stack 0
  8900  00422A                     _change_state_to_menu_22:
  8901                           	opt stack 19
  8902                           
  8903                           ;UI.c: 499: cur_state = 22;
  8904                           
  8905                           ; BSR set to: 0
  8906                           ;incstack = 0
  8907  00422A  0E00               	movlw	0
  8908  00422C  0100               	movlb	0	; () banked
  8909  00422E  6FE1               	movwf	(_cur_state+1)& (0+255),b
  8910  004230  0E16               	movlw	22
  8911  004232  6FE0               	movwf	_cur_state& (0+255),b
  8912                           
  8913                           ; BSR set to: 0
  8914                           ;UI.c: 501: lcdInst(0b10000000);;
  8915  004234  0E80               	movlw	128
  8916  004236  ECE1  F023         	call	_lcdInst
  8917                           
  8918                           ;UI.c: 502: printf("2. SORT        <");
  8919  00423A  0EC4               	movlw	low STR_34
  8920  00423C  0100               	movlb	0	; () banked
  8921  00423E  6F8E               	movwf	printf@f& (0+255),b
  8922  004240  0EFD               	movlw	high STR_34
  8923  004242  0100               	movlb	0	; () banked
  8924  004244  6F8F               	movwf	(printf@f+1)& (0+255),b
  8925  004246  ECB8  F008         	call	_printf	;wreg free
  8926                           
  8927                           ;UI.c: 503: lcdInst(0b11000000);;
  8928  00424A  0EC0               	movlw	192
  8929  00424C  ECE1  F023         	call	_lcdInst
  8930                           
  8931                           ;UI.c: 504: printf("3. LOGS         ");
  8932  004250  0E09               	movlw	low STR_36
  8933  004252  0100               	movlb	0	; () banked
  8934  004254  6F8E               	movwf	printf@f& (0+255),b
  8935  004256  0EFD               	movlw	high STR_36
  8936  004258  0100               	movlb	0	; () banked
  8937  00425A  6F8F               	movwf	(printf@f+1)& (0+255),b
  8938  00425C  ECB8  F008         	call	_printf	;wreg free
  8939  004260  0012               	return		;funcret
  8940  004262                     __end_of_change_state_to_menu_22:
  8941                           	opt stack 0
  8942                           tblptru	equ	0xFF8
  8943                           tblptrh	equ	0xFF7
  8944                           tblptrl	equ	0xFF6
  8945                           tablat	equ	0xFF5
  8946                           prodh	equ	0xFF4
  8947                           prodl	equ	0xFF3
  8948                           intcon	equ	0xFF2
  8949                           intcon2	equ	0xFF1
  8950                           intcon3	equ	0xFF0
  8951                           postinc0	equ	0xFEE
  8952                           wreg	equ	0xFE8
  8953                           postdec1	equ	0xFE5
  8954                           fsr1l	equ	0xFE1
  8955                           indf2	equ	0xFDF
  8956                           postinc2	equ	0xFDE
  8957                           postdec2	equ	0xFDD
  8958                           fsr2h	equ	0xFDA
  8959                           fsr2l	equ	0xFD9
  8960                           status	equ	0xFD8
  8961                           
  8962 ;; *************** function _change_state_to_menu_12 *****************
  8963 ;; Defined at:
  8964 ;;		line 490 in file "UI.c"
  8965 ;; Parameters:    Size  Location     Type
  8966 ;;		None
  8967 ;; Auto vars:     Size  Location     Type
  8968 ;;		None
  8969 ;; Return value:  Size  Location     Type
  8970 ;;                  1    wreg      void 
  8971 ;; Registers used:
  8972 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8973 ;; Tracked objects:
  8974 ;;		On entry : 0/0
  8975 ;;		On exit  : 0/0
  8976 ;;		Unchanged: 0/0
  8977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8981 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8982 ;;Total ram usage:        0 bytes
  8983 ;; Hardware stack levels used:    1
  8984 ;; Hardware stack levels required when called:   10
  8985 ;; This function calls:
  8986 ;;		_lcdInst
  8987 ;;		_printf
  8988 ;; This function is called by:
  8989 ;;		_UI
  8990 ;; This function uses a non-reentrant model
  8991 ;;
  8992                           
  8993                           	psect	text33
  8994  004262                     __ptext33:
  8995                           	opt stack 0
  8996  004262                     _change_state_to_menu_12:
  8997                           	opt stack 19
  8998                           
  8999                           ;UI.c: 491: cur_state = 12;
  9000                           
  9001                           ;incstack = 0
  9002  004262  0E00               	movlw	0
  9003  004264  0100               	movlb	0	; () banked
  9004  004266  6FE1               	movwf	(_cur_state+1)& (0+255),b
  9005  004268  0E0C               	movlw	12
  9006  00426A  6FE0               	movwf	_cur_state& (0+255),b
  9007                           
  9008                           ; BSR set to: 0
  9009                           ;UI.c: 493: lcdInst(0b10000000);;
  9010  00426C  0E80               	movlw	128
  9011  00426E  ECE1  F023         	call	_lcdInst
  9012                           
  9013                           ;UI.c: 494: printf("1. DATE/TIME    ");
  9014  004272  0E2B               	movlw	low STR_33
  9015  004274  0100               	movlb	0	; () banked
  9016  004276  6F8E               	movwf	printf@f& (0+255),b
  9017  004278  0EFD               	movlw	high STR_33
  9018  00427A  0100               	movlb	0	; () banked
  9019  00427C  6F8F               	movwf	(printf@f+1)& (0+255),b
  9020  00427E  ECB8  F008         	call	_printf	;wreg free
  9021                           
  9022                           ;UI.c: 495: lcdInst(0b11000000);;
  9023  004282  0EC0               	movlw	192
  9024  004284  ECE1  F023         	call	_lcdInst
  9025                           
  9026                           ;UI.c: 496: printf("2. SORT        <");
  9027  004288  0EC4               	movlw	low STR_34
  9028  00428A  0100               	movlb	0	; () banked
  9029  00428C  6F8E               	movwf	printf@f& (0+255),b
  9030  00428E  0EFD               	movlw	high STR_34
  9031  004290  0100               	movlb	0	; () banked
  9032  004292  6F8F               	movwf	(printf@f+1)& (0+255),b
  9033  004294  ECB8  F008         	call	_printf	;wreg free
  9034  004298  0012               	return		;funcret
  9035  00429A                     __end_of_change_state_to_menu_12:
  9036                           	opt stack 0
  9037                           tblptru	equ	0xFF8
  9038                           tblptrh	equ	0xFF7
  9039                           tblptrl	equ	0xFF6
  9040                           tablat	equ	0xFF5
  9041                           prodh	equ	0xFF4
  9042                           prodl	equ	0xFF3
  9043                           intcon	equ	0xFF2
  9044                           intcon2	equ	0xFF1
  9045                           intcon3	equ	0xFF0
  9046                           postinc0	equ	0xFEE
  9047                           wreg	equ	0xFE8
  9048                           postdec1	equ	0xFE5
  9049                           fsr1l	equ	0xFE1
  9050                           indf2	equ	0xFDF
  9051                           postinc2	equ	0xFDE
  9052                           postdec2	equ	0xFDD
  9053                           fsr2h	equ	0xFDA
  9054                           fsr2l	equ	0xFD9
  9055                           status	equ	0xFD8
  9056                           
  9057 ;; *************** function ___awmod *****************
  9058 ;; Defined at:
  9059 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  9060 ;; Parameters:    Size  Location     Type
  9061 ;;  dividend        2    0[BANK0 ] int 
  9062 ;;  divisor         2    2[BANK0 ] int 
  9063 ;; Auto vars:     Size  Location     Type
  9064 ;;  sign            1    5[BANK0 ] unsigned char 
  9065 ;;  counter         1    4[BANK0 ] unsigned char 
  9066 ;; Return value:  Size  Location     Type
  9067 ;;                  2    0[BANK0 ] int 
  9068 ;; Registers used:
  9069 ;;		wreg, status,2, status,0
  9070 ;; Tracked objects:
  9071 ;;		On entry : 0/0
  9072 ;;		On exit  : 0/0
  9073 ;;		Unchanged: 0/0
  9074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9075 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9076 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9078 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9079 ;;Total ram usage:        6 bytes
  9080 ;; Hardware stack levels used:    1
  9081 ;; Hardware stack levels required when called:    7
  9082 ;; This function calls:
  9083 ;;		Nothing
  9084 ;; This function is called by:
  9085 ;;		_UI
  9086 ;; This function uses a non-reentrant model
  9087 ;;
  9088                           
  9089                           	psect	text34
  9090  00386C                     __ptext34:
  9091                           	opt stack 0
  9092  00386C                     ___awmod:
  9093                           	opt stack 22
  9094                           
  9095                           ;incstack = 0
  9096  00386C  0E00               	movlw	0
  9097  00386E  0100               	movlb	0	; () banked
  9098  003870  6F85               	movwf	___awmod@sign& (0+255),b
  9099                           
  9100                           ; BSR set to: 0
  9101  003872  0100               	movlb	0	; () banked
  9102  003874  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  9103  003876  D008               	goto	l7303
  9104                           
  9105                           ; BSR set to: 0
  9106  003878  0100               	movlb	0	; () banked
  9107  00387A  6D80               	negf	___awmod@dividend& (0+255),b
  9108  00387C  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9109  00387E  B0D8               	btfsc	status,0,c
  9110  003880  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9111                           
  9112                           ; BSR set to: 0
  9113  003882  0E01               	movlw	1
  9114  003884  0100               	movlb	0	; () banked
  9115  003886  6F85               	movwf	___awmod@sign& (0+255),b
  9116  003888                     l7303:
  9117                           
  9118                           ; BSR set to: 0
  9119  003888  0100               	movlb	0	; () banked
  9120  00388A  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9121  00388C  D005               	goto	l7307
  9122                           
  9123                           ; BSR set to: 0
  9124  00388E  0100               	movlb	0	; () banked
  9125  003890  6D82               	negf	___awmod@divisor& (0+255),b
  9126  003892  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  9127  003894  B0D8               	btfsc	status,0,c
  9128  003896  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  9129  003898                     l7307:
  9130                           
  9131                           ; BSR set to: 0
  9132  003898  0100               	movlb	0	; () banked
  9133  00389A  5182               	movf	___awmod@divisor& (0+255),w,b
  9134  00389C  0100               	movlb	0	; () banked
  9135  00389E  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  9136  0038A0  B4D8               	btfsc	status,2,c
  9137  0038A2  D026               	goto	l7323
  9138                           
  9139                           ; BSR set to: 0
  9140  0038A4  0E01               	movlw	1
  9141  0038A6  0100               	movlb	0	; () banked
  9142  0038A8  6F84               	movwf	___awmod@counter& (0+255),b
  9143  0038AA  D006               	goto	l7313
  9144  0038AC                     l7311:
  9145                           
  9146                           ; BSR set to: 0
  9147  0038AC  0100               	movlb	0	; () banked
  9148  0038AE  90D8               	bcf	status,0,c
  9149  0038B0  3782               	rlcf	___awmod@divisor& (0+255),f,b
  9150  0038B2  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  9151  0038B4  0100               	movlb	0	; () banked
  9152  0038B6  2B84               	incf	___awmod@counter& (0+255),f,b
  9153  0038B8                     l7313:
  9154                           
  9155                           ; BSR set to: 0
  9156  0038B8  0100               	movlb	0	; () banked
  9157  0038BA  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9158  0038BC  D7F7               	goto	l7311
  9159  0038BE                     l7315:
  9160                           
  9161                           ; BSR set to: 0
  9162  0038BE  0100               	movlb	0	; () banked
  9163  0038C0  5182               	movf	___awmod@divisor& (0+255),w,b
  9164  0038C2  0100               	movlb	0	; () banked
  9165  0038C4  5D80               	subwf	___awmod@dividend& (0+255),w,b
  9166  0038C6  0100               	movlb	0	; () banked
  9167  0038C8  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9168  0038CA  0100               	movlb	0	; () banked
  9169  0038CC  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  9170  0038CE  A0D8               	btfss	status,0,c
  9171  0038D0  D008               	goto	l7319
  9172                           
  9173                           ; BSR set to: 0
  9174  0038D2  0100               	movlb	0	; () banked
  9175  0038D4  5182               	movf	___awmod@divisor& (0+255),w,b
  9176  0038D6  0100               	movlb	0	; () banked
  9177  0038D8  5F80               	subwf	___awmod@dividend& (0+255),f,b
  9178  0038DA  0100               	movlb	0	; () banked
  9179  0038DC  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9180  0038DE  0100               	movlb	0	; () banked
  9181  0038E0  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  9182  0038E2                     l7319:
  9183                           
  9184                           ; BSR set to: 0
  9185  0038E2  0100               	movlb	0	; () banked
  9186  0038E4  90D8               	bcf	status,0,c
  9187  0038E6  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  9188  0038E8  3382               	rrcf	___awmod@divisor& (0+255),f,b
  9189                           
  9190                           ; BSR set to: 0
  9191  0038EA  0100               	movlb	0	; () banked
  9192  0038EC  2F84               	decfsz	___awmod@counter& (0+255),f,b
  9193  0038EE  D7E7               	goto	l7315
  9194  0038F0                     l7323:
  9195                           
  9196                           ; BSR set to: 0
  9197  0038F0  0100               	movlb	0	; () banked
  9198  0038F2  5185               	movf	___awmod@sign& (0+255),w,b
  9199  0038F4  0100               	movlb	0	; () banked
  9200  0038F6  B4D8               	btfsc	status,2,c
  9201  0038F8  D005               	goto	l7327
  9202                           
  9203                           ; BSR set to: 0
  9204  0038FA  0100               	movlb	0	; () banked
  9205  0038FC  6D80               	negf	___awmod@dividend& (0+255),b
  9206  0038FE  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9207  003900  B0D8               	btfsc	status,0,c
  9208  003902  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9209  003904                     l7327:
  9210                           
  9211                           ; BSR set to: 0
  9212  003904  C080  F080         	movff	___awmod@dividend,?___awmod
  9213  003908  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  9214  00390C  0012               	return	
  9215  00390E                     __end_of___awmod:
  9216                           	opt stack 0
  9217                           tblptru	equ	0xFF8
  9218                           tblptrh	equ	0xFF7
  9219                           tblptrl	equ	0xFF6
  9220                           tablat	equ	0xFF5
  9221                           prodh	equ	0xFF4
  9222                           prodl	equ	0xFF3
  9223                           intcon	equ	0xFF2
  9224                           intcon2	equ	0xFF1
  9225                           intcon3	equ	0xFF0
  9226                           postinc0	equ	0xFEE
  9227                           wreg	equ	0xFE8
  9228                           postdec1	equ	0xFE5
  9229                           fsr1l	equ	0xFE1
  9230                           indf2	equ	0xFDF
  9231                           postinc2	equ	0xFDE
  9232                           postdec2	equ	0xFDD
  9233                           fsr2h	equ	0xFDA
  9234                           fsr2l	equ	0xFD9
  9235                           status	equ	0xFD8
  9236                           
  9237 ;; *************** function ___awdiv *****************
  9238 ;; Defined at:
  9239 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  9240 ;; Parameters:    Size  Location     Type
  9241 ;;  dividend        2    6[BANK0 ] int 
  9242 ;;  divisor         2    8[BANK0 ] int 
  9243 ;; Auto vars:     Size  Location     Type
  9244 ;;  quotient        2   12[BANK0 ] int 
  9245 ;;  sign            1   11[BANK0 ] unsigned char 
  9246 ;;  counter         1   10[BANK0 ] unsigned char 
  9247 ;; Return value:  Size  Location     Type
  9248 ;;                  2    6[BANK0 ] int 
  9249 ;; Registers used:
  9250 ;;		wreg, status,2, status,0
  9251 ;; Tracked objects:
  9252 ;;		On entry : 0/0
  9253 ;;		On exit  : 0/0
  9254 ;;		Unchanged: 0/0
  9255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9256 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9257 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9259 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9260 ;;Total ram usage:        8 bytes
  9261 ;; Hardware stack levels used:    1
  9262 ;; Hardware stack levels required when called:    7
  9263 ;; This function calls:
  9264 ;;		Nothing
  9265 ;; This function is called by:
  9266 ;;		_UI
  9267 ;; This function uses a non-reentrant model
  9268 ;;
  9269                           
  9270                           	psect	text35
  9271  003648                     __ptext35:
  9272                           	opt stack 0
  9273  003648                     ___awdiv:
  9274                           	opt stack 22
  9275                           
  9276                           ; BSR set to: 0
  9277                           ;incstack = 0
  9278  003648  0E00               	movlw	0
  9279  00364A  0100               	movlb	0	; () banked
  9280  00364C  6F8B               	movwf	___awdiv@sign& (0+255),b
  9281                           
  9282                           ; BSR set to: 0
  9283  00364E  0100               	movlb	0	; () banked
  9284  003650  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9285  003652  D008               	goto	l7259
  9286                           
  9287                           ; BSR set to: 0
  9288  003654  0100               	movlb	0	; () banked
  9289  003656  6D88               	negf	___awdiv@divisor& (0+255),b
  9290  003658  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  9291  00365A  B0D8               	btfsc	status,0,c
  9292  00365C  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  9293                           
  9294                           ; BSR set to: 0
  9295  00365E  0E01               	movlw	1
  9296  003660  0100               	movlb	0	; () banked
  9297  003662  6F8B               	movwf	___awdiv@sign& (0+255),b
  9298  003664                     l7259:
  9299                           
  9300                           ; BSR set to: 0
  9301  003664  0100               	movlb	0	; () banked
  9302  003666  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  9303  003668  D008               	goto	l7265
  9304                           
  9305                           ; BSR set to: 0
  9306  00366A  0100               	movlb	0	; () banked
  9307  00366C  6D86               	negf	___awdiv@dividend& (0+255),b
  9308  00366E  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  9309  003670  B0D8               	btfsc	status,0,c
  9310  003672  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  9311                           
  9312                           ; BSR set to: 0
  9313  003674  0E01               	movlw	1
  9314  003676  0100               	movlb	0	; () banked
  9315  003678  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  9316  00367A                     l7265:
  9317                           
  9318                           ; BSR set to: 0
  9319  00367A  0E00               	movlw	0
  9320  00367C  0100               	movlb	0	; () banked
  9321  00367E  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  9322  003680  0E00               	movlw	0
  9323  003682  6F8C               	movwf	___awdiv@quotient& (0+255),b
  9324                           
  9325                           ; BSR set to: 0
  9326  003684  0100               	movlb	0	; () banked
  9327  003686  5188               	movf	___awdiv@divisor& (0+255),w,b
  9328  003688  0100               	movlb	0	; () banked
  9329  00368A  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  9330  00368C  B4D8               	btfsc	status,2,c
  9331  00368E  D02C               	goto	l7287
  9332                           
  9333                           ; BSR set to: 0
  9334  003690  0E01               	movlw	1
  9335  003692  0100               	movlb	0	; () banked
  9336  003694  6F8A               	movwf	___awdiv@counter& (0+255),b
  9337  003696  D006               	goto	l7273
  9338  003698                     l7271:
  9339                           
  9340                           ; BSR set to: 0
  9341  003698  0100               	movlb	0	; () banked
  9342  00369A  90D8               	bcf	status,0,c
  9343  00369C  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  9344  00369E  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  9345  0036A0  0100               	movlb	0	; () banked
  9346  0036A2  2B8A               	incf	___awdiv@counter& (0+255),f,b
  9347  0036A4                     l7273:
  9348                           
  9349                           ; BSR set to: 0
  9350  0036A4  0100               	movlb	0	; () banked
  9351  0036A6  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9352  0036A8  D7F7               	goto	l7271
  9353  0036AA                     l7275:
  9354                           
  9355                           ; BSR set to: 0
  9356  0036AA  0100               	movlb	0	; () banked
  9357  0036AC  90D8               	bcf	status,0,c
  9358  0036AE  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  9359  0036B0  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  9360                           
  9361                           ; BSR set to: 0
  9362  0036B2  0100               	movlb	0	; () banked
  9363  0036B4  5188               	movf	___awdiv@divisor& (0+255),w,b
  9364  0036B6  0100               	movlb	0	; () banked
  9365  0036B8  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  9366  0036BA  0100               	movlb	0	; () banked
  9367  0036BC  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9368  0036BE  0100               	movlb	0	; () banked
  9369  0036C0  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  9370  0036C2  A0D8               	btfss	status,0,c
  9371  0036C4  D00A               	goto	l7283
  9372                           
  9373                           ; BSR set to: 0
  9374  0036C6  0100               	movlb	0	; () banked
  9375  0036C8  5188               	movf	___awdiv@divisor& (0+255),w,b
  9376  0036CA  0100               	movlb	0	; () banked
  9377  0036CC  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  9378  0036CE  0100               	movlb	0	; () banked
  9379  0036D0  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9380  0036D2  0100               	movlb	0	; () banked
  9381  0036D4  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  9382                           
  9383                           ; BSR set to: 0
  9384  0036D6  0100               	movlb	0	; () banked
  9385  0036D8  818C               	bsf	___awdiv@quotient& (0+255),0,b
  9386  0036DA                     l7283:
  9387                           
  9388                           ; BSR set to: 0
  9389  0036DA  0100               	movlb	0	; () banked
  9390  0036DC  90D8               	bcf	status,0,c
  9391  0036DE  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  9392  0036E0  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  9393                           
  9394                           ; BSR set to: 0
  9395  0036E2  0100               	movlb	0	; () banked
  9396  0036E4  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  9397  0036E6  D7E1               	goto	l7275
  9398  0036E8                     l7287:
  9399                           
  9400                           ; BSR set to: 0
  9401  0036E8  0100               	movlb	0	; () banked
  9402  0036EA  518B               	movf	___awdiv@sign& (0+255),w,b
  9403  0036EC  0100               	movlb	0	; () banked
  9404  0036EE  B4D8               	btfsc	status,2,c
  9405  0036F0  D005               	goto	l7291
  9406                           
  9407                           ; BSR set to: 0
  9408  0036F2  0100               	movlb	0	; () banked
  9409  0036F4  6D8C               	negf	___awdiv@quotient& (0+255),b
  9410  0036F6  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  9411  0036F8  B0D8               	btfsc	status,0,c
  9412  0036FA  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  9413  0036FC                     l7291:
  9414                           
  9415                           ; BSR set to: 0
  9416  0036FC  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  9417  003700  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  9418  003704  0012               	return	
  9419  003706                     __end_of___awdiv:
  9420                           	opt stack 0
  9421                           tblptru	equ	0xFF8
  9422                           tblptrh	equ	0xFF7
  9423                           tblptrl	equ	0xFF6
  9424                           tablat	equ	0xFF5
  9425                           prodh	equ	0xFF4
  9426                           prodl	equ	0xFF3
  9427                           intcon	equ	0xFF2
  9428                           intcon2	equ	0xFF1
  9429                           intcon3	equ	0xFF0
  9430                           postinc0	equ	0xFEE
  9431                           wreg	equ	0xFE8
  9432                           postdec1	equ	0xFE5
  9433                           fsr1l	equ	0xFE1
  9434                           indf2	equ	0xFDF
  9435                           postinc2	equ	0xFDE
  9436                           postdec2	equ	0xFDD
  9437                           fsr2h	equ	0xFDA
  9438                           fsr2l	equ	0xFD9
  9439                           status	equ	0xFD8
  9440                           
  9441 ;; *************** function _Test *****************
  9442 ;; Defined at:
  9443 ;;		line 28 in file "Test.c"
  9444 ;; Parameters:    Size  Location     Type
  9445 ;;		None
  9446 ;; Auto vars:     Size  Location     Type
  9447 ;;		None
  9448 ;; Return value:  Size  Location     Type
  9449 ;;                  1    wreg      void 
  9450 ;; Registers used:
  9451 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9452 ;; Tracked objects:
  9453 ;;		On entry : 0/0
  9454 ;;		On exit  : 0/0
  9455 ;;		Unchanged: 0/0
  9456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9459 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9460 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9461 ;;Total ram usage:        2 bytes
  9462 ;; Hardware stack levels used:    1
  9463 ;; Hardware stack levels required when called:   11
  9464 ;; This function calls:
  9465 ;;		_BothServos
  9466 ;;		_EEPROMTest
  9467 ;;		_PortTestA5
  9468 ;;		_PortTests
  9469 ;;		_PusherTestA5
  9470 ;;		_ToggleTestA5
  9471 ;;		_actuatorTest
  9472 ;;		_algorithmTest
  9473 ;;		_lcdInst
  9474 ;;		_printf
  9475 ;;		_sensorTest
  9476 ;; This function is called by:
  9477 ;;		_main
  9478 ;; This function uses a non-reentrant model
  9479 ;;
  9480                           
  9481                           	psect	text36
  9482  0032C6                     __ptext36:
  9483                           	opt stack 0
  9484  0032C6                     _Test:
  9485                           	opt stack 19
  9486  0032C6                     
  9487                           ;Test.c: 31: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
  9488  0032C6  0E01               	movlw	1
  9489  0032C8  ECE1  F023         	call	_lcdInst
  9490  0032CC  0E68               	movlw	104
  9491  0032CE  0100               	movlb	0	; () banked
  9492  0032D0  6FC6               	movwf	??_Test& (0+255),b
  9493  0032D2  0EE4               	movlw	228
  9494  0032D4                     u7457:
  9495  0032D4  2EE8               	decfsz	wreg,f,c
  9496  0032D6  D7FE               	bra	u7457
  9497  0032D8  2FC6               	decfsz	??_Test& (0+255),f,b
  9498  0032DA  D7FC               	bra	u7457
  9499  0032DC  F000               	nop	
  9500  0032DE  0E80               	movlw	128
  9501  0032E0  ECE1  F023         	call	_lcdInst
  9502                           
  9503                           ;Test.c: 32: printf("1.ALG|2.SNR|3.AC");
  9504  0032E4  0E70               	movlw	low STR_68
  9505  0032E6  0100               	movlb	0	; () banked
  9506  0032E8  6F8E               	movwf	printf@f& (0+255),b
  9507  0032EA  0EFC               	movlw	high STR_68
  9508  0032EC  0100               	movlb	0	; () banked
  9509  0032EE  6F8F               	movwf	(printf@f+1)& (0+255),b
  9510  0032F0  ECB8  F008         	call	_printf	;wreg free
  9511                           
  9512                           ;Test.c: 33: lcdInst(0b11000000);;
  9513  0032F4  0EC0               	movlw	192
  9514  0032F6  ECE1  F023         	call	_lcdInst
  9515                           
  9516                           ;Test.c: 34: printf("4.HI|5.TOG|6.EEP");
  9517  0032FA  0EA3               	movlw	low STR_69
  9518  0032FC  0100               	movlb	0	; () banked
  9519  0032FE  6F8E               	movwf	printf@f& (0+255),b
  9520  003300  0EFC               	movlw	high STR_69
  9521  003302  0100               	movlb	0	; () banked
  9522  003304  6F8F               	movwf	(printf@f+1)& (0+255),b
  9523  003306  ECB8  F008         	call	_printf	;wreg free
  9524                           
  9525                           ;Test.c: 35: _delay((unsigned long)((100)*(32000000/4000.0)));
  9526  00330A  0E05               	movlw	5
  9527  00330C  0100               	movlb	0	; () banked
  9528  00330E  6FC7               	movwf	(??_Test+1)& (0+255),b
  9529  003310  0E0F               	movlw	15
  9530  003312  0100               	movlb	0	; () banked
  9531  003314  6FC6               	movwf	??_Test& (0+255),b
  9532  003316  0EF1               	movlw	241
  9533  003318                     u7467:
  9534  003318  2EE8               	decfsz	wreg,f,c
  9535  00331A  D7FE               	bra	u7467
  9536  00331C  2FC6               	decfsz	??_Test& (0+255),f,b
  9537  00331E  D7FC               	bra	u7467
  9538  003320  2FC7               	decfsz	(??_Test+1)& (0+255),f,b
  9539  003322  D7FA               	bra	u7467
  9540  003324                     l1040:
  9541  003324  A281               	btfss	3969,1,c	;volatile
  9542  003326  D7FE               	goto	l1040
  9543                           
  9544                           ;Test.c: 37: var = PORTB >> 4;
  9545  003328  CF81 F0C6          	movff	3969,??_Test	;volatile
  9546  00332C  0100               	movlb	0	; () banked
  9547  00332E  3BC6               	swapf	??_Test& (0+255),f,b
  9548  003330  0E0F               	movlw	15
  9549  003332  17C6               	andwf	??_Test& (0+255),f,b
  9550  003334  0100               	movlb	0	; () banked
  9551  003336  51C6               	movf	??_Test& (0+255),w,b
  9552  003338  0100               	movlb	0	; () banked
  9553  00333A  6FFA               	movwf	_var& (0+255),b
  9554  00333C  6BFB               	clrf	(_var+1)& (0+255),b
  9555                           
  9556                           ; BSR set to: 0
  9557                           ;Test.c: 38: var++;
  9558  00333E  0100               	movlb	0	; () banked
  9559  003340  4BFA               	infsnz	_var& (0+255),f,b
  9560  003342  2BFB               	incf	(_var+1)& (0+255),f,b
  9561  003344                     l1043:
  9562  003344  A281               	btfss	3969,1,c	;volatile
  9563  003346  D01C               	goto	l8025
  9564  003348  D7FD               	goto	l1043
  9565  00334A                     l8005:
  9566                           
  9567                           ;Test.c: 42: algorithmTest();
  9568  00334A  EC59  F01A         	call	_algorithmTest	;wreg free
  9569                           
  9570                           ;Test.c: 43: break;
  9571  00334E  D7BB               	goto	l7987
  9572  003350                     l8007:
  9573                           
  9574                           ;Test.c: 45: sensorTest();
  9575  003350  EC15  F00E         	call	_sensorTest	;wreg free
  9576                           
  9577                           ;Test.c: 46: break;
  9578  003354  D7B8               	goto	l7987
  9579  003356                     l8009:
  9580                           
  9581                           ;Test.c: 48: actuatorTest();
  9582  003356  EC09  F000         	call	_actuatorTest	;wreg free
  9583                           
  9584                           ;Test.c: 49: break;
  9585  00335A  D7B5               	goto	l7987
  9586  00335C                     l8011:
  9587                           
  9588                           ;Test.c: 51: PortTestA5();
  9589  00335C  EC87  F01C         	call	_PortTestA5	;wreg free
  9590                           
  9591                           ;Test.c: 52: break;
  9592  003360  D7B2               	goto	l7987
  9593  003362                     l8013:
  9594                           
  9595                           ;Test.c: 54: ToggleTestA5();
  9596  003362  EC18  F01D         	call	_ToggleTestA5	;wreg free
  9597                           
  9598                           ;Test.c: 55: break;
  9599  003366  D7AF               	goto	l7987
  9600  003368                     l8015:
  9601                           
  9602                           ;Test.c: 57: EEPROMTest();
  9603  003368  EC13  F024         	call	_EEPROMTest	;wreg free
  9604                           
  9605                           ;Test.c: 58: break;
  9606  00336C  D7AC               	goto	l7987
  9607  00336E                     l8017:
  9608                           
  9609                           ;Test.c: 60: PusherTestA5();
  9610  00336E  ECB5  F01F         	call	_PusherTestA5	;wreg free
  9611                           
  9612                           ;Test.c: 61: break;
  9613  003372  D7A9               	goto	l7987
  9614  003374                     l8019:
  9615                           
  9616                           ;Test.c: 63: PortTests();
  9617  003374  EC9F  F01D         	call	_PortTests	;wreg free
  9618                           
  9619                           ;Test.c: 64: break;
  9620  003378  D7A6               	goto	l7987
  9621  00337A                     l8021:
  9622                           
  9623                           ;Test.c: 66: BothServos();
  9624  00337A  EC8B  F00C         	call	_BothServos	;wreg free
  9625                           
  9626                           ;Test.c: 70: }
  9627                           
  9628                           ;Test.c: 69: break;
  9629                           
  9630                           ;Test.c: 68: default:
  9631                           
  9632                           ;Test.c: 67: break;
  9633  00337E  D7A3               	goto	l7987
  9634  003380                     l8025:
  9635  003380  C0FA  F0C6         	movff	_var,??_Test
  9636  003384  C0FB  F0C7         	movff	_var+1,??_Test+1
  9637                           
  9638                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9639                           ; Switch size 1, requested type "space"
  9640                           ; Number of cases is 1, Range of values is 0 to 0
  9641                           ; switch strategies available:
  9642                           ; Name         Instructions Cycles
  9643                           ; simple_byte            4     3 (average)
  9644                           ;	Chosen strategy is simple_byte
  9645  003388  0100               	movlb	0	; () banked
  9646  00338A  51C7               	movf	(??_Test+1)& (0+255),w,b
  9647  00338C  0A00               	xorlw	0	; case 0
  9648  00338E  A4D8               	btfss	status,2,c
  9649  003390  D79A               	goto	l7987
  9650                           
  9651                           ; BSR set to: 0
  9652                           ; Switch size 1, requested type "space"
  9653                           ; Number of cases is 9, Range of values is 1 to 10
  9654                           ; switch strategies available:
  9655                           ; Name         Instructions Cycles
  9656                           ; simple_byte           28    15 (average)
  9657                           ;	Chosen strategy is simple_byte
  9658  003392  0100               	movlb	0	; () banked
  9659  003394  51C6               	movf	??_Test& (0+255),w,b
  9660  003396  0A01               	xorlw	1	; case 1
  9661  003398  B4D8               	btfsc	status,2,c
  9662  00339A  D7D7               	goto	l8005
  9663  00339C  0A03               	xorlw	3	; case 2
  9664  00339E  B4D8               	btfsc	status,2,c
  9665  0033A0  D7D7               	goto	l8007
  9666  0033A2  0A01               	xorlw	1	; case 3
  9667  0033A4  B4D8               	btfsc	status,2,c
  9668  0033A6  D7D7               	goto	l8009
  9669  0033A8  0A06               	xorlw	6	; case 5
  9670  0033AA  B4D8               	btfsc	status,2,c
  9671  0033AC  D7D7               	goto	l8011
  9672  0033AE  0A03               	xorlw	3	; case 6
  9673  0033B0  B4D8               	btfsc	status,2,c
  9674  0033B2  D7D7               	goto	l8013
  9675  0033B4  0A01               	xorlw	1	; case 7
  9676  0033B6  B4D8               	btfsc	status,2,c
  9677  0033B8  D7D7               	goto	l8015
  9678  0033BA  0A0F               	xorlw	15	; case 8
  9679  0033BC  B4D8               	btfsc	status,2,c
  9680  0033BE  D7D7               	goto	l8017
  9681  0033C0  0A01               	xorlw	1	; case 9
  9682  0033C2  B4D8               	btfsc	status,2,c
  9683  0033C4  D7D7               	goto	l8019
  9684  0033C6  0A03               	xorlw	3	; case 10
  9685  0033C8  B4D8               	btfsc	status,2,c
  9686  0033CA  D7D7               	goto	l8021
  9687                           
  9688                           ; BSR set to: 0
  9689                           
  9690                           ; BSR set to: 0
  9691  0033CC  D77C               	goto	l7987
  9692  0033CE                     __end_of_Test:
  9693                           	opt stack 0
  9694                           tblptru	equ	0xFF8
  9695                           tblptrh	equ	0xFF7
  9696                           tblptrl	equ	0xFF6
  9697                           tablat	equ	0xFF5
  9698                           prodh	equ	0xFF4
  9699                           prodl	equ	0xFF3
  9700                           intcon	equ	0xFF2
  9701                           intcon2	equ	0xFF1
  9702                           intcon3	equ	0xFF0
  9703                           postinc0	equ	0xFEE
  9704                           wreg	equ	0xFE8
  9705                           postdec1	equ	0xFE5
  9706                           fsr1l	equ	0xFE1
  9707                           indf2	equ	0xFDF
  9708                           postinc2	equ	0xFDE
  9709                           postdec2	equ	0xFDD
  9710                           fsr2h	equ	0xFDA
  9711                           fsr2l	equ	0xFD9
  9712                           status	equ	0xFD8
  9713                           
  9714 ;; *************** function _sensorTest *****************
  9715 ;; Defined at:
  9716 ;;		line 118 in file "Test.c"
  9717 ;; Parameters:    Size  Location     Type
  9718 ;;		None
  9719 ;; Auto vars:     Size  Location     Type
  9720 ;;  res             2   45[BANK0 ] int 
  9721 ;; Return value:  Size  Location     Type
  9722 ;;                  1    wreg      void 
  9723 ;; Registers used:
  9724 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9725 ;; Tracked objects:
  9726 ;;		On entry : 0/0
  9727 ;;		On exit  : 0/0
  9728 ;;		Unchanged: 0/0
  9729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9731 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9732 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9733 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9734 ;;Total ram usage:        4 bytes
  9735 ;; Hardware stack levels used:    1
  9736 ;; Hardware stack levels required when called:   10
  9737 ;; This function calls:
  9738 ;;		_lcdInst
  9739 ;;		_printf
  9740 ;;		_readADC
  9741 ;;		_readMAG
  9742 ;; This function is called by:
  9743 ;;		_Test
  9744 ;; This function uses a non-reentrant model
  9745 ;;
  9746                           
  9747                           	psect	text37
  9748  001C2A                     __ptext37:
  9749                           	opt stack 0
  9750  001C2A                     _sensorTest:
  9751                           	opt stack 19
  9752                           
  9753                           ;Test.c: 120: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9754                           
  9755                           ; BSR set to: 0
  9756                           ;incstack = 0
  9757  001C2A  0E01               	movlw	1
  9758  001C2C  ECE1  F023         	call	_lcdInst
  9759  001C30  0E68               	movlw	104
  9760  001C32  0100               	movlb	0	; () banked
  9761  001C34  6FAB               	movwf	??_sensorTest& (0+255),b
  9762  001C36  0EE4               	movlw	228
  9763  001C38                     u7477:
  9764  001C38  2EE8               	decfsz	wreg,f,c
  9765  001C3A  D7FE               	bra	u7477
  9766  001C3C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9767  001C3E  D7FC               	bra	u7477
  9768  001C40  F000               	nop	
  9769  001C42  0E80               	movlw	128
  9770  001C44  ECE1  F023         	call	_lcdInst
  9771                           
  9772                           ;Test.c: 121: printf("SENSORS");
  9773  001C48  0EAE               	movlw	low STR_77
  9774  001C4A  0100               	movlb	0	; () banked
  9775  001C4C  6F8E               	movwf	printf@f& (0+255),b
  9776  001C4E  0EFF               	movlw	high STR_77
  9777  001C50  0100               	movlb	0	; () banked
  9778  001C52  6F8F               	movwf	(printf@f+1)& (0+255),b
  9779  001C54  ECB8  F008         	call	_printf	;wreg free
  9780                           
  9781                           ;Test.c: 122: lcdInst(0b11000000);;
  9782  001C58  0EC0               	movlw	192
  9783  001C5A  ECE1  F023         	call	_lcdInst
  9784                           
  9785                           ;Test.c: 123: printf("PUSH TO START");
  9786  001C5E  0E0B               	movlw	low STR_71
  9787  001C60  0100               	movlb	0	; () banked
  9788  001C62  6F8E               	movwf	printf@f& (0+255),b
  9789  001C64  0EFF               	movlw	high STR_71
  9790  001C66  0100               	movlb	0	; () banked
  9791  001C68  6F8F               	movwf	(printf@f+1)& (0+255),b
  9792  001C6A  ECB8  F008         	call	_printf	;wreg free
  9793                           
  9794                           ;Test.c: 124: _delay((unsigned long)((100)*(32000000/4000.0)));
  9795  001C6E  0E05               	movlw	5
  9796  001C70  0100               	movlb	0	; () banked
  9797  001C72  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9798  001C74  0E0F               	movlw	15
  9799  001C76  0100               	movlb	0	; () banked
  9800  001C78  6FAB               	movwf	??_sensorTest& (0+255),b
  9801  001C7A  0EF1               	movlw	241
  9802  001C7C                     u7487:
  9803  001C7C  2EE8               	decfsz	wreg,f,c
  9804  001C7E  D7FE               	bra	u7487
  9805  001C80  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9806  001C82  D7FC               	bra	u7487
  9807  001C84  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9808  001C86  D7FA               	bra	u7487
  9809  001C88                     l1072:
  9810  001C88  A281               	btfss	3969,1,c	;volatile
  9811  001C8A  D7FE               	goto	l1072
  9812  001C8C                     l1075:
  9813  001C8C  B281               	btfsc	3969,1,c	;volatile
  9814  001C8E  D7FE               	goto	l1075
  9815                           
  9816                           ;Test.c: 127: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9817  001C90  0E01               	movlw	1
  9818  001C92  ECE1  F023         	call	_lcdInst
  9819  001C96  0E68               	movlw	104
  9820  001C98  0100               	movlb	0	; () banked
  9821  001C9A  6FAB               	movwf	??_sensorTest& (0+255),b
  9822  001C9C  0EE4               	movlw	228
  9823  001C9E                     u7497:
  9824  001C9E  2EE8               	decfsz	wreg,f,c
  9825  001CA0  D7FE               	bra	u7497
  9826  001CA2  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9827  001CA4  D7FC               	bra	u7497
  9828  001CA6  F000               	nop	
  9829  001CA8  0E80               	movlw	128
  9830  001CAA  ECE1  F023         	call	_lcdInst
  9831                           
  9832                           ;Test.c: 132: printf("TST: IR SNSR");
  9833  001CAE  0E35               	movlw	low STR_79
  9834  001CB0  0100               	movlb	0	; () banked
  9835  001CB2  6F8E               	movwf	printf@f& (0+255),b
  9836  001CB4  0EFF               	movlw	high STR_79
  9837  001CB6  0100               	movlb	0	; () banked
  9838  001CB8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9839  001CBA  ECB8  F008         	call	_printf	;wreg free
  9840                           
  9841                           ;Test.c: 133: _delay((unsigned long)((100)*(32000000/4000.0)));
  9842  001CBE  0E05               	movlw	5
  9843  001CC0  0100               	movlb	0	; () banked
  9844  001CC2  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9845  001CC4  0E0F               	movlw	15
  9846  001CC6  0100               	movlb	0	; () banked
  9847  001CC8  6FAB               	movwf	??_sensorTest& (0+255),b
  9848  001CCA  0EF1               	movlw	241
  9849  001CCC                     u7507:
  9850  001CCC  2EE8               	decfsz	wreg,f,c
  9851  001CCE  D7FE               	bra	u7507
  9852  001CD0  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9853  001CD2  D7FC               	bra	u7507
  9854  001CD4  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9855  001CD6  D7FA               	bra	u7507
  9856                           
  9857                           ;Test.c: 134: LATCbits.LATC5 = 1;
  9858  001CD8  8A8B               	bsf	3979,5,c	;volatile
  9859                           
  9860                           ;Test.c: 135: while(PORTBbits.RB1 == 0){
  9861  001CDA  D05C               	goto	l6605
  9862  001CDC                     l6587:
  9863                           
  9864                           ;Test.c: 136: readADC(0);
  9865  001CDC  0E00               	movlw	0
  9866  001CDE  ECE8  F022         	call	_readADC
  9867                           
  9868                           ;Test.c: 137: int res = ADRESH<<8 | ADRESL;
  9869  001CE2  50C3               	movf	4035,w,c	;volatile
  9870  001CE4  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
  9871  001CE8  0100               	movlb	0	; () banked
  9872  001CEA  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
  9873  001CEC  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
  9874  001CF0  0100               	movlb	0	; () banked
  9875  001CF2  6BAB               	clrf	??_sensorTest& (0+255),b
  9876  001CF4  0100               	movlb	0	; () banked
  9877  001CF6  11AB               	iorwf	??_sensorTest& (0+255),w,b
  9878  001CF8  0100               	movlb	0	; () banked
  9879  001CFA  6FAD               	movwf	sensorTest@res& (0+255),b
  9880  001CFC  0100               	movlb	0	; () banked
  9881  001CFE  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
  9882  001D00  0100               	movlb	0	; () banked
  9883  001D02  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
  9884                           
  9885                           ; BSR set to: 0
  9886                           ;Test.c: 138: IR_signal = (res > 1000) ? 1 : 0;
  9887  001D04  0100               	movlb	0	; () banked
  9888  001D06  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
  9889  001D08  D00A               	goto	u5040
  9890  001D0A  0EE9               	movlw	233
  9891  001D0C  0100               	movlb	0	; () banked
  9892  001D0E  5DAD               	subwf	sensorTest@res& (0+255),w,b
  9893  001D10  0E03               	movlw	3
  9894  001D12  0100               	movlb	0	; () banked
  9895  001D14  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
  9896  001D16  A0D8               	btfss	status,0,c
  9897  001D18  D002               	goto	u5040
  9898  001D1A  0E01               	movlw	1
  9899  001D1C  D001               	goto	u5050
  9900  001D1E                     u5040:
  9901  001D1E  0E00               	movlw	0
  9902  001D20                     u5050:
  9903  001D20  0100               	movlb	0	; () banked
  9904  001D22  6FDA               	movwf	_IR_signal& (0+255),b
  9905  001D24  6BDB               	clrf	(_IR_signal+1)& (0+255),b
  9906                           
  9907                           ;Test.c: 140: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9908  001D26  0E01               	movlw	1
  9909  001D28  ECE1  F023         	call	_lcdInst
  9910  001D2C  0E68               	movlw	104
  9911  001D2E  0100               	movlb	0	; () banked
  9912  001D30  6FAB               	movwf	??_sensorTest& (0+255),b
  9913  001D32  0EE4               	movlw	228
  9914  001D34                     u7517:
  9915  001D34  2EE8               	decfsz	wreg,f,c
  9916  001D36  D7FE               	bra	u7517
  9917  001D38  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9918  001D3A  D7FC               	bra	u7517
  9919  001D3C  F000               	nop	
  9920  001D3E  0E80               	movlw	128
  9921  001D40  ECE1  F023         	call	_lcdInst
  9922                           
  9923                           ;Test.c: 141: printf("IR_signal: %d ", IR_signal);
  9924  001D44  0E5A               	movlw	low STR_80
  9925  001D46  0100               	movlb	0	; () banked
  9926  001D48  6F8E               	movwf	printf@f& (0+255),b
  9927  001D4A  0EFE               	movlw	high STR_80
  9928  001D4C  0100               	movlb	0	; () banked
  9929  001D4E  6F8F               	movwf	(printf@f+1)& (0+255),b
  9930  001D50  C0DA  F090         	movff	_IR_signal,?_printf+2
  9931  001D54  C0DB  F091         	movff	_IR_signal+1,?_printf+3
  9932  001D58  ECB8  F008         	call	_printf	;wreg free
  9933                           
  9934                           ;Test.c: 142: lcdInst(0b11000000);;
  9935  001D5C  0EC0               	movlw	192
  9936  001D5E  ECE1  F023         	call	_lcdInst
  9937                           
  9938                           ;Test.c: 143: printf("%d", res);
  9939  001D62  0E16               	movlw	low (STR_27+14)
  9940  001D64  0100               	movlb	0	; () banked
  9941  001D66  6F8E               	movwf	printf@f& (0+255),b
  9942  001D68  0EFE               	movlw	high (STR_27+14)
  9943  001D6A  0100               	movlb	0	; () banked
  9944  001D6C  6F8F               	movwf	(printf@f+1)& (0+255),b
  9945  001D6E  C0AD  F090         	movff	sensorTest@res,?_printf+2
  9946  001D72  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
  9947  001D76  ECB8  F008         	call	_printf	;wreg free
  9948                           
  9949                           ;Test.c: 144: _delay((unsigned long)((100)*(32000000/4000.0)));
  9950  001D7A  0E05               	movlw	5
  9951  001D7C  0100               	movlb	0	; () banked
  9952  001D7E  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9953  001D80  0E0F               	movlw	15
  9954  001D82  0100               	movlb	0	; () banked
  9955  001D84  6FAB               	movwf	??_sensorTest& (0+255),b
  9956  001D86  0EF1               	movlw	241
  9957  001D88                     u7527:
  9958  001D88  2EE8               	decfsz	wreg,f,c
  9959  001D8A  D7FE               	bra	u7527
  9960  001D8C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9961  001D8E  D7FC               	bra	u7527
  9962  001D90  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9963  001D92  D7FA               	bra	u7527
  9964  001D94                     l6605:
  9965  001D94  A281               	btfss	3969,1,c	;volatile
  9966  001D96  D7A2               	goto	l6587
  9967                           
  9968                           ;Test.c: 145: }
  9969                           ;Test.c: 146: LATCbits.LATC5 = 0;
  9970  001D98  9A8B               	bcf	3979,5,c	;volatile
  9971                           
  9972                           ;Test.c: 153: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9973  001D9A  0E01               	movlw	1
  9974  001D9C  ECE1  F023         	call	_lcdInst
  9975  001DA0  0E68               	movlw	104
  9976  001DA2  0100               	movlb	0	; () banked
  9977  001DA4  6FAB               	movwf	??_sensorTest& (0+255),b
  9978  001DA6  0EE4               	movlw	228
  9979  001DA8                     u7537:
  9980  001DA8  2EE8               	decfsz	wreg,f,c
  9981  001DAA  D7FE               	bra	u7537
  9982  001DAC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9983  001DAE  D7FC               	bra	u7537
  9984  001DB0  F000               	nop	
  9985  001DB2  0E80               	movlw	128
  9986  001DB4  ECE1  F023         	call	_lcdInst
  9987                           
  9988                           ;Test.c: 154: printf("TST: MAGNETISM");
  9989  001DB8  0E87               	movlw	low STR_82
  9990  001DBA  0100               	movlb	0	; () banked
  9991  001DBC  6F8E               	movwf	printf@f& (0+255),b
  9992  001DBE  0EFE               	movlw	high STR_82
  9993  001DC0  0100               	movlb	0	; () banked
  9994  001DC2  6F8F               	movwf	(printf@f+1)& (0+255),b
  9995  001DC4  ECB8  F008         	call	_printf	;wreg free
  9996                           
  9997                           ;Test.c: 155: _delay((unsigned long)((100)*(32000000/4000.0)));
  9998  001DC8  0E05               	movlw	5
  9999  001DCA  0100               	movlb	0	; () banked
 10000  001DCC  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10001  001DCE  0E0F               	movlw	15
 10002  001DD0  0100               	movlb	0	; () banked
 10003  001DD2  6FAB               	movwf	??_sensorTest& (0+255),b
 10004  001DD4  0EF1               	movlw	241
 10005  001DD6                     u7547:
 10006  001DD6  2EE8               	decfsz	wreg,f,c
 10007  001DD8  D7FE               	bra	u7547
 10008  001DDA  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10009  001DDC  D7FC               	bra	u7547
 10010  001DDE  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10011  001DE0  D7FA               	bra	u7547
 10012                           
 10013                           ;Test.c: 156: while(PORTBbits.RB1 == 0){
 10014  001DE2  D021               	goto	l6623
 10015  001DE4                     l6617:
 10016                           
 10017                           ;Test.c: 157: readMAG();
 10018  001DE4  ECAB  F020         	call	_readMAG	;wreg free
 10019                           
 10020                           ;Test.c: 158: lcdInst(0b10000000);;
 10021  001DE8  0E80               	movlw	128
 10022  001DEA  ECE1  F023         	call	_lcdInst
 10023                           
 10024                           ;Test.c: 159: lcdInst(0b11000000);;
 10025  001DEE  0EC0               	movlw	192
 10026  001DF0  ECE1  F023         	call	_lcdInst
 10027                           
 10028                           ;Test.c: 160: printf("MAG_signal: %d ", MAG_signal);
 10029  001DF4  0E2A               	movlw	low STR_83
 10030  001DF6  0100               	movlb	0	; () banked
 10031  001DF8  6F8E               	movwf	printf@f& (0+255),b
 10032  001DFA  0EFE               	movlw	high STR_83
 10033  001DFC  0100               	movlb	0	; () banked
 10034  001DFE  6F8F               	movwf	(printf@f+1)& (0+255),b
 10035  001E00  C0DC  F090         	movff	_MAG_signal,?_printf+2
 10036  001E04  C0DD  F091         	movff	_MAG_signal+1,?_printf+3
 10037  001E08  ECB8  F008         	call	_printf	;wreg free
 10038                           
 10039                           ;Test.c: 161: _delay((unsigned long)((100)*(32000000/4000.0)));
 10040  001E0C  0E05               	movlw	5
 10041  001E0E  0100               	movlb	0	; () banked
 10042  001E10  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10043  001E12  0E0F               	movlw	15
 10044  001E14  0100               	movlb	0	; () banked
 10045  001E16  6FAB               	movwf	??_sensorTest& (0+255),b
 10046  001E18  0EF1               	movlw	241
 10047  001E1A                     u7557:
 10048  001E1A  2EE8               	decfsz	wreg,f,c
 10049  001E1C  D7FE               	bra	u7557
 10050  001E1E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10051  001E20  D7FC               	bra	u7557
 10052  001E22  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10053  001E24  D7FA               	bra	u7557
 10054  001E26                     l6623:
 10055  001E26  A281               	btfss	3969,1,c	;volatile
 10056  001E28  D7DD               	goto	l6617
 10057                           
 10058                           ;Test.c: 162: }
 10059                           ;Test.c: 167: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10060  001E2A  0E01               	movlw	1
 10061  001E2C  ECE1  F023         	call	_lcdInst
 10062  001E30  0E68               	movlw	104
 10063  001E32  0100               	movlb	0	; () banked
 10064  001E34  6FAB               	movwf	??_sensorTest& (0+255),b
 10065  001E36  0EE4               	movlw	228
 10066  001E38                     u7567:
 10067  001E38  2EE8               	decfsz	wreg,f,c
 10068  001E3A  D7FE               	bra	u7567
 10069  001E3C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10070  001E3E  D7FC               	bra	u7567
 10071  001E40  F000               	nop	
 10072  001E42  0E80               	movlw	128
 10073  001E44  ECE1  F023         	call	_lcdInst
 10074                           
 10075                           ;Test.c: 168: printf("TST: COND");
 10076  001E48  0E87               	movlw	low STR_84
 10077  001E4A  0100               	movlb	0	; () banked
 10078  001E4C  6F8E               	movwf	printf@f& (0+255),b
 10079  001E4E  0EFF               	movlw	high STR_84
 10080  001E50  0100               	movlb	0	; () banked
 10081  001E52  6F8F               	movwf	(printf@f+1)& (0+255),b
 10082  001E54  ECB8  F008         	call	_printf	;wreg free
 10083                           
 10084                           ;Test.c: 169: _delay((unsigned long)((100)*(32000000/4000.0)));
 10085  001E58  0E05               	movlw	5
 10086  001E5A  0100               	movlb	0	; () banked
 10087  001E5C  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10088  001E5E  0E0F               	movlw	15
 10089  001E60  0100               	movlb	0	; () banked
 10090  001E62  6FAB               	movwf	??_sensorTest& (0+255),b
 10091  001E64  0EF1               	movlw	241
 10092  001E66                     u7577:
 10093  001E66  2EE8               	decfsz	wreg,f,c
 10094  001E68  D7FE               	bra	u7577
 10095  001E6A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10096  001E6C  D7FC               	bra	u7577
 10097  001E6E  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10098  001E70  D7FA               	bra	u7577
 10099  001E72                     l6635:
 10100                           
 10101                           ;Test.c: 171: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10102  001E72  0E01               	movlw	1
 10103  001E74  ECE1  F023         	call	_lcdInst
 10104  001E78  0E68               	movlw	104
 10105  001E7A  0100               	movlb	0	; () banked
 10106  001E7C  6FAB               	movwf	??_sensorTest& (0+255),b
 10107  001E7E  0EE4               	movlw	228
 10108  001E80                     u7587:
 10109  001E80  2EE8               	decfsz	wreg,f,c
 10110  001E82  D7FE               	bra	u7587
 10111  001E84  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10112  001E86  D7FC               	bra	u7587
 10113  001E88  F000               	nop	
 10114  001E8A  0E80               	movlw	128
 10115  001E8C  ECE1  F023         	call	_lcdInst
 10116                           
 10117                           ;Test.c: 172: printf("TST: COND");
 10118  001E90  0E87               	movlw	low STR_84
 10119  001E92  0100               	movlb	0	; () banked
 10120  001E94  6F8E               	movwf	printf@f& (0+255),b
 10121  001E96  0EFF               	movlw	high STR_84
 10122  001E98  0100               	movlb	0	; () banked
 10123  001E9A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10124  001E9C  ECB8  F008         	call	_printf	;wreg free
 10125                           
 10126                           ;Test.c: 173: while(PORTBbits.RB1 == 0){
 10127  001EA0  D01B               	goto	l6647
 10128  001EA2                     l6643:
 10129                           
 10130                           ;Test.c: 177: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10131  001EA2  0E80               	movlw	128
 10132  001EA4  ECE1  F023         	call	_lcdInst
 10133  001EA8  0EC0               	movlw	192
 10134  001EAA  ECE1  F023         	call	_lcdInst
 10135                           
 10136                           ;Test.c: 178: printf("COND: %d", PORTAbits.RA2);
 10137  001EAE  0EA5               	movlw	low STR_86
 10138  001EB0  0100               	movlb	0	; () banked
 10139  001EB2  6F8E               	movwf	printf@f& (0+255),b
 10140  001EB4  0EFF               	movlw	high STR_86
 10141  001EB6  0100               	movlb	0	; () banked
 10142  001EB8  6F8F               	movwf	(printf@f+1)& (0+255),b
 10143  001EBA  A480               	btfss	3968,2,c	;volatile
 10144  001EBC  D004               	goto	u5080
 10145  001EBE  0100               	movlb	0	; () banked
 10146  001EC0  6BAB               	clrf	??_sensorTest& (0+255),b
 10147  001EC2  2BAB               	incf	??_sensorTest& (0+255),f,b
 10148  001EC4  D002               	goto	u5088
 10149  001EC6                     u5080:
 10150  001EC6  0100               	movlb	0	; () banked
 10151  001EC8  6BAB               	clrf	??_sensorTest& (0+255),b
 10152  001ECA                     u5088:
 10153  001ECA  0100               	movlb	0	; () banked
 10154  001ECC  51AB               	movf	??_sensorTest& (0+255),w,b
 10155  001ECE  0100               	movlb	0	; () banked
 10156  001ED0  6F90               	movwf	(?_printf+2)& (0+255),b
 10157  001ED2  6B91               	clrf	(?_printf+3)& (0+255),b
 10158  001ED4  ECB8  F008         	call	_printf	;wreg free
 10159  001ED8                     l6647:
 10160  001ED8  A281               	btfss	3969,1,c	;volatile
 10161  001EDA  D7E3               	goto	l6643
 10162                           
 10163                           ;Test.c: 179: }
 10164                           ;Test.c: 180: if(PORTB >> 4 == 0b1111){
 10165  001EDC  3881               	swapf	3969,w,c	;volatile
 10166  001EDE  0B0F               	andlw	15
 10167  001EE0  0A0F               	xorlw	15
 10168  001EE2  B4D8               	btfsc	status,2,c
 10169  001EE4  0012               	return	
 10170                           
 10171                           ;Test.c: 183: else{
 10172                           ;Test.c: 184: LATAbits.LATA3 = 1;
 10173                           
 10174                           ;Test.c: 182: }
 10175                           
 10176                           ;Test.c: 181: break;
 10177  001EE6  8689               	bsf	3977,3,c	;volatile
 10178                           
 10179                           ;Test.c: 185: while(PORTBbits.RB1 == 1){
 10180  001EE8  D01B               	goto	l6659
 10181  001EEA                     l6655:
 10182                           
 10183                           ;Test.c: 187: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10184  001EEA  0E80               	movlw	128
 10185  001EEC  ECE1  F023         	call	_lcdInst
 10186  001EF0  0EC0               	movlw	192
 10187  001EF2  ECE1  F023         	call	_lcdInst
 10188                           
 10189                           ;Test.c: 188: printf("COND: %d", PORTAbits.RA2);
 10190  001EF6  0EA5               	movlw	low STR_86
 10191  001EF8  0100               	movlb	0	; () banked
 10192  001EFA  6F8E               	movwf	printf@f& (0+255),b
 10193  001EFC  0EFF               	movlw	high STR_86
 10194  001EFE  0100               	movlb	0	; () banked
 10195  001F00  6F8F               	movwf	(printf@f+1)& (0+255),b
 10196  001F02  A480               	btfss	3968,2,c	;volatile
 10197  001F04  D004               	goto	u5110
 10198  001F06  0100               	movlb	0	; () banked
 10199  001F08  6BAB               	clrf	??_sensorTest& (0+255),b
 10200  001F0A  2BAB               	incf	??_sensorTest& (0+255),f,b
 10201  001F0C  D002               	goto	u5118
 10202  001F0E                     u5110:
 10203  001F0E  0100               	movlb	0	; () banked
 10204  001F10  6BAB               	clrf	??_sensorTest& (0+255),b
 10205  001F12                     u5118:
 10206  001F12  0100               	movlb	0	; () banked
 10207  001F14  51AB               	movf	??_sensorTest& (0+255),w,b
 10208  001F16  0100               	movlb	0	; () banked
 10209  001F18  6F90               	movwf	(?_printf+2)& (0+255),b
 10210  001F1A  6B91               	clrf	(?_printf+3)& (0+255),b
 10211  001F1C  ECB8  F008         	call	_printf	;wreg free
 10212  001F20                     l6659:
 10213  001F20  B281               	btfsc	3969,1,c	;volatile
 10214  001F22  D7E3               	goto	l6655
 10215                           
 10216                           ;Test.c: 189: }
 10217                           ;Test.c: 190: LATAbits.LATA3 = ~1;
 10218  001F24  9689               	bcf	3977,3,c	;volatile
 10219  001F26  D7A5               	goto	l6635
 10220  001F28                     __end_of_sensorTest:
 10221                           	opt stack 0
 10222                           tblptru	equ	0xFF8
 10223                           tblptrh	equ	0xFF7
 10224                           tblptrl	equ	0xFF6
 10225                           tablat	equ	0xFF5
 10226                           prodh	equ	0xFF4
 10227                           prodl	equ	0xFF3
 10228                           intcon	equ	0xFF2
 10229                           intcon2	equ	0xFF1
 10230                           intcon3	equ	0xFF0
 10231                           postinc0	equ	0xFEE
 10232                           wreg	equ	0xFE8
 10233                           postdec1	equ	0xFE5
 10234                           fsr1l	equ	0xFE1
 10235                           indf2	equ	0xFDF
 10236                           postinc2	equ	0xFDE
 10237                           postdec2	equ	0xFDD
 10238                           fsr2h	equ	0xFDA
 10239                           fsr2l	equ	0xFD9
 10240                           status	equ	0xFD8
 10241                           
 10242 ;; *************** function _readMAG *****************
 10243 ;; Defined at:
 10244 ;;		line 29 in file "ADCFunctionality.c"
 10245 ;; Parameters:    Size  Location     Type
 10246 ;;		None
 10247 ;; Auto vars:     Size  Location     Type
 10248 ;;  res             2    4[BANK0 ] int 
 10249 ;; Return value:  Size  Location     Type
 10250 ;;                  1    wreg      void 
 10251 ;; Registers used:
 10252 ;;		wreg, status,2, status,0, cstack
 10253 ;; Tracked objects:
 10254 ;;		On entry : 0/0
 10255 ;;		On exit  : 0/0
 10256 ;;		Unchanged: 0/0
 10257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10259 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10260 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10261 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10262 ;;Total ram usage:        4 bytes
 10263 ;; Hardware stack levels used:    1
 10264 ;; Hardware stack levels required when called:    8
 10265 ;; This function calls:
 10266 ;;		_readADC
 10267 ;; This function is called by:
 10268 ;;		_getMAG
 10269 ;;		_sensorTest
 10270 ;; This function uses a non-reentrant model
 10271 ;;
 10272                           
 10273                           	psect	text38
 10274  004156                     __ptext38:
 10275                           	opt stack 0
 10276  004156                     _readMAG:
 10277                           	opt stack 19
 10278                           
 10279                           ;ADCFunctionality.c: 30: readADC(1);
 10280                           
 10281                           ;incstack = 0
 10282  004156  0E01               	movlw	1
 10283  004158  ECE8  F022         	call	_readADC
 10284                           
 10285                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 10286  00415C  50C3               	movf	4035,w,c	;volatile
 10287  00415E  CFC4 F082          	movff	4036,??_readMAG	;volatile
 10288  004162  0100               	movlb	0	; () banked
 10289  004164  6B83               	clrf	(??_readMAG+1)& (0+255),b
 10290  004166  C082  F083         	movff	??_readMAG,??_readMAG+1
 10291  00416A  0100               	movlb	0	; () banked
 10292  00416C  6B82               	clrf	??_readMAG& (0+255),b
 10293  00416E  0100               	movlb	0	; () banked
 10294  004170  1182               	iorwf	??_readMAG& (0+255),w,b
 10295  004172  0100               	movlb	0	; () banked
 10296  004174  6F84               	movwf	readMAG@res& (0+255),b
 10297  004176  0100               	movlb	0	; () banked
 10298  004178  5183               	movf	(??_readMAG+1)& (0+255),w,b
 10299  00417A  0100               	movlb	0	; () banked
 10300  00417C  6F85               	movwf	(readMAG@res+1)& (0+255),b
 10301                           
 10302                           ; BSR set to: 0
 10303                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 10304  00417E  0100               	movlb	0	; () banked
 10305  004180  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 10306  004182  D008               	goto	u3791
 10307  004184  0100               	movlb	0	; () banked
 10308  004186  5185               	movf	(readMAG@res+1)& (0+255),w,b
 10309  004188  E107               	bnz	u3790
 10310  00418A  0E96               	movlw	150
 10311  00418C  0100               	movlb	0	; () banked
 10312  00418E  5D84               	subwf	readMAG@res& (0+255),w,b
 10313  004190  B0D8               	btfsc	status,0,c
 10314  004192  D002               	goto	u3790
 10315  004194                     u3791:
 10316  004194  0E01               	movlw	1
 10317  004196  D001               	goto	u3800
 10318  004198                     u3790:
 10319  004198  0E00               	movlw	0
 10320  00419A                     u3800:
 10321  00419A  0100               	movlb	0	; () banked
 10322  00419C  6FDC               	movwf	_MAG_signal& (0+255),b
 10323  00419E  6BDD               	clrf	(_MAG_signal+1)& (0+255),b
 10324                           
 10325                           ; BSR set to: 0
 10326  0041A0  0012               	return		;funcret
 10327  0041A2                     __end_of_readMAG:
 10328                           	opt stack 0
 10329                           tblptru	equ	0xFF8
 10330                           tblptrh	equ	0xFF7
 10331                           tblptrl	equ	0xFF6
 10332                           tablat	equ	0xFF5
 10333                           prodh	equ	0xFF4
 10334                           prodl	equ	0xFF3
 10335                           intcon	equ	0xFF2
 10336                           intcon2	equ	0xFF1
 10337                           intcon3	equ	0xFF0
 10338                           postinc0	equ	0xFEE
 10339                           wreg	equ	0xFE8
 10340                           postdec1	equ	0xFE5
 10341                           fsr1l	equ	0xFE1
 10342                           indf2	equ	0xFDF
 10343                           postinc2	equ	0xFDE
 10344                           postdec2	equ	0xFDD
 10345                           fsr2h	equ	0xFDA
 10346                           fsr2l	equ	0xFD9
 10347                           status	equ	0xFD8
 10348                           
 10349 ;; *************** function _readADC *****************
 10350 ;; Defined at:
 10351 ;;		line 15 in file "ADCFunctionality.c"
 10352 ;; Parameters:    Size  Location     Type
 10353 ;;  channel         1    wreg     unsigned char 
 10354 ;; Auto vars:     Size  Location     Type
 10355 ;;  channel         1    1[BANK0 ] unsigned char 
 10356 ;; Return value:  Size  Location     Type
 10357 ;;                  1    wreg      void 
 10358 ;; Registers used:
 10359 ;;		wreg, status,2, status,0, cstack
 10360 ;; Tracked objects:
 10361 ;;		On entry : 0/0
 10362 ;;		On exit  : 0/0
 10363 ;;		Unchanged: 0/0
 10364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10366 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10367 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10368 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10369 ;;Total ram usage:        2 bytes
 10370 ;; Hardware stack levels used:    1
 10371 ;; Hardware stack levels required when called:    7
 10372 ;; This function calls:
 10373 ;;		Nothing
 10374 ;; This function is called by:
 10375 ;;		_readIR
 10376 ;;		_readMAG
 10377 ;;		_sensorTest
 10378 ;; This function uses a non-reentrant model
 10379 ;;
 10380                           
 10381                           	psect	text39
 10382  0045D0                     __ptext39:
 10383                           	opt stack 0
 10384  0045D0                     _readADC:
 10385                           	opt stack 19
 10386                           
 10387                           ; BSR set to: 0
 10388                           ;incstack = 0
 10389                           ;readADC@channel stored from wreg
 10390  0045D0  0100               	movlb	0	; () banked
 10391  0045D2  6F81               	movwf	readADC@channel& (0+255),b
 10392                           
 10393                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 10394  0045D4  0100               	movlb	0	; () banked
 10395  0045D6  4581               	rlncf	readADC@channel& (0+255),w,b
 10396  0045D8  46E8               	rlncf	wreg,f,c
 10397  0045DA  0BFC               	andlw	252
 10398  0045DC  6EC2               	movwf	4034,c	;volatile
 10399                           
 10400                           ; BSR set to: 0
 10401                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 10402  0045DE  80C2               	bsf	4034,0,c	;volatile
 10403                           
 10404                           ; BSR set to: 0
 10405                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 10406  0045E0  82C2               	bsf	4034,1,c	;volatile
 10407                           
 10408                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 10409  0045E2  D009               	goto	l5231
 10410  0045E4                     l5229:
 10411  0045E4  0E34               	movlw	52
 10412  0045E6  0100               	movlb	0	; () banked
 10413  0045E8  6F80               	movwf	??_readADC& (0+255),b
 10414  0045EA  0EF1               	movlw	241
 10415  0045EC                     u7597:
 10416  0045EC  2EE8               	decfsz	wreg,f,c
 10417  0045EE  D7FE               	bra	u7597
 10418  0045F0  2F80               	decfsz	??_readADC& (0+255),f,b
 10419  0045F2  D7FC               	bra	u7597
 10420  0045F4  D000               	nop2	
 10421  0045F6                     l5231:
 10422  0045F6  A2C2               	btfss	4034,1,c	;volatile
 10423  0045F8  0012               	return	
 10424  0045FA  D7F4               	goto	l5229
 10425  0045FC                     __end_of_readADC:
 10426                           	opt stack 0
 10427                           tblptru	equ	0xFF8
 10428                           tblptrh	equ	0xFF7
 10429                           tblptrl	equ	0xFF6
 10430                           tablat	equ	0xFF5
 10431                           prodh	equ	0xFF4
 10432                           prodl	equ	0xFF3
 10433                           intcon	equ	0xFF2
 10434                           intcon2	equ	0xFF1
 10435                           intcon3	equ	0xFF0
 10436                           postinc0	equ	0xFEE
 10437                           wreg	equ	0xFE8
 10438                           postdec1	equ	0xFE5
 10439                           fsr1l	equ	0xFE1
 10440                           indf2	equ	0xFDF
 10441                           postinc2	equ	0xFDE
 10442                           postdec2	equ	0xFDD
 10443                           fsr2h	equ	0xFDA
 10444                           fsr2l	equ	0xFD9
 10445                           status	equ	0xFD8
 10446                           
 10447 ;; *************** function _algorithmTest *****************
 10448 ;; Defined at:
 10449 ;;		line 74 in file "Test.c"
 10450 ;; Parameters:    Size  Location     Type
 10451 ;;		None
 10452 ;; Auto vars:     Size  Location     Type
 10453 ;;		None
 10454 ;; Return value:  Size  Location     Type
 10455 ;;                  1    wreg      void 
 10456 ;; Registers used:
 10457 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10458 ;; Tracked objects:
 10459 ;;		On entry : 0/0
 10460 ;;		On exit  : 0/0
 10461 ;;		Unchanged: 0/0
 10462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10465 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10466 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10467 ;;Total ram usage:        2 bytes
 10468 ;; Hardware stack levels used:    1
 10469 ;; Hardware stack levels required when called:   10
 10470 ;; This function calls:
 10471 ;;		_lcdInst
 10472 ;;		_printf
 10473 ;; This function is called by:
 10474 ;;		_Test
 10475 ;; This function uses a non-reentrant model
 10476 ;;
 10477                           
 10478                           	psect	text40
 10479  0034B2                     __ptext40:
 10480                           	opt stack 0
 10481  0034B2                     _algorithmTest:
 10482                           	opt stack 19
 10483                           
 10484                           ;Test.c: 76: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10485                           
 10486                           ;incstack = 0
 10487  0034B2  0E01               	movlw	1
 10488  0034B4  ECE1  F023         	call	_lcdInst
 10489  0034B8  0E68               	movlw	104
 10490  0034BA  0100               	movlb	0	; () banked
 10491  0034BC  6FAB               	movwf	??_algorithmTest& (0+255),b
 10492  0034BE  0EE4               	movlw	228
 10493  0034C0                     u7607:
 10494  0034C0  2EE8               	decfsz	wreg,f,c
 10495  0034C2  D7FE               	bra	u7607
 10496  0034C4  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10497  0034C6  D7FC               	bra	u7607
 10498  0034C8  F000               	nop	
 10499  0034CA  0E80               	movlw	128
 10500  0034CC  ECE1  F023         	call	_lcdInst
 10501                           
 10502                           ;Test.c: 77: printf("ALGORITHM TEST");
 10503  0034D0  0ED2               	movlw	low STR_70
 10504  0034D2  0100               	movlb	0	; () banked
 10505  0034D4  6F8E               	movwf	printf@f& (0+255),b
 10506  0034D6  0EFE               	movlw	high STR_70
 10507  0034D8  0100               	movlb	0	; () banked
 10508  0034DA  6F8F               	movwf	(printf@f+1)& (0+255),b
 10509  0034DC  ECB8  F008         	call	_printf	;wreg free
 10510                           
 10511                           ;Test.c: 78: lcdInst(0b11000000);;
 10512  0034E0  0EC0               	movlw	192
 10513  0034E2  ECE1  F023         	call	_lcdInst
 10514                           
 10515                           ;Test.c: 79: printf("PUSH TO START");
 10516  0034E6  0E0B               	movlw	low STR_71
 10517  0034E8  0100               	movlb	0	; () banked
 10518  0034EA  6F8E               	movwf	printf@f& (0+255),b
 10519  0034EC  0EFF               	movlw	high STR_71
 10520  0034EE  0100               	movlb	0	; () banked
 10521  0034F0  6F8F               	movwf	(printf@f+1)& (0+255),b
 10522  0034F2  ECB8  F008         	call	_printf	;wreg free
 10523                           
 10524                           ;Test.c: 80: _delay((unsigned long)((100)*(32000000/4000.0)));
 10525  0034F6  0E05               	movlw	5
 10526  0034F8  0100               	movlb	0	; () banked
 10527  0034FA  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 10528  0034FC  0E0F               	movlw	15
 10529  0034FE  0100               	movlb	0	; () banked
 10530  003500  6FAB               	movwf	??_algorithmTest& (0+255),b
 10531  003502  0EF1               	movlw	241
 10532  003504                     u7617:
 10533  003504  2EE8               	decfsz	wreg,f,c
 10534  003506  D7FE               	bra	u7617
 10535  003508  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10536  00350A  D7FC               	bra	u7617
 10537  00350C  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 10538  00350E  D7FA               	bra	u7617
 10539  003510                     l1063:
 10540  003510  A281               	btfss	3969,1,c	;volatile
 10541  003512  D7FE               	goto	l1063
 10542  003514                     l1066:
 10543  003514  B281               	btfsc	3969,1,c	;volatile
 10544  003516  D7FE               	goto	l1066
 10545                           
 10546                           ;Test.c: 83: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10547  003518  0E01               	movlw	1
 10548  00351A  ECE1  F023         	call	_lcdInst
 10549  00351E  0E68               	movlw	104
 10550  003520  0100               	movlb	0	; () banked
 10551  003522  6FAB               	movwf	??_algorithmTest& (0+255),b
 10552  003524  0EE4               	movlw	228
 10553  003526                     u7627:
 10554  003526  2EE8               	decfsz	wreg,f,c
 10555  003528  D7FE               	bra	u7627
 10556  00352A  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10557  00352C  D7FC               	bra	u7627
 10558  00352E  F000               	nop	
 10559  003530  0E80               	movlw	128
 10560  003532  ECE1  F023         	call	_lcdInst
 10561                           
 10562                           ;Test.c: 88: printf("ALG1: 9 POPNOTAB");
 10563  003536  0E5F               	movlw	low STR_72
 10564  003538  0100               	movlb	0	; () banked
 10565  00353A  6F8E               	movwf	printf@f& (0+255),b
 10566  00353C  0EFC               	movlw	high STR_72
 10567  00353E  0100               	movlb	0	; () banked
 10568  003540  6F8F               	movwf	(printf@f+1)& (0+255),b
 10569  003542  ECB8  F008         	call	_printf	;wreg free
 10570                           
 10571                           ;Test.c: 95: printf("ALG2: 12 CANS");
 10572  003546  0EEF               	movlw	low STR_73
 10573  003548  0100               	movlb	0	; () banked
 10574  00354A  6F8E               	movwf	printf@f& (0+255),b
 10575  00354C  0EFE               	movlw	high STR_73
 10576  00354E  0100               	movlb	0	; () banked
 10577  003550  6F8F               	movwf	(printf@f+1)& (0+255),b
 10578  003552  ECB8  F008         	call	_printf	;wreg free
 10579                           
 10580                           ;Test.c: 104: printf("ALG3: 1 CAN");
 10581  003556  0E4F               	movlw	low STR_74
 10582  003558  0100               	movlb	0	; () banked
 10583  00355A  6F8E               	movwf	printf@f& (0+255),b
 10584  00355C  0EFF               	movlw	high STR_74
 10585  00355E  0100               	movlb	0	; () banked
 10586  003560  6F8F               	movwf	(printf@f+1)& (0+255),b
 10587  003562  ECB8  F008         	call	_printf	;wreg free
 10588                           
 10589                           ;Test.c: 110: printf("ALG4: ALL CANS");
 10590  003566  0EB4               	movlw	low STR_75
 10591  003568  0100               	movlb	0	; () banked
 10592  00356A  6F8E               	movwf	printf@f& (0+255),b
 10593  00356C  0EFE               	movlw	high STR_75
 10594  00356E  0100               	movlb	0	; () banked
 10595  003570  6F8F               	movwf	(printf@f+1)& (0+255),b
 10596  003572  ECB8  F008         	call	_printf	;wreg free
 10597                           
 10598                           ;Test.c: 115: printf("ALG5: NO CANS");
 10599  003576  0EFD               	movlw	low STR_76
 10600  003578  0100               	movlb	0	; () banked
 10601  00357A  6F8E               	movwf	printf@f& (0+255),b
 10602  00357C  0EFE               	movlw	high STR_76
 10603  00357E  0100               	movlb	0	; () banked
 10604  003580  6F8F               	movwf	(printf@f+1)& (0+255),b
 10605  003582  ECB8  F008         	call	_printf	;wreg free
 10606  003586  0012               	return		;funcret
 10607  003588                     __end_of_algorithmTest:
 10608                           	opt stack 0
 10609                           tblptru	equ	0xFF8
 10610                           tblptrh	equ	0xFF7
 10611                           tblptrl	equ	0xFF6
 10612                           tablat	equ	0xFF5
 10613                           prodh	equ	0xFF4
 10614                           prodl	equ	0xFF3
 10615                           intcon	equ	0xFF2
 10616                           intcon2	equ	0xFF1
 10617                           intcon3	equ	0xFF0
 10618                           postinc0	equ	0xFEE
 10619                           wreg	equ	0xFE8
 10620                           postdec1	equ	0xFE5
 10621                           fsr1l	equ	0xFE1
 10622                           indf2	equ	0xFDF
 10623                           postinc2	equ	0xFDE
 10624                           postdec2	equ	0xFDD
 10625                           fsr2h	equ	0xFDA
 10626                           fsr2l	equ	0xFD9
 10627                           status	equ	0xFD8
 10628                           
 10629 ;; *************** function _actuatorTest *****************
 10630 ;; Defined at:
 10631 ;;		line 195 in file "Test.c"
 10632 ;; Parameters:    Size  Location     Type
 10633 ;;		None
 10634 ;; Auto vars:     Size  Location     Type
 10635 ;;  i               1   45[BANK0 ] unsigned char 
 10636 ;;  i               1   67[BANK0 ] unsigned char 
 10637 ;;  i               1   66[BANK0 ] unsigned char 
 10638 ;;  i               1   65[BANK0 ] unsigned char 
 10639 ;;  i               1   64[BANK0 ] unsigned char 
 10640 ;;  i               1   63[BANK0 ] unsigned char 
 10641 ;;  i               1   62[BANK0 ] unsigned char 
 10642 ;;  i               1   61[BANK0 ] unsigned char 
 10643 ;;  i               1   60[BANK0 ] unsigned char 
 10644 ;;  i               1   59[BANK0 ] unsigned char 
 10645 ;;  i               1   58[BANK0 ] unsigned char 
 10646 ;;  i               1   57[BANK0 ] unsigned char 
 10647 ;;  i               1   56[BANK0 ] unsigned char 
 10648 ;;  i               1   55[BANK0 ] unsigned char 
 10649 ;;  i               1   54[BANK0 ] unsigned char 
 10650 ;;  i               1   53[BANK0 ] unsigned char 
 10651 ;;  i               1   52[BANK0 ] unsigned char 
 10652 ;;  i               1   51[BANK0 ] unsigned char 
 10653 ;;  i               1   50[BANK0 ] unsigned char 
 10654 ;;  i               1   49[BANK0 ] unsigned char 
 10655 ;;  i               1   48[BANK0 ] unsigned char 
 10656 ;;  i               1   47[BANK0 ] unsigned char 
 10657 ;;  i               1   46[BANK0 ] unsigned char 
 10658 ;;  i               2   68[BANK0 ] int 
 10659 ;; Return value:  Size  Location     Type
 10660 ;;                  1    wreg      void 
 10661 ;; Registers used:
 10662 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10663 ;; Tracked objects:
 10664 ;;		On entry : 0/0
 10665 ;;		On exit  : 0/0
 10666 ;;		Unchanged: 0/0
 10667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10669 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10670 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10671 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10672 ;;Total ram usage:       27 bytes
 10673 ;; Hardware stack levels used:    1
 10674 ;; Hardware stack levels required when called:   10
 10675 ;; This function calls:
 10676 ;;		_lcdInst
 10677 ;;		_printf
 10678 ;;		_updateServoPosition
 10679 ;; This function is called by:
 10680 ;;		_Test
 10681 ;; This function uses a non-reentrant model
 10682 ;;
 10683                           
 10684                           	psect	text41
 10685  000012                     __ptext41:
 10686                           	opt stack 0
 10687  000012                     _actuatorTest:
 10688                           	opt stack 19
 10689                           
 10690                           ;Test.c: 197: int i = 0;
 10691                           
 10692                           ;incstack = 0
 10693  000012  0E00               	movlw	0
 10694  000014  0100               	movlb	0	; () banked
 10695  000016  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10696  000018  0E00               	movlw	0
 10697  00001A  6FC4               	movwf	actuatorTest@i& (0+255),b
 10698                           
 10699                           ; BSR set to: 0
 10700                           ;Test.c: 199: (INTCONbits.GIE = 1);
 10701  00001C  8EF2               	bsf	intcon,7,c	;volatile
 10702                           
 10703                           ; BSR set to: 0
 10704                           ;Test.c: 200: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10705  00001E  0E01               	movlw	1
 10706  000020  ECE1  F023         	call	_lcdInst
 10707  000024  0E68               	movlw	104
 10708  000026  0100               	movlb	0	; () banked
 10709  000028  6FAB               	movwf	??_actuatorTest& (0+255),b
 10710  00002A  0EE4               	movlw	228
 10711  00002C                     u7637:
 10712  00002C  2EE8               	decfsz	wreg,f,c
 10713  00002E  D7FE               	bra	u7637
 10714  000030  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10715  000032  D7FC               	bra	u7637
 10716  000034  F000               	nop	
 10717  000036  0E80               	movlw	128
 10718  000038  ECE1  F023         	call	_lcdInst
 10719                           
 10720                           ;Test.c: 201: printf("ACTUATORS");
 10721  00003C  0E91               	movlw	low STR_88
 10722  00003E  0100               	movlb	0	; () banked
 10723  000040  6F8E               	movwf	printf@f& (0+255),b
 10724  000042  0EFF               	movlw	high STR_88
 10725  000044  0100               	movlb	0	; () banked
 10726  000046  6F8F               	movwf	(printf@f+1)& (0+255),b
 10727  000048  ECB8  F008         	call	_printf	;wreg free
 10728                           
 10729                           ;Test.c: 202: lcdInst(0b11000000);;
 10730  00004C  0EC0               	movlw	192
 10731  00004E  ECE1  F023         	call	_lcdInst
 10732                           
 10733                           ;Test.c: 203: printf("PUSH TO START");
 10734  000052  0E0B               	movlw	low STR_71
 10735  000054  0100               	movlb	0	; () banked
 10736  000056  6F8E               	movwf	printf@f& (0+255),b
 10737  000058  0EFF               	movlw	high STR_71
 10738  00005A  0100               	movlb	0	; () banked
 10739  00005C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10740  00005E  ECB8  F008         	call	_printf	;wreg free
 10741                           
 10742                           ;Test.c: 204: _delay((unsigned long)((100)*(32000000/4000.0)));
 10743  000062  0E05               	movlw	5
 10744  000064  0100               	movlb	0	; () banked
 10745  000066  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10746  000068  0E0F               	movlw	15
 10747  00006A  0100               	movlb	0	; () banked
 10748  00006C  6FAB               	movwf	??_actuatorTest& (0+255),b
 10749  00006E  0EF1               	movlw	241
 10750  000070                     u7647:
 10751  000070  2EE8               	decfsz	wreg,f,c
 10752  000072  D7FE               	bra	u7647
 10753  000074  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10754  000076  D7FC               	bra	u7647
 10755  000078  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10756  00007A  D7FA               	bra	u7647
 10757  00007C                     l1098:
 10758  00007C  A281               	btfss	3969,1,c	;volatile
 10759  00007E  D7FE               	goto	l1098
 10760  000080                     l1101:
 10761  000080  B281               	btfsc	3969,1,c	;volatile
 10762  000082  D7FE               	goto	l1101
 10763                           
 10764                           ;Test.c: 207: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10765  000084  0E01               	movlw	1
 10766  000086  ECE1  F023         	call	_lcdInst
 10767  00008A  0E68               	movlw	104
 10768  00008C  0100               	movlb	0	; () banked
 10769  00008E  6FAB               	movwf	??_actuatorTest& (0+255),b
 10770  000090  0EE4               	movlw	228
 10771  000092                     u7657:
 10772  000092  2EE8               	decfsz	wreg,f,c
 10773  000094  D7FE               	bra	u7657
 10774  000096  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10775  000098  D7FC               	bra	u7657
 10776  00009A  F000               	nop	
 10777  00009C  0E80               	movlw	128
 10778  00009E  ECE1  F023         	call	_lcdInst
 10779                           
 10780                           ;Test.c: 212: printf("TST: DC MOTORS");
 10781  0000A2  0EC3               	movlw	low STR_90
 10782  0000A4  0100               	movlb	0	; () banked
 10783  0000A6  6F8E               	movwf	printf@f& (0+255),b
 10784  0000A8  0EFE               	movlw	high STR_90
 10785  0000AA  0100               	movlb	0	; () banked
 10786  0000AC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10787  0000AE  ECB8  F008         	call	_printf	;wreg free
 10788                           
 10789                           ;Test.c: 213: lcdInst(0b11000000);;
 10790  0000B2  0EC0               	movlw	192
 10791  0000B4  ECE1  F023         	call	_lcdInst
 10792                           
 10793                           ;Test.c: 214: printf("PIN RA5 HIGH.");
 10794  0000B8  0EE1               	movlw	low STR_91
 10795  0000BA  0100               	movlb	0	; () banked
 10796  0000BC  6F8E               	movwf	printf@f& (0+255),b
 10797  0000BE  0EFE               	movlw	high STR_91
 10798  0000C0  0100               	movlb	0	; () banked
 10799  0000C2  6F8F               	movwf	(printf@f+1)& (0+255),b
 10800  0000C4  ECB8  F008         	call	_printf	;wreg free
 10801                           
 10802                           ;Test.c: 215: LATAbits.LATA5 = 1;
 10803  0000C8  8A89               	bsf	3977,5,c	;volatile
 10804                           
 10805                           ;Test.c: 216: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 10806  0000CA  0E00               	movlw	0
 10807  0000CC  0100               	movlb	0	; () banked
 10808  0000CE  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10809  0000D0  0E00               	movlw	0
 10810  0000D2  6FC4               	movwf	actuatorTest@i& (0+255),b
 10811                           
 10812                           ; BSR set to: 0
 10813  0000D4  0100               	movlb	0	; () banked
 10814  0000D6  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10815  0000D8  D008               	goto	l6699
 10816  0000DA  0100               	movlb	0	; () banked
 10817  0000DC  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10818  0000DE  E123               	bnz	l1105
 10819  0000E0  0E05               	movlw	5
 10820  0000E2  0100               	movlb	0	; () banked
 10821  0000E4  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10822  0000E6  B0D8               	btfsc	status,0,c
 10823  0000E8  D01E               	goto	l1105
 10824  0000EA                     l6699:
 10825                           
 10826                           ; BSR set to: 0
 10827  0000EA  0E00               	movlw	0
 10828  0000EC  0100               	movlb	0	; () banked
 10829  0000EE  6FAD               	movwf	actuatorTest@i_1637& (0+255),b
 10830  0000F0                     l6701:
 10831                           
 10832                           ; BSR set to: 0
 10833  0000F0  0E63               	movlw	99
 10834  0000F2  0100               	movlb	0	; () banked
 10835  0000F4  65AD               	cpfsgt	actuatorTest@i_1637& (0+255),b
 10836  0000F6  D001               	goto	l6705
 10837  0000F8  D00C               	goto	l6709
 10838  0000FA                     l6705:
 10839                           
 10840                           ; BSR set to: 0
 10841  0000FA  0E68               	movlw	104
 10842  0000FC  0100               	movlb	0	; () banked
 10843  0000FE  6FAB               	movwf	??_actuatorTest& (0+255),b
 10844  000100  0EE4               	movlw	228
 10845  000102                     u7667:
 10846  000102  2EE8               	decfsz	wreg,f,c
 10847  000104  D7FE               	bra	u7667
 10848  000106  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10849  000108  D7FC               	bra	u7667
 10850  00010A  F000               	nop	
 10851  00010C  0100               	movlb	0	; () banked
 10852  00010E  2BAD               	incf	actuatorTest@i_1637& (0+255),f,b
 10853  000110  D7EF               	goto	l6701
 10854  000112                     l6709:
 10855                           
 10856                           ; BSR set to: 0
 10857  000112  0100               	movlb	0	; () banked
 10858  000114  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 10859  000116  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 10860                           
 10861                           ; BSR set to: 0
 10862  000118  0100               	movlb	0	; () banked
 10863  00011A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10864  00011C  D7E6               	goto	l6699
 10865  00011E  0100               	movlb	0	; () banked
 10866  000120  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10867  000122  E101               	bnz	u5180
 10868  000124  D7DD               	goto	L7
 10869  000126                     u5180:
 10870  000126                     l1105:
 10871                           
 10872                           ; BSR set to: 0
 10873                           ;Test.c: 217: LATAbits.LATA5 = 0;
 10874  000126  9A89               	bcf	3977,5,c	;volatile
 10875                           
 10876                           ; BSR set to: 0
 10877                           ;Test.c: 218: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10878  000128  0E01               	movlw	1
 10879  00012A  ECE1  F023         	call	_lcdInst
 10880  00012E  0E68               	movlw	104
 10881  000130  0100               	movlb	0	; () banked
 10882  000132  6FAB               	movwf	??_actuatorTest& (0+255),b
 10883  000134  0EE4               	movlw	228
 10884  000136                     u7677:
 10885  000136  2EE8               	decfsz	wreg,f,c
 10886  000138  D7FE               	bra	u7677
 10887  00013A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10888  00013C  D7FC               	bra	u7677
 10889  00013E  F000               	nop	
 10890  000140  0E80               	movlw	128
 10891  000142  ECE1  F023         	call	_lcdInst
 10892                           
 10893                           ;Test.c: 224: printf("TST: COND SOLN'D");
 10894  000146  0E81               	movlw	low STR_92
 10895  000148  0100               	movlb	0	; () banked
 10896  00014A  6F8E               	movwf	printf@f& (0+255),b
 10897  00014C  0EFC               	movlw	high STR_92
 10898  00014E  0100               	movlb	0	; () banked
 10899  000150  6F8F               	movwf	(printf@f+1)& (0+255),b
 10900  000152  ECB8  F008         	call	_printf	;wreg free
 10901                           
 10902                           ;Test.c: 225: lcdInst(0b11000000);;
 10903  000156  0EC0               	movlw	192
 10904  000158  ECE1  F023         	call	_lcdInst
 10905                           
 10906                           ;Test.c: 226: printf("PIN RA3...");
 10907  00015C  0E5B               	movlw	low STR_93
 10908  00015E  0100               	movlb	0	; () banked
 10909  000160  6F8E               	movwf	printf@f& (0+255),b
 10910  000162  0EFF               	movlw	high STR_93
 10911  000164  0100               	movlb	0	; () banked
 10912  000166  6F8F               	movwf	(printf@f+1)& (0+255),b
 10913  000168  ECB8  F008         	call	_printf	;wreg free
 10914                           
 10915                           ;Test.c: 227: for(i=0;i<5;i++){
 10916  00016C  0E00               	movlw	0
 10917  00016E  0100               	movlb	0	; () banked
 10918  000170  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10919  000172  0E00               	movlw	0
 10920  000174  6FC4               	movwf	actuatorTest@i& (0+255),b
 10921                           
 10922                           ; BSR set to: 0
 10923  000176  0100               	movlb	0	; () banked
 10924  000178  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10925  00017A  D008               	goto	l1108
 10926  00017C  0100               	movlb	0	; () banked
 10927  00017E  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10928  000180  E12C               	bnz	l1109
 10929  000182  0E05               	movlw	5
 10930  000184  0100               	movlb	0	; () banked
 10931  000186  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10932  000188  B0D8               	btfsc	status,0,c
 10933  00018A  D027               	goto	l1109
 10934  00018C                     l1108:
 10935                           
 10936                           ; BSR set to: 0
 10937                           ;Test.c: 228: LATAbits.LATA3 = 1;
 10938  00018C  8689               	bsf	3977,3,c	;volatile
 10939                           
 10940                           ; BSR set to: 0
 10941                           ;Test.c: 229: _delay((unsigned long)((300)*(32000000/4000.0)));
 10942  00018E  0E0D               	movlw	13
 10943  000190  0100               	movlb	0	; () banked
 10944  000192  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10945  000194  0E2D               	movlw	45
 10946  000196  0100               	movlb	0	; () banked
 10947  000198  6FAB               	movwf	??_actuatorTest& (0+255),b
 10948  00019A  0ED7               	movlw	215
 10949  00019C                     u7687:
 10950  00019C  2EE8               	decfsz	wreg,f,c
 10951  00019E  D7FE               	bra	u7687
 10952  0001A0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10953  0001A2  D7FC               	bra	u7687
 10954  0001A4  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10955  0001A6  D7FA               	bra	u7687
 10956  0001A8  D000               	nop2	
 10957                           
 10958                           ;Test.c: 230: LATAbits.LATA3 = ~1;
 10959  0001AA  9689               	bcf	3977,3,c	;volatile
 10960                           
 10961                           ;Test.c: 231: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 10962  0001AC  0E1D               	movlw	29
 10963  0001AE  0100               	movlb	0	; () banked
 10964  0001B0  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10965  0001B2  0E69               	movlw	105
 10966  0001B4  0100               	movlb	0	; () banked
 10967  0001B6  6FAB               	movwf	??_actuatorTest& (0+255),b
 10968  0001B8  0EA5               	movlw	165
 10969  0001BA                     u7697:
 10970  0001BA  2EE8               	decfsz	wreg,f,c
 10971  0001BC  D7FE               	bra	u7697
 10972  0001BE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10973  0001C0  D7FC               	bra	u7697
 10974  0001C2  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10975  0001C4  D7FA               	bra	u7697
 10976  0001C6  0100               	movlb	0	; () banked
 10977  0001C8  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 10978  0001CA  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 10979  0001CC  0100               	movlb	0	; () banked
 10980  0001CE  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10981  0001D0  D7DD               	goto	l1108
 10982  0001D2  0100               	movlb	0	; () banked
 10983  0001D4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10984  0001D6  E101               	bnz	u5200
 10985  0001D8  D7D4               	goto	L8
 10986  0001DA                     u5200:
 10987  0001DA                     l1109:
 10988                           
 10989                           ; BSR set to: 0
 10990                           ;Test.c: 232: }
 10991                           ;Test.c: 233: LATAbits.LATA3 = ~1;
 10992  0001DA  9689               	bcf	3977,3,c	;volatile
 10993                           
 10994                           ; BSR set to: 0
 10995                           ;Test.c: 234: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10996  0001DC  0E01               	movlw	1
 10997  0001DE  ECE1  F023         	call	_lcdInst
 10998  0001E2  0E68               	movlw	104
 10999  0001E4  0100               	movlb	0	; () banked
 11000  0001E6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11001  0001E8  0EE4               	movlw	228
 11002  0001EA                     u7707:
 11003  0001EA  2EE8               	decfsz	wreg,f,c
 11004  0001EC  D7FE               	bra	u7707
 11005  0001EE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11006  0001F0  D7FC               	bra	u7707
 11007  0001F2  F000               	nop	
 11008  0001F4  0E80               	movlw	128
 11009  0001F6  ECE1  F023         	call	_lcdInst
 11010                           
 11011                           ;Test.c: 240: printf("TST: PUSH SOLN'D");
 11012  0001FA  0E92               	movlw	low STR_94
 11013  0001FC  0100               	movlb	0	; () banked
 11014  0001FE  6F8E               	movwf	printf@f& (0+255),b
 11015  000200  0EFC               	movlw	high STR_94
 11016  000202  0100               	movlb	0	; () banked
 11017  000204  6F8F               	movwf	(printf@f+1)& (0+255),b
 11018  000206  ECB8  F008         	call	_printf	;wreg free
 11019                           
 11020                           ;Test.c: 241: lcdInst(0b11000000);;
 11021  00020A  0EC0               	movlw	192
 11022  00020C  ECE1  F023         	call	_lcdInst
 11023                           
 11024                           ;Test.c: 242: printf("PIN RA4...");
 11025  000210  0E66               	movlw	low STR_95
 11026  000212  0100               	movlb	0	; () banked
 11027  000214  6F8E               	movwf	printf@f& (0+255),b
 11028  000216  0EFF               	movlw	high STR_95
 11029  000218  0100               	movlb	0	; () banked
 11030  00021A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11031  00021C  ECB8  F008         	call	_printf	;wreg free
 11032                           
 11033                           ;Test.c: 243: for(i=0;i<5;i++){
 11034  000220  0E00               	movlw	0
 11035  000222  0100               	movlb	0	; () banked
 11036  000224  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11037  000226  0E00               	movlw	0
 11038  000228  6FC4               	movwf	actuatorTest@i& (0+255),b
 11039                           
 11040                           ; BSR set to: 0
 11041  00022A  0100               	movlb	0	; () banked
 11042  00022C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11043  00022E  D008               	goto	l1110
 11044  000230  0100               	movlb	0	; () banked
 11045  000232  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11046  000234  E12C               	bnz	l1111
 11047  000236  0E05               	movlw	5
 11048  000238  0100               	movlb	0	; () banked
 11049  00023A  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11050  00023C  B0D8               	btfsc	status,0,c
 11051  00023E  D027               	goto	l1111
 11052  000240                     l1110:
 11053                           
 11054                           ; BSR set to: 0
 11055                           ;Test.c: 244: LATAbits.LATA4 = 1;
 11056  000240  8889               	bsf	3977,4,c	;volatile
 11057                           
 11058                           ; BSR set to: 0
 11059                           ;Test.c: 245: _delay((unsigned long)((300)*(32000000/4000.0)));
 11060  000242  0E0D               	movlw	13
 11061  000244  0100               	movlb	0	; () banked
 11062  000246  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11063  000248  0E2D               	movlw	45
 11064  00024A  0100               	movlb	0	; () banked
 11065  00024C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11066  00024E  0ED7               	movlw	215
 11067  000250                     u7717:
 11068  000250  2EE8               	decfsz	wreg,f,c
 11069  000252  D7FE               	bra	u7717
 11070  000254  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11071  000256  D7FC               	bra	u7717
 11072  000258  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11073  00025A  D7FA               	bra	u7717
 11074  00025C  D000               	nop2	
 11075                           
 11076                           ;Test.c: 246: LATAbits.LATA4 = ~1;
 11077  00025E  9889               	bcf	3977,4,c	;volatile
 11078                           
 11079                           ;Test.c: 247: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 11080  000260  0E1D               	movlw	29
 11081  000262  0100               	movlb	0	; () banked
 11082  000264  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11083  000266  0E69               	movlw	105
 11084  000268  0100               	movlb	0	; () banked
 11085  00026A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11086  00026C  0EA5               	movlw	165
 11087  00026E                     u7727:
 11088  00026E  2EE8               	decfsz	wreg,f,c
 11089  000270  D7FE               	bra	u7727
 11090  000272  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11091  000274  D7FC               	bra	u7727
 11092  000276  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11093  000278  D7FA               	bra	u7727
 11094  00027A  0100               	movlb	0	; () banked
 11095  00027C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11096  00027E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11097  000280  0100               	movlb	0	; () banked
 11098  000282  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11099  000284  D7DD               	goto	l1110
 11100  000286  0100               	movlb	0	; () banked
 11101  000288  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11102  00028A  E101               	bnz	u5220
 11103  00028C  D7D4               	goto	L9
 11104  00028E                     u5220:
 11105  00028E                     l1111:
 11106                           
 11107                           ; BSR set to: 0
 11108                           ;Test.c: 248: }
 11109                           ;Test.c: 249: LATAbits.LATA4 = ~1;
 11110  00028E  9889               	bcf	3977,4,c	;volatile
 11111                           
 11112                           ; BSR set to: 0
 11113                           ;Test.c: 250: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11114  000290  0E01               	movlw	1
 11115  000292  ECE1  F023         	call	_lcdInst
 11116  000296  0E68               	movlw	104
 11117  000298  0100               	movlb	0	; () banked
 11118  00029A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11119  00029C  0EE4               	movlw	228
 11120  00029E                     u7737:
 11121  00029E  2EE8               	decfsz	wreg,f,c
 11122  0002A0  D7FE               	bra	u7737
 11123  0002A2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11124  0002A4  D7FC               	bra	u7737
 11125  0002A6  F000               	nop	
 11126  0002A8  0E80               	movlw	128
 11127  0002AA  ECE1  F023         	call	_lcdInst
 11128                           
 11129                           ;Test.c: 253: machine_state = Sorting_state;
 11130  0002AE  0E01               	movlw	1
 11131  0002B0  0100               	movlb	0	; () banked
 11132  0002B2  6FFC               	movwf	_machine_state& (0+255),b
 11133                           
 11134                           ; BSR set to: 0
 11135                           ;Test.c: 254: was_low_1 = 0;
 11136  0002B4  0E00               	movlw	0
 11137  0002B6  6E7A               	movwf	_was_low_1+1,c	;volatile
 11138  0002B8  0E00               	movlw	0
 11139  0002BA  6E79               	movwf	_was_low_1,c	;volatile
 11140                           
 11141                           ; BSR set to: 0
 11142                           ;Test.c: 255: was_low_1 = 0;
 11143  0002BC  0E00               	movlw	0
 11144  0002BE  6E7A               	movwf	_was_low_1+1,c	;volatile
 11145  0002C0  0E00               	movlw	0
 11146  0002C2  6E79               	movwf	_was_low_1,c	;volatile
 11147                           
 11148                           ; BSR set to: 0
 11149                           ;Test.c: 262: printf("TST: PAN SERVO");
 11150  0002C4  0EA5               	movlw	low STR_96
 11151  0002C6  0100               	movlb	0	; () banked
 11152  0002C8  6F8E               	movwf	printf@f& (0+255),b
 11153  0002CA  0EFE               	movlw	high STR_96
 11154  0002CC  0100               	movlb	0	; () banked
 11155  0002CE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11156  0002D0  ECB8  F008         	call	_printf	;wreg free
 11157                           
 11158                           ;Test.c: 263: lcdInst(0b11000000);;
 11159  0002D4  0EC0               	movlw	192
 11160  0002D6  ECE1  F023         	call	_lcdInst
 11161                           
 11162                           ;Test.c: 264: printf("MIDDLE -- 2s    ");
 11163  0002DA  0E0A               	movlw	low STR_97
 11164  0002DC  0100               	movlb	0	; () banked
 11165  0002DE  6F8E               	movwf	printf@f& (0+255),b
 11166  0002E0  0EFC               	movlw	high STR_97
 11167  0002E2  0100               	movlb	0	; () banked
 11168  0002E4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11169  0002E6  ECB8  F008         	call	_printf	;wreg free
 11170                           
 11171                           ;Test.c: 265: updateServoPosition(1200, 1);
 11172  0002EA  0E04               	movlw	4
 11173  0002EC  0100               	movlb	0	; () banked
 11174  0002EE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11175  0002F0  0EB0               	movlw	176
 11176  0002F2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11177  0002F4  0E00               	movlw	0
 11178  0002F6  0100               	movlb	0	; () banked
 11179  0002F8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11180  0002FA  0E01               	movlw	1
 11181  0002FC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11182  0002FE  EC1D  F01E         	call	_updateServoPosition	;wreg free
 11183                           
 11184                           ;Test.c: 266: TMR1ON = 1;
 11185  000302  80CD               	bsf	4045,0,c	;volatile
 11186                           
 11187                           ;Test.c: 267: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11188  000304  0E00               	movlw	0
 11189  000306  0100               	movlb	0	; () banked
 11190  000308  6FAE               	movwf	actuatorTest@i_1644& (0+255),b
 11191  00030A                     l6785:
 11192                           
 11193                           ; BSR set to: 0
 11194  00030A  0E63               	movlw	99
 11195  00030C  0100               	movlb	0	; () banked
 11196  00030E  65AE               	cpfsgt	actuatorTest@i_1644& (0+255),b
 11197  000310  D001               	goto	l6789
 11198  000312  D00C               	goto	l6793
 11199  000314                     l6789:
 11200                           
 11201                           ; BSR set to: 0
 11202  000314  0E68               	movlw	104
 11203  000316  0100               	movlb	0	; () banked
 11204  000318  6FAB               	movwf	??_actuatorTest& (0+255),b
 11205  00031A  0EE4               	movlw	228
 11206  00031C                     u7747:
 11207  00031C  2EE8               	decfsz	wreg,f,c
 11208  00031E  D7FE               	bra	u7747
 11209  000320  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11210  000322  D7FC               	bra	u7747
 11211  000324  F000               	nop	
 11212  000326  0100               	movlb	0	; () banked
 11213  000328  2BAE               	incf	actuatorTest@i_1644& (0+255),f,b
 11214  00032A  D7EF               	goto	l6785
 11215  00032C                     l6793:
 11216                           
 11217                           ; BSR set to: 0
 11218  00032C  0E00               	movlw	0
 11219  00032E  0100               	movlb	0	; () banked
 11220  000330  6FAF               	movwf	actuatorTest@i_1645& (0+255),b
 11221  000332                     l6795:
 11222                           
 11223                           ; BSR set to: 0
 11224  000332  0E63               	movlw	99
 11225  000334  0100               	movlb	0	; () banked
 11226  000336  65AF               	cpfsgt	actuatorTest@i_1645& (0+255),b
 11227  000338  D001               	goto	l6799
 11228  00033A  D00C               	goto	l6803
 11229  00033C                     l6799:
 11230                           
 11231                           ; BSR set to: 0
 11232  00033C  0E68               	movlw	104
 11233  00033E  0100               	movlb	0	; () banked
 11234  000340  6FAB               	movwf	??_actuatorTest& (0+255),b
 11235  000342  0EE4               	movlw	228
 11236  000344                     u7757:
 11237  000344  2EE8               	decfsz	wreg,f,c
 11238  000346  D7FE               	bra	u7757
 11239  000348  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11240  00034A  D7FC               	bra	u7757
 11241  00034C  F000               	nop	
 11242  00034E  0100               	movlb	0	; () banked
 11243  000350  2BAF               	incf	actuatorTest@i_1645& (0+255),f,b
 11244  000352  D7EF               	goto	l6795
 11245  000354                     l6803:
 11246                           
 11247                           ; BSR set to: 0
 11248                           ;Test.c: 269: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11249  000354  0E80               	movlw	128
 11250  000356  ECE1  F023         	call	_lcdInst
 11251  00035A  0EC0               	movlw	192
 11252  00035C  ECE1  F023         	call	_lcdInst
 11253                           
 11254                           ;Test.c: 270: printf("RIGHT -- 2s     ");
 11255  000360  0EF9               	movlw	low STR_98
 11256  000362  0100               	movlb	0	; () banked
 11257  000364  6F8E               	movwf	printf@f& (0+255),b
 11258  000366  0EFB               	movlw	high STR_98
 11259  000368  0100               	movlb	0	; () banked
 11260  00036A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11261  00036C  ECB8  F008         	call	_printf	;wreg free
 11262                           
 11263                           ;Test.c: 271: updateServoPosition(500, 1);
 11264  000370  0E01               	movlw	1
 11265  000372  0100               	movlb	0	; () banked
 11266  000374  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11267  000376  0EF4               	movlw	244
 11268  000378  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11269  00037A  0E00               	movlw	0
 11270  00037C  0100               	movlb	0	; () banked
 11271  00037E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11272  000380  0E01               	movlw	1
 11273  000382  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11274  000384  EC1D  F01E         	call	_updateServoPosition	;wreg free
 11275                           
 11276                           ;Test.c: 272: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11277  000388  0E00               	movlw	0
 11278  00038A  0100               	movlb	0	; () banked
 11279  00038C  6FB0               	movwf	actuatorTest@i_1647& (0+255),b
 11280  00038E                     l6811:
 11281                           
 11282                           ; BSR set to: 0
 11283  00038E  0E63               	movlw	99
 11284  000390  0100               	movlb	0	; () banked
 11285  000392  65B0               	cpfsgt	actuatorTest@i_1647& (0+255),b
 11286  000394  D001               	goto	l6815
 11287  000396  D00C               	goto	l6819
 11288  000398                     l6815:
 11289                           
 11290                           ; BSR set to: 0
 11291  000398  0E68               	movlw	104
 11292  00039A  0100               	movlb	0	; () banked
 11293  00039C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11294  00039E  0EE4               	movlw	228
 11295  0003A0                     u7767:
 11296  0003A0  2EE8               	decfsz	wreg,f,c
 11297  0003A2  D7FE               	bra	u7767
 11298  0003A4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11299  0003A6  D7FC               	bra	u7767
 11300  0003A8  F000               	nop	
 11301  0003AA  0100               	movlb	0	; () banked
 11302  0003AC  2BB0               	incf	actuatorTest@i_1647& (0+255),f,b
 11303  0003AE  D7EF               	goto	l6811
 11304  0003B0                     l6819:
 11305                           
 11306                           ; BSR set to: 0
 11307  0003B0  0E00               	movlw	0
 11308  0003B2  0100               	movlb	0	; () banked
 11309  0003B4  6FB1               	movwf	actuatorTest@i_1648& (0+255),b
 11310  0003B6                     l6821:
 11311                           
 11312                           ; BSR set to: 0
 11313  0003B6  0E63               	movlw	99
 11314  0003B8  0100               	movlb	0	; () banked
 11315  0003BA  65B1               	cpfsgt	actuatorTest@i_1648& (0+255),b
 11316  0003BC  D001               	goto	l6825
 11317  0003BE  D00C               	goto	l6829
 11318  0003C0                     l6825:
 11319                           
 11320                           ; BSR set to: 0
 11321  0003C0  0E68               	movlw	104
 11322  0003C2  0100               	movlb	0	; () banked
 11323  0003C4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11324  0003C6  0EE4               	movlw	228
 11325  0003C8                     u7777:
 11326  0003C8  2EE8               	decfsz	wreg,f,c
 11327  0003CA  D7FE               	bra	u7777
 11328  0003CC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11329  0003CE  D7FC               	bra	u7777
 11330  0003D0  F000               	nop	
 11331  0003D2  0100               	movlb	0	; () banked
 11332  0003D4  2BB1               	incf	actuatorTest@i_1648& (0+255),f,b
 11333  0003D6  D7EF               	goto	l6821
 11334  0003D8                     l6829:
 11335                           
 11336                           ; BSR set to: 0
 11337                           ;Test.c: 274: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11338  0003D8  0E80               	movlw	128
 11339  0003DA  ECE1  F023         	call	_lcdInst
 11340  0003DE  0EC0               	movlw	192
 11341  0003E0  ECE1  F023         	call	_lcdInst
 11342                           
 11343                           ;Test.c: 275: printf("LEFT -- 2s      ");
 11344  0003E4  0ED7               	movlw	low STR_99
 11345  0003E6  0100               	movlb	0	; () banked
 11346  0003E8  6F8E               	movwf	printf@f& (0+255),b
 11347  0003EA  0EFB               	movlw	high STR_99
 11348  0003EC  0100               	movlb	0	; () banked
 11349  0003EE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11350  0003F0  ECB8  F008         	call	_printf	;wreg free
 11351                           
 11352                           ;Test.c: 276: updateServoPosition(2100, 1);
 11353  0003F4  0E08               	movlw	8
 11354  0003F6  0100               	movlb	0	; () banked
 11355  0003F8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11356  0003FA  0E34               	movlw	52
 11357  0003FC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11358  0003FE  0E00               	movlw	0
 11359  000400  0100               	movlb	0	; () banked
 11360  000402  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11361  000404  0E01               	movlw	1
 11362  000406  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11363  000408  EC1D  F01E         	call	_updateServoPosition	;wreg free
 11364                           
 11365                           ;Test.c: 277: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11366  00040C  0E00               	movlw	0
 11367  00040E  0100               	movlb	0	; () banked
 11368  000410  6FB2               	movwf	actuatorTest@i_1650& (0+255),b
 11369  000412                     l6837:
 11370                           
 11371                           ; BSR set to: 0
 11372  000412  0E63               	movlw	99
 11373  000414  0100               	movlb	0	; () banked
 11374  000416  65B2               	cpfsgt	actuatorTest@i_1650& (0+255),b
 11375  000418  D001               	goto	l6841
 11376  00041A  D00C               	goto	l6845
 11377  00041C                     l6841:
 11378                           
 11379                           ; BSR set to: 0
 11380  00041C  0E68               	movlw	104
 11381  00041E  0100               	movlb	0	; () banked
 11382  000420  6FAB               	movwf	??_actuatorTest& (0+255),b
 11383  000422  0EE4               	movlw	228
 11384  000424                     u7787:
 11385  000424  2EE8               	decfsz	wreg,f,c
 11386  000426  D7FE               	bra	u7787
 11387  000428  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11388  00042A  D7FC               	bra	u7787
 11389  00042C  F000               	nop	
 11390  00042E  0100               	movlb	0	; () banked
 11391  000430  2BB2               	incf	actuatorTest@i_1650& (0+255),f,b
 11392  000432  D7EF               	goto	l6837
 11393  000434                     l6845:
 11394                           
 11395                           ; BSR set to: 0
 11396  000434  0E00               	movlw	0
 11397  000436  0100               	movlb	0	; () banked
 11398  000438  6FB3               	movwf	actuatorTest@i_1651& (0+255),b
 11399  00043A                     l6847:
 11400                           
 11401                           ; BSR set to: 0
 11402  00043A  0E63               	movlw	99
 11403  00043C  0100               	movlb	0	; () banked
 11404  00043E  65B3               	cpfsgt	actuatorTest@i_1651& (0+255),b
 11405  000440  D001               	goto	l6851
 11406  000442  D00C               	goto	l6855
 11407  000444                     l6851:
 11408                           
 11409                           ; BSR set to: 0
 11410  000444  0E68               	movlw	104
 11411  000446  0100               	movlb	0	; () banked
 11412  000448  6FAB               	movwf	??_actuatorTest& (0+255),b
 11413  00044A  0EE4               	movlw	228
 11414  00044C                     u7797:
 11415  00044C  2EE8               	decfsz	wreg,f,c
 11416  00044E  D7FE               	bra	u7797
 11417  000450  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11418  000452  D7FC               	bra	u7797
 11419  000454  F000               	nop	
 11420  000456  0100               	movlb	0	; () banked
 11421  000458  2BB3               	incf	actuatorTest@i_1651& (0+255),f,b
 11422  00045A  D7EF               	goto	l6847
 11423  00045C                     l6855:
 11424                           
 11425                           ; BSR set to: 0
 11426                           ;Test.c: 279: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11427  00045C  0E80               	movlw	128
 11428  00045E  ECE1  F023         	call	_lcdInst
 11429  000462  0EC0               	movlw	192
 11430  000464  ECE1  F023         	call	_lcdInst
 11431                           
 11432                           ;Test.c: 280: printf("MID-LEFT -- 2s  ");
 11433  000468  0E2C               	movlw	low STR_100
 11434  00046A  0100               	movlb	0	; () banked
 11435  00046C  6F8E               	movwf	printf@f& (0+255),b
 11436  00046E  0EFC               	movlw	high STR_100
 11437  000470  0100               	movlb	0	; () banked
 11438  000472  6F8F               	movwf	(printf@f+1)& (0+255),b
 11439  000474  ECB8  F008         	call	_printf	;wreg free
 11440                           
 11441                           ;Test.c: 281: updateServoPosition(1700, 1);
 11442  000478  0E06               	movlw	6
 11443  00047A  0100               	movlb	0	; () banked
 11444  00047C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11445  00047E  0EA4               	movlw	164
 11446  000480  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11447  000482  0E00               	movlw	0
 11448  000484  0100               	movlb	0	; () banked
 11449  000486  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11450  000488  0E01               	movlw	1
 11451  00048A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11452  00048C  EC1D  F01E         	call	_updateServoPosition	;wreg free
 11453                           
 11454                           ;Test.c: 282: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11455  000490  0E00               	movlw	0
 11456  000492  0100               	movlb	0	; () banked
 11457  000494  6FB4               	movwf	actuatorTest@i_1653& (0+255),b
 11458  000496                     l6863:
 11459                           
 11460                           ; BSR set to: 0
 11461  000496  0E63               	movlw	99
 11462  000498  0100               	movlb	0	; () banked
 11463  00049A  65B4               	cpfsgt	actuatorTest@i_1653& (0+255),b
 11464  00049C  D001               	goto	l6867
 11465  00049E  D00C               	goto	l6871
 11466  0004A0                     l6867:
 11467                           
 11468                           ; BSR set to: 0
 11469  0004A0  0E68               	movlw	104
 11470  0004A2  0100               	movlb	0	; () banked
 11471  0004A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11472  0004A6  0EE4               	movlw	228
 11473  0004A8                     u7807:
 11474  0004A8  2EE8               	decfsz	wreg,f,c
 11475  0004AA  D7FE               	bra	u7807
 11476  0004AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11477  0004AE  D7FC               	bra	u7807
 11478  0004B0  F000               	nop	
 11479  0004B2  0100               	movlb	0	; () banked
 11480  0004B4  2BB4               	incf	actuatorTest@i_1653& (0+255),f,b
 11481  0004B6  D7EF               	goto	l6863
 11482  0004B8                     l6871:
 11483                           
 11484                           ; BSR set to: 0
 11485  0004B8  0E00               	movlw	0
 11486  0004BA  0100               	movlb	0	; () banked
 11487  0004BC  6FB5               	movwf	actuatorTest@i_1654& (0+255),b
 11488  0004BE                     l6873:
 11489                           
 11490                           ; BSR set to: 0
 11491  0004BE  0E63               	movlw	99
 11492  0004C0  0100               	movlb	0	; () banked
 11493  0004C2  65B5               	cpfsgt	actuatorTest@i_1654& (0+255),b
 11494  0004C4  D001               	goto	l6877
 11495  0004C6  D00C               	goto	l6881
 11496  0004C8                     l6877:
 11497                           
 11498                           ; BSR set to: 0
 11499  0004C8  0E68               	movlw	104
 11500  0004CA  0100               	movlb	0	; () banked
 11501  0004CC  6FAB               	movwf	??_actuatorTest& (0+255),b
 11502  0004CE  0EE4               	movlw	228
 11503  0004D0                     u7817:
 11504  0004D0  2EE8               	decfsz	wreg,f,c
 11505  0004D2  D7FE               	bra	u7817
 11506  0004D4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11507  0004D6  D7FC               	bra	u7817
 11508  0004D8  F000               	nop	
 11509  0004DA  0100               	movlb	0	; () banked
 11510  0004DC  2BB5               	incf	actuatorTest@i_1654& (0+255),f,b
 11511  0004DE  D7EF               	goto	l6873
 11512  0004E0                     l6881:
 11513                           
 11514                           ; BSR set to: 0
 11515                           ;Test.c: 284: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11516  0004E0  0E80               	movlw	128
 11517  0004E2  ECE1  F023         	call	_lcdInst
 11518  0004E6  0EC0               	movlw	192
 11519  0004E8  ECE1  F023         	call	_lcdInst
 11520                           
 11521                           ;Test.c: 285: printf("MID-RIGHT -- 2s ");
 11522  0004EC  0E3D               	movlw	low STR_101
 11523  0004EE  0100               	movlb	0	; () banked
 11524  0004F0  6F8E               	movwf	printf@f& (0+255),b
 11525  0004F2  0EFC               	movlw	high STR_101
 11526  0004F4  0100               	movlb	0	; () banked
 11527  0004F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 11528  0004F8  ECB8  F008         	call	_printf	;wreg free
 11529                           
 11530                           ;Test.c: 286: updateServoPosition(750, 1);
 11531  0004FC  0E02               	movlw	2
 11532  0004FE  0100               	movlb	0	; () banked
 11533  000500  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11534  000502  0EEE               	movlw	238
 11535  000504  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11536  000506  0E00               	movlw	0
 11537  000508  0100               	movlb	0	; () banked
 11538  00050A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11539  00050C  0E01               	movlw	1
 11540  00050E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11541  000510  EC1D  F01E         	call	_updateServoPosition	;wreg free
 11542                           
 11543                           ;Test.c: 287: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11544  000514  0E00               	movlw	0
 11545  000516  0100               	movlb	0	; () banked
 11546  000518  6FB6               	movwf	actuatorTest@i_1656& (0+255),b
 11547  00051A                     l6889:
 11548                           
 11549                           ; BSR set to: 0
 11550  00051A  0E63               	movlw	99
 11551  00051C  0100               	movlb	0	; () banked
 11552  00051E  65B6               	cpfsgt	actuatorTest@i_1656& (0+255),b
 11553  000520  D001               	goto	l6893
 11554  000522  D00C               	goto	l6897
 11555  000524                     l6893:
 11556                           
 11557                           ; BSR set to: 0
 11558  000524  0E68               	movlw	104
 11559  000526  0100               	movlb	0	; () banked
 11560  000528  6FAB               	movwf	??_actuatorTest& (0+255),b
 11561  00052A  0EE4               	movlw	228
 11562  00052C                     u7827:
 11563  00052C  2EE8               	decfsz	wreg,f,c
 11564  00052E  D7FE               	bra	u7827
 11565  000530  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11566  000532  D7FC               	bra	u7827
 11567  000534  F000               	nop	
 11568  000536  0100               	movlb	0	; () banked
 11569  000538  2BB6               	incf	actuatorTest@i_1656& (0+255),f,b
 11570  00053A  D7EF               	goto	l6889
 11571  00053C                     l6897:
 11572                           
 11573                           ; BSR set to: 0
 11574  00053C  0E00               	movlw	0
 11575  00053E  0100               	movlb	0	; () banked
 11576  000540  6FB7               	movwf	actuatorTest@i_1657& (0+255),b
 11577  000542                     l6899:
 11578                           
 11579                           ; BSR set to: 0
 11580  000542  0E63               	movlw	99
 11581  000544  0100               	movlb	0	; () banked
 11582  000546  65B7               	cpfsgt	actuatorTest@i_1657& (0+255),b
 11583  000548  D001               	goto	l6903
 11584  00054A  D00C               	goto	l6907
 11585  00054C                     l6903:
 11586                           
 11587                           ; BSR set to: 0
 11588  00054C  0E68               	movlw	104
 11589  00054E  0100               	movlb	0	; () banked
 11590  000550  6FAB               	movwf	??_actuatorTest& (0+255),b
 11591  000552  0EE4               	movlw	228
 11592  000554                     u7837:
 11593  000554  2EE8               	decfsz	wreg,f,c
 11594  000556  D7FE               	bra	u7837
 11595  000558  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11596  00055A  D7FC               	bra	u7837
 11597  00055C  F000               	nop	
 11598  00055E  0100               	movlb	0	; () banked
 11599  000560  2BB7               	incf	actuatorTest@i_1657& (0+255),f,b
 11600  000562  D7EF               	goto	l6899
 11601  000564                     l6907:
 11602                           
 11603                           ; BSR set to: 0
 11604                           ;Test.c: 289: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11605  000564  0E80               	movlw	128
 11606  000566  ECE1  F023         	call	_lcdInst
 11607  00056A  0EC0               	movlw	192
 11608  00056C  ECE1  F023         	call	_lcdInst
 11609                           
 11610                           ;Test.c: 290: printf("MID -- 2s       ");
 11611  000570  0EB5               	movlw	low STR_102
 11612  000572  0100               	movlb	0	; () banked
 11613  000574  6F8E               	movwf	printf@f& (0+255),b
 11614  000576  0EFB               	movlw	high STR_102
 11615  000578  0100               	movlb	0	; () banked
 11616  00057A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11617  00057C  ECB8  F008         	call	_printf	;wreg free
 11618                           
 11619                           ;Test.c: 291: updateServoPosition(1200, 1);
 11620  000580  0E04               	movlw	4
 11621  000582  0100               	movlb	0	; () banked
 11622  000584  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11623  000586  0EB0               	movlw	176
 11624  000588  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11625  00058A  0E00               	movlw	0
 11626  00058C  0100               	movlb	0	; () banked
 11627  00058E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11628  000590  0E01               	movlw	1
 11629  000592  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11630  000594  EC1D  F01E         	call	_updateServoPosition	;wreg free
 11631                           
 11632                           ;Test.c: 292: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11633  000598  0E00               	movlw	0
 11634  00059A  0100               	movlb	0	; () banked
 11635  00059C  6FB8               	movwf	actuatorTest@i_1659& (0+255),b
 11636  00059E                     l6915:
 11637                           
 11638                           ; BSR set to: 0
 11639  00059E  0E63               	movlw	99
 11640  0005A0  0100               	movlb	0	; () banked
 11641  0005A2  65B8               	cpfsgt	actuatorTest@i_1659& (0+255),b
 11642  0005A4  D001               	goto	l6919
 11643  0005A6  D00C               	goto	l6923
 11644  0005A8                     l6919:
 11645                           
 11646                           ; BSR set to: 0
 11647  0005A8  0E68               	movlw	104
 11648  0005AA  0100               	movlb	0	; () banked
 11649  0005AC  6FAB               	movwf	??_actuatorTest& (0+255),b
 11650  0005AE  0EE4               	movlw	228
 11651  0005B0                     u7847:
 11652  0005B0  2EE8               	decfsz	wreg,f,c
 11653  0005B2  D7FE               	bra	u7847
 11654  0005B4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11655  0005B6  D7FC               	bra	u7847
 11656  0005B8  F000               	nop	
 11657  0005BA  0100               	movlb	0	; () banked
 11658  0005BC  2BB8               	incf	actuatorTest@i_1659& (0+255),f,b
 11659  0005BE  D7EF               	goto	l6915
 11660  0005C0                     l6923:
 11661                           
 11662                           ; BSR set to: 0
 11663  0005C0  0E00               	movlw	0
 11664  0005C2  0100               	movlb	0	; () banked
 11665  0005C4  6FB9               	movwf	actuatorTest@i_1660& (0+255),b
 11666  0005C6                     l6925:
 11667                           
 11668                           ; BSR set to: 0
 11669  0005C6  0E63               	movlw	99
 11670  0005C8  0100               	movlb	0	; () banked
 11671  0005CA  65B9               	cpfsgt	actuatorTest@i_1660& (0+255),b
 11672  0005CC  D001               	goto	l6929
 11673  0005CE  D00C               	goto	l1135
 11674  0005D0                     l6929:
 11675                           
 11676                           ; BSR set to: 0
 11677  0005D0  0E68               	movlw	104
 11678  0005D2  0100               	movlb	0	; () banked
 11679  0005D4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11680  0005D6  0EE4               	movlw	228
 11681  0005D8                     u7857:
 11682  0005D8  2EE8               	decfsz	wreg,f,c
 11683  0005DA  D7FE               	bra	u7857
 11684  0005DC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11685  0005DE  D7FC               	bra	u7857
 11686  0005E0  F000               	nop	
 11687  0005E2  0100               	movlb	0	; () banked
 11688  0005E4  2BB9               	incf	actuatorTest@i_1660& (0+255),f,b
 11689  0005E6  D7EF               	goto	l6925
 11690  0005E8                     l1135:
 11691                           
 11692                           ; BSR set to: 0
 11693                           ;Test.c: 293: TMR1ON = 0;
 11694  0005E8  90CD               	bcf	4045,0,c	;volatile
 11695                           
 11696                           ; BSR set to: 0
 11697                           ;Test.c: 300: printf("TST: TILT SERVO");
 11698  0005EA  0E3A               	movlw	low STR_103
 11699  0005EC  0100               	movlb	0	; () banked
 11700  0005EE  6F8E               	movwf	printf@f& (0+255),b
 11701  0005F0  0EFE               	movlw	high STR_103
 11702  0005F2  0100               	movlb	0	; () banked
 11703  0005F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11704  0005F6  ECB8  F008         	call	_printf	;wreg free
 11705                           
 11706                           ;Test.c: 301: lcdInst(0b11000000);;
 11707  0005FA  0EC0               	movlw	192
 11708  0005FC  ECE1  F023         	call	_lcdInst
 11709                           
 11710                           ;Test.c: 302: printf("LEVEL -- 2s     ");
 11711  000600  0EE8               	movlw	low STR_104
 11712  000602  0100               	movlb	0	; () banked
 11713  000604  6F8E               	movwf	printf@f& (0+255),b
 11714  000606  0EFB               	movlw	high STR_104
 11715  000608  0100               	movlb	0	; () banked
 11716  00060A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11717  00060C  ECB8  F008         	call	_printf	;wreg free
 11718                           
 11719                           ;Test.c: 303: updateServoPosition(1150, 3);
 11720  000610  0E04               	movlw	4
 11721  000612  0100               	movlb	0	; () banked
 11722  000614  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11723  000616  0E7E               	movlw	126
 11724  000618  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11725  00061A  0E00               	movlw	0
 11726  00061C  0100               	movlb	0	; () banked
 11727  00061E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11728  000620  0E03               	movlw	3
 11729  000622  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11730  000624  EC1D  F01E         	call	_updateServoPosition	;wreg free
 11731                           
 11732                           ;Test.c: 304: TMR3ON = 1;
 11733  000628  80B1               	bsf	4017,0,c	;volatile
 11734                           
 11735                           ;Test.c: 305: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11736  00062A  0E00               	movlw	0
 11737  00062C  0100               	movlb	0	; () banked
 11738  00062E  6FBA               	movwf	actuatorTest@i_1663& (0+255),b
 11739  000630                     l6943:
 11740                           
 11741                           ; BSR set to: 0
 11742  000630  0E63               	movlw	99
 11743  000632  0100               	movlb	0	; () banked
 11744  000634  65BA               	cpfsgt	actuatorTest@i_1663& (0+255),b
 11745  000636  D001               	goto	l6947
 11746  000638  D00C               	goto	l6951
 11747  00063A                     l6947:
 11748                           
 11749                           ; BSR set to: 0
 11750  00063A  0E68               	movlw	104
 11751  00063C  0100               	movlb	0	; () banked
 11752  00063E  6FAB               	movwf	??_actuatorTest& (0+255),b
 11753  000640  0EE4               	movlw	228
 11754  000642                     u7867:
 11755  000642  2EE8               	decfsz	wreg,f,c
 11756  000644  D7FE               	bra	u7867
 11757  000646  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11758  000648  D7FC               	bra	u7867
 11759  00064A  F000               	nop	
 11760  00064C  0100               	movlb	0	; () banked
 11761  00064E  2BBA               	incf	actuatorTest@i_1663& (0+255),f,b
 11762  000650  D7EF               	goto	l6943
 11763  000652                     l6951:
 11764                           
 11765                           ; BSR set to: 0
 11766  000652  0E00               	movlw	0
 11767  000654  0100               	movlb	0	; () banked
 11768  000656  6FBB               	movwf	actuatorTest@i_1664& (0+255),b
 11769  000658                     l6953:
 11770                           
 11771                           ; BSR set to: 0
 11772  000658  0E63               	movlw	99
 11773  00065A  0100               	movlb	0	; () banked
 11774  00065C  65BB               	cpfsgt	actuatorTest@i_1664& (0+255),b
 11775  00065E  D001               	goto	l6957
 11776  000660  D00C               	goto	l6961
 11777  000662                     l6957:
 11778                           
 11779                           ; BSR set to: 0
 11780  000662  0E68               	movlw	104
 11781  000664  0100               	movlb	0	; () banked
 11782  000666  6FAB               	movwf	??_actuatorTest& (0+255),b
 11783  000668  0EE4               	movlw	228
 11784  00066A                     u7877:
 11785  00066A  2EE8               	decfsz	wreg,f,c
 11786  00066C  D7FE               	bra	u7877
 11787  00066E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11788  000670  D7FC               	bra	u7877
 11789  000672  F000               	nop	
 11790  000674  0100               	movlb	0	; () banked
 11791  000676  2BBB               	incf	actuatorTest@i_1664& (0+255),f,b
 11792  000678  D7EF               	goto	l6953
 11793  00067A                     l6961:
 11794                           
 11795                           ; BSR set to: 0
 11796                           ;Test.c: 307: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11797  00067A  0E80               	movlw	128
 11798  00067C  ECE1  F023         	call	_lcdInst
 11799  000680  0EC0               	movlw	192
 11800  000682  ECE1  F023         	call	_lcdInst
 11801                           
 11802                           ;Test.c: 308: printf("DROP -- 2s      ");
 11803  000686  0EC6               	movlw	low STR_105
 11804  000688  0100               	movlb	0	; () banked
 11805  00068A  6F8E               	movwf	printf@f& (0+255),b
 11806  00068C  0EFB               	movlw	high STR_105
 11807  00068E  0100               	movlb	0	; () banked
 11808  000690  6F8F               	movwf	(printf@f+1)& (0+255),b
 11809  000692  ECB8  F008         	call	_printf	;wreg free
 11810                           
 11811                           ;Test.c: 309: updateServoPosition(1350, 3);
 11812  000696  0E05               	movlw	5
 11813  000698  0100               	movlb	0	; () banked
 11814  00069A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11815  00069C  0E46               	movlw	70
 11816  00069E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11817  0006A0  0E00               	movlw	0
 11818  0006A2  0100               	movlb	0	; () banked
 11819  0006A4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11820  0006A6  0E03               	movlw	3
 11821  0006A8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11822  0006AA  EC1D  F01E         	call	_updateServoPosition	;wreg free
 11823                           
 11824                           ;Test.c: 310: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11825  0006AE  0E00               	movlw	0
 11826  0006B0  0100               	movlb	0	; () banked
 11827  0006B2  6FBC               	movwf	actuatorTest@i_1666& (0+255),b
 11828  0006B4                     l6969:
 11829                           
 11830                           ; BSR set to: 0
 11831  0006B4  0E63               	movlw	99
 11832  0006B6  0100               	movlb	0	; () banked
 11833  0006B8  65BC               	cpfsgt	actuatorTest@i_1666& (0+255),b
 11834  0006BA  D001               	goto	l6973
 11835  0006BC  D00C               	goto	l6977
 11836  0006BE                     l6973:
 11837                           
 11838                           ; BSR set to: 0
 11839  0006BE  0E68               	movlw	104
 11840  0006C0  0100               	movlb	0	; () banked
 11841  0006C2  6FAB               	movwf	??_actuatorTest& (0+255),b
 11842  0006C4  0EE4               	movlw	228
 11843  0006C6                     u7887:
 11844  0006C6  2EE8               	decfsz	wreg,f,c
 11845  0006C8  D7FE               	bra	u7887
 11846  0006CA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11847  0006CC  D7FC               	bra	u7887
 11848  0006CE  F000               	nop	
 11849  0006D0  0100               	movlb	0	; () banked
 11850  0006D2  2BBC               	incf	actuatorTest@i_1666& (0+255),f,b
 11851  0006D4  D7EF               	goto	l6969
 11852  0006D6                     l6977:
 11853                           
 11854                           ; BSR set to: 0
 11855  0006D6  0E00               	movlw	0
 11856  0006D8  0100               	movlb	0	; () banked
 11857  0006DA  6FBD               	movwf	actuatorTest@i_1667& (0+255),b
 11858  0006DC                     l6979:
 11859                           
 11860                           ; BSR set to: 0
 11861  0006DC  0E63               	movlw	99
 11862  0006DE  0100               	movlb	0	; () banked
 11863  0006E0  65BD               	cpfsgt	actuatorTest@i_1667& (0+255),b
 11864  0006E2  D001               	goto	l6983
 11865  0006E4  D00C               	goto	l6987
 11866  0006E6                     l6983:
 11867                           
 11868                           ; BSR set to: 0
 11869  0006E6  0E68               	movlw	104
 11870  0006E8  0100               	movlb	0	; () banked
 11871  0006EA  6FAB               	movwf	??_actuatorTest& (0+255),b
 11872  0006EC  0EE4               	movlw	228
 11873  0006EE                     u7897:
 11874  0006EE  2EE8               	decfsz	wreg,f,c
 11875  0006F0  D7FE               	bra	u7897
 11876  0006F2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11877  0006F4  D7FC               	bra	u7897
 11878  0006F6  F000               	nop	
 11879  0006F8  0100               	movlb	0	; () banked
 11880  0006FA  2BBD               	incf	actuatorTest@i_1667& (0+255),f,b
 11881  0006FC  D7EF               	goto	l6979
 11882  0006FE                     l6987:
 11883                           
 11884                           ; BSR set to: 0
 11885                           ;Test.c: 312: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11886  0006FE  0E80               	movlw	128
 11887  000700  ECE1  F023         	call	_lcdInst
 11888  000704  0EC0               	movlw	192
 11889  000706  ECE1  F023         	call	_lcdInst
 11890                           
 11891                           ;Test.c: 313: printf("LEVEL -- 2s     ");
 11892  00070A  0EE8               	movlw	low STR_104
 11893  00070C  0100               	movlb	0	; () banked
 11894  00070E  6F8E               	movwf	printf@f& (0+255),b
 11895  000710  0EFB               	movlw	high STR_104
 11896  000712  0100               	movlb	0	; () banked
 11897  000714  6F8F               	movwf	(printf@f+1)& (0+255),b
 11898  000716  ECB8  F008         	call	_printf	;wreg free
 11899                           
 11900                           ;Test.c: 314: updateServoPosition(1150, 3);
 11901  00071A  0E04               	movlw	4
 11902  00071C  0100               	movlb	0	; () banked
 11903  00071E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11904  000720  0E7E               	movlw	126
 11905  000722  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11906  000724  0E00               	movlw	0
 11907  000726  0100               	movlb	0	; () banked
 11908  000728  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11909  00072A  0E03               	movlw	3
 11910  00072C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11911  00072E  EC1D  F01E         	call	_updateServoPosition	;wreg free
 11912                           
 11913                           ;Test.c: 315: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11914  000732  0E00               	movlw	0
 11915  000734  0100               	movlb	0	; () banked
 11916  000736  6FBE               	movwf	actuatorTest@i_1669& (0+255),b
 11917  000738                     l6995:
 11918                           
 11919                           ; BSR set to: 0
 11920  000738  0E63               	movlw	99
 11921  00073A  0100               	movlb	0	; () banked
 11922  00073C  65BE               	cpfsgt	actuatorTest@i_1669& (0+255),b
 11923  00073E  D001               	goto	l6999
 11924  000740  D00C               	goto	l7003
 11925  000742                     l6999:
 11926                           
 11927                           ; BSR set to: 0
 11928  000742  0E68               	movlw	104
 11929  000744  0100               	movlb	0	; () banked
 11930  000746  6FAB               	movwf	??_actuatorTest& (0+255),b
 11931  000748  0EE4               	movlw	228
 11932  00074A                     u7907:
 11933  00074A  2EE8               	decfsz	wreg,f,c
 11934  00074C  D7FE               	bra	u7907
 11935  00074E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11936  000750  D7FC               	bra	u7907
 11937  000752  F000               	nop	
 11938  000754  0100               	movlb	0	; () banked
 11939  000756  2BBE               	incf	actuatorTest@i_1669& (0+255),f,b
 11940  000758  D7EF               	goto	l6995
 11941  00075A                     l7003:
 11942                           
 11943                           ; BSR set to: 0
 11944  00075A  0E00               	movlw	0
 11945  00075C  0100               	movlb	0	; () banked
 11946  00075E  6FBF               	movwf	actuatorTest@i_1670& (0+255),b
 11947  000760                     l7005:
 11948                           
 11949                           ; BSR set to: 0
 11950  000760  0E63               	movlw	99
 11951  000762  0100               	movlb	0	; () banked
 11952  000764  65BF               	cpfsgt	actuatorTest@i_1670& (0+255),b
 11953  000766  D001               	goto	l7009
 11954  000768  D00C               	goto	l1147
 11955  00076A                     l7009:
 11956                           
 11957                           ; BSR set to: 0
 11958  00076A  0E68               	movlw	104
 11959  00076C  0100               	movlb	0	; () banked
 11960  00076E  6FAB               	movwf	??_actuatorTest& (0+255),b
 11961  000770  0EE4               	movlw	228
 11962  000772                     u7917:
 11963  000772  2EE8               	decfsz	wreg,f,c
 11964  000774  D7FE               	bra	u7917
 11965  000776  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11966  000778  D7FC               	bra	u7917
 11967  00077A  F000               	nop	
 11968  00077C  0100               	movlb	0	; () banked
 11969  00077E  2BBF               	incf	actuatorTest@i_1670& (0+255),f,b
 11970  000780  D7EF               	goto	l7005
 11971  000782                     l1147:
 11972                           
 11973                           ; BSR set to: 0
 11974                           ;Test.c: 316: TMR3ON = 0;
 11975  000782  90B1               	bcf	4017,0,c	;volatile
 11976                           
 11977                           ;Test.c: 317: (INTCONbits.GIE = 0);
 11978  000784  9EF2               	bcf	intcon,7,c	;volatile
 11979                           
 11980                           ; BSR set to: 0
 11981                           ;Test.c: 322: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11982  000786  0E01               	movlw	1
 11983  000788  ECE1  F023         	call	_lcdInst
 11984  00078C  0E68               	movlw	104
 11985  00078E  0100               	movlb	0	; () banked
 11986  000790  6FAB               	movwf	??_actuatorTest& (0+255),b
 11987  000792  0EE4               	movlw	228
 11988  000794                     u7927:
 11989  000794  2EE8               	decfsz	wreg,f,c
 11990  000796  D7FE               	bra	u7927
 11991  000798  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11992  00079A  D7FC               	bra	u7927
 11993  00079C  F000               	nop	
 11994  00079E  0E80               	movlw	128
 11995  0007A0  ECE1  F023         	call	_lcdInst
 11996                           
 11997                           ;Test.c: 323: printf("TST: CAM SERVO");
 11998  0007A4  0E96               	movlw	low STR_107
 11999  0007A6  0100               	movlb	0	; () banked
 12000  0007A8  6F8E               	movwf	printf@f& (0+255),b
 12001  0007AA  0EFE               	movlw	high STR_107
 12002  0007AC  0100               	movlb	0	; () banked
 12003  0007AE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12004  0007B0  ECB8  F008         	call	_printf	;wreg free
 12005                           
 12006                           ;Test.c: 324: lcdInst(0b11000000);;
 12007  0007B4  0EC0               	movlw	192
 12008  0007B6  ECE1  F023         	call	_lcdInst
 12009                           
 12010                           ;Test.c: 325: printf("CAM UP  |RC0=1");
 12011  0007BA  0E78               	movlw	low STR_108
 12012  0007BC  0100               	movlb	0	; () banked
 12013  0007BE  6F8E               	movwf	printf@f& (0+255),b
 12014  0007C0  0EFE               	movlw	high STR_108
 12015  0007C2  0100               	movlb	0	; () banked
 12016  0007C4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12017  0007C6  ECB8  F008         	call	_printf	;wreg free
 12018                           
 12019                           ;Test.c: 326: LATCbits.LATC0 = 1;
 12020  0007CA  808B               	bsf	3979,0,c	;volatile
 12021                           
 12022                           ;Test.c: 327: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12023  0007CC  0E00               	movlw	0
 12024  0007CE  0100               	movlb	0	; () banked
 12025  0007D0  6FC0               	movwf	actuatorTest@i_1673& (0+255),b
 12026  0007D2                     l7029:
 12027                           
 12028                           ; BSR set to: 0
 12029  0007D2  0E63               	movlw	99
 12030  0007D4  0100               	movlb	0	; () banked
 12031  0007D6  65C0               	cpfsgt	actuatorTest@i_1673& (0+255),b
 12032  0007D8  D001               	goto	l7033
 12033  0007DA  D00C               	goto	l7037
 12034  0007DC                     l7033:
 12035                           
 12036                           ; BSR set to: 0
 12037  0007DC  0E68               	movlw	104
 12038  0007DE  0100               	movlb	0	; () banked
 12039  0007E0  6FAB               	movwf	??_actuatorTest& (0+255),b
 12040  0007E2  0EE4               	movlw	228
 12041  0007E4                     u7937:
 12042  0007E4  2EE8               	decfsz	wreg,f,c
 12043  0007E6  D7FE               	bra	u7937
 12044  0007E8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12045  0007EA  D7FC               	bra	u7937
 12046  0007EC  F000               	nop	
 12047  0007EE  0100               	movlb	0	; () banked
 12048  0007F0  2BC0               	incf	actuatorTest@i_1673& (0+255),f,b
 12049  0007F2  D7EF               	goto	l7029
 12050  0007F4                     l7037:
 12051                           
 12052                           ; BSR set to: 0
 12053  0007F4  0E00               	movlw	0
 12054  0007F6  0100               	movlb	0	; () banked
 12055  0007F8  6FC1               	movwf	actuatorTest@i_1674& (0+255),b
 12056  0007FA                     l7039:
 12057                           
 12058                           ; BSR set to: 0
 12059  0007FA  0E63               	movlw	99
 12060  0007FC  0100               	movlb	0	; () banked
 12061  0007FE  65C1               	cpfsgt	actuatorTest@i_1674& (0+255),b
 12062  000800  D001               	goto	l7043
 12063  000802  D00C               	goto	l7047
 12064  000804                     l7043:
 12065                           
 12066                           ; BSR set to: 0
 12067  000804  0E68               	movlw	104
 12068  000806  0100               	movlb	0	; () banked
 12069  000808  6FAB               	movwf	??_actuatorTest& (0+255),b
 12070  00080A  0EE4               	movlw	228
 12071  00080C                     u7947:
 12072  00080C  2EE8               	decfsz	wreg,f,c
 12073  00080E  D7FE               	bra	u7947
 12074  000810  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12075  000812  D7FC               	bra	u7947
 12076  000814  F000               	nop	
 12077  000816  0100               	movlb	0	; () banked
 12078  000818  2BC1               	incf	actuatorTest@i_1674& (0+255),f,b
 12079  00081A  D7EF               	goto	l7039
 12080  00081C                     l7047:
 12081                           
 12082                           ; BSR set to: 0
 12083                           ;Test.c: 328: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12084  00081C  0E80               	movlw	128
 12085  00081E  ECE1  F023         	call	_lcdInst
 12086  000822  0EC0               	movlw	192
 12087  000824  ECE1  F023         	call	_lcdInst
 12088                           
 12089                           ;Test.c: 329: printf("CAM DWN |RC0=0");
 12090  000828  0E69               	movlw	low STR_109
 12091  00082A  0100               	movlb	0	; () banked
 12092  00082C  6F8E               	movwf	printf@f& (0+255),b
 12093  00082E  0EFE               	movlw	high STR_109
 12094  000830  0100               	movlb	0	; () banked
 12095  000832  6F8F               	movwf	(printf@f+1)& (0+255),b
 12096  000834  ECB8  F008         	call	_printf	;wreg free
 12097                           
 12098                           ;Test.c: 332: for(i=0;i<10000;i++)
 12099  000838  0E00               	movlw	0
 12100  00083A  0100               	movlb	0	; () banked
 12101  00083C  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12102  00083E  0E00               	movlw	0
 12103  000840  6FC4               	movwf	actuatorTest@i& (0+255),b
 12104  000842                     l7053:
 12105                           
 12106                           ; BSR set to: 0
 12107  000842  0100               	movlb	0	; () banked
 12108  000844  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12109  000846  D008               	goto	l1152
 12110  000848  0E10               	movlw	16
 12111  00084A  0100               	movlb	0	; () banked
 12112  00084C  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 12113  00084E  0E27               	movlw	39
 12114  000850  0100               	movlb	0	; () banked
 12115  000852  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 12116  000854  B0D8               	btfsc	status,0,c
 12117  000856  D00D               	goto	l7063
 12118  000858                     l1152:
 12119                           
 12120                           ; BSR set to: 0
 12121                           ;Test.c: 333: {
 12122                           ;Test.c: 334: LATCbits.LATC0 = 1;
 12123  000858  808B               	bsf	3979,0,c	;volatile
 12124                           
 12125                           ; BSR set to: 0
 12126                           ;Test.c: 335: _delay((unsigned long)((10)*(32000000/4000000.0)));
 12127  00085A  0E1A               	movlw	26
 12128  00085C                     u7957:
 12129  00085C  2EE8               	decfsz	wreg,f,c
 12130  00085E  D7FE               	bra	u7957
 12131  000860  D000               	nop2	
 12132                           
 12133                           ;Test.c: 336: LATCbits.LATC0 = 0;
 12134  000862  908B               	bcf	3979,0,c	;volatile
 12135                           
 12136                           ;Test.c: 337: _delay((unsigned long)((90)*(32000000/4000000.0)));
 12137  000864  0EF0               	movlw	240
 12138  000866                     u7967:
 12139  000866  2EE8               	decfsz	wreg,f,c
 12140  000868  D7FE               	bra	u7967
 12141  00086A  0100               	movlb	0	; () banked
 12142  00086C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12143  00086E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12144  000870  D7E8               	goto	l7053
 12145  000872                     l7063:
 12146                           
 12147                           ; BSR set to: 0
 12148                           ;Test.c: 338: }
 12149                           ;Test.c: 340: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12150  000872  0E00               	movlw	0
 12151  000874  0100               	movlb	0	; () banked
 12152  000876  6FC2               	movwf	actuatorTest@i_1676& (0+255),b
 12153  000878                     l7065:
 12154                           
 12155                           ; BSR set to: 0
 12156  000878  0E63               	movlw	99
 12157  00087A  0100               	movlb	0	; () banked
 12158  00087C  65C2               	cpfsgt	actuatorTest@i_1676& (0+255),b
 12159  00087E  D001               	goto	l7069
 12160  000880  D00C               	goto	l7073
 12161  000882                     l7069:
 12162                           
 12163                           ; BSR set to: 0
 12164  000882  0E68               	movlw	104
 12165  000884  0100               	movlb	0	; () banked
 12166  000886  6FAB               	movwf	??_actuatorTest& (0+255),b
 12167  000888  0EE4               	movlw	228
 12168  00088A                     u7977:
 12169  00088A  2EE8               	decfsz	wreg,f,c
 12170  00088C  D7FE               	bra	u7977
 12171  00088E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12172  000890  D7FC               	bra	u7977
 12173  000892  F000               	nop	
 12174  000894  0100               	movlb	0	; () banked
 12175  000896  2BC2               	incf	actuatorTest@i_1676& (0+255),f,b
 12176  000898  D7EF               	goto	l7065
 12177  00089A                     l7073:
 12178                           
 12179                           ; BSR set to: 0
 12180  00089A  0E00               	movlw	0
 12181  00089C  0100               	movlb	0	; () banked
 12182  00089E  6FC3               	movwf	actuatorTest@i_1677& (0+255),b
 12183  0008A0                     l7075:
 12184                           
 12185                           ; BSR set to: 0
 12186  0008A0  0E63               	movlw	99
 12187  0008A2  0100               	movlb	0	; () banked
 12188  0008A4  65C3               	cpfsgt	actuatorTest@i_1677& (0+255),b
 12189  0008A6  D001               	goto	l7079
 12190  0008A8  D00C               	goto	l7083
 12191  0008AA                     l7079:
 12192                           
 12193                           ; BSR set to: 0
 12194  0008AA  0E68               	movlw	104
 12195  0008AC  0100               	movlb	0	; () banked
 12196  0008AE  6FAB               	movwf	??_actuatorTest& (0+255),b
 12197  0008B0  0EE4               	movlw	228
 12198  0008B2                     u7987:
 12199  0008B2  2EE8               	decfsz	wreg,f,c
 12200  0008B4  D7FE               	bra	u7987
 12201  0008B6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12202  0008B8  D7FC               	bra	u7987
 12203  0008BA  F000               	nop	
 12204  0008BC  0100               	movlb	0	; () banked
 12205  0008BE  2BC3               	incf	actuatorTest@i_1677& (0+255),f,b
 12206  0008C0  D7EF               	goto	l7075
 12207  0008C2                     l7083:
 12208                           
 12209                           ; BSR set to: 0
 12210                           ;Test.c: 341: machine_state = Testing_state;
 12211  0008C2  0E03               	movlw	3
 12212  0008C4  0100               	movlb	0	; () banked
 12213  0008C6  6FFC               	movwf	_machine_state& (0+255),b
 12214                           
 12215                           ; BSR set to: 0
 12216  0008C8  0012               	return		;funcret
 12217  0008CA                     __end_of_actuatorTest:
 12218                           	opt stack 0
 12219                           tblptru	equ	0xFF8
 12220                           tblptrh	equ	0xFF7
 12221                           tblptrl	equ	0xFF6
 12222                           tablat	equ	0xFF5
 12223                           prodh	equ	0xFF4
 12224                           prodl	equ	0xFF3
 12225                           intcon	equ	0xFF2
 12226                           intcon2	equ	0xFF1
 12227                           intcon3	equ	0xFF0
 12228                           postinc0	equ	0xFEE
 12229                           wreg	equ	0xFE8
 12230                           postdec1	equ	0xFE5
 12231                           fsr1l	equ	0xFE1
 12232                           indf2	equ	0xFDF
 12233                           postinc2	equ	0xFDE
 12234                           postdec2	equ	0xFDD
 12235                           fsr2h	equ	0xFDA
 12236                           fsr2l	equ	0xFD9
 12237                           status	equ	0xFD8
 12238                           
 12239 ;; *************** function _ToggleTestA5 *****************
 12240 ;; Defined at:
 12241 ;;		line 490 in file "Test.c"
 12242 ;; Parameters:    Size  Location     Type
 12243 ;;		None
 12244 ;; Auto vars:     Size  Location     Type
 12245 ;;  on              2   44[BANK0 ] int 
 12246 ;; Return value:  Size  Location     Type
 12247 ;;                  1    wreg      void 
 12248 ;; Registers used:
 12249 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12250 ;; Tracked objects:
 12251 ;;		On entry : 0/0
 12252 ;;		On exit  : 0/0
 12253 ;;		Unchanged: 0/0
 12254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12256 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12257 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12258 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12259 ;;Total ram usage:        3 bytes
 12260 ;; Hardware stack levels used:    1
 12261 ;; Hardware stack levels required when called:   10
 12262 ;; This function calls:
 12263 ;;		_lcdInst
 12264 ;;		_printf
 12265 ;; This function is called by:
 12266 ;;		_Test
 12267 ;; This function uses a non-reentrant model
 12268 ;;
 12269                           
 12270                           	psect	text42
 12271  003A30                     __ptext42:
 12272                           	opt stack 0
 12273  003A30                     _ToggleTestA5:
 12274                           	opt stack 19
 12275                           
 12276                           ;Test.c: 491: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12277                           
 12278                           ; BSR set to: 0
 12279                           ;incstack = 0
 12280  003A30  0E01               	movlw	1
 12281  003A32  ECE1  F023         	call	_lcdInst
 12282  003A36  0E68               	movlw	104
 12283  003A38  0100               	movlb	0	; () banked
 12284  003A3A  6FAB               	movwf	??_ToggleTestA5& (0+255),b
 12285  003A3C  0EE4               	movlw	228
 12286  003A3E                     u7997:
 12287  003A3E  2EE8               	decfsz	wreg,f,c
 12288  003A40  D7FE               	bra	u7997
 12289  003A42  2FAB               	decfsz	??_ToggleTestA5& (0+255),f,b
 12290  003A44  D7FC               	bra	u7997
 12291  003A46  F000               	nop	
 12292  003A48  0E80               	movlw	128
 12293  003A4A  ECE1  F023         	call	_lcdInst
 12294                           
 12295                           ;Test.c: 492: printf("D WILL RETURN   ");
 12296  003A4E  0E1B               	movlw	low STR_114
 12297  003A50  0100               	movlb	0	; () banked
 12298  003A52  6F8E               	movwf	printf@f& (0+255),b
 12299  003A54  0EFC               	movlw	high STR_114
 12300  003A56  0100               	movlb	0	; () banked
 12301  003A58  6F8F               	movwf	(printf@f+1)& (0+255),b
 12302  003A5A  ECB8  F008         	call	_printf	;wreg free
 12303                           
 12304                           ;Test.c: 493: lcdInst(0b11000000);;
 12305  003A5E  0EC0               	movlw	192
 12306  003A60  ECE1  F023         	call	_lcdInst
 12307                           
 12308                           ;Test.c: 494: printf("ELSE TOGGLES RA5");
 12309  003A64  0E4E               	movlw	low STR_115
 12310  003A66  0100               	movlb	0	; () banked
 12311  003A68  6F8E               	movwf	printf@f& (0+255),b
 12312  003A6A  0EFC               	movlw	high STR_115
 12313  003A6C  0100               	movlb	0	; () banked
 12314  003A6E  6F8F               	movwf	(printf@f+1)& (0+255),b
 12315  003A70  ECB8  F008         	call	_printf	;wreg free
 12316                           
 12317                           ;Test.c: 495: int on = 0;
 12318  003A74  0E00               	movlw	0
 12319  003A76  0100               	movlb	0	; () banked
 12320  003A78  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 12321  003A7A  0E00               	movlw	0
 12322  003A7C  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 12323  003A7E                     l1214:
 12324  003A7E  A281               	btfss	3969,1,c	;volatile
 12325  003A80  D7FE               	goto	l1214
 12326                           
 12327                           ;Test.c: 500: }
 12328                           ;Test.c: 501: if(PORTB >> 4 == 0b1111){
 12329  003A82  3881               	swapf	3969,w,c	;volatile
 12330  003A84  0B0F               	andlw	15
 12331  003A86  0A0F               	xorlw	15
 12332  003A88  B4D8               	btfsc	status,2,c
 12333  003A8A  0012               	return	
 12334                           
 12335                           ;Test.c: 504: else{
 12336                           ;Test.c: 505: if(on == 0){
 12337                           
 12338                           ;Test.c: 503: }
 12339                           
 12340                           ;Test.c: 502: break;
 12341  003A8C  0100               	movlb	0	; () banked
 12342  003A8E  51AC               	movf	ToggleTestA5@on& (0+255),w,b
 12343  003A90  0100               	movlb	0	; () banked
 12344  003A92  11AD               	iorwf	(ToggleTestA5@on+1)& (0+255),w,b
 12345  003A94  A4D8               	btfss	status,2,c
 12346  003A96  D007               	goto	l7141
 12347                           
 12348                           ; BSR set to: 0
 12349                           ;Test.c: 506: on = 1;
 12350  003A98  0E00               	movlw	0
 12351  003A9A  0100               	movlb	0	; () banked
 12352  003A9C  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 12353  003A9E  0E01               	movlw	1
 12354  003AA0  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 12355                           
 12356                           ; BSR set to: 0
 12357                           ;Test.c: 507: LATAbits.LATA5 = 1;
 12358  003AA2  8A89               	bsf	3977,5,c	;volatile
 12359                           
 12360                           ;Test.c: 508: }
 12361  003AA4  D006               	goto	l1222
 12362  003AA6                     l7141:
 12363                           
 12364                           ; BSR set to: 0
 12365                           ;Test.c: 509: else{
 12366                           ;Test.c: 510: on = 0;
 12367  003AA6  0E00               	movlw	0
 12368  003AA8  0100               	movlb	0	; () banked
 12369  003AAA  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 12370  003AAC  0E00               	movlw	0
 12371  003AAE  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 12372                           
 12373                           ; BSR set to: 0
 12374                           ;Test.c: 511: LATAbits.LATA5 = 0;
 12375  003AB0  9A89               	bcf	3977,5,c	;volatile
 12376  003AB2                     l1222:
 12377  003AB2  A281               	btfss	3969,1,c	;volatile
 12378  003AB4  D7E4               	goto	l1214
 12379  003AB6  D7FD               	goto	l1222
 12380  003AB8                     __end_of_ToggleTestA5:
 12381                           	opt stack 0
 12382                           tblptru	equ	0xFF8
 12383                           tblptrh	equ	0xFF7
 12384                           tblptrl	equ	0xFF6
 12385                           tablat	equ	0xFF5
 12386                           prodh	equ	0xFF4
 12387                           prodl	equ	0xFF3
 12388                           intcon	equ	0xFF2
 12389                           intcon2	equ	0xFF1
 12390                           intcon3	equ	0xFF0
 12391                           postinc0	equ	0xFEE
 12392                           wreg	equ	0xFE8
 12393                           postdec1	equ	0xFE5
 12394                           fsr1l	equ	0xFE1
 12395                           indf2	equ	0xFDF
 12396                           postinc2	equ	0xFDE
 12397                           postdec2	equ	0xFDD
 12398                           fsr2h	equ	0xFDA
 12399                           fsr2l	equ	0xFD9
 12400                           status	equ	0xFD8
 12401                           
 12402 ;; *************** function _PusherTestA5 *****************
 12403 ;; Defined at:
 12404 ;;		line 463 in file "Test.c"
 12405 ;; Parameters:    Size  Location     Type
 12406 ;;		None
 12407 ;; Auto vars:     Size  Location     Type
 12408 ;;		None
 12409 ;; Return value:  Size  Location     Type
 12410 ;;                  1    wreg      void 
 12411 ;; Registers used:
 12412 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12413 ;; Tracked objects:
 12414 ;;		On entry : 0/0
 12415 ;;		On exit  : 0/0
 12416 ;;		Unchanged: 0/0
 12417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12420 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12421 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12422 ;;Total ram usage:        2 bytes
 12423 ;; Hardware stack levels used:    1
 12424 ;; Hardware stack levels required when called:   10
 12425 ;; This function calls:
 12426 ;;		_lcdInst
 12427 ;;		_printf
 12428 ;; This function is called by:
 12429 ;;		_Test
 12430 ;; This function uses a non-reentrant model
 12431 ;;
 12432                           
 12433                           	psect	text43
 12434  003F6A                     __ptext43:
 12435                           	opt stack 0
 12436  003F6A                     _PusherTestA5:
 12437                           	opt stack 19
 12438                           
 12439                           ;Test.c: 464: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12440                           
 12441                           ;incstack = 0
 12442  003F6A  0E01               	movlw	1
 12443  003F6C  ECE1  F023         	call	_lcdInst
 12444  003F70  0E68               	movlw	104
 12445  003F72  0100               	movlb	0	; () banked
 12446  003F74  6FAB               	movwf	??_PusherTestA5& (0+255),b
 12447  003F76  0EE4               	movlw	228
 12448  003F78                     u8007:
 12449  003F78  2EE8               	decfsz	wreg,f,c
 12450  003F7A  D7FE               	bra	u8007
 12451  003F7C  2FAB               	decfsz	??_PusherTestA5& (0+255),f,b
 12452  003F7E  D7FC               	bra	u8007
 12453  003F80  F000               	nop	
 12454  003F82  0E80               	movlw	128
 12455  003F84  ECE1  F023         	call	_lcdInst
 12456                           
 12457                           ;Test.c: 465: printf("PUSHER TST");
 12458  003F88  0E71               	movlw	low STR_113
 12459  003F8A  0100               	movlb	0	; () banked
 12460  003F8C  6F8E               	movwf	printf@f& (0+255),b
 12461  003F8E  0EFF               	movlw	high STR_113
 12462  003F90  0100               	movlb	0	; () banked
 12463  003F92  6F8F               	movwf	(printf@f+1)& (0+255),b
 12464  003F94  ECB8  F008         	call	_printf	;wreg free
 12465  003F98                     l1202:
 12466  003F98  A281               	btfss	3969,1,c	;volatile
 12467  003F9A  D7FE               	goto	l1202
 12468                           
 12469                           ;Test.c: 471: }
 12470                           ;Test.c: 482: LATAbits.LATA4 = 1;
 12471  003F9C  8889               	bsf	3977,4,c	;volatile
 12472                           
 12473                           ;Test.c: 483: _delay((unsigned long)((100)*(32000000/4000.0)));
 12474  003F9E  0E05               	movlw	5
 12475  003FA0  0100               	movlb	0	; () banked
 12476  003FA2  6FAC               	movwf	(??_PusherTestA5+1)& (0+255),b
 12477  003FA4  0E0F               	movlw	15
 12478  003FA6  0100               	movlb	0	; () banked
 12479  003FA8  6FAB               	movwf	??_PusherTestA5& (0+255),b
 12480  003FAA  0EF1               	movlw	241
 12481  003FAC                     u8017:
 12482  003FAC  2EE8               	decfsz	wreg,f,c
 12483  003FAE  D7FE               	bra	u8017
 12484  003FB0  2FAB               	decfsz	??_PusherTestA5& (0+255),f,b
 12485  003FB2  D7FC               	bra	u8017
 12486  003FB4  2FAC               	decfsz	(??_PusherTestA5+1)& (0+255),f,b
 12487  003FB6  D7FA               	bra	u8017
 12488                           
 12489                           ;Test.c: 484: LATAbits.LATA4 = 0;
 12490  003FB8  9889               	bcf	3977,4,c	;volatile
 12491  003FBA                     l1205:
 12492  003FBA  A281               	btfss	3969,1,c	;volatile
 12493  003FBC  D7ED               	goto	l1202
 12494  003FBE  D7FD               	goto	l1205
 12495  003FC0                     __end_of_PusherTestA5:
 12496                           	opt stack 0
 12497                           tblptru	equ	0xFF8
 12498                           tblptrh	equ	0xFF7
 12499                           tblptrl	equ	0xFF6
 12500                           tablat	equ	0xFF5
 12501                           prodh	equ	0xFF4
 12502                           prodl	equ	0xFF3
 12503                           intcon	equ	0xFF2
 12504                           intcon2	equ	0xFF1
 12505                           intcon3	equ	0xFF0
 12506                           postinc0	equ	0xFEE
 12507                           wreg	equ	0xFE8
 12508                           postdec1	equ	0xFE5
 12509                           fsr1l	equ	0xFE1
 12510                           indf2	equ	0xFDF
 12511                           postinc2	equ	0xFDE
 12512                           postdec2	equ	0xFDD
 12513                           fsr2h	equ	0xFDA
 12514                           fsr2l	equ	0xFD9
 12515                           status	equ	0xFD8
 12516                           
 12517 ;; *************** function _PortTests *****************
 12518 ;; Defined at:
 12519 ;;		line 395 in file "Test.c"
 12520 ;; Parameters:    Size  Location     Type
 12521 ;;		None
 12522 ;; Auto vars:     Size  Location     Type
 12523 ;;		None
 12524 ;; Return value:  Size  Location     Type
 12525 ;;                  1    wreg      void 
 12526 ;; Registers used:
 12527 ;;		wreg, status,2, status,0
 12528 ;; Tracked objects:
 12529 ;;		On entry : 0/0
 12530 ;;		On exit  : 0/0
 12531 ;;		Unchanged: 0/0
 12532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12533 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12534 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12535 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12536 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12537 ;;Total ram usage:        2 bytes
 12538 ;; Hardware stack levels used:    1
 12539 ;; Hardware stack levels required when called:    7
 12540 ;; This function calls:
 12541 ;;		Nothing
 12542 ;; This function is called by:
 12543 ;;		_Test
 12544 ;; This function uses a non-reentrant model
 12545 ;;
 12546                           
 12547                           	psect	text44
 12548  003B3E                     __ptext44:
 12549                           	opt stack 0
 12550  003B3E                     _PortTests:
 12551                           	opt stack 22
 12552  003B3E                     l1165:
 12553  003B3E  A281               	btfss	3969,1,c	;volatile
 12554  003B40  D7FE               	goto	l1165
 12555                           
 12556                           ;Test.c: 399: var = PORTB >> 4;
 12557  003B42  CF81 F080          	movff	3969,??_PortTests	;volatile
 12558  003B46  0100               	movlb	0	; () banked
 12559  003B48  3B80               	swapf	??_PortTests& (0+255),f,b
 12560  003B4A  0E0F               	movlw	15
 12561  003B4C  1780               	andwf	??_PortTests& (0+255),f,b
 12562  003B4E  0100               	movlb	0	; () banked
 12563  003B50  5180               	movf	??_PortTests& (0+255),w,b
 12564  003B52  0100               	movlb	0	; () banked
 12565  003B54  6FFA               	movwf	_var& (0+255),b
 12566  003B56  6BFB               	clrf	(_var+1)& (0+255),b
 12567                           
 12568                           ;Test.c: 400: switch(var){
 12569  003B58  D00C               	goto	l7161
 12570  003B5A                     l1169:
 12571                           
 12572                           ; BSR set to: 0
 12573                           ;Test.c: 402: LATEbits.LATE0 = 1;
 12574  003B5A  808D               	bsf	3981,0,c	;volatile
 12575                           
 12576                           ;Test.c: 403: break;
 12577  003B5C  D027               	goto	l1177
 12578  003B5E                     l1171:
 12579                           
 12580                           ; BSR set to: 0
 12581                           ;Test.c: 405: LATEbits.LATE1 = 1;
 12582  003B5E  828D               	bsf	3981,1,c	;volatile
 12583                           
 12584                           ;Test.c: 406: break;
 12585  003B60  D025               	goto	l1177
 12586  003B62                     l1172:
 12587                           
 12588                           ; BSR set to: 0
 12589                           ;Test.c: 408: LATDbits.LATD0 = 1;
 12590  003B62  808C               	bsf	3980,0,c	;volatile
 12591                           
 12592                           ;Test.c: 409: break;
 12593  003B64  D023               	goto	l1177
 12594  003B66                     l1173:
 12595                           
 12596                           ; BSR set to: 0
 12597                           ;Test.c: 411: LATAbits.LATA3 = 1;
 12598  003B66  8689               	bsf	3977,3,c	;volatile
 12599                           
 12600                           ;Test.c: 412: break;
 12601  003B68  D021               	goto	l1177
 12602  003B6A                     l1174:
 12603                           
 12604                           ; BSR set to: 0
 12605                           ;Test.c: 414: LATAbits.LATA4 = 1;
 12606  003B6A  8889               	bsf	3977,4,c	;volatile
 12607                           
 12608                           ;Test.c: 415: break;
 12609  003B6C  D01F               	goto	l1177
 12610  003B6E                     l1175:
 12611                           
 12612                           ; BSR set to: 0
 12613                           ;Test.c: 417: LATAbits.LATA5 = 1;
 12614  003B6E  8A89               	bsf	3977,5,c	;volatile
 12615                           
 12616                           ; BSR set to: 0
 12617                           ;Test.c: 421: }
 12618                           
 12619                           ; BSR set to: 0
 12620                           ;Test.c: 420: break;
 12621                           
 12622                           ;Test.c: 419: default:
 12623                           
 12624                           ;Test.c: 418: break;
 12625  003B70  D01D               	goto	l1177
 12626  003B72                     l7161:
 12627                           
 12628                           ; BSR set to: 0
 12629  003B72  C0FA  F080         	movff	_var,??_PortTests
 12630  003B76  C0FB  F081         	movff	_var+1,??_PortTests+1
 12631                           
 12632                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12633                           ; Switch size 1, requested type "space"
 12634                           ; Number of cases is 1, Range of values is 0 to 0
 12635                           ; switch strategies available:
 12636                           ; Name         Instructions Cycles
 12637                           ; simple_byte            4     3 (average)
 12638                           ;	Chosen strategy is simple_byte
 12639  003B7A  0100               	movlb	0	; () banked
 12640  003B7C  5181               	movf	(??_PortTests+1)& (0+255),w,b
 12641  003B7E  0A00               	xorlw	0	; case 0
 12642  003B80  A4D8               	btfss	status,2,c
 12643  003B82  D014               	goto	l1177
 12644                           
 12645                           ; BSR set to: 0
 12646                           ; Switch size 1, requested type "space"
 12647                           ; Number of cases is 6, Range of values is 0 to 5
 12648                           ; switch strategies available:
 12649                           ; Name         Instructions Cycles
 12650                           ; simple_byte           19    10 (average)
 12651                           ;	Chosen strategy is simple_byte
 12652  003B84  0100               	movlb	0	; () banked
 12653  003B86  5180               	movf	??_PortTests& (0+255),w,b
 12654  003B88  0A00               	xorlw	0	; case 0
 12655  003B8A  B4D8               	btfsc	status,2,c
 12656  003B8C  D7E6               	goto	l1169
 12657  003B8E  0A01               	xorlw	1	; case 1
 12658  003B90  B4D8               	btfsc	status,2,c
 12659  003B92  D7E5               	goto	l1171
 12660  003B94  0A03               	xorlw	3	; case 2
 12661  003B96  B4D8               	btfsc	status,2,c
 12662  003B98  D7E4               	goto	l1172
 12663  003B9A  0A01               	xorlw	1	; case 3
 12664  003B9C  B4D8               	btfsc	status,2,c
 12665  003B9E  D7E3               	goto	l1173
 12666  003BA0  0A07               	xorlw	7	; case 4
 12667  003BA2  B4D8               	btfsc	status,2,c
 12668  003BA4  D7E2               	goto	l1174
 12669  003BA6  0A01               	xorlw	1	; case 5
 12670  003BA8  B4D8               	btfsc	status,2,c
 12671  003BAA  D7E1               	goto	l1175
 12672  003BAC                     l1177:
 12673  003BAC  B281               	btfsc	3969,1,c	;volatile
 12674  003BAE  D7FE               	goto	l1177
 12675                           
 12676                           ;Test.c: 423: __nop();
 12677  003BB0  F000               	nop	
 12678                           
 12679                           ;Test.c: 424: __nop();
 12680  003BB2  F000               	nop	
 12681                           
 12682                           ;Test.c: 425: LATA = 0x00;
 12683  003BB4  0E00               	movlw	0
 12684  003BB6  6E89               	movwf	3977,c	;volatile
 12685                           
 12686                           ;Test.c: 426: LATE = 0x00;
 12687  003BB8  0E00               	movlw	0
 12688  003BBA  6E8D               	movwf	3981,c	;volatile
 12689                           
 12690                           ;Test.c: 427: LATD = 0x00; }
 12691  003BBC  0E00               	movlw	0
 12692  003BBE  6E8C               	movwf	3980,c	;volatile
 12693  003BC0  D7BE               	goto	l1165
 12694  003BC2                     __end_of_PortTests:
 12695                           	opt stack 0
 12696                           tblptru	equ	0xFF8
 12697                           tblptrh	equ	0xFF7
 12698                           tblptrl	equ	0xFF6
 12699                           tablat	equ	0xFF5
 12700                           prodh	equ	0xFF4
 12701                           prodl	equ	0xFF3
 12702                           intcon	equ	0xFF2
 12703                           intcon2	equ	0xFF1
 12704                           intcon3	equ	0xFF0
 12705                           postinc0	equ	0xFEE
 12706                           wreg	equ	0xFE8
 12707                           postdec1	equ	0xFE5
 12708                           fsr1l	equ	0xFE1
 12709                           indf2	equ	0xFDF
 12710                           postinc2	equ	0xFDE
 12711                           postdec2	equ	0xFDD
 12712                           fsr2h	equ	0xFDA
 12713                           fsr2l	equ	0xFD9
 12714                           status	equ	0xFD8
 12715                           
 12716 ;; *************** function _PortTestA5 *****************
 12717 ;; Defined at:
 12718 ;;		line 430 in file "Test.c"
 12719 ;; Parameters:    Size  Location     Type
 12720 ;;		None
 12721 ;; Auto vars:     Size  Location     Type
 12722 ;;		None
 12723 ;; Return value:  Size  Location     Type
 12724 ;;                  1    wreg      void 
 12725 ;; Registers used:
 12726 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12727 ;; Tracked objects:
 12728 ;;		On entry : 0/0
 12729 ;;		On exit  : 0/0
 12730 ;;		Unchanged: 0/0
 12731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12734 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12735 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12736 ;;Total ram usage:        1 bytes
 12737 ;; Hardware stack levels used:    1
 12738 ;; Hardware stack levels required when called:   10
 12739 ;; This function calls:
 12740 ;;		_lcdInst
 12741 ;;		_printf
 12742 ;; This function is called by:
 12743 ;;		_Test
 12744 ;; This function uses a non-reentrant model
 12745 ;;
 12746                           
 12747                           	psect	text45
 12748  00390E                     __ptext45:
 12749                           	opt stack 0
 12750  00390E                     _PortTestA5:
 12751                           	opt stack 19
 12752                           
 12753                           ;Test.c: 431: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12754                           
 12755                           ;incstack = 0
 12756  00390E  0E01               	movlw	1
 12757  003910  ECE1  F023         	call	_lcdInst
 12758  003914  0E68               	movlw	104
 12759  003916  0100               	movlb	0	; () banked
 12760  003918  6FAB               	movwf	??_PortTestA5& (0+255),b
 12761  00391A  0EE4               	movlw	228
 12762  00391C                     u8027:
 12763  00391C  2EE8               	decfsz	wreg,f,c
 12764  00391E  D7FE               	bra	u8027
 12765  003920  2FAB               	decfsz	??_PortTestA5& (0+255),f,b
 12766  003922  D7FC               	bra	u8027
 12767  003924  F000               	nop	
 12768  003926  0E80               	movlw	128
 12769  003928  ECE1  F023         	call	_lcdInst
 12770                           
 12771                           ;Test.c: 432: printf("D WILL RETURN    ");
 12772  00392C  0E6D               	movlw	low STR_111
 12773  00392E  0100               	movlb	0	; () banked
 12774  003930  6F8E               	movwf	printf@f& (0+255),b
 12775  003932  0EFB               	movlw	high STR_111
 12776  003934  0100               	movlb	0	; () banked
 12777  003936  6F8F               	movwf	(printf@f+1)& (0+255),b
 12778  003938  ECB8  F008         	call	_printf	;wreg free
 12779                           
 12780                           ;Test.c: 433: lcdInst(0b11000000);;
 12781  00393C  0EC0               	movlw	192
 12782  00393E  ECE1  F023         	call	_lcdInst
 12783                           
 12784                           ;Test.c: 434: printf("OTHER SETS RA5   ");
 12785  003942  0E7F               	movlw	low STR_112
 12786  003944  0100               	movlb	0	; () banked
 12787  003946  6F8E               	movwf	printf@f& (0+255),b
 12788  003948  0EFB               	movlw	high STR_112
 12789  00394A  0100               	movlb	0	; () banked
 12790  00394C  6F8F               	movwf	(printf@f+1)& (0+255),b
 12791  00394E  ECB8  F008         	call	_printf	;wreg free
 12792  003952                     l1186:
 12793  003952  A281               	btfss	3969,1,c	;volatile
 12794  003954  D7FE               	goto	l1186
 12795                           
 12796                           ;Test.c: 439: }
 12797                           ;Test.c: 440: if(PORTB >> 4 == 0b1111){
 12798  003956  3881               	swapf	3969,w,c	;volatile
 12799  003958  0B0F               	andlw	15
 12800  00395A  0A0F               	xorlw	15
 12801  00395C  B4D8               	btfsc	status,2,c
 12802  00395E  0012               	return	
 12803                           
 12804                           ;Test.c: 443: else{
 12805                           ;Test.c: 444: LATAbits.LATA5 = 1;
 12806                           
 12807                           ;Test.c: 442: }
 12808                           
 12809                           ;Test.c: 441: break;
 12810  003960  8A89               	bsf	3977,5,c	;volatile
 12811  003962                     l1192:
 12812  003962  B281               	btfsc	3969,1,c	;volatile
 12813  003964  D7FE               	goto	l1192
 12814                           
 12815                           ;Test.c: 447: }
 12816                           ;Test.c: 450: for(i=0;i<10000;i++)
 12817  003966  0E00               	movlw	0
 12818  003968  0100               	movlb	0	; () banked
 12819  00396A  6FE5               	movwf	(_i+1)& (0+255),b
 12820  00396C  0E00               	movlw	0
 12821  00396E  6FE4               	movwf	_i& (0+255),b
 12822  003970                     l7105:
 12823                           
 12824                           ; BSR set to: 0
 12825  003970  0100               	movlb	0	; () banked
 12826  003972  BFE5               	btfsc	(_i+1)& (0+255),7,b
 12827  003974  D008               	goto	l1195
 12828  003976  0E10               	movlw	16
 12829  003978  0100               	movlb	0	; () banked
 12830  00397A  5DE4               	subwf	_i& (0+255),w,b
 12831  00397C  0E27               	movlw	39
 12832  00397E  0100               	movlb	0	; () banked
 12833  003980  59E5               	subwfb	(_i+1)& (0+255),w,b
 12834  003982  B0D8               	btfsc	status,0,c
 12835  003984  D00D               	goto	l1196
 12836  003986                     l1195:
 12837                           
 12838                           ; BSR set to: 0
 12839                           ;Test.c: 451: {
 12840                           ;Test.c: 452: LATAbits.LATA5 = 1;
 12841  003986  8A89               	bsf	3977,5,c	;volatile
 12842                           
 12843                           ; BSR set to: 0
 12844                           ;Test.c: 453: _delay((unsigned long)((10)*(32000000/4000000.0)));
 12845  003988  0E1A               	movlw	26
 12846  00398A                     u8037:
 12847  00398A  2EE8               	decfsz	wreg,f,c
 12848  00398C  D7FE               	bra	u8037
 12849  00398E  D000               	nop2	
 12850                           
 12851                           ;Test.c: 454: LATAbits.LATA5 = 0;
 12852  003990  9A89               	bcf	3977,5,c	;volatile
 12853                           
 12854                           ;Test.c: 455: _delay((unsigned long)((90)*(32000000/4000000.0)));
 12855  003992  0EF0               	movlw	240
 12856  003994                     u8047:
 12857  003994  2EE8               	decfsz	wreg,f,c
 12858  003996  D7FE               	bra	u8047
 12859  003998  0100               	movlb	0	; () banked
 12860  00399A  4BE4               	infsnz	_i& (0+255),f,b
 12861  00399C  2BE5               	incf	(_i+1)& (0+255),f,b
 12862  00399E  D7E8               	goto	l7105
 12863  0039A0                     l1196:
 12864                           
 12865                           ; BSR set to: 0
 12866                           ;Test.c: 456: }
 12867                           ;Test.c: 458: LATAbits.LATA5 = 0;
 12868  0039A0  9A89               	bcf	3977,5,c	;volatile
 12869                           
 12870                           ; BSR set to: 0
 12871                           
 12872                           ; BSR set to: 0
 12873  0039A2  D7D7               	goto	l1186
 12874  0039A4                     __end_of_PortTestA5:
 12875                           	opt stack 0
 12876                           tblptru	equ	0xFF8
 12877                           tblptrh	equ	0xFF7
 12878                           tblptrl	equ	0xFF6
 12879                           tablat	equ	0xFF5
 12880                           prodh	equ	0xFF4
 12881                           prodl	equ	0xFF3
 12882                           intcon	equ	0xFF2
 12883                           intcon2	equ	0xFF1
 12884                           intcon3	equ	0xFF0
 12885                           postinc0	equ	0xFEE
 12886                           wreg	equ	0xFE8
 12887                           postdec1	equ	0xFE5
 12888                           fsr1l	equ	0xFE1
 12889                           indf2	equ	0xFDF
 12890                           postinc2	equ	0xFDE
 12891                           postdec2	equ	0xFDD
 12892                           fsr2h	equ	0xFDA
 12893                           fsr2l	equ	0xFD9
 12894                           status	equ	0xFD8
 12895                           
 12896 ;; *************** function _EEPROMTest *****************
 12897 ;; Defined at:
 12898 ;;		line 518 in file "Test.c"
 12899 ;; Parameters:    Size  Location     Type
 12900 ;;		None
 12901 ;; Auto vars:     Size  Location     Type
 12902 ;;		None
 12903 ;; Return value:  Size  Location     Type
 12904 ;;                  1    wreg      void 
 12905 ;; Registers used:
 12906 ;;		None
 12907 ;; Tracked objects:
 12908 ;;		On entry : 0/0
 12909 ;;		On exit  : 0/0
 12910 ;;		Unchanged: 0/0
 12911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12915 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12916 ;;Total ram usage:        0 bytes
 12917 ;; Hardware stack levels used:    1
 12918 ;; Hardware stack levels required when called:    7
 12919 ;; This function calls:
 12920 ;;		Nothing
 12921 ;; This function is called by:
 12922 ;;		_Test
 12923 ;; This function uses a non-reentrant model
 12924 ;;
 12925                           
 12926                           	psect	text46
 12927  004826                     __ptext46:
 12928                           	opt stack 0
 12929  004826                     _EEPROMTest:
 12930                           	opt stack 22
 12931                           
 12932                           ;incstack = 0
 12933  004826  0012               	return		;funcret
 12934  004828                     __end_of_EEPROMTest:
 12935                           	opt stack 0
 12936                           tblptru	equ	0xFF8
 12937                           tblptrh	equ	0xFF7
 12938                           tblptrl	equ	0xFF6
 12939                           tablat	equ	0xFF5
 12940                           prodh	equ	0xFF4
 12941                           prodl	equ	0xFF3
 12942                           intcon	equ	0xFF2
 12943                           intcon2	equ	0xFF1
 12944                           intcon3	equ	0xFF0
 12945                           postinc0	equ	0xFEE
 12946                           wreg	equ	0xFE8
 12947                           postdec1	equ	0xFE5
 12948                           fsr1l	equ	0xFE1
 12949                           indf2	equ	0xFDF
 12950                           postinc2	equ	0xFDE
 12951                           postdec2	equ	0xFDD
 12952                           fsr2h	equ	0xFDA
 12953                           fsr2l	equ	0xFD9
 12954                           status	equ	0xFD8
 12955                           
 12956 ;; *************** function _BothServos *****************
 12957 ;; Defined at:
 12958 ;;		line 344 in file "Test.c"
 12959 ;; Parameters:    Size  Location     Type
 12960 ;;		None
 12961 ;; Auto vars:     Size  Location     Type
 12962 ;;		None
 12963 ;; Return value:  Size  Location     Type
 12964 ;;                  1    wreg      void 
 12965 ;; Registers used:
 12966 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12967 ;; Tracked objects:
 12968 ;;		On entry : 0/0
 12969 ;;		On exit  : 0/0
 12970 ;;		Unchanged: 0/0
 12971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12974 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12975 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12976 ;;Total ram usage:        2 bytes
 12977 ;; Hardware stack levels used:    1
 12978 ;; Hardware stack levels required when called:   10
 12979 ;; This function calls:
 12980 ;;		_initServos
 12981 ;;		_lcdInst
 12982 ;;		_printf
 12983 ;;		_updateServoPosition
 12984 ;; This function is called by:
 12985 ;;		_Test
 12986 ;; This function uses a non-reentrant model
 12987 ;;
 12988                           
 12989                           	psect	text47
 12990  001916                     __ptext47:
 12991                           	opt stack 0
 12992  001916                     _BothServos:
 12993                           	opt stack 19
 12994                           
 12995                           ;Test.c: 345: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12996                           
 12997                           ;incstack = 0
 12998  001916  0E01               	movlw	1
 12999  001918  ECE1  F023         	call	_lcdInst
 13000  00191C  0E68               	movlw	104
 13001  00191E  0100               	movlb	0	; () banked
 13002  001920  6FAB               	movwf	??_BothServos& (0+255),b
 13003  001922  0EE4               	movlw	228
 13004  001924                     u8057:
 13005  001924  2EE8               	decfsz	wreg,f,c
 13006  001926  D7FE               	bra	u8057
 13007  001928  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13008  00192A  D7FC               	bra	u8057
 13009  00192C  F000               	nop	
 13010  00192E  0E80               	movlw	128
 13011  001930  ECE1  F023         	call	_lcdInst
 13012                           
 13013                           ;Test.c: 346: printf("TST: BOTH SERVOS");
 13014  001934  0EB4               	movlw	low STR_110
 13015  001936  0100               	movlb	0	; () banked
 13016  001938  6F8E               	movwf	printf@f& (0+255),b
 13017  00193A  0EFC               	movlw	high STR_110
 13018  00193C  0100               	movlb	0	; () banked
 13019  00193E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13020  001940  ECB8  F008         	call	_printf	;wreg free
 13021                           
 13022                           ;Test.c: 347: TMR1ON = 1;
 13023  001944  80CD               	bsf	4045,0,c	;volatile
 13024                           
 13025                           ;Test.c: 348: TMR3ON = 1;
 13026  001946  80B1               	bsf	4017,0,c	;volatile
 13027                           
 13028                           ;Test.c: 349: machine_state = Sorting_state;
 13029  001948  0E01               	movlw	1
 13030  00194A  0100               	movlb	0	; () banked
 13031  00194C  6FFC               	movwf	_machine_state& (0+255),b
 13032                           
 13033                           ; BSR set to: 0
 13034                           ;Test.c: 350: was_low_1 = 0;
 13035  00194E  0E00               	movlw	0
 13036  001950  6E7A               	movwf	_was_low_1+1,c	;volatile
 13037  001952  0E00               	movlw	0
 13038  001954  6E79               	movwf	_was_low_1,c	;volatile
 13039                           
 13040                           ; BSR set to: 0
 13041                           ;Test.c: 351: was_low_1 = 0;
 13042  001956  0E00               	movlw	0
 13043  001958  6E7A               	movwf	_was_low_1+1,c	;volatile
 13044  00195A  0E00               	movlw	0
 13045  00195C  6E79               	movwf	_was_low_1,c	;volatile
 13046                           
 13047                           ; BSR set to: 0
 13048                           ;Test.c: 357: initServos();
 13049  00195E  EC88  F01F         	call	_initServos	;wreg free
 13050                           
 13051                           ;Test.c: 358: _delay((unsigned long)((1500)*(32000000/4000.0)));
 13052  001962  0E3D               	movlw	61
 13053  001964  0100               	movlb	0	; () banked
 13054  001966  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13055  001968  0EE1               	movlw	225
 13056  00196A  0100               	movlb	0	; () banked
 13057  00196C  6FAB               	movwf	??_BothServos& (0+255),b
 13058  00196E  0E3F               	movlw	63
 13059  001970                     u8067:
 13060  001970  2EE8               	decfsz	wreg,f,c
 13061  001972  D7FE               	bra	u8067
 13062  001974  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13063  001976  D7FC               	bra	u8067
 13064  001978  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13065  00197A  D7FA               	bra	u8067
 13066  00197C  D000               	nop2	
 13067                           
 13068                           ;Test.c: 359: updateServoPosition(500, 1);
 13069  00197E  0E01               	movlw	1
 13070  001980  0100               	movlb	0	; () banked
 13071  001982  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13072  001984  0EF4               	movlw	244
 13073  001986  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13074  001988  0E00               	movlw	0
 13075  00198A  0100               	movlb	0	; () banked
 13076  00198C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13077  00198E  0E01               	movlw	1
 13078  001990  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13079  001992  EC1D  F01E         	call	_updateServoPosition	;wreg free
 13080                           
 13081                           ;Test.c: 360: _delay((unsigned long)((750)*(32000000/4000.0)));
 13082  001996  0E1F               	movlw	31
 13083  001998  0100               	movlb	0	; () banked
 13084  00199A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13085  00199C  0E71               	movlw	113
 13086  00199E  0100               	movlb	0	; () banked
 13087  0019A0  6FAB               	movwf	??_BothServos& (0+255),b
 13088  0019A2  0E1E               	movlw	30
 13089  0019A4                     u8077:
 13090  0019A4  2EE8               	decfsz	wreg,f,c
 13091  0019A6  D7FE               	bra	u8077
 13092  0019A8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13093  0019AA  D7FC               	bra	u8077
 13094  0019AC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13095  0019AE  D7FA               	bra	u8077
 13096  0019B0  F000               	nop	
 13097                           
 13098                           ;Test.c: 361: updateServoPosition(1350, 3);
 13099  0019B2  0E05               	movlw	5
 13100  0019B4  0100               	movlb	0	; () banked
 13101  0019B6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13102  0019B8  0E46               	movlw	70
 13103  0019BA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13104  0019BC  0E00               	movlw	0
 13105  0019BE  0100               	movlb	0	; () banked
 13106  0019C0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13107  0019C2  0E03               	movlw	3
 13108  0019C4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13109  0019C6  EC1D  F01E         	call	_updateServoPosition	;wreg free
 13110                           
 13111                           ;Test.c: 362: _delay((unsigned long)((2000)*(32000000/4000.0)));
 13112  0019CA  0E52               	movlw	82
 13113  0019CC  0100               	movlb	0	; () banked
 13114  0019CE  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13115  0019D0  0E2B               	movlw	43
 13116  0019D2  0100               	movlb	0	; () banked
 13117  0019D4  6FAB               	movwf	??_BothServos& (0+255),b
 13118  0019D6  0E00               	movlw	0
 13119  0019D8                     u8087:
 13120  0019D8  2EE8               	decfsz	wreg,f,c
 13121  0019DA  D7FE               	bra	u8087
 13122  0019DC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13123  0019DE  D7FC               	bra	u8087
 13124  0019E0  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13125  0019E2  D7FA               	bra	u8087
 13126  0019E4  F000               	nop	
 13127                           
 13128                           ;Test.c: 363: updateServoPosition(1150, 3);
 13129  0019E6  0E04               	movlw	4
 13130  0019E8  0100               	movlb	0	; () banked
 13131  0019EA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13132  0019EC  0E7E               	movlw	126
 13133  0019EE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13134  0019F0  0E00               	movlw	0
 13135  0019F2  0100               	movlb	0	; () banked
 13136  0019F4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13137  0019F6  0E03               	movlw	3
 13138  0019F8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13139  0019FA  EC1D  F01E         	call	_updateServoPosition	;wreg free
 13140                           
 13141                           ;Test.c: 364: _delay((unsigned long)((750)*(32000000/4000.0)));
 13142  0019FE  0E1F               	movlw	31
 13143  001A00  0100               	movlb	0	; () banked
 13144  001A02  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13145  001A04  0E71               	movlw	113
 13146  001A06  0100               	movlb	0	; () banked
 13147  001A08  6FAB               	movwf	??_BothServos& (0+255),b
 13148  001A0A  0E1E               	movlw	30
 13149  001A0C                     u8097:
 13150  001A0C  2EE8               	decfsz	wreg,f,c
 13151  001A0E  D7FE               	bra	u8097
 13152  001A10  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13153  001A12  D7FC               	bra	u8097
 13154  001A14  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13155  001A16  D7FA               	bra	u8097
 13156  001A18  F000               	nop	
 13157                           
 13158                           ;Test.c: 366: updateServoPosition(750, 1);
 13159  001A1A  0E02               	movlw	2
 13160  001A1C  0100               	movlb	0	; () banked
 13161  001A1E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13162  001A20  0EEE               	movlw	238
 13163  001A22  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13164  001A24  0E00               	movlw	0
 13165  001A26  0100               	movlb	0	; () banked
 13166  001A28  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13167  001A2A  0E01               	movlw	1
 13168  001A2C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13169  001A2E  EC1D  F01E         	call	_updateServoPosition	;wreg free
 13170                           
 13171                           ;Test.c: 367: _delay((unsigned long)((750)*(32000000/4000.0)));
 13172  001A32  0E1F               	movlw	31
 13173  001A34  0100               	movlb	0	; () banked
 13174  001A36  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13175  001A38  0E71               	movlw	113
 13176  001A3A  0100               	movlb	0	; () banked
 13177  001A3C  6FAB               	movwf	??_BothServos& (0+255),b
 13178  001A3E  0E1E               	movlw	30
 13179  001A40                     u8107:
 13180  001A40  2EE8               	decfsz	wreg,f,c
 13181  001A42  D7FE               	bra	u8107
 13182  001A44  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13183  001A46  D7FC               	bra	u8107
 13184  001A48  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13185  001A4A  D7FA               	bra	u8107
 13186  001A4C  F000               	nop	
 13187                           
 13188                           ;Test.c: 368: updateServoPosition(1350, 3);
 13189  001A4E  0E05               	movlw	5
 13190  001A50  0100               	movlb	0	; () banked
 13191  001A52  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13192  001A54  0E46               	movlw	70
 13193  001A56  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13194  001A58  0E00               	movlw	0
 13195  001A5A  0100               	movlb	0	; () banked
 13196  001A5C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13197  001A5E  0E03               	movlw	3
 13198  001A60  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13199  001A62  EC1D  F01E         	call	_updateServoPosition	;wreg free
 13200                           
 13201                           ;Test.c: 369: _delay((unsigned long)((2000)*(32000000/4000.0)));
 13202  001A66  0E52               	movlw	82
 13203  001A68  0100               	movlb	0	; () banked
 13204  001A6A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13205  001A6C  0E2B               	movlw	43
 13206  001A6E  0100               	movlb	0	; () banked
 13207  001A70  6FAB               	movwf	??_BothServos& (0+255),b
 13208  001A72  0E00               	movlw	0
 13209  001A74                     u8117:
 13210  001A74  2EE8               	decfsz	wreg,f,c
 13211  001A76  D7FE               	bra	u8117
 13212  001A78  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13213  001A7A  D7FC               	bra	u8117
 13214  001A7C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13215  001A7E  D7FA               	bra	u8117
 13216  001A80  F000               	nop	
 13217                           
 13218                           ;Test.c: 370: updateServoPosition(1150, 3);
 13219  001A82  0E04               	movlw	4
 13220  001A84  0100               	movlb	0	; () banked
 13221  001A86  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13222  001A88  0E7E               	movlw	126
 13223  001A8A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13224  001A8C  0E00               	movlw	0
 13225  001A8E  0100               	movlb	0	; () banked
 13226  001A90  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13227  001A92  0E03               	movlw	3
 13228  001A94  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13229  001A96  EC1D  F01E         	call	_updateServoPosition	;wreg free
 13230                           
 13231                           ;Test.c: 371: _delay((unsigned long)((750)*(32000000/4000.0)));
 13232  001A9A  0E1F               	movlw	31
 13233  001A9C  0100               	movlb	0	; () banked
 13234  001A9E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13235  001AA0  0E71               	movlw	113
 13236  001AA2  0100               	movlb	0	; () banked
 13237  001AA4  6FAB               	movwf	??_BothServos& (0+255),b
 13238  001AA6  0E1E               	movlw	30
 13239  001AA8                     u8127:
 13240  001AA8  2EE8               	decfsz	wreg,f,c
 13241  001AAA  D7FE               	bra	u8127
 13242  001AAC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13243  001AAE  D7FC               	bra	u8127
 13244  001AB0  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13245  001AB2  D7FA               	bra	u8127
 13246  001AB4  F000               	nop	
 13247                           
 13248                           ;Test.c: 373: updateServoPosition(1200, 1);
 13249  001AB6  0E04               	movlw	4
 13250  001AB8  0100               	movlb	0	; () banked
 13251  001ABA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13252  001ABC  0EB0               	movlw	176
 13253  001ABE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13254  001AC0  0E00               	movlw	0
 13255  001AC2  0100               	movlb	0	; () banked
 13256  001AC4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13257  001AC6  0E01               	movlw	1
 13258  001AC8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13259  001ACA  EC1D  F01E         	call	_updateServoPosition	;wreg free
 13260                           
 13261                           ;Test.c: 374: _delay((unsigned long)((1500)*(32000000/4000.0)));
 13262  001ACE  0E3D               	movlw	61
 13263  001AD0  0100               	movlb	0	; () banked
 13264  001AD2  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13265  001AD4  0EE1               	movlw	225
 13266  001AD6  0100               	movlb	0	; () banked
 13267  001AD8  6FAB               	movwf	??_BothServos& (0+255),b
 13268  001ADA  0E3F               	movlw	63
 13269  001ADC                     u8137:
 13270  001ADC  2EE8               	decfsz	wreg,f,c
 13271  001ADE  D7FE               	bra	u8137
 13272  001AE0  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13273  001AE2  D7FC               	bra	u8137
 13274  001AE4  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13275  001AE6  D7FA               	bra	u8137
 13276  001AE8  D000               	nop2	
 13277                           
 13278                           ;Test.c: 376: updateServoPosition(1700, 1);
 13279  001AEA  0E06               	movlw	6
 13280  001AEC  0100               	movlb	0	; () banked
 13281  001AEE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13282  001AF0  0EA4               	movlw	164
 13283  001AF2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13284  001AF4  0E00               	movlw	0
 13285  001AF6  0100               	movlb	0	; () banked
 13286  001AF8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13287  001AFA  0E01               	movlw	1
 13288  001AFC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13289  001AFE  EC1D  F01E         	call	_updateServoPosition	;wreg free
 13290                           
 13291                           ;Test.c: 377: _delay((unsigned long)((750)*(32000000/4000.0)));
 13292  001B02  0E1F               	movlw	31
 13293  001B04  0100               	movlb	0	; () banked
 13294  001B06  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13295  001B08  0E71               	movlw	113
 13296  001B0A  0100               	movlb	0	; () banked
 13297  001B0C  6FAB               	movwf	??_BothServos& (0+255),b
 13298  001B0E  0E1E               	movlw	30
 13299  001B10                     u8147:
 13300  001B10  2EE8               	decfsz	wreg,f,c
 13301  001B12  D7FE               	bra	u8147
 13302  001B14  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13303  001B16  D7FC               	bra	u8147
 13304  001B18  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13305  001B1A  D7FA               	bra	u8147
 13306  001B1C  F000               	nop	
 13307                           
 13308                           ;Test.c: 378: updateServoPosition(1350, 3);
 13309  001B1E  0E05               	movlw	5
 13310  001B20  0100               	movlb	0	; () banked
 13311  001B22  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13312  001B24  0E46               	movlw	70
 13313  001B26  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13314  001B28  0E00               	movlw	0
 13315  001B2A  0100               	movlb	0	; () banked
 13316  001B2C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13317  001B2E  0E03               	movlw	3
 13318  001B30  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13319  001B32  EC1D  F01E         	call	_updateServoPosition	;wreg free
 13320                           
 13321                           ;Test.c: 379: _delay((unsigned long)((2000)*(32000000/4000.0)));
 13322  001B36  0E52               	movlw	82
 13323  001B38  0100               	movlb	0	; () banked
 13324  001B3A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13325  001B3C  0E2B               	movlw	43
 13326  001B3E  0100               	movlb	0	; () banked
 13327  001B40  6FAB               	movwf	??_BothServos& (0+255),b
 13328  001B42  0E00               	movlw	0
 13329  001B44                     u8157:
 13330  001B44  2EE8               	decfsz	wreg,f,c
 13331  001B46  D7FE               	bra	u8157
 13332  001B48  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13333  001B4A  D7FC               	bra	u8157
 13334  001B4C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13335  001B4E  D7FA               	bra	u8157
 13336  001B50  F000               	nop	
 13337                           
 13338                           ;Test.c: 380: updateServoPosition(1150, 3);
 13339  001B52  0E04               	movlw	4
 13340  001B54  0100               	movlb	0	; () banked
 13341  001B56  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13342  001B58  0E7E               	movlw	126
 13343  001B5A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13344  001B5C  0E00               	movlw	0
 13345  001B5E  0100               	movlb	0	; () banked
 13346  001B60  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13347  001B62  0E03               	movlw	3
 13348  001B64  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13349  001B66  EC1D  F01E         	call	_updateServoPosition	;wreg free
 13350                           
 13351                           ;Test.c: 381: _delay((unsigned long)((750)*(32000000/4000.0)));
 13352  001B6A  0E1F               	movlw	31
 13353  001B6C  0100               	movlb	0	; () banked
 13354  001B6E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13355  001B70  0E71               	movlw	113
 13356  001B72  0100               	movlb	0	; () banked
 13357  001B74  6FAB               	movwf	??_BothServos& (0+255),b
 13358  001B76  0E1E               	movlw	30
 13359  001B78                     u8167:
 13360  001B78  2EE8               	decfsz	wreg,f,c
 13361  001B7A  D7FE               	bra	u8167
 13362  001B7C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13363  001B7E  D7FC               	bra	u8167
 13364  001B80  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13365  001B82  D7FA               	bra	u8167
 13366  001B84  F000               	nop	
 13367                           
 13368                           ;Test.c: 383: updateServoPosition(2100, 1);
 13369  001B86  0E08               	movlw	8
 13370  001B88  0100               	movlb	0	; () banked
 13371  001B8A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13372  001B8C  0E34               	movlw	52
 13373  001B8E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13374  001B90  0E00               	movlw	0
 13375  001B92  0100               	movlb	0	; () banked
 13376  001B94  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13377  001B96  0E01               	movlw	1
 13378  001B98  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13379  001B9A  EC1D  F01E         	call	_updateServoPosition	;wreg free
 13380                           
 13381                           ;Test.c: 384: _delay((unsigned long)((750)*(32000000/4000.0)));
 13382  001B9E  0E1F               	movlw	31
 13383  001BA0  0100               	movlb	0	; () banked
 13384  001BA2  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13385  001BA4  0E71               	movlw	113
 13386  001BA6  0100               	movlb	0	; () banked
 13387  001BA8  6FAB               	movwf	??_BothServos& (0+255),b
 13388  001BAA  0E1E               	movlw	30
 13389  001BAC                     u8177:
 13390  001BAC  2EE8               	decfsz	wreg,f,c
 13391  001BAE  D7FE               	bra	u8177
 13392  001BB0  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13393  001BB2  D7FC               	bra	u8177
 13394  001BB4  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13395  001BB6  D7FA               	bra	u8177
 13396  001BB8  F000               	nop	
 13397                           
 13398                           ;Test.c: 385: updateServoPosition(1350, 3);
 13399  001BBA  0E05               	movlw	5
 13400  001BBC  0100               	movlb	0	; () banked
 13401  001BBE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13402  001BC0  0E46               	movlw	70
 13403  001BC2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13404  001BC4  0E00               	movlw	0
 13405  001BC6  0100               	movlb	0	; () banked
 13406  001BC8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13407  001BCA  0E03               	movlw	3
 13408  001BCC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13409  001BCE  EC1D  F01E         	call	_updateServoPosition	;wreg free
 13410                           
 13411                           ;Test.c: 386: _delay((unsigned long)((2000)*(32000000/4000.0)));
 13412  001BD2  0E52               	movlw	82
 13413  001BD4  0100               	movlb	0	; () banked
 13414  001BD6  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13415  001BD8  0E2B               	movlw	43
 13416  001BDA  0100               	movlb	0	; () banked
 13417  001BDC  6FAB               	movwf	??_BothServos& (0+255),b
 13418  001BDE  0E00               	movlw	0
 13419  001BE0                     u8187:
 13420  001BE0  2EE8               	decfsz	wreg,f,c
 13421  001BE2  D7FE               	bra	u8187
 13422  001BE4  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13423  001BE6  D7FC               	bra	u8187
 13424  001BE8  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13425  001BEA  D7FA               	bra	u8187
 13426  001BEC  F000               	nop	
 13427                           
 13428                           ;Test.c: 387: updateServoPosition(1150, 3);
 13429  001BEE  0E04               	movlw	4
 13430  001BF0  0100               	movlb	0	; () banked
 13431  001BF2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13432  001BF4  0E7E               	movlw	126
 13433  001BF6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13434  001BF8  0E00               	movlw	0
 13435  001BFA  0100               	movlb	0	; () banked
 13436  001BFC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13437  001BFE  0E03               	movlw	3
 13438  001C00  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13439  001C02  EC1D  F01E         	call	_updateServoPosition	;wreg free
 13440                           
 13441                           ;Test.c: 388: _delay((unsigned long)((750)*(32000000/4000.0)));
 13442  001C06  0E1F               	movlw	31
 13443  001C08  0100               	movlb	0	; () banked
 13444  001C0A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13445  001C0C  0E71               	movlw	113
 13446  001C0E  0100               	movlb	0	; () banked
 13447  001C10  6FAB               	movwf	??_BothServos& (0+255),b
 13448  001C12  0E1E               	movlw	30
 13449  001C14                     u8197:
 13450  001C14  2EE8               	decfsz	wreg,f,c
 13451  001C16  D7FE               	bra	u8197
 13452  001C18  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13453  001C1A  D7FC               	bra	u8197
 13454  001C1C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13455  001C1E  D7FA               	bra	u8197
 13456  001C20  F000               	nop	
 13457                           
 13458                           ;Test.c: 390: TMR1ON = 0;
 13459  001C22  90CD               	bcf	4045,0,c	;volatile
 13460                           
 13461                           ;Test.c: 391: TMR3ON = 0;
 13462  001C24  90B1               	bcf	4017,0,c	;volatile
 13463                           
 13464                           ;Test.c: 392: (INTCONbits.GIE = 0);
 13465  001C26  9EF2               	bcf	intcon,7,c	;volatile
 13466  001C28  0012               	return		;funcret
 13467  001C2A                     __end_of_BothServos:
 13468                           	opt stack 0
 13469                           tblptru	equ	0xFF8
 13470                           tblptrh	equ	0xFF7
 13471                           tblptrl	equ	0xFF6
 13472                           tablat	equ	0xFF5
 13473                           prodh	equ	0xFF4
 13474                           prodl	equ	0xFF3
 13475                           intcon	equ	0xFF2
 13476                           intcon2	equ	0xFF1
 13477                           intcon3	equ	0xFF0
 13478                           postinc0	equ	0xFEE
 13479                           wreg	equ	0xFE8
 13480                           postdec1	equ	0xFE5
 13481                           fsr1l	equ	0xFE1
 13482                           indf2	equ	0xFDF
 13483                           postinc2	equ	0xFDE
 13484                           postdec2	equ	0xFDD
 13485                           fsr2h	equ	0xFDA
 13486                           fsr2l	equ	0xFD9
 13487                           status	equ	0xFD8
 13488                           
 13489 ;; *************** function _printf *****************
 13490 ;; Defined at:
 13491 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 13492 ;; Parameters:    Size  Location     Type
 13493 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 13494 ;;		 -> STR_115(17), STR_114(17), STR_113(11), STR_112(18), 
 13495 ;;		 -> STR_111(18), STR_110(17), STR_109(15), STR_108(15), 
 13496 ;;		 -> STR_107(15), STR_106(17), STR_105(17), STR_104(17), 
 13497 ;;		 -> STR_103(16), STR_102(17), STR_101(17), STR_100(17), 
 13498 ;;		 -> STR_99(17), STR_98(17), STR_97(17), STR_96(15), 
 13499 ;;		 -> STR_95(11), STR_94(17), STR_93(11), STR_92(17), 
 13500 ;;		 -> STR_91(14), STR_90(15), STR_89(14), STR_88(10), 
 13501 ;;		 -> STR_87(9), STR_86(9), STR_85(10), STR_84(10), 
 13502 ;;		 -> STR_83(16), STR_82(15), STR_81(3), STR_80(15), 
 13503 ;;		 -> STR_79(13), STR_78(14), STR_77(8), STR_76(14), 
 13504 ;;		 -> STR_75(15), STR_74(12), STR_73(14), STR_72(17), 
 13505 ;;		 -> STR_71(14), STR_70(15), STR_69(17), STR_68(17), 
 13506 ;;		 -> STR_67(7), STR_66(21), STR_65(13), STR_64(11), 
 13507 ;;		 -> STR_63(24), STR_50(17), STR_49(17), STR_48(17), 
 13508 ;;		 -> STR_47(17), STR_46(17), STR_45(17), STR_44(17), 
 13509 ;;		 -> STR_43(17), STR_42(17), STR_41(17), STR_40(17), 
 13510 ;;		 -> STR_39(17), STR_38(17), STR_37(17), STR_36(17), 
 13511 ;;		 -> STR_35(17), STR_34(17), STR_33(17), STR_32(17), 
 13512 ;;		 -> STR_31(17), STR_30(17), STR_29(3), STR_28(17), 
 13513 ;;		 -> STR_27(17), STR_26(17), STR_25(17), STR_24(17), 
 13514 ;;		 -> STR_23(14), STR_22(10), STR_21(24), STR_7(7), 
 13515 ;;		 -> STR_6(17), STR_5(18), STR_4(16), STR_3(18), 
 13516 ;;		 -> STR_2(14), STR_1(18), 
 13517 ;; Auto vars:     Size  Location     Type
 13518 ;;  tmpval          4    0        struct .
 13519 ;;  width           2   41[BANK0 ] int 
 13520 ;;  val             2   37[BANK0 ] unsigned int 
 13521 ;;  len             2   35[BANK0 ] unsigned int 
 13522 ;;  ap              2   33[BANK0 ] PTR void [1]
 13523 ;;		 -> ?i2_printf(2), ?_printf(2), 
 13524 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 13525 ;;		 -> STR_116(7), count_total(2), printRTC@month(4), UI@month(4), 
 13526 ;;  c               1   40[BANK0 ] char 
 13527 ;;  flag            1   39[BANK0 ] unsigned char 
 13528 ;;  prec            1   30[BANK0 ] char 
 13529 ;; Return value:  Size  Location     Type
 13530 ;;                  2   14[BANK0 ] int 
 13531 ;; Registers used:
 13532 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13533 ;; Tracked objects:
 13534 ;;		On entry : 0/0
 13535 ;;		On exit  : 0/0
 13536 ;;		Unchanged: 0/0
 13537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13538 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13539 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13540 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13541 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13542 ;;Total ram usage:       29 bytes
 13543 ;; Hardware stack levels used:    1
 13544 ;; Hardware stack levels required when called:    9
 13545 ;; This function calls:
 13546 ;;		___lwdiv
 13547 ;;		___lwmod
 13548 ;;		___wmul
 13549 ;;		_isdigit
 13550 ;;		_putch
 13551 ;; This function is called by:
 13552 ;;		_UI
 13553 ;;		_change_state_to_menu_start
 13554 ;;		_change_state_to_menu_12
 13555 ;;		_change_state_to_menu_22
 13556 ;;		_printRTC
 13557 ;;		_EEPROM_write
 13558 ;;		_Test
 13559 ;;		_algorithmTest
 13560 ;;		_sensorTest
 13561 ;;		_actuatorTest
 13562 ;;		_BothServos
 13563 ;;		_PortTestA5
 13564 ;;		_PusherTestA5
 13565 ;;		_ToggleTestA5
 13566 ;; This function uses a non-reentrant model
 13567 ;;
 13568                           
 13569                           	psect	text48
 13570  001170                     __ptext48:
 13571                           	opt stack 0
 13572  001170                     _printf:
 13573                           	opt stack 18
 13574                           
 13575                           ;doprnt.c: 466: va_list ap;
 13576                           ;doprnt.c: 499: signed char c;
 13577                           ;doprnt.c: 501: int width;
 13578                           ;doprnt.c: 506: signed char prec;
 13579                           ;doprnt.c: 508: unsigned char flag;
 13580                           ;doprnt.c: 523: union {
 13581                           ;doprnt.c: 524: unsigned long vd;
 13582                           ;doprnt.c: 525: double integ;
 13583                           ;doprnt.c: 526: } tmpval;
 13584                           ;doprnt.c: 528: unsigned int val;
 13585                           ;doprnt.c: 529: unsigned len;
 13586                           ;doprnt.c: 530: const char * cp;
 13587                           ;doprnt.c: 533: *ap = __va_start();
 13588                           
 13589                           ;incstack = 0
 13590  001170  0E90               	movlw	low (?_printf+2)
 13591  001172  0100               	movlb	0	; () banked
 13592  001174  6FA1               	movwf	printf@ap& (0+255),b
 13593  001176  0E00               	movlw	high (?_printf+2)
 13594  001178  0100               	movlb	0	; () banked
 13595  00117A  6FA2               	movwf	(printf@ap+1)& (0+255),b
 13596                           
 13597                           ;doprnt.c: 536: while(c = *f++) {
 13598  00117C  D205               	goto	l5553
 13599  00117E                     l5423:
 13600                           
 13601                           ; BSR set to: 0
 13602                           ;doprnt.c: 538: if(c != '%')
 13603  00117E  0E25               	movlw	37
 13604  001180  0100               	movlb	0	; () banked
 13605  001182  19A8               	xorwf	printf@c& (0+255),w,b
 13606  001184  B4D8               	btfsc	status,2,c
 13607  001186  D005               	goto	l5427
 13608                           
 13609                           ; BSR set to: 0
 13610                           ;doprnt.c: 540: {
 13611                           ;doprnt.c: 541: (putch(c) );
 13612  001188  0100               	movlb	0	; () banked
 13613  00118A  51A8               	movf	printf@c& (0+255),w,b
 13614  00118C  ECD9  F023         	call	_putch
 13615                           
 13616                           ;doprnt.c: 542: continue;
 13617  001190  D1FB               	goto	l5553
 13618  001192                     l5427:
 13619                           
 13620                           ;doprnt.c: 543: }
 13621                           ;doprnt.c: 546: width = 0;
 13622  001192  0E00               	movlw	0
 13623  001194  0100               	movlb	0	; () banked
 13624  001196  6FAA               	movwf	(printf@width+1)& (0+255),b
 13625  001198  0E00               	movlw	0
 13626  00119A  6FA9               	movwf	printf@width& (0+255),b
 13627                           
 13628                           ;doprnt.c: 548: flag = 0;
 13629  00119C  0E00               	movlw	0
 13630  00119E  0100               	movlb	0	; () banked
 13631  0011A0  6FA7               	movwf	printf@flag& (0+255),b
 13632                           
 13633                           ; BSR set to: 0
 13634                           ;doprnt.c: 551: switch(*f) {
 13635                           
 13636                           ;doprnt.c: 550: for(;;) {
 13637  0011A2  D005               	goto	l5433
 13638  0011A4                     l5429:
 13639                           
 13640                           ;doprnt.c: 580: flag |= 0x04;
 13641  0011A4  0100               	movlb	0	; () banked
 13642  0011A6  85A7               	bsf	printf@flag& (0+255),2,b
 13643                           
 13644                           ;doprnt.c: 581: f++;
 13645  0011A8  0100               	movlb	0	; () banked
 13646  0011AA  4B8E               	infsnz	printf@f& (0+255),f,b
 13647  0011AC  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13648  0011AE                     l5433:
 13649  0011AE  C08E  FFF6         	movff	printf@f,tblptrl
 13650  0011B2  C08F  FFF7         	movff	printf@f+1,tblptrh
 13651  0011B6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13652  0011B6  6AF8               	clrf	tblptru,c
 13653  0011B8                     	endif
 13654  0011B8                     	if	0	;tblptru may be non-zero
 13655  0011B8                     	endif
 13656  0011B8  0008               	tblrd		*
 13657  0011BA  50F5               	movf	tablat,w,c
 13658                           
 13659                           ; Switch size 1, requested type "space"
 13660                           ; Number of cases is 1, Range of values is 48 to 48
 13661                           ; switch strategies available:
 13662                           ; Name         Instructions Cycles
 13663                           ; simple_byte            4     3 (average)
 13664                           ;	Chosen strategy is simple_byte
 13665  0011BC  0A30               	xorlw	48	; case 48
 13666  0011BE  B4D8               	btfsc	status,2,c
 13667  0011C0  D7F1               	goto	l5429
 13668                           
 13669                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 13670                           
 13671                           ;doprnt.c: 586: }
 13672                           
 13673                           ;doprnt.c: 585: break;
 13674  0011C2  C08E  FFF6         	movff	printf@f,tblptrl
 13675  0011C6  C08F  FFF7         	movff	printf@f+1,tblptrh
 13676  0011CA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13677  0011CA  6AF8               	clrf	tblptru,c
 13678  0011CC                     	endif
 13679  0011CC                     	if	0	;tblptru may be non-zero
 13680  0011CC                     	endif
 13681  0011CC  0008               	tblrd		*
 13682  0011CE  50F5               	movf	tablat,w,c
 13683  0011D0  ECFE  F022         	call	_isdigit
 13684  0011D4  A0D8               	btfss	status,0,c
 13685  0011D6  D0D2               	goto	l5481
 13686                           
 13687                           ;doprnt.c: 598: width = 0;
 13688  0011D8  0E00               	movlw	0
 13689  0011DA  0100               	movlb	0	; () banked
 13690  0011DC  6FAA               	movwf	(printf@width+1)& (0+255),b
 13691  0011DE  0E00               	movlw	0
 13692  0011E0  6FA9               	movwf	printf@width& (0+255),b
 13693  0011E2                     l5439:
 13694                           
 13695                           ;doprnt.c: 600: width *= 10;
 13696  0011E2  C0A9  F080         	movff	printf@width,___wmul@multiplier
 13697  0011E6  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 13698  0011EA  0E00               	movlw	0
 13699  0011EC  0100               	movlb	0	; () banked
 13700  0011EE  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13701  0011F0  0E0A               	movlw	10
 13702  0011F2  6F82               	movwf	___wmul@multiplicand& (0+255),b
 13703  0011F4  EC68  F021         	call	___wmul	;wreg free
 13704  0011F8  C080  F0A9         	movff	?___wmul,printf@width
 13705  0011FC  C081  F0AA         	movff	?___wmul+1,printf@width+1
 13706                           
 13707                           ;doprnt.c: 601: width += *f++ - '0';
 13708  001200  0ED0               	movlw	208
 13709  001202  0100               	movlb	0	; () banked
 13710  001204  6F9A               	movwf	??_printf& (0+255),b
 13711  001206  0EFF               	movlw	255
 13712  001208  0100               	movlb	0	; () banked
 13713  00120A  6F9B               	movwf	(??_printf+1)& (0+255),b
 13714  00120C  C08E  FFF6         	movff	printf@f,tblptrl
 13715  001210  C08F  FFF7         	movff	printf@f+1,tblptrh
 13716  001214                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13717  001214  6AF8               	clrf	tblptru,c
 13718  001216                     	endif
 13719  001216                     	if	0	;tblptru may be non-zero
 13720  001216                     	endif
 13721  001216  0008               	tblrd		*
 13722  001218  50F5               	movf	tablat,w,c
 13723  00121A  0100               	movlb	0	; () banked
 13724  00121C  6F9C               	movwf	(??_printf+2)& (0+255),b
 13725  00121E  6B9D               	clrf	(??_printf+3)& (0+255),b
 13726  001220  0100               	movlb	0	; () banked
 13727  001222  519A               	movf	??_printf& (0+255),w,b
 13728  001224  0100               	movlb	0	; () banked
 13729  001226  279C               	addwf	(??_printf+2)& (0+255),f,b
 13730  001228  0100               	movlb	0	; () banked
 13731  00122A  519B               	movf	(??_printf+1)& (0+255),w,b
 13732  00122C  0100               	movlb	0	; () banked
 13733  00122E  239D               	addwfc	(??_printf+3)& (0+255),f,b
 13734  001230  0100               	movlb	0	; () banked
 13735  001232  519C               	movf	(??_printf+2)& (0+255),w,b
 13736  001234  0100               	movlb	0	; () banked
 13737  001236  27A9               	addwf	printf@width& (0+255),f,b
 13738  001238  0100               	movlb	0	; () banked
 13739  00123A  519D               	movf	(??_printf+3)& (0+255),w,b
 13740  00123C  0100               	movlb	0	; () banked
 13741  00123E  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 13742                           
 13743                           ; BSR set to: 0
 13744  001240  0100               	movlb	0	; () banked
 13745  001242  4B8E               	infsnz	printf@f& (0+255),f,b
 13746  001244  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13747                           
 13748                           ; BSR set to: 0
 13749                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 13750  001246  C08E  FFF6         	movff	printf@f,tblptrl
 13751  00124A  C08F  FFF7         	movff	printf@f+1,tblptrh
 13752  00124E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13753  00124E  6AF8               	clrf	tblptru,c
 13754  001250                     	endif
 13755  001250                     	if	0	;tblptru may be non-zero
 13756  001250                     	endif
 13757  001250  0008               	tblrd		*
 13758  001252  50F5               	movf	tablat,w,c
 13759  001254  ECFE  F022         	call	_isdigit
 13760  001258  A0D8               	btfss	status,0,c
 13761  00125A  D090               	goto	l5481
 13762  00125C  D7C2               	goto	l5439
 13763  00125E                     l5447:
 13764                           
 13765                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 13766  00125E  C0A1  FFD9         	movff	printf@ap,fsr2l
 13767  001262  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 13768  001266  CFDE F09F          	movff	postinc2,printf@cp
 13769  00126A  CFDD F0A0          	movff	postdec2,printf@cp+1
 13770  00126E  0E02               	movlw	2
 13771  001270  0100               	movlb	0	; () banked
 13772  001272  27A1               	addwf	printf@ap& (0+255),f,b
 13773  001274  0E00               	movlw	0
 13774  001276  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 13775                           
 13776                           ; BSR set to: 0
 13777                           ;doprnt.c: 740: if(!cp)
 13778  001278  0100               	movlb	0	; () banked
 13779  00127A  519F               	movf	printf@cp& (0+255),w,b
 13780  00127C  0100               	movlb	0	; () banked
 13781  00127E  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 13782  001280  A4D8               	btfss	status,2,c
 13783  001282  D006               	goto	l5455
 13784                           
 13785                           ; BSR set to: 0
 13786                           ;doprnt.c: 741: cp = "(null)";
 13787  001284  0EB6               	movlw	low STR_116
 13788  001286  0100               	movlb	0	; () banked
 13789  001288  6F9F               	movwf	printf@cp& (0+255),b
 13790  00128A  0EFF               	movlw	high STR_116
 13791  00128C  0100               	movlb	0	; () banked
 13792  00128E  6FA0               	movwf	(printf@cp+1)& (0+255),b
 13793  001290                     l5455:
 13794                           
 13795                           ; BSR set to: 0
 13796                           ;doprnt.c: 745: len = 0;
 13797  001290  0E00               	movlw	0
 13798  001292  0100               	movlb	0	; () banked
 13799  001294  6FA4               	movwf	(printf@len+1)& (0+255),b
 13800  001296  0E00               	movlw	0
 13801  001298  6FA3               	movwf	printf@len& (0+255),b
 13802                           
 13803                           ;doprnt.c: 746: while(cp[len])
 13804  00129A  D003               	goto	l5459
 13805  00129C                     l5457:
 13806                           
 13807                           ;doprnt.c: 747: len++;
 13808  00129C  0100               	movlb	0	; () banked
 13809  00129E  4BA3               	infsnz	printf@len& (0+255),f,b
 13810  0012A0  2BA4               	incf	(printf@len+1)& (0+255),f,b
 13811  0012A2                     l5459:
 13812                           
 13813                           ; BSR set to: 0
 13814  0012A2  0100               	movlb	0	; () banked
 13815  0012A4  51A3               	movf	printf@len& (0+255),w,b
 13816  0012A6  0100               	movlb	0	; () banked
 13817  0012A8  259F               	addwf	printf@cp& (0+255),w,b
 13818  0012AA  0100               	movlb	0	; () banked
 13819  0012AC  6F9A               	movwf	??_printf& (0+255),b
 13820  0012AE  0100               	movlb	0	; () banked
 13821  0012B0  51A4               	movf	(printf@len+1)& (0+255),w,b
 13822  0012B2  0100               	movlb	0	; () banked
 13823  0012B4  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 13824  0012B6  0100               	movlb	0	; () banked
 13825  0012B8  6F9B               	movwf	(??_printf+1)& (0+255),b
 13826  0012BA  C09A  FFF6         	movff	??_printf,tblptrl
 13827  0012BE  C09B  FFF7         	movff	??_printf+1,tblptrh
 13828  0012C2  0E00               	movlw	low (__mediumconst shr (0+16))
 13829  0012C4  6EF8               	movwf	tblptru,c
 13830  0012C6  0E0F               	movlw	(high __ramtop+-1)
 13831  0012C8  64F7               	cpfsgt	tblptrh,c
 13832  0012CA  D003               	bra	u3857
 13833  0012CC  0008               	tblrd		*
 13834  0012CE  50F5               	movf	tablat,w,c
 13835  0012D0  D005               	bra	u3850
 13836  0012D2                     u3857:
 13837  0012D2  CFF6 FFE9          	movff	tblptrl,fsr0l
 13838  0012D6  CFF7 FFEA          	movff	tblptrh,fsr0h
 13839  0012DA  50EF               	movf	indf0,w,c
 13840  0012DC                     u3850:
 13841  0012DC  0900               	iorlw	0
 13842  0012DE  A4D8               	btfss	status,2,c
 13843  0012E0  D7DD               	goto	l5457
 13844                           
 13845                           ;doprnt.c: 757: if(width > len)
 13846  0012E2  0100               	movlb	0	; () banked
 13847  0012E4  51A9               	movf	printf@width& (0+255),w,b
 13848  0012E6  0100               	movlb	0	; () banked
 13849  0012E8  5DA3               	subwf	printf@len& (0+255),w,b
 13850  0012EA  0100               	movlb	0	; () banked
 13851  0012EC  51AA               	movf	(printf@width+1)& (0+255),w,b
 13852  0012EE  0100               	movlb	0	; () banked
 13853  0012F0  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 13854  0012F2  B0D8               	btfsc	status,0,c
 13855  0012F4  D009               	goto	l5465
 13856                           
 13857                           ; BSR set to: 0
 13858                           ;doprnt.c: 758: width -= len;
 13859  0012F6  0100               	movlb	0	; () banked
 13860  0012F8  51A3               	movf	printf@len& (0+255),w,b
 13861  0012FA  0100               	movlb	0	; () banked
 13862  0012FC  5FA9               	subwf	printf@width& (0+255),f,b
 13863  0012FE  0100               	movlb	0	; () banked
 13864  001300  51A4               	movf	(printf@len+1)& (0+255),w,b
 13865  001302  0100               	movlb	0	; () banked
 13866  001304  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 13867  001306  D009               	goto	l5469
 13868  001308                     l5465:
 13869                           
 13870                           ; BSR set to: 0
 13871                           ;doprnt.c: 759: else
 13872                           ;doprnt.c: 760: width = 0;
 13873  001308  0E00               	movlw	0
 13874  00130A  0100               	movlb	0	; () banked
 13875  00130C  6FAA               	movwf	(printf@width+1)& (0+255),b
 13876  00130E  0E00               	movlw	0
 13877  001310  6FA9               	movwf	printf@width& (0+255),b
 13878                           
 13879                           ; BSR set to: 0
 13880                           ;doprnt.c: 764: while(width--)
 13881  001312  D003               	goto	l5469
 13882  001314                     l5467:
 13883                           
 13884                           ; BSR set to: 0
 13885                           ;doprnt.c: 765: (putch(' ') );
 13886  001314  0E20               	movlw	32
 13887  001316  ECD9  F023         	call	_putch
 13888  00131A                     l5469:
 13889  00131A  0100               	movlb	0	; () banked
 13890  00131C  07A9               	decf	printf@width& (0+255),f,b
 13891  00131E  A0D8               	btfss	status,0,c
 13892  001320  07AA               	decf	(printf@width+1)& (0+255),f,b
 13893  001322  0100               	movlb	0	; () banked
 13894  001324  29A9               	incf	printf@width& (0+255),w,b
 13895  001326  E1F6               	bnz	l5467
 13896  001328  0100               	movlb	0	; () banked
 13897  00132A  29AA               	incf	(printf@width+1)& (0+255),w,b
 13898  00132C  B4D8               	btfsc	status,2,c
 13899  00132E  D017               	goto	l5475
 13900  001330  D7F1               	goto	l5467
 13901  001332                     l5471:
 13902                           
 13903                           ; BSR set to: 0
 13904                           ;doprnt.c: 768: (putch(*cp++) );
 13905  001332  C09F  FFF6         	movff	printf@cp,tblptrl
 13906  001336  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 13907  00133A  0E00               	movlw	low (__mediumconst shr (0+16))
 13908  00133C  6EF8               	movwf	tblptru,c
 13909  00133E  0E0F               	movlw	(high __ramtop+-1)
 13910  001340  64F7               	cpfsgt	tblptrh,c
 13911  001342  D003               	bra	u3897
 13912  001344  0008               	tblrd		*
 13913  001346  50F5               	movf	tablat,w,c
 13914  001348  D005               	bra	u3890
 13915  00134A                     u3897:
 13916  00134A  CFF6 FFE9          	movff	tblptrl,fsr0l
 13917  00134E  CFF7 FFEA          	movff	tblptrh,fsr0h
 13918  001352  50EF               	movf	indf0,w,c
 13919  001354                     u3890:
 13920  001354  ECD9  F023         	call	_putch
 13921  001358  0100               	movlb	0	; () banked
 13922  00135A  4B9F               	infsnz	printf@cp& (0+255),f,b
 13923  00135C  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 13924  00135E                     l5475:
 13925                           
 13926                           ; BSR set to: 0
 13927  00135E  0100               	movlb	0	; () banked
 13928  001360  07A3               	decf	printf@len& (0+255),f,b
 13929  001362  A0D8               	btfss	status,0,c
 13930  001364  07A4               	decf	(printf@len+1)& (0+255),f,b
 13931  001366  0100               	movlb	0	; () banked
 13932  001368  29A3               	incf	printf@len& (0+255),w,b
 13933  00136A  E1E3               	bnz	l5471
 13934  00136C  0100               	movlb	0	; () banked
 13935  00136E  29A4               	incf	(printf@len+1)& (0+255),w,b
 13936  001370  B4D8               	btfsc	status,2,c
 13937  001372  D10A               	goto	l5553
 13938  001374  D7DE               	goto	l5471
 13939  001376                     l5477:
 13940                           
 13941                           ; BSR set to: 0
 13942                           ;doprnt.c: 818: flag |= 0x40;
 13943  001376  0100               	movlb	0	; () banked
 13944  001378  8DA7               	bsf	printf@flag& (0+255),6,b
 13945                           
 13946                           ; BSR set to: 0
 13947                           ;doprnt.c: 822: }
 13948                           
 13949                           ;doprnt.c: 819: break;
 13950  00137A  D01D               	goto	l1259
 13951  00137C                     l5481:
 13952  00137C  C08E  FFF6         	movff	printf@f,tblptrl
 13953  001380  C08F  FFF7         	movff	printf@f+1,tblptrh
 13954  001384  0100               	movlb	0	; () banked
 13955  001386  4B8E               	infsnz	printf@f& (0+255),f,b
 13956  001388  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13957  00138A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13958  00138A  6AF8               	clrf	tblptru,c
 13959  00138C                     	endif
 13960  00138C                     	if	0	;tblptru may be non-zero
 13961  00138C                     	endif
 13962  00138C  0008               	tblrd		*
 13963  00138E  CFF5 F0A8          	movff	tablat,printf@c
 13964  001392  0100               	movlb	0	; () banked
 13965  001394  51A8               	movf	printf@c& (0+255),w,b
 13966                           
 13967                           ; Switch size 1, requested type "space"
 13968                           ; Number of cases is 5, Range of values is 0 to 117
 13969                           ; switch strategies available:
 13970                           ; Name         Instructions Cycles
 13971                           ; simple_byte           16     9 (average)
 13972                           ;	Chosen strategy is simple_byte
 13973  001396  0A00               	xorlw	0	; case 0
 13974  001398  B4D8               	btfsc	status,2,c
 13975  00139A  0012               	return	
 13976  00139C  0A64               	xorlw	100	; case 100
 13977  00139E  B4D8               	btfsc	status,2,c
 13978  0013A0  D00A               	goto	l1259
 13979  0013A2  0A0D               	xorlw	13	; case 105
 13980  0013A4  B4D8               	btfsc	status,2,c
 13981  0013A6  D007               	goto	l1259
 13982  0013A8  0A1A               	xorlw	26	; case 115
 13983  0013AA  B4D8               	btfsc	status,2,c
 13984  0013AC  D758               	goto	l5447
 13985  0013AE  0A06               	xorlw	6	; case 117
 13986  0013B0  B4D8               	btfsc	status,2,c
 13987  0013B2  D7E1               	goto	l5477
 13988  0013B4  D0E9               	goto	l5553
 13989  0013B6                     l1259:
 13990                           
 13991                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 13992  0013B6  0100               	movlb	0	; () banked
 13993  0013B8  BDA7               	btfsc	printf@flag& (0+255),6,b
 13994  0013BA  D019               	goto	l5493
 13995                           
 13996                           ; BSR set to: 0
 13997                           ;doprnt.c: 1253: {
 13998                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 13999  0013BC  C0A1  FFD9         	movff	printf@ap,fsr2l
 14000  0013C0  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 14001  0013C4  CFDE F0A5          	movff	postinc2,printf@val
 14002  0013C8  CFDD F0A6          	movff	postdec2,printf@val+1
 14003                           
 14004                           ; BSR set to: 0
 14005  0013CC  0E02               	movlw	2
 14006  0013CE  0100               	movlb	0	; () banked
 14007  0013D0  27A1               	addwf	printf@ap& (0+255),f,b
 14008  0013D2  0E00               	movlw	0
 14009  0013D4  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 14010                           
 14011                           ; BSR set to: 0
 14012                           ;doprnt.c: 1261: if((int)val < 0) {
 14013  0013D6  0100               	movlb	0	; () banked
 14014  0013D8  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 14015  0013DA  D016               	goto	l5497
 14016                           
 14017                           ; BSR set to: 0
 14018                           ;doprnt.c: 1262: flag |= 0x03;
 14019  0013DC  0E03               	movlw	3
 14020  0013DE  0100               	movlb	0	; () banked
 14021  0013E0  13A7               	iorwf	printf@flag& (0+255),f,b
 14022                           
 14023                           ; BSR set to: 0
 14024                           ;doprnt.c: 1263: val = -val;
 14025  0013E2  0100               	movlb	0	; () banked
 14026  0013E4  6DA5               	negf	printf@val& (0+255),b
 14027  0013E6  1FA6               	comf	(printf@val+1)& (0+255),f,b
 14028  0013E8  B0D8               	btfsc	status,0,c
 14029  0013EA  2BA6               	incf	(printf@val+1)& (0+255),f,b
 14030                           
 14031                           ; BSR set to: 0
 14032                           ;doprnt.c: 1264: }
 14033                           ;doprnt.c: 1266: }
 14034  0013EC  D00D               	goto	l5497
 14035  0013EE                     l5493:
 14036                           
 14037                           ; BSR set to: 0
 14038                           ;doprnt.c: 1268: else
 14039                           ;doprnt.c: 1273: {
 14040                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 14041  0013EE  C0A1  FFD9         	movff	printf@ap,fsr2l
 14042  0013F2  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 14043  0013F6  CFDE F0A5          	movff	postinc2,printf@val
 14044  0013FA  CFDD F0A6          	movff	postdec2,printf@val+1
 14045                           
 14046                           ; BSR set to: 0
 14047  0013FE  0E02               	movlw	2
 14048  001400  0100               	movlb	0	; () banked
 14049  001402  27A1               	addwf	printf@ap& (0+255),f,b
 14050  001404  0E00               	movlw	0
 14051  001406  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 14052  001408                     l5497:
 14053                           
 14054                           ; BSR set to: 0
 14055                           ;doprnt.c: 1287: }
 14056                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 14057  001408  0E01               	movlw	1
 14058  00140A  0100               	movlb	0	; () banked
 14059  00140C  6FA8               	movwf	printf@c& (0+255),b
 14060  00140E                     l5499:
 14061                           
 14062                           ; BSR set to: 0
 14063  00140E  0E05               	movlw	5
 14064  001410  0100               	movlb	0	; () banked
 14065  001412  19A8               	xorwf	printf@c& (0+255),w,b
 14066  001414  B4D8               	btfsc	status,2,c
 14067  001416  D019               	goto	l5511
 14068                           
 14069                           ; BSR set to: 0
 14070                           ;doprnt.c: 1306: if(val < dpowers[c])
 14071                           
 14072                           ; BSR set to: 0
 14073                           
 14074                           ; BSR set to: 0
 14075  001418  0100               	movlb	0	; () banked
 14076  00141A  51A8               	movf	printf@c& (0+255),w,b
 14077  00141C  0D02               	mullw	2
 14078  00141E  0E36               	movlw	low _dpowers
 14079  001420  24F3               	addwf	prodl,w,c
 14080  001422  6EF6               	movwf	tblptrl,c
 14081  001424  0EFB               	movlw	high _dpowers
 14082  001426  20F4               	addwfc	prodh,w,c
 14083  001428  6EF7               	movwf	tblptrh,c
 14084  00142A                     	if	1	;There are 3 active tblptr bytes
 14085  00142A  6AF8               	clrf	tblptru,c
 14086  00142C  0E00               	movlw	low (__mediumconst shr (0+16))
 14087  00142E  22F8               	addwfc	tblptru,f,c
 14088  001430                     	endif
 14089  001430  0009               	tblrd		*+
 14090  001432  50F5               	movf	tablat,w,c
 14091  001434  0100               	movlb	0	; () banked
 14092  001436  5DA5               	subwf	printf@val& (0+255),w,b
 14093  001438  0009               	tblrd		*+
 14094  00143A  50F5               	movf	tablat,w,c
 14095  00143C  0100               	movlb	0	; () banked
 14096  00143E  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 14097  001440  A0D8               	btfss	status,0,c
 14098  001442  D003               	goto	l5511
 14099                           
 14100                           ; BSR set to: 0
 14101                           
 14102                           ; BSR set to: 0
 14103                           
 14104                           ; BSR set to: 0
 14105                           ;doprnt.c: 1307: break;
 14106  001444  0100               	movlb	0	; () banked
 14107  001446  2BA8               	incf	printf@c& (0+255),f,b
 14108  001448  D7E2               	goto	l5499
 14109  00144A                     l5511:
 14110                           
 14111                           ; BSR set to: 0
 14112                           ;doprnt.c: 1345: if(width && flag & 0x03)
 14113  00144A  0100               	movlb	0	; () banked
 14114  00144C  51A9               	movf	printf@width& (0+255),w,b
 14115  00144E  0100               	movlb	0	; () banked
 14116  001450  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 14117  001452  B4D8               	btfsc	status,2,c
 14118  001454  D00B               	goto	l5517
 14119                           
 14120                           ; BSR set to: 0
 14121  001456  C0A7  F09A         	movff	printf@flag,??_printf
 14122  00145A  0E03               	movlw	3
 14123  00145C  0100               	movlb	0	; () banked
 14124  00145E  179A               	andwf	??_printf& (0+255),f,b
 14125  001460  B4D8               	btfsc	status,2,c
 14126  001462  D004               	goto	l5517
 14127                           
 14128                           ; BSR set to: 0
 14129                           ;doprnt.c: 1346: width--;
 14130  001464  0100               	movlb	0	; () banked
 14131  001466  07A9               	decf	printf@width& (0+255),f,b
 14132  001468  A0D8               	btfss	status,0,c
 14133  00146A  07AA               	decf	(printf@width+1)& (0+255),f,b
 14134  00146C                     l5517:
 14135                           
 14136                           ; BSR set to: 0
 14137                           ;doprnt.c: 1381: if(width > c)
 14138  00146C  0E80               	movlw	128
 14139  00146E  0100               	movlb	0	; () banked
 14140  001470  BFA8               	btfsc	printf@c& (0+255),7,b
 14141  001472  0E7F               	movlw	127
 14142  001474  0100               	movlb	0	; () banked
 14143  001476  6F9A               	movwf	??_printf& (0+255),b
 14144  001478  0100               	movlb	0	; () banked
 14145  00147A  51A9               	movf	printf@width& (0+255),w,b
 14146  00147C  0100               	movlb	0	; () banked
 14147  00147E  5DA8               	subwf	printf@c& (0+255),w,b
 14148  001480  0100               	movlb	0	; () banked
 14149  001482  51AA               	movf	(printf@width+1)& (0+255),w,b
 14150  001484  0A80               	xorlw	128
 14151  001486  0100               	movlb	0	; () banked
 14152  001488  599A               	subwfb	??_printf& (0+255),w,b
 14153  00148A  B0D8               	btfsc	status,0,c
 14154  00148C  D00B               	goto	l5521
 14155                           
 14156                           ; BSR set to: 0
 14157                           ;doprnt.c: 1382: width -= c;
 14158  00148E  0100               	movlb	0	; () banked
 14159  001490  51A8               	movf	printf@c& (0+255),w,b
 14160  001492  0100               	movlb	0	; () banked
 14161  001494  5FA9               	subwf	printf@width& (0+255),f,b
 14162  001496  0E00               	movlw	0
 14163  001498  0100               	movlb	0	; () banked
 14164  00149A  BFA8               	btfsc	printf@c& (0+255),7,b
 14165  00149C  0EFF               	movlw	255
 14166  00149E  0100               	movlb	0	; () banked
 14167  0014A0  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 14168  0014A2  D005               	goto	l5523
 14169  0014A4                     l5521:
 14170                           
 14171                           ; BSR set to: 0
 14172                           ;doprnt.c: 1383: else
 14173                           ;doprnt.c: 1384: width = 0;
 14174  0014A4  0E00               	movlw	0
 14175  0014A6  0100               	movlb	0	; () banked
 14176  0014A8  6FAA               	movwf	(printf@width+1)& (0+255),b
 14177  0014AA  0E00               	movlw	0
 14178  0014AC  6FA9               	movwf	printf@width& (0+255),b
 14179  0014AE                     l5523:
 14180                           
 14181                           ; BSR set to: 0
 14182                           ;doprnt.c: 1387: if(flag & 0x04) {
 14183  0014AE  0100               	movlb	0	; () banked
 14184  0014B0  A5A7               	btfss	printf@flag& (0+255),2,b
 14185  0014B2  D018               	goto	l5535
 14186                           
 14187                           ; BSR set to: 0
 14188                           ;doprnt.c: 1392: if(flag & 0x03)
 14189  0014B4  C0A7  F09A         	movff	printf@flag,??_printf
 14190  0014B8  0E03               	movlw	3
 14191  0014BA  0100               	movlb	0	; () banked
 14192  0014BC  179A               	andwf	??_printf& (0+255),f,b
 14193  0014BE  B4D8               	btfsc	status,2,c
 14194  0014C0  D003               	goto	l5529
 14195                           
 14196                           ; BSR set to: 0
 14197                           ;doprnt.c: 1393: (putch('-') );
 14198  0014C2  0E2D               	movlw	45
 14199  0014C4  ECD9  F023         	call	_putch
 14200  0014C8                     l5529:
 14201                           
 14202                           ;doprnt.c: 1415: if(width)
 14203  0014C8  0100               	movlb	0	; () banked
 14204  0014CA  51A9               	movf	printf@width& (0+255),w,b
 14205  0014CC  0100               	movlb	0	; () banked
 14206  0014CE  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 14207  0014D0  B4D8               	btfsc	status,2,c
 14208  0014D2  D025               	goto	l5545
 14209                           
 14210                           ; BSR set to: 0
 14211                           ;doprnt.c: 1417: (putch('0') );
 14212                           
 14213                           ; BSR set to: 0
 14214                           
 14215                           ;doprnt.c: 1416: do
 14216  0014D4  0E30               	movlw	48
 14217  0014D6  ECD9  F023         	call	_putch
 14218                           
 14219                           ;doprnt.c: 1418: while(--width);
 14220  0014DA  0100               	movlb	0	; () banked
 14221  0014DC  07A9               	decf	printf@width& (0+255),f,b
 14222  0014DE  A0D8               	btfss	status,0,c
 14223  0014E0  07AA               	decf	(printf@width+1)& (0+255),f,b
 14224  0014E2  D7F2               	goto	l5529
 14225  0014E4                     l5535:
 14226                           
 14227                           ; BSR set to: 0
 14228                           ;doprnt.c: 1422: {
 14229                           ;doprnt.c: 1424: if(width
 14230                           ;doprnt.c: 1428: )
 14231  0014E4  0100               	movlb	0	; () banked
 14232  0014E6  51A9               	movf	printf@width& (0+255),w,b
 14233  0014E8  0100               	movlb	0	; () banked
 14234  0014EA  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 14235  0014EC  B4D8               	btfsc	status,2,c
 14236  0014EE  D00D               	goto	l5541
 14237  0014F0                     l5537:
 14238                           
 14239                           ; BSR set to: 0
 14240                           ;doprnt.c: 1430: (putch(' ') );
 14241  0014F0  0E20               	movlw	32
 14242  0014F2  ECD9  F023         	call	_putch
 14243                           
 14244                           ;doprnt.c: 1431: while(--width);
 14245  0014F6  0100               	movlb	0	; () banked
 14246  0014F8  07A9               	decf	printf@width& (0+255),f,b
 14247  0014FA  A0D8               	btfss	status,0,c
 14248  0014FC  07AA               	decf	(printf@width+1)& (0+255),f,b
 14249  0014FE  0100               	movlb	0	; () banked
 14250  001500  51A9               	movf	printf@width& (0+255),w,b
 14251  001502  0100               	movlb	0	; () banked
 14252  001504  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 14253  001506  A4D8               	btfss	status,2,c
 14254  001508  D7F3               	goto	l5537
 14255  00150A                     l5541:
 14256                           
 14257                           ; BSR set to: 0
 14258                           ;doprnt.c: 1438: if(flag & 0x03)
 14259  00150A  C0A7  F09A         	movff	printf@flag,??_printf
 14260  00150E  0E03               	movlw	3
 14261  001510  0100               	movlb	0	; () banked
 14262  001512  179A               	andwf	??_printf& (0+255),f,b
 14263  001514  B4D8               	btfsc	status,2,c
 14264  001516  D003               	goto	l5545
 14265                           
 14266                           ; BSR set to: 0
 14267                           ;doprnt.c: 1439: (putch('-') );
 14268  001518  0E2D               	movlw	45
 14269  00151A  ECD9  F023         	call	_putch
 14270  00151E                     l5545:
 14271                           
 14272                           ;doprnt.c: 1469: }
 14273                           ;doprnt.c: 1472: prec = c;
 14274  00151E  C0A8  F09E         	movff	printf@c,printf@prec
 14275                           
 14276                           ;doprnt.c: 1474: while(prec--) {
 14277  001522  D02C               	goto	l5551
 14278  001524                     l5547:
 14279                           
 14280                           ;doprnt.c: 1478: {
 14281                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 14282  001524  0100               	movlb	0	; () banked
 14283  001526  519E               	movf	printf@prec& (0+255),w,b
 14284  001528  0D02               	mullw	2
 14285  00152A  0E36               	movlw	low _dpowers
 14286  00152C  24F3               	addwf	prodl,w,c
 14287  00152E  6EF6               	movwf	tblptrl,c
 14288  001530  0EFB               	movlw	high _dpowers
 14289  001532  20F4               	addwfc	prodh,w,c
 14290  001534  6EF7               	movwf	tblptrh,c
 14291  001536                     	if	1	;There are 3 active tblptr bytes
 14292  001536  6AF8               	clrf	tblptru,c
 14293  001538  0E00               	movlw	low (__mediumconst shr (0+16))
 14294  00153A  22F8               	addwfc	tblptru,f,c
 14295  00153C                     	endif
 14296  00153C  0009               	tblrd		*+
 14297  00153E  CFF5 F082          	movff	tablat,___lwdiv@divisor
 14298  001542  000A               	tblrd		*-
 14299  001544  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 14300  001548  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 14301  00154C  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 14302  001550  ECE1  F01D         	call	___lwdiv	;wreg free
 14303  001554  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 14304  001558  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 14305  00155C  0E00               	movlw	0
 14306  00155E  0100               	movlb	0	; () banked
 14307  001560  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 14308  001562  0E0A               	movlw	10
 14309  001564  6F89               	movwf	___lwmod@divisor& (0+255),b
 14310  001566  ECF9  F01E         	call	___lwmod	;wreg free
 14311  00156A  0100               	movlb	0	; () banked
 14312  00156C  5187               	movf	?___lwmod& (0+255),w,b
 14313  00156E  0F30               	addlw	48
 14314  001570  0100               	movlb	0	; () banked
 14315  001572  6FA8               	movwf	printf@c& (0+255),b
 14316                           
 14317                           ; BSR set to: 0
 14318                           ;doprnt.c: 1523: }
 14319                           ;doprnt.c: 1524: (putch(c) );
 14320  001574  0100               	movlb	0	; () banked
 14321  001576  51A8               	movf	printf@c& (0+255),w,b
 14322  001578  ECD9  F023         	call	_putch
 14323  00157C                     l5551:
 14324  00157C  0100               	movlb	0	; () banked
 14325  00157E  079E               	decf	printf@prec& (0+255),f,b
 14326  001580  0100               	movlb	0	; () banked
 14327  001582  299E               	incf	printf@prec& (0+255),w,b
 14328  001584  A4D8               	btfss	status,2,c
 14329  001586  D7CE               	goto	l5547
 14330  001588                     l5553:
 14331  001588  C08E  FFF6         	movff	printf@f,tblptrl
 14332  00158C  C08F  FFF7         	movff	printf@f+1,tblptrh
 14333  001590  0100               	movlb	0	; () banked
 14334  001592  4B8E               	infsnz	printf@f& (0+255),f,b
 14335  001594  2B8F               	incf	(printf@f+1)& (0+255),f,b
 14336  001596                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14337  001596  6AF8               	clrf	tblptru,c
 14338  001598                     	endif
 14339  001598                     	if	0	;tblptru may be non-zero
 14340  001598                     	endif
 14341  001598  0008               	tblrd		*
 14342  00159A  CFF5 F0A8          	movff	tablat,printf@c
 14343  00159E  0100               	movlb	0	; () banked
 14344  0015A0  51A8               	movf	printf@c& (0+255),w,b
 14345  0015A2  B4D8               	btfsc	status,2,c
 14346  0015A4  0012               	return	
 14347  0015A6  D5EB               	goto	l5423
 14348  0015A8                     __end_of_printf:
 14349                           	opt stack 0
 14350                           tblptru	equ	0xFF8
 14351                           tblptrh	equ	0xFF7
 14352                           tblptrl	equ	0xFF6
 14353                           tablat	equ	0xFF5
 14354                           prodh	equ	0xFF4
 14355                           prodl	equ	0xFF3
 14356                           intcon	equ	0xFF2
 14357                           intcon2	equ	0xFF1
 14358                           intcon3	equ	0xFF0
 14359                           indf0	equ	0xFEF
 14360                           postinc0	equ	0xFEE
 14361                           fsr0h	equ	0xFEA
 14362                           fsr0l	equ	0xFE9
 14363                           wreg	equ	0xFE8
 14364                           postdec1	equ	0xFE5
 14365                           fsr1l	equ	0xFE1
 14366                           indf2	equ	0xFDF
 14367                           postinc2	equ	0xFDE
 14368                           postdec2	equ	0xFDD
 14369                           fsr2h	equ	0xFDA
 14370                           fsr2l	equ	0xFD9
 14371                           status	equ	0xFD8
 14372                           
 14373 ;; *************** function _putch *****************
 14374 ;; Defined at:
 14375 ;;		line 20 in file "lcd.c"
 14376 ;; Parameters:    Size  Location     Type
 14377 ;;  data            1    wreg     unsigned char 
 14378 ;; Auto vars:     Size  Location     Type
 14379 ;;  data            1    2[BANK0 ] unsigned char 
 14380 ;; Return value:  Size  Location     Type
 14381 ;;                  1    wreg      void 
 14382 ;; Registers used:
 14383 ;;		wreg, status,2, status,0, cstack
 14384 ;; Tracked objects:
 14385 ;;		On entry : 0/0
 14386 ;;		On exit  : 0/0
 14387 ;;		Unchanged: 0/0
 14388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14390 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14392 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14393 ;;Total ram usage:        1 bytes
 14394 ;; Hardware stack levels used:    1
 14395 ;; Hardware stack levels required when called:    8
 14396 ;; This function calls:
 14397 ;;		_lcdNibble
 14398 ;; This function is called by:
 14399 ;;		_printf
 14400 ;; This function uses a non-reentrant model
 14401 ;;
 14402                           
 14403                           	psect	text49
 14404  0047B2                     __ptext49:
 14405                           	opt stack 0
 14406  0047B2                     _putch:
 14407                           	opt stack 18
 14408                           
 14409                           ;incstack = 0
 14410                           ;putch@data stored from wreg
 14411  0047B2  0100               	movlb	0	; () banked
 14412  0047B4  6F82               	movwf	putch@data& (0+255),b
 14413                           
 14414                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 14415  0047B6  848C               	bsf	3980,2,c	;volatile
 14416                           
 14417                           ;lcd.c: 22: lcdNibble(data);
 14418  0047B8  0100               	movlb	0	; () banked
 14419  0047BA  5182               	movf	putch@data& (0+255),w,b
 14420  0047BC  ECC5  F01E         	call	_lcdNibble
 14421  0047C0  0012               	return		;funcret
 14422  0047C2                     __end_of_putch:
 14423                           	opt stack 0
 14424                           tblptru	equ	0xFF8
 14425                           tblptrh	equ	0xFF7
 14426                           tblptrl	equ	0xFF6
 14427                           tablat	equ	0xFF5
 14428                           prodh	equ	0xFF4
 14429                           prodl	equ	0xFF3
 14430                           intcon	equ	0xFF2
 14431                           intcon2	equ	0xFF1
 14432                           intcon3	equ	0xFF0
 14433                           indf0	equ	0xFEF
 14434                           postinc0	equ	0xFEE
 14435                           fsr0h	equ	0xFEA
 14436                           fsr0l	equ	0xFE9
 14437                           wreg	equ	0xFE8
 14438                           postdec1	equ	0xFE5
 14439                           fsr1l	equ	0xFE1
 14440                           indf2	equ	0xFDF
 14441                           postinc2	equ	0xFDE
 14442                           postdec2	equ	0xFDD
 14443                           fsr2h	equ	0xFDA
 14444                           fsr2l	equ	0xFD9
 14445                           status	equ	0xFD8
 14446                           
 14447 ;; *************** function _isdigit *****************
 14448 ;; Defined at:
 14449 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 14450 ;; Parameters:    Size  Location     Type
 14451 ;;  c               1    wreg     unsigned char 
 14452 ;; Auto vars:     Size  Location     Type
 14453 ;;  c               1    2[BANK0 ] unsigned char 
 14454 ;; Return value:  Size  Location     Type
 14455 ;;		None               void
 14456 ;; Registers used:
 14457 ;;		wreg, status,2, status,0
 14458 ;; Tracked objects:
 14459 ;;		On entry : 0/0
 14460 ;;		On exit  : 0/0
 14461 ;;		Unchanged: 0/0
 14462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14464 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14465 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14466 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14467 ;;Total ram usage:        3 bytes
 14468 ;; Hardware stack levels used:    1
 14469 ;; Hardware stack levels required when called:    7
 14470 ;; This function calls:
 14471 ;;		Nothing
 14472 ;; This function is called by:
 14473 ;;		_printf
 14474 ;; This function uses a non-reentrant model
 14475 ;;
 14476                           
 14477                           	psect	text50
 14478  0045FC                     __ptext50:
 14479                           	opt stack 0
 14480  0045FC                     _isdigit:
 14481                           	opt stack 19
 14482                           
 14483                           ;incstack = 0
 14484                           ;isdigit@c stored from wreg
 14485  0045FC  0100               	movlb	0	; () banked
 14486  0045FE  6F82               	movwf	isdigit@c& (0+255),b
 14487  004600  0E00               	movlw	0
 14488  004602  0100               	movlb	0	; () banked
 14489  004604  6F81               	movwf	_isdigit$1942& (0+255),b
 14490                           
 14491                           ; BSR set to: 0
 14492  004606  0E3A               	movlw	58
 14493  004608  0100               	movlb	0	; () banked
 14494  00460A  6182               	cpfslt	isdigit@c& (0+255),b
 14495  00460C  D007               	goto	l5271
 14496                           
 14497                           ; BSR set to: 0
 14498  00460E  0E2F               	movlw	47
 14499  004610  0100               	movlb	0	; () banked
 14500  004612  6582               	cpfsgt	isdigit@c& (0+255),b
 14501  004614  D003               	goto	l5271
 14502                           
 14503                           ; BSR set to: 0
 14504  004616  0E01               	movlw	1
 14505  004618  0100               	movlb	0	; () banked
 14506  00461A  6F81               	movwf	_isdigit$1942& (0+255),b
 14507  00461C                     l5271:
 14508                           
 14509                           ; BSR set to: 0
 14510  00461C  C081  F080         	movff	_isdigit$1942,??_isdigit
 14511  004620  0100               	movlb	0	; () banked
 14512  004622  3180               	rrcf	??_isdigit& (0+255),w,b
 14513  004624  0012               	return	
 14514  004626                     __end_of_isdigit:
 14515                           	opt stack 0
 14516                           tblptru	equ	0xFF8
 14517                           tblptrh	equ	0xFF7
 14518                           tblptrl	equ	0xFF6
 14519                           tablat	equ	0xFF5
 14520                           prodh	equ	0xFF4
 14521                           prodl	equ	0xFF3
 14522                           intcon	equ	0xFF2
 14523                           intcon2	equ	0xFF1
 14524                           intcon3	equ	0xFF0
 14525                           indf0	equ	0xFEF
 14526                           postinc0	equ	0xFEE
 14527                           fsr0h	equ	0xFEA
 14528                           fsr0l	equ	0xFE9
 14529                           wreg	equ	0xFE8
 14530                           postdec1	equ	0xFE5
 14531                           fsr1l	equ	0xFE1
 14532                           indf2	equ	0xFDF
 14533                           postinc2	equ	0xFDE
 14534                           postdec2	equ	0xFDD
 14535                           fsr2h	equ	0xFDA
 14536                           fsr2l	equ	0xFD9
 14537                           status	equ	0xFD8
 14538                           
 14539 ;; *************** function ___wmul *****************
 14540 ;; Defined at:
 14541 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 14542 ;; Parameters:    Size  Location     Type
 14543 ;;  multiplier      2    0[BANK0 ] unsigned int 
 14544 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 14545 ;; Auto vars:     Size  Location     Type
 14546 ;;  product         2    4[BANK0 ] unsigned int 
 14547 ;; Return value:  Size  Location     Type
 14548 ;;                  2    0[BANK0 ] unsigned int 
 14549 ;; Registers used:
 14550 ;;		wreg, status,2, status,0, prodl, prodh
 14551 ;; Tracked objects:
 14552 ;;		On entry : 0/0
 14553 ;;		On exit  : 0/0
 14554 ;;		Unchanged: 0/0
 14555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14556 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14557 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14559 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14560 ;;Total ram usage:        6 bytes
 14561 ;; Hardware stack levels used:    1
 14562 ;; Hardware stack levels required when called:    7
 14563 ;; This function calls:
 14564 ;;		Nothing
 14565 ;; This function is called by:
 14566 ;;		_printf
 14567 ;; This function uses a non-reentrant model
 14568 ;;
 14569                           
 14570                           	psect	text51
 14571  0042D0                     __ptext51:
 14572                           	opt stack 0
 14573  0042D0                     ___wmul:
 14574                           	opt stack 19
 14575                           
 14576                           ; BSR set to: 0
 14577                           ;incstack = 0
 14578  0042D0  0100               	movlb	0	; () banked
 14579  0042D2  5180               	movf	___wmul@multiplier& (0+255),w,b
 14580  0042D4  0100               	movlb	0	; () banked
 14581  0042D6  0382               	mulwf	___wmul@multiplicand& (0+255),b
 14582  0042D8  CFF3 F084          	movff	prodl,___wmul@product
 14583  0042DC  CFF4 F085          	movff	prodh,___wmul@product+1
 14584  0042E0  0100               	movlb	0	; () banked
 14585  0042E2  5180               	movf	___wmul@multiplier& (0+255),w,b
 14586  0042E4  0100               	movlb	0	; () banked
 14587  0042E6  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 14588  0042E8  50F3               	movf	prodl,w,c
 14589  0042EA  0100               	movlb	0	; () banked
 14590  0042EC  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 14591  0042EE  0100               	movlb	0	; () banked
 14592  0042F0  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 14593  0042F2  0100               	movlb	0	; () banked
 14594  0042F4  0382               	mulwf	___wmul@multiplicand& (0+255),b
 14595  0042F6  50F3               	movf	prodl,w,c
 14596  0042F8  0100               	movlb	0	; () banked
 14597  0042FA  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 14598                           
 14599                           ; BSR set to: 0
 14600  0042FC  C084  F080         	movff	___wmul@product,?___wmul
 14601  004300  C085  F081         	movff	___wmul@product+1,?___wmul+1
 14602  004304  0012               	return	
 14603  004306                     __end_of___wmul:
 14604                           	opt stack 0
 14605                           tblptru	equ	0xFF8
 14606                           tblptrh	equ	0xFF7
 14607                           tblptrl	equ	0xFF6
 14608                           tablat	equ	0xFF5
 14609                           prodh	equ	0xFF4
 14610                           prodl	equ	0xFF3
 14611                           intcon	equ	0xFF2
 14612                           intcon2	equ	0xFF1
 14613                           intcon3	equ	0xFF0
 14614                           indf0	equ	0xFEF
 14615                           postinc0	equ	0xFEE
 14616                           fsr0h	equ	0xFEA
 14617                           fsr0l	equ	0xFE9
 14618                           wreg	equ	0xFE8
 14619                           postdec1	equ	0xFE5
 14620                           fsr1l	equ	0xFE1
 14621                           indf2	equ	0xFDF
 14622                           postinc2	equ	0xFDE
 14623                           postdec2	equ	0xFDD
 14624                           fsr2h	equ	0xFDA
 14625                           fsr2l	equ	0xFD9
 14626                           status	equ	0xFD8
 14627                           
 14628 ;; *************** function ___lwmod *****************
 14629 ;; Defined at:
 14630 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 14631 ;; Parameters:    Size  Location     Type
 14632 ;;  dividend        2    7[BANK0 ] unsigned int 
 14633 ;;  divisor         2    9[BANK0 ] unsigned int 
 14634 ;; Auto vars:     Size  Location     Type
 14635 ;;  counter         1   11[BANK0 ] unsigned char 
 14636 ;; Return value:  Size  Location     Type
 14637 ;;                  2    7[BANK0 ] unsigned int 
 14638 ;; Registers used:
 14639 ;;		wreg, status,2, status,0
 14640 ;; Tracked objects:
 14641 ;;		On entry : 0/0
 14642 ;;		On exit  : 0/0
 14643 ;;		Unchanged: 0/0
 14644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14645 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14646 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14648 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14649 ;;Total ram usage:        5 bytes
 14650 ;; Hardware stack levels used:    1
 14651 ;; Hardware stack levels required when called:    7
 14652 ;; This function calls:
 14653 ;;		Nothing
 14654 ;; This function is called by:
 14655 ;;		_printf
 14656 ;; This function uses a non-reentrant model
 14657 ;;
 14658                           
 14659                           	psect	text52
 14660  003DF2                     __ptext52:
 14661                           	opt stack 0
 14662  003DF2                     ___lwmod:
 14663                           	opt stack 19
 14664                           
 14665                           ; BSR set to: 0
 14666                           ;incstack = 0
 14667  003DF2  0100               	movlb	0	; () banked
 14668  003DF4  5189               	movf	___lwmod@divisor& (0+255),w,b
 14669  003DF6  0100               	movlb	0	; () banked
 14670  003DF8  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 14671  003DFA  B4D8               	btfsc	status,2,c
 14672  003DFC  D026               	goto	l1716
 14673                           
 14674                           ; BSR set to: 0
 14675  003DFE  0E01               	movlw	1
 14676  003E00  0100               	movlb	0	; () banked
 14677  003E02  6F8B               	movwf	___lwmod@counter& (0+255),b
 14678  003E04  D006               	goto	l5309
 14679  003E06                     l5307:
 14680                           
 14681                           ; BSR set to: 0
 14682  003E06  0100               	movlb	0	; () banked
 14683  003E08  90D8               	bcf	status,0,c
 14684  003E0A  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 14685  003E0C  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 14686  003E0E  0100               	movlb	0	; () banked
 14687  003E10  2B8B               	incf	___lwmod@counter& (0+255),f,b
 14688  003E12                     l5309:
 14689                           
 14690                           ; BSR set to: 0
 14691  003E12  0100               	movlb	0	; () banked
 14692  003E14  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 14693  003E16  D7F7               	goto	l5307
 14694  003E18                     l5311:
 14695                           
 14696                           ; BSR set to: 0
 14697  003E18  0100               	movlb	0	; () banked
 14698  003E1A  5189               	movf	___lwmod@divisor& (0+255),w,b
 14699  003E1C  0100               	movlb	0	; () banked
 14700  003E1E  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 14701  003E20  0100               	movlb	0	; () banked
 14702  003E22  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 14703  003E24  0100               	movlb	0	; () banked
 14704  003E26  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 14705  003E28  A0D8               	btfss	status,0,c
 14706  003E2A  D008               	goto	l5315
 14707                           
 14708                           ; BSR set to: 0
 14709  003E2C  0100               	movlb	0	; () banked
 14710  003E2E  5189               	movf	___lwmod@divisor& (0+255),w,b
 14711  003E30  0100               	movlb	0	; () banked
 14712  003E32  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 14713  003E34  0100               	movlb	0	; () banked
 14714  003E36  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 14715  003E38  0100               	movlb	0	; () banked
 14716  003E3A  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 14717  003E3C                     l5315:
 14718                           
 14719                           ; BSR set to: 0
 14720  003E3C  0100               	movlb	0	; () banked
 14721  003E3E  90D8               	bcf	status,0,c
 14722  003E40  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 14723  003E42  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 14724                           
 14725                           ; BSR set to: 0
 14726  003E44  0100               	movlb	0	; () banked
 14727  003E46  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 14728  003E48  D7E7               	goto	l5311
 14729  003E4A                     l1716:
 14730                           
 14731                           ; BSR set to: 0
 14732  003E4A  C087  F087         	movff	___lwmod@dividend,?___lwmod
 14733  003E4E  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 14734                           
 14735                           ; BSR set to: 0
 14736  003E52  0012               	return		;funcret
 14737  003E54                     __end_of___lwmod:
 14738                           	opt stack 0
 14739                           tblptru	equ	0xFF8
 14740                           tblptrh	equ	0xFF7
 14741                           tblptrl	equ	0xFF6
 14742                           tablat	equ	0xFF5
 14743                           prodh	equ	0xFF4
 14744                           prodl	equ	0xFF3
 14745                           intcon	equ	0xFF2
 14746                           intcon2	equ	0xFF1
 14747                           intcon3	equ	0xFF0
 14748                           indf0	equ	0xFEF
 14749                           postinc0	equ	0xFEE
 14750                           fsr0h	equ	0xFEA
 14751                           fsr0l	equ	0xFE9
 14752                           wreg	equ	0xFE8
 14753                           postdec1	equ	0xFE5
 14754                           fsr1l	equ	0xFE1
 14755                           indf2	equ	0xFDF
 14756                           postinc2	equ	0xFDE
 14757                           postdec2	equ	0xFDD
 14758                           fsr2h	equ	0xFDA
 14759                           fsr2l	equ	0xFD9
 14760                           status	equ	0xFD8
 14761                           
 14762 ;; *************** function ___lwdiv *****************
 14763 ;; Defined at:
 14764 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 14765 ;; Parameters:    Size  Location     Type
 14766 ;;  dividend        2    0[BANK0 ] unsigned int 
 14767 ;;  divisor         2    2[BANK0 ] unsigned int 
 14768 ;; Auto vars:     Size  Location     Type
 14769 ;;  quotient        2    4[BANK0 ] unsigned int 
 14770 ;;  counter         1    6[BANK0 ] unsigned char 
 14771 ;; Return value:  Size  Location     Type
 14772 ;;                  2    0[BANK0 ] unsigned int 
 14773 ;; Registers used:
 14774 ;;		wreg, status,2, status,0
 14775 ;; Tracked objects:
 14776 ;;		On entry : 0/0
 14777 ;;		On exit  : 0/0
 14778 ;;		Unchanged: 0/0
 14779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14780 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14781 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14783 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14784 ;;Total ram usage:        7 bytes
 14785 ;; Hardware stack levels used:    1
 14786 ;; Hardware stack levels required when called:    7
 14787 ;; This function calls:
 14788 ;;		Nothing
 14789 ;; This function is called by:
 14790 ;;		_printf
 14791 ;; This function uses a non-reentrant model
 14792 ;;
 14793                           
 14794                           	psect	text53
 14795  003BC2                     __ptext53:
 14796                           	opt stack 0
 14797  003BC2                     ___lwdiv:
 14798                           	opt stack 19
 14799                           
 14800                           ; BSR set to: 0
 14801                           ;incstack = 0
 14802  003BC2  0E00               	movlw	0
 14803  003BC4  0100               	movlb	0	; () banked
 14804  003BC6  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 14805  003BC8  0E00               	movlw	0
 14806  003BCA  6F84               	movwf	___lwdiv@quotient& (0+255),b
 14807                           
 14808                           ; BSR set to: 0
 14809  003BCC  0100               	movlb	0	; () banked
 14810  003BCE  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14811  003BD0  0100               	movlb	0	; () banked
 14812  003BD2  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 14813  003BD4  B4D8               	btfsc	status,2,c
 14814  003BD6  D02C               	goto	l1706
 14815                           
 14816                           ; BSR set to: 0
 14817  003BD8  0E01               	movlw	1
 14818  003BDA  0100               	movlb	0	; () banked
 14819  003BDC  6F86               	movwf	___lwdiv@counter& (0+255),b
 14820  003BDE  D006               	goto	l5289
 14821  003BE0                     l5287:
 14822                           
 14823                           ; BSR set to: 0
 14824  003BE0  0100               	movlb	0	; () banked
 14825  003BE2  90D8               	bcf	status,0,c
 14826  003BE4  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 14827  003BE6  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 14828  003BE8  0100               	movlb	0	; () banked
 14829  003BEA  2B86               	incf	___lwdiv@counter& (0+255),f,b
 14830  003BEC                     l5289:
 14831                           
 14832                           ; BSR set to: 0
 14833  003BEC  0100               	movlb	0	; () banked
 14834  003BEE  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 14835  003BF0  D7F7               	goto	l5287
 14836  003BF2                     l5291:
 14837                           
 14838                           ; BSR set to: 0
 14839  003BF2  0100               	movlb	0	; () banked
 14840  003BF4  90D8               	bcf	status,0,c
 14841  003BF6  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 14842  003BF8  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 14843                           
 14844                           ; BSR set to: 0
 14845  003BFA  0100               	movlb	0	; () banked
 14846  003BFC  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14847  003BFE  0100               	movlb	0	; () banked
 14848  003C00  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 14849  003C02  0100               	movlb	0	; () banked
 14850  003C04  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 14851  003C06  0100               	movlb	0	; () banked
 14852  003C08  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 14853  003C0A  A0D8               	btfss	status,0,c
 14854  003C0C  D00A               	goto	l5299
 14855                           
 14856                           ; BSR set to: 0
 14857  003C0E  0100               	movlb	0	; () banked
 14858  003C10  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14859  003C12  0100               	movlb	0	; () banked
 14860  003C14  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 14861  003C16  0100               	movlb	0	; () banked
 14862  003C18  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 14863  003C1A  0100               	movlb	0	; () banked
 14864  003C1C  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 14865                           
 14866                           ; BSR set to: 0
 14867  003C1E  0100               	movlb	0	; () banked
 14868  003C20  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 14869  003C22                     l5299:
 14870                           
 14871                           ; BSR set to: 0
 14872  003C22  0100               	movlb	0	; () banked
 14873  003C24  90D8               	bcf	status,0,c
 14874  003C26  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 14875  003C28  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 14876                           
 14877                           ; BSR set to: 0
 14878  003C2A  0100               	movlb	0	; () banked
 14879  003C2C  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 14880  003C2E  D7E1               	goto	l5291
 14881  003C30                     l1706:
 14882                           
 14883                           ; BSR set to: 0
 14884  003C30  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 14885  003C34  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 14886                           
 14887                           ; BSR set to: 0
 14888  003C38  0012               	return		;funcret
 14889  003C3A                     __end_of___lwdiv:
 14890                           	opt stack 0
 14891                           tblptru	equ	0xFF8
 14892                           tblptrh	equ	0xFF7
 14893                           tblptrl	equ	0xFF6
 14894                           tablat	equ	0xFF5
 14895                           prodh	equ	0xFF4
 14896                           prodl	equ	0xFF3
 14897                           intcon	equ	0xFF2
 14898                           intcon2	equ	0xFF1
 14899                           intcon3	equ	0xFF0
 14900                           indf0	equ	0xFEF
 14901                           postinc0	equ	0xFEE
 14902                           fsr0h	equ	0xFEA
 14903                           fsr0l	equ	0xFE9
 14904                           wreg	equ	0xFE8
 14905                           postdec1	equ	0xFE5
 14906                           fsr1l	equ	0xFE1
 14907                           indf2	equ	0xFDF
 14908                           postinc2	equ	0xFDE
 14909                           postdec2	equ	0xFDD
 14910                           fsr2h	equ	0xFDA
 14911                           fsr2l	equ	0xFD9
 14912                           status	equ	0xFD8
 14913                           
 14914 ;; *************** function _lcdInst *****************
 14915 ;; Defined at:
 14916 ;;		line 15 in file "lcd.c"
 14917 ;; Parameters:    Size  Location     Type
 14918 ;;  data            1    wreg     unsigned char 
 14919 ;; Auto vars:     Size  Location     Type
 14920 ;;  data            1    2[BANK0 ] unsigned char 
 14921 ;; Return value:  Size  Location     Type
 14922 ;;                  1    wreg      void 
 14923 ;; Registers used:
 14924 ;;		wreg, status,2, status,0, cstack
 14925 ;; Tracked objects:
 14926 ;;		On entry : 0/0
 14927 ;;		On exit  : 0/0
 14928 ;;		Unchanged: 0/0
 14929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14931 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14933 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14934 ;;Total ram usage:        1 bytes
 14935 ;; Hardware stack levels used:    1
 14936 ;; Hardware stack levels required when called:    8
 14937 ;; This function calls:
 14938 ;;		_lcdNibble
 14939 ;; This function is called by:
 14940 ;;		_UI
 14941 ;;		_change_state_to_menu_start
 14942 ;;		_change_state_to_menu_12
 14943 ;;		_change_state_to_menu_22
 14944 ;;		_initLCD
 14945 ;;		_printRTC
 14946 ;;		_Loading
 14947 ;;		_EEPROM_write
 14948 ;;		_Test
 14949 ;;		_algorithmTest
 14950 ;;		_sensorTest
 14951 ;;		_actuatorTest
 14952 ;;		_BothServos
 14953 ;;		_PortTestA5
 14954 ;;		_PusherTestA5
 14955 ;;		_ToggleTestA5
 14956 ;; This function uses a non-reentrant model
 14957 ;;
 14958                           
 14959                           	psect	text54
 14960  0047C2                     __ptext54:
 14961                           	opt stack 0
 14962  0047C2                     _lcdInst:
 14963                           	opt stack 20
 14964                           
 14965                           ; BSR set to: 0
 14966                           ;incstack = 0
 14967                           ;lcdInst@data stored from wreg
 14968  0047C2  0100               	movlb	0	; () banked
 14969  0047C4  6F82               	movwf	lcdInst@data& (0+255),b
 14970                           
 14971                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 14972  0047C6  948C               	bcf	3980,2,c	;volatile
 14973                           
 14974                           ;lcd.c: 17: lcdNibble(data);
 14975  0047C8  0100               	movlb	0	; () banked
 14976  0047CA  5182               	movf	lcdInst@data& (0+255),w,b
 14977  0047CC  ECC5  F01E         	call	_lcdNibble
 14978  0047D0  0012               	return		;funcret
 14979  0047D2                     __end_of_lcdInst:
 14980                           	opt stack 0
 14981                           tblptru	equ	0xFF8
 14982                           tblptrh	equ	0xFF7
 14983                           tblptrl	equ	0xFF6
 14984                           tablat	equ	0xFF5
 14985                           prodh	equ	0xFF4
 14986                           prodl	equ	0xFF3
 14987                           intcon	equ	0xFF2
 14988                           intcon2	equ	0xFF1
 14989                           intcon3	equ	0xFF0
 14990                           indf0	equ	0xFEF
 14991                           postinc0	equ	0xFEE
 14992                           fsr0h	equ	0xFEA
 14993                           fsr0l	equ	0xFE9
 14994                           wreg	equ	0xFE8
 14995                           postdec1	equ	0xFE5
 14996                           fsr1l	equ	0xFE1
 14997                           indf2	equ	0xFDF
 14998                           postinc2	equ	0xFDE
 14999                           postdec2	equ	0xFDD
 15000                           fsr2h	equ	0xFDA
 15001                           fsr2l	equ	0xFD9
 15002                           status	equ	0xFD8
 15003                           
 15004 ;; *************** function _lcdNibble *****************
 15005 ;; Defined at:
 15006 ;;		line 25 in file "lcd.c"
 15007 ;; Parameters:    Size  Location     Type
 15008 ;;  data            1    wreg     unsigned char 
 15009 ;; Auto vars:     Size  Location     Type
 15010 ;;  data            1    1[BANK0 ] unsigned char 
 15011 ;;  temp            1    0[BANK0 ] unsigned char 
 15012 ;; Return value:  Size  Location     Type
 15013 ;;                  1    wreg      void 
 15014 ;; Registers used:
 15015 ;;		wreg, status,2, status,0
 15016 ;; Tracked objects:
 15017 ;;		On entry : 0/0
 15018 ;;		On exit  : 0/0
 15019 ;;		Unchanged: 0/0
 15020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15022 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15024 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15025 ;;Total ram usage:        2 bytes
 15026 ;; Hardware stack levels used:    1
 15027 ;; Hardware stack levels required when called:    7
 15028 ;; This function calls:
 15029 ;;		Nothing
 15030 ;; This function is called by:
 15031 ;;		_lcdInst
 15032 ;;		_putch
 15033 ;; This function uses a non-reentrant model
 15034 ;;
 15035                           
 15036                           	psect	text55
 15037  003D8A                     __ptext55:
 15038                           	opt stack 0
 15039  003D8A                     _lcdNibble:
 15040                           	opt stack 20
 15041                           
 15042                           ;incstack = 0
 15043                           ;lcdNibble@data stored from wreg
 15044  003D8A  0100               	movlb	0	; () banked
 15045  003D8C  6F81               	movwf	lcdNibble@data& (0+255),b
 15046                           
 15047                           ;lcd.c: 27: char temp = data & 0xF0;
 15048  003D8E  0100               	movlb	0	; () banked
 15049  003D90  5181               	movf	lcdNibble@data& (0+255),w,b
 15050  003D92  0BF0               	andlw	240
 15051  003D94  0100               	movlb	0	; () banked
 15052  003D96  6F80               	movwf	lcdNibble@temp& (0+255),b
 15053                           
 15054                           ;lcd.c: 28: LATD = LATD & 0x0F;
 15055  003D98  508C               	movf	3980,w,c	;volatile
 15056  003D9A  0B0F               	andlw	15
 15057  003D9C  6E8C               	movwf	3980,c	;volatile
 15058                           
 15059                           ;lcd.c: 29: LATD = temp | LATD;
 15060  003D9E  0100               	movlb	0	; () banked
 15061  003DA0  5180               	movf	lcdNibble@temp& (0+255),w,b
 15062  003DA2  108C               	iorwf	3980,w,c	;volatile
 15063  003DA4  6E8C               	movwf	3980,c	;volatile
 15064                           
 15065                           ; BSR set to: 0
 15066                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 15067  003DA6  868C               	bsf	3980,3,c	;volatile
 15068                           
 15069                           ; BSR set to: 0
 15070                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15071  003DA8  0E42               	movlw	66
 15072  003DAA                     u8207:
 15073  003DAA  2EE8               	decfsz	wreg,f,c
 15074  003DAC  D7FE               	bra	u8207
 15075  003DAE  D000               	nop2	
 15076                           
 15077                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 15078  003DB0  968C               	bcf	3980,3,c	;volatile
 15079                           
 15080                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15081  003DB2  0E42               	movlw	66
 15082  003DB4                     u8217:
 15083  003DB4  2EE8               	decfsz	wreg,f,c
 15084  003DB6  D7FE               	bra	u8217
 15085  003DB8  D000               	nop2	
 15086                           
 15087                           ;lcd.c: 36: data = data << 4;
 15088  003DBA  0100               	movlb	0	; () banked
 15089  003DBC  3981               	swapf	lcdNibble@data& (0+255),w,b
 15090  003DBE  0BF0               	andlw	240
 15091  003DC0  0100               	movlb	0	; () banked
 15092  003DC2  6F81               	movwf	lcdNibble@data& (0+255),b
 15093                           
 15094                           ;lcd.c: 38: temp = data & 0xF0;
 15095  003DC4  0100               	movlb	0	; () banked
 15096  003DC6  5181               	movf	lcdNibble@data& (0+255),w,b
 15097  003DC8  0BF0               	andlw	240
 15098  003DCA  0100               	movlb	0	; () banked
 15099  003DCC  6F80               	movwf	lcdNibble@temp& (0+255),b
 15100                           
 15101                           ;lcd.c: 39: LATD = LATD & 0x0F;
 15102  003DCE  508C               	movf	3980,w,c	;volatile
 15103  003DD0  0B0F               	andlw	15
 15104  003DD2  6E8C               	movwf	3980,c	;volatile
 15105                           
 15106                           ;lcd.c: 40: LATD = temp | LATD;
 15107  003DD4  0100               	movlb	0	; () banked
 15108  003DD6  5180               	movf	lcdNibble@temp& (0+255),w,b
 15109  003DD8  108C               	iorwf	3980,w,c	;volatile
 15110  003DDA  6E8C               	movwf	3980,c	;volatile
 15111                           
 15112                           ; BSR set to: 0
 15113                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 15114  003DDC  868C               	bsf	3980,3,c	;volatile
 15115                           
 15116                           ; BSR set to: 0
 15117                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15118  003DDE  0E42               	movlw	66
 15119  003DE0                     u8227:
 15120  003DE0  2EE8               	decfsz	wreg,f,c
 15121  003DE2  D7FE               	bra	u8227
 15122  003DE4  D000               	nop2	
 15123                           
 15124                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 15125  003DE6  968C               	bcf	3980,3,c	;volatile
 15126                           
 15127                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15128  003DE8  0E42               	movlw	66
 15129  003DEA                     u8237:
 15130  003DEA  2EE8               	decfsz	wreg,f,c
 15131  003DEC  D7FE               	bra	u8237
 15132  003DEE  D000               	nop2	
 15133  003DF0  0012               	return		;funcret
 15134  003DF2                     __end_of_lcdNibble:
 15135                           	opt stack 0
 15136                           tblptru	equ	0xFF8
 15137                           tblptrh	equ	0xFF7
 15138                           tblptrl	equ	0xFF6
 15139                           tablat	equ	0xFF5
 15140                           prodh	equ	0xFF4
 15141                           prodl	equ	0xFF3
 15142                           intcon	equ	0xFF2
 15143                           intcon2	equ	0xFF1
 15144                           intcon3	equ	0xFF0
 15145                           indf0	equ	0xFEF
 15146                           postinc0	equ	0xFEE
 15147                           fsr0h	equ	0xFEA
 15148                           fsr0l	equ	0xFE9
 15149                           wreg	equ	0xFE8
 15150                           postdec1	equ	0xFE5
 15151                           fsr1l	equ	0xFE1
 15152                           indf2	equ	0xFDF
 15153                           postinc2	equ	0xFDE
 15154                           postdec2	equ	0xFDD
 15155                           fsr2h	equ	0xFDA
 15156                           fsr2l	equ	0xFD9
 15157                           status	equ	0xFD8
 15158                           
 15159 ;; *************** function _initServos *****************
 15160 ;; Defined at:
 15161 ;;		line 273 in file "sort.c"
 15162 ;; Parameters:    Size  Location     Type
 15163 ;;		None
 15164 ;; Auto vars:     Size  Location     Type
 15165 ;;		None
 15166 ;; Return value:  Size  Location     Type
 15167 ;;                  1    wreg      void 
 15168 ;; Registers used:
 15169 ;;		wreg, status,2, status,0, cstack
 15170 ;; Tracked objects:
 15171 ;;		On entry : 0/0
 15172 ;;		On exit  : 0/0
 15173 ;;		Unchanged: 0/0
 15174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15176 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15177 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15178 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15179 ;;Total ram usage:        1 bytes
 15180 ;; Hardware stack levels used:    1
 15181 ;; Hardware stack levels required when called:    8
 15182 ;; This function calls:
 15183 ;;		_updateServoPosition
 15184 ;; This function is called by:
 15185 ;;		_Loading
 15186 ;;		_BothServos
 15187 ;; This function uses a non-reentrant model
 15188 ;;
 15189                           
 15190                           	psect	text56
 15191  003F10                     __ptext56:
 15192                           	opt stack 0
 15193  003F10                     _initServos:
 15194                           	opt stack 20
 15195                           
 15196                           ;sort.c: 274: updateServoPosition(1200, 1);
 15197                           
 15198                           ;incstack = 0
 15199  003F10  0E04               	movlw	4
 15200  003F12  0100               	movlb	0	; () banked
 15201  003F14  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15202  003F16  0EB0               	movlw	176
 15203  003F18  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15204  003F1A  0E00               	movlw	0
 15205  003F1C  0100               	movlb	0	; () banked
 15206  003F1E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15207  003F20  0E01               	movlw	1
 15208  003F22  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15209  003F24  EC1D  F01E         	call	_updateServoPosition	;wreg free
 15210                           
 15211                           ;sort.c: 275: updateServoPosition(1150, 3);
 15212  003F28  0E04               	movlw	4
 15213  003F2A  0100               	movlb	0	; () banked
 15214  003F2C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15215  003F2E  0E7E               	movlw	126
 15216  003F30  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15217  003F32  0E00               	movlw	0
 15218  003F34  0100               	movlb	0	; () banked
 15219  003F36  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15220  003F38  0E03               	movlw	3
 15221  003F3A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15222  003F3C  EC1D  F01E         	call	_updateServoPosition	;wreg free
 15223                           
 15224                           ;sort.c: 276: TMR1ON = 1;
 15225  003F40  80CD               	bsf	4045,0,c	;volatile
 15226                           
 15227                           ;sort.c: 277: was_low_1 = 0;
 15228  003F42  0E00               	movlw	0
 15229  003F44  6E7A               	movwf	_was_low_1+1,c	;volatile
 15230  003F46  0E00               	movlw	0
 15231  003F48  6E79               	movwf	_was_low_1,c	;volatile
 15232                           
 15233                           ;sort.c: 278: _delay((unsigned long)((5)*(32000000/4000.0)));
 15234  003F4A  0E34               	movlw	52
 15235  003F4C  0100               	movlb	0	; () banked
 15236  003F4E  6F88               	movwf	??_initServos& (0+255),b
 15237  003F50  0EF1               	movlw	241
 15238  003F52                     u8247:
 15239  003F52  2EE8               	decfsz	wreg,f,c
 15240  003F54  D7FE               	bra	u8247
 15241  003F56  2F88               	decfsz	??_initServos& (0+255),f,b
 15242  003F58  D7FC               	bra	u8247
 15243  003F5A  D000               	nop2	
 15244                           
 15245                           ;sort.c: 279: TMR3ON = 1;
 15246  003F5C  80B1               	bsf	4017,0,c	;volatile
 15247                           
 15248                           ;sort.c: 280: was_low_3 = 0;
 15249  003F5E  0E00               	movlw	0
 15250  003F60  6E7C               	movwf	_was_low_3+1,c	;volatile
 15251  003F62  0E00               	movlw	0
 15252  003F64  6E7B               	movwf	_was_low_3,c	;volatile
 15253                           
 15254                           ;sort.c: 282: LATCbits.LATC0 = 1;
 15255  003F66  808B               	bsf	3979,0,c	;volatile
 15256  003F68  0012               	return		;funcret
 15257  003F6A                     __end_of_initServos:
 15258                           	opt stack 0
 15259                           tblptru	equ	0xFF8
 15260                           tblptrh	equ	0xFF7
 15261                           tblptrl	equ	0xFF6
 15262                           tablat	equ	0xFF5
 15263                           prodh	equ	0xFF4
 15264                           prodl	equ	0xFF3
 15265                           intcon	equ	0xFF2
 15266                           intcon2	equ	0xFF1
 15267                           intcon3	equ	0xFF0
 15268                           indf0	equ	0xFEF
 15269                           postinc0	equ	0xFEE
 15270                           fsr0h	equ	0xFEA
 15271                           fsr0l	equ	0xFE9
 15272                           wreg	equ	0xFE8
 15273                           postdec1	equ	0xFE5
 15274                           fsr1l	equ	0xFE1
 15275                           indf2	equ	0xFDF
 15276                           postinc2	equ	0xFDE
 15277                           postdec2	equ	0xFDD
 15278                           fsr2h	equ	0xFDA
 15279                           fsr2l	equ	0xFD9
 15280                           status	equ	0xFD8
 15281                           
 15282 ;; *************** function _updateServoPosition *****************
 15283 ;; Defined at:
 15284 ;;		line 334 in file "sort.c"
 15285 ;; Parameters:    Size  Location     Type
 15286 ;;  time_us         2    0[BANK0 ] int 
 15287 ;;  timer           2    2[BANK0 ] int 
 15288 ;; Auto vars:     Size  Location     Type
 15289 ;;  my_time         2    6[BANK0 ] unsigned int 
 15290 ;; Return value:  Size  Location     Type
 15291 ;;                  1    wreg      void 
 15292 ;; Registers used:
 15293 ;;		wreg, status,2, status,0
 15294 ;; Tracked objects:
 15295 ;;		On entry : 0/0
 15296 ;;		On exit  : 0/0
 15297 ;;		Unchanged: 0/0
 15298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15299 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15300 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15301 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15302 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15303 ;;Total ram usage:        8 bytes
 15304 ;; Hardware stack levels used:    1
 15305 ;; Hardware stack levels required when called:    7
 15306 ;; This function calls:
 15307 ;;		Nothing
 15308 ;; This function is called by:
 15309 ;;		_Distribution
 15310 ;;		_initServos
 15311 ;;		_actuatorTest
 15312 ;;		_BothServos
 15313 ;; This function uses a non-reentrant model
 15314 ;;
 15315                           
 15316                           	psect	text57
 15317  003C3A                     __ptext57:
 15318                           	opt stack 0
 15319  003C3A                     _updateServoPosition:
 15320                           	opt stack 20
 15321                           
 15322                           ;sort.c: 335: unsigned int my_time = 65535 - time_us;
 15323                           
 15324                           ;incstack = 0
 15325  003C3A  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 15326  003C3E  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 15327  003C42  0100               	movlb	0	; () banked
 15328  003C44  1F84               	comf	??_updateServoPosition& (0+255),f,b
 15329  003C46  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 15330  003C48  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 15331  003C4A  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 15332  003C4C  0EFF               	movlw	255
 15333  003C4E  0100               	movlb	0	; () banked
 15334  003C50  2584               	addwf	??_updateServoPosition& (0+255),w,b
 15335  003C52  0100               	movlb	0	; () banked
 15336  003C54  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 15337  003C56  0EFF               	movlw	255
 15338  003C58  0100               	movlb	0	; () banked
 15339  003C5A  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 15340  003C5C  0100               	movlb	0	; () banked
 15341  003C5E  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 15342                           
 15343                           ;sort.c: 336: switch(timer){
 15344  003C60  D015               	goto	l5595
 15345  003C62                     l5593:
 15346                           
 15347                           ; BSR set to: 0
 15348                           ;sort.c: 338: servoTimes[0] = my_time >> 8;
 15349  003C62  0100               	movlb	0	; () banked
 15350  003C64  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15351  003C66  0101               	movlb	1	; () banked
 15352  003C68  6F1C               	movwf	_servoTimes& (0+255),b
 15353  003C6A  6B1D               	clrf	(_servoTimes+1)& (0+255),b
 15354                           
 15355                           ;sort.c: 339: servoTimes[1] = my_time & 0xFF;
 15356  003C6C  0100               	movlb	0	; () banked
 15357  003C6E  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15358  003C70  0101               	movlb	1	; () banked
 15359  003C72  6F1E               	movwf	(_servoTimes+2)& (0+255),b
 15360  003C74  6B1F               	clrf	(_servoTimes+3)& (0+255),b
 15361  003C76                     l796:
 15362                           
 15363                           ;sort.c: 341: servoTimes[2] = my_time >> 8;
 15364  003C76  0100               	movlb	0	; () banked
 15365  003C78  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15366  003C7A  0101               	movlb	1	; () banked
 15367  003C7C  6F20               	movwf	(_servoTimes+4)& (0+255),b
 15368  003C7E  6B21               	clrf	(_servoTimes+5)& (0+255),b
 15369                           
 15370                           ;sort.c: 342: servoTimes[3] = my_time & 0xFF;
 15371  003C80  0100               	movlb	0	; () banked
 15372  003C82  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15373  003C84  0101               	movlb	1	; () banked
 15374  003C86  6F22               	movwf	(_servoTimes+6)& (0+255),b
 15375  003C88  6B23               	clrf	(_servoTimes+7)& (0+255),b
 15376                           
 15377                           ;sort.c: 343: }
 15378  003C8A  0012               	return	
 15379  003C8C                     l5595:
 15380  003C8C  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 15381  003C90  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 15382                           
 15383                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15384                           ; Switch size 1, requested type "space"
 15385                           ; Number of cases is 1, Range of values is 0 to 0
 15386                           ; switch strategies available:
 15387                           ; Name         Instructions Cycles
 15388                           ; simple_byte            4     3 (average)
 15389                           ;	Chosen strategy is simple_byte
 15390  003C94  0100               	movlb	0	; () banked
 15391  003C96  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 15392  003C98  0A00               	xorlw	0	; case 0
 15393  003C9A  A4D8               	btfss	status,2,c
 15394  003C9C  0012               	return	
 15395                           
 15396                           ; BSR set to: 0
 15397                           ; Switch size 1, requested type "space"
 15398                           ; Number of cases is 2, Range of values is 1 to 3
 15399                           ; switch strategies available:
 15400                           ; Name         Instructions Cycles
 15401                           ; simple_byte            7     4 (average)
 15402                           ;	Chosen strategy is simple_byte
 15403  003C9E  0100               	movlb	0	; () banked
 15404  003CA0  5184               	movf	??_updateServoPosition& (0+255),w,b
 15405  003CA2  0A01               	xorlw	1	; case 1
 15406  003CA4  B4D8               	btfsc	status,2,c
 15407  003CA6  D7DD               	goto	l5593
 15408  003CA8  0A02               	xorlw	2	; case 3
 15409  003CAA  A4D8               	btfss	status,2,c
 15410  003CAC  0012               	return	
 15411  003CAE  D7E3               	goto	l796
 15412  003CB0                     __end_of_updateServoPosition:
 15413                           	opt stack 0
 15414                           tblptru	equ	0xFF8
 15415                           tblptrh	equ	0xFF7
 15416                           tblptrl	equ	0xFF6
 15417                           tablat	equ	0xFF5
 15418                           prodh	equ	0xFF4
 15419                           prodl	equ	0xFF3
 15420                           intcon	equ	0xFF2
 15421                           intcon2	equ	0xFF1
 15422                           intcon3	equ	0xFF0
 15423                           indf0	equ	0xFEF
 15424                           postinc0	equ	0xFEE
 15425                           fsr0h	equ	0xFEA
 15426                           fsr0l	equ	0xFE9
 15427                           wreg	equ	0xFE8
 15428                           postdec1	equ	0xFE5
 15429                           fsr1l	equ	0xFE1
 15430                           indf2	equ	0xFDF
 15431                           postinc2	equ	0xFDE
 15432                           postdec2	equ	0xFDD
 15433                           fsr2h	equ	0xFDA
 15434                           fsr2l	equ	0xFD9
 15435                           status	equ	0xFD8
 15436                           
 15437 ;; *************** function _handler *****************
 15438 ;; Defined at:
 15439 ;;		line 16 in file "interruptHandler.c"
 15440 ;; Parameters:    Size  Location     Type
 15441 ;;		None
 15442 ;; Auto vars:     Size  Location     Type
 15443 ;;		None
 15444 ;; Return value:  Size  Location     Type
 15445 ;;                  1    wreg      void 
 15446 ;; Registers used:
 15447 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15448 ;; Tracked objects:
 15449 ;;		On entry : 0/0
 15450 ;;		On exit  : 0/0
 15451 ;;		Unchanged: 0/0
 15452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15455 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15456 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15457 ;;Total ram usage:       16 bytes
 15458 ;; Hardware stack levels used:    1
 15459 ;; Hardware stack levels required when called:    6
 15460 ;; This function calls:
 15461 ;;		_printSortTimer
 15462 ;;		_updateMenu
 15463 ;; This function is called by:
 15464 ;;		Interrupt level 2
 15465 ;; This function uses a non-reentrant model
 15466 ;;
 15467                           
 15468                           	psect	intcode
 15469  000008                     __pintcode:
 15470                           	opt stack 0
 15471  000008                     _handler:
 15472                           	opt stack 18
 15473                           
 15474                           ;incstack = 0
 15475  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 15476  00000A  ED20  F016         	call	int_func,f	;refresh shadow registers
 15477                           tblptru	equ	0xFF8
 15478                           tblptrh	equ	0xFF7
 15479                           tblptrl	equ	0xFF6
 15480                           tablat	equ	0xFF5
 15481                           prodh	equ	0xFF4
 15482                           prodl	equ	0xFF3
 15483                           intcon	equ	0xFF2
 15484                           intcon2	equ	0xFF1
 15485                           intcon3	equ	0xFF0
 15486                           indf0	equ	0xFEF
 15487                           postinc0	equ	0xFEE
 15488                           fsr0h	equ	0xFEA
 15489                           fsr0l	equ	0xFE9
 15490                           wreg	equ	0xFE8
 15491                           postdec1	equ	0xFE5
 15492                           fsr1l	equ	0xFE1
 15493                           indf2	equ	0xFDF
 15494                           postinc2	equ	0xFDE
 15495                           postdec2	equ	0xFDD
 15496                           fsr2h	equ	0xFDA
 15497                           fsr2l	equ	0xFD9
 15498                           status	equ	0xFD8
 15499                           
 15500                           	psect	intcode_body
 15501  002C40                     __pintcode_body:
 15502                           	opt stack 18
 15503  002C40                     int_func:
 15504                           	opt stack 18
 15505  002C40  0006               	pop		; remove dummy address from shadow register refresh
 15506  002C42  CFFA F04D          	movff	pclath,??_handler+2
 15507  002C46  CFFB F04E          	movff	pclatu,??_handler+3
 15508  002C4A  CFE9 F04F          	movff	fsr0l,??_handler+4
 15509  002C4E  CFEA F050          	movff	fsr0h,??_handler+5
 15510  002C52  CFE1 F051          	movff	fsr1l,??_handler+6
 15511  002C56  CFE2 F052          	movff	fsr1h,??_handler+7
 15512  002C5A  CFD9 F053          	movff	fsr2l,??_handler+8
 15513  002C5E  CFDA F054          	movff	fsr2h,??_handler+9
 15514  002C62  CFF3 F055          	movff	prodl,??_handler+10
 15515  002C66  CFF4 F056          	movff	prodh,??_handler+11
 15516  002C6A  CFF6 F057          	movff	tblptrl,??_handler+12
 15517  002C6E  CFF7 F058          	movff	tblptrh,??_handler+13
 15518  002C72  CFF8 F059          	movff	tblptru,??_handler+14
 15519  002C76  CFF5 F05A          	movff	tablat,??_handler+15
 15520                           
 15521                           ;interruptHandler.c: 18: if(INT1IF){
 15522  002C7A  A0F0               	btfss	intcon3,0,c	;volatile
 15523  002C7C  D020               	goto	i2l8123
 15524                           
 15525                           ;interruptHandler.c: 19: INT1IF = 0;
 15526  002C7E  90F0               	bcf	intcon3,0,c	;volatile
 15527                           
 15528                           ;interruptHandler.c: 20: if(machine_state == UI_state) {
 15529  002C80  0100               	movlb	0	; () banked
 15530  002C82  51FC               	movf	_machine_state& (0+255),w,b
 15531  002C84  A4D8               	btfss	status,2,c
 15532  002C86  D01B               	goto	i2l8123
 15533                           
 15534                           ; BSR set to: 0
 15535                           ;interruptHandler.c: 21: input = keys[(PORTB & 0xF0) >> 4];
 15536  002C88  3881               	swapf	3969,w,c	;volatile
 15537  002C8A  0B0F               	andlw	15
 15538  002C8C  0B0F               	andlw	15
 15539  002C8E  6E4B               	movwf	??_handler& (0+255),c
 15540  002C90  6A4C               	clrf	(??_handler+1)& (0+255),c
 15541  002C92  0E25               	movlw	low _keys
 15542  002C94  244B               	addwf	??_handler,w,c
 15543  002C96  6EF6               	movwf	tblptrl,c
 15544  002C98  0EFB               	movlw	high _keys
 15545  002C9A  204C               	addwfc	??_handler+1,w,c
 15546  002C9C  6EF7               	movwf	tblptrh,c
 15547  002C9E                     	if	1	;There are 3 active tblptr bytes
 15548  002C9E  6AF8               	clrf	tblptru,c
 15549  002CA0  0E00               	movlw	low (__mediumconst shr (0+16))
 15550  002CA2  22F8               	addwfc	tblptru,f,c
 15551  002CA4                     	endif
 15552  002CA4  0008               	tblrd		*
 15553  002CA6  CFF5 F07D          	movff	tablat,_input	;volatile
 15554                           
 15555                           ; BSR set to: 0
 15556                           ;interruptHandler.c: 23: if(input == '*'){
 15557  002CAA  0E2A               	movlw	42
 15558  002CAC  187D               	xorwf	_input,w,c	;volatile
 15559  002CAE  A4D8               	btfss	status,2,c
 15560  002CB0  D004               	goto	i2l8121
 15561                           
 15562                           ; BSR set to: 0
 15563                           ;interruptHandler.c: 24: machine_state = Testing_state;
 15564  002CB2  0E03               	movlw	3
 15565  002CB4  0100               	movlb	0	; () banked
 15566  002CB6  6FFC               	movwf	_machine_state& (0+255),b
 15567                           
 15568                           ;interruptHandler.c: 25: }
 15569  002CB8  D002               	goto	i2l8123
 15570  002CBA                     i2l8121:
 15571                           
 15572                           ; BSR set to: 0
 15573                           ;interruptHandler.c: 26: else{
 15574                           ;interruptHandler.c: 27: updateMenu();
 15575  002CBA  ECF9  F010         	call	_updateMenu	;wreg free
 15576  002CBE                     i2l8123:
 15577                           
 15578                           ;interruptHandler.c: 28: }
 15579                           ;interruptHandler.c: 29: }
 15580                           ;interruptHandler.c: 30: }
 15581                           ;interruptHandler.c: 33: if(TMR0IF){
 15582  002CBE  A4F2               	btfss	intcon,2,c	;volatile
 15583  002CC0  D00C               	goto	i2l8137
 15584                           
 15585                           ;interruptHandler.c: 34: TMR0IF = 0;
 15586  002CC2  94F2               	bcf	intcon,2,c	;volatile
 15587                           
 15588                           ;interruptHandler.c: 35: if(machine_state == Sorting_state){
 15589  002CC4  0100               	movlb	0	; () banked
 15590  002CC6  05FC               	decf	_machine_state& (0+255),w,b
 15591  002CC8  A4D8               	btfss	status,2,c
 15592  002CCA  D007               	goto	i2l8137
 15593                           
 15594                           ; BSR set to: 0
 15595                           ;interruptHandler.c: 36: printSortTimer();
 15596  002CCC  EC74  F013         	call	_printSortTimer	;wreg free
 15597                           
 15598                           ;interruptHandler.c: 38: TMR0H = 0b10000101;
 15599  002CD0  0E85               	movlw	133
 15600  002CD2  6ED7               	movwf	4055,c	;volatile
 15601                           
 15602                           ;interruptHandler.c: 39: TMR0L = 0b11101110;
 15603  002CD4  0EEE               	movlw	238
 15604  002CD6  6ED6               	movwf	4054,c	;volatile
 15605                           
 15606                           ;interruptHandler.c: 40: TMR0ON = 1;
 15607  002CD8  8ED5               	bsf	4053,7,c	;volatile
 15608  002CDA                     i2l8137:
 15609                           
 15610                           ;interruptHandler.c: 41: }
 15611                           ;interruptHandler.c: 42: }
 15612                           ;interruptHandler.c: 45: if(TMR1IF){
 15613  002CDA  A09E               	btfss	3998,0,c	;volatile
 15614  002CDC  D024               	goto	i2l8161
 15615                           
 15616                           ;interruptHandler.c: 46: TMR1IF = 0;
 15617  002CDE  909E               	bcf	3998,0,c	;volatile
 15618                           
 15619                           ;interruptHandler.c: 47: TMR1ON = 0;
 15620  002CE0  90CD               	bcf	4045,0,c	;volatile
 15621                           
 15622                           ;interruptHandler.c: 48: if(machine_state == Sorting_state){
 15623  002CE2  0100               	movlb	0	; () banked
 15624  002CE4  05FC               	decf	_machine_state& (0+255),w,b
 15625  002CE6  A4D8               	btfss	status,2,c
 15626  002CE8  D01E               	goto	i2l8161
 15627                           
 15628                           ; BSR set to: 0
 15629                           ;interruptHandler.c: 49: if(was_low_1){
 15630  002CEA  5079               	movf	_was_low_1,w,c	;volatile
 15631  002CEC  107A               	iorwf	_was_low_1+1,w,c	;volatile
 15632  002CEE  B4D8               	btfsc	status,2,c
 15633  002CF0  D00A               	goto	i2l861
 15634                           
 15635                           ; BSR set to: 0
 15636                           ;interruptHandler.c: 50: LATCbits.LATC1 = 1;
 15637  002CF2  828B               	bsf	3979,1,c	;volatile
 15638                           
 15639                           ; BSR set to: 0
 15640                           ;interruptHandler.c: 51: was_low_1 = 0;
 15641  002CF4  0E00               	movlw	0
 15642  002CF6  6E7A               	movwf	_was_low_1+1,c	;volatile
 15643  002CF8  0E00               	movlw	0
 15644  002CFA  6E79               	movwf	_was_low_1,c	;volatile
 15645                           
 15646                           ; BSR set to: 0
 15647                           ;interruptHandler.c: 52: TMR1H = servoTimes[0];
 15648  002CFC  C11C  FFCF         	movff	_servoTimes,4047	;volatile
 15649                           
 15650                           ; BSR set to: 0
 15651                           ;interruptHandler.c: 53: TMR1L = servoTimes[1];
 15652  002D00  C11E  FFCE         	movff	_servoTimes+2,4046	;volatile
 15653                           
 15654                           ;interruptHandler.c: 54: }
 15655  002D04  D00F               	goto	i2l8159
 15656  002D06                     i2l861:
 15657                           
 15658                           ; BSR set to: 0
 15659                           ;interruptHandler.c: 55: else{
 15660                           ;interruptHandler.c: 56: LATCbits.LATC1 = 0;
 15661  002D06  928B               	bcf	3979,1,c	;volatile
 15662                           
 15663                           ; BSR set to: 0
 15664                           ;interruptHandler.c: 57: was_low_1 = 1;
 15665  002D08  0E00               	movlw	0
 15666  002D0A  6E7A               	movwf	_was_low_1+1,c	;volatile
 15667  002D0C  0E01               	movlw	1
 15668  002D0E  6E79               	movwf	_was_low_1,c	;volatile
 15669                           
 15670                           ; BSR set to: 0
 15671                           ;interruptHandler.c: 58: TMR1H = 20000 - servoTimes[0];
 15672  002D10  0101               	movlb	1	; () banked
 15673  002D12  511C               	movf	_servoTimes& (0+255),w,b
 15674  002D14  0800               	sublw	0
 15675  002D16  0F20               	addlw	32
 15676  002D18  6ECF               	movwf	4047,c	;volatile
 15677                           
 15678                           ; BSR set to: 1
 15679                           ;interruptHandler.c: 59: TMR1L = 20000 - servoTimes[1];
 15680  002D1A  0101               	movlb	1	; () banked
 15681  002D1C  511E               	movf	(_servoTimes+2)& (0+255),w,b
 15682  002D1E  0800               	sublw	0
 15683  002D20  0F20               	addlw	32
 15684  002D22  6ECE               	movwf	4046,c	;volatile
 15685  002D24                     i2l8159:
 15686                           
 15687                           ;interruptHandler.c: 60: }
 15688                           ;interruptHandler.c: 61: TMR1ON = 1;
 15689  002D24  80CD               	bsf	4045,0,c	;volatile
 15690  002D26                     i2l8161:
 15691                           
 15692                           ;interruptHandler.c: 62: }
 15693                           ;interruptHandler.c: 63: }
 15694                           ;interruptHandler.c: 65: if(TMR3IF){
 15695  002D26  A2A1               	btfss	4001,1,c	;volatile
 15696  002D28  D024               	goto	i2l867
 15697                           
 15698                           ;interruptHandler.c: 66: TMR3IF = 0;
 15699  002D2A  92A1               	bcf	4001,1,c	;volatile
 15700                           
 15701                           ;interruptHandler.c: 67: TMR3ON = 0;
 15702  002D2C  90B1               	bcf	4017,0,c	;volatile
 15703                           
 15704                           ;interruptHandler.c: 68: if(machine_state == Sorting_state){
 15705  002D2E  0100               	movlb	0	; () banked
 15706  002D30  05FC               	decf	_machine_state& (0+255),w,b
 15707  002D32  A4D8               	btfss	status,2,c
 15708  002D34  D01E               	goto	i2l867
 15709                           
 15710                           ; BSR set to: 0
 15711                           ;interruptHandler.c: 69: if(was_low_3){
 15712  002D36  507B               	movf	_was_low_3,w,c	;volatile
 15713  002D38  107C               	iorwf	_was_low_3+1,w,c	;volatile
 15714  002D3A  B4D8               	btfsc	status,2,c
 15715  002D3C  D00A               	goto	i2l865
 15716                           
 15717                           ; BSR set to: 0
 15718                           ;interruptHandler.c: 70: LATCbits.LATC2 = 1;
 15719  002D3E  848B               	bsf	3979,2,c	;volatile
 15720                           
 15721                           ; BSR set to: 0
 15722                           ;interruptHandler.c: 71: was_low_3 = 0;
 15723  002D40  0E00               	movlw	0
 15724  002D42  6E7C               	movwf	_was_low_3+1,c	;volatile
 15725  002D44  0E00               	movlw	0
 15726  002D46  6E7B               	movwf	_was_low_3,c	;volatile
 15727                           
 15728                           ; BSR set to: 0
 15729                           ;interruptHandler.c: 72: TMR3H = servoTimes[2];
 15730  002D48  C120  FFB3         	movff	_servoTimes+4,4019	;volatile
 15731                           
 15732                           ; BSR set to: 0
 15733                           ;interruptHandler.c: 73: TMR3L = servoTimes[3];
 15734  002D4C  C122  FFB2         	movff	_servoTimes+6,4018	;volatile
 15735                           
 15736                           ;interruptHandler.c: 74: }
 15737  002D50  D00F               	goto	i2l8183
 15738  002D52                     i2l865:
 15739                           
 15740                           ; BSR set to: 0
 15741                           ;interruptHandler.c: 75: else{
 15742                           ;interruptHandler.c: 76: LATCbits.LATC2 = 0;
 15743  002D52  948B               	bcf	3979,2,c	;volatile
 15744                           
 15745                           ; BSR set to: 0
 15746                           ;interruptHandler.c: 77: was_low_3 = 1;
 15747  002D54  0E00               	movlw	0
 15748  002D56  6E7C               	movwf	_was_low_3+1,c	;volatile
 15749  002D58  0E01               	movlw	1
 15750  002D5A  6E7B               	movwf	_was_low_3,c	;volatile
 15751                           
 15752                           ; BSR set to: 0
 15753                           ;interruptHandler.c: 78: TMR3H = 20000 - servoTimes[2];
 15754  002D5C  0101               	movlb	1	; () banked
 15755  002D5E  5120               	movf	(_servoTimes+4)& (0+255),w,b
 15756  002D60  0800               	sublw	0
 15757  002D62  0F20               	addlw	32
 15758  002D64  6EB3               	movwf	4019,c	;volatile
 15759                           
 15760                           ; BSR set to: 1
 15761                           ;interruptHandler.c: 79: TMR3L = 20000 - servoTimes[3];
 15762  002D66  0101               	movlb	1	; () banked
 15763  002D68  5122               	movf	(_servoTimes+6)& (0+255),w,b
 15764  002D6A  0800               	sublw	0
 15765  002D6C  0F20               	addlw	32
 15766  002D6E  6EB2               	movwf	4018,c	;volatile
 15767  002D70                     i2l8183:
 15768                           
 15769                           ;interruptHandler.c: 80: }
 15770                           ;interruptHandler.c: 81: TMR3ON = 1;
 15771  002D70  80B1               	bsf	4017,0,c	;volatile
 15772  002D72                     i2l867:
 15773  002D72  C05A  FFF5         	movff	??_handler+15,tablat
 15774  002D76  C059  FFF8         	movff	??_handler+14,tblptru
 15775  002D7A  C058  FFF7         	movff	??_handler+13,tblptrh
 15776  002D7E  C057  FFF6         	movff	??_handler+12,tblptrl
 15777  002D82  C056  FFF4         	movff	??_handler+11,prodh
 15778  002D86  C055  FFF3         	movff	??_handler+10,prodl
 15779  002D8A  C054  FFDA         	movff	??_handler+9,fsr2h
 15780  002D8E  C053  FFD9         	movff	??_handler+8,fsr2l
 15781  002D92  C052  FFE2         	movff	??_handler+7,fsr1h
 15782  002D96  C051  FFE1         	movff	??_handler+6,fsr1l
 15783  002D9A  C050  FFEA         	movff	??_handler+5,fsr0h
 15784  002D9E  C04F  FFE9         	movff	??_handler+4,fsr0l
 15785  002DA2  C04E  FFFB         	movff	??_handler+3,pclatu
 15786  002DA6  C04D  FFFA         	movff	??_handler+2,pclath
 15787  002DAA  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 15788  002DAC  0011               	retfie		f
 15789  002DAE                     __end_of_handler:
 15790                           	opt stack 0
 15791                           pclatu	equ	0xFFB
 15792                           pclath	equ	0xFFA
 15793                           tblptru	equ	0xFF8
 15794                           tblptrh	equ	0xFF7
 15795                           tblptrl	equ	0xFF6
 15796                           tablat	equ	0xFF5
 15797                           prodh	equ	0xFF4
 15798                           prodl	equ	0xFF3
 15799                           intcon	equ	0xFF2
 15800                           intcon2	equ	0xFF1
 15801                           intcon3	equ	0xFF0
 15802                           indf0	equ	0xFEF
 15803                           postinc0	equ	0xFEE
 15804                           fsr0h	equ	0xFEA
 15805                           fsr0l	equ	0xFE9
 15806                           wreg	equ	0xFE8
 15807                           postdec1	equ	0xFE5
 15808                           fsr1h	equ	0xFE2
 15809                           fsr1l	equ	0xFE1
 15810                           indf2	equ	0xFDF
 15811                           postinc2	equ	0xFDE
 15812                           postdec2	equ	0xFDD
 15813                           fsr2h	equ	0xFDA
 15814                           fsr2l	equ	0xFD9
 15815                           status	equ	0xFD8
 15816                           
 15817 ;; *************** function _updateMenu *****************
 15818 ;; Defined at:
 15819 ;;		line 213 in file "UI.c"
 15820 ;; Parameters:    Size  Location     Type
 15821 ;;		None
 15822 ;; Auto vars:     Size  Location     Type
 15823 ;;		None
 15824 ;; Return value:  Size  Location     Type
 15825 ;;                  1    wreg      void 
 15826 ;; Registers used:
 15827 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15828 ;; Tracked objects:
 15829 ;;		On entry : 0/0
 15830 ;;		On exit  : 0/0
 15831 ;;		Unchanged: 0/0
 15832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15835 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15836 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15837 ;;Total ram usage:        2 bytes
 15838 ;; Hardware stack levels used:    1
 15839 ;; Hardware stack levels required when called:    5
 15840 ;; This function calls:
 15841 ;;		_change_state_to_logs_11
 15842 ;;		_change_state_to_logs_12
 15843 ;;		_change_state_to_logs_22
 15844 ;;		_change_state_to_logs_23
 15845 ;;		_change_state_to_logs_33
 15846 ;;		_change_state_to_logs_34
 15847 ;;		_change_state_to_menu_11
 15848 ;;		_change_state_to_menu_23
 15849 ;;		_dispLogs
 15850 ;;		_inputHandler
 15851 ;;		i2_change_state_to_menu_12
 15852 ;;		i2_change_state_to_menu_22
 15853 ;;		i2_change_state_to_menu_start
 15854 ;; This function is called by:
 15855 ;;		_handler
 15856 ;; This function uses a non-reentrant model
 15857 ;;
 15858                           
 15859                           	psect	text59
 15860  0021F2                     __ptext59:
 15861                           	opt stack 0
 15862  0021F2                     _updateMenu:
 15863                           	opt stack 18
 15864                           
 15865                           ;UI.c: 214: up = 0; down = 0; enter = 0; back = 0;
 15866                           
 15867                           ;incstack = 0
 15868  0021F2  0E00               	movlw	0
 15869  0021F4  6E78               	movwf	_up+1,c
 15870  0021F6  0E00               	movlw	0
 15871  0021F8  6E77               	movwf	_up,c
 15872  0021FA  0E00               	movlw	0
 15873  0021FC  6E68               	movwf	_down+1,c
 15874  0021FE  0E00               	movlw	0
 15875  002200  6E67               	movwf	_down,c
 15876  002202  0E00               	movlw	0
 15877  002204  6E6A               	movwf	_enter+1,c
 15878  002206  0E00               	movlw	0
 15879  002208  6E69               	movwf	_enter,c
 15880  00220A  0E00               	movlw	0
 15881  00220C  6E5C               	movwf	_back+1,c
 15882  00220E  0E00               	movlw	0
 15883  002210  6E5B               	movwf	_back,c
 15884                           
 15885                           ;UI.c: 215: (INTCONbits.GIE = 0);
 15886  002212  9EF2               	bcf	intcon,7,c	;volatile
 15887                           
 15888                           ;UI.c: 217: if (inputHandler()
 15889                           ;UI.c: 220: ){
 15890  002214  EC6D  F014         	call	_inputHandler	;wreg free
 15891  002218  502A               	movf	?_inputHandler,w,c
 15892  00221A  102B               	iorwf	?_inputHandler+1,w,c
 15893  00221C  A4D8               	btfss	status,2,c
 15894  00221E  D112               	goto	i2l7859
 15895  002220  D146               	goto	i2l257
 15896  002222                     i2l7711:
 15897                           
 15898                           ;UI.c: 224: change_state_to_menu_11();
 15899  002222  ECFD  F021         	call	_change_state_to_menu_11	;wreg free
 15900                           
 15901                           ;UI.c: 225: break;
 15902  002226  D143               	goto	i2l257
 15903  002228                     i2l7713:
 15904                           
 15905                           ;UI.c: 228: if(up){
 15906  002228  5077               	movf	_up,w,c
 15907  00222A  1078               	iorwf	_up+1,w,c
 15908  00222C  B4D8               	btfsc	status,2,c
 15909  00222E  D003               	goto	i2l7717
 15910                           
 15911                           ;UI.c: 229: change_state_to_menu_23();
 15912  002230  ECE5  F021         	call	_change_state_to_menu_23	;wreg free
 15913                           
 15914                           ;UI.c: 230: }
 15915  002234  D13C               	goto	i2l257
 15916  002236                     i2l7717:
 15917                           
 15918                           ;UI.c: 231: else if(down){
 15919  002236  5067               	movf	_down,w,c
 15920  002238  1068               	iorwf	_down+1,w,c
 15921  00223A  B4D8               	btfsc	status,2,c
 15922  00223C  D003               	goto	i2l7721
 15923                           
 15924                           ;UI.c: 232: change_state_to_menu_12();
 15925  00223E  ECCD  F021         	call	i2_change_state_to_menu_12	;wreg free
 15926                           
 15927                           ;UI.c: 233: }
 15928  002242  D135               	goto	i2l257
 15929  002244                     i2l7721:
 15930                           
 15931                           ;UI.c: 234: else if(enter){
 15932  002244  5069               	movf	_enter,w,c
 15933  002246  106A               	iorwf	_enter+1,w,c
 15934  002248  B4D8               	btfsc	status,2,c
 15935  00224A  D131               	goto	i2l257
 15936                           
 15937                           ;UI.c: 235: change_state_to_menu_start();
 15938  00224C  EC27  F023         	call	i2_change_state_to_menu_start	;wreg free
 15939                           
 15940                           ;UI.c: 236: }
 15941                           ;UI.c: 237: break;
 15942  002250  D12E               	goto	i2l257
 15943  002252                     i2l7725:
 15944                           
 15945                           ;UI.c: 240: if(up){
 15946  002252  5077               	movf	_up,w,c
 15947  002254  1078               	iorwf	_up+1,w,c
 15948  002256  B4D8               	btfsc	status,2,c
 15949  002258  D003               	goto	i2l7729
 15950                           
 15951                           ;UI.c: 241: change_state_to_menu_11();
 15952  00225A  ECFD  F021         	call	_change_state_to_menu_11	;wreg free
 15953                           
 15954                           ;UI.c: 242: }
 15955  00225E  D127               	goto	i2l257
 15956  002260                     i2l7729:
 15957                           
 15958                           ;UI.c: 243: else if(down){
 15959  002260  5067               	movf	_down,w,c
 15960  002262  1068               	iorwf	_down+1,w,c
 15961  002264  B4D8               	btfsc	status,2,c
 15962  002266  D011               	goto	i2l7745
 15963                           
 15964                           ;UI.c: 244: change_state_to_menu_23();
 15965  002268  ECE5  F021         	call	_change_state_to_menu_23	;wreg free
 15966                           
 15967                           ;UI.c: 245: }
 15968  00226C  D120               	goto	i2l257
 15969  00226E                     i2l7737:
 15970                           
 15971                           ;UI.c: 252: if(up){
 15972  00226E  5077               	movf	_up,w,c
 15973  002270  1078               	iorwf	_up+1,w,c
 15974  002272  B4D8               	btfsc	status,2,c
 15975  002274  D003               	goto	i2l7741
 15976                           
 15977                           ;UI.c: 253: change_state_to_menu_11();
 15978  002276  ECFD  F021         	call	_change_state_to_menu_11	;wreg free
 15979                           
 15980                           ;UI.c: 254: }
 15981  00227A  D119               	goto	i2l257
 15982  00227C                     i2l7741:
 15983                           
 15984                           ;UI.c: 255: else if(down){
 15985  00227C  5067               	movf	_down,w,c
 15986  00227E  1068               	iorwf	_down+1,w,c
 15987  002280  B4D8               	btfsc	status,2,c
 15988  002282  D003               	goto	i2l7745
 15989                           
 15990                           ;UI.c: 256: change_state_to_menu_23();
 15991  002284  ECE5  F021         	call	_change_state_to_menu_23	;wreg free
 15992                           
 15993                           ;UI.c: 257: }
 15994  002288  D112               	goto	i2l257
 15995  00228A                     i2l7745:
 15996                           
 15997                           ;UI.c: 258: else if(enter){
 15998  00228A  5069               	movf	_enter,w,c
 15999  00228C  106A               	iorwf	_enter+1,w,c
 16000  00228E  B4D8               	btfsc	status,2,c
 16001  002290  D10E               	goto	i2l257
 16002                           
 16003                           ;UI.c: 259: machine_state = Sorting_state;
 16004  002292  0E01               	movlw	1
 16005  002294  0100               	movlb	0	; () banked
 16006  002296  6FFC               	movwf	_machine_state& (0+255),b
 16007                           
 16008                           ; BSR set to: 0
 16009                           ;UI.c: 260: }
 16010                           ;UI.c: 261: break;
 16011                           
 16012                           ; BSR set to: 0
 16013                           
 16014                           ; BSR set to: 0
 16015  002298  D10A               	goto	i2l257
 16016  00229A                     i2l7749:
 16017                           
 16018                           ;UI.c: 264: if(up){
 16019  00229A  5077               	movf	_up,w,c
 16020  00229C  1078               	iorwf	_up+1,w,c
 16021  00229E  B4D8               	btfsc	status,2,c
 16022  0022A0  D003               	goto	i2l7753
 16023                           
 16024                           ;UI.c: 265: change_state_to_menu_22();
 16025  0022A2  ECB5  F021         	call	i2_change_state_to_menu_22	;wreg free
 16026                           
 16027                           ;UI.c: 266: }
 16028  0022A6  D103               	goto	i2l257
 16029  0022A8                     i2l7753:
 16030                           
 16031                           ;UI.c: 267: else if(down){
 16032  0022A8  5067               	movf	_down,w,c
 16033  0022AA  1068               	iorwf	_down+1,w,c
 16034  0022AC  B4D8               	btfsc	status,2,c
 16035  0022AE  D003               	goto	i2l7757
 16036                           
 16037                           ;UI.c: 268: change_state_to_menu_11();
 16038  0022B0  ECFD  F021         	call	_change_state_to_menu_11	;wreg free
 16039                           
 16040                           ;UI.c: 269: }
 16041  0022B4  D0FC               	goto	i2l257
 16042  0022B6                     i2l7757:
 16043                           
 16044                           ;UI.c: 270: else if(enter){
 16045  0022B6  5069               	movf	_enter,w,c
 16046  0022B8  106A               	iorwf	_enter+1,w,c
 16047  0022BA  B4D8               	btfsc	status,2,c
 16048  0022BC  D0F8               	goto	i2l257
 16049                           
 16050                           ;UI.c: 271: change_state_to_logs_11();
 16051  0022BE  EC75  F022         	call	_change_state_to_logs_11	;wreg free
 16052                           
 16053                           ;UI.c: 272: }
 16054                           ;UI.c: 273: break;
 16055  0022C2  D0F5               	goto	i2l257
 16056  0022C4                     i2l7761:
 16057                           
 16058                           ;UI.c: 276: if(up){
 16059  0022C4  5077               	movf	_up,w,c
 16060  0022C6  1078               	iorwf	_up+1,w,c
 16061  0022C8  B4D8               	btfsc	status,2,c
 16062  0022CA  D003               	goto	i2l7765
 16063                           
 16064                           ;UI.c: 277: change_state_to_logs_34();
 16065  0022CC  EC15  F022         	call	_change_state_to_logs_34	;wreg free
 16066                           
 16067                           ;UI.c: 278: }
 16068  0022D0  D0EE               	goto	i2l257
 16069  0022D2                     i2l7765:
 16070                           
 16071                           ;UI.c: 279: else if(down){
 16072  0022D2  5067               	movf	_down,w,c
 16073  0022D4  1068               	iorwf	_down+1,w,c
 16074  0022D6  B4D8               	btfsc	status,2,c
 16075  0022D8  D003               	goto	i2l7769
 16076                           
 16077                           ;UI.c: 280: change_state_to_logs_12();
 16078  0022DA  EC5D  F022         	call	_change_state_to_logs_12	;wreg free
 16079                           
 16080                           ;UI.c: 281: }
 16081  0022DE  D0E7               	goto	i2l257
 16082  0022E0                     i2l7769:
 16083                           
 16084                           ;UI.c: 282: else if(enter){
 16085  0022E0  5069               	movf	_enter,w,c
 16086  0022E2  106A               	iorwf	_enter+1,w,c
 16087  0022E4  B4D8               	btfsc	status,2,c
 16088  0022E6  D007               	goto	i2l7773
 16089                           
 16090                           ;UI.c: 283: dispLogs(1);
 16091  0022E8  0E00               	movlw	0
 16092  0022EA  6E13               	movwf	dispLogs@myLog+1,c
 16093  0022EC  0E01               	movlw	1
 16094  0022EE  6E12               	movwf	dispLogs@myLog,c
 16095  0022F0  EC61  F023         	call	_dispLogs	;wreg free
 16096                           
 16097                           ;UI.c: 284: }
 16098  0022F4  D0DC               	goto	i2l257
 16099  0022F6                     i2l7773:
 16100                           
 16101                           ;UI.c: 285: else if(back){
 16102  0022F6  505B               	movf	_back,w,c
 16103  0022F8  105C               	iorwf	_back+1,w,c
 16104  0022FA  B4D8               	btfsc	status,2,c
 16105  0022FC  D0D8               	goto	i2l257
 16106                           
 16107                           ;UI.c: 286: change_state_to_menu_23();
 16108  0022FE  ECE5  F021         	call	_change_state_to_menu_23	;wreg free
 16109                           
 16110                           ;UI.c: 287: }
 16111                           ;UI.c: 288: break;
 16112  002302  D0D5               	goto	i2l257
 16113  002304                     i2l7777:
 16114                           
 16115                           ;UI.c: 291: if(up){
 16116  002304  5077               	movf	_up,w,c
 16117  002306  1078               	iorwf	_up+1,w,c
 16118  002308  B4D8               	btfsc	status,2,c
 16119  00230A  D003               	goto	i2l7781
 16120                           
 16121                           ;UI.c: 292: change_state_to_logs_11();
 16122  00230C  EC75  F022         	call	_change_state_to_logs_11	;wreg free
 16123                           
 16124                           ;UI.c: 293: }
 16125  002310  D0CE               	goto	i2l257
 16126  002312                     i2l7781:
 16127                           
 16128                           ;UI.c: 294: else if(down){
 16129  002312  5067               	movf	_down,w,c
 16130  002314  1068               	iorwf	_down+1,w,c
 16131  002316  B4D8               	btfsc	status,2,c
 16132  002318  D003               	goto	i2l7785
 16133                           
 16134                           ;UI.c: 295: change_state_to_logs_23();
 16135  00231A  ECBB  F022         	call	_change_state_to_logs_23	;wreg free
 16136                           
 16137                           ;UI.c: 296: }
 16138  00231E  D0C7               	goto	i2l257
 16139  002320                     i2l7785:
 16140                           
 16141                           ;UI.c: 297: else if(enter){
 16142  002320  5069               	movf	_enter,w,c
 16143  002322  106A               	iorwf	_enter+1,w,c
 16144  002324  B4D8               	btfsc	status,2,c
 16145  002326  D007               	goto	i2l7789
 16146                           
 16147                           ;UI.c: 298: dispLogs(2);
 16148  002328  0E00               	movlw	0
 16149  00232A  6E13               	movwf	dispLogs@myLog+1,c
 16150  00232C  0E02               	movlw	2
 16151  00232E  6E12               	movwf	dispLogs@myLog,c
 16152  002330  EC61  F023         	call	_dispLogs	;wreg free
 16153                           
 16154                           ;UI.c: 299: }
 16155  002334  D0BC               	goto	i2l257
 16156  002336                     i2l7789:
 16157                           
 16158                           ;UI.c: 300: else if(back){
 16159  002336  505B               	movf	_back,w,c
 16160  002338  105C               	iorwf	_back+1,w,c
 16161  00233A  B4D8               	btfsc	status,2,c
 16162  00233C  D0B8               	goto	i2l257
 16163                           
 16164                           ;UI.c: 301: change_state_to_menu_23();
 16165  00233E  ECE5  F021         	call	_change_state_to_menu_23	;wreg free
 16166                           
 16167                           ;UI.c: 302: }
 16168                           ;UI.c: 303: break;
 16169  002342  D0B5               	goto	i2l257
 16170  002344                     i2l7793:
 16171                           
 16172                           ;UI.c: 306: if(up){
 16173  002344  5077               	movf	_up,w,c
 16174  002346  1078               	iorwf	_up+1,w,c
 16175  002348  B4D8               	btfsc	status,2,c
 16176  00234A  D003               	goto	i2l7797
 16177                           
 16178                           ;UI.c: 307: change_state_to_logs_11();
 16179  00234C  EC75  F022         	call	_change_state_to_logs_11	;wreg free
 16180                           
 16181                           ;UI.c: 308: }
 16182  002350  D0AE               	goto	i2l257
 16183  002352                     i2l7797:
 16184                           
 16185                           ;UI.c: 309: else if(down){
 16186  002352  5067               	movf	_down,w,c
 16187  002354  1068               	iorwf	_down+1,w,c
 16188  002356  B4D8               	btfsc	status,2,c
 16189  002358  D003               	goto	i2l7801
 16190                           
 16191                           ;UI.c: 310: change_state_to_logs_23();
 16192  00235A  ECBB  F022         	call	_change_state_to_logs_23	;wreg free
 16193                           
 16194                           ;UI.c: 311: }
 16195  00235E  D0A7               	goto	i2l257
 16196  002360                     i2l7801:
 16197                           
 16198                           ;UI.c: 312: else if(enter){
 16199  002360  5069               	movf	_enter,w,c
 16200  002362  106A               	iorwf	_enter+1,w,c
 16201  002364  B4D8               	btfsc	status,2,c
 16202  002366  D007               	goto	i2l7805
 16203                           
 16204                           ;UI.c: 313: dispLogs(2);
 16205  002368  0E00               	movlw	0
 16206  00236A  6E13               	movwf	dispLogs@myLog+1,c
 16207  00236C  0E02               	movlw	2
 16208  00236E  6E12               	movwf	dispLogs@myLog,c
 16209  002370  EC61  F023         	call	_dispLogs	;wreg free
 16210                           
 16211                           ;UI.c: 314: }
 16212  002374  D09C               	goto	i2l257
 16213  002376                     i2l7805:
 16214                           
 16215                           ;UI.c: 315: else if(back){
 16216  002376  505B               	movf	_back,w,c
 16217  002378  105C               	iorwf	_back+1,w,c
 16218  00237A  B4D8               	btfsc	status,2,c
 16219  00237C  D098               	goto	i2l257
 16220                           
 16221                           ;UI.c: 316: change_state_to_menu_23();
 16222  00237E  ECE5  F021         	call	_change_state_to_menu_23	;wreg free
 16223                           
 16224                           ;UI.c: 317: }
 16225                           ;UI.c: 318: break;
 16226  002382  D095               	goto	i2l257
 16227  002384                     i2l7809:
 16228                           
 16229                           ;UI.c: 321: if(up){
 16230  002384  5077               	movf	_up,w,c
 16231  002386  1078               	iorwf	_up+1,w,c
 16232  002388  B4D8               	btfsc	status,2,c
 16233  00238A  D003               	goto	i2l7813
 16234                           
 16235                           ;UI.c: 322: change_state_to_logs_22();
 16236  00238C  EC45  F022         	call	_change_state_to_logs_22	;wreg free
 16237                           
 16238                           ;UI.c: 323: }
 16239  002390  D08E               	goto	i2l257
 16240  002392                     i2l7813:
 16241                           
 16242                           ;UI.c: 324: else if(down){
 16243  002392  5067               	movf	_down,w,c
 16244  002394  1068               	iorwf	_down+1,w,c
 16245  002396  B4D8               	btfsc	status,2,c
 16246  002398  D003               	goto	i2l7817
 16247                           
 16248                           ;UI.c: 325: change_state_to_logs_34();
 16249  00239A  EC15  F022         	call	_change_state_to_logs_34	;wreg free
 16250                           
 16251                           ;UI.c: 326: }
 16252  00239E  D087               	goto	i2l257
 16253  0023A0                     i2l7817:
 16254                           
 16255                           ;UI.c: 327: else if(enter){
 16256  0023A0  5069               	movf	_enter,w,c
 16257  0023A2  106A               	iorwf	_enter+1,w,c
 16258  0023A4  B4D8               	btfsc	status,2,c
 16259  0023A6  D007               	goto	i2l7821
 16260                           
 16261                           ;UI.c: 328: dispLogs(3);
 16262  0023A8  0E00               	movlw	0
 16263  0023AA  6E13               	movwf	dispLogs@myLog+1,c
 16264  0023AC  0E03               	movlw	3
 16265  0023AE  6E12               	movwf	dispLogs@myLog,c
 16266  0023B0  EC61  F023         	call	_dispLogs	;wreg free
 16267                           
 16268                           ;UI.c: 329: }
 16269  0023B4  D07C               	goto	i2l257
 16270  0023B6                     i2l7821:
 16271                           
 16272                           ;UI.c: 330: else if(back){
 16273  0023B6  505B               	movf	_back,w,c
 16274  0023B8  105C               	iorwf	_back+1,w,c
 16275  0023BA  B4D8               	btfsc	status,2,c
 16276  0023BC  D078               	goto	i2l257
 16277                           
 16278                           ;UI.c: 331: change_state_to_menu_23();
 16279  0023BE  ECE5  F021         	call	_change_state_to_menu_23	;wreg free
 16280                           
 16281                           ;UI.c: 332: }
 16282                           ;UI.c: 333: break;
 16283  0023C2  D075               	goto	i2l257
 16284  0023C4                     i2l7825:
 16285                           
 16286                           ;UI.c: 336: if(up){
 16287  0023C4  5077               	movf	_up,w,c
 16288  0023C6  1078               	iorwf	_up+1,w,c
 16289  0023C8  B4D8               	btfsc	status,2,c
 16290  0023CA  D003               	goto	i2l7829
 16291                           
 16292                           ;UI.c: 337: change_state_to_logs_22();
 16293  0023CC  EC45  F022         	call	_change_state_to_logs_22	;wreg free
 16294                           
 16295                           ;UI.c: 338: }
 16296  0023D0  D06E               	goto	i2l257
 16297  0023D2                     i2l7829:
 16298                           
 16299                           ;UI.c: 339: else if(down){
 16300  0023D2  5067               	movf	_down,w,c
 16301  0023D4  1068               	iorwf	_down+1,w,c
 16302  0023D6  B4D8               	btfsc	status,2,c
 16303  0023D8  D003               	goto	i2l7833
 16304                           
 16305                           ;UI.c: 340: change_state_to_logs_34();
 16306  0023DA  EC15  F022         	call	_change_state_to_logs_34	;wreg free
 16307                           
 16308                           ;UI.c: 341: }
 16309  0023DE  D067               	goto	i2l257
 16310  0023E0                     i2l7833:
 16311                           
 16312                           ;UI.c: 342: else if(enter){
 16313  0023E0  5069               	movf	_enter,w,c
 16314  0023E2  106A               	iorwf	_enter+1,w,c
 16315  0023E4  B4D8               	btfsc	status,2,c
 16316  0023E6  D007               	goto	i2l7837
 16317                           
 16318                           ;UI.c: 343: dispLogs(3);
 16319  0023E8  0E00               	movlw	0
 16320  0023EA  6E13               	movwf	dispLogs@myLog+1,c
 16321  0023EC  0E03               	movlw	3
 16322  0023EE  6E12               	movwf	dispLogs@myLog,c
 16323  0023F0  EC61  F023         	call	_dispLogs	;wreg free
 16324                           
 16325                           ;UI.c: 344: }
 16326  0023F4  D05C               	goto	i2l257
 16327  0023F6                     i2l7837:
 16328                           
 16329                           ;UI.c: 345: else if(back){
 16330  0023F6  505B               	movf	_back,w,c
 16331  0023F8  105C               	iorwf	_back+1,w,c
 16332  0023FA  B4D8               	btfsc	status,2,c
 16333  0023FC  D058               	goto	i2l257
 16334                           
 16335                           ;UI.c: 346: change_state_to_menu_23();
 16336  0023FE  ECE5  F021         	call	_change_state_to_menu_23	;wreg free
 16337                           
 16338                           ;UI.c: 347: }
 16339                           ;UI.c: 348: break;
 16340  002402  D055               	goto	i2l257
 16341  002404                     i2l7841:
 16342                           
 16343                           ;UI.c: 351: if(up){
 16344  002404  5077               	movf	_up,w,c
 16345  002406  1078               	iorwf	_up+1,w,c
 16346  002408  B4D8               	btfsc	status,2,c
 16347  00240A  D003               	goto	i2l7845
 16348                           
 16349                           ;UI.c: 352: change_state_to_logs_33();
 16350  00240C  EC2D  F022         	call	_change_state_to_logs_33	;wreg free
 16351                           
 16352                           ;UI.c: 353: }
 16353  002410  D04E               	goto	i2l257
 16354  002412                     i2l7845:
 16355                           
 16356                           ;UI.c: 354: else if(down){
 16357  002412  5067               	movf	_down,w,c
 16358  002414  1068               	iorwf	_down+1,w,c
 16359  002416  B4D8               	btfsc	status,2,c
 16360  002418  D003               	goto	i2l7849
 16361                           
 16362                           ;UI.c: 355: change_state_to_logs_11();
 16363  00241A  EC75  F022         	call	_change_state_to_logs_11	;wreg free
 16364                           
 16365                           ;UI.c: 356: }
 16366  00241E  D047               	goto	i2l257
 16367  002420                     i2l7849:
 16368                           
 16369                           ;UI.c: 357: else if(enter){
 16370  002420  5069               	movf	_enter,w,c
 16371  002422  106A               	iorwf	_enter+1,w,c
 16372  002424  B4D8               	btfsc	status,2,c
 16373  002426  D007               	goto	i2l7853
 16374                           
 16375                           ;UI.c: 358: dispLogs(4);
 16376  002428  0E00               	movlw	0
 16377  00242A  6E13               	movwf	dispLogs@myLog+1,c
 16378  00242C  0E04               	movlw	4
 16379  00242E  6E12               	movwf	dispLogs@myLog,c
 16380  002430  EC61  F023         	call	_dispLogs	;wreg free
 16381                           
 16382                           ;UI.c: 359: }
 16383  002434  D03C               	goto	i2l257
 16384  002436                     i2l7853:
 16385                           
 16386                           ;UI.c: 360: else if(back){
 16387  002436  505B               	movf	_back,w,c
 16388  002438  105C               	iorwf	_back+1,w,c
 16389  00243A  B4D8               	btfsc	status,2,c
 16390  00243C  D038               	goto	i2l257
 16391                           
 16392                           ;UI.c: 361: change_state_to_menu_23();
 16393  00243E  ECE5  F021         	call	_change_state_to_menu_23	;wreg free
 16394                           
 16395                           ;UI.c: 367: }
 16396                           
 16397                           ;UI.c: 366: break;
 16398                           
 16399                           ;UI.c: 365: default:
 16400                           
 16401                           ;UI.c: 362: }
 16402                           ;UI.c: 363: break;
 16403  002442  D035               	goto	i2l257
 16404  002444                     i2l7859:
 16405  002444  C0E0  F043         	movff	_cur_state,??_updateMenu
 16406  002448  C0E1  F044         	movff	_cur_state+1,??_updateMenu+1
 16407                           
 16408                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 16409                           ; Switch size 1, requested type "space"
 16410                           ; Number of cases is 3, Range of values is 0 to 4
 16411                           ; switch strategies available:
 16412                           ; Name         Instructions Cycles
 16413                           ; simple_byte           10     6 (average)
 16414                           ;	Chosen strategy is simple_byte
 16415  00244C  5044               	movf	??_updateMenu+1,w,c
 16416  00244E  0A00               	xorlw	0	; case 0
 16417  002450  B4D8               	btfsc	status,2,c
 16418  002452  D007               	goto	i2l8447
 16419  002454  0A03               	xorlw	3	; case 3
 16420  002456  B4D8               	btfsc	status,2,c
 16421  002458  D015               	goto	i2l8449
 16422  00245A  0A07               	xorlw	7	; case 4
 16423  00245C  B4D8               	btfsc	status,2,c
 16424  00245E  D020               	goto	i2l8451
 16425  002460  D026               	goto	i2l257
 16426  002462                     i2l8447:
 16427                           
 16428                           ; Switch size 1, requested type "space"
 16429                           ; Number of cases is 5, Range of values is 0 to 23
 16430                           ; switch strategies available:
 16431                           ; Name         Instructions Cycles
 16432                           ; simple_byte           16     9 (average)
 16433                           ;	Chosen strategy is simple_byte
 16434  002462  5043               	movf	??_updateMenu,w,c
 16435  002464  0A00               	xorlw	0	; case 0
 16436  002466  B4D8               	btfsc	status,2,c
 16437  002468  D6DC               	goto	i2l7711
 16438  00246A  0A0B               	xorlw	11	; case 11
 16439  00246C  B4D8               	btfsc	status,2,c
 16440  00246E  D6DC               	goto	i2l7713
 16441  002470  0A07               	xorlw	7	; case 12
 16442  002472  B4D8               	btfsc	status,2,c
 16443  002474  D6EE               	goto	i2l7725
 16444  002476  0A1A               	xorlw	26	; case 22
 16445  002478  B4D8               	btfsc	status,2,c
 16446  00247A  D6F9               	goto	i2l7737
 16447  00247C  0A01               	xorlw	1	; case 23
 16448  00247E  B4D8               	btfsc	status,2,c
 16449  002480  D70C               	goto	i2l7749
 16450  002482  D015               	goto	i2l257
 16451  002484                     i2l8449:
 16452                           
 16453                           ; Switch size 1, requested type "space"
 16454                           ; Number of cases is 4, Range of values is 243 to 255
 16455                           ; switch strategies available:
 16456                           ; Name         Instructions Cycles
 16457                           ; simple_byte           13     7 (average)
 16458                           ;	Chosen strategy is simple_byte
 16459  002484  5043               	movf	??_updateMenu,w,c
 16460  002486  0AF3               	xorlw	243	; case 243
 16461  002488  B4D8               	btfsc	status,2,c
 16462  00248A  D71C               	goto	i2l7761
 16463  00248C  0A07               	xorlw	7	; case 244
 16464  00248E  B4D8               	btfsc	status,2,c
 16465  002490  D739               	goto	i2l7777
 16466  002492  0A0A               	xorlw	10	; case 254
 16467  002494  B4D8               	btfsc	status,2,c
 16468  002496  D756               	goto	i2l7793
 16469  002498  0A01               	xorlw	1	; case 255
 16470  00249A  B4D8               	btfsc	status,2,c
 16471  00249C  D773               	goto	i2l7809
 16472  00249E  D007               	goto	i2l257
 16473  0024A0                     i2l8451:
 16474                           
 16475                           ; Switch size 1, requested type "space"
 16476                           ; Number of cases is 2, Range of values is 9 to 10
 16477                           ; switch strategies available:
 16478                           ; Name         Instructions Cycles
 16479                           ; simple_byte            7     4 (average)
 16480                           ;	Chosen strategy is simple_byte
 16481  0024A0  5043               	movf	??_updateMenu,w,c
 16482  0024A2  0A09               	xorlw	9	; case 9
 16483  0024A4  B4D8               	btfsc	status,2,c
 16484  0024A6  D78E               	goto	i2l7825
 16485  0024A8  0A03               	xorlw	3	; case 10
 16486  0024AA  B4D8               	btfsc	status,2,c
 16487  0024AC  D7AB               	goto	i2l7841
 16488  0024AE                     i2l257:
 16489                           
 16490                           ;UI.c: 368: }
 16491                           ;UI.c: 369: (INTCONbits.GIE = 1);
 16492  0024AE  8EF2               	bsf	intcon,7,c	;volatile
 16493  0024B0  0012               	return		;funcret
 16494  0024B2                     __end_of_updateMenu:
 16495                           	opt stack 0
 16496                           pclatu	equ	0xFFB
 16497                           pclath	equ	0xFFA
 16498                           tblptru	equ	0xFF8
 16499                           tblptrh	equ	0xFF7
 16500                           tblptrl	equ	0xFF6
 16501                           tablat	equ	0xFF5
 16502                           prodh	equ	0xFF4
 16503                           prodl	equ	0xFF3
 16504                           intcon	equ	0xFF2
 16505                           intcon2	equ	0xFF1
 16506                           intcon3	equ	0xFF0
 16507                           indf0	equ	0xFEF
 16508                           postinc0	equ	0xFEE
 16509                           fsr0h	equ	0xFEA
 16510                           fsr0l	equ	0xFE9
 16511                           wreg	equ	0xFE8
 16512                           postdec1	equ	0xFE5
 16513                           fsr1h	equ	0xFE2
 16514                           fsr1l	equ	0xFE1
 16515                           indf2	equ	0xFDF
 16516                           postinc2	equ	0xFDE
 16517                           postdec2	equ	0xFDD
 16518                           fsr2h	equ	0xFDA
 16519                           fsr2l	equ	0xFD9
 16520                           status	equ	0xFD8
 16521                           
 16522 ;; *************** function i2_change_state_to_menu_start *****************
 16523 ;; Defined at:
 16524 ;;		line 474 in file "UI.c"
 16525 ;; Parameters:    Size  Location     Type
 16526 ;;		None
 16527 ;; Auto vars:     Size  Location     Type
 16528 ;;		None
 16529 ;; Return value:  Size  Location     Type
 16530 ;;                  1    wreg      void 
 16531 ;; Registers used:
 16532 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16533 ;; Tracked objects:
 16534 ;;		On entry : 0/0
 16535 ;;		On exit  : 0/0
 16536 ;;		Unchanged: 0/0
 16537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16541 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16542 ;;Total ram usage:        0 bytes
 16543 ;; Hardware stack levels used:    1
 16544 ;; Hardware stack levels required when called:    4
 16545 ;; This function calls:
 16546 ;;		i2_lcdInst
 16547 ;;		i2_printRTC
 16548 ;;		i2_printf
 16549 ;; This function is called by:
 16550 ;;		_updateMenu
 16551 ;; This function uses a non-reentrant model
 16552 ;;
 16553                           
 16554                           	psect	text60
 16555  00464E                     __ptext60:
 16556                           	opt stack 0
 16557  00464E                     i2_change_state_to_menu_start:
 16558                           	opt stack 18
 16559                           
 16560                           ;UI.c: 475: cur_state = 0;
 16561                           
 16562                           ;incstack = 0
 16563  00464E  0E00               	movlw	0
 16564  004650  0100               	movlb	0	; () banked
 16565  004652  6FE1               	movwf	(_cur_state+1)& (0+255),b
 16566  004654  0E00               	movlw	0
 16567  004656  6FE0               	movwf	_cur_state& (0+255),b
 16568                           
 16569                           ; BSR set to: 0
 16570                           ;UI.c: 477: lcdInst(0b10000000);;
 16571  004658  0E80               	movlw	128
 16572  00465A  ECEF  F023         	call	i2_lcdInst
 16573                           
 16574                           ;UI.c: 478: printRTC();
 16575  00465E  EC59  F012         	call	i2_printRTC	;wreg free
 16576                           
 16577                           ;UI.c: 479: lcdInst(0b11000000);;
 16578  004662  0EC0               	movlw	192
 16579  004664  ECEF  F023         	call	i2_lcdInst
 16580                           
 16581                           ;UI.c: 480: printf("PUSH TO CONTINUE");
 16582  004668  0EF7               	movlw	low STR_30
 16583  00466A  6E0D               	movwf	i2printf@f,c
 16584  00466C  0EFD               	movlw	high STR_30
 16585  00466E  6E0E               	movwf	i2printf@f+1,c
 16586  004670  ECD4  F00A         	call	i2_printf	;wreg free
 16587  004674  0012               	return		;funcret
 16588  004676                     __end_ofi2_change_state_to_menu_start:
 16589                           	opt stack 0
 16590                           pclatu	equ	0xFFB
 16591                           pclath	equ	0xFFA
 16592                           tblptru	equ	0xFF8
 16593                           tblptrh	equ	0xFF7
 16594                           tblptrl	equ	0xFF6
 16595                           tablat	equ	0xFF5
 16596                           prodh	equ	0xFF4
 16597                           prodl	equ	0xFF3
 16598                           intcon	equ	0xFF2
 16599                           intcon2	equ	0xFF1
 16600                           intcon3	equ	0xFF0
 16601                           indf0	equ	0xFEF
 16602                           postinc0	equ	0xFEE
 16603                           fsr0h	equ	0xFEA
 16604                           fsr0l	equ	0xFE9
 16605                           wreg	equ	0xFE8
 16606                           postdec1	equ	0xFE5
 16607                           fsr1h	equ	0xFE2
 16608                           fsr1l	equ	0xFE1
 16609                           indf2	equ	0xFDF
 16610                           postinc2	equ	0xFDE
 16611                           postdec2	equ	0xFDD
 16612                           fsr2h	equ	0xFDA
 16613                           fsr2l	equ	0xFD9
 16614                           status	equ	0xFD8
 16615                           
 16616 ;; *************** function i2_printRTC *****************
 16617 ;; Defined at:
 16618 ;;		line 63 in file "RTC.c"
 16619 ;; Parameters:    Size  Location     Type
 16620 ;;		None
 16621 ;; Auto vars:     Size  Location     Type
 16622 ;;  printRTC       14   44[COMRAM] int [7]
 16623 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 16624 ;;  printRTC        2   64[COMRAM] int 
 16625 ;;  printRTC        2   58[COMRAM] int 
 16626 ;; Return value:  Size  Location     Type
 16627 ;;                  1    wreg      void 
 16628 ;; Registers used:
 16629 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16630 ;; Tracked objects:
 16631 ;;		On entry : 0/0
 16632 ;;		On exit  : 0/0
 16633 ;;		Unchanged: 0/0
 16634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16636 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16637 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16638 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16639 ;;Total ram usage:       25 bytes
 16640 ;; Hardware stack levels used:    1
 16641 ;; Hardware stack levels required when called:    3
 16642 ;; This function calls:
 16643 ;;		i2_getRTC
 16644 ;;		i2_lcdInst
 16645 ;;		i2_printf
 16646 ;;		i2_strcpy
 16647 ;; This function is called by:
 16648 ;;		i2_change_state_to_menu_start
 16649 ;; This function uses a non-reentrant model
 16650 ;;
 16651                           
 16652                           	psect	text61
 16653  0024B2                     __ptext61:
 16654                           	opt stack 0
 16655  0024B2                     i2_printRTC:
 16656                           	opt stack 18
 16657                           
 16658                           ;RTC.c: 64: getRTC();
 16659                           
 16660                           ;incstack = 0
 16661  0024B2  EC58  F01E         	call	i2_getRTC	;wreg free
 16662                           
 16663                           ;RTC.c: 65: char month[] = "MMM";
 16664  0024B6  C133  F03D         	movff	printRTC@F3216,i2printRTC@month
 16665  0024BA  C134  F03E         	movff	printRTC@F3216+1,i2printRTC@month+1
 16666  0024BE  C135  F03F         	movff	printRTC@F3216+2,i2printRTC@month+2
 16667  0024C2  C136  F040         	movff	printRTC@F3216+3,i2printRTC@month+3
 16668                           
 16669                           ;RTC.c: 66: int INT_time[7];
 16670                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 16671  0024C6  0E00               	movlw	0
 16672  0024C8  6E42               	movwf	i2printRTC@i+1,c
 16673  0024CA  0E00               	movlw	0
 16674  0024CC  6E41               	movwf	i2printRTC@i,c
 16675  0024CE  BE42               	btfsc	i2printRTC@i+1,7,c
 16676  0024D0  D006               	goto	i2l6125
 16677  0024D2  5042               	movf	i2printRTC@i+1,w,c
 16678  0024D4  E135               	bnz	i2l602
 16679  0024D6  0E07               	movlw	7
 16680  0024D8  5C41               	subwf	i2printRTC@i,w,c
 16681  0024DA  B0D8               	btfsc	status,0,c
 16682  0024DC  D031               	goto	i2l602
 16683  0024DE                     i2l6125:
 16684                           
 16685                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 16686  0024DE  0E24               	movlw	low _time
 16687  0024E0  2441               	addwf	i2printRTC@i,w,c
 16688  0024E2  6ED9               	movwf	fsr2l,c
 16689  0024E4  0E01               	movlw	high _time
 16690  0024E6  2042               	addwfc	i2printRTC@i+1,w,c
 16691  0024E8  6EDA               	movwf	fsr2h,c
 16692  0024EA  50DF               	movf	indf2,w,c
 16693  0024EC  6E2A               	movwf	??i2_printRTC& (0+255),c
 16694  0024EE  3A2A               	swapf	??i2_printRTC,f,c
 16695  0024F0  0E0F               	movlw	15
 16696  0024F2  162A               	andwf	??i2_printRTC,f,c
 16697  0024F4  0E0F               	movlw	15
 16698  0024F6  162A               	andwf	??i2_printRTC,f,c
 16699  0024F8  502A               	movf	??i2_printRTC,w,c
 16700  0024FA  0D0A               	mullw	10
 16701  0024FC  0E24               	movlw	low _time
 16702  0024FE  2441               	addwf	i2printRTC@i,w,c
 16703  002500  6ED9               	movwf	fsr2l,c
 16704  002502  0E01               	movlw	high _time
 16705  002504  2042               	addwfc	i2printRTC@i+1,w,c
 16706  002506  6EDA               	movwf	fsr2h,c
 16707  002508  50DF               	movf	indf2,w,c
 16708  00250A  0B0F               	andlw	15
 16709  00250C  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 16710  00250E  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 16711  002510  50F3               	movf	prodl,w,c
 16712  002512  262B               	addwf	??i2_printRTC+1,f,c
 16713  002514  50F4               	movf	prodh,w,c
 16714  002516  222C               	addwfc	??i2_printRTC+2,f,c
 16715  002518  90D8               	bcf	status,0,c
 16716  00251A  3441               	rlcf	i2printRTC@i,w,c
 16717  00251C  6ED9               	movwf	fsr2l,c
 16718  00251E  3442               	rlcf	i2printRTC@i+1,w,c
 16719  002520  6EDA               	movwf	fsr2h,c
 16720  002522  0E2D               	movlw	low i2printRTC@INT_time
 16721  002524  26D9               	addwf	fsr2l,f,c
 16722  002526  0E00               	movlw	high i2printRTC@INT_time
 16723  002528  22DA               	addwfc	fsr2h,f,c
 16724  00252A  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 16725  00252E  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 16726  002532  4A41               	infsnz	i2printRTC@i,f,c
 16727  002534  2A42               	incf	i2printRTC@i+1,f,c
 16728  002536  BE42               	btfsc	i2printRTC@i+1,7,c
 16729  002538  D7D2               	goto	i2l6125
 16730  00253A  5042               	movf	i2printRTC@i+1,w,c
 16731  00253C  E101               	bnz	i2u465_40
 16732  00253E  D7CB               	goto	L10
 16733  002540                     i2u465_40:
 16734  002540                     i2l602:
 16735                           
 16736                           ;RTC.c: 69: }
 16737                           ;RTC.c: 70: int RTC_month = INT_time[5];
 16738  002540  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 16739  002544  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 16740                           
 16741                           ;RTC.c: 71: switch(RTC_month){
 16742  002548  D084               	goto	i2l6157
 16743  00254A                     i2l6131:
 16744                           
 16745                           ;RTC.c: 73: strcpy(month, "JAN");
 16746  00254A  0E3D               	movlw	low i2printRTC@month
 16747  00254C  6E01               	movwf	i2strcpy@to,c
 16748  00254E  0E00               	movlw	high i2printRTC@month
 16749  002550  6E02               	movwf	i2strcpy@to+1,c
 16750  002552  0EDB               	movlw	low STR_8
 16751  002554  6E03               	movwf	i2strcpy@from,c
 16752  002556  0EFF               	movlw	high STR_8
 16753  002558  6E04               	movwf	i2strcpy@from+1,c
 16754  00255A  EC9C  F021         	call	i2_strcpy	;wreg free
 16755                           
 16756                           ;RTC.c: 74: break;
 16757  00255E  D0A6               	goto	i2l6159
 16758  002560                     i2l6133:
 16759                           
 16760                           ;RTC.c: 76: strcpy(month, "FEB");
 16761  002560  0E3D               	movlw	low i2printRTC@month
 16762  002562  6E01               	movwf	i2strcpy@to,c
 16763  002564  0E00               	movlw	high i2printRTC@month
 16764  002566  6E02               	movwf	i2strcpy@to+1,c
 16765  002568  0ECB               	movlw	low STR_9
 16766  00256A  6E03               	movwf	i2strcpy@from,c
 16767  00256C  0EFF               	movlw	high STR_9
 16768  00256E  6E04               	movwf	i2strcpy@from+1,c
 16769  002570  EC9C  F021         	call	i2_strcpy	;wreg free
 16770                           
 16771                           ;RTC.c: 77: break;
 16772  002574  D09B               	goto	i2l6159
 16773  002576                     i2l6135:
 16774                           
 16775                           ;RTC.c: 79: strcpy(month, "MAR");
 16776  002576  0E3D               	movlw	low i2printRTC@month
 16777  002578  6E01               	movwf	i2strcpy@to,c
 16778  00257A  0E00               	movlw	high i2printRTC@month
 16779  00257C  6E02               	movwf	i2strcpy@to+1,c
 16780  00257E  0EE7               	movlw	low STR_10
 16781  002580  6E03               	movwf	i2strcpy@from,c
 16782  002582  0EFF               	movlw	high STR_10
 16783  002584  6E04               	movwf	i2strcpy@from+1,c
 16784  002586  EC9C  F021         	call	i2_strcpy	;wreg free
 16785                           
 16786                           ;RTC.c: 80: break;
 16787  00258A  D090               	goto	i2l6159
 16788  00258C                     i2l6137:
 16789                           
 16790                           ;RTC.c: 82: strcpy(month, "APR");
 16791  00258C  0E3D               	movlw	low i2printRTC@month
 16792  00258E  6E01               	movwf	i2strcpy@to,c
 16793  002590  0E00               	movlw	high i2printRTC@month
 16794  002592  6E02               	movwf	i2strcpy@to+1,c
 16795  002594  0EEB               	movlw	low STR_11
 16796  002596  6E03               	movwf	i2strcpy@from,c
 16797  002598  0EFF               	movlw	high STR_11
 16798  00259A  6E04               	movwf	i2strcpy@from+1,c
 16799  00259C  EC9C  F021         	call	i2_strcpy	;wreg free
 16800                           
 16801                           ;RTC.c: 83: break;
 16802  0025A0  D085               	goto	i2l6159
 16803  0025A2                     i2l6139:
 16804                           
 16805                           ;RTC.c: 85: strcpy(month, "MAY");
 16806  0025A2  0E3D               	movlw	low i2printRTC@month
 16807  0025A4  6E01               	movwf	i2strcpy@to,c
 16808  0025A6  0E00               	movlw	high i2printRTC@month
 16809  0025A8  6E02               	movwf	i2strcpy@to+1,c
 16810  0025AA  0EFB               	movlw	low STR_12
 16811  0025AC  6E03               	movwf	i2strcpy@from,c
 16812  0025AE  0EFF               	movlw	high STR_12
 16813  0025B0  6E04               	movwf	i2strcpy@from+1,c
 16814  0025B2  EC9C  F021         	call	i2_strcpy	;wreg free
 16815                           
 16816                           ;RTC.c: 86: break;
 16817  0025B6  D07A               	goto	i2l6159
 16818  0025B8                     i2l6141:
 16819                           
 16820                           ;RTC.c: 88: strcpy(month, "JUN");
 16821  0025B8  0E3D               	movlw	low i2printRTC@month
 16822  0025BA  6E01               	movwf	i2strcpy@to,c
 16823  0025BC  0E00               	movlw	high i2printRTC@month
 16824  0025BE  6E02               	movwf	i2strcpy@to+1,c
 16825  0025C0  0EDF               	movlw	low STR_13
 16826  0025C2  6E03               	movwf	i2strcpy@from,c
 16827  0025C4  0EFF               	movlw	high STR_13
 16828  0025C6  6E04               	movwf	i2strcpy@from+1,c
 16829  0025C8  EC9C  F021         	call	i2_strcpy	;wreg free
 16830                           
 16831                           ;RTC.c: 89: break;
 16832  0025CC  D06F               	goto	i2l6159
 16833  0025CE                     i2l6143:
 16834                           
 16835                           ;RTC.c: 91: strcpy(month, "JUL");
 16836  0025CE  0E3D               	movlw	low i2printRTC@month
 16837  0025D0  6E01               	movwf	i2strcpy@to,c
 16838  0025D2  0E00               	movlw	high i2printRTC@month
 16839  0025D4  6E02               	movwf	i2strcpy@to+1,c
 16840  0025D6  0ED7               	movlw	low STR_14
 16841  0025D8  6E03               	movwf	i2strcpy@from,c
 16842  0025DA  0EFF               	movlw	high STR_14
 16843  0025DC  6E04               	movwf	i2strcpy@from+1,c
 16844  0025DE  EC9C  F021         	call	i2_strcpy	;wreg free
 16845                           
 16846                           ;RTC.c: 92: break;
 16847  0025E2  D064               	goto	i2l6159
 16848  0025E4                     i2l6145:
 16849                           
 16850                           ;RTC.c: 94: strcpy(month, "AUG");
 16851  0025E4  0E3D               	movlw	low i2printRTC@month
 16852  0025E6  6E01               	movwf	i2strcpy@to,c
 16853  0025E8  0E00               	movlw	high i2printRTC@month
 16854  0025EA  6E02               	movwf	i2strcpy@to+1,c
 16855  0025EC  0ED3               	movlw	low STR_15
 16856  0025EE  6E03               	movwf	i2strcpy@from,c
 16857  0025F0  0EFF               	movlw	high STR_15
 16858  0025F2  6E04               	movwf	i2strcpy@from+1,c
 16859  0025F4  EC9C  F021         	call	i2_strcpy	;wreg free
 16860                           
 16861                           ;RTC.c: 95: break;
 16862  0025F8  D059               	goto	i2l6159
 16863  0025FA                     i2l6147:
 16864                           
 16865                           ;RTC.c: 97: strcpy(month, "SEP");
 16866  0025FA  0E3D               	movlw	low i2printRTC@month
 16867  0025FC  6E01               	movwf	i2strcpy@to,c
 16868  0025FE  0E00               	movlw	high i2printRTC@month
 16869  002600  6E02               	movwf	i2strcpy@to+1,c
 16870  002602  0EE3               	movlw	low STR_16
 16871  002604  6E03               	movwf	i2strcpy@from,c
 16872  002606  0EFF               	movlw	high STR_16
 16873  002608  6E04               	movwf	i2strcpy@from+1,c
 16874  00260A  EC9C  F021         	call	i2_strcpy	;wreg free
 16875                           
 16876                           ;RTC.c: 98: break;
 16877  00260E  D04E               	goto	i2l6159
 16878  002610                     i2l6149:
 16879                           
 16880                           ;RTC.c: 100: strcpy(month, "OCT");
 16881  002610  0E3D               	movlw	low i2printRTC@month
 16882  002612  6E01               	movwf	i2strcpy@to,c
 16883  002614  0E00               	movlw	high i2printRTC@month
 16884  002616  6E02               	movwf	i2strcpy@to+1,c
 16885  002618  0EF3               	movlw	low STR_17
 16886  00261A  6E03               	movwf	i2strcpy@from,c
 16887  00261C  0EFF               	movlw	high STR_17
 16888  00261E  6E04               	movwf	i2strcpy@from+1,c
 16889  002620  EC9C  F021         	call	i2_strcpy	;wreg free
 16890                           
 16891                           ;RTC.c: 101: break;
 16892  002624  D043               	goto	i2l6159
 16893  002626                     i2l6151:
 16894                           
 16895                           ;RTC.c: 103: strcpy(month, "NOV");
 16896  002626  0E3D               	movlw	low i2printRTC@month
 16897  002628  6E01               	movwf	i2strcpy@to,c
 16898  00262A  0E00               	movlw	high i2printRTC@month
 16899  00262C  6E02               	movwf	i2strcpy@to+1,c
 16900  00262E  0EF7               	movlw	low STR_18
 16901  002630  6E03               	movwf	i2strcpy@from,c
 16902  002632  0EFF               	movlw	high STR_18
 16903  002634  6E04               	movwf	i2strcpy@from+1,c
 16904  002636  EC9C  F021         	call	i2_strcpy	;wreg free
 16905                           
 16906                           ;RTC.c: 104: break;
 16907  00263A  D038               	goto	i2l6159
 16908  00263C                     i2l6153:
 16909                           
 16910                           ;RTC.c: 106: strcpy(month, "DEC");
 16911  00263C  0E3D               	movlw	low i2printRTC@month
 16912  00263E  6E01               	movwf	i2strcpy@to,c
 16913  002640  0E00               	movlw	high i2printRTC@month
 16914  002642  6E02               	movwf	i2strcpy@to+1,c
 16915  002644  0ECF               	movlw	low STR_19
 16916  002646  6E03               	movwf	i2strcpy@from,c
 16917  002648  0EFF               	movlw	high STR_19
 16918  00264A  6E04               	movwf	i2strcpy@from+1,c
 16919  00264C  EC9C  F021         	call	i2_strcpy	;wreg free
 16920                           
 16921                           ;RTC.c: 108: }
 16922                           
 16923                           ;RTC.c: 107: break;
 16924  002650  D02D               	goto	i2l6159
 16925  002652                     i2l6157:
 16926  002652  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 16927  002656  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 16928                           
 16929                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16930                           ; Switch size 1, requested type "space"
 16931                           ; Number of cases is 1, Range of values is 0 to 0
 16932                           ; switch strategies available:
 16933                           ; Name         Instructions Cycles
 16934                           ; simple_byte            4     3 (average)
 16935                           ;	Chosen strategy is simple_byte
 16936  00265A  502B               	movf	??i2_printRTC+1,w,c
 16937  00265C  0A00               	xorlw	0	; case 0
 16938  00265E  A4D8               	btfss	status,2,c
 16939  002660  D025               	goto	i2l6159
 16940                           
 16941                           ; Switch size 1, requested type "space"
 16942                           ; Number of cases is 12, Range of values is 1 to 12
 16943                           ; switch strategies available:
 16944                           ; Name         Instructions Cycles
 16945                           ; simple_byte           37    19 (average)
 16946                           ;	Chosen strategy is simple_byte
 16947  002662  502A               	movf	??i2_printRTC,w,c
 16948  002664  0A01               	xorlw	1	; case 1
 16949  002666  B4D8               	btfsc	status,2,c
 16950  002668  D770               	goto	i2l6131
 16951  00266A  0A03               	xorlw	3	; case 2
 16952  00266C  B4D8               	btfsc	status,2,c
 16953  00266E  D778               	goto	i2l6133
 16954  002670  0A01               	xorlw	1	; case 3
 16955  002672  B4D8               	btfsc	status,2,c
 16956  002674  D780               	goto	i2l6135
 16957  002676  0A07               	xorlw	7	; case 4
 16958  002678  B4D8               	btfsc	status,2,c
 16959  00267A  D788               	goto	i2l6137
 16960  00267C  0A01               	xorlw	1	; case 5
 16961  00267E  B4D8               	btfsc	status,2,c
 16962  002680  D790               	goto	i2l6139
 16963  002682  0A03               	xorlw	3	; case 6
 16964  002684  B4D8               	btfsc	status,2,c
 16965  002686  D798               	goto	i2l6141
 16966  002688  0A01               	xorlw	1	; case 7
 16967  00268A  B4D8               	btfsc	status,2,c
 16968  00268C  D7A0               	goto	i2l6143
 16969  00268E  0A0F               	xorlw	15	; case 8
 16970  002690  B4D8               	btfsc	status,2,c
 16971  002692  D7A8               	goto	i2l6145
 16972  002694  0A01               	xorlw	1	; case 9
 16973  002696  B4D8               	btfsc	status,2,c
 16974  002698  D7B0               	goto	i2l6147
 16975  00269A  0A03               	xorlw	3	; case 10
 16976  00269C  B4D8               	btfsc	status,2,c
 16977  00269E  D7B8               	goto	i2l6149
 16978  0026A0  0A01               	xorlw	1	; case 11
 16979  0026A2  B4D8               	btfsc	status,2,c
 16980  0026A4  D7C0               	goto	i2l6151
 16981  0026A6  0A07               	xorlw	7	; case 12
 16982  0026A8  B4D8               	btfsc	status,2,c
 16983  0026AA  D7C8               	goto	i2l6153
 16984  0026AC                     i2l6159:
 16985                           
 16986                           ;RTC.c: 109: lcdInst(0b10000000);;
 16987  0026AC  0E80               	movlw	128
 16988  0026AE  ECEF  F023         	call	i2_lcdInst
 16989                           
 16990                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 16991  0026B2  0E40               	movlw	low STR_21
 16992  0026B4  6E0D               	movwf	i2printf@f,c
 16993  0026B6  0EFB               	movlw	high STR_21
 16994  0026B8  6E0E               	movwf	i2printf@f+1,c
 16995  0026BA  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 16996  0026BE  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 16997  0026C2  0E3D               	movlw	low i2printRTC@month
 16998  0026C4  6E11               	movwf	?i2_printf+4,c
 16999  0026C6  0E00               	movlw	high i2printRTC@month
 17000  0026C8  6E12               	movwf	?i2_printf+5,c
 17001  0026CA  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 17002  0026CE  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 17003  0026D2  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 17004  0026D6  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 17005  0026DA  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 17006  0026DE  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 17007  0026E2  ECD4  F00A         	call	i2_printf	;wreg free
 17008  0026E6  0012               	return		;funcret
 17009  0026E8                     __end_ofi2_printRTC:
 17010                           	opt stack 0
 17011                           pclatu	equ	0xFFB
 17012                           pclath	equ	0xFFA
 17013                           tblptru	equ	0xFF8
 17014                           tblptrh	equ	0xFF7
 17015                           tblptrl	equ	0xFF6
 17016                           tablat	equ	0xFF5
 17017                           prodh	equ	0xFF4
 17018                           prodl	equ	0xFF3
 17019                           intcon	equ	0xFF2
 17020                           intcon2	equ	0xFF1
 17021                           intcon3	equ	0xFF0
 17022                           indf0	equ	0xFEF
 17023                           postinc0	equ	0xFEE
 17024                           fsr0h	equ	0xFEA
 17025                           fsr0l	equ	0xFE9
 17026                           wreg	equ	0xFE8
 17027                           postdec1	equ	0xFE5
 17028                           fsr1h	equ	0xFE2
 17029                           fsr1l	equ	0xFE1
 17030                           indf2	equ	0xFDF
 17031                           postinc2	equ	0xFDE
 17032                           postdec2	equ	0xFDD
 17033                           fsr2h	equ	0xFDA
 17034                           fsr2l	equ	0xFD9
 17035                           status	equ	0xFD8
 17036                           
 17037 ;; *************** function i2_strcpy *****************
 17038 ;; Defined at:
 17039 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 17040 ;; Parameters:    Size  Location     Type
 17041 ;;  to              2    0[COMRAM] PTR unsigned char 
 17042 ;;		 -> printRTC@month(4), UI@month(4), 
 17043 ;;  from            2    2[COMRAM] PTR const unsigned char 
 17044 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 17045 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 17046 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 17047 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 17048 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 17049 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 17050 ;;		 -> STR_8(4), 
 17051 ;; Auto vars:     Size  Location     Type
 17052 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 17053 ;;		 -> printRTC@month(4), UI@month(4), 
 17054 ;; Return value:  Size  Location     Type
 17055 ;;                  2    0[COMRAM] PTR unsigned char 
 17056 ;; Registers used:
 17057 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 17058 ;; Tracked objects:
 17059 ;;		On entry : 0/0
 17060 ;;		On exit  : 0/0
 17061 ;;		Unchanged: 0/0
 17062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17063 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17064 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17066 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17067 ;;Total ram usage:        6 bytes
 17068 ;; Hardware stack levels used:    1
 17069 ;; This function calls:
 17070 ;;		Nothing
 17071 ;; This function is called by:
 17072 ;;		i2_printRTC
 17073 ;; This function uses a non-reentrant model
 17074 ;;
 17075                           
 17076                           	psect	text62
 17077  004338                     __ptext62:
 17078                           	opt stack 0
 17079  004338                     i2_strcpy:
 17080                           	opt stack 20
 17081                           
 17082                           ;incstack = 0
 17083  004338  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 17084  00433C  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 17085  004340  D004               	goto	i2l5795
 17086  004342                     i2l5793:
 17087  004342  4A05               	infsnz	i2strcpy@cp,f,c
 17088  004344  2A06               	incf	i2strcpy@cp+1,f,c
 17089  004346  4A03               	infsnz	i2strcpy@from,f,c
 17090  004348  2A04               	incf	i2strcpy@from+1,f,c
 17091  00434A                     i2l5795:
 17092  00434A  C003  FFF6         	movff	i2strcpy@from,tblptrl
 17093  00434E  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 17094  004352                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17095  004352  6AF8               	clrf	tblptru,c
 17096  004354                     	endif
 17097  004354                     	if	0	;tblptru may be non-zero
 17098  004354                     	endif
 17099  004354  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 17100  004358  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 17101  00435C  0008               	tblrd		*
 17102  00435E  CFF5 FFDF          	movff	tablat,indf2
 17103  004362  50DF               	movf	indf2,w,c
 17104  004364  B4D8               	btfsc	status,2,c
 17105  004366  0012               	return	
 17106  004368  D7EC               	goto	i2l5793
 17107  00436A                     __end_ofi2_strcpy:
 17108                           	opt stack 0
 17109                           pclatu	equ	0xFFB
 17110                           pclath	equ	0xFFA
 17111                           tblptru	equ	0xFF8
 17112                           tblptrh	equ	0xFF7
 17113                           tblptrl	equ	0xFF6
 17114                           tablat	equ	0xFF5
 17115                           prodh	equ	0xFF4
 17116                           prodl	equ	0xFF3
 17117                           intcon	equ	0xFF2
 17118                           intcon2	equ	0xFF1
 17119                           intcon3	equ	0xFF0
 17120                           indf0	equ	0xFEF
 17121                           postinc0	equ	0xFEE
 17122                           fsr0h	equ	0xFEA
 17123                           fsr0l	equ	0xFE9
 17124                           wreg	equ	0xFE8
 17125                           postdec1	equ	0xFE5
 17126                           fsr1h	equ	0xFE2
 17127                           fsr1l	equ	0xFE1
 17128                           indf2	equ	0xFDF
 17129                           postinc2	equ	0xFDE
 17130                           postdec2	equ	0xFDD
 17131                           fsr2h	equ	0xFDA
 17132                           fsr2l	equ	0xFD9
 17133                           status	equ	0xFD8
 17134                           
 17135 ;; *************** function _inputHandler *****************
 17136 ;; Defined at:
 17137 ;;		line 372 in file "UI.c"
 17138 ;; Parameters:    Size  Location     Type
 17139 ;;		None
 17140 ;; Auto vars:     Size  Location     Type
 17141 ;;		None
 17142 ;; Return value:  Size  Location     Type
 17143 ;;                  2   41[COMRAM] int 
 17144 ;; Registers used:
 17145 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17146 ;; Tracked objects:
 17147 ;;		On entry : 0/0
 17148 ;;		On exit  : 0/0
 17149 ;;		Unchanged: 0/0
 17150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17151 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17153 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17154 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17155 ;;Total ram usage:        4 bytes
 17156 ;; Hardware stack levels used:    1
 17157 ;; Hardware stack levels required when called:    4
 17158 ;; This function calls:
 17159 ;;		_change_state_to_logs_11
 17160 ;;		_change_state_to_logs_12
 17161 ;;		_change_state_to_logs_22
 17162 ;;		_change_state_to_logs_23
 17163 ;;		_change_state_to_logs_33
 17164 ;;		_change_state_to_logs_34
 17165 ;;		_change_state_to_menu_11
 17166 ;;		_change_state_to_menu_23
 17167 ;;		i2_change_state_to_menu_12
 17168 ;;		i2_change_state_to_menu_22
 17169 ;; This function is called by:
 17170 ;;		_updateMenu
 17171 ;; This function uses a non-reentrant model
 17172 ;;
 17173                           
 17174                           	psect	text63
 17175  0028DA                     __ptext63:
 17176                           	opt stack 0
 17177  0028DA                     _inputHandler:
 17178                           	opt stack 18
 17179                           
 17180                           ;UI.c: 377: if(firstboot){
 17181                           
 17182                           ;incstack = 0
 17183  0028DA  5075               	movf	_firstboot,w,c
 17184  0028DC  1076               	iorwf	_firstboot+1,w,c
 17185  0028DE  B4D8               	btfsc	status,2,c
 17186  0028E0  D00B               	goto	i2l6227
 17187                           
 17188                           ;UI.c: 378: change_state_to_menu_11();
 17189  0028E2  ECFD  F021         	call	_change_state_to_menu_11	;wreg free
 17190                           
 17191                           ;UI.c: 379: firstboot = 0;
 17192  0028E6  0E00               	movlw	0
 17193  0028E8  6E76               	movwf	_firstboot+1,c
 17194  0028EA  0E00               	movlw	0
 17195  0028EC  6E75               	movwf	_firstboot,c
 17196                           
 17197                           ;UI.c: 380: return 0;
 17198  0028EE  0E00               	movlw	0
 17199  0028F0  6E2B               	movwf	?_inputHandler+1,c
 17200  0028F2  0E00               	movlw	0
 17201  0028F4  6E2A               	movwf	?_inputHandler,c
 17202  0028F6  0012               	return	
 17203  0028F8                     i2l6227:
 17204                           
 17205                           ;UI.c: 381: }
 17206                           ;UI.c: 382: if (logstate){
 17207  0028F8  0100               	movlb	0	; () banked
 17208  0028FA  51F6               	movf	_logstate& (0+255),w,b
 17209  0028FC  0100               	movlb	0	; () banked
 17210  0028FE  11F7               	iorwf	(_logstate+1)& (0+255),w,b
 17211  002900  B4D8               	btfsc	status,2,c
 17212  002902  D0C7               	goto	i2l6345
 17213                           
 17214                           ; BSR set to: 0
 17215                           ;UI.c: 383: if(input == 'C' && PORTBbits.RB1 == 1){
 17216  002904  0E43               	movlw	67
 17217  002906  187D               	xorwf	_input,w,c	;volatile
 17218  002908  A4D8               	btfss	status,2,c
 17219  00290A  D012               	goto	i2l6245
 17220                           
 17221                           ; BSR set to: 0
 17222  00290C  B281               	btfsc	3969,1,c	;volatile
 17223  00290E  D009               	goto	i2l6237
 17224  002910  D00F               	goto	i2l6245
 17225  002912                     i2l6235:
 17226                           
 17227                           ;UI.c: 386: _delay((unsigned long)((10)*(32000000/4000.0)));
 17228  002912  0E68               	movlw	104
 17229  002914  6E2C               	movwf	??_inputHandler& (0+255),c
 17230  002916  0EE4               	movlw	228
 17231  002918                     i2u825_47:
 17232  002918  2EE8               	decfsz	wreg,f,c
 17233  00291A  D7FE               	bra	i2u825_47
 17234  00291C  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 17235  00291E  D7FC               	bra	i2u825_47
 17236  002920  D000               	nop2	
 17237  002922                     i2l6237:
 17238  002922  B281               	btfsc	3969,1,c	;volatile
 17239  002924  D7F6               	goto	i2l6235
 17240  002926                     i2l6239:
 17241                           
 17242                           ;UI.c: 387: }
 17243                           ;UI.c: 388: return 0;
 17244  002926  0E00               	movlw	0
 17245  002928  6E2B               	movwf	?_inputHandler+1,c
 17246  00292A  0E00               	movlw	0
 17247  00292C  6E2A               	movwf	?_inputHandler,c
 17248  00292E  0012               	return	
 17249  002930                     i2l6245:
 17250                           
 17251                           ;UI.c: 390: else if (input == 'D'){
 17252  002930  0E44               	movlw	68
 17253  002932  187D               	xorwf	_input,w,c	;volatile
 17254  002934  A4D8               	btfss	status,2,c
 17255  002936  D7F7               	goto	i2l6239
 17256                           
 17257                           ;UI.c: 392: logstate = 0;
 17258  002938  0E00               	movlw	0
 17259  00293A  0100               	movlb	0	; () banked
 17260  00293C  6FF7               	movwf	(_logstate+1)& (0+255),b
 17261  00293E  0E00               	movlw	0
 17262  002940  6FF6               	movwf	_logstate& (0+255),b
 17263                           
 17264                           ;UI.c: 393: switch(cur_state){
 17265  002942  D012               	goto	i2l6263
 17266  002944                     i2l6249:
 17267                           
 17268                           ;UI.c: 395: change_state_to_logs_11();
 17269  002944  EC75  F022         	call	_change_state_to_logs_11	;wreg free
 17270                           
 17271                           ;UI.c: 396: break;
 17272  002948  D7EE               	goto	i2l6239
 17273  00294A                     i2l6251:
 17274                           
 17275                           ;UI.c: 398: change_state_to_logs_12();
 17276  00294A  EC5D  F022         	call	_change_state_to_logs_12	;wreg free
 17277                           
 17278                           ;UI.c: 399: break;
 17279  00294E  D7EB               	goto	i2l6239
 17280  002950                     i2l6253:
 17281                           
 17282                           ;UI.c: 401: change_state_to_logs_22();
 17283  002950  EC45  F022         	call	_change_state_to_logs_22	;wreg free
 17284                           
 17285                           ;UI.c: 402: break;
 17286  002954  D7E8               	goto	i2l6239
 17287  002956                     i2l6255:
 17288                           
 17289                           ;UI.c: 404: change_state_to_logs_23();
 17290  002956  ECBB  F022         	call	_change_state_to_logs_23	;wreg free
 17291                           
 17292                           ;UI.c: 405: break;
 17293  00295A  D7E5               	goto	i2l6239
 17294  00295C                     i2l6257:
 17295                           
 17296                           ;UI.c: 407: change_state_to_logs_33();
 17297  00295C  EC2D  F022         	call	_change_state_to_logs_33	;wreg free
 17298                           
 17299                           ;UI.c: 408: break;
 17300  002960  D7E2               	goto	i2l6239
 17301  002962                     i2l6259:
 17302                           
 17303                           ;UI.c: 410: change_state_to_logs_34();
 17304  002962  EC15  F022         	call	_change_state_to_logs_34	;wreg free
 17305                           
 17306                           ;UI.c: 412: }
 17307                           
 17308                           ;UI.c: 411: break;
 17309  002966  D7DF               	goto	i2l6239
 17310  002968                     i2l6263:
 17311  002968  C0E0  F02C         	movff	_cur_state,??_inputHandler
 17312  00296C  C0E1  F02D         	movff	_cur_state+1,??_inputHandler+1
 17313                           
 17314                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 17315                           ; Switch size 1, requested type "space"
 17316                           ; Number of cases is 2, Range of values is 3 to 4
 17317                           ; switch strategies available:
 17318                           ; Name         Instructions Cycles
 17319                           ; simple_byte            7     4 (average)
 17320                           ;	Chosen strategy is simple_byte
 17321  002970  502D               	movf	??_inputHandler+1,w,c
 17322  002972  0A03               	xorlw	3	; case 3
 17323  002974  B4D8               	btfsc	status,2,c
 17324  002976  D004               	goto	i2l8455
 17325  002978  0A07               	xorlw	7	; case 4
 17326  00297A  B4D8               	btfsc	status,2,c
 17327  00297C  D00F               	goto	i2l8457
 17328  00297E  D7D3               	goto	i2l6239
 17329  002980                     i2l8455:
 17330                           
 17331                           ; Switch size 1, requested type "space"
 17332                           ; Number of cases is 4, Range of values is 243 to 255
 17333                           ; switch strategies available:
 17334                           ; Name         Instructions Cycles
 17335                           ; simple_byte           13     7 (average)
 17336                           ;	Chosen strategy is simple_byte
 17337  002980  502C               	movf	??_inputHandler,w,c
 17338  002982  0AF3               	xorlw	243	; case 243
 17339  002984  B4D8               	btfsc	status,2,c
 17340  002986  D7DE               	goto	i2l6249
 17341  002988  0A07               	xorlw	7	; case 244
 17342  00298A  B4D8               	btfsc	status,2,c
 17343  00298C  D7DE               	goto	i2l6251
 17344  00298E  0A0A               	xorlw	10	; case 254
 17345  002990  B4D8               	btfsc	status,2,c
 17346  002992  D7DE               	goto	i2l6253
 17347  002994  0A01               	xorlw	1	; case 255
 17348  002996  B4D8               	btfsc	status,2,c
 17349  002998  D7DE               	goto	i2l6255
 17350  00299A  D7C5               	goto	i2l6239
 17351  00299C                     i2l8457:
 17352                           
 17353                           ; Switch size 1, requested type "space"
 17354                           ; Number of cases is 2, Range of values is 9 to 10
 17355                           ; switch strategies available:
 17356                           ; Name         Instructions Cycles
 17357                           ; simple_byte            7     4 (average)
 17358                           ;	Chosen strategy is simple_byte
 17359  00299C  502C               	movf	??_inputHandler,w,c
 17360  00299E  0A09               	xorlw	9	; case 9
 17361  0029A0  B4D8               	btfsc	status,2,c
 17362  0029A2  D7DC               	goto	i2l6257
 17363  0029A4  0A03               	xorlw	3	; case 10
 17364  0029A6  B4D8               	btfsc	status,2,c
 17365  0029A8  D7DC               	goto	i2l6259
 17366  0029AA  D7BD               	goto	i2l6239
 17367  0029AC                     i2l6275:
 17368                           
 17369                           ;UI.c: 422: if(cur_state == 11){
 17370  0029AC  0E0B               	movlw	11
 17371  0029AE  0100               	movlb	0	; () banked
 17372  0029B0  19E0               	xorwf	_cur_state& (0+255),w,b
 17373  0029B2  0100               	movlb	0	; () banked
 17374  0029B4  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
 17375  0029B6  A4D8               	btfss	status,2,c
 17376  0029B8  D005               	goto	i2l6283
 17377                           
 17378                           ; BSR set to: 0
 17379                           ;UI.c: 423: return 0;
 17380  0029BA  0E00               	movlw	0
 17381  0029BC  6E2B               	movwf	?_inputHandler+1,c
 17382  0029BE  0E00               	movlw	0
 17383  0029C0  6E2A               	movwf	?_inputHandler,c
 17384                           
 17385                           ; BSR set to: 0
 17386  0029C2  0012               	return	
 17387  0029C4                     i2l6283:
 17388                           
 17389                           ; BSR set to: 0
 17390                           ;UI.c: 425: else{
 17391                           ;UI.c: 426: change_state_to_menu_11();
 17392  0029C4  ECFD  F021         	call	_change_state_to_menu_11	;wreg free
 17393                           
 17394                           ;UI.c: 427: }
 17395                           ;UI.c: 428: return 0;
 17396  0029C8  0E00               	movlw	0
 17397  0029CA  6E2B               	movwf	?_inputHandler+1,c
 17398  0029CC  0E00               	movlw	0
 17399  0029CE  6E2A               	movwf	?_inputHandler,c
 17400  0029D0  0012               	return	
 17401  0029D2                     i2l6289:
 17402                           
 17403                           ;UI.c: 430: if(cur_state == 22 | cur_state == 12){
 17404  0029D2  0E16               	movlw	22
 17405  0029D4  0100               	movlb	0	; () banked
 17406  0029D6  19E0               	xorwf	_cur_state& (0+255),w,b
 17407  0029D8  0100               	movlb	0	; () banked
 17408  0029DA  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
 17409  0029DC  B4D8               	btfsc	status,2,c
 17410  0029DE  D007               	goto	i2l6293
 17411                           
 17412                           ; BSR set to: 0
 17413  0029E0  0E0C               	movlw	12
 17414  0029E2  0100               	movlb	0	; () banked
 17415  0029E4  19E0               	xorwf	_cur_state& (0+255),w,b
 17416  0029E6  0100               	movlb	0	; () banked
 17417  0029E8  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
 17418  0029EA  A4D8               	btfss	status,2,c
 17419  0029EC  D005               	goto	i2l6299
 17420  0029EE                     i2l6293:
 17421                           
 17422                           ; BSR set to: 0
 17423                           ;UI.c: 431: return 0;
 17424  0029EE  0E00               	movlw	0
 17425  0029F0  6E2B               	movwf	?_inputHandler+1,c
 17426  0029F2  0E00               	movlw	0
 17427  0029F4  6E2A               	movwf	?_inputHandler,c
 17428                           
 17429                           ; BSR set to: 0
 17430  0029F6  0012               	return	
 17431  0029F8                     i2l6299:
 17432                           
 17433                           ; BSR set to: 0
 17434                           ;UI.c: 433: else if(cur_state == 23){
 17435  0029F8  0E17               	movlw	23
 17436  0029FA  0100               	movlb	0	; () banked
 17437  0029FC  19E0               	xorwf	_cur_state& (0+255),w,b
 17438  0029FE  0100               	movlb	0	; () banked
 17439  002A00  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
 17440  002A02  A4D8               	btfss	status,2,c
 17441  002A04  D003               	goto	i2l6303
 17442                           
 17443                           ; BSR set to: 0
 17444                           ;UI.c: 434: change_state_to_menu_22();
 17445  002A06  ECB5  F021         	call	i2_change_state_to_menu_22	;wreg free
 17446                           
 17447                           ;UI.c: 435: }
 17448  002A0A  D002               	goto	i2l6305
 17449  002A0C                     i2l6303:
 17450                           
 17451                           ;UI.c: 436: else{
 17452                           ;UI.c: 437: change_state_to_menu_12();
 17453  002A0C  ECCD  F021         	call	i2_change_state_to_menu_12	;wreg free
 17454  002A10                     i2l6305:
 17455                           
 17456                           ;UI.c: 438: }
 17457                           ;UI.c: 439: return 0;
 17458  002A10  0E00               	movlw	0
 17459  002A12  6E2B               	movwf	?_inputHandler+1,c
 17460  002A14  0E00               	movlw	0
 17461  002A16  6E2A               	movwf	?_inputHandler,c
 17462  002A18  0012               	return	
 17463  002A1A                     i2l6309:
 17464                           
 17465                           ;UI.c: 441: if(cur_state == 23){
 17466  002A1A  0E17               	movlw	23
 17467  002A1C  0100               	movlb	0	; () banked
 17468  002A1E  19E0               	xorwf	_cur_state& (0+255),w,b
 17469  002A20  0100               	movlb	0	; () banked
 17470  002A22  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
 17471  002A24  A4D8               	btfss	status,2,c
 17472  002A26  D005               	goto	i2l6317
 17473                           
 17474                           ; BSR set to: 0
 17475                           ;UI.c: 442: return 0;
 17476  002A28  0E00               	movlw	0
 17477  002A2A  6E2B               	movwf	?_inputHandler+1,c
 17478  002A2C  0E00               	movlw	0
 17479  002A2E  6E2A               	movwf	?_inputHandler,c
 17480                           
 17481                           ; BSR set to: 0
 17482  002A30  0012               	return	
 17483  002A32                     i2l6317:
 17484                           
 17485                           ; BSR set to: 0
 17486                           ;UI.c: 444: else{
 17487                           ;UI.c: 445: change_state_to_menu_23();
 17488  002A32  ECE5  F021         	call	_change_state_to_menu_23	;wreg free
 17489                           
 17490                           ;UI.c: 446: }
 17491                           ;UI.c: 447: return 0;
 17492  002A36  0E00               	movlw	0
 17493  002A38  6E2B               	movwf	?_inputHandler+1,c
 17494  002A3A  0E00               	movlw	0
 17495  002A3C  6E2A               	movwf	?_inputHandler,c
 17496  002A3E  0012               	return	
 17497  002A40                     i2l6323:
 17498                           
 17499                           ;UI.c: 450: up = 1;
 17500  002A40  0E00               	movlw	0
 17501  002A42  6E78               	movwf	_up+1,c
 17502  002A44  0E01               	movlw	1
 17503  002A46  6E77               	movwf	_up,c
 17504                           
 17505                           ;UI.c: 451: return 1;
 17506  002A48  0E00               	movlw	0
 17507  002A4A  6E2B               	movwf	?_inputHandler+1,c
 17508  002A4C  0E01               	movlw	1
 17509  002A4E  6E2A               	movwf	?_inputHandler,c
 17510  002A50  0012               	return	
 17511  002A52                     i2l6327:
 17512                           
 17513                           ;UI.c: 453: down = 1;
 17514  002A52  0E00               	movlw	0
 17515  002A54  6E68               	movwf	_down+1,c
 17516  002A56  0E01               	movlw	1
 17517  002A58  6E67               	movwf	_down,c
 17518                           
 17519                           ;UI.c: 454: return 1;
 17520  002A5A  0E00               	movlw	0
 17521  002A5C  6E2B               	movwf	?_inputHandler+1,c
 17522  002A5E  0E01               	movlw	1
 17523  002A60  6E2A               	movwf	?_inputHandler,c
 17524  002A62  0012               	return	
 17525  002A64                     i2l6331:
 17526                           
 17527                           ;UI.c: 456: enter = 1;
 17528  002A64  0E00               	movlw	0
 17529  002A66  6E6A               	movwf	_enter+1,c
 17530  002A68  0E01               	movlw	1
 17531  002A6A  6E69               	movwf	_enter,c
 17532                           
 17533                           ;UI.c: 457: return 1;
 17534  002A6C  0E00               	movlw	0
 17535  002A6E  6E2B               	movwf	?_inputHandler+1,c
 17536  002A70  0E01               	movlw	1
 17537  002A72  6E2A               	movwf	?_inputHandler,c
 17538  002A74  0012               	return	
 17539  002A76                     i2l6335:
 17540                           
 17541                           ;UI.c: 459: back = 1;
 17542  002A76  0E00               	movlw	0
 17543  002A78  6E5C               	movwf	_back+1,c
 17544  002A7A  0E01               	movlw	1
 17545  002A7C  6E5B               	movwf	_back,c
 17546                           
 17547                           ;UI.c: 460: return 1;
 17548  002A7E  0E00               	movlw	0
 17549  002A80  6E2B               	movwf	?_inputHandler+1,c
 17550  002A82  0E01               	movlw	1
 17551  002A84  6E2A               	movwf	?_inputHandler,c
 17552  002A86  0012               	return	
 17553  002A88                     i2l6339:
 17554                           
 17555                           ;UI.c: 463: return 1;
 17556  002A88  0E00               	movlw	0
 17557  002A8A  6E2B               	movwf	?_inputHandler+1,c
 17558  002A8C  0E01               	movlw	1
 17559  002A8E  6E2A               	movwf	?_inputHandler,c
 17560                           
 17561                           ;UI.c: 464: }
 17562  002A90  0012               	return	
 17563  002A92                     i2l6345:
 17564  002A92  507D               	movf	_input,w,c	;volatile
 17565                           
 17566                           ; Switch size 1, requested type "space"
 17567                           ; Number of cases is 7, Range of values is 49 to 68
 17568                           ; switch strategies available:
 17569                           ; Name         Instructions Cycles
 17570                           ; simple_byte           22    12 (average)
 17571                           ;	Chosen strategy is simple_byte
 17572  002A94  0A31               	xorlw	49	; case 49
 17573  002A96  B4D8               	btfsc	status,2,c
 17574  002A98  D789               	goto	i2l6275
 17575  002A9A  0A03               	xorlw	3	; case 50
 17576  002A9C  B4D8               	btfsc	status,2,c
 17577  002A9E  D799               	goto	i2l6289
 17578  002AA0  0A01               	xorlw	1	; case 51
 17579  002AA2  B4D8               	btfsc	status,2,c
 17580  002AA4  D7BA               	goto	i2l6309
 17581  002AA6  0A72               	xorlw	114	; case 65
 17582  002AA8  B4D8               	btfsc	status,2,c
 17583  002AAA  D7CA               	goto	i2l6323
 17584  002AAC  0A03               	xorlw	3	; case 66
 17585  002AAE  B4D8               	btfsc	status,2,c
 17586  002AB0  D7D0               	goto	i2l6327
 17587  002AB2  0A01               	xorlw	1	; case 67
 17588  002AB4  B4D8               	btfsc	status,2,c
 17589  002AB6  D7D6               	goto	i2l6331
 17590  002AB8  0A07               	xorlw	7	; case 68
 17591  002ABA  B4D8               	btfsc	status,2,c
 17592  002ABC  D7DC               	goto	i2l6335
 17593  002ABE  D7E4               	goto	i2l6339
 17594  002AC0                     __end_of_inputHandler:
 17595                           	opt stack 0
 17596                           pclatu	equ	0xFFB
 17597                           pclath	equ	0xFFA
 17598                           tblptru	equ	0xFF8
 17599                           tblptrh	equ	0xFF7
 17600                           tblptrl	equ	0xFF6
 17601                           tablat	equ	0xFF5
 17602                           prodh	equ	0xFF4
 17603                           prodl	equ	0xFF3
 17604                           intcon	equ	0xFF2
 17605                           intcon2	equ	0xFF1
 17606                           intcon3	equ	0xFF0
 17607                           indf0	equ	0xFEF
 17608                           postinc0	equ	0xFEE
 17609                           fsr0h	equ	0xFEA
 17610                           fsr0l	equ	0xFE9
 17611                           wreg	equ	0xFE8
 17612                           postdec1	equ	0xFE5
 17613                           fsr1h	equ	0xFE2
 17614                           fsr1l	equ	0xFE1
 17615                           indf2	equ	0xFDF
 17616                           postinc2	equ	0xFDE
 17617                           postdec2	equ	0xFDD
 17618                           fsr2h	equ	0xFDA
 17619                           fsr2l	equ	0xFD9
 17620                           status	equ	0xFD8
 17621                           
 17622 ;; *************** function i2_change_state_to_menu_22 *****************
 17623 ;; Defined at:
 17624 ;;		line 498 in file "UI.c"
 17625 ;; Parameters:    Size  Location     Type
 17626 ;;		None
 17627 ;; Auto vars:     Size  Location     Type
 17628 ;;		None
 17629 ;; Return value:  Size  Location     Type
 17630 ;;                  1    wreg      void 
 17631 ;; Registers used:
 17632 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17633 ;; Tracked objects:
 17634 ;;		On entry : 0/0
 17635 ;;		On exit  : 0/0
 17636 ;;		Unchanged: 0/0
 17637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17641 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17642 ;;Total ram usage:        0 bytes
 17643 ;; Hardware stack levels used:    1
 17644 ;; Hardware stack levels required when called:    3
 17645 ;; This function calls:
 17646 ;;		i2_lcdInst
 17647 ;;		i2_printf
 17648 ;; This function is called by:
 17649 ;;		_updateMenu
 17650 ;;		_inputHandler
 17651 ;; This function uses a non-reentrant model
 17652 ;;
 17653                           
 17654                           	psect	text64
 17655  00436A                     __ptext64:
 17656                           	opt stack 0
 17657  00436A                     i2_change_state_to_menu_22:
 17658                           	opt stack 19
 17659                           
 17660                           ;UI.c: 499: cur_state = 22;
 17661                           
 17662                           ;incstack = 0
 17663  00436A  0E00               	movlw	0
 17664  00436C  0100               	movlb	0	; () banked
 17665  00436E  6FE1               	movwf	(_cur_state+1)& (0+255),b
 17666  004370  0E16               	movlw	22
 17667  004372  6FE0               	movwf	_cur_state& (0+255),b
 17668                           
 17669                           ; BSR set to: 0
 17670                           ;UI.c: 501: lcdInst(0b10000000);;
 17671  004374  0E80               	movlw	128
 17672  004376  ECEF  F023         	call	i2_lcdInst
 17673                           
 17674                           ;UI.c: 502: printf("2. SORT        <");
 17675  00437A  0EC4               	movlw	low STR_34
 17676  00437C  6E0D               	movwf	i2printf@f,c
 17677  00437E  0EFD               	movlw	high STR_34
 17678  004380  6E0E               	movwf	i2printf@f+1,c
 17679  004382  ECD4  F00A         	call	i2_printf	;wreg free
 17680                           
 17681                           ;UI.c: 503: lcdInst(0b11000000);;
 17682  004386  0EC0               	movlw	192
 17683  004388  ECEF  F023         	call	i2_lcdInst
 17684                           
 17685                           ;UI.c: 504: printf("3. LOGS         ");
 17686  00438C  0E09               	movlw	low STR_36
 17687  00438E  6E0D               	movwf	i2printf@f,c
 17688  004390  0EFD               	movlw	high STR_36
 17689  004392  6E0E               	movwf	i2printf@f+1,c
 17690  004394  ECD4  F00A         	call	i2_printf	;wreg free
 17691  004398  0012               	return		;funcret
 17692  00439A                     __end_ofi2_change_state_to_menu_22:
 17693                           	opt stack 0
 17694                           pclatu	equ	0xFFB
 17695                           pclath	equ	0xFFA
 17696                           tblptru	equ	0xFF8
 17697                           tblptrh	equ	0xFF7
 17698                           tblptrl	equ	0xFF6
 17699                           tablat	equ	0xFF5
 17700                           prodh	equ	0xFF4
 17701                           prodl	equ	0xFF3
 17702                           intcon	equ	0xFF2
 17703                           intcon2	equ	0xFF1
 17704                           intcon3	equ	0xFF0
 17705                           indf0	equ	0xFEF
 17706                           postinc0	equ	0xFEE
 17707                           fsr0h	equ	0xFEA
 17708                           fsr0l	equ	0xFE9
 17709                           wreg	equ	0xFE8
 17710                           postdec1	equ	0xFE5
 17711                           fsr1h	equ	0xFE2
 17712                           fsr1l	equ	0xFE1
 17713                           indf2	equ	0xFDF
 17714                           postinc2	equ	0xFDE
 17715                           postdec2	equ	0xFDD
 17716                           fsr2h	equ	0xFDA
 17717                           fsr2l	equ	0xFD9
 17718                           status	equ	0xFD8
 17719                           
 17720 ;; *************** function i2_change_state_to_menu_12 *****************
 17721 ;; Defined at:
 17722 ;;		line 490 in file "UI.c"
 17723 ;; Parameters:    Size  Location     Type
 17724 ;;		None
 17725 ;; Auto vars:     Size  Location     Type
 17726 ;;		None
 17727 ;; Return value:  Size  Location     Type
 17728 ;;                  1    wreg      void 
 17729 ;; Registers used:
 17730 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17731 ;; Tracked objects:
 17732 ;;		On entry : 0/0
 17733 ;;		On exit  : 0/0
 17734 ;;		Unchanged: 0/0
 17735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17739 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17740 ;;Total ram usage:        0 bytes
 17741 ;; Hardware stack levels used:    1
 17742 ;; Hardware stack levels required when called:    3
 17743 ;; This function calls:
 17744 ;;		i2_lcdInst
 17745 ;;		i2_printf
 17746 ;; This function is called by:
 17747 ;;		_updateMenu
 17748 ;;		_inputHandler
 17749 ;; This function uses a non-reentrant model
 17750 ;;
 17751                           
 17752                           	psect	text65
 17753  00439A                     __ptext65:
 17754                           	opt stack 0
 17755  00439A                     i2_change_state_to_menu_12:
 17756                           	opt stack 19
 17757                           
 17758                           ;UI.c: 491: cur_state = 12;
 17759                           
 17760                           ;incstack = 0
 17761  00439A  0E00               	movlw	0
 17762  00439C  0100               	movlb	0	; () banked
 17763  00439E  6FE1               	movwf	(_cur_state+1)& (0+255),b
 17764  0043A0  0E0C               	movlw	12
 17765  0043A2  6FE0               	movwf	_cur_state& (0+255),b
 17766                           
 17767                           ; BSR set to: 0
 17768                           ;UI.c: 493: lcdInst(0b10000000);;
 17769  0043A4  0E80               	movlw	128
 17770  0043A6  ECEF  F023         	call	i2_lcdInst
 17771                           
 17772                           ;UI.c: 494: printf("1. DATE/TIME    ");
 17773  0043AA  0E2B               	movlw	low STR_33
 17774  0043AC  6E0D               	movwf	i2printf@f,c
 17775  0043AE  0EFD               	movlw	high STR_33
 17776  0043B0  6E0E               	movwf	i2printf@f+1,c
 17777  0043B2  ECD4  F00A         	call	i2_printf	;wreg free
 17778                           
 17779                           ;UI.c: 495: lcdInst(0b11000000);;
 17780  0043B6  0EC0               	movlw	192
 17781  0043B8  ECEF  F023         	call	i2_lcdInst
 17782                           
 17783                           ;UI.c: 496: printf("2. SORT        <");
 17784  0043BC  0EC4               	movlw	low STR_34
 17785  0043BE  6E0D               	movwf	i2printf@f,c
 17786  0043C0  0EFD               	movlw	high STR_34
 17787  0043C2  6E0E               	movwf	i2printf@f+1,c
 17788  0043C4  ECD4  F00A         	call	i2_printf	;wreg free
 17789  0043C8  0012               	return		;funcret
 17790  0043CA                     __end_ofi2_change_state_to_menu_12:
 17791                           	opt stack 0
 17792                           pclatu	equ	0xFFB
 17793                           pclath	equ	0xFFA
 17794                           tblptru	equ	0xFF8
 17795                           tblptrh	equ	0xFF7
 17796                           tblptrl	equ	0xFF6
 17797                           tablat	equ	0xFF5
 17798                           prodh	equ	0xFF4
 17799                           prodl	equ	0xFF3
 17800                           intcon	equ	0xFF2
 17801                           intcon2	equ	0xFF1
 17802                           intcon3	equ	0xFF0
 17803                           indf0	equ	0xFEF
 17804                           postinc0	equ	0xFEE
 17805                           fsr0h	equ	0xFEA
 17806                           fsr0l	equ	0xFE9
 17807                           wreg	equ	0xFE8
 17808                           postdec1	equ	0xFE5
 17809                           fsr1h	equ	0xFE2
 17810                           fsr1l	equ	0xFE1
 17811                           indf2	equ	0xFDF
 17812                           postinc2	equ	0xFDE
 17813                           postdec2	equ	0xFDD
 17814                           fsr2h	equ	0xFDA
 17815                           fsr2l	equ	0xFD9
 17816                           status	equ	0xFD8
 17817                           
 17818 ;; *************** function _change_state_to_menu_23 *****************
 17819 ;; Defined at:
 17820 ;;		line 506 in file "UI.c"
 17821 ;; Parameters:    Size  Location     Type
 17822 ;;		None
 17823 ;; Auto vars:     Size  Location     Type
 17824 ;;		None
 17825 ;; Return value:  Size  Location     Type
 17826 ;;                  1    wreg      void 
 17827 ;; Registers used:
 17828 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17829 ;; Tracked objects:
 17830 ;;		On entry : 0/0
 17831 ;;		On exit  : 0/0
 17832 ;;		Unchanged: 0/0
 17833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17837 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17838 ;;Total ram usage:        0 bytes
 17839 ;; Hardware stack levels used:    1
 17840 ;; Hardware stack levels required when called:    3
 17841 ;; This function calls:
 17842 ;;		i2_lcdInst
 17843 ;;		i2_printf
 17844 ;; This function is called by:
 17845 ;;		_updateMenu
 17846 ;;		_inputHandler
 17847 ;; This function uses a non-reentrant model
 17848 ;;
 17849                           
 17850                           	psect	text66
 17851  0043CA                     __ptext66:
 17852                           	opt stack 0
 17853  0043CA                     _change_state_to_menu_23:
 17854                           	opt stack 18
 17855                           
 17856                           ;UI.c: 507: cur_state = 23;
 17857                           
 17858                           ;incstack = 0
 17859  0043CA  0E00               	movlw	0
 17860  0043CC  0100               	movlb	0	; () banked
 17861  0043CE  6FE1               	movwf	(_cur_state+1)& (0+255),b
 17862  0043D0  0E17               	movlw	23
 17863  0043D2  6FE0               	movwf	_cur_state& (0+255),b
 17864                           
 17865                           ; BSR set to: 0
 17866                           ;UI.c: 509: lcdInst(0b10000000);;
 17867  0043D4  0E80               	movlw	128
 17868  0043D6  ECEF  F023         	call	i2_lcdInst
 17869                           
 17870                           ;UI.c: 510: printf("2. SORT         ");
 17871  0043DA  0E1A               	movlw	low STR_32
 17872  0043DC  6E0D               	movwf	i2printf@f,c
 17873  0043DE  0EFD               	movlw	high STR_32
 17874  0043E0  6E0E               	movwf	i2printf@f+1,c
 17875  0043E2  ECD4  F00A         	call	i2_printf	;wreg free
 17876                           
 17877                           ;UI.c: 511: lcdInst(0b11000000);;
 17878  0043E6  0EC0               	movlw	192
 17879  0043E8  ECEF  F023         	call	i2_lcdInst
 17880                           
 17881                           ;UI.c: 512: printf("3. LOGS        <");
 17882  0043EC  0EB3               	movlw	low STR_38
 17883  0043EE  6E0D               	movwf	i2printf@f,c
 17884  0043F0  0EFD               	movlw	high STR_38
 17885  0043F2  6E0E               	movwf	i2printf@f+1,c
 17886  0043F4  ECD4  F00A         	call	i2_printf	;wreg free
 17887  0043F8  0012               	return		;funcret
 17888  0043FA                     __end_of_change_state_to_menu_23:
 17889                           	opt stack 0
 17890                           pclatu	equ	0xFFB
 17891                           pclath	equ	0xFFA
 17892                           tblptru	equ	0xFF8
 17893                           tblptrh	equ	0xFF7
 17894                           tblptrl	equ	0xFF6
 17895                           tablat	equ	0xFF5
 17896                           prodh	equ	0xFF4
 17897                           prodl	equ	0xFF3
 17898                           intcon	equ	0xFF2
 17899                           intcon2	equ	0xFF1
 17900                           intcon3	equ	0xFF0
 17901                           indf0	equ	0xFEF
 17902                           postinc0	equ	0xFEE
 17903                           fsr0h	equ	0xFEA
 17904                           fsr0l	equ	0xFE9
 17905                           wreg	equ	0xFE8
 17906                           postdec1	equ	0xFE5
 17907                           fsr1h	equ	0xFE2
 17908                           fsr1l	equ	0xFE1
 17909                           indf2	equ	0xFDF
 17910                           postinc2	equ	0xFDE
 17911                           postdec2	equ	0xFDD
 17912                           fsr2h	equ	0xFDA
 17913                           fsr2l	equ	0xFD9
 17914                           status	equ	0xFD8
 17915                           
 17916 ;; *************** function _change_state_to_menu_11 *****************
 17917 ;; Defined at:
 17918 ;;		line 482 in file "UI.c"
 17919 ;; Parameters:    Size  Location     Type
 17920 ;;		None
 17921 ;; Auto vars:     Size  Location     Type
 17922 ;;		None
 17923 ;; Return value:  Size  Location     Type
 17924 ;;                  1    wreg      void 
 17925 ;; Registers used:
 17926 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17927 ;; Tracked objects:
 17928 ;;		On entry : 0/0
 17929 ;;		On exit  : 0/0
 17930 ;;		Unchanged: 0/0
 17931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17935 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17936 ;;Total ram usage:        0 bytes
 17937 ;; Hardware stack levels used:    1
 17938 ;; Hardware stack levels required when called:    3
 17939 ;; This function calls:
 17940 ;;		i2_lcdInst
 17941 ;;		i2_printf
 17942 ;; This function is called by:
 17943 ;;		_updateMenu
 17944 ;;		_inputHandler
 17945 ;; This function uses a non-reentrant model
 17946 ;;
 17947                           
 17948                           	psect	text67
 17949  0043FA                     __ptext67:
 17950                           	opt stack 0
 17951  0043FA                     _change_state_to_menu_11:
 17952                           	opt stack 18
 17953                           
 17954                           ;UI.c: 483: cur_state = 11;
 17955                           
 17956                           ;incstack = 0
 17957  0043FA  0E00               	movlw	0
 17958  0043FC  0100               	movlb	0	; () banked
 17959  0043FE  6FE1               	movwf	(_cur_state+1)& (0+255),b
 17960  004400  0E0B               	movlw	11
 17961  004402  6FE0               	movwf	_cur_state& (0+255),b
 17962                           
 17963                           ; BSR set to: 0
 17964                           ;UI.c: 485: lcdInst(0b10000000);;
 17965  004404  0E80               	movlw	128
 17966  004406  ECEF  F023         	call	i2_lcdInst
 17967                           
 17968                           ;UI.c: 486: printf("1. DATE/TIME   <");
 17969  00440A  0ED5               	movlw	low STR_31
 17970  00440C  6E0D               	movwf	i2printf@f,c
 17971  00440E  0EFD               	movlw	high STR_31
 17972  004410  6E0E               	movwf	i2printf@f+1,c
 17973  004412  ECD4  F00A         	call	i2_printf	;wreg free
 17974                           
 17975                           ;UI.c: 487: lcdInst(0b11000000);;
 17976  004416  0EC0               	movlw	192
 17977  004418  ECEF  F023         	call	i2_lcdInst
 17978                           
 17979                           ;UI.c: 488: printf("2. SORT         ");
 17980  00441C  0E1A               	movlw	low STR_32
 17981  00441E  6E0D               	movwf	i2printf@f,c
 17982  004420  0EFD               	movlw	high STR_32
 17983  004422  6E0E               	movwf	i2printf@f+1,c
 17984  004424  ECD4  F00A         	call	i2_printf	;wreg free
 17985  004428  0012               	return		;funcret
 17986  00442A                     __end_of_change_state_to_menu_11:
 17987                           	opt stack 0
 17988                           pclatu	equ	0xFFB
 17989                           pclath	equ	0xFFA
 17990                           tblptru	equ	0xFF8
 17991                           tblptrh	equ	0xFF7
 17992                           tblptrl	equ	0xFF6
 17993                           tablat	equ	0xFF5
 17994                           prodh	equ	0xFF4
 17995                           prodl	equ	0xFF3
 17996                           intcon	equ	0xFF2
 17997                           intcon2	equ	0xFF1
 17998                           intcon3	equ	0xFF0
 17999                           indf0	equ	0xFEF
 18000                           postinc0	equ	0xFEE
 18001                           fsr0h	equ	0xFEA
 18002                           fsr0l	equ	0xFE9
 18003                           wreg	equ	0xFE8
 18004                           postdec1	equ	0xFE5
 18005                           fsr1h	equ	0xFE2
 18006                           fsr1l	equ	0xFE1
 18007                           indf2	equ	0xFDF
 18008                           postinc2	equ	0xFDE
 18009                           postdec2	equ	0xFDD
 18010                           fsr2h	equ	0xFDA
 18011                           fsr2l	equ	0xFD9
 18012                           status	equ	0xFD8
 18013                           
 18014 ;; *************** function _change_state_to_logs_34 *****************
 18015 ;; Defined at:
 18016 ;;		line 549 in file "UI.c"
 18017 ;; Parameters:    Size  Location     Type
 18018 ;;		None
 18019 ;; Auto vars:     Size  Location     Type
 18020 ;;		None
 18021 ;; Return value:  Size  Location     Type
 18022 ;;                  1    wreg      void 
 18023 ;; Registers used:
 18024 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18025 ;; Tracked objects:
 18026 ;;		On entry : 0/0
 18027 ;;		On exit  : 0/0
 18028 ;;		Unchanged: 0/0
 18029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18031 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18033 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18034 ;;Total ram usage:        0 bytes
 18035 ;; Hardware stack levels used:    1
 18036 ;; Hardware stack levels required when called:    3
 18037 ;; This function calls:
 18038 ;;		i2_lcdInst
 18039 ;;		i2_printf
 18040 ;; This function is called by:
 18041 ;;		_updateMenu
 18042 ;;		_inputHandler
 18043 ;; This function uses a non-reentrant model
 18044 ;;
 18045                           
 18046                           	psect	text68
 18047  00442A                     __ptext68:
 18048                           	opt stack 0
 18049  00442A                     _change_state_to_logs_34:
 18050                           	opt stack 18
 18051                           
 18052                           ;UI.c: 550: cur_state = 1034;
 18053                           
 18054                           ;incstack = 0
 18055  00442A  0E04               	movlw	4
 18056  00442C  0100               	movlb	0	; () banked
 18057  00442E  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18058  004430  0E0A               	movlw	10
 18059  004432  6FE0               	movwf	_cur_state& (0+255),b
 18060                           
 18061                           ; BSR set to: 0
 18062                           ;UI.c: 551: lcdInst(0b10000000);;
 18063  004434  0E80               	movlw	128
 18064  004436  ECEF  F023         	call	i2_lcdInst
 18065                           
 18066                           ;UI.c: 552: printf("LOG 3           ");
 18067  00443A  0EE7               	movlw	low STR_44
 18068  00443C  6E0D               	movwf	i2printf@f,c
 18069  00443E  0EFC               	movlw	high STR_44
 18070  004440  6E0E               	movwf	i2printf@f+1,c
 18071  004442  ECD4  F00A         	call	i2_printf	;wreg free
 18072                           
 18073                           ;UI.c: 553: lcdInst(0b11000000);;
 18074  004446  0EC0               	movlw	192
 18075  004448  ECEF  F023         	call	i2_lcdInst
 18076                           
 18077                           ;UI.c: 554: printf("LOG 4          <");
 18078  00444C  0EA2               	movlw	low STR_50
 18079  00444E  6E0D               	movwf	i2printf@f,c
 18080  004450  0EFD               	movlw	high STR_50
 18081  004452  6E0E               	movwf	i2printf@f+1,c
 18082  004454  ECD4  F00A         	call	i2_printf	;wreg free
 18083  004458  0012               	return		;funcret
 18084  00445A                     __end_of_change_state_to_logs_34:
 18085                           	opt stack 0
 18086                           pclatu	equ	0xFFB
 18087                           pclath	equ	0xFFA
 18088                           tblptru	equ	0xFF8
 18089                           tblptrh	equ	0xFF7
 18090                           tblptrl	equ	0xFF6
 18091                           tablat	equ	0xFF5
 18092                           prodh	equ	0xFF4
 18093                           prodl	equ	0xFF3
 18094                           intcon	equ	0xFF2
 18095                           intcon2	equ	0xFF1
 18096                           intcon3	equ	0xFF0
 18097                           indf0	equ	0xFEF
 18098                           postinc0	equ	0xFEE
 18099                           fsr0h	equ	0xFEA
 18100                           fsr0l	equ	0xFE9
 18101                           wreg	equ	0xFE8
 18102                           postdec1	equ	0xFE5
 18103                           fsr1h	equ	0xFE2
 18104                           fsr1l	equ	0xFE1
 18105                           indf2	equ	0xFDF
 18106                           postinc2	equ	0xFDE
 18107                           postdec2	equ	0xFDD
 18108                           fsr2h	equ	0xFDA
 18109                           fsr2l	equ	0xFD9
 18110                           status	equ	0xFD8
 18111                           
 18112 ;; *************** function _change_state_to_logs_33 *****************
 18113 ;; Defined at:
 18114 ;;		line 542 in file "UI.c"
 18115 ;; Parameters:    Size  Location     Type
 18116 ;;		None
 18117 ;; Auto vars:     Size  Location     Type
 18118 ;;		None
 18119 ;; Return value:  Size  Location     Type
 18120 ;;                  1    wreg      void 
 18121 ;; Registers used:
 18122 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18123 ;; Tracked objects:
 18124 ;;		On entry : 0/0
 18125 ;;		On exit  : 0/0
 18126 ;;		Unchanged: 0/0
 18127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18131 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18132 ;;Total ram usage:        0 bytes
 18133 ;; Hardware stack levels used:    1
 18134 ;; Hardware stack levels required when called:    3
 18135 ;; This function calls:
 18136 ;;		i2_lcdInst
 18137 ;;		i2_printf
 18138 ;; This function is called by:
 18139 ;;		_updateMenu
 18140 ;;		_inputHandler
 18141 ;; This function uses a non-reentrant model
 18142 ;;
 18143                           
 18144                           	psect	text69
 18145  00445A                     __ptext69:
 18146                           	opt stack 0
 18147  00445A                     _change_state_to_logs_33:
 18148                           	opt stack 18
 18149                           
 18150                           ;UI.c: 543: cur_state = 1033;
 18151                           
 18152                           ;incstack = 0
 18153  00445A  0E04               	movlw	4
 18154  00445C  0100               	movlb	0	; () banked
 18155  00445E  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18156  004460  0E09               	movlw	9
 18157  004462  6FE0               	movwf	_cur_state& (0+255),b
 18158                           
 18159                           ; BSR set to: 0
 18160                           ;UI.c: 544: lcdInst(0b10000000);;
 18161  004464  0E80               	movlw	128
 18162  004466  ECEF  F023         	call	i2_lcdInst
 18163                           
 18164                           ;UI.c: 545: printf("LOG 3          <");
 18165  00446A  0E91               	movlw	low STR_46
 18166  00446C  6E0D               	movwf	i2printf@f,c
 18167  00446E  0EFD               	movlw	high STR_46
 18168  004470  6E0E               	movwf	i2printf@f+1,c
 18169  004472  ECD4  F00A         	call	i2_printf	;wreg free
 18170                           
 18171                           ;UI.c: 546: lcdInst(0b11000000);;
 18172  004476  0EC0               	movlw	192
 18173  004478  ECEF  F023         	call	i2_lcdInst
 18174                           
 18175                           ;UI.c: 547: printf("LOG 4           ");
 18176  00447C  0EF8               	movlw	low STR_48
 18177  00447E  6E0D               	movwf	i2printf@f,c
 18178  004480  0EFC               	movlw	high STR_48
 18179  004482  6E0E               	movwf	i2printf@f+1,c
 18180  004484  ECD4  F00A         	call	i2_printf	;wreg free
 18181  004488  0012               	return		;funcret
 18182  00448A                     __end_of_change_state_to_logs_33:
 18183                           	opt stack 0
 18184                           pclatu	equ	0xFFB
 18185                           pclath	equ	0xFFA
 18186                           tblptru	equ	0xFF8
 18187                           tblptrh	equ	0xFF7
 18188                           tblptrl	equ	0xFF6
 18189                           tablat	equ	0xFF5
 18190                           prodh	equ	0xFF4
 18191                           prodl	equ	0xFF3
 18192                           intcon	equ	0xFF2
 18193                           intcon2	equ	0xFF1
 18194                           intcon3	equ	0xFF0
 18195                           indf0	equ	0xFEF
 18196                           postinc0	equ	0xFEE
 18197                           fsr0h	equ	0xFEA
 18198                           fsr0l	equ	0xFE9
 18199                           wreg	equ	0xFE8
 18200                           postdec1	equ	0xFE5
 18201                           fsr1h	equ	0xFE2
 18202                           fsr1l	equ	0xFE1
 18203                           indf2	equ	0xFDF
 18204                           postinc2	equ	0xFDE
 18205                           postdec2	equ	0xFDD
 18206                           fsr2h	equ	0xFDA
 18207                           fsr2l	equ	0xFD9
 18208                           status	equ	0xFD8
 18209                           
 18210 ;; *************** function _change_state_to_logs_23 *****************
 18211 ;; Defined at:
 18212 ;;		line 535 in file "UI.c"
 18213 ;; Parameters:    Size  Location     Type
 18214 ;;		None
 18215 ;; Auto vars:     Size  Location     Type
 18216 ;;		None
 18217 ;; Return value:  Size  Location     Type
 18218 ;;                  1    wreg      void 
 18219 ;; Registers used:
 18220 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18221 ;; Tracked objects:
 18222 ;;		On entry : 0/0
 18223 ;;		On exit  : 0/0
 18224 ;;		Unchanged: 0/0
 18225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18227 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18229 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18230 ;;Total ram usage:        0 bytes
 18231 ;; Hardware stack levels used:    1
 18232 ;; Hardware stack levels required when called:    3
 18233 ;; This function calls:
 18234 ;;		i2_lcdInst
 18235 ;;		i2_printf
 18236 ;; This function is called by:
 18237 ;;		_updateMenu
 18238 ;;		_inputHandler
 18239 ;; This function uses a non-reentrant model
 18240 ;;
 18241                           
 18242                           	psect	text70
 18243  004576                     __ptext70:
 18244                           	opt stack 0
 18245  004576                     _change_state_to_logs_23:
 18246                           	opt stack 18
 18247                           
 18248                           ;UI.c: 536: cur_state = 1023;
 18249                           
 18250                           ;incstack = 0
 18251  004576  0E03               	movlw	3
 18252  004578  0100               	movlb	0	; () banked
 18253  00457A  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18254  00457C  69E0               	setf	_cur_state& (0+255),b
 18255                           
 18256                           ; BSR set to: 0
 18257                           ;UI.c: 537: lcdInst(0b10000000);;
 18258  00457E  0E80               	movlw	128
 18259  004580  ECEF  F023         	call	i2_lcdInst
 18260                           
 18261                           ;UI.c: 538: printf("LOG 2           ");
 18262  004584  0ED6               	movlw	low STR_40
 18263  004586  6E0D               	movwf	i2printf@f,c
 18264  004588  0EFC               	movlw	high STR_40
 18265  00458A  6E0E               	movwf	i2printf@f+1,c
 18266  00458C  ECD4  F00A         	call	i2_printf	;wreg free
 18267                           
 18268                           ;UI.c: 539: lcdInst(0b11000000);;
 18269  004590  0EC0               	movlw	192
 18270  004592  ECEF  F023         	call	i2_lcdInst
 18271                           
 18272                           ;UI.c: 540: printf("LOG 3          <");
 18273  004596  0E91               	movlw	low STR_46
 18274  004598  6E0D               	movwf	i2printf@f,c
 18275  00459A  0EFD               	movlw	high STR_46
 18276  00459C  6E0E               	movwf	i2printf@f+1,c
 18277  00459E  ECD4  F00A         	call	i2_printf	;wreg free
 18278  0045A2  0012               	return		;funcret
 18279  0045A4                     __end_of_change_state_to_logs_23:
 18280                           	opt stack 0
 18281                           pclatu	equ	0xFFB
 18282                           pclath	equ	0xFFA
 18283                           tblptru	equ	0xFF8
 18284                           tblptrh	equ	0xFF7
 18285                           tblptrl	equ	0xFF6
 18286                           tablat	equ	0xFF5
 18287                           prodh	equ	0xFF4
 18288                           prodl	equ	0xFF3
 18289                           intcon	equ	0xFF2
 18290                           intcon2	equ	0xFF1
 18291                           intcon3	equ	0xFF0
 18292                           indf0	equ	0xFEF
 18293                           postinc0	equ	0xFEE
 18294                           fsr0h	equ	0xFEA
 18295                           fsr0l	equ	0xFE9
 18296                           wreg	equ	0xFE8
 18297                           postdec1	equ	0xFE5
 18298                           fsr1h	equ	0xFE2
 18299                           fsr1l	equ	0xFE1
 18300                           indf2	equ	0xFDF
 18301                           postinc2	equ	0xFDE
 18302                           postdec2	equ	0xFDD
 18303                           fsr2h	equ	0xFDA
 18304                           fsr2l	equ	0xFD9
 18305                           status	equ	0xFD8
 18306                           
 18307 ;; *************** function _change_state_to_logs_22 *****************
 18308 ;; Defined at:
 18309 ;;		line 528 in file "UI.c"
 18310 ;; Parameters:    Size  Location     Type
 18311 ;;		None
 18312 ;; Auto vars:     Size  Location     Type
 18313 ;;		None
 18314 ;; Return value:  Size  Location     Type
 18315 ;;                  1    wreg      void 
 18316 ;; Registers used:
 18317 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18318 ;; Tracked objects:
 18319 ;;		On entry : 0/0
 18320 ;;		On exit  : 0/0
 18321 ;;		Unchanged: 0/0
 18322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18326 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18327 ;;Total ram usage:        0 bytes
 18328 ;; Hardware stack levels used:    1
 18329 ;; Hardware stack levels required when called:    3
 18330 ;; This function calls:
 18331 ;;		i2_lcdInst
 18332 ;;		i2_printf
 18333 ;; This function is called by:
 18334 ;;		_updateMenu
 18335 ;;		_inputHandler
 18336 ;; This function uses a non-reentrant model
 18337 ;;
 18338                           
 18339                           	psect	text71
 18340  00448A                     __ptext71:
 18341                           	opt stack 0
 18342  00448A                     _change_state_to_logs_22:
 18343                           	opt stack 18
 18344                           
 18345                           ;UI.c: 529: cur_state = 1022;
 18346                           
 18347                           ;incstack = 0
 18348  00448A  0E03               	movlw	3
 18349  00448C  0100               	movlb	0	; () banked
 18350  00448E  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18351  004490  0EFE               	movlw	254
 18352  004492  6FE0               	movwf	_cur_state& (0+255),b
 18353                           
 18354                           ; BSR set to: 0
 18355                           ;UI.c: 530: lcdInst(0b10000000);;
 18356  004494  0E80               	movlw	128
 18357  004496  ECEF  F023         	call	i2_lcdInst
 18358                           
 18359                           ;UI.c: 531: printf("LOG 2          <");
 18360  00449A  0E80               	movlw	low STR_42
 18361  00449C  6E0D               	movwf	i2printf@f,c
 18362  00449E  0EFD               	movlw	high STR_42
 18363  0044A0  6E0E               	movwf	i2printf@f+1,c
 18364  0044A2  ECD4  F00A         	call	i2_printf	;wreg free
 18365                           
 18366                           ;UI.c: 532: lcdInst(0b11000000);;
 18367  0044A6  0EC0               	movlw	192
 18368  0044A8  ECEF  F023         	call	i2_lcdInst
 18369                           
 18370                           ;UI.c: 533: printf("LOG 3           ");
 18371  0044AC  0EE7               	movlw	low STR_44
 18372  0044AE  6E0D               	movwf	i2printf@f,c
 18373  0044B0  0EFC               	movlw	high STR_44
 18374  0044B2  6E0E               	movwf	i2printf@f+1,c
 18375  0044B4  ECD4  F00A         	call	i2_printf	;wreg free
 18376  0044B8  0012               	return		;funcret
 18377  0044BA                     __end_of_change_state_to_logs_22:
 18378                           	opt stack 0
 18379                           pclatu	equ	0xFFB
 18380                           pclath	equ	0xFFA
 18381                           tblptru	equ	0xFF8
 18382                           tblptrh	equ	0xFF7
 18383                           tblptrl	equ	0xFF6
 18384                           tablat	equ	0xFF5
 18385                           prodh	equ	0xFF4
 18386                           prodl	equ	0xFF3
 18387                           intcon	equ	0xFF2
 18388                           intcon2	equ	0xFF1
 18389                           intcon3	equ	0xFF0
 18390                           indf0	equ	0xFEF
 18391                           postinc0	equ	0xFEE
 18392                           fsr0h	equ	0xFEA
 18393                           fsr0l	equ	0xFE9
 18394                           wreg	equ	0xFE8
 18395                           postdec1	equ	0xFE5
 18396                           fsr1h	equ	0xFE2
 18397                           fsr1l	equ	0xFE1
 18398                           indf2	equ	0xFDF
 18399                           postinc2	equ	0xFDE
 18400                           postdec2	equ	0xFDD
 18401                           fsr2h	equ	0xFDA
 18402                           fsr2l	equ	0xFD9
 18403                           status	equ	0xFD8
 18404                           
 18405 ;; *************** function _change_state_to_logs_12 *****************
 18406 ;; Defined at:
 18407 ;;		line 521 in file "UI.c"
 18408 ;; Parameters:    Size  Location     Type
 18409 ;;		None
 18410 ;; Auto vars:     Size  Location     Type
 18411 ;;		None
 18412 ;; Return value:  Size  Location     Type
 18413 ;;                  1    wreg      void 
 18414 ;; Registers used:
 18415 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18416 ;; Tracked objects:
 18417 ;;		On entry : 0/0
 18418 ;;		On exit  : 0/0
 18419 ;;		Unchanged: 0/0
 18420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18424 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18425 ;;Total ram usage:        0 bytes
 18426 ;; Hardware stack levels used:    1
 18427 ;; Hardware stack levels required when called:    3
 18428 ;; This function calls:
 18429 ;;		i2_lcdInst
 18430 ;;		i2_printf
 18431 ;; This function is called by:
 18432 ;;		_updateMenu
 18433 ;;		_inputHandler
 18434 ;; This function uses a non-reentrant model
 18435 ;;
 18436                           
 18437                           	psect	text72
 18438  0044BA                     __ptext72:
 18439                           	opt stack 0
 18440  0044BA                     _change_state_to_logs_12:
 18441                           	opt stack 18
 18442                           
 18443                           ;UI.c: 522: cur_state = 1012;
 18444                           
 18445                           ;incstack = 0
 18446  0044BA  0E03               	movlw	3
 18447  0044BC  0100               	movlb	0	; () banked
 18448  0044BE  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18449  0044C0  0EF4               	movlw	244
 18450  0044C2  6FE0               	movwf	_cur_state& (0+255),b
 18451                           
 18452                           ; BSR set to: 0
 18453                           ;UI.c: 523: lcdInst(0b10000000);;
 18454  0044C4  0E80               	movlw	128
 18455  0044C6  ECEF  F023         	call	i2_lcdInst
 18456                           
 18457                           ;UI.c: 524: printf("LOG 1           ");
 18458  0044CA  0EC5               	movlw	low STR_41
 18459  0044CC  6E0D               	movwf	i2printf@f,c
 18460  0044CE  0EFC               	movlw	high STR_41
 18461  0044D0  6E0E               	movwf	i2printf@f+1,c
 18462  0044D2  ECD4  F00A         	call	i2_printf	;wreg free
 18463                           
 18464                           ;UI.c: 525: lcdInst(0b11000000);;
 18465  0044D6  0EC0               	movlw	192
 18466  0044D8  ECEF  F023         	call	i2_lcdInst
 18467                           
 18468                           ;UI.c: 526: printf("LOG 2          <");
 18469  0044DC  0E80               	movlw	low STR_42
 18470  0044DE  6E0D               	movwf	i2printf@f,c
 18471  0044E0  0EFD               	movlw	high STR_42
 18472  0044E2  6E0E               	movwf	i2printf@f+1,c
 18473  0044E4  ECD4  F00A         	call	i2_printf	;wreg free
 18474  0044E8  0012               	return		;funcret
 18475  0044EA                     __end_of_change_state_to_logs_12:
 18476                           	opt stack 0
 18477                           pclatu	equ	0xFFB
 18478                           pclath	equ	0xFFA
 18479                           tblptru	equ	0xFF8
 18480                           tblptrh	equ	0xFF7
 18481                           tblptrl	equ	0xFF6
 18482                           tablat	equ	0xFF5
 18483                           prodh	equ	0xFF4
 18484                           prodl	equ	0xFF3
 18485                           intcon	equ	0xFF2
 18486                           intcon2	equ	0xFF1
 18487                           intcon3	equ	0xFF0
 18488                           indf0	equ	0xFEF
 18489                           postinc0	equ	0xFEE
 18490                           fsr0h	equ	0xFEA
 18491                           fsr0l	equ	0xFE9
 18492                           wreg	equ	0xFE8
 18493                           postdec1	equ	0xFE5
 18494                           fsr1h	equ	0xFE2
 18495                           fsr1l	equ	0xFE1
 18496                           indf2	equ	0xFDF
 18497                           postinc2	equ	0xFDE
 18498                           postdec2	equ	0xFDD
 18499                           fsr2h	equ	0xFDA
 18500                           fsr2l	equ	0xFD9
 18501                           status	equ	0xFD8
 18502                           
 18503 ;; *************** function _change_state_to_logs_11 *****************
 18504 ;; Defined at:
 18505 ;;		line 514 in file "UI.c"
 18506 ;; Parameters:    Size  Location     Type
 18507 ;;		None
 18508 ;; Auto vars:     Size  Location     Type
 18509 ;;		None
 18510 ;; Return value:  Size  Location     Type
 18511 ;;                  1    wreg      void 
 18512 ;; Registers used:
 18513 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18514 ;; Tracked objects:
 18515 ;;		On entry : 0/0
 18516 ;;		On exit  : 0/0
 18517 ;;		Unchanged: 0/0
 18518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18522 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18523 ;;Total ram usage:        0 bytes
 18524 ;; Hardware stack levels used:    1
 18525 ;; Hardware stack levels required when called:    3
 18526 ;; This function calls:
 18527 ;;		i2_lcdInst
 18528 ;;		i2_printf
 18529 ;; This function is called by:
 18530 ;;		_updateMenu
 18531 ;;		_inputHandler
 18532 ;; This function uses a non-reentrant model
 18533 ;;
 18534                           
 18535                           	psect	text73
 18536  0044EA                     __ptext73:
 18537                           	opt stack 0
 18538  0044EA                     _change_state_to_logs_11:
 18539                           	opt stack 18
 18540                           
 18541                           ;UI.c: 515: cur_state = 1011;
 18542                           
 18543                           ;incstack = 0
 18544  0044EA  0E03               	movlw	3
 18545  0044EC  0100               	movlb	0	; () banked
 18546  0044EE  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18547  0044F0  0EF3               	movlw	243
 18548  0044F2  6FE0               	movwf	_cur_state& (0+255),b
 18549                           
 18550                           ; BSR set to: 0
 18551                           ;UI.c: 516: lcdInst(0b10000000);;
 18552  0044F4  0E80               	movlw	128
 18553  0044F6  ECEF  F023         	call	i2_lcdInst
 18554                           
 18555                           ;UI.c: 517: printf("LOG 1          <");
 18556  0044FA  0E6F               	movlw	low STR_39
 18557  0044FC  6E0D               	movwf	i2printf@f,c
 18558  0044FE  0EFD               	movlw	high STR_39
 18559  004500  6E0E               	movwf	i2printf@f+1,c
 18560  004502  ECD4  F00A         	call	i2_printf	;wreg free
 18561                           
 18562                           ;UI.c: 518: lcdInst(0b11000000);;
 18563  004506  0EC0               	movlw	192
 18564  004508  ECEF  F023         	call	i2_lcdInst
 18565                           
 18566                           ;UI.c: 519: printf("LOG 2           ");
 18567  00450C  0ED6               	movlw	low STR_40
 18568  00450E  6E0D               	movwf	i2printf@f,c
 18569  004510  0EFC               	movlw	high STR_40
 18570  004512  6E0E               	movwf	i2printf@f+1,c
 18571  004514  ECD4  F00A         	call	i2_printf	;wreg free
 18572  004518  0012               	return		;funcret
 18573  00451A                     __end_of_change_state_to_logs_11:
 18574                           	opt stack 0
 18575                           pclatu	equ	0xFFB
 18576                           pclath	equ	0xFFA
 18577                           tblptru	equ	0xFF8
 18578                           tblptrh	equ	0xFF7
 18579                           tblptrl	equ	0xFF6
 18580                           tablat	equ	0xFF5
 18581                           prodh	equ	0xFF4
 18582                           prodl	equ	0xFF3
 18583                           intcon	equ	0xFF2
 18584                           intcon2	equ	0xFF1
 18585                           intcon3	equ	0xFF0
 18586                           indf0	equ	0xFEF
 18587                           postinc0	equ	0xFEE
 18588                           fsr0h	equ	0xFEA
 18589                           fsr0l	equ	0xFE9
 18590                           wreg	equ	0xFE8
 18591                           postdec1	equ	0xFE5
 18592                           fsr1h	equ	0xFE2
 18593                           fsr1l	equ	0xFE1
 18594                           indf2	equ	0xFDF
 18595                           postinc2	equ	0xFDE
 18596                           postdec2	equ	0xFDD
 18597                           fsr2h	equ	0xFDA
 18598                           fsr2l	equ	0xFD9
 18599                           status	equ	0xFD8
 18600                           
 18601 ;; *************** function _dispLogs *****************
 18602 ;; Defined at:
 18603 ;;		line 467 in file "UI.c"
 18604 ;; Parameters:    Size  Location     Type
 18605 ;;  myLog           2   17[COMRAM] int 
 18606 ;; Auto vars:     Size  Location     Type
 18607 ;;		None
 18608 ;; Return value:  Size  Location     Type
 18609 ;;                  1    wreg      void 
 18610 ;; Registers used:
 18611 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18612 ;; Tracked objects:
 18613 ;;		On entry : 0/0
 18614 ;;		On exit  : 0/0
 18615 ;;		Unchanged: 0/0
 18616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18617 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18620 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18621 ;;Total ram usage:        2 bytes
 18622 ;; Hardware stack levels used:    1
 18623 ;; Hardware stack levels required when called:    2
 18624 ;; This function calls:
 18625 ;;		_retrieveLog
 18626 ;; This function is called by:
 18627 ;;		_updateMenu
 18628 ;; This function uses a non-reentrant model
 18629 ;;
 18630                           
 18631                           	psect	text74
 18632  0046C2                     __ptext74:
 18633                           	opt stack 0
 18634  0046C2                     _dispLogs:
 18635                           	opt stack 20
 18636                           
 18637                           ;UI.c: 468: logstate = 1;
 18638                           
 18639                           ;incstack = 0
 18640  0046C2  0E00               	movlw	0
 18641  0046C4  0100               	movlb	0	; () banked
 18642  0046C6  6FF7               	movwf	(_logstate+1)& (0+255),b
 18643  0046C8  0E01               	movlw	1
 18644  0046CA  6FF6               	movwf	_logstate& (0+255),b
 18645                           
 18646                           ; BSR set to: 0
 18647                           ;UI.c: 469: log = myLog;
 18648  0046CC  C012  F0E6         	movff	dispLogs@myLog,_log
 18649  0046D0  C013  F0E7         	movff	dispLogs@myLog+1,_log+1
 18650                           
 18651                           ; BSR set to: 0
 18652                           ;UI.c: 470: retrieveLog(myLog - 1);
 18653  0046D4  0EFF               	movlw	255
 18654  0046D6  2412               	addwf	dispLogs@myLog,w,c
 18655  0046D8  6E07               	movwf	retrieveLog@logNum,c
 18656  0046DA  0EFF               	movlw	255
 18657  0046DC  2013               	addwfc	dispLogs@myLog+1,w,c
 18658  0046DE  6E08               	movwf	retrieveLog@logNum+1,c
 18659  0046E0  ECD6  F018         	call	_retrieveLog	;wreg free
 18660  0046E4  0012               	return		;funcret
 18661  0046E6                     __end_of_dispLogs:
 18662                           	opt stack 0
 18663                           pclatu	equ	0xFFB
 18664                           pclath	equ	0xFFA
 18665                           tblptru	equ	0xFF8
 18666                           tblptrh	equ	0xFF7
 18667                           tblptrl	equ	0xFF6
 18668                           tablat	equ	0xFF5
 18669                           prodh	equ	0xFF4
 18670                           prodl	equ	0xFF3
 18671                           intcon	equ	0xFF2
 18672                           intcon2	equ	0xFF1
 18673                           intcon3	equ	0xFF0
 18674                           indf0	equ	0xFEF
 18675                           postinc0	equ	0xFEE
 18676                           fsr0h	equ	0xFEA
 18677                           fsr0l	equ	0xFE9
 18678                           wreg	equ	0xFE8
 18679                           postdec1	equ	0xFE5
 18680                           fsr1h	equ	0xFE2
 18681                           fsr1l	equ	0xFE1
 18682                           indf2	equ	0xFDF
 18683                           postinc2	equ	0xFDE
 18684                           postdec2	equ	0xFDD
 18685                           fsr2h	equ	0xFDA
 18686                           fsr2l	equ	0xFD9
 18687                           status	equ	0xFD8
 18688                           
 18689 ;; *************** function _retrieveLog *****************
 18690 ;; Defined at:
 18691 ;;		line 134 in file "EEPROM.c"
 18692 ;; Parameters:    Size  Location     Type
 18693 ;;  logNum          2    6[COMRAM] int 
 18694 ;; Auto vars:     Size  Location     Type
 18695 ;;  i               2   13[COMRAM] int 
 18696 ;;  addr            2   15[COMRAM] unsigned short 
 18697 ;;  byte3           1   12[COMRAM] unsigned char 
 18698 ;;  byte2           1   11[COMRAM] unsigned char 
 18699 ;;  byte1           1   10[COMRAM] unsigned char 
 18700 ;; Return value:  Size  Location     Type
 18701 ;;                  1    wreg      void 
 18702 ;; Registers used:
 18703 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18704 ;; Tracked objects:
 18705 ;;		On entry : 0/0
 18706 ;;		On exit  : 0/0
 18707 ;;		Unchanged: 0/0
 18708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18709 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18710 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18711 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18712 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18713 ;;Total ram usage:       11 bytes
 18714 ;; Hardware stack levels used:    1
 18715 ;; Hardware stack levels required when called:    1
 18716 ;; This function calls:
 18717 ;;		i2_EEPROM_read
 18718 ;;		i2___wmul
 18719 ;; This function is called by:
 18720 ;;		_dispLogs
 18721 ;; This function uses a non-reentrant model
 18722 ;;
 18723                           
 18724                           	psect	text75
 18725  0031AC                     __ptext75:
 18726                           	opt stack 0
 18727  0031AC                     _retrieveLog:
 18728                           	opt stack 20
 18729                           
 18730                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 18731                           
 18732                           ;incstack = 0
 18733  0031AC  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 18734  0031B0  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 18735  0031B4  0E00               	movlw	0
 18736  0031B6  6E04               	movwf	i2___wmul@multiplicand+1,c
 18737  0031B8  0E0B               	movlw	11
 18738  0031BA  6E03               	movwf	i2___wmul@multiplicand,c
 18739  0031BC  EC3B  F023         	call	i2___wmul	;wreg free
 18740  0031C0  0E01               	movlw	1
 18741  0031C2  2401               	addwf	?i2___wmul,w,c
 18742  0031C4  6E10               	movwf	retrieveLog@addr,c
 18743  0031C6  0E00               	movlw	0
 18744  0031C8  2002               	addwfc	?i2___wmul+1,w,c
 18745  0031CA  6E11               	movwf	retrieveLog@addr+1,c
 18746                           
 18747                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 18748  0031CC  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18749  0031D0  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18750  0031D4  ECBB  F023         	call	i2_EEPROM_read	;wreg free
 18751  0031D8  6E0B               	movwf	retrieveLog@byte1,c
 18752                           
 18753                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 18754  0031DA  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 18755  0031DE  0E80               	movlw	128
 18756  0031E0  1609               	andwf	??_retrieveLog,f,c
 18757  0031E2  5009               	movf	??_retrieveLog,w,c
 18758  0031E4  0100               	movlb	0	; () banked
 18759  0031E6  6FE8               	movwf	_log_completion& (0+255),b
 18760  0031E8  6BE9               	clrf	(_log_completion+1)& (0+255),b
 18761                           
 18762                           ; BSR set to: 0
 18763                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 18764  0031EA  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 18765  0031EE  0E0F               	movlw	15
 18766  0031F0  1609               	andwf	??_retrieveLog,f,c
 18767  0031F2  5009               	movf	??_retrieveLog,w,c
 18768  0031F4  0100               	movlb	0	; () banked
 18769  0031F6  6FF2               	movwf	_log_count_total& (0+255),b
 18770  0031F8  6BF3               	clrf	(_log_count_total+1)& (0+255),b
 18771                           
 18772                           ; BSR set to: 0
 18773                           ;EEPROM.c: 146: addr++;
 18774  0031FA  4A10               	infsnz	retrieveLog@addr,f,c
 18775  0031FC  2A11               	incf	retrieveLog@addr+1,f,c
 18776                           
 18777                           ; BSR set to: 0
 18778                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 18779  0031FE  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18780  003202  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18781  003206  ECBB  F023         	call	i2_EEPROM_read	;wreg free
 18782  00320A  6E0C               	movwf	retrieveLog@byte2,c
 18783                           
 18784                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)(byte2 & 0b11110000);
 18785  00320C  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 18786  003210  0EF0               	movlw	240
 18787  003212  1609               	andwf	??_retrieveLog,f,c
 18788  003214  5009               	movf	??_retrieveLog,w,c
 18789  003216  0100               	movlb	0	; () banked
 18790  003218  6FEE               	movwf	_log_count_pop_no_tab& (0+255),b
 18791  00321A  6BEF               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 18792                           
 18793                           ; BSR set to: 0
 18794                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 18795  00321C  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 18796  003220  0E0F               	movlw	15
 18797  003222  1609               	andwf	??_retrieveLog,f,c
 18798  003224  5009               	movf	??_retrieveLog,w,c
 18799  003226  0100               	movlb	0	; () banked
 18800  003228  6FF0               	movwf	_log_count_pop_w_tab& (0+255),b
 18801  00322A  6BF1               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 18802                           
 18803                           ; BSR set to: 0
 18804                           ;EEPROM.c: 152: addr++;
 18805  00322C  4A10               	infsnz	retrieveLog@addr,f,c
 18806  00322E  2A11               	incf	retrieveLog@addr+1,f,c
 18807                           
 18808                           ; BSR set to: 0
 18809                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 18810  003230  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18811  003234  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18812  003238  ECBB  F023         	call	i2_EEPROM_read	;wreg free
 18813  00323C  6E0D               	movwf	retrieveLog@byte3,c
 18814                           
 18815                           ;EEPROM.c: 154: log_count_can_w_lab = (int)(byte3 & 0b11110000);
 18816  00323E  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 18817  003242  0EF0               	movlw	240
 18818  003244  1609               	andwf	??_retrieveLog,f,c
 18819  003246  5009               	movf	??_retrieveLog,w,c
 18820  003248  0100               	movlb	0	; () banked
 18821  00324A  6FEC               	movwf	_log_count_can_w_lab& (0+255),b
 18822  00324C  6BED               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 18823                           
 18824                           ; BSR set to: 0
 18825                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 18826  00324E  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 18827  003252  0E0F               	movlw	15
 18828  003254  1609               	andwf	??_retrieveLog,f,c
 18829  003256  5009               	movf	??_retrieveLog,w,c
 18830  003258  0100               	movlb	0	; () banked
 18831  00325A  6FEA               	movwf	_log_count_can_no_lab& (0+255),b
 18832  00325C  6BEB               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 18833                           
 18834                           ; BSR set to: 0
 18835                           ;EEPROM.c: 156: addr++;
 18836  00325E  4A10               	infsnz	retrieveLog@addr,f,c
 18837  003260  2A11               	incf	retrieveLog@addr+1,f,c
 18838                           
 18839                           ; BSR set to: 0
 18840                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 18841  003262  0E00               	movlw	0
 18842  003264  6E0F               	movwf	retrieveLog@i+1,c
 18843  003266  0E00               	movlw	0
 18844  003268  6E0E               	movwf	retrieveLog@i,c
 18845  00326A                     i2l5965:
 18846                           
 18847                           ; BSR set to: 0
 18848  00326A  BE0F               	btfsc	retrieveLog@i+1,7,c
 18849  00326C  D006               	goto	i2l5969
 18850  00326E  500F               	movf	retrieveLog@i+1,w,c
 18851  003270  E11E               	bnz	i2l5977
 18852  003272  0E07               	movlw	7
 18853  003274  5C0E               	subwf	retrieveLog@i,w,c
 18854  003276  B0D8               	btfsc	status,0,c
 18855  003278  D01A               	goto	i2l5977
 18856  00327A                     i2l5969:
 18857                           
 18858                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 18859  00327A  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18860  00327E  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18861  003282  ECBB  F023         	call	i2_EEPROM_read	;wreg free
 18862  003286  6E09               	movwf	??_retrieveLog& (0+255),c
 18863  003288  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 18864  00328A  90D8               	bcf	status,0,c
 18865  00328C  340E               	rlcf	retrieveLog@i,w,c
 18866  00328E  6ED9               	movwf	fsr2l,c
 18867  003290  340F               	rlcf	retrieveLog@i+1,w,c
 18868  003292  6EDA               	movwf	fsr2h,c
 18869  003294  0E00               	movlw	low _log_startTime
 18870  003296  26D9               	addwf	fsr2l,f,c
 18871  003298  0E01               	movlw	high _log_startTime
 18872  00329A  22DA               	addwfc	fsr2h,f,c
 18873  00329C  C009  FFDE         	movff	??_retrieveLog,postinc2
 18874  0032A0  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 18875                           
 18876                           ;EEPROM.c: 161: addr++;
 18877  0032A4  4A10               	infsnz	retrieveLog@addr,f,c
 18878  0032A6  2A11               	incf	retrieveLog@addr+1,f,c
 18879  0032A8  4A0E               	infsnz	retrieveLog@i,f,c
 18880  0032AA  2A0F               	incf	retrieveLog@i+1,f,c
 18881  0032AC  D7DE               	goto	i2l5965
 18882  0032AE                     i2l5977:
 18883                           
 18884                           ;EEPROM.c: 162: }
 18885                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 18886  0032AE  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18887  0032B2  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18888  0032B6  ECBB  F023         	call	i2_EEPROM_read	;wreg free
 18889  0032BA  6E09               	movwf	??_retrieveLog& (0+255),c
 18890  0032BC  5009               	movf	??_retrieveLog,w,c
 18891  0032BE  0100               	movlb	0	; () banked
 18892  0032C0  6FF4               	movwf	_log_total_time& (0+255),b
 18893  0032C2  6BF5               	clrf	(_log_total_time+1)& (0+255),b
 18894                           
 18895                           ; BSR set to: 0
 18896  0032C4  0012               	return		;funcret
 18897  0032C6                     __end_of_retrieveLog:
 18898                           	opt stack 0
 18899                           pclatu	equ	0xFFB
 18900                           pclath	equ	0xFFA
 18901                           tblptru	equ	0xFF8
 18902                           tblptrh	equ	0xFF7
 18903                           tblptrl	equ	0xFF6
 18904                           tablat	equ	0xFF5
 18905                           prodh	equ	0xFF4
 18906                           prodl	equ	0xFF3
 18907                           intcon	equ	0xFF2
 18908                           intcon2	equ	0xFF1
 18909                           intcon3	equ	0xFF0
 18910                           indf0	equ	0xFEF
 18911                           postinc0	equ	0xFEE
 18912                           fsr0h	equ	0xFEA
 18913                           fsr0l	equ	0xFE9
 18914                           wreg	equ	0xFE8
 18915                           postdec1	equ	0xFE5
 18916                           fsr1h	equ	0xFE2
 18917                           fsr1l	equ	0xFE1
 18918                           indf2	equ	0xFDF
 18919                           postinc2	equ	0xFDE
 18920                           postdec2	equ	0xFDD
 18921                           fsr2h	equ	0xFDA
 18922                           fsr2l	equ	0xFD9
 18923                           status	equ	0xFD8
 18924                           
 18925 ;; *************** function i2_EEPROM_read *****************
 18926 ;; Defined at:
 18927 ;;		line 68 in file "EEPROM.c"
 18928 ;; Parameters:    Size  Location     Type
 18929 ;;  address         2    0[COMRAM] unsigned short 
 18930 ;; Auto vars:     Size  Location     Type
 18931 ;;		None
 18932 ;; Return value:  Size  Location     Type
 18933 ;;                  1    wreg      unsigned char 
 18934 ;; Registers used:
 18935 ;;		wreg, status,2
 18936 ;; Tracked objects:
 18937 ;;		On entry : 0/0
 18938 ;;		On exit  : 0/0
 18939 ;;		Unchanged: 0/0
 18940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18941 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18942 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18944 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18945 ;;Total ram usage:        2 bytes
 18946 ;; Hardware stack levels used:    1
 18947 ;; This function calls:
 18948 ;;		Nothing
 18949 ;; This function is called by:
 18950 ;;		_retrieveLog
 18951 ;; This function uses a non-reentrant model
 18952 ;;
 18953                           
 18954                           	psect	text76
 18955  004776                     __ptext76:
 18956                           	opt stack 0
 18957  004776                     i2_EEPROM_read:
 18958                           	opt stack 20
 18959                           
 18960                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 18961                           
 18962                           ; BSR set to: 0
 18963                           ;incstack = 0
 18964  004776  5002               	movf	i2EEPROM_read@address+1,w,c
 18965  004778  6EAA               	movwf	4010,c	;volatile
 18966                           
 18967                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 18968  00477A  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 18969                           
 18970                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 18971  00477E  9EA6               	bcf	4006,7,c	;volatile
 18972                           
 18973                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 18974  004780  9CA6               	bcf	4006,6,c	;volatile
 18975                           
 18976                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 18977  004782  80A6               	bsf	4006,0,c	;volatile
 18978  004784                     i2l943:
 18979  004784  B0A6               	btfsc	4006,0,c	;volatile
 18980  004786  D7FE               	goto	i2l943
 18981                           
 18982                           ;EEPROM.c: 81: return EEDATA;
 18983  004788  50A8               	movf	4008,w,c	;volatile
 18984  00478A  0012               	return	
 18985  00478C                     __end_ofi2_EEPROM_read:
 18986                           	opt stack 0
 18987                           pclatu	equ	0xFFB
 18988                           pclath	equ	0xFFA
 18989                           tblptru	equ	0xFF8
 18990                           tblptrh	equ	0xFF7
 18991                           tblptrl	equ	0xFF6
 18992                           tablat	equ	0xFF5
 18993                           prodh	equ	0xFF4
 18994                           prodl	equ	0xFF3
 18995                           intcon	equ	0xFF2
 18996                           intcon2	equ	0xFF1
 18997                           intcon3	equ	0xFF0
 18998                           indf0	equ	0xFEF
 18999                           postinc0	equ	0xFEE
 19000                           fsr0h	equ	0xFEA
 19001                           fsr0l	equ	0xFE9
 19002                           wreg	equ	0xFE8
 19003                           postdec1	equ	0xFE5
 19004                           fsr1h	equ	0xFE2
 19005                           fsr1l	equ	0xFE1
 19006                           indf2	equ	0xFDF
 19007                           postinc2	equ	0xFDE
 19008                           postdec2	equ	0xFDD
 19009                           fsr2h	equ	0xFDA
 19010                           fsr2l	equ	0xFD9
 19011                           status	equ	0xFD8
 19012                           
 19013 ;; *************** function _printSortTimer *****************
 19014 ;; Defined at:
 19015 ;;		line 284 in file "sort.c"
 19016 ;; Parameters:    Size  Location     Type
 19017 ;;		None
 19018 ;; Auto vars:     Size  Location     Type
 19019 ;;  i               2   72[COMRAM] int 
 19020 ;;  curTime        14   46[COMRAM] int [7]
 19021 ;;  timeDiff        2   70[COMRAM] unsigned int 
 19022 ;;  sec             2   66[COMRAM] int 
 19023 ;;  min             2   64[COMRAM] int 
 19024 ;;  cur_sec         2   62[COMRAM] unsigned int 
 19025 ;;  start_sec       2   60[COMRAM] unsigned int 
 19026 ;;  hour            2   44[COMRAM] int 
 19027 ;; Return value:  Size  Location     Type
 19028 ;;                  1    wreg      void 
 19029 ;; Registers used:
 19030 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19031 ;; Tracked objects:
 19032 ;;		On entry : 0/0
 19033 ;;		On exit  : 0/0
 19034 ;;		Unchanged: 0/0
 19035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19037 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19038 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19039 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19040 ;;Total ram usage:       33 bytes
 19041 ;; Hardware stack levels used:    1
 19042 ;; Hardware stack levels required when called:    3
 19043 ;; This function calls:
 19044 ;;		i2___lwdiv
 19045 ;;		i2___lwmod
 19046 ;;		i2___wmul
 19047 ;;		i2_getRTC
 19048 ;;		i2_lcdInst
 19049 ;;		i2_printf
 19050 ;; This function is called by:
 19051 ;;		_handler
 19052 ;; This function uses a non-reentrant model
 19053 ;;
 19054                           
 19055                           	psect	text77
 19056  0026E8                     __ptext77:
 19057                           	opt stack 0
 19058  0026E8                     _printSortTimer:
 19059                           	opt stack 20
 19060                           
 19061                           ;sort.c: 285: getRTC();
 19062                           
 19063                           ;incstack = 0
 19064  0026E8  EC58  F01E         	call	i2_getRTC	;wreg free
 19065                           
 19066                           ;sort.c: 286: int curTime[7];
 19067                           ;sort.c: 287: for(int i = 0; i < 7; i++){
 19068  0026EC  0E00               	movlw	0
 19069  0026EE  6E4A               	movwf	printSortTimer@i+1,c
 19070  0026F0  0E00               	movlw	0
 19071  0026F2  6E49               	movwf	printSortTimer@i,c
 19072  0026F4                     i2l8035:
 19073  0026F4  BE4A               	btfsc	printSortTimer@i+1,7,c
 19074  0026F6  D006               	goto	i2l8039
 19075  0026F8  504A               	movf	printSortTimer@i+1,w,c
 19076  0026FA  E131               	bnz	i2l8045
 19077  0026FC  0E07               	movlw	7
 19078  0026FE  5C49               	subwf	printSortTimer@i,w,c
 19079  002700  B0D8               	btfsc	status,0,c
 19080  002702  D02D               	goto	i2l8045
 19081  002704                     i2l8039:
 19082                           
 19083                           ;sort.c: 288: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 19084  002704  0E24               	movlw	low _time
 19085  002706  2449               	addwf	printSortTimer@i,w,c
 19086  002708  6ED9               	movwf	fsr2l,c
 19087  00270A  0E01               	movlw	high _time
 19088  00270C  204A               	addwfc	printSortTimer@i+1,w,c
 19089  00270E  6EDA               	movwf	fsr2h,c
 19090  002710  50DF               	movf	indf2,w,c
 19091  002712  6E2A               	movwf	??_printSortTimer& (0+255),c
 19092  002714  3A2A               	swapf	??_printSortTimer,f,c
 19093  002716  0E0F               	movlw	15
 19094  002718  162A               	andwf	??_printSortTimer,f,c
 19095  00271A  0E0F               	movlw	15
 19096  00271C  162A               	andwf	??_printSortTimer,f,c
 19097  00271E  502A               	movf	??_printSortTimer,w,c
 19098  002720  0D0A               	mullw	10
 19099  002722  0E24               	movlw	low _time
 19100  002724  2449               	addwf	printSortTimer@i,w,c
 19101  002726  6ED9               	movwf	fsr2l,c
 19102  002728  0E01               	movlw	high _time
 19103  00272A  204A               	addwfc	printSortTimer@i+1,w,c
 19104  00272C  6EDA               	movwf	fsr2h,c
 19105  00272E  50DF               	movf	indf2,w,c
 19106  002730  0B0F               	andlw	15
 19107  002732  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 19108  002734  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 19109  002736  50F3               	movf	prodl,w,c
 19110  002738  262B               	addwf	??_printSortTimer+1,f,c
 19111  00273A  50F4               	movf	prodh,w,c
 19112  00273C  222C               	addwfc	??_printSortTimer+2,f,c
 19113  00273E  90D8               	bcf	status,0,c
 19114  002740  3449               	rlcf	printSortTimer@i,w,c
 19115  002742  6ED9               	movwf	fsr2l,c
 19116  002744  344A               	rlcf	printSortTimer@i+1,w,c
 19117  002746  6EDA               	movwf	fsr2h,c
 19118  002748  0E2F               	movlw	low printSortTimer@curTime
 19119  00274A  26D9               	addwf	fsr2l,f,c
 19120  00274C  0E00               	movlw	high printSortTimer@curTime
 19121  00274E  22DA               	addwfc	fsr2h,f,c
 19122  002750  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 19123  002754  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 19124  002758  4A49               	infsnz	printSortTimer@i,f,c
 19125  00275A  2A4A               	incf	printSortTimer@i+1,f,c
 19126  00275C  D7CB               	goto	i2l8035
 19127  00275E                     i2l8045:
 19128                           
 19129                           ;sort.c: 289: }
 19130                           ;sort.c: 290: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 19131  00275E  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 19132  002762  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 19133  002766  0E00               	movlw	0
 19134  002768  6E04               	movwf	i2___wmul@multiplicand+1,c
 19135  00276A  0E3C               	movlw	60
 19136  00276C  6E03               	movwf	i2___wmul@multiplicand,c
 19137  00276E  EC3B  F023         	call	i2___wmul	;wreg free
 19138  002772  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 19139  002776  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 19140  00277A  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 19141  00277E  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 19142  002782  0E0E               	movlw	14
 19143  002784  6E04               	movwf	i2___wmul@multiplicand+1,c
 19144  002786  0E10               	movlw	16
 19145  002788  6E03               	movwf	i2___wmul@multiplicand,c
 19146  00278A  EC3B  F023         	call	i2___wmul	;wreg free
 19147  00278E  5001               	movf	?i2___wmul,w,c
 19148  002790  262A               	addwf	??_printSortTimer,f,c
 19149  002792  5002               	movf	?i2___wmul+1,w,c
 19150  002794  222B               	addwfc	??_printSortTimer+1,f,c
 19151  002796  0101               	movlb	1	; () banked
 19152  002798  510E               	movf	_startTime& (0+255),w,b
 19153  00279A  242A               	addwf	??_printSortTimer,w,c
 19154  00279C  6E3D               	movwf	printSortTimer@start_sec,c
 19155  00279E  0101               	movlb	1	; () banked
 19156  0027A0  510F               	movf	(_startTime+1)& (0+255),w,b
 19157  0027A2  202B               	addwfc	??_printSortTimer+1,w,c
 19158  0027A4  6E3E               	movwf	printSortTimer@start_sec+1,c
 19159                           
 19160                           ;sort.c: 291: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 19161  0027A6  C031  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 19162  0027AA  C032  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 19163  0027AE  0E00               	movlw	0
 19164  0027B0  6E04               	movwf	i2___wmul@multiplicand+1,c
 19165  0027B2  0E3C               	movlw	60
 19166  0027B4  6E03               	movwf	i2___wmul@multiplicand,c
 19167  0027B6  EC3B  F023         	call	i2___wmul	;wreg free
 19168  0027BA  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 19169  0027BE  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 19170  0027C2  C033  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 19171  0027C6  C034  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 19172  0027CA  0E0E               	movlw	14
 19173  0027CC  6E04               	movwf	i2___wmul@multiplicand+1,c
 19174  0027CE  0E10               	movlw	16
 19175  0027D0  6E03               	movwf	i2___wmul@multiplicand,c
 19176  0027D2  EC3B  F023         	call	i2___wmul	;wreg free
 19177  0027D6  5001               	movf	?i2___wmul,w,c
 19178  0027D8  262A               	addwf	??_printSortTimer,f,c
 19179  0027DA  5002               	movf	?i2___wmul+1,w,c
 19180  0027DC  222B               	addwfc	??_printSortTimer+1,f,c
 19181  0027DE  502F               	movf	printSortTimer@curTime,w,c
 19182  0027E0  242A               	addwf	??_printSortTimer,w,c
 19183  0027E2  6E3F               	movwf	printSortTimer@cur_sec,c
 19184  0027E4  5030               	movf	printSortTimer@curTime+1,w,c
 19185  0027E6  202B               	addwfc	??_printSortTimer+1,w,c
 19186  0027E8  6E40               	movwf	printSortTimer@cur_sec+1,c
 19187                           
 19188                           ;sort.c: 292: unsigned int timeDiff = cur_sec - start_sec;
 19189  0027EA  C03D  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 19190  0027EE  C03E  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 19191  0027F2  1E2A               	comf	??_printSortTimer,f,c
 19192  0027F4  1E2B               	comf	??_printSortTimer+1,f,c
 19193  0027F6  4A2A               	infsnz	??_printSortTimer,f,c
 19194  0027F8  2A2B               	incf	??_printSortTimer+1,f,c
 19195  0027FA  503F               	movf	printSortTimer@cur_sec,w,c
 19196  0027FC  242A               	addwf	??_printSortTimer,w,c
 19197  0027FE  6E47               	movwf	printSortTimer@timeDiff,c
 19198  002800  5040               	movf	printSortTimer@cur_sec+1,w,c
 19199  002802  202B               	addwfc	??_printSortTimer+1,w,c
 19200  002804  6E48               	movwf	printSortTimer@timeDiff+1,c
 19201                           
 19202                           ;sort.c: 294: total_time = timeDiff;
 19203  002806  C047  F0F8         	movff	printSortTimer@timeDiff,_total_time
 19204  00280A  C048  F0F9         	movff	printSortTimer@timeDiff+1,_total_time+1
 19205                           
 19206                           ;sort.c: 296: if(timeDiff >= 179){
 19207  00280E  5048               	movf	printSortTimer@timeDiff+1,w,c
 19208  002810  E104               	bnz	i2u690_40
 19209  002812  0EB3               	movlw	179
 19210  002814  5C47               	subwf	printSortTimer@timeDiff,w,c
 19211  002816  A0D8               	btfss	status,0,c
 19212  002818  D003               	goto	i2l8055
 19213  00281A                     i2u690_40:
 19214                           
 19215                           ;sort.c: 297: machine_state = DoneSorting_state;
 19216  00281A  0E02               	movlw	2
 19217  00281C  0100               	movlb	0	; () banked
 19218  00281E  6FFC               	movwf	_machine_state& (0+255),b
 19219  002820                     i2l8055:
 19220                           
 19221                           ;sort.c: 299: }
 19222                           ;sort.c: 301: int hour = timeDiff / 3600;
 19223  002820  C047  F006         	movff	printSortTimer@timeDiff,i2___lwdiv@dividend
 19224  002824  C048  F007         	movff	printSortTimer@timeDiff+1,i2___lwdiv@dividend+1
 19225  002828  0E0E               	movlw	14
 19226  00282A  6E09               	movwf	i2___lwdiv@divisor+1,c
 19227  00282C  0E10               	movlw	16
 19228  00282E  6E08               	movwf	i2___lwdiv@divisor,c
 19229  002830  EC35  F020         	call	i2___lwdiv	;wreg free
 19230  002834  C006  F02D         	movff	?i2___lwdiv,printSortTimer@hour
 19231  002838  C007  F02E         	movff	?i2___lwdiv+1,printSortTimer@hour+1
 19232                           
 19233                           ;sort.c: 302: int min = (timeDiff % 3600) / 60;
 19234  00283C  0E0E               	movlw	14
 19235  00283E  6E04               	movwf	i2___lwmod@divisor+1,c
 19236  002840  0E10               	movlw	16
 19237  002842  6E03               	movwf	i2___lwmod@divisor,c
 19238  002844  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 19239  002848  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 19240  00284C  ECF4  F020         	call	i2___lwmod	;wreg free
 19241  002850  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 19242  002854  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 19243  002858  0E00               	movlw	0
 19244  00285A  6E09               	movwf	i2___lwdiv@divisor+1,c
 19245  00285C  0E3C               	movlw	60
 19246  00285E  6E08               	movwf	i2___lwdiv@divisor,c
 19247  002860  EC35  F020         	call	i2___lwdiv	;wreg free
 19248  002864  C006  F041         	movff	?i2___lwdiv,printSortTimer@min
 19249  002868  C007  F042         	movff	?i2___lwdiv+1,printSortTimer@min+1
 19250                           
 19251                           ;sort.c: 303: int sec = (timeDiff % 3600) % 60;
 19252  00286C  0E0E               	movlw	14
 19253  00286E  6E04               	movwf	i2___lwmod@divisor+1,c
 19254  002870  0E10               	movlw	16
 19255  002872  6E03               	movwf	i2___lwmod@divisor,c
 19256  002874  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 19257  002878  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 19258  00287C  ECF4  F020         	call	i2___lwmod	;wreg free
 19259  002880  C001  F045         	movff	?i2___lwmod,_printSortTimer$2415
 19260  002884  C002  F046         	movff	?i2___lwmod+1,_printSortTimer$2415+1
 19261                           
 19262                           ;sort.c: 303: int sec = (timeDiff % 3600) % 60;
 19263  002888  C045  F001         	movff	_printSortTimer$2415,i2___lwmod@dividend
 19264  00288C  C046  F002         	movff	_printSortTimer$2415+1,i2___lwmod@dividend+1
 19265  002890  0E00               	movlw	0
 19266  002892  6E04               	movwf	i2___lwmod@divisor+1,c
 19267  002894  0E3C               	movlw	60
 19268  002896  6E03               	movwf	i2___lwmod@divisor,c
 19269  002898  ECF4  F020         	call	i2___lwmod	;wreg free
 19270  00289C  C001  F043         	movff	?i2___lwmod,printSortTimer@sec
 19271  0028A0  C002  F044         	movff	?i2___lwmod+1,printSortTimer@sec+1
 19272                           
 19273                           ;sort.c: 305: lcdInst(0b10000000);;
 19274  0028A4  0E80               	movlw	128
 19275  0028A6  ECEF  F023         	call	i2_lcdInst
 19276                           
 19277                           ;sort.c: 306: printf("SORTING...");
 19278  0028AA  0E7C               	movlw	low STR_64
 19279  0028AC  6E0D               	movwf	i2printf@f,c
 19280  0028AE  0EFF               	movlw	high STR_64
 19281  0028B0  6E0E               	movwf	i2printf@f+1,c
 19282  0028B2  ECD4  F00A         	call	i2_printf	;wreg free
 19283                           
 19284                           ;sort.c: 307: lcdInst(0b11000000);;
 19285  0028B6  0EC0               	movlw	192
 19286  0028B8  ECEF  F023         	call	i2_lcdInst
 19287                           
 19288                           ;sort.c: 308: printf("TIME %d:%02d", min, sec);
 19289  0028BC  0E42               	movlw	low STR_65
 19290  0028BE  6E0D               	movwf	i2printf@f,c
 19291  0028C0  0EFF               	movlw	high STR_65
 19292  0028C2  6E0E               	movwf	i2printf@f+1,c
 19293  0028C4  C041  F00F         	movff	printSortTimer@min,?i2_printf+2
 19294  0028C8  C042  F010         	movff	printSortTimer@min+1,?i2_printf+3
 19295  0028CC  C043  F011         	movff	printSortTimer@sec,?i2_printf+4
 19296  0028D0  C044  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 19297  0028D4  ECD4  F00A         	call	i2_printf	;wreg free
 19298  0028D8  0012               	return		;funcret
 19299  0028DA                     __end_of_printSortTimer:
 19300                           	opt stack 0
 19301                           pclatu	equ	0xFFB
 19302                           pclath	equ	0xFFA
 19303                           tblptru	equ	0xFF8
 19304                           tblptrh	equ	0xFF7
 19305                           tblptrl	equ	0xFF6
 19306                           tablat	equ	0xFF5
 19307                           prodh	equ	0xFF4
 19308                           prodl	equ	0xFF3
 19309                           intcon	equ	0xFF2
 19310                           intcon2	equ	0xFF1
 19311                           intcon3	equ	0xFF0
 19312                           indf0	equ	0xFEF
 19313                           postinc0	equ	0xFEE
 19314                           fsr0h	equ	0xFEA
 19315                           fsr0l	equ	0xFE9
 19316                           wreg	equ	0xFE8
 19317                           postdec1	equ	0xFE5
 19318                           fsr1h	equ	0xFE2
 19319                           fsr1l	equ	0xFE1
 19320                           indf2	equ	0xFDF
 19321                           postinc2	equ	0xFDE
 19322                           postdec2	equ	0xFDD
 19323                           fsr2h	equ	0xFDA
 19324                           fsr2l	equ	0xFD9
 19325                           status	equ	0xFD8
 19326                           
 19327 ;; *************** function i2_printf *****************
 19328 ;; Defined at:
 19329 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 19330 ;; Parameters:    Size  Location     Type
 19331 ;;  f               2   12[COMRAM] PTR const unsigned char 
 19332 ;;		 -> STR_115(17), STR_114(17), STR_113(11), STR_112(18), 
 19333 ;;		 -> STR_111(18), STR_110(17), STR_109(15), STR_108(15), 
 19334 ;;		 -> STR_107(15), STR_106(17), STR_105(17), STR_104(17), 
 19335 ;;		 -> STR_103(16), STR_102(17), STR_101(17), STR_100(17), 
 19336 ;;		 -> STR_99(17), STR_98(17), STR_97(17), STR_96(15), 
 19337 ;;		 -> STR_95(11), STR_94(17), STR_93(11), STR_92(17), 
 19338 ;;		 -> STR_91(14), STR_90(15), STR_89(14), STR_88(10), 
 19339 ;;		 -> STR_87(9), STR_86(9), STR_85(10), STR_84(10), 
 19340 ;;		 -> STR_83(16), STR_82(15), STR_81(3), STR_80(15), 
 19341 ;;		 -> STR_79(13), STR_78(14), STR_77(8), STR_76(14), 
 19342 ;;		 -> STR_75(15), STR_74(12), STR_73(14), STR_72(17), 
 19343 ;;		 -> STR_71(14), STR_70(15), STR_69(17), STR_68(17), 
 19344 ;;		 -> STR_67(7), STR_66(21), STR_65(13), STR_64(11), 
 19345 ;;		 -> STR_63(24), STR_50(17), STR_49(17), STR_48(17), 
 19346 ;;		 -> STR_47(17), STR_46(17), STR_45(17), STR_44(17), 
 19347 ;;		 -> STR_43(17), STR_42(17), STR_41(17), STR_40(17), 
 19348 ;;		 -> STR_39(17), STR_38(17), STR_37(17), STR_36(17), 
 19349 ;;		 -> STR_35(17), STR_34(17), STR_33(17), STR_32(17), 
 19350 ;;		 -> STR_31(17), STR_30(17), STR_29(3), STR_28(17), 
 19351 ;;		 -> STR_27(17), STR_26(17), STR_25(17), STR_24(17), 
 19352 ;;		 -> STR_23(14), STR_22(10), STR_21(24), STR_7(7), 
 19353 ;;		 -> STR_6(17), STR_5(18), STR_4(16), STR_3(18), 
 19354 ;;		 -> STR_2(14), STR_1(18), 
 19355 ;; Auto vars:     Size  Location     Type
 19356 ;;  printf          4    0        struct .
 19357 ;;  printf          2   39[COMRAM] int 
 19358 ;;  printf          2   35[COMRAM] unsigned int 
 19359 ;;  printf          2   33[COMRAM] unsigned int 
 19360 ;;  printf          2   31[COMRAM] PTR void [1]
 19361 ;;		 -> ?i2_printf(2), ?_printf(2), 
 19362 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 19363 ;;		 -> STR_116(7), count_total(2), printRTC@month(4), UI@month(4), 
 19364 ;;  printf          1   38[COMRAM] char 
 19365 ;;  printf          1   37[COMRAM] unsigned char 
 19366 ;;  printf          1   28[COMRAM] char 
 19367 ;; Return value:  Size  Location     Type
 19368 ;;                  2   12[COMRAM] int 
 19369 ;; Registers used:
 19370 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19371 ;; Tracked objects:
 19372 ;;		On entry : 0/0
 19373 ;;		On exit  : 0/0
 19374 ;;		Unchanged: 0/0
 19375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19376 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19377 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19378 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19379 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19380 ;;Total ram usage:       29 bytes
 19381 ;; Hardware stack levels used:    1
 19382 ;; Hardware stack levels required when called:    2
 19383 ;; This function calls:
 19384 ;;		i2___lwdiv
 19385 ;;		i2___lwmod
 19386 ;;		i2___wmul
 19387 ;;		i2_isdigit
 19388 ;;		i2_putch
 19389 ;; This function is called by:
 19390 ;;		_change_state_to_menu_11
 19391 ;;		_change_state_to_menu_23
 19392 ;;		_change_state_to_logs_11
 19393 ;;		_change_state_to_logs_12
 19394 ;;		_change_state_to_logs_22
 19395 ;;		_change_state_to_logs_23
 19396 ;;		_change_state_to_logs_33
 19397 ;;		_change_state_to_logs_34
 19398 ;;		_printSortTimer
 19399 ;;		i2_change_state_to_menu_start
 19400 ;;		i2_change_state_to_menu_12
 19401 ;;		i2_change_state_to_menu_22
 19402 ;;		i2_printRTC
 19403 ;; This function uses a non-reentrant model
 19404 ;;
 19405                           
 19406                           	psect	text78
 19407  0015A8                     __ptext78:
 19408                           	opt stack 0
 19409  0015A8                     i2_printf:
 19410                           	opt stack 19
 19411                           
 19412                           ;doprnt.c: 466: va_list ap;
 19413                           ;doprnt.c: 499: signed char c;
 19414                           ;doprnt.c: 501: int width;
 19415                           ;doprnt.c: 506: signed char prec;
 19416                           ;doprnt.c: 508: unsigned char flag;
 19417                           ;doprnt.c: 523: union {
 19418                           ;doprnt.c: 524: unsigned long vd;
 19419                           ;doprnt.c: 525: double integ;
 19420                           ;doprnt.c: 526: } tmpval;
 19421                           ;doprnt.c: 528: unsigned int val;
 19422                           ;doprnt.c: 529: unsigned len;
 19423                           ;doprnt.c: 530: const char * cp;
 19424                           ;doprnt.c: 533: *ap = __va_start();
 19425                           
 19426                           ;incstack = 0
 19427  0015A8  0E0F               	movlw	low (?i2_printf+2)
 19428  0015AA  6E20               	movwf	i2printf@ap,c
 19429  0015AC  0E00               	movlw	high (?i2_printf+2)
 19430  0015AE  6E21               	movwf	i2printf@ap+1,c
 19431                           
 19432                           ;doprnt.c: 536: while(c = *f++) {
 19433  0015B0  D1A4               	goto	i2l5789
 19434  0015B2                     i2l5659:
 19435                           
 19436                           ;doprnt.c: 538: if(c != '%')
 19437  0015B2  0E25               	movlw	37
 19438  0015B4  1827               	xorwf	i2printf@c,w,c
 19439  0015B6  B4D8               	btfsc	status,2,c
 19440  0015B8  D004               	goto	i2l5663
 19441                           
 19442                           ;doprnt.c: 540: {
 19443                           ;doprnt.c: 541: (putch(c) );
 19444  0015BA  5027               	movf	i2printf@c,w,c
 19445  0015BC  ECE9  F023         	call	i2_putch
 19446                           
 19447                           ;doprnt.c: 542: continue;
 19448  0015C0  D19C               	goto	i2l5789
 19449  0015C2                     i2l5663:
 19450                           
 19451                           ;doprnt.c: 543: }
 19452                           ;doprnt.c: 546: width = 0;
 19453  0015C2  0E00               	movlw	0
 19454  0015C4  6E29               	movwf	i2printf@width+1,c
 19455  0015C6  0E00               	movlw	0
 19456  0015C8  6E28               	movwf	i2printf@width,c
 19457                           
 19458                           ;doprnt.c: 548: flag = 0;
 19459  0015CA  0E00               	movlw	0
 19460  0015CC  6E26               	movwf	i2printf@flag,c
 19461                           
 19462                           ;doprnt.c: 551: switch(*f) {
 19463                           
 19464                           ;doprnt.c: 550: for(;;) {
 19465  0015CE  D003               	goto	i2l5669
 19466  0015D0                     i2l5665:
 19467                           
 19468                           ;doprnt.c: 580: flag |= 0x04;
 19469  0015D0  8426               	bsf	i2printf@flag,2,c
 19470                           
 19471                           ;doprnt.c: 581: f++;
 19472  0015D2  4A0D               	infsnz	i2printf@f,f,c
 19473  0015D4  2A0E               	incf	i2printf@f+1,f,c
 19474  0015D6                     i2l5669:
 19475  0015D6  C00D  FFF6         	movff	i2printf@f,tblptrl
 19476  0015DA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19477  0015DE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19478  0015DE  6AF8               	clrf	tblptru,c
 19479  0015E0                     	endif
 19480  0015E0                     	if	0	;tblptru may be non-zero
 19481  0015E0                     	endif
 19482  0015E0  0008               	tblrd		*
 19483  0015E2  50F5               	movf	tablat,w,c
 19484                           
 19485                           ; Switch size 1, requested type "space"
 19486                           ; Number of cases is 1, Range of values is 48 to 48
 19487                           ; switch strategies available:
 19488                           ; Name         Instructions Cycles
 19489                           ; simple_byte            4     3 (average)
 19490                           ;	Chosen strategy is simple_byte
 19491  0015E4  0A30               	xorlw	48	; case 48
 19492  0015E6  B4D8               	btfsc	status,2,c
 19493  0015E8  D7F3               	goto	i2l5665
 19494                           
 19495                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 19496                           
 19497                           ;doprnt.c: 586: }
 19498                           
 19499                           ;doprnt.c: 585: break;
 19500  0015EA  C00D  FFF6         	movff	i2printf@f,tblptrl
 19501  0015EE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19502  0015F2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19503  0015F2  6AF8               	clrf	tblptru,c
 19504  0015F4                     	endif
 19505  0015F4                     	if	0	;tblptru may be non-zero
 19506  0015F4                     	endif
 19507  0015F4  0008               	tblrd		*
 19508  0015F6  50F5               	movf	tablat,w,c
 19509  0015F8  EC95  F023         	call	i2_isdigit
 19510  0015FC  A0D8               	btfss	status,0,c
 19511  0015FE  D0A6               	goto	i2l5717
 19512                           
 19513                           ;doprnt.c: 598: width = 0;
 19514  001600  0E00               	movlw	0
 19515  001602  6E29               	movwf	i2printf@width+1,c
 19516  001604  0E00               	movlw	0
 19517  001606  6E28               	movwf	i2printf@width,c
 19518  001608                     i2l5675:
 19519                           
 19520                           ;doprnt.c: 600: width *= 10;
 19521  001608  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 19522  00160C  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 19523  001610  0E00               	movlw	0
 19524  001612  6E04               	movwf	i2___wmul@multiplicand+1,c
 19525  001614  0E0A               	movlw	10
 19526  001616  6E03               	movwf	i2___wmul@multiplicand,c
 19527  001618  EC3B  F023         	call	i2___wmul	;wreg free
 19528  00161C  C001  F028         	movff	?i2___wmul,i2printf@width
 19529  001620  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 19530                           
 19531                           ;doprnt.c: 601: width += *f++ - '0';
 19532  001624  0ED0               	movlw	208
 19533  001626  6E19               	movwf	??i2_printf& (0+255),c
 19534  001628  0EFF               	movlw	255
 19535  00162A  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 19536  00162C  C00D  FFF6         	movff	i2printf@f,tblptrl
 19537  001630  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19538  001634                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19539  001634  6AF8               	clrf	tblptru,c
 19540  001636                     	endif
 19541  001636                     	if	0	;tblptru may be non-zero
 19542  001636                     	endif
 19543  001636  0008               	tblrd		*
 19544  001638  50F5               	movf	tablat,w,c
 19545  00163A  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 19546  00163C  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 19547  00163E  5019               	movf	??i2_printf,w,c
 19548  001640  261B               	addwf	??i2_printf+2,f,c
 19549  001642  501A               	movf	??i2_printf+1,w,c
 19550  001644  221C               	addwfc	??i2_printf+3,f,c
 19551  001646  501B               	movf	??i2_printf+2,w,c
 19552  001648  2628               	addwf	i2printf@width,f,c
 19553  00164A  501C               	movf	??i2_printf+3,w,c
 19554  00164C  2229               	addwfc	i2printf@width+1,f,c
 19555  00164E  4A0D               	infsnz	i2printf@f,f,c
 19556  001650  2A0E               	incf	i2printf@f+1,f,c
 19557                           
 19558                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 19559  001652  C00D  FFF6         	movff	i2printf@f,tblptrl
 19560  001656  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19561  00165A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19562  00165A  6AF8               	clrf	tblptru,c
 19563  00165C                     	endif
 19564  00165C                     	if	0	;tblptru may be non-zero
 19565  00165C                     	endif
 19566  00165C  0008               	tblrd		*
 19567  00165E  50F5               	movf	tablat,w,c
 19568  001660  EC95  F023         	call	i2_isdigit
 19569  001664  A0D8               	btfss	status,0,c
 19570  001666  D072               	goto	i2l5717
 19571  001668  D7CF               	goto	i2l5675
 19572  00166A                     i2l5683:
 19573                           
 19574                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 19575  00166A  C020  FFD9         	movff	i2printf@ap,fsr2l
 19576  00166E  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 19577  001672  CFDE F01E          	movff	postinc2,i2printf@cp
 19578  001676  CFDD F01F          	movff	postdec2,i2printf@cp+1
 19579  00167A  0E02               	movlw	2
 19580  00167C  2620               	addwf	i2printf@ap,f,c
 19581  00167E  0E00               	movlw	0
 19582  001680  2221               	addwfc	i2printf@ap+1,f,c
 19583                           
 19584                           ;doprnt.c: 740: if(!cp)
 19585  001682  501E               	movf	i2printf@cp,w,c
 19586  001684  101F               	iorwf	i2printf@cp+1,w,c
 19587  001686  A4D8               	btfss	status,2,c
 19588  001688  D004               	goto	i2l5691
 19589                           
 19590                           ;doprnt.c: 741: cp = "(null)";
 19591  00168A  0EB6               	movlw	low STR_116
 19592  00168C  6E1E               	movwf	i2printf@cp,c
 19593  00168E  0EFF               	movlw	high STR_116
 19594  001690  6E1F               	movwf	i2printf@cp+1,c
 19595  001692                     i2l5691:
 19596                           
 19597                           ;doprnt.c: 745: len = 0;
 19598  001692  0E00               	movlw	0
 19599  001694  6E23               	movwf	i2printf@len+1,c
 19600  001696  0E00               	movlw	0
 19601  001698  6E22               	movwf	i2printf@len,c
 19602                           
 19603                           ;doprnt.c: 746: while(cp[len])
 19604  00169A  D002               	goto	i2l5695
 19605  00169C                     i2l5693:
 19606                           
 19607                           ;doprnt.c: 747: len++;
 19608  00169C  4A22               	infsnz	i2printf@len,f,c
 19609  00169E  2A23               	incf	i2printf@len+1,f,c
 19610  0016A0                     i2l5695:
 19611  0016A0  5022               	movf	i2printf@len,w,c
 19612  0016A2  241E               	addwf	i2printf@cp,w,c
 19613  0016A4  6E19               	movwf	??i2_printf& (0+255),c
 19614  0016A6  5023               	movf	i2printf@len+1,w,c
 19615  0016A8  201F               	addwfc	i2printf@cp+1,w,c
 19616  0016AA  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 19617  0016AC  C019  FFF6         	movff	??i2_printf,tblptrl
 19618  0016B0  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 19619  0016B4  0E00               	movlw	low (__mediumconst shr (0+16))
 19620  0016B6  6EF8               	movwf	tblptru,c
 19621  0016B8  0E0F               	movlw	(high __ramtop+-1)
 19622  0016BA  64F7               	cpfsgt	tblptrh,c
 19623  0016BC  D003               	bra	i2u422_47
 19624  0016BE  0008               	tblrd		*
 19625  0016C0  50F5               	movf	tablat,w,c
 19626  0016C2  D005               	bra	i2u422_40
 19627  0016C4                     i2u422_47:
 19628  0016C4  CFF6 FFE9          	movff	tblptrl,fsr0l
 19629  0016C8  CFF7 FFEA          	movff	tblptrh,fsr0h
 19630  0016CC  50EF               	movf	indf0,w,c
 19631  0016CE                     i2u422_40:
 19632  0016CE  0900               	iorlw	0
 19633  0016D0  A4D8               	btfss	status,2,c
 19634  0016D2  D7E4               	goto	i2l5693
 19635                           
 19636                           ;doprnt.c: 757: if(width > len)
 19637  0016D4  5028               	movf	i2printf@width,w,c
 19638  0016D6  5C22               	subwf	i2printf@len,w,c
 19639  0016D8  5029               	movf	i2printf@width+1,w,c
 19640  0016DA  5823               	subwfb	i2printf@len+1,w,c
 19641  0016DC  B0D8               	btfsc	status,0,c
 19642  0016DE  D005               	goto	i2l5701
 19643                           
 19644                           ;doprnt.c: 758: width -= len;
 19645  0016E0  5022               	movf	i2printf@len,w,c
 19646  0016E2  5E28               	subwf	i2printf@width,f,c
 19647  0016E4  5023               	movf	i2printf@len+1,w,c
 19648  0016E6  5A29               	subwfb	i2printf@width+1,f,c
 19649  0016E8  D008               	goto	i2l5705
 19650  0016EA                     i2l5701:
 19651                           
 19652                           ;doprnt.c: 759: else
 19653                           ;doprnt.c: 760: width = 0;
 19654  0016EA  0E00               	movlw	0
 19655  0016EC  6E29               	movwf	i2printf@width+1,c
 19656  0016EE  0E00               	movlw	0
 19657  0016F0  6E28               	movwf	i2printf@width,c
 19658                           
 19659                           ;doprnt.c: 764: while(width--)
 19660  0016F2  D003               	goto	i2l5705
 19661  0016F4                     i2l5703:
 19662                           
 19663                           ;doprnt.c: 765: (putch(' ') );
 19664  0016F4  0E20               	movlw	32
 19665  0016F6  ECE9  F023         	call	i2_putch
 19666  0016FA                     i2l5705:
 19667  0016FA  0628               	decf	i2printf@width,f,c
 19668  0016FC  A0D8               	btfss	status,0,c
 19669  0016FE  0629               	decf	i2printf@width+1,f,c
 19670  001700  2828               	incf	i2printf@width,w,c
 19671  001702  E1F8               	bnz	i2l5703
 19672  001704  2829               	incf	i2printf@width+1,w,c
 19673  001706  B4D8               	btfsc	status,2,c
 19674  001708  D016               	goto	i2l5711
 19675  00170A  D7F4               	goto	i2l5703
 19676  00170C                     i2l5707:
 19677                           
 19678                           ;doprnt.c: 768: (putch(*cp++) );
 19679  00170C  C01E  FFF6         	movff	i2printf@cp,tblptrl
 19680  001710  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 19681  001714  0E00               	movlw	low (__mediumconst shr (0+16))
 19682  001716  6EF8               	movwf	tblptru,c
 19683  001718  0E0F               	movlw	(high __ramtop+-1)
 19684  00171A  64F7               	cpfsgt	tblptrh,c
 19685  00171C  D003               	bra	i2u426_47
 19686  00171E  0008               	tblrd		*
 19687  001720  50F5               	movf	tablat,w,c
 19688  001722  D005               	bra	i2u426_40
 19689  001724                     i2u426_47:
 19690  001724  CFF6 FFE9          	movff	tblptrl,fsr0l
 19691  001728  CFF7 FFEA          	movff	tblptrh,fsr0h
 19692  00172C  50EF               	movf	indf0,w,c
 19693  00172E                     i2u426_40:
 19694  00172E  ECE9  F023         	call	i2_putch
 19695  001732  4A1E               	infsnz	i2printf@cp,f,c
 19696  001734  2A1F               	incf	i2printf@cp+1,f,c
 19697  001736                     i2l5711:
 19698  001736  0622               	decf	i2printf@len,f,c
 19699  001738  A0D8               	btfss	status,0,c
 19700  00173A  0623               	decf	i2printf@len+1,f,c
 19701  00173C  2822               	incf	i2printf@len,w,c
 19702  00173E  E1E6               	bnz	i2l5707
 19703  001740  2823               	incf	i2printf@len+1,w,c
 19704  001742  B4D8               	btfsc	status,2,c
 19705  001744  D0DA               	goto	i2l5789
 19706  001746  D7E2               	goto	i2l5707
 19707  001748                     i2l5713:
 19708                           
 19709                           ;doprnt.c: 818: flag |= 0x40;
 19710  001748  8C26               	bsf	i2printf@flag,6,c
 19711                           
 19712                           ;doprnt.c: 822: }
 19713                           
 19714                           ;doprnt.c: 819: break;
 19715  00174A  D01B               	goto	i2l1259
 19716  00174C                     i2l5717:
 19717  00174C  C00D  FFF6         	movff	i2printf@f,tblptrl
 19718  001750  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19719  001754  4A0D               	infsnz	i2printf@f,f,c
 19720  001756  2A0E               	incf	i2printf@f+1,f,c
 19721  001758                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19722  001758  6AF8               	clrf	tblptru,c
 19723  00175A                     	endif
 19724  00175A                     	if	0	;tblptru may be non-zero
 19725  00175A                     	endif
 19726  00175A  0008               	tblrd		*
 19727  00175C  CFF5 F027          	movff	tablat,i2printf@c
 19728  001760  5027               	movf	i2printf@c,w,c
 19729                           
 19730                           ; Switch size 1, requested type "space"
 19731                           ; Number of cases is 5, Range of values is 0 to 117
 19732                           ; switch strategies available:
 19733                           ; Name         Instructions Cycles
 19734                           ; simple_byte           16     9 (average)
 19735                           ;	Chosen strategy is simple_byte
 19736  001762  0A00               	xorlw	0	; case 0
 19737  001764  B4D8               	btfsc	status,2,c
 19738  001766  0012               	return	
 19739  001768  0A64               	xorlw	100	; case 100
 19740  00176A  B4D8               	btfsc	status,2,c
 19741  00176C  D00A               	goto	i2l1259
 19742  00176E  0A0D               	xorlw	13	; case 105
 19743  001770  B4D8               	btfsc	status,2,c
 19744  001772  D007               	goto	i2l1259
 19745  001774  0A1A               	xorlw	26	; case 115
 19746  001776  B4D8               	btfsc	status,2,c
 19747  001778  D778               	goto	i2l5683
 19748  00177A  0A06               	xorlw	6	; case 117
 19749  00177C  B4D8               	btfsc	status,2,c
 19750  00177E  D7E4               	goto	i2l5713
 19751  001780  D0BC               	goto	i2l5789
 19752  001782                     i2l1259:
 19753                           
 19754                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 19755  001782  BC26               	btfsc	i2printf@flag,6,c
 19756  001784  D015               	goto	i2l5729
 19757                           
 19758                           ;doprnt.c: 1253: {
 19759                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 19760  001786  C020  FFD9         	movff	i2printf@ap,fsr2l
 19761  00178A  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 19762  00178E  CFDE F024          	movff	postinc2,i2printf@val
 19763  001792  CFDD F025          	movff	postdec2,i2printf@val+1
 19764  001796  0E02               	movlw	2
 19765  001798  2620               	addwf	i2printf@ap,f,c
 19766  00179A  0E00               	movlw	0
 19767  00179C  2221               	addwfc	i2printf@ap+1,f,c
 19768                           
 19769                           ;doprnt.c: 1261: if((int)val < 0) {
 19770  00179E  AE25               	btfss	i2printf@val+1,7,c
 19771  0017A0  D013               	goto	i2l5733
 19772                           
 19773                           ;doprnt.c: 1262: flag |= 0x03;
 19774  0017A2  0E03               	movlw	3
 19775  0017A4  1226               	iorwf	i2printf@flag,f,c
 19776                           
 19777                           ;doprnt.c: 1263: val = -val;
 19778  0017A6  6C24               	negf	i2printf@val,c
 19779  0017A8  1E25               	comf	i2printf@val+1,f,c
 19780  0017AA  B0D8               	btfsc	status,0,c
 19781  0017AC  2A25               	incf	i2printf@val+1,f,c
 19782                           
 19783                           ;doprnt.c: 1264: }
 19784                           ;doprnt.c: 1266: }
 19785  0017AE  D00C               	goto	i2l5733
 19786  0017B0                     i2l5729:
 19787                           
 19788                           ;doprnt.c: 1268: else
 19789                           ;doprnt.c: 1273: {
 19790                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 19791  0017B0  C020  FFD9         	movff	i2printf@ap,fsr2l
 19792  0017B4  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 19793  0017B8  CFDE F024          	movff	postinc2,i2printf@val
 19794  0017BC  CFDD F025          	movff	postdec2,i2printf@val+1
 19795  0017C0  0E02               	movlw	2
 19796  0017C2  2620               	addwf	i2printf@ap,f,c
 19797  0017C4  0E00               	movlw	0
 19798  0017C6  2221               	addwfc	i2printf@ap+1,f,c
 19799  0017C8                     i2l5733:
 19800                           
 19801                           ;doprnt.c: 1287: }
 19802                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 19803  0017C8  0E01               	movlw	1
 19804  0017CA  6E27               	movwf	i2printf@c,c
 19805  0017CC                     i2l5735:
 19806  0017CC  0E05               	movlw	5
 19807  0017CE  1827               	xorwf	i2printf@c,w,c
 19808  0017D0  B4D8               	btfsc	status,2,c
 19809  0017D2  D015               	goto	i2l5747
 19810                           
 19811                           ;doprnt.c: 1306: if(val < dpowers[c])
 19812  0017D4  5027               	movf	i2printf@c,w,c
 19813  0017D6  0D02               	mullw	2
 19814  0017D8  0E36               	movlw	low _dpowers
 19815  0017DA  24F3               	addwf	prodl,w,c
 19816  0017DC  6EF6               	movwf	tblptrl,c
 19817  0017DE  0EFB               	movlw	high _dpowers
 19818  0017E0  20F4               	addwfc	prodh,w,c
 19819  0017E2  6EF7               	movwf	tblptrh,c
 19820  0017E4                     	if	1	;There are 3 active tblptr bytes
 19821  0017E4  6AF8               	clrf	tblptru,c
 19822  0017E6  0E00               	movlw	low (__mediumconst shr (0+16))
 19823  0017E8  22F8               	addwfc	tblptru,f,c
 19824  0017EA                     	endif
 19825  0017EA  0009               	tblrd		*+
 19826  0017EC  50F5               	movf	tablat,w,c
 19827  0017EE  5C24               	subwf	i2printf@val,w,c
 19828  0017F0  0009               	tblrd		*+
 19829  0017F2  50F5               	movf	tablat,w,c
 19830  0017F4  5825               	subwfb	i2printf@val+1,w,c
 19831  0017F6  A0D8               	btfss	status,0,c
 19832  0017F8  D002               	goto	i2l5747
 19833                           
 19834                           ;doprnt.c: 1307: break;
 19835  0017FA  2A27               	incf	i2printf@c,f,c
 19836  0017FC  D7E7               	goto	i2l5735
 19837  0017FE                     i2l5747:
 19838                           
 19839                           ;doprnt.c: 1345: if(width && flag & 0x03)
 19840  0017FE  5028               	movf	i2printf@width,w,c
 19841  001800  1029               	iorwf	i2printf@width+1,w,c
 19842  001802  B4D8               	btfsc	status,2,c
 19843  001804  D009               	goto	i2l5753
 19844  001806  C026  F019         	movff	i2printf@flag,??i2_printf
 19845  00180A  0E03               	movlw	3
 19846  00180C  1619               	andwf	??i2_printf,f,c
 19847  00180E  B4D8               	btfsc	status,2,c
 19848  001810  D003               	goto	i2l5753
 19849                           
 19850                           ;doprnt.c: 1346: width--;
 19851  001812  0628               	decf	i2printf@width,f,c
 19852  001814  A0D8               	btfss	status,0,c
 19853  001816  0629               	decf	i2printf@width+1,f,c
 19854  001818                     i2l5753:
 19855                           
 19856                           ;doprnt.c: 1381: if(width > c)
 19857  001818  0E80               	movlw	128
 19858  00181A  BE27               	btfsc	i2printf@c,7,c
 19859  00181C  0E7F               	movlw	127
 19860  00181E  6E19               	movwf	??i2_printf& (0+255),c
 19861  001820  5028               	movf	i2printf@width,w,c
 19862  001822  5C27               	subwf	i2printf@c,w,c
 19863  001824  5029               	movf	i2printf@width+1,w,c
 19864  001826  0A80               	xorlw	128
 19865  001828  5819               	subwfb	??i2_printf& (0+255),w,c
 19866  00182A  B0D8               	btfsc	status,0,c
 19867  00182C  D007               	goto	i2l5757
 19868                           
 19869                           ;doprnt.c: 1382: width -= c;
 19870  00182E  5027               	movf	i2printf@c,w,c
 19871  001830  5E28               	subwf	i2printf@width,f,c
 19872  001832  0E00               	movlw	0
 19873  001834  BE27               	btfsc	i2printf@c,7,c
 19874  001836  0EFF               	movlw	255
 19875  001838  5A29               	subwfb	i2printf@width+1,f,c
 19876  00183A  D004               	goto	i2l5759
 19877  00183C                     i2l5757:
 19878                           
 19879                           ;doprnt.c: 1383: else
 19880                           ;doprnt.c: 1384: width = 0;
 19881  00183C  0E00               	movlw	0
 19882  00183E  6E29               	movwf	i2printf@width+1,c
 19883  001840  0E00               	movlw	0
 19884  001842  6E28               	movwf	i2printf@width,c
 19885  001844                     i2l5759:
 19886                           
 19887                           ;doprnt.c: 1387: if(flag & 0x04) {
 19888  001844  A426               	btfss	i2printf@flag,2,c
 19889  001846  D014               	goto	i2l5771
 19890                           
 19891                           ;doprnt.c: 1392: if(flag & 0x03)
 19892  001848  C026  F019         	movff	i2printf@flag,??i2_printf
 19893  00184C  0E03               	movlw	3
 19894  00184E  1619               	andwf	??i2_printf,f,c
 19895  001850  B4D8               	btfsc	status,2,c
 19896  001852  D003               	goto	i2l5765
 19897                           
 19898                           ;doprnt.c: 1393: (putch('-') );
 19899  001854  0E2D               	movlw	45
 19900  001856  ECE9  F023         	call	i2_putch
 19901  00185A                     i2l5765:
 19902                           
 19903                           ;doprnt.c: 1415: if(width)
 19904  00185A  5028               	movf	i2printf@width,w,c
 19905  00185C  1029               	iorwf	i2printf@width+1,w,c
 19906  00185E  B4D8               	btfsc	status,2,c
 19907  001860  D01E               	goto	i2l5781
 19908                           
 19909                           ;doprnt.c: 1417: (putch('0') );
 19910                           
 19911                           ;doprnt.c: 1416: do
 19912  001862  0E30               	movlw	48
 19913  001864  ECE9  F023         	call	i2_putch
 19914                           
 19915                           ;doprnt.c: 1418: while(--width);
 19916  001868  0628               	decf	i2printf@width,f,c
 19917  00186A  A0D8               	btfss	status,0,c
 19918  00186C  0629               	decf	i2printf@width+1,f,c
 19919  00186E  D7F5               	goto	i2l5765
 19920  001870                     i2l5771:
 19921                           
 19922                           ;doprnt.c: 1422: {
 19923                           ;doprnt.c: 1424: if(width
 19924                           ;doprnt.c: 1428: )
 19925  001870  5028               	movf	i2printf@width,w,c
 19926  001872  1029               	iorwf	i2printf@width+1,w,c
 19927  001874  B4D8               	btfsc	status,2,c
 19928  001876  D00A               	goto	i2l5777
 19929  001878                     i2l5773:
 19930                           
 19931                           ;doprnt.c: 1430: (putch(' ') );
 19932  001878  0E20               	movlw	32
 19933  00187A  ECE9  F023         	call	i2_putch
 19934                           
 19935                           ;doprnt.c: 1431: while(--width);
 19936  00187E  0628               	decf	i2printf@width,f,c
 19937  001880  A0D8               	btfss	status,0,c
 19938  001882  0629               	decf	i2printf@width+1,f,c
 19939  001884  5028               	movf	i2printf@width,w,c
 19940  001886  1029               	iorwf	i2printf@width+1,w,c
 19941  001888  A4D8               	btfss	status,2,c
 19942  00188A  D7F6               	goto	i2l5773
 19943  00188C                     i2l5777:
 19944                           
 19945                           ;doprnt.c: 1438: if(flag & 0x03)
 19946  00188C  C026  F019         	movff	i2printf@flag,??i2_printf
 19947  001890  0E03               	movlw	3
 19948  001892  1619               	andwf	??i2_printf,f,c
 19949  001894  B4D8               	btfsc	status,2,c
 19950  001896  D003               	goto	i2l5781
 19951                           
 19952                           ;doprnt.c: 1439: (putch('-') );
 19953  001898  0E2D               	movlw	45
 19954  00189A  ECE9  F023         	call	i2_putch
 19955  00189E                     i2l5781:
 19956                           
 19957                           ;doprnt.c: 1469: }
 19958                           ;doprnt.c: 1472: prec = c;
 19959  00189E  C027  F01D         	movff	i2printf@c,i2printf@prec
 19960                           
 19961                           ;doprnt.c: 1474: while(prec--) {
 19962  0018A2  D027               	goto	i2l5787
 19963  0018A4                     i2l5783:
 19964                           
 19965                           ;doprnt.c: 1478: {
 19966                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 19967  0018A4  501D               	movf	i2printf@prec,w,c
 19968  0018A6  0D02               	mullw	2
 19969  0018A8  0E36               	movlw	low _dpowers
 19970  0018AA  24F3               	addwf	prodl,w,c
 19971  0018AC  6EF6               	movwf	tblptrl,c
 19972  0018AE  0EFB               	movlw	high _dpowers
 19973  0018B0  20F4               	addwfc	prodh,w,c
 19974  0018B2  6EF7               	movwf	tblptrh,c
 19975  0018B4                     	if	1	;There are 3 active tblptr bytes
 19976  0018B4  6AF8               	clrf	tblptru,c
 19977  0018B6  0E00               	movlw	low (__mediumconst shr (0+16))
 19978  0018B8  22F8               	addwfc	tblptru,f,c
 19979  0018BA                     	endif
 19980  0018BA  0009               	tblrd		*+
 19981  0018BC  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 19982  0018C0  000A               	tblrd		*-
 19983  0018C2  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 19984  0018C6  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 19985  0018CA  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 19986  0018CE  EC35  F020         	call	i2___lwdiv	;wreg free
 19987  0018D2  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 19988  0018D6  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 19989  0018DA  0E00               	movlw	0
 19990  0018DC  6E04               	movwf	i2___lwmod@divisor+1,c
 19991  0018DE  0E0A               	movlw	10
 19992  0018E0  6E03               	movwf	i2___lwmod@divisor,c
 19993  0018E2  ECF4  F020         	call	i2___lwmod	;wreg free
 19994  0018E6  5001               	movf	?i2___lwmod,w,c
 19995  0018E8  0F30               	addlw	48
 19996  0018EA  6E27               	movwf	i2printf@c,c
 19997                           
 19998                           ;doprnt.c: 1523: }
 19999                           ;doprnt.c: 1524: (putch(c) );
 20000  0018EC  5027               	movf	i2printf@c,w,c
 20001  0018EE  ECE9  F023         	call	i2_putch
 20002  0018F2                     i2l5787:
 20003  0018F2  061D               	decf	i2printf@prec,f,c
 20004  0018F4  281D               	incf	i2printf@prec,w,c
 20005  0018F6  A4D8               	btfss	status,2,c
 20006  0018F8  D7D5               	goto	i2l5783
 20007  0018FA                     i2l5789:
 20008  0018FA  C00D  FFF6         	movff	i2printf@f,tblptrl
 20009  0018FE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 20010  001902  4A0D               	infsnz	i2printf@f,f,c
 20011  001904  2A0E               	incf	i2printf@f+1,f,c
 20012  001906                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20013  001906  6AF8               	clrf	tblptru,c
 20014  001908                     	endif
 20015  001908                     	if	0	;tblptru may be non-zero
 20016  001908                     	endif
 20017  001908  0008               	tblrd		*
 20018  00190A  CFF5 F027          	movff	tablat,i2printf@c
 20019  00190E  5027               	movf	i2printf@c,w,c
 20020  001910  B4D8               	btfsc	status,2,c
 20021  001912  0012               	return	
 20022  001914  D64E               	goto	i2l5659
 20023  001916                     __end_ofi2_printf:
 20024                           	opt stack 0
 20025                           pclatu	equ	0xFFB
 20026                           pclath	equ	0xFFA
 20027                           tblptru	equ	0xFF8
 20028                           tblptrh	equ	0xFF7
 20029                           tblptrl	equ	0xFF6
 20030                           tablat	equ	0xFF5
 20031                           prodh	equ	0xFF4
 20032                           prodl	equ	0xFF3
 20033                           intcon	equ	0xFF2
 20034                           intcon2	equ	0xFF1
 20035                           intcon3	equ	0xFF0
 20036                           indf0	equ	0xFEF
 20037                           postinc0	equ	0xFEE
 20038                           fsr0h	equ	0xFEA
 20039                           fsr0l	equ	0xFE9
 20040                           wreg	equ	0xFE8
 20041                           postdec1	equ	0xFE5
 20042                           fsr1h	equ	0xFE2
 20043                           fsr1l	equ	0xFE1
 20044                           indf2	equ	0xFDF
 20045                           postinc2	equ	0xFDE
 20046                           postdec2	equ	0xFDD
 20047                           fsr2h	equ	0xFDA
 20048                           fsr2l	equ	0xFD9
 20049                           status	equ	0xFD8
 20050                           
 20051 ;; *************** function i2_putch *****************
 20052 ;; Defined at:
 20053 ;;		line 20 in file "lcd.c"
 20054 ;; Parameters:    Size  Location     Type
 20055 ;;  data            1    wreg     unsigned char 
 20056 ;; Auto vars:     Size  Location     Type
 20057 ;;  data            1    2[COMRAM] unsigned char 
 20058 ;; Return value:  Size  Location     Type
 20059 ;;                  1    wreg      void 
 20060 ;; Registers used:
 20061 ;;		wreg, status,2, status,0, cstack
 20062 ;; Tracked objects:
 20063 ;;		On entry : 0/0
 20064 ;;		On exit  : 0/0
 20065 ;;		Unchanged: 0/0
 20066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20068 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20070 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20071 ;;Total ram usage:        1 bytes
 20072 ;; Hardware stack levels used:    1
 20073 ;; Hardware stack levels required when called:    1
 20074 ;; This function calls:
 20075 ;;		i2_lcdNibble
 20076 ;; This function is called by:
 20077 ;;		i2_printf
 20078 ;; This function uses a non-reentrant model
 20079 ;;
 20080                           
 20081                           	psect	text79
 20082  0047D2                     __ptext79:
 20083                           	opt stack 0
 20084  0047D2                     i2_putch:
 20085                           	opt stack 19
 20086                           
 20087                           ;incstack = 0
 20088                           ;i2putch@data stored from wreg
 20089  0047D2  6E03               	movwf	i2putch@data,c
 20090                           
 20091                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 20092  0047D4  848C               	bsf	3980,2,c	;volatile
 20093                           
 20094                           ;lcd.c: 22: lcdNibble(data);
 20095  0047D6  5003               	movf	i2putch@data,w,c
 20096  0047D8  ECE0  F01F         	call	i2_lcdNibble
 20097  0047DC  0012               	return		;funcret
 20098  0047DE                     __end_ofi2_putch:
 20099                           	opt stack 0
 20100                           pclatu	equ	0xFFB
 20101                           pclath	equ	0xFFA
 20102                           tblptru	equ	0xFF8
 20103                           tblptrh	equ	0xFF7
 20104                           tblptrl	equ	0xFF6
 20105                           tablat	equ	0xFF5
 20106                           prodh	equ	0xFF4
 20107                           prodl	equ	0xFF3
 20108                           intcon	equ	0xFF2
 20109                           intcon2	equ	0xFF1
 20110                           intcon3	equ	0xFF0
 20111                           indf0	equ	0xFEF
 20112                           postinc0	equ	0xFEE
 20113                           fsr0h	equ	0xFEA
 20114                           fsr0l	equ	0xFE9
 20115                           wreg	equ	0xFE8
 20116                           postdec1	equ	0xFE5
 20117                           fsr1h	equ	0xFE2
 20118                           fsr1l	equ	0xFE1
 20119                           indf2	equ	0xFDF
 20120                           postinc2	equ	0xFDE
 20121                           postdec2	equ	0xFDD
 20122                           fsr2h	equ	0xFDA
 20123                           fsr2l	equ	0xFD9
 20124                           status	equ	0xFD8
 20125                           
 20126 ;; *************** function i2_isdigit *****************
 20127 ;; Defined at:
 20128 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 20129 ;; Parameters:    Size  Location     Type
 20130 ;;  c               1    wreg     unsigned char 
 20131 ;; Auto vars:     Size  Location     Type
 20132 ;;  c               1    2[COMRAM] unsigned char 
 20133 ;; Return value:  Size  Location     Type
 20134 ;;		None               void
 20135 ;; Registers used:
 20136 ;;		wreg, status,2, status,0
 20137 ;; Tracked objects:
 20138 ;;		On entry : 0/0
 20139 ;;		On exit  : 0/0
 20140 ;;		Unchanged: 0/0
 20141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20143 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20144 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20145 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20146 ;;Total ram usage:        3 bytes
 20147 ;; Hardware stack levels used:    1
 20148 ;; This function calls:
 20149 ;;		Nothing
 20150 ;; This function is called by:
 20151 ;;		i2_printf
 20152 ;; This function uses a non-reentrant model
 20153 ;;
 20154                           
 20155                           	psect	text80
 20156  00472A                     __ptext80:
 20157                           	opt stack 0
 20158  00472A                     i2_isdigit:
 20159                           	opt stack 20
 20160                           
 20161                           ;incstack = 0
 20162                           ;i2isdigit@c stored from wreg
 20163  00472A  6E03               	movwf	i2isdigit@c,c
 20164  00472C  0E00               	movlw	0
 20165  00472E  6E02               	movwf	i2_isdigit$1942,c
 20166  004730  0E3A               	movlw	58
 20167  004732  6003               	cpfslt	i2isdigit@c,c
 20168  004734  D005               	goto	i2l5363
 20169  004736  0E2F               	movlw	47
 20170  004738  6403               	cpfsgt	i2isdigit@c,c
 20171  00473A  D002               	goto	i2l5363
 20172  00473C  0E01               	movlw	1
 20173  00473E  6E02               	movwf	i2_isdigit$1942,c
 20174  004740                     i2l5363:
 20175  004740  C002  F001         	movff	i2_isdigit$1942,??i2_isdigit
 20176  004744  3001               	rrcf	??i2_isdigit,w,c
 20177  004746  0012               	return	
 20178  004748                     __end_ofi2_isdigit:
 20179                           	opt stack 0
 20180                           pclatu	equ	0xFFB
 20181                           pclath	equ	0xFFA
 20182                           tblptru	equ	0xFF8
 20183                           tblptrh	equ	0xFF7
 20184                           tblptrl	equ	0xFF6
 20185                           tablat	equ	0xFF5
 20186                           prodh	equ	0xFF4
 20187                           prodl	equ	0xFF3
 20188                           intcon	equ	0xFF2
 20189                           intcon2	equ	0xFF1
 20190                           intcon3	equ	0xFF0
 20191                           indf0	equ	0xFEF
 20192                           postinc0	equ	0xFEE
 20193                           fsr0h	equ	0xFEA
 20194                           fsr0l	equ	0xFE9
 20195                           wreg	equ	0xFE8
 20196                           postdec1	equ	0xFE5
 20197                           fsr1h	equ	0xFE2
 20198                           fsr1l	equ	0xFE1
 20199                           indf2	equ	0xFDF
 20200                           postinc2	equ	0xFDE
 20201                           postdec2	equ	0xFDD
 20202                           fsr2h	equ	0xFDA
 20203                           fsr2l	equ	0xFD9
 20204                           status	equ	0xFD8
 20205                           
 20206 ;; *************** function i2___wmul *****************
 20207 ;; Defined at:
 20208 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 20209 ;; Parameters:    Size  Location     Type
 20210 ;;  multiplier      2    0[COMRAM] unsigned int 
 20211 ;;  multiplicand    2    2[COMRAM] unsigned int 
 20212 ;; Auto vars:     Size  Location     Type
 20213 ;;  __wmul          2    4[COMRAM] unsigned int 
 20214 ;; Return value:  Size  Location     Type
 20215 ;;                  2    0[COMRAM] unsigned int 
 20216 ;; Registers used:
 20217 ;;		wreg, status,2, status,0, prodl, prodh
 20218 ;; Tracked objects:
 20219 ;;		On entry : 0/0
 20220 ;;		On exit  : 0/0
 20221 ;;		Unchanged: 0/0
 20222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20223 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20224 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20226 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20227 ;;Total ram usage:        6 bytes
 20228 ;; Hardware stack levels used:    1
 20229 ;; This function calls:
 20230 ;;		Nothing
 20231 ;; This function is called by:
 20232 ;;		_printSortTimer
 20233 ;;		_retrieveLog
 20234 ;;		i2_printf
 20235 ;; This function uses a non-reentrant model
 20236 ;;
 20237                           
 20238                           	psect	text81
 20239  004676                     __ptext81:
 20240                           	opt stack 0
 20241  004676                     i2___wmul:
 20242                           	opt stack 20
 20243                           
 20244                           ;incstack = 0
 20245  004676  5001               	movf	i2___wmul@multiplier,w,c
 20246  004678  0203               	mulwf	i2___wmul@multiplicand,c
 20247  00467A  CFF3 F005          	movff	prodl,i2___wmul@product
 20248  00467E  CFF4 F006          	movff	prodh,i2___wmul@product+1
 20249  004682  5001               	movf	i2___wmul@multiplier,w,c
 20250  004684  0204               	mulwf	i2___wmul@multiplicand+1,c
 20251  004686  50F3               	movf	prodl,w,c
 20252  004688  2606               	addwf	i2___wmul@product+1,f,c
 20253  00468A  5002               	movf	i2___wmul@multiplier+1,w,c
 20254  00468C  0203               	mulwf	i2___wmul@multiplicand,c
 20255  00468E  50F3               	movf	prodl,w,c
 20256  004690  2606               	addwf	i2___wmul@product+1,f,c
 20257  004692  C005  F001         	movff	i2___wmul@product,?i2___wmul
 20258  004696  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 20259  00469A  0012               	return	
 20260  00469C                     __end_ofi2___wmul:
 20261                           	opt stack 0
 20262                           pclatu	equ	0xFFB
 20263                           pclath	equ	0xFFA
 20264                           tblptru	equ	0xFF8
 20265                           tblptrh	equ	0xFF7
 20266                           tblptrl	equ	0xFF6
 20267                           tablat	equ	0xFF5
 20268                           prodh	equ	0xFF4
 20269                           prodl	equ	0xFF3
 20270                           intcon	equ	0xFF2
 20271                           intcon2	equ	0xFF1
 20272                           intcon3	equ	0xFF0
 20273                           indf0	equ	0xFEF
 20274                           postinc0	equ	0xFEE
 20275                           fsr0h	equ	0xFEA
 20276                           fsr0l	equ	0xFE9
 20277                           wreg	equ	0xFE8
 20278                           postdec1	equ	0xFE5
 20279                           fsr1h	equ	0xFE2
 20280                           fsr1l	equ	0xFE1
 20281                           indf2	equ	0xFDF
 20282                           postinc2	equ	0xFDE
 20283                           postdec2	equ	0xFDD
 20284                           fsr2h	equ	0xFDA
 20285                           fsr2l	equ	0xFD9
 20286                           status	equ	0xFD8
 20287                           
 20288 ;; *************** function i2___lwmod *****************
 20289 ;; Defined at:
 20290 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 20291 ;; Parameters:    Size  Location     Type
 20292 ;;  dividend        2    0[COMRAM] unsigned int 
 20293 ;;  divisor         2    2[COMRAM] unsigned int 
 20294 ;; Auto vars:     Size  Location     Type
 20295 ;;  __lwmod         1    4[COMRAM] unsigned char 
 20296 ;; Return value:  Size  Location     Type
 20297 ;;                  2    0[COMRAM] unsigned int 
 20298 ;; Registers used:
 20299 ;;		wreg, status,2, status,0
 20300 ;; Tracked objects:
 20301 ;;		On entry : 0/0
 20302 ;;		On exit  : 0/0
 20303 ;;		Unchanged: 0/0
 20304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20305 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20306 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20308 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20309 ;;Total ram usage:        5 bytes
 20310 ;; Hardware stack levels used:    1
 20311 ;; This function calls:
 20312 ;;		Nothing
 20313 ;; This function is called by:
 20314 ;;		_printSortTimer
 20315 ;;		i2_printf
 20316 ;; This function uses a non-reentrant model
 20317 ;;
 20318                           
 20319                           	psect	text82
 20320  0041E8                     __ptext82:
 20321                           	opt stack 0
 20322  0041E8                     i2___lwmod:
 20323                           	opt stack 20
 20324                           
 20325                           ;incstack = 0
 20326  0041E8  5003               	movf	i2___lwmod@divisor,w,c
 20327  0041EA  1004               	iorwf	i2___lwmod@divisor+1,w,c
 20328  0041EC  B4D8               	btfsc	status,2,c
 20329  0041EE  D018               	goto	i2l1716
 20330  0041F0  0E01               	movlw	1
 20331  0041F2  6E05               	movwf	i2___lwmod@counter,c
 20332  0041F4  D004               	goto	i2l5395
 20333  0041F6                     i2l5393:
 20334  0041F6  90D8               	bcf	status,0,c
 20335  0041F8  3603               	rlcf	i2___lwmod@divisor,f,c
 20336  0041FA  3604               	rlcf	i2___lwmod@divisor+1,f,c
 20337  0041FC  2A05               	incf	i2___lwmod@counter,f,c
 20338  0041FE                     i2l5395:
 20339  0041FE  AE04               	btfss	i2___lwmod@divisor+1,7,c
 20340  004200  D7FA               	goto	i2l5393
 20341  004202                     i2l5397:
 20342  004202  5003               	movf	i2___lwmod@divisor,w,c
 20343  004204  5C01               	subwf	i2___lwmod@dividend,w,c
 20344  004206  5004               	movf	i2___lwmod@divisor+1,w,c
 20345  004208  5802               	subwfb	i2___lwmod@dividend+1,w,c
 20346  00420A  A0D8               	btfss	status,0,c
 20347  00420C  D004               	goto	i2l5401
 20348  00420E  5003               	movf	i2___lwmod@divisor,w,c
 20349  004210  5E01               	subwf	i2___lwmod@dividend,f,c
 20350  004212  5004               	movf	i2___lwmod@divisor+1,w,c
 20351  004214  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 20352  004216                     i2l5401:
 20353  004216  90D8               	bcf	status,0,c
 20354  004218  3204               	rrcf	i2___lwmod@divisor+1,f,c
 20355  00421A  3203               	rrcf	i2___lwmod@divisor,f,c
 20356  00421C  2E05               	decfsz	i2___lwmod@counter,f,c
 20357  00421E  D7F1               	goto	i2l5397
 20358  004220                     i2l1716:
 20359  004220  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 20360  004224  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 20361  004228  0012               	return		;funcret
 20362  00422A                     __end_ofi2___lwmod:
 20363                           	opt stack 0
 20364                           pclatu	equ	0xFFB
 20365                           pclath	equ	0xFFA
 20366                           tblptru	equ	0xFF8
 20367                           tblptrh	equ	0xFF7
 20368                           tblptrl	equ	0xFF6
 20369                           tablat	equ	0xFF5
 20370                           prodh	equ	0xFF4
 20371                           prodl	equ	0xFF3
 20372                           intcon	equ	0xFF2
 20373                           intcon2	equ	0xFF1
 20374                           intcon3	equ	0xFF0
 20375                           indf0	equ	0xFEF
 20376                           postinc0	equ	0xFEE
 20377                           fsr0h	equ	0xFEA
 20378                           fsr0l	equ	0xFE9
 20379                           wreg	equ	0xFE8
 20380                           postdec1	equ	0xFE5
 20381                           fsr1h	equ	0xFE2
 20382                           fsr1l	equ	0xFE1
 20383                           indf2	equ	0xFDF
 20384                           postinc2	equ	0xFDE
 20385                           postdec2	equ	0xFDD
 20386                           fsr2h	equ	0xFDA
 20387                           fsr2l	equ	0xFD9
 20388                           status	equ	0xFD8
 20389                           
 20390 ;; *************** function i2___lwdiv *****************
 20391 ;; Defined at:
 20392 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 20393 ;; Parameters:    Size  Location     Type
 20394 ;;  dividend        2    5[COMRAM] unsigned int 
 20395 ;;  divisor         2    7[COMRAM] unsigned int 
 20396 ;; Auto vars:     Size  Location     Type
 20397 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 20398 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 20399 ;; Return value:  Size  Location     Type
 20400 ;;                  2    5[COMRAM] unsigned int 
 20401 ;; Registers used:
 20402 ;;		wreg, status,2, status,0
 20403 ;; Tracked objects:
 20404 ;;		On entry : 0/0
 20405 ;;		On exit  : 0/0
 20406 ;;		Unchanged: 0/0
 20407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20408 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20409 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20411 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20412 ;;Total ram usage:        7 bytes
 20413 ;; Hardware stack levels used:    1
 20414 ;; This function calls:
 20415 ;;		Nothing
 20416 ;; This function is called by:
 20417 ;;		_printSortTimer
 20418 ;;		i2_printf
 20419 ;; This function uses a non-reentrant model
 20420 ;;
 20421                           
 20422                           	psect	text83
 20423  00406A                     __ptext83:
 20424                           	opt stack 0
 20425  00406A                     i2___lwdiv:
 20426                           	opt stack 20
 20427                           
 20428                           ;incstack = 0
 20429  00406A  0E00               	movlw	0
 20430  00406C  6E0B               	movwf	i2___lwdiv@quotient+1,c
 20431  00406E  0E00               	movlw	0
 20432  004070  6E0A               	movwf	i2___lwdiv@quotient,c
 20433  004072  5008               	movf	i2___lwdiv@divisor,w,c
 20434  004074  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 20435  004076  B4D8               	btfsc	status,2,c
 20436  004078  D01C               	goto	i2l1706
 20437  00407A  0E01               	movlw	1
 20438  00407C  6E0C               	movwf	i2___lwdiv@counter,c
 20439  00407E  D004               	goto	i2l5375
 20440  004080                     i2l5373:
 20441  004080  90D8               	bcf	status,0,c
 20442  004082  3608               	rlcf	i2___lwdiv@divisor,f,c
 20443  004084  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 20444  004086  2A0C               	incf	i2___lwdiv@counter,f,c
 20445  004088                     i2l5375:
 20446  004088  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 20447  00408A  D7FA               	goto	i2l5373
 20448  00408C                     i2l5377:
 20449  00408C  90D8               	bcf	status,0,c
 20450  00408E  360A               	rlcf	i2___lwdiv@quotient,f,c
 20451  004090  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 20452  004092  5008               	movf	i2___lwdiv@divisor,w,c
 20453  004094  5C06               	subwf	i2___lwdiv@dividend,w,c
 20454  004096  5009               	movf	i2___lwdiv@divisor+1,w,c
 20455  004098  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 20456  00409A  A0D8               	btfss	status,0,c
 20457  00409C  D005               	goto	i2l5385
 20458  00409E  5008               	movf	i2___lwdiv@divisor,w,c
 20459  0040A0  5E06               	subwf	i2___lwdiv@dividend,f,c
 20460  0040A2  5009               	movf	i2___lwdiv@divisor+1,w,c
 20461  0040A4  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 20462  0040A6  800A               	bsf	i2___lwdiv@quotient,0,c
 20463  0040A8                     i2l5385:
 20464  0040A8  90D8               	bcf	status,0,c
 20465  0040AA  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 20466  0040AC  3208               	rrcf	i2___lwdiv@divisor,f,c
 20467  0040AE  2E0C               	decfsz	i2___lwdiv@counter,f,c
 20468  0040B0  D7ED               	goto	i2l5377
 20469  0040B2                     i2l1706:
 20470  0040B2  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 20471  0040B6  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 20472  0040BA  0012               	return		;funcret
 20473  0040BC                     __end_ofi2___lwdiv:
 20474                           	opt stack 0
 20475                           pclatu	equ	0xFFB
 20476                           pclath	equ	0xFFA
 20477                           tblptru	equ	0xFF8
 20478                           tblptrh	equ	0xFF7
 20479                           tblptrl	equ	0xFF6
 20480                           tablat	equ	0xFF5
 20481                           prodh	equ	0xFF4
 20482                           prodl	equ	0xFF3
 20483                           intcon	equ	0xFF2
 20484                           intcon2	equ	0xFF1
 20485                           intcon3	equ	0xFF0
 20486                           indf0	equ	0xFEF
 20487                           postinc0	equ	0xFEE
 20488                           fsr0h	equ	0xFEA
 20489                           fsr0l	equ	0xFE9
 20490                           wreg	equ	0xFE8
 20491                           postdec1	equ	0xFE5
 20492                           fsr1h	equ	0xFE2
 20493                           fsr1l	equ	0xFE1
 20494                           indf2	equ	0xFDF
 20495                           postinc2	equ	0xFDE
 20496                           postdec2	equ	0xFDD
 20497                           fsr2h	equ	0xFDA
 20498                           fsr2l	equ	0xFD9
 20499                           status	equ	0xFD8
 20500                           
 20501 ;; *************** function i2_lcdInst *****************
 20502 ;; Defined at:
 20503 ;;		line 15 in file "lcd.c"
 20504 ;; Parameters:    Size  Location     Type
 20505 ;;  data            1    wreg     unsigned char 
 20506 ;; Auto vars:     Size  Location     Type
 20507 ;;  data            1    2[COMRAM] unsigned char 
 20508 ;; Return value:  Size  Location     Type
 20509 ;;                  1    wreg      void 
 20510 ;; Registers used:
 20511 ;;		wreg, status,2, status,0, cstack
 20512 ;; Tracked objects:
 20513 ;;		On entry : 0/0
 20514 ;;		On exit  : 0/0
 20515 ;;		Unchanged: 0/0
 20516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20518 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20520 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20521 ;;Total ram usage:        1 bytes
 20522 ;; Hardware stack levels used:    1
 20523 ;; Hardware stack levels required when called:    1
 20524 ;; This function calls:
 20525 ;;		i2_lcdNibble
 20526 ;; This function is called by:
 20527 ;;		_change_state_to_menu_11
 20528 ;;		_change_state_to_menu_23
 20529 ;;		_change_state_to_logs_11
 20530 ;;		_change_state_to_logs_12
 20531 ;;		_change_state_to_logs_22
 20532 ;;		_change_state_to_logs_23
 20533 ;;		_change_state_to_logs_33
 20534 ;;		_change_state_to_logs_34
 20535 ;;		_printSortTimer
 20536 ;;		i2_change_state_to_menu_start
 20537 ;;		i2_change_state_to_menu_12
 20538 ;;		i2_change_state_to_menu_22
 20539 ;;		i2_printRTC
 20540 ;; This function uses a non-reentrant model
 20541 ;;
 20542                           
 20543                           	psect	text84
 20544  0047DE                     __ptext84:
 20545                           	opt stack 0
 20546  0047DE                     i2_lcdInst:
 20547                           	opt stack 19
 20548                           
 20549                           ;incstack = 0
 20550                           ;i2lcdInst@data stored from wreg
 20551  0047DE  6E03               	movwf	i2lcdInst@data,c
 20552                           
 20553                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 20554  0047E0  948C               	bcf	3980,2,c	;volatile
 20555                           
 20556                           ;lcd.c: 17: lcdNibble(data);
 20557  0047E2  5003               	movf	i2lcdInst@data,w,c
 20558  0047E4  ECE0  F01F         	call	i2_lcdNibble
 20559  0047E8  0012               	return		;funcret
 20560  0047EA                     __end_ofi2_lcdInst:
 20561                           	opt stack 0
 20562                           pclatu	equ	0xFFB
 20563                           pclath	equ	0xFFA
 20564                           tblptru	equ	0xFF8
 20565                           tblptrh	equ	0xFF7
 20566                           tblptrl	equ	0xFF6
 20567                           tablat	equ	0xFF5
 20568                           prodh	equ	0xFF4
 20569                           prodl	equ	0xFF3
 20570                           intcon	equ	0xFF2
 20571                           intcon2	equ	0xFF1
 20572                           intcon3	equ	0xFF0
 20573                           indf0	equ	0xFEF
 20574                           postinc0	equ	0xFEE
 20575                           fsr0h	equ	0xFEA
 20576                           fsr0l	equ	0xFE9
 20577                           wreg	equ	0xFE8
 20578                           postdec1	equ	0xFE5
 20579                           fsr1h	equ	0xFE2
 20580                           fsr1l	equ	0xFE1
 20581                           indf2	equ	0xFDF
 20582                           postinc2	equ	0xFDE
 20583                           postdec2	equ	0xFDD
 20584                           fsr2h	equ	0xFDA
 20585                           fsr2l	equ	0xFD9
 20586                           status	equ	0xFD8
 20587                           
 20588 ;; *************** function i2_lcdNibble *****************
 20589 ;; Defined at:
 20590 ;;		line 25 in file "lcd.c"
 20591 ;; Parameters:    Size  Location     Type
 20592 ;;  data            1    wreg     unsigned char 
 20593 ;; Auto vars:     Size  Location     Type
 20594 ;;  data            1    1[COMRAM] unsigned char 
 20595 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 20596 ;; Return value:  Size  Location     Type
 20597 ;;                  1    wreg      void 
 20598 ;; Registers used:
 20599 ;;		wreg, status,2, status,0
 20600 ;; Tracked objects:
 20601 ;;		On entry : 0/0
 20602 ;;		On exit  : 0/0
 20603 ;;		Unchanged: 0/0
 20604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20606 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20608 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20609 ;;Total ram usage:        2 bytes
 20610 ;; Hardware stack levels used:    1
 20611 ;; This function calls:
 20612 ;;		Nothing
 20613 ;; This function is called by:
 20614 ;;		i2_lcdInst
 20615 ;;		i2_putch
 20616 ;; This function uses a non-reentrant model
 20617 ;;
 20618                           
 20619                           	psect	text85
 20620  003FC0                     __ptext85:
 20621                           	opt stack 0
 20622  003FC0                     i2_lcdNibble:
 20623                           	opt stack 19
 20624                           
 20625                           ;incstack = 0
 20626                           ;i2lcdNibble@data stored from wreg
 20627  003FC0  6E02               	movwf	i2lcdNibble@data,c
 20628                           
 20629                           ;lcd.c: 27: char temp = data & 0xF0;
 20630  003FC2  5002               	movf	i2lcdNibble@data,w,c
 20631  003FC4  0BF0               	andlw	240
 20632  003FC6  6E01               	movwf	i2lcdNibble@temp,c
 20633                           
 20634                           ;lcd.c: 28: LATD = LATD & 0x0F;
 20635  003FC8  508C               	movf	3980,w,c	;volatile
 20636  003FCA  0B0F               	andlw	15
 20637  003FCC  6E8C               	movwf	3980,c	;volatile
 20638                           
 20639                           ;lcd.c: 29: LATD = temp | LATD;
 20640  003FCE  5001               	movf	i2lcdNibble@temp,w,c
 20641  003FD0  108C               	iorwf	3980,w,c	;volatile
 20642  003FD2  6E8C               	movwf	3980,c	;volatile
 20643                           
 20644                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 20645  003FD4  868C               	bsf	3980,3,c	;volatile
 20646                           
 20647                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20648  003FD6  0E42               	movlw	66
 20649  003FD8                     i2u826_47:
 20650  003FD8  2EE8               	decfsz	wreg,f,c
 20651  003FDA  D7FE               	bra	i2u826_47
 20652  003FDC  D000               	nop2	
 20653                           
 20654                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 20655  003FDE  968C               	bcf	3980,3,c	;volatile
 20656                           
 20657                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20658  003FE0  0E42               	movlw	66
 20659  003FE2                     i2u827_47:
 20660  003FE2  2EE8               	decfsz	wreg,f,c
 20661  003FE4  D7FE               	bra	i2u827_47
 20662  003FE6  D000               	nop2	
 20663                           
 20664                           ;lcd.c: 36: data = data << 4;
 20665  003FE8  3802               	swapf	i2lcdNibble@data,w,c
 20666  003FEA  0BF0               	andlw	240
 20667  003FEC  6E02               	movwf	i2lcdNibble@data,c
 20668                           
 20669                           ;lcd.c: 38: temp = data & 0xF0;
 20670  003FEE  5002               	movf	i2lcdNibble@data,w,c
 20671  003FF0  0BF0               	andlw	240
 20672  003FF2  6E01               	movwf	i2lcdNibble@temp,c
 20673                           
 20674                           ;lcd.c: 39: LATD = LATD & 0x0F;
 20675  003FF4  508C               	movf	3980,w,c	;volatile
 20676  003FF6  0B0F               	andlw	15
 20677  003FF8  6E8C               	movwf	3980,c	;volatile
 20678                           
 20679                           ;lcd.c: 40: LATD = temp | LATD;
 20680  003FFA  5001               	movf	i2lcdNibble@temp,w,c
 20681  003FFC  108C               	iorwf	3980,w,c	;volatile
 20682  003FFE  6E8C               	movwf	3980,c	;volatile
 20683                           
 20684                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 20685  004000  868C               	bsf	3980,3,c	;volatile
 20686                           
 20687                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20688  004002  0E42               	movlw	66
 20689  004004                     i2u828_47:
 20690  004004  2EE8               	decfsz	wreg,f,c
 20691  004006  D7FE               	bra	i2u828_47
 20692  004008  D000               	nop2	
 20693                           
 20694                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 20695  00400A  968C               	bcf	3980,3,c	;volatile
 20696                           
 20697                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20698  00400C  0E42               	movlw	66
 20699  00400E                     i2u829_47:
 20700  00400E  2EE8               	decfsz	wreg,f,c
 20701  004010  D7FE               	bra	i2u829_47
 20702  004012  D000               	nop2	
 20703  004014  0012               	return		;funcret
 20704  004016                     __end_ofi2_lcdNibble:
 20705                           	opt stack 0
 20706                           pclatu	equ	0xFFB
 20707                           pclath	equ	0xFFA
 20708                           tblptru	equ	0xFF8
 20709                           tblptrh	equ	0xFF7
 20710                           tblptrl	equ	0xFF6
 20711                           tablat	equ	0xFF5
 20712                           prodh	equ	0xFF4
 20713                           prodl	equ	0xFF3
 20714                           intcon	equ	0xFF2
 20715                           intcon2	equ	0xFF1
 20716                           intcon3	equ	0xFF0
 20717                           indf0	equ	0xFEF
 20718                           postinc0	equ	0xFEE
 20719                           fsr0h	equ	0xFEA
 20720                           fsr0l	equ	0xFE9
 20721                           wreg	equ	0xFE8
 20722                           postdec1	equ	0xFE5
 20723                           fsr1h	equ	0xFE2
 20724                           fsr1l	equ	0xFE1
 20725                           indf2	equ	0xFDF
 20726                           postinc2	equ	0xFDE
 20727                           postdec2	equ	0xFDD
 20728                           fsr2h	equ	0xFDA
 20729                           fsr2l	equ	0xFD9
 20730                           status	equ	0xFD8
 20731                           
 20732 ;; *************** function i2_getRTC *****************
 20733 ;; Defined at:
 20734 ;;		line 44 in file "RTC.c"
 20735 ;; Parameters:    Size  Location     Type
 20736 ;;		None
 20737 ;; Auto vars:     Size  Location     Type
 20738 ;;  getRTC          2    3[COMRAM] int 
 20739 ;; Return value:  Size  Location     Type
 20740 ;;                  1    wreg      void 
 20741 ;; Registers used:
 20742 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20743 ;; Tracked objects:
 20744 ;;		On entry : 0/0
 20745 ;;		On exit  : 0/0
 20746 ;;		Unchanged: 0/0
 20747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20749 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20751 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20752 ;;Total ram usage:        2 bytes
 20753 ;; Hardware stack levels used:    1
 20754 ;; Hardware stack levels required when called:    2
 20755 ;; This function calls:
 20756 ;;		i2_I2C_Master_Read
 20757 ;;		i2_I2C_Master_Start
 20758 ;;		i2_I2C_Master_Stop
 20759 ;;		i2_I2C_Master_Write
 20760 ;; This function is called by:
 20761 ;;		_printSortTimer
 20762 ;;		i2_printRTC
 20763 ;; This function uses a non-reentrant model
 20764 ;;
 20765                           
 20766                           	psect	text86
 20767  003CB0                     __ptext86:
 20768                           	opt stack 0
 20769  003CB0                     i2_getRTC:
 20770                           	opt stack 18
 20771                           
 20772                           ;RTC.c: 48: I2C_Master_Start();
 20773                           
 20774                           ;incstack = 0
 20775  003CB0  EC0F  F024         	call	i2_I2C_Master_Start	;wreg free
 20776                           
 20777                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 20778  003CB4  0E00               	movlw	0
 20779  003CB6  6E03               	movwf	i2I2C_Master_Write@d+1,c
 20780  003CB8  0ED0               	movlw	208
 20781  003CBA  6E02               	movwf	i2I2C_Master_Write@d,c
 20782  003CBC  ECFA  F023         	call	i2_I2C_Master_Write	;wreg free
 20783                           
 20784                           ;RTC.c: 50: I2C_Master_Write(0x00);
 20785  003CC0  0E00               	movlw	0
 20786  003CC2  6E03               	movwf	i2I2C_Master_Write@d+1,c
 20787  003CC4  0E00               	movlw	0
 20788  003CC6  6E02               	movwf	i2I2C_Master_Write@d,c
 20789  003CC8  ECFA  F023         	call	i2_I2C_Master_Write	;wreg free
 20790                           
 20791                           ;RTC.c: 51: I2C_Master_Stop();
 20792  003CCC  EC0B  F024         	call	i2_I2C_Master_Stop	;wreg free
 20793                           
 20794                           ;RTC.c: 54: I2C_Master_Start();
 20795  003CD0  EC0F  F024         	call	i2_I2C_Master_Start	;wreg free
 20796                           
 20797                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 20798  003CD4  0E00               	movlw	0
 20799  003CD6  6E03               	movwf	i2I2C_Master_Write@d+1,c
 20800  003CD8  0ED1               	movlw	209
 20801  003CDA  6E02               	movwf	i2I2C_Master_Write@d,c
 20802  003CDC  ECFA  F023         	call	i2_I2C_Master_Write	;wreg free
 20803                           
 20804                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 20805  003CE0  0E00               	movlw	0
 20806  003CE2  6E05               	movwf	i2getRTC@i+1,c
 20807  003CE4  0E00               	movlw	0
 20808  003CE6  6E04               	movwf	i2getRTC@i,c
 20809  003CE8                     i2l5631:
 20810  003CE8  BE05               	btfsc	i2getRTC@i+1,7,c
 20811  003CEA  D006               	goto	i2l5635
 20812  003CEC  5005               	movf	i2getRTC@i+1,w,c
 20813  003CEE  E111               	bnz	i2l5641
 20814  003CF0  0E06               	movlw	6
 20815  003CF2  5C04               	subwf	i2getRTC@i,w,c
 20816  003CF4  B0D8               	btfsc	status,0,c
 20817  003CF6  D00D               	goto	i2l5641
 20818  003CF8                     i2l5635:
 20819                           
 20820                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 20821  003CF8  0E24               	movlw	low _time
 20822  003CFA  2404               	addwf	i2getRTC@i,w,c
 20823  003CFC  6ED9               	movwf	fsr2l,c
 20824  003CFE  0E01               	movlw	high _time
 20825  003D00  2005               	addwfc	i2getRTC@i+1,w,c
 20826  003D02  6EDA               	movwf	fsr2h,c
 20827  003D04  0E01               	movlw	1
 20828  003D06  EC4E  F023         	call	i2_I2C_Master_Read
 20829  003D0A  6EDF               	movwf	indf2,c
 20830  003D0C  4A04               	infsnz	i2getRTC@i,f,c
 20831  003D0E  2A05               	incf	i2getRTC@i+1,f,c
 20832  003D10  D7EB               	goto	i2l5631
 20833  003D12                     i2l5641:
 20834                           
 20835                           ;RTC.c: 58: }
 20836                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 20837  003D12  0E00               	movlw	0
 20838  003D14  EC4E  F023         	call	i2_I2C_Master_Read
 20839  003D18  0101               	movlb	1	; () banked
 20840  003D1A  6F2A               	movwf	(_time+6)& (0+255),b
 20841                           
 20842                           ;RTC.c: 60: I2C_Master_Stop();
 20843  003D1C  EC0B  F024         	call	i2_I2C_Master_Stop	;wreg free
 20844  003D20  0012               	return		;funcret
 20845  003D22                     __end_ofi2_getRTC:
 20846                           	opt stack 0
 20847                           pclatu	equ	0xFFB
 20848                           pclath	equ	0xFFA
 20849                           tblptru	equ	0xFF8
 20850                           tblptrh	equ	0xFF7
 20851                           tblptrl	equ	0xFF6
 20852                           tablat	equ	0xFF5
 20853                           prodh	equ	0xFF4
 20854                           prodl	equ	0xFF3
 20855                           intcon	equ	0xFF2
 20856                           intcon2	equ	0xFF1
 20857                           intcon3	equ	0xFF0
 20858                           indf0	equ	0xFEF
 20859                           postinc0	equ	0xFEE
 20860                           fsr0h	equ	0xFEA
 20861                           fsr0l	equ	0xFE9
 20862                           wreg	equ	0xFE8
 20863                           postdec1	equ	0xFE5
 20864                           fsr1h	equ	0xFE2
 20865                           fsr1l	equ	0xFE1
 20866                           indf2	equ	0xFDF
 20867                           postinc2	equ	0xFDE
 20868                           postdec2	equ	0xFDD
 20869                           fsr2h	equ	0xFDA
 20870                           fsr2l	equ	0xFD9
 20871                           status	equ	0xFD8
 20872                           
 20873 ;; *************** function i2_I2C_Master_Write *****************
 20874 ;; Defined at:
 20875 ;;		line 49 in file "I2C.c"
 20876 ;; Parameters:    Size  Location     Type
 20877 ;;  d               2    1[COMRAM] unsigned int 
 20878 ;; Auto vars:     Size  Location     Type
 20879 ;;		None
 20880 ;; Return value:  Size  Location     Type
 20881 ;;                  1    wreg      void 
 20882 ;; Registers used:
 20883 ;;		wreg, status,2, status,0, cstack
 20884 ;; Tracked objects:
 20885 ;;		On entry : 0/0
 20886 ;;		On exit  : 0/0
 20887 ;;		Unchanged: 0/0
 20888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20889 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20892 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20893 ;;Total ram usage:        2 bytes
 20894 ;; Hardware stack levels used:    1
 20895 ;; Hardware stack levels required when called:    1
 20896 ;; This function calls:
 20897 ;;		i2_I2C_Master_Wait
 20898 ;; This function is called by:
 20899 ;;		i2_getRTC
 20900 ;; This function uses a non-reentrant model
 20901 ;;
 20902                           
 20903                           	psect	text87
 20904  0047F4                     __ptext87:
 20905                           	opt stack 0
 20906  0047F4                     i2_I2C_Master_Write:
 20907                           	opt stack 18
 20908                           
 20909                           ;I2C.c: 51: I2C_Master_Wait();
 20910                           
 20911                           ;incstack = 0
 20912  0047F4  ECD0  F023         	call	i2_I2C_Master_Wait	;wreg free
 20913                           
 20914                           ;I2C.c: 52: SSPBUF = d;
 20915  0047F8  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 20916  0047FC  0012               	return		;funcret
 20917  0047FE                     __end_ofi2_I2C_Master_Write:
 20918                           	opt stack 0
 20919                           pclatu	equ	0xFFB
 20920                           pclath	equ	0xFFA
 20921                           tblptru	equ	0xFF8
 20922                           tblptrh	equ	0xFF7
 20923                           tblptrl	equ	0xFF6
 20924                           tablat	equ	0xFF5
 20925                           prodh	equ	0xFF4
 20926                           prodl	equ	0xFF3
 20927                           intcon	equ	0xFF2
 20928                           intcon2	equ	0xFF1
 20929                           intcon3	equ	0xFF0
 20930                           indf0	equ	0xFEF
 20931                           postinc0	equ	0xFEE
 20932                           fsr0h	equ	0xFEA
 20933                           fsr0l	equ	0xFE9
 20934                           wreg	equ	0xFE8
 20935                           postdec1	equ	0xFE5
 20936                           fsr1h	equ	0xFE2
 20937                           fsr1l	equ	0xFE1
 20938                           indf2	equ	0xFDF
 20939                           postinc2	equ	0xFDE
 20940                           postdec2	equ	0xFDD
 20941                           fsr2h	equ	0xFDA
 20942                           fsr2l	equ	0xFD9
 20943                           status	equ	0xFD8
 20944                           
 20945 ;; *************** function i2_I2C_Master_Stop *****************
 20946 ;; Defined at:
 20947 ;;		line 43 in file "I2C.c"
 20948 ;; Parameters:    Size  Location     Type
 20949 ;;		None
 20950 ;; Auto vars:     Size  Location     Type
 20951 ;;		None
 20952 ;; Return value:  Size  Location     Type
 20953 ;;                  1    wreg      void 
 20954 ;; Registers used:
 20955 ;;		wreg, status,2, status,0, cstack
 20956 ;; Tracked objects:
 20957 ;;		On entry : 0/0
 20958 ;;		On exit  : 0/0
 20959 ;;		Unchanged: 0/0
 20960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20964 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20965 ;;Total ram usage:        0 bytes
 20966 ;; Hardware stack levels used:    1
 20967 ;; Hardware stack levels required when called:    1
 20968 ;; This function calls:
 20969 ;;		i2_I2C_Master_Wait
 20970 ;; This function is called by:
 20971 ;;		i2_getRTC
 20972 ;; This function uses a non-reentrant model
 20973 ;;
 20974                           
 20975                           	psect	text88
 20976  004816                     __ptext88:
 20977                           	opt stack 0
 20978  004816                     i2_I2C_Master_Stop:
 20979                           	opt stack 18
 20980                           
 20981                           ;I2C.c: 45: I2C_Master_Wait();
 20982                           
 20983                           ;incstack = 0
 20984  004816  ECD0  F023         	call	i2_I2C_Master_Wait	;wreg free
 20985                           
 20986                           ;I2C.c: 46: PEN = 1;
 20987  00481A  84C5               	bsf	4037,2,c	;volatile
 20988  00481C  0012               	return		;funcret
 20989  00481E                     __end_ofi2_I2C_Master_Stop:
 20990                           	opt stack 0
 20991                           pclatu	equ	0xFFB
 20992                           pclath	equ	0xFFA
 20993                           tblptru	equ	0xFF8
 20994                           tblptrh	equ	0xFF7
 20995                           tblptrl	equ	0xFF6
 20996                           tablat	equ	0xFF5
 20997                           prodh	equ	0xFF4
 20998                           prodl	equ	0xFF3
 20999                           intcon	equ	0xFF2
 21000                           intcon2	equ	0xFF1
 21001                           intcon3	equ	0xFF0
 21002                           indf0	equ	0xFEF
 21003                           postinc0	equ	0xFEE
 21004                           fsr0h	equ	0xFEA
 21005                           fsr0l	equ	0xFE9
 21006                           wreg	equ	0xFE8
 21007                           postdec1	equ	0xFE5
 21008                           fsr1h	equ	0xFE2
 21009                           fsr1l	equ	0xFE1
 21010                           indf2	equ	0xFDF
 21011                           postinc2	equ	0xFDE
 21012                           postdec2	equ	0xFDD
 21013                           fsr2h	equ	0xFDA
 21014                           fsr2l	equ	0xFD9
 21015                           status	equ	0xFD8
 21016                           
 21017 ;; *************** function i2_I2C_Master_Start *****************
 21018 ;; Defined at:
 21019 ;;		line 31 in file "I2C.c"
 21020 ;; Parameters:    Size  Location     Type
 21021 ;;		None
 21022 ;; Auto vars:     Size  Location     Type
 21023 ;;		None
 21024 ;; Return value:  Size  Location     Type
 21025 ;;                  1    wreg      void 
 21026 ;; Registers used:
 21027 ;;		wreg, status,2, status,0, cstack
 21028 ;; Tracked objects:
 21029 ;;		On entry : 0/0
 21030 ;;		On exit  : 0/0
 21031 ;;		Unchanged: 0/0
 21032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21036 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21037 ;;Total ram usage:        0 bytes
 21038 ;; Hardware stack levels used:    1
 21039 ;; Hardware stack levels required when called:    1
 21040 ;; This function calls:
 21041 ;;		i2_I2C_Master_Wait
 21042 ;; This function is called by:
 21043 ;;		i2_getRTC
 21044 ;; This function uses a non-reentrant model
 21045 ;;
 21046                           
 21047                           	psect	text89
 21048  00481E                     __ptext89:
 21049                           	opt stack 0
 21050  00481E                     i2_I2C_Master_Start:
 21051                           	opt stack 18
 21052                           
 21053                           ;I2C.c: 33: I2C_Master_Wait();
 21054                           
 21055                           ;incstack = 0
 21056  00481E  ECD0  F023         	call	i2_I2C_Master_Wait	;wreg free
 21057                           
 21058                           ;I2C.c: 34: SEN = 1;
 21059  004822  80C5               	bsf	4037,0,c	;volatile
 21060  004824  0012               	return		;funcret
 21061  004826                     __end_ofi2_I2C_Master_Start:
 21062                           	opt stack 0
 21063                           pclatu	equ	0xFFB
 21064                           pclath	equ	0xFFA
 21065                           tblptru	equ	0xFF8
 21066                           tblptrh	equ	0xFF7
 21067                           tblptrl	equ	0xFF6
 21068                           tablat	equ	0xFF5
 21069                           prodh	equ	0xFF4
 21070                           prodl	equ	0xFF3
 21071                           intcon	equ	0xFF2
 21072                           intcon2	equ	0xFF1
 21073                           intcon3	equ	0xFF0
 21074                           indf0	equ	0xFEF
 21075                           postinc0	equ	0xFEE
 21076                           fsr0h	equ	0xFEA
 21077                           fsr0l	equ	0xFE9
 21078                           wreg	equ	0xFE8
 21079                           postdec1	equ	0xFE5
 21080                           fsr1h	equ	0xFE2
 21081                           fsr1l	equ	0xFE1
 21082                           indf2	equ	0xFDF
 21083                           postinc2	equ	0xFDE
 21084                           postdec2	equ	0xFDD
 21085                           fsr2h	equ	0xFDA
 21086                           fsr2l	equ	0xFD9
 21087                           status	equ	0xFD8
 21088                           
 21089 ;; *************** function i2_I2C_Master_Read *****************
 21090 ;; Defined at:
 21091 ;;		line 55 in file "I2C.c"
 21092 ;; Parameters:    Size  Location     Type
 21093 ;;  a               1    wreg     unsigned char 
 21094 ;; Auto vars:     Size  Location     Type
 21095 ;;  a               1    1[COMRAM] unsigned char 
 21096 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 21097 ;; Return value:  Size  Location     Type
 21098 ;;                  1    wreg      unsigned char 
 21099 ;; Registers used:
 21100 ;;		wreg, status,2, status,0, cstack
 21101 ;; Tracked objects:
 21102 ;;		On entry : 0/0
 21103 ;;		On exit  : 0/0
 21104 ;;		Unchanged: 0/0
 21105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21107 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21109 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21110 ;;Total ram usage:        2 bytes
 21111 ;; Hardware stack levels used:    1
 21112 ;; Hardware stack levels required when called:    1
 21113 ;; This function calls:
 21114 ;;		i2_I2C_Master_Wait
 21115 ;; This function is called by:
 21116 ;;		i2_getRTC
 21117 ;; This function uses a non-reentrant model
 21118 ;;
 21119                           
 21120                           	psect	text90
 21121  00469C                     __ptext90:
 21122                           	opt stack 0
 21123  00469C                     i2_I2C_Master_Read:
 21124                           	opt stack 18
 21125                           
 21126                           ;incstack = 0
 21127                           ;i2I2C_Master_Read@a stored from wreg
 21128  00469C  6E02               	movwf	i2I2C_Master_Read@a,c
 21129                           
 21130                           ;I2C.c: 57: unsigned char temp;
 21131                           ;I2C.c: 58: I2C_Master_Wait();
 21132  00469E  ECD0  F023         	call	i2_I2C_Master_Wait	;wreg free
 21133                           
 21134                           ;I2C.c: 59: RCEN = 1;
 21135  0046A2  86C5               	bsf	4037,3,c	;volatile
 21136                           
 21137                           ;I2C.c: 60: I2C_Master_Wait();
 21138  0046A4  ECD0  F023         	call	i2_I2C_Master_Wait	;wreg free
 21139                           
 21140                           ;I2C.c: 61: temp = SSPBUF;
 21141  0046A8  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 21142                           
 21143                           ;I2C.c: 62: I2C_Master_Wait();
 21144  0046AC  ECD0  F023         	call	i2_I2C_Master_Wait	;wreg free
 21145                           
 21146                           ;I2C.c: 63: ACKDT = (a)?0:1;
 21147  0046B0  5002               	movf	i2I2C_Master_Read@a,w,c
 21148  0046B2  A4D8               	btfss	status,2,c
 21149  0046B4  D002               	goto	i2u367_40
 21150  0046B6  8AC5               	bsf	4037,5,c	;volatile
 21151  0046B8  D001               	goto	i2l5339
 21152  0046BA                     i2u367_40:
 21153  0046BA  9AC5               	bcf	4037,5,c	;volatile
 21154  0046BC                     i2l5339:
 21155                           
 21156                           ;I2C.c: 64: ACKEN = 1;
 21157  0046BC  88C5               	bsf	4037,4,c	;volatile
 21158                           
 21159                           ;I2C.c: 65: return temp;
 21160  0046BE  5003               	movf	i2I2C_Master_Read@temp,w,c
 21161  0046C0  0012               	return	
 21162  0046C2                     __end_ofi2_I2C_Master_Read:
 21163                           	opt stack 0
 21164                           pclatu	equ	0xFFB
 21165                           pclath	equ	0xFFA
 21166                           tblptru	equ	0xFF8
 21167                           tblptrh	equ	0xFF7
 21168                           tblptrl	equ	0xFF6
 21169                           tablat	equ	0xFF5
 21170                           prodh	equ	0xFF4
 21171                           prodl	equ	0xFF3
 21172                           intcon	equ	0xFF2
 21173                           intcon2	equ	0xFF1
 21174                           intcon3	equ	0xFF0
 21175                           indf0	equ	0xFEF
 21176                           postinc0	equ	0xFEE
 21177                           fsr0h	equ	0xFEA
 21178                           fsr0l	equ	0xFE9
 21179                           wreg	equ	0xFE8
 21180                           postdec1	equ	0xFE5
 21181                           fsr1h	equ	0xFE2
 21182                           fsr1l	equ	0xFE1
 21183                           indf2	equ	0xFDF
 21184                           postinc2	equ	0xFDE
 21185                           postdec2	equ	0xFDD
 21186                           fsr2h	equ	0xFDA
 21187                           fsr2l	equ	0xFD9
 21188                           status	equ	0xFD8
 21189                           
 21190 ;; *************** function i2_I2C_Master_Wait *****************
 21191 ;; Defined at:
 21192 ;;		line 26 in file "I2C.c"
 21193 ;; Parameters:    Size  Location     Type
 21194 ;;		None
 21195 ;; Auto vars:     Size  Location     Type
 21196 ;;		None
 21197 ;; Return value:  Size  Location     Type
 21198 ;;                  1    wreg      void 
 21199 ;; Registers used:
 21200 ;;		wreg, status,2, status,0
 21201 ;; Tracked objects:
 21202 ;;		On entry : 0/0
 21203 ;;		On exit  : 0/0
 21204 ;;		Unchanged: 0/0
 21205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21208 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21209 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21210 ;;Total ram usage:        1 bytes
 21211 ;; Hardware stack levels used:    1
 21212 ;; This function calls:
 21213 ;;		Nothing
 21214 ;; This function is called by:
 21215 ;;		i2_I2C_Master_Start
 21216 ;;		i2_I2C_Master_Stop
 21217 ;;		i2_I2C_Master_Write
 21218 ;;		i2_I2C_Master_Read
 21219 ;; This function uses a non-reentrant model
 21220 ;;
 21221                           
 21222                           	psect	text91
 21223  0047A0                     __ptext91:
 21224                           	opt stack 0
 21225  0047A0                     i2_I2C_Master_Wait:
 21226                           	opt stack 18
 21227  0047A0                     i2l66:
 21228  0047A0  B4C7               	btfsc	4039,2,c	;volatile
 21229  0047A2  D7FE               	goto	i2l66
 21230  0047A4  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 21231  0047A8  0E1F               	movlw	31
 21232  0047AA  1601               	andwf	??i2_I2C_Master_Wait,f,c
 21233  0047AC  B4D8               	btfsc	status,2,c
 21234  0047AE  0012               	return	
 21235  0047B0  D7F7               	goto	i2l66
 21236  0047B2                     __end_ofi2_I2C_Master_Wait:
 21237                           	opt stack 0
 21238                           pclatu	equ	0xFFB
 21239                           pclath	equ	0xFFA
 21240                           tblptru	equ	0xFF8
 21241                           tblptrh	equ	0xFF7
 21242                           tblptrl	equ	0xFF6
 21243                           tablat	equ	0xFF5
 21244                           prodh	equ	0xFF4
 21245                           prodl	equ	0xFF3
 21246                           intcon	equ	0xFF2
 21247                           intcon2	equ	0xFF1
 21248                           intcon3	equ	0xFF0
 21249                           indf0	equ	0xFEF
 21250                           postinc0	equ	0xFEE
 21251                           fsr0h	equ	0xFEA
 21252                           fsr0l	equ	0xFE9
 21253                           wreg	equ	0xFE8
 21254                           postdec1	equ	0xFE5
 21255                           fsr1h	equ	0xFE2
 21256                           fsr1l	equ	0xFE1
 21257                           indf2	equ	0xFDF
 21258                           postinc2	equ	0xFDE
 21259                           postdec2	equ	0xFDD
 21260                           fsr2h	equ	0xFDA
 21261                           fsr2l	equ	0xFD9
 21262                           status	equ	0xFD8
 21263                           pclatu	equ	0xFFB
 21264                           pclath	equ	0xFFA
 21265                           tblptru	equ	0xFF8
 21266                           tblptrh	equ	0xFF7
 21267                           tblptrl	equ	0xFF6
 21268                           tablat	equ	0xFF5
 21269                           prodh	equ	0xFF4
 21270                           prodl	equ	0xFF3
 21271                           intcon	equ	0xFF2
 21272                           intcon2	equ	0xFF1
 21273                           intcon3	equ	0xFF0
 21274                           indf0	equ	0xFEF
 21275                           postinc0	equ	0xFEE
 21276                           fsr0h	equ	0xFEA
 21277                           fsr0l	equ	0xFE9
 21278                           wreg	equ	0xFE8
 21279                           postdec1	equ	0xFE5
 21280                           fsr1h	equ	0xFE2
 21281                           fsr1l	equ	0xFE1
 21282                           indf2	equ	0xFDF
 21283                           postinc2	equ	0xFDE
 21284                           postdec2	equ	0xFDD
 21285                           fsr2h	equ	0xFDA
 21286                           fsr2l	equ	0xFD9
 21287                           status	equ	0xFD8
 21288                           
 21289                           	psect	rparam
 21290  0000                     pclatu	equ	0xFFB
 21291                           pclath	equ	0xFFA
 21292                           tblptru	equ	0xFF8
 21293                           tblptrh	equ	0xFF7
 21294                           tblptrl	equ	0xFF6
 21295                           tablat	equ	0xFF5
 21296                           prodh	equ	0xFF4
 21297                           prodl	equ	0xFF3
 21298                           intcon	equ	0xFF2
 21299                           intcon2	equ	0xFF1
 21300                           intcon3	equ	0xFF0
 21301                           indf0	equ	0xFEF
 21302                           postinc0	equ	0xFEE
 21303                           fsr0h	equ	0xFEA
 21304                           fsr0l	equ	0xFE9
 21305                           wreg	equ	0xFE8
 21306                           postdec1	equ	0xFE5
 21307                           fsr1h	equ	0xFE2
 21308                           fsr1l	equ	0xFE1
 21309                           indf2	equ	0xFDF
 21310                           postinc2	equ	0xFDE
 21311                           postdec2	equ	0xFDD
 21312                           fsr2h	equ	0xFDA
 21313                           fsr2l	equ	0xFD9
 21314                           status	equ	0xFD8
 21315                           
 21316                           	psect	temp
 21317  00007E                     btemp:
 21318                           	opt stack 0
 21319  00007E                     	ds	1
 21320  0000                     int$flags	set	btemp
 21321                           pclatu	equ	0xFFB
 21322                           pclath	equ	0xFFA
 21323                           tblptru	equ	0xFF8
 21324                           tblptrh	equ	0xFF7
 21325                           tblptrl	equ	0xFF6
 21326                           tablat	equ	0xFF5
 21327                           prodh	equ	0xFF4
 21328                           prodl	equ	0xFF3
 21329                           intcon	equ	0xFF2
 21330                           intcon2	equ	0xFF1
 21331                           intcon3	equ	0xFF0
 21332                           indf0	equ	0xFEF
 21333                           postinc0	equ	0xFEE
 21334                           fsr0h	equ	0xFEA
 21335                           fsr0l	equ	0xFE9
 21336                           wreg	equ	0xFE8
 21337                           postdec1	equ	0xFE5
 21338                           fsr1h	equ	0xFE2
 21339                           fsr1l	equ	0xFE1
 21340                           indf2	equ	0xFDF
 21341                           postinc2	equ	0xFDE
 21342                           postdec2	equ	0xFDD
 21343                           fsr2h	equ	0xFDA
 21344                           fsr2l	equ	0xFD9
 21345                           status	equ	0xFD8


Data Sizes:
    Strings     1215
    Constant    27
    Data        8
    BSS         120
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      55
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_116(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_115(CODE[17]), STR_114(CODE[17]), STR_113(CODE[11]), STR_112(CODE[18]), 
		 -> STR_111(CODE[18]), STR_110(CODE[17]), STR_109(CODE[15]), STR_108(CODE[15]), 
		 -> STR_107(CODE[15]), STR_106(CODE[17]), STR_105(CODE[17]), STR_104(CODE[17]), 
		 -> STR_103(CODE[16]), STR_102(CODE[17]), STR_101(CODE[17]), STR_100(CODE[17]), 
		 -> STR_99(CODE[17]), STR_98(CODE[17]), STR_97(CODE[17]), STR_96(CODE[15]), 
		 -> STR_95(CODE[11]), STR_94(CODE[17]), STR_93(CODE[11]), STR_92(CODE[17]), 
		 -> STR_91(CODE[14]), STR_90(CODE[15]), STR_89(CODE[14]), STR_88(CODE[10]), 
		 -> STR_87(CODE[9]), STR_86(CODE[9]), STR_85(CODE[10]), STR_84(CODE[10]), 
		 -> STR_83(CODE[16]), STR_82(CODE[15]), STR_81(CODE[3]), STR_80(CODE[15]), 
		 -> STR_79(CODE[13]), STR_78(CODE[14]), STR_77(CODE[8]), STR_76(CODE[14]), 
		 -> STR_75(CODE[15]), STR_74(CODE[12]), STR_73(CODE[14]), STR_72(CODE[17]), 
		 -> STR_71(CODE[14]), STR_70(CODE[15]), STR_69(CODE[17]), STR_68(CODE[17]), 
		 -> STR_67(CODE[7]), STR_66(CODE[21]), STR_65(CODE[13]), STR_64(CODE[11]), 
		 -> STR_63(CODE[24]), STR_50(CODE[17]), STR_49(CODE[17]), STR_48(CODE[17]), 
		 -> STR_47(CODE[17]), STR_46(CODE[17]), STR_45(CODE[17]), STR_44(CODE[17]), 
		 -> STR_43(CODE[17]), STR_42(CODE[17]), STR_41(CODE[17]), STR_40(CODE[17]), 
		 -> STR_39(CODE[17]), STR_38(CODE[17]), STR_37(CODE[17]), STR_36(CODE[17]), 
		 -> STR_35(CODE[17]), STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), 
		 -> STR_31(CODE[17]), STR_30(CODE[17]), STR_29(CODE[3]), STR_28(CODE[17]), 
		 -> STR_27(CODE[17]), STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[17]), 
		 -> STR_23(CODE[14]), STR_22(CODE[10]), STR_21(CODE[24]), STR_7(CODE[7]), 
		 -> STR_6(CODE[17]), STR_5(CODE[18]), STR_4(CODE[16]), STR_3(CODE[18]), 
		 -> STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getIR->_readIR
    _readIR->_readADC
    _ID->_getMAG
    _getMAG->_readMAG
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _algorithmTest->_printf
    _actuatorTest->_printf
    _ToggleTestA5->_printf
    _PusherTestA5->_printf
    _PortTestA5->_printf
    _BothServos->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _initServos->_updateServoPosition

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  176826
                    _I2C_Master_Init
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   19804
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                              7     7      0   15450
                                             49 BANK0      7     7      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getIR                                                2     2      0      45
                                              6 BANK0      2     2      0
                             _readIR
 ---------------------------------------------------------------------------------
 (4) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _ID                                                  10    10      0     253
                                              8 BANK0     10    10      0
                             _getMAG
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    4101
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   10722
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3    9975
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   21840
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   20926
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   43432
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   12647
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    8279
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    8279
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0   79915
                                             70 BANK0      2     2      0
                         _BothServos
                         _EEPROMTest
                         _PortTestA5
                          _PortTests
                       _PusherTestA5
                       _ToggleTestA5
                       _actuatorTest
                      _algorithmTest
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    8391
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (5) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    8279
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   13623
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _ToggleTestA5                                         3     3      0    8304
                                             43 BANK0      3     3      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PusherTestA5                                         2     2      0    8279
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTests                                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTestA5                                           1     1      0    8279
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _EEPROMTest                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   16481
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    8144
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     442
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    4101
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    4101
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   76936
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   71999
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7744
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4605
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   31390
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4937
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    3004
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     318
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _EEPROMTest
     _PortTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTests
     _PusherTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _ToggleTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _getMAG
         _readMAG
           _readADC
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      37       7       21.5%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     134      34        0.0%
DATA                 0      0     134       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Wed Mar 22 13:39:42 2017

                                    _i 00E4                     i2_I2C_Master_Start 481E  
                   i2_I2C_Master_Write 47F4                                     l66 478C  
                                   _ID 2DAE                            __CFG_CPD$ON 000000  
                                   _UI 08CA                           ___awdiv@sign 008B  
                                   _up 0077                    ___wmul@multiplicand 0082  
                   i2___lwdiv@dividend 0006                            __CFG_BORV$3 000000  
                   EEPROM_read@address 0080                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                                    ID@i 008A  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l180 09A0  
                                  l602 1FDE                                    l730 2B8C  
                                  l750 2EC6                                    l751 2EE0  
                                  l487 3622                                    l930 33F0  
                                  l943 4758                                    l952 3196  
                                  l796 3C76                           __CFG_CPB$OFF 000000  
                                  _PEN 007E2A                                    _SEN 007E28  
                  ?i2_I2C_Master_Start 0001                         ?_machineConfig 0001  
                  ?i2_I2C_Master_Write 0002                                    _log 00E6  
                                  _sel 00FD                                    _var 00FA  
                         ___awmod@sign 0085                                    wreg 000FE8  
                  i2printRTC@RTC_month 003B                    _log_count_can_w_lab 00EC  
      __end_of_change_state_to_menu_11 442A        __end_of_change_state_to_menu_12 429A  
      __end_of_change_state_to_menu_22 4262        __end_of_change_state_to_menu_23 43FA  
         _f_can_coming_to_distribution 006F                         ??_Distribution 0088  
      __end_of_change_state_to_logs_11 451A        __end_of_change_state_to_logs_12 44EA  
      __end_of_change_state_to_logs_22 44BA        __end_of_change_state_to_logs_23 45A4  
      __end_of_change_state_to_logs_33 448A        __end_of_change_state_to_logs_34 445A  
                                 ??_ID 0088                                   ??_UI 00C4  
                         __CFG_LVP$OFF 000000                           __CFG_WDT$OFF 000000  
                                 l1101 0080                                   l1110 0240  
                                 l1111 028E                                   l1040 3324  
                                 l1105 0126                                   l1202 3F98  
                                 l1043 3344                                   l1108 018C  
                                 l1205 3FBA                                   l1109 01DA  
                                 l1222 3AB2                                   l1214 3A7E  
                                 l1135 05E8                                   l1063 3510  
                                 l1152 0858                                   l1072 1C88  
                                 l1066 3514                                   l1171 3B5E  
                                 l1147 0782                                   l1075 1C8C  
                                 l1172 3B62                                   l1173 3B66  
                                 l1165 3B3E                                   l1174 3B6A  
                                 l1175 3B6E                                   l1192 3962  
                                 l1177 3BAC                                   l1169 3B5A  
                                 l1186 3952                                   l1098 007C  
                                 l1259 13B6                                   l1195 3986  
                                 l1196 39A0                                   l1706 3C30  
                                 l1716 3E4A                                   l1653 37B0  
                                 l5311 3E18                                   l5231 45F6  
                                 l6031 3458                                   l5315 3E3C  
                                 l5307 3E06                                   l7003 075A  
                                 l6043 3490                                   l6035 3462  
                                 l5309 3E12                                   l7005 0760  
                                 l5229 45E4                                   l5253 456E  
                                 l6053 462C                                   l5271 461C  
                                 l5511 144A                                   l5423 117E  
                                 l6047 349A                                   l6039 347A  
                                 l5521 14A4                                   l5433 11AE  
                                 l7105 3970                                   l7033 07DC  
                                 l7009 076A                                   l6057 4642  
                                 l6401 2BB0                                   l5291 3BF2  
                                 l5523 14AE                                   l5427 1192  
                                 l7043 0804                                   l8011 335C  
                                 l5611 374A                                   l5541 150A  
                                 l5517 146C                                   l5429 11A4  
                                 l7141 3AA6                                   l7053 0842  
                                 l7037 07F4                                   l7029 07D2  
                                 l8021 337A                                   l8013 3362  
                                 l8005 334A                                   l6173 39E6  
                                 l6501 2F50                                   l6085 405E  
                                 l8101 3618                                   l5287 3BE0  
                                 l5551 157C                                   l5535 14E4  
                                 l5471 1332                                   l5455 1290  
                                 l5447 125E                                   l5439 11E2  
                                 l7063 0872                                   l7047 081C  
                                 l7039 07FA                                   l8015 3368  
                                 l8007 3350                                   l7311 38AC  
                                 l7303 3888                                   l5607 3734  
                                 l6183 3A28                                   l6503 2F6A  
                                 l8103 361E                                   l5289 3BEC  
                                 l5537 14F0                                   l5545 151E  
                                 l5529 14C8                                   l5465 1308  
                                 l5457 129C                                   l5481 137C  
                                 l5553 1588                                   l7161 3B72  
                                 l7073 089A                                   l7065 0878  
                                 l8017 336E                                   l8009 3356  
                                 l8025 3380                                   l7313 38B8  
                                 l5609 3744                                   l6177 39FC  
                                 l6417 2BEA                                   l5299 3C22  
                                 l5547 1524                                   l5475 135E  
                                 l5467 1314                                   l5459 12A2  
                                 l7083 08C2                                   l7075 08A0  
                                 l8019 3374                                   l7315 38BE  
                                 l7323 38F0                                   l7307 3898  
                                 l5619 379E                                   l6507 2F84  
                                 l6451 2E4A                                   l8107 3624  
                                 l5493 13EE                                   l5477 1376  
                                 l5469 131A                                   l7069 0882  
                                 l6701 00F0                                   l6605 1D94  
                                 l5565 3AF8                                   l5557 42A4  
                                 l5821 1FE8                                   l7413 0A6C  
                                 l6509 2FB2                                   l6461 2E7C  
                                 l7079 08AA                                   l6623 1E26  
                                 l7271 3698                                   l7327 3904  
                                 l7319 38E2                                   l5575 3B2E  
                                 l5559 42B0                                   l5831 207E  
                                 l5823 2006                                   l5815 1F5C  
                                 l7503 0D12                                   l7407 0A5C  
                                 l7423 0A92                                   _ADIE 007CEE  
                                 l5593 3C62                                   l5497 1408  
                                 l6705 00FA                                   l6617 1DE4  
                                 l7273 36A4                                   l7265 367A  
                                 l5569 3B0E                                   l5841 2114  
                                 l5833 209C                                   l5825 2024  
                                 l7513 0DC2                                   l7505 0D76  
                                 l7441 0AEE                                   l7417 0A84  
                                 l7409 0A62                                   l6465 2E8A  
                                 l5595 3C8C                                   l5499 140E  
                                 l6811 038E                                   l6803 0354  
                                 l6643 1EA2                                   l6635 1E72  
                                 l7291 36FC                                   l7283 36DA  
                                 l7275 36AA                                   l7259 3664  
                                 l5843 2132                                   l5835 20BA  
                                 l5827 2042                                   l7531 0E0E  
                                 l7523 0DEC                                   l7451 0B18  
                                 l6475 2EB0                                   l8091 35FC  
                                 l8083 35D2                                   l6821 03B6  
                                 l6709 0112                                   l5837 20D8  
                                 l5829 2060                                   l7613 0FE6  
                                 l7605 0FC4                                   l7517 0DDA  
                                 l7509 0DB8                                   l7445 0B06  
                                 l7437 0AE4                                   l7381 09D0  
                                 l6469 2E98                                   l6389 2B4A  
                                 l8093 3602                                   l8085 35E8  
                                 l6903 054C                                   l6815 0398  
                                 l6655 1EEA                                   l6647 1ED8  
                                 l7287 36E8                                   l5839 20F6  
                                 l5847 2150                                   l7631 104C  
                                 l7551 0ED4                                   l7527 0DF6  
                                 l7455 0B22                                   l7375 09B8  
                                 l6841 041C                                   l6825 03C0  
                                 l5849 21AE                                   l7609 0FCE  
                                 l7481 0BE6                                   l7393 0A04  
                                 l7385 09DA                                   l7377 09BE  
                                 l6497 2F1C                                   l8089 35F6  
                                 l6923 05C0                                   l6915 059E  
                                 l6907 0564                                   l6851 0444  
                                 l6819 03B0                                   l6659 1F20  
                                 l6587 1CDC                                   l7635 1056  
                                 l7555 0EDE                                   l7491 0C7C  
                                 l7483 0C04                                   l7475 0B8C  
                                 l7459 0B3A                                   l6499 2F36  
                                 l6925 05C6                                   l6845 0434  
                                 l6837 0412                                   l6829 03D8  
                                 l7653 10A2                                   l7645 1080  
                                 l7573 0F2A                                   l7565 0F08  
                                 l7493 0C9A                                   l7485 0C22  
                                 l7477 0BAA                                   l7389 09F2  
                                 l6951 0652                                   l6943 0630  
                                 l6919 05A8                                   l6871 04B8  
                                 l6863 0496                                   l6855 045C  
                                 l6847 043A                                   l7671 1100  
                                 l7639 106E                                   l7591 0F90  
                                 l7559 0EF6                                   l7495 0CB8  
                                 l7487 0C40                                   l7479 0BC8  
                                 l6961 067A                                   l6953 0658  
                                 l6929 05D0                                   l6881 04E0  
                                 l6873 04BE                                   l6793 032C  
                                 l6785 030A                                   l7649 108A  
                                 l7569 0F12                                   l7497 0CD6  
                                 l7489 0C5E                                   l5985 37D0  
                                 l6947 063A                                   l6867 04A0  
                                 l6795 0332                                   l6699 00EA  
                                 l7675 110A                                   l7595 0F9A  
                                 l7499 0CF4                                   l5995 385C  
                                 l6973 06BE                                   l6957 0662  
                                 l6893 0524                                   l6877 04C8  
                                 l6789 0314                                   l7693 1156  
                                 l7685 1134                                   l5989 37E6  
                                 l6983 06E6                                   l6799 033C  
                                 l7679 1122                                   l7599 0FB2  
                                 l7951 30D0                                   l6977 06D6  
                                 l6969 06B4                                   l6897 053C  
                                 l6889 051A                                   l7689 113E  
                                 l7697 1162                                   l6995 0738  
                                 l6987 06FE                                   l6979 06DC  
                                 l6899 0542                                   l7949 30BC  
                                 l6999 0742                                   l7975 3150  
                                 l7987 32C6                                   STR_1 FBA3  
                                 STR_2 FF27                                   STR_3 FB91  
                                 STR_4 FE4A                                   STR_5 FB91  
                                 STR_6 FDE6                                   STR_7 FFC4  
                                 STR_8 FFDB                                   STR_9 FFCB  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u5110 1F0E  
                                 u5200 01DA                                   u5040 1D1E  
                                 u5050 1D20                                   u5220 028E  
                                 u5118 1F12                                   u3800 419A  
                                 u5080 1EC6                                   u3570 456C  
                                 _PEIE 007F96                                   u5180 0126  
                                 u5088 1ECA                                   u4480 1FDE  
                                 u4465 3E84                                   u3850 12DC  
                                 u3770 414C                                   u4810 2B56  
                                 u7107 2E20                                   u3780 414E  
                                 _RCEN 007E2B                                   u7117 2ECA  
                                 u7037 2ADA                                   u3790 4198  
                                 u4830 2B8C                                   u8007 3F78  
                                 u3791 4194                                   u7207 34A2  
                                 u7127 2ED4                                   u7047 2BA0  
                                 u4920 2E3A                                   u3857 12D2  
                                 u8017 3FAC                                   u7217 41AA  
                                 u7137 2EF8                                   u7057 2C0A  
                                 u3890 1354                                   u8107 1A40  
                                 u8027 391C                                   u7307 0B54  
                                 u7227 41DE                                   u7147 4324  
                                 u7067 2C28                                   u4828 2B5A  
                                 u8117 1A74                                   u8037 398A  
                                 u7317 0DCA                                   u7237 08E2  
                                 u7157 2FC0                                   u7077 4034  
                                 u8207 3DAA                                   u8127 1AA8  
                                 u8047 3994                                   u7407 105E  
                                 u7327 0DFE                                   u7247 09E2  
                                 u7167 2FF4                                   u7087 4638  
                                 u4928 2E3E                                   u8217 3DB4  
                                 u3897 134A                                   u8137 1ADC  
                                 u8057 1924                                   u7417 1092  
                                 u7337 0E28                                   u7257 0A1E  
                                 u7177 3028                                   u7097 2DC4  
                                 i2l66 47A0                                   u4890 2DDE  
                                 u8227 3DE0                                   u8147 1B10  
                                 u8067 1970                                   u7507 1CCC  
                                 u7427 10BC                                   u7347 0EE6  
                                 u7267 0A74                                   u7187 340E  
                                 u8237 3DEA                                   u8157 1B44  
                                 u8077 19A4                                   u7517 1D34  
                                 u7437 1112                                   u7357 0F1A  
                                 u7277 0AA0                                   u7197 346A  
                                 u8247 3F52                                   u8167 1B78  
                                 u8087 19D8                                   u7607 34C0  
                                 u7527 1D88                                   u7447 1146  
                                 u7367 0F44                                   u7287 0AF6  
                                 u8177 1BAC                                   u8097 1A0C  
                                 u7617 3504                                   u7537 1DA8  
                                 u7457 32D4                                   u7377 0FA2  
                                 u7297 0B2A                                   u6850 3196  
                                 u4898 2DE2                                   u8187 1BE0  
                                 u7707 01EA                                   u7627 3526  
                                 u7547 1DD6                                   u7467 3318  
                                 u7387 0FD6                                   u8197 1C14  
                                 u7717 0250                                   u7637 002C  
                                 u7557 1E1A                                   u7477 1C38  
                                 u7397 1000                                   u7807 04A8  
                                 u7727 026E                                   u7647 0070  
                                 u7567 1E38                                   u7487 1C7C  
                                 u7817 04D0                                   u7737 029E  
                                 u7657 0092                                   u7577 1E66  
                                 u7497 1C9E                                   u7907 074A  
                                 u7827 052C                                   u7747 031C  
                                 u7667 0102                                   u7587 1E80  
                                 u7917 0772                                   u7837 0554  
                                 u7757 0344                                   u7677 0136  
                                 u7597 45EC                                   u7927 0794  
                                 u7847 05B0                                   u7767 03A0  
                                 u7687 019C                                   u7937 07E4  
                                 u7857 05D8                                   u7777 03C8  
                                 u7697 01BA                                   u7947 080C  
                                 u7867 0642                                   u7787 0424  
                                 u7957 085C                                   u7877 066A  
                                 u7797 044C                                   u7967 0866  
                                 u7887 06C6                                   u7977 088A  
                                 u7897 06EE                                   u7987 08B2  
                                 u7997 3A3E                                   _RSEN 007E29  
                          _stopSignals 4760                                   _Test 32C6  
                                 _back 005B                                   _main 3588  
                                 _down 0067                                   _keys FB25  
                                 _time 0124                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 46E6                                   btemp 007E  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                 _log_count_can_no_lab 00EA                        __end_ofi2_putch 47DE  
                  __size_of_EEPROMTest 0002                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                             i2_printRTC 24B2  
                          i2_lcdNibble 3FC0                        __end_of_Loading 2C40  
                 __end_of_actuatorTest 08CA                       ?_I2C_Master_Init 008D  
                     ?_I2C_Master_Read 0001                       ?_I2C_Master_Wait 0001  
          ??i2_change_state_to_menu_12 002A            ??i2_change_state_to_menu_22 002A  
                     ?_I2C_Master_Stop 0001                                  ?_Test 0001  
                 __end_of_EEPROM_write 34B2                                  ?_main 0001  
                                _ACKEN 007E2C                                  _ACKDT 007E2D  
                      __end_of___awdiv 3706                                  _EEADR 000FA9  
                                STR_10 FFE7                                  STR_11 FFEB  
                                STR_12 FFFB                                  STR_20 FFEF  
                                STR_13 FFDF                                  STR_21 FB40  
                                STR_14 FFD7                                  STR_22 FF9B  
                                STR_30 FDF7                                  STR_15 FFD3  
                                STR_23 FF19                                  STR_31 FDD5  
                                STR_16 FFE3                                  STR_24 FD3C  
                                STR_32 FD1A                                  STR_40 FCD6  
                                STR_17 FFF3                                  STR_25 FE19  
                                STR_33 FD2B                                  STR_41 FCC5  
                                STR_18 FFF7                                  STR_34 FDC4  
                                STR_50 FDA2                                  STR_42 FD80  
                                STR_26 FD4D                                  STR_43 FD80  
                                STR_35 FDC4                                  STR_51 FFDB  
                                STR_19 FFCF                                  STR_27 FE08  
                                STR_52 FFCB                                  STR_60 FFF3  
                                STR_28 FD5E                                  STR_36 FD09  
                                STR_44 FCE7                        __end_of___awmod 390E  
                                STR_45 FCD6                                  STR_37 FD1A  
                                STR_53 FFE7                                  STR_61 FFF7  
                                STR_29 FE16                                  STR_62 FFCF  
                                STR_54 FFEB                                  STR_70 FED2  
                                STR_38 FDB3                                  STR_46 FD91  
                                STR_47 FD91                                  STR_55 FFFB  
                                STR_63 FB40                                  STR_71 FF0B  
                                STR_39 FD6F                                  STR_56 FFDF  
                                STR_64 FF7C                                  STR_80 FE5A  
                                STR_48 FCF8                                  STR_72 FC5F  
                                STR_49 FCE7                                  STR_57 FFD7  
                                STR_81 FE16                                  STR_65 FF42  
                                STR_73 FEEF                                  STR_58 FFD3  
                                STR_74 FF4F                                  STR_90 FEC3  
                                STR_82 FE87                                  STR_66 FB58  
                                STR_59 FFE3                                  STR_67 FFBD  
                                STR_91 FEE1                                  STR_75 FEB4  
                                STR_83 FE2A                                  STR_84 FF87  
                                STR_76 FEFD                                  STR_92 FC81  
                                STR_68 FC70                                  STR_85 FF87  
                                STR_77 FFAE                                  STR_93 FF5B  
                                STR_69 FCA3                                  STR_78 FF0B  
                                STR_86 FFA5                                  STR_94 FC92  
                                STR_87 FFA5                                  STR_95 FF66  
                                STR_79 FF35                                  STR_88 FF91  
                                STR_96 FEA5                                  STR_89 FF0B  
                                STR_97 FC0A                                  STR_98 FBF9  
                                STR_99 FBD7                                  ?_sort 0001  
                      __end_of___lldiv 37C2                                  _T0CON 000FD5  
                      ___awdiv@divisor 0088                                  _T1CON 000FCD  
                                _T3CON 000FB1                        __end_of___lwdiv 3C3A  
                      __end_of___lwmod 3E54                                  i2l257 24AE  
                                i2l602 2540                                  i2l861 2D06  
                                i2l943 4784                                  i2l865 2D52  
                                i2l867 2D72                        ___awdiv@counter 008A  
                                _TMR0H 000FD7                                  _TMR1H 000FCF  
                                _TMR0L 000FD6                                  _TMR3H 000FB3  
                                _TMR1L 000FCE                                  _TMR3L 000FB2  
                           _BothServos 1916                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst 47D2                        __end_of_handler 2DAE  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _nRBPU 007F8F  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_readADC 45FC  
                      __end_of_initLCD 41E8                         __CFG_EBTRB$OFF 000000  
                                _debug 0065                             i2isdigit@c 0003  
                                _getIR 4016                        __end_of_loadRTC 3A30  
                      __end_of_readMAG 41A2                        __end_of_dpowers FB40  
                                _first 0073                                  _enter 0069  
                      __end_of_isdigit 4626                                  _input 007D  
                                _putch 47B2                                  pclath 000FFA  
                                tablat 000FF5                       __end_ofi2___wmul 469C  
                     __end_ofi2_getRTC 3D22                    _log_count_pop_w_tab 00F0  
                                status 000FD8                         __CFG_PBADEN$ON 000000  
                        i2printf@width 0028                       __end_ofi2_printf 1916  
                   __size_ofi2___lwdiv 0052                     __size_ofi2___lwmod 0042  
                     __end_ofi2_strcpy 436A                            Loading@addr 00B3  
                     _count_can_no_lab 005D                   __size_of_EEPROM_read 0018  
                      __initialization 40BC                           __end_of_Test 33CE  
                   __size_ofi2_lcdInst 000C                           __end_of_main 3648  
                         __end_of_keys FB36                           __end_of_sort 4708  
                           i2printf@ap 0020                             i2printf@cp 001E  
                   __size_ofi2_isdigit 001E                                 ??_Test 00C6  
  __size_of_change_state_to_menu_start 002C                        ??_machineConfig 0080  
                               ??_main 00DA                                 ??_sort 00B8  
                        __activetblptr 000003             updateServoPosition@my_time 0086  
           updateServoPosition@time_us 0080                             i2strcpy@cp 0005  
                           i2strcpy@to 0001                      ?_I2C_Master_Start 0001  
                  EEPROM_write@address 00AB                 __size_ofi2_EEPROM_read 0016  
                    ?_I2C_Master_Write 0081                                 ?_getIR 0001  
                   ??_I2C_Master_Start 0081                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 0083  
                               _ADCON2 000FC0                                 STR_100 FC2C  
                               STR_101 FC3D                                 STR_110 FCB4  
                               STR_102 FBB5                                 STR_103 FE3A  
                               STR_111 FB6D                                 STR_104 FBE8  
                               STR_112 FB7F                                 STR_113 FF71  
                               STR_105 FBC6                                 STR_106 FBE8  
                               STR_114 FC1B                                 _ADRESH 000FC4  
                               STR_107 FE96                                 STR_115 FC4E  
                               STR_116 FFB6                                 STR_108 FE78  
                               _EEADRH 000FAA                                 STR_109 FE69  
                               _ADRESL 000FC3                                 _EEDATA 000FA8  
                               _EECON2 000FA7                       ___awdiv@dividend 0086  
                      i2lcdNibble@data 0002                                 ?_putch 0001  
               __size_of_initSortTimer 00AA                        i2lcdNibble@temp 0001  
            i2_change_state_to_menu_12 439A              i2_change_state_to_menu_22 436A  
                               _INT1IE 007F83                                 _INT1IF 007F80  
                               _CVRCON 000FB5                                 i2l1259 1782  
                               i2l1706 40B2                                 i2l1716 4220  
                               i2l5401 4216                                 i2l6131 254A  
                               i2l6141 25B8                                 i2l6133 2560  
                               i2l6125 24DE                                 i2l6303 2A0C  
                               i2l6151 2626                                 i2l6143 25CE  
                               i2l6135 2576                                 i2l6305 2A10  
                               i2l6153 263C                                 i2l6145 25E4  
                               i2l6137 258C                                 i2l5339 46BC  
                               i2l5363 4740                                 i2l6331 2A64  
                               i2l6323 2A40                                 i2l6251 294A  
                               i2l6235 2912                                 i2l6227 28F8  
                               i2l6147 25FA                                 i2l6139 25A2  
                               i2l5373 4080                                 i2l5701 16EA  
                               i2l6317 2A32                                 i2l6309 2A1A  
                               i2l6253 2950                                 i2l6237 2922  
                               i2l6245 2930                                 i2l6149 2610  
                               i2l6157 2652                                 i2l5631 3CE8  
                               i2l5375 4088                                 i2l5711 1736  
                               i2l5703 16F4                                 i2l6335 2A76  
                               i2l6327 2A52                                 i2l6255 2956  
                               i2l6263 2968                                 i2l6239 2926  
                               i2l6159 26AC                                 i2l5641 3D12  
                               i2l5385 40A8                                 i2l5377 408C  
                               i2l5393 41F6                                 i2l5713 1748  
                               i2l5705 16FA                                 i2l6257 295C  
                               i2l6249 2944                                 i2l6345 2A92  
                               i2l8121 2CBA                                 i2l5635 3CF8  
                               i2l5395 41FE                                 i2l5707 170C  
                               i2l8035 26F4                                 i2l6339 2A88  
                               i2l6283 29C4                                 i2l6275 29AC  
                               i2l6259 2962                                 i2l8123 2CBE  
                               i2l5397 4202                                 i2l5733 17C8  
                               i2l5717 174C                                 i2l8045 275E  
                               i2l6293 29EE                                 i2l5735 17CC  
                               i2l5663 15C2                                 i2l8055 2820  
                               i2l8039 2704                                 i2l5753 1818  
                               i2l5729 17B0                                 i2l5665 15D0  
                               i2l6289 29D2                                 i2l8161 2D26  
                               i2l8137 2CDA                                 i2l5771 1870  
                               i2l5747 17FE                                 i2l5691 1692  
                               i2l5683 166A                                 i2l5675 1608  
                               i2l5659 15B2                                 i2l6299 29F8  
                               i2l5773 1878                                 i2l5781 189E  
                               i2l5765 185A                                 i2l5757 183C  
                               i2l5693 169C                                 i2l5669 15D6  
                               i2l5783 18A4                                 i2l5759 1844  
                               i2l5695 16A0                                 i2l7711 2222  
                               i2l8183 2D70                                 i2l8159 2D24  
                               i2l5777 188C                                 i2l5793 4342  
                               i2l7801 2360                                 i2l7721 2244  
                               i2l7713 2228                                 i2l5787 18F2  
                               i2l5795 434A                                 i2l8451 24A0  
                               i2l5789 18FA                                 i2l5965 326A  
                               i2l7821 23B6                                 i2l7813 2392  
                               i2l7805 2376                                 i2l7741 227C  
                               i2l7725 2252                                 i2l7717 2236  
                               i2l8455 2980                                 i2l8447 2462  
                               i2l5977 32AE                                 i2l5969 327A  
                               i2l8457 299C                                 i2l8449 2484  
                               i2l7841 2404                                 i2l7833 23E0  
                               i2l7825 23C4                                 i2l7817 23A0  
                               i2l7809 2384                                 i2l7761 22C4  
                               i2l7753 22A8                                 i2l7745 228A  
                               i2l7737 226E                                 i2l7729 2260  
                               i2l7853 2436                                 i2l7845 2412  
                               i2l7837 23F6                                 i2l7829 23D2  
                               i2l7781 2312                                 i2l7773 22F6  
                               i2l7765 22D2                                 i2l7757 22B6  
                               i2l7749 229A                                 i2l7849 2420  
                               i2l7793 2344                                 i2l7785 2320  
                               i2l7777 2304                                 i2l7769 22E0  
                               i2l7859 2444                                 i2l7797 2352  
                               i2l7789 2336                                 _OSCCON 000FD3  
                               _TMR0IE 007F95                                 _TMR0IF 007F92  
                            ??i2_putch 0003                                 _TMR1IE 007CE8  
                               _TMR1IF 007CF0                                 _TMR2IE 007CE9  
                               _TMR3IE 007D01                                 _TMR3IF 007D09  
                               _TMR0ON 007EAF                                 _TMR1ON 007E68  
                               _TMR3ON 007D88                                 _SSPADD 000FC8  
                               _TRISC3 007CA3                                 _TRISC4 007CA4  
                               _SSPBUF 000FC9                              ??_Loading 00B1  
                     __end_of_delay_ms 464E                   delay_ms@milliseconds 0081  
                       __CFG_XINST$OFF 000000                       ID@sensor_outputs 008C  
                     __end_of_dispLogs 46E6                            ?i2_printRTC 0001  
                     retrieveLog@byte1 000B                       retrieveLog@byte2 000C  
                     retrieveLog@byte3 000D                   __end_of_Distribution 3070  
                               ___wmul 42D0                              ??___awdiv 008A  
                       __CFG_STVREN$ON 000000                                 _getMAG 4306  
                            ??___awmod 0084                            logRun@byte1 00B2  
                          logRun@byte2 00B3                            logRun@byte3 00B4  
                               _getRTC 3AB8                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 472A  
                               _initUI 451A                                 _readIR 410A  
                               _logRun 3070                                 clear_0 40E2  
                               clear_1 40EE                                 clear_2 40FA  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                           _PortTestA5 390E                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 1170  
                            ??_handler 004B                __size_of_initGlobalVars 0068  
                         ?_retrieveLog 0007                                 _strcpy 429A  
                            ??_readADC 0080                              ??_initLCD 0083  
                            ??_loadRTC 0095                              ??_readMAG 0082  
 __end_ofi2_change_state_to_menu_start 4676  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 464E                            ?_BothServos 0001  
                         ??_EEPROMTest 0080                              ??_isdigit 0080  
                   __size_of_PortTests 0084                      __end_ofi2___lwdiv 40BC  
                     __end_of_printRTC 21F2                           __mediumconst FB24  
                    __end_ofi2___lwmod 422A                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                 _log_count_pop_no_tab 00EE                  __end_of_algorithmTest 3588  
                    __end_ofi2_lcdInst 47EA                      __end_ofi2_isdigit 4748  
                           __accesstop 0080                __end_of__initialization 4100  
                        ?_inputHandler 002A                          ___rparam_used 000001  
              printSortTimer@start_sec 003D                  __size_of_actuatorTest 08B8  
                        i2_EEPROM_read 4776                           Loading@byte1 00B5  
                   i2___lwmod@dividend 0001                     __end_of_EEPROMTest 4828  
                       __pcstackCOMRAM 0001                  __size_of_EEPROM_write 00E4  
                         __pidataBANK1 47FE                          __end_of_getIR 406A  
                          i2printRTC@i 0041                          _initSortTimer 37C2  
          __end_of_updateServoPosition 3CB0                          __end_of_putch 47C2  
                          i2printf@len 0022                            i2printf@val 0024  
                           __end_of_ID 2F12                             __end_of_UI 1170  
                   printSortTimer@hour 002D                              ?i2___wmul 0001  
                   __size_of_lcdNibble 0068                              ?i2_getRTC 0001  
                          i2putch@data 0003                  printSortTimer@curTime 002F  
   __end_of_change_state_to_menu_start 45D0          ?i2_change_state_to_menu_start 0001  
           _change_state_to_menu_start 45A4                  printSortTimer@cur_sec 003F  
                            ?i2_printf 000D                                ??_getIR 0086  
                            ?i2_strcpy 0001                       _count_pop_no_tab 0061  
                  __size_ofi2_printRTC 0236                                ??_putch 0082  
                         _actuatorTest 0012                             __pbssBANK0 00DA  
                           __pbssBANK1 0100                           ?_stopSignals 0001  
                       ??_inputHandler 002C                           _EEPROM_write 33CE  
             ?_change_state_to_menu_11 0001               ?_change_state_to_menu_12 0001  
                              UI@F3225 012F               ?_change_state_to_menu_22 0001  
             ?_change_state_to_menu_23 0001                         ?i2_EEPROM_read 0001  
             ?_change_state_to_logs_11 0001               ?_change_state_to_logs_12 0001  
             ?_change_state_to_logs_22 0001               ?_change_state_to_logs_23 0001  
             ?_change_state_to_logs_33 0001               ?_change_state_to_logs_34 0001  
                  __size_of_BothServos 0314                      __end_of_PortTests 3BC2  
                    printRTC@RTC_month 00BC                           ?i2_lcdNibble 0001  
                              UI@i_412 00CA                                UI@i_413 00CB  
                              UI@i_431 00CC                                UI@i_440 00D1  
                              UI@i_432 00CD                                UI@i_409 00C9  
                              UI@i_443 00D2                                UI@i_435 00CE  
                              UI@i_444 00D3                                UI@i_436 00CF  
                              UI@i_447 00D4                                UI@i_439 00D0  
                              UI@i_448 00D5                         ?_initSortTimer 0001  
                              ?___wmul 0080                                ?_getMAG 0001  
                              ?_getRTC 0001                                ?_initUI 0001  
                              ?_readIR 0001                                ?_logRun 0001  
             updateServoPosition@timer 0082                                UI@month 00D6  
                          ?_PortTestA5 0001                                ?_printf 008E  
                              _UI$2295 00C6                                ?_strcpy 0080  
                           ??i2___wmul 0005                             ??i2_getRTC 0004  
                            ?_delay_ms 0001                             ??i2_printf 0019  
                           ??i2_strcpy 0005                              ?_dispLogs 0012  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                              _SSPSTAT 000FC7                                _RTCflag 00DE  
                              i2_putch 47D2                              ?_initTime 0080  
                      _f_loadingNewCan 00E2                        i2printRTC@month 003D  
                __size_of_Distribution 015E            __size_ofi2_I2C_Master_Start 0008  
                    __end_of_lcdNibble 3DF2                                _Loading 2AC0  
          __size_ofi2_I2C_Master_Write 000A                       EEPROM_write@data 00AD  
                              __Hparam 0000                                __Lparam 0000  
   __size_ofi2_change_state_to_menu_12 0030     __size_ofi2_change_state_to_menu_22 0030  
                            ?_printRTC 0001                                ___awdiv 3648  
                              ___awmod 386C                             _initServos 3F10  
                              ___lldiv 3706                        __size_of___wmul 0036  
                      __size_of_getMAG 0032                                ___lwdiv 3BC2  
                              ___lwmod 3DF2                        __size_of_getRTC 0086  
                      printSortTimer@i 0049                              _CMCONbits 000FB4  
                    retrieveLog@logNum 0007                           logRun@byte11 00B6  
                      __size_of_initUI 002E                        __size_of_readIR 004C  
                              __pcinit 40BC                   i2EEPROM_read@address 0001  
                      __size_of_logRun 013C                           logRun@byte_i 00B5  
                              __ramtop 1000                         _initGlobalVars 3D22  
                              _lcdInst 47C2                                _handler 0008  
                              __ptext0 3588                                __ptext1 4760  
                              __ptext2 46E6                                __ptext3 2AC0  
                              __ptext4 37C2                                __ptext5 3D22  
                              __ptext6 4016                                __ptext7 410A  
                              __ptext8 4626                                __ptext9 2DAE  
                      __size_of_printf 0438                                _readADC 45D0  
                      __size_of_strcpy 0036                                _initLCD 41A2  
                              _cur_can 012B                                _loadRTC 39A4  
                              _readMAG 4156                                _dpowers FB36  
                   actuatorTest@i_1650 00B2                     actuatorTest@i_1651 00B3  
                   actuatorTest@i_1660 00B9                     actuatorTest@i_1644 00AE  
                   actuatorTest@i_1653 00B4                     actuatorTest@i_1645 00AF  
                   actuatorTest@i_1637 00AD                     actuatorTest@i_1670 00BF  
                   actuatorTest@i_1654 00B5                     actuatorTest@i_1663 00BA  
                   actuatorTest@i_1647 00B0                     actuatorTest@i_1664 00BB  
                   actuatorTest@i_1656 00B6                     actuatorTest@i_1648 00B1  
                   actuatorTest@i_1673 00C0                     actuatorTest@i_1657 00B7  
                   actuatorTest@i_1674 00C1                     actuatorTest@i_1666 00BC  
                   actuatorTest@i_1667 00BD                     actuatorTest@i_1659 00B8  
                   actuatorTest@i_1676 00C2                     actuatorTest@i_1677 00C3  
                   actuatorTest@i_1669 00BE                                _isdigit 45FC  
                        ?_ToggleTestA5 0001                       ___awmod@dividend 0080  
                              getRTC@i 0083                   __size_of_retrieveLog 011A  
                           ??_delay_ms 0080               __size_of_I2C_Master_Init 0060  
             __size_of_I2C_Master_Read 002E                          _log_startTime 0100  
             __size_of_I2C_Master_Wait 0014               __size_of_I2C_Master_Stop 0008  
                           ??_dispLogs 0014                           _Distribution 2F12  
                       __pintcode_body 2C40                   end_of_initialization 4100  
                              logRun@i 00B7                             ??_initTime 0086  
                      ??i2_EEPROM_read 0003                                int_func 2C40  
                  i2___wmul@multiplier 0001                          ??_EEPROM_read 0082  
                  __size_of_PortTestA5 0096              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 0084  
                      ___lldiv@counter 008C                        ??_initSortTimer 0085  
                              printf@c 00A8                           ??i2_printRTC 002A  
                              printf@f 008E                             ??_printRTC 00AB  
                     I2C_Master_Init@c 008D                       I2C_Master_Read@a 0081  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
               __end_of_initGlobalVars 3D8A                             _sensorTest 1C2A  
                           _servoTimes 011C                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 2AC0  
                         ??_BothServos 00AB                         ??_ToggleTestA5 00AB  
                __end_of_machineConfig 3F10                             _updateMenu 21F2  
                        ?_PusherTestA5 0001                      i2_I2C_Master_Read 469C  
                            _IR_signal 00DA                      i2_I2C_Master_Wait 47A0  
                    i2_I2C_Master_Stop 4816                      i2___lwdiv@divisor 0008  
                      _log_count_total 00F2                              i2___lwdiv 406A  
                            i2___lwmod 41E8                      i2___lwdiv@counter 000C  
                   ?i2_I2C_Master_Read 0001                     ?i2_I2C_Master_Wait 0001  
                   __end_ofi2_printRTC 26E8                     ?i2_I2C_Master_Stop 0001  
                        actuatorTest@i 00C4           ??_change_state_to_menu_start 00C4  
                            i2_lcdInst 47DE                             _total_time 00F8  
                          printf@width 00A9                   __size_of_stopSignals 0016  
                  ??i2_I2C_Master_Read 0002                              i2_isdigit 472A  
                  ??i2_I2C_Master_Wait 0001                    ??i2_I2C_Master_Stop 0002  
                            i2getRTC@i 0004                     __end_of_BothServos 1C2A  
                  __end_of_EEPROM_read 4760                            ?_initServos 0001  
                      ?_initGlobalVars 0001                         __end_of___wmul 4306  
                       __end_of_getMAG 4338                         __end_of_getRTC 3B3E  
                 __size_ofi2_lcdNibble 0056                          EEPROM_write@i 00AF  
                        i2lcdInst@data 0003                         __end_of_initUI 4548  
                       __end_of_readIR 4156                         __end_of_logRun 31AC  
                     i2___wmul@product 0005                         __end_of_printf 15A8  
                         i2printf@flag 0026                         __end_of_strcpy 42D0  
            __end_ofi2_I2C_Master_Read 46C2              __end_ofi2_I2C_Master_Wait 47B2  
                       ??_PusherTestA5 00AB                           i2printf@prec 001D  
                  start_initialization 40BC              __end_ofi2_I2C_Master_Stop 481E  
                           readMAG@res 0084                      __size_ofi2___wmul 0026  
                      _count_can_w_lab 005F            ?_change_state_to_menu_start 0001  
                    __size_ofi2_getRTC 0072                              i2printf@c 0027  
                            i2printf@f 000D                     EEPROM_write@i_1328 00B0  
                i2I2C_Master_Read@temp 0003                             ?i2___lwdiv 0006  
                           ?i2___lwmod 0001                      __size_ofi2_printf 036E  
                    __size_ofi2_strcpy 0032                      ??_I2C_Master_Init 0091  
                    ??_I2C_Master_Read 0081                      ??_I2C_Master_Wait 0080  
                           ?i2_lcdInst 0001                      ??_I2C_Master_Stop 0081  
                     __CFG_OSC$INTIO67 000000                             ?i2_isdigit 0001  
                           initTime@DD 0083                             initTime@MM 0084  
                           initTime@YY 0085                        retrieveLog@addr 0010  
                           logRun@addr 00B9                               ??___wmul 0084  
                             ??_getMAG 0086                               ??_getRTC 0083  
               __size_of_algorithmTest 00D6                              _PortTests 3B3E  
                          ?_sensorTest 0001                            __pdataBANK1 012F  
                     __CFG_LPT1OSC$OFF 000000                               ??_initUI 00C4  
                             ??_readIR 0082                               ??_logRun 00B1  
                         ??_PortTestA5 00AB                 printSortTimer@timeDiff 0047  
     __size_of_change_state_to_menu_11 0030       __size_of_change_state_to_menu_12 0038  
     __size_of_change_state_to_menu_22 0038       __size_of_change_state_to_menu_23 0030  
                             ??_printf 009A       __size_of_change_state_to_logs_11 0030  
     __size_of_change_state_to_logs_12 0030       __size_of_change_state_to_logs_22 0030  
     __size_of_change_state_to_logs_23 002E       __size_of_change_state_to_logs_33 0030  
     __size_of_change_state_to_logs_34 0030                               ??_strcpy 0084  
                  _printSortTimer$2415 0045                            __pbssCOMRAM 005B  
         __size_of_updateServoPosition 0076                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                __size_of_printSortTimer 01F2  
                    i2___lwmod@divisor 0003                      i2___lwmod@counter 0005  
                         _isdigit$1942 0081                      __size_of_delay_ms 0028  
                       initSortTimer@i 0088                      printSortTimer@min 0041  
                    printSortTimer@sec 0043                    __size_of_initServos 005A  
                    __size_of_dispLogs 0024                       printRTC@INT_time 00AE  
                         i2strcpy@from 0003                               ?i2_putch 0001  
                      _count_pop_w_tab 0063                            _EEPROM_read 4748  
                   __end_of_PortTestA5 39A4                       _I2C_Master_Start 480E  
                            _f_lastCan 0071                               ?_Loading 0001  
                  i2I2C_Master_Write@d 0002                       _I2C_Master_Write 47EA  
                    __size_of_initTime 0022                   __end_of_ToggleTestA5 3AB8  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                          __pmediumconst FB24  
                            _lcdNibble 3D8A                  __size_of_inputHandler 01E6  
                             ?___awdiv 0086                               ?___awmod 0080  
                             ?___lldiv 0080                               ?___lwdiv 0080  
                           ?_PortTests 0001                               ?___lwmod 0087  
                    __size_of_printRTC 02CA                               ?_lcdInst 0001  
                             ?_handler 0001                               ?_readADC 0001  
                             ?_initLCD 0001                               ?_loadRTC 0001  
                             ?_readMAG 0001                               ?_isdigit 0001  
           __size_ofi2_I2C_Master_Read 0026             __size_ofi2_I2C_Master_Wait 0012  
           __size_ofi2_I2C_Master_Stop 0008                              _firstboot 0075  
                            _cur_state 00E0                       ___lwdiv@quotient 0084  
                       __size_of_getIR 0054                          _algorithmTest 34B2  
                          ??i2___lwdiv 000A                            ??i2___lwmod 0005  
                       __size_of_putch 0010                            __size_of_ID 0164  
                          __size_of_UI 08A6                         ToggleTestA5@on 00AC  
                  __size_of_sensorTest 02FE             __end_ofi2_I2C_Master_Start 4826  
           __end_ofi2_I2C_Master_Write 47FE                            ??i2_lcdInst 0003  
                       ___wmul@product 0084                               _LATAbits 000F89  
                             _LATCbits 000F8B                               _LATDbits 000F8C  
                             _LATEbits 000F8D                           _inputHandler 28DA  
                          ??i2_isdigit 0001                               i2u422_40 16CE  
                             i2u422_47 16C4                               i2u426_40 172E  
                             i2u426_47 1724                               _PIR2bits 000FA1  
                 __end_of_PusherTestA5 3FC0                               i2u367_40 46BA  
                             i2u465_40 2540                               i2u825_47 2918  
                             i2u690_40 281A                               i2u826_47 3FD8  
                             i2u827_47 3FE2                               i2u828_47 4004  
                             i2u829_47 400E                    __size_of_updateMenu 02C0  
                       _log_completion 00E8                       __CFG_WDTPS$32768 000000  
                           ?_lcdNibble 0001                              _was_low_1 0079  
                            _was_low_3 007B                          ??_retrieveLog 0009  
                           _ADCON0bits 000FC2                      ___wmul@multiplier 0080  
                            _startTime 010E                               i2___wmul 4676  
                        lcdNibble@data 0081                               i2_getRTC 3CB0  
                           printf@flag 00A7                          lcdNibble@temp 0080  
                           printf@prec 009E                               Loading@i 00B6  
                             i2_printf 15A8                               i2_strcpy 4338  
                       ?_algorithmTest 0001                    I2C_Master_Read@temp 0082  
                            copy_data0 40D0                              readIR@res 0084  
                     __size_ofi2_putch 000C                             _EECON1bits 000FA6  
                __end_ofi2_EEPROM_read 478C                            _count_total 00FE  
                     ??_initGlobalVars 0080                               __Hrparam 0000  
                     __size_of_Loading 0180                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                              logRun@num 00B1  
                __end_of_initSortTimer 386C                           ??_initServos 0088  
                          ??_PortTests 0080                       __size_of___awdiv 00BE  
                     __size_of___awmod 00A2                _change_state_to_menu_11 43FA  
           ?i2_change_state_to_menu_12 0001                _change_state_to_menu_12 4262  
           ?i2_change_state_to_menu_22 0001                _change_state_to_menu_22 422A  
              _change_state_to_menu_23 43CA                  i2___wmul@multiplicand 0003  
                     __size_of___lldiv 00BC                       __size_of___lwdiv 0078  
              _change_state_to_logs_11 44EA                _change_state_to_logs_12 44BA  
              _change_state_to_logs_22 448A                _change_state_to_logs_23 4576  
              _change_state_to_logs_33 445A                _change_state_to_logs_34 442A  
                     __size_of___lwmod 0062                         readADC@channel 0081  
                   i2I2C_Master_Read@a 0002                       __size_of_lcdInst 0010  
                     __size_of_handler 2DA6                             _EEPROMTest 4826  
                      _I2C_Master_Init 3E54                       __size_of_readADC 002C  
                      _I2C_Master_Read 4548                       __size_of_initLCD 0046  
                         _f_ID_receive 006B                       __size_of_loadRTC 008C  
                     __size_of_readMAG 004C                        _I2C_Master_Wait 478C  
                      _I2C_Master_Stop 4806                       __size_of_isdigit 002A  
                             _delay_ms 4626                         _printSortTimer 26E8  
                      ___lwdiv@divisor 0082                        ___lwdiv@counter 0086  
                  __end_of_retrieveLog 32C6                               __ptext10 4306  
                             __ptext11 2F12                               __ptext20 45A4  
                             __ptext12 3EB4                               __ptext21 4708  
                             __ptext13 3070                               __ptext30 4548  
                             __ptext22 41A2                               __ptext14 33CE  
                             __ptext31 478C                               __ptext23 08CA  
                             __ptext15 4748                               __ptext40 34B2  
                             __ptext32 422A                               __ptext24 1F28  
                             __ptext16 451A                               __ptext41 0012  
                             __ptext33 4262                               __ptext25 429A  
                             __ptext17 39A4                               __ptext50 45FC  
                             __ptext42 3A30                               __ptext34 386C  
                             __ptext26 3AB8                               __ptext18 3E54  
                             __ptext51 42D0                               __ptext43 3F6A  
                             __ptext35 3648                               __ptext27 47EA  
                             __ptext19 3706                               __ptext60 464E  
                             __ptext52 3DF2                               __ptext44 3B3E  
                             __ptext36 32C6                               __ptext28 4806  
                             __ptext61 24B2                               __ptext53 3BC2  
                             __ptext45 390E                               __ptext37 1C2A  
                             __ptext29 480E                               __ptext70 4576  
                             __ptext62 4338                               __ptext54 47C2  
                             __ptext46 4826                               __ptext38 4156  
                             __ptext71 448A                               __ptext63 28DA  
                             __ptext55 3D8A                               __ptext47 1916  
                             __ptext39 45D0                               __ptext80 472A  
                             __ptext72 44BA                               __ptext64 436A  
                             __ptext56 3F10                               __ptext48 1170  
                             __ptext81 4676                               __ptext73 44EA  
                             __ptext65 439A                               __ptext57 3C3A  
                             __ptext49 47B2                               __ptext90 469C  
                             __ptext82 41E8                               __ptext74 46C2  
                             __ptext66 43CA                               __ptext91 47A0  
                             __ptext83 406A                               __ptext75 31AC  
                             __ptext67 43FA                               __ptext59 21F2  
                             __ptext84 47DE                               __ptext76 4776  
                             __ptext68 442A                               __ptext85 3FC0  
                             __ptext77 26E8                               __ptext69 445A  
                             __ptext86 3CB0                               __ptext78 15A8  
                             __ptext87 47F4                               __ptext79 47D2  
                             __ptext88 4816                               __ptext89 481E  
                             _dispLogs 46C2                          ?_actuatorTest 0001  
                        ??_stopSignals 0080                  __size_of_ToggleTestA5 0088  
                           strcpy@from 0082                         i2_isdigit$1942 0002  
                   __end_of_initServos 3F6A                          __size_of_Test 0108  
                        ?_EEPROM_write 00AB                               _initTime 4708  
                        __size_of_main 00C0                          __size_of_sort 0022  
       ??i2_change_state_to_menu_start 0043                               _logstate 00F6  
                  _updateServoPosition 3C3A                 __size_of_machineConfig 005C  
                        ??i2_lcdNibble 0001                               _printRTC 1F28  
                          ??_lcdNibble 0080                              printRTC@i 00C2  
                             int$flags 007E                           ??_sensorTest 00AB  
                       _log_total_time 00F4                     _f_can_coming_to_ID 006D  
                            printf@len 00A3                              printf@val 00A5  
    __end_ofi2_change_state_to_menu_12 43CA      __end_ofi2_change_state_to_menu_22 439A  
                             loadRTC@i 0096                 __end_of_printSortTimer 28DA  
                            putch@data 0082               __end_of_I2C_Master_Start 4816  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 47F4  
                           _INTCONbits 000FF2                   ?_updateServoPosition 0080  
                         _ToggleTestA5 3A30                           ??_updateMenu 0043  
                      ??_algorithmTest 00AB                             _MAG_signal 00DC  
                             isdigit@c 0082                          sensorTest@res 00AD  
                       ??_actuatorTest 00AB                               intlevel2 0000  
                       ??_EEPROM_write 00AE                     __end_of_sensorTest 1F28  
                     ___lwmod@dividend 0087                  __size_of_PusherTestA5 0056  
                     ___lldiv@dividend 0080                           ?_EEPROM_read 0080  
                  __end_of_stopSignals 4776              ??_change_state_to_menu_11 002A  
            ??_change_state_to_menu_12 00AB              ??_change_state_to_menu_22 00AB  
            ??_change_state_to_menu_23 002A              ??_change_state_to_logs_11 002A  
            ??_change_state_to_logs_12 002A              ??_change_state_to_logs_22 002A  
            ??_change_state_to_logs_23 002A              ??_change_state_to_logs_33 002A  
            ??_change_state_to_logs_34 002A                               printf@ap 00A1  
                             printf@cp 009F                     __end_of_updateMenu 24B2  
              __end_of_I2C_Master_Init 3EB4                __end_of_I2C_Master_Read 4576  
              __end_of_I2C_Master_Wait 47A0                __end_of_I2C_Master_Stop 480E  
                          lcdInst@data 0082                          printRTC@F3216 0133  
                         retrieveLog@i 000E                            _retrieveLog 31AC  
                  __end_ofi2_lcdNibble 4016                  ??_updateServoPosition 0084  
                      ?_printSortTimer 0001                       ___lldiv@quotient 0088  
                    I2C_Master_Write@d 0081                            ?_EEPROMTest 0001  
                      ___lwmod@divisor 0089                      _f_can_distributed 012D  
                             strcpy@cp 0084                               strcpy@to 0080  
                        _machineConfig 3EB4                        ___lwmod@counter 008B  
                         _PusherTestA5 3F6A                          printRTC@month 00BE  
                        ?_Distribution 0001                          _machine_state 00FC  
                        dispLogs@myLog 0012                     i2printRTC@INT_time 002D  
